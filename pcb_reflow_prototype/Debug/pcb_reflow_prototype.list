
pcb_reflow_prototype.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006904  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000de4  08006a14  08006a14  00007a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077f8  080077f8  00009078  2**0
                  CONTENTS
  4 .ARM          00000000  080077f8  080077f8  00009078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080077f8  080077f8  00009078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077f8  080077f8  000087f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080077fc  080077fc  000087fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08007800  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000724  20000078  08007878  00009078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000079c  08007878  0000979c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb93  00000000  00000000  000090a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026f1  00000000  00000000  00017c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  0001a328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c47  00000000  00000000  0001b2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018931  00000000  00000000  0001bf1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013190  00000000  00000000  00034850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e01d  00000000  00000000  000479e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d59fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b20  00000000  00000000  000d5a40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000da560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	080069fc 	.word	0x080069fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	080069fc 	.word	0x080069fc

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2f>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a70:	bf24      	itt	cs
 8000a72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a7a:	d90d      	bls.n	8000a98 <__aeabi_d2f+0x30>
 8000a7c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a88:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a90:	bf08      	it	eq
 8000a92:	f020 0001 	biceq.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a9c:	d121      	bne.n	8000ae2 <__aeabi_d2f+0x7a>
 8000a9e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aa2:	bfbc      	itt	lt
 8000aa4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000aa8:	4770      	bxlt	lr
 8000aaa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab2:	f1c2 0218 	rsb	r2, r2, #24
 8000ab6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000abe:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	f040 0001 	orrne.w	r0, r0, #1
 8000ac8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000acc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad4:	ea40 000c 	orr.w	r0, r0, ip
 8000ad8:	fa23 f302 	lsr.w	r3, r3, r2
 8000adc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae0:	e7cc      	b.n	8000a7c <__aeabi_d2f+0x14>
 8000ae2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ae6:	d107      	bne.n	8000af8 <__aeabi_d2f+0x90>
 8000ae8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aec:	bf1e      	ittt	ne
 8000aee:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000af2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000af6:	4770      	bxne	lr
 8000af8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000afc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b00:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_frsub>:
 8000b08:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b0c:	e002      	b.n	8000b14 <__addsf3>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_fsub>:
 8000b10:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b14 <__addsf3>:
 8000b14:	0042      	lsls	r2, r0, #1
 8000b16:	bf1f      	itttt	ne
 8000b18:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b1c:	ea92 0f03 	teqne	r2, r3
 8000b20:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b24:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b28:	d06a      	beq.n	8000c00 <__addsf3+0xec>
 8000b2a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b2e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b32:	bfc1      	itttt	gt
 8000b34:	18d2      	addgt	r2, r2, r3
 8000b36:	4041      	eorgt	r1, r0
 8000b38:	4048      	eorgt	r0, r1
 8000b3a:	4041      	eorgt	r1, r0
 8000b3c:	bfb8      	it	lt
 8000b3e:	425b      	neglt	r3, r3
 8000b40:	2b19      	cmp	r3, #25
 8000b42:	bf88      	it	hi
 8000b44:	4770      	bxhi	lr
 8000b46:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b4a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b4e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b5a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b5e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4249      	negne	r1, r1
 8000b66:	ea92 0f03 	teq	r2, r3
 8000b6a:	d03f      	beq.n	8000bec <__addsf3+0xd8>
 8000b6c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b70:	fa41 fc03 	asr.w	ip, r1, r3
 8000b74:	eb10 000c 	adds.w	r0, r0, ip
 8000b78:	f1c3 0320 	rsb	r3, r3, #32
 8000b7c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b80:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b84:	d502      	bpl.n	8000b8c <__addsf3+0x78>
 8000b86:	4249      	negs	r1, r1
 8000b88:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b8c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b90:	d313      	bcc.n	8000bba <__addsf3+0xa6>
 8000b92:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b96:	d306      	bcc.n	8000ba6 <__addsf3+0x92>
 8000b98:	0840      	lsrs	r0, r0, #1
 8000b9a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b9e:	f102 0201 	add.w	r2, r2, #1
 8000ba2:	2afe      	cmp	r2, #254	@ 0xfe
 8000ba4:	d251      	bcs.n	8000c4a <__addsf3+0x136>
 8000ba6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000baa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bae:	bf08      	it	eq
 8000bb0:	f020 0001 	biceq.w	r0, r0, #1
 8000bb4:	ea40 0003 	orr.w	r0, r0, r3
 8000bb8:	4770      	bx	lr
 8000bba:	0049      	lsls	r1, r1, #1
 8000bbc:	eb40 0000 	adc.w	r0, r0, r0
 8000bc0:	3a01      	subs	r2, #1
 8000bc2:	bf28      	it	cs
 8000bc4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bc8:	d2ed      	bcs.n	8000ba6 <__addsf3+0x92>
 8000bca:	fab0 fc80 	clz	ip, r0
 8000bce:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bd2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bd6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bda:	bfaa      	itet	ge
 8000bdc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000be0:	4252      	neglt	r2, r2
 8000be2:	4318      	orrge	r0, r3
 8000be4:	bfbc      	itt	lt
 8000be6:	40d0      	lsrlt	r0, r2
 8000be8:	4318      	orrlt	r0, r3
 8000bea:	4770      	bx	lr
 8000bec:	f092 0f00 	teq	r2, #0
 8000bf0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bf4:	bf06      	itte	eq
 8000bf6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bfa:	3201      	addeq	r2, #1
 8000bfc:	3b01      	subne	r3, #1
 8000bfe:	e7b5      	b.n	8000b6c <__addsf3+0x58>
 8000c00:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c08:	bf18      	it	ne
 8000c0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c0e:	d021      	beq.n	8000c54 <__addsf3+0x140>
 8000c10:	ea92 0f03 	teq	r2, r3
 8000c14:	d004      	beq.n	8000c20 <__addsf3+0x10c>
 8000c16:	f092 0f00 	teq	r2, #0
 8000c1a:	bf08      	it	eq
 8000c1c:	4608      	moveq	r0, r1
 8000c1e:	4770      	bx	lr
 8000c20:	ea90 0f01 	teq	r0, r1
 8000c24:	bf1c      	itt	ne
 8000c26:	2000      	movne	r0, #0
 8000c28:	4770      	bxne	lr
 8000c2a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c2e:	d104      	bne.n	8000c3a <__addsf3+0x126>
 8000c30:	0040      	lsls	r0, r0, #1
 8000c32:	bf28      	it	cs
 8000c34:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c38:	4770      	bx	lr
 8000c3a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c3e:	bf3c      	itt	cc
 8000c40:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bxcc	lr
 8000c46:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c4a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c4e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c52:	4770      	bx	lr
 8000c54:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c58:	bf16      	itet	ne
 8000c5a:	4608      	movne	r0, r1
 8000c5c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c60:	4601      	movne	r1, r0
 8000c62:	0242      	lsls	r2, r0, #9
 8000c64:	bf06      	itte	eq
 8000c66:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c6a:	ea90 0f01 	teqeq	r0, r1
 8000c6e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c72:	4770      	bx	lr

08000c74 <__aeabi_ui2f>:
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	e004      	b.n	8000c84 <__aeabi_i2f+0x8>
 8000c7a:	bf00      	nop

08000c7c <__aeabi_i2f>:
 8000c7c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c80:	bf48      	it	mi
 8000c82:	4240      	negmi	r0, r0
 8000c84:	ea5f 0c00 	movs.w	ip, r0
 8000c88:	bf08      	it	eq
 8000c8a:	4770      	bxeq	lr
 8000c8c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c90:	4601      	mov	r1, r0
 8000c92:	f04f 0000 	mov.w	r0, #0
 8000c96:	e01c      	b.n	8000cd2 <__aeabi_l2f+0x2a>

08000c98 <__aeabi_ul2f>:
 8000c98:	ea50 0201 	orrs.w	r2, r0, r1
 8000c9c:	bf08      	it	eq
 8000c9e:	4770      	bxeq	lr
 8000ca0:	f04f 0300 	mov.w	r3, #0
 8000ca4:	e00a      	b.n	8000cbc <__aeabi_l2f+0x14>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_l2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cb4:	d502      	bpl.n	8000cbc <__aeabi_l2f+0x14>
 8000cb6:	4240      	negs	r0, r0
 8000cb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cbc:	ea5f 0c01 	movs.w	ip, r1
 8000cc0:	bf02      	ittt	eq
 8000cc2:	4684      	moveq	ip, r0
 8000cc4:	4601      	moveq	r1, r0
 8000cc6:	2000      	moveq	r0, #0
 8000cc8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ccc:	bf08      	it	eq
 8000cce:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cd2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cd6:	fabc f28c 	clz	r2, ip
 8000cda:	3a08      	subs	r2, #8
 8000cdc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ce0:	db10      	blt.n	8000d04 <__aeabi_l2f+0x5c>
 8000ce2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cec:	f1c2 0220 	rsb	r2, r2, #32
 8000cf0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cf4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf8:	eb43 0002 	adc.w	r0, r3, r2
 8000cfc:	bf08      	it	eq
 8000cfe:	f020 0001 	biceq.w	r0, r0, #1
 8000d02:	4770      	bx	lr
 8000d04:	f102 0220 	add.w	r2, r2, #32
 8000d08:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d14:	fa21 f202 	lsr.w	r2, r1, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d22:	4770      	bx	lr

08000d24 <__aeabi_fmul>:
 8000d24:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d32:	ea92 0f0c 	teqne	r2, ip
 8000d36:	ea93 0f0c 	teqne	r3, ip
 8000d3a:	d06f      	beq.n	8000e1c <__aeabi_fmul+0xf8>
 8000d3c:	441a      	add	r2, r3
 8000d3e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d42:	0240      	lsls	r0, r0, #9
 8000d44:	bf18      	it	ne
 8000d46:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d4a:	d01e      	beq.n	8000d8a <__aeabi_fmul+0x66>
 8000d4c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d50:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d54:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d58:	fba0 3101 	umull	r3, r1, r0, r1
 8000d5c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d60:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d64:	bf3e      	ittt	cc
 8000d66:	0049      	lslcc	r1, r1, #1
 8000d68:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d6c:	005b      	lslcc	r3, r3, #1
 8000d6e:	ea40 0001 	orr.w	r0, r0, r1
 8000d72:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d76:	2afd      	cmp	r2, #253	@ 0xfd
 8000d78:	d81d      	bhi.n	8000db6 <__aeabi_fmul+0x92>
 8000d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d82:	bf08      	it	eq
 8000d84:	f020 0001 	biceq.w	r0, r0, #1
 8000d88:	4770      	bx	lr
 8000d8a:	f090 0f00 	teq	r0, #0
 8000d8e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d92:	bf08      	it	eq
 8000d94:	0249      	lsleq	r1, r1, #9
 8000d96:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d9a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d9e:	3a7f      	subs	r2, #127	@ 0x7f
 8000da0:	bfc2      	ittt	gt
 8000da2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000da6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000daa:	4770      	bxgt	lr
 8000dac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000db0:	f04f 0300 	mov.w	r3, #0
 8000db4:	3a01      	subs	r2, #1
 8000db6:	dc5d      	bgt.n	8000e74 <__aeabi_fmul+0x150>
 8000db8:	f112 0f19 	cmn.w	r2, #25
 8000dbc:	bfdc      	itt	le
 8000dbe:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000dc2:	4770      	bxle	lr
 8000dc4:	f1c2 0200 	rsb	r2, r2, #0
 8000dc8:	0041      	lsls	r1, r0, #1
 8000dca:	fa21 f102 	lsr.w	r1, r1, r2
 8000dce:	f1c2 0220 	rsb	r2, r2, #32
 8000dd2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dda:	f140 0000 	adc.w	r0, r0, #0
 8000dde:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000de2:	bf08      	it	eq
 8000de4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000de8:	4770      	bx	lr
 8000dea:	f092 0f00 	teq	r2, #0
 8000dee:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000df2:	bf02      	ittt	eq
 8000df4:	0040      	lsleq	r0, r0, #1
 8000df6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dfa:	3a01      	subeq	r2, #1
 8000dfc:	d0f9      	beq.n	8000df2 <__aeabi_fmul+0xce>
 8000dfe:	ea40 000c 	orr.w	r0, r0, ip
 8000e02:	f093 0f00 	teq	r3, #0
 8000e06:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e0a:	bf02      	ittt	eq
 8000e0c:	0049      	lsleq	r1, r1, #1
 8000e0e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e12:	3b01      	subeq	r3, #1
 8000e14:	d0f9      	beq.n	8000e0a <__aeabi_fmul+0xe6>
 8000e16:	ea41 010c 	orr.w	r1, r1, ip
 8000e1a:	e78f      	b.n	8000d3c <__aeabi_fmul+0x18>
 8000e1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e20:	ea92 0f0c 	teq	r2, ip
 8000e24:	bf18      	it	ne
 8000e26:	ea93 0f0c 	teqne	r3, ip
 8000e2a:	d00a      	beq.n	8000e42 <__aeabi_fmul+0x11e>
 8000e2c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e30:	bf18      	it	ne
 8000e32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e36:	d1d8      	bne.n	8000dea <__aeabi_fmul+0xc6>
 8000e38:	ea80 0001 	eor.w	r0, r0, r1
 8000e3c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e40:	4770      	bx	lr
 8000e42:	f090 0f00 	teq	r0, #0
 8000e46:	bf17      	itett	ne
 8000e48:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e4c:	4608      	moveq	r0, r1
 8000e4e:	f091 0f00 	teqne	r1, #0
 8000e52:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e56:	d014      	beq.n	8000e82 <__aeabi_fmul+0x15e>
 8000e58:	ea92 0f0c 	teq	r2, ip
 8000e5c:	d101      	bne.n	8000e62 <__aeabi_fmul+0x13e>
 8000e5e:	0242      	lsls	r2, r0, #9
 8000e60:	d10f      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e62:	ea93 0f0c 	teq	r3, ip
 8000e66:	d103      	bne.n	8000e70 <__aeabi_fmul+0x14c>
 8000e68:	024b      	lsls	r3, r1, #9
 8000e6a:	bf18      	it	ne
 8000e6c:	4608      	movne	r0, r1
 8000e6e:	d108      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e70:	ea80 0001 	eor.w	r0, r0, r1
 8000e74:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e78:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e7c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e80:	4770      	bx	lr
 8000e82:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e86:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e8a:	4770      	bx	lr

08000e8c <__aeabi_fdiv>:
 8000e8c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e94:	bf1e      	ittt	ne
 8000e96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e9a:	ea92 0f0c 	teqne	r2, ip
 8000e9e:	ea93 0f0c 	teqne	r3, ip
 8000ea2:	d069      	beq.n	8000f78 <__aeabi_fdiv+0xec>
 8000ea4:	eba2 0203 	sub.w	r2, r2, r3
 8000ea8:	ea80 0c01 	eor.w	ip, r0, r1
 8000eac:	0249      	lsls	r1, r1, #9
 8000eae:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eb2:	d037      	beq.n	8000f24 <__aeabi_fdiv+0x98>
 8000eb4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000eb8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ebc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ec0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	bf38      	it	cc
 8000ec8:	005b      	lslcc	r3, r3, #1
 8000eca:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000ece:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	bf24      	itt	cs
 8000ed6:	1a5b      	subcs	r3, r3, r1
 8000ed8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000edc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ee6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eee:	bf24      	itt	cs
 8000ef0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ef4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ef8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000efc:	bf24      	itt	cs
 8000efe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f02:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f06:	011b      	lsls	r3, r3, #4
 8000f08:	bf18      	it	ne
 8000f0a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f0e:	d1e0      	bne.n	8000ed2 <__aeabi_fdiv+0x46>
 8000f10:	2afd      	cmp	r2, #253	@ 0xfd
 8000f12:	f63f af50 	bhi.w	8000db6 <__aeabi_fmul+0x92>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f1c:	bf08      	it	eq
 8000f1e:	f020 0001 	biceq.w	r0, r0, #1
 8000f22:	4770      	bx	lr
 8000f24:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f28:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f2c:	327f      	adds	r2, #127	@ 0x7f
 8000f2e:	bfc2      	ittt	gt
 8000f30:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f34:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f38:	4770      	bxgt	lr
 8000f3a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f3e:	f04f 0300 	mov.w	r3, #0
 8000f42:	3a01      	subs	r2, #1
 8000f44:	e737      	b.n	8000db6 <__aeabi_fmul+0x92>
 8000f46:	f092 0f00 	teq	r2, #0
 8000f4a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f4e:	bf02      	ittt	eq
 8000f50:	0040      	lsleq	r0, r0, #1
 8000f52:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f56:	3a01      	subeq	r2, #1
 8000f58:	d0f9      	beq.n	8000f4e <__aeabi_fdiv+0xc2>
 8000f5a:	ea40 000c 	orr.w	r0, r0, ip
 8000f5e:	f093 0f00 	teq	r3, #0
 8000f62:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f66:	bf02      	ittt	eq
 8000f68:	0049      	lsleq	r1, r1, #1
 8000f6a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f6e:	3b01      	subeq	r3, #1
 8000f70:	d0f9      	beq.n	8000f66 <__aeabi_fdiv+0xda>
 8000f72:	ea41 010c 	orr.w	r1, r1, ip
 8000f76:	e795      	b.n	8000ea4 <__aeabi_fdiv+0x18>
 8000f78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f7c:	ea92 0f0c 	teq	r2, ip
 8000f80:	d108      	bne.n	8000f94 <__aeabi_fdiv+0x108>
 8000f82:	0242      	lsls	r2, r0, #9
 8000f84:	f47f af7d 	bne.w	8000e82 <__aeabi_fmul+0x15e>
 8000f88:	ea93 0f0c 	teq	r3, ip
 8000f8c:	f47f af70 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000f90:	4608      	mov	r0, r1
 8000f92:	e776      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000f94:	ea93 0f0c 	teq	r3, ip
 8000f98:	d104      	bne.n	8000fa4 <__aeabi_fdiv+0x118>
 8000f9a:	024b      	lsls	r3, r1, #9
 8000f9c:	f43f af4c 	beq.w	8000e38 <__aeabi_fmul+0x114>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e76e      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fa4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fa8:	bf18      	it	ne
 8000faa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fae:	d1ca      	bne.n	8000f46 <__aeabi_fdiv+0xba>
 8000fb0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fb4:	f47f af5c 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000fb8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fbc:	f47f af3c 	bne.w	8000e38 <__aeabi_fmul+0x114>
 8000fc0:	e75f      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fc2:	bf00      	nop

08000fc4 <__gesf2>:
 8000fc4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fc8:	e006      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fca:	bf00      	nop

08000fcc <__lesf2>:
 8000fcc:	f04f 0c01 	mov.w	ip, #1
 8000fd0:	e002      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fd2:	bf00      	nop

08000fd4 <__cmpsf2>:
 8000fd4:	f04f 0c01 	mov.w	ip, #1
 8000fd8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fdc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fe4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe8:	bf18      	it	ne
 8000fea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fee:	d011      	beq.n	8001014 <__cmpsf2+0x40>
 8000ff0:	b001      	add	sp, #4
 8000ff2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ff6:	bf18      	it	ne
 8000ff8:	ea90 0f01 	teqne	r0, r1
 8000ffc:	bf58      	it	pl
 8000ffe:	ebb2 0003 	subspl.w	r0, r2, r3
 8001002:	bf88      	it	hi
 8001004:	17c8      	asrhi	r0, r1, #31
 8001006:	bf38      	it	cc
 8001008:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800100c:	bf18      	it	ne
 800100e:	f040 0001 	orrne.w	r0, r0, #1
 8001012:	4770      	bx	lr
 8001014:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001018:	d102      	bne.n	8001020 <__cmpsf2+0x4c>
 800101a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800101e:	d105      	bne.n	800102c <__cmpsf2+0x58>
 8001020:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001024:	d1e4      	bne.n	8000ff0 <__cmpsf2+0x1c>
 8001026:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800102a:	d0e1      	beq.n	8000ff0 <__cmpsf2+0x1c>
 800102c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <__aeabi_cfrcmple>:
 8001034:	4684      	mov	ip, r0
 8001036:	4608      	mov	r0, r1
 8001038:	4661      	mov	r1, ip
 800103a:	e7ff      	b.n	800103c <__aeabi_cfcmpeq>

0800103c <__aeabi_cfcmpeq>:
 800103c:	b50f      	push	{r0, r1, r2, r3, lr}
 800103e:	f7ff ffc9 	bl	8000fd4 <__cmpsf2>
 8001042:	2800      	cmp	r0, #0
 8001044:	bf48      	it	mi
 8001046:	f110 0f00 	cmnmi.w	r0, #0
 800104a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800104c <__aeabi_fcmpeq>:
 800104c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001050:	f7ff fff4 	bl	800103c <__aeabi_cfcmpeq>
 8001054:	bf0c      	ite	eq
 8001056:	2001      	moveq	r0, #1
 8001058:	2000      	movne	r0, #0
 800105a:	f85d fb08 	ldr.w	pc, [sp], #8
 800105e:	bf00      	nop

08001060 <__aeabi_fcmplt>:
 8001060:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001064:	f7ff ffea 	bl	800103c <__aeabi_cfcmpeq>
 8001068:	bf34      	ite	cc
 800106a:	2001      	movcc	r0, #1
 800106c:	2000      	movcs	r0, #0
 800106e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001072:	bf00      	nop

08001074 <__aeabi_fcmple>:
 8001074:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001078:	f7ff ffe0 	bl	800103c <__aeabi_cfcmpeq>
 800107c:	bf94      	ite	ls
 800107e:	2001      	movls	r0, #1
 8001080:	2000      	movhi	r0, #0
 8001082:	f85d fb08 	ldr.w	pc, [sp], #8
 8001086:	bf00      	nop

08001088 <__aeabi_fcmpge>:
 8001088:	f84d ed08 	str.w	lr, [sp, #-8]!
 800108c:	f7ff ffd2 	bl	8001034 <__aeabi_cfrcmple>
 8001090:	bf94      	ite	ls
 8001092:	2001      	movls	r0, #1
 8001094:	2000      	movhi	r0, #0
 8001096:	f85d fb08 	ldr.w	pc, [sp], #8
 800109a:	bf00      	nop

0800109c <__aeabi_fcmpgt>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff ffc8 	bl	8001034 <__aeabi_cfrcmple>
 80010a4:	bf34      	ite	cc
 80010a6:	2001      	movcc	r0, #1
 80010a8:	2000      	movcs	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_f2uiz>:
 80010b0:	0042      	lsls	r2, r0, #1
 80010b2:	d20e      	bcs.n	80010d2 <__aeabi_f2uiz+0x22>
 80010b4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010b8:	d30b      	bcc.n	80010d2 <__aeabi_f2uiz+0x22>
 80010ba:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010be:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010c2:	d409      	bmi.n	80010d8 <__aeabi_f2uiz+0x28>
 80010c4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010cc:	fa23 f002 	lsr.w	r0, r3, r2
 80010d0:	4770      	bx	lr
 80010d2:	f04f 0000 	mov.w	r0, #0
 80010d6:	4770      	bx	lr
 80010d8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010dc:	d101      	bne.n	80010e2 <__aeabi_f2uiz+0x32>
 80010de:	0242      	lsls	r2, r0, #9
 80010e0:	d102      	bne.n	80010e8 <__aeabi_f2uiz+0x38>
 80010e2:	f04f 30ff 	mov.w	r0, #4294967295
 80010e6:	4770      	bx	lr
 80010e8:	f04f 0000 	mov.w	r0, #0
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop

080010f0 <HAL_TIM_PeriodElapsedCallback>:
//	float out;
//
//} PIDController;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 if(htim->Instance == TIM2)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001100:	d102      	bne.n	8001108 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		/* set every 100ms */
		Sch_100ms = 255;
 8001102:	4b04      	ldr	r3, [pc, #16]	@ (8001114 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001104:	22ff      	movs	r2, #255	@ 0xff
 8001106:	701a      	strb	r2, [r3, #0]
	}


}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	bc80      	pop	{r7}
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	2000000c 	.word	0x2000000c

08001118 <HAL_TIM_TriggerCallback>:


void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim){
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	 if(htim->Instance == TIM3)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a05      	ldr	r2, [pc, #20]	@ (800113c <HAL_TIM_TriggerCallback+0x24>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d104      	bne.n	8001134 <HAL_TIM_TriggerCallback+0x1c>
		{
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800112a:	2201      	movs	r2, #1
 800112c:	2140      	movs	r1, #64	@ 0x40
 800112e:	4804      	ldr	r0, [pc, #16]	@ (8001140 <HAL_TIM_TriggerCallback+0x28>)
 8001130:	f002 fb1c 	bl	800376c <HAL_GPIO_WritePin>
		}
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40000400 	.word	0x40000400
 8001140:	40010800 	.word	0x40010800

08001144 <Filter_SMA>:


uint32_t Filter_SMA(uint32_t For_Filtered)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	/* Load new value */
	Filter_Buffer[FILTER_SMA_ORDER - 1] = For_Filtered;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	b29a      	uxth	r2, r3
 8001150:	4b19      	ldr	r3, [pc, #100]	@ (80011b8 <Filter_SMA+0x74>)
 8001152:	839a      	strh	r2, [r3, #28]
	/* For output value */
	uint32_t Output = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	60fb      	str	r3, [r7, #12]
	/* Sum */
	for(uint8_t i = 0; i < FILTER_SMA_ORDER; i++)
 8001158:	2300      	movs	r3, #0
 800115a:	72fb      	strb	r3, [r7, #11]
 800115c:	e00a      	b.n	8001174 <Filter_SMA+0x30>
	{
		Output += Filter_Buffer[i];
 800115e:	7afb      	ldrb	r3, [r7, #11]
 8001160:	4a15      	ldr	r2, [pc, #84]	@ (80011b8 <Filter_SMA+0x74>)
 8001162:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001166:	461a      	mov	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4413      	add	r3, r2
 800116c:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < FILTER_SMA_ORDER; i++)
 800116e:	7afb      	ldrb	r3, [r7, #11]
 8001170:	3301      	adds	r3, #1
 8001172:	72fb      	strb	r3, [r7, #11]
 8001174:	7afb      	ldrb	r3, [r7, #11]
 8001176:	2b0e      	cmp	r3, #14
 8001178:	d9f1      	bls.n	800115e <Filter_SMA+0x1a>
	}
	/* Divide */
	Output /= FILTER_SMA_ORDER;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	4a0f      	ldr	r2, [pc, #60]	@ (80011bc <Filter_SMA+0x78>)
 800117e:	fba2 2303 	umull	r2, r3, r2, r3
 8001182:	08db      	lsrs	r3, r3, #3
 8001184:	60fb      	str	r3, [r7, #12]
	/* Left Shift */
	for(uint8_t i = 0; i < FILTER_SMA_ORDER; i++)
 8001186:	2300      	movs	r3, #0
 8001188:	72bb      	strb	r3, [r7, #10]
 800118a:	e00b      	b.n	80011a4 <Filter_SMA+0x60>
				Filter_Buffer[i] = Filter_Buffer[i+1];
 800118c:	7abb      	ldrb	r3, [r7, #10]
 800118e:	1c5a      	adds	r2, r3, #1
 8001190:	7abb      	ldrb	r3, [r7, #10]
 8001192:	4909      	ldr	r1, [pc, #36]	@ (80011b8 <Filter_SMA+0x74>)
 8001194:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001198:	4a07      	ldr	r2, [pc, #28]	@ (80011b8 <Filter_SMA+0x74>)
 800119a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i = 0; i < FILTER_SMA_ORDER; i++)
 800119e:	7abb      	ldrb	r3, [r7, #10]
 80011a0:	3301      	adds	r3, #1
 80011a2:	72bb      	strb	r3, [r7, #10]
 80011a4:	7abb      	ldrb	r3, [r7, #10]
 80011a6:	2b0e      	cmp	r3, #14
 80011a8:	d9f0      	bls.n	800118c <Filter_SMA+0x48>
	/* Return filtered value */
	return (uint32_t) Output;
 80011aa:	68fb      	ldr	r3, [r7, #12]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	2000020c 	.word	0x2000020c
 80011bc:	88888889 	.word	0x88888889

080011c0 <pwm_duty_cycle>:

void pwm_duty_cycle(uint8_t dc){
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]

	htim3.Instance->CCR1 = ((float)(dc/100.0f))*(htim3.Instance->ARR);
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff fd55 	bl	8000c7c <__aeabi_i2f>
 80011d2:	4603      	mov	r3, r0
 80011d4:	490e      	ldr	r1, [pc, #56]	@ (8001210 <pwm_duty_cycle+0x50>)
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff fe58 	bl	8000e8c <__aeabi_fdiv>
 80011dc:	4603      	mov	r3, r0
 80011de:	461c      	mov	r4, r3
 80011e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <pwm_duty_cycle+0x54>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fd44 	bl	8000c74 <__aeabi_ui2f>
 80011ec:	4603      	mov	r3, r0
 80011ee:	4619      	mov	r1, r3
 80011f0:	4620      	mov	r0, r4
 80011f2:	f7ff fd97 	bl	8000d24 <__aeabi_fmul>
 80011f6:	4603      	mov	r3, r0
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <pwm_duty_cycle+0x54>)
 80011fc:	681c      	ldr	r4, [r3, #0]
 80011fe:	4610      	mov	r0, r2
 8001200:	f7ff ff56 	bl	80010b0 <__aeabi_f2uiz>
 8001204:	4603      	mov	r3, r0
 8001206:	6363      	str	r3, [r4, #52]	@ 0x34
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	bd90      	pop	{r4, r7, pc}
 8001210:	42c80000 	.word	0x42c80000
 8001214:	200001a4 	.word	0x200001a4

08001218 <PID_control>:

void PID_control(volatile float *current_tmp, float target_tmp){
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]

	pid_error = target_tmp - *current_tmp;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4619      	mov	r1, r3
 8001228:	6838      	ldr	r0, [r7, #0]
 800122a:	f7ff fc71 	bl	8000b10 <__aeabi_fsub>
 800122e:	4603      	mov	r3, r0
 8001230:	461a      	mov	r2, r3
 8001232:	4b3a      	ldr	r3, [pc, #232]	@ (800131c <PID_control+0x104>)
 8001234:	601a      	str	r2, [r3, #0]

	P = pid_error;
 8001236:	4b39      	ldr	r3, [pc, #228]	@ (800131c <PID_control+0x104>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a39      	ldr	r2, [pc, #228]	@ (8001320 <PID_control+0x108>)
 800123c:	6013      	str	r3, [r2, #0]
	I = pid_error + I;
 800123e:	4b37      	ldr	r3, [pc, #220]	@ (800131c <PID_control+0x104>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a38      	ldr	r2, [pc, #224]	@ (8001324 <PID_control+0x10c>)
 8001244:	6812      	ldr	r2, [r2, #0]
 8001246:	4611      	mov	r1, r2
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fc63 	bl	8000b14 <__addsf3>
 800124e:	4603      	mov	r3, r0
 8001250:	461a      	mov	r2, r3
 8001252:	4b34      	ldr	r3, [pc, #208]	@ (8001324 <PID_control+0x10c>)
 8001254:	601a      	str	r2, [r3, #0]
	D = pid_error - pid_last_error;
 8001256:	4b31      	ldr	r3, [pc, #196]	@ (800131c <PID_control+0x104>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a33      	ldr	r2, [pc, #204]	@ (8001328 <PID_control+0x110>)
 800125c:	6812      	ldr	r2, [r2, #0]
 800125e:	4611      	mov	r1, r2
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fc55 	bl	8000b10 <__aeabi_fsub>
 8001266:	4603      	mov	r3, r0
 8001268:	461a      	mov	r2, r3
 800126a:	4b30      	ldr	r3, [pc, #192]	@ (800132c <PID_control+0x114>)
 800126c:	601a      	str	r2, [r3, #0]
	pid_last_error = pid_error;
 800126e:	4b2b      	ldr	r3, [pc, #172]	@ (800131c <PID_control+0x104>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a2d      	ldr	r2, [pc, #180]	@ (8001328 <PID_control+0x110>)
 8001274:	6013      	str	r3, [r2, #0]
	pid_duty_cycle_change = P*Kp + I*Ki + D*Kd;
 8001276:	4b2a      	ldr	r3, [pc, #168]	@ (8001320 <PID_control+0x108>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a2d      	ldr	r2, [pc, #180]	@ (8001330 <PID_control+0x118>)
 800127c:	6812      	ldr	r2, [r2, #0]
 800127e:	4611      	mov	r1, r2
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fd4f 	bl	8000d24 <__aeabi_fmul>
 8001286:	4603      	mov	r3, r0
 8001288:	461c      	mov	r4, r3
 800128a:	4b26      	ldr	r3, [pc, #152]	@ (8001324 <PID_control+0x10c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a29      	ldr	r2, [pc, #164]	@ (8001334 <PID_control+0x11c>)
 8001290:	6812      	ldr	r2, [r2, #0]
 8001292:	4611      	mov	r1, r2
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fd45 	bl	8000d24 <__aeabi_fmul>
 800129a:	4603      	mov	r3, r0
 800129c:	4619      	mov	r1, r3
 800129e:	4620      	mov	r0, r4
 80012a0:	f7ff fc38 	bl	8000b14 <__addsf3>
 80012a4:	4603      	mov	r3, r0
 80012a6:	461c      	mov	r4, r3
 80012a8:	4b20      	ldr	r3, [pc, #128]	@ (800132c <PID_control+0x114>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a22      	ldr	r2, [pc, #136]	@ (8001338 <PID_control+0x120>)
 80012ae:	6812      	ldr	r2, [r2, #0]
 80012b0:	4611      	mov	r1, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fd36 	bl	8000d24 <__aeabi_fmul>
 80012b8:	4603      	mov	r3, r0
 80012ba:	4619      	mov	r1, r3
 80012bc:	4620      	mov	r0, r4
 80012be:	f7ff fc29 	bl	8000b14 <__addsf3>
 80012c2:	4603      	mov	r3, r0
 80012c4:	461a      	mov	r2, r3
 80012c6:	4b1d      	ldr	r3, [pc, #116]	@ (800133c <PID_control+0x124>)
 80012c8:	601a      	str	r2, [r3, #0]

	if(pid_duty_cycle_change > 100){
 80012ca:	4b1c      	ldr	r3, [pc, #112]	@ (800133c <PID_control+0x124>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	491c      	ldr	r1, [pc, #112]	@ (8001340 <PID_control+0x128>)
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff fee3 	bl	800109c <__aeabi_fcmpgt>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d002      	beq.n	80012e2 <PID_control+0xca>
		pid_duty_cycle_change = 100;
 80012dc:	4b17      	ldr	r3, [pc, #92]	@ (800133c <PID_control+0x124>)
 80012de:	4a18      	ldr	r2, [pc, #96]	@ (8001340 <PID_control+0x128>)
 80012e0:	601a      	str	r2, [r3, #0]
	}
	if(pid_duty_cycle_change < 0){
 80012e2:	4b16      	ldr	r3, [pc, #88]	@ (800133c <PID_control+0x124>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f04f 0100 	mov.w	r1, #0
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff feb8 	bl	8001060 <__aeabi_fcmplt>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <PID_control+0xe6>
		pid_duty_cycle_change = 0;
 80012f6:	4b11      	ldr	r3, [pc, #68]	@ (800133c <PID_control+0x124>)
 80012f8:	f04f 0200 	mov.w	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
	}

	pwm_duty_cycle(pid_duty_cycle_change);
 80012fe:	4b0f      	ldr	r3, [pc, #60]	@ (800133c <PID_control+0x124>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fed4 	bl	80010b0 <__aeabi_f2uiz>
 8001308:	4603      	mov	r3, r0
 800130a:	b2db      	uxtb	r3, r3
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff57 	bl	80011c0 <pwm_duty_cycle>


}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	bd90      	pop	{r4, r7, pc}
 800131a:	bf00      	nop
 800131c:	2000023c 	.word	0x2000023c
 8001320:	2000022c 	.word	0x2000022c
 8001324:	20000230 	.word	0x20000230
 8001328:	20000238 	.word	0x20000238
 800132c:	20000234 	.word	0x20000234
 8001330:	20000010 	.word	0x20000010
 8001334:	20000014 	.word	0x20000014
 8001338:	20000018 	.word	0x20000018
 800133c:	20000240 	.word	0x20000240
 8001340:	42c80000 	.word	0x42c80000
 8001344:	00000000 	.word	0x00000000

08001348 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001348:	b590      	push	{r4, r7, lr}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800134e:	f000 ffe7 	bl	8002320 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001352:	f000 f905 	bl	8001560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001356:	f000 faad 	bl	80018b4 <MX_GPIO_Init>
  MX_DMA_Init();
 800135a:	f000 fa8d 	bl	8001878 <MX_DMA_Init>
  MX_TIM2_Init();
 800135e:	f000 f9c7 	bl	80016f0 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001362:	f000 f997 	bl	8001694 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001366:	f000 f957 	bl	8001618 <MX_ADC1_Init>
  MX_TIM3_Init();
 800136a:	f000 fa0d 	bl	8001788 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  SSD1306_Init();
 800136e:	f000 fb13 	bl	8001998 <SSD1306_Init>

  HAL_ADCEx_Calibration_Start(&hadc1);
 8001372:	4869      	ldr	r0, [pc, #420]	@ (8001518 <main+0x1d0>)
 8001374:	f001 fcca 	bl	8002d0c <HAL_ADCEx_Calibration_Start>

  HAL_ADC_Start_DMA(&hadc1, ADC_Raw, 1);
 8001378:	2201      	movs	r2, #1
 800137a:	4968      	ldr	r1, [pc, #416]	@ (800151c <main+0x1d4>)
 800137c:	4866      	ldr	r0, [pc, #408]	@ (8001518 <main+0x1d0>)
 800137e:	f001 f909 	bl	8002594 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start_IT(&htim2);
 8001382:	4867      	ldr	r0, [pc, #412]	@ (8001520 <main+0x1d8>)
 8001384:	f003 fdbc 	bl	8004f00 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001388:	2100      	movs	r1, #0
 800138a:	4866      	ldr	r0, [pc, #408]	@ (8001524 <main+0x1dc>)
 800138c:	f003 fe5c 	bl	8005048 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		if(Sch_100ms){
 8001390:	4b65      	ldr	r3, [pc, #404]	@ (8001528 <main+0x1e0>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 8081 	beq.w	800149c <main+0x154>
			/* get adc value */
			//HAL_ADC_Start_IT(&hadc1);

			uint16_t Ntc_Temp_ADC = Filter_SMA(ADC_Raw[0]);
 800139a:	4b60      	ldr	r3, [pc, #384]	@ (800151c <main+0x1d4>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fed0 	bl	8001144 <Filter_SMA>
 80013a4:	4603      	mov	r3, r0
 80013a6:	80fb      	strh	r3, [r7, #6]
			/* calc. ntc resistance */
			Ntc_R = ((NTC_UP_R)/((4095.0/Ntc_Temp_ADC) - 1));
 80013a8:	88fb      	ldrh	r3, [r7, #6]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff f822 	bl	80003f4 <__aeabi_i2d>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	a152      	add	r1, pc, #328	@ (adr r1, 8001500 <main+0x1b8>)
 80013b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80013ba:	f7ff f9af 	bl	800071c <__aeabi_ddiv>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	4610      	mov	r0, r2
 80013c4:	4619      	mov	r1, r3
 80013c6:	f04f 0200 	mov.w	r2, #0
 80013ca:	4b58      	ldr	r3, [pc, #352]	@ (800152c <main+0x1e4>)
 80013cc:	f7fe fec4 	bl	8000158 <__aeabi_dsub>
 80013d0:	4602      	mov	r2, r0
 80013d2:	460b      	mov	r3, r1
 80013d4:	a14c      	add	r1, pc, #304	@ (adr r1, 8001508 <main+0x1c0>)
 80013d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80013da:	f7ff f99f 	bl	800071c <__aeabi_ddiv>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4610      	mov	r0, r2
 80013e4:	4619      	mov	r1, r3
 80013e6:	f7ff fb1f 	bl	8000a28 <__aeabi_d2uiz>
 80013ea:	4603      	mov	r3, r0
 80013ec:	4a50      	ldr	r2, [pc, #320]	@ (8001530 <main+0x1e8>)
 80013ee:	6013      	str	r3, [r2, #0]

			/* temp */
			float Ntc_Ln = log(Ntc_R);
 80013f0:	4b4f      	ldr	r3, [pc, #316]	@ (8001530 <main+0x1e8>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7fe ffed 	bl	80003d4 <__aeabi_ui2d>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	4610      	mov	r0, r2
 8001400:	4619      	mov	r1, r3
 8001402:	f005 f911 	bl	8006628 <log>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4610      	mov	r0, r2
 800140c:	4619      	mov	r1, r3
 800140e:	f7ff fb2b 	bl	8000a68 <__aeabi_d2f>
 8001412:	4603      	mov	r3, r0
 8001414:	603b      	str	r3, [r7, #0]
			/* calc. temperature */
			Ntc_Tmp = (1.0/(A + B*Ntc_Ln + C*Ntc_Ln*Ntc_Ln*Ntc_Ln)) - 273.15;
 8001416:	4947      	ldr	r1, [pc, #284]	@ (8001534 <main+0x1ec>)
 8001418:	6838      	ldr	r0, [r7, #0]
 800141a:	f7ff fc83 	bl	8000d24 <__aeabi_fmul>
 800141e:	4603      	mov	r3, r0
 8001420:	4945      	ldr	r1, [pc, #276]	@ (8001538 <main+0x1f0>)
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fb76 	bl	8000b14 <__addsf3>
 8001428:	4603      	mov	r3, r0
 800142a:	461c      	mov	r4, r3
 800142c:	4943      	ldr	r1, [pc, #268]	@ (800153c <main+0x1f4>)
 800142e:	6838      	ldr	r0, [r7, #0]
 8001430:	f7ff fc78 	bl	8000d24 <__aeabi_fmul>
 8001434:	4603      	mov	r3, r0
 8001436:	6839      	ldr	r1, [r7, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff fc73 	bl	8000d24 <__aeabi_fmul>
 800143e:	4603      	mov	r3, r0
 8001440:	6839      	ldr	r1, [r7, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fc6e 	bl	8000d24 <__aeabi_fmul>
 8001448:	4603      	mov	r3, r0
 800144a:	4619      	mov	r1, r3
 800144c:	4620      	mov	r0, r4
 800144e:	f7ff fb61 	bl	8000b14 <__addsf3>
 8001452:	4603      	mov	r3, r0
 8001454:	4618      	mov	r0, r3
 8001456:	f7fe ffdf 	bl	8000418 <__aeabi_f2d>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	f04f 0000 	mov.w	r0, #0
 8001462:	4932      	ldr	r1, [pc, #200]	@ (800152c <main+0x1e4>)
 8001464:	f7ff f95a 	bl	800071c <__aeabi_ddiv>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	4610      	mov	r0, r2
 800146e:	4619      	mov	r1, r3
 8001470:	a327      	add	r3, pc, #156	@ (adr r3, 8001510 <main+0x1c8>)
 8001472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001476:	f7fe fe6f 	bl	8000158 <__aeabi_dsub>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4610      	mov	r0, r2
 8001480:	4619      	mov	r1, r3
 8001482:	f7ff faf1 	bl	8000a68 <__aeabi_d2f>
 8001486:	4603      	mov	r3, r0
 8001488:	4a2d      	ldr	r2, [pc, #180]	@ (8001540 <main+0x1f8>)
 800148a:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800148c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001490:	482c      	ldr	r0, [pc, #176]	@ (8001544 <main+0x1fc>)
 8001492:	f002 f983 	bl	800379c <HAL_GPIO_TogglePin>
			/* nullify */
			Sch_100ms = 0;
 8001496:	4b24      	ldr	r3, [pc, #144]	@ (8001528 <main+0x1e0>)
 8001498:	2200      	movs	r2, #0
 800149a:	701a      	strb	r2, [r3, #0]
		}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800149c:	2200      	movs	r2, #0
 800149e:	2140      	movs	r1, #64	@ 0x40
 80014a0:	4829      	ldr	r0, [pc, #164]	@ (8001548 <main+0x200>)
 80014a2:	f002 f963 	bl	800376c <HAL_GPIO_WritePin>
		PID_control(&Ntc_Tmp, target_tmp);
 80014a6:	4b29      	ldr	r3, [pc, #164]	@ (800154c <main+0x204>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4619      	mov	r1, r3
 80014ac:	4824      	ldr	r0, [pc, #144]	@ (8001540 <main+0x1f8>)
 80014ae:	f7ff feb3 	bl	8001218 <PID_control>
		 SSD1306_GotoXY(4, 10);
 80014b2:	210a      	movs	r1, #10
 80014b4:	2004      	movs	r0, #4
 80014b6:	f000 fbd7 	bl	8001c68 <SSD1306_GotoXY>
		 sprintf(test_buffer, "T: %d C ", Ntc_Tmp);
 80014ba:	4b21      	ldr	r3, [pc, #132]	@ (8001540 <main+0x1f8>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7fe ffaa 	bl	8000418 <__aeabi_f2d>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	4921      	ldr	r1, [pc, #132]	@ (8001550 <main+0x208>)
 80014ca:	4822      	ldr	r0, [pc, #136]	@ (8001554 <main+0x20c>)
 80014cc:	f004 fbfc 	bl	8005cc8 <siprintf>
		 SSD1306_Puts(test_buffer, &Font_11x18, 1);
 80014d0:	2201      	movs	r2, #1
 80014d2:	4921      	ldr	r1, [pc, #132]	@ (8001558 <main+0x210>)
 80014d4:	481f      	ldr	r0, [pc, #124]	@ (8001554 <main+0x20c>)
 80014d6:	f000 fc5b 	bl	8001d90 <SSD1306_Puts>

		 SSD1306_GotoXY(4, 30);
 80014da:	211e      	movs	r1, #30
 80014dc:	2004      	movs	r0, #4
 80014de:	f000 fbc3 	bl	8001c68 <SSD1306_GotoXY>
		 sprintf(test_buffer, "DC: %d ", Ntc_R);
 80014e2:	4b13      	ldr	r3, [pc, #76]	@ (8001530 <main+0x1e8>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	461a      	mov	r2, r3
 80014e8:	491c      	ldr	r1, [pc, #112]	@ (800155c <main+0x214>)
 80014ea:	481a      	ldr	r0, [pc, #104]	@ (8001554 <main+0x20c>)
 80014ec:	f004 fbec 	bl	8005cc8 <siprintf>
		 SSD1306_Puts(test_buffer, &Font_11x18, 1);
 80014f0:	2201      	movs	r2, #1
 80014f2:	4919      	ldr	r1, [pc, #100]	@ (8001558 <main+0x210>)
 80014f4:	4817      	ldr	r0, [pc, #92]	@ (8001554 <main+0x20c>)
 80014f6:	f000 fc4b 	bl	8001d90 <SSD1306_Puts>
  {
 80014fa:	e749      	b.n	8001390 <main+0x48>
 80014fc:	f3af 8000 	nop.w
 8001500:	00000000 	.word	0x00000000
 8001504:	40affe00 	.word	0x40affe00
 8001508:	00000000 	.word	0x00000000
 800150c:	40f86a00 	.word	0x40f86a00
 8001510:	66666666 	.word	0x66666666
 8001514:	40711266 	.word	0x40711266
 8001518:	20000094 	.word	0x20000094
 800151c:	200001ec 	.word	0x200001ec
 8001520:	2000015c 	.word	0x2000015c
 8001524:	200001a4 	.word	0x200001a4
 8001528:	2000000c 	.word	0x2000000c
 800152c:	3ff00000 	.word	0x3ff00000
 8001530:	200001f4 	.word	0x200001f4
 8001534:	b80ab0c4 	.word	0xb80ab0c4
 8001538:	3af83607 	.word	0x3af83607
 800153c:	35ad8e94 	.word	0x35ad8e94
 8001540:	200001f0 	.word	0x200001f0
 8001544:	40011000 	.word	0x40011000
 8001548:	40010800 	.word	0x40010800
 800154c:	20000008 	.word	0x20000008
 8001550:	08006a14 	.word	0x08006a14
 8001554:	200001f8 	.word	0x200001f8
 8001558:	20000000 	.word	0x20000000
 800155c:	08006a20 	.word	0x08006a20

08001560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b094      	sub	sp, #80	@ 0x50
 8001564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001566:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800156a:	2228      	movs	r2, #40	@ 0x28
 800156c:	2100      	movs	r1, #0
 800156e:	4618      	mov	r0, r3
 8001570:	f004 fbca 	bl	8005d08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001584:	1d3b      	adds	r3, r7, #4
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001590:	2301      	movs	r3, #1
 8001592:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001594:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001598:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800159a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800159e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015a0:	2301      	movs	r3, #1
 80015a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015a4:	2302      	movs	r3, #2
 80015a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015ae:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80015b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015b8:	4618      	mov	r0, r3
 80015ba:	f002 fed3 	bl	8004364 <HAL_RCC_OscConfig>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80015c4:	f000 f9e2 	bl	800198c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c8:	230f      	movs	r3, #15
 80015ca:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015cc:	2302      	movs	r3, #2
 80015ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d0:	2300      	movs	r3, #0
 80015d2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015d8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015da:	2300      	movs	r3, #0
 80015dc:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015de:	f107 0314 	add.w	r3, r7, #20
 80015e2:	2102      	movs	r1, #2
 80015e4:	4618      	mov	r0, r3
 80015e6:	f003 f93f 	bl	8004868 <HAL_RCC_ClockConfig>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015f0:	f000 f9cc 	bl	800198c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80015f4:	2302      	movs	r3, #2
 80015f6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80015f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80015fc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	4618      	mov	r0, r3
 8001602:	f003 fac1 	bl	8004b88 <HAL_RCCEx_PeriphCLKConfig>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800160c:	f000 f9be 	bl	800198c <Error_Handler>
  }
}
 8001610:	bf00      	nop
 8001612:	3750      	adds	r7, #80	@ 0x50
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001628:	4b18      	ldr	r3, [pc, #96]	@ (800168c <MX_ADC1_Init+0x74>)
 800162a:	4a19      	ldr	r2, [pc, #100]	@ (8001690 <MX_ADC1_Init+0x78>)
 800162c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800162e:	4b17      	ldr	r3, [pc, #92]	@ (800168c <MX_ADC1_Init+0x74>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001634:	4b15      	ldr	r3, [pc, #84]	@ (800168c <MX_ADC1_Init+0x74>)
 8001636:	2201      	movs	r2, #1
 8001638:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800163a:	4b14      	ldr	r3, [pc, #80]	@ (800168c <MX_ADC1_Init+0x74>)
 800163c:	2200      	movs	r2, #0
 800163e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001640:	4b12      	ldr	r3, [pc, #72]	@ (800168c <MX_ADC1_Init+0x74>)
 8001642:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001646:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001648:	4b10      	ldr	r3, [pc, #64]	@ (800168c <MX_ADC1_Init+0x74>)
 800164a:	2200      	movs	r2, #0
 800164c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800164e:	4b0f      	ldr	r3, [pc, #60]	@ (800168c <MX_ADC1_Init+0x74>)
 8001650:	2201      	movs	r2, #1
 8001652:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001654:	480d      	ldr	r0, [pc, #52]	@ (800168c <MX_ADC1_Init+0x74>)
 8001656:	f000 fec5 	bl	80023e4 <HAL_ADC_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001660:	f000 f994 	bl	800198c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001664:	2300      	movs	r3, #0
 8001666:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001668:	2301      	movs	r3, #1
 800166a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800166c:	2305      	movs	r3, #5
 800166e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001670:	1d3b      	adds	r3, r7, #4
 8001672:	4619      	mov	r1, r3
 8001674:	4805      	ldr	r0, [pc, #20]	@ (800168c <MX_ADC1_Init+0x74>)
 8001676:	f001 f94f 	bl	8002918 <HAL_ADC_ConfigChannel>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001680:	f000 f984 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001684:	bf00      	nop
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20000094 	.word	0x20000094
 8001690:	40012400 	.word	0x40012400

08001694 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001698:	4b12      	ldr	r3, [pc, #72]	@ (80016e4 <MX_I2C1_Init+0x50>)
 800169a:	4a13      	ldr	r2, [pc, #76]	@ (80016e8 <MX_I2C1_Init+0x54>)
 800169c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800169e:	4b11      	ldr	r3, [pc, #68]	@ (80016e4 <MX_I2C1_Init+0x50>)
 80016a0:	4a12      	ldr	r2, [pc, #72]	@ (80016ec <MX_I2C1_Init+0x58>)
 80016a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016a4:	4b0f      	ldr	r3, [pc, #60]	@ (80016e4 <MX_I2C1_Init+0x50>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016aa:	4b0e      	ldr	r3, [pc, #56]	@ (80016e4 <MX_I2C1_Init+0x50>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016b0:	4b0c      	ldr	r3, [pc, #48]	@ (80016e4 <MX_I2C1_Init+0x50>)
 80016b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80016b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016b8:	4b0a      	ldr	r3, [pc, #40]	@ (80016e4 <MX_I2C1_Init+0x50>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016be:	4b09      	ldr	r3, [pc, #36]	@ (80016e4 <MX_I2C1_Init+0x50>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016c4:	4b07      	ldr	r3, [pc, #28]	@ (80016e4 <MX_I2C1_Init+0x50>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016ca:	4b06      	ldr	r3, [pc, #24]	@ (80016e4 <MX_I2C1_Init+0x50>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016d0:	4804      	ldr	r0, [pc, #16]	@ (80016e4 <MX_I2C1_Init+0x50>)
 80016d2:	f002 f87d 	bl	80037d0 <HAL_I2C_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016dc:	f000 f956 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000108 	.word	0x20000108
 80016e8:	40005400 	.word	0x40005400
 80016ec:	00061a80 	.word	0x00061a80

080016f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016f6:	f107 0308 	add.w	r3, r7, #8
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]
 8001702:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001704:	463b      	mov	r3, r7
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800170c:	4b1d      	ldr	r3, [pc, #116]	@ (8001784 <MX_TIM2_Init+0x94>)
 800170e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001712:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 125-1;
 8001714:	4b1b      	ldr	r3, [pc, #108]	@ (8001784 <MX_TIM2_Init+0x94>)
 8001716:	227c      	movs	r2, #124	@ 0x7c
 8001718:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800171a:	4b1a      	ldr	r3, [pc, #104]	@ (8001784 <MX_TIM2_Init+0x94>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 57600-1;
 8001720:	4b18      	ldr	r3, [pc, #96]	@ (8001784 <MX_TIM2_Init+0x94>)
 8001722:	f24e 02ff 	movw	r2, #57599	@ 0xe0ff
 8001726:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001728:	4b16      	ldr	r3, [pc, #88]	@ (8001784 <MX_TIM2_Init+0x94>)
 800172a:	2200      	movs	r2, #0
 800172c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800172e:	4b15      	ldr	r3, [pc, #84]	@ (8001784 <MX_TIM2_Init+0x94>)
 8001730:	2280      	movs	r2, #128	@ 0x80
 8001732:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001734:	4813      	ldr	r0, [pc, #76]	@ (8001784 <MX_TIM2_Init+0x94>)
 8001736:	f003 fb93 	bl	8004e60 <HAL_TIM_Base_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001740:	f000 f924 	bl	800198c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001744:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001748:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800174a:	f107 0308 	add.w	r3, r7, #8
 800174e:	4619      	mov	r1, r3
 8001750:	480c      	ldr	r0, [pc, #48]	@ (8001784 <MX_TIM2_Init+0x94>)
 8001752:	f003 fec7 	bl	80054e4 <HAL_TIM_ConfigClockSource>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800175c:	f000 f916 	bl	800198c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001760:	2300      	movs	r3, #0
 8001762:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001764:	2300      	movs	r3, #0
 8001766:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001768:	463b      	mov	r3, r7
 800176a:	4619      	mov	r1, r3
 800176c:	4805      	ldr	r0, [pc, #20]	@ (8001784 <MX_TIM2_Init+0x94>)
 800176e:	f004 fa41 	bl	8005bf4 <HAL_TIMEx_MasterConfigSynchronization>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001778:	f000 f908 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800177c:	bf00      	nop
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	2000015c 	.word	0x2000015c

08001788 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08e      	sub	sp, #56	@ 0x38
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800178e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	609a      	str	r2, [r3, #8]
 800179a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800179c:	f107 0320 	add.w	r3, r7, #32
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
 80017b4:	615a      	str	r2, [r3, #20]
 80017b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001870 <MX_TIM3_Init+0xe8>)
 80017ba:	4a2e      	ldr	r2, [pc, #184]	@ (8001874 <MX_TIM3_Init+0xec>)
 80017bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 320-1;
 80017be:	4b2c      	ldr	r3, [pc, #176]	@ (8001870 <MX_TIM3_Init+0xe8>)
 80017c0:	f240 123f 	movw	r2, #319	@ 0x13f
 80017c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001870 <MX_TIM3_Init+0xe8>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 45000-1;
 80017cc:	4b28      	ldr	r3, [pc, #160]	@ (8001870 <MX_TIM3_Init+0xe8>)
 80017ce:	f64a 72c7 	movw	r2, #44999	@ 0xafc7
 80017d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d4:	4b26      	ldr	r3, [pc, #152]	@ (8001870 <MX_TIM3_Init+0xe8>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017da:	4b25      	ldr	r3, [pc, #148]	@ (8001870 <MX_TIM3_Init+0xe8>)
 80017dc:	2280      	movs	r2, #128	@ 0x80
 80017de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017e0:	4823      	ldr	r0, [pc, #140]	@ (8001870 <MX_TIM3_Init+0xe8>)
 80017e2:	f003 fb3d 	bl	8004e60 <HAL_TIM_Base_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80017ec:	f000 f8ce 	bl	800198c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017fa:	4619      	mov	r1, r3
 80017fc:	481c      	ldr	r0, [pc, #112]	@ (8001870 <MX_TIM3_Init+0xe8>)
 80017fe:	f003 fe71 	bl	80054e4 <HAL_TIM_ConfigClockSource>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001808:	f000 f8c0 	bl	800198c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800180c:	4818      	ldr	r0, [pc, #96]	@ (8001870 <MX_TIM3_Init+0xe8>)
 800180e:	f003 fbc3 	bl	8004f98 <HAL_TIM_PWM_Init>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001818:	f000 f8b8 	bl	800198c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800181c:	2300      	movs	r3, #0
 800181e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001820:	2300      	movs	r3, #0
 8001822:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001824:	f107 0320 	add.w	r3, r7, #32
 8001828:	4619      	mov	r1, r3
 800182a:	4811      	ldr	r0, [pc, #68]	@ (8001870 <MX_TIM3_Init+0xe8>)
 800182c:	f004 f9e2 	bl	8005bf4 <HAL_TIMEx_MasterConfigSynchronization>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001836:	f000 f8a9 	bl	800198c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800183a:	2360      	movs	r3, #96	@ 0x60
 800183c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800183e:	2300      	movs	r3, #0
 8001840:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800184a:	1d3b      	adds	r3, r7, #4
 800184c:	2200      	movs	r2, #0
 800184e:	4619      	mov	r1, r3
 8001850:	4807      	ldr	r0, [pc, #28]	@ (8001870 <MX_TIM3_Init+0xe8>)
 8001852:	f003 fd85 	bl	8005360 <HAL_TIM_PWM_ConfigChannel>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800185c:	f000 f896 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001860:	4803      	ldr	r0, [pc, #12]	@ (8001870 <MX_TIM3_Init+0xe8>)
 8001862:	f000 fc75 	bl	8002150 <HAL_TIM_MspPostInit>

}
 8001866:	bf00      	nop
 8001868:	3738      	adds	r7, #56	@ 0x38
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	200001a4 	.word	0x200001a4
 8001874:	40000400 	.word	0x40000400

08001878 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800187e:	4b0c      	ldr	r3, [pc, #48]	@ (80018b0 <MX_DMA_Init+0x38>)
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	4a0b      	ldr	r2, [pc, #44]	@ (80018b0 <MX_DMA_Init+0x38>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6153      	str	r3, [r2, #20]
 800188a:	4b09      	ldr	r3, [pc, #36]	@ (80018b0 <MX_DMA_Init+0x38>)
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001896:	2200      	movs	r2, #0
 8001898:	2100      	movs	r1, #0
 800189a:	200b      	movs	r0, #11
 800189c:	f001 fbc5 	bl	800302a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80018a0:	200b      	movs	r0, #11
 80018a2:	f001 fbde 	bl	8003062 <HAL_NVIC_EnableIRQ>

}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40021000 	.word	0x40021000

080018b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b088      	sub	sp, #32
 80018b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ba:	f107 0310 	add.w	r3, r7, #16
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001980 <MX_GPIO_Init+0xcc>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	4a2c      	ldr	r2, [pc, #176]	@ (8001980 <MX_GPIO_Init+0xcc>)
 80018ce:	f043 0310 	orr.w	r3, r3, #16
 80018d2:	6193      	str	r3, [r2, #24]
 80018d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001980 <MX_GPIO_Init+0xcc>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	f003 0310 	and.w	r3, r3, #16
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018e0:	4b27      	ldr	r3, [pc, #156]	@ (8001980 <MX_GPIO_Init+0xcc>)
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	4a26      	ldr	r2, [pc, #152]	@ (8001980 <MX_GPIO_Init+0xcc>)
 80018e6:	f043 0320 	orr.w	r3, r3, #32
 80018ea:	6193      	str	r3, [r2, #24]
 80018ec:	4b24      	ldr	r3, [pc, #144]	@ (8001980 <MX_GPIO_Init+0xcc>)
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	f003 0320 	and.w	r3, r3, #32
 80018f4:	60bb      	str	r3, [r7, #8]
 80018f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f8:	4b21      	ldr	r3, [pc, #132]	@ (8001980 <MX_GPIO_Init+0xcc>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	4a20      	ldr	r2, [pc, #128]	@ (8001980 <MX_GPIO_Init+0xcc>)
 80018fe:	f043 0304 	orr.w	r3, r3, #4
 8001902:	6193      	str	r3, [r2, #24]
 8001904:	4b1e      	ldr	r3, [pc, #120]	@ (8001980 <MX_GPIO_Init+0xcc>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	607b      	str	r3, [r7, #4]
 800190e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001910:	4b1b      	ldr	r3, [pc, #108]	@ (8001980 <MX_GPIO_Init+0xcc>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	4a1a      	ldr	r2, [pc, #104]	@ (8001980 <MX_GPIO_Init+0xcc>)
 8001916:	f043 0308 	orr.w	r3, r3, #8
 800191a:	6193      	str	r3, [r2, #24]
 800191c:	4b18      	ldr	r3, [pc, #96]	@ (8001980 <MX_GPIO_Init+0xcc>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	f003 0308 	and.w	r3, r3, #8
 8001924:	603b      	str	r3, [r7, #0]
 8001926:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001928:	2200      	movs	r2, #0
 800192a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800192e:	4815      	ldr	r0, [pc, #84]	@ (8001984 <MX_GPIO_Init+0xd0>)
 8001930:	f001 ff1c 	bl	800376c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001934:	2200      	movs	r2, #0
 8001936:	2180      	movs	r1, #128	@ 0x80
 8001938:	4813      	ldr	r0, [pc, #76]	@ (8001988 <MX_GPIO_Init+0xd4>)
 800193a:	f001 ff17 	bl	800376c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800193e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001942:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001944:	2301      	movs	r3, #1
 8001946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194c:	2302      	movs	r3, #2
 800194e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001950:	f107 0310 	add.w	r3, r7, #16
 8001954:	4619      	mov	r1, r3
 8001956:	480b      	ldr	r0, [pc, #44]	@ (8001984 <MX_GPIO_Init+0xd0>)
 8001958:	f001 fd8c 	bl	8003474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800195c:	2380      	movs	r3, #128	@ 0x80
 800195e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001960:	2301      	movs	r3, #1
 8001962:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001968:	2302      	movs	r3, #2
 800196a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196c:	f107 0310 	add.w	r3, r7, #16
 8001970:	4619      	mov	r1, r3
 8001972:	4805      	ldr	r0, [pc, #20]	@ (8001988 <MX_GPIO_Init+0xd4>)
 8001974:	f001 fd7e 	bl	8003474 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001978:	bf00      	nop
 800197a:	3720      	adds	r7, #32
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40021000 	.word	0x40021000
 8001984:	40011000 	.word	0x40011000
 8001988:	40010800 	.word	0x40010800

0800198c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001990:	b672      	cpsid	i
}
 8001992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001994:	bf00      	nop
 8001996:	e7fd      	b.n	8001994 <Error_Handler+0x8>

08001998 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800199e:	f000 fa1d 	bl	8001ddc <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80019a2:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80019a6:	2201      	movs	r2, #1
 80019a8:	2178      	movs	r1, #120	@ 0x78
 80019aa:	485b      	ldr	r0, [pc, #364]	@ (8001b18 <SSD1306_Init+0x180>)
 80019ac:	f002 f952 	bl	8003c54 <HAL_I2C_IsDeviceReady>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	e0a9      	b.n	8001b0e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80019ba:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80019be:	607b      	str	r3, [r7, #4]
	while(p>0)
 80019c0:	e002      	b.n	80019c8 <SSD1306_Init+0x30>
		p--;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	3b01      	subs	r3, #1
 80019c6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1f9      	bne.n	80019c2 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80019ce:	22ae      	movs	r2, #174	@ 0xae
 80019d0:	2100      	movs	r1, #0
 80019d2:	2078      	movs	r0, #120	@ 0x78
 80019d4:	f000 fa7c 	bl	8001ed0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80019d8:	2220      	movs	r2, #32
 80019da:	2100      	movs	r1, #0
 80019dc:	2078      	movs	r0, #120	@ 0x78
 80019de:	f000 fa77 	bl	8001ed0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80019e2:	2210      	movs	r2, #16
 80019e4:	2100      	movs	r1, #0
 80019e6:	2078      	movs	r0, #120	@ 0x78
 80019e8:	f000 fa72 	bl	8001ed0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80019ec:	22b0      	movs	r2, #176	@ 0xb0
 80019ee:	2100      	movs	r1, #0
 80019f0:	2078      	movs	r0, #120	@ 0x78
 80019f2:	f000 fa6d 	bl	8001ed0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80019f6:	22c8      	movs	r2, #200	@ 0xc8
 80019f8:	2100      	movs	r1, #0
 80019fa:	2078      	movs	r0, #120	@ 0x78
 80019fc:	f000 fa68 	bl	8001ed0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001a00:	2200      	movs	r2, #0
 8001a02:	2100      	movs	r1, #0
 8001a04:	2078      	movs	r0, #120	@ 0x78
 8001a06:	f000 fa63 	bl	8001ed0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001a0a:	2210      	movs	r2, #16
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	2078      	movs	r0, #120	@ 0x78
 8001a10:	f000 fa5e 	bl	8001ed0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001a14:	2240      	movs	r2, #64	@ 0x40
 8001a16:	2100      	movs	r1, #0
 8001a18:	2078      	movs	r0, #120	@ 0x78
 8001a1a:	f000 fa59 	bl	8001ed0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001a1e:	2281      	movs	r2, #129	@ 0x81
 8001a20:	2100      	movs	r1, #0
 8001a22:	2078      	movs	r0, #120	@ 0x78
 8001a24:	f000 fa54 	bl	8001ed0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001a28:	22ff      	movs	r2, #255	@ 0xff
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	2078      	movs	r0, #120	@ 0x78
 8001a2e:	f000 fa4f 	bl	8001ed0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001a32:	22a1      	movs	r2, #161	@ 0xa1
 8001a34:	2100      	movs	r1, #0
 8001a36:	2078      	movs	r0, #120	@ 0x78
 8001a38:	f000 fa4a 	bl	8001ed0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001a3c:	22a6      	movs	r2, #166	@ 0xa6
 8001a3e:	2100      	movs	r1, #0
 8001a40:	2078      	movs	r0, #120	@ 0x78
 8001a42:	f000 fa45 	bl	8001ed0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001a46:	22a8      	movs	r2, #168	@ 0xa8
 8001a48:	2100      	movs	r1, #0
 8001a4a:	2078      	movs	r0, #120	@ 0x78
 8001a4c:	f000 fa40 	bl	8001ed0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001a50:	223f      	movs	r2, #63	@ 0x3f
 8001a52:	2100      	movs	r1, #0
 8001a54:	2078      	movs	r0, #120	@ 0x78
 8001a56:	f000 fa3b 	bl	8001ed0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001a5a:	22a4      	movs	r2, #164	@ 0xa4
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	2078      	movs	r0, #120	@ 0x78
 8001a60:	f000 fa36 	bl	8001ed0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001a64:	22d3      	movs	r2, #211	@ 0xd3
 8001a66:	2100      	movs	r1, #0
 8001a68:	2078      	movs	r0, #120	@ 0x78
 8001a6a:	f000 fa31 	bl	8001ed0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001a6e:	2200      	movs	r2, #0
 8001a70:	2100      	movs	r1, #0
 8001a72:	2078      	movs	r0, #120	@ 0x78
 8001a74:	f000 fa2c 	bl	8001ed0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001a78:	22d5      	movs	r2, #213	@ 0xd5
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	2078      	movs	r0, #120	@ 0x78
 8001a7e:	f000 fa27 	bl	8001ed0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001a82:	22f0      	movs	r2, #240	@ 0xf0
 8001a84:	2100      	movs	r1, #0
 8001a86:	2078      	movs	r0, #120	@ 0x78
 8001a88:	f000 fa22 	bl	8001ed0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001a8c:	22d9      	movs	r2, #217	@ 0xd9
 8001a8e:	2100      	movs	r1, #0
 8001a90:	2078      	movs	r0, #120	@ 0x78
 8001a92:	f000 fa1d 	bl	8001ed0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001a96:	2222      	movs	r2, #34	@ 0x22
 8001a98:	2100      	movs	r1, #0
 8001a9a:	2078      	movs	r0, #120	@ 0x78
 8001a9c:	f000 fa18 	bl	8001ed0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001aa0:	22da      	movs	r2, #218	@ 0xda
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	2078      	movs	r0, #120	@ 0x78
 8001aa6:	f000 fa13 	bl	8001ed0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001aaa:	2212      	movs	r2, #18
 8001aac:	2100      	movs	r1, #0
 8001aae:	2078      	movs	r0, #120	@ 0x78
 8001ab0:	f000 fa0e 	bl	8001ed0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001ab4:	22db      	movs	r2, #219	@ 0xdb
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	2078      	movs	r0, #120	@ 0x78
 8001aba:	f000 fa09 	bl	8001ed0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001abe:	2220      	movs	r2, #32
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	2078      	movs	r0, #120	@ 0x78
 8001ac4:	f000 fa04 	bl	8001ed0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001ac8:	228d      	movs	r2, #141	@ 0x8d
 8001aca:	2100      	movs	r1, #0
 8001acc:	2078      	movs	r0, #120	@ 0x78
 8001ace:	f000 f9ff 	bl	8001ed0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001ad2:	2214      	movs	r2, #20
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	2078      	movs	r0, #120	@ 0x78
 8001ad8:	f000 f9fa 	bl	8001ed0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001adc:	22af      	movs	r2, #175	@ 0xaf
 8001ade:	2100      	movs	r1, #0
 8001ae0:	2078      	movs	r0, #120	@ 0x78
 8001ae2:	f000 f9f5 	bl	8001ed0 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001ae6:	222e      	movs	r2, #46	@ 0x2e
 8001ae8:	2100      	movs	r1, #0
 8001aea:	2078      	movs	r0, #120	@ 0x78
 8001aec:	f000 f9f0 	bl	8001ed0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001af0:	2000      	movs	r0, #0
 8001af2:	f000 f843 	bl	8001b7c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001af6:	f000 f813 	bl	8001b20 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001afa:	4b08      	ldr	r3, [pc, #32]	@ (8001b1c <SSD1306_Init+0x184>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001b00:	4b06      	ldr	r3, [pc, #24]	@ (8001b1c <SSD1306_Init+0x184>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001b06:	4b05      	ldr	r3, [pc, #20]	@ (8001b1c <SSD1306_Init+0x184>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001b0c:	2301      	movs	r3, #1
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000108 	.word	0x20000108
 8001b1c:	20000644 	.word	0x20000644

08001b20 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001b26:	2300      	movs	r3, #0
 8001b28:	71fb      	strb	r3, [r7, #7]
 8001b2a:	e01d      	b.n	8001b68 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	3b50      	subs	r3, #80	@ 0x50
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	461a      	mov	r2, r3
 8001b34:	2100      	movs	r1, #0
 8001b36:	2078      	movs	r0, #120	@ 0x78
 8001b38:	f000 f9ca 	bl	8001ed0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	2100      	movs	r1, #0
 8001b40:	2078      	movs	r0, #120	@ 0x78
 8001b42:	f000 f9c5 	bl	8001ed0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001b46:	2210      	movs	r2, #16
 8001b48:	2100      	movs	r1, #0
 8001b4a:	2078      	movs	r0, #120	@ 0x78
 8001b4c:	f000 f9c0 	bl	8001ed0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	01db      	lsls	r3, r3, #7
 8001b54:	4a08      	ldr	r2, [pc, #32]	@ (8001b78 <SSD1306_UpdateScreen+0x58>)
 8001b56:	441a      	add	r2, r3
 8001b58:	2380      	movs	r3, #128	@ 0x80
 8001b5a:	2140      	movs	r1, #64	@ 0x40
 8001b5c:	2078      	movs	r0, #120	@ 0x78
 8001b5e:	f000 f951 	bl	8001e04 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	3301      	adds	r3, #1
 8001b66:	71fb      	strb	r3, [r7, #7]
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	2b07      	cmp	r3, #7
 8001b6c:	d9de      	bls.n	8001b2c <SSD1306_UpdateScreen+0xc>
	}
}
 8001b6e:	bf00      	nop
 8001b70:	bf00      	nop
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000244 	.word	0x20000244

08001b7c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d101      	bne.n	8001b90 <SSD1306_Fill+0x14>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	e000      	b.n	8001b92 <SSD1306_Fill+0x16>
 8001b90:	23ff      	movs	r3, #255	@ 0xff
 8001b92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b96:	4619      	mov	r1, r3
 8001b98:	4803      	ldr	r0, [pc, #12]	@ (8001ba8 <SSD1306_Fill+0x2c>)
 8001b9a:	f004 f8b5 	bl	8005d08 <memset>
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000244 	.word	0x20000244

08001bac <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	80fb      	strh	r3, [r7, #6]
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	80bb      	strh	r3, [r7, #4]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	70fb      	strb	r3, [r7, #3]
	if (
 8001bbe:	88fb      	ldrh	r3, [r7, #6]
 8001bc0:	2b7f      	cmp	r3, #127	@ 0x7f
 8001bc2:	d848      	bhi.n	8001c56 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001bc4:	88bb      	ldrh	r3, [r7, #4]
 8001bc6:	2b3f      	cmp	r3, #63	@ 0x3f
 8001bc8:	d845      	bhi.n	8001c56 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001bca:	4b25      	ldr	r3, [pc, #148]	@ (8001c60 <SSD1306_DrawPixel+0xb4>)
 8001bcc:	791b      	ldrb	r3, [r3, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d006      	beq.n	8001be0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001bd2:	78fb      	ldrb	r3, [r7, #3]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	bf0c      	ite	eq
 8001bd8:	2301      	moveq	r3, #1
 8001bda:	2300      	movne	r3, #0
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001be0:	78fb      	ldrb	r3, [r7, #3]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d11a      	bne.n	8001c1c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001be6:	88fa      	ldrh	r2, [r7, #6]
 8001be8:	88bb      	ldrh	r3, [r7, #4]
 8001bea:	08db      	lsrs	r3, r3, #3
 8001bec:	b298      	uxth	r0, r3
 8001bee:	4603      	mov	r3, r0
 8001bf0:	01db      	lsls	r3, r3, #7
 8001bf2:	4413      	add	r3, r2
 8001bf4:	4a1b      	ldr	r2, [pc, #108]	@ (8001c64 <SSD1306_DrawPixel+0xb8>)
 8001bf6:	5cd3      	ldrb	r3, [r2, r3]
 8001bf8:	b25a      	sxtb	r2, r3
 8001bfa:	88bb      	ldrh	r3, [r7, #4]
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	2101      	movs	r1, #1
 8001c02:	fa01 f303 	lsl.w	r3, r1, r3
 8001c06:	b25b      	sxtb	r3, r3
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	b259      	sxtb	r1, r3
 8001c0c:	88fa      	ldrh	r2, [r7, #6]
 8001c0e:	4603      	mov	r3, r0
 8001c10:	01db      	lsls	r3, r3, #7
 8001c12:	4413      	add	r3, r2
 8001c14:	b2c9      	uxtb	r1, r1
 8001c16:	4a13      	ldr	r2, [pc, #76]	@ (8001c64 <SSD1306_DrawPixel+0xb8>)
 8001c18:	54d1      	strb	r1, [r2, r3]
 8001c1a:	e01d      	b.n	8001c58 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001c1c:	88fa      	ldrh	r2, [r7, #6]
 8001c1e:	88bb      	ldrh	r3, [r7, #4]
 8001c20:	08db      	lsrs	r3, r3, #3
 8001c22:	b298      	uxth	r0, r3
 8001c24:	4603      	mov	r3, r0
 8001c26:	01db      	lsls	r3, r3, #7
 8001c28:	4413      	add	r3, r2
 8001c2a:	4a0e      	ldr	r2, [pc, #56]	@ (8001c64 <SSD1306_DrawPixel+0xb8>)
 8001c2c:	5cd3      	ldrb	r3, [r2, r3]
 8001c2e:	b25a      	sxtb	r2, r3
 8001c30:	88bb      	ldrh	r3, [r7, #4]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	2101      	movs	r1, #1
 8001c38:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3c:	b25b      	sxtb	r3, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	b25b      	sxtb	r3, r3
 8001c42:	4013      	ands	r3, r2
 8001c44:	b259      	sxtb	r1, r3
 8001c46:	88fa      	ldrh	r2, [r7, #6]
 8001c48:	4603      	mov	r3, r0
 8001c4a:	01db      	lsls	r3, r3, #7
 8001c4c:	4413      	add	r3, r2
 8001c4e:	b2c9      	uxtb	r1, r1
 8001c50:	4a04      	ldr	r2, [pc, #16]	@ (8001c64 <SSD1306_DrawPixel+0xb8>)
 8001c52:	54d1      	strb	r1, [r2, r3]
 8001c54:	e000      	b.n	8001c58 <SSD1306_DrawPixel+0xac>
		return;
 8001c56:	bf00      	nop
	}
}
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr
 8001c60:	20000644 	.word	0x20000644
 8001c64:	20000244 	.word	0x20000244

08001c68 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	460a      	mov	r2, r1
 8001c72:	80fb      	strh	r3, [r7, #6]
 8001c74:	4613      	mov	r3, r2
 8001c76:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001c78:	4a05      	ldr	r2, [pc, #20]	@ (8001c90 <SSD1306_GotoXY+0x28>)
 8001c7a:	88fb      	ldrh	r3, [r7, #6]
 8001c7c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001c7e:	4a04      	ldr	r2, [pc, #16]	@ (8001c90 <SSD1306_GotoXY+0x28>)
 8001c80:	88bb      	ldrh	r3, [r7, #4]
 8001c82:	8053      	strh	r3, [r2, #2]
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	20000644 	.word	0x20000644

08001c94 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	6039      	str	r1, [r7, #0]
 8001c9e:	71fb      	strb	r3, [r7, #7]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001ca4:	4b39      	ldr	r3, [pc, #228]	@ (8001d8c <SSD1306_Putc+0xf8>)
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	4413      	add	r3, r2
	if (
 8001cb0:	2b7f      	cmp	r3, #127	@ 0x7f
 8001cb2:	dc07      	bgt.n	8001cc4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001cb4:	4b35      	ldr	r3, [pc, #212]	@ (8001d8c <SSD1306_Putc+0xf8>)
 8001cb6:	885b      	ldrh	r3, [r3, #2]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	785b      	ldrb	r3, [r3, #1]
 8001cbe:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001cc0:	2b3f      	cmp	r3, #63	@ 0x3f
 8001cc2:	dd01      	ble.n	8001cc8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	e05d      	b.n	8001d84 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	e04b      	b.n	8001d66 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	3b20      	subs	r3, #32
 8001cd6:	6839      	ldr	r1, [r7, #0]
 8001cd8:	7849      	ldrb	r1, [r1, #1]
 8001cda:	fb01 f303 	mul.w	r3, r1, r3
 8001cde:	4619      	mov	r1, r3
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	440b      	add	r3, r1
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	4413      	add	r3, r2
 8001ce8:	881b      	ldrh	r3, [r3, #0]
 8001cea:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001cec:	2300      	movs	r3, #0
 8001cee:	613b      	str	r3, [r7, #16]
 8001cf0:	e030      	b.n	8001d54 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d010      	beq.n	8001d24 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001d02:	4b22      	ldr	r3, [pc, #136]	@ (8001d8c <SSD1306_Putc+0xf8>)
 8001d04:	881a      	ldrh	r2, [r3, #0]
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	4413      	add	r3, r2
 8001d0c:	b298      	uxth	r0, r3
 8001d0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001d8c <SSD1306_Putc+0xf8>)
 8001d10:	885a      	ldrh	r2, [r3, #2]
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	4413      	add	r3, r2
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	79ba      	ldrb	r2, [r7, #6]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	f7ff ff45 	bl	8001bac <SSD1306_DrawPixel>
 8001d22:	e014      	b.n	8001d4e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001d24:	4b19      	ldr	r3, [pc, #100]	@ (8001d8c <SSD1306_Putc+0xf8>)
 8001d26:	881a      	ldrh	r2, [r3, #0]
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	4413      	add	r3, r2
 8001d2e:	b298      	uxth	r0, r3
 8001d30:	4b16      	ldr	r3, [pc, #88]	@ (8001d8c <SSD1306_Putc+0xf8>)
 8001d32:	885a      	ldrh	r2, [r3, #2]
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	4413      	add	r3, r2
 8001d3a:	b299      	uxth	r1, r3
 8001d3c:	79bb      	ldrb	r3, [r7, #6]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	bf0c      	ite	eq
 8001d42:	2301      	moveq	r3, #1
 8001d44:	2300      	movne	r3, #0
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	461a      	mov	r2, r3
 8001d4a:	f7ff ff2f 	bl	8001bac <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	3301      	adds	r3, #1
 8001d52:	613b      	str	r3, [r7, #16]
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d3c8      	bcc.n	8001cf2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	3301      	adds	r3, #1
 8001d64:	617b      	str	r3, [r7, #20]
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	785b      	ldrb	r3, [r3, #1]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d3ad      	bcc.n	8001cce <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001d72:	4b06      	ldr	r3, [pc, #24]	@ (8001d8c <SSD1306_Putc+0xf8>)
 8001d74:	881b      	ldrh	r3, [r3, #0]
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	7812      	ldrb	r2, [r2, #0]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	4b03      	ldr	r3, [pc, #12]	@ (8001d8c <SSD1306_Putc+0xf8>)
 8001d80:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001d82:	79fb      	ldrb	r3, [r7, #7]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20000644 	.word	0x20000644

08001d90 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001d9e:	e012      	b.n	8001dc6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	79fa      	ldrb	r2, [r7, #7]
 8001da6:	68b9      	ldr	r1, [r7, #8]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ff73 	bl	8001c94 <SSD1306_Putc>
 8001dae:	4603      	mov	r3, r0
 8001db0:	461a      	mov	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d002      	beq.n	8001dc0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	e008      	b.n	8001dd2 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1e8      	bne.n	8001da0 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	781b      	ldrb	r3, [r3, #0]
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001de2:	4b07      	ldr	r3, [pc, #28]	@ (8001e00 <ssd1306_I2C_Init+0x24>)
 8001de4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001de6:	e002      	b.n	8001dee <ssd1306_I2C_Init+0x12>
		p--;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1f9      	bne.n	8001de8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001df4:	bf00      	nop
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr
 8001e00:	0003d090 	.word	0x0003d090

08001e04 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001e04:	b590      	push	{r4, r7, lr}
 8001e06:	b0c7      	sub	sp, #284	@ 0x11c
 8001e08:	af02      	add	r7, sp, #8
 8001e0a:	4604      	mov	r4, r0
 8001e0c:	4608      	mov	r0, r1
 8001e0e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001e12:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001e16:	600a      	str	r2, [r1, #0]
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e1e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001e22:	4622      	mov	r2, r4
 8001e24:	701a      	strb	r2, [r3, #0]
 8001e26:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e2a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001e2e:	4602      	mov	r2, r0
 8001e30:	701a      	strb	r2, [r3, #0]
 8001e32:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e36:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e3a:	460a      	mov	r2, r1
 8001e3c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001e3e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001e46:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001e4a:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001e4e:	7812      	ldrb	r2, [r2, #0]
 8001e50:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001e52:	2300      	movs	r3, #0
 8001e54:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001e58:	e015      	b.n	8001e86 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001e5a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001e5e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001e62:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001e66:	6812      	ldr	r2, [r2, #0]
 8001e68:	441a      	add	r2, r3
 8001e6a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001e6e:	3301      	adds	r3, #1
 8001e70:	7811      	ldrb	r1, [r2, #0]
 8001e72:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001e76:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001e7a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001e7c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001e80:	3301      	adds	r3, #1
 8001e82:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001e86:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001e90:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001e94:	8812      	ldrh	r2, [r2, #0]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d8df      	bhi.n	8001e5a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001e9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e9e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	b299      	uxth	r1, r3
 8001ea6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001eaa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	f107 020c 	add.w	r2, r7, #12
 8001eb8:	200a      	movs	r0, #10
 8001eba:	9000      	str	r0, [sp, #0]
 8001ebc:	4803      	ldr	r0, [pc, #12]	@ (8001ecc <ssd1306_I2C_WriteMulti+0xc8>)
 8001ebe:	f001 fdcb 	bl	8003a58 <HAL_I2C_Master_Transmit>
}
 8001ec2:	bf00      	nop
 8001ec4:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd90      	pop	{r4, r7, pc}
 8001ecc:	20000108 	.word	0x20000108

08001ed0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af02      	add	r7, sp, #8
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	71fb      	strb	r3, [r7, #7]
 8001eda:	460b      	mov	r3, r1
 8001edc:	71bb      	strb	r3, [r7, #6]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001ee2:	79bb      	ldrb	r3, [r7, #6]
 8001ee4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001ee6:	797b      	ldrb	r3, [r7, #5]
 8001ee8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	b299      	uxth	r1, r3
 8001eee:	f107 020c 	add.w	r2, r7, #12
 8001ef2:	230a      	movs	r3, #10
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	4803      	ldr	r0, [pc, #12]	@ (8001f08 <ssd1306_I2C_Write+0x38>)
 8001efa:	f001 fdad 	bl	8003a58 <HAL_I2C_Master_Transmit>
}
 8001efe:	bf00      	nop
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000108 	.word	0x20000108

08001f0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f12:	4b15      	ldr	r3, [pc, #84]	@ (8001f68 <HAL_MspInit+0x5c>)
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	4a14      	ldr	r2, [pc, #80]	@ (8001f68 <HAL_MspInit+0x5c>)
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	6193      	str	r3, [r2, #24]
 8001f1e:	4b12      	ldr	r3, [pc, #72]	@ (8001f68 <HAL_MspInit+0x5c>)
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	60bb      	str	r3, [r7, #8]
 8001f28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f68 <HAL_MspInit+0x5c>)
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	4a0e      	ldr	r2, [pc, #56]	@ (8001f68 <HAL_MspInit+0x5c>)
 8001f30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f34:	61d3      	str	r3, [r2, #28]
 8001f36:	4b0c      	ldr	r3, [pc, #48]	@ (8001f68 <HAL_MspInit+0x5c>)
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f3e:	607b      	str	r3, [r7, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f42:	4b0a      	ldr	r3, [pc, #40]	@ (8001f6c <HAL_MspInit+0x60>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	4a04      	ldr	r2, [pc, #16]	@ (8001f6c <HAL_MspInit+0x60>)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	40010000 	.word	0x40010000

08001f70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b088      	sub	sp, #32
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f78:	f107 0310 	add.w	r3, r7, #16
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a2c      	ldr	r2, [pc, #176]	@ (800203c <HAL_ADC_MspInit+0xcc>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d151      	bne.n	8002034 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f90:	4b2b      	ldr	r3, [pc, #172]	@ (8002040 <HAL_ADC_MspInit+0xd0>)
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	4a2a      	ldr	r2, [pc, #168]	@ (8002040 <HAL_ADC_MspInit+0xd0>)
 8001f96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f9a:	6193      	str	r3, [r2, #24]
 8001f9c:	4b28      	ldr	r3, [pc, #160]	@ (8002040 <HAL_ADC_MspInit+0xd0>)
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa8:	4b25      	ldr	r3, [pc, #148]	@ (8002040 <HAL_ADC_MspInit+0xd0>)
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	4a24      	ldr	r2, [pc, #144]	@ (8002040 <HAL_ADC_MspInit+0xd0>)
 8001fae:	f043 0304 	orr.w	r3, r3, #4
 8001fb2:	6193      	str	r3, [r2, #24]
 8001fb4:	4b22      	ldr	r3, [pc, #136]	@ (8002040 <HAL_ADC_MspInit+0xd0>)
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	60bb      	str	r3, [r7, #8]
 8001fbe:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc8:	f107 0310 	add.w	r3, r7, #16
 8001fcc:	4619      	mov	r1, r3
 8001fce:	481d      	ldr	r0, [pc, #116]	@ (8002044 <HAL_ADC_MspInit+0xd4>)
 8001fd0:	f001 fa50 	bl	8003474 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001fd4:	4b1c      	ldr	r3, [pc, #112]	@ (8002048 <HAL_ADC_MspInit+0xd8>)
 8001fd6:	4a1d      	ldr	r2, [pc, #116]	@ (800204c <HAL_ADC_MspInit+0xdc>)
 8001fd8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fda:	4b1b      	ldr	r3, [pc, #108]	@ (8002048 <HAL_ADC_MspInit+0xd8>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fe0:	4b19      	ldr	r3, [pc, #100]	@ (8002048 <HAL_ADC_MspInit+0xd8>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001fe6:	4b18      	ldr	r3, [pc, #96]	@ (8002048 <HAL_ADC_MspInit+0xd8>)
 8001fe8:	2280      	movs	r2, #128	@ 0x80
 8001fea:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001fec:	4b16      	ldr	r3, [pc, #88]	@ (8002048 <HAL_ADC_MspInit+0xd8>)
 8001fee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ff2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ff4:	4b14      	ldr	r3, [pc, #80]	@ (8002048 <HAL_ADC_MspInit+0xd8>)
 8001ff6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ffa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ffc:	4b12      	ldr	r3, [pc, #72]	@ (8002048 <HAL_ADC_MspInit+0xd8>)
 8001ffe:	2220      	movs	r2, #32
 8002000:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002002:	4b11      	ldr	r3, [pc, #68]	@ (8002048 <HAL_ADC_MspInit+0xd8>)
 8002004:	2200      	movs	r2, #0
 8002006:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002008:	480f      	ldr	r0, [pc, #60]	@ (8002048 <HAL_ADC_MspInit+0xd8>)
 800200a:	f001 f845 	bl	8003098 <HAL_DMA_Init>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002014:	f7ff fcba 	bl	800198c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a0b      	ldr	r2, [pc, #44]	@ (8002048 <HAL_ADC_MspInit+0xd8>)
 800201c:	621a      	str	r2, [r3, #32]
 800201e:	4a0a      	ldr	r2, [pc, #40]	@ (8002048 <HAL_ADC_MspInit+0xd8>)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002024:	2200      	movs	r2, #0
 8002026:	2100      	movs	r1, #0
 8002028:	2012      	movs	r0, #18
 800202a:	f000 fffe 	bl	800302a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800202e:	2012      	movs	r0, #18
 8002030:	f001 f817 	bl	8003062 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002034:	bf00      	nop
 8002036:	3720      	adds	r7, #32
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40012400 	.word	0x40012400
 8002040:	40021000 	.word	0x40021000
 8002044:	40010800 	.word	0x40010800
 8002048:	200000c4 	.word	0x200000c4
 800204c:	40020008 	.word	0x40020008

08002050 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b088      	sub	sp, #32
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002058:	f107 0310 	add.w	r3, r7, #16
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	609a      	str	r2, [r3, #8]
 8002064:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a16      	ldr	r2, [pc, #88]	@ (80020c4 <HAL_I2C_MspInit+0x74>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d125      	bne.n	80020bc <HAL_I2C_MspInit+0x6c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002070:	4b15      	ldr	r3, [pc, #84]	@ (80020c8 <HAL_I2C_MspInit+0x78>)
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	4a14      	ldr	r2, [pc, #80]	@ (80020c8 <HAL_I2C_MspInit+0x78>)
 8002076:	f043 0308 	orr.w	r3, r3, #8
 800207a:	6193      	str	r3, [r2, #24]
 800207c:	4b12      	ldr	r3, [pc, #72]	@ (80020c8 <HAL_I2C_MspInit+0x78>)
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	f003 0308 	and.w	r3, r3, #8
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002088:	23c0      	movs	r3, #192	@ 0xc0
 800208a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800208c:	2312      	movs	r3, #18
 800208e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002094:	2303      	movs	r3, #3
 8002096:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002098:	f107 0310 	add.w	r3, r7, #16
 800209c:	4619      	mov	r1, r3
 800209e:	480b      	ldr	r0, [pc, #44]	@ (80020cc <HAL_I2C_MspInit+0x7c>)
 80020a0:	f001 f9e8 	bl	8003474 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020a4:	4b08      	ldr	r3, [pc, #32]	@ (80020c8 <HAL_I2C_MspInit+0x78>)
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	4a07      	ldr	r2, [pc, #28]	@ (80020c8 <HAL_I2C_MspInit+0x78>)
 80020aa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80020ae:	61d3      	str	r3, [r2, #28]
 80020b0:	4b05      	ldr	r3, [pc, #20]	@ (80020c8 <HAL_I2C_MspInit+0x78>)
 80020b2:	69db      	ldr	r3, [r3, #28]
 80020b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020b8:	60bb      	str	r3, [r7, #8]
 80020ba:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80020bc:	bf00      	nop
 80020be:	3720      	adds	r7, #32
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40005400 	.word	0x40005400
 80020c8:	40021000 	.word	0x40021000
 80020cc:	40010c00 	.word	0x40010c00

080020d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020e0:	d114      	bne.n	800210c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020e2:	4b19      	ldr	r3, [pc, #100]	@ (8002148 <HAL_TIM_Base_MspInit+0x78>)
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	4a18      	ldr	r2, [pc, #96]	@ (8002148 <HAL_TIM_Base_MspInit+0x78>)
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	61d3      	str	r3, [r2, #28]
 80020ee:	4b16      	ldr	r3, [pc, #88]	@ (8002148 <HAL_TIM_Base_MspInit+0x78>)
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020fa:	2200      	movs	r2, #0
 80020fc:	2100      	movs	r1, #0
 80020fe:	201c      	movs	r0, #28
 8002100:	f000 ff93 	bl	800302a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002104:	201c      	movs	r0, #28
 8002106:	f000 ffac 	bl	8003062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800210a:	e018      	b.n	800213e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a0e      	ldr	r2, [pc, #56]	@ (800214c <HAL_TIM_Base_MspInit+0x7c>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d113      	bne.n	800213e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002116:	4b0c      	ldr	r3, [pc, #48]	@ (8002148 <HAL_TIM_Base_MspInit+0x78>)
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	4a0b      	ldr	r2, [pc, #44]	@ (8002148 <HAL_TIM_Base_MspInit+0x78>)
 800211c:	f043 0302 	orr.w	r3, r3, #2
 8002120:	61d3      	str	r3, [r2, #28]
 8002122:	4b09      	ldr	r3, [pc, #36]	@ (8002148 <HAL_TIM_Base_MspInit+0x78>)
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800212e:	2200      	movs	r2, #0
 8002130:	2100      	movs	r1, #0
 8002132:	201d      	movs	r0, #29
 8002134:	f000 ff79 	bl	800302a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002138:	201d      	movs	r0, #29
 800213a:	f000 ff92 	bl	8003062 <HAL_NVIC_EnableIRQ>
}
 800213e:	bf00      	nop
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40021000 	.word	0x40021000
 800214c:	40000400 	.word	0x40000400

08002150 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002158:	f107 0310 	add.w	r3, r7, #16
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a0f      	ldr	r2, [pc, #60]	@ (80021a8 <HAL_TIM_MspPostInit+0x58>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d117      	bne.n	80021a0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002170:	4b0e      	ldr	r3, [pc, #56]	@ (80021ac <HAL_TIM_MspPostInit+0x5c>)
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	4a0d      	ldr	r2, [pc, #52]	@ (80021ac <HAL_TIM_MspPostInit+0x5c>)
 8002176:	f043 0304 	orr.w	r3, r3, #4
 800217a:	6193      	str	r3, [r2, #24]
 800217c:	4b0b      	ldr	r3, [pc, #44]	@ (80021ac <HAL_TIM_MspPostInit+0x5c>)
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002188:	2340      	movs	r3, #64	@ 0x40
 800218a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218c:	2302      	movs	r3, #2
 800218e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002190:	2302      	movs	r3, #2
 8002192:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002194:	f107 0310 	add.w	r3, r7, #16
 8002198:	4619      	mov	r1, r3
 800219a:	4805      	ldr	r0, [pc, #20]	@ (80021b0 <HAL_TIM_MspPostInit+0x60>)
 800219c:	f001 f96a 	bl	8003474 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80021a0:	bf00      	nop
 80021a2:	3720      	adds	r7, #32
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40000400 	.word	0x40000400
 80021ac:	40021000 	.word	0x40021000
 80021b0:	40010800 	.word	0x40010800

080021b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021b8:	bf00      	nop
 80021ba:	e7fd      	b.n	80021b8 <NMI_Handler+0x4>

080021bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021c0:	bf00      	nop
 80021c2:	e7fd      	b.n	80021c0 <HardFault_Handler+0x4>

080021c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021c8:	bf00      	nop
 80021ca:	e7fd      	b.n	80021c8 <MemManage_Handler+0x4>

080021cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021d0:	bf00      	nop
 80021d2:	e7fd      	b.n	80021d0 <BusFault_Handler+0x4>

080021d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021d8:	bf00      	nop
 80021da:	e7fd      	b.n	80021d8 <UsageFault_Handler+0x4>

080021dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr

080021e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr

080021f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr

08002200 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002204:	f000 f8d2 	bl	80023ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002208:	bf00      	nop
 800220a:	bd80      	pop	{r7, pc}

0800220c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002210:	4802      	ldr	r0, [pc, #8]	@ (800221c <DMA1_Channel1_IRQHandler+0x10>)
 8002212:	f000 fffb 	bl	800320c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	200000c4 	.word	0x200000c4

08002220 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002224:	4802      	ldr	r0, [pc, #8]	@ (8002230 <ADC1_2_IRQHandler+0x10>)
 8002226:	f000 fa93 	bl	8002750 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20000094 	.word	0x20000094

08002234 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002238:	4802      	ldr	r0, [pc, #8]	@ (8002244 <TIM2_IRQHandler+0x10>)
 800223a:	f002 ffa1 	bl	8005180 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	2000015c 	.word	0x2000015c

08002248 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800224c:	4802      	ldr	r0, [pc, #8]	@ (8002258 <TIM3_IRQHandler+0x10>)
 800224e:	f002 ff97 	bl	8005180 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	200001a4 	.word	0x200001a4

0800225c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002264:	4a14      	ldr	r2, [pc, #80]	@ (80022b8 <_sbrk+0x5c>)
 8002266:	4b15      	ldr	r3, [pc, #84]	@ (80022bc <_sbrk+0x60>)
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002270:	4b13      	ldr	r3, [pc, #76]	@ (80022c0 <_sbrk+0x64>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d102      	bne.n	800227e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002278:	4b11      	ldr	r3, [pc, #68]	@ (80022c0 <_sbrk+0x64>)
 800227a:	4a12      	ldr	r2, [pc, #72]	@ (80022c4 <_sbrk+0x68>)
 800227c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800227e:	4b10      	ldr	r3, [pc, #64]	@ (80022c0 <_sbrk+0x64>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4413      	add	r3, r2
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	429a      	cmp	r2, r3
 800228a:	d207      	bcs.n	800229c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800228c:	f003 fd44 	bl	8005d18 <__errno>
 8002290:	4603      	mov	r3, r0
 8002292:	220c      	movs	r2, #12
 8002294:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002296:	f04f 33ff 	mov.w	r3, #4294967295
 800229a:	e009      	b.n	80022b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800229c:	4b08      	ldr	r3, [pc, #32]	@ (80022c0 <_sbrk+0x64>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022a2:	4b07      	ldr	r3, [pc, #28]	@ (80022c0 <_sbrk+0x64>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4413      	add	r3, r2
 80022aa:	4a05      	ldr	r2, [pc, #20]	@ (80022c0 <_sbrk+0x64>)
 80022ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ae:	68fb      	ldr	r3, [r7, #12]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	20002800 	.word	0x20002800
 80022bc:	00000400 	.word	0x00000400
 80022c0:	2000064c 	.word	0x2000064c
 80022c4:	200007a0 	.word	0x200007a0

080022c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022cc:	bf00      	nop
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr

080022d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022d4:	f7ff fff8 	bl	80022c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022d8:	480b      	ldr	r0, [pc, #44]	@ (8002308 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80022da:	490c      	ldr	r1, [pc, #48]	@ (800230c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80022dc:	4a0c      	ldr	r2, [pc, #48]	@ (8002310 <LoopFillZerobss+0x16>)
  movs r3, #0
 80022de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022e0:	e002      	b.n	80022e8 <LoopCopyDataInit>

080022e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022e6:	3304      	adds	r3, #4

080022e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022ec:	d3f9      	bcc.n	80022e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ee:	4a09      	ldr	r2, [pc, #36]	@ (8002314 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80022f0:	4c09      	ldr	r4, [pc, #36]	@ (8002318 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022f4:	e001      	b.n	80022fa <LoopFillZerobss>

080022f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022f8:	3204      	adds	r2, #4

080022fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022fc:	d3fb      	bcc.n	80022f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022fe:	f003 fd11 	bl	8005d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002302:	f7ff f821 	bl	8001348 <main>
  bx lr
 8002306:	4770      	bx	lr
  ldr r0, =_sdata
 8002308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800230c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002310:	08007800 	.word	0x08007800
  ldr r2, =_sbss
 8002314:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002318:	2000079c 	.word	0x2000079c

0800231c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800231c:	e7fe      	b.n	800231c <CAN1_RX1_IRQHandler>
	...

08002320 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002324:	4b08      	ldr	r3, [pc, #32]	@ (8002348 <HAL_Init+0x28>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a07      	ldr	r2, [pc, #28]	@ (8002348 <HAL_Init+0x28>)
 800232a:	f043 0310 	orr.w	r3, r3, #16
 800232e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002330:	2003      	movs	r0, #3
 8002332:	f000 fe6f 	bl	8003014 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002336:	200f      	movs	r0, #15
 8002338:	f000 f808 	bl	800234c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800233c:	f7ff fde6 	bl	8001f0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40022000 	.word	0x40022000

0800234c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002354:	4b12      	ldr	r3, [pc, #72]	@ (80023a0 <HAL_InitTick+0x54>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	4b12      	ldr	r3, [pc, #72]	@ (80023a4 <HAL_InitTick+0x58>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	4619      	mov	r1, r3
 800235e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002362:	fbb3 f3f1 	udiv	r3, r3, r1
 8002366:	fbb2 f3f3 	udiv	r3, r2, r3
 800236a:	4618      	mov	r0, r3
 800236c:	f000 fe87 	bl	800307e <HAL_SYSTICK_Config>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e00e      	b.n	8002398 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b0f      	cmp	r3, #15
 800237e:	d80a      	bhi.n	8002396 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002380:	2200      	movs	r2, #0
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	f04f 30ff 	mov.w	r0, #4294967295
 8002388:	f000 fe4f 	bl	800302a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800238c:	4a06      	ldr	r2, [pc, #24]	@ (80023a8 <HAL_InitTick+0x5c>)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002392:	2300      	movs	r3, #0
 8002394:	e000      	b.n	8002398 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
}
 8002398:	4618      	mov	r0, r3
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	2000001c 	.word	0x2000001c
 80023a4:	20000024 	.word	0x20000024
 80023a8:	20000020 	.word	0x20000020

080023ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023b0:	4b05      	ldr	r3, [pc, #20]	@ (80023c8 <HAL_IncTick+0x1c>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	461a      	mov	r2, r3
 80023b6:	4b05      	ldr	r3, [pc, #20]	@ (80023cc <HAL_IncTick+0x20>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4413      	add	r3, r2
 80023bc:	4a03      	ldr	r2, [pc, #12]	@ (80023cc <HAL_IncTick+0x20>)
 80023be:	6013      	str	r3, [r2, #0]
}
 80023c0:	bf00      	nop
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr
 80023c8:	20000024 	.word	0x20000024
 80023cc:	20000650 	.word	0x20000650

080023d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return uwTick;
 80023d4:	4b02      	ldr	r3, [pc, #8]	@ (80023e0 <HAL_GetTick+0x10>)
 80023d6:	681b      	ldr	r3, [r3, #0]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr
 80023e0:	20000650 	.word	0x20000650

080023e4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023ec:	2300      	movs	r3, #0
 80023ee:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e0be      	b.n	8002584 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002410:	2b00      	cmp	r3, #0
 8002412:	d109      	bne.n	8002428 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7ff fda4 	bl	8001f70 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 fbc7 	bl	8002bbc <ADC_ConversionStop_Disable>
 800242e:	4603      	mov	r3, r0
 8002430:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002436:	f003 0310 	and.w	r3, r3, #16
 800243a:	2b00      	cmp	r3, #0
 800243c:	f040 8099 	bne.w	8002572 <HAL_ADC_Init+0x18e>
 8002440:	7dfb      	ldrb	r3, [r7, #23]
 8002442:	2b00      	cmp	r3, #0
 8002444:	f040 8095 	bne.w	8002572 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800244c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002450:	f023 0302 	bic.w	r3, r3, #2
 8002454:	f043 0202 	orr.w	r2, r3, #2
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002464:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	7b1b      	ldrb	r3, [r3, #12]
 800246a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800246c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800246e:	68ba      	ldr	r2, [r7, #8]
 8002470:	4313      	orrs	r3, r2
 8002472:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800247c:	d003      	beq.n	8002486 <HAL_ADC_Init+0xa2>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d102      	bne.n	800248c <HAL_ADC_Init+0xa8>
 8002486:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800248a:	e000      	b.n	800248e <HAL_ADC_Init+0xaa>
 800248c:	2300      	movs	r3, #0
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	4313      	orrs	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	7d1b      	ldrb	r3, [r3, #20]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d119      	bne.n	80024d0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	7b1b      	ldrb	r3, [r3, #12]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d109      	bne.n	80024b8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	3b01      	subs	r3, #1
 80024aa:	035a      	lsls	r2, r3, #13
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80024b4:	613b      	str	r3, [r7, #16]
 80024b6:	e00b      	b.n	80024d0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024bc:	f043 0220 	orr.w	r2, r3, #32
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c8:	f043 0201 	orr.w	r2, r3, #1
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	430a      	orrs	r2, r1
 80024e2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689a      	ldr	r2, [r3, #8]
 80024ea:	4b28      	ldr	r3, [pc, #160]	@ (800258c <HAL_ADC_Init+0x1a8>)
 80024ec:	4013      	ands	r3, r2
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	6812      	ldr	r2, [r2, #0]
 80024f2:	68b9      	ldr	r1, [r7, #8]
 80024f4:	430b      	orrs	r3, r1
 80024f6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002500:	d003      	beq.n	800250a <HAL_ADC_Init+0x126>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d104      	bne.n	8002514 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	3b01      	subs	r3, #1
 8002510:	051b      	lsls	r3, r3, #20
 8002512:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800251a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	430a      	orrs	r2, r1
 8002526:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689a      	ldr	r2, [r3, #8]
 800252e:	4b18      	ldr	r3, [pc, #96]	@ (8002590 <HAL_ADC_Init+0x1ac>)
 8002530:	4013      	ands	r3, r2
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	429a      	cmp	r2, r3
 8002536:	d10b      	bne.n	8002550 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002542:	f023 0303 	bic.w	r3, r3, #3
 8002546:	f043 0201 	orr.w	r2, r3, #1
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800254e:	e018      	b.n	8002582 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002554:	f023 0312 	bic.w	r3, r3, #18
 8002558:	f043 0210 	orr.w	r2, r3, #16
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002564:	f043 0201 	orr.w	r2, r3, #1
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002570:	e007      	b.n	8002582 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002576:	f043 0210 	orr.w	r2, r3, #16
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002582:	7dfb      	ldrb	r3, [r7, #23]
}
 8002584:	4618      	mov	r0, r3
 8002586:	3718      	adds	r7, #24
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	ffe1f7fd 	.word	0xffe1f7fd
 8002590:	ff1f0efe 	.word	0xff1f0efe

08002594 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025a0:	2300      	movs	r3, #0
 80025a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a64      	ldr	r2, [pc, #400]	@ (800273c <HAL_ADC_Start_DMA+0x1a8>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d004      	beq.n	80025b8 <HAL_ADC_Start_DMA+0x24>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a63      	ldr	r2, [pc, #396]	@ (8002740 <HAL_ADC_Start_DMA+0x1ac>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d106      	bne.n	80025c6 <HAL_ADC_Start_DMA+0x32>
 80025b8:	4b60      	ldr	r3, [pc, #384]	@ (800273c <HAL_ADC_Start_DMA+0x1a8>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f040 80b3 	bne.w	800272c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d101      	bne.n	80025d4 <HAL_ADC_Start_DMA+0x40>
 80025d0:	2302      	movs	r3, #2
 80025d2:	e0ae      	b.n	8002732 <HAL_ADC_Start_DMA+0x19e>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f000 fa93 	bl	8002b08 <ADC_Enable>
 80025e2:	4603      	mov	r3, r0
 80025e4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80025e6:	7dfb      	ldrb	r3, [r7, #23]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f040 809a 	bne.w	8002722 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80025f6:	f023 0301 	bic.w	r3, r3, #1
 80025fa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a4e      	ldr	r2, [pc, #312]	@ (8002740 <HAL_ADC_Start_DMA+0x1ac>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d105      	bne.n	8002618 <HAL_ADC_Start_DMA+0x84>
 800260c:	4b4b      	ldr	r3, [pc, #300]	@ (800273c <HAL_ADC_Start_DMA+0x1a8>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d115      	bne.n	8002644 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800261c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800262e:	2b00      	cmp	r3, #0
 8002630:	d026      	beq.n	8002680 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002636:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800263a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002642:	e01d      	b.n	8002680 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002648:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a39      	ldr	r2, [pc, #228]	@ (800273c <HAL_ADC_Start_DMA+0x1a8>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d004      	beq.n	8002664 <HAL_ADC_Start_DMA+0xd0>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a38      	ldr	r2, [pc, #224]	@ (8002740 <HAL_ADC_Start_DMA+0x1ac>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d10d      	bne.n	8002680 <HAL_ADC_Start_DMA+0xec>
 8002664:	4b35      	ldr	r3, [pc, #212]	@ (800273c <HAL_ADC_Start_DMA+0x1a8>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800266c:	2b00      	cmp	r3, #0
 800266e:	d007      	beq.n	8002680 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002674:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002678:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002684:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d006      	beq.n	800269a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002690:	f023 0206 	bic.w	r2, r3, #6
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002698:	e002      	b.n	80026a0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	4a25      	ldr	r2, [pc, #148]	@ (8002744 <HAL_ADC_Start_DMA+0x1b0>)
 80026ae:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	4a24      	ldr	r2, [pc, #144]	@ (8002748 <HAL_ADC_Start_DMA+0x1b4>)
 80026b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	4a23      	ldr	r2, [pc, #140]	@ (800274c <HAL_ADC_Start_DMA+0x1b8>)
 80026be:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f06f 0202 	mvn.w	r2, #2
 80026c8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026d8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6a18      	ldr	r0, [r3, #32]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	334c      	adds	r3, #76	@ 0x4c
 80026e4:	4619      	mov	r1, r3
 80026e6:	68ba      	ldr	r2, [r7, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f000 fd2f 	bl	800314c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80026f8:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80026fc:	d108      	bne.n	8002710 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800270c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800270e:	e00f      	b.n	8002730 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689a      	ldr	r2, [r3, #8]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800271e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002720:	e006      	b.n	8002730 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 800272a:	e001      	b.n	8002730 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002730:	7dfb      	ldrb	r3, [r7, #23]
}
 8002732:	4618      	mov	r0, r3
 8002734:	3718      	adds	r7, #24
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40012400 	.word	0x40012400
 8002740:	40012800 	.word	0x40012800
 8002744:	08002c3f 	.word	0x08002c3f
 8002748:	08002cbb 	.word	0x08002cbb
 800274c:	08002cd7 	.word	0x08002cd7

08002750 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	f003 0320 	and.w	r3, r3, #32
 800276e:	2b00      	cmp	r3, #0
 8002770:	d03e      	beq.n	80027f0 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d039      	beq.n	80027f0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002780:	f003 0310 	and.w	r3, r3, #16
 8002784:	2b00      	cmp	r3, #0
 8002786:	d105      	bne.n	8002794 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800278c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800279e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80027a2:	d11d      	bne.n	80027e0 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d119      	bne.n	80027e0 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0220 	bic.w	r2, r2, #32
 80027ba:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d105      	bne.n	80027e0 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d8:	f043 0201 	orr.w	r2, r3, #1
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 f874 	bl	80028ce <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f06f 0212 	mvn.w	r2, #18
 80027ee:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d04d      	beq.n	8002896 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b00      	cmp	r3, #0
 8002802:	d048      	beq.n	8002896 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002808:	f003 0310 	and.w	r3, r3, #16
 800280c:	2b00      	cmp	r3, #0
 800280e:	d105      	bne.n	800281c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002814:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8002826:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 800282a:	d012      	beq.n	8002852 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002836:	2b00      	cmp	r3, #0
 8002838:	d125      	bne.n	8002886 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002844:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002848:	d11d      	bne.n	8002886 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800284e:	2b00      	cmp	r3, #0
 8002850:	d119      	bne.n	8002886 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	685a      	ldr	r2, [r3, #4]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002860:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002866:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002872:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002876:	2b00      	cmp	r3, #0
 8002878:	d105      	bne.n	8002886 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800287e:	f043 0201 	orr.w	r2, r3, #1
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 faee 	bl	8002e68 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f06f 020c 	mvn.w	r2, #12
 8002894:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800289c:	2b00      	cmp	r3, #0
 800289e:	d012      	beq.n	80028c6 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00d      	beq.n	80028c6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ae:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f81b 	bl	80028f2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f06f 0201 	mvn.w	r2, #1
 80028c4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80028c6:	bf00      	nop
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr

080028e0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr

080028f2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr

08002904 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	bc80      	pop	{r7}
 8002914:	4770      	bx	lr
	...

08002918 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002922:	2300      	movs	r3, #0
 8002924:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002926:	2300      	movs	r3, #0
 8002928:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002930:	2b01      	cmp	r3, #1
 8002932:	d101      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x20>
 8002934:	2302      	movs	r3, #2
 8002936:	e0dc      	b.n	8002af2 <HAL_ADC_ConfigChannel+0x1da>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	2b06      	cmp	r3, #6
 8002946:	d81c      	bhi.n	8002982 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	3b05      	subs	r3, #5
 800295a:	221f      	movs	r2, #31
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	43db      	mvns	r3, r3
 8002962:	4019      	ands	r1, r3
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	6818      	ldr	r0, [r3, #0]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	4613      	mov	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	3b05      	subs	r3, #5
 8002974:	fa00 f203 	lsl.w	r2, r0, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	430a      	orrs	r2, r1
 800297e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002980:	e03c      	b.n	80029fc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b0c      	cmp	r3, #12
 8002988:	d81c      	bhi.n	80029c4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	4613      	mov	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	3b23      	subs	r3, #35	@ 0x23
 800299c:	221f      	movs	r2, #31
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	43db      	mvns	r3, r3
 80029a4:	4019      	ands	r1, r3
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	6818      	ldr	r0, [r3, #0]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	4613      	mov	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4413      	add	r3, r2
 80029b4:	3b23      	subs	r3, #35	@ 0x23
 80029b6:	fa00 f203 	lsl.w	r2, r0, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80029c2:	e01b      	b.n	80029fc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	4613      	mov	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	3b41      	subs	r3, #65	@ 0x41
 80029d6:	221f      	movs	r2, #31
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	4019      	ands	r1, r3
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	6818      	ldr	r0, [r3, #0]
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	4613      	mov	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4413      	add	r3, r2
 80029ee:	3b41      	subs	r3, #65	@ 0x41
 80029f0:	fa00 f203 	lsl.w	r2, r0, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	430a      	orrs	r2, r1
 80029fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b09      	cmp	r3, #9
 8002a02:	d91c      	bls.n	8002a3e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68d9      	ldr	r1, [r3, #12]
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	4413      	add	r3, r2
 8002a14:	3b1e      	subs	r3, #30
 8002a16:	2207      	movs	r2, #7
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	4019      	ands	r1, r3
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	6898      	ldr	r0, [r3, #8]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	4413      	add	r3, r2
 8002a2e:	3b1e      	subs	r3, #30
 8002a30:	fa00 f203 	lsl.w	r2, r0, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	60da      	str	r2, [r3, #12]
 8002a3c:	e019      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6919      	ldr	r1, [r3, #16]
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	4413      	add	r3, r2
 8002a4e:	2207      	movs	r2, #7
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	43db      	mvns	r3, r3
 8002a56:	4019      	ands	r1, r3
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	6898      	ldr	r0, [r3, #8]
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	4613      	mov	r3, r2
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	4413      	add	r3, r2
 8002a66:	fa00 f203 	lsl.w	r2, r0, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2b10      	cmp	r3, #16
 8002a78:	d003      	beq.n	8002a82 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a7e:	2b11      	cmp	r3, #17
 8002a80:	d132      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a1d      	ldr	r2, [pc, #116]	@ (8002afc <HAL_ADC_ConfigChannel+0x1e4>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d125      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d126      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002aa8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2b10      	cmp	r3, #16
 8002ab0:	d11a      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ab2:	4b13      	ldr	r3, [pc, #76]	@ (8002b00 <HAL_ADC_ConfigChannel+0x1e8>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a13      	ldr	r2, [pc, #76]	@ (8002b04 <HAL_ADC_ConfigChannel+0x1ec>)
 8002ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8002abc:	0c9a      	lsrs	r2, r3, #18
 8002abe:	4613      	mov	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ac8:	e002      	b.n	8002ad0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	3b01      	subs	r3, #1
 8002ace:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f9      	bne.n	8002aca <HAL_ADC_ConfigChannel+0x1b2>
 8002ad6:	e007      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002adc:	f043 0220 	orr.w	r2, r3, #32
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bc80      	pop	{r7}
 8002afa:	4770      	bx	lr
 8002afc:	40012400 	.word	0x40012400
 8002b00:	2000001c 	.word	0x2000001c
 8002b04:	431bde83 	.word	0x431bde83

08002b08 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d040      	beq.n	8002ba8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f042 0201 	orr.w	r2, r2, #1
 8002b34:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b36:	4b1f      	ldr	r3, [pc, #124]	@ (8002bb4 <ADC_Enable+0xac>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a1f      	ldr	r2, [pc, #124]	@ (8002bb8 <ADC_Enable+0xb0>)
 8002b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b40:	0c9b      	lsrs	r3, r3, #18
 8002b42:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b44:	e002      	b.n	8002b4c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f9      	bne.n	8002b46 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b52:	f7ff fc3d 	bl	80023d0 <HAL_GetTick>
 8002b56:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b58:	e01f      	b.n	8002b9a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b5a:	f7ff fc39 	bl	80023d0 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d918      	bls.n	8002b9a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d011      	beq.n	8002b9a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b7a:	f043 0210 	orr.w	r2, r3, #16
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b86:	f043 0201 	orr.w	r2, r3, #1
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e007      	b.n	8002baa <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d1d8      	bne.n	8002b5a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	2000001c 	.word	0x2000001c
 8002bb8:	431bde83 	.word	0x431bde83

08002bbc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d12e      	bne.n	8002c34 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0201 	bic.w	r2, r2, #1
 8002be4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002be6:	f7ff fbf3 	bl	80023d0 <HAL_GetTick>
 8002bea:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002bec:	e01b      	b.n	8002c26 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002bee:	f7ff fbef 	bl	80023d0 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d914      	bls.n	8002c26 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d10d      	bne.n	8002c26 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c0e:	f043 0210 	orr.w	r2, r3, #16
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c1a:	f043 0201 	orr.w	r2, r3, #1
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e007      	b.n	8002c36 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d0dc      	beq.n	8002bee <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b084      	sub	sp, #16
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c50:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d127      	bne.n	8002ca8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c5c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002c6e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002c72:	d115      	bne.n	8002ca0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d111      	bne.n	8002ca0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d105      	bne.n	8002ca0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c98:	f043 0201 	orr.w	r2, r3, #1
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f7ff fe14 	bl	80028ce <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002ca6:	e004      	b.n	8002cb2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	4798      	blx	r3
}
 8002cb2:	bf00      	nop
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b084      	sub	sp, #16
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f7ff fe09 	bl	80028e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cce:	bf00      	nop
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b084      	sub	sp, #16
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf4:	f043 0204 	orr.w	r2, r3, #4
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f7ff fe01 	bl	8002904 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d02:	bf00      	nop
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
	...

08002d0c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002d0c:	b590      	push	{r4, r7, lr}
 8002d0e:	b087      	sub	sp, #28
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d14:	2300      	movs	r3, #0
 8002d16:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d101      	bne.n	8002d2a <HAL_ADCEx_Calibration_Start+0x1e>
 8002d26:	2302      	movs	r3, #2
 8002d28:	e097      	b.n	8002e5a <HAL_ADCEx_Calibration_Start+0x14e>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7ff ff42 	bl	8002bbc <ADC_ConversionStop_Disable>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f7ff fee3 	bl	8002b08 <ADC_Enable>
 8002d42:	4603      	mov	r3, r0
 8002d44:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8002d46:	7dfb      	ldrb	r3, [r7, #23]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f040 8081 	bne.w	8002e50 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d52:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002d56:	f023 0302 	bic.w	r3, r3, #2
 8002d5a:	f043 0202 	orr.w	r2, r3, #2
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002d62:	4b40      	ldr	r3, [pc, #256]	@ (8002e64 <HAL_ADCEx_Calibration_Start+0x158>)
 8002d64:	681c      	ldr	r4, [r3, #0]
 8002d66:	2002      	movs	r0, #2
 8002d68:	f001 ffc4 	bl	8004cf4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002d72:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002d74:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002d76:	e002      	b.n	8002d7e <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1f9      	bne.n	8002d78 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 0208 	orr.w	r2, r2, #8
 8002d92:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002d94:	f7ff fb1c 	bl	80023d0 <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002d9a:	e01b      	b.n	8002dd4 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002d9c:	f7ff fb18 	bl	80023d0 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b0a      	cmp	r3, #10
 8002da8:	d914      	bls.n	8002dd4 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f003 0308 	and.w	r3, r3, #8
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00d      	beq.n	8002dd4 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dbc:	f023 0312 	bic.w	r3, r3, #18
 8002dc0:	f043 0210 	orr.w	r2, r3, #16
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e042      	b.n	8002e5a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1dc      	bne.n	8002d9c <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f042 0204 	orr.w	r2, r2, #4
 8002df0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002df2:	f7ff faed 	bl	80023d0 <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002df8:	e01b      	b.n	8002e32 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002dfa:	f7ff fae9 	bl	80023d0 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b0a      	cmp	r3, #10
 8002e06:	d914      	bls.n	8002e32 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 0304 	and.w	r3, r3, #4
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00d      	beq.n	8002e32 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e1a:	f023 0312 	bic.w	r3, r3, #18
 8002e1e:	f043 0210 	orr.w	r2, r3, #16
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e013      	b.n	8002e5a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f003 0304 	and.w	r3, r3, #4
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1dc      	bne.n	8002dfa <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e44:	f023 0303 	bic.w	r3, r3, #3
 8002e48:	f043 0201 	orr.w	r2, r3, #1
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002e58:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	371c      	adds	r7, #28
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd90      	pop	{r4, r7, pc}
 8002e62:	bf00      	nop
 8002e64:	2000001c 	.word	0x2000001c

08002e68 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bc80      	pop	{r7}
 8002e78:	4770      	bx	lr
	...

08002e7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e98:	4013      	ands	r3, r2
 8002e9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ea4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ea8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eae:	4a04      	ldr	r2, [pc, #16]	@ (8002ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	60d3      	str	r3, [r2, #12]
}
 8002eb4:	bf00      	nop
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bc80      	pop	{r7}
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	e000ed00 	.word	0xe000ed00

08002ec4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ec8:	4b04      	ldr	r3, [pc, #16]	@ (8002edc <__NVIC_GetPriorityGrouping+0x18>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	0a1b      	lsrs	r3, r3, #8
 8002ece:	f003 0307 	and.w	r3, r3, #7
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	e000ed00 	.word	0xe000ed00

08002ee0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	db0b      	blt.n	8002f0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ef2:	79fb      	ldrb	r3, [r7, #7]
 8002ef4:	f003 021f 	and.w	r2, r3, #31
 8002ef8:	4906      	ldr	r1, [pc, #24]	@ (8002f14 <__NVIC_EnableIRQ+0x34>)
 8002efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efe:	095b      	lsrs	r3, r3, #5
 8002f00:	2001      	movs	r0, #1
 8002f02:	fa00 f202 	lsl.w	r2, r0, r2
 8002f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr
 8002f14:	e000e100 	.word	0xe000e100

08002f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	4603      	mov	r3, r0
 8002f20:	6039      	str	r1, [r7, #0]
 8002f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	db0a      	blt.n	8002f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	490c      	ldr	r1, [pc, #48]	@ (8002f64 <__NVIC_SetPriority+0x4c>)
 8002f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f36:	0112      	lsls	r2, r2, #4
 8002f38:	b2d2      	uxtb	r2, r2
 8002f3a:	440b      	add	r3, r1
 8002f3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f40:	e00a      	b.n	8002f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	4908      	ldr	r1, [pc, #32]	@ (8002f68 <__NVIC_SetPriority+0x50>)
 8002f48:	79fb      	ldrb	r3, [r7, #7]
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	3b04      	subs	r3, #4
 8002f50:	0112      	lsls	r2, r2, #4
 8002f52:	b2d2      	uxtb	r2, r2
 8002f54:	440b      	add	r3, r1
 8002f56:	761a      	strb	r2, [r3, #24]
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bc80      	pop	{r7}
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	e000e100 	.word	0xe000e100
 8002f68:	e000ed00 	.word	0xe000ed00

08002f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b089      	sub	sp, #36	@ 0x24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f1c3 0307 	rsb	r3, r3, #7
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	bf28      	it	cs
 8002f8a:	2304      	movcs	r3, #4
 8002f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	3304      	adds	r3, #4
 8002f92:	2b06      	cmp	r3, #6
 8002f94:	d902      	bls.n	8002f9c <NVIC_EncodePriority+0x30>
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	3b03      	subs	r3, #3
 8002f9a:	e000      	b.n	8002f9e <NVIC_EncodePriority+0x32>
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	43da      	mvns	r2, r3
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	401a      	ands	r2, r3
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	fa01 f303 	lsl.w	r3, r1, r3
 8002fbe:	43d9      	mvns	r1, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fc4:	4313      	orrs	r3, r2
         );
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3724      	adds	r7, #36	@ 0x24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr

08002fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fe0:	d301      	bcc.n	8002fe6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e00f      	b.n	8003006 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fe6:	4a0a      	ldr	r2, [pc, #40]	@ (8003010 <SysTick_Config+0x40>)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3b01      	subs	r3, #1
 8002fec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fee:	210f      	movs	r1, #15
 8002ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff4:	f7ff ff90 	bl	8002f18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ff8:	4b05      	ldr	r3, [pc, #20]	@ (8003010 <SysTick_Config+0x40>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ffe:	4b04      	ldr	r3, [pc, #16]	@ (8003010 <SysTick_Config+0x40>)
 8003000:	2207      	movs	r2, #7
 8003002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	e000e010 	.word	0xe000e010

08003014 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f7ff ff2d 	bl	8002e7c <__NVIC_SetPriorityGrouping>
}
 8003022:	bf00      	nop
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800302a:	b580      	push	{r7, lr}
 800302c:	b086      	sub	sp, #24
 800302e:	af00      	add	r7, sp, #0
 8003030:	4603      	mov	r3, r0
 8003032:	60b9      	str	r1, [r7, #8]
 8003034:	607a      	str	r2, [r7, #4]
 8003036:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800303c:	f7ff ff42 	bl	8002ec4 <__NVIC_GetPriorityGrouping>
 8003040:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	68b9      	ldr	r1, [r7, #8]
 8003046:	6978      	ldr	r0, [r7, #20]
 8003048:	f7ff ff90 	bl	8002f6c <NVIC_EncodePriority>
 800304c:	4602      	mov	r2, r0
 800304e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003052:	4611      	mov	r1, r2
 8003054:	4618      	mov	r0, r3
 8003056:	f7ff ff5f 	bl	8002f18 <__NVIC_SetPriority>
}
 800305a:	bf00      	nop
 800305c:	3718      	adds	r7, #24
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b082      	sub	sp, #8
 8003066:	af00      	add	r7, sp, #0
 8003068:	4603      	mov	r3, r0
 800306a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800306c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff ff35 	bl	8002ee0 <__NVIC_EnableIRQ>
}
 8003076:	bf00      	nop
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b082      	sub	sp, #8
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7ff ffa2 	bl	8002fd0 <SysTick_Config>
 800308c:	4603      	mov	r3, r0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
	...

08003098 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e043      	b.n	8003136 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	461a      	mov	r2, r3
 80030b4:	4b22      	ldr	r3, [pc, #136]	@ (8003140 <HAL_DMA_Init+0xa8>)
 80030b6:	4413      	add	r3, r2
 80030b8:	4a22      	ldr	r2, [pc, #136]	@ (8003144 <HAL_DMA_Init+0xac>)
 80030ba:	fba2 2303 	umull	r2, r3, r2, r3
 80030be:	091b      	lsrs	r3, r3, #4
 80030c0:	009a      	lsls	r2, r3, #2
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a1f      	ldr	r2, [pc, #124]	@ (8003148 <HAL_DMA_Init+0xb0>)
 80030ca:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2202      	movs	r2, #2
 80030d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80030e2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80030e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80030f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003108:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	4313      	orrs	r3, r2
 8003114:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3714      	adds	r7, #20
 800313a:	46bd      	mov	sp, r7
 800313c:	bc80      	pop	{r7}
 800313e:	4770      	bx	lr
 8003140:	bffdfff8 	.word	0xbffdfff8
 8003144:	cccccccd 	.word	0xcccccccd
 8003148:	40020000 	.word	0x40020000

0800314c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
 8003158:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800315a:	2300      	movs	r3, #0
 800315c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d101      	bne.n	800316c <HAL_DMA_Start_IT+0x20>
 8003168:	2302      	movs	r3, #2
 800316a:	e04b      	b.n	8003204 <HAL_DMA_Start_IT+0xb8>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b01      	cmp	r3, #1
 800317e:	d13a      	bne.n	80031f6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2202      	movs	r2, #2
 8003184:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 0201 	bic.w	r2, r2, #1
 800319c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	68b9      	ldr	r1, [r7, #8]
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f000 f937 	bl	8003418 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d008      	beq.n	80031c4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f042 020e 	orr.w	r2, r2, #14
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	e00f      	b.n	80031e4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0204 	bic.w	r2, r2, #4
 80031d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 020a 	orr.w	r2, r2, #10
 80031e2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0201 	orr.w	r2, r2, #1
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	e005      	b.n	8003202 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80031fe:	2302      	movs	r3, #2
 8003200:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003202:	7dfb      	ldrb	r3, [r7, #23]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3718      	adds	r7, #24
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003228:	2204      	movs	r2, #4
 800322a:	409a      	lsls	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4013      	ands	r3, r2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d04f      	beq.n	80032d4 <HAL_DMA_IRQHandler+0xc8>
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	f003 0304 	and.w	r3, r3, #4
 800323a:	2b00      	cmp	r3, #0
 800323c:	d04a      	beq.n	80032d4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0320 	and.w	r3, r3, #32
 8003248:	2b00      	cmp	r3, #0
 800324a:	d107      	bne.n	800325c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 0204 	bic.w	r2, r2, #4
 800325a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a66      	ldr	r2, [pc, #408]	@ (80033fc <HAL_DMA_IRQHandler+0x1f0>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d029      	beq.n	80032ba <HAL_DMA_IRQHandler+0xae>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a65      	ldr	r2, [pc, #404]	@ (8003400 <HAL_DMA_IRQHandler+0x1f4>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d022      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xaa>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a63      	ldr	r2, [pc, #396]	@ (8003404 <HAL_DMA_IRQHandler+0x1f8>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d01a      	beq.n	80032b0 <HAL_DMA_IRQHandler+0xa4>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a62      	ldr	r2, [pc, #392]	@ (8003408 <HAL_DMA_IRQHandler+0x1fc>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d012      	beq.n	80032aa <HAL_DMA_IRQHandler+0x9e>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a60      	ldr	r2, [pc, #384]	@ (800340c <HAL_DMA_IRQHandler+0x200>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d00a      	beq.n	80032a4 <HAL_DMA_IRQHandler+0x98>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a5f      	ldr	r2, [pc, #380]	@ (8003410 <HAL_DMA_IRQHandler+0x204>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d102      	bne.n	800329e <HAL_DMA_IRQHandler+0x92>
 8003298:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800329c:	e00e      	b.n	80032bc <HAL_DMA_IRQHandler+0xb0>
 800329e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80032a2:	e00b      	b.n	80032bc <HAL_DMA_IRQHandler+0xb0>
 80032a4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80032a8:	e008      	b.n	80032bc <HAL_DMA_IRQHandler+0xb0>
 80032aa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80032ae:	e005      	b.n	80032bc <HAL_DMA_IRQHandler+0xb0>
 80032b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80032b4:	e002      	b.n	80032bc <HAL_DMA_IRQHandler+0xb0>
 80032b6:	2340      	movs	r3, #64	@ 0x40
 80032b8:	e000      	b.n	80032bc <HAL_DMA_IRQHandler+0xb0>
 80032ba:	2304      	movs	r3, #4
 80032bc:	4a55      	ldr	r2, [pc, #340]	@ (8003414 <HAL_DMA_IRQHandler+0x208>)
 80032be:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 8094 	beq.w	80033f2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80032d2:	e08e      	b.n	80033f2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d8:	2202      	movs	r2, #2
 80032da:	409a      	lsls	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4013      	ands	r3, r2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d056      	beq.n	8003392 <HAL_DMA_IRQHandler+0x186>
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d051      	beq.n	8003392 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0320 	and.w	r3, r3, #32
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d10b      	bne.n	8003314 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 020a 	bic.w	r2, r2, #10
 800330a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a38      	ldr	r2, [pc, #224]	@ (80033fc <HAL_DMA_IRQHandler+0x1f0>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d029      	beq.n	8003372 <HAL_DMA_IRQHandler+0x166>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a37      	ldr	r2, [pc, #220]	@ (8003400 <HAL_DMA_IRQHandler+0x1f4>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d022      	beq.n	800336e <HAL_DMA_IRQHandler+0x162>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a35      	ldr	r2, [pc, #212]	@ (8003404 <HAL_DMA_IRQHandler+0x1f8>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d01a      	beq.n	8003368 <HAL_DMA_IRQHandler+0x15c>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a34      	ldr	r2, [pc, #208]	@ (8003408 <HAL_DMA_IRQHandler+0x1fc>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d012      	beq.n	8003362 <HAL_DMA_IRQHandler+0x156>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a32      	ldr	r2, [pc, #200]	@ (800340c <HAL_DMA_IRQHandler+0x200>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d00a      	beq.n	800335c <HAL_DMA_IRQHandler+0x150>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a31      	ldr	r2, [pc, #196]	@ (8003410 <HAL_DMA_IRQHandler+0x204>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d102      	bne.n	8003356 <HAL_DMA_IRQHandler+0x14a>
 8003350:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003354:	e00e      	b.n	8003374 <HAL_DMA_IRQHandler+0x168>
 8003356:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800335a:	e00b      	b.n	8003374 <HAL_DMA_IRQHandler+0x168>
 800335c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003360:	e008      	b.n	8003374 <HAL_DMA_IRQHandler+0x168>
 8003362:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003366:	e005      	b.n	8003374 <HAL_DMA_IRQHandler+0x168>
 8003368:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800336c:	e002      	b.n	8003374 <HAL_DMA_IRQHandler+0x168>
 800336e:	2320      	movs	r3, #32
 8003370:	e000      	b.n	8003374 <HAL_DMA_IRQHandler+0x168>
 8003372:	2302      	movs	r3, #2
 8003374:	4a27      	ldr	r2, [pc, #156]	@ (8003414 <HAL_DMA_IRQHandler+0x208>)
 8003376:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003384:	2b00      	cmp	r3, #0
 8003386:	d034      	beq.n	80033f2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003390:	e02f      	b.n	80033f2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003396:	2208      	movs	r2, #8
 8003398:	409a      	lsls	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4013      	ands	r3, r2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d028      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x1e8>
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	f003 0308 	and.w	r3, r3, #8
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d023      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 020e 	bic.w	r2, r2, #14
 80033ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033c4:	2101      	movs	r1, #1
 80033c6:	fa01 f202 	lsl.w	r2, r1, r2
 80033ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d004      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	4798      	blx	r3
    }
  }
  return;
 80033f2:	bf00      	nop
 80033f4:	bf00      	nop
}
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40020008 	.word	0x40020008
 8003400:	4002001c 	.word	0x4002001c
 8003404:	40020030 	.word	0x40020030
 8003408:	40020044 	.word	0x40020044
 800340c:	40020058 	.word	0x40020058
 8003410:	4002006c 	.word	0x4002006c
 8003414:	40020000 	.word	0x40020000

08003418 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
 8003424:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800342e:	2101      	movs	r1, #1
 8003430:	fa01 f202 	lsl.w	r2, r1, r2
 8003434:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b10      	cmp	r3, #16
 8003444:	d108      	bne.n	8003458 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68ba      	ldr	r2, [r7, #8]
 8003454:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003456:	e007      	b.n	8003468 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68ba      	ldr	r2, [r7, #8]
 800345e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	60da      	str	r2, [r3, #12]
}
 8003468:	bf00      	nop
 800346a:	3714      	adds	r7, #20
 800346c:	46bd      	mov	sp, r7
 800346e:	bc80      	pop	{r7}
 8003470:	4770      	bx	lr
	...

08003474 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003474:	b480      	push	{r7}
 8003476:	b08b      	sub	sp, #44	@ 0x2c
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800347e:	2300      	movs	r3, #0
 8003480:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003482:	2300      	movs	r3, #0
 8003484:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003486:	e161      	b.n	800374c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003488:	2201      	movs	r2, #1
 800348a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	69fa      	ldr	r2, [r7, #28]
 8003498:	4013      	ands	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	f040 8150 	bne.w	8003746 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	4a97      	ldr	r2, [pc, #604]	@ (8003708 <HAL_GPIO_Init+0x294>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d05e      	beq.n	800356e <HAL_GPIO_Init+0xfa>
 80034b0:	4a95      	ldr	r2, [pc, #596]	@ (8003708 <HAL_GPIO_Init+0x294>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d875      	bhi.n	80035a2 <HAL_GPIO_Init+0x12e>
 80034b6:	4a95      	ldr	r2, [pc, #596]	@ (800370c <HAL_GPIO_Init+0x298>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d058      	beq.n	800356e <HAL_GPIO_Init+0xfa>
 80034bc:	4a93      	ldr	r2, [pc, #588]	@ (800370c <HAL_GPIO_Init+0x298>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d86f      	bhi.n	80035a2 <HAL_GPIO_Init+0x12e>
 80034c2:	4a93      	ldr	r2, [pc, #588]	@ (8003710 <HAL_GPIO_Init+0x29c>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d052      	beq.n	800356e <HAL_GPIO_Init+0xfa>
 80034c8:	4a91      	ldr	r2, [pc, #580]	@ (8003710 <HAL_GPIO_Init+0x29c>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d869      	bhi.n	80035a2 <HAL_GPIO_Init+0x12e>
 80034ce:	4a91      	ldr	r2, [pc, #580]	@ (8003714 <HAL_GPIO_Init+0x2a0>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d04c      	beq.n	800356e <HAL_GPIO_Init+0xfa>
 80034d4:	4a8f      	ldr	r2, [pc, #572]	@ (8003714 <HAL_GPIO_Init+0x2a0>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d863      	bhi.n	80035a2 <HAL_GPIO_Init+0x12e>
 80034da:	4a8f      	ldr	r2, [pc, #572]	@ (8003718 <HAL_GPIO_Init+0x2a4>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d046      	beq.n	800356e <HAL_GPIO_Init+0xfa>
 80034e0:	4a8d      	ldr	r2, [pc, #564]	@ (8003718 <HAL_GPIO_Init+0x2a4>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d85d      	bhi.n	80035a2 <HAL_GPIO_Init+0x12e>
 80034e6:	2b12      	cmp	r3, #18
 80034e8:	d82a      	bhi.n	8003540 <HAL_GPIO_Init+0xcc>
 80034ea:	2b12      	cmp	r3, #18
 80034ec:	d859      	bhi.n	80035a2 <HAL_GPIO_Init+0x12e>
 80034ee:	a201      	add	r2, pc, #4	@ (adr r2, 80034f4 <HAL_GPIO_Init+0x80>)
 80034f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f4:	0800356f 	.word	0x0800356f
 80034f8:	08003549 	.word	0x08003549
 80034fc:	0800355b 	.word	0x0800355b
 8003500:	0800359d 	.word	0x0800359d
 8003504:	080035a3 	.word	0x080035a3
 8003508:	080035a3 	.word	0x080035a3
 800350c:	080035a3 	.word	0x080035a3
 8003510:	080035a3 	.word	0x080035a3
 8003514:	080035a3 	.word	0x080035a3
 8003518:	080035a3 	.word	0x080035a3
 800351c:	080035a3 	.word	0x080035a3
 8003520:	080035a3 	.word	0x080035a3
 8003524:	080035a3 	.word	0x080035a3
 8003528:	080035a3 	.word	0x080035a3
 800352c:	080035a3 	.word	0x080035a3
 8003530:	080035a3 	.word	0x080035a3
 8003534:	080035a3 	.word	0x080035a3
 8003538:	08003551 	.word	0x08003551
 800353c:	08003565 	.word	0x08003565
 8003540:	4a76      	ldr	r2, [pc, #472]	@ (800371c <HAL_GPIO_Init+0x2a8>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d013      	beq.n	800356e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003546:	e02c      	b.n	80035a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	623b      	str	r3, [r7, #32]
          break;
 800354e:	e029      	b.n	80035a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	3304      	adds	r3, #4
 8003556:	623b      	str	r3, [r7, #32]
          break;
 8003558:	e024      	b.n	80035a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	3308      	adds	r3, #8
 8003560:	623b      	str	r3, [r7, #32]
          break;
 8003562:	e01f      	b.n	80035a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	330c      	adds	r3, #12
 800356a:	623b      	str	r3, [r7, #32]
          break;
 800356c:	e01a      	b.n	80035a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d102      	bne.n	800357c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003576:	2304      	movs	r3, #4
 8003578:	623b      	str	r3, [r7, #32]
          break;
 800357a:	e013      	b.n	80035a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d105      	bne.n	8003590 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003584:	2308      	movs	r3, #8
 8003586:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	69fa      	ldr	r2, [r7, #28]
 800358c:	611a      	str	r2, [r3, #16]
          break;
 800358e:	e009      	b.n	80035a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003590:	2308      	movs	r3, #8
 8003592:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	69fa      	ldr	r2, [r7, #28]
 8003598:	615a      	str	r2, [r3, #20]
          break;
 800359a:	e003      	b.n	80035a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800359c:	2300      	movs	r3, #0
 800359e:	623b      	str	r3, [r7, #32]
          break;
 80035a0:	e000      	b.n	80035a4 <HAL_GPIO_Init+0x130>
          break;
 80035a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	2bff      	cmp	r3, #255	@ 0xff
 80035a8:	d801      	bhi.n	80035ae <HAL_GPIO_Init+0x13a>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	e001      	b.n	80035b2 <HAL_GPIO_Init+0x13e>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3304      	adds	r3, #4
 80035b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	2bff      	cmp	r3, #255	@ 0xff
 80035b8:	d802      	bhi.n	80035c0 <HAL_GPIO_Init+0x14c>
 80035ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	e002      	b.n	80035c6 <HAL_GPIO_Init+0x152>
 80035c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c2:	3b08      	subs	r3, #8
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	210f      	movs	r1, #15
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	fa01 f303 	lsl.w	r3, r1, r3
 80035d4:	43db      	mvns	r3, r3
 80035d6:	401a      	ands	r2, r3
 80035d8:	6a39      	ldr	r1, [r7, #32]
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	fa01 f303 	lsl.w	r3, r1, r3
 80035e0:	431a      	orrs	r2, r3
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 80a9 	beq.w	8003746 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80035f4:	4b4a      	ldr	r3, [pc, #296]	@ (8003720 <HAL_GPIO_Init+0x2ac>)
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	4a49      	ldr	r2, [pc, #292]	@ (8003720 <HAL_GPIO_Init+0x2ac>)
 80035fa:	f043 0301 	orr.w	r3, r3, #1
 80035fe:	6193      	str	r3, [r2, #24]
 8003600:	4b47      	ldr	r3, [pc, #284]	@ (8003720 <HAL_GPIO_Init+0x2ac>)
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	60bb      	str	r3, [r7, #8]
 800360a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800360c:	4a45      	ldr	r2, [pc, #276]	@ (8003724 <HAL_GPIO_Init+0x2b0>)
 800360e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003610:	089b      	lsrs	r3, r3, #2
 8003612:	3302      	adds	r3, #2
 8003614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003618:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800361a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361c:	f003 0303 	and.w	r3, r3, #3
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	220f      	movs	r2, #15
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	43db      	mvns	r3, r3
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	4013      	ands	r3, r2
 800362e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a3d      	ldr	r2, [pc, #244]	@ (8003728 <HAL_GPIO_Init+0x2b4>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d00d      	beq.n	8003654 <HAL_GPIO_Init+0x1e0>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a3c      	ldr	r2, [pc, #240]	@ (800372c <HAL_GPIO_Init+0x2b8>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d007      	beq.n	8003650 <HAL_GPIO_Init+0x1dc>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a3b      	ldr	r2, [pc, #236]	@ (8003730 <HAL_GPIO_Init+0x2bc>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d101      	bne.n	800364c <HAL_GPIO_Init+0x1d8>
 8003648:	2302      	movs	r3, #2
 800364a:	e004      	b.n	8003656 <HAL_GPIO_Init+0x1e2>
 800364c:	2303      	movs	r3, #3
 800364e:	e002      	b.n	8003656 <HAL_GPIO_Init+0x1e2>
 8003650:	2301      	movs	r3, #1
 8003652:	e000      	b.n	8003656 <HAL_GPIO_Init+0x1e2>
 8003654:	2300      	movs	r3, #0
 8003656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003658:	f002 0203 	and.w	r2, r2, #3
 800365c:	0092      	lsls	r2, r2, #2
 800365e:	4093      	lsls	r3, r2
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	4313      	orrs	r3, r2
 8003664:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003666:	492f      	ldr	r1, [pc, #188]	@ (8003724 <HAL_GPIO_Init+0x2b0>)
 8003668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800366a:	089b      	lsrs	r3, r3, #2
 800366c:	3302      	adds	r3, #2
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d006      	beq.n	800368e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003680:	4b2c      	ldr	r3, [pc, #176]	@ (8003734 <HAL_GPIO_Init+0x2c0>)
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	492b      	ldr	r1, [pc, #172]	@ (8003734 <HAL_GPIO_Init+0x2c0>)
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	4313      	orrs	r3, r2
 800368a:	608b      	str	r3, [r1, #8]
 800368c:	e006      	b.n	800369c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800368e:	4b29      	ldr	r3, [pc, #164]	@ (8003734 <HAL_GPIO_Init+0x2c0>)
 8003690:	689a      	ldr	r2, [r3, #8]
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	43db      	mvns	r3, r3
 8003696:	4927      	ldr	r1, [pc, #156]	@ (8003734 <HAL_GPIO_Init+0x2c0>)
 8003698:	4013      	ands	r3, r2
 800369a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d006      	beq.n	80036b6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80036a8:	4b22      	ldr	r3, [pc, #136]	@ (8003734 <HAL_GPIO_Init+0x2c0>)
 80036aa:	68da      	ldr	r2, [r3, #12]
 80036ac:	4921      	ldr	r1, [pc, #132]	@ (8003734 <HAL_GPIO_Init+0x2c0>)
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	60cb      	str	r3, [r1, #12]
 80036b4:	e006      	b.n	80036c4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80036b6:	4b1f      	ldr	r3, [pc, #124]	@ (8003734 <HAL_GPIO_Init+0x2c0>)
 80036b8:	68da      	ldr	r2, [r3, #12]
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	43db      	mvns	r3, r3
 80036be:	491d      	ldr	r1, [pc, #116]	@ (8003734 <HAL_GPIO_Init+0x2c0>)
 80036c0:	4013      	ands	r3, r2
 80036c2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d006      	beq.n	80036de <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80036d0:	4b18      	ldr	r3, [pc, #96]	@ (8003734 <HAL_GPIO_Init+0x2c0>)
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	4917      	ldr	r1, [pc, #92]	@ (8003734 <HAL_GPIO_Init+0x2c0>)
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	4313      	orrs	r3, r2
 80036da:	604b      	str	r3, [r1, #4]
 80036dc:	e006      	b.n	80036ec <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80036de:	4b15      	ldr	r3, [pc, #84]	@ (8003734 <HAL_GPIO_Init+0x2c0>)
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	43db      	mvns	r3, r3
 80036e6:	4913      	ldr	r1, [pc, #76]	@ (8003734 <HAL_GPIO_Init+0x2c0>)
 80036e8:	4013      	ands	r3, r2
 80036ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d01f      	beq.n	8003738 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80036f8:	4b0e      	ldr	r3, [pc, #56]	@ (8003734 <HAL_GPIO_Init+0x2c0>)
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	490d      	ldr	r1, [pc, #52]	@ (8003734 <HAL_GPIO_Init+0x2c0>)
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	4313      	orrs	r3, r2
 8003702:	600b      	str	r3, [r1, #0]
 8003704:	e01f      	b.n	8003746 <HAL_GPIO_Init+0x2d2>
 8003706:	bf00      	nop
 8003708:	10320000 	.word	0x10320000
 800370c:	10310000 	.word	0x10310000
 8003710:	10220000 	.word	0x10220000
 8003714:	10210000 	.word	0x10210000
 8003718:	10120000 	.word	0x10120000
 800371c:	10110000 	.word	0x10110000
 8003720:	40021000 	.word	0x40021000
 8003724:	40010000 	.word	0x40010000
 8003728:	40010800 	.word	0x40010800
 800372c:	40010c00 	.word	0x40010c00
 8003730:	40011000 	.word	0x40011000
 8003734:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003738:	4b0b      	ldr	r3, [pc, #44]	@ (8003768 <HAL_GPIO_Init+0x2f4>)
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	43db      	mvns	r3, r3
 8003740:	4909      	ldr	r1, [pc, #36]	@ (8003768 <HAL_GPIO_Init+0x2f4>)
 8003742:	4013      	ands	r3, r2
 8003744:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003748:	3301      	adds	r3, #1
 800374a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003752:	fa22 f303 	lsr.w	r3, r2, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	f47f ae96 	bne.w	8003488 <HAL_GPIO_Init+0x14>
  }
}
 800375c:	bf00      	nop
 800375e:	bf00      	nop
 8003760:	372c      	adds	r7, #44	@ 0x2c
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr
 8003768:	40010400 	.word	0x40010400

0800376c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	460b      	mov	r3, r1
 8003776:	807b      	strh	r3, [r7, #2]
 8003778:	4613      	mov	r3, r2
 800377a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800377c:	787b      	ldrb	r3, [r7, #1]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d003      	beq.n	800378a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003782:	887a      	ldrh	r2, [r7, #2]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003788:	e003      	b.n	8003792 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800378a:	887b      	ldrh	r3, [r7, #2]
 800378c:	041a      	lsls	r2, r3, #16
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	611a      	str	r2, [r3, #16]
}
 8003792:	bf00      	nop
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	bc80      	pop	{r7}
 800379a:	4770      	bx	lr

0800379c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	460b      	mov	r3, r1
 80037a6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80037ae:	887a      	ldrh	r2, [r7, #2]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	4013      	ands	r3, r2
 80037b4:	041a      	lsls	r2, r3, #16
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	43d9      	mvns	r1, r3
 80037ba:	887b      	ldrh	r3, [r7, #2]
 80037bc:	400b      	ands	r3, r1
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	611a      	str	r2, [r3, #16]
}
 80037c4:	bf00      	nop
 80037c6:	3714      	adds	r7, #20
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bc80      	pop	{r7}
 80037cc:	4770      	bx	lr
	...

080037d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e12b      	b.n	8003a3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d106      	bne.n	80037fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7fe fc2a 	bl	8002050 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2224      	movs	r2, #36	@ 0x24
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 0201 	bic.w	r2, r2, #1
 8003812:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003822:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003832:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003834:	f001 f962 	bl	8004afc <HAL_RCC_GetPCLK1Freq>
 8003838:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	4a81      	ldr	r2, [pc, #516]	@ (8003a44 <HAL_I2C_Init+0x274>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d807      	bhi.n	8003854 <HAL_I2C_Init+0x84>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	4a80      	ldr	r2, [pc, #512]	@ (8003a48 <HAL_I2C_Init+0x278>)
 8003848:	4293      	cmp	r3, r2
 800384a:	bf94      	ite	ls
 800384c:	2301      	movls	r3, #1
 800384e:	2300      	movhi	r3, #0
 8003850:	b2db      	uxtb	r3, r3
 8003852:	e006      	b.n	8003862 <HAL_I2C_Init+0x92>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	4a7d      	ldr	r2, [pc, #500]	@ (8003a4c <HAL_I2C_Init+0x27c>)
 8003858:	4293      	cmp	r3, r2
 800385a:	bf94      	ite	ls
 800385c:	2301      	movls	r3, #1
 800385e:	2300      	movhi	r3, #0
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e0e7      	b.n	8003a3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4a78      	ldr	r2, [pc, #480]	@ (8003a50 <HAL_I2C_Init+0x280>)
 800386e:	fba2 2303 	umull	r2, r3, r2, r3
 8003872:	0c9b      	lsrs	r3, r3, #18
 8003874:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	430a      	orrs	r2, r1
 8003888:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	4a6a      	ldr	r2, [pc, #424]	@ (8003a44 <HAL_I2C_Init+0x274>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d802      	bhi.n	80038a4 <HAL_I2C_Init+0xd4>
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	3301      	adds	r3, #1
 80038a2:	e009      	b.n	80038b8 <HAL_I2C_Init+0xe8>
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80038aa:	fb02 f303 	mul.w	r3, r2, r3
 80038ae:	4a69      	ldr	r2, [pc, #420]	@ (8003a54 <HAL_I2C_Init+0x284>)
 80038b0:	fba2 2303 	umull	r2, r3, r2, r3
 80038b4:	099b      	lsrs	r3, r3, #6
 80038b6:	3301      	adds	r3, #1
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6812      	ldr	r2, [r2, #0]
 80038bc:	430b      	orrs	r3, r1
 80038be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80038ca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	495c      	ldr	r1, [pc, #368]	@ (8003a44 <HAL_I2C_Init+0x274>)
 80038d4:	428b      	cmp	r3, r1
 80038d6:	d819      	bhi.n	800390c <HAL_I2C_Init+0x13c>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	1e59      	subs	r1, r3, #1
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80038e6:	1c59      	adds	r1, r3, #1
 80038e8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80038ec:	400b      	ands	r3, r1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00a      	beq.n	8003908 <HAL_I2C_Init+0x138>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	1e59      	subs	r1, r3, #1
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003900:	3301      	adds	r3, #1
 8003902:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003906:	e051      	b.n	80039ac <HAL_I2C_Init+0x1dc>
 8003908:	2304      	movs	r3, #4
 800390a:	e04f      	b.n	80039ac <HAL_I2C_Init+0x1dc>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d111      	bne.n	8003938 <HAL_I2C_Init+0x168>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	1e58      	subs	r0, r3, #1
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6859      	ldr	r1, [r3, #4]
 800391c:	460b      	mov	r3, r1
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	440b      	add	r3, r1
 8003922:	fbb0 f3f3 	udiv	r3, r0, r3
 8003926:	3301      	adds	r3, #1
 8003928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800392c:	2b00      	cmp	r3, #0
 800392e:	bf0c      	ite	eq
 8003930:	2301      	moveq	r3, #1
 8003932:	2300      	movne	r3, #0
 8003934:	b2db      	uxtb	r3, r3
 8003936:	e012      	b.n	800395e <HAL_I2C_Init+0x18e>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	1e58      	subs	r0, r3, #1
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6859      	ldr	r1, [r3, #4]
 8003940:	460b      	mov	r3, r1
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	0099      	lsls	r1, r3, #2
 8003948:	440b      	add	r3, r1
 800394a:	fbb0 f3f3 	udiv	r3, r0, r3
 800394e:	3301      	adds	r3, #1
 8003950:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003954:	2b00      	cmp	r3, #0
 8003956:	bf0c      	ite	eq
 8003958:	2301      	moveq	r3, #1
 800395a:	2300      	movne	r3, #0
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <HAL_I2C_Init+0x196>
 8003962:	2301      	movs	r3, #1
 8003964:	e022      	b.n	80039ac <HAL_I2C_Init+0x1dc>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10e      	bne.n	800398c <HAL_I2C_Init+0x1bc>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	1e58      	subs	r0, r3, #1
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6859      	ldr	r1, [r3, #4]
 8003976:	460b      	mov	r3, r1
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	440b      	add	r3, r1
 800397c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003980:	3301      	adds	r3, #1
 8003982:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003986:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800398a:	e00f      	b.n	80039ac <HAL_I2C_Init+0x1dc>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	1e58      	subs	r0, r3, #1
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6859      	ldr	r1, [r3, #4]
 8003994:	460b      	mov	r3, r1
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	440b      	add	r3, r1
 800399a:	0099      	lsls	r1, r3, #2
 800399c:	440b      	add	r3, r1
 800399e:	fbb0 f3f3 	udiv	r3, r0, r3
 80039a2:	3301      	adds	r3, #1
 80039a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	6809      	ldr	r1, [r1, #0]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	69da      	ldr	r2, [r3, #28]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	431a      	orrs	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80039da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	6911      	ldr	r1, [r2, #16]
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	68d2      	ldr	r2, [r2, #12]
 80039e6:	4311      	orrs	r1, r2
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	6812      	ldr	r2, [r2, #0]
 80039ec:	430b      	orrs	r3, r1
 80039ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	695a      	ldr	r2, [r3, #20]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f042 0201 	orr.w	r2, r2, #1
 8003a1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2220      	movs	r2, #32
 8003a26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	000186a0 	.word	0x000186a0
 8003a48:	001e847f 	.word	0x001e847f
 8003a4c:	003d08ff 	.word	0x003d08ff
 8003a50:	431bde83 	.word	0x431bde83
 8003a54:	10624dd3 	.word	0x10624dd3

08003a58 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b088      	sub	sp, #32
 8003a5c:	af02      	add	r7, sp, #8
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	607a      	str	r2, [r7, #4]
 8003a62:	461a      	mov	r2, r3
 8003a64:	460b      	mov	r3, r1
 8003a66:	817b      	strh	r3, [r7, #10]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a6c:	f7fe fcb0 	bl	80023d0 <HAL_GetTick>
 8003a70:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b20      	cmp	r3, #32
 8003a7c:	f040 80e0 	bne.w	8003c40 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	2319      	movs	r3, #25
 8003a86:	2201      	movs	r2, #1
 8003a88:	4970      	ldr	r1, [pc, #448]	@ (8003c4c <HAL_I2C_Master_Transmit+0x1f4>)
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f000 fa92 	bl	8003fb4 <I2C_WaitOnFlagUntilTimeout>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003a96:	2302      	movs	r3, #2
 8003a98:	e0d3      	b.n	8003c42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d101      	bne.n	8003aa8 <HAL_I2C_Master_Transmit+0x50>
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	e0cc      	b.n	8003c42 <HAL_I2C_Master_Transmit+0x1ea>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d007      	beq.n	8003ace <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f042 0201 	orr.w	r2, r2, #1
 8003acc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003adc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2221      	movs	r2, #33	@ 0x21
 8003ae2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2210      	movs	r2, #16
 8003aea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	893a      	ldrh	r2, [r7, #8]
 8003afe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	4a50      	ldr	r2, [pc, #320]	@ (8003c50 <HAL_I2C_Master_Transmit+0x1f8>)
 8003b0e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b10:	8979      	ldrh	r1, [r7, #10]
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	6a3a      	ldr	r2, [r7, #32]
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f000 f9ca 	bl	8003eb0 <I2C_MasterRequestWrite>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e08d      	b.n	8003c42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b26:	2300      	movs	r3, #0
 8003b28:	613b      	str	r3, [r7, #16]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	613b      	str	r3, [r7, #16]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	613b      	str	r3, [r7, #16]
 8003b3a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003b3c:	e066      	b.n	8003c0c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	6a39      	ldr	r1, [r7, #32]
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 fb50 	bl	80041e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00d      	beq.n	8003b6a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	d107      	bne.n	8003b66 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e06b      	b.n	8003c42 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6e:	781a      	ldrb	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7a:	1c5a      	adds	r2, r3, #1
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	3b01      	subs	r3, #1
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b92:	3b01      	subs	r3, #1
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	2b04      	cmp	r3, #4
 8003ba6:	d11b      	bne.n	8003be0 <HAL_I2C_Master_Transmit+0x188>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d017      	beq.n	8003be0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb4:	781a      	ldrb	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc0:	1c5a      	adds	r2, r3, #1
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	6a39      	ldr	r1, [r7, #32]
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f000 fb47 	bl	8004278 <I2C_WaitOnBTFFlagUntilTimeout>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00d      	beq.n	8003c0c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf4:	2b04      	cmp	r3, #4
 8003bf6:	d107      	bne.n	8003c08 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c06:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e01a      	b.n	8003c42 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d194      	bne.n	8003b3e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	e000      	b.n	8003c42 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003c40:	2302      	movs	r3, #2
  }
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3718      	adds	r7, #24
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	00100002 	.word	0x00100002
 8003c50:	ffff0000 	.word	0xffff0000

08003c54 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b08a      	sub	sp, #40	@ 0x28
 8003c58:	af02      	add	r7, sp, #8
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	607a      	str	r2, [r7, #4]
 8003c5e:	603b      	str	r3, [r7, #0]
 8003c60:	460b      	mov	r3, r1
 8003c62:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003c64:	f7fe fbb4 	bl	80023d0 <HAL_GetTick>
 8003c68:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b20      	cmp	r3, #32
 8003c78:	f040 8111 	bne.w	8003e9e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	9300      	str	r3, [sp, #0]
 8003c80:	2319      	movs	r3, #25
 8003c82:	2201      	movs	r2, #1
 8003c84:	4988      	ldr	r1, [pc, #544]	@ (8003ea8 <HAL_I2C_IsDeviceReady+0x254>)
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f000 f994 	bl	8003fb4 <I2C_WaitOnFlagUntilTimeout>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003c92:	2302      	movs	r3, #2
 8003c94:	e104      	b.n	8003ea0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d101      	bne.n	8003ca4 <HAL_I2C_IsDeviceReady+0x50>
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	e0fd      	b.n	8003ea0 <HAL_I2C_IsDeviceReady+0x24c>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d007      	beq.n	8003cca <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f042 0201 	orr.w	r2, r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cd8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2224      	movs	r2, #36	@ 0x24
 8003cde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4a70      	ldr	r2, [pc, #448]	@ (8003eac <HAL_I2C_IsDeviceReady+0x258>)
 8003cec:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cfc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	9300      	str	r3, [sp, #0]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f000 f952 	bl	8003fb4 <I2C_WaitOnFlagUntilTimeout>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00d      	beq.n	8003d32 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d24:	d103      	bne.n	8003d2e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d2c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e0b6      	b.n	8003ea0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d32:	897b      	ldrh	r3, [r7, #10]
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	461a      	mov	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d40:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003d42:	f7fe fb45 	bl	80023d0 <HAL_GetTick>
 8003d46:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	bf0c      	ite	eq
 8003d56:	2301      	moveq	r3, #1
 8003d58:	2300      	movne	r3, #0
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d6c:	bf0c      	ite	eq
 8003d6e:	2301      	moveq	r3, #1
 8003d70:	2300      	movne	r3, #0
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003d76:	e025      	b.n	8003dc4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d78:	f7fe fb2a 	bl	80023d0 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d302      	bcc.n	8003d8e <HAL_I2C_IsDeviceReady+0x13a>
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d103      	bne.n	8003d96 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	22a0      	movs	r2, #160	@ 0xa0
 8003d92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	bf0c      	ite	eq
 8003da4:	2301      	moveq	r3, #1
 8003da6:	2300      	movne	r3, #0
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003db6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dba:	bf0c      	ite	eq
 8003dbc:	2301      	moveq	r3, #1
 8003dbe:	2300      	movne	r3, #0
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2ba0      	cmp	r3, #160	@ 0xa0
 8003dce:	d005      	beq.n	8003ddc <HAL_I2C_IsDeviceReady+0x188>
 8003dd0:	7dfb      	ldrb	r3, [r7, #23]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d102      	bne.n	8003ddc <HAL_I2C_IsDeviceReady+0x188>
 8003dd6:	7dbb      	ldrb	r3, [r7, #22]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d0cd      	beq.n	8003d78 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2220      	movs	r2, #32
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d129      	bne.n	8003e46 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e00:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e02:	2300      	movs	r3, #0
 8003e04:	613b      	str	r3, [r7, #16]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	613b      	str	r3, [r7, #16]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	613b      	str	r3, [r7, #16]
 8003e16:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	2319      	movs	r3, #25
 8003e1e:	2201      	movs	r2, #1
 8003e20:	4921      	ldr	r1, [pc, #132]	@ (8003ea8 <HAL_I2C_IsDeviceReady+0x254>)
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f000 f8c6 	bl	8003fb4 <I2C_WaitOnFlagUntilTimeout>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e036      	b.n	8003ea0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2220      	movs	r2, #32
 8003e36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003e42:	2300      	movs	r3, #0
 8003e44:	e02c      	b.n	8003ea0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e54:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e5e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	2319      	movs	r3, #25
 8003e66:	2201      	movs	r2, #1
 8003e68:	490f      	ldr	r1, [pc, #60]	@ (8003ea8 <HAL_I2C_IsDeviceReady+0x254>)
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f000 f8a2 	bl	8003fb4 <I2C_WaitOnFlagUntilTimeout>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e012      	b.n	8003ea0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	f4ff af32 	bcc.w	8003cee <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e000      	b.n	8003ea0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003e9e:	2302      	movs	r3, #2
  }
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3720      	adds	r7, #32
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	00100002 	.word	0x00100002
 8003eac:	ffff0000 	.word	0xffff0000

08003eb0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b088      	sub	sp, #32
 8003eb4:	af02      	add	r7, sp, #8
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	607a      	str	r2, [r7, #4]
 8003eba:	603b      	str	r3, [r7, #0]
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	2b08      	cmp	r3, #8
 8003eca:	d006      	beq.n	8003eda <I2C_MasterRequestWrite+0x2a>
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d003      	beq.n	8003eda <I2C_MasterRequestWrite+0x2a>
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ed8:	d108      	bne.n	8003eec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ee8:	601a      	str	r2, [r3, #0]
 8003eea:	e00b      	b.n	8003f04 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef0:	2b12      	cmp	r3, #18
 8003ef2:	d107      	bne.n	8003f04 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f02:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 f84f 	bl	8003fb4 <I2C_WaitOnFlagUntilTimeout>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00d      	beq.n	8003f38 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f2a:	d103      	bne.n	8003f34 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f32:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e035      	b.n	8003fa4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f40:	d108      	bne.n	8003f54 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f42:	897b      	ldrh	r3, [r7, #10]
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	461a      	mov	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f50:	611a      	str	r2, [r3, #16]
 8003f52:	e01b      	b.n	8003f8c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f54:	897b      	ldrh	r3, [r7, #10]
 8003f56:	11db      	asrs	r3, r3, #7
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	f003 0306 	and.w	r3, r3, #6
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	f063 030f 	orn	r3, r3, #15
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	490e      	ldr	r1, [pc, #56]	@ (8003fac <I2C_MasterRequestWrite+0xfc>)
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f000 f898 	bl	80040a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e010      	b.n	8003fa4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f82:	897b      	ldrh	r3, [r7, #10]
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	4907      	ldr	r1, [pc, #28]	@ (8003fb0 <I2C_MasterRequestWrite+0x100>)
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f000 f888 	bl	80040a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e000      	b.n	8003fa4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3718      	adds	r7, #24
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	00010008 	.word	0x00010008
 8003fb0:	00010002 	.word	0x00010002

08003fb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	603b      	str	r3, [r7, #0]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fc4:	e048      	b.n	8004058 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fcc:	d044      	beq.n	8004058 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fce:	f7fe f9ff 	bl	80023d0 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d302      	bcc.n	8003fe4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d139      	bne.n	8004058 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	0c1b      	lsrs	r3, r3, #16
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d10d      	bne.n	800400a <I2C_WaitOnFlagUntilTimeout+0x56>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	43da      	mvns	r2, r3
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	bf0c      	ite	eq
 8004000:	2301      	moveq	r3, #1
 8004002:	2300      	movne	r3, #0
 8004004:	b2db      	uxtb	r3, r3
 8004006:	461a      	mov	r2, r3
 8004008:	e00c      	b.n	8004024 <I2C_WaitOnFlagUntilTimeout+0x70>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	43da      	mvns	r2, r3
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	4013      	ands	r3, r2
 8004016:	b29b      	uxth	r3, r3
 8004018:	2b00      	cmp	r3, #0
 800401a:	bf0c      	ite	eq
 800401c:	2301      	moveq	r3, #1
 800401e:	2300      	movne	r3, #0
 8004020:	b2db      	uxtb	r3, r3
 8004022:	461a      	mov	r2, r3
 8004024:	79fb      	ldrb	r3, [r7, #7]
 8004026:	429a      	cmp	r2, r3
 8004028:	d116      	bne.n	8004058 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2220      	movs	r2, #32
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004044:	f043 0220 	orr.w	r2, r3, #32
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e023      	b.n	80040a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	0c1b      	lsrs	r3, r3, #16
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b01      	cmp	r3, #1
 8004060:	d10d      	bne.n	800407e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	43da      	mvns	r2, r3
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	4013      	ands	r3, r2
 800406e:	b29b      	uxth	r3, r3
 8004070:	2b00      	cmp	r3, #0
 8004072:	bf0c      	ite	eq
 8004074:	2301      	moveq	r3, #1
 8004076:	2300      	movne	r3, #0
 8004078:	b2db      	uxtb	r3, r3
 800407a:	461a      	mov	r2, r3
 800407c:	e00c      	b.n	8004098 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	43da      	mvns	r2, r3
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	4013      	ands	r3, r2
 800408a:	b29b      	uxth	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	bf0c      	ite	eq
 8004090:	2301      	moveq	r3, #1
 8004092:	2300      	movne	r3, #0
 8004094:	b2db      	uxtb	r3, r3
 8004096:	461a      	mov	r2, r3
 8004098:	79fb      	ldrb	r3, [r7, #7]
 800409a:	429a      	cmp	r2, r3
 800409c:	d093      	beq.n	8003fc6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
 80040b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040b6:	e071      	b.n	800419c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040c6:	d123      	bne.n	8004110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80040e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2220      	movs	r2, #32
 80040ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fc:	f043 0204 	orr.w	r2, r3, #4
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e067      	b.n	80041e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004116:	d041      	beq.n	800419c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004118:	f7fe f95a 	bl	80023d0 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	429a      	cmp	r2, r3
 8004126:	d302      	bcc.n	800412e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d136      	bne.n	800419c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	0c1b      	lsrs	r3, r3, #16
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b01      	cmp	r3, #1
 8004136:	d10c      	bne.n	8004152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	43da      	mvns	r2, r3
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	4013      	ands	r3, r2
 8004144:	b29b      	uxth	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	bf14      	ite	ne
 800414a:	2301      	movne	r3, #1
 800414c:	2300      	moveq	r3, #0
 800414e:	b2db      	uxtb	r3, r3
 8004150:	e00b      	b.n	800416a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	43da      	mvns	r2, r3
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	4013      	ands	r3, r2
 800415e:	b29b      	uxth	r3, r3
 8004160:	2b00      	cmp	r3, #0
 8004162:	bf14      	ite	ne
 8004164:	2301      	movne	r3, #1
 8004166:	2300      	moveq	r3, #0
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d016      	beq.n	800419c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2220      	movs	r2, #32
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004188:	f043 0220 	orr.w	r2, r3, #32
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e021      	b.n	80041e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	0c1b      	lsrs	r3, r3, #16
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d10c      	bne.n	80041c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	43da      	mvns	r2, r3
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	4013      	ands	r3, r2
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	bf14      	ite	ne
 80041b8:	2301      	movne	r3, #1
 80041ba:	2300      	moveq	r3, #0
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	e00b      	b.n	80041d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	43da      	mvns	r2, r3
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	4013      	ands	r3, r2
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	bf14      	ite	ne
 80041d2:	2301      	movne	r3, #1
 80041d4:	2300      	moveq	r3, #0
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f47f af6d 	bne.w	80040b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041f4:	e034      	b.n	8004260 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f000 f886 	bl	8004308 <I2C_IsAcknowledgeFailed>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e034      	b.n	8004270 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420c:	d028      	beq.n	8004260 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800420e:	f7fe f8df 	bl	80023d0 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	68ba      	ldr	r2, [r7, #8]
 800421a:	429a      	cmp	r2, r3
 800421c:	d302      	bcc.n	8004224 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d11d      	bne.n	8004260 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800422e:	2b80      	cmp	r3, #128	@ 0x80
 8004230:	d016      	beq.n	8004260 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2220      	movs	r2, #32
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424c:	f043 0220 	orr.w	r2, r3, #32
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e007      	b.n	8004270 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800426a:	2b80      	cmp	r3, #128	@ 0x80
 800426c:	d1c3      	bne.n	80041f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004284:	e034      	b.n	80042f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f000 f83e 	bl	8004308 <I2C_IsAcknowledgeFailed>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e034      	b.n	8004300 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429c:	d028      	beq.n	80042f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800429e:	f7fe f897 	bl	80023d0 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d302      	bcc.n	80042b4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d11d      	bne.n	80042f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	f003 0304 	and.w	r3, r3, #4
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d016      	beq.n	80042f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2220      	movs	r2, #32
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042dc:	f043 0220 	orr.w	r2, r3, #32
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e007      	b.n	8004300 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	f003 0304 	and.w	r3, r3, #4
 80042fa:	2b04      	cmp	r3, #4
 80042fc:	d1c3      	bne.n	8004286 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800431a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800431e:	d11b      	bne.n	8004358 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004328:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2220      	movs	r2, #32
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004344:	f043 0204 	orr.w	r2, r3, #4
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e000      	b.n	800435a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	bc80      	pop	{r7}
 8004362:	4770      	bx	lr

08004364 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e272      	b.n	800485c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	f000 8087 	beq.w	8004492 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004384:	4b92      	ldr	r3, [pc, #584]	@ (80045d0 <HAL_RCC_OscConfig+0x26c>)
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f003 030c 	and.w	r3, r3, #12
 800438c:	2b04      	cmp	r3, #4
 800438e:	d00c      	beq.n	80043aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004390:	4b8f      	ldr	r3, [pc, #572]	@ (80045d0 <HAL_RCC_OscConfig+0x26c>)
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f003 030c 	and.w	r3, r3, #12
 8004398:	2b08      	cmp	r3, #8
 800439a:	d112      	bne.n	80043c2 <HAL_RCC_OscConfig+0x5e>
 800439c:	4b8c      	ldr	r3, [pc, #560]	@ (80045d0 <HAL_RCC_OscConfig+0x26c>)
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043a8:	d10b      	bne.n	80043c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043aa:	4b89      	ldr	r3, [pc, #548]	@ (80045d0 <HAL_RCC_OscConfig+0x26c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d06c      	beq.n	8004490 <HAL_RCC_OscConfig+0x12c>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d168      	bne.n	8004490 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e24c      	b.n	800485c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043ca:	d106      	bne.n	80043da <HAL_RCC_OscConfig+0x76>
 80043cc:	4b80      	ldr	r3, [pc, #512]	@ (80045d0 <HAL_RCC_OscConfig+0x26c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a7f      	ldr	r2, [pc, #508]	@ (80045d0 <HAL_RCC_OscConfig+0x26c>)
 80043d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043d6:	6013      	str	r3, [r2, #0]
 80043d8:	e02e      	b.n	8004438 <HAL_RCC_OscConfig+0xd4>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10c      	bne.n	80043fc <HAL_RCC_OscConfig+0x98>
 80043e2:	4b7b      	ldr	r3, [pc, #492]	@ (80045d0 <HAL_RCC_OscConfig+0x26c>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a7a      	ldr	r2, [pc, #488]	@ (80045d0 <HAL_RCC_OscConfig+0x26c>)
 80043e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043ec:	6013      	str	r3, [r2, #0]
 80043ee:	4b78      	ldr	r3, [pc, #480]	@ (80045d0 <HAL_RCC_OscConfig+0x26c>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a77      	ldr	r2, [pc, #476]	@ (80045d0 <HAL_RCC_OscConfig+0x26c>)
 80043f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043f8:	6013      	str	r3, [r2, #0]
 80043fa:	e01d      	b.n	8004438 <HAL_RCC_OscConfig+0xd4>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004404:	d10c      	bne.n	8004420 <HAL_RCC_OscConfig+0xbc>
 8004406:	4b72      	ldr	r3, [pc, #456]	@ (80045d0 <HAL_RCC_OscConfig+0x26c>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a71      	ldr	r2, [pc, #452]	@ (80045d0 <HAL_RCC_OscConfig+0x26c>)
 800440c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004410:	6013      	str	r3, [r2, #0]
 8004412:	4b6f      	ldr	r3, [pc, #444]	@ (80045d0 <HAL_RCC_OscConfig+0x26c>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a6e      	ldr	r2, [pc, #440]	@ (80045d0 <HAL_RCC_OscConfig+0x26c>)
 8004418:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800441c:	6013      	str	r3, [r2, #0]
 800441e:	e00b      	b.n	8004438 <HAL_RCC_OscConfig+0xd4>
 8004420:	4b6b      	ldr	r3, [pc, #428]	@ (80045d0 <HAL_RCC_OscConfig+0x26c>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a6a      	ldr	r2, [pc, #424]	@ (80045d0 <HAL_RCC_OscConfig+0x26c>)
 8004426:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800442a:	6013      	str	r3, [r2, #0]
 800442c:	4b68      	ldr	r3, [pc, #416]	@ (80045d0 <HAL_RCC_OscConfig+0x26c>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a67      	ldr	r2, [pc, #412]	@ (80045d0 <HAL_RCC_OscConfig+0x26c>)
 8004432:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004436:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d013      	beq.n	8004468 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004440:	f7fd ffc6 	bl	80023d0 <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004448:	f7fd ffc2 	bl	80023d0 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b64      	cmp	r3, #100	@ 0x64
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e200      	b.n	800485c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800445a:	4b5d      	ldr	r3, [pc, #372]	@ (80045d0 <HAL_RCC_OscConfig+0x26c>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d0f0      	beq.n	8004448 <HAL_RCC_OscConfig+0xe4>
 8004466:	e014      	b.n	8004492 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004468:	f7fd ffb2 	bl	80023d0 <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800446e:	e008      	b.n	8004482 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004470:	f7fd ffae 	bl	80023d0 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b64      	cmp	r3, #100	@ 0x64
 800447c:	d901      	bls.n	8004482 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e1ec      	b.n	800485c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004482:	4b53      	ldr	r3, [pc, #332]	@ (80045d0 <HAL_RCC_OscConfig+0x26c>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1f0      	bne.n	8004470 <HAL_RCC_OscConfig+0x10c>
 800448e:	e000      	b.n	8004492 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d063      	beq.n	8004566 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800449e:	4b4c      	ldr	r3, [pc, #304]	@ (80045d0 <HAL_RCC_OscConfig+0x26c>)
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f003 030c 	and.w	r3, r3, #12
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00b      	beq.n	80044c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80044aa:	4b49      	ldr	r3, [pc, #292]	@ (80045d0 <HAL_RCC_OscConfig+0x26c>)
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f003 030c 	and.w	r3, r3, #12
 80044b2:	2b08      	cmp	r3, #8
 80044b4:	d11c      	bne.n	80044f0 <HAL_RCC_OscConfig+0x18c>
 80044b6:	4b46      	ldr	r3, [pc, #280]	@ (80045d0 <HAL_RCC_OscConfig+0x26c>)
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d116      	bne.n	80044f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044c2:	4b43      	ldr	r3, [pc, #268]	@ (80045d0 <HAL_RCC_OscConfig+0x26c>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d005      	beq.n	80044da <HAL_RCC_OscConfig+0x176>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d001      	beq.n	80044da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e1c0      	b.n	800485c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044da:	4b3d      	ldr	r3, [pc, #244]	@ (80045d0 <HAL_RCC_OscConfig+0x26c>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	00db      	lsls	r3, r3, #3
 80044e8:	4939      	ldr	r1, [pc, #228]	@ (80045d0 <HAL_RCC_OscConfig+0x26c>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ee:	e03a      	b.n	8004566 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d020      	beq.n	800453a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044f8:	4b36      	ldr	r3, [pc, #216]	@ (80045d4 <HAL_RCC_OscConfig+0x270>)
 80044fa:	2201      	movs	r2, #1
 80044fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044fe:	f7fd ff67 	bl	80023d0 <HAL_GetTick>
 8004502:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004504:	e008      	b.n	8004518 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004506:	f7fd ff63 	bl	80023d0 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e1a1      	b.n	800485c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004518:	4b2d      	ldr	r3, [pc, #180]	@ (80045d0 <HAL_RCC_OscConfig+0x26c>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d0f0      	beq.n	8004506 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004524:	4b2a      	ldr	r3, [pc, #168]	@ (80045d0 <HAL_RCC_OscConfig+0x26c>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	00db      	lsls	r3, r3, #3
 8004532:	4927      	ldr	r1, [pc, #156]	@ (80045d0 <HAL_RCC_OscConfig+0x26c>)
 8004534:	4313      	orrs	r3, r2
 8004536:	600b      	str	r3, [r1, #0]
 8004538:	e015      	b.n	8004566 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800453a:	4b26      	ldr	r3, [pc, #152]	@ (80045d4 <HAL_RCC_OscConfig+0x270>)
 800453c:	2200      	movs	r2, #0
 800453e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004540:	f7fd ff46 	bl	80023d0 <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004546:	e008      	b.n	800455a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004548:	f7fd ff42 	bl	80023d0 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b02      	cmp	r3, #2
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e180      	b.n	800485c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800455a:	4b1d      	ldr	r3, [pc, #116]	@ (80045d0 <HAL_RCC_OscConfig+0x26c>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1f0      	bne.n	8004548 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	2b00      	cmp	r3, #0
 8004570:	d03a      	beq.n	80045e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d019      	beq.n	80045ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800457a:	4b17      	ldr	r3, [pc, #92]	@ (80045d8 <HAL_RCC_OscConfig+0x274>)
 800457c:	2201      	movs	r2, #1
 800457e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004580:	f7fd ff26 	bl	80023d0 <HAL_GetTick>
 8004584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004586:	e008      	b.n	800459a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004588:	f7fd ff22 	bl	80023d0 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b02      	cmp	r3, #2
 8004594:	d901      	bls.n	800459a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e160      	b.n	800485c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800459a:	4b0d      	ldr	r3, [pc, #52]	@ (80045d0 <HAL_RCC_OscConfig+0x26c>)
 800459c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d0f0      	beq.n	8004588 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80045a6:	2001      	movs	r0, #1
 80045a8:	f000 fad0 	bl	8004b4c <RCC_Delay>
 80045ac:	e01c      	b.n	80045e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045ae:	4b0a      	ldr	r3, [pc, #40]	@ (80045d8 <HAL_RCC_OscConfig+0x274>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045b4:	f7fd ff0c 	bl	80023d0 <HAL_GetTick>
 80045b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045ba:	e00f      	b.n	80045dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045bc:	f7fd ff08 	bl	80023d0 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d908      	bls.n	80045dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e146      	b.n	800485c <HAL_RCC_OscConfig+0x4f8>
 80045ce:	bf00      	nop
 80045d0:	40021000 	.word	0x40021000
 80045d4:	42420000 	.word	0x42420000
 80045d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045dc:	4b92      	ldr	r3, [pc, #584]	@ (8004828 <HAL_RCC_OscConfig+0x4c4>)
 80045de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1e9      	bne.n	80045bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0304 	and.w	r3, r3, #4
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f000 80a6 	beq.w	8004742 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045f6:	2300      	movs	r3, #0
 80045f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045fa:	4b8b      	ldr	r3, [pc, #556]	@ (8004828 <HAL_RCC_OscConfig+0x4c4>)
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10d      	bne.n	8004622 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004606:	4b88      	ldr	r3, [pc, #544]	@ (8004828 <HAL_RCC_OscConfig+0x4c4>)
 8004608:	69db      	ldr	r3, [r3, #28]
 800460a:	4a87      	ldr	r2, [pc, #540]	@ (8004828 <HAL_RCC_OscConfig+0x4c4>)
 800460c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004610:	61d3      	str	r3, [r2, #28]
 8004612:	4b85      	ldr	r3, [pc, #532]	@ (8004828 <HAL_RCC_OscConfig+0x4c4>)
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800461a:	60bb      	str	r3, [r7, #8]
 800461c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800461e:	2301      	movs	r3, #1
 8004620:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004622:	4b82      	ldr	r3, [pc, #520]	@ (800482c <HAL_RCC_OscConfig+0x4c8>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800462a:	2b00      	cmp	r3, #0
 800462c:	d118      	bne.n	8004660 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800462e:	4b7f      	ldr	r3, [pc, #508]	@ (800482c <HAL_RCC_OscConfig+0x4c8>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a7e      	ldr	r2, [pc, #504]	@ (800482c <HAL_RCC_OscConfig+0x4c8>)
 8004634:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004638:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800463a:	f7fd fec9 	bl	80023d0 <HAL_GetTick>
 800463e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004640:	e008      	b.n	8004654 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004642:	f7fd fec5 	bl	80023d0 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	2b64      	cmp	r3, #100	@ 0x64
 800464e:	d901      	bls.n	8004654 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e103      	b.n	800485c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004654:	4b75      	ldr	r3, [pc, #468]	@ (800482c <HAL_RCC_OscConfig+0x4c8>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800465c:	2b00      	cmp	r3, #0
 800465e:	d0f0      	beq.n	8004642 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d106      	bne.n	8004676 <HAL_RCC_OscConfig+0x312>
 8004668:	4b6f      	ldr	r3, [pc, #444]	@ (8004828 <HAL_RCC_OscConfig+0x4c4>)
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	4a6e      	ldr	r2, [pc, #440]	@ (8004828 <HAL_RCC_OscConfig+0x4c4>)
 800466e:	f043 0301 	orr.w	r3, r3, #1
 8004672:	6213      	str	r3, [r2, #32]
 8004674:	e02d      	b.n	80046d2 <HAL_RCC_OscConfig+0x36e>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10c      	bne.n	8004698 <HAL_RCC_OscConfig+0x334>
 800467e:	4b6a      	ldr	r3, [pc, #424]	@ (8004828 <HAL_RCC_OscConfig+0x4c4>)
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	4a69      	ldr	r2, [pc, #420]	@ (8004828 <HAL_RCC_OscConfig+0x4c4>)
 8004684:	f023 0301 	bic.w	r3, r3, #1
 8004688:	6213      	str	r3, [r2, #32]
 800468a:	4b67      	ldr	r3, [pc, #412]	@ (8004828 <HAL_RCC_OscConfig+0x4c4>)
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	4a66      	ldr	r2, [pc, #408]	@ (8004828 <HAL_RCC_OscConfig+0x4c4>)
 8004690:	f023 0304 	bic.w	r3, r3, #4
 8004694:	6213      	str	r3, [r2, #32]
 8004696:	e01c      	b.n	80046d2 <HAL_RCC_OscConfig+0x36e>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	2b05      	cmp	r3, #5
 800469e:	d10c      	bne.n	80046ba <HAL_RCC_OscConfig+0x356>
 80046a0:	4b61      	ldr	r3, [pc, #388]	@ (8004828 <HAL_RCC_OscConfig+0x4c4>)
 80046a2:	6a1b      	ldr	r3, [r3, #32]
 80046a4:	4a60      	ldr	r2, [pc, #384]	@ (8004828 <HAL_RCC_OscConfig+0x4c4>)
 80046a6:	f043 0304 	orr.w	r3, r3, #4
 80046aa:	6213      	str	r3, [r2, #32]
 80046ac:	4b5e      	ldr	r3, [pc, #376]	@ (8004828 <HAL_RCC_OscConfig+0x4c4>)
 80046ae:	6a1b      	ldr	r3, [r3, #32]
 80046b0:	4a5d      	ldr	r2, [pc, #372]	@ (8004828 <HAL_RCC_OscConfig+0x4c4>)
 80046b2:	f043 0301 	orr.w	r3, r3, #1
 80046b6:	6213      	str	r3, [r2, #32]
 80046b8:	e00b      	b.n	80046d2 <HAL_RCC_OscConfig+0x36e>
 80046ba:	4b5b      	ldr	r3, [pc, #364]	@ (8004828 <HAL_RCC_OscConfig+0x4c4>)
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	4a5a      	ldr	r2, [pc, #360]	@ (8004828 <HAL_RCC_OscConfig+0x4c4>)
 80046c0:	f023 0301 	bic.w	r3, r3, #1
 80046c4:	6213      	str	r3, [r2, #32]
 80046c6:	4b58      	ldr	r3, [pc, #352]	@ (8004828 <HAL_RCC_OscConfig+0x4c4>)
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	4a57      	ldr	r2, [pc, #348]	@ (8004828 <HAL_RCC_OscConfig+0x4c4>)
 80046cc:	f023 0304 	bic.w	r3, r3, #4
 80046d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d015      	beq.n	8004706 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046da:	f7fd fe79 	bl	80023d0 <HAL_GetTick>
 80046de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e0:	e00a      	b.n	80046f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046e2:	f7fd fe75 	bl	80023d0 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e0b1      	b.n	800485c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f8:	4b4b      	ldr	r3, [pc, #300]	@ (8004828 <HAL_RCC_OscConfig+0x4c4>)
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d0ee      	beq.n	80046e2 <HAL_RCC_OscConfig+0x37e>
 8004704:	e014      	b.n	8004730 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004706:	f7fd fe63 	bl	80023d0 <HAL_GetTick>
 800470a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800470c:	e00a      	b.n	8004724 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800470e:	f7fd fe5f 	bl	80023d0 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	f241 3288 	movw	r2, #5000	@ 0x1388
 800471c:	4293      	cmp	r3, r2
 800471e:	d901      	bls.n	8004724 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e09b      	b.n	800485c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004724:	4b40      	ldr	r3, [pc, #256]	@ (8004828 <HAL_RCC_OscConfig+0x4c4>)
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1ee      	bne.n	800470e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004730:	7dfb      	ldrb	r3, [r7, #23]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d105      	bne.n	8004742 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004736:	4b3c      	ldr	r3, [pc, #240]	@ (8004828 <HAL_RCC_OscConfig+0x4c4>)
 8004738:	69db      	ldr	r3, [r3, #28]
 800473a:	4a3b      	ldr	r2, [pc, #236]	@ (8004828 <HAL_RCC_OscConfig+0x4c4>)
 800473c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004740:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	69db      	ldr	r3, [r3, #28]
 8004746:	2b00      	cmp	r3, #0
 8004748:	f000 8087 	beq.w	800485a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800474c:	4b36      	ldr	r3, [pc, #216]	@ (8004828 <HAL_RCC_OscConfig+0x4c4>)
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f003 030c 	and.w	r3, r3, #12
 8004754:	2b08      	cmp	r3, #8
 8004756:	d061      	beq.n	800481c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	69db      	ldr	r3, [r3, #28]
 800475c:	2b02      	cmp	r3, #2
 800475e:	d146      	bne.n	80047ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004760:	4b33      	ldr	r3, [pc, #204]	@ (8004830 <HAL_RCC_OscConfig+0x4cc>)
 8004762:	2200      	movs	r2, #0
 8004764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004766:	f7fd fe33 	bl	80023d0 <HAL_GetTick>
 800476a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800476c:	e008      	b.n	8004780 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800476e:	f7fd fe2f 	bl	80023d0 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b02      	cmp	r3, #2
 800477a:	d901      	bls.n	8004780 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e06d      	b.n	800485c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004780:	4b29      	ldr	r3, [pc, #164]	@ (8004828 <HAL_RCC_OscConfig+0x4c4>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1f0      	bne.n	800476e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a1b      	ldr	r3, [r3, #32]
 8004790:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004794:	d108      	bne.n	80047a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004796:	4b24      	ldr	r3, [pc, #144]	@ (8004828 <HAL_RCC_OscConfig+0x4c4>)
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	4921      	ldr	r1, [pc, #132]	@ (8004828 <HAL_RCC_OscConfig+0x4c4>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047a8:	4b1f      	ldr	r3, [pc, #124]	@ (8004828 <HAL_RCC_OscConfig+0x4c4>)
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a19      	ldr	r1, [r3, #32]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b8:	430b      	orrs	r3, r1
 80047ba:	491b      	ldr	r1, [pc, #108]	@ (8004828 <HAL_RCC_OscConfig+0x4c4>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004830 <HAL_RCC_OscConfig+0x4cc>)
 80047c2:	2201      	movs	r2, #1
 80047c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c6:	f7fd fe03 	bl	80023d0 <HAL_GetTick>
 80047ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047cc:	e008      	b.n	80047e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ce:	f7fd fdff 	bl	80023d0 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d901      	bls.n	80047e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e03d      	b.n	800485c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047e0:	4b11      	ldr	r3, [pc, #68]	@ (8004828 <HAL_RCC_OscConfig+0x4c4>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d0f0      	beq.n	80047ce <HAL_RCC_OscConfig+0x46a>
 80047ec:	e035      	b.n	800485a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ee:	4b10      	ldr	r3, [pc, #64]	@ (8004830 <HAL_RCC_OscConfig+0x4cc>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f4:	f7fd fdec 	bl	80023d0 <HAL_GetTick>
 80047f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047fa:	e008      	b.n	800480e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047fc:	f7fd fde8 	bl	80023d0 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b02      	cmp	r3, #2
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e026      	b.n	800485c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800480e:	4b06      	ldr	r3, [pc, #24]	@ (8004828 <HAL_RCC_OscConfig+0x4c4>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1f0      	bne.n	80047fc <HAL_RCC_OscConfig+0x498>
 800481a:	e01e      	b.n	800485a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d107      	bne.n	8004834 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e019      	b.n	800485c <HAL_RCC_OscConfig+0x4f8>
 8004828:	40021000 	.word	0x40021000
 800482c:	40007000 	.word	0x40007000
 8004830:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004834:	4b0b      	ldr	r3, [pc, #44]	@ (8004864 <HAL_RCC_OscConfig+0x500>)
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a1b      	ldr	r3, [r3, #32]
 8004844:	429a      	cmp	r2, r3
 8004846:	d106      	bne.n	8004856 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004852:	429a      	cmp	r2, r3
 8004854:	d001      	beq.n	800485a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e000      	b.n	800485c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3718      	adds	r7, #24
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	40021000 	.word	0x40021000

08004868 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d101      	bne.n	800487c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e0d0      	b.n	8004a1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800487c:	4b6a      	ldr	r3, [pc, #424]	@ (8004a28 <HAL_RCC_ClockConfig+0x1c0>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0307 	and.w	r3, r3, #7
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	429a      	cmp	r2, r3
 8004888:	d910      	bls.n	80048ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800488a:	4b67      	ldr	r3, [pc, #412]	@ (8004a28 <HAL_RCC_ClockConfig+0x1c0>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f023 0207 	bic.w	r2, r3, #7
 8004892:	4965      	ldr	r1, [pc, #404]	@ (8004a28 <HAL_RCC_ClockConfig+0x1c0>)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	4313      	orrs	r3, r2
 8004898:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800489a:	4b63      	ldr	r3, [pc, #396]	@ (8004a28 <HAL_RCC_ClockConfig+0x1c0>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0307 	and.w	r3, r3, #7
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d001      	beq.n	80048ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e0b8      	b.n	8004a1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d020      	beq.n	80048fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0304 	and.w	r3, r3, #4
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d005      	beq.n	80048d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048c4:	4b59      	ldr	r3, [pc, #356]	@ (8004a2c <HAL_RCC_ClockConfig+0x1c4>)
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	4a58      	ldr	r2, [pc, #352]	@ (8004a2c <HAL_RCC_ClockConfig+0x1c4>)
 80048ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80048ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0308 	and.w	r3, r3, #8
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d005      	beq.n	80048e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048dc:	4b53      	ldr	r3, [pc, #332]	@ (8004a2c <HAL_RCC_ClockConfig+0x1c4>)
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	4a52      	ldr	r2, [pc, #328]	@ (8004a2c <HAL_RCC_ClockConfig+0x1c4>)
 80048e2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80048e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048e8:	4b50      	ldr	r3, [pc, #320]	@ (8004a2c <HAL_RCC_ClockConfig+0x1c4>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	494d      	ldr	r1, [pc, #308]	@ (8004a2c <HAL_RCC_ClockConfig+0x1c4>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b00      	cmp	r3, #0
 8004904:	d040      	beq.n	8004988 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d107      	bne.n	800491e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800490e:	4b47      	ldr	r3, [pc, #284]	@ (8004a2c <HAL_RCC_ClockConfig+0x1c4>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d115      	bne.n	8004946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e07f      	b.n	8004a1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	2b02      	cmp	r3, #2
 8004924:	d107      	bne.n	8004936 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004926:	4b41      	ldr	r3, [pc, #260]	@ (8004a2c <HAL_RCC_ClockConfig+0x1c4>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d109      	bne.n	8004946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e073      	b.n	8004a1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004936:	4b3d      	ldr	r3, [pc, #244]	@ (8004a2c <HAL_RCC_ClockConfig+0x1c4>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e06b      	b.n	8004a1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004946:	4b39      	ldr	r3, [pc, #228]	@ (8004a2c <HAL_RCC_ClockConfig+0x1c4>)
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f023 0203 	bic.w	r2, r3, #3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	4936      	ldr	r1, [pc, #216]	@ (8004a2c <HAL_RCC_ClockConfig+0x1c4>)
 8004954:	4313      	orrs	r3, r2
 8004956:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004958:	f7fd fd3a 	bl	80023d0 <HAL_GetTick>
 800495c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800495e:	e00a      	b.n	8004976 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004960:	f7fd fd36 	bl	80023d0 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800496e:	4293      	cmp	r3, r2
 8004970:	d901      	bls.n	8004976 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e053      	b.n	8004a1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004976:	4b2d      	ldr	r3, [pc, #180]	@ (8004a2c <HAL_RCC_ClockConfig+0x1c4>)
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f003 020c 	and.w	r2, r3, #12
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	429a      	cmp	r2, r3
 8004986:	d1eb      	bne.n	8004960 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004988:	4b27      	ldr	r3, [pc, #156]	@ (8004a28 <HAL_RCC_ClockConfig+0x1c0>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0307 	and.w	r3, r3, #7
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	429a      	cmp	r2, r3
 8004994:	d210      	bcs.n	80049b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004996:	4b24      	ldr	r3, [pc, #144]	@ (8004a28 <HAL_RCC_ClockConfig+0x1c0>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f023 0207 	bic.w	r2, r3, #7
 800499e:	4922      	ldr	r1, [pc, #136]	@ (8004a28 <HAL_RCC_ClockConfig+0x1c0>)
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049a6:	4b20      	ldr	r3, [pc, #128]	@ (8004a28 <HAL_RCC_ClockConfig+0x1c0>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0307 	and.w	r3, r3, #7
 80049ae:	683a      	ldr	r2, [r7, #0]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d001      	beq.n	80049b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e032      	b.n	8004a1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0304 	and.w	r3, r3, #4
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d008      	beq.n	80049d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049c4:	4b19      	ldr	r3, [pc, #100]	@ (8004a2c <HAL_RCC_ClockConfig+0x1c4>)
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	4916      	ldr	r1, [pc, #88]	@ (8004a2c <HAL_RCC_ClockConfig+0x1c4>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0308 	and.w	r3, r3, #8
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d009      	beq.n	80049f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80049e2:	4b12      	ldr	r3, [pc, #72]	@ (8004a2c <HAL_RCC_ClockConfig+0x1c4>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	00db      	lsls	r3, r3, #3
 80049f0:	490e      	ldr	r1, [pc, #56]	@ (8004a2c <HAL_RCC_ClockConfig+0x1c4>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049f6:	f000 f821 	bl	8004a3c <HAL_RCC_GetSysClockFreq>
 80049fa:	4602      	mov	r2, r0
 80049fc:	4b0b      	ldr	r3, [pc, #44]	@ (8004a2c <HAL_RCC_ClockConfig+0x1c4>)
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	091b      	lsrs	r3, r3, #4
 8004a02:	f003 030f 	and.w	r3, r3, #15
 8004a06:	490a      	ldr	r1, [pc, #40]	@ (8004a30 <HAL_RCC_ClockConfig+0x1c8>)
 8004a08:	5ccb      	ldrb	r3, [r1, r3]
 8004a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a0e:	4a09      	ldr	r2, [pc, #36]	@ (8004a34 <HAL_RCC_ClockConfig+0x1cc>)
 8004a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a12:	4b09      	ldr	r3, [pc, #36]	@ (8004a38 <HAL_RCC_ClockConfig+0x1d0>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7fd fc98 	bl	800234c <HAL_InitTick>

  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	40022000 	.word	0x40022000
 8004a2c:	40021000 	.word	0x40021000
 8004a30:	08007784 	.word	0x08007784
 8004a34:	2000001c 	.word	0x2000001c
 8004a38:	20000020 	.word	0x20000020

08004a3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b087      	sub	sp, #28
 8004a40:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a42:	2300      	movs	r3, #0
 8004a44:	60fb      	str	r3, [r7, #12]
 8004a46:	2300      	movs	r3, #0
 8004a48:	60bb      	str	r3, [r7, #8]
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	617b      	str	r3, [r7, #20]
 8004a4e:	2300      	movs	r3, #0
 8004a50:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004a52:	2300      	movs	r3, #0
 8004a54:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004a56:	4b1e      	ldr	r3, [pc, #120]	@ (8004ad0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f003 030c 	and.w	r3, r3, #12
 8004a62:	2b04      	cmp	r3, #4
 8004a64:	d002      	beq.n	8004a6c <HAL_RCC_GetSysClockFreq+0x30>
 8004a66:	2b08      	cmp	r3, #8
 8004a68:	d003      	beq.n	8004a72 <HAL_RCC_GetSysClockFreq+0x36>
 8004a6a:	e027      	b.n	8004abc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a6c:	4b19      	ldr	r3, [pc, #100]	@ (8004ad4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004a6e:	613b      	str	r3, [r7, #16]
      break;
 8004a70:	e027      	b.n	8004ac2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	0c9b      	lsrs	r3, r3, #18
 8004a76:	f003 030f 	and.w	r3, r3, #15
 8004a7a:	4a17      	ldr	r2, [pc, #92]	@ (8004ad8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004a7c:	5cd3      	ldrb	r3, [r2, r3]
 8004a7e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d010      	beq.n	8004aac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004a8a:	4b11      	ldr	r3, [pc, #68]	@ (8004ad0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	0c5b      	lsrs	r3, r3, #17
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	4a11      	ldr	r2, [pc, #68]	@ (8004adc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004a96:	5cd3      	ldrb	r3, [r2, r3]
 8004a98:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a0d      	ldr	r2, [pc, #52]	@ (8004ad4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004a9e:	fb03 f202 	mul.w	r2, r3, r2
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa8:	617b      	str	r3, [r7, #20]
 8004aaa:	e004      	b.n	8004ab6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a0c      	ldr	r2, [pc, #48]	@ (8004ae0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004ab0:	fb02 f303 	mul.w	r3, r2, r3
 8004ab4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	613b      	str	r3, [r7, #16]
      break;
 8004aba:	e002      	b.n	8004ac2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004abc:	4b09      	ldr	r3, [pc, #36]	@ (8004ae4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004abe:	613b      	str	r3, [r7, #16]
      break;
 8004ac0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ac2:	693b      	ldr	r3, [r7, #16]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	371c      	adds	r7, #28
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bc80      	pop	{r7}
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	40021000 	.word	0x40021000
 8004ad4:	00f42400 	.word	0x00f42400
 8004ad8:	0800779c 	.word	0x0800779c
 8004adc:	080077ac 	.word	0x080077ac
 8004ae0:	003d0900 	.word	0x003d0900
 8004ae4:	007a1200 	.word	0x007a1200

08004ae8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004aec:	4b02      	ldr	r3, [pc, #8]	@ (8004af8 <HAL_RCC_GetHCLKFreq+0x10>)
 8004aee:	681b      	ldr	r3, [r3, #0]
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bc80      	pop	{r7}
 8004af6:	4770      	bx	lr
 8004af8:	2000001c 	.word	0x2000001c

08004afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b00:	f7ff fff2 	bl	8004ae8 <HAL_RCC_GetHCLKFreq>
 8004b04:	4602      	mov	r2, r0
 8004b06:	4b05      	ldr	r3, [pc, #20]	@ (8004b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	0a1b      	lsrs	r3, r3, #8
 8004b0c:	f003 0307 	and.w	r3, r3, #7
 8004b10:	4903      	ldr	r1, [pc, #12]	@ (8004b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b12:	5ccb      	ldrb	r3, [r1, r3]
 8004b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	40021000 	.word	0x40021000
 8004b20:	08007794 	.word	0x08007794

08004b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b28:	f7ff ffde 	bl	8004ae8 <HAL_RCC_GetHCLKFreq>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	4b05      	ldr	r3, [pc, #20]	@ (8004b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	0adb      	lsrs	r3, r3, #11
 8004b34:	f003 0307 	and.w	r3, r3, #7
 8004b38:	4903      	ldr	r1, [pc, #12]	@ (8004b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b3a:	5ccb      	ldrb	r3, [r1, r3]
 8004b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	40021000 	.word	0x40021000
 8004b48:	08007794 	.word	0x08007794

08004b4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004b54:	4b0a      	ldr	r3, [pc, #40]	@ (8004b80 <RCC_Delay+0x34>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a0a      	ldr	r2, [pc, #40]	@ (8004b84 <RCC_Delay+0x38>)
 8004b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5e:	0a5b      	lsrs	r3, r3, #9
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	fb02 f303 	mul.w	r3, r2, r3
 8004b66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004b68:	bf00      	nop
  }
  while (Delay --);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	1e5a      	subs	r2, r3, #1
 8004b6e:	60fa      	str	r2, [r7, #12]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1f9      	bne.n	8004b68 <RCC_Delay+0x1c>
}
 8004b74:	bf00      	nop
 8004b76:	bf00      	nop
 8004b78:	3714      	adds	r7, #20
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bc80      	pop	{r7}
 8004b7e:	4770      	bx	lr
 8004b80:	2000001c 	.word	0x2000001c
 8004b84:	10624dd3 	.word	0x10624dd3

08004b88 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	613b      	str	r3, [r7, #16]
 8004b94:	2300      	movs	r3, #0
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d07d      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ba8:	4b4f      	ldr	r3, [pc, #316]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004baa:	69db      	ldr	r3, [r3, #28]
 8004bac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10d      	bne.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bb4:	4b4c      	ldr	r3, [pc, #304]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bb6:	69db      	ldr	r3, [r3, #28]
 8004bb8:	4a4b      	ldr	r2, [pc, #300]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bbe:	61d3      	str	r3, [r2, #28]
 8004bc0:	4b49      	ldr	r3, [pc, #292]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bc2:	69db      	ldr	r3, [r3, #28]
 8004bc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bc8:	60bb      	str	r3, [r7, #8]
 8004bca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bd0:	4b46      	ldr	r3, [pc, #280]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d118      	bne.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bdc:	4b43      	ldr	r3, [pc, #268]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a42      	ldr	r2, [pc, #264]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004be2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004be6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004be8:	f7fd fbf2 	bl	80023d0 <HAL_GetTick>
 8004bec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bee:	e008      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bf0:	f7fd fbee 	bl	80023d0 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b64      	cmp	r3, #100	@ 0x64
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e06d      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c02:	4b3a      	ldr	r3, [pc, #232]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d0f0      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c0e:	4b36      	ldr	r3, [pc, #216]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c16:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d02e      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d027      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c2c:	4b2e      	ldr	r3, [pc, #184]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c2e:	6a1b      	ldr	r3, [r3, #32]
 8004c30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c34:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c36:	4b2e      	ldr	r3, [pc, #184]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c38:	2201      	movs	r2, #1
 8004c3a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c3c:	4b2c      	ldr	r3, [pc, #176]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c3e:	2200      	movs	r2, #0
 8004c40:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004c42:	4a29      	ldr	r2, [pc, #164]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d014      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c52:	f7fd fbbd 	bl	80023d0 <HAL_GetTick>
 8004c56:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c58:	e00a      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c5a:	f7fd fbb9 	bl	80023d0 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d901      	bls.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e036      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c70:	4b1d      	ldr	r3, [pc, #116]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c72:	6a1b      	ldr	r3, [r3, #32]
 8004c74:	f003 0302 	and.w	r3, r3, #2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d0ee      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c7e:	6a1b      	ldr	r3, [r3, #32]
 8004c80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	4917      	ldr	r1, [pc, #92]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c8e:	7dfb      	ldrb	r3, [r7, #23]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d105      	bne.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c94:	4b14      	ldr	r3, [pc, #80]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c96:	69db      	ldr	r3, [r3, #28]
 8004c98:	4a13      	ldr	r2, [pc, #76]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c9e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0302 	and.w	r3, r3, #2
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d008      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004cac:	4b0e      	ldr	r3, [pc, #56]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	490b      	ldr	r1, [pc, #44]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0310 	and.w	r3, r3, #16
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d008      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cca:	4b07      	ldr	r3, [pc, #28]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	4904      	ldr	r1, [pc, #16]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3718      	adds	r7, #24
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	40021000 	.word	0x40021000
 8004cec:	40007000 	.word	0x40007000
 8004cf0:	42420440 	.word	0x42420440

08004cf4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b088      	sub	sp, #32
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	617b      	str	r3, [r7, #20]
 8004d00:	2300      	movs	r3, #0
 8004d02:	61fb      	str	r3, [r7, #28]
 8004d04:	2300      	movs	r3, #0
 8004d06:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	60fb      	str	r3, [r7, #12]
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b10      	cmp	r3, #16
 8004d14:	d00a      	beq.n	8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b10      	cmp	r3, #16
 8004d1a:	f200 8089 	bhi.w	8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d045      	beq.n	8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d074      	beq.n	8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004d2a:	e081      	b.n	8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      temp_reg = RCC->CFGR;
 8004d2c:	4b45      	ldr	r3, [pc, #276]	@ (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004d32:	4b44      	ldr	r3, [pc, #272]	@ (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d07a      	beq.n	8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	0c9b      	lsrs	r3, r3, #18
 8004d42:	f003 030f 	and.w	r3, r3, #15
 8004d46:	4a40      	ldr	r2, [pc, #256]	@ (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004d48:	5cd3      	ldrb	r3, [r2, r3]
 8004d4a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d015      	beq.n	8004d82 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004d56:	4b3b      	ldr	r3, [pc, #236]	@ (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	0c5b      	lsrs	r3, r3, #17
 8004d5c:	f003 0301 	and.w	r3, r3, #1
 8004d60:	4a3a      	ldr	r2, [pc, #232]	@ (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004d62:	5cd3      	ldrb	r3, [r2, r3]
 8004d64:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00d      	beq.n	8004d8c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004d70:	4a37      	ldr	r2, [pc, #220]	@ (8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	fb02 f303 	mul.w	r3, r2, r3
 8004d7e:	61fb      	str	r3, [r7, #28]
 8004d80:	e004      	b.n	8004d8c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	4a33      	ldr	r2, [pc, #204]	@ (8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004d86:	fb02 f303 	mul.w	r3, r2, r3
 8004d8a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004d8c:	4b2d      	ldr	r3, [pc, #180]	@ (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d98:	d102      	bne.n	8004da0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	61bb      	str	r3, [r7, #24]
      break;
 8004d9e:	e049      	b.n	8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
          frequency = (pllclk * 2) / 3;
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	005b      	lsls	r3, r3, #1
 8004da4:	4a2c      	ldr	r2, [pc, #176]	@ (8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004da6:	fba2 2303 	umull	r2, r3, r2, r3
 8004daa:	085b      	lsrs	r3, r3, #1
 8004dac:	61bb      	str	r3, [r7, #24]
      break;
 8004dae:	e041      	b.n	8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      temp_reg = RCC->BDCR;
 8004db0:	4b24      	ldr	r3, [pc, #144]	@ (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004dc0:	d108      	bne.n	8004dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f003 0302 	and.w	r3, r3, #2
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d003      	beq.n	8004dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004dcc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dd0:	61bb      	str	r3, [r7, #24]
 8004dd2:	e01e      	b.n	8004e12 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dde:	d109      	bne.n	8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004de0:	4b18      	ldr	r3, [pc, #96]	@ (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d003      	beq.n	8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004dec:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004df0:	61bb      	str	r3, [r7, #24]
 8004df2:	e00e      	b.n	8004e12 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dfa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004dfe:	d11b      	bne.n	8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8004e00:	4b10      	ldr	r3, [pc, #64]	@ (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d015      	beq.n	8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
        frequency = HSE_VALUE / 128U;
 8004e0c:	4b13      	ldr	r3, [pc, #76]	@ (8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004e0e:	61bb      	str	r3, [r7, #24]
      break;
 8004e10:	e012      	b.n	8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8004e12:	e011      	b.n	8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004e14:	f7ff fe86 	bl	8004b24 <HAL_RCC_GetPCLK2Freq>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	0b9b      	lsrs	r3, r3, #14
 8004e20:	f003 0303 	and.w	r3, r3, #3
 8004e24:	3301      	adds	r3, #1
 8004e26:	005b      	lsls	r3, r3, #1
 8004e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e2c:	61bb      	str	r3, [r7, #24]
      break;
 8004e2e:	e004      	b.n	8004e3a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 8004e30:	bf00      	nop
 8004e32:	e002      	b.n	8004e3a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 8004e34:	bf00      	nop
 8004e36:	e000      	b.n	8004e3a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 8004e38:	bf00      	nop
    }
  }
  return (frequency);
 8004e3a:	69bb      	ldr	r3, [r7, #24]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3720      	adds	r7, #32
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	40021000 	.word	0x40021000
 8004e48:	080077b0 	.word	0x080077b0
 8004e4c:	080077c0 	.word	0x080077c0
 8004e50:	00f42400 	.word	0x00f42400
 8004e54:	003d0900 	.word	0x003d0900
 8004e58:	aaaaaaab 	.word	0xaaaaaaab
 8004e5c:	0001e848 	.word	0x0001e848

08004e60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d101      	bne.n	8004e72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e041      	b.n	8004ef6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d106      	bne.n	8004e8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f7fd f922 	bl	80020d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2202      	movs	r2, #2
 8004e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	3304      	adds	r3, #4
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	4610      	mov	r0, r2
 8004ea0:	f000 fc02 	bl	80056a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3708      	adds	r7, #8
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
	...

08004f00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d001      	beq.n	8004f18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e035      	b.n	8004f84 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2202      	movs	r2, #2
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68da      	ldr	r2, [r3, #12]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f042 0201 	orr.w	r2, r2, #1
 8004f2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a16      	ldr	r2, [pc, #88]	@ (8004f90 <HAL_TIM_Base_Start_IT+0x90>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d009      	beq.n	8004f4e <HAL_TIM_Base_Start_IT+0x4e>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f42:	d004      	beq.n	8004f4e <HAL_TIM_Base_Start_IT+0x4e>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a12      	ldr	r2, [pc, #72]	@ (8004f94 <HAL_TIM_Base_Start_IT+0x94>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d111      	bne.n	8004f72 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f003 0307 	and.w	r3, r3, #7
 8004f58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2b06      	cmp	r3, #6
 8004f5e:	d010      	beq.n	8004f82 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f042 0201 	orr.w	r2, r2, #1
 8004f6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f70:	e007      	b.n	8004f82 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f042 0201 	orr.w	r2, r2, #1
 8004f80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3714      	adds	r7, #20
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bc80      	pop	{r7}
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	40012c00 	.word	0x40012c00
 8004f94:	40000400 	.word	0x40000400

08004f98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e041      	b.n	800502e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d106      	bne.n	8004fc4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 f839 	bl	8005036 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	3304      	adds	r3, #4
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	4610      	mov	r0, r2
 8004fd8:	f000 fb66 	bl	80056a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3708      	adds	r7, #8
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005036:	b480      	push	{r7}
 8005038:	b083      	sub	sp, #12
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800503e:	bf00      	nop
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	bc80      	pop	{r7}
 8005046:	4770      	bx	lr

08005048 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d109      	bne.n	800506c <HAL_TIM_PWM_Start+0x24>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b01      	cmp	r3, #1
 8005062:	bf14      	ite	ne
 8005064:	2301      	movne	r3, #1
 8005066:	2300      	moveq	r3, #0
 8005068:	b2db      	uxtb	r3, r3
 800506a:	e022      	b.n	80050b2 <HAL_TIM_PWM_Start+0x6a>
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	2b04      	cmp	r3, #4
 8005070:	d109      	bne.n	8005086 <HAL_TIM_PWM_Start+0x3e>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b01      	cmp	r3, #1
 800507c:	bf14      	ite	ne
 800507e:	2301      	movne	r3, #1
 8005080:	2300      	moveq	r3, #0
 8005082:	b2db      	uxtb	r3, r3
 8005084:	e015      	b.n	80050b2 <HAL_TIM_PWM_Start+0x6a>
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2b08      	cmp	r3, #8
 800508a:	d109      	bne.n	80050a0 <HAL_TIM_PWM_Start+0x58>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b01      	cmp	r3, #1
 8005096:	bf14      	ite	ne
 8005098:	2301      	movne	r3, #1
 800509a:	2300      	moveq	r3, #0
 800509c:	b2db      	uxtb	r3, r3
 800509e:	e008      	b.n	80050b2 <HAL_TIM_PWM_Start+0x6a>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	bf14      	ite	ne
 80050ac:	2301      	movne	r3, #1
 80050ae:	2300      	moveq	r3, #0
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d001      	beq.n	80050ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e059      	b.n	800516e <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d104      	bne.n	80050ca <HAL_TIM_PWM_Start+0x82>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2202      	movs	r2, #2
 80050c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050c8:	e013      	b.n	80050f2 <HAL_TIM_PWM_Start+0xaa>
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2b04      	cmp	r3, #4
 80050ce:	d104      	bne.n	80050da <HAL_TIM_PWM_Start+0x92>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2202      	movs	r2, #2
 80050d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050d8:	e00b      	b.n	80050f2 <HAL_TIM_PWM_Start+0xaa>
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2b08      	cmp	r3, #8
 80050de:	d104      	bne.n	80050ea <HAL_TIM_PWM_Start+0xa2>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2202      	movs	r2, #2
 80050e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050e8:	e003      	b.n	80050f2 <HAL_TIM_PWM_Start+0xaa>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2202      	movs	r2, #2
 80050ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2201      	movs	r2, #1
 80050f8:	6839      	ldr	r1, [r7, #0]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f000 fd56 	bl	8005bac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a1c      	ldr	r2, [pc, #112]	@ (8005178 <HAL_TIM_PWM_Start+0x130>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d107      	bne.n	800511a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005118:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a16      	ldr	r2, [pc, #88]	@ (8005178 <HAL_TIM_PWM_Start+0x130>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d009      	beq.n	8005138 <HAL_TIM_PWM_Start+0xf0>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800512c:	d004      	beq.n	8005138 <HAL_TIM_PWM_Start+0xf0>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a12      	ldr	r2, [pc, #72]	@ (800517c <HAL_TIM_PWM_Start+0x134>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d111      	bne.n	800515c <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f003 0307 	and.w	r3, r3, #7
 8005142:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2b06      	cmp	r3, #6
 8005148:	d010      	beq.n	800516c <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f042 0201 	orr.w	r2, r2, #1
 8005158:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800515a:	e007      	b.n	800516c <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f042 0201 	orr.w	r2, r2, #1
 800516a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	40012c00 	.word	0x40012c00
 800517c:	40000400 	.word	0x40000400

08005180 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d020      	beq.n	80051e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f003 0302 	and.w	r3, r3, #2
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d01b      	beq.n	80051e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f06f 0202 	mvn.w	r2, #2
 80051b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	f003 0303 	and.w	r3, r3, #3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d003      	beq.n	80051d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 fa5a 	bl	8005684 <HAL_TIM_IC_CaptureCallback>
 80051d0:	e005      	b.n	80051de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 fa4d 	bl	8005672 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 fa5c 	bl	8005696 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	f003 0304 	and.w	r3, r3, #4
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d020      	beq.n	8005230 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f003 0304 	and.w	r3, r3, #4
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d01b      	beq.n	8005230 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f06f 0204 	mvn.w	r2, #4
 8005200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2202      	movs	r2, #2
 8005206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005212:	2b00      	cmp	r3, #0
 8005214:	d003      	beq.n	800521e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 fa34 	bl	8005684 <HAL_TIM_IC_CaptureCallback>
 800521c:	e005      	b.n	800522a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 fa27 	bl	8005672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 fa36 	bl	8005696 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	f003 0308 	and.w	r3, r3, #8
 8005236:	2b00      	cmp	r3, #0
 8005238:	d020      	beq.n	800527c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f003 0308 	and.w	r3, r3, #8
 8005240:	2b00      	cmp	r3, #0
 8005242:	d01b      	beq.n	800527c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f06f 0208 	mvn.w	r2, #8
 800524c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2204      	movs	r2, #4
 8005252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	f003 0303 	and.w	r3, r3, #3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 fa0e 	bl	8005684 <HAL_TIM_IC_CaptureCallback>
 8005268:	e005      	b.n	8005276 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 fa01 	bl	8005672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 fa10 	bl	8005696 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	f003 0310 	and.w	r3, r3, #16
 8005282:	2b00      	cmp	r3, #0
 8005284:	d020      	beq.n	80052c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f003 0310 	and.w	r3, r3, #16
 800528c:	2b00      	cmp	r3, #0
 800528e:	d01b      	beq.n	80052c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f06f 0210 	mvn.w	r2, #16
 8005298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2208      	movs	r2, #8
 800529e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	69db      	ldr	r3, [r3, #28]
 80052a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f9e8 	bl	8005684 <HAL_TIM_IC_CaptureCallback>
 80052b4:	e005      	b.n	80052c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f9db 	bl	8005672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 f9ea 	bl	8005696 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00c      	beq.n	80052ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f003 0301 	and.w	r3, r3, #1
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d007      	beq.n	80052ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f06f 0201 	mvn.w	r2, #1
 80052e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f7fb ff02 	bl	80010f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00c      	beq.n	8005310 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d007      	beq.n	8005310 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 fcd3 	bl	8005cb6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00c      	beq.n	8005334 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005320:	2b00      	cmp	r3, #0
 8005322:	d007      	beq.n	8005334 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800532c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f7fb fef2 	bl	8001118 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	f003 0320 	and.w	r3, r3, #32
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00c      	beq.n	8005358 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f003 0320 	and.w	r3, r3, #32
 8005344:	2b00      	cmp	r3, #0
 8005346:	d007      	beq.n	8005358 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f06f 0220 	mvn.w	r2, #32
 8005350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 fca6 	bl	8005ca4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005358:	bf00      	nop
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b086      	sub	sp, #24
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800536c:	2300      	movs	r3, #0
 800536e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005376:	2b01      	cmp	r3, #1
 8005378:	d101      	bne.n	800537e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800537a:	2302      	movs	r3, #2
 800537c:	e0ae      	b.n	80054dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2b0c      	cmp	r3, #12
 800538a:	f200 809f 	bhi.w	80054cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800538e:	a201      	add	r2, pc, #4	@ (adr r2, 8005394 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005394:	080053c9 	.word	0x080053c9
 8005398:	080054cd 	.word	0x080054cd
 800539c:	080054cd 	.word	0x080054cd
 80053a0:	080054cd 	.word	0x080054cd
 80053a4:	08005409 	.word	0x08005409
 80053a8:	080054cd 	.word	0x080054cd
 80053ac:	080054cd 	.word	0x080054cd
 80053b0:	080054cd 	.word	0x080054cd
 80053b4:	0800544b 	.word	0x0800544b
 80053b8:	080054cd 	.word	0x080054cd
 80053bc:	080054cd 	.word	0x080054cd
 80053c0:	080054cd 	.word	0x080054cd
 80053c4:	0800548b 	.word	0x0800548b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68b9      	ldr	r1, [r7, #8]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 f9ce 	bl	8005770 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	699a      	ldr	r2, [r3, #24]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f042 0208 	orr.w	r2, r2, #8
 80053e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	699a      	ldr	r2, [r3, #24]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f022 0204 	bic.w	r2, r2, #4
 80053f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6999      	ldr	r1, [r3, #24]
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	691a      	ldr	r2, [r3, #16]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	430a      	orrs	r2, r1
 8005404:	619a      	str	r2, [r3, #24]
      break;
 8005406:	e064      	b.n	80054d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68b9      	ldr	r1, [r7, #8]
 800540e:	4618      	mov	r0, r3
 8005410:	f000 fa14 	bl	800583c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	699a      	ldr	r2, [r3, #24]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005422:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	699a      	ldr	r2, [r3, #24]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005432:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6999      	ldr	r1, [r3, #24]
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	021a      	lsls	r2, r3, #8
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	430a      	orrs	r2, r1
 8005446:	619a      	str	r2, [r3, #24]
      break;
 8005448:	e043      	b.n	80054d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68b9      	ldr	r1, [r7, #8]
 8005450:	4618      	mov	r0, r3
 8005452:	f000 fa5d 	bl	8005910 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	69da      	ldr	r2, [r3, #28]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f042 0208 	orr.w	r2, r2, #8
 8005464:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	69da      	ldr	r2, [r3, #28]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f022 0204 	bic.w	r2, r2, #4
 8005474:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	69d9      	ldr	r1, [r3, #28]
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	691a      	ldr	r2, [r3, #16]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	430a      	orrs	r2, r1
 8005486:	61da      	str	r2, [r3, #28]
      break;
 8005488:	e023      	b.n	80054d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68b9      	ldr	r1, [r7, #8]
 8005490:	4618      	mov	r0, r3
 8005492:	f000 faa7 	bl	80059e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	69da      	ldr	r2, [r3, #28]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	69da      	ldr	r2, [r3, #28]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	69d9      	ldr	r1, [r3, #28]
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	021a      	lsls	r2, r3, #8
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	430a      	orrs	r2, r1
 80054c8:	61da      	str	r2, [r3, #28]
      break;
 80054ca:	e002      	b.n	80054d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	75fb      	strb	r3, [r7, #23]
      break;
 80054d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80054da:	7dfb      	ldrb	r3, [r7, #23]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3718      	adds	r7, #24
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054ee:	2300      	movs	r3, #0
 80054f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d101      	bne.n	8005500 <HAL_TIM_ConfigClockSource+0x1c>
 80054fc:	2302      	movs	r3, #2
 80054fe:	e0b4      	b.n	800566a <HAL_TIM_ConfigClockSource+0x186>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2202      	movs	r2, #2
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800551e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005526:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005538:	d03e      	beq.n	80055b8 <HAL_TIM_ConfigClockSource+0xd4>
 800553a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800553e:	f200 8087 	bhi.w	8005650 <HAL_TIM_ConfigClockSource+0x16c>
 8005542:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005546:	f000 8086 	beq.w	8005656 <HAL_TIM_ConfigClockSource+0x172>
 800554a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800554e:	d87f      	bhi.n	8005650 <HAL_TIM_ConfigClockSource+0x16c>
 8005550:	2b70      	cmp	r3, #112	@ 0x70
 8005552:	d01a      	beq.n	800558a <HAL_TIM_ConfigClockSource+0xa6>
 8005554:	2b70      	cmp	r3, #112	@ 0x70
 8005556:	d87b      	bhi.n	8005650 <HAL_TIM_ConfigClockSource+0x16c>
 8005558:	2b60      	cmp	r3, #96	@ 0x60
 800555a:	d050      	beq.n	80055fe <HAL_TIM_ConfigClockSource+0x11a>
 800555c:	2b60      	cmp	r3, #96	@ 0x60
 800555e:	d877      	bhi.n	8005650 <HAL_TIM_ConfigClockSource+0x16c>
 8005560:	2b50      	cmp	r3, #80	@ 0x50
 8005562:	d03c      	beq.n	80055de <HAL_TIM_ConfigClockSource+0xfa>
 8005564:	2b50      	cmp	r3, #80	@ 0x50
 8005566:	d873      	bhi.n	8005650 <HAL_TIM_ConfigClockSource+0x16c>
 8005568:	2b40      	cmp	r3, #64	@ 0x40
 800556a:	d058      	beq.n	800561e <HAL_TIM_ConfigClockSource+0x13a>
 800556c:	2b40      	cmp	r3, #64	@ 0x40
 800556e:	d86f      	bhi.n	8005650 <HAL_TIM_ConfigClockSource+0x16c>
 8005570:	2b30      	cmp	r3, #48	@ 0x30
 8005572:	d064      	beq.n	800563e <HAL_TIM_ConfigClockSource+0x15a>
 8005574:	2b30      	cmp	r3, #48	@ 0x30
 8005576:	d86b      	bhi.n	8005650 <HAL_TIM_ConfigClockSource+0x16c>
 8005578:	2b20      	cmp	r3, #32
 800557a:	d060      	beq.n	800563e <HAL_TIM_ConfigClockSource+0x15a>
 800557c:	2b20      	cmp	r3, #32
 800557e:	d867      	bhi.n	8005650 <HAL_TIM_ConfigClockSource+0x16c>
 8005580:	2b00      	cmp	r3, #0
 8005582:	d05c      	beq.n	800563e <HAL_TIM_ConfigClockSource+0x15a>
 8005584:	2b10      	cmp	r3, #16
 8005586:	d05a      	beq.n	800563e <HAL_TIM_ConfigClockSource+0x15a>
 8005588:	e062      	b.n	8005650 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800559a:	f000 fae8 	bl	8005b6e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80055ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68ba      	ldr	r2, [r7, #8]
 80055b4:	609a      	str	r2, [r3, #8]
      break;
 80055b6:	e04f      	b.n	8005658 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055c8:	f000 fad1 	bl	8005b6e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689a      	ldr	r2, [r3, #8]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80055da:	609a      	str	r2, [r3, #8]
      break;
 80055dc:	e03c      	b.n	8005658 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ea:	461a      	mov	r2, r3
 80055ec:	f000 fa48 	bl	8005a80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2150      	movs	r1, #80	@ 0x50
 80055f6:	4618      	mov	r0, r3
 80055f8:	f000 fa9f 	bl	8005b3a <TIM_ITRx_SetConfig>
      break;
 80055fc:	e02c      	b.n	8005658 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800560a:	461a      	mov	r2, r3
 800560c:	f000 fa66 	bl	8005adc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2160      	movs	r1, #96	@ 0x60
 8005616:	4618      	mov	r0, r3
 8005618:	f000 fa8f 	bl	8005b3a <TIM_ITRx_SetConfig>
      break;
 800561c:	e01c      	b.n	8005658 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800562a:	461a      	mov	r2, r3
 800562c:	f000 fa28 	bl	8005a80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2140      	movs	r1, #64	@ 0x40
 8005636:	4618      	mov	r0, r3
 8005638:	f000 fa7f 	bl	8005b3a <TIM_ITRx_SetConfig>
      break;
 800563c:	e00c      	b.n	8005658 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4619      	mov	r1, r3
 8005648:	4610      	mov	r0, r2
 800564a:	f000 fa76 	bl	8005b3a <TIM_ITRx_SetConfig>
      break;
 800564e:	e003      	b.n	8005658 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	73fb      	strb	r3, [r7, #15]
      break;
 8005654:	e000      	b.n	8005658 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005656:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005668:	7bfb      	ldrb	r3, [r7, #15]
}
 800566a:	4618      	mov	r0, r3
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005672:	b480      	push	{r7}
 8005674:	b083      	sub	sp, #12
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800567a:	bf00      	nop
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	bc80      	pop	{r7}
 8005682:	4770      	bx	lr

08005684 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	bc80      	pop	{r7}
 8005694:	4770      	bx	lr

08005696 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005696:	b480      	push	{r7}
 8005698:	b083      	sub	sp, #12
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800569e:	bf00      	nop
 80056a0:	370c      	adds	r7, #12
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bc80      	pop	{r7}
 80056a6:	4770      	bx	lr

080056a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a2b      	ldr	r2, [pc, #172]	@ (8005768 <TIM_Base_SetConfig+0xc0>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d007      	beq.n	80056d0 <TIM_Base_SetConfig+0x28>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056c6:	d003      	beq.n	80056d0 <TIM_Base_SetConfig+0x28>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a28      	ldr	r2, [pc, #160]	@ (800576c <TIM_Base_SetConfig+0xc4>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d108      	bne.n	80056e2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	4313      	orrs	r3, r2
 80056e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a20      	ldr	r2, [pc, #128]	@ (8005768 <TIM_Base_SetConfig+0xc0>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d007      	beq.n	80056fa <TIM_Base_SetConfig+0x52>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056f0:	d003      	beq.n	80056fa <TIM_Base_SetConfig+0x52>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a1d      	ldr	r2, [pc, #116]	@ (800576c <TIM_Base_SetConfig+0xc4>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d108      	bne.n	800570c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005700:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	4313      	orrs	r3, r2
 800570a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	4313      	orrs	r3, r2
 8005718:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	689a      	ldr	r2, [r3, #8]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a0d      	ldr	r2, [pc, #52]	@ (8005768 <TIM_Base_SetConfig+0xc0>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d103      	bne.n	8005740 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	691a      	ldr	r2, [r3, #16]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b00      	cmp	r3, #0
 8005750:	d005      	beq.n	800575e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	f023 0201 	bic.w	r2, r3, #1
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	611a      	str	r2, [r3, #16]
  }
}
 800575e:	bf00      	nop
 8005760:	3714      	adds	r7, #20
 8005762:	46bd      	mov	sp, r7
 8005764:	bc80      	pop	{r7}
 8005766:	4770      	bx	lr
 8005768:	40012c00 	.word	0x40012c00
 800576c:	40000400 	.word	0x40000400

08005770 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005770:	b480      	push	{r7}
 8005772:	b087      	sub	sp, #28
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a1b      	ldr	r3, [r3, #32]
 8005784:	f023 0201 	bic.w	r2, r3, #1
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800579e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f023 0303 	bic.w	r3, r3, #3
 80057a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	f023 0302 	bic.w	r3, r3, #2
 80057b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a1c      	ldr	r2, [pc, #112]	@ (8005838 <TIM_OC1_SetConfig+0xc8>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d10c      	bne.n	80057e6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	f023 0308 	bic.w	r3, r3, #8
 80057d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	4313      	orrs	r3, r2
 80057dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	f023 0304 	bic.w	r3, r3, #4
 80057e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a13      	ldr	r2, [pc, #76]	@ (8005838 <TIM_OC1_SetConfig+0xc8>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d111      	bne.n	8005812 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	4313      	orrs	r3, r2
 8005806:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	4313      	orrs	r3, r2
 8005810:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	685a      	ldr	r2, [r3, #4]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	621a      	str	r2, [r3, #32]
}
 800582c:	bf00      	nop
 800582e:	371c      	adds	r7, #28
 8005830:	46bd      	mov	sp, r7
 8005832:	bc80      	pop	{r7}
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	40012c00 	.word	0x40012c00

0800583c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800583c:	b480      	push	{r7}
 800583e:	b087      	sub	sp, #28
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a1b      	ldr	r3, [r3, #32]
 800584a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a1b      	ldr	r3, [r3, #32]
 8005850:	f023 0210 	bic.w	r2, r3, #16
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800586a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005872:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	021b      	lsls	r3, r3, #8
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	4313      	orrs	r3, r2
 800587e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f023 0320 	bic.w	r3, r3, #32
 8005886:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	011b      	lsls	r3, r3, #4
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	4313      	orrs	r3, r2
 8005892:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a1d      	ldr	r2, [pc, #116]	@ (800590c <TIM_OC2_SetConfig+0xd0>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d10d      	bne.n	80058b8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	011b      	lsls	r3, r3, #4
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a14      	ldr	r2, [pc, #80]	@ (800590c <TIM_OC2_SetConfig+0xd0>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d113      	bne.n	80058e8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80058c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80058ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	695b      	ldr	r3, [r3, #20]
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	4313      	orrs	r3, r2
 80058da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685a      	ldr	r2, [r3, #4]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	621a      	str	r2, [r3, #32]
}
 8005902:	bf00      	nop
 8005904:	371c      	adds	r7, #28
 8005906:	46bd      	mov	sp, r7
 8005908:	bc80      	pop	{r7}
 800590a:	4770      	bx	lr
 800590c:	40012c00 	.word	0x40012c00

08005910 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005910:	b480      	push	{r7}
 8005912:	b087      	sub	sp, #28
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a1b      	ldr	r3, [r3, #32]
 8005924:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800593e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f023 0303 	bic.w	r3, r3, #3
 8005946:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	4313      	orrs	r3, r2
 8005950:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005958:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	021b      	lsls	r3, r3, #8
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	4313      	orrs	r3, r2
 8005964:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a1d      	ldr	r2, [pc, #116]	@ (80059e0 <TIM_OC3_SetConfig+0xd0>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d10d      	bne.n	800598a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005974:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	021b      	lsls	r3, r3, #8
 800597c:	697a      	ldr	r2, [r7, #20]
 800597e:	4313      	orrs	r3, r2
 8005980:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005988:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a14      	ldr	r2, [pc, #80]	@ (80059e0 <TIM_OC3_SetConfig+0xd0>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d113      	bne.n	80059ba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005998:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80059a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	011b      	lsls	r3, r3, #4
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	011b      	lsls	r3, r3, #4
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	685a      	ldr	r2, [r3, #4]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	621a      	str	r2, [r3, #32]
}
 80059d4:	bf00      	nop
 80059d6:	371c      	adds	r7, #28
 80059d8:	46bd      	mov	sp, r7
 80059da:	bc80      	pop	{r7}
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	40012c00 	.word	0x40012c00

080059e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b087      	sub	sp, #28
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a1b      	ldr	r3, [r3, #32]
 80059f8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	69db      	ldr	r3, [r3, #28]
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	021b      	lsls	r3, r3, #8
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	031b      	lsls	r3, r3, #12
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a0f      	ldr	r2, [pc, #60]	@ (8005a7c <TIM_OC4_SetConfig+0x98>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d109      	bne.n	8005a58 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	019b      	lsls	r3, r3, #6
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	685a      	ldr	r2, [r3, #4]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	621a      	str	r2, [r3, #32]
}
 8005a72:	bf00      	nop
 8005a74:	371c      	adds	r7, #28
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bc80      	pop	{r7}
 8005a7a:	4770      	bx	lr
 8005a7c:	40012c00 	.word	0x40012c00

08005a80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b087      	sub	sp, #28
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6a1b      	ldr	r3, [r3, #32]
 8005a90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	f023 0201 	bic.w	r2, r3, #1
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005aaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	011b      	lsls	r3, r3, #4
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	f023 030a 	bic.w	r3, r3, #10
 8005abc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	621a      	str	r2, [r3, #32]
}
 8005ad2:	bf00      	nop
 8005ad4:	371c      	adds	r7, #28
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bc80      	pop	{r7}
 8005ada:	4770      	bx	lr

08005adc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b087      	sub	sp, #28
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6a1b      	ldr	r3, [r3, #32]
 8005aec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	f023 0210 	bic.w	r2, r3, #16
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005b06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	031b      	lsls	r3, r3, #12
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005b18:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	011b      	lsls	r3, r3, #4
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	693a      	ldr	r2, [r7, #16]
 8005b28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	697a      	ldr	r2, [r7, #20]
 8005b2e:	621a      	str	r2, [r3, #32]
}
 8005b30:	bf00      	nop
 8005b32:	371c      	adds	r7, #28
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bc80      	pop	{r7}
 8005b38:	4770      	bx	lr

08005b3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	b085      	sub	sp, #20
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
 8005b42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b52:	683a      	ldr	r2, [r7, #0]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	f043 0307 	orr.w	r3, r3, #7
 8005b5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	609a      	str	r2, [r3, #8]
}
 8005b64:	bf00      	nop
 8005b66:	3714      	adds	r7, #20
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bc80      	pop	{r7}
 8005b6c:	4770      	bx	lr

08005b6e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b087      	sub	sp, #28
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	60f8      	str	r0, [r7, #12]
 8005b76:	60b9      	str	r1, [r7, #8]
 8005b78:	607a      	str	r2, [r7, #4]
 8005b7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b88:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	021a      	lsls	r2, r3, #8
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	431a      	orrs	r2, r3
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	609a      	str	r2, [r3, #8]
}
 8005ba2:	bf00      	nop
 8005ba4:	371c      	adds	r7, #28
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bc80      	pop	{r7}
 8005baa:	4770      	bx	lr

08005bac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b087      	sub	sp, #28
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	f003 031f 	and.w	r3, r3, #31
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6a1a      	ldr	r2, [r3, #32]
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	43db      	mvns	r3, r3
 8005bce:	401a      	ands	r2, r3
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6a1a      	ldr	r2, [r3, #32]
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	f003 031f 	and.w	r3, r3, #31
 8005bde:	6879      	ldr	r1, [r7, #4]
 8005be0:	fa01 f303 	lsl.w	r3, r1, r3
 8005be4:	431a      	orrs	r2, r3
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	621a      	str	r2, [r3, #32]
}
 8005bea:	bf00      	nop
 8005bec:	371c      	adds	r7, #28
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bc80      	pop	{r7}
 8005bf2:	4770      	bx	lr

08005bf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b085      	sub	sp, #20
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d101      	bne.n	8005c0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c08:	2302      	movs	r3, #2
 8005c0a:	e041      	b.n	8005c90 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2202      	movs	r2, #2
 8005c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a14      	ldr	r2, [pc, #80]	@ (8005c9c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d009      	beq.n	8005c64 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c58:	d004      	beq.n	8005c64 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a10      	ldr	r2, [pc, #64]	@ (8005ca0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d10c      	bne.n	8005c7e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	68ba      	ldr	r2, [r7, #8]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3714      	adds	r7, #20
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bc80      	pop	{r7}
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	40012c00 	.word	0x40012c00
 8005ca0:	40000400 	.word	0x40000400

08005ca4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bc80      	pop	{r7}
 8005cb4:	4770      	bx	lr

08005cb6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cb6:	b480      	push	{r7}
 8005cb8:	b083      	sub	sp, #12
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cbe:	bf00      	nop
 8005cc0:	370c      	adds	r7, #12
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bc80      	pop	{r7}
 8005cc6:	4770      	bx	lr

08005cc8 <siprintf>:
 8005cc8:	b40e      	push	{r1, r2, r3}
 8005cca:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005cce:	b500      	push	{lr}
 8005cd0:	b09c      	sub	sp, #112	@ 0x70
 8005cd2:	ab1d      	add	r3, sp, #116	@ 0x74
 8005cd4:	9002      	str	r0, [sp, #8]
 8005cd6:	9006      	str	r0, [sp, #24]
 8005cd8:	9107      	str	r1, [sp, #28]
 8005cda:	9104      	str	r1, [sp, #16]
 8005cdc:	4808      	ldr	r0, [pc, #32]	@ (8005d00 <siprintf+0x38>)
 8005cde:	4909      	ldr	r1, [pc, #36]	@ (8005d04 <siprintf+0x3c>)
 8005ce0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ce4:	9105      	str	r1, [sp, #20]
 8005ce6:	6800      	ldr	r0, [r0, #0]
 8005ce8:	a902      	add	r1, sp, #8
 8005cea:	9301      	str	r3, [sp, #4]
 8005cec:	f000 f992 	bl	8006014 <_svfiprintf_r>
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	9b02      	ldr	r3, [sp, #8]
 8005cf4:	701a      	strb	r2, [r3, #0]
 8005cf6:	b01c      	add	sp, #112	@ 0x70
 8005cf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cfc:	b003      	add	sp, #12
 8005cfe:	4770      	bx	lr
 8005d00:	20000028 	.word	0x20000028
 8005d04:	ffff0208 	.word	0xffff0208

08005d08 <memset>:
 8005d08:	4603      	mov	r3, r0
 8005d0a:	4402      	add	r2, r0
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d100      	bne.n	8005d12 <memset+0xa>
 8005d10:	4770      	bx	lr
 8005d12:	f803 1b01 	strb.w	r1, [r3], #1
 8005d16:	e7f9      	b.n	8005d0c <memset+0x4>

08005d18 <__errno>:
 8005d18:	4b01      	ldr	r3, [pc, #4]	@ (8005d20 <__errno+0x8>)
 8005d1a:	6818      	ldr	r0, [r3, #0]
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	20000028 	.word	0x20000028

08005d24 <__libc_init_array>:
 8005d24:	b570      	push	{r4, r5, r6, lr}
 8005d26:	2600      	movs	r6, #0
 8005d28:	4d0c      	ldr	r5, [pc, #48]	@ (8005d5c <__libc_init_array+0x38>)
 8005d2a:	4c0d      	ldr	r4, [pc, #52]	@ (8005d60 <__libc_init_array+0x3c>)
 8005d2c:	1b64      	subs	r4, r4, r5
 8005d2e:	10a4      	asrs	r4, r4, #2
 8005d30:	42a6      	cmp	r6, r4
 8005d32:	d109      	bne.n	8005d48 <__libc_init_array+0x24>
 8005d34:	f000 fe62 	bl	80069fc <_init>
 8005d38:	2600      	movs	r6, #0
 8005d3a:	4d0a      	ldr	r5, [pc, #40]	@ (8005d64 <__libc_init_array+0x40>)
 8005d3c:	4c0a      	ldr	r4, [pc, #40]	@ (8005d68 <__libc_init_array+0x44>)
 8005d3e:	1b64      	subs	r4, r4, r5
 8005d40:	10a4      	asrs	r4, r4, #2
 8005d42:	42a6      	cmp	r6, r4
 8005d44:	d105      	bne.n	8005d52 <__libc_init_array+0x2e>
 8005d46:	bd70      	pop	{r4, r5, r6, pc}
 8005d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d4c:	4798      	blx	r3
 8005d4e:	3601      	adds	r6, #1
 8005d50:	e7ee      	b.n	8005d30 <__libc_init_array+0xc>
 8005d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d56:	4798      	blx	r3
 8005d58:	3601      	adds	r6, #1
 8005d5a:	e7f2      	b.n	8005d42 <__libc_init_array+0x1e>
 8005d5c:	080077f8 	.word	0x080077f8
 8005d60:	080077f8 	.word	0x080077f8
 8005d64:	080077f8 	.word	0x080077f8
 8005d68:	080077fc 	.word	0x080077fc

08005d6c <__retarget_lock_acquire_recursive>:
 8005d6c:	4770      	bx	lr

08005d6e <__retarget_lock_release_recursive>:
 8005d6e:	4770      	bx	lr

08005d70 <_free_r>:
 8005d70:	b538      	push	{r3, r4, r5, lr}
 8005d72:	4605      	mov	r5, r0
 8005d74:	2900      	cmp	r1, #0
 8005d76:	d040      	beq.n	8005dfa <_free_r+0x8a>
 8005d78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d7c:	1f0c      	subs	r4, r1, #4
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	bfb8      	it	lt
 8005d82:	18e4      	addlt	r4, r4, r3
 8005d84:	f000 f8de 	bl	8005f44 <__malloc_lock>
 8005d88:	4a1c      	ldr	r2, [pc, #112]	@ (8005dfc <_free_r+0x8c>)
 8005d8a:	6813      	ldr	r3, [r2, #0]
 8005d8c:	b933      	cbnz	r3, 8005d9c <_free_r+0x2c>
 8005d8e:	6063      	str	r3, [r4, #4]
 8005d90:	6014      	str	r4, [r2, #0]
 8005d92:	4628      	mov	r0, r5
 8005d94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d98:	f000 b8da 	b.w	8005f50 <__malloc_unlock>
 8005d9c:	42a3      	cmp	r3, r4
 8005d9e:	d908      	bls.n	8005db2 <_free_r+0x42>
 8005da0:	6820      	ldr	r0, [r4, #0]
 8005da2:	1821      	adds	r1, r4, r0
 8005da4:	428b      	cmp	r3, r1
 8005da6:	bf01      	itttt	eq
 8005da8:	6819      	ldreq	r1, [r3, #0]
 8005daa:	685b      	ldreq	r3, [r3, #4]
 8005dac:	1809      	addeq	r1, r1, r0
 8005dae:	6021      	streq	r1, [r4, #0]
 8005db0:	e7ed      	b.n	8005d8e <_free_r+0x1e>
 8005db2:	461a      	mov	r2, r3
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	b10b      	cbz	r3, 8005dbc <_free_r+0x4c>
 8005db8:	42a3      	cmp	r3, r4
 8005dba:	d9fa      	bls.n	8005db2 <_free_r+0x42>
 8005dbc:	6811      	ldr	r1, [r2, #0]
 8005dbe:	1850      	adds	r0, r2, r1
 8005dc0:	42a0      	cmp	r0, r4
 8005dc2:	d10b      	bne.n	8005ddc <_free_r+0x6c>
 8005dc4:	6820      	ldr	r0, [r4, #0]
 8005dc6:	4401      	add	r1, r0
 8005dc8:	1850      	adds	r0, r2, r1
 8005dca:	4283      	cmp	r3, r0
 8005dcc:	6011      	str	r1, [r2, #0]
 8005dce:	d1e0      	bne.n	8005d92 <_free_r+0x22>
 8005dd0:	6818      	ldr	r0, [r3, #0]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	4408      	add	r0, r1
 8005dd6:	6010      	str	r0, [r2, #0]
 8005dd8:	6053      	str	r3, [r2, #4]
 8005dda:	e7da      	b.n	8005d92 <_free_r+0x22>
 8005ddc:	d902      	bls.n	8005de4 <_free_r+0x74>
 8005dde:	230c      	movs	r3, #12
 8005de0:	602b      	str	r3, [r5, #0]
 8005de2:	e7d6      	b.n	8005d92 <_free_r+0x22>
 8005de4:	6820      	ldr	r0, [r4, #0]
 8005de6:	1821      	adds	r1, r4, r0
 8005de8:	428b      	cmp	r3, r1
 8005dea:	bf01      	itttt	eq
 8005dec:	6819      	ldreq	r1, [r3, #0]
 8005dee:	685b      	ldreq	r3, [r3, #4]
 8005df0:	1809      	addeq	r1, r1, r0
 8005df2:	6021      	streq	r1, [r4, #0]
 8005df4:	6063      	str	r3, [r4, #4]
 8005df6:	6054      	str	r4, [r2, #4]
 8005df8:	e7cb      	b.n	8005d92 <_free_r+0x22>
 8005dfa:	bd38      	pop	{r3, r4, r5, pc}
 8005dfc:	20000798 	.word	0x20000798

08005e00 <sbrk_aligned>:
 8005e00:	b570      	push	{r4, r5, r6, lr}
 8005e02:	4e0f      	ldr	r6, [pc, #60]	@ (8005e40 <sbrk_aligned+0x40>)
 8005e04:	460c      	mov	r4, r1
 8005e06:	6831      	ldr	r1, [r6, #0]
 8005e08:	4605      	mov	r5, r0
 8005e0a:	b911      	cbnz	r1, 8005e12 <sbrk_aligned+0x12>
 8005e0c:	f000 fbaa 	bl	8006564 <_sbrk_r>
 8005e10:	6030      	str	r0, [r6, #0]
 8005e12:	4621      	mov	r1, r4
 8005e14:	4628      	mov	r0, r5
 8005e16:	f000 fba5 	bl	8006564 <_sbrk_r>
 8005e1a:	1c43      	adds	r3, r0, #1
 8005e1c:	d103      	bne.n	8005e26 <sbrk_aligned+0x26>
 8005e1e:	f04f 34ff 	mov.w	r4, #4294967295
 8005e22:	4620      	mov	r0, r4
 8005e24:	bd70      	pop	{r4, r5, r6, pc}
 8005e26:	1cc4      	adds	r4, r0, #3
 8005e28:	f024 0403 	bic.w	r4, r4, #3
 8005e2c:	42a0      	cmp	r0, r4
 8005e2e:	d0f8      	beq.n	8005e22 <sbrk_aligned+0x22>
 8005e30:	1a21      	subs	r1, r4, r0
 8005e32:	4628      	mov	r0, r5
 8005e34:	f000 fb96 	bl	8006564 <_sbrk_r>
 8005e38:	3001      	adds	r0, #1
 8005e3a:	d1f2      	bne.n	8005e22 <sbrk_aligned+0x22>
 8005e3c:	e7ef      	b.n	8005e1e <sbrk_aligned+0x1e>
 8005e3e:	bf00      	nop
 8005e40:	20000794 	.word	0x20000794

08005e44 <_malloc_r>:
 8005e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e48:	1ccd      	adds	r5, r1, #3
 8005e4a:	f025 0503 	bic.w	r5, r5, #3
 8005e4e:	3508      	adds	r5, #8
 8005e50:	2d0c      	cmp	r5, #12
 8005e52:	bf38      	it	cc
 8005e54:	250c      	movcc	r5, #12
 8005e56:	2d00      	cmp	r5, #0
 8005e58:	4606      	mov	r6, r0
 8005e5a:	db01      	blt.n	8005e60 <_malloc_r+0x1c>
 8005e5c:	42a9      	cmp	r1, r5
 8005e5e:	d904      	bls.n	8005e6a <_malloc_r+0x26>
 8005e60:	230c      	movs	r3, #12
 8005e62:	6033      	str	r3, [r6, #0]
 8005e64:	2000      	movs	r0, #0
 8005e66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005f40 <_malloc_r+0xfc>
 8005e6e:	f000 f869 	bl	8005f44 <__malloc_lock>
 8005e72:	f8d8 3000 	ldr.w	r3, [r8]
 8005e76:	461c      	mov	r4, r3
 8005e78:	bb44      	cbnz	r4, 8005ecc <_malloc_r+0x88>
 8005e7a:	4629      	mov	r1, r5
 8005e7c:	4630      	mov	r0, r6
 8005e7e:	f7ff ffbf 	bl	8005e00 <sbrk_aligned>
 8005e82:	1c43      	adds	r3, r0, #1
 8005e84:	4604      	mov	r4, r0
 8005e86:	d158      	bne.n	8005f3a <_malloc_r+0xf6>
 8005e88:	f8d8 4000 	ldr.w	r4, [r8]
 8005e8c:	4627      	mov	r7, r4
 8005e8e:	2f00      	cmp	r7, #0
 8005e90:	d143      	bne.n	8005f1a <_malloc_r+0xd6>
 8005e92:	2c00      	cmp	r4, #0
 8005e94:	d04b      	beq.n	8005f2e <_malloc_r+0xea>
 8005e96:	6823      	ldr	r3, [r4, #0]
 8005e98:	4639      	mov	r1, r7
 8005e9a:	4630      	mov	r0, r6
 8005e9c:	eb04 0903 	add.w	r9, r4, r3
 8005ea0:	f000 fb60 	bl	8006564 <_sbrk_r>
 8005ea4:	4581      	cmp	r9, r0
 8005ea6:	d142      	bne.n	8005f2e <_malloc_r+0xea>
 8005ea8:	6821      	ldr	r1, [r4, #0]
 8005eaa:	4630      	mov	r0, r6
 8005eac:	1a6d      	subs	r5, r5, r1
 8005eae:	4629      	mov	r1, r5
 8005eb0:	f7ff ffa6 	bl	8005e00 <sbrk_aligned>
 8005eb4:	3001      	adds	r0, #1
 8005eb6:	d03a      	beq.n	8005f2e <_malloc_r+0xea>
 8005eb8:	6823      	ldr	r3, [r4, #0]
 8005eba:	442b      	add	r3, r5
 8005ebc:	6023      	str	r3, [r4, #0]
 8005ebe:	f8d8 3000 	ldr.w	r3, [r8]
 8005ec2:	685a      	ldr	r2, [r3, #4]
 8005ec4:	bb62      	cbnz	r2, 8005f20 <_malloc_r+0xdc>
 8005ec6:	f8c8 7000 	str.w	r7, [r8]
 8005eca:	e00f      	b.n	8005eec <_malloc_r+0xa8>
 8005ecc:	6822      	ldr	r2, [r4, #0]
 8005ece:	1b52      	subs	r2, r2, r5
 8005ed0:	d420      	bmi.n	8005f14 <_malloc_r+0xd0>
 8005ed2:	2a0b      	cmp	r2, #11
 8005ed4:	d917      	bls.n	8005f06 <_malloc_r+0xc2>
 8005ed6:	1961      	adds	r1, r4, r5
 8005ed8:	42a3      	cmp	r3, r4
 8005eda:	6025      	str	r5, [r4, #0]
 8005edc:	bf18      	it	ne
 8005ede:	6059      	strne	r1, [r3, #4]
 8005ee0:	6863      	ldr	r3, [r4, #4]
 8005ee2:	bf08      	it	eq
 8005ee4:	f8c8 1000 	streq.w	r1, [r8]
 8005ee8:	5162      	str	r2, [r4, r5]
 8005eea:	604b      	str	r3, [r1, #4]
 8005eec:	4630      	mov	r0, r6
 8005eee:	f000 f82f 	bl	8005f50 <__malloc_unlock>
 8005ef2:	f104 000b 	add.w	r0, r4, #11
 8005ef6:	1d23      	adds	r3, r4, #4
 8005ef8:	f020 0007 	bic.w	r0, r0, #7
 8005efc:	1ac2      	subs	r2, r0, r3
 8005efe:	bf1c      	itt	ne
 8005f00:	1a1b      	subne	r3, r3, r0
 8005f02:	50a3      	strne	r3, [r4, r2]
 8005f04:	e7af      	b.n	8005e66 <_malloc_r+0x22>
 8005f06:	6862      	ldr	r2, [r4, #4]
 8005f08:	42a3      	cmp	r3, r4
 8005f0a:	bf0c      	ite	eq
 8005f0c:	f8c8 2000 	streq.w	r2, [r8]
 8005f10:	605a      	strne	r2, [r3, #4]
 8005f12:	e7eb      	b.n	8005eec <_malloc_r+0xa8>
 8005f14:	4623      	mov	r3, r4
 8005f16:	6864      	ldr	r4, [r4, #4]
 8005f18:	e7ae      	b.n	8005e78 <_malloc_r+0x34>
 8005f1a:	463c      	mov	r4, r7
 8005f1c:	687f      	ldr	r7, [r7, #4]
 8005f1e:	e7b6      	b.n	8005e8e <_malloc_r+0x4a>
 8005f20:	461a      	mov	r2, r3
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	42a3      	cmp	r3, r4
 8005f26:	d1fb      	bne.n	8005f20 <_malloc_r+0xdc>
 8005f28:	2300      	movs	r3, #0
 8005f2a:	6053      	str	r3, [r2, #4]
 8005f2c:	e7de      	b.n	8005eec <_malloc_r+0xa8>
 8005f2e:	230c      	movs	r3, #12
 8005f30:	4630      	mov	r0, r6
 8005f32:	6033      	str	r3, [r6, #0]
 8005f34:	f000 f80c 	bl	8005f50 <__malloc_unlock>
 8005f38:	e794      	b.n	8005e64 <_malloc_r+0x20>
 8005f3a:	6005      	str	r5, [r0, #0]
 8005f3c:	e7d6      	b.n	8005eec <_malloc_r+0xa8>
 8005f3e:	bf00      	nop
 8005f40:	20000798 	.word	0x20000798

08005f44 <__malloc_lock>:
 8005f44:	4801      	ldr	r0, [pc, #4]	@ (8005f4c <__malloc_lock+0x8>)
 8005f46:	f7ff bf11 	b.w	8005d6c <__retarget_lock_acquire_recursive>
 8005f4a:	bf00      	nop
 8005f4c:	20000790 	.word	0x20000790

08005f50 <__malloc_unlock>:
 8005f50:	4801      	ldr	r0, [pc, #4]	@ (8005f58 <__malloc_unlock+0x8>)
 8005f52:	f7ff bf0c 	b.w	8005d6e <__retarget_lock_release_recursive>
 8005f56:	bf00      	nop
 8005f58:	20000790 	.word	0x20000790

08005f5c <__ssputs_r>:
 8005f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f60:	461f      	mov	r7, r3
 8005f62:	688e      	ldr	r6, [r1, #8]
 8005f64:	4682      	mov	sl, r0
 8005f66:	42be      	cmp	r6, r7
 8005f68:	460c      	mov	r4, r1
 8005f6a:	4690      	mov	r8, r2
 8005f6c:	680b      	ldr	r3, [r1, #0]
 8005f6e:	d82d      	bhi.n	8005fcc <__ssputs_r+0x70>
 8005f70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005f74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005f78:	d026      	beq.n	8005fc8 <__ssputs_r+0x6c>
 8005f7a:	6965      	ldr	r5, [r4, #20]
 8005f7c:	6909      	ldr	r1, [r1, #16]
 8005f7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f82:	eba3 0901 	sub.w	r9, r3, r1
 8005f86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f8a:	1c7b      	adds	r3, r7, #1
 8005f8c:	444b      	add	r3, r9
 8005f8e:	106d      	asrs	r5, r5, #1
 8005f90:	429d      	cmp	r5, r3
 8005f92:	bf38      	it	cc
 8005f94:	461d      	movcc	r5, r3
 8005f96:	0553      	lsls	r3, r2, #21
 8005f98:	d527      	bpl.n	8005fea <__ssputs_r+0x8e>
 8005f9a:	4629      	mov	r1, r5
 8005f9c:	f7ff ff52 	bl	8005e44 <_malloc_r>
 8005fa0:	4606      	mov	r6, r0
 8005fa2:	b360      	cbz	r0, 8005ffe <__ssputs_r+0xa2>
 8005fa4:	464a      	mov	r2, r9
 8005fa6:	6921      	ldr	r1, [r4, #16]
 8005fa8:	f000 fafa 	bl	80065a0 <memcpy>
 8005fac:	89a3      	ldrh	r3, [r4, #12]
 8005fae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005fb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fb6:	81a3      	strh	r3, [r4, #12]
 8005fb8:	6126      	str	r6, [r4, #16]
 8005fba:	444e      	add	r6, r9
 8005fbc:	6026      	str	r6, [r4, #0]
 8005fbe:	463e      	mov	r6, r7
 8005fc0:	6165      	str	r5, [r4, #20]
 8005fc2:	eba5 0509 	sub.w	r5, r5, r9
 8005fc6:	60a5      	str	r5, [r4, #8]
 8005fc8:	42be      	cmp	r6, r7
 8005fca:	d900      	bls.n	8005fce <__ssputs_r+0x72>
 8005fcc:	463e      	mov	r6, r7
 8005fce:	4632      	mov	r2, r6
 8005fd0:	4641      	mov	r1, r8
 8005fd2:	6820      	ldr	r0, [r4, #0]
 8005fd4:	f000 faac 	bl	8006530 <memmove>
 8005fd8:	2000      	movs	r0, #0
 8005fda:	68a3      	ldr	r3, [r4, #8]
 8005fdc:	1b9b      	subs	r3, r3, r6
 8005fde:	60a3      	str	r3, [r4, #8]
 8005fe0:	6823      	ldr	r3, [r4, #0]
 8005fe2:	4433      	add	r3, r6
 8005fe4:	6023      	str	r3, [r4, #0]
 8005fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fea:	462a      	mov	r2, r5
 8005fec:	f000 fae6 	bl	80065bc <_realloc_r>
 8005ff0:	4606      	mov	r6, r0
 8005ff2:	2800      	cmp	r0, #0
 8005ff4:	d1e0      	bne.n	8005fb8 <__ssputs_r+0x5c>
 8005ff6:	4650      	mov	r0, sl
 8005ff8:	6921      	ldr	r1, [r4, #16]
 8005ffa:	f7ff feb9 	bl	8005d70 <_free_r>
 8005ffe:	230c      	movs	r3, #12
 8006000:	f8ca 3000 	str.w	r3, [sl]
 8006004:	89a3      	ldrh	r3, [r4, #12]
 8006006:	f04f 30ff 	mov.w	r0, #4294967295
 800600a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800600e:	81a3      	strh	r3, [r4, #12]
 8006010:	e7e9      	b.n	8005fe6 <__ssputs_r+0x8a>
	...

08006014 <_svfiprintf_r>:
 8006014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006018:	4698      	mov	r8, r3
 800601a:	898b      	ldrh	r3, [r1, #12]
 800601c:	4607      	mov	r7, r0
 800601e:	061b      	lsls	r3, r3, #24
 8006020:	460d      	mov	r5, r1
 8006022:	4614      	mov	r4, r2
 8006024:	b09d      	sub	sp, #116	@ 0x74
 8006026:	d510      	bpl.n	800604a <_svfiprintf_r+0x36>
 8006028:	690b      	ldr	r3, [r1, #16]
 800602a:	b973      	cbnz	r3, 800604a <_svfiprintf_r+0x36>
 800602c:	2140      	movs	r1, #64	@ 0x40
 800602e:	f7ff ff09 	bl	8005e44 <_malloc_r>
 8006032:	6028      	str	r0, [r5, #0]
 8006034:	6128      	str	r0, [r5, #16]
 8006036:	b930      	cbnz	r0, 8006046 <_svfiprintf_r+0x32>
 8006038:	230c      	movs	r3, #12
 800603a:	603b      	str	r3, [r7, #0]
 800603c:	f04f 30ff 	mov.w	r0, #4294967295
 8006040:	b01d      	add	sp, #116	@ 0x74
 8006042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006046:	2340      	movs	r3, #64	@ 0x40
 8006048:	616b      	str	r3, [r5, #20]
 800604a:	2300      	movs	r3, #0
 800604c:	9309      	str	r3, [sp, #36]	@ 0x24
 800604e:	2320      	movs	r3, #32
 8006050:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006054:	2330      	movs	r3, #48	@ 0x30
 8006056:	f04f 0901 	mov.w	r9, #1
 800605a:	f8cd 800c 	str.w	r8, [sp, #12]
 800605e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80061f8 <_svfiprintf_r+0x1e4>
 8006062:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006066:	4623      	mov	r3, r4
 8006068:	469a      	mov	sl, r3
 800606a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800606e:	b10a      	cbz	r2, 8006074 <_svfiprintf_r+0x60>
 8006070:	2a25      	cmp	r2, #37	@ 0x25
 8006072:	d1f9      	bne.n	8006068 <_svfiprintf_r+0x54>
 8006074:	ebba 0b04 	subs.w	fp, sl, r4
 8006078:	d00b      	beq.n	8006092 <_svfiprintf_r+0x7e>
 800607a:	465b      	mov	r3, fp
 800607c:	4622      	mov	r2, r4
 800607e:	4629      	mov	r1, r5
 8006080:	4638      	mov	r0, r7
 8006082:	f7ff ff6b 	bl	8005f5c <__ssputs_r>
 8006086:	3001      	adds	r0, #1
 8006088:	f000 80a7 	beq.w	80061da <_svfiprintf_r+0x1c6>
 800608c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800608e:	445a      	add	r2, fp
 8006090:	9209      	str	r2, [sp, #36]	@ 0x24
 8006092:	f89a 3000 	ldrb.w	r3, [sl]
 8006096:	2b00      	cmp	r3, #0
 8006098:	f000 809f 	beq.w	80061da <_svfiprintf_r+0x1c6>
 800609c:	2300      	movs	r3, #0
 800609e:	f04f 32ff 	mov.w	r2, #4294967295
 80060a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060a6:	f10a 0a01 	add.w	sl, sl, #1
 80060aa:	9304      	str	r3, [sp, #16]
 80060ac:	9307      	str	r3, [sp, #28]
 80060ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80060b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80060b4:	4654      	mov	r4, sl
 80060b6:	2205      	movs	r2, #5
 80060b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060bc:	484e      	ldr	r0, [pc, #312]	@ (80061f8 <_svfiprintf_r+0x1e4>)
 80060be:	f000 fa61 	bl	8006584 <memchr>
 80060c2:	9a04      	ldr	r2, [sp, #16]
 80060c4:	b9d8      	cbnz	r0, 80060fe <_svfiprintf_r+0xea>
 80060c6:	06d0      	lsls	r0, r2, #27
 80060c8:	bf44      	itt	mi
 80060ca:	2320      	movmi	r3, #32
 80060cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80060d0:	0711      	lsls	r1, r2, #28
 80060d2:	bf44      	itt	mi
 80060d4:	232b      	movmi	r3, #43	@ 0x2b
 80060d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80060da:	f89a 3000 	ldrb.w	r3, [sl]
 80060de:	2b2a      	cmp	r3, #42	@ 0x2a
 80060e0:	d015      	beq.n	800610e <_svfiprintf_r+0xfa>
 80060e2:	4654      	mov	r4, sl
 80060e4:	2000      	movs	r0, #0
 80060e6:	f04f 0c0a 	mov.w	ip, #10
 80060ea:	9a07      	ldr	r2, [sp, #28]
 80060ec:	4621      	mov	r1, r4
 80060ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060f2:	3b30      	subs	r3, #48	@ 0x30
 80060f4:	2b09      	cmp	r3, #9
 80060f6:	d94b      	bls.n	8006190 <_svfiprintf_r+0x17c>
 80060f8:	b1b0      	cbz	r0, 8006128 <_svfiprintf_r+0x114>
 80060fa:	9207      	str	r2, [sp, #28]
 80060fc:	e014      	b.n	8006128 <_svfiprintf_r+0x114>
 80060fe:	eba0 0308 	sub.w	r3, r0, r8
 8006102:	fa09 f303 	lsl.w	r3, r9, r3
 8006106:	4313      	orrs	r3, r2
 8006108:	46a2      	mov	sl, r4
 800610a:	9304      	str	r3, [sp, #16]
 800610c:	e7d2      	b.n	80060b4 <_svfiprintf_r+0xa0>
 800610e:	9b03      	ldr	r3, [sp, #12]
 8006110:	1d19      	adds	r1, r3, #4
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	9103      	str	r1, [sp, #12]
 8006116:	2b00      	cmp	r3, #0
 8006118:	bfbb      	ittet	lt
 800611a:	425b      	neglt	r3, r3
 800611c:	f042 0202 	orrlt.w	r2, r2, #2
 8006120:	9307      	strge	r3, [sp, #28]
 8006122:	9307      	strlt	r3, [sp, #28]
 8006124:	bfb8      	it	lt
 8006126:	9204      	strlt	r2, [sp, #16]
 8006128:	7823      	ldrb	r3, [r4, #0]
 800612a:	2b2e      	cmp	r3, #46	@ 0x2e
 800612c:	d10a      	bne.n	8006144 <_svfiprintf_r+0x130>
 800612e:	7863      	ldrb	r3, [r4, #1]
 8006130:	2b2a      	cmp	r3, #42	@ 0x2a
 8006132:	d132      	bne.n	800619a <_svfiprintf_r+0x186>
 8006134:	9b03      	ldr	r3, [sp, #12]
 8006136:	3402      	adds	r4, #2
 8006138:	1d1a      	adds	r2, r3, #4
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	9203      	str	r2, [sp, #12]
 800613e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006142:	9305      	str	r3, [sp, #20]
 8006144:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80061fc <_svfiprintf_r+0x1e8>
 8006148:	2203      	movs	r2, #3
 800614a:	4650      	mov	r0, sl
 800614c:	7821      	ldrb	r1, [r4, #0]
 800614e:	f000 fa19 	bl	8006584 <memchr>
 8006152:	b138      	cbz	r0, 8006164 <_svfiprintf_r+0x150>
 8006154:	2240      	movs	r2, #64	@ 0x40
 8006156:	9b04      	ldr	r3, [sp, #16]
 8006158:	eba0 000a 	sub.w	r0, r0, sl
 800615c:	4082      	lsls	r2, r0
 800615e:	4313      	orrs	r3, r2
 8006160:	3401      	adds	r4, #1
 8006162:	9304      	str	r3, [sp, #16]
 8006164:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006168:	2206      	movs	r2, #6
 800616a:	4825      	ldr	r0, [pc, #148]	@ (8006200 <_svfiprintf_r+0x1ec>)
 800616c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006170:	f000 fa08 	bl	8006584 <memchr>
 8006174:	2800      	cmp	r0, #0
 8006176:	d036      	beq.n	80061e6 <_svfiprintf_r+0x1d2>
 8006178:	4b22      	ldr	r3, [pc, #136]	@ (8006204 <_svfiprintf_r+0x1f0>)
 800617a:	bb1b      	cbnz	r3, 80061c4 <_svfiprintf_r+0x1b0>
 800617c:	9b03      	ldr	r3, [sp, #12]
 800617e:	3307      	adds	r3, #7
 8006180:	f023 0307 	bic.w	r3, r3, #7
 8006184:	3308      	adds	r3, #8
 8006186:	9303      	str	r3, [sp, #12]
 8006188:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800618a:	4433      	add	r3, r6
 800618c:	9309      	str	r3, [sp, #36]	@ 0x24
 800618e:	e76a      	b.n	8006066 <_svfiprintf_r+0x52>
 8006190:	460c      	mov	r4, r1
 8006192:	2001      	movs	r0, #1
 8006194:	fb0c 3202 	mla	r2, ip, r2, r3
 8006198:	e7a8      	b.n	80060ec <_svfiprintf_r+0xd8>
 800619a:	2300      	movs	r3, #0
 800619c:	f04f 0c0a 	mov.w	ip, #10
 80061a0:	4619      	mov	r1, r3
 80061a2:	3401      	adds	r4, #1
 80061a4:	9305      	str	r3, [sp, #20]
 80061a6:	4620      	mov	r0, r4
 80061a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061ac:	3a30      	subs	r2, #48	@ 0x30
 80061ae:	2a09      	cmp	r2, #9
 80061b0:	d903      	bls.n	80061ba <_svfiprintf_r+0x1a6>
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d0c6      	beq.n	8006144 <_svfiprintf_r+0x130>
 80061b6:	9105      	str	r1, [sp, #20]
 80061b8:	e7c4      	b.n	8006144 <_svfiprintf_r+0x130>
 80061ba:	4604      	mov	r4, r0
 80061bc:	2301      	movs	r3, #1
 80061be:	fb0c 2101 	mla	r1, ip, r1, r2
 80061c2:	e7f0      	b.n	80061a6 <_svfiprintf_r+0x192>
 80061c4:	ab03      	add	r3, sp, #12
 80061c6:	9300      	str	r3, [sp, #0]
 80061c8:	462a      	mov	r2, r5
 80061ca:	4638      	mov	r0, r7
 80061cc:	4b0e      	ldr	r3, [pc, #56]	@ (8006208 <_svfiprintf_r+0x1f4>)
 80061ce:	a904      	add	r1, sp, #16
 80061d0:	f3af 8000 	nop.w
 80061d4:	1c42      	adds	r2, r0, #1
 80061d6:	4606      	mov	r6, r0
 80061d8:	d1d6      	bne.n	8006188 <_svfiprintf_r+0x174>
 80061da:	89ab      	ldrh	r3, [r5, #12]
 80061dc:	065b      	lsls	r3, r3, #25
 80061de:	f53f af2d 	bmi.w	800603c <_svfiprintf_r+0x28>
 80061e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80061e4:	e72c      	b.n	8006040 <_svfiprintf_r+0x2c>
 80061e6:	ab03      	add	r3, sp, #12
 80061e8:	9300      	str	r3, [sp, #0]
 80061ea:	462a      	mov	r2, r5
 80061ec:	4638      	mov	r0, r7
 80061ee:	4b06      	ldr	r3, [pc, #24]	@ (8006208 <_svfiprintf_r+0x1f4>)
 80061f0:	a904      	add	r1, sp, #16
 80061f2:	f000 f87d 	bl	80062f0 <_printf_i>
 80061f6:	e7ed      	b.n	80061d4 <_svfiprintf_r+0x1c0>
 80061f8:	080077c2 	.word	0x080077c2
 80061fc:	080077c8 	.word	0x080077c8
 8006200:	080077cc 	.word	0x080077cc
 8006204:	00000000 	.word	0x00000000
 8006208:	08005f5d 	.word	0x08005f5d

0800620c <_printf_common>:
 800620c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006210:	4616      	mov	r6, r2
 8006212:	4698      	mov	r8, r3
 8006214:	688a      	ldr	r2, [r1, #8]
 8006216:	690b      	ldr	r3, [r1, #16]
 8006218:	4607      	mov	r7, r0
 800621a:	4293      	cmp	r3, r2
 800621c:	bfb8      	it	lt
 800621e:	4613      	movlt	r3, r2
 8006220:	6033      	str	r3, [r6, #0]
 8006222:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006226:	460c      	mov	r4, r1
 8006228:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800622c:	b10a      	cbz	r2, 8006232 <_printf_common+0x26>
 800622e:	3301      	adds	r3, #1
 8006230:	6033      	str	r3, [r6, #0]
 8006232:	6823      	ldr	r3, [r4, #0]
 8006234:	0699      	lsls	r1, r3, #26
 8006236:	bf42      	ittt	mi
 8006238:	6833      	ldrmi	r3, [r6, #0]
 800623a:	3302      	addmi	r3, #2
 800623c:	6033      	strmi	r3, [r6, #0]
 800623e:	6825      	ldr	r5, [r4, #0]
 8006240:	f015 0506 	ands.w	r5, r5, #6
 8006244:	d106      	bne.n	8006254 <_printf_common+0x48>
 8006246:	f104 0a19 	add.w	sl, r4, #25
 800624a:	68e3      	ldr	r3, [r4, #12]
 800624c:	6832      	ldr	r2, [r6, #0]
 800624e:	1a9b      	subs	r3, r3, r2
 8006250:	42ab      	cmp	r3, r5
 8006252:	dc2b      	bgt.n	80062ac <_printf_common+0xa0>
 8006254:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006258:	6822      	ldr	r2, [r4, #0]
 800625a:	3b00      	subs	r3, #0
 800625c:	bf18      	it	ne
 800625e:	2301      	movne	r3, #1
 8006260:	0692      	lsls	r2, r2, #26
 8006262:	d430      	bmi.n	80062c6 <_printf_common+0xba>
 8006264:	4641      	mov	r1, r8
 8006266:	4638      	mov	r0, r7
 8006268:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800626c:	47c8      	blx	r9
 800626e:	3001      	adds	r0, #1
 8006270:	d023      	beq.n	80062ba <_printf_common+0xae>
 8006272:	6823      	ldr	r3, [r4, #0]
 8006274:	6922      	ldr	r2, [r4, #16]
 8006276:	f003 0306 	and.w	r3, r3, #6
 800627a:	2b04      	cmp	r3, #4
 800627c:	bf14      	ite	ne
 800627e:	2500      	movne	r5, #0
 8006280:	6833      	ldreq	r3, [r6, #0]
 8006282:	f04f 0600 	mov.w	r6, #0
 8006286:	bf08      	it	eq
 8006288:	68e5      	ldreq	r5, [r4, #12]
 800628a:	f104 041a 	add.w	r4, r4, #26
 800628e:	bf08      	it	eq
 8006290:	1aed      	subeq	r5, r5, r3
 8006292:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006296:	bf08      	it	eq
 8006298:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800629c:	4293      	cmp	r3, r2
 800629e:	bfc4      	itt	gt
 80062a0:	1a9b      	subgt	r3, r3, r2
 80062a2:	18ed      	addgt	r5, r5, r3
 80062a4:	42b5      	cmp	r5, r6
 80062a6:	d11a      	bne.n	80062de <_printf_common+0xd2>
 80062a8:	2000      	movs	r0, #0
 80062aa:	e008      	b.n	80062be <_printf_common+0xb2>
 80062ac:	2301      	movs	r3, #1
 80062ae:	4652      	mov	r2, sl
 80062b0:	4641      	mov	r1, r8
 80062b2:	4638      	mov	r0, r7
 80062b4:	47c8      	blx	r9
 80062b6:	3001      	adds	r0, #1
 80062b8:	d103      	bne.n	80062c2 <_printf_common+0xb6>
 80062ba:	f04f 30ff 	mov.w	r0, #4294967295
 80062be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062c2:	3501      	adds	r5, #1
 80062c4:	e7c1      	b.n	800624a <_printf_common+0x3e>
 80062c6:	2030      	movs	r0, #48	@ 0x30
 80062c8:	18e1      	adds	r1, r4, r3
 80062ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80062ce:	1c5a      	adds	r2, r3, #1
 80062d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80062d4:	4422      	add	r2, r4
 80062d6:	3302      	adds	r3, #2
 80062d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80062dc:	e7c2      	b.n	8006264 <_printf_common+0x58>
 80062de:	2301      	movs	r3, #1
 80062e0:	4622      	mov	r2, r4
 80062e2:	4641      	mov	r1, r8
 80062e4:	4638      	mov	r0, r7
 80062e6:	47c8      	blx	r9
 80062e8:	3001      	adds	r0, #1
 80062ea:	d0e6      	beq.n	80062ba <_printf_common+0xae>
 80062ec:	3601      	adds	r6, #1
 80062ee:	e7d9      	b.n	80062a4 <_printf_common+0x98>

080062f0 <_printf_i>:
 80062f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062f4:	7e0f      	ldrb	r7, [r1, #24]
 80062f6:	4691      	mov	r9, r2
 80062f8:	2f78      	cmp	r7, #120	@ 0x78
 80062fa:	4680      	mov	r8, r0
 80062fc:	460c      	mov	r4, r1
 80062fe:	469a      	mov	sl, r3
 8006300:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006302:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006306:	d807      	bhi.n	8006318 <_printf_i+0x28>
 8006308:	2f62      	cmp	r7, #98	@ 0x62
 800630a:	d80a      	bhi.n	8006322 <_printf_i+0x32>
 800630c:	2f00      	cmp	r7, #0
 800630e:	f000 80d3 	beq.w	80064b8 <_printf_i+0x1c8>
 8006312:	2f58      	cmp	r7, #88	@ 0x58
 8006314:	f000 80ba 	beq.w	800648c <_printf_i+0x19c>
 8006318:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800631c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006320:	e03a      	b.n	8006398 <_printf_i+0xa8>
 8006322:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006326:	2b15      	cmp	r3, #21
 8006328:	d8f6      	bhi.n	8006318 <_printf_i+0x28>
 800632a:	a101      	add	r1, pc, #4	@ (adr r1, 8006330 <_printf_i+0x40>)
 800632c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006330:	08006389 	.word	0x08006389
 8006334:	0800639d 	.word	0x0800639d
 8006338:	08006319 	.word	0x08006319
 800633c:	08006319 	.word	0x08006319
 8006340:	08006319 	.word	0x08006319
 8006344:	08006319 	.word	0x08006319
 8006348:	0800639d 	.word	0x0800639d
 800634c:	08006319 	.word	0x08006319
 8006350:	08006319 	.word	0x08006319
 8006354:	08006319 	.word	0x08006319
 8006358:	08006319 	.word	0x08006319
 800635c:	0800649f 	.word	0x0800649f
 8006360:	080063c7 	.word	0x080063c7
 8006364:	08006459 	.word	0x08006459
 8006368:	08006319 	.word	0x08006319
 800636c:	08006319 	.word	0x08006319
 8006370:	080064c1 	.word	0x080064c1
 8006374:	08006319 	.word	0x08006319
 8006378:	080063c7 	.word	0x080063c7
 800637c:	08006319 	.word	0x08006319
 8006380:	08006319 	.word	0x08006319
 8006384:	08006461 	.word	0x08006461
 8006388:	6833      	ldr	r3, [r6, #0]
 800638a:	1d1a      	adds	r2, r3, #4
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	6032      	str	r2, [r6, #0]
 8006390:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006394:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006398:	2301      	movs	r3, #1
 800639a:	e09e      	b.n	80064da <_printf_i+0x1ea>
 800639c:	6833      	ldr	r3, [r6, #0]
 800639e:	6820      	ldr	r0, [r4, #0]
 80063a0:	1d19      	adds	r1, r3, #4
 80063a2:	6031      	str	r1, [r6, #0]
 80063a4:	0606      	lsls	r6, r0, #24
 80063a6:	d501      	bpl.n	80063ac <_printf_i+0xbc>
 80063a8:	681d      	ldr	r5, [r3, #0]
 80063aa:	e003      	b.n	80063b4 <_printf_i+0xc4>
 80063ac:	0645      	lsls	r5, r0, #25
 80063ae:	d5fb      	bpl.n	80063a8 <_printf_i+0xb8>
 80063b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80063b4:	2d00      	cmp	r5, #0
 80063b6:	da03      	bge.n	80063c0 <_printf_i+0xd0>
 80063b8:	232d      	movs	r3, #45	@ 0x2d
 80063ba:	426d      	negs	r5, r5
 80063bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063c0:	230a      	movs	r3, #10
 80063c2:	4859      	ldr	r0, [pc, #356]	@ (8006528 <_printf_i+0x238>)
 80063c4:	e011      	b.n	80063ea <_printf_i+0xfa>
 80063c6:	6821      	ldr	r1, [r4, #0]
 80063c8:	6833      	ldr	r3, [r6, #0]
 80063ca:	0608      	lsls	r0, r1, #24
 80063cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80063d0:	d402      	bmi.n	80063d8 <_printf_i+0xe8>
 80063d2:	0649      	lsls	r1, r1, #25
 80063d4:	bf48      	it	mi
 80063d6:	b2ad      	uxthmi	r5, r5
 80063d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80063da:	6033      	str	r3, [r6, #0]
 80063dc:	bf14      	ite	ne
 80063de:	230a      	movne	r3, #10
 80063e0:	2308      	moveq	r3, #8
 80063e2:	4851      	ldr	r0, [pc, #324]	@ (8006528 <_printf_i+0x238>)
 80063e4:	2100      	movs	r1, #0
 80063e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80063ea:	6866      	ldr	r6, [r4, #4]
 80063ec:	2e00      	cmp	r6, #0
 80063ee:	bfa8      	it	ge
 80063f0:	6821      	ldrge	r1, [r4, #0]
 80063f2:	60a6      	str	r6, [r4, #8]
 80063f4:	bfa4      	itt	ge
 80063f6:	f021 0104 	bicge.w	r1, r1, #4
 80063fa:	6021      	strge	r1, [r4, #0]
 80063fc:	b90d      	cbnz	r5, 8006402 <_printf_i+0x112>
 80063fe:	2e00      	cmp	r6, #0
 8006400:	d04b      	beq.n	800649a <_printf_i+0x1aa>
 8006402:	4616      	mov	r6, r2
 8006404:	fbb5 f1f3 	udiv	r1, r5, r3
 8006408:	fb03 5711 	mls	r7, r3, r1, r5
 800640c:	5dc7      	ldrb	r7, [r0, r7]
 800640e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006412:	462f      	mov	r7, r5
 8006414:	42bb      	cmp	r3, r7
 8006416:	460d      	mov	r5, r1
 8006418:	d9f4      	bls.n	8006404 <_printf_i+0x114>
 800641a:	2b08      	cmp	r3, #8
 800641c:	d10b      	bne.n	8006436 <_printf_i+0x146>
 800641e:	6823      	ldr	r3, [r4, #0]
 8006420:	07df      	lsls	r7, r3, #31
 8006422:	d508      	bpl.n	8006436 <_printf_i+0x146>
 8006424:	6923      	ldr	r3, [r4, #16]
 8006426:	6861      	ldr	r1, [r4, #4]
 8006428:	4299      	cmp	r1, r3
 800642a:	bfde      	ittt	le
 800642c:	2330      	movle	r3, #48	@ 0x30
 800642e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006432:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006436:	1b92      	subs	r2, r2, r6
 8006438:	6122      	str	r2, [r4, #16]
 800643a:	464b      	mov	r3, r9
 800643c:	4621      	mov	r1, r4
 800643e:	4640      	mov	r0, r8
 8006440:	f8cd a000 	str.w	sl, [sp]
 8006444:	aa03      	add	r2, sp, #12
 8006446:	f7ff fee1 	bl	800620c <_printf_common>
 800644a:	3001      	adds	r0, #1
 800644c:	d14a      	bne.n	80064e4 <_printf_i+0x1f4>
 800644e:	f04f 30ff 	mov.w	r0, #4294967295
 8006452:	b004      	add	sp, #16
 8006454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006458:	6823      	ldr	r3, [r4, #0]
 800645a:	f043 0320 	orr.w	r3, r3, #32
 800645e:	6023      	str	r3, [r4, #0]
 8006460:	2778      	movs	r7, #120	@ 0x78
 8006462:	4832      	ldr	r0, [pc, #200]	@ (800652c <_printf_i+0x23c>)
 8006464:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006468:	6823      	ldr	r3, [r4, #0]
 800646a:	6831      	ldr	r1, [r6, #0]
 800646c:	061f      	lsls	r7, r3, #24
 800646e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006472:	d402      	bmi.n	800647a <_printf_i+0x18a>
 8006474:	065f      	lsls	r7, r3, #25
 8006476:	bf48      	it	mi
 8006478:	b2ad      	uxthmi	r5, r5
 800647a:	6031      	str	r1, [r6, #0]
 800647c:	07d9      	lsls	r1, r3, #31
 800647e:	bf44      	itt	mi
 8006480:	f043 0320 	orrmi.w	r3, r3, #32
 8006484:	6023      	strmi	r3, [r4, #0]
 8006486:	b11d      	cbz	r5, 8006490 <_printf_i+0x1a0>
 8006488:	2310      	movs	r3, #16
 800648a:	e7ab      	b.n	80063e4 <_printf_i+0xf4>
 800648c:	4826      	ldr	r0, [pc, #152]	@ (8006528 <_printf_i+0x238>)
 800648e:	e7e9      	b.n	8006464 <_printf_i+0x174>
 8006490:	6823      	ldr	r3, [r4, #0]
 8006492:	f023 0320 	bic.w	r3, r3, #32
 8006496:	6023      	str	r3, [r4, #0]
 8006498:	e7f6      	b.n	8006488 <_printf_i+0x198>
 800649a:	4616      	mov	r6, r2
 800649c:	e7bd      	b.n	800641a <_printf_i+0x12a>
 800649e:	6833      	ldr	r3, [r6, #0]
 80064a0:	6825      	ldr	r5, [r4, #0]
 80064a2:	1d18      	adds	r0, r3, #4
 80064a4:	6961      	ldr	r1, [r4, #20]
 80064a6:	6030      	str	r0, [r6, #0]
 80064a8:	062e      	lsls	r6, r5, #24
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	d501      	bpl.n	80064b2 <_printf_i+0x1c2>
 80064ae:	6019      	str	r1, [r3, #0]
 80064b0:	e002      	b.n	80064b8 <_printf_i+0x1c8>
 80064b2:	0668      	lsls	r0, r5, #25
 80064b4:	d5fb      	bpl.n	80064ae <_printf_i+0x1be>
 80064b6:	8019      	strh	r1, [r3, #0]
 80064b8:	2300      	movs	r3, #0
 80064ba:	4616      	mov	r6, r2
 80064bc:	6123      	str	r3, [r4, #16]
 80064be:	e7bc      	b.n	800643a <_printf_i+0x14a>
 80064c0:	6833      	ldr	r3, [r6, #0]
 80064c2:	2100      	movs	r1, #0
 80064c4:	1d1a      	adds	r2, r3, #4
 80064c6:	6032      	str	r2, [r6, #0]
 80064c8:	681e      	ldr	r6, [r3, #0]
 80064ca:	6862      	ldr	r2, [r4, #4]
 80064cc:	4630      	mov	r0, r6
 80064ce:	f000 f859 	bl	8006584 <memchr>
 80064d2:	b108      	cbz	r0, 80064d8 <_printf_i+0x1e8>
 80064d4:	1b80      	subs	r0, r0, r6
 80064d6:	6060      	str	r0, [r4, #4]
 80064d8:	6863      	ldr	r3, [r4, #4]
 80064da:	6123      	str	r3, [r4, #16]
 80064dc:	2300      	movs	r3, #0
 80064de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064e2:	e7aa      	b.n	800643a <_printf_i+0x14a>
 80064e4:	4632      	mov	r2, r6
 80064e6:	4649      	mov	r1, r9
 80064e8:	4640      	mov	r0, r8
 80064ea:	6923      	ldr	r3, [r4, #16]
 80064ec:	47d0      	blx	sl
 80064ee:	3001      	adds	r0, #1
 80064f0:	d0ad      	beq.n	800644e <_printf_i+0x15e>
 80064f2:	6823      	ldr	r3, [r4, #0]
 80064f4:	079b      	lsls	r3, r3, #30
 80064f6:	d413      	bmi.n	8006520 <_printf_i+0x230>
 80064f8:	68e0      	ldr	r0, [r4, #12]
 80064fa:	9b03      	ldr	r3, [sp, #12]
 80064fc:	4298      	cmp	r0, r3
 80064fe:	bfb8      	it	lt
 8006500:	4618      	movlt	r0, r3
 8006502:	e7a6      	b.n	8006452 <_printf_i+0x162>
 8006504:	2301      	movs	r3, #1
 8006506:	4632      	mov	r2, r6
 8006508:	4649      	mov	r1, r9
 800650a:	4640      	mov	r0, r8
 800650c:	47d0      	blx	sl
 800650e:	3001      	adds	r0, #1
 8006510:	d09d      	beq.n	800644e <_printf_i+0x15e>
 8006512:	3501      	adds	r5, #1
 8006514:	68e3      	ldr	r3, [r4, #12]
 8006516:	9903      	ldr	r1, [sp, #12]
 8006518:	1a5b      	subs	r3, r3, r1
 800651a:	42ab      	cmp	r3, r5
 800651c:	dcf2      	bgt.n	8006504 <_printf_i+0x214>
 800651e:	e7eb      	b.n	80064f8 <_printf_i+0x208>
 8006520:	2500      	movs	r5, #0
 8006522:	f104 0619 	add.w	r6, r4, #25
 8006526:	e7f5      	b.n	8006514 <_printf_i+0x224>
 8006528:	080077d3 	.word	0x080077d3
 800652c:	080077e4 	.word	0x080077e4

08006530 <memmove>:
 8006530:	4288      	cmp	r0, r1
 8006532:	b510      	push	{r4, lr}
 8006534:	eb01 0402 	add.w	r4, r1, r2
 8006538:	d902      	bls.n	8006540 <memmove+0x10>
 800653a:	4284      	cmp	r4, r0
 800653c:	4623      	mov	r3, r4
 800653e:	d807      	bhi.n	8006550 <memmove+0x20>
 8006540:	1e43      	subs	r3, r0, #1
 8006542:	42a1      	cmp	r1, r4
 8006544:	d008      	beq.n	8006558 <memmove+0x28>
 8006546:	f811 2b01 	ldrb.w	r2, [r1], #1
 800654a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800654e:	e7f8      	b.n	8006542 <memmove+0x12>
 8006550:	4601      	mov	r1, r0
 8006552:	4402      	add	r2, r0
 8006554:	428a      	cmp	r2, r1
 8006556:	d100      	bne.n	800655a <memmove+0x2a>
 8006558:	bd10      	pop	{r4, pc}
 800655a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800655e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006562:	e7f7      	b.n	8006554 <memmove+0x24>

08006564 <_sbrk_r>:
 8006564:	b538      	push	{r3, r4, r5, lr}
 8006566:	2300      	movs	r3, #0
 8006568:	4d05      	ldr	r5, [pc, #20]	@ (8006580 <_sbrk_r+0x1c>)
 800656a:	4604      	mov	r4, r0
 800656c:	4608      	mov	r0, r1
 800656e:	602b      	str	r3, [r5, #0]
 8006570:	f7fb fe74 	bl	800225c <_sbrk>
 8006574:	1c43      	adds	r3, r0, #1
 8006576:	d102      	bne.n	800657e <_sbrk_r+0x1a>
 8006578:	682b      	ldr	r3, [r5, #0]
 800657a:	b103      	cbz	r3, 800657e <_sbrk_r+0x1a>
 800657c:	6023      	str	r3, [r4, #0]
 800657e:	bd38      	pop	{r3, r4, r5, pc}
 8006580:	2000078c 	.word	0x2000078c

08006584 <memchr>:
 8006584:	4603      	mov	r3, r0
 8006586:	b510      	push	{r4, lr}
 8006588:	b2c9      	uxtb	r1, r1
 800658a:	4402      	add	r2, r0
 800658c:	4293      	cmp	r3, r2
 800658e:	4618      	mov	r0, r3
 8006590:	d101      	bne.n	8006596 <memchr+0x12>
 8006592:	2000      	movs	r0, #0
 8006594:	e003      	b.n	800659e <memchr+0x1a>
 8006596:	7804      	ldrb	r4, [r0, #0]
 8006598:	3301      	adds	r3, #1
 800659a:	428c      	cmp	r4, r1
 800659c:	d1f6      	bne.n	800658c <memchr+0x8>
 800659e:	bd10      	pop	{r4, pc}

080065a0 <memcpy>:
 80065a0:	440a      	add	r2, r1
 80065a2:	4291      	cmp	r1, r2
 80065a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80065a8:	d100      	bne.n	80065ac <memcpy+0xc>
 80065aa:	4770      	bx	lr
 80065ac:	b510      	push	{r4, lr}
 80065ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065b2:	4291      	cmp	r1, r2
 80065b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065b8:	d1f9      	bne.n	80065ae <memcpy+0xe>
 80065ba:	bd10      	pop	{r4, pc}

080065bc <_realloc_r>:
 80065bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065c0:	4680      	mov	r8, r0
 80065c2:	4615      	mov	r5, r2
 80065c4:	460c      	mov	r4, r1
 80065c6:	b921      	cbnz	r1, 80065d2 <_realloc_r+0x16>
 80065c8:	4611      	mov	r1, r2
 80065ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065ce:	f7ff bc39 	b.w	8005e44 <_malloc_r>
 80065d2:	b92a      	cbnz	r2, 80065e0 <_realloc_r+0x24>
 80065d4:	f7ff fbcc 	bl	8005d70 <_free_r>
 80065d8:	2400      	movs	r4, #0
 80065da:	4620      	mov	r0, r4
 80065dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065e0:	f000 f81a 	bl	8006618 <_malloc_usable_size_r>
 80065e4:	4285      	cmp	r5, r0
 80065e6:	4606      	mov	r6, r0
 80065e8:	d802      	bhi.n	80065f0 <_realloc_r+0x34>
 80065ea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80065ee:	d8f4      	bhi.n	80065da <_realloc_r+0x1e>
 80065f0:	4629      	mov	r1, r5
 80065f2:	4640      	mov	r0, r8
 80065f4:	f7ff fc26 	bl	8005e44 <_malloc_r>
 80065f8:	4607      	mov	r7, r0
 80065fa:	2800      	cmp	r0, #0
 80065fc:	d0ec      	beq.n	80065d8 <_realloc_r+0x1c>
 80065fe:	42b5      	cmp	r5, r6
 8006600:	462a      	mov	r2, r5
 8006602:	4621      	mov	r1, r4
 8006604:	bf28      	it	cs
 8006606:	4632      	movcs	r2, r6
 8006608:	f7ff ffca 	bl	80065a0 <memcpy>
 800660c:	4621      	mov	r1, r4
 800660e:	4640      	mov	r0, r8
 8006610:	f7ff fbae 	bl	8005d70 <_free_r>
 8006614:	463c      	mov	r4, r7
 8006616:	e7e0      	b.n	80065da <_realloc_r+0x1e>

08006618 <_malloc_usable_size_r>:
 8006618:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800661c:	1f18      	subs	r0, r3, #4
 800661e:	2b00      	cmp	r3, #0
 8006620:	bfbc      	itt	lt
 8006622:	580b      	ldrlt	r3, [r1, r0]
 8006624:	18c0      	addlt	r0, r0, r3
 8006626:	4770      	bx	lr

08006628 <log>:
 8006628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800662a:	4604      	mov	r4, r0
 800662c:	460d      	mov	r5, r1
 800662e:	f000 f833 	bl	8006698 <__ieee754_log>
 8006632:	4622      	mov	r2, r4
 8006634:	4606      	mov	r6, r0
 8006636:	460f      	mov	r7, r1
 8006638:	462b      	mov	r3, r5
 800663a:	4620      	mov	r0, r4
 800663c:	4629      	mov	r1, r5
 800663e:	f7fa f9dd 	bl	80009fc <__aeabi_dcmpun>
 8006642:	b998      	cbnz	r0, 800666c <log+0x44>
 8006644:	2200      	movs	r2, #0
 8006646:	2300      	movs	r3, #0
 8006648:	4620      	mov	r0, r4
 800664a:	4629      	mov	r1, r5
 800664c:	f7fa f9cc 	bl	80009e8 <__aeabi_dcmpgt>
 8006650:	b960      	cbnz	r0, 800666c <log+0x44>
 8006652:	2200      	movs	r2, #0
 8006654:	2300      	movs	r3, #0
 8006656:	4620      	mov	r0, r4
 8006658:	4629      	mov	r1, r5
 800665a:	f7fa f99d 	bl	8000998 <__aeabi_dcmpeq>
 800665e:	b140      	cbz	r0, 8006672 <log+0x4a>
 8006660:	f7ff fb5a 	bl	8005d18 <__errno>
 8006664:	2322      	movs	r3, #34	@ 0x22
 8006666:	2600      	movs	r6, #0
 8006668:	4f06      	ldr	r7, [pc, #24]	@ (8006684 <log+0x5c>)
 800666a:	6003      	str	r3, [r0, #0]
 800666c:	4630      	mov	r0, r6
 800666e:	4639      	mov	r1, r7
 8006670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006672:	f7ff fb51 	bl	8005d18 <__errno>
 8006676:	2321      	movs	r3, #33	@ 0x21
 8006678:	6003      	str	r3, [r0, #0]
 800667a:	4803      	ldr	r0, [pc, #12]	@ (8006688 <log+0x60>)
 800667c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006680:	f000 b804 	b.w	800668c <nan>
 8006684:	fff00000 	.word	0xfff00000
 8006688:	080077c7 	.word	0x080077c7

0800668c <nan>:
 800668c:	2000      	movs	r0, #0
 800668e:	4901      	ldr	r1, [pc, #4]	@ (8006694 <nan+0x8>)
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	7ff80000 	.word	0x7ff80000

08006698 <__ieee754_log>:
 8006698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800669c:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80066a0:	4602      	mov	r2, r0
 80066a2:	460b      	mov	r3, r1
 80066a4:	460d      	mov	r5, r1
 80066a6:	b087      	sub	sp, #28
 80066a8:	da24      	bge.n	80066f4 <__ieee754_log+0x5c>
 80066aa:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 80066ae:	4304      	orrs	r4, r0
 80066b0:	d108      	bne.n	80066c4 <__ieee754_log+0x2c>
 80066b2:	2200      	movs	r2, #0
 80066b4:	2300      	movs	r3, #0
 80066b6:	2000      	movs	r0, #0
 80066b8:	49cb      	ldr	r1, [pc, #812]	@ (80069e8 <__ieee754_log+0x350>)
 80066ba:	f7fa f82f 	bl	800071c <__aeabi_ddiv>
 80066be:	b007      	add	sp, #28
 80066c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066c4:	2900      	cmp	r1, #0
 80066c6:	da04      	bge.n	80066d2 <__ieee754_log+0x3a>
 80066c8:	f7f9 fd46 	bl	8000158 <__aeabi_dsub>
 80066cc:	2200      	movs	r2, #0
 80066ce:	2300      	movs	r3, #0
 80066d0:	e7f3      	b.n	80066ba <__ieee754_log+0x22>
 80066d2:	2200      	movs	r2, #0
 80066d4:	4bc5      	ldr	r3, [pc, #788]	@ (80069ec <__ieee754_log+0x354>)
 80066d6:	f7f9 fef7 	bl	80004c8 <__aeabi_dmul>
 80066da:	460b      	mov	r3, r1
 80066dc:	460d      	mov	r5, r1
 80066de:	4602      	mov	r2, r0
 80066e0:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 80066e4:	48c2      	ldr	r0, [pc, #776]	@ (80069f0 <__ieee754_log+0x358>)
 80066e6:	4285      	cmp	r5, r0
 80066e8:	dd06      	ble.n	80066f8 <__ieee754_log+0x60>
 80066ea:	4610      	mov	r0, r2
 80066ec:	4619      	mov	r1, r3
 80066ee:	f7f9 fd35 	bl	800015c <__adddf3>
 80066f2:	e7e4      	b.n	80066be <__ieee754_log+0x26>
 80066f4:	2100      	movs	r1, #0
 80066f6:	e7f5      	b.n	80066e4 <__ieee754_log+0x4c>
 80066f8:	152c      	asrs	r4, r5, #20
 80066fa:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 80066fe:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8006702:	440c      	add	r4, r1
 8006704:	f505 2115 	add.w	r1, r5, #610304	@ 0x95000
 8006708:	f601 7164 	addw	r1, r1, #3940	@ 0xf64
 800670c:	f401 1680 	and.w	r6, r1, #1048576	@ 0x100000
 8006710:	f086 517f 	eor.w	r1, r6, #1069547520	@ 0x3fc00000
 8006714:	f481 1140 	eor.w	r1, r1, #3145728	@ 0x300000
 8006718:	ea41 0305 	orr.w	r3, r1, r5
 800671c:	4610      	mov	r0, r2
 800671e:	4619      	mov	r1, r3
 8006720:	2200      	movs	r2, #0
 8006722:	4bb4      	ldr	r3, [pc, #720]	@ (80069f4 <__ieee754_log+0x35c>)
 8006724:	f7f9 fd18 	bl	8000158 <__aeabi_dsub>
 8006728:	1cab      	adds	r3, r5, #2
 800672a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800672e:	2b02      	cmp	r3, #2
 8006730:	4682      	mov	sl, r0
 8006732:	468b      	mov	fp, r1
 8006734:	f04f 0200 	mov.w	r2, #0
 8006738:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 800673c:	dc53      	bgt.n	80067e6 <__ieee754_log+0x14e>
 800673e:	2300      	movs	r3, #0
 8006740:	f7fa f92a 	bl	8000998 <__aeabi_dcmpeq>
 8006744:	b1d0      	cbz	r0, 800677c <__ieee754_log+0xe4>
 8006746:	2c00      	cmp	r4, #0
 8006748:	f000 8120 	beq.w	800698c <__ieee754_log+0x2f4>
 800674c:	4620      	mov	r0, r4
 800674e:	f7f9 fe51 	bl	80003f4 <__aeabi_i2d>
 8006752:	a391      	add	r3, pc, #580	@ (adr r3, 8006998 <__ieee754_log+0x300>)
 8006754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006758:	4606      	mov	r6, r0
 800675a:	460f      	mov	r7, r1
 800675c:	f7f9 feb4 	bl	80004c8 <__aeabi_dmul>
 8006760:	a38f      	add	r3, pc, #572	@ (adr r3, 80069a0 <__ieee754_log+0x308>)
 8006762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006766:	4604      	mov	r4, r0
 8006768:	460d      	mov	r5, r1
 800676a:	4630      	mov	r0, r6
 800676c:	4639      	mov	r1, r7
 800676e:	f7f9 feab 	bl	80004c8 <__aeabi_dmul>
 8006772:	4602      	mov	r2, r0
 8006774:	460b      	mov	r3, r1
 8006776:	4620      	mov	r0, r4
 8006778:	4629      	mov	r1, r5
 800677a:	e7b8      	b.n	80066ee <__ieee754_log+0x56>
 800677c:	a38a      	add	r3, pc, #552	@ (adr r3, 80069a8 <__ieee754_log+0x310>)
 800677e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006782:	4650      	mov	r0, sl
 8006784:	4659      	mov	r1, fp
 8006786:	f7f9 fe9f 	bl	80004c8 <__aeabi_dmul>
 800678a:	4602      	mov	r2, r0
 800678c:	460b      	mov	r3, r1
 800678e:	2000      	movs	r0, #0
 8006790:	4999      	ldr	r1, [pc, #612]	@ (80069f8 <__ieee754_log+0x360>)
 8006792:	f7f9 fce1 	bl	8000158 <__aeabi_dsub>
 8006796:	4652      	mov	r2, sl
 8006798:	4606      	mov	r6, r0
 800679a:	460f      	mov	r7, r1
 800679c:	465b      	mov	r3, fp
 800679e:	4650      	mov	r0, sl
 80067a0:	4659      	mov	r1, fp
 80067a2:	f7f9 fe91 	bl	80004c8 <__aeabi_dmul>
 80067a6:	4602      	mov	r2, r0
 80067a8:	460b      	mov	r3, r1
 80067aa:	4630      	mov	r0, r6
 80067ac:	4639      	mov	r1, r7
 80067ae:	f7f9 fe8b 	bl	80004c8 <__aeabi_dmul>
 80067b2:	4606      	mov	r6, r0
 80067b4:	460f      	mov	r7, r1
 80067b6:	b914      	cbnz	r4, 80067be <__ieee754_log+0x126>
 80067b8:	4632      	mov	r2, r6
 80067ba:	463b      	mov	r3, r7
 80067bc:	e0a0      	b.n	8006900 <__ieee754_log+0x268>
 80067be:	4620      	mov	r0, r4
 80067c0:	f7f9 fe18 	bl	80003f4 <__aeabi_i2d>
 80067c4:	a374      	add	r3, pc, #464	@ (adr r3, 8006998 <__ieee754_log+0x300>)
 80067c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ca:	4680      	mov	r8, r0
 80067cc:	4689      	mov	r9, r1
 80067ce:	f7f9 fe7b 	bl	80004c8 <__aeabi_dmul>
 80067d2:	a373      	add	r3, pc, #460	@ (adr r3, 80069a0 <__ieee754_log+0x308>)
 80067d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d8:	4604      	mov	r4, r0
 80067da:	460d      	mov	r5, r1
 80067dc:	4640      	mov	r0, r8
 80067de:	4649      	mov	r1, r9
 80067e0:	f7f9 fe72 	bl	80004c8 <__aeabi_dmul>
 80067e4:	e0a5      	b.n	8006932 <__ieee754_log+0x29a>
 80067e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80067ea:	f7f9 fcb7 	bl	800015c <__adddf3>
 80067ee:	4602      	mov	r2, r0
 80067f0:	460b      	mov	r3, r1
 80067f2:	4650      	mov	r0, sl
 80067f4:	4659      	mov	r1, fp
 80067f6:	f7f9 ff91 	bl	800071c <__aeabi_ddiv>
 80067fa:	e9cd 0100 	strd	r0, r1, [sp]
 80067fe:	4620      	mov	r0, r4
 8006800:	f7f9 fdf8 	bl	80003f4 <__aeabi_i2d>
 8006804:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006808:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800680c:	4610      	mov	r0, r2
 800680e:	4619      	mov	r1, r3
 8006810:	f7f9 fe5a 	bl	80004c8 <__aeabi_dmul>
 8006814:	4602      	mov	r2, r0
 8006816:	460b      	mov	r3, r1
 8006818:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800681c:	f7f9 fe54 	bl	80004c8 <__aeabi_dmul>
 8006820:	a363      	add	r3, pc, #396	@ (adr r3, 80069b0 <__ieee754_log+0x318>)
 8006822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006826:	4680      	mov	r8, r0
 8006828:	4689      	mov	r9, r1
 800682a:	f7f9 fe4d 	bl	80004c8 <__aeabi_dmul>
 800682e:	a362      	add	r3, pc, #392	@ (adr r3, 80069b8 <__ieee754_log+0x320>)
 8006830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006834:	f7f9 fc92 	bl	800015c <__adddf3>
 8006838:	4642      	mov	r2, r8
 800683a:	464b      	mov	r3, r9
 800683c:	f7f9 fe44 	bl	80004c8 <__aeabi_dmul>
 8006840:	a35f      	add	r3, pc, #380	@ (adr r3, 80069c0 <__ieee754_log+0x328>)
 8006842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006846:	f7f9 fc89 	bl	800015c <__adddf3>
 800684a:	4642      	mov	r2, r8
 800684c:	464b      	mov	r3, r9
 800684e:	f7f9 fe3b 	bl	80004c8 <__aeabi_dmul>
 8006852:	a35d      	add	r3, pc, #372	@ (adr r3, 80069c8 <__ieee754_log+0x330>)
 8006854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006858:	f7f9 fc80 	bl	800015c <__adddf3>
 800685c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006860:	f7f9 fe32 	bl	80004c8 <__aeabi_dmul>
 8006864:	a35a      	add	r3, pc, #360	@ (adr r3, 80069d0 <__ieee754_log+0x338>)
 8006866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800686e:	4640      	mov	r0, r8
 8006870:	4649      	mov	r1, r9
 8006872:	f7f9 fe29 	bl	80004c8 <__aeabi_dmul>
 8006876:	a358      	add	r3, pc, #352	@ (adr r3, 80069d8 <__ieee754_log+0x340>)
 8006878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687c:	f7f9 fc6e 	bl	800015c <__adddf3>
 8006880:	4642      	mov	r2, r8
 8006882:	464b      	mov	r3, r9
 8006884:	f7f9 fe20 	bl	80004c8 <__aeabi_dmul>
 8006888:	a355      	add	r3, pc, #340	@ (adr r3, 80069e0 <__ieee754_log+0x348>)
 800688a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688e:	f7f9 fc65 	bl	800015c <__adddf3>
 8006892:	4642      	mov	r2, r8
 8006894:	464b      	mov	r3, r9
 8006896:	f7f9 fe17 	bl	80004c8 <__aeabi_dmul>
 800689a:	4602      	mov	r2, r0
 800689c:	460b      	mov	r3, r1
 800689e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068a2:	f7f9 fc5b 	bl	800015c <__adddf3>
 80068a6:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 80068aa:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 80068ae:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 80068b2:	3551      	adds	r5, #81	@ 0x51
 80068b4:	4335      	orrs	r5, r6
 80068b6:	2d00      	cmp	r5, #0
 80068b8:	4680      	mov	r8, r0
 80068ba:	4689      	mov	r9, r1
 80068bc:	dd48      	ble.n	8006950 <__ieee754_log+0x2b8>
 80068be:	2200      	movs	r2, #0
 80068c0:	4b4d      	ldr	r3, [pc, #308]	@ (80069f8 <__ieee754_log+0x360>)
 80068c2:	4650      	mov	r0, sl
 80068c4:	4659      	mov	r1, fp
 80068c6:	f7f9 fdff 	bl	80004c8 <__aeabi_dmul>
 80068ca:	4652      	mov	r2, sl
 80068cc:	465b      	mov	r3, fp
 80068ce:	f7f9 fdfb 	bl	80004c8 <__aeabi_dmul>
 80068d2:	4602      	mov	r2, r0
 80068d4:	460b      	mov	r3, r1
 80068d6:	4606      	mov	r6, r0
 80068d8:	460f      	mov	r7, r1
 80068da:	4640      	mov	r0, r8
 80068dc:	4649      	mov	r1, r9
 80068de:	f7f9 fc3d 	bl	800015c <__adddf3>
 80068e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068e6:	f7f9 fdef 	bl	80004c8 <__aeabi_dmul>
 80068ea:	4680      	mov	r8, r0
 80068ec:	4689      	mov	r9, r1
 80068ee:	b964      	cbnz	r4, 800690a <__ieee754_log+0x272>
 80068f0:	4602      	mov	r2, r0
 80068f2:	460b      	mov	r3, r1
 80068f4:	4630      	mov	r0, r6
 80068f6:	4639      	mov	r1, r7
 80068f8:	f7f9 fc2e 	bl	8000158 <__aeabi_dsub>
 80068fc:	4602      	mov	r2, r0
 80068fe:	460b      	mov	r3, r1
 8006900:	4650      	mov	r0, sl
 8006902:	4659      	mov	r1, fp
 8006904:	f7f9 fc28 	bl	8000158 <__aeabi_dsub>
 8006908:	e6d9      	b.n	80066be <__ieee754_log+0x26>
 800690a:	a323      	add	r3, pc, #140	@ (adr r3, 8006998 <__ieee754_log+0x300>)
 800690c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006910:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006914:	f7f9 fdd8 	bl	80004c8 <__aeabi_dmul>
 8006918:	a321      	add	r3, pc, #132	@ (adr r3, 80069a0 <__ieee754_log+0x308>)
 800691a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691e:	4604      	mov	r4, r0
 8006920:	460d      	mov	r5, r1
 8006922:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006926:	f7f9 fdcf 	bl	80004c8 <__aeabi_dmul>
 800692a:	4642      	mov	r2, r8
 800692c:	464b      	mov	r3, r9
 800692e:	f7f9 fc15 	bl	800015c <__adddf3>
 8006932:	4602      	mov	r2, r0
 8006934:	460b      	mov	r3, r1
 8006936:	4630      	mov	r0, r6
 8006938:	4639      	mov	r1, r7
 800693a:	f7f9 fc0d 	bl	8000158 <__aeabi_dsub>
 800693e:	4652      	mov	r2, sl
 8006940:	465b      	mov	r3, fp
 8006942:	f7f9 fc09 	bl	8000158 <__aeabi_dsub>
 8006946:	4602      	mov	r2, r0
 8006948:	460b      	mov	r3, r1
 800694a:	4620      	mov	r0, r4
 800694c:	4629      	mov	r1, r5
 800694e:	e7d9      	b.n	8006904 <__ieee754_log+0x26c>
 8006950:	4602      	mov	r2, r0
 8006952:	460b      	mov	r3, r1
 8006954:	4650      	mov	r0, sl
 8006956:	4659      	mov	r1, fp
 8006958:	f7f9 fbfe 	bl	8000158 <__aeabi_dsub>
 800695c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006960:	f7f9 fdb2 	bl	80004c8 <__aeabi_dmul>
 8006964:	4606      	mov	r6, r0
 8006966:	460f      	mov	r7, r1
 8006968:	2c00      	cmp	r4, #0
 800696a:	f43f af25 	beq.w	80067b8 <__ieee754_log+0x120>
 800696e:	a30a      	add	r3, pc, #40	@ (adr r3, 8006998 <__ieee754_log+0x300>)
 8006970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006974:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006978:	f7f9 fda6 	bl	80004c8 <__aeabi_dmul>
 800697c:	a308      	add	r3, pc, #32	@ (adr r3, 80069a0 <__ieee754_log+0x308>)
 800697e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006982:	4604      	mov	r4, r0
 8006984:	460d      	mov	r5, r1
 8006986:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800698a:	e729      	b.n	80067e0 <__ieee754_log+0x148>
 800698c:	2000      	movs	r0, #0
 800698e:	2100      	movs	r1, #0
 8006990:	e695      	b.n	80066be <__ieee754_log+0x26>
 8006992:	bf00      	nop
 8006994:	f3af 8000 	nop.w
 8006998:	fee00000 	.word	0xfee00000
 800699c:	3fe62e42 	.word	0x3fe62e42
 80069a0:	35793c76 	.word	0x35793c76
 80069a4:	3dea39ef 	.word	0x3dea39ef
 80069a8:	55555555 	.word	0x55555555
 80069ac:	3fd55555 	.word	0x3fd55555
 80069b0:	df3e5244 	.word	0xdf3e5244
 80069b4:	3fc2f112 	.word	0x3fc2f112
 80069b8:	96cb03de 	.word	0x96cb03de
 80069bc:	3fc74664 	.word	0x3fc74664
 80069c0:	94229359 	.word	0x94229359
 80069c4:	3fd24924 	.word	0x3fd24924
 80069c8:	55555593 	.word	0x55555593
 80069cc:	3fe55555 	.word	0x3fe55555
 80069d0:	d078c69f 	.word	0xd078c69f
 80069d4:	3fc39a09 	.word	0x3fc39a09
 80069d8:	1d8e78af 	.word	0x1d8e78af
 80069dc:	3fcc71c5 	.word	0x3fcc71c5
 80069e0:	9997fa04 	.word	0x9997fa04
 80069e4:	3fd99999 	.word	0x3fd99999
 80069e8:	c3500000 	.word	0xc3500000
 80069ec:	43500000 	.word	0x43500000
 80069f0:	7fefffff 	.word	0x7fefffff
 80069f4:	3ff00000 	.word	0x3ff00000
 80069f8:	3fe00000 	.word	0x3fe00000

080069fc <_init>:
 80069fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069fe:	bf00      	nop
 8006a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a02:	bc08      	pop	{r3}
 8006a04:	469e      	mov	lr, r3
 8006a06:	4770      	bx	lr

08006a08 <_fini>:
 8006a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a0a:	bf00      	nop
 8006a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a0e:	bc08      	pop	{r3}
 8006a10:	469e      	mov	lr, r3
 8006a12:	4770      	bx	lr
