
rfid_test_stm32f401ccu6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003654  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080037f4  080037f4  000137f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003860  08003860  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003860  08003860  00013860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003868  08003868  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003868  08003868  00013868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800386c  0800386c  0001386c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003870  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  20000068  080038d8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  080038d8  00020234  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007cfe  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c3c  00000000  00000000  00027dd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000840  00000000  00000000  00029a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000611  00000000  00000000  0002a258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016e79  00000000  00000000  0002a869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a736  00000000  00000000  000416e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086c03  00000000  00000000  0004be18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000028f0  00000000  00000000  000d2a1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000d530c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080037dc 	.word	0x080037dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080037dc 	.word	0x080037dc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <spi_cs_rfid_write>:
bool rc522_request(uint8_t reqMode, uint8_t *tagType);

bool rc522_antiColl(uint8_t* serNum);

void spi_cs_rfid_write(bool state)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
	if(state)
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d006      	beq.n	800059a <spi_cs_rfid_write+0x1e>
	  {
	    GPIOB->ODR |= (1UL << 0);
 800058c:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <spi_cs_rfid_write+0x38>)
 800058e:	695b      	ldr	r3, [r3, #20]
 8000590:	4a08      	ldr	r2, [pc, #32]	; (80005b4 <spi_cs_rfid_write+0x38>)
 8000592:	f043 0301 	orr.w	r3, r3, #1
 8000596:	6153      	str	r3, [r2, #20]
	  }
	  else
	  {
	    GPIOB->ODR &= ~(1UL << 0);
	  }
}
 8000598:	e005      	b.n	80005a6 <spi_cs_rfid_write+0x2a>
	    GPIOB->ODR &= ~(1UL << 0);
 800059a:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <spi_cs_rfid_write+0x38>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	4a05      	ldr	r2, [pc, #20]	; (80005b4 <spi_cs_rfid_write+0x38>)
 80005a0:	f023 0301 	bic.w	r3, r3, #1
 80005a4:	6153      	str	r3, [r2, #20]
}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	40020400 	.word	0x40020400

080005b8 <rc522_regRead8>:

uint8_t rc522_regRead8(uint8_t reg)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
  spi_cs_rfid_write(0);
 80005c2:	2000      	movs	r0, #0
 80005c4:	f7ff ffda 	bl	800057c <spi_cs_rfid_write>
  reg = ((reg << 1) & 0x7E) | 0x80;
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	005b      	lsls	r3, r3, #1
 80005cc:	b25b      	sxtb	r3, r3
 80005ce:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80005d2:	b25b      	sxtb	r3, r3
 80005d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005d8:	b25b      	sxtb	r3, r3
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	71fb      	strb	r3, [r7, #7]
  spi1_transmit(&reg, 1);
 80005de:	1dfb      	adds	r3, r7, #7
 80005e0:	2101      	movs	r1, #1
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 fca4 	bl	8000f30 <spi1_transmit>
  uint8_t dataRd=0;
 80005e8:	2300      	movs	r3, #0
 80005ea:	73fb      	strb	r3, [r7, #15]
  spi1_receive(&dataRd, 1);
 80005ec:	f107 030f 	add.w	r3, r7, #15
 80005f0:	2101      	movs	r1, #1
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 fcd2 	bl	8000f9c <spi1_receive>
  spi_cs_rfid_write(1);
 80005f8:	2001      	movs	r0, #1
 80005fa:	f7ff ffbf 	bl	800057c <spi_cs_rfid_write>
  return dataRd;
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000600:	4618      	mov	r0, r3
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <rc522_regWrite8>:

/**
 * @brief write register
 */
void rc522_regWrite8(uint8_t reg, uint8_t data8)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	460a      	mov	r2, r1
 8000612:	71fb      	strb	r3, [r7, #7]
 8000614:	4613      	mov	r3, r2
 8000616:	71bb      	strb	r3, [r7, #6]
  spi_cs_rfid_write(0);
 8000618:	2000      	movs	r0, #0
 800061a:	f7ff ffaf 	bl	800057c <spi_cs_rfid_write>
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	005b      	lsls	r3, r3, #1
 8000622:	b2db      	uxtb	r3, r3
 8000624:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000628:	b2db      	uxtb	r3, r3
 800062a:	733b      	strb	r3, [r7, #12]
 800062c:	79bb      	ldrb	r3, [r7, #6]
 800062e:	737b      	strb	r3, [r7, #13]
  spi1_transmit(txData, 2);
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2102      	movs	r1, #2
 8000636:	4618      	mov	r0, r3
 8000638:	f000 fc7a 	bl	8000f30 <spi1_transmit>
  spi_cs_rfid_write(1);
 800063c:	2001      	movs	r0, #1
 800063e:	f7ff ff9d 	bl	800057c <spi_cs_rfid_write>
}
 8000642:	bf00      	nop
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}

0800064a <rc522_setBit>:

/**
 * @brief set bit
 */
void rc522_setBit(uint8_t reg, uint8_t mask)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	b082      	sub	sp, #8
 800064e:	af00      	add	r7, sp, #0
 8000650:	4603      	mov	r3, r0
 8000652:	460a      	mov	r2, r1
 8000654:	71fb      	strb	r3, [r7, #7]
 8000656:	4613      	mov	r3, r2
 8000658:	71bb      	strb	r3, [r7, #6]
  rc522_regWrite8(reg, rc522_regRead8(reg)|mask);
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff ffab 	bl	80005b8 <rc522_regRead8>
 8000662:	4603      	mov	r3, r0
 8000664:	461a      	mov	r2, r3
 8000666:	79bb      	ldrb	r3, [r7, #6]
 8000668:	4313      	orrs	r3, r2
 800066a:	b2da      	uxtb	r2, r3
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	4611      	mov	r1, r2
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff ffc9 	bl	8000608 <rc522_regWrite8>
}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <rc522_clearBit>:

/**
 * @brief clear bit
 */
void rc522_clearBit(uint8_t reg, uint8_t mask)
{
 800067e:	b580      	push	{r7, lr}
 8000680:	b082      	sub	sp, #8
 8000682:	af00      	add	r7, sp, #0
 8000684:	4603      	mov	r3, r0
 8000686:	460a      	mov	r2, r1
 8000688:	71fb      	strb	r3, [r7, #7]
 800068a:	4613      	mov	r3, r2
 800068c:	71bb      	strb	r3, [r7, #6]
  rc522_regWrite8(reg, rc522_regRead8(reg)&(~mask));
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	4618      	mov	r0, r3
 8000692:	f7ff ff91 	bl	80005b8 <rc522_regRead8>
 8000696:	4603      	mov	r3, r0
 8000698:	b25a      	sxtb	r2, r3
 800069a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800069e:	43db      	mvns	r3, r3
 80006a0:	b25b      	sxtb	r3, r3
 80006a2:	4013      	ands	r3, r2
 80006a4:	b25b      	sxtb	r3, r3
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	4611      	mov	r1, r2
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff ffab 	bl	8000608 <rc522_regWrite8>
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <rc522_reset>:

/**
 * @brief reset function
 */
void rc522_reset(void)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	af00      	add	r7, sp, #0
  rc522_regWrite8(0x01, 0x0F);
 80006be:	210f      	movs	r1, #15
 80006c0:	2001      	movs	r0, #1
 80006c2:	f7ff ffa1 	bl	8000608 <rc522_regWrite8>
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}

080006ca <rc522_antennaON>:

/**
 * @brief Antenna ON
 */
void rc522_antennaON(void)
{
 80006ca:	b580      	push	{r7, lr}
 80006cc:	b082      	sub	sp, #8
 80006ce:	af00      	add	r7, sp, #0
  uint8_t temp;

  temp = rc522_regRead8(MFRC522_REG_TX_CONTROL);
 80006d0:	2014      	movs	r0, #20
 80006d2:	f7ff ff71 	bl	80005b8 <rc522_regRead8>
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]
  if (!(temp & 0x03)) {
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	f003 0303 	and.w	r3, r3, #3
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d103      	bne.n	80006ec <rc522_antennaON+0x22>
    rc522_setBit(MFRC522_REG_TX_CONTROL, 0x03);
 80006e4:	2103      	movs	r1, #3
 80006e6:	2014      	movs	r0, #20
 80006e8:	f7ff ffaf 	bl	800064a <rc522_setBit>
  }
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <rc522_checkCard>:

/**
 * @brief Check card
 */
bool rc522_checkCard(uint8_t *id)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  bool status=false;
 80006fc:	2300      	movs	r3, #0
 80006fe:	73fb      	strb	r3, [r7, #15]
  //Find cards, return card type
    status = rc522_request(PICC_REQIDL, id);
 8000700:	6879      	ldr	r1, [r7, #4]
 8000702:	2026      	movs	r0, #38	; 0x26
 8000704:	f000 f811 	bl	800072a <rc522_request>
 8000708:	4603      	mov	r3, r0
 800070a:	73fb      	strb	r3, [r7, #15]
    if (status == true) {
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d004      	beq.n	800071c <rc522_checkCard+0x28>
      //Card detected
      //Anti-collision, return card serial number 4 bytes
      status = rc522_antiColl(id);
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f000 f91e 	bl	8000954 <rc522_antiColl>
 8000718:	4603      	mov	r3, r0
 800071a:	73fb      	strb	r3, [r7, #15]
    }
    rc522_halt();      //Command card into hibernation
 800071c:	f000 f957 	bl	80009ce <rc522_halt>

    return status;
 8000720:	7bfb      	ldrb	r3, [r7, #15]
}
 8000722:	4618      	mov	r0, r3
 8000724:	3710      	adds	r7, #16
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}

0800072a <rc522_request>:

/**
 * @brief Request function
 */
bool rc522_request(uint8_t reqMode, uint8_t *tagType)
{
 800072a:	b580      	push	{r7, lr}
 800072c:	b086      	sub	sp, #24
 800072e:	af02      	add	r7, sp, #8
 8000730:	4603      	mov	r3, r0
 8000732:	6039      	str	r1, [r7, #0]
 8000734:	71fb      	strb	r3, [r7, #7]
  bool status=false;
 8000736:	2300      	movs	r3, #0
 8000738:	73fb      	strb	r3, [r7, #15]
  uint16_t backBits;
  rc522_regWrite8(MFRC522_REG_BIT_FRAMING, 0x07);
 800073a:	2107      	movs	r1, #7
 800073c:	200d      	movs	r0, #13
 800073e:	f7ff ff63 	bl	8000608 <rc522_regWrite8>
  tagType[0] = reqMode;
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	79fa      	ldrb	r2, [r7, #7]
 8000746:	701a      	strb	r2, [r3, #0]
  status = rc522_toCard(PCD_TRANSCEIVE, tagType, 1, tagType, &backBits);
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	9300      	str	r3, [sp, #0]
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	2201      	movs	r2, #1
 8000752:	6839      	ldr	r1, [r7, #0]
 8000754:	200c      	movs	r0, #12
 8000756:	f000 f813 	bl	8000780 <rc522_toCard>
 800075a:	4603      	mov	r3, r0
 800075c:	73fb      	strb	r3, [r7, #15]
  if ((status != true) || (backBits != 0x10)) {
 800075e:	7bfb      	ldrb	r3, [r7, #15]
 8000760:	f083 0301 	eor.w	r3, r3, #1
 8000764:	b2db      	uxtb	r3, r3
 8000766:	2b00      	cmp	r3, #0
 8000768:	d102      	bne.n	8000770 <rc522_request+0x46>
 800076a:	89bb      	ldrh	r3, [r7, #12]
 800076c:	2b10      	cmp	r3, #16
 800076e:	d001      	beq.n	8000774 <rc522_request+0x4a>
    status = false;
 8000770:	2300      	movs	r3, #0
 8000772:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8000774:	7bfb      	ldrb	r3, [r7, #15]
}
 8000776:	4618      	mov	r0, r3
 8000778:	3710      	adds	r7, #16
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
	...

08000780 <rc522_toCard>:
    uint8_t command,
    uint8_t* sendData,
    uint8_t sendLen,
    uint8_t* backData,
    uint16_t* backLen)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b088      	sub	sp, #32
 8000784:	af00      	add	r7, sp, #0
 8000786:	60b9      	str	r1, [r7, #8]
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	4603      	mov	r3, r0
 800078c:	73fb      	strb	r3, [r7, #15]
 800078e:	4613      	mov	r3, r2
 8000790:	73bb      	strb	r3, [r7, #14]
  bool status = false;
 8000792:	2300      	movs	r3, #0
 8000794:	77fb      	strb	r3, [r7, #31]
  uint8_t irqEn = 0x00;
 8000796:	2300      	movs	r3, #0
 8000798:	77bb      	strb	r3, [r7, #30]
  uint8_t waitIRq = 0x00;
 800079a:	2300      	movs	r3, #0
 800079c:	777b      	strb	r3, [r7, #29]
  uint8_t lastBits;
  uint8_t n;
  uint16_t i;

  switch (command) {
 800079e:	7bfb      	ldrb	r3, [r7, #15]
 80007a0:	2b0c      	cmp	r3, #12
 80007a2:	d006      	beq.n	80007b2 <rc522_toCard+0x32>
 80007a4:	2b0e      	cmp	r3, #14
 80007a6:	d109      	bne.n	80007bc <rc522_toCard+0x3c>
    case PCD_AUTHENT: {
      irqEn = 0x12;
 80007a8:	2312      	movs	r3, #18
 80007aa:	77bb      	strb	r3, [r7, #30]
      waitIRq = 0x10;
 80007ac:	2310      	movs	r3, #16
 80007ae:	777b      	strb	r3, [r7, #29]
      break;
 80007b0:	e005      	b.n	80007be <rc522_toCard+0x3e>
    }
    case PCD_TRANSCEIVE: {
      irqEn = 0x77;
 80007b2:	2377      	movs	r3, #119	; 0x77
 80007b4:	77bb      	strb	r3, [r7, #30]
      waitIRq = 0x30;
 80007b6:	2330      	movs	r3, #48	; 0x30
 80007b8:	777b      	strb	r3, [r7, #29]
      break;
 80007ba:	e000      	b.n	80007be <rc522_toCard+0x3e>
    }
    default:
      break;
 80007bc:	bf00      	nop
  }

  rc522_regWrite8(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 80007be:	7fbb      	ldrb	r3, [r7, #30]
 80007c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	4619      	mov	r1, r3
 80007c8:	2002      	movs	r0, #2
 80007ca:	f7ff ff1d 	bl	8000608 <rc522_regWrite8>
  rc522_clearBit(MFRC522_REG_COMM_IRQ, 0x80);
 80007ce:	2180      	movs	r1, #128	; 0x80
 80007d0:	2004      	movs	r0, #4
 80007d2:	f7ff ff54 	bl	800067e <rc522_clearBit>
  rc522_setBit(MFRC522_REG_FIFO_LEVEL, 0x80);
 80007d6:	2180      	movs	r1, #128	; 0x80
 80007d8:	200a      	movs	r0, #10
 80007da:	f7ff ff36 	bl	800064a <rc522_setBit>

  rc522_regWrite8(MFRC522_REG_COMMAND, PCD_IDLE);
 80007de:	2100      	movs	r1, #0
 80007e0:	2001      	movs	r0, #1
 80007e2:	f7ff ff11 	bl	8000608 <rc522_regWrite8>

  //Writing data to the FIFO
  for (i = 0; i < sendLen; i++) {
 80007e6:	2300      	movs	r3, #0
 80007e8:	837b      	strh	r3, [r7, #26]
 80007ea:	e00a      	b.n	8000802 <rc522_toCard+0x82>
    rc522_regWrite8(MFRC522_REG_FIFO_DATA, sendData[i]);
 80007ec:	8b7b      	ldrh	r3, [r7, #26]
 80007ee:	68ba      	ldr	r2, [r7, #8]
 80007f0:	4413      	add	r3, r2
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	4619      	mov	r1, r3
 80007f6:	2009      	movs	r0, #9
 80007f8:	f7ff ff06 	bl	8000608 <rc522_regWrite8>
  for (i = 0; i < sendLen; i++) {
 80007fc:	8b7b      	ldrh	r3, [r7, #26]
 80007fe:	3301      	adds	r3, #1
 8000800:	837b      	strh	r3, [r7, #26]
 8000802:	7bbb      	ldrb	r3, [r7, #14]
 8000804:	b29b      	uxth	r3, r3
 8000806:	8b7a      	ldrh	r2, [r7, #26]
 8000808:	429a      	cmp	r2, r3
 800080a:	d3ef      	bcc.n	80007ec <rc522_toCard+0x6c>
  }

  //Execute the command
  rc522_regWrite8(MFRC522_REG_COMMAND, command);
 800080c:	7bfb      	ldrb	r3, [r7, #15]
 800080e:	4619      	mov	r1, r3
 8000810:	2001      	movs	r0, #1
 8000812:	f7ff fef9 	bl	8000608 <rc522_regWrite8>
  if (command == PCD_TRANSCEIVE) {
 8000816:	7bfb      	ldrb	r3, [r7, #15]
 8000818:	2b0c      	cmp	r3, #12
 800081a:	d103      	bne.n	8000824 <rc522_toCard+0xa4>
    rc522_setBit(MFRC522_REG_BIT_FRAMING, 0x80);   //StartSend=1,transmission of data starts
 800081c:	2180      	movs	r1, #128	; 0x80
 800081e:	200d      	movs	r0, #13
 8000820:	f7ff ff13 	bl	800064a <rc522_setBit>
  }

  //Waiting to receive data to complete
  i = 100;  //i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 8000824:	2364      	movs	r3, #100	; 0x64
 8000826:	837b      	strh	r3, [r7, #26]
  do {
    //CommIrqReg[7..0]
    //Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
    n = rc522_regRead8(MFRC522_REG_COMM_IRQ);
 8000828:	2004      	movs	r0, #4
 800082a:	f7ff fec5 	bl	80005b8 <rc522_regRead8>
 800082e:	4603      	mov	r3, r0
 8000830:	773b      	strb	r3, [r7, #28]
    i--;
 8000832:	8b7b      	ldrh	r3, [r7, #26]
 8000834:	3b01      	subs	r3, #1
 8000836:	837b      	strh	r3, [r7, #26]
  } while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000838:	8b7b      	ldrh	r3, [r7, #26]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d00a      	beq.n	8000854 <rc522_toCard+0xd4>
 800083e:	7f3b      	ldrb	r3, [r7, #28]
 8000840:	f003 0301 	and.w	r3, r3, #1
 8000844:	2b00      	cmp	r3, #0
 8000846:	d105      	bne.n	8000854 <rc522_toCard+0xd4>
 8000848:	7f3a      	ldrb	r2, [r7, #28]
 800084a:	7f7b      	ldrb	r3, [r7, #29]
 800084c:	4013      	ands	r3, r2
 800084e:	b2db      	uxtb	r3, r3
 8000850:	2b00      	cmp	r3, #0
 8000852:	d0e9      	beq.n	8000828 <rc522_toCard+0xa8>

  rc522_clearBit(MFRC522_REG_BIT_FRAMING, 0x80);     //StartSend=0
 8000854:	2180      	movs	r1, #128	; 0x80
 8000856:	200d      	movs	r0, #13
 8000858:	f7ff ff11 	bl	800067e <rc522_clearBit>

  if (i != 0)  {
 800085c:	8b7b      	ldrh	r3, [r7, #26]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d06d      	beq.n	800093e <rc522_toCard+0x1be>
    if (!(rc522_regRead8(MFRC522_REG_ERROR) & 0x1B)) {
 8000862:	2006      	movs	r0, #6
 8000864:	f7ff fea8 	bl	80005b8 <rc522_regRead8>
 8000868:	4603      	mov	r3, r0
 800086a:	f003 031b 	and.w	r3, r3, #27
 800086e:	2b00      	cmp	r3, #0
 8000870:	d160      	bne.n	8000934 <rc522_toCard+0x1b4>
      status = true;
 8000872:	2301      	movs	r3, #1
 8000874:	77fb      	strb	r3, [r7, #31]
      if (n & irqEn & 0x01) {
 8000876:	7f3a      	ldrb	r2, [r7, #28]
 8000878:	7fbb      	ldrb	r3, [r7, #30]
 800087a:	4013      	ands	r3, r2
 800087c:	b2db      	uxtb	r3, r3
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <rc522_toCard+0x10a>
        status = false;
 8000886:	2300      	movs	r3, #0
 8000888:	77fb      	strb	r3, [r7, #31]
      }

      if (command == PCD_TRANSCEIVE) {
 800088a:	7bfb      	ldrb	r3, [r7, #15]
 800088c:	2b0c      	cmp	r3, #12
 800088e:	d156      	bne.n	800093e <rc522_toCard+0x1be>
        n = rc522_regRead8(MFRC522_REG_FIFO_LEVEL);
 8000890:	200a      	movs	r0, #10
 8000892:	f7ff fe91 	bl	80005b8 <rc522_regRead8>
 8000896:	4603      	mov	r3, r0
 8000898:	773b      	strb	r3, [r7, #28]
        uint8_t l = n;
 800089a:	7f3b      	ldrb	r3, [r7, #28]
 800089c:	767b      	strb	r3, [r7, #25]
        lastBits = rc522_regRead8(MFRC522_REG_CONTROL) & 0x07;
 800089e:	200c      	movs	r0, #12
 80008a0:	f7ff fe8a 	bl	80005b8 <rc522_regRead8>
 80008a4:	4603      	mov	r3, r0
 80008a6:	f003 0307 	and.w	r3, r3, #7
 80008aa:	763b      	strb	r3, [r7, #24]
        if (lastBits) {
 80008ac:	7e3b      	ldrb	r3, [r7, #24]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d00b      	beq.n	80008ca <rc522_toCard+0x14a>
          *backLen = (n - 1) * 8 + lastBits;
 80008b2:	7f3b      	ldrb	r3, [r7, #28]
 80008b4:	3b01      	subs	r3, #1
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	00db      	lsls	r3, r3, #3
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	7e3b      	ldrb	r3, [r7, #24]
 80008be:	b29b      	uxth	r3, r3
 80008c0:	4413      	add	r3, r2
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008c6:	801a      	strh	r2, [r3, #0]
 80008c8:	e005      	b.n	80008d6 <rc522_toCard+0x156>
        } else {
          *backLen = n * 8;
 80008ca:	7f3b      	ldrb	r3, [r7, #28]
 80008cc:	b29b      	uxth	r3, r3
 80008ce:	00db      	lsls	r3, r3, #3
 80008d0:	b29a      	uxth	r2, r3
 80008d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008d4:	801a      	strh	r2, [r3, #0]
        }

        if (n == 0) {
 80008d6:	7f3b      	ldrb	r3, [r7, #28]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d101      	bne.n	80008e0 <rc522_toCard+0x160>
          n = 1;
 80008dc:	2301      	movs	r3, #1
 80008de:	773b      	strb	r3, [r7, #28]
        }
        if (n > MFRC522_MAX_LEN) {
 80008e0:	7f3b      	ldrb	r3, [r7, #28]
 80008e2:	2b10      	cmp	r3, #16
 80008e4:	d901      	bls.n	80008ea <rc522_toCard+0x16a>
          n = MFRC522_MAX_LEN;
 80008e6:	2310      	movs	r3, #16
 80008e8:	773b      	strb	r3, [r7, #28]
        }

        //Reading the received data in FIFO
        for (i = 0; i < n; i++) {
 80008ea:	2300      	movs	r3, #0
 80008ec:	837b      	strh	r3, [r7, #26]
 80008ee:	e014      	b.n	800091a <rc522_toCard+0x19a>
          uint8_t d = rc522_regRead8(MFRC522_REG_FIFO_DATA);
 80008f0:	2009      	movs	r0, #9
 80008f2:	f7ff fe61 	bl	80005b8 <rc522_regRead8>
 80008f6:	4603      	mov	r3, r0
 80008f8:	75fb      	strb	r3, [r7, #23]
          if (l == 4)
 80008fa:	7e7b      	ldrb	r3, [r7, #25]
 80008fc:	2b04      	cmp	r3, #4
 80008fe:	d104      	bne.n	800090a <rc522_toCard+0x18a>
            printf("%02x ", d);
 8000900:	7dfb      	ldrb	r3, [r7, #23]
 8000902:	4619      	mov	r1, r3
 8000904:	4810      	ldr	r0, [pc, #64]	; (8000948 <rc522_toCard+0x1c8>)
 8000906:	f001 fec1 	bl	800268c <iprintf>
          backData[i] = d;
 800090a:	8b7b      	ldrh	r3, [r7, #26]
 800090c:	687a      	ldr	r2, [r7, #4]
 800090e:	4413      	add	r3, r2
 8000910:	7dfa      	ldrb	r2, [r7, #23]
 8000912:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < n; i++) {
 8000914:	8b7b      	ldrh	r3, [r7, #26]
 8000916:	3301      	adds	r3, #1
 8000918:	837b      	strh	r3, [r7, #26]
 800091a:	7f3b      	ldrb	r3, [r7, #28]
 800091c:	b29b      	uxth	r3, r3
 800091e:	8b7a      	ldrh	r2, [r7, #26]
 8000920:	429a      	cmp	r2, r3
 8000922:	d3e5      	bcc.n	80008f0 <rc522_toCard+0x170>
        }
        if (l==4)
 8000924:	7e7b      	ldrb	r3, [r7, #25]
 8000926:	2b04      	cmp	r3, #4
 8000928:	d102      	bne.n	8000930 <rc522_toCard+0x1b0>
          printf("\r\n");
 800092a:	4808      	ldr	r0, [pc, #32]	; (800094c <rc522_toCard+0x1cc>)
 800092c:	f001 ff14 	bl	8002758 <puts>
        return status;
 8000930:	7ffb      	ldrb	r3, [r7, #31]
 8000932:	e005      	b.n	8000940 <rc522_toCard+0x1c0>
      }
    } else {
      printf("error\r\n");
 8000934:	4806      	ldr	r0, [pc, #24]	; (8000950 <rc522_toCard+0x1d0>)
 8000936:	f001 ff0f 	bl	8002758 <puts>
      status = false;
 800093a:	2300      	movs	r3, #0
 800093c:	77fb      	strb	r3, [r7, #31]
    }
  }

  return status;
 800093e:	7ffb      	ldrb	r3, [r7, #31]
}
 8000940:	4618      	mov	r0, r3
 8000942:	3720      	adds	r7, #32
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	080037f4 	.word	0x080037f4
 800094c:	080037fc 	.word	0x080037fc
 8000950:	08003800 	.word	0x08003800

08000954 <rc522_antiColl>:

bool rc522_antiColl(uint8_t* serNum)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af02      	add	r7, sp, #8
 800095a:	6078      	str	r0, [r7, #4]
  bool status;
  uint8_t i;
  uint8_t serNumCheck = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	737b      	strb	r3, [r7, #13]
  uint16_t unLen;
  //for (i = 0; i < 4; i++)
//    printf("Anticoll In %d: 0x%02x\r\n", i, serNum[i]);


  rc522_regWrite8(MFRC522_REG_BIT_FRAMING, 0x00);    //TxLastBists = BitFramingReg[2..0]
 8000960:	2100      	movs	r1, #0
 8000962:	200d      	movs	r0, #13
 8000964:	f7ff fe50 	bl	8000608 <rc522_regWrite8>

  serNum[0] = PICC_ANTICOLL;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2293      	movs	r2, #147	; 0x93
 800096c:	701a      	strb	r2, [r3, #0]
  serNum[1] = 0x20;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	3301      	adds	r3, #1
 8000972:	2220      	movs	r2, #32
 8000974:	701a      	strb	r2, [r3, #0]
  status = rc522_toCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8000976:	f107 030a 	add.w	r3, r7, #10
 800097a:	9300      	str	r3, [sp, #0]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2202      	movs	r2, #2
 8000980:	6879      	ldr	r1, [r7, #4]
 8000982:	200c      	movs	r0, #12
 8000984:	f7ff fefc 	bl	8000780 <rc522_toCard>
 8000988:	4603      	mov	r3, r0
 800098a:	73fb      	strb	r3, [r7, #15]

  //for (i = 0; i < 4; i++)
//      printf("Anticoll ToCard %d: 0x%02x\r\n", i, serNum[i]);

  if (status == true) {
 800098c:	7bfb      	ldrb	r3, [r7, #15]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d018      	beq.n	80009c4 <rc522_antiColl+0x70>
    //Check card serial number
    for (i = 0; i < 4; i++) {
 8000992:	2300      	movs	r3, #0
 8000994:	73bb      	strb	r3, [r7, #14]
 8000996:	e009      	b.n	80009ac <rc522_antiColl+0x58>
      serNumCheck ^= serNum[i];
 8000998:	7bbb      	ldrb	r3, [r7, #14]
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	4413      	add	r3, r2
 800099e:	781a      	ldrb	r2, [r3, #0]
 80009a0:	7b7b      	ldrb	r3, [r7, #13]
 80009a2:	4053      	eors	r3, r2
 80009a4:	737b      	strb	r3, [r7, #13]
    for (i = 0; i < 4; i++) {
 80009a6:	7bbb      	ldrb	r3, [r7, #14]
 80009a8:	3301      	adds	r3, #1
 80009aa:	73bb      	strb	r3, [r7, #14]
 80009ac:	7bbb      	ldrb	r3, [r7, #14]
 80009ae:	2b03      	cmp	r3, #3
 80009b0:	d9f2      	bls.n	8000998 <rc522_antiColl+0x44>
    }
    if (serNumCheck != serNum[i]) {
 80009b2:	7bbb      	ldrb	r3, [r7, #14]
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	4413      	add	r3, r2
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	7b7a      	ldrb	r2, [r7, #13]
 80009bc:	429a      	cmp	r2, r3
 80009be:	d001      	beq.n	80009c4 <rc522_antiColl+0x70>
      status = false;
 80009c0:	2300      	movs	r3, #0
 80009c2:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 80009c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}

080009ce <rc522_halt>:

void rc522_halt(void)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b084      	sub	sp, #16
 80009d2:	af02      	add	r7, sp, #8
  uint16_t unLen;
  uint8_t buff[4];

  buff[0] = PICC_HALT;
 80009d4:	2350      	movs	r3, #80	; 0x50
 80009d6:	703b      	strb	r3, [r7, #0]
  buff[1] = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	707b      	strb	r3, [r7, #1]
  rc522_calculateCRC(buff, 2, &buff[2]);
 80009dc:	463b      	mov	r3, r7
 80009de:	1c9a      	adds	r2, r3, #2
 80009e0:	463b      	mov	r3, r7
 80009e2:	2102      	movs	r1, #2
 80009e4:	4618      	mov	r0, r3
 80009e6:	f000 f80d 	bl	8000a04 <rc522_calculateCRC>

  rc522_toCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 80009ea:	463a      	mov	r2, r7
 80009ec:	4639      	mov	r1, r7
 80009ee:	1dbb      	adds	r3, r7, #6
 80009f0:	9300      	str	r3, [sp, #0]
 80009f2:	4613      	mov	r3, r2
 80009f4:	2204      	movs	r2, #4
 80009f6:	200c      	movs	r0, #12
 80009f8:	f7ff fec2 	bl	8000780 <rc522_toCard>
}
 80009fc:	bf00      	nop
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <rc522_calculateCRC>:

void rc522_calculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData)
{
 8000a04:	b590      	push	{r4, r7, lr}
 8000a06:	b087      	sub	sp, #28
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	60f8      	str	r0, [r7, #12]
 8000a0c:	460b      	mov	r3, r1
 8000a0e:	607a      	str	r2, [r7, #4]
 8000a10:	72fb      	strb	r3, [r7, #11]
  uint8_t i, n;

  rc522_clearBit(MFRC522_REG_DIV_IRQ, 0x04);     //CRCIrq = 0
 8000a12:	2104      	movs	r1, #4
 8000a14:	2005      	movs	r0, #5
 8000a16:	f7ff fe32 	bl	800067e <rc522_clearBit>
  rc522_setBit(MFRC522_REG_FIFO_LEVEL, 0x80);      //Clear the FIFO pointer
 8000a1a:	2180      	movs	r1, #128	; 0x80
 8000a1c:	200a      	movs	r0, #10
 8000a1e:	f7ff fe14 	bl	800064a <rc522_setBit>
  //Write_MFRC522(CommandReg, PCD_IDLE);

  //Writing data to the FIFO
  for (i = 0; i < len; i++) {
 8000a22:	2300      	movs	r3, #0
 8000a24:	75fb      	strb	r3, [r7, #23]
 8000a26:	e00a      	b.n	8000a3e <rc522_calculateCRC+0x3a>
    rc522_regWrite8(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 8000a28:	7dfb      	ldrb	r3, [r7, #23]
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	4619      	mov	r1, r3
 8000a32:	2009      	movs	r0, #9
 8000a34:	f7ff fde8 	bl	8000608 <rc522_regWrite8>
  for (i = 0; i < len; i++) {
 8000a38:	7dfb      	ldrb	r3, [r7, #23]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	75fb      	strb	r3, [r7, #23]
 8000a3e:	7dfa      	ldrb	r2, [r7, #23]
 8000a40:	7afb      	ldrb	r3, [r7, #11]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d3f0      	bcc.n	8000a28 <rc522_calculateCRC+0x24>
  }
  rc522_regWrite8(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8000a46:	2103      	movs	r1, #3
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f7ff fddd 	bl	8000608 <rc522_regWrite8>

  //Wait CRC calculation is complete
  i = 0xFF;
 8000a4e:	23ff      	movs	r3, #255	; 0xff
 8000a50:	75fb      	strb	r3, [r7, #23]
  do {
    n = rc522_regRead8(MFRC522_REG_DIV_IRQ);
 8000a52:	2005      	movs	r0, #5
 8000a54:	f7ff fdb0 	bl	80005b8 <rc522_regRead8>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	75bb      	strb	r3, [r7, #22]
    i--;
 8000a5c:	7dfb      	ldrb	r3, [r7, #23]
 8000a5e:	3b01      	subs	r3, #1
 8000a60:	75fb      	strb	r3, [r7, #23]
  } while ((i!=0) && !(n&0x04));      //CRCIrq = 1
 8000a62:	7dfb      	ldrb	r3, [r7, #23]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d004      	beq.n	8000a72 <rc522_calculateCRC+0x6e>
 8000a68:	7dbb      	ldrb	r3, [r7, #22]
 8000a6a:	f003 0304 	and.w	r3, r3, #4
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d0ef      	beq.n	8000a52 <rc522_calculateCRC+0x4e>

  //Read CRC calculation result
  pOutData[0] = rc522_regRead8(MFRC522_REG_CRC_RESULT_L);
 8000a72:	2022      	movs	r0, #34	; 0x22
 8000a74:	f7ff fda0 	bl	80005b8 <rc522_regRead8>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	701a      	strb	r2, [r3, #0]
  pOutData[1] = rc522_regRead8(MFRC522_REG_CRC_RESULT_M);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	1c5c      	adds	r4, r3, #1
 8000a84:	2021      	movs	r0, #33	; 0x21
 8000a86:	f7ff fd97 	bl	80005b8 <rc522_regRead8>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	7023      	strb	r3, [r4, #0]
}
 8000a8e:	bf00      	nop
 8000a90:	371c      	adds	r7, #28
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd90      	pop	{r4, r7, pc}
	...

08000a98 <rc522_init>:
  }
  return true;
}

void rc522_init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
	 * STM32 ->RFID
	 * SPI  -> SPI
	 * PA8  ->RST
	 * PB0  ->CS
	 * */
  SPI1_Pins_Init();
 8000a9e:	f000 f9d3 	bl	8000e48 <SPI1_Pins_Init>
  SPI1_Init();
 8000aa2:	f000 f9f7 	bl	8000e94 <SPI1_Init>
  GPIOA->MODER|=GPIO_MODER_MODE8_0;
 8000aa6:	4b2d      	ldr	r3, [pc, #180]	; (8000b5c <rc522_init+0xc4>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a2c      	ldr	r2, [pc, #176]	; (8000b5c <rc522_init+0xc4>)
 8000aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ab0:	6013      	str	r3, [r2, #0]
  GPIOA->MODER&=~GPIO_MODER_MODE8_1;
 8000ab2:	4b2a      	ldr	r3, [pc, #168]	; (8000b5c <rc522_init+0xc4>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a29      	ldr	r2, [pc, #164]	; (8000b5c <rc522_init+0xc4>)
 8000ab8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000abc:	6013      	str	r3, [r2, #0]

  RCC->AHB1ENR|=RCC_AHB1ENR_GPIOBEN;
 8000abe:	4b28      	ldr	r3, [pc, #160]	; (8000b60 <rc522_init+0xc8>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a27      	ldr	r2, [pc, #156]	; (8000b60 <rc522_init+0xc8>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30

  GPIOB->MODER|=GPIO_MODER_MODE0_0;
 8000aca:	4b26      	ldr	r3, [pc, #152]	; (8000b64 <rc522_init+0xcc>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a25      	ldr	r2, [pc, #148]	; (8000b64 <rc522_init+0xcc>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	6013      	str	r3, [r2, #0]
  GPIOB->MODER&=~GPIO_MODER_MODE0_1;
 8000ad6:	4b23      	ldr	r3, [pc, #140]	; (8000b64 <rc522_init+0xcc>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a22      	ldr	r2, [pc, #136]	; (8000b64 <rc522_init+0xcc>)
 8000adc:	f023 0302 	bic.w	r3, r3, #2
 8000ae0:	6013      	str	r3, [r2, #0]
  GPIOA->BSRR=GPIO_BSRR_BR8;
 8000ae2:	4b1e      	ldr	r3, [pc, #120]	; (8000b5c <rc522_init+0xc4>)
 8000ae4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000ae8:	619a      	str	r2, [r3, #24]
  for(volatile int i=0;i<100000;i++);
 8000aea:	2300      	movs	r3, #0
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	e002      	b.n	8000af6 <rc522_init+0x5e>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3301      	adds	r3, #1
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a1b      	ldr	r2, [pc, #108]	; (8000b68 <rc522_init+0xd0>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	ddf8      	ble.n	8000af0 <rc522_init+0x58>
  GPIOA->BSRR=GPIO_BSRR_BS8;
 8000afe:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <rc522_init+0xc4>)
 8000b00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b04:	619a      	str	r2, [r3, #24]
  for(volatile int i=0;i<100000;i++);
 8000b06:	2300      	movs	r3, #0
 8000b08:	603b      	str	r3, [r7, #0]
 8000b0a:	e002      	b.n	8000b12 <rc522_init+0x7a>
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	603b      	str	r3, [r7, #0]
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	4a14      	ldr	r2, [pc, #80]	; (8000b68 <rc522_init+0xd0>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	ddf8      	ble.n	8000b0c <rc522_init+0x74>
  rc522_reset();
 8000b1a:	f7ff fdce 	bl	80006ba <rc522_reset>

  rc522_regWrite8(MFRC522_REG_T_MODE, 0x80);
 8000b1e:	2180      	movs	r1, #128	; 0x80
 8000b20:	202a      	movs	r0, #42	; 0x2a
 8000b22:	f7ff fd71 	bl	8000608 <rc522_regWrite8>
  rc522_regWrite8(MFRC522_REG_T_PRESCALER, 0xA9);
 8000b26:	21a9      	movs	r1, #169	; 0xa9
 8000b28:	202b      	movs	r0, #43	; 0x2b
 8000b2a:	f7ff fd6d 	bl	8000608 <rc522_regWrite8>
  rc522_regWrite8(MFRC522_REG_T_RELOAD_L, 0xE8);
 8000b2e:	21e8      	movs	r1, #232	; 0xe8
 8000b30:	202d      	movs	r0, #45	; 0x2d
 8000b32:	f7ff fd69 	bl	8000608 <rc522_regWrite8>
  rc522_regWrite8(MFRC522_REG_T_RELOAD_H, 0x03);
 8000b36:	2103      	movs	r1, #3
 8000b38:	202c      	movs	r0, #44	; 0x2c
 8000b3a:	f7ff fd65 	bl	8000608 <rc522_regWrite8>


  rc522_regWrite8(MFRC522_REG_TX_AUTO, 0x40);
 8000b3e:	2140      	movs	r1, #64	; 0x40
 8000b40:	2015      	movs	r0, #21
 8000b42:	f7ff fd61 	bl	8000608 <rc522_regWrite8>
  rc522_regWrite8(MFRC522_REG_MODE, 0x3D);
 8000b46:	213d      	movs	r1, #61	; 0x3d
 8000b48:	2011      	movs	r0, #17
 8000b4a:	f7ff fd5d 	bl	8000608 <rc522_regWrite8>

  rc522_antennaON();   //Open the antenna
 8000b4e:	f7ff fdbc 	bl	80006ca <rc522_antennaON>
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40020000 	.word	0x40020000
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40020400 	.word	0x40020400
 8000b68:	0001869f 	.word	0x0001869f

08000b6c <delay>:

			 
	}

void delay(int ms)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]

	SysTick->LOAD=16000-1;
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <delay+0x50>)
 8000b76:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000b7a:	605a      	str	r2, [r3, #4]
	SysTick->VAL=0;
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <delay+0x50>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
	SysTick->CTRL=0x5;
 8000b82:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <delay+0x50>)
 8000b84:	2205      	movs	r2, #5
 8000b86:	601a      	str	r2, [r3, #0]
		for (int i=0;i<ms;i++)
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	e009      	b.n	8000ba2 <delay+0x36>
		{
			while(!(SysTick->CTRL &0x10000)){}
 8000b8e:	bf00      	nop
 8000b90:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <delay+0x50>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d0f9      	beq.n	8000b90 <delay+0x24>
		for (int i=0;i<ms;i++)
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	68fa      	ldr	r2, [r7, #12]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	dbf1      	blt.n	8000b8e <delay+0x22>
		}
	SysTick->CTRL=0;	
 8000baa:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <delay+0x50>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]

}
 8000bb0:	bf00      	nop
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000e010 	.word	0xe000e010

08000bc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc0:	b590      	push	{r4, r7, lr}
 8000bc2:	b089      	sub	sp, #36	; 0x24
 8000bc4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bc6:	f000 fb9b 	bl	8001300 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bca:	f000 f82f 	bl	8000c2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bce:	f000 f8cd 	bl	8000d6c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000bd2:	f000 f895 	bl	8000d00 <MX_SPI1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  rc522_init();
 8000bd6:	f7ff ff5f 	bl	8000a98 <rc522_init>
  delay(2000);
 8000bda:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000bde:	f7ff ffc5 	bl	8000b6c <delay>
  while (1)
  {
	if(rc522_checkCard(rfid_id))
 8000be2:	4810      	ldr	r0, [pc, #64]	; (8000c24 <main+0x64>)
 8000be4:	f7ff fd86 	bl	80006f4 <rc522_checkCard>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d016      	beq.n	8000c1c <main+0x5c>
	{
		char data[20];
		sprintf(data,"0x%x 0x%x 0x%x 0x%x",rfid_id[0],rfid_id[1],rfid_id[2],rfid_id[3]);
 8000bee:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <main+0x64>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <main+0x64>)
 8000bf6:	785b      	ldrb	r3, [r3, #1]
 8000bf8:	461c      	mov	r4, r3
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <main+0x64>)
 8000bfc:	789b      	ldrb	r3, [r3, #2]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <main+0x64>)
 8000c02:	78db      	ldrb	r3, [r3, #3]
 8000c04:	1d38      	adds	r0, r7, #4
 8000c06:	9301      	str	r3, [sp, #4]
 8000c08:	9200      	str	r2, [sp, #0]
 8000c0a:	4623      	mov	r3, r4
 8000c0c:	460a      	mov	r2, r1
 8000c0e:	4906      	ldr	r1, [pc, #24]	; (8000c28 <main+0x68>)
 8000c10:	f001 fdaa 	bl	8002768 <siprintf>
		delay(1000);
 8000c14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c18:	f7ff ffa8 	bl	8000b6c <delay>
	}
	delay(100);
 8000c1c:	2064      	movs	r0, #100	; 0x64
 8000c1e:	f7ff ffa5 	bl	8000b6c <delay>
	if(rc522_checkCard(rfid_id))
 8000c22:	e7de      	b.n	8000be2 <main+0x22>
 8000c24:	200000dc 	.word	0x200000dc
 8000c28:	08003808 	.word	0x08003808

08000c2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b094      	sub	sp, #80	; 0x50
 8000c30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c32:	f107 0320 	add.w	r3, r7, #32
 8000c36:	2230      	movs	r2, #48	; 0x30
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f001 fe8c 	bl	8002958 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c40:	f107 030c 	add.w	r3, r7, #12
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c50:	2300      	movs	r3, #0
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	4b28      	ldr	r3, [pc, #160]	; (8000cf8 <SystemClock_Config+0xcc>)
 8000c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c58:	4a27      	ldr	r2, [pc, #156]	; (8000cf8 <SystemClock_Config+0xcc>)
 8000c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c60:	4b25      	ldr	r3, [pc, #148]	; (8000cf8 <SystemClock_Config+0xcc>)
 8000c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	4b22      	ldr	r3, [pc, #136]	; (8000cfc <SystemClock_Config+0xd0>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c78:	4a20      	ldr	r2, [pc, #128]	; (8000cfc <SystemClock_Config+0xd0>)
 8000c7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c7e:	6013      	str	r3, [r2, #0]
 8000c80:	4b1e      	ldr	r3, [pc, #120]	; (8000cfc <SystemClock_Config+0xd0>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c96:	2302      	movs	r3, #2
 8000c98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000ca0:	230c      	movs	r3, #12
 8000ca2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000ca4:	2360      	movs	r3, #96	; 0x60
 8000ca6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ca8:	2304      	movs	r3, #4
 8000caa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cac:	2304      	movs	r3, #4
 8000cae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb0:	f107 0320 	add.w	r3, r7, #32
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f000 fe67 	bl	8001988 <HAL_RCC_OscConfig>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000cc0:	f000 f8bc 	bl	8000e3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc4:	230f      	movs	r3, #15
 8000cc6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000cda:	f107 030c 	add.w	r3, r7, #12
 8000cde:	2101      	movs	r1, #1
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f001 f8c9 	bl	8001e78 <HAL_RCC_ClockConfig>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000cec:	f000 f8a6 	bl	8000e3c <Error_Handler>
  }
}
 8000cf0:	bf00      	nop
 8000cf2:	3750      	adds	r7, #80	; 0x50
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40007000 	.word	0x40007000

08000d00 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d04:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <MX_SPI1_Init+0x64>)
 8000d06:	4a18      	ldr	r2, [pc, #96]	; (8000d68 <MX_SPI1_Init+0x68>)
 8000d08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d0a:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <MX_SPI1_Init+0x64>)
 8000d0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d12:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <MX_SPI1_Init+0x64>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <MX_SPI1_Init+0x64>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <MX_SPI1_Init+0x64>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d24:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <MX_SPI1_Init+0x64>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <MX_SPI1_Init+0x64>)
 8000d2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000d32:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <MX_SPI1_Init+0x64>)
 8000d34:	2228      	movs	r2, #40	; 0x28
 8000d36:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d38:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <MX_SPI1_Init+0x64>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <MX_SPI1_Init+0x64>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d44:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <MX_SPI1_Init+0x64>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <MX_SPI1_Init+0x64>)
 8000d4c:	220a      	movs	r2, #10
 8000d4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d50:	4804      	ldr	r0, [pc, #16]	; (8000d64 <MX_SPI1_Init+0x64>)
 8000d52:	f001 fa3d 	bl	80021d0 <HAL_SPI_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d5c:	f000 f86e 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000084 	.word	0x20000084
 8000d68:	40013000 	.word	0x40013000

08000d6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b088      	sub	sp, #32
 8000d70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d72:	f107 030c 	add.w	r3, r7, #12
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
 8000d7e:	60da      	str	r2, [r3, #12]
 8000d80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	4b2a      	ldr	r3, [pc, #168]	; (8000e30 <MX_GPIO_Init+0xc4>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a29      	ldr	r2, [pc, #164]	; (8000e30 <MX_GPIO_Init+0xc4>)
 8000d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b27      	ldr	r3, [pc, #156]	; (8000e30 <MX_GPIO_Init+0xc4>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	4b23      	ldr	r3, [pc, #140]	; (8000e30 <MX_GPIO_Init+0xc4>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a22      	ldr	r2, [pc, #136]	; (8000e30 <MX_GPIO_Init+0xc4>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b20      	ldr	r3, [pc, #128]	; (8000e30 <MX_GPIO_Init+0xc4>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	603b      	str	r3, [r7, #0]
 8000dbe:	4b1c      	ldr	r3, [pc, #112]	; (8000e30 <MX_GPIO_Init+0xc4>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	4a1b      	ldr	r2, [pc, #108]	; (8000e30 <MX_GPIO_Init+0xc4>)
 8000dc4:	f043 0302 	orr.w	r3, r3, #2
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dca:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <MX_GPIO_Init+0xc4>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	603b      	str	r3, [r7, #0]
 8000dd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2101      	movs	r1, #1
 8000dda:	4816      	ldr	r0, [pc, #88]	; (8000e34 <MX_GPIO_Init+0xc8>)
 8000ddc:	f000 fdba 	bl	8001954 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000de0:	2201      	movs	r2, #1
 8000de2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000de6:	4814      	ldr	r0, [pc, #80]	; (8000e38 <MX_GPIO_Init+0xcc>)
 8000de8:	f000 fdb4 	bl	8001954 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dec:	2301      	movs	r3, #1
 8000dee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df0:	2301      	movs	r3, #1
 8000df2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfc:	f107 030c 	add.w	r3, r7, #12
 8000e00:	4619      	mov	r1, r3
 8000e02:	480c      	ldr	r0, [pc, #48]	; (8000e34 <MX_GPIO_Init+0xc8>)
 8000e04:	f000 fc22 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e16:	2303      	movs	r3, #3
 8000e18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1a:	f107 030c 	add.w	r3, r7, #12
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4805      	ldr	r0, [pc, #20]	; (8000e38 <MX_GPIO_Init+0xcc>)
 8000e22:	f000 fc13 	bl	800164c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e26:	bf00      	nop
 8000e28:	3720      	adds	r7, #32
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40023800 	.word	0x40023800
 8000e34:	40020400 	.word	0x40020400
 8000e38:	40020000 	.word	0x40020000

08000e3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e40:	b672      	cpsid	i
}
 8000e42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <Error_Handler+0x8>
	...

08000e48 <SPI1_Pins_Init>:

#include "stm32f4xx.h"


void SPI1_Pins_Init()
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR|=RCC_AHB1ENR_GPIOAEN; //enable clock for GPIOA
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <SPI1_Pins_Init+0x44>)
 8000e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e50:	4a0e      	ldr	r2, [pc, #56]	; (8000e8c <SPI1_Pins_Init+0x44>)
 8000e52:	f043 0301 	orr.w	r3, r3, #1
 8000e56:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER|=GPIO_MODER_MODE5_1|GPIO_MODER_MODE6_1|GPIO_MODER_MODE7_1; //set PA5, PA6 and PA7 to alternate function mode
 8000e58:	4b0d      	ldr	r3, [pc, #52]	; (8000e90 <SPI1_Pins_Init+0x48>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a0c      	ldr	r2, [pc, #48]	; (8000e90 <SPI1_Pins_Init+0x48>)
 8000e5e:	f443 4328 	orr.w	r3, r3, #43008	; 0xa800
 8000e62:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(GPIO_MODER_MODE5_0|GPIO_MODER_MODE6_0|GPIO_MODER_MODE7_0);
 8000e64:	4b0a      	ldr	r3, [pc, #40]	; (8000e90 <SPI1_Pins_Init+0x48>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a09      	ldr	r2, [pc, #36]	; (8000e90 <SPI1_Pins_Init+0x48>)
 8000e6a:	f423 43a8 	bic.w	r3, r3, #21504	; 0x5400
 8000e6e:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0]|=(0x05<<20)|(0x05<<24)|(0x05<<28);
 8000e70:	4b07      	ldr	r3, [pc, #28]	; (8000e90 <SPI1_Pins_Init+0x48>)
 8000e72:	6a1b      	ldr	r3, [r3, #32]
 8000e74:	4a06      	ldr	r2, [pc, #24]	; (8000e90 <SPI1_Pins_Init+0x48>)
 8000e76:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000e7a:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8000e7e:	6213      	str	r3, [r2, #32]
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40020000 	.word	0x40020000

08000e94 <SPI1_Init>:



void SPI1_Init()
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
	/*Enable clock access to SPI1 module*/
		RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8000e98:	4b23      	ldr	r3, [pc, #140]	; (8000f28 <SPI1_Init+0x94>)
 8000e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9c:	4a22      	ldr	r2, [pc, #136]	; (8000f28 <SPI1_Init+0x94>)
 8000e9e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ea2:	6453      	str	r3, [r2, #68]	; 0x44

		/*Set clock to fPCLK/4*/
		SPI1->CR1 |=(1U<<3);
 8000ea4:	4b21      	ldr	r3, [pc, #132]	; (8000f2c <SPI1_Init+0x98>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a20      	ldr	r2, [pc, #128]	; (8000f2c <SPI1_Init+0x98>)
 8000eaa:	f043 0308 	orr.w	r3, r3, #8
 8000eae:	6013      	str	r3, [r2, #0]
		SPI1->CR1 &=~(1U<<4);
 8000eb0:	4b1e      	ldr	r3, [pc, #120]	; (8000f2c <SPI1_Init+0x98>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a1d      	ldr	r2, [pc, #116]	; (8000f2c <SPI1_Init+0x98>)
 8000eb6:	f023 0310 	bic.w	r3, r3, #16
 8000eba:	6013      	str	r3, [r2, #0]
		SPI1->CR1 &=~(1U<<5);
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	; (8000f2c <SPI1_Init+0x98>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a1a      	ldr	r2, [pc, #104]	; (8000f2c <SPI1_Init+0x98>)
 8000ec2:	f023 0320 	bic.w	r3, r3, #32
 8000ec6:	6013      	str	r3, [r2, #0]

		/*Enable full duplex*/
		SPI1->CR1 &=~(1U<<10);
 8000ec8:	4b18      	ldr	r3, [pc, #96]	; (8000f2c <SPI1_Init+0x98>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a17      	ldr	r2, [pc, #92]	; (8000f2c <SPI1_Init+0x98>)
 8000ece:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000ed2:	6013      	str	r3, [r2, #0]

		/*Set MSB first*/
		SPI1->CR1 &= ~(1U<<7);
 8000ed4:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <SPI1_Init+0x98>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a14      	ldr	r2, [pc, #80]	; (8000f2c <SPI1_Init+0x98>)
 8000eda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000ede:	6013      	str	r3, [r2, #0]

		/*Set mode to MASTER*/
		SPI1->CR1 |= (1U<<2);
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <SPI1_Init+0x98>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a11      	ldr	r2, [pc, #68]	; (8000f2c <SPI1_Init+0x98>)
 8000ee6:	f043 0304 	orr.w	r3, r3, #4
 8000eea:	6013      	str	r3, [r2, #0]

		/*Set 8 bit data mode*/
		SPI1->CR1 &= ~(1U<<11);
 8000eec:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <SPI1_Init+0x98>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a0e      	ldr	r2, [pc, #56]	; (8000f2c <SPI1_Init+0x98>)
 8000ef2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000ef6:	6013      	str	r3, [r2, #0]

		/*Select software slave management by
		 * setting SSM=1 and SSI=1*/
		SPI1->CR1 |= (1<<8);
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <SPI1_Init+0x98>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a0b      	ldr	r2, [pc, #44]	; (8000f2c <SPI1_Init+0x98>)
 8000efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f02:	6013      	str	r3, [r2, #0]
		SPI1->CR1 |= (1<<9);
 8000f04:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <SPI1_Init+0x98>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a08      	ldr	r2, [pc, #32]	; (8000f2c <SPI1_Init+0x98>)
 8000f0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f0e:	6013      	str	r3, [r2, #0]

		/*Enable SPI module*/
		SPI1->CR1 |= (1<<6);
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <SPI1_Init+0x98>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a05      	ldr	r2, [pc, #20]	; (8000f2c <SPI1_Init+0x98>)
 8000f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f1a:	6013      	str	r3, [r2, #0]
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40013000 	.word	0x40013000

08000f30 <spi1_transmit>:




void spi1_transmit(uint8_t *data,uint32_t size)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
	uint32_t i=0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]

	while(i<size)
 8000f3e:	e00f      	b.n	8000f60 <spi1_transmit+0x30>
	{
		/*Wait until TXE is set*/
		while(!(SPI1->SR & (SPI_SR_TXE))){}
 8000f40:	bf00      	nop
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <spi1_transmit+0x68>)
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d0f9      	beq.n	8000f42 <spi1_transmit+0x12>

		/*Write the data to the data register*/
		SPI1->DR = data[i];
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4413      	add	r3, r2
 8000f54:	781a      	ldrb	r2, [r3, #0]
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <spi1_transmit+0x68>)
 8000f58:	60da      	str	r2, [r3, #12]
		i++;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	60fb      	str	r3, [r7, #12]
	while(i<size)
 8000f60:	68fa      	ldr	r2, [r7, #12]
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d3eb      	bcc.n	8000f40 <spi1_transmit+0x10>
	}
	/*Wait until TXE is set*/
	while(!(SPI1->SR & (SPI_SR_TXE))){}
 8000f68:	bf00      	nop
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <spi1_transmit+0x68>)
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d0f9      	beq.n	8000f6a <spi1_transmit+0x3a>

	/*Wait for BUSY flag to reset*/
	while((SPI1->SR & (SPI_SR_BSY))){}
 8000f76:	bf00      	nop
 8000f78:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <spi1_transmit+0x68>)
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d1f9      	bne.n	8000f78 <spi1_transmit+0x48>

	/*Clear OVR flag*/
	(void)SPI1->DR;
 8000f84:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <spi1_transmit+0x68>)
 8000f86:	68db      	ldr	r3, [r3, #12]
	(void)SPI1->SR;
 8000f88:	4b03      	ldr	r3, [pc, #12]	; (8000f98 <spi1_transmit+0x68>)
 8000f8a:	689b      	ldr	r3, [r3, #8]
}
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	40013000 	.word	0x40013000

08000f9c <spi1_receive>:

void spi1_receive(uint8_t *data,uint32_t size)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
	while(size)
 8000fa6:	e013      	b.n	8000fd0 <spi1_receive+0x34>
	{
		/*Send dummy data*/
		SPI1->DR =0;
 8000fa8:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <spi1_receive+0x48>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	60da      	str	r2, [r3, #12]

		/*Wait for RXNE flag to be set*/
		while(!(SPI1->SR & (SPI_SR_RXNE))){}
 8000fae:	bf00      	nop
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <spi1_receive+0x48>)
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d0f9      	beq.n	8000fb0 <spi1_receive+0x14>

		/*Read data from data register*/
		*data++ = (SPI1->DR);
 8000fbc:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <spi1_receive+0x48>)
 8000fbe:	68d9      	ldr	r1, [r3, #12]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	1c5a      	adds	r2, r3, #1
 8000fc4:	607a      	str	r2, [r7, #4]
 8000fc6:	b2ca      	uxtb	r2, r1
 8000fc8:	701a      	strb	r2, [r3, #0]
		size--;
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	603b      	str	r3, [r7, #0]
	while(size)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1e8      	bne.n	8000fa8 <spi1_receive+0xc>
	}
}
 8000fd6:	bf00      	nop
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	40013000 	.word	0x40013000

08000fe8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <HAL_MspInit+0x4c>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff6:	4a0f      	ldr	r2, [pc, #60]	; (8001034 <HAL_MspInit+0x4c>)
 8000ff8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ffe:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <HAL_MspInit+0x4c>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	603b      	str	r3, [r7, #0]
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <HAL_MspInit+0x4c>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	4a08      	ldr	r2, [pc, #32]	; (8001034 <HAL_MspInit+0x4c>)
 8001014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001018:	6413      	str	r3, [r2, #64]	; 0x40
 800101a:	4b06      	ldr	r3, [pc, #24]	; (8001034 <HAL_MspInit+0x4c>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001022:	603b      	str	r3, [r7, #0]
 8001024:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	40023800 	.word	0x40023800

08001038 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	; 0x28
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a1d      	ldr	r2, [pc, #116]	; (80010cc <HAL_SPI_MspInit+0x94>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d133      	bne.n	80010c2 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <HAL_SPI_MspInit+0x98>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	4a1b      	ldr	r2, [pc, #108]	; (80010d0 <HAL_SPI_MspInit+0x98>)
 8001064:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001068:	6453      	str	r3, [r2, #68]	; 0x44
 800106a:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <HAL_SPI_MspInit+0x98>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <HAL_SPI_MspInit+0x98>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	4a14      	ldr	r2, [pc, #80]	; (80010d0 <HAL_SPI_MspInit+0x98>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6313      	str	r3, [r2, #48]	; 0x30
 8001086:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <HAL_SPI_MspInit+0x98>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001092:	23e0      	movs	r3, #224	; 0xe0
 8001094:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109e:	2303      	movs	r3, #3
 80010a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010a2:	2305      	movs	r3, #5
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4619      	mov	r1, r3
 80010ac:	4809      	ldr	r0, [pc, #36]	; (80010d4 <HAL_SPI_MspInit+0x9c>)
 80010ae:	f000 facd 	bl	800164c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2100      	movs	r1, #0
 80010b6:	2023      	movs	r0, #35	; 0x23
 80010b8:	f000 fa6f 	bl	800159a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80010bc:	2023      	movs	r0, #35	; 0x23
 80010be:	f000 fa88 	bl	80015d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010c2:	bf00      	nop
 80010c4:	3728      	adds	r7, #40	; 0x28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40013000 	.word	0x40013000
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40020000 	.word	0x40020000

080010d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010dc:	e7fe      	b.n	80010dc <NMI_Handler+0x4>

080010de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e2:	e7fe      	b.n	80010e2 <HardFault_Handler+0x4>

080010e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <MemManage_Handler+0x4>

080010ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ee:	e7fe      	b.n	80010ee <BusFault_Handler+0x4>

080010f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <UsageFault_Handler+0x4>

080010f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001124:	f000 f93e 	bl	80013a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}

0800112c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001130:	4802      	ldr	r0, [pc, #8]	; (800113c <SPI1_IRQHandler+0x10>)
 8001132:	f001 f8d7 	bl	80022e4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000084 	.word	0x20000084

08001140 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
 8001150:	e00a      	b.n	8001168 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001152:	f3af 8000 	nop.w
 8001156:	4601      	mov	r1, r0
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	1c5a      	adds	r2, r3, #1
 800115c:	60ba      	str	r2, [r7, #8]
 800115e:	b2ca      	uxtb	r2, r1
 8001160:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	3301      	adds	r3, #1
 8001166:	617b      	str	r3, [r7, #20]
 8001168:	697a      	ldr	r2, [r7, #20]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	429a      	cmp	r2, r3
 800116e:	dbf0      	blt.n	8001152 <_read+0x12>
  }

  return len;
 8001170:	687b      	ldr	r3, [r7, #4]
}
 8001172:	4618      	mov	r0, r3
 8001174:	3718      	adds	r7, #24
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b086      	sub	sp, #24
 800117e:	af00      	add	r7, sp, #0
 8001180:	60f8      	str	r0, [r7, #12]
 8001182:	60b9      	str	r1, [r7, #8]
 8001184:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
 800118a:	e009      	b.n	80011a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	1c5a      	adds	r2, r3, #1
 8001190:	60ba      	str	r2, [r7, #8]
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	3301      	adds	r3, #1
 800119e:	617b      	str	r3, [r7, #20]
 80011a0:	697a      	ldr	r2, [r7, #20]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	dbf1      	blt.n	800118c <_write+0x12>
  }
  return len;
 80011a8:	687b      	ldr	r3, [r7, #4]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3718      	adds	r7, #24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <_close>:

int _close(int file)
{
 80011b2:	b480      	push	{r7}
 80011b4:	b083      	sub	sp, #12
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011ca:	b480      	push	{r7}
 80011cc:	b083      	sub	sp, #12
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
 80011d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011da:	605a      	str	r2, [r3, #4]
  return 0;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <_isatty>:

int _isatty(int file)
{
 80011ea:	b480      	push	{r7}
 80011ec:	b083      	sub	sp, #12
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011f2:	2301      	movs	r3, #1
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3714      	adds	r7, #20
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001224:	4a14      	ldr	r2, [pc, #80]	; (8001278 <_sbrk+0x5c>)
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <_sbrk+0x60>)
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001230:	4b13      	ldr	r3, [pc, #76]	; (8001280 <_sbrk+0x64>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d102      	bne.n	800123e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <_sbrk+0x64>)
 800123a:	4a12      	ldr	r2, [pc, #72]	; (8001284 <_sbrk+0x68>)
 800123c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800123e:	4b10      	ldr	r3, [pc, #64]	; (8001280 <_sbrk+0x64>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4413      	add	r3, r2
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	429a      	cmp	r2, r3
 800124a:	d207      	bcs.n	800125c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800124c:	f001 fbd2 	bl	80029f4 <__errno>
 8001250:	4603      	mov	r3, r0
 8001252:	220c      	movs	r2, #12
 8001254:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001256:	f04f 33ff 	mov.w	r3, #4294967295
 800125a:	e009      	b.n	8001270 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800125c:	4b08      	ldr	r3, [pc, #32]	; (8001280 <_sbrk+0x64>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001262:	4b07      	ldr	r3, [pc, #28]	; (8001280 <_sbrk+0x64>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4413      	add	r3, r2
 800126a:	4a05      	ldr	r2, [pc, #20]	; (8001280 <_sbrk+0x64>)
 800126c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800126e:	68fb      	ldr	r3, [r7, #12]
}
 8001270:	4618      	mov	r0, r3
 8001272:	3718      	adds	r7, #24
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20010000 	.word	0x20010000
 800127c:	00000400 	.word	0x00000400
 8001280:	200000e0 	.word	0x200000e0
 8001284:	20000238 	.word	0x20000238

08001288 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800128c:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <SystemInit+0x20>)
 800128e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001292:	4a05      	ldr	r2, [pc, #20]	; (80012a8 <SystemInit+0x20>)
 8001294:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001298:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012e4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80012b0:	f7ff ffea 	bl	8001288 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012b4:	480c      	ldr	r0, [pc, #48]	; (80012e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012b6:	490d      	ldr	r1, [pc, #52]	; (80012ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012b8:	4a0d      	ldr	r2, [pc, #52]	; (80012f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012bc:	e002      	b.n	80012c4 <LoopCopyDataInit>

080012be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012c2:	3304      	adds	r3, #4

080012c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c8:	d3f9      	bcc.n	80012be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ca:	4a0a      	ldr	r2, [pc, #40]	; (80012f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012cc:	4c0a      	ldr	r4, [pc, #40]	; (80012f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d0:	e001      	b.n	80012d6 <LoopFillZerobss>

080012d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d4:	3204      	adds	r2, #4

080012d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d8:	d3fb      	bcc.n	80012d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012da:	f001 fb91 	bl	8002a00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012de:	f7ff fc6f 	bl	8000bc0 <main>
  bx  lr    
 80012e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012e4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80012e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012ec:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80012f0:	08003870 	.word	0x08003870
  ldr r2, =_sbss
 80012f4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80012f8:	20000234 	.word	0x20000234

080012fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012fc:	e7fe      	b.n	80012fc <ADC_IRQHandler>
	...

08001300 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001304:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <HAL_Init+0x40>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a0d      	ldr	r2, [pc, #52]	; (8001340 <HAL_Init+0x40>)
 800130a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800130e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001310:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <HAL_Init+0x40>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <HAL_Init+0x40>)
 8001316:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800131a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800131c:	4b08      	ldr	r3, [pc, #32]	; (8001340 <HAL_Init+0x40>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a07      	ldr	r2, [pc, #28]	; (8001340 <HAL_Init+0x40>)
 8001322:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001326:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001328:	2003      	movs	r0, #3
 800132a:	f000 f92b 	bl	8001584 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800132e:	200f      	movs	r0, #15
 8001330:	f000 f808 	bl	8001344 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001334:	f7ff fe58 	bl	8000fe8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40023c00 	.word	0x40023c00

08001344 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <HAL_InitTick+0x54>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4b12      	ldr	r3, [pc, #72]	; (800139c <HAL_InitTick+0x58>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	4619      	mov	r1, r3
 8001356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135a:	fbb3 f3f1 	udiv	r3, r3, r1
 800135e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001362:	4618      	mov	r0, r3
 8001364:	f000 f943 	bl	80015ee <HAL_SYSTICK_Config>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e00e      	b.n	8001390 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b0f      	cmp	r3, #15
 8001376:	d80a      	bhi.n	800138e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001378:	2200      	movs	r2, #0
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	f04f 30ff 	mov.w	r0, #4294967295
 8001380:	f000 f90b 	bl	800159a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001384:	4a06      	ldr	r2, [pc, #24]	; (80013a0 <HAL_InitTick+0x5c>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800138a:	2300      	movs	r3, #0
 800138c:	e000      	b.n	8001390 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
}
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000000 	.word	0x20000000
 800139c:	20000008 	.word	0x20000008
 80013a0:	20000004 	.word	0x20000004

080013a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <HAL_IncTick+0x20>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <HAL_IncTick+0x24>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4413      	add	r3, r2
 80013b4:	4a04      	ldr	r2, [pc, #16]	; (80013c8 <HAL_IncTick+0x24>)
 80013b6:	6013      	str	r3, [r2, #0]
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	20000008 	.word	0x20000008
 80013c8:	200000e4 	.word	0x200000e4

080013cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  return uwTick;
 80013d0:	4b03      	ldr	r3, [pc, #12]	; (80013e0 <HAL_GetTick+0x14>)
 80013d2:	681b      	ldr	r3, [r3, #0]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	200000e4 	.word	0x200000e4

080013e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <__NVIC_SetPriorityGrouping+0x44>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013fa:	68ba      	ldr	r2, [r7, #8]
 80013fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001400:	4013      	ands	r3, r2
 8001402:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800140c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001414:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001416:	4a04      	ldr	r2, [pc, #16]	; (8001428 <__NVIC_SetPriorityGrouping+0x44>)
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	60d3      	str	r3, [r2, #12]
}
 800141c:	bf00      	nop
 800141e:	3714      	adds	r7, #20
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001430:	4b04      	ldr	r3, [pc, #16]	; (8001444 <__NVIC_GetPriorityGrouping+0x18>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	0a1b      	lsrs	r3, r3, #8
 8001436:	f003 0307 	and.w	r3, r3, #7
}
 800143a:	4618      	mov	r0, r3
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	2b00      	cmp	r3, #0
 8001458:	db0b      	blt.n	8001472 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	f003 021f 	and.w	r2, r3, #31
 8001460:	4907      	ldr	r1, [pc, #28]	; (8001480 <__NVIC_EnableIRQ+0x38>)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	095b      	lsrs	r3, r3, #5
 8001468:	2001      	movs	r0, #1
 800146a:	fa00 f202 	lsl.w	r2, r0, r2
 800146e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	e000e100 	.word	0xe000e100

08001484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	6039      	str	r1, [r7, #0]
 800148e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001494:	2b00      	cmp	r3, #0
 8001496:	db0a      	blt.n	80014ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	b2da      	uxtb	r2, r3
 800149c:	490c      	ldr	r1, [pc, #48]	; (80014d0 <__NVIC_SetPriority+0x4c>)
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	0112      	lsls	r2, r2, #4
 80014a4:	b2d2      	uxtb	r2, r2
 80014a6:	440b      	add	r3, r1
 80014a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014ac:	e00a      	b.n	80014c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	4908      	ldr	r1, [pc, #32]	; (80014d4 <__NVIC_SetPriority+0x50>)
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	f003 030f 	and.w	r3, r3, #15
 80014ba:	3b04      	subs	r3, #4
 80014bc:	0112      	lsls	r2, r2, #4
 80014be:	b2d2      	uxtb	r2, r2
 80014c0:	440b      	add	r3, r1
 80014c2:	761a      	strb	r2, [r3, #24]
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	e000e100 	.word	0xe000e100
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d8:	b480      	push	{r7}
 80014da:	b089      	sub	sp, #36	; 0x24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	f1c3 0307 	rsb	r3, r3, #7
 80014f2:	2b04      	cmp	r3, #4
 80014f4:	bf28      	it	cs
 80014f6:	2304      	movcs	r3, #4
 80014f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3304      	adds	r3, #4
 80014fe:	2b06      	cmp	r3, #6
 8001500:	d902      	bls.n	8001508 <NVIC_EncodePriority+0x30>
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	3b03      	subs	r3, #3
 8001506:	e000      	b.n	800150a <NVIC_EncodePriority+0x32>
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800150c:	f04f 32ff 	mov.w	r2, #4294967295
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43da      	mvns	r2, r3
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	401a      	ands	r2, r3
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001520:	f04f 31ff 	mov.w	r1, #4294967295
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	fa01 f303 	lsl.w	r3, r1, r3
 800152a:	43d9      	mvns	r1, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001530:	4313      	orrs	r3, r2
         );
}
 8001532:	4618      	mov	r0, r3
 8001534:	3724      	adds	r7, #36	; 0x24
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
	...

08001540 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3b01      	subs	r3, #1
 800154c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001550:	d301      	bcc.n	8001556 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001552:	2301      	movs	r3, #1
 8001554:	e00f      	b.n	8001576 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001556:	4a0a      	ldr	r2, [pc, #40]	; (8001580 <SysTick_Config+0x40>)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3b01      	subs	r3, #1
 800155c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800155e:	210f      	movs	r1, #15
 8001560:	f04f 30ff 	mov.w	r0, #4294967295
 8001564:	f7ff ff8e 	bl	8001484 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <SysTick_Config+0x40>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800156e:	4b04      	ldr	r3, [pc, #16]	; (8001580 <SysTick_Config+0x40>)
 8001570:	2207      	movs	r2, #7
 8001572:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	e000e010 	.word	0xe000e010

08001584 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff ff29 	bl	80013e4 <__NVIC_SetPriorityGrouping>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800159a:	b580      	push	{r7, lr}
 800159c:	b086      	sub	sp, #24
 800159e:	af00      	add	r7, sp, #0
 80015a0:	4603      	mov	r3, r0
 80015a2:	60b9      	str	r1, [r7, #8]
 80015a4:	607a      	str	r2, [r7, #4]
 80015a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015ac:	f7ff ff3e 	bl	800142c <__NVIC_GetPriorityGrouping>
 80015b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	68b9      	ldr	r1, [r7, #8]
 80015b6:	6978      	ldr	r0, [r7, #20]
 80015b8:	f7ff ff8e 	bl	80014d8 <NVIC_EncodePriority>
 80015bc:	4602      	mov	r2, r0
 80015be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c2:	4611      	mov	r1, r2
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff ff5d 	bl	8001484 <__NVIC_SetPriority>
}
 80015ca:	bf00      	nop
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	4603      	mov	r3, r0
 80015da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ff31 	bl	8001448 <__NVIC_EnableIRQ>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff ffa2 	bl	8001540 <SysTick_Config>
 80015fc:	4603      	mov	r3, r0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001606:	b480      	push	{r7}
 8001608:	b083      	sub	sp, #12
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d004      	beq.n	8001624 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2280      	movs	r2, #128	; 0x80
 800161e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e00c      	b.n	800163e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2205      	movs	r2, #5
 8001628:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f022 0201 	bic.w	r2, r2, #1
 800163a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
	...

0800164c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800164c:	b480      	push	{r7}
 800164e:	b089      	sub	sp, #36	; 0x24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800165e:	2300      	movs	r3, #0
 8001660:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
 8001666:	e159      	b.n	800191c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001668:	2201      	movs	r2, #1
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	697a      	ldr	r2, [r7, #20]
 8001678:	4013      	ands	r3, r2
 800167a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	429a      	cmp	r2, r3
 8001682:	f040 8148 	bne.w	8001916 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f003 0303 	and.w	r3, r3, #3
 800168e:	2b01      	cmp	r3, #1
 8001690:	d005      	beq.n	800169e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800169a:	2b02      	cmp	r3, #2
 800169c:	d130      	bne.n	8001700 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	2203      	movs	r2, #3
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4013      	ands	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	68da      	ldr	r2, [r3, #12]
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016d4:	2201      	movs	r2, #1
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	43db      	mvns	r3, r3
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4013      	ands	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	091b      	lsrs	r3, r3, #4
 80016ea:	f003 0201 	and.w	r2, r3, #1
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 0303 	and.w	r3, r3, #3
 8001708:	2b03      	cmp	r3, #3
 800170a:	d017      	beq.n	800173c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	2203      	movs	r2, #3
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43db      	mvns	r3, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4013      	ands	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4313      	orrs	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 0303 	and.w	r3, r3, #3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d123      	bne.n	8001790 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	08da      	lsrs	r2, r3, #3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3208      	adds	r2, #8
 8001750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001754:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	f003 0307 	and.w	r3, r3, #7
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	220f      	movs	r2, #15
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	43db      	mvns	r3, r3
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4013      	ands	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	691a      	ldr	r2, [r3, #16]
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4313      	orrs	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	08da      	lsrs	r2, r3, #3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	3208      	adds	r2, #8
 800178a:	69b9      	ldr	r1, [r7, #24]
 800178c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	2203      	movs	r2, #3
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f003 0203 	and.w	r2, r3, #3
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 80a2 	beq.w	8001916 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	4b57      	ldr	r3, [pc, #348]	; (8001934 <HAL_GPIO_Init+0x2e8>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017da:	4a56      	ldr	r2, [pc, #344]	; (8001934 <HAL_GPIO_Init+0x2e8>)
 80017dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e0:	6453      	str	r3, [r2, #68]	; 0x44
 80017e2:	4b54      	ldr	r3, [pc, #336]	; (8001934 <HAL_GPIO_Init+0x2e8>)
 80017e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017ee:	4a52      	ldr	r2, [pc, #328]	; (8001938 <HAL_GPIO_Init+0x2ec>)
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	089b      	lsrs	r3, r3, #2
 80017f4:	3302      	adds	r3, #2
 80017f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	f003 0303 	and.w	r3, r3, #3
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	220f      	movs	r2, #15
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43db      	mvns	r3, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4013      	ands	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a49      	ldr	r2, [pc, #292]	; (800193c <HAL_GPIO_Init+0x2f0>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d019      	beq.n	800184e <HAL_GPIO_Init+0x202>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a48      	ldr	r2, [pc, #288]	; (8001940 <HAL_GPIO_Init+0x2f4>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d013      	beq.n	800184a <HAL_GPIO_Init+0x1fe>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a47      	ldr	r2, [pc, #284]	; (8001944 <HAL_GPIO_Init+0x2f8>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d00d      	beq.n	8001846 <HAL_GPIO_Init+0x1fa>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a46      	ldr	r2, [pc, #280]	; (8001948 <HAL_GPIO_Init+0x2fc>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d007      	beq.n	8001842 <HAL_GPIO_Init+0x1f6>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a45      	ldr	r2, [pc, #276]	; (800194c <HAL_GPIO_Init+0x300>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d101      	bne.n	800183e <HAL_GPIO_Init+0x1f2>
 800183a:	2304      	movs	r3, #4
 800183c:	e008      	b.n	8001850 <HAL_GPIO_Init+0x204>
 800183e:	2307      	movs	r3, #7
 8001840:	e006      	b.n	8001850 <HAL_GPIO_Init+0x204>
 8001842:	2303      	movs	r3, #3
 8001844:	e004      	b.n	8001850 <HAL_GPIO_Init+0x204>
 8001846:	2302      	movs	r3, #2
 8001848:	e002      	b.n	8001850 <HAL_GPIO_Init+0x204>
 800184a:	2301      	movs	r3, #1
 800184c:	e000      	b.n	8001850 <HAL_GPIO_Init+0x204>
 800184e:	2300      	movs	r3, #0
 8001850:	69fa      	ldr	r2, [r7, #28]
 8001852:	f002 0203 	and.w	r2, r2, #3
 8001856:	0092      	lsls	r2, r2, #2
 8001858:	4093      	lsls	r3, r2
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4313      	orrs	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001860:	4935      	ldr	r1, [pc, #212]	; (8001938 <HAL_GPIO_Init+0x2ec>)
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	089b      	lsrs	r3, r3, #2
 8001866:	3302      	adds	r3, #2
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800186e:	4b38      	ldr	r3, [pc, #224]	; (8001950 <HAL_GPIO_Init+0x304>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	43db      	mvns	r3, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4013      	ands	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	4313      	orrs	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001892:	4a2f      	ldr	r2, [pc, #188]	; (8001950 <HAL_GPIO_Init+0x304>)
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001898:	4b2d      	ldr	r3, [pc, #180]	; (8001950 <HAL_GPIO_Init+0x304>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	43db      	mvns	r3, r3
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	4013      	ands	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d003      	beq.n	80018bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018bc:	4a24      	ldr	r2, [pc, #144]	; (8001950 <HAL_GPIO_Init+0x304>)
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018c2:	4b23      	ldr	r3, [pc, #140]	; (8001950 <HAL_GPIO_Init+0x304>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	43db      	mvns	r3, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4013      	ands	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018e6:	4a1a      	ldr	r2, [pc, #104]	; (8001950 <HAL_GPIO_Init+0x304>)
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018ec:	4b18      	ldr	r3, [pc, #96]	; (8001950 <HAL_GPIO_Init+0x304>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	43db      	mvns	r3, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4013      	ands	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d003      	beq.n	8001910 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	4313      	orrs	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001910:	4a0f      	ldr	r2, [pc, #60]	; (8001950 <HAL_GPIO_Init+0x304>)
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3301      	adds	r3, #1
 800191a:	61fb      	str	r3, [r7, #28]
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	2b0f      	cmp	r3, #15
 8001920:	f67f aea2 	bls.w	8001668 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001924:	bf00      	nop
 8001926:	bf00      	nop
 8001928:	3724      	adds	r7, #36	; 0x24
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	40023800 	.word	0x40023800
 8001938:	40013800 	.word	0x40013800
 800193c:	40020000 	.word	0x40020000
 8001940:	40020400 	.word	0x40020400
 8001944:	40020800 	.word	0x40020800
 8001948:	40020c00 	.word	0x40020c00
 800194c:	40021000 	.word	0x40021000
 8001950:	40013c00 	.word	0x40013c00

08001954 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	460b      	mov	r3, r1
 800195e:	807b      	strh	r3, [r7, #2]
 8001960:	4613      	mov	r3, r2
 8001962:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001964:	787b      	ldrb	r3, [r7, #1]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800196a:	887a      	ldrh	r2, [r7, #2]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001970:	e003      	b.n	800197a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001972:	887b      	ldrh	r3, [r7, #2]
 8001974:	041a      	lsls	r2, r3, #16
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	619a      	str	r2, [r3, #24]
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
	...

08001988 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e267      	b.n	8001e6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d075      	beq.n	8001a92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019a6:	4b88      	ldr	r3, [pc, #544]	; (8001bc8 <HAL_RCC_OscConfig+0x240>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 030c 	and.w	r3, r3, #12
 80019ae:	2b04      	cmp	r3, #4
 80019b0:	d00c      	beq.n	80019cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019b2:	4b85      	ldr	r3, [pc, #532]	; (8001bc8 <HAL_RCC_OscConfig+0x240>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019ba:	2b08      	cmp	r3, #8
 80019bc:	d112      	bne.n	80019e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019be:	4b82      	ldr	r3, [pc, #520]	; (8001bc8 <HAL_RCC_OscConfig+0x240>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019ca:	d10b      	bne.n	80019e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019cc:	4b7e      	ldr	r3, [pc, #504]	; (8001bc8 <HAL_RCC_OscConfig+0x240>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d05b      	beq.n	8001a90 <HAL_RCC_OscConfig+0x108>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d157      	bne.n	8001a90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e242      	b.n	8001e6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ec:	d106      	bne.n	80019fc <HAL_RCC_OscConfig+0x74>
 80019ee:	4b76      	ldr	r3, [pc, #472]	; (8001bc8 <HAL_RCC_OscConfig+0x240>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a75      	ldr	r2, [pc, #468]	; (8001bc8 <HAL_RCC_OscConfig+0x240>)
 80019f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	e01d      	b.n	8001a38 <HAL_RCC_OscConfig+0xb0>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a04:	d10c      	bne.n	8001a20 <HAL_RCC_OscConfig+0x98>
 8001a06:	4b70      	ldr	r3, [pc, #448]	; (8001bc8 <HAL_RCC_OscConfig+0x240>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a6f      	ldr	r2, [pc, #444]	; (8001bc8 <HAL_RCC_OscConfig+0x240>)
 8001a0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	4b6d      	ldr	r3, [pc, #436]	; (8001bc8 <HAL_RCC_OscConfig+0x240>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a6c      	ldr	r2, [pc, #432]	; (8001bc8 <HAL_RCC_OscConfig+0x240>)
 8001a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	e00b      	b.n	8001a38 <HAL_RCC_OscConfig+0xb0>
 8001a20:	4b69      	ldr	r3, [pc, #420]	; (8001bc8 <HAL_RCC_OscConfig+0x240>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a68      	ldr	r2, [pc, #416]	; (8001bc8 <HAL_RCC_OscConfig+0x240>)
 8001a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a2a:	6013      	str	r3, [r2, #0]
 8001a2c:	4b66      	ldr	r3, [pc, #408]	; (8001bc8 <HAL_RCC_OscConfig+0x240>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a65      	ldr	r2, [pc, #404]	; (8001bc8 <HAL_RCC_OscConfig+0x240>)
 8001a32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d013      	beq.n	8001a68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a40:	f7ff fcc4 	bl	80013cc <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a48:	f7ff fcc0 	bl	80013cc <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b64      	cmp	r3, #100	; 0x64
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e207      	b.n	8001e6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a5a:	4b5b      	ldr	r3, [pc, #364]	; (8001bc8 <HAL_RCC_OscConfig+0x240>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d0f0      	beq.n	8001a48 <HAL_RCC_OscConfig+0xc0>
 8001a66:	e014      	b.n	8001a92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a68:	f7ff fcb0 	bl	80013cc <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a70:	f7ff fcac 	bl	80013cc <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b64      	cmp	r3, #100	; 0x64
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e1f3      	b.n	8001e6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a82:	4b51      	ldr	r3, [pc, #324]	; (8001bc8 <HAL_RCC_OscConfig+0x240>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1f0      	bne.n	8001a70 <HAL_RCC_OscConfig+0xe8>
 8001a8e:	e000      	b.n	8001a92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d063      	beq.n	8001b66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a9e:	4b4a      	ldr	r3, [pc, #296]	; (8001bc8 <HAL_RCC_OscConfig+0x240>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 030c 	and.w	r3, r3, #12
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00b      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aaa:	4b47      	ldr	r3, [pc, #284]	; (8001bc8 <HAL_RCC_OscConfig+0x240>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ab2:	2b08      	cmp	r3, #8
 8001ab4:	d11c      	bne.n	8001af0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ab6:	4b44      	ldr	r3, [pc, #272]	; (8001bc8 <HAL_RCC_OscConfig+0x240>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d116      	bne.n	8001af0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ac2:	4b41      	ldr	r3, [pc, #260]	; (8001bc8 <HAL_RCC_OscConfig+0x240>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d005      	beq.n	8001ada <HAL_RCC_OscConfig+0x152>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d001      	beq.n	8001ada <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e1c7      	b.n	8001e6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ada:	4b3b      	ldr	r3, [pc, #236]	; (8001bc8 <HAL_RCC_OscConfig+0x240>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	4937      	ldr	r1, [pc, #220]	; (8001bc8 <HAL_RCC_OscConfig+0x240>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aee:	e03a      	b.n	8001b66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d020      	beq.n	8001b3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001af8:	4b34      	ldr	r3, [pc, #208]	; (8001bcc <HAL_RCC_OscConfig+0x244>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afe:	f7ff fc65 	bl	80013cc <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b06:	f7ff fc61 	bl	80013cc <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e1a8      	b.n	8001e6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b18:	4b2b      	ldr	r3, [pc, #172]	; (8001bc8 <HAL_RCC_OscConfig+0x240>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0f0      	beq.n	8001b06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b24:	4b28      	ldr	r3, [pc, #160]	; (8001bc8 <HAL_RCC_OscConfig+0x240>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	4925      	ldr	r1, [pc, #148]	; (8001bc8 <HAL_RCC_OscConfig+0x240>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	600b      	str	r3, [r1, #0]
 8001b38:	e015      	b.n	8001b66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b3a:	4b24      	ldr	r3, [pc, #144]	; (8001bcc <HAL_RCC_OscConfig+0x244>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b40:	f7ff fc44 	bl	80013cc <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b48:	f7ff fc40 	bl	80013cc <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e187      	b.n	8001e6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b5a:	4b1b      	ldr	r3, [pc, #108]	; (8001bc8 <HAL_RCC_OscConfig+0x240>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f0      	bne.n	8001b48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0308 	and.w	r3, r3, #8
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d036      	beq.n	8001be0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d016      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b7a:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <HAL_RCC_OscConfig+0x248>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b80:	f7ff fc24 	bl	80013cc <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b88:	f7ff fc20 	bl	80013cc <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e167      	b.n	8001e6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b9a:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <HAL_RCC_OscConfig+0x240>)
 8001b9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d0f0      	beq.n	8001b88 <HAL_RCC_OscConfig+0x200>
 8001ba6:	e01b      	b.n	8001be0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ba8:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <HAL_RCC_OscConfig+0x248>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bae:	f7ff fc0d 	bl	80013cc <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb4:	e00e      	b.n	8001bd4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bb6:	f7ff fc09 	bl	80013cc <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d907      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e150      	b.n	8001e6a <HAL_RCC_OscConfig+0x4e2>
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	42470000 	.word	0x42470000
 8001bd0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd4:	4b88      	ldr	r3, [pc, #544]	; (8001df8 <HAL_RCC_OscConfig+0x470>)
 8001bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1ea      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f000 8097 	beq.w	8001d1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bf2:	4b81      	ldr	r3, [pc, #516]	; (8001df8 <HAL_RCC_OscConfig+0x470>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10f      	bne.n	8001c1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60bb      	str	r3, [r7, #8]
 8001c02:	4b7d      	ldr	r3, [pc, #500]	; (8001df8 <HAL_RCC_OscConfig+0x470>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	4a7c      	ldr	r2, [pc, #496]	; (8001df8 <HAL_RCC_OscConfig+0x470>)
 8001c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c0e:	4b7a      	ldr	r3, [pc, #488]	; (8001df8 <HAL_RCC_OscConfig+0x470>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c16:	60bb      	str	r3, [r7, #8]
 8001c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c1e:	4b77      	ldr	r3, [pc, #476]	; (8001dfc <HAL_RCC_OscConfig+0x474>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d118      	bne.n	8001c5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c2a:	4b74      	ldr	r3, [pc, #464]	; (8001dfc <HAL_RCC_OscConfig+0x474>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a73      	ldr	r2, [pc, #460]	; (8001dfc <HAL_RCC_OscConfig+0x474>)
 8001c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c36:	f7ff fbc9 	bl	80013cc <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c3e:	f7ff fbc5 	bl	80013cc <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e10c      	b.n	8001e6a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c50:	4b6a      	ldr	r3, [pc, #424]	; (8001dfc <HAL_RCC_OscConfig+0x474>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0f0      	beq.n	8001c3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d106      	bne.n	8001c72 <HAL_RCC_OscConfig+0x2ea>
 8001c64:	4b64      	ldr	r3, [pc, #400]	; (8001df8 <HAL_RCC_OscConfig+0x470>)
 8001c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c68:	4a63      	ldr	r2, [pc, #396]	; (8001df8 <HAL_RCC_OscConfig+0x470>)
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c70:	e01c      	b.n	8001cac <HAL_RCC_OscConfig+0x324>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	2b05      	cmp	r3, #5
 8001c78:	d10c      	bne.n	8001c94 <HAL_RCC_OscConfig+0x30c>
 8001c7a:	4b5f      	ldr	r3, [pc, #380]	; (8001df8 <HAL_RCC_OscConfig+0x470>)
 8001c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c7e:	4a5e      	ldr	r2, [pc, #376]	; (8001df8 <HAL_RCC_OscConfig+0x470>)
 8001c80:	f043 0304 	orr.w	r3, r3, #4
 8001c84:	6713      	str	r3, [r2, #112]	; 0x70
 8001c86:	4b5c      	ldr	r3, [pc, #368]	; (8001df8 <HAL_RCC_OscConfig+0x470>)
 8001c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c8a:	4a5b      	ldr	r2, [pc, #364]	; (8001df8 <HAL_RCC_OscConfig+0x470>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	6713      	str	r3, [r2, #112]	; 0x70
 8001c92:	e00b      	b.n	8001cac <HAL_RCC_OscConfig+0x324>
 8001c94:	4b58      	ldr	r3, [pc, #352]	; (8001df8 <HAL_RCC_OscConfig+0x470>)
 8001c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c98:	4a57      	ldr	r2, [pc, #348]	; (8001df8 <HAL_RCC_OscConfig+0x470>)
 8001c9a:	f023 0301 	bic.w	r3, r3, #1
 8001c9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001ca0:	4b55      	ldr	r3, [pc, #340]	; (8001df8 <HAL_RCC_OscConfig+0x470>)
 8001ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca4:	4a54      	ldr	r2, [pc, #336]	; (8001df8 <HAL_RCC_OscConfig+0x470>)
 8001ca6:	f023 0304 	bic.w	r3, r3, #4
 8001caa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d015      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb4:	f7ff fb8a 	bl	80013cc <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cba:	e00a      	b.n	8001cd2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cbc:	f7ff fb86 	bl	80013cc <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e0cb      	b.n	8001e6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd2:	4b49      	ldr	r3, [pc, #292]	; (8001df8 <HAL_RCC_OscConfig+0x470>)
 8001cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0ee      	beq.n	8001cbc <HAL_RCC_OscConfig+0x334>
 8001cde:	e014      	b.n	8001d0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce0:	f7ff fb74 	bl	80013cc <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ce6:	e00a      	b.n	8001cfe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ce8:	f7ff fb70 	bl	80013cc <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e0b5      	b.n	8001e6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cfe:	4b3e      	ldr	r3, [pc, #248]	; (8001df8 <HAL_RCC_OscConfig+0x470>)
 8001d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1ee      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d0a:	7dfb      	ldrb	r3, [r7, #23]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d105      	bne.n	8001d1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d10:	4b39      	ldr	r3, [pc, #228]	; (8001df8 <HAL_RCC_OscConfig+0x470>)
 8001d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d14:	4a38      	ldr	r2, [pc, #224]	; (8001df8 <HAL_RCC_OscConfig+0x470>)
 8001d16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 80a1 	beq.w	8001e68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d26:	4b34      	ldr	r3, [pc, #208]	; (8001df8 <HAL_RCC_OscConfig+0x470>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 030c 	and.w	r3, r3, #12
 8001d2e:	2b08      	cmp	r3, #8
 8001d30:	d05c      	beq.n	8001dec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d141      	bne.n	8001dbe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d3a:	4b31      	ldr	r3, [pc, #196]	; (8001e00 <HAL_RCC_OscConfig+0x478>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d40:	f7ff fb44 	bl	80013cc <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d48:	f7ff fb40 	bl	80013cc <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e087      	b.n	8001e6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d5a:	4b27      	ldr	r3, [pc, #156]	; (8001df8 <HAL_RCC_OscConfig+0x470>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f0      	bne.n	8001d48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69da      	ldr	r2, [r3, #28]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d74:	019b      	lsls	r3, r3, #6
 8001d76:	431a      	orrs	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7c:	085b      	lsrs	r3, r3, #1
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	041b      	lsls	r3, r3, #16
 8001d82:	431a      	orrs	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d88:	061b      	lsls	r3, r3, #24
 8001d8a:	491b      	ldr	r1, [pc, #108]	; (8001df8 <HAL_RCC_OscConfig+0x470>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d90:	4b1b      	ldr	r3, [pc, #108]	; (8001e00 <HAL_RCC_OscConfig+0x478>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d96:	f7ff fb19 	bl	80013cc <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d9e:	f7ff fb15 	bl	80013cc <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e05c      	b.n	8001e6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db0:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <HAL_RCC_OscConfig+0x470>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d0f0      	beq.n	8001d9e <HAL_RCC_OscConfig+0x416>
 8001dbc:	e054      	b.n	8001e68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dbe:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <HAL_RCC_OscConfig+0x478>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc4:	f7ff fb02 	bl	80013cc <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dcc:	f7ff fafe 	bl	80013cc <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e045      	b.n	8001e6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dde:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <HAL_RCC_OscConfig+0x470>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1f0      	bne.n	8001dcc <HAL_RCC_OscConfig+0x444>
 8001dea:	e03d      	b.n	8001e68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d107      	bne.n	8001e04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e038      	b.n	8001e6a <HAL_RCC_OscConfig+0x4e2>
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40007000 	.word	0x40007000
 8001e00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e04:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <HAL_RCC_OscConfig+0x4ec>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d028      	beq.n	8001e64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d121      	bne.n	8001e64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d11a      	bne.n	8001e64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e34:	4013      	ands	r3, r2
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d111      	bne.n	8001e64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4a:	085b      	lsrs	r3, r3, #1
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d107      	bne.n	8001e64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d001      	beq.n	8001e68 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e000      	b.n	8001e6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40023800 	.word	0x40023800

08001e78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e0cc      	b.n	8002026 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e8c:	4b68      	ldr	r3, [pc, #416]	; (8002030 <HAL_RCC_ClockConfig+0x1b8>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d90c      	bls.n	8001eb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9a:	4b65      	ldr	r3, [pc, #404]	; (8002030 <HAL_RCC_ClockConfig+0x1b8>)
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea2:	4b63      	ldr	r3, [pc, #396]	; (8002030 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d001      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e0b8      	b.n	8002026 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d020      	beq.n	8001f02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d005      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ecc:	4b59      	ldr	r3, [pc, #356]	; (8002034 <HAL_RCC_ClockConfig+0x1bc>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	4a58      	ldr	r2, [pc, #352]	; (8002034 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ed6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0308 	and.w	r3, r3, #8
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d005      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ee4:	4b53      	ldr	r3, [pc, #332]	; (8002034 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	4a52      	ldr	r2, [pc, #328]	; (8002034 <HAL_RCC_ClockConfig+0x1bc>)
 8001eea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001eee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ef0:	4b50      	ldr	r3, [pc, #320]	; (8002034 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	494d      	ldr	r1, [pc, #308]	; (8002034 <HAL_RCC_ClockConfig+0x1bc>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d044      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d107      	bne.n	8001f26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f16:	4b47      	ldr	r3, [pc, #284]	; (8002034 <HAL_RCC_ClockConfig+0x1bc>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d119      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e07f      	b.n	8002026 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d003      	beq.n	8001f36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f32:	2b03      	cmp	r3, #3
 8001f34:	d107      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f36:	4b3f      	ldr	r3, [pc, #252]	; (8002034 <HAL_RCC_ClockConfig+0x1bc>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d109      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e06f      	b.n	8002026 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f46:	4b3b      	ldr	r3, [pc, #236]	; (8002034 <HAL_RCC_ClockConfig+0x1bc>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e067      	b.n	8002026 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f56:	4b37      	ldr	r3, [pc, #220]	; (8002034 <HAL_RCC_ClockConfig+0x1bc>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f023 0203 	bic.w	r2, r3, #3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	4934      	ldr	r1, [pc, #208]	; (8002034 <HAL_RCC_ClockConfig+0x1bc>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f68:	f7ff fa30 	bl	80013cc <HAL_GetTick>
 8001f6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6e:	e00a      	b.n	8001f86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f70:	f7ff fa2c 	bl	80013cc <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e04f      	b.n	8002026 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f86:	4b2b      	ldr	r3, [pc, #172]	; (8002034 <HAL_RCC_ClockConfig+0x1bc>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 020c 	and.w	r2, r3, #12
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d1eb      	bne.n	8001f70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f98:	4b25      	ldr	r3, [pc, #148]	; (8002030 <HAL_RCC_ClockConfig+0x1b8>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d20c      	bcs.n	8001fc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa6:	4b22      	ldr	r3, [pc, #136]	; (8002030 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fae:	4b20      	ldr	r3, [pc, #128]	; (8002030 <HAL_RCC_ClockConfig+0x1b8>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d001      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e032      	b.n	8002026 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d008      	beq.n	8001fde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fcc:	4b19      	ldr	r3, [pc, #100]	; (8002034 <HAL_RCC_ClockConfig+0x1bc>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	4916      	ldr	r1, [pc, #88]	; (8002034 <HAL_RCC_ClockConfig+0x1bc>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0308 	and.w	r3, r3, #8
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d009      	beq.n	8001ffe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fea:	4b12      	ldr	r3, [pc, #72]	; (8002034 <HAL_RCC_ClockConfig+0x1bc>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	490e      	ldr	r1, [pc, #56]	; (8002034 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ffe:	f000 f821 	bl	8002044 <HAL_RCC_GetSysClockFreq>
 8002002:	4602      	mov	r2, r0
 8002004:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <HAL_RCC_ClockConfig+0x1bc>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	091b      	lsrs	r3, r3, #4
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	490a      	ldr	r1, [pc, #40]	; (8002038 <HAL_RCC_ClockConfig+0x1c0>)
 8002010:	5ccb      	ldrb	r3, [r1, r3]
 8002012:	fa22 f303 	lsr.w	r3, r2, r3
 8002016:	4a09      	ldr	r2, [pc, #36]	; (800203c <HAL_RCC_ClockConfig+0x1c4>)
 8002018:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800201a:	4b09      	ldr	r3, [pc, #36]	; (8002040 <HAL_RCC_ClockConfig+0x1c8>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff f990 	bl	8001344 <HAL_InitTick>

  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40023c00 	.word	0x40023c00
 8002034:	40023800 	.word	0x40023800
 8002038:	0800381c 	.word	0x0800381c
 800203c:	20000000 	.word	0x20000000
 8002040:	20000004 	.word	0x20000004

08002044 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002044:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002048:	b090      	sub	sp, #64	; 0x40
 800204a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800204c:	2300      	movs	r3, #0
 800204e:	637b      	str	r3, [r7, #52]	; 0x34
 8002050:	2300      	movs	r3, #0
 8002052:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002054:	2300      	movs	r3, #0
 8002056:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002058:	2300      	movs	r3, #0
 800205a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800205c:	4b59      	ldr	r3, [pc, #356]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f003 030c 	and.w	r3, r3, #12
 8002064:	2b08      	cmp	r3, #8
 8002066:	d00d      	beq.n	8002084 <HAL_RCC_GetSysClockFreq+0x40>
 8002068:	2b08      	cmp	r3, #8
 800206a:	f200 80a1 	bhi.w	80021b0 <HAL_RCC_GetSysClockFreq+0x16c>
 800206e:	2b00      	cmp	r3, #0
 8002070:	d002      	beq.n	8002078 <HAL_RCC_GetSysClockFreq+0x34>
 8002072:	2b04      	cmp	r3, #4
 8002074:	d003      	beq.n	800207e <HAL_RCC_GetSysClockFreq+0x3a>
 8002076:	e09b      	b.n	80021b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002078:	4b53      	ldr	r3, [pc, #332]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800207a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800207c:	e09b      	b.n	80021b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800207e:	4b53      	ldr	r3, [pc, #332]	; (80021cc <HAL_RCC_GetSysClockFreq+0x188>)
 8002080:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002082:	e098      	b.n	80021b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002084:	4b4f      	ldr	r3, [pc, #316]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800208c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800208e:	4b4d      	ldr	r3, [pc, #308]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d028      	beq.n	80020ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800209a:	4b4a      	ldr	r3, [pc, #296]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	099b      	lsrs	r3, r3, #6
 80020a0:	2200      	movs	r2, #0
 80020a2:	623b      	str	r3, [r7, #32]
 80020a4:	627a      	str	r2, [r7, #36]	; 0x24
 80020a6:	6a3b      	ldr	r3, [r7, #32]
 80020a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80020ac:	2100      	movs	r1, #0
 80020ae:	4b47      	ldr	r3, [pc, #284]	; (80021cc <HAL_RCC_GetSysClockFreq+0x188>)
 80020b0:	fb03 f201 	mul.w	r2, r3, r1
 80020b4:	2300      	movs	r3, #0
 80020b6:	fb00 f303 	mul.w	r3, r0, r3
 80020ba:	4413      	add	r3, r2
 80020bc:	4a43      	ldr	r2, [pc, #268]	; (80021cc <HAL_RCC_GetSysClockFreq+0x188>)
 80020be:	fba0 1202 	umull	r1, r2, r0, r2
 80020c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80020c4:	460a      	mov	r2, r1
 80020c6:	62ba      	str	r2, [r7, #40]	; 0x28
 80020c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020ca:	4413      	add	r3, r2
 80020cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d0:	2200      	movs	r2, #0
 80020d2:	61bb      	str	r3, [r7, #24]
 80020d4:	61fa      	str	r2, [r7, #28]
 80020d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80020de:	f7fe f8cf 	bl	8000280 <__aeabi_uldivmod>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	4613      	mov	r3, r2
 80020e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020ea:	e053      	b.n	8002194 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020ec:	4b35      	ldr	r3, [pc, #212]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	099b      	lsrs	r3, r3, #6
 80020f2:	2200      	movs	r2, #0
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	617a      	str	r2, [r7, #20]
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80020fe:	f04f 0b00 	mov.w	fp, #0
 8002102:	4652      	mov	r2, sl
 8002104:	465b      	mov	r3, fp
 8002106:	f04f 0000 	mov.w	r0, #0
 800210a:	f04f 0100 	mov.w	r1, #0
 800210e:	0159      	lsls	r1, r3, #5
 8002110:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002114:	0150      	lsls	r0, r2, #5
 8002116:	4602      	mov	r2, r0
 8002118:	460b      	mov	r3, r1
 800211a:	ebb2 080a 	subs.w	r8, r2, sl
 800211e:	eb63 090b 	sbc.w	r9, r3, fp
 8002122:	f04f 0200 	mov.w	r2, #0
 8002126:	f04f 0300 	mov.w	r3, #0
 800212a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800212e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002132:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002136:	ebb2 0408 	subs.w	r4, r2, r8
 800213a:	eb63 0509 	sbc.w	r5, r3, r9
 800213e:	f04f 0200 	mov.w	r2, #0
 8002142:	f04f 0300 	mov.w	r3, #0
 8002146:	00eb      	lsls	r3, r5, #3
 8002148:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800214c:	00e2      	lsls	r2, r4, #3
 800214e:	4614      	mov	r4, r2
 8002150:	461d      	mov	r5, r3
 8002152:	eb14 030a 	adds.w	r3, r4, sl
 8002156:	603b      	str	r3, [r7, #0]
 8002158:	eb45 030b 	adc.w	r3, r5, fp
 800215c:	607b      	str	r3, [r7, #4]
 800215e:	f04f 0200 	mov.w	r2, #0
 8002162:	f04f 0300 	mov.w	r3, #0
 8002166:	e9d7 4500 	ldrd	r4, r5, [r7]
 800216a:	4629      	mov	r1, r5
 800216c:	028b      	lsls	r3, r1, #10
 800216e:	4621      	mov	r1, r4
 8002170:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002174:	4621      	mov	r1, r4
 8002176:	028a      	lsls	r2, r1, #10
 8002178:	4610      	mov	r0, r2
 800217a:	4619      	mov	r1, r3
 800217c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800217e:	2200      	movs	r2, #0
 8002180:	60bb      	str	r3, [r7, #8]
 8002182:	60fa      	str	r2, [r7, #12]
 8002184:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002188:	f7fe f87a 	bl	8000280 <__aeabi_uldivmod>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4613      	mov	r3, r2
 8002192:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002194:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	0c1b      	lsrs	r3, r3, #16
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	3301      	adds	r3, #1
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80021a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80021ae:	e002      	b.n	80021b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021b0:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80021b2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80021b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3740      	adds	r7, #64	; 0x40
 80021bc:	46bd      	mov	sp, r7
 80021be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021c2:	bf00      	nop
 80021c4:	40023800 	.word	0x40023800
 80021c8:	00f42400 	.word	0x00f42400
 80021cc:	017d7840 	.word	0x017d7840

080021d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e07b      	b.n	80022da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d108      	bne.n	80021fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021f2:	d009      	beq.n	8002208 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	61da      	str	r2, [r3, #28]
 80021fa:	e005      	b.n	8002208 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d106      	bne.n	8002228 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7fe ff08 	bl	8001038 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2202      	movs	r2, #2
 800222c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800223e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002250:	431a      	orrs	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800225a:	431a      	orrs	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	431a      	orrs	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002278:	431a      	orrs	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002282:	431a      	orrs	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800228c:	ea42 0103 	orr.w	r1, r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002294:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	430a      	orrs	r2, r1
 800229e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	0c1b      	lsrs	r3, r3, #16
 80022a6:	f003 0104 	and.w	r1, r3, #4
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ae:	f003 0210 	and.w	r2, r3, #16
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	69da      	ldr	r2, [r3, #28]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b088      	sub	sp, #32
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10e      	bne.n	8002324 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800230c:	2b00      	cmp	r3, #0
 800230e:	d009      	beq.n	8002324 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002316:	2b00      	cmp	r3, #0
 8002318:	d004      	beq.n	8002324 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	4798      	blx	r3
    return;
 8002322:	e0ce      	b.n	80024c2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d009      	beq.n	8002342 <HAL_SPI_IRQHandler+0x5e>
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002334:	2b00      	cmp	r3, #0
 8002336:	d004      	beq.n	8002342 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	4798      	blx	r3
    return;
 8002340:	e0bf      	b.n	80024c2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	f003 0320 	and.w	r3, r3, #32
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10a      	bne.n	8002362 <HAL_SPI_IRQHandler+0x7e>
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002352:	2b00      	cmp	r3, #0
 8002354:	d105      	bne.n	8002362 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 80b0 	beq.w	80024c2 <HAL_SPI_IRQHandler+0x1de>
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	f003 0320 	and.w	r3, r3, #32
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 80aa 	beq.w	80024c2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002374:	2b00      	cmp	r3, #0
 8002376:	d023      	beq.n	80023c0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b03      	cmp	r3, #3
 8002382:	d011      	beq.n	80023a8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002388:	f043 0204 	orr.w	r2, r3, #4
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	617b      	str	r3, [r7, #20]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	617b      	str	r3, [r7, #20]
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	e00b      	b.n	80023c0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023a8:	2300      	movs	r3, #0
 80023aa:	613b      	str	r3, [r7, #16]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	613b      	str	r3, [r7, #16]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	613b      	str	r3, [r7, #16]
 80023bc:	693b      	ldr	r3, [r7, #16]
        return;
 80023be:	e080      	b.n	80024c2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	f003 0320 	and.w	r3, r3, #32
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d014      	beq.n	80023f4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ce:	f043 0201 	orr.w	r2, r3, #1
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80023d6:	2300      	movs	r3, #0
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00c      	beq.n	8002418 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002402:	f043 0208 	orr.w	r2, r3, #8
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800240a:	2300      	movs	r3, #0
 800240c:	60bb      	str	r3, [r7, #8]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241c:	2b00      	cmp	r3, #0
 800241e:	d04f      	beq.n	80024c0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800242e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d104      	bne.n	800244c <HAL_SPI_IRQHandler+0x168>
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b00      	cmp	r3, #0
 800244a:	d034      	beq.n	80024b6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 0203 	bic.w	r2, r2, #3
 800245a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002460:	2b00      	cmp	r3, #0
 8002462:	d011      	beq.n	8002488 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002468:	4a17      	ldr	r2, [pc, #92]	; (80024c8 <HAL_SPI_IRQHandler+0x1e4>)
 800246a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff f8c8 	bl	8001606 <HAL_DMA_Abort_IT>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d005      	beq.n	8002488 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002480:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800248c:	2b00      	cmp	r3, #0
 800248e:	d016      	beq.n	80024be <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002494:	4a0c      	ldr	r2, [pc, #48]	; (80024c8 <HAL_SPI_IRQHandler+0x1e4>)
 8002496:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff f8b2 	bl	8001606 <HAL_DMA_Abort_IT>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00a      	beq.n	80024be <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80024b4:	e003      	b.n	80024be <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 f808 	bl	80024cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80024bc:	e000      	b.n	80024c0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80024be:	bf00      	nop
    return;
 80024c0:	bf00      	nop
  }
}
 80024c2:	3720      	adds	r7, #32
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	080024e1 	.word	0x080024e1

080024cc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ec:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f7ff ffe6 	bl	80024cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002500:	bf00      	nop
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <std>:
 8002508:	2300      	movs	r3, #0
 800250a:	b510      	push	{r4, lr}
 800250c:	4604      	mov	r4, r0
 800250e:	e9c0 3300 	strd	r3, r3, [r0]
 8002512:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002516:	6083      	str	r3, [r0, #8]
 8002518:	8181      	strh	r1, [r0, #12]
 800251a:	6643      	str	r3, [r0, #100]	; 0x64
 800251c:	81c2      	strh	r2, [r0, #14]
 800251e:	6183      	str	r3, [r0, #24]
 8002520:	4619      	mov	r1, r3
 8002522:	2208      	movs	r2, #8
 8002524:	305c      	adds	r0, #92	; 0x5c
 8002526:	f000 fa17 	bl	8002958 <memset>
 800252a:	4b0d      	ldr	r3, [pc, #52]	; (8002560 <std+0x58>)
 800252c:	6263      	str	r3, [r4, #36]	; 0x24
 800252e:	4b0d      	ldr	r3, [pc, #52]	; (8002564 <std+0x5c>)
 8002530:	62a3      	str	r3, [r4, #40]	; 0x28
 8002532:	4b0d      	ldr	r3, [pc, #52]	; (8002568 <std+0x60>)
 8002534:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002536:	4b0d      	ldr	r3, [pc, #52]	; (800256c <std+0x64>)
 8002538:	6323      	str	r3, [r4, #48]	; 0x30
 800253a:	4b0d      	ldr	r3, [pc, #52]	; (8002570 <std+0x68>)
 800253c:	6224      	str	r4, [r4, #32]
 800253e:	429c      	cmp	r4, r3
 8002540:	d006      	beq.n	8002550 <std+0x48>
 8002542:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002546:	4294      	cmp	r4, r2
 8002548:	d002      	beq.n	8002550 <std+0x48>
 800254a:	33d0      	adds	r3, #208	; 0xd0
 800254c:	429c      	cmp	r4, r3
 800254e:	d105      	bne.n	800255c <std+0x54>
 8002550:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002558:	f000 ba76 	b.w	8002a48 <__retarget_lock_init_recursive>
 800255c:	bd10      	pop	{r4, pc}
 800255e:	bf00      	nop
 8002560:	080027a9 	.word	0x080027a9
 8002564:	080027cb 	.word	0x080027cb
 8002568:	08002803 	.word	0x08002803
 800256c:	08002827 	.word	0x08002827
 8002570:	200000e8 	.word	0x200000e8

08002574 <stdio_exit_handler>:
 8002574:	4a02      	ldr	r2, [pc, #8]	; (8002580 <stdio_exit_handler+0xc>)
 8002576:	4903      	ldr	r1, [pc, #12]	; (8002584 <stdio_exit_handler+0x10>)
 8002578:	4803      	ldr	r0, [pc, #12]	; (8002588 <stdio_exit_handler+0x14>)
 800257a:	f000 b869 	b.w	8002650 <_fwalk_sglue>
 800257e:	bf00      	nop
 8002580:	2000000c 	.word	0x2000000c
 8002584:	080035a5 	.word	0x080035a5
 8002588:	20000018 	.word	0x20000018

0800258c <cleanup_stdio>:
 800258c:	6841      	ldr	r1, [r0, #4]
 800258e:	4b0c      	ldr	r3, [pc, #48]	; (80025c0 <cleanup_stdio+0x34>)
 8002590:	4299      	cmp	r1, r3
 8002592:	b510      	push	{r4, lr}
 8002594:	4604      	mov	r4, r0
 8002596:	d001      	beq.n	800259c <cleanup_stdio+0x10>
 8002598:	f001 f804 	bl	80035a4 <_fflush_r>
 800259c:	68a1      	ldr	r1, [r4, #8]
 800259e:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <cleanup_stdio+0x38>)
 80025a0:	4299      	cmp	r1, r3
 80025a2:	d002      	beq.n	80025aa <cleanup_stdio+0x1e>
 80025a4:	4620      	mov	r0, r4
 80025a6:	f000 fffd 	bl	80035a4 <_fflush_r>
 80025aa:	68e1      	ldr	r1, [r4, #12]
 80025ac:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <cleanup_stdio+0x3c>)
 80025ae:	4299      	cmp	r1, r3
 80025b0:	d004      	beq.n	80025bc <cleanup_stdio+0x30>
 80025b2:	4620      	mov	r0, r4
 80025b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025b8:	f000 bff4 	b.w	80035a4 <_fflush_r>
 80025bc:	bd10      	pop	{r4, pc}
 80025be:	bf00      	nop
 80025c0:	200000e8 	.word	0x200000e8
 80025c4:	20000150 	.word	0x20000150
 80025c8:	200001b8 	.word	0x200001b8

080025cc <global_stdio_init.part.0>:
 80025cc:	b510      	push	{r4, lr}
 80025ce:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <global_stdio_init.part.0+0x30>)
 80025d0:	4c0b      	ldr	r4, [pc, #44]	; (8002600 <global_stdio_init.part.0+0x34>)
 80025d2:	4a0c      	ldr	r2, [pc, #48]	; (8002604 <global_stdio_init.part.0+0x38>)
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	4620      	mov	r0, r4
 80025d8:	2200      	movs	r2, #0
 80025da:	2104      	movs	r1, #4
 80025dc:	f7ff ff94 	bl	8002508 <std>
 80025e0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80025e4:	2201      	movs	r2, #1
 80025e6:	2109      	movs	r1, #9
 80025e8:	f7ff ff8e 	bl	8002508 <std>
 80025ec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80025f0:	2202      	movs	r2, #2
 80025f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025f6:	2112      	movs	r1, #18
 80025f8:	f7ff bf86 	b.w	8002508 <std>
 80025fc:	20000220 	.word	0x20000220
 8002600:	200000e8 	.word	0x200000e8
 8002604:	08002575 	.word	0x08002575

08002608 <__sfp_lock_acquire>:
 8002608:	4801      	ldr	r0, [pc, #4]	; (8002610 <__sfp_lock_acquire+0x8>)
 800260a:	f000 ba1e 	b.w	8002a4a <__retarget_lock_acquire_recursive>
 800260e:	bf00      	nop
 8002610:	20000229 	.word	0x20000229

08002614 <__sfp_lock_release>:
 8002614:	4801      	ldr	r0, [pc, #4]	; (800261c <__sfp_lock_release+0x8>)
 8002616:	f000 ba19 	b.w	8002a4c <__retarget_lock_release_recursive>
 800261a:	bf00      	nop
 800261c:	20000229 	.word	0x20000229

08002620 <__sinit>:
 8002620:	b510      	push	{r4, lr}
 8002622:	4604      	mov	r4, r0
 8002624:	f7ff fff0 	bl	8002608 <__sfp_lock_acquire>
 8002628:	6a23      	ldr	r3, [r4, #32]
 800262a:	b11b      	cbz	r3, 8002634 <__sinit+0x14>
 800262c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002630:	f7ff bff0 	b.w	8002614 <__sfp_lock_release>
 8002634:	4b04      	ldr	r3, [pc, #16]	; (8002648 <__sinit+0x28>)
 8002636:	6223      	str	r3, [r4, #32]
 8002638:	4b04      	ldr	r3, [pc, #16]	; (800264c <__sinit+0x2c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1f5      	bne.n	800262c <__sinit+0xc>
 8002640:	f7ff ffc4 	bl	80025cc <global_stdio_init.part.0>
 8002644:	e7f2      	b.n	800262c <__sinit+0xc>
 8002646:	bf00      	nop
 8002648:	0800258d 	.word	0x0800258d
 800264c:	20000220 	.word	0x20000220

08002650 <_fwalk_sglue>:
 8002650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002654:	4607      	mov	r7, r0
 8002656:	4688      	mov	r8, r1
 8002658:	4614      	mov	r4, r2
 800265a:	2600      	movs	r6, #0
 800265c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002660:	f1b9 0901 	subs.w	r9, r9, #1
 8002664:	d505      	bpl.n	8002672 <_fwalk_sglue+0x22>
 8002666:	6824      	ldr	r4, [r4, #0]
 8002668:	2c00      	cmp	r4, #0
 800266a:	d1f7      	bne.n	800265c <_fwalk_sglue+0xc>
 800266c:	4630      	mov	r0, r6
 800266e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002672:	89ab      	ldrh	r3, [r5, #12]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d907      	bls.n	8002688 <_fwalk_sglue+0x38>
 8002678:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800267c:	3301      	adds	r3, #1
 800267e:	d003      	beq.n	8002688 <_fwalk_sglue+0x38>
 8002680:	4629      	mov	r1, r5
 8002682:	4638      	mov	r0, r7
 8002684:	47c0      	blx	r8
 8002686:	4306      	orrs	r6, r0
 8002688:	3568      	adds	r5, #104	; 0x68
 800268a:	e7e9      	b.n	8002660 <_fwalk_sglue+0x10>

0800268c <iprintf>:
 800268c:	b40f      	push	{r0, r1, r2, r3}
 800268e:	b507      	push	{r0, r1, r2, lr}
 8002690:	4906      	ldr	r1, [pc, #24]	; (80026ac <iprintf+0x20>)
 8002692:	ab04      	add	r3, sp, #16
 8002694:	6808      	ldr	r0, [r1, #0]
 8002696:	f853 2b04 	ldr.w	r2, [r3], #4
 800269a:	6881      	ldr	r1, [r0, #8]
 800269c:	9301      	str	r3, [sp, #4]
 800269e:	f000 fc51 	bl	8002f44 <_vfiprintf_r>
 80026a2:	b003      	add	sp, #12
 80026a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80026a8:	b004      	add	sp, #16
 80026aa:	4770      	bx	lr
 80026ac:	20000064 	.word	0x20000064

080026b0 <_puts_r>:
 80026b0:	6a03      	ldr	r3, [r0, #32]
 80026b2:	b570      	push	{r4, r5, r6, lr}
 80026b4:	6884      	ldr	r4, [r0, #8]
 80026b6:	4605      	mov	r5, r0
 80026b8:	460e      	mov	r6, r1
 80026ba:	b90b      	cbnz	r3, 80026c0 <_puts_r+0x10>
 80026bc:	f7ff ffb0 	bl	8002620 <__sinit>
 80026c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80026c2:	07db      	lsls	r3, r3, #31
 80026c4:	d405      	bmi.n	80026d2 <_puts_r+0x22>
 80026c6:	89a3      	ldrh	r3, [r4, #12]
 80026c8:	0598      	lsls	r0, r3, #22
 80026ca:	d402      	bmi.n	80026d2 <_puts_r+0x22>
 80026cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80026ce:	f000 f9bc 	bl	8002a4a <__retarget_lock_acquire_recursive>
 80026d2:	89a3      	ldrh	r3, [r4, #12]
 80026d4:	0719      	lsls	r1, r3, #28
 80026d6:	d513      	bpl.n	8002700 <_puts_r+0x50>
 80026d8:	6923      	ldr	r3, [r4, #16]
 80026da:	b18b      	cbz	r3, 8002700 <_puts_r+0x50>
 80026dc:	3e01      	subs	r6, #1
 80026de:	68a3      	ldr	r3, [r4, #8]
 80026e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80026e4:	3b01      	subs	r3, #1
 80026e6:	60a3      	str	r3, [r4, #8]
 80026e8:	b9e9      	cbnz	r1, 8002726 <_puts_r+0x76>
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	da2e      	bge.n	800274c <_puts_r+0x9c>
 80026ee:	4622      	mov	r2, r4
 80026f0:	210a      	movs	r1, #10
 80026f2:	4628      	mov	r0, r5
 80026f4:	f000 f89b 	bl	800282e <__swbuf_r>
 80026f8:	3001      	adds	r0, #1
 80026fa:	d007      	beq.n	800270c <_puts_r+0x5c>
 80026fc:	250a      	movs	r5, #10
 80026fe:	e007      	b.n	8002710 <_puts_r+0x60>
 8002700:	4621      	mov	r1, r4
 8002702:	4628      	mov	r0, r5
 8002704:	f000 f8d0 	bl	80028a8 <__swsetup_r>
 8002708:	2800      	cmp	r0, #0
 800270a:	d0e7      	beq.n	80026dc <_puts_r+0x2c>
 800270c:	f04f 35ff 	mov.w	r5, #4294967295
 8002710:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002712:	07da      	lsls	r2, r3, #31
 8002714:	d405      	bmi.n	8002722 <_puts_r+0x72>
 8002716:	89a3      	ldrh	r3, [r4, #12]
 8002718:	059b      	lsls	r3, r3, #22
 800271a:	d402      	bmi.n	8002722 <_puts_r+0x72>
 800271c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800271e:	f000 f995 	bl	8002a4c <__retarget_lock_release_recursive>
 8002722:	4628      	mov	r0, r5
 8002724:	bd70      	pop	{r4, r5, r6, pc}
 8002726:	2b00      	cmp	r3, #0
 8002728:	da04      	bge.n	8002734 <_puts_r+0x84>
 800272a:	69a2      	ldr	r2, [r4, #24]
 800272c:	429a      	cmp	r2, r3
 800272e:	dc06      	bgt.n	800273e <_puts_r+0x8e>
 8002730:	290a      	cmp	r1, #10
 8002732:	d004      	beq.n	800273e <_puts_r+0x8e>
 8002734:	6823      	ldr	r3, [r4, #0]
 8002736:	1c5a      	adds	r2, r3, #1
 8002738:	6022      	str	r2, [r4, #0]
 800273a:	7019      	strb	r1, [r3, #0]
 800273c:	e7cf      	b.n	80026de <_puts_r+0x2e>
 800273e:	4622      	mov	r2, r4
 8002740:	4628      	mov	r0, r5
 8002742:	f000 f874 	bl	800282e <__swbuf_r>
 8002746:	3001      	adds	r0, #1
 8002748:	d1c9      	bne.n	80026de <_puts_r+0x2e>
 800274a:	e7df      	b.n	800270c <_puts_r+0x5c>
 800274c:	6823      	ldr	r3, [r4, #0]
 800274e:	250a      	movs	r5, #10
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	6022      	str	r2, [r4, #0]
 8002754:	701d      	strb	r5, [r3, #0]
 8002756:	e7db      	b.n	8002710 <_puts_r+0x60>

08002758 <puts>:
 8002758:	4b02      	ldr	r3, [pc, #8]	; (8002764 <puts+0xc>)
 800275a:	4601      	mov	r1, r0
 800275c:	6818      	ldr	r0, [r3, #0]
 800275e:	f7ff bfa7 	b.w	80026b0 <_puts_r>
 8002762:	bf00      	nop
 8002764:	20000064 	.word	0x20000064

08002768 <siprintf>:
 8002768:	b40e      	push	{r1, r2, r3}
 800276a:	b500      	push	{lr}
 800276c:	b09c      	sub	sp, #112	; 0x70
 800276e:	ab1d      	add	r3, sp, #116	; 0x74
 8002770:	9002      	str	r0, [sp, #8]
 8002772:	9006      	str	r0, [sp, #24]
 8002774:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002778:	4809      	ldr	r0, [pc, #36]	; (80027a0 <siprintf+0x38>)
 800277a:	9107      	str	r1, [sp, #28]
 800277c:	9104      	str	r1, [sp, #16]
 800277e:	4909      	ldr	r1, [pc, #36]	; (80027a4 <siprintf+0x3c>)
 8002780:	f853 2b04 	ldr.w	r2, [r3], #4
 8002784:	9105      	str	r1, [sp, #20]
 8002786:	6800      	ldr	r0, [r0, #0]
 8002788:	9301      	str	r3, [sp, #4]
 800278a:	a902      	add	r1, sp, #8
 800278c:	f000 fab2 	bl	8002cf4 <_svfiprintf_r>
 8002790:	9b02      	ldr	r3, [sp, #8]
 8002792:	2200      	movs	r2, #0
 8002794:	701a      	strb	r2, [r3, #0]
 8002796:	b01c      	add	sp, #112	; 0x70
 8002798:	f85d eb04 	ldr.w	lr, [sp], #4
 800279c:	b003      	add	sp, #12
 800279e:	4770      	bx	lr
 80027a0:	20000064 	.word	0x20000064
 80027a4:	ffff0208 	.word	0xffff0208

080027a8 <__sread>:
 80027a8:	b510      	push	{r4, lr}
 80027aa:	460c      	mov	r4, r1
 80027ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027b0:	f000 f8fc 	bl	80029ac <_read_r>
 80027b4:	2800      	cmp	r0, #0
 80027b6:	bfab      	itete	ge
 80027b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80027ba:	89a3      	ldrhlt	r3, [r4, #12]
 80027bc:	181b      	addge	r3, r3, r0
 80027be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80027c2:	bfac      	ite	ge
 80027c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80027c6:	81a3      	strhlt	r3, [r4, #12]
 80027c8:	bd10      	pop	{r4, pc}

080027ca <__swrite>:
 80027ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027ce:	461f      	mov	r7, r3
 80027d0:	898b      	ldrh	r3, [r1, #12]
 80027d2:	05db      	lsls	r3, r3, #23
 80027d4:	4605      	mov	r5, r0
 80027d6:	460c      	mov	r4, r1
 80027d8:	4616      	mov	r6, r2
 80027da:	d505      	bpl.n	80027e8 <__swrite+0x1e>
 80027dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027e0:	2302      	movs	r3, #2
 80027e2:	2200      	movs	r2, #0
 80027e4:	f000 f8d0 	bl	8002988 <_lseek_r>
 80027e8:	89a3      	ldrh	r3, [r4, #12]
 80027ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80027ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027f2:	81a3      	strh	r3, [r4, #12]
 80027f4:	4632      	mov	r2, r6
 80027f6:	463b      	mov	r3, r7
 80027f8:	4628      	mov	r0, r5
 80027fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80027fe:	f000 b8e7 	b.w	80029d0 <_write_r>

08002802 <__sseek>:
 8002802:	b510      	push	{r4, lr}
 8002804:	460c      	mov	r4, r1
 8002806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800280a:	f000 f8bd 	bl	8002988 <_lseek_r>
 800280e:	1c43      	adds	r3, r0, #1
 8002810:	89a3      	ldrh	r3, [r4, #12]
 8002812:	bf15      	itete	ne
 8002814:	6560      	strne	r0, [r4, #84]	; 0x54
 8002816:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800281a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800281e:	81a3      	strheq	r3, [r4, #12]
 8002820:	bf18      	it	ne
 8002822:	81a3      	strhne	r3, [r4, #12]
 8002824:	bd10      	pop	{r4, pc}

08002826 <__sclose>:
 8002826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800282a:	f000 b89d 	b.w	8002968 <_close_r>

0800282e <__swbuf_r>:
 800282e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002830:	460e      	mov	r6, r1
 8002832:	4614      	mov	r4, r2
 8002834:	4605      	mov	r5, r0
 8002836:	b118      	cbz	r0, 8002840 <__swbuf_r+0x12>
 8002838:	6a03      	ldr	r3, [r0, #32]
 800283a:	b90b      	cbnz	r3, 8002840 <__swbuf_r+0x12>
 800283c:	f7ff fef0 	bl	8002620 <__sinit>
 8002840:	69a3      	ldr	r3, [r4, #24]
 8002842:	60a3      	str	r3, [r4, #8]
 8002844:	89a3      	ldrh	r3, [r4, #12]
 8002846:	071a      	lsls	r2, r3, #28
 8002848:	d525      	bpl.n	8002896 <__swbuf_r+0x68>
 800284a:	6923      	ldr	r3, [r4, #16]
 800284c:	b31b      	cbz	r3, 8002896 <__swbuf_r+0x68>
 800284e:	6823      	ldr	r3, [r4, #0]
 8002850:	6922      	ldr	r2, [r4, #16]
 8002852:	1a98      	subs	r0, r3, r2
 8002854:	6963      	ldr	r3, [r4, #20]
 8002856:	b2f6      	uxtb	r6, r6
 8002858:	4283      	cmp	r3, r0
 800285a:	4637      	mov	r7, r6
 800285c:	dc04      	bgt.n	8002868 <__swbuf_r+0x3a>
 800285e:	4621      	mov	r1, r4
 8002860:	4628      	mov	r0, r5
 8002862:	f000 fe9f 	bl	80035a4 <_fflush_r>
 8002866:	b9e0      	cbnz	r0, 80028a2 <__swbuf_r+0x74>
 8002868:	68a3      	ldr	r3, [r4, #8]
 800286a:	3b01      	subs	r3, #1
 800286c:	60a3      	str	r3, [r4, #8]
 800286e:	6823      	ldr	r3, [r4, #0]
 8002870:	1c5a      	adds	r2, r3, #1
 8002872:	6022      	str	r2, [r4, #0]
 8002874:	701e      	strb	r6, [r3, #0]
 8002876:	6962      	ldr	r2, [r4, #20]
 8002878:	1c43      	adds	r3, r0, #1
 800287a:	429a      	cmp	r2, r3
 800287c:	d004      	beq.n	8002888 <__swbuf_r+0x5a>
 800287e:	89a3      	ldrh	r3, [r4, #12]
 8002880:	07db      	lsls	r3, r3, #31
 8002882:	d506      	bpl.n	8002892 <__swbuf_r+0x64>
 8002884:	2e0a      	cmp	r6, #10
 8002886:	d104      	bne.n	8002892 <__swbuf_r+0x64>
 8002888:	4621      	mov	r1, r4
 800288a:	4628      	mov	r0, r5
 800288c:	f000 fe8a 	bl	80035a4 <_fflush_r>
 8002890:	b938      	cbnz	r0, 80028a2 <__swbuf_r+0x74>
 8002892:	4638      	mov	r0, r7
 8002894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002896:	4621      	mov	r1, r4
 8002898:	4628      	mov	r0, r5
 800289a:	f000 f805 	bl	80028a8 <__swsetup_r>
 800289e:	2800      	cmp	r0, #0
 80028a0:	d0d5      	beq.n	800284e <__swbuf_r+0x20>
 80028a2:	f04f 37ff 	mov.w	r7, #4294967295
 80028a6:	e7f4      	b.n	8002892 <__swbuf_r+0x64>

080028a8 <__swsetup_r>:
 80028a8:	b538      	push	{r3, r4, r5, lr}
 80028aa:	4b2a      	ldr	r3, [pc, #168]	; (8002954 <__swsetup_r+0xac>)
 80028ac:	4605      	mov	r5, r0
 80028ae:	6818      	ldr	r0, [r3, #0]
 80028b0:	460c      	mov	r4, r1
 80028b2:	b118      	cbz	r0, 80028bc <__swsetup_r+0x14>
 80028b4:	6a03      	ldr	r3, [r0, #32]
 80028b6:	b90b      	cbnz	r3, 80028bc <__swsetup_r+0x14>
 80028b8:	f7ff feb2 	bl	8002620 <__sinit>
 80028bc:	89a3      	ldrh	r3, [r4, #12]
 80028be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80028c2:	0718      	lsls	r0, r3, #28
 80028c4:	d422      	bmi.n	800290c <__swsetup_r+0x64>
 80028c6:	06d9      	lsls	r1, r3, #27
 80028c8:	d407      	bmi.n	80028da <__swsetup_r+0x32>
 80028ca:	2309      	movs	r3, #9
 80028cc:	602b      	str	r3, [r5, #0]
 80028ce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80028d2:	81a3      	strh	r3, [r4, #12]
 80028d4:	f04f 30ff 	mov.w	r0, #4294967295
 80028d8:	e034      	b.n	8002944 <__swsetup_r+0x9c>
 80028da:	0758      	lsls	r0, r3, #29
 80028dc:	d512      	bpl.n	8002904 <__swsetup_r+0x5c>
 80028de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80028e0:	b141      	cbz	r1, 80028f4 <__swsetup_r+0x4c>
 80028e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80028e6:	4299      	cmp	r1, r3
 80028e8:	d002      	beq.n	80028f0 <__swsetup_r+0x48>
 80028ea:	4628      	mov	r0, r5
 80028ec:	f000 f8b0 	bl	8002a50 <_free_r>
 80028f0:	2300      	movs	r3, #0
 80028f2:	6363      	str	r3, [r4, #52]	; 0x34
 80028f4:	89a3      	ldrh	r3, [r4, #12]
 80028f6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80028fa:	81a3      	strh	r3, [r4, #12]
 80028fc:	2300      	movs	r3, #0
 80028fe:	6063      	str	r3, [r4, #4]
 8002900:	6923      	ldr	r3, [r4, #16]
 8002902:	6023      	str	r3, [r4, #0]
 8002904:	89a3      	ldrh	r3, [r4, #12]
 8002906:	f043 0308 	orr.w	r3, r3, #8
 800290a:	81a3      	strh	r3, [r4, #12]
 800290c:	6923      	ldr	r3, [r4, #16]
 800290e:	b94b      	cbnz	r3, 8002924 <__swsetup_r+0x7c>
 8002910:	89a3      	ldrh	r3, [r4, #12]
 8002912:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002916:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800291a:	d003      	beq.n	8002924 <__swsetup_r+0x7c>
 800291c:	4621      	mov	r1, r4
 800291e:	4628      	mov	r0, r5
 8002920:	f000 fe8e 	bl	8003640 <__smakebuf_r>
 8002924:	89a0      	ldrh	r0, [r4, #12]
 8002926:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800292a:	f010 0301 	ands.w	r3, r0, #1
 800292e:	d00a      	beq.n	8002946 <__swsetup_r+0x9e>
 8002930:	2300      	movs	r3, #0
 8002932:	60a3      	str	r3, [r4, #8]
 8002934:	6963      	ldr	r3, [r4, #20]
 8002936:	425b      	negs	r3, r3
 8002938:	61a3      	str	r3, [r4, #24]
 800293a:	6923      	ldr	r3, [r4, #16]
 800293c:	b943      	cbnz	r3, 8002950 <__swsetup_r+0xa8>
 800293e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002942:	d1c4      	bne.n	80028ce <__swsetup_r+0x26>
 8002944:	bd38      	pop	{r3, r4, r5, pc}
 8002946:	0781      	lsls	r1, r0, #30
 8002948:	bf58      	it	pl
 800294a:	6963      	ldrpl	r3, [r4, #20]
 800294c:	60a3      	str	r3, [r4, #8]
 800294e:	e7f4      	b.n	800293a <__swsetup_r+0x92>
 8002950:	2000      	movs	r0, #0
 8002952:	e7f7      	b.n	8002944 <__swsetup_r+0x9c>
 8002954:	20000064 	.word	0x20000064

08002958 <memset>:
 8002958:	4402      	add	r2, r0
 800295a:	4603      	mov	r3, r0
 800295c:	4293      	cmp	r3, r2
 800295e:	d100      	bne.n	8002962 <memset+0xa>
 8002960:	4770      	bx	lr
 8002962:	f803 1b01 	strb.w	r1, [r3], #1
 8002966:	e7f9      	b.n	800295c <memset+0x4>

08002968 <_close_r>:
 8002968:	b538      	push	{r3, r4, r5, lr}
 800296a:	4d06      	ldr	r5, [pc, #24]	; (8002984 <_close_r+0x1c>)
 800296c:	2300      	movs	r3, #0
 800296e:	4604      	mov	r4, r0
 8002970:	4608      	mov	r0, r1
 8002972:	602b      	str	r3, [r5, #0]
 8002974:	f7fe fc1d 	bl	80011b2 <_close>
 8002978:	1c43      	adds	r3, r0, #1
 800297a:	d102      	bne.n	8002982 <_close_r+0x1a>
 800297c:	682b      	ldr	r3, [r5, #0]
 800297e:	b103      	cbz	r3, 8002982 <_close_r+0x1a>
 8002980:	6023      	str	r3, [r4, #0]
 8002982:	bd38      	pop	{r3, r4, r5, pc}
 8002984:	20000224 	.word	0x20000224

08002988 <_lseek_r>:
 8002988:	b538      	push	{r3, r4, r5, lr}
 800298a:	4d07      	ldr	r5, [pc, #28]	; (80029a8 <_lseek_r+0x20>)
 800298c:	4604      	mov	r4, r0
 800298e:	4608      	mov	r0, r1
 8002990:	4611      	mov	r1, r2
 8002992:	2200      	movs	r2, #0
 8002994:	602a      	str	r2, [r5, #0]
 8002996:	461a      	mov	r2, r3
 8002998:	f7fe fc32 	bl	8001200 <_lseek>
 800299c:	1c43      	adds	r3, r0, #1
 800299e:	d102      	bne.n	80029a6 <_lseek_r+0x1e>
 80029a0:	682b      	ldr	r3, [r5, #0]
 80029a2:	b103      	cbz	r3, 80029a6 <_lseek_r+0x1e>
 80029a4:	6023      	str	r3, [r4, #0]
 80029a6:	bd38      	pop	{r3, r4, r5, pc}
 80029a8:	20000224 	.word	0x20000224

080029ac <_read_r>:
 80029ac:	b538      	push	{r3, r4, r5, lr}
 80029ae:	4d07      	ldr	r5, [pc, #28]	; (80029cc <_read_r+0x20>)
 80029b0:	4604      	mov	r4, r0
 80029b2:	4608      	mov	r0, r1
 80029b4:	4611      	mov	r1, r2
 80029b6:	2200      	movs	r2, #0
 80029b8:	602a      	str	r2, [r5, #0]
 80029ba:	461a      	mov	r2, r3
 80029bc:	f7fe fbc0 	bl	8001140 <_read>
 80029c0:	1c43      	adds	r3, r0, #1
 80029c2:	d102      	bne.n	80029ca <_read_r+0x1e>
 80029c4:	682b      	ldr	r3, [r5, #0]
 80029c6:	b103      	cbz	r3, 80029ca <_read_r+0x1e>
 80029c8:	6023      	str	r3, [r4, #0]
 80029ca:	bd38      	pop	{r3, r4, r5, pc}
 80029cc:	20000224 	.word	0x20000224

080029d0 <_write_r>:
 80029d0:	b538      	push	{r3, r4, r5, lr}
 80029d2:	4d07      	ldr	r5, [pc, #28]	; (80029f0 <_write_r+0x20>)
 80029d4:	4604      	mov	r4, r0
 80029d6:	4608      	mov	r0, r1
 80029d8:	4611      	mov	r1, r2
 80029da:	2200      	movs	r2, #0
 80029dc:	602a      	str	r2, [r5, #0]
 80029de:	461a      	mov	r2, r3
 80029e0:	f7fe fbcb 	bl	800117a <_write>
 80029e4:	1c43      	adds	r3, r0, #1
 80029e6:	d102      	bne.n	80029ee <_write_r+0x1e>
 80029e8:	682b      	ldr	r3, [r5, #0]
 80029ea:	b103      	cbz	r3, 80029ee <_write_r+0x1e>
 80029ec:	6023      	str	r3, [r4, #0]
 80029ee:	bd38      	pop	{r3, r4, r5, pc}
 80029f0:	20000224 	.word	0x20000224

080029f4 <__errno>:
 80029f4:	4b01      	ldr	r3, [pc, #4]	; (80029fc <__errno+0x8>)
 80029f6:	6818      	ldr	r0, [r3, #0]
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	20000064 	.word	0x20000064

08002a00 <__libc_init_array>:
 8002a00:	b570      	push	{r4, r5, r6, lr}
 8002a02:	4d0d      	ldr	r5, [pc, #52]	; (8002a38 <__libc_init_array+0x38>)
 8002a04:	4c0d      	ldr	r4, [pc, #52]	; (8002a3c <__libc_init_array+0x3c>)
 8002a06:	1b64      	subs	r4, r4, r5
 8002a08:	10a4      	asrs	r4, r4, #2
 8002a0a:	2600      	movs	r6, #0
 8002a0c:	42a6      	cmp	r6, r4
 8002a0e:	d109      	bne.n	8002a24 <__libc_init_array+0x24>
 8002a10:	4d0b      	ldr	r5, [pc, #44]	; (8002a40 <__libc_init_array+0x40>)
 8002a12:	4c0c      	ldr	r4, [pc, #48]	; (8002a44 <__libc_init_array+0x44>)
 8002a14:	f000 fee2 	bl	80037dc <_init>
 8002a18:	1b64      	subs	r4, r4, r5
 8002a1a:	10a4      	asrs	r4, r4, #2
 8002a1c:	2600      	movs	r6, #0
 8002a1e:	42a6      	cmp	r6, r4
 8002a20:	d105      	bne.n	8002a2e <__libc_init_array+0x2e>
 8002a22:	bd70      	pop	{r4, r5, r6, pc}
 8002a24:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a28:	4798      	blx	r3
 8002a2a:	3601      	adds	r6, #1
 8002a2c:	e7ee      	b.n	8002a0c <__libc_init_array+0xc>
 8002a2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a32:	4798      	blx	r3
 8002a34:	3601      	adds	r6, #1
 8002a36:	e7f2      	b.n	8002a1e <__libc_init_array+0x1e>
 8002a38:	08003868 	.word	0x08003868
 8002a3c:	08003868 	.word	0x08003868
 8002a40:	08003868 	.word	0x08003868
 8002a44:	0800386c 	.word	0x0800386c

08002a48 <__retarget_lock_init_recursive>:
 8002a48:	4770      	bx	lr

08002a4a <__retarget_lock_acquire_recursive>:
 8002a4a:	4770      	bx	lr

08002a4c <__retarget_lock_release_recursive>:
 8002a4c:	4770      	bx	lr
	...

08002a50 <_free_r>:
 8002a50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002a52:	2900      	cmp	r1, #0
 8002a54:	d044      	beq.n	8002ae0 <_free_r+0x90>
 8002a56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a5a:	9001      	str	r0, [sp, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f1a1 0404 	sub.w	r4, r1, #4
 8002a62:	bfb8      	it	lt
 8002a64:	18e4      	addlt	r4, r4, r3
 8002a66:	f000 f8df 	bl	8002c28 <__malloc_lock>
 8002a6a:	4a1e      	ldr	r2, [pc, #120]	; (8002ae4 <_free_r+0x94>)
 8002a6c:	9801      	ldr	r0, [sp, #4]
 8002a6e:	6813      	ldr	r3, [r2, #0]
 8002a70:	b933      	cbnz	r3, 8002a80 <_free_r+0x30>
 8002a72:	6063      	str	r3, [r4, #4]
 8002a74:	6014      	str	r4, [r2, #0]
 8002a76:	b003      	add	sp, #12
 8002a78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002a7c:	f000 b8da 	b.w	8002c34 <__malloc_unlock>
 8002a80:	42a3      	cmp	r3, r4
 8002a82:	d908      	bls.n	8002a96 <_free_r+0x46>
 8002a84:	6825      	ldr	r5, [r4, #0]
 8002a86:	1961      	adds	r1, r4, r5
 8002a88:	428b      	cmp	r3, r1
 8002a8a:	bf01      	itttt	eq
 8002a8c:	6819      	ldreq	r1, [r3, #0]
 8002a8e:	685b      	ldreq	r3, [r3, #4]
 8002a90:	1949      	addeq	r1, r1, r5
 8002a92:	6021      	streq	r1, [r4, #0]
 8002a94:	e7ed      	b.n	8002a72 <_free_r+0x22>
 8002a96:	461a      	mov	r2, r3
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	b10b      	cbz	r3, 8002aa0 <_free_r+0x50>
 8002a9c:	42a3      	cmp	r3, r4
 8002a9e:	d9fa      	bls.n	8002a96 <_free_r+0x46>
 8002aa0:	6811      	ldr	r1, [r2, #0]
 8002aa2:	1855      	adds	r5, r2, r1
 8002aa4:	42a5      	cmp	r5, r4
 8002aa6:	d10b      	bne.n	8002ac0 <_free_r+0x70>
 8002aa8:	6824      	ldr	r4, [r4, #0]
 8002aaa:	4421      	add	r1, r4
 8002aac:	1854      	adds	r4, r2, r1
 8002aae:	42a3      	cmp	r3, r4
 8002ab0:	6011      	str	r1, [r2, #0]
 8002ab2:	d1e0      	bne.n	8002a76 <_free_r+0x26>
 8002ab4:	681c      	ldr	r4, [r3, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	6053      	str	r3, [r2, #4]
 8002aba:	440c      	add	r4, r1
 8002abc:	6014      	str	r4, [r2, #0]
 8002abe:	e7da      	b.n	8002a76 <_free_r+0x26>
 8002ac0:	d902      	bls.n	8002ac8 <_free_r+0x78>
 8002ac2:	230c      	movs	r3, #12
 8002ac4:	6003      	str	r3, [r0, #0]
 8002ac6:	e7d6      	b.n	8002a76 <_free_r+0x26>
 8002ac8:	6825      	ldr	r5, [r4, #0]
 8002aca:	1961      	adds	r1, r4, r5
 8002acc:	428b      	cmp	r3, r1
 8002ace:	bf04      	itt	eq
 8002ad0:	6819      	ldreq	r1, [r3, #0]
 8002ad2:	685b      	ldreq	r3, [r3, #4]
 8002ad4:	6063      	str	r3, [r4, #4]
 8002ad6:	bf04      	itt	eq
 8002ad8:	1949      	addeq	r1, r1, r5
 8002ada:	6021      	streq	r1, [r4, #0]
 8002adc:	6054      	str	r4, [r2, #4]
 8002ade:	e7ca      	b.n	8002a76 <_free_r+0x26>
 8002ae0:	b003      	add	sp, #12
 8002ae2:	bd30      	pop	{r4, r5, pc}
 8002ae4:	2000022c 	.word	0x2000022c

08002ae8 <sbrk_aligned>:
 8002ae8:	b570      	push	{r4, r5, r6, lr}
 8002aea:	4e0e      	ldr	r6, [pc, #56]	; (8002b24 <sbrk_aligned+0x3c>)
 8002aec:	460c      	mov	r4, r1
 8002aee:	6831      	ldr	r1, [r6, #0]
 8002af0:	4605      	mov	r5, r0
 8002af2:	b911      	cbnz	r1, 8002afa <sbrk_aligned+0x12>
 8002af4:	f000 fe1c 	bl	8003730 <_sbrk_r>
 8002af8:	6030      	str	r0, [r6, #0]
 8002afa:	4621      	mov	r1, r4
 8002afc:	4628      	mov	r0, r5
 8002afe:	f000 fe17 	bl	8003730 <_sbrk_r>
 8002b02:	1c43      	adds	r3, r0, #1
 8002b04:	d00a      	beq.n	8002b1c <sbrk_aligned+0x34>
 8002b06:	1cc4      	adds	r4, r0, #3
 8002b08:	f024 0403 	bic.w	r4, r4, #3
 8002b0c:	42a0      	cmp	r0, r4
 8002b0e:	d007      	beq.n	8002b20 <sbrk_aligned+0x38>
 8002b10:	1a21      	subs	r1, r4, r0
 8002b12:	4628      	mov	r0, r5
 8002b14:	f000 fe0c 	bl	8003730 <_sbrk_r>
 8002b18:	3001      	adds	r0, #1
 8002b1a:	d101      	bne.n	8002b20 <sbrk_aligned+0x38>
 8002b1c:	f04f 34ff 	mov.w	r4, #4294967295
 8002b20:	4620      	mov	r0, r4
 8002b22:	bd70      	pop	{r4, r5, r6, pc}
 8002b24:	20000230 	.word	0x20000230

08002b28 <_malloc_r>:
 8002b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b2c:	1ccd      	adds	r5, r1, #3
 8002b2e:	f025 0503 	bic.w	r5, r5, #3
 8002b32:	3508      	adds	r5, #8
 8002b34:	2d0c      	cmp	r5, #12
 8002b36:	bf38      	it	cc
 8002b38:	250c      	movcc	r5, #12
 8002b3a:	2d00      	cmp	r5, #0
 8002b3c:	4607      	mov	r7, r0
 8002b3e:	db01      	blt.n	8002b44 <_malloc_r+0x1c>
 8002b40:	42a9      	cmp	r1, r5
 8002b42:	d905      	bls.n	8002b50 <_malloc_r+0x28>
 8002b44:	230c      	movs	r3, #12
 8002b46:	603b      	str	r3, [r7, #0]
 8002b48:	2600      	movs	r6, #0
 8002b4a:	4630      	mov	r0, r6
 8002b4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b50:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002c24 <_malloc_r+0xfc>
 8002b54:	f000 f868 	bl	8002c28 <__malloc_lock>
 8002b58:	f8d8 3000 	ldr.w	r3, [r8]
 8002b5c:	461c      	mov	r4, r3
 8002b5e:	bb5c      	cbnz	r4, 8002bb8 <_malloc_r+0x90>
 8002b60:	4629      	mov	r1, r5
 8002b62:	4638      	mov	r0, r7
 8002b64:	f7ff ffc0 	bl	8002ae8 <sbrk_aligned>
 8002b68:	1c43      	adds	r3, r0, #1
 8002b6a:	4604      	mov	r4, r0
 8002b6c:	d155      	bne.n	8002c1a <_malloc_r+0xf2>
 8002b6e:	f8d8 4000 	ldr.w	r4, [r8]
 8002b72:	4626      	mov	r6, r4
 8002b74:	2e00      	cmp	r6, #0
 8002b76:	d145      	bne.n	8002c04 <_malloc_r+0xdc>
 8002b78:	2c00      	cmp	r4, #0
 8002b7a:	d048      	beq.n	8002c0e <_malloc_r+0xe6>
 8002b7c:	6823      	ldr	r3, [r4, #0]
 8002b7e:	4631      	mov	r1, r6
 8002b80:	4638      	mov	r0, r7
 8002b82:	eb04 0903 	add.w	r9, r4, r3
 8002b86:	f000 fdd3 	bl	8003730 <_sbrk_r>
 8002b8a:	4581      	cmp	r9, r0
 8002b8c:	d13f      	bne.n	8002c0e <_malloc_r+0xe6>
 8002b8e:	6821      	ldr	r1, [r4, #0]
 8002b90:	1a6d      	subs	r5, r5, r1
 8002b92:	4629      	mov	r1, r5
 8002b94:	4638      	mov	r0, r7
 8002b96:	f7ff ffa7 	bl	8002ae8 <sbrk_aligned>
 8002b9a:	3001      	adds	r0, #1
 8002b9c:	d037      	beq.n	8002c0e <_malloc_r+0xe6>
 8002b9e:	6823      	ldr	r3, [r4, #0]
 8002ba0:	442b      	add	r3, r5
 8002ba2:	6023      	str	r3, [r4, #0]
 8002ba4:	f8d8 3000 	ldr.w	r3, [r8]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d038      	beq.n	8002c1e <_malloc_r+0xf6>
 8002bac:	685a      	ldr	r2, [r3, #4]
 8002bae:	42a2      	cmp	r2, r4
 8002bb0:	d12b      	bne.n	8002c0a <_malloc_r+0xe2>
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	605a      	str	r2, [r3, #4]
 8002bb6:	e00f      	b.n	8002bd8 <_malloc_r+0xb0>
 8002bb8:	6822      	ldr	r2, [r4, #0]
 8002bba:	1b52      	subs	r2, r2, r5
 8002bbc:	d41f      	bmi.n	8002bfe <_malloc_r+0xd6>
 8002bbe:	2a0b      	cmp	r2, #11
 8002bc0:	d917      	bls.n	8002bf2 <_malloc_r+0xca>
 8002bc2:	1961      	adds	r1, r4, r5
 8002bc4:	42a3      	cmp	r3, r4
 8002bc6:	6025      	str	r5, [r4, #0]
 8002bc8:	bf18      	it	ne
 8002bca:	6059      	strne	r1, [r3, #4]
 8002bcc:	6863      	ldr	r3, [r4, #4]
 8002bce:	bf08      	it	eq
 8002bd0:	f8c8 1000 	streq.w	r1, [r8]
 8002bd4:	5162      	str	r2, [r4, r5]
 8002bd6:	604b      	str	r3, [r1, #4]
 8002bd8:	4638      	mov	r0, r7
 8002bda:	f104 060b 	add.w	r6, r4, #11
 8002bde:	f000 f829 	bl	8002c34 <__malloc_unlock>
 8002be2:	f026 0607 	bic.w	r6, r6, #7
 8002be6:	1d23      	adds	r3, r4, #4
 8002be8:	1af2      	subs	r2, r6, r3
 8002bea:	d0ae      	beq.n	8002b4a <_malloc_r+0x22>
 8002bec:	1b9b      	subs	r3, r3, r6
 8002bee:	50a3      	str	r3, [r4, r2]
 8002bf0:	e7ab      	b.n	8002b4a <_malloc_r+0x22>
 8002bf2:	42a3      	cmp	r3, r4
 8002bf4:	6862      	ldr	r2, [r4, #4]
 8002bf6:	d1dd      	bne.n	8002bb4 <_malloc_r+0x8c>
 8002bf8:	f8c8 2000 	str.w	r2, [r8]
 8002bfc:	e7ec      	b.n	8002bd8 <_malloc_r+0xb0>
 8002bfe:	4623      	mov	r3, r4
 8002c00:	6864      	ldr	r4, [r4, #4]
 8002c02:	e7ac      	b.n	8002b5e <_malloc_r+0x36>
 8002c04:	4634      	mov	r4, r6
 8002c06:	6876      	ldr	r6, [r6, #4]
 8002c08:	e7b4      	b.n	8002b74 <_malloc_r+0x4c>
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	e7cc      	b.n	8002ba8 <_malloc_r+0x80>
 8002c0e:	230c      	movs	r3, #12
 8002c10:	603b      	str	r3, [r7, #0]
 8002c12:	4638      	mov	r0, r7
 8002c14:	f000 f80e 	bl	8002c34 <__malloc_unlock>
 8002c18:	e797      	b.n	8002b4a <_malloc_r+0x22>
 8002c1a:	6025      	str	r5, [r4, #0]
 8002c1c:	e7dc      	b.n	8002bd8 <_malloc_r+0xb0>
 8002c1e:	605b      	str	r3, [r3, #4]
 8002c20:	deff      	udf	#255	; 0xff
 8002c22:	bf00      	nop
 8002c24:	2000022c 	.word	0x2000022c

08002c28 <__malloc_lock>:
 8002c28:	4801      	ldr	r0, [pc, #4]	; (8002c30 <__malloc_lock+0x8>)
 8002c2a:	f7ff bf0e 	b.w	8002a4a <__retarget_lock_acquire_recursive>
 8002c2e:	bf00      	nop
 8002c30:	20000228 	.word	0x20000228

08002c34 <__malloc_unlock>:
 8002c34:	4801      	ldr	r0, [pc, #4]	; (8002c3c <__malloc_unlock+0x8>)
 8002c36:	f7ff bf09 	b.w	8002a4c <__retarget_lock_release_recursive>
 8002c3a:	bf00      	nop
 8002c3c:	20000228 	.word	0x20000228

08002c40 <__ssputs_r>:
 8002c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c44:	688e      	ldr	r6, [r1, #8]
 8002c46:	461f      	mov	r7, r3
 8002c48:	42be      	cmp	r6, r7
 8002c4a:	680b      	ldr	r3, [r1, #0]
 8002c4c:	4682      	mov	sl, r0
 8002c4e:	460c      	mov	r4, r1
 8002c50:	4690      	mov	r8, r2
 8002c52:	d82c      	bhi.n	8002cae <__ssputs_r+0x6e>
 8002c54:	898a      	ldrh	r2, [r1, #12]
 8002c56:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002c5a:	d026      	beq.n	8002caa <__ssputs_r+0x6a>
 8002c5c:	6965      	ldr	r5, [r4, #20]
 8002c5e:	6909      	ldr	r1, [r1, #16]
 8002c60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002c64:	eba3 0901 	sub.w	r9, r3, r1
 8002c68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002c6c:	1c7b      	adds	r3, r7, #1
 8002c6e:	444b      	add	r3, r9
 8002c70:	106d      	asrs	r5, r5, #1
 8002c72:	429d      	cmp	r5, r3
 8002c74:	bf38      	it	cc
 8002c76:	461d      	movcc	r5, r3
 8002c78:	0553      	lsls	r3, r2, #21
 8002c7a:	d527      	bpl.n	8002ccc <__ssputs_r+0x8c>
 8002c7c:	4629      	mov	r1, r5
 8002c7e:	f7ff ff53 	bl	8002b28 <_malloc_r>
 8002c82:	4606      	mov	r6, r0
 8002c84:	b360      	cbz	r0, 8002ce0 <__ssputs_r+0xa0>
 8002c86:	6921      	ldr	r1, [r4, #16]
 8002c88:	464a      	mov	r2, r9
 8002c8a:	f000 fd61 	bl	8003750 <memcpy>
 8002c8e:	89a3      	ldrh	r3, [r4, #12]
 8002c90:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c98:	81a3      	strh	r3, [r4, #12]
 8002c9a:	6126      	str	r6, [r4, #16]
 8002c9c:	6165      	str	r5, [r4, #20]
 8002c9e:	444e      	add	r6, r9
 8002ca0:	eba5 0509 	sub.w	r5, r5, r9
 8002ca4:	6026      	str	r6, [r4, #0]
 8002ca6:	60a5      	str	r5, [r4, #8]
 8002ca8:	463e      	mov	r6, r7
 8002caa:	42be      	cmp	r6, r7
 8002cac:	d900      	bls.n	8002cb0 <__ssputs_r+0x70>
 8002cae:	463e      	mov	r6, r7
 8002cb0:	6820      	ldr	r0, [r4, #0]
 8002cb2:	4632      	mov	r2, r6
 8002cb4:	4641      	mov	r1, r8
 8002cb6:	f000 fcff 	bl	80036b8 <memmove>
 8002cba:	68a3      	ldr	r3, [r4, #8]
 8002cbc:	1b9b      	subs	r3, r3, r6
 8002cbe:	60a3      	str	r3, [r4, #8]
 8002cc0:	6823      	ldr	r3, [r4, #0]
 8002cc2:	4433      	add	r3, r6
 8002cc4:	6023      	str	r3, [r4, #0]
 8002cc6:	2000      	movs	r0, #0
 8002cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ccc:	462a      	mov	r2, r5
 8002cce:	f000 fd4d 	bl	800376c <_realloc_r>
 8002cd2:	4606      	mov	r6, r0
 8002cd4:	2800      	cmp	r0, #0
 8002cd6:	d1e0      	bne.n	8002c9a <__ssputs_r+0x5a>
 8002cd8:	6921      	ldr	r1, [r4, #16]
 8002cda:	4650      	mov	r0, sl
 8002cdc:	f7ff feb8 	bl	8002a50 <_free_r>
 8002ce0:	230c      	movs	r3, #12
 8002ce2:	f8ca 3000 	str.w	r3, [sl]
 8002ce6:	89a3      	ldrh	r3, [r4, #12]
 8002ce8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cec:	81a3      	strh	r3, [r4, #12]
 8002cee:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf2:	e7e9      	b.n	8002cc8 <__ssputs_r+0x88>

08002cf4 <_svfiprintf_r>:
 8002cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cf8:	4698      	mov	r8, r3
 8002cfa:	898b      	ldrh	r3, [r1, #12]
 8002cfc:	061b      	lsls	r3, r3, #24
 8002cfe:	b09d      	sub	sp, #116	; 0x74
 8002d00:	4607      	mov	r7, r0
 8002d02:	460d      	mov	r5, r1
 8002d04:	4614      	mov	r4, r2
 8002d06:	d50e      	bpl.n	8002d26 <_svfiprintf_r+0x32>
 8002d08:	690b      	ldr	r3, [r1, #16]
 8002d0a:	b963      	cbnz	r3, 8002d26 <_svfiprintf_r+0x32>
 8002d0c:	2140      	movs	r1, #64	; 0x40
 8002d0e:	f7ff ff0b 	bl	8002b28 <_malloc_r>
 8002d12:	6028      	str	r0, [r5, #0]
 8002d14:	6128      	str	r0, [r5, #16]
 8002d16:	b920      	cbnz	r0, 8002d22 <_svfiprintf_r+0x2e>
 8002d18:	230c      	movs	r3, #12
 8002d1a:	603b      	str	r3, [r7, #0]
 8002d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d20:	e0d0      	b.n	8002ec4 <_svfiprintf_r+0x1d0>
 8002d22:	2340      	movs	r3, #64	; 0x40
 8002d24:	616b      	str	r3, [r5, #20]
 8002d26:	2300      	movs	r3, #0
 8002d28:	9309      	str	r3, [sp, #36]	; 0x24
 8002d2a:	2320      	movs	r3, #32
 8002d2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d30:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d34:	2330      	movs	r3, #48	; 0x30
 8002d36:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002edc <_svfiprintf_r+0x1e8>
 8002d3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d3e:	f04f 0901 	mov.w	r9, #1
 8002d42:	4623      	mov	r3, r4
 8002d44:	469a      	mov	sl, r3
 8002d46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d4a:	b10a      	cbz	r2, 8002d50 <_svfiprintf_r+0x5c>
 8002d4c:	2a25      	cmp	r2, #37	; 0x25
 8002d4e:	d1f9      	bne.n	8002d44 <_svfiprintf_r+0x50>
 8002d50:	ebba 0b04 	subs.w	fp, sl, r4
 8002d54:	d00b      	beq.n	8002d6e <_svfiprintf_r+0x7a>
 8002d56:	465b      	mov	r3, fp
 8002d58:	4622      	mov	r2, r4
 8002d5a:	4629      	mov	r1, r5
 8002d5c:	4638      	mov	r0, r7
 8002d5e:	f7ff ff6f 	bl	8002c40 <__ssputs_r>
 8002d62:	3001      	adds	r0, #1
 8002d64:	f000 80a9 	beq.w	8002eba <_svfiprintf_r+0x1c6>
 8002d68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d6a:	445a      	add	r2, fp
 8002d6c:	9209      	str	r2, [sp, #36]	; 0x24
 8002d6e:	f89a 3000 	ldrb.w	r3, [sl]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 80a1 	beq.w	8002eba <_svfiprintf_r+0x1c6>
 8002d78:	2300      	movs	r3, #0
 8002d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d82:	f10a 0a01 	add.w	sl, sl, #1
 8002d86:	9304      	str	r3, [sp, #16]
 8002d88:	9307      	str	r3, [sp, #28]
 8002d8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002d8e:	931a      	str	r3, [sp, #104]	; 0x68
 8002d90:	4654      	mov	r4, sl
 8002d92:	2205      	movs	r2, #5
 8002d94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d98:	4850      	ldr	r0, [pc, #320]	; (8002edc <_svfiprintf_r+0x1e8>)
 8002d9a:	f7fd fa21 	bl	80001e0 <memchr>
 8002d9e:	9a04      	ldr	r2, [sp, #16]
 8002da0:	b9d8      	cbnz	r0, 8002dda <_svfiprintf_r+0xe6>
 8002da2:	06d0      	lsls	r0, r2, #27
 8002da4:	bf44      	itt	mi
 8002da6:	2320      	movmi	r3, #32
 8002da8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002dac:	0711      	lsls	r1, r2, #28
 8002dae:	bf44      	itt	mi
 8002db0:	232b      	movmi	r3, #43	; 0x2b
 8002db2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002db6:	f89a 3000 	ldrb.w	r3, [sl]
 8002dba:	2b2a      	cmp	r3, #42	; 0x2a
 8002dbc:	d015      	beq.n	8002dea <_svfiprintf_r+0xf6>
 8002dbe:	9a07      	ldr	r2, [sp, #28]
 8002dc0:	4654      	mov	r4, sl
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	f04f 0c0a 	mov.w	ip, #10
 8002dc8:	4621      	mov	r1, r4
 8002dca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002dce:	3b30      	subs	r3, #48	; 0x30
 8002dd0:	2b09      	cmp	r3, #9
 8002dd2:	d94d      	bls.n	8002e70 <_svfiprintf_r+0x17c>
 8002dd4:	b1b0      	cbz	r0, 8002e04 <_svfiprintf_r+0x110>
 8002dd6:	9207      	str	r2, [sp, #28]
 8002dd8:	e014      	b.n	8002e04 <_svfiprintf_r+0x110>
 8002dda:	eba0 0308 	sub.w	r3, r0, r8
 8002dde:	fa09 f303 	lsl.w	r3, r9, r3
 8002de2:	4313      	orrs	r3, r2
 8002de4:	9304      	str	r3, [sp, #16]
 8002de6:	46a2      	mov	sl, r4
 8002de8:	e7d2      	b.n	8002d90 <_svfiprintf_r+0x9c>
 8002dea:	9b03      	ldr	r3, [sp, #12]
 8002dec:	1d19      	adds	r1, r3, #4
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	9103      	str	r1, [sp, #12]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	bfbb      	ittet	lt
 8002df6:	425b      	neglt	r3, r3
 8002df8:	f042 0202 	orrlt.w	r2, r2, #2
 8002dfc:	9307      	strge	r3, [sp, #28]
 8002dfe:	9307      	strlt	r3, [sp, #28]
 8002e00:	bfb8      	it	lt
 8002e02:	9204      	strlt	r2, [sp, #16]
 8002e04:	7823      	ldrb	r3, [r4, #0]
 8002e06:	2b2e      	cmp	r3, #46	; 0x2e
 8002e08:	d10c      	bne.n	8002e24 <_svfiprintf_r+0x130>
 8002e0a:	7863      	ldrb	r3, [r4, #1]
 8002e0c:	2b2a      	cmp	r3, #42	; 0x2a
 8002e0e:	d134      	bne.n	8002e7a <_svfiprintf_r+0x186>
 8002e10:	9b03      	ldr	r3, [sp, #12]
 8002e12:	1d1a      	adds	r2, r3, #4
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	9203      	str	r2, [sp, #12]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	bfb8      	it	lt
 8002e1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8002e20:	3402      	adds	r4, #2
 8002e22:	9305      	str	r3, [sp, #20]
 8002e24:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8002eec <_svfiprintf_r+0x1f8>
 8002e28:	7821      	ldrb	r1, [r4, #0]
 8002e2a:	2203      	movs	r2, #3
 8002e2c:	4650      	mov	r0, sl
 8002e2e:	f7fd f9d7 	bl	80001e0 <memchr>
 8002e32:	b138      	cbz	r0, 8002e44 <_svfiprintf_r+0x150>
 8002e34:	9b04      	ldr	r3, [sp, #16]
 8002e36:	eba0 000a 	sub.w	r0, r0, sl
 8002e3a:	2240      	movs	r2, #64	; 0x40
 8002e3c:	4082      	lsls	r2, r0
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	3401      	adds	r4, #1
 8002e42:	9304      	str	r3, [sp, #16]
 8002e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e48:	4825      	ldr	r0, [pc, #148]	; (8002ee0 <_svfiprintf_r+0x1ec>)
 8002e4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e4e:	2206      	movs	r2, #6
 8002e50:	f7fd f9c6 	bl	80001e0 <memchr>
 8002e54:	2800      	cmp	r0, #0
 8002e56:	d038      	beq.n	8002eca <_svfiprintf_r+0x1d6>
 8002e58:	4b22      	ldr	r3, [pc, #136]	; (8002ee4 <_svfiprintf_r+0x1f0>)
 8002e5a:	bb1b      	cbnz	r3, 8002ea4 <_svfiprintf_r+0x1b0>
 8002e5c:	9b03      	ldr	r3, [sp, #12]
 8002e5e:	3307      	adds	r3, #7
 8002e60:	f023 0307 	bic.w	r3, r3, #7
 8002e64:	3308      	adds	r3, #8
 8002e66:	9303      	str	r3, [sp, #12]
 8002e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e6a:	4433      	add	r3, r6
 8002e6c:	9309      	str	r3, [sp, #36]	; 0x24
 8002e6e:	e768      	b.n	8002d42 <_svfiprintf_r+0x4e>
 8002e70:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e74:	460c      	mov	r4, r1
 8002e76:	2001      	movs	r0, #1
 8002e78:	e7a6      	b.n	8002dc8 <_svfiprintf_r+0xd4>
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	3401      	adds	r4, #1
 8002e7e:	9305      	str	r3, [sp, #20]
 8002e80:	4619      	mov	r1, r3
 8002e82:	f04f 0c0a 	mov.w	ip, #10
 8002e86:	4620      	mov	r0, r4
 8002e88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e8c:	3a30      	subs	r2, #48	; 0x30
 8002e8e:	2a09      	cmp	r2, #9
 8002e90:	d903      	bls.n	8002e9a <_svfiprintf_r+0x1a6>
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0c6      	beq.n	8002e24 <_svfiprintf_r+0x130>
 8002e96:	9105      	str	r1, [sp, #20]
 8002e98:	e7c4      	b.n	8002e24 <_svfiprintf_r+0x130>
 8002e9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e9e:	4604      	mov	r4, r0
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e7f0      	b.n	8002e86 <_svfiprintf_r+0x192>
 8002ea4:	ab03      	add	r3, sp, #12
 8002ea6:	9300      	str	r3, [sp, #0]
 8002ea8:	462a      	mov	r2, r5
 8002eaa:	4b0f      	ldr	r3, [pc, #60]	; (8002ee8 <_svfiprintf_r+0x1f4>)
 8002eac:	a904      	add	r1, sp, #16
 8002eae:	4638      	mov	r0, r7
 8002eb0:	f3af 8000 	nop.w
 8002eb4:	1c42      	adds	r2, r0, #1
 8002eb6:	4606      	mov	r6, r0
 8002eb8:	d1d6      	bne.n	8002e68 <_svfiprintf_r+0x174>
 8002eba:	89ab      	ldrh	r3, [r5, #12]
 8002ebc:	065b      	lsls	r3, r3, #25
 8002ebe:	f53f af2d 	bmi.w	8002d1c <_svfiprintf_r+0x28>
 8002ec2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ec4:	b01d      	add	sp, #116	; 0x74
 8002ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002eca:	ab03      	add	r3, sp, #12
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	462a      	mov	r2, r5
 8002ed0:	4b05      	ldr	r3, [pc, #20]	; (8002ee8 <_svfiprintf_r+0x1f4>)
 8002ed2:	a904      	add	r1, sp, #16
 8002ed4:	4638      	mov	r0, r7
 8002ed6:	f000 f9bd 	bl	8003254 <_printf_i>
 8002eda:	e7eb      	b.n	8002eb4 <_svfiprintf_r+0x1c0>
 8002edc:	0800382c 	.word	0x0800382c
 8002ee0:	08003836 	.word	0x08003836
 8002ee4:	00000000 	.word	0x00000000
 8002ee8:	08002c41 	.word	0x08002c41
 8002eec:	08003832 	.word	0x08003832

08002ef0 <__sfputc_r>:
 8002ef0:	6893      	ldr	r3, [r2, #8]
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	b410      	push	{r4}
 8002ef8:	6093      	str	r3, [r2, #8]
 8002efa:	da08      	bge.n	8002f0e <__sfputc_r+0x1e>
 8002efc:	6994      	ldr	r4, [r2, #24]
 8002efe:	42a3      	cmp	r3, r4
 8002f00:	db01      	blt.n	8002f06 <__sfputc_r+0x16>
 8002f02:	290a      	cmp	r1, #10
 8002f04:	d103      	bne.n	8002f0e <__sfputc_r+0x1e>
 8002f06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f0a:	f7ff bc90 	b.w	800282e <__swbuf_r>
 8002f0e:	6813      	ldr	r3, [r2, #0]
 8002f10:	1c58      	adds	r0, r3, #1
 8002f12:	6010      	str	r0, [r2, #0]
 8002f14:	7019      	strb	r1, [r3, #0]
 8002f16:	4608      	mov	r0, r1
 8002f18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <__sfputs_r>:
 8002f1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f20:	4606      	mov	r6, r0
 8002f22:	460f      	mov	r7, r1
 8002f24:	4614      	mov	r4, r2
 8002f26:	18d5      	adds	r5, r2, r3
 8002f28:	42ac      	cmp	r4, r5
 8002f2a:	d101      	bne.n	8002f30 <__sfputs_r+0x12>
 8002f2c:	2000      	movs	r0, #0
 8002f2e:	e007      	b.n	8002f40 <__sfputs_r+0x22>
 8002f30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f34:	463a      	mov	r2, r7
 8002f36:	4630      	mov	r0, r6
 8002f38:	f7ff ffda 	bl	8002ef0 <__sfputc_r>
 8002f3c:	1c43      	adds	r3, r0, #1
 8002f3e:	d1f3      	bne.n	8002f28 <__sfputs_r+0xa>
 8002f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002f44 <_vfiprintf_r>:
 8002f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f48:	460d      	mov	r5, r1
 8002f4a:	b09d      	sub	sp, #116	; 0x74
 8002f4c:	4614      	mov	r4, r2
 8002f4e:	4698      	mov	r8, r3
 8002f50:	4606      	mov	r6, r0
 8002f52:	b118      	cbz	r0, 8002f5c <_vfiprintf_r+0x18>
 8002f54:	6a03      	ldr	r3, [r0, #32]
 8002f56:	b90b      	cbnz	r3, 8002f5c <_vfiprintf_r+0x18>
 8002f58:	f7ff fb62 	bl	8002620 <__sinit>
 8002f5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f5e:	07d9      	lsls	r1, r3, #31
 8002f60:	d405      	bmi.n	8002f6e <_vfiprintf_r+0x2a>
 8002f62:	89ab      	ldrh	r3, [r5, #12]
 8002f64:	059a      	lsls	r2, r3, #22
 8002f66:	d402      	bmi.n	8002f6e <_vfiprintf_r+0x2a>
 8002f68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f6a:	f7ff fd6e 	bl	8002a4a <__retarget_lock_acquire_recursive>
 8002f6e:	89ab      	ldrh	r3, [r5, #12]
 8002f70:	071b      	lsls	r3, r3, #28
 8002f72:	d501      	bpl.n	8002f78 <_vfiprintf_r+0x34>
 8002f74:	692b      	ldr	r3, [r5, #16]
 8002f76:	b99b      	cbnz	r3, 8002fa0 <_vfiprintf_r+0x5c>
 8002f78:	4629      	mov	r1, r5
 8002f7a:	4630      	mov	r0, r6
 8002f7c:	f7ff fc94 	bl	80028a8 <__swsetup_r>
 8002f80:	b170      	cbz	r0, 8002fa0 <_vfiprintf_r+0x5c>
 8002f82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f84:	07dc      	lsls	r4, r3, #31
 8002f86:	d504      	bpl.n	8002f92 <_vfiprintf_r+0x4e>
 8002f88:	f04f 30ff 	mov.w	r0, #4294967295
 8002f8c:	b01d      	add	sp, #116	; 0x74
 8002f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f92:	89ab      	ldrh	r3, [r5, #12]
 8002f94:	0598      	lsls	r0, r3, #22
 8002f96:	d4f7      	bmi.n	8002f88 <_vfiprintf_r+0x44>
 8002f98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f9a:	f7ff fd57 	bl	8002a4c <__retarget_lock_release_recursive>
 8002f9e:	e7f3      	b.n	8002f88 <_vfiprintf_r+0x44>
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	9309      	str	r3, [sp, #36]	; 0x24
 8002fa4:	2320      	movs	r3, #32
 8002fa6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002faa:	f8cd 800c 	str.w	r8, [sp, #12]
 8002fae:	2330      	movs	r3, #48	; 0x30
 8002fb0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003164 <_vfiprintf_r+0x220>
 8002fb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002fb8:	f04f 0901 	mov.w	r9, #1
 8002fbc:	4623      	mov	r3, r4
 8002fbe:	469a      	mov	sl, r3
 8002fc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002fc4:	b10a      	cbz	r2, 8002fca <_vfiprintf_r+0x86>
 8002fc6:	2a25      	cmp	r2, #37	; 0x25
 8002fc8:	d1f9      	bne.n	8002fbe <_vfiprintf_r+0x7a>
 8002fca:	ebba 0b04 	subs.w	fp, sl, r4
 8002fce:	d00b      	beq.n	8002fe8 <_vfiprintf_r+0xa4>
 8002fd0:	465b      	mov	r3, fp
 8002fd2:	4622      	mov	r2, r4
 8002fd4:	4629      	mov	r1, r5
 8002fd6:	4630      	mov	r0, r6
 8002fd8:	f7ff ffa1 	bl	8002f1e <__sfputs_r>
 8002fdc:	3001      	adds	r0, #1
 8002fde:	f000 80a9 	beq.w	8003134 <_vfiprintf_r+0x1f0>
 8002fe2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002fe4:	445a      	add	r2, fp
 8002fe6:	9209      	str	r2, [sp, #36]	; 0x24
 8002fe8:	f89a 3000 	ldrb.w	r3, [sl]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 80a1 	beq.w	8003134 <_vfiprintf_r+0x1f0>
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ff8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ffc:	f10a 0a01 	add.w	sl, sl, #1
 8003000:	9304      	str	r3, [sp, #16]
 8003002:	9307      	str	r3, [sp, #28]
 8003004:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003008:	931a      	str	r3, [sp, #104]	; 0x68
 800300a:	4654      	mov	r4, sl
 800300c:	2205      	movs	r2, #5
 800300e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003012:	4854      	ldr	r0, [pc, #336]	; (8003164 <_vfiprintf_r+0x220>)
 8003014:	f7fd f8e4 	bl	80001e0 <memchr>
 8003018:	9a04      	ldr	r2, [sp, #16]
 800301a:	b9d8      	cbnz	r0, 8003054 <_vfiprintf_r+0x110>
 800301c:	06d1      	lsls	r1, r2, #27
 800301e:	bf44      	itt	mi
 8003020:	2320      	movmi	r3, #32
 8003022:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003026:	0713      	lsls	r3, r2, #28
 8003028:	bf44      	itt	mi
 800302a:	232b      	movmi	r3, #43	; 0x2b
 800302c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003030:	f89a 3000 	ldrb.w	r3, [sl]
 8003034:	2b2a      	cmp	r3, #42	; 0x2a
 8003036:	d015      	beq.n	8003064 <_vfiprintf_r+0x120>
 8003038:	9a07      	ldr	r2, [sp, #28]
 800303a:	4654      	mov	r4, sl
 800303c:	2000      	movs	r0, #0
 800303e:	f04f 0c0a 	mov.w	ip, #10
 8003042:	4621      	mov	r1, r4
 8003044:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003048:	3b30      	subs	r3, #48	; 0x30
 800304a:	2b09      	cmp	r3, #9
 800304c:	d94d      	bls.n	80030ea <_vfiprintf_r+0x1a6>
 800304e:	b1b0      	cbz	r0, 800307e <_vfiprintf_r+0x13a>
 8003050:	9207      	str	r2, [sp, #28]
 8003052:	e014      	b.n	800307e <_vfiprintf_r+0x13a>
 8003054:	eba0 0308 	sub.w	r3, r0, r8
 8003058:	fa09 f303 	lsl.w	r3, r9, r3
 800305c:	4313      	orrs	r3, r2
 800305e:	9304      	str	r3, [sp, #16]
 8003060:	46a2      	mov	sl, r4
 8003062:	e7d2      	b.n	800300a <_vfiprintf_r+0xc6>
 8003064:	9b03      	ldr	r3, [sp, #12]
 8003066:	1d19      	adds	r1, r3, #4
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	9103      	str	r1, [sp, #12]
 800306c:	2b00      	cmp	r3, #0
 800306e:	bfbb      	ittet	lt
 8003070:	425b      	neglt	r3, r3
 8003072:	f042 0202 	orrlt.w	r2, r2, #2
 8003076:	9307      	strge	r3, [sp, #28]
 8003078:	9307      	strlt	r3, [sp, #28]
 800307a:	bfb8      	it	lt
 800307c:	9204      	strlt	r2, [sp, #16]
 800307e:	7823      	ldrb	r3, [r4, #0]
 8003080:	2b2e      	cmp	r3, #46	; 0x2e
 8003082:	d10c      	bne.n	800309e <_vfiprintf_r+0x15a>
 8003084:	7863      	ldrb	r3, [r4, #1]
 8003086:	2b2a      	cmp	r3, #42	; 0x2a
 8003088:	d134      	bne.n	80030f4 <_vfiprintf_r+0x1b0>
 800308a:	9b03      	ldr	r3, [sp, #12]
 800308c:	1d1a      	adds	r2, r3, #4
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	9203      	str	r2, [sp, #12]
 8003092:	2b00      	cmp	r3, #0
 8003094:	bfb8      	it	lt
 8003096:	f04f 33ff 	movlt.w	r3, #4294967295
 800309a:	3402      	adds	r4, #2
 800309c:	9305      	str	r3, [sp, #20]
 800309e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003174 <_vfiprintf_r+0x230>
 80030a2:	7821      	ldrb	r1, [r4, #0]
 80030a4:	2203      	movs	r2, #3
 80030a6:	4650      	mov	r0, sl
 80030a8:	f7fd f89a 	bl	80001e0 <memchr>
 80030ac:	b138      	cbz	r0, 80030be <_vfiprintf_r+0x17a>
 80030ae:	9b04      	ldr	r3, [sp, #16]
 80030b0:	eba0 000a 	sub.w	r0, r0, sl
 80030b4:	2240      	movs	r2, #64	; 0x40
 80030b6:	4082      	lsls	r2, r0
 80030b8:	4313      	orrs	r3, r2
 80030ba:	3401      	adds	r4, #1
 80030bc:	9304      	str	r3, [sp, #16]
 80030be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030c2:	4829      	ldr	r0, [pc, #164]	; (8003168 <_vfiprintf_r+0x224>)
 80030c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80030c8:	2206      	movs	r2, #6
 80030ca:	f7fd f889 	bl	80001e0 <memchr>
 80030ce:	2800      	cmp	r0, #0
 80030d0:	d03f      	beq.n	8003152 <_vfiprintf_r+0x20e>
 80030d2:	4b26      	ldr	r3, [pc, #152]	; (800316c <_vfiprintf_r+0x228>)
 80030d4:	bb1b      	cbnz	r3, 800311e <_vfiprintf_r+0x1da>
 80030d6:	9b03      	ldr	r3, [sp, #12]
 80030d8:	3307      	adds	r3, #7
 80030da:	f023 0307 	bic.w	r3, r3, #7
 80030de:	3308      	adds	r3, #8
 80030e0:	9303      	str	r3, [sp, #12]
 80030e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030e4:	443b      	add	r3, r7
 80030e6:	9309      	str	r3, [sp, #36]	; 0x24
 80030e8:	e768      	b.n	8002fbc <_vfiprintf_r+0x78>
 80030ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80030ee:	460c      	mov	r4, r1
 80030f0:	2001      	movs	r0, #1
 80030f2:	e7a6      	b.n	8003042 <_vfiprintf_r+0xfe>
 80030f4:	2300      	movs	r3, #0
 80030f6:	3401      	adds	r4, #1
 80030f8:	9305      	str	r3, [sp, #20]
 80030fa:	4619      	mov	r1, r3
 80030fc:	f04f 0c0a 	mov.w	ip, #10
 8003100:	4620      	mov	r0, r4
 8003102:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003106:	3a30      	subs	r2, #48	; 0x30
 8003108:	2a09      	cmp	r2, #9
 800310a:	d903      	bls.n	8003114 <_vfiprintf_r+0x1d0>
 800310c:	2b00      	cmp	r3, #0
 800310e:	d0c6      	beq.n	800309e <_vfiprintf_r+0x15a>
 8003110:	9105      	str	r1, [sp, #20]
 8003112:	e7c4      	b.n	800309e <_vfiprintf_r+0x15a>
 8003114:	fb0c 2101 	mla	r1, ip, r1, r2
 8003118:	4604      	mov	r4, r0
 800311a:	2301      	movs	r3, #1
 800311c:	e7f0      	b.n	8003100 <_vfiprintf_r+0x1bc>
 800311e:	ab03      	add	r3, sp, #12
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	462a      	mov	r2, r5
 8003124:	4b12      	ldr	r3, [pc, #72]	; (8003170 <_vfiprintf_r+0x22c>)
 8003126:	a904      	add	r1, sp, #16
 8003128:	4630      	mov	r0, r6
 800312a:	f3af 8000 	nop.w
 800312e:	4607      	mov	r7, r0
 8003130:	1c78      	adds	r0, r7, #1
 8003132:	d1d6      	bne.n	80030e2 <_vfiprintf_r+0x19e>
 8003134:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003136:	07d9      	lsls	r1, r3, #31
 8003138:	d405      	bmi.n	8003146 <_vfiprintf_r+0x202>
 800313a:	89ab      	ldrh	r3, [r5, #12]
 800313c:	059a      	lsls	r2, r3, #22
 800313e:	d402      	bmi.n	8003146 <_vfiprintf_r+0x202>
 8003140:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003142:	f7ff fc83 	bl	8002a4c <__retarget_lock_release_recursive>
 8003146:	89ab      	ldrh	r3, [r5, #12]
 8003148:	065b      	lsls	r3, r3, #25
 800314a:	f53f af1d 	bmi.w	8002f88 <_vfiprintf_r+0x44>
 800314e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003150:	e71c      	b.n	8002f8c <_vfiprintf_r+0x48>
 8003152:	ab03      	add	r3, sp, #12
 8003154:	9300      	str	r3, [sp, #0]
 8003156:	462a      	mov	r2, r5
 8003158:	4b05      	ldr	r3, [pc, #20]	; (8003170 <_vfiprintf_r+0x22c>)
 800315a:	a904      	add	r1, sp, #16
 800315c:	4630      	mov	r0, r6
 800315e:	f000 f879 	bl	8003254 <_printf_i>
 8003162:	e7e4      	b.n	800312e <_vfiprintf_r+0x1ea>
 8003164:	0800382c 	.word	0x0800382c
 8003168:	08003836 	.word	0x08003836
 800316c:	00000000 	.word	0x00000000
 8003170:	08002f1f 	.word	0x08002f1f
 8003174:	08003832 	.word	0x08003832

08003178 <_printf_common>:
 8003178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800317c:	4616      	mov	r6, r2
 800317e:	4699      	mov	r9, r3
 8003180:	688a      	ldr	r2, [r1, #8]
 8003182:	690b      	ldr	r3, [r1, #16]
 8003184:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003188:	4293      	cmp	r3, r2
 800318a:	bfb8      	it	lt
 800318c:	4613      	movlt	r3, r2
 800318e:	6033      	str	r3, [r6, #0]
 8003190:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003194:	4607      	mov	r7, r0
 8003196:	460c      	mov	r4, r1
 8003198:	b10a      	cbz	r2, 800319e <_printf_common+0x26>
 800319a:	3301      	adds	r3, #1
 800319c:	6033      	str	r3, [r6, #0]
 800319e:	6823      	ldr	r3, [r4, #0]
 80031a0:	0699      	lsls	r1, r3, #26
 80031a2:	bf42      	ittt	mi
 80031a4:	6833      	ldrmi	r3, [r6, #0]
 80031a6:	3302      	addmi	r3, #2
 80031a8:	6033      	strmi	r3, [r6, #0]
 80031aa:	6825      	ldr	r5, [r4, #0]
 80031ac:	f015 0506 	ands.w	r5, r5, #6
 80031b0:	d106      	bne.n	80031c0 <_printf_common+0x48>
 80031b2:	f104 0a19 	add.w	sl, r4, #25
 80031b6:	68e3      	ldr	r3, [r4, #12]
 80031b8:	6832      	ldr	r2, [r6, #0]
 80031ba:	1a9b      	subs	r3, r3, r2
 80031bc:	42ab      	cmp	r3, r5
 80031be:	dc26      	bgt.n	800320e <_printf_common+0x96>
 80031c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80031c4:	1e13      	subs	r3, r2, #0
 80031c6:	6822      	ldr	r2, [r4, #0]
 80031c8:	bf18      	it	ne
 80031ca:	2301      	movne	r3, #1
 80031cc:	0692      	lsls	r2, r2, #26
 80031ce:	d42b      	bmi.n	8003228 <_printf_common+0xb0>
 80031d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80031d4:	4649      	mov	r1, r9
 80031d6:	4638      	mov	r0, r7
 80031d8:	47c0      	blx	r8
 80031da:	3001      	adds	r0, #1
 80031dc:	d01e      	beq.n	800321c <_printf_common+0xa4>
 80031de:	6823      	ldr	r3, [r4, #0]
 80031e0:	6922      	ldr	r2, [r4, #16]
 80031e2:	f003 0306 	and.w	r3, r3, #6
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	bf02      	ittt	eq
 80031ea:	68e5      	ldreq	r5, [r4, #12]
 80031ec:	6833      	ldreq	r3, [r6, #0]
 80031ee:	1aed      	subeq	r5, r5, r3
 80031f0:	68a3      	ldr	r3, [r4, #8]
 80031f2:	bf0c      	ite	eq
 80031f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80031f8:	2500      	movne	r5, #0
 80031fa:	4293      	cmp	r3, r2
 80031fc:	bfc4      	itt	gt
 80031fe:	1a9b      	subgt	r3, r3, r2
 8003200:	18ed      	addgt	r5, r5, r3
 8003202:	2600      	movs	r6, #0
 8003204:	341a      	adds	r4, #26
 8003206:	42b5      	cmp	r5, r6
 8003208:	d11a      	bne.n	8003240 <_printf_common+0xc8>
 800320a:	2000      	movs	r0, #0
 800320c:	e008      	b.n	8003220 <_printf_common+0xa8>
 800320e:	2301      	movs	r3, #1
 8003210:	4652      	mov	r2, sl
 8003212:	4649      	mov	r1, r9
 8003214:	4638      	mov	r0, r7
 8003216:	47c0      	blx	r8
 8003218:	3001      	adds	r0, #1
 800321a:	d103      	bne.n	8003224 <_printf_common+0xac>
 800321c:	f04f 30ff 	mov.w	r0, #4294967295
 8003220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003224:	3501      	adds	r5, #1
 8003226:	e7c6      	b.n	80031b6 <_printf_common+0x3e>
 8003228:	18e1      	adds	r1, r4, r3
 800322a:	1c5a      	adds	r2, r3, #1
 800322c:	2030      	movs	r0, #48	; 0x30
 800322e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003232:	4422      	add	r2, r4
 8003234:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003238:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800323c:	3302      	adds	r3, #2
 800323e:	e7c7      	b.n	80031d0 <_printf_common+0x58>
 8003240:	2301      	movs	r3, #1
 8003242:	4622      	mov	r2, r4
 8003244:	4649      	mov	r1, r9
 8003246:	4638      	mov	r0, r7
 8003248:	47c0      	blx	r8
 800324a:	3001      	adds	r0, #1
 800324c:	d0e6      	beq.n	800321c <_printf_common+0xa4>
 800324e:	3601      	adds	r6, #1
 8003250:	e7d9      	b.n	8003206 <_printf_common+0x8e>
	...

08003254 <_printf_i>:
 8003254:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003258:	7e0f      	ldrb	r7, [r1, #24]
 800325a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800325c:	2f78      	cmp	r7, #120	; 0x78
 800325e:	4691      	mov	r9, r2
 8003260:	4680      	mov	r8, r0
 8003262:	460c      	mov	r4, r1
 8003264:	469a      	mov	sl, r3
 8003266:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800326a:	d807      	bhi.n	800327c <_printf_i+0x28>
 800326c:	2f62      	cmp	r7, #98	; 0x62
 800326e:	d80a      	bhi.n	8003286 <_printf_i+0x32>
 8003270:	2f00      	cmp	r7, #0
 8003272:	f000 80d4 	beq.w	800341e <_printf_i+0x1ca>
 8003276:	2f58      	cmp	r7, #88	; 0x58
 8003278:	f000 80c0 	beq.w	80033fc <_printf_i+0x1a8>
 800327c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003280:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003284:	e03a      	b.n	80032fc <_printf_i+0xa8>
 8003286:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800328a:	2b15      	cmp	r3, #21
 800328c:	d8f6      	bhi.n	800327c <_printf_i+0x28>
 800328e:	a101      	add	r1, pc, #4	; (adr r1, 8003294 <_printf_i+0x40>)
 8003290:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003294:	080032ed 	.word	0x080032ed
 8003298:	08003301 	.word	0x08003301
 800329c:	0800327d 	.word	0x0800327d
 80032a0:	0800327d 	.word	0x0800327d
 80032a4:	0800327d 	.word	0x0800327d
 80032a8:	0800327d 	.word	0x0800327d
 80032ac:	08003301 	.word	0x08003301
 80032b0:	0800327d 	.word	0x0800327d
 80032b4:	0800327d 	.word	0x0800327d
 80032b8:	0800327d 	.word	0x0800327d
 80032bc:	0800327d 	.word	0x0800327d
 80032c0:	08003405 	.word	0x08003405
 80032c4:	0800332d 	.word	0x0800332d
 80032c8:	080033bf 	.word	0x080033bf
 80032cc:	0800327d 	.word	0x0800327d
 80032d0:	0800327d 	.word	0x0800327d
 80032d4:	08003427 	.word	0x08003427
 80032d8:	0800327d 	.word	0x0800327d
 80032dc:	0800332d 	.word	0x0800332d
 80032e0:	0800327d 	.word	0x0800327d
 80032e4:	0800327d 	.word	0x0800327d
 80032e8:	080033c7 	.word	0x080033c7
 80032ec:	682b      	ldr	r3, [r5, #0]
 80032ee:	1d1a      	adds	r2, r3, #4
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	602a      	str	r2, [r5, #0]
 80032f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80032fc:	2301      	movs	r3, #1
 80032fe:	e09f      	b.n	8003440 <_printf_i+0x1ec>
 8003300:	6820      	ldr	r0, [r4, #0]
 8003302:	682b      	ldr	r3, [r5, #0]
 8003304:	0607      	lsls	r7, r0, #24
 8003306:	f103 0104 	add.w	r1, r3, #4
 800330a:	6029      	str	r1, [r5, #0]
 800330c:	d501      	bpl.n	8003312 <_printf_i+0xbe>
 800330e:	681e      	ldr	r6, [r3, #0]
 8003310:	e003      	b.n	800331a <_printf_i+0xc6>
 8003312:	0646      	lsls	r6, r0, #25
 8003314:	d5fb      	bpl.n	800330e <_printf_i+0xba>
 8003316:	f9b3 6000 	ldrsh.w	r6, [r3]
 800331a:	2e00      	cmp	r6, #0
 800331c:	da03      	bge.n	8003326 <_printf_i+0xd2>
 800331e:	232d      	movs	r3, #45	; 0x2d
 8003320:	4276      	negs	r6, r6
 8003322:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003326:	485a      	ldr	r0, [pc, #360]	; (8003490 <_printf_i+0x23c>)
 8003328:	230a      	movs	r3, #10
 800332a:	e012      	b.n	8003352 <_printf_i+0xfe>
 800332c:	682b      	ldr	r3, [r5, #0]
 800332e:	6820      	ldr	r0, [r4, #0]
 8003330:	1d19      	adds	r1, r3, #4
 8003332:	6029      	str	r1, [r5, #0]
 8003334:	0605      	lsls	r5, r0, #24
 8003336:	d501      	bpl.n	800333c <_printf_i+0xe8>
 8003338:	681e      	ldr	r6, [r3, #0]
 800333a:	e002      	b.n	8003342 <_printf_i+0xee>
 800333c:	0641      	lsls	r1, r0, #25
 800333e:	d5fb      	bpl.n	8003338 <_printf_i+0xe4>
 8003340:	881e      	ldrh	r6, [r3, #0]
 8003342:	4853      	ldr	r0, [pc, #332]	; (8003490 <_printf_i+0x23c>)
 8003344:	2f6f      	cmp	r7, #111	; 0x6f
 8003346:	bf0c      	ite	eq
 8003348:	2308      	moveq	r3, #8
 800334a:	230a      	movne	r3, #10
 800334c:	2100      	movs	r1, #0
 800334e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003352:	6865      	ldr	r5, [r4, #4]
 8003354:	60a5      	str	r5, [r4, #8]
 8003356:	2d00      	cmp	r5, #0
 8003358:	bfa2      	ittt	ge
 800335a:	6821      	ldrge	r1, [r4, #0]
 800335c:	f021 0104 	bicge.w	r1, r1, #4
 8003360:	6021      	strge	r1, [r4, #0]
 8003362:	b90e      	cbnz	r6, 8003368 <_printf_i+0x114>
 8003364:	2d00      	cmp	r5, #0
 8003366:	d04b      	beq.n	8003400 <_printf_i+0x1ac>
 8003368:	4615      	mov	r5, r2
 800336a:	fbb6 f1f3 	udiv	r1, r6, r3
 800336e:	fb03 6711 	mls	r7, r3, r1, r6
 8003372:	5dc7      	ldrb	r7, [r0, r7]
 8003374:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003378:	4637      	mov	r7, r6
 800337a:	42bb      	cmp	r3, r7
 800337c:	460e      	mov	r6, r1
 800337e:	d9f4      	bls.n	800336a <_printf_i+0x116>
 8003380:	2b08      	cmp	r3, #8
 8003382:	d10b      	bne.n	800339c <_printf_i+0x148>
 8003384:	6823      	ldr	r3, [r4, #0]
 8003386:	07de      	lsls	r6, r3, #31
 8003388:	d508      	bpl.n	800339c <_printf_i+0x148>
 800338a:	6923      	ldr	r3, [r4, #16]
 800338c:	6861      	ldr	r1, [r4, #4]
 800338e:	4299      	cmp	r1, r3
 8003390:	bfde      	ittt	le
 8003392:	2330      	movle	r3, #48	; 0x30
 8003394:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003398:	f105 35ff 	addle.w	r5, r5, #4294967295
 800339c:	1b52      	subs	r2, r2, r5
 800339e:	6122      	str	r2, [r4, #16]
 80033a0:	f8cd a000 	str.w	sl, [sp]
 80033a4:	464b      	mov	r3, r9
 80033a6:	aa03      	add	r2, sp, #12
 80033a8:	4621      	mov	r1, r4
 80033aa:	4640      	mov	r0, r8
 80033ac:	f7ff fee4 	bl	8003178 <_printf_common>
 80033b0:	3001      	adds	r0, #1
 80033b2:	d14a      	bne.n	800344a <_printf_i+0x1f6>
 80033b4:	f04f 30ff 	mov.w	r0, #4294967295
 80033b8:	b004      	add	sp, #16
 80033ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033be:	6823      	ldr	r3, [r4, #0]
 80033c0:	f043 0320 	orr.w	r3, r3, #32
 80033c4:	6023      	str	r3, [r4, #0]
 80033c6:	4833      	ldr	r0, [pc, #204]	; (8003494 <_printf_i+0x240>)
 80033c8:	2778      	movs	r7, #120	; 0x78
 80033ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80033ce:	6823      	ldr	r3, [r4, #0]
 80033d0:	6829      	ldr	r1, [r5, #0]
 80033d2:	061f      	lsls	r7, r3, #24
 80033d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80033d8:	d402      	bmi.n	80033e0 <_printf_i+0x18c>
 80033da:	065f      	lsls	r7, r3, #25
 80033dc:	bf48      	it	mi
 80033de:	b2b6      	uxthmi	r6, r6
 80033e0:	07df      	lsls	r7, r3, #31
 80033e2:	bf48      	it	mi
 80033e4:	f043 0320 	orrmi.w	r3, r3, #32
 80033e8:	6029      	str	r1, [r5, #0]
 80033ea:	bf48      	it	mi
 80033ec:	6023      	strmi	r3, [r4, #0]
 80033ee:	b91e      	cbnz	r6, 80033f8 <_printf_i+0x1a4>
 80033f0:	6823      	ldr	r3, [r4, #0]
 80033f2:	f023 0320 	bic.w	r3, r3, #32
 80033f6:	6023      	str	r3, [r4, #0]
 80033f8:	2310      	movs	r3, #16
 80033fa:	e7a7      	b.n	800334c <_printf_i+0xf8>
 80033fc:	4824      	ldr	r0, [pc, #144]	; (8003490 <_printf_i+0x23c>)
 80033fe:	e7e4      	b.n	80033ca <_printf_i+0x176>
 8003400:	4615      	mov	r5, r2
 8003402:	e7bd      	b.n	8003380 <_printf_i+0x12c>
 8003404:	682b      	ldr	r3, [r5, #0]
 8003406:	6826      	ldr	r6, [r4, #0]
 8003408:	6961      	ldr	r1, [r4, #20]
 800340a:	1d18      	adds	r0, r3, #4
 800340c:	6028      	str	r0, [r5, #0]
 800340e:	0635      	lsls	r5, r6, #24
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	d501      	bpl.n	8003418 <_printf_i+0x1c4>
 8003414:	6019      	str	r1, [r3, #0]
 8003416:	e002      	b.n	800341e <_printf_i+0x1ca>
 8003418:	0670      	lsls	r0, r6, #25
 800341a:	d5fb      	bpl.n	8003414 <_printf_i+0x1c0>
 800341c:	8019      	strh	r1, [r3, #0]
 800341e:	2300      	movs	r3, #0
 8003420:	6123      	str	r3, [r4, #16]
 8003422:	4615      	mov	r5, r2
 8003424:	e7bc      	b.n	80033a0 <_printf_i+0x14c>
 8003426:	682b      	ldr	r3, [r5, #0]
 8003428:	1d1a      	adds	r2, r3, #4
 800342a:	602a      	str	r2, [r5, #0]
 800342c:	681d      	ldr	r5, [r3, #0]
 800342e:	6862      	ldr	r2, [r4, #4]
 8003430:	2100      	movs	r1, #0
 8003432:	4628      	mov	r0, r5
 8003434:	f7fc fed4 	bl	80001e0 <memchr>
 8003438:	b108      	cbz	r0, 800343e <_printf_i+0x1ea>
 800343a:	1b40      	subs	r0, r0, r5
 800343c:	6060      	str	r0, [r4, #4]
 800343e:	6863      	ldr	r3, [r4, #4]
 8003440:	6123      	str	r3, [r4, #16]
 8003442:	2300      	movs	r3, #0
 8003444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003448:	e7aa      	b.n	80033a0 <_printf_i+0x14c>
 800344a:	6923      	ldr	r3, [r4, #16]
 800344c:	462a      	mov	r2, r5
 800344e:	4649      	mov	r1, r9
 8003450:	4640      	mov	r0, r8
 8003452:	47d0      	blx	sl
 8003454:	3001      	adds	r0, #1
 8003456:	d0ad      	beq.n	80033b4 <_printf_i+0x160>
 8003458:	6823      	ldr	r3, [r4, #0]
 800345a:	079b      	lsls	r3, r3, #30
 800345c:	d413      	bmi.n	8003486 <_printf_i+0x232>
 800345e:	68e0      	ldr	r0, [r4, #12]
 8003460:	9b03      	ldr	r3, [sp, #12]
 8003462:	4298      	cmp	r0, r3
 8003464:	bfb8      	it	lt
 8003466:	4618      	movlt	r0, r3
 8003468:	e7a6      	b.n	80033b8 <_printf_i+0x164>
 800346a:	2301      	movs	r3, #1
 800346c:	4632      	mov	r2, r6
 800346e:	4649      	mov	r1, r9
 8003470:	4640      	mov	r0, r8
 8003472:	47d0      	blx	sl
 8003474:	3001      	adds	r0, #1
 8003476:	d09d      	beq.n	80033b4 <_printf_i+0x160>
 8003478:	3501      	adds	r5, #1
 800347a:	68e3      	ldr	r3, [r4, #12]
 800347c:	9903      	ldr	r1, [sp, #12]
 800347e:	1a5b      	subs	r3, r3, r1
 8003480:	42ab      	cmp	r3, r5
 8003482:	dcf2      	bgt.n	800346a <_printf_i+0x216>
 8003484:	e7eb      	b.n	800345e <_printf_i+0x20a>
 8003486:	2500      	movs	r5, #0
 8003488:	f104 0619 	add.w	r6, r4, #25
 800348c:	e7f5      	b.n	800347a <_printf_i+0x226>
 800348e:	bf00      	nop
 8003490:	0800383d 	.word	0x0800383d
 8003494:	0800384e 	.word	0x0800384e

08003498 <__sflush_r>:
 8003498:	898a      	ldrh	r2, [r1, #12]
 800349a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800349e:	4605      	mov	r5, r0
 80034a0:	0710      	lsls	r0, r2, #28
 80034a2:	460c      	mov	r4, r1
 80034a4:	d458      	bmi.n	8003558 <__sflush_r+0xc0>
 80034a6:	684b      	ldr	r3, [r1, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	dc05      	bgt.n	80034b8 <__sflush_r+0x20>
 80034ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	dc02      	bgt.n	80034b8 <__sflush_r+0x20>
 80034b2:	2000      	movs	r0, #0
 80034b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034ba:	2e00      	cmp	r6, #0
 80034bc:	d0f9      	beq.n	80034b2 <__sflush_r+0x1a>
 80034be:	2300      	movs	r3, #0
 80034c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80034c4:	682f      	ldr	r7, [r5, #0]
 80034c6:	6a21      	ldr	r1, [r4, #32]
 80034c8:	602b      	str	r3, [r5, #0]
 80034ca:	d032      	beq.n	8003532 <__sflush_r+0x9a>
 80034cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80034ce:	89a3      	ldrh	r3, [r4, #12]
 80034d0:	075a      	lsls	r2, r3, #29
 80034d2:	d505      	bpl.n	80034e0 <__sflush_r+0x48>
 80034d4:	6863      	ldr	r3, [r4, #4]
 80034d6:	1ac0      	subs	r0, r0, r3
 80034d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80034da:	b10b      	cbz	r3, 80034e0 <__sflush_r+0x48>
 80034dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034de:	1ac0      	subs	r0, r0, r3
 80034e0:	2300      	movs	r3, #0
 80034e2:	4602      	mov	r2, r0
 80034e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034e6:	6a21      	ldr	r1, [r4, #32]
 80034e8:	4628      	mov	r0, r5
 80034ea:	47b0      	blx	r6
 80034ec:	1c43      	adds	r3, r0, #1
 80034ee:	89a3      	ldrh	r3, [r4, #12]
 80034f0:	d106      	bne.n	8003500 <__sflush_r+0x68>
 80034f2:	6829      	ldr	r1, [r5, #0]
 80034f4:	291d      	cmp	r1, #29
 80034f6:	d82b      	bhi.n	8003550 <__sflush_r+0xb8>
 80034f8:	4a29      	ldr	r2, [pc, #164]	; (80035a0 <__sflush_r+0x108>)
 80034fa:	410a      	asrs	r2, r1
 80034fc:	07d6      	lsls	r6, r2, #31
 80034fe:	d427      	bmi.n	8003550 <__sflush_r+0xb8>
 8003500:	2200      	movs	r2, #0
 8003502:	6062      	str	r2, [r4, #4]
 8003504:	04d9      	lsls	r1, r3, #19
 8003506:	6922      	ldr	r2, [r4, #16]
 8003508:	6022      	str	r2, [r4, #0]
 800350a:	d504      	bpl.n	8003516 <__sflush_r+0x7e>
 800350c:	1c42      	adds	r2, r0, #1
 800350e:	d101      	bne.n	8003514 <__sflush_r+0x7c>
 8003510:	682b      	ldr	r3, [r5, #0]
 8003512:	b903      	cbnz	r3, 8003516 <__sflush_r+0x7e>
 8003514:	6560      	str	r0, [r4, #84]	; 0x54
 8003516:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003518:	602f      	str	r7, [r5, #0]
 800351a:	2900      	cmp	r1, #0
 800351c:	d0c9      	beq.n	80034b2 <__sflush_r+0x1a>
 800351e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003522:	4299      	cmp	r1, r3
 8003524:	d002      	beq.n	800352c <__sflush_r+0x94>
 8003526:	4628      	mov	r0, r5
 8003528:	f7ff fa92 	bl	8002a50 <_free_r>
 800352c:	2000      	movs	r0, #0
 800352e:	6360      	str	r0, [r4, #52]	; 0x34
 8003530:	e7c0      	b.n	80034b4 <__sflush_r+0x1c>
 8003532:	2301      	movs	r3, #1
 8003534:	4628      	mov	r0, r5
 8003536:	47b0      	blx	r6
 8003538:	1c41      	adds	r1, r0, #1
 800353a:	d1c8      	bne.n	80034ce <__sflush_r+0x36>
 800353c:	682b      	ldr	r3, [r5, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0c5      	beq.n	80034ce <__sflush_r+0x36>
 8003542:	2b1d      	cmp	r3, #29
 8003544:	d001      	beq.n	800354a <__sflush_r+0xb2>
 8003546:	2b16      	cmp	r3, #22
 8003548:	d101      	bne.n	800354e <__sflush_r+0xb6>
 800354a:	602f      	str	r7, [r5, #0]
 800354c:	e7b1      	b.n	80034b2 <__sflush_r+0x1a>
 800354e:	89a3      	ldrh	r3, [r4, #12]
 8003550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003554:	81a3      	strh	r3, [r4, #12]
 8003556:	e7ad      	b.n	80034b4 <__sflush_r+0x1c>
 8003558:	690f      	ldr	r7, [r1, #16]
 800355a:	2f00      	cmp	r7, #0
 800355c:	d0a9      	beq.n	80034b2 <__sflush_r+0x1a>
 800355e:	0793      	lsls	r3, r2, #30
 8003560:	680e      	ldr	r6, [r1, #0]
 8003562:	bf08      	it	eq
 8003564:	694b      	ldreq	r3, [r1, #20]
 8003566:	600f      	str	r7, [r1, #0]
 8003568:	bf18      	it	ne
 800356a:	2300      	movne	r3, #0
 800356c:	eba6 0807 	sub.w	r8, r6, r7
 8003570:	608b      	str	r3, [r1, #8]
 8003572:	f1b8 0f00 	cmp.w	r8, #0
 8003576:	dd9c      	ble.n	80034b2 <__sflush_r+0x1a>
 8003578:	6a21      	ldr	r1, [r4, #32]
 800357a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800357c:	4643      	mov	r3, r8
 800357e:	463a      	mov	r2, r7
 8003580:	4628      	mov	r0, r5
 8003582:	47b0      	blx	r6
 8003584:	2800      	cmp	r0, #0
 8003586:	dc06      	bgt.n	8003596 <__sflush_r+0xfe>
 8003588:	89a3      	ldrh	r3, [r4, #12]
 800358a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800358e:	81a3      	strh	r3, [r4, #12]
 8003590:	f04f 30ff 	mov.w	r0, #4294967295
 8003594:	e78e      	b.n	80034b4 <__sflush_r+0x1c>
 8003596:	4407      	add	r7, r0
 8003598:	eba8 0800 	sub.w	r8, r8, r0
 800359c:	e7e9      	b.n	8003572 <__sflush_r+0xda>
 800359e:	bf00      	nop
 80035a0:	dfbffffe 	.word	0xdfbffffe

080035a4 <_fflush_r>:
 80035a4:	b538      	push	{r3, r4, r5, lr}
 80035a6:	690b      	ldr	r3, [r1, #16]
 80035a8:	4605      	mov	r5, r0
 80035aa:	460c      	mov	r4, r1
 80035ac:	b913      	cbnz	r3, 80035b4 <_fflush_r+0x10>
 80035ae:	2500      	movs	r5, #0
 80035b0:	4628      	mov	r0, r5
 80035b2:	bd38      	pop	{r3, r4, r5, pc}
 80035b4:	b118      	cbz	r0, 80035be <_fflush_r+0x1a>
 80035b6:	6a03      	ldr	r3, [r0, #32]
 80035b8:	b90b      	cbnz	r3, 80035be <_fflush_r+0x1a>
 80035ba:	f7ff f831 	bl	8002620 <__sinit>
 80035be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f3      	beq.n	80035ae <_fflush_r+0xa>
 80035c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80035c8:	07d0      	lsls	r0, r2, #31
 80035ca:	d404      	bmi.n	80035d6 <_fflush_r+0x32>
 80035cc:	0599      	lsls	r1, r3, #22
 80035ce:	d402      	bmi.n	80035d6 <_fflush_r+0x32>
 80035d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035d2:	f7ff fa3a 	bl	8002a4a <__retarget_lock_acquire_recursive>
 80035d6:	4628      	mov	r0, r5
 80035d8:	4621      	mov	r1, r4
 80035da:	f7ff ff5d 	bl	8003498 <__sflush_r>
 80035de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035e0:	07da      	lsls	r2, r3, #31
 80035e2:	4605      	mov	r5, r0
 80035e4:	d4e4      	bmi.n	80035b0 <_fflush_r+0xc>
 80035e6:	89a3      	ldrh	r3, [r4, #12]
 80035e8:	059b      	lsls	r3, r3, #22
 80035ea:	d4e1      	bmi.n	80035b0 <_fflush_r+0xc>
 80035ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035ee:	f7ff fa2d 	bl	8002a4c <__retarget_lock_release_recursive>
 80035f2:	e7dd      	b.n	80035b0 <_fflush_r+0xc>

080035f4 <__swhatbuf_r>:
 80035f4:	b570      	push	{r4, r5, r6, lr}
 80035f6:	460c      	mov	r4, r1
 80035f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035fc:	2900      	cmp	r1, #0
 80035fe:	b096      	sub	sp, #88	; 0x58
 8003600:	4615      	mov	r5, r2
 8003602:	461e      	mov	r6, r3
 8003604:	da0d      	bge.n	8003622 <__swhatbuf_r+0x2e>
 8003606:	89a3      	ldrh	r3, [r4, #12]
 8003608:	f013 0f80 	tst.w	r3, #128	; 0x80
 800360c:	f04f 0100 	mov.w	r1, #0
 8003610:	bf0c      	ite	eq
 8003612:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003616:	2340      	movne	r3, #64	; 0x40
 8003618:	2000      	movs	r0, #0
 800361a:	6031      	str	r1, [r6, #0]
 800361c:	602b      	str	r3, [r5, #0]
 800361e:	b016      	add	sp, #88	; 0x58
 8003620:	bd70      	pop	{r4, r5, r6, pc}
 8003622:	466a      	mov	r2, sp
 8003624:	f000 f862 	bl	80036ec <_fstat_r>
 8003628:	2800      	cmp	r0, #0
 800362a:	dbec      	blt.n	8003606 <__swhatbuf_r+0x12>
 800362c:	9901      	ldr	r1, [sp, #4]
 800362e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003632:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003636:	4259      	negs	r1, r3
 8003638:	4159      	adcs	r1, r3
 800363a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800363e:	e7eb      	b.n	8003618 <__swhatbuf_r+0x24>

08003640 <__smakebuf_r>:
 8003640:	898b      	ldrh	r3, [r1, #12]
 8003642:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003644:	079d      	lsls	r5, r3, #30
 8003646:	4606      	mov	r6, r0
 8003648:	460c      	mov	r4, r1
 800364a:	d507      	bpl.n	800365c <__smakebuf_r+0x1c>
 800364c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003650:	6023      	str	r3, [r4, #0]
 8003652:	6123      	str	r3, [r4, #16]
 8003654:	2301      	movs	r3, #1
 8003656:	6163      	str	r3, [r4, #20]
 8003658:	b002      	add	sp, #8
 800365a:	bd70      	pop	{r4, r5, r6, pc}
 800365c:	ab01      	add	r3, sp, #4
 800365e:	466a      	mov	r2, sp
 8003660:	f7ff ffc8 	bl	80035f4 <__swhatbuf_r>
 8003664:	9900      	ldr	r1, [sp, #0]
 8003666:	4605      	mov	r5, r0
 8003668:	4630      	mov	r0, r6
 800366a:	f7ff fa5d 	bl	8002b28 <_malloc_r>
 800366e:	b948      	cbnz	r0, 8003684 <__smakebuf_r+0x44>
 8003670:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003674:	059a      	lsls	r2, r3, #22
 8003676:	d4ef      	bmi.n	8003658 <__smakebuf_r+0x18>
 8003678:	f023 0303 	bic.w	r3, r3, #3
 800367c:	f043 0302 	orr.w	r3, r3, #2
 8003680:	81a3      	strh	r3, [r4, #12]
 8003682:	e7e3      	b.n	800364c <__smakebuf_r+0xc>
 8003684:	89a3      	ldrh	r3, [r4, #12]
 8003686:	6020      	str	r0, [r4, #0]
 8003688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800368c:	81a3      	strh	r3, [r4, #12]
 800368e:	9b00      	ldr	r3, [sp, #0]
 8003690:	6163      	str	r3, [r4, #20]
 8003692:	9b01      	ldr	r3, [sp, #4]
 8003694:	6120      	str	r0, [r4, #16]
 8003696:	b15b      	cbz	r3, 80036b0 <__smakebuf_r+0x70>
 8003698:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800369c:	4630      	mov	r0, r6
 800369e:	f000 f837 	bl	8003710 <_isatty_r>
 80036a2:	b128      	cbz	r0, 80036b0 <__smakebuf_r+0x70>
 80036a4:	89a3      	ldrh	r3, [r4, #12]
 80036a6:	f023 0303 	bic.w	r3, r3, #3
 80036aa:	f043 0301 	orr.w	r3, r3, #1
 80036ae:	81a3      	strh	r3, [r4, #12]
 80036b0:	89a3      	ldrh	r3, [r4, #12]
 80036b2:	431d      	orrs	r5, r3
 80036b4:	81a5      	strh	r5, [r4, #12]
 80036b6:	e7cf      	b.n	8003658 <__smakebuf_r+0x18>

080036b8 <memmove>:
 80036b8:	4288      	cmp	r0, r1
 80036ba:	b510      	push	{r4, lr}
 80036bc:	eb01 0402 	add.w	r4, r1, r2
 80036c0:	d902      	bls.n	80036c8 <memmove+0x10>
 80036c2:	4284      	cmp	r4, r0
 80036c4:	4623      	mov	r3, r4
 80036c6:	d807      	bhi.n	80036d8 <memmove+0x20>
 80036c8:	1e43      	subs	r3, r0, #1
 80036ca:	42a1      	cmp	r1, r4
 80036cc:	d008      	beq.n	80036e0 <memmove+0x28>
 80036ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80036d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80036d6:	e7f8      	b.n	80036ca <memmove+0x12>
 80036d8:	4402      	add	r2, r0
 80036da:	4601      	mov	r1, r0
 80036dc:	428a      	cmp	r2, r1
 80036de:	d100      	bne.n	80036e2 <memmove+0x2a>
 80036e0:	bd10      	pop	{r4, pc}
 80036e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80036e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80036ea:	e7f7      	b.n	80036dc <memmove+0x24>

080036ec <_fstat_r>:
 80036ec:	b538      	push	{r3, r4, r5, lr}
 80036ee:	4d07      	ldr	r5, [pc, #28]	; (800370c <_fstat_r+0x20>)
 80036f0:	2300      	movs	r3, #0
 80036f2:	4604      	mov	r4, r0
 80036f4:	4608      	mov	r0, r1
 80036f6:	4611      	mov	r1, r2
 80036f8:	602b      	str	r3, [r5, #0]
 80036fa:	f7fd fd66 	bl	80011ca <_fstat>
 80036fe:	1c43      	adds	r3, r0, #1
 8003700:	d102      	bne.n	8003708 <_fstat_r+0x1c>
 8003702:	682b      	ldr	r3, [r5, #0]
 8003704:	b103      	cbz	r3, 8003708 <_fstat_r+0x1c>
 8003706:	6023      	str	r3, [r4, #0]
 8003708:	bd38      	pop	{r3, r4, r5, pc}
 800370a:	bf00      	nop
 800370c:	20000224 	.word	0x20000224

08003710 <_isatty_r>:
 8003710:	b538      	push	{r3, r4, r5, lr}
 8003712:	4d06      	ldr	r5, [pc, #24]	; (800372c <_isatty_r+0x1c>)
 8003714:	2300      	movs	r3, #0
 8003716:	4604      	mov	r4, r0
 8003718:	4608      	mov	r0, r1
 800371a:	602b      	str	r3, [r5, #0]
 800371c:	f7fd fd65 	bl	80011ea <_isatty>
 8003720:	1c43      	adds	r3, r0, #1
 8003722:	d102      	bne.n	800372a <_isatty_r+0x1a>
 8003724:	682b      	ldr	r3, [r5, #0]
 8003726:	b103      	cbz	r3, 800372a <_isatty_r+0x1a>
 8003728:	6023      	str	r3, [r4, #0]
 800372a:	bd38      	pop	{r3, r4, r5, pc}
 800372c:	20000224 	.word	0x20000224

08003730 <_sbrk_r>:
 8003730:	b538      	push	{r3, r4, r5, lr}
 8003732:	4d06      	ldr	r5, [pc, #24]	; (800374c <_sbrk_r+0x1c>)
 8003734:	2300      	movs	r3, #0
 8003736:	4604      	mov	r4, r0
 8003738:	4608      	mov	r0, r1
 800373a:	602b      	str	r3, [r5, #0]
 800373c:	f7fd fd6e 	bl	800121c <_sbrk>
 8003740:	1c43      	adds	r3, r0, #1
 8003742:	d102      	bne.n	800374a <_sbrk_r+0x1a>
 8003744:	682b      	ldr	r3, [r5, #0]
 8003746:	b103      	cbz	r3, 800374a <_sbrk_r+0x1a>
 8003748:	6023      	str	r3, [r4, #0]
 800374a:	bd38      	pop	{r3, r4, r5, pc}
 800374c:	20000224 	.word	0x20000224

08003750 <memcpy>:
 8003750:	440a      	add	r2, r1
 8003752:	4291      	cmp	r1, r2
 8003754:	f100 33ff 	add.w	r3, r0, #4294967295
 8003758:	d100      	bne.n	800375c <memcpy+0xc>
 800375a:	4770      	bx	lr
 800375c:	b510      	push	{r4, lr}
 800375e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003762:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003766:	4291      	cmp	r1, r2
 8003768:	d1f9      	bne.n	800375e <memcpy+0xe>
 800376a:	bd10      	pop	{r4, pc}

0800376c <_realloc_r>:
 800376c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003770:	4680      	mov	r8, r0
 8003772:	4614      	mov	r4, r2
 8003774:	460e      	mov	r6, r1
 8003776:	b921      	cbnz	r1, 8003782 <_realloc_r+0x16>
 8003778:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800377c:	4611      	mov	r1, r2
 800377e:	f7ff b9d3 	b.w	8002b28 <_malloc_r>
 8003782:	b92a      	cbnz	r2, 8003790 <_realloc_r+0x24>
 8003784:	f7ff f964 	bl	8002a50 <_free_r>
 8003788:	4625      	mov	r5, r4
 800378a:	4628      	mov	r0, r5
 800378c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003790:	f000 f81b 	bl	80037ca <_malloc_usable_size_r>
 8003794:	4284      	cmp	r4, r0
 8003796:	4607      	mov	r7, r0
 8003798:	d802      	bhi.n	80037a0 <_realloc_r+0x34>
 800379a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800379e:	d812      	bhi.n	80037c6 <_realloc_r+0x5a>
 80037a0:	4621      	mov	r1, r4
 80037a2:	4640      	mov	r0, r8
 80037a4:	f7ff f9c0 	bl	8002b28 <_malloc_r>
 80037a8:	4605      	mov	r5, r0
 80037aa:	2800      	cmp	r0, #0
 80037ac:	d0ed      	beq.n	800378a <_realloc_r+0x1e>
 80037ae:	42bc      	cmp	r4, r7
 80037b0:	4622      	mov	r2, r4
 80037b2:	4631      	mov	r1, r6
 80037b4:	bf28      	it	cs
 80037b6:	463a      	movcs	r2, r7
 80037b8:	f7ff ffca 	bl	8003750 <memcpy>
 80037bc:	4631      	mov	r1, r6
 80037be:	4640      	mov	r0, r8
 80037c0:	f7ff f946 	bl	8002a50 <_free_r>
 80037c4:	e7e1      	b.n	800378a <_realloc_r+0x1e>
 80037c6:	4635      	mov	r5, r6
 80037c8:	e7df      	b.n	800378a <_realloc_r+0x1e>

080037ca <_malloc_usable_size_r>:
 80037ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037ce:	1f18      	subs	r0, r3, #4
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	bfbc      	itt	lt
 80037d4:	580b      	ldrlt	r3, [r1, r0]
 80037d6:	18c0      	addlt	r0, r0, r3
 80037d8:	4770      	bx	lr
	...

080037dc <_init>:
 80037dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037de:	bf00      	nop
 80037e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037e2:	bc08      	pop	{r3}
 80037e4:	469e      	mov	lr, r3
 80037e6:	4770      	bx	lr

080037e8 <_fini>:
 80037e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ea:	bf00      	nop
 80037ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ee:	bc08      	pop	{r3}
 80037f0:	469e      	mov	lr, r3
 80037f2:	4770      	bx	lr
