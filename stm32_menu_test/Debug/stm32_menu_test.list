
stm32_menu_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008dcc  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bf8  08008fb8  08008fb8  00018fb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bb0  08009bb0  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  08009bb0  08009bb0  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009bb0  08009bb0  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bb0  08009bb0  00019bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009bb4  08009bb4  00019bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08009bb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000670  200001f0  08009da8  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000860  08009da8  00020860  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c7f1  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ff6  00000000  00000000  0002ca4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df0  00000000  00000000  0002ea48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ae0  00000000  00000000  0002f838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aab2  00000000  00000000  00030318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000102db  00000000  00000000  0004adca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009aae4  00000000  00000000  0005b0a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004f58  00000000  00000000  000f5b8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000faae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001f0 	.word	0x200001f0
 8000204:	00000000 	.word	0x00000000
 8000208:	08008f9c 	.word	0x08008f9c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001f4 	.word	0x200001f4
 8000224:	08008f9c 	.word	0x08008f9c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_d2lz>:
 8000c40:	b538      	push	{r3, r4, r5, lr}
 8000c42:	4605      	mov	r5, r0
 8000c44:	460c      	mov	r4, r1
 8000c46:	2200      	movs	r2, #0
 8000c48:	2300      	movs	r3, #0
 8000c4a:	4628      	mov	r0, r5
 8000c4c:	4621      	mov	r1, r4
 8000c4e:	f7ff ff21 	bl	8000a94 <__aeabi_dcmplt>
 8000c52:	b928      	cbnz	r0, 8000c60 <__aeabi_d2lz+0x20>
 8000c54:	4628      	mov	r0, r5
 8000c56:	4621      	mov	r1, r4
 8000c58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c5c:	f000 b80a 	b.w	8000c74 <__aeabi_d2ulz>
 8000c60:	4628      	mov	r0, r5
 8000c62:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000c66:	f000 f805 	bl	8000c74 <__aeabi_d2ulz>
 8000c6a:	4240      	negs	r0, r0
 8000c6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c70:	bd38      	pop	{r3, r4, r5, pc}
 8000c72:	bf00      	nop

08000c74 <__aeabi_d2ulz>:
 8000c74:	b5d0      	push	{r4, r6, r7, lr}
 8000c76:	2200      	movs	r2, #0
 8000c78:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <__aeabi_d2ulz+0x34>)
 8000c7a:	4606      	mov	r6, r0
 8000c7c:	460f      	mov	r7, r1
 8000c7e:	f7ff fc97 	bl	80005b0 <__aeabi_dmul>
 8000c82:	f7ff ff6d 	bl	8000b60 <__aeabi_d2uiz>
 8000c86:	4604      	mov	r4, r0
 8000c88:	f7ff fc18 	bl	80004bc <__aeabi_ui2d>
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	4b07      	ldr	r3, [pc, #28]	; (8000cac <__aeabi_d2ulz+0x38>)
 8000c90:	f7ff fc8e 	bl	80005b0 <__aeabi_dmul>
 8000c94:	4602      	mov	r2, r0
 8000c96:	460b      	mov	r3, r1
 8000c98:	4630      	mov	r0, r6
 8000c9a:	4639      	mov	r1, r7
 8000c9c:	f7ff fad0 	bl	8000240 <__aeabi_dsub>
 8000ca0:	f7ff ff5e 	bl	8000b60 <__aeabi_d2uiz>
 8000ca4:	4621      	mov	r1, r4
 8000ca6:	bdd0      	pop	{r4, r6, r7, pc}
 8000ca8:	3df00000 	.word	0x3df00000
 8000cac:	41f00000 	.word	0x41f00000

08000cb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb6:	f001 fccd 	bl	8002654 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cba:	f000 f975 	bl	8000fa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cbe:	f000 fa37 	bl	8001130 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000cc2:	f000 f9e5 	bl	8001090 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000cc6:	f000 f9b5 	bl	8001034 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init ();
 8000cca:	f000 fbc9 	bl	8001460 <SSD1306_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(cursor >3){cursor = 3;}
 8000cce:	4ba5      	ldr	r3, [pc, #660]	; (8000f64 <main+0x2b4>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b03      	cmp	r3, #3
 8000cd4:	d902      	bls.n	8000cdc <main+0x2c>
 8000cd6:	4ba3      	ldr	r3, [pc, #652]	; (8000f64 <main+0x2b4>)
 8000cd8:	2203      	movs	r2, #3
 8000cda:	701a      	strb	r2, [r3, #0]
	  if(cursor <1){cursor = 1;}
 8000cdc:	4ba1      	ldr	r3, [pc, #644]	; (8000f64 <main+0x2b4>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d102      	bne.n	8000cea <main+0x3a>
 8000ce4:	4b9f      	ldr	r3, [pc, #636]	; (8000f64 <main+0x2b4>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	701a      	strb	r2, [r3, #0]
	  SSD1306_Fill(0);
 8000cea:	2000      	movs	r0, #0
 8000cec:	f000 fcaa 	bl	8001644 <SSD1306_Fill>
	  SSD1306_GotoXY (4, 16);
 8000cf0:	2110      	movs	r1, #16
 8000cf2:	2004      	movs	r0, #4
 8000cf4:	f000 fd1c 	bl	8001730 <SSD1306_GotoXY>
	  sprintf(Kp_buffer, "Kp: %0.3f", Kp);
 8000cf8:	4b9b      	ldr	r3, [pc, #620]	; (8000f68 <main+0x2b8>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fbff 	bl	8000500 <__aeabi_f2d>
 8000d02:	4602      	mov	r2, r0
 8000d04:	460b      	mov	r3, r1
 8000d06:	4999      	ldr	r1, [pc, #612]	; (8000f6c <main+0x2bc>)
 8000d08:	4899      	ldr	r0, [pc, #612]	; (8000f70 <main+0x2c0>)
 8000d0a:	f004 fcbf 	bl	800568c <siprintf>
	  if(okState == 1 && cursor == 1){
 8000d0e:	4b99      	ldr	r3, [pc, #612]	; (8000f74 <main+0x2c4>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d111      	bne.n	8000d3a <main+0x8a>
 8000d16:	4b93      	ldr	r3, [pc, #588]	; (8000f64 <main+0x2b4>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d10d      	bne.n	8000d3a <main+0x8a>
		  SSD1306_DrawFilledRectangle(1, 16-2, 80, 12, 1);
 8000d1e:	2301      	movs	r3, #1
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	230c      	movs	r3, #12
 8000d24:	2250      	movs	r2, #80	; 0x50
 8000d26:	210e      	movs	r1, #14
 8000d28:	2001      	movs	r0, #1
 8000d2a:	f000 ff21 	bl	8001b70 <SSD1306_DrawFilledRectangle>
		  SSD1306_Puts (Kp_buffer, &Font_7x10, 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	4991      	ldr	r1, [pc, #580]	; (8000f78 <main+0x2c8>)
 8000d32:	488f      	ldr	r0, [pc, #572]	; (8000f70 <main+0x2c0>)
 8000d34:	f000 fd92 	bl	800185c <SSD1306_Puts>
 8000d38:	e022      	b.n	8000d80 <main+0xd0>
	  }
	  else if(okState == 0 && cursor == 1){
 8000d3a:	4b8e      	ldr	r3, [pc, #568]	; (8000f74 <main+0x2c4>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d111      	bne.n	8000d66 <main+0xb6>
 8000d42:	4b88      	ldr	r3, [pc, #544]	; (8000f64 <main+0x2b4>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d10d      	bne.n	8000d66 <main+0xb6>
		  SSD1306_Puts (Kp_buffer, &Font_7x10, 1);
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	498a      	ldr	r1, [pc, #552]	; (8000f78 <main+0x2c8>)
 8000d4e:	4888      	ldr	r0, [pc, #544]	; (8000f70 <main+0x2c0>)
 8000d50:	f000 fd84 	bl	800185c <SSD1306_Puts>
		  SSD1306_DrawRectangle(1, 16-2, 80, 12, 1);
 8000d54:	2301      	movs	r3, #1
 8000d56:	9300      	str	r3, [sp, #0]
 8000d58:	230c      	movs	r3, #12
 8000d5a:	2250      	movs	r2, #80	; 0x50
 8000d5c:	210e      	movs	r1, #14
 8000d5e:	2001      	movs	r0, #1
 8000d60:	f000 fe9c 	bl	8001a9c <SSD1306_DrawRectangle>
 8000d64:	e00c      	b.n	8000d80 <main+0xd0>
	  }
	  else{
		  SSD1306_Puts (Kp_buffer, &Font_7x10, 1);
 8000d66:	2201      	movs	r2, #1
 8000d68:	4983      	ldr	r1, [pc, #524]	; (8000f78 <main+0x2c8>)
 8000d6a:	4881      	ldr	r0, [pc, #516]	; (8000f70 <main+0x2c0>)
 8000d6c:	f000 fd76 	bl	800185c <SSD1306_Puts>
		  SSD1306_DrawRectangle(1, 16-2, 80, 12, 0);
 8000d70:	2300      	movs	r3, #0
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	230c      	movs	r3, #12
 8000d76:	2250      	movs	r2, #80	; 0x50
 8000d78:	210e      	movs	r1, #14
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	f000 fe8e 	bl	8001a9c <SSD1306_DrawRectangle>
	  }

	  SSD1306_GotoXY (4, 30);
 8000d80:	211e      	movs	r1, #30
 8000d82:	2004      	movs	r0, #4
 8000d84:	f000 fcd4 	bl	8001730 <SSD1306_GotoXY>
	  sprintf(Ki_buffer, "Ki: %0.3f", Ki);
 8000d88:	4b7c      	ldr	r3, [pc, #496]	; (8000f7c <main+0x2cc>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fbb7 	bl	8000500 <__aeabi_f2d>
 8000d92:	4602      	mov	r2, r0
 8000d94:	460b      	mov	r3, r1
 8000d96:	497a      	ldr	r1, [pc, #488]	; (8000f80 <main+0x2d0>)
 8000d98:	487a      	ldr	r0, [pc, #488]	; (8000f84 <main+0x2d4>)
 8000d9a:	f004 fc77 	bl	800568c <siprintf>
	  if(okState == 1 && cursor == 2){
 8000d9e:	4b75      	ldr	r3, [pc, #468]	; (8000f74 <main+0x2c4>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d111      	bne.n	8000dca <main+0x11a>
 8000da6:	4b6f      	ldr	r3, [pc, #444]	; (8000f64 <main+0x2b4>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d10d      	bne.n	8000dca <main+0x11a>
		  SSD1306_DrawFilledRectangle(1, 30-2, 80, 12, 1);
 8000dae:	2301      	movs	r3, #1
 8000db0:	9300      	str	r3, [sp, #0]
 8000db2:	230c      	movs	r3, #12
 8000db4:	2250      	movs	r2, #80	; 0x50
 8000db6:	211c      	movs	r1, #28
 8000db8:	2001      	movs	r0, #1
 8000dba:	f000 fed9 	bl	8001b70 <SSD1306_DrawFilledRectangle>
		  SSD1306_Puts (Ki_buffer, &Font_7x10, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	496d      	ldr	r1, [pc, #436]	; (8000f78 <main+0x2c8>)
 8000dc2:	4870      	ldr	r0, [pc, #448]	; (8000f84 <main+0x2d4>)
 8000dc4:	f000 fd4a 	bl	800185c <SSD1306_Puts>
 8000dc8:	e022      	b.n	8000e10 <main+0x160>
	  }
	  else if(okState == 0 && cursor == 2){
 8000dca:	4b6a      	ldr	r3, [pc, #424]	; (8000f74 <main+0x2c4>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d111      	bne.n	8000df6 <main+0x146>
 8000dd2:	4b64      	ldr	r3, [pc, #400]	; (8000f64 <main+0x2b4>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d10d      	bne.n	8000df6 <main+0x146>
		  SSD1306_Puts (Ki_buffer, &Font_7x10, 1);
 8000dda:	2201      	movs	r2, #1
 8000ddc:	4966      	ldr	r1, [pc, #408]	; (8000f78 <main+0x2c8>)
 8000dde:	4869      	ldr	r0, [pc, #420]	; (8000f84 <main+0x2d4>)
 8000de0:	f000 fd3c 	bl	800185c <SSD1306_Puts>
		  SSD1306_DrawRectangle(1, 30-2, 80, 12, 1);
 8000de4:	2301      	movs	r3, #1
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	230c      	movs	r3, #12
 8000dea:	2250      	movs	r2, #80	; 0x50
 8000dec:	211c      	movs	r1, #28
 8000dee:	2001      	movs	r0, #1
 8000df0:	f000 fe54 	bl	8001a9c <SSD1306_DrawRectangle>
 8000df4:	e00c      	b.n	8000e10 <main+0x160>
	  }
	  else{
		  SSD1306_Puts (Ki_buffer, &Font_7x10, 1);
 8000df6:	2201      	movs	r2, #1
 8000df8:	495f      	ldr	r1, [pc, #380]	; (8000f78 <main+0x2c8>)
 8000dfa:	4862      	ldr	r0, [pc, #392]	; (8000f84 <main+0x2d4>)
 8000dfc:	f000 fd2e 	bl	800185c <SSD1306_Puts>
		  SSD1306_DrawRectangle(1, 30-2, 80, 12, 0);
 8000e00:	2300      	movs	r3, #0
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	230c      	movs	r3, #12
 8000e06:	2250      	movs	r2, #80	; 0x50
 8000e08:	211c      	movs	r1, #28
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	f000 fe46 	bl	8001a9c <SSD1306_DrawRectangle>
	  }

	  SSD1306_GotoXY (4, 44);
 8000e10:	212c      	movs	r1, #44	; 0x2c
 8000e12:	2004      	movs	r0, #4
 8000e14:	f000 fc8c 	bl	8001730 <SSD1306_GotoXY>
	  sprintf(Kd_buffer, "Kd: %0.3f", Kd);
 8000e18:	4b5b      	ldr	r3, [pc, #364]	; (8000f88 <main+0x2d8>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff fb6f 	bl	8000500 <__aeabi_f2d>
 8000e22:	4602      	mov	r2, r0
 8000e24:	460b      	mov	r3, r1
 8000e26:	4959      	ldr	r1, [pc, #356]	; (8000f8c <main+0x2dc>)
 8000e28:	4859      	ldr	r0, [pc, #356]	; (8000f90 <main+0x2e0>)
 8000e2a:	f004 fc2f 	bl	800568c <siprintf>
	  if(okState == 1 && cursor == 3){
 8000e2e:	4b51      	ldr	r3, [pc, #324]	; (8000f74 <main+0x2c4>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d111      	bne.n	8000e5a <main+0x1aa>
 8000e36:	4b4b      	ldr	r3, [pc, #300]	; (8000f64 <main+0x2b4>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b03      	cmp	r3, #3
 8000e3c:	d10d      	bne.n	8000e5a <main+0x1aa>
		  SSD1306_DrawFilledRectangle(1, 44-2, 80, 12, 1);
 8000e3e:	2301      	movs	r3, #1
 8000e40:	9300      	str	r3, [sp, #0]
 8000e42:	230c      	movs	r3, #12
 8000e44:	2250      	movs	r2, #80	; 0x50
 8000e46:	212a      	movs	r1, #42	; 0x2a
 8000e48:	2001      	movs	r0, #1
 8000e4a:	f000 fe91 	bl	8001b70 <SSD1306_DrawFilledRectangle>
		  SSD1306_Puts (Kd_buffer, &Font_7x10, 0);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	4949      	ldr	r1, [pc, #292]	; (8000f78 <main+0x2c8>)
 8000e52:	484f      	ldr	r0, [pc, #316]	; (8000f90 <main+0x2e0>)
 8000e54:	f000 fd02 	bl	800185c <SSD1306_Puts>
 8000e58:	e022      	b.n	8000ea0 <main+0x1f0>
	  }
	  else if(okState == 0 && cursor == 3){
 8000e5a:	4b46      	ldr	r3, [pc, #280]	; (8000f74 <main+0x2c4>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d111      	bne.n	8000e86 <main+0x1d6>
 8000e62:	4b40      	ldr	r3, [pc, #256]	; (8000f64 <main+0x2b4>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b03      	cmp	r3, #3
 8000e68:	d10d      	bne.n	8000e86 <main+0x1d6>

		  SSD1306_Puts (Kd_buffer, &Font_7x10, 1);
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	4942      	ldr	r1, [pc, #264]	; (8000f78 <main+0x2c8>)
 8000e6e:	4848      	ldr	r0, [pc, #288]	; (8000f90 <main+0x2e0>)
 8000e70:	f000 fcf4 	bl	800185c <SSD1306_Puts>
		  SSD1306_DrawRectangle(1, 44-2, 80, 12, 1);
 8000e74:	2301      	movs	r3, #1
 8000e76:	9300      	str	r3, [sp, #0]
 8000e78:	230c      	movs	r3, #12
 8000e7a:	2250      	movs	r2, #80	; 0x50
 8000e7c:	212a      	movs	r1, #42	; 0x2a
 8000e7e:	2001      	movs	r0, #1
 8000e80:	f000 fe0c 	bl	8001a9c <SSD1306_DrawRectangle>
 8000e84:	e00c      	b.n	8000ea0 <main+0x1f0>
	  }
	  else{

		  SSD1306_Puts (Kd_buffer, &Font_7x10, 1);
 8000e86:	2201      	movs	r2, #1
 8000e88:	493b      	ldr	r1, [pc, #236]	; (8000f78 <main+0x2c8>)
 8000e8a:	4841      	ldr	r0, [pc, #260]	; (8000f90 <main+0x2e0>)
 8000e8c:	f000 fce6 	bl	800185c <SSD1306_Puts>
		  SSD1306_DrawRectangle(1, 44-2, 80, 12, 0);
 8000e90:	2300      	movs	r3, #0
 8000e92:	9300      	str	r3, [sp, #0]
 8000e94:	230c      	movs	r3, #12
 8000e96:	2250      	movs	r2, #80	; 0x50
 8000e98:	212a      	movs	r1, #42	; 0x2a
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	f000 fdfe 	bl	8001a9c <SSD1306_DrawRectangle>
	  }

	  //ReadLine
	  SSD1306_GotoXY (3, 1);
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	2003      	movs	r0, #3
 8000ea4:	f000 fc44 	bl	8001730 <SSD1306_GotoXY>
	  sprintf(readLine_buffer, "ReadLine: %d", readLine);
 8000ea8:	4b3a      	ldr	r3, [pc, #232]	; (8000f94 <main+0x2e4>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	493a      	ldr	r1, [pc, #232]	; (8000f98 <main+0x2e8>)
 8000eb0:	483a      	ldr	r0, [pc, #232]	; (8000f9c <main+0x2ec>)
 8000eb2:	f004 fbeb 	bl	800568c <siprintf>
	  SSD1306_Puts (readLine_buffer, &Font_7x10, 1);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	492f      	ldr	r1, [pc, #188]	; (8000f78 <main+0x2c8>)
 8000eba:	4838      	ldr	r0, [pc, #224]	; (8000f9c <main+0x2ec>)
 8000ebc:	f000 fcce 	bl	800185c <SSD1306_Puts>


	  //right side deisgn
	  SSD1306_DrawTriangle(115, 1, 110, 14, 120, 14, 1);
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	9302      	str	r3, [sp, #8]
 8000ec4:	230e      	movs	r3, #14
 8000ec6:	9301      	str	r3, [sp, #4]
 8000ec8:	2378      	movs	r3, #120	; 0x78
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	230e      	movs	r3, #14
 8000ece:	226e      	movs	r2, #110	; 0x6e
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	2073      	movs	r0, #115	; 0x73
 8000ed4:	f000 fe99 	bl	8001c0a <SSD1306_DrawTriangle>
	  if(upFlag == 1){
 8000ed8:	4b31      	ldr	r3, [pc, #196]	; (8000fa0 <main+0x2f0>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d10e      	bne.n	8000efe <main+0x24e>
		  SSD1306_DrawFilledTriangle(115, 1, 110, 14, 120, 14, 1);
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	9302      	str	r3, [sp, #8]
 8000ee4:	230e      	movs	r3, #14
 8000ee6:	9301      	str	r3, [sp, #4]
 8000ee8:	2378      	movs	r3, #120	; 0x78
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	230e      	movs	r3, #14
 8000eee:	226e      	movs	r2, #110	; 0x6e
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	2073      	movs	r0, #115	; 0x73
 8000ef4:	f000 feba 	bl	8001c6c <SSD1306_DrawFilledTriangle>
		  upFlag = 0;
 8000ef8:	4b29      	ldr	r3, [pc, #164]	; (8000fa0 <main+0x2f0>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	701a      	strb	r2, [r3, #0]
	  }

	  SSD1306_DrawTriangle(115, 14+50, 110, 1+50, 120, 1+50, 1);
 8000efe:	2301      	movs	r3, #1
 8000f00:	9302      	str	r3, [sp, #8]
 8000f02:	2333      	movs	r3, #51	; 0x33
 8000f04:	9301      	str	r3, [sp, #4]
 8000f06:	2378      	movs	r3, #120	; 0x78
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	2333      	movs	r3, #51	; 0x33
 8000f0c:	226e      	movs	r2, #110	; 0x6e
 8000f0e:	2140      	movs	r1, #64	; 0x40
 8000f10:	2073      	movs	r0, #115	; 0x73
 8000f12:	f000 fe7a 	bl	8001c0a <SSD1306_DrawTriangle>
	  if(downFlag == 1){
 8000f16:	4b23      	ldr	r3, [pc, #140]	; (8000fa4 <main+0x2f4>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d10e      	bne.n	8000f3c <main+0x28c>
		  SSD1306_DrawFilledTriangle(115, 14+50, 110, 1+50, 120, 1+50, 1);
 8000f1e:	2301      	movs	r3, #1
 8000f20:	9302      	str	r3, [sp, #8]
 8000f22:	2333      	movs	r3, #51	; 0x33
 8000f24:	9301      	str	r3, [sp, #4]
 8000f26:	2378      	movs	r3, #120	; 0x78
 8000f28:	9300      	str	r3, [sp, #0]
 8000f2a:	2333      	movs	r3, #51	; 0x33
 8000f2c:	226e      	movs	r2, #110	; 0x6e
 8000f2e:	2140      	movs	r1, #64	; 0x40
 8000f30:	2073      	movs	r0, #115	; 0x73
 8000f32:	f000 fe9b 	bl	8001c6c <SSD1306_DrawFilledTriangle>
		  downFlag = 0;
 8000f36:	4b1b      	ldr	r3, [pc, #108]	; (8000fa4 <main+0x2f4>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	701a      	strb	r2, [r3, #0]
	  }

	  SSD1306_DrawCircle(115, 32, 5, 1);
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	2205      	movs	r2, #5
 8000f40:	2120      	movs	r1, #32
 8000f42:	2073      	movs	r0, #115	; 0x73
 8000f44:	f000 ff54 	bl	8001df0 <SSD1306_DrawCircle>
	  if(okState == 1){
 8000f48:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <main+0x2c4>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d105      	bne.n	8000f5c <main+0x2ac>
		  SSD1306_DrawFilledCircle(115, 32, 5, 1);
 8000f50:	2301      	movs	r3, #1
 8000f52:	2205      	movs	r2, #5
 8000f54:	2120      	movs	r1, #32
 8000f56:	2073      	movs	r0, #115	; 0x73
 8000f58:	f001 f81e 	bl	8001f98 <SSD1306_DrawFilledCircle>
	  }



	  SSD1306_UpdateScreen();
 8000f5c:	f000 fb44 	bl	80015e8 <SSD1306_UpdateScreen>
  {
 8000f60:	e6b5      	b.n	8000cce <main+0x1e>
 8000f62:	bf00      	nop
 8000f64:	20000008 	.word	0x20000008
 8000f68:	2000000c 	.word	0x2000000c
 8000f6c:	08008fb8 	.word	0x08008fb8
 8000f70:	200002b4 	.word	0x200002b4
 8000f74:	200002b0 	.word	0x200002b0
 8000f78:	20000000 	.word	0x20000000
 8000f7c:	20000010 	.word	0x20000010
 8000f80:	08008fc4 	.word	0x08008fc4
 8000f84:	200002c8 	.word	0x200002c8
 8000f88:	20000014 	.word	0x20000014
 8000f8c:	08008fd0 	.word	0x08008fd0
 8000f90:	200002dc 	.word	0x200002dc
 8000f94:	20000018 	.word	0x20000018
 8000f98:	08008fdc 	.word	0x08008fdc
 8000f9c:	200002f0 	.word	0x200002f0
 8000fa0:	200002b1 	.word	0x200002b1
 8000fa4:	200002b2 	.word	0x200002b2

08000fa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b090      	sub	sp, #64	; 0x40
 8000fac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fae:	f107 0318 	add.w	r3, r7, #24
 8000fb2:	2228      	movs	r2, #40	; 0x28
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f004 fbcb 	bl	8005752 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]
 8000fc8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fd2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fe0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fe4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fe6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000fea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fec:	f107 0318 	add.w	r3, r7, #24
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f002 fc47 	bl	8003884 <HAL_RCC_OscConfig>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ffc:	f000 fa2a 	bl	8001454 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001000:	230f      	movs	r3, #15
 8001002:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001004:	2302      	movs	r3, #2
 8001006:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800100c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001010:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	2102      	movs	r1, #2
 800101a:	4618      	mov	r0, r3
 800101c:	f002 feb4 	bl	8003d88 <HAL_RCC_ClockConfig>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001026:	f000 fa15 	bl	8001454 <Error_Handler>
  }
}
 800102a:	bf00      	nop
 800102c:	3740      	adds	r7, #64	; 0x40
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <MX_I2C1_Init+0x50>)
 800103a:	4a13      	ldr	r2, [pc, #76]	; (8001088 <MX_I2C1_Init+0x54>)
 800103c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <MX_I2C1_Init+0x50>)
 8001040:	4a12      	ldr	r2, [pc, #72]	; (800108c <MX_I2C1_Init+0x58>)
 8001042:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <MX_I2C1_Init+0x50>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800104a:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <MX_I2C1_Init+0x50>)
 800104c:	2200      	movs	r2, #0
 800104e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <MX_I2C1_Init+0x50>)
 8001052:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001056:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001058:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <MX_I2C1_Init+0x50>)
 800105a:	2200      	movs	r2, #0
 800105c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <MX_I2C1_Init+0x50>)
 8001060:	2200      	movs	r2, #0
 8001062:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001064:	4b07      	ldr	r3, [pc, #28]	; (8001084 <MX_I2C1_Init+0x50>)
 8001066:	2200      	movs	r2, #0
 8001068:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <MX_I2C1_Init+0x50>)
 800106c:	2200      	movs	r2, #0
 800106e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001070:	4804      	ldr	r0, [pc, #16]	; (8001084 <MX_I2C1_Init+0x50>)
 8001072:	f001 fe3d 	bl	8002cf0 <HAL_I2C_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800107c:	f000 f9ea 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	2000020c 	.word	0x2000020c
 8001088:	40005400 	.word	0x40005400
 800108c:	00061a80 	.word	0x00061a80

08001090 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001096:	f107 0308 	add.w	r3, r7, #8
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a4:	463b      	mov	r3, r7
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010ac:	4b1e      	ldr	r3, [pc, #120]	; (8001128 <MX_TIM1_Init+0x98>)
 80010ae:	4a1f      	ldr	r2, [pc, #124]	; (800112c <MX_TIM1_Init+0x9c>)
 80010b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80010b2:	4b1d      	ldr	r3, [pc, #116]	; (8001128 <MX_TIM1_Init+0x98>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b8:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <MX_TIM1_Init+0x98>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80010be:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <MX_TIM1_Init+0x98>)
 80010c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c6:	4b18      	ldr	r3, [pc, #96]	; (8001128 <MX_TIM1_Init+0x98>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010cc:	4b16      	ldr	r3, [pc, #88]	; (8001128 <MX_TIM1_Init+0x98>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <MX_TIM1_Init+0x98>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010d8:	4813      	ldr	r0, [pc, #76]	; (8001128 <MX_TIM1_Init+0x98>)
 80010da:	f002 ffcf 	bl	800407c <HAL_TIM_Base_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80010e4:	f000 f9b6 	bl	8001454 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010ee:	f107 0308 	add.w	r3, r7, #8
 80010f2:	4619      	mov	r1, r3
 80010f4:	480c      	ldr	r0, [pc, #48]	; (8001128 <MX_TIM1_Init+0x98>)
 80010f6:	f003 f918 	bl	800432a <HAL_TIM_ConfigClockSource>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001100:	f000 f9a8 	bl	8001454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001104:	2300      	movs	r3, #0
 8001106:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001108:	2300      	movs	r3, #0
 800110a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800110c:	463b      	mov	r3, r7
 800110e:	4619      	mov	r1, r3
 8001110:	4805      	ldr	r0, [pc, #20]	; (8001128 <MX_TIM1_Init+0x98>)
 8001112:	f003 fb0f 	bl	8004734 <HAL_TIMEx_MasterConfigSynchronization>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800111c:	f000 f99a 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001120:	bf00      	nop
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000260 	.word	0x20000260
 800112c:	40012c00 	.word	0x40012c00

08001130 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b088      	sub	sp, #32
 8001134:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001136:	f107 0310 	add.w	r3, r7, #16
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001144:	4b27      	ldr	r3, [pc, #156]	; (80011e4 <MX_GPIO_Init+0xb4>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	4a26      	ldr	r2, [pc, #152]	; (80011e4 <MX_GPIO_Init+0xb4>)
 800114a:	f043 0310 	orr.w	r3, r3, #16
 800114e:	6193      	str	r3, [r2, #24]
 8001150:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <MX_GPIO_Init+0xb4>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	f003 0310 	and.w	r3, r3, #16
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115c:	4b21      	ldr	r3, [pc, #132]	; (80011e4 <MX_GPIO_Init+0xb4>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	4a20      	ldr	r2, [pc, #128]	; (80011e4 <MX_GPIO_Init+0xb4>)
 8001162:	f043 0304 	orr.w	r3, r3, #4
 8001166:	6193      	str	r3, [r2, #24]
 8001168:	4b1e      	ldr	r3, [pc, #120]	; (80011e4 <MX_GPIO_Init+0xb4>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	f003 0304 	and.w	r3, r3, #4
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001174:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <MX_GPIO_Init+0xb4>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	4a1a      	ldr	r2, [pc, #104]	; (80011e4 <MX_GPIO_Init+0xb4>)
 800117a:	f043 0308 	orr.w	r3, r3, #8
 800117e:	6193      	str	r3, [r2, #24]
 8001180:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <MX_GPIO_Init+0xb4>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	f003 0308 	and.w	r3, r3, #8
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800118c:	2200      	movs	r2, #0
 800118e:	21f0      	movs	r1, #240	; 0xf0
 8001190:	4815      	ldr	r0, [pc, #84]	; (80011e8 <MX_GPIO_Init+0xb8>)
 8001192:	f001 fd63 	bl	8002c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DOWN_Pin UP_Pin OK_Pin */
  GPIO_InitStruct.Pin = DOWN_Pin|UP_Pin|OK_Pin;
 8001196:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800119a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800119c:	4b13      	ldr	r3, [pc, #76]	; (80011ec <MX_GPIO_Init+0xbc>)
 800119e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011a0:	2302      	movs	r3, #2
 80011a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a4:	f107 0310 	add.w	r3, r7, #16
 80011a8:	4619      	mov	r1, r3
 80011aa:	4811      	ldr	r0, [pc, #68]	; (80011f0 <MX_GPIO_Init+0xc0>)
 80011ac:	f001 fbc2 	bl	8002934 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011b0:	23f0      	movs	r3, #240	; 0xf0
 80011b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b4:	2301      	movs	r3, #1
 80011b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2302      	movs	r3, #2
 80011be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c0:	f107 0310 	add.w	r3, r7, #16
 80011c4:	4619      	mov	r1, r3
 80011c6:	4808      	ldr	r0, [pc, #32]	; (80011e8 <MX_GPIO_Init+0xb8>)
 80011c8:	f001 fbb4 	bl	8002934 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2100      	movs	r1, #0
 80011d0:	2028      	movs	r0, #40	; 0x28
 80011d2:	f001 fb78 	bl	80028c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011d6:	2028      	movs	r0, #40	; 0x28
 80011d8:	f001 fb91 	bl	80028fe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011dc:	bf00      	nop
 80011de:	3720      	adds	r7, #32
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40010800 	.word	0x40010800
 80011ec:	10110000 	.word	0x10110000
 80011f0:	40011000 	.word	0x40011000
 80011f4:	00000000 	.word	0x00000000

080011f8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	80fb      	strh	r3, [r7, #6]
  currentMillis = HAL_GetTick();
 8001202:	f001 fa7f 	bl	8002704 <HAL_GetTick>
 8001206:	4603      	mov	r3, r0
 8001208:	4a87      	ldr	r2, [pc, #540]	; (8001428 <HAL_GPIO_EXTI_Callback+0x230>)
 800120a:	6013      	str	r3, [r2, #0]
  if (GPIO_Pin == DOWN_Pin && (currentMillis - previousMillis > 80))
 800120c:	88fb      	ldrh	r3, [r7, #6]
 800120e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001212:	d16b      	bne.n	80012ec <HAL_GPIO_EXTI_Callback+0xf4>
 8001214:	4b84      	ldr	r3, [pc, #528]	; (8001428 <HAL_GPIO_EXTI_Callback+0x230>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4b84      	ldr	r3, [pc, #528]	; (800142c <HAL_GPIO_EXTI_Callback+0x234>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b50      	cmp	r3, #80	; 0x50
 8001220:	d964      	bls.n	80012ec <HAL_GPIO_EXTI_Callback+0xf4>
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001222:	2140      	movs	r1, #64	; 0x40
 8001224:	4882      	ldr	r0, [pc, #520]	; (8001430 <HAL_GPIO_EXTI_Callback+0x238>)
 8001226:	f001 fd31 	bl	8002c8c <HAL_GPIO_TogglePin>
    previousMillis = currentMillis;
 800122a:	4b7f      	ldr	r3, [pc, #508]	; (8001428 <HAL_GPIO_EXTI_Callback+0x230>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a7f      	ldr	r2, [pc, #508]	; (800142c <HAL_GPIO_EXTI_Callback+0x234>)
 8001230:	6013      	str	r3, [r2, #0]
    if(okState == 1 && cursor == 1){Kp -= 0.001;}
 8001232:	4b80      	ldr	r3, [pc, #512]	; (8001434 <HAL_GPIO_EXTI_Callback+0x23c>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d117      	bne.n	800126a <HAL_GPIO_EXTI_Callback+0x72>
 800123a:	4b7f      	ldr	r3, [pc, #508]	; (8001438 <HAL_GPIO_EXTI_Callback+0x240>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d113      	bne.n	800126a <HAL_GPIO_EXTI_Callback+0x72>
 8001242:	4b7e      	ldr	r3, [pc, #504]	; (800143c <HAL_GPIO_EXTI_Callback+0x244>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff f95a 	bl	8000500 <__aeabi_f2d>
 800124c:	a374      	add	r3, pc, #464	; (adr r3, 8001420 <HAL_GPIO_EXTI_Callback+0x228>)
 800124e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001252:	f7fe fff5 	bl	8000240 <__aeabi_dsub>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	4610      	mov	r0, r2
 800125c:	4619      	mov	r1, r3
 800125e:	f7ff fc9f 	bl	8000ba0 <__aeabi_d2f>
 8001262:	4603      	mov	r3, r0
 8001264:	4a75      	ldr	r2, [pc, #468]	; (800143c <HAL_GPIO_EXTI_Callback+0x244>)
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	e03d      	b.n	80012e6 <HAL_GPIO_EXTI_Callback+0xee>
    else if(okState == 1 && cursor == 2){Ki -= 0.001;}
 800126a:	4b72      	ldr	r3, [pc, #456]	; (8001434 <HAL_GPIO_EXTI_Callback+0x23c>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d117      	bne.n	80012a2 <HAL_GPIO_EXTI_Callback+0xaa>
 8001272:	4b71      	ldr	r3, [pc, #452]	; (8001438 <HAL_GPIO_EXTI_Callback+0x240>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b02      	cmp	r3, #2
 8001278:	d113      	bne.n	80012a2 <HAL_GPIO_EXTI_Callback+0xaa>
 800127a:	4b71      	ldr	r3, [pc, #452]	; (8001440 <HAL_GPIO_EXTI_Callback+0x248>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff f93e 	bl	8000500 <__aeabi_f2d>
 8001284:	a366      	add	r3, pc, #408	; (adr r3, 8001420 <HAL_GPIO_EXTI_Callback+0x228>)
 8001286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128a:	f7fe ffd9 	bl	8000240 <__aeabi_dsub>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4610      	mov	r0, r2
 8001294:	4619      	mov	r1, r3
 8001296:	f7ff fc83 	bl	8000ba0 <__aeabi_d2f>
 800129a:	4603      	mov	r3, r0
 800129c:	4a68      	ldr	r2, [pc, #416]	; (8001440 <HAL_GPIO_EXTI_Callback+0x248>)
 800129e:	6013      	str	r3, [r2, #0]
 80012a0:	e021      	b.n	80012e6 <HAL_GPIO_EXTI_Callback+0xee>
    else if(okState == 1 && cursor == 3){Kd -= 0.001;}
 80012a2:	4b64      	ldr	r3, [pc, #400]	; (8001434 <HAL_GPIO_EXTI_Callback+0x23c>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d117      	bne.n	80012da <HAL_GPIO_EXTI_Callback+0xe2>
 80012aa:	4b63      	ldr	r3, [pc, #396]	; (8001438 <HAL_GPIO_EXTI_Callback+0x240>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b03      	cmp	r3, #3
 80012b0:	d113      	bne.n	80012da <HAL_GPIO_EXTI_Callback+0xe2>
 80012b2:	4b64      	ldr	r3, [pc, #400]	; (8001444 <HAL_GPIO_EXTI_Callback+0x24c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff f922 	bl	8000500 <__aeabi_f2d>
 80012bc:	a358      	add	r3, pc, #352	; (adr r3, 8001420 <HAL_GPIO_EXTI_Callback+0x228>)
 80012be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c2:	f7fe ffbd 	bl	8000240 <__aeabi_dsub>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4610      	mov	r0, r2
 80012cc:	4619      	mov	r1, r3
 80012ce:	f7ff fc67 	bl	8000ba0 <__aeabi_d2f>
 80012d2:	4603      	mov	r3, r0
 80012d4:	4a5b      	ldr	r2, [pc, #364]	; (8001444 <HAL_GPIO_EXTI_Callback+0x24c>)
 80012d6:	6013      	str	r3, [r2, #0]
 80012d8:	e005      	b.n	80012e6 <HAL_GPIO_EXTI_Callback+0xee>
    else{cursor += 1;}
 80012da:	4b57      	ldr	r3, [pc, #348]	; (8001438 <HAL_GPIO_EXTI_Callback+0x240>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	3301      	adds	r3, #1
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	4b55      	ldr	r3, [pc, #340]	; (8001438 <HAL_GPIO_EXTI_Callback+0x240>)
 80012e4:	701a      	strb	r2, [r3, #0]
    downFlag = 1;
 80012e6:	4b58      	ldr	r3, [pc, #352]	; (8001448 <HAL_GPIO_EXTI_Callback+0x250>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	701a      	strb	r2, [r3, #0]


  }
  if (GPIO_Pin == UP_Pin && (currentMillis - previousMillis > 80))
 80012ec:	88fb      	ldrh	r3, [r7, #6]
 80012ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80012f2:	d16b      	bne.n	80013cc <HAL_GPIO_EXTI_Callback+0x1d4>
 80012f4:	4b4c      	ldr	r3, [pc, #304]	; (8001428 <HAL_GPIO_EXTI_Callback+0x230>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b4c      	ldr	r3, [pc, #304]	; (800142c <HAL_GPIO_EXTI_Callback+0x234>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b50      	cmp	r3, #80	; 0x50
 8001300:	d964      	bls.n	80013cc <HAL_GPIO_EXTI_Callback+0x1d4>
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001302:	2120      	movs	r1, #32
 8001304:	484a      	ldr	r0, [pc, #296]	; (8001430 <HAL_GPIO_EXTI_Callback+0x238>)
 8001306:	f001 fcc1 	bl	8002c8c <HAL_GPIO_TogglePin>
    previousMillis = currentMillis;
 800130a:	4b47      	ldr	r3, [pc, #284]	; (8001428 <HAL_GPIO_EXTI_Callback+0x230>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a47      	ldr	r2, [pc, #284]	; (800142c <HAL_GPIO_EXTI_Callback+0x234>)
 8001310:	6013      	str	r3, [r2, #0]


    if(okState == 1 && cursor == 1){Kp += 0.001;}
 8001312:	4b48      	ldr	r3, [pc, #288]	; (8001434 <HAL_GPIO_EXTI_Callback+0x23c>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d117      	bne.n	800134a <HAL_GPIO_EXTI_Callback+0x152>
 800131a:	4b47      	ldr	r3, [pc, #284]	; (8001438 <HAL_GPIO_EXTI_Callback+0x240>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d113      	bne.n	800134a <HAL_GPIO_EXTI_Callback+0x152>
 8001322:	4b46      	ldr	r3, [pc, #280]	; (800143c <HAL_GPIO_EXTI_Callback+0x244>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f8ea 	bl	8000500 <__aeabi_f2d>
 800132c:	a33c      	add	r3, pc, #240	; (adr r3, 8001420 <HAL_GPIO_EXTI_Callback+0x228>)
 800132e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001332:	f7fe ff87 	bl	8000244 <__adddf3>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4610      	mov	r0, r2
 800133c:	4619      	mov	r1, r3
 800133e:	f7ff fc2f 	bl	8000ba0 <__aeabi_d2f>
 8001342:	4603      	mov	r3, r0
 8001344:	4a3d      	ldr	r2, [pc, #244]	; (800143c <HAL_GPIO_EXTI_Callback+0x244>)
 8001346:	6013      	str	r3, [r2, #0]
 8001348:	e03d      	b.n	80013c6 <HAL_GPIO_EXTI_Callback+0x1ce>
    else if(okState == 1 && cursor == 2){Ki += 0.001;}
 800134a:	4b3a      	ldr	r3, [pc, #232]	; (8001434 <HAL_GPIO_EXTI_Callback+0x23c>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d117      	bne.n	8001382 <HAL_GPIO_EXTI_Callback+0x18a>
 8001352:	4b39      	ldr	r3, [pc, #228]	; (8001438 <HAL_GPIO_EXTI_Callback+0x240>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b02      	cmp	r3, #2
 8001358:	d113      	bne.n	8001382 <HAL_GPIO_EXTI_Callback+0x18a>
 800135a:	4b39      	ldr	r3, [pc, #228]	; (8001440 <HAL_GPIO_EXTI_Callback+0x248>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff f8ce 	bl	8000500 <__aeabi_f2d>
 8001364:	a32e      	add	r3, pc, #184	; (adr r3, 8001420 <HAL_GPIO_EXTI_Callback+0x228>)
 8001366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136a:	f7fe ff6b 	bl	8000244 <__adddf3>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	4610      	mov	r0, r2
 8001374:	4619      	mov	r1, r3
 8001376:	f7ff fc13 	bl	8000ba0 <__aeabi_d2f>
 800137a:	4603      	mov	r3, r0
 800137c:	4a30      	ldr	r2, [pc, #192]	; (8001440 <HAL_GPIO_EXTI_Callback+0x248>)
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	e021      	b.n	80013c6 <HAL_GPIO_EXTI_Callback+0x1ce>
    else if(okState == 1 && cursor == 3){Kd += 0.001;}
 8001382:	4b2c      	ldr	r3, [pc, #176]	; (8001434 <HAL_GPIO_EXTI_Callback+0x23c>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d117      	bne.n	80013ba <HAL_GPIO_EXTI_Callback+0x1c2>
 800138a:	4b2b      	ldr	r3, [pc, #172]	; (8001438 <HAL_GPIO_EXTI_Callback+0x240>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b03      	cmp	r3, #3
 8001390:	d113      	bne.n	80013ba <HAL_GPIO_EXTI_Callback+0x1c2>
 8001392:	4b2c      	ldr	r3, [pc, #176]	; (8001444 <HAL_GPIO_EXTI_Callback+0x24c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff f8b2 	bl	8000500 <__aeabi_f2d>
 800139c:	a320      	add	r3, pc, #128	; (adr r3, 8001420 <HAL_GPIO_EXTI_Callback+0x228>)
 800139e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a2:	f7fe ff4f 	bl	8000244 <__adddf3>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4610      	mov	r0, r2
 80013ac:	4619      	mov	r1, r3
 80013ae:	f7ff fbf7 	bl	8000ba0 <__aeabi_d2f>
 80013b2:	4603      	mov	r3, r0
 80013b4:	4a23      	ldr	r2, [pc, #140]	; (8001444 <HAL_GPIO_EXTI_Callback+0x24c>)
 80013b6:	6013      	str	r3, [r2, #0]
 80013b8:	e005      	b.n	80013c6 <HAL_GPIO_EXTI_Callback+0x1ce>
    else{cursor -= 1;}
 80013ba:	4b1f      	ldr	r3, [pc, #124]	; (8001438 <HAL_GPIO_EXTI_Callback+0x240>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	3b01      	subs	r3, #1
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <HAL_GPIO_EXTI_Callback+0x240>)
 80013c4:	701a      	strb	r2, [r3, #0]
    upFlag = 1;
 80013c6:	4b21      	ldr	r3, [pc, #132]	; (800144c <HAL_GPIO_EXTI_Callback+0x254>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	701a      	strb	r2, [r3, #0]


  }
  if (GPIO_Pin == OK_Pin && (currentMillis - previousMillis > 80))
 80013cc:	88fb      	ldrh	r3, [r7, #6]
 80013ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013d2:	d120      	bne.n	8001416 <HAL_GPIO_EXTI_Callback+0x21e>
 80013d4:	4b14      	ldr	r3, [pc, #80]	; (8001428 <HAL_GPIO_EXTI_Callback+0x230>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4b14      	ldr	r3, [pc, #80]	; (800142c <HAL_GPIO_EXTI_Callback+0x234>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b50      	cmp	r3, #80	; 0x50
 80013e0:	d919      	bls.n	8001416 <HAL_GPIO_EXTI_Callback+0x21e>
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 80013e2:	2110      	movs	r1, #16
 80013e4:	4812      	ldr	r0, [pc, #72]	; (8001430 <HAL_GPIO_EXTI_Callback+0x238>)
 80013e6:	f001 fc51 	bl	8002c8c <HAL_GPIO_TogglePin>
    previousMillis = currentMillis;
 80013ea:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <HAL_GPIO_EXTI_Callback+0x230>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a0f      	ldr	r2, [pc, #60]	; (800142c <HAL_GPIO_EXTI_Callback+0x234>)
 80013f0:	6013      	str	r3, [r2, #0]
    okLastState = okState;
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <HAL_GPIO_EXTI_Callback+0x23c>)
 80013f4:	781a      	ldrb	r2, [r3, #0]
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <HAL_GPIO_EXTI_Callback+0x258>)
 80013f8:	701a      	strb	r2, [r3, #0]
    if(okLastState == 0){
 80013fa:	4b15      	ldr	r3, [pc, #84]	; (8001450 <HAL_GPIO_EXTI_Callback+0x258>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d102      	bne.n	8001408 <HAL_GPIO_EXTI_Callback+0x210>
    	okState = 1;
 8001402:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <HAL_GPIO_EXTI_Callback+0x23c>)
 8001404:	2201      	movs	r2, #1
 8001406:	701a      	strb	r2, [r3, #0]

    }
    if(okLastState == 1){
 8001408:	4b11      	ldr	r3, [pc, #68]	; (8001450 <HAL_GPIO_EXTI_Callback+0x258>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d102      	bne.n	8001416 <HAL_GPIO_EXTI_Callback+0x21e>
    	okState = 0;
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <HAL_GPIO_EXTI_Callback+0x23c>)
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]

    }

  }

}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	d2f1a9fc 	.word	0xd2f1a9fc
 8001424:	3f50624d 	.word	0x3f50624d
 8001428:	200002ac 	.word	0x200002ac
 800142c:	200002a8 	.word	0x200002a8
 8001430:	40010800 	.word	0x40010800
 8001434:	200002b0 	.word	0x200002b0
 8001438:	20000008 	.word	0x20000008
 800143c:	2000000c 	.word	0x2000000c
 8001440:	20000010 	.word	0x20000010
 8001444:	20000014 	.word	0x20000014
 8001448:	200002b2 	.word	0x200002b2
 800144c:	200002b1 	.word	0x200002b1
 8001450:	20000009 	.word	0x20000009

08001454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001458:	b672      	cpsid	i
}
 800145a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800145c:	e7fe      	b.n	800145c <Error_Handler+0x8>
	...

08001460 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001466:	f000 fe73 	bl	8002150 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800146a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800146e:	2201      	movs	r2, #1
 8001470:	2178      	movs	r1, #120	; 0x78
 8001472:	485b      	ldr	r0, [pc, #364]	; (80015e0 <SSD1306_Init+0x180>)
 8001474:	f001 fe7e 	bl	8003174 <HAL_I2C_IsDeviceReady>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800147e:	2300      	movs	r3, #0
 8001480:	e0a9      	b.n	80015d6 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001482:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001486:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001488:	e002      	b.n	8001490 <SSD1306_Init+0x30>
		p--;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	3b01      	subs	r3, #1
 800148e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f9      	bne.n	800148a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001496:	22ae      	movs	r2, #174	; 0xae
 8001498:	2100      	movs	r1, #0
 800149a:	2078      	movs	r0, #120	; 0x78
 800149c:	f000 fed2 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80014a0:	2220      	movs	r2, #32
 80014a2:	2100      	movs	r1, #0
 80014a4:	2078      	movs	r0, #120	; 0x78
 80014a6:	f000 fecd 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80014aa:	2210      	movs	r2, #16
 80014ac:	2100      	movs	r1, #0
 80014ae:	2078      	movs	r0, #120	; 0x78
 80014b0:	f000 fec8 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80014b4:	22b0      	movs	r2, #176	; 0xb0
 80014b6:	2100      	movs	r1, #0
 80014b8:	2078      	movs	r0, #120	; 0x78
 80014ba:	f000 fec3 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80014be:	22c8      	movs	r2, #200	; 0xc8
 80014c0:	2100      	movs	r1, #0
 80014c2:	2078      	movs	r0, #120	; 0x78
 80014c4:	f000 febe 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80014c8:	2200      	movs	r2, #0
 80014ca:	2100      	movs	r1, #0
 80014cc:	2078      	movs	r0, #120	; 0x78
 80014ce:	f000 feb9 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80014d2:	2210      	movs	r2, #16
 80014d4:	2100      	movs	r1, #0
 80014d6:	2078      	movs	r0, #120	; 0x78
 80014d8:	f000 feb4 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80014dc:	2240      	movs	r2, #64	; 0x40
 80014de:	2100      	movs	r1, #0
 80014e0:	2078      	movs	r0, #120	; 0x78
 80014e2:	f000 feaf 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80014e6:	2281      	movs	r2, #129	; 0x81
 80014e8:	2100      	movs	r1, #0
 80014ea:	2078      	movs	r0, #120	; 0x78
 80014ec:	f000 feaa 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80014f0:	22ff      	movs	r2, #255	; 0xff
 80014f2:	2100      	movs	r1, #0
 80014f4:	2078      	movs	r0, #120	; 0x78
 80014f6:	f000 fea5 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80014fa:	22a1      	movs	r2, #161	; 0xa1
 80014fc:	2100      	movs	r1, #0
 80014fe:	2078      	movs	r0, #120	; 0x78
 8001500:	f000 fea0 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001504:	22a6      	movs	r2, #166	; 0xa6
 8001506:	2100      	movs	r1, #0
 8001508:	2078      	movs	r0, #120	; 0x78
 800150a:	f000 fe9b 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800150e:	22a8      	movs	r2, #168	; 0xa8
 8001510:	2100      	movs	r1, #0
 8001512:	2078      	movs	r0, #120	; 0x78
 8001514:	f000 fe96 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001518:	223f      	movs	r2, #63	; 0x3f
 800151a:	2100      	movs	r1, #0
 800151c:	2078      	movs	r0, #120	; 0x78
 800151e:	f000 fe91 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001522:	22a4      	movs	r2, #164	; 0xa4
 8001524:	2100      	movs	r1, #0
 8001526:	2078      	movs	r0, #120	; 0x78
 8001528:	f000 fe8c 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800152c:	22d3      	movs	r2, #211	; 0xd3
 800152e:	2100      	movs	r1, #0
 8001530:	2078      	movs	r0, #120	; 0x78
 8001532:	f000 fe87 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001536:	2200      	movs	r2, #0
 8001538:	2100      	movs	r1, #0
 800153a:	2078      	movs	r0, #120	; 0x78
 800153c:	f000 fe82 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001540:	22d5      	movs	r2, #213	; 0xd5
 8001542:	2100      	movs	r1, #0
 8001544:	2078      	movs	r0, #120	; 0x78
 8001546:	f000 fe7d 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800154a:	22f0      	movs	r2, #240	; 0xf0
 800154c:	2100      	movs	r1, #0
 800154e:	2078      	movs	r0, #120	; 0x78
 8001550:	f000 fe78 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001554:	22d9      	movs	r2, #217	; 0xd9
 8001556:	2100      	movs	r1, #0
 8001558:	2078      	movs	r0, #120	; 0x78
 800155a:	f000 fe73 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800155e:	2222      	movs	r2, #34	; 0x22
 8001560:	2100      	movs	r1, #0
 8001562:	2078      	movs	r0, #120	; 0x78
 8001564:	f000 fe6e 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001568:	22da      	movs	r2, #218	; 0xda
 800156a:	2100      	movs	r1, #0
 800156c:	2078      	movs	r0, #120	; 0x78
 800156e:	f000 fe69 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001572:	2212      	movs	r2, #18
 8001574:	2100      	movs	r1, #0
 8001576:	2078      	movs	r0, #120	; 0x78
 8001578:	f000 fe64 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800157c:	22db      	movs	r2, #219	; 0xdb
 800157e:	2100      	movs	r1, #0
 8001580:	2078      	movs	r0, #120	; 0x78
 8001582:	f000 fe5f 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001586:	2220      	movs	r2, #32
 8001588:	2100      	movs	r1, #0
 800158a:	2078      	movs	r0, #120	; 0x78
 800158c:	f000 fe5a 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001590:	228d      	movs	r2, #141	; 0x8d
 8001592:	2100      	movs	r1, #0
 8001594:	2078      	movs	r0, #120	; 0x78
 8001596:	f000 fe55 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800159a:	2214      	movs	r2, #20
 800159c:	2100      	movs	r1, #0
 800159e:	2078      	movs	r0, #120	; 0x78
 80015a0:	f000 fe50 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80015a4:	22af      	movs	r2, #175	; 0xaf
 80015a6:	2100      	movs	r1, #0
 80015a8:	2078      	movs	r0, #120	; 0x78
 80015aa:	f000 fe4b 	bl	8002244 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80015ae:	222e      	movs	r2, #46	; 0x2e
 80015b0:	2100      	movs	r1, #0
 80015b2:	2078      	movs	r0, #120	; 0x78
 80015b4:	f000 fe46 	bl	8002244 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80015b8:	2000      	movs	r0, #0
 80015ba:	f000 f843 	bl	8001644 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80015be:	f000 f813 	bl	80015e8 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80015c2:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <SSD1306_Init+0x184>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <SSD1306_Init+0x184>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80015ce:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <SSD1306_Init+0x184>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80015d4:	2301      	movs	r3, #1
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	2000020c 	.word	0x2000020c
 80015e4:	20000704 	.word	0x20000704

080015e8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80015ee:	2300      	movs	r3, #0
 80015f0:	71fb      	strb	r3, [r7, #7]
 80015f2:	e01d      	b.n	8001630 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	3b50      	subs	r3, #80	; 0x50
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	461a      	mov	r2, r3
 80015fc:	2100      	movs	r1, #0
 80015fe:	2078      	movs	r0, #120	; 0x78
 8001600:	f000 fe20 	bl	8002244 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001604:	2200      	movs	r2, #0
 8001606:	2100      	movs	r1, #0
 8001608:	2078      	movs	r0, #120	; 0x78
 800160a:	f000 fe1b 	bl	8002244 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800160e:	2210      	movs	r2, #16
 8001610:	2100      	movs	r1, #0
 8001612:	2078      	movs	r0, #120	; 0x78
 8001614:	f000 fe16 	bl	8002244 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	01db      	lsls	r3, r3, #7
 800161c:	4a08      	ldr	r2, [pc, #32]	; (8001640 <SSD1306_UpdateScreen+0x58>)
 800161e:	441a      	add	r2, r3
 8001620:	2380      	movs	r3, #128	; 0x80
 8001622:	2140      	movs	r1, #64	; 0x40
 8001624:	2078      	movs	r0, #120	; 0x78
 8001626:	f000 fda7 	bl	8002178 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	3301      	adds	r3, #1
 800162e:	71fb      	strb	r3, [r7, #7]
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	2b07      	cmp	r3, #7
 8001634:	d9de      	bls.n	80015f4 <SSD1306_UpdateScreen+0xc>
	}
}
 8001636:	bf00      	nop
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000304 	.word	0x20000304

08001644 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <SSD1306_Fill+0x14>
 8001654:	2300      	movs	r3, #0
 8001656:	e000      	b.n	800165a <SSD1306_Fill+0x16>
 8001658:	23ff      	movs	r3, #255	; 0xff
 800165a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800165e:	4619      	mov	r1, r3
 8001660:	4803      	ldr	r0, [pc, #12]	; (8001670 <SSD1306_Fill+0x2c>)
 8001662:	f004 f876 	bl	8005752 <memset>
}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000304 	.word	0x20000304

08001674 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	80fb      	strh	r3, [r7, #6]
 800167e:	460b      	mov	r3, r1
 8001680:	80bb      	strh	r3, [r7, #4]
 8001682:	4613      	mov	r3, r2
 8001684:	70fb      	strb	r3, [r7, #3]
	if (
 8001686:	88fb      	ldrh	r3, [r7, #6]
 8001688:	2b7f      	cmp	r3, #127	; 0x7f
 800168a:	d848      	bhi.n	800171e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800168c:	88bb      	ldrh	r3, [r7, #4]
 800168e:	2b3f      	cmp	r3, #63	; 0x3f
 8001690:	d845      	bhi.n	800171e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001692:	4b25      	ldr	r3, [pc, #148]	; (8001728 <SSD1306_DrawPixel+0xb4>)
 8001694:	791b      	ldrb	r3, [r3, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d006      	beq.n	80016a8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800169a:	78fb      	ldrb	r3, [r7, #3]
 800169c:	2b00      	cmp	r3, #0
 800169e:	bf0c      	ite	eq
 80016a0:	2301      	moveq	r3, #1
 80016a2:	2300      	movne	r3, #0
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80016a8:	78fb      	ldrb	r3, [r7, #3]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d11a      	bne.n	80016e4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80016ae:	88fa      	ldrh	r2, [r7, #6]
 80016b0:	88bb      	ldrh	r3, [r7, #4]
 80016b2:	08db      	lsrs	r3, r3, #3
 80016b4:	b298      	uxth	r0, r3
 80016b6:	4603      	mov	r3, r0
 80016b8:	01db      	lsls	r3, r3, #7
 80016ba:	4413      	add	r3, r2
 80016bc:	4a1b      	ldr	r2, [pc, #108]	; (800172c <SSD1306_DrawPixel+0xb8>)
 80016be:	5cd3      	ldrb	r3, [r2, r3]
 80016c0:	b25a      	sxtb	r2, r3
 80016c2:	88bb      	ldrh	r3, [r7, #4]
 80016c4:	f003 0307 	and.w	r3, r3, #7
 80016c8:	2101      	movs	r1, #1
 80016ca:	fa01 f303 	lsl.w	r3, r1, r3
 80016ce:	b25b      	sxtb	r3, r3
 80016d0:	4313      	orrs	r3, r2
 80016d2:	b259      	sxtb	r1, r3
 80016d4:	88fa      	ldrh	r2, [r7, #6]
 80016d6:	4603      	mov	r3, r0
 80016d8:	01db      	lsls	r3, r3, #7
 80016da:	4413      	add	r3, r2
 80016dc:	b2c9      	uxtb	r1, r1
 80016de:	4a13      	ldr	r2, [pc, #76]	; (800172c <SSD1306_DrawPixel+0xb8>)
 80016e0:	54d1      	strb	r1, [r2, r3]
 80016e2:	e01d      	b.n	8001720 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80016e4:	88fa      	ldrh	r2, [r7, #6]
 80016e6:	88bb      	ldrh	r3, [r7, #4]
 80016e8:	08db      	lsrs	r3, r3, #3
 80016ea:	b298      	uxth	r0, r3
 80016ec:	4603      	mov	r3, r0
 80016ee:	01db      	lsls	r3, r3, #7
 80016f0:	4413      	add	r3, r2
 80016f2:	4a0e      	ldr	r2, [pc, #56]	; (800172c <SSD1306_DrawPixel+0xb8>)
 80016f4:	5cd3      	ldrb	r3, [r2, r3]
 80016f6:	b25a      	sxtb	r2, r3
 80016f8:	88bb      	ldrh	r3, [r7, #4]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	2101      	movs	r1, #1
 8001700:	fa01 f303 	lsl.w	r3, r1, r3
 8001704:	b25b      	sxtb	r3, r3
 8001706:	43db      	mvns	r3, r3
 8001708:	b25b      	sxtb	r3, r3
 800170a:	4013      	ands	r3, r2
 800170c:	b259      	sxtb	r1, r3
 800170e:	88fa      	ldrh	r2, [r7, #6]
 8001710:	4603      	mov	r3, r0
 8001712:	01db      	lsls	r3, r3, #7
 8001714:	4413      	add	r3, r2
 8001716:	b2c9      	uxtb	r1, r1
 8001718:	4a04      	ldr	r2, [pc, #16]	; (800172c <SSD1306_DrawPixel+0xb8>)
 800171a:	54d1      	strb	r1, [r2, r3]
 800171c:	e000      	b.n	8001720 <SSD1306_DrawPixel+0xac>
		return;
 800171e:	bf00      	nop
	}
}
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr
 8001728:	20000704 	.word	0x20000704
 800172c:	20000304 	.word	0x20000304

08001730 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	460a      	mov	r2, r1
 800173a:	80fb      	strh	r3, [r7, #6]
 800173c:	4613      	mov	r3, r2
 800173e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001740:	4a05      	ldr	r2, [pc, #20]	; (8001758 <SSD1306_GotoXY+0x28>)
 8001742:	88fb      	ldrh	r3, [r7, #6]
 8001744:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001746:	4a04      	ldr	r2, [pc, #16]	; (8001758 <SSD1306_GotoXY+0x28>)
 8001748:	88bb      	ldrh	r3, [r7, #4]
 800174a:	8053      	strh	r3, [r2, #2]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	20000704 	.word	0x20000704

0800175c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	6039      	str	r1, [r7, #0]
 8001766:	71fb      	strb	r3, [r7, #7]
 8001768:	4613      	mov	r3, r2
 800176a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800176c:	4b3a      	ldr	r3, [pc, #232]	; (8001858 <SSD1306_Putc+0xfc>)
 800176e:	881b      	ldrh	r3, [r3, #0]
 8001770:	461a      	mov	r2, r3
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	4413      	add	r3, r2
	if (
 8001778:	2b7f      	cmp	r3, #127	; 0x7f
 800177a:	dc07      	bgt.n	800178c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800177c:	4b36      	ldr	r3, [pc, #216]	; (8001858 <SSD1306_Putc+0xfc>)
 800177e:	885b      	ldrh	r3, [r3, #2]
 8001780:	461a      	mov	r2, r3
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	785b      	ldrb	r3, [r3, #1]
 8001786:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001788:	2b3f      	cmp	r3, #63	; 0x3f
 800178a:	dd01      	ble.n	8001790 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800178c:	2300      	movs	r3, #0
 800178e:	e05e      	b.n	800184e <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	e04b      	b.n	800182e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	3b20      	subs	r3, #32
 800179e:	6839      	ldr	r1, [r7, #0]
 80017a0:	7849      	ldrb	r1, [r1, #1]
 80017a2:	fb01 f303 	mul.w	r3, r1, r3
 80017a6:	4619      	mov	r1, r3
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	440b      	add	r3, r1
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	4413      	add	r3, r2
 80017b0:	881b      	ldrh	r3, [r3, #0]
 80017b2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80017b4:	2300      	movs	r3, #0
 80017b6:	613b      	str	r3, [r7, #16]
 80017b8:	e030      	b.n	800181c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d010      	beq.n	80017ec <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80017ca:	4b23      	ldr	r3, [pc, #140]	; (8001858 <SSD1306_Putc+0xfc>)
 80017cc:	881a      	ldrh	r2, [r3, #0]
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	4413      	add	r3, r2
 80017d4:	b298      	uxth	r0, r3
 80017d6:	4b20      	ldr	r3, [pc, #128]	; (8001858 <SSD1306_Putc+0xfc>)
 80017d8:	885a      	ldrh	r2, [r3, #2]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	b29b      	uxth	r3, r3
 80017de:	4413      	add	r3, r2
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	79ba      	ldrb	r2, [r7, #6]
 80017e4:	4619      	mov	r1, r3
 80017e6:	f7ff ff45 	bl	8001674 <SSD1306_DrawPixel>
 80017ea:	e014      	b.n	8001816 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80017ec:	4b1a      	ldr	r3, [pc, #104]	; (8001858 <SSD1306_Putc+0xfc>)
 80017ee:	881a      	ldrh	r2, [r3, #0]
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	4413      	add	r3, r2
 80017f6:	b298      	uxth	r0, r3
 80017f8:	4b17      	ldr	r3, [pc, #92]	; (8001858 <SSD1306_Putc+0xfc>)
 80017fa:	885a      	ldrh	r2, [r3, #2]
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	b29b      	uxth	r3, r3
 8001800:	4413      	add	r3, r2
 8001802:	b299      	uxth	r1, r3
 8001804:	79bb      	ldrb	r3, [r7, #6]
 8001806:	2b00      	cmp	r3, #0
 8001808:	bf0c      	ite	eq
 800180a:	2301      	moveq	r3, #1
 800180c:	2300      	movne	r3, #0
 800180e:	b2db      	uxtb	r3, r3
 8001810:	461a      	mov	r2, r3
 8001812:	f7ff ff2f 	bl	8001674 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	3301      	adds	r3, #1
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	461a      	mov	r2, r3
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	4293      	cmp	r3, r2
 8001826:	d3c8      	bcc.n	80017ba <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	3301      	adds	r3, #1
 800182c:	617b      	str	r3, [r7, #20]
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	785b      	ldrb	r3, [r3, #1]
 8001832:	461a      	mov	r2, r3
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	4293      	cmp	r3, r2
 8001838:	d3ad      	bcc.n	8001796 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800183a:	4b07      	ldr	r3, [pc, #28]	; (8001858 <SSD1306_Putc+0xfc>)
 800183c:	881a      	ldrh	r2, [r3, #0]
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	b29b      	uxth	r3, r3
 8001844:	4413      	add	r3, r2
 8001846:	b29a      	uxth	r2, r3
 8001848:	4b03      	ldr	r3, [pc, #12]	; (8001858 <SSD1306_Putc+0xfc>)
 800184a:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800184c:	79fb      	ldrb	r3, [r7, #7]
}
 800184e:	4618      	mov	r0, r3
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000704 	.word	0x20000704

0800185c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	4613      	mov	r3, r2
 8001868:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800186a:	e012      	b.n	8001892 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	79fa      	ldrb	r2, [r7, #7]
 8001872:	68b9      	ldr	r1, [r7, #8]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ff71 	bl	800175c <SSD1306_Putc>
 800187a:	4603      	mov	r3, r0
 800187c:	461a      	mov	r2, r3
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	429a      	cmp	r2, r3
 8001884:	d002      	beq.n	800188c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	e008      	b.n	800189e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	3301      	adds	r3, #1
 8001890:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1e8      	bne.n	800186c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	781b      	ldrb	r3, [r3, #0]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 80018a6:	b590      	push	{r4, r7, lr}
 80018a8:	b087      	sub	sp, #28
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	4604      	mov	r4, r0
 80018ae:	4608      	mov	r0, r1
 80018b0:	4611      	mov	r1, r2
 80018b2:	461a      	mov	r2, r3
 80018b4:	4623      	mov	r3, r4
 80018b6:	80fb      	strh	r3, [r7, #6]
 80018b8:	4603      	mov	r3, r0
 80018ba:	80bb      	strh	r3, [r7, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	807b      	strh	r3, [r7, #2]
 80018c0:	4613      	mov	r3, r2
 80018c2:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 80018c4:	88fb      	ldrh	r3, [r7, #6]
 80018c6:	2b7f      	cmp	r3, #127	; 0x7f
 80018c8:	d901      	bls.n	80018ce <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 80018ca:	237f      	movs	r3, #127	; 0x7f
 80018cc:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 80018ce:	887b      	ldrh	r3, [r7, #2]
 80018d0:	2b7f      	cmp	r3, #127	; 0x7f
 80018d2:	d901      	bls.n	80018d8 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 80018d4:	237f      	movs	r3, #127	; 0x7f
 80018d6:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 80018d8:	88bb      	ldrh	r3, [r7, #4]
 80018da:	2b3f      	cmp	r3, #63	; 0x3f
 80018dc:	d901      	bls.n	80018e2 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 80018de:	233f      	movs	r3, #63	; 0x3f
 80018e0:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 80018e2:	883b      	ldrh	r3, [r7, #0]
 80018e4:	2b3f      	cmp	r3, #63	; 0x3f
 80018e6:	d901      	bls.n	80018ec <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 80018e8:	233f      	movs	r3, #63	; 0x3f
 80018ea:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 80018ec:	88fa      	ldrh	r2, [r7, #6]
 80018ee:	887b      	ldrh	r3, [r7, #2]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d205      	bcs.n	8001900 <SSD1306_DrawLine+0x5a>
 80018f4:	887a      	ldrh	r2, [r7, #2]
 80018f6:	88fb      	ldrh	r3, [r7, #6]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	b21b      	sxth	r3, r3
 80018fe:	e004      	b.n	800190a <SSD1306_DrawLine+0x64>
 8001900:	88fa      	ldrh	r2, [r7, #6]
 8001902:	887b      	ldrh	r3, [r7, #2]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	b29b      	uxth	r3, r3
 8001908:	b21b      	sxth	r3, r3
 800190a:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 800190c:	88ba      	ldrh	r2, [r7, #4]
 800190e:	883b      	ldrh	r3, [r7, #0]
 8001910:	429a      	cmp	r2, r3
 8001912:	d205      	bcs.n	8001920 <SSD1306_DrawLine+0x7a>
 8001914:	883a      	ldrh	r2, [r7, #0]
 8001916:	88bb      	ldrh	r3, [r7, #4]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	b29b      	uxth	r3, r3
 800191c:	b21b      	sxth	r3, r3
 800191e:	e004      	b.n	800192a <SSD1306_DrawLine+0x84>
 8001920:	88ba      	ldrh	r2, [r7, #4]
 8001922:	883b      	ldrh	r3, [r7, #0]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	b29b      	uxth	r3, r3
 8001928:	b21b      	sxth	r3, r3
 800192a:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 800192c:	88fa      	ldrh	r2, [r7, #6]
 800192e:	887b      	ldrh	r3, [r7, #2]
 8001930:	429a      	cmp	r2, r3
 8001932:	d201      	bcs.n	8001938 <SSD1306_DrawLine+0x92>
 8001934:	2301      	movs	r3, #1
 8001936:	e001      	b.n	800193c <SSD1306_DrawLine+0x96>
 8001938:	f04f 33ff 	mov.w	r3, #4294967295
 800193c:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 800193e:	88ba      	ldrh	r2, [r7, #4]
 8001940:	883b      	ldrh	r3, [r7, #0]
 8001942:	429a      	cmp	r2, r3
 8001944:	d201      	bcs.n	800194a <SSD1306_DrawLine+0xa4>
 8001946:	2301      	movs	r3, #1
 8001948:	e001      	b.n	800194e <SSD1306_DrawLine+0xa8>
 800194a:	f04f 33ff 	mov.w	r3, #4294967295
 800194e:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8001950:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001954:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001958:	429a      	cmp	r2, r3
 800195a:	dd06      	ble.n	800196a <SSD1306_DrawLine+0xc4>
 800195c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001960:	0fda      	lsrs	r2, r3, #31
 8001962:	4413      	add	r3, r2
 8001964:	105b      	asrs	r3, r3, #1
 8001966:	b21b      	sxth	r3, r3
 8001968:	e006      	b.n	8001978 <SSD1306_DrawLine+0xd2>
 800196a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800196e:	0fda      	lsrs	r2, r3, #31
 8001970:	4413      	add	r3, r2
 8001972:	105b      	asrs	r3, r3, #1
 8001974:	425b      	negs	r3, r3
 8001976:	b21b      	sxth	r3, r3
 8001978:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 800197a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d129      	bne.n	80019d6 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8001982:	883a      	ldrh	r2, [r7, #0]
 8001984:	88bb      	ldrh	r3, [r7, #4]
 8001986:	429a      	cmp	r2, r3
 8001988:	d205      	bcs.n	8001996 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 800198a:	883b      	ldrh	r3, [r7, #0]
 800198c:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 800198e:	88bb      	ldrh	r3, [r7, #4]
 8001990:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001992:	893b      	ldrh	r3, [r7, #8]
 8001994:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001996:	887a      	ldrh	r2, [r7, #2]
 8001998:	88fb      	ldrh	r3, [r7, #6]
 800199a:	429a      	cmp	r2, r3
 800199c:	d205      	bcs.n	80019aa <SSD1306_DrawLine+0x104>
			tmp = x1;
 800199e:	887b      	ldrh	r3, [r7, #2]
 80019a0:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80019a2:	88fb      	ldrh	r3, [r7, #6]
 80019a4:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80019a6:	893b      	ldrh	r3, [r7, #8]
 80019a8:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 80019aa:	88bb      	ldrh	r3, [r7, #4]
 80019ac:	82bb      	strh	r3, [r7, #20]
 80019ae:	e00c      	b.n	80019ca <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 80019b0:	8ab9      	ldrh	r1, [r7, #20]
 80019b2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80019b6:	88fb      	ldrh	r3, [r7, #6]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff fe5b 	bl	8001674 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 80019be:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	3301      	adds	r3, #1
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	82bb      	strh	r3, [r7, #20]
 80019ca:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80019ce:	883b      	ldrh	r3, [r7, #0]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	dded      	ble.n	80019b0 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 80019d4:	e05f      	b.n	8001a96 <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 80019d6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d129      	bne.n	8001a32 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 80019de:	883a      	ldrh	r2, [r7, #0]
 80019e0:	88bb      	ldrh	r3, [r7, #4]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d205      	bcs.n	80019f2 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 80019e6:	883b      	ldrh	r3, [r7, #0]
 80019e8:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80019ea:	88bb      	ldrh	r3, [r7, #4]
 80019ec:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80019ee:	893b      	ldrh	r3, [r7, #8]
 80019f0:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 80019f2:	887a      	ldrh	r2, [r7, #2]
 80019f4:	88fb      	ldrh	r3, [r7, #6]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d205      	bcs.n	8001a06 <SSD1306_DrawLine+0x160>
			tmp = x1;
 80019fa:	887b      	ldrh	r3, [r7, #2]
 80019fc:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80019fe:	88fb      	ldrh	r3, [r7, #6]
 8001a00:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001a02:	893b      	ldrh	r3, [r7, #8]
 8001a04:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8001a06:	88fb      	ldrh	r3, [r7, #6]
 8001a08:	82bb      	strh	r3, [r7, #20]
 8001a0a:	e00c      	b.n	8001a26 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8001a0c:	8abb      	ldrh	r3, [r7, #20]
 8001a0e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001a12:	88b9      	ldrh	r1, [r7, #4]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff fe2d 	bl	8001674 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001a1a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	3301      	adds	r3, #1
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	82bb      	strh	r3, [r7, #20]
 8001a26:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001a2a:	887b      	ldrh	r3, [r7, #2]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	dded      	ble.n	8001a0c <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 8001a30:	e031      	b.n	8001a96 <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8001a32:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001a36:	88b9      	ldrh	r1, [r7, #4]
 8001a38:	88fb      	ldrh	r3, [r7, #6]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff fe1a 	bl	8001674 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8001a40:	88fa      	ldrh	r2, [r7, #6]
 8001a42:	887b      	ldrh	r3, [r7, #2]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d103      	bne.n	8001a50 <SSD1306_DrawLine+0x1aa>
 8001a48:	88ba      	ldrh	r2, [r7, #4]
 8001a4a:	883b      	ldrh	r3, [r7, #0]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d021      	beq.n	8001a94 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 8001a50:	8afb      	ldrh	r3, [r7, #22]
 8001a52:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8001a54:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001a58:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001a5c:	425b      	negs	r3, r3
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	dd08      	ble.n	8001a74 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8001a62:	8afa      	ldrh	r2, [r7, #22]
 8001a64:	8a3b      	ldrh	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001a6c:	89fa      	ldrh	r2, [r7, #14]
 8001a6e:	88fb      	ldrh	r3, [r7, #6]
 8001a70:	4413      	add	r3, r2
 8001a72:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8001a74:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001a78:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	dad8      	bge.n	8001a32 <SSD1306_DrawLine+0x18c>
			err += dx;
 8001a80:	8afa      	ldrh	r2, [r7, #22]
 8001a82:	8a7b      	ldrh	r3, [r7, #18]
 8001a84:	4413      	add	r3, r2
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001a8a:	89ba      	ldrh	r2, [r7, #12]
 8001a8c:	88bb      	ldrh	r3, [r7, #4]
 8001a8e:	4413      	add	r3, r2
 8001a90:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8001a92:	e7ce      	b.n	8001a32 <SSD1306_DrawLine+0x18c>
			break;
 8001a94:	bf00      	nop
		} 
	}
}
 8001a96:	371c      	adds	r7, #28
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd90      	pop	{r4, r7, pc}

08001a9c <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8001a9c:	b590      	push	{r4, r7, lr}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af02      	add	r7, sp, #8
 8001aa2:	4604      	mov	r4, r0
 8001aa4:	4608      	mov	r0, r1
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4623      	mov	r3, r4
 8001aac:	80fb      	strh	r3, [r7, #6]
 8001aae:	4603      	mov	r3, r0
 8001ab0:	80bb      	strh	r3, [r7, #4]
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	807b      	strh	r3, [r7, #2]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 8001aba:	88fb      	ldrh	r3, [r7, #6]
 8001abc:	2b7f      	cmp	r3, #127	; 0x7f
 8001abe:	d853      	bhi.n	8001b68 <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 8001ac0:	88bb      	ldrh	r3, [r7, #4]
 8001ac2:	2b3f      	cmp	r3, #63	; 0x3f
 8001ac4:	d850      	bhi.n	8001b68 <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8001ac6:	88fa      	ldrh	r2, [r7, #6]
 8001ac8:	887b      	ldrh	r3, [r7, #2]
 8001aca:	4413      	add	r3, r2
 8001acc:	2b7f      	cmp	r3, #127	; 0x7f
 8001ace:	dd03      	ble.n	8001ad8 <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8001ad0:	88fb      	ldrh	r3, [r7, #6]
 8001ad2:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001ad6:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8001ad8:	88ba      	ldrh	r2, [r7, #4]
 8001ada:	883b      	ldrh	r3, [r7, #0]
 8001adc:	4413      	add	r3, r2
 8001ade:	2b3f      	cmp	r3, #63	; 0x3f
 8001ae0:	dd03      	ble.n	8001aea <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8001ae2:	88bb      	ldrh	r3, [r7, #4]
 8001ae4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001ae8:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8001aea:	88fa      	ldrh	r2, [r7, #6]
 8001aec:	887b      	ldrh	r3, [r7, #2]
 8001aee:	4413      	add	r3, r2
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	88bc      	ldrh	r4, [r7, #4]
 8001af4:	88b9      	ldrh	r1, [r7, #4]
 8001af6:	88f8      	ldrh	r0, [r7, #6]
 8001af8:	7e3b      	ldrb	r3, [r7, #24]
 8001afa:	9300      	str	r3, [sp, #0]
 8001afc:	4623      	mov	r3, r4
 8001afe:	f7ff fed2 	bl	80018a6 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8001b02:	88ba      	ldrh	r2, [r7, #4]
 8001b04:	883b      	ldrh	r3, [r7, #0]
 8001b06:	4413      	add	r3, r2
 8001b08:	b299      	uxth	r1, r3
 8001b0a:	88fa      	ldrh	r2, [r7, #6]
 8001b0c:	887b      	ldrh	r3, [r7, #2]
 8001b0e:	4413      	add	r3, r2
 8001b10:	b29c      	uxth	r4, r3
 8001b12:	88ba      	ldrh	r2, [r7, #4]
 8001b14:	883b      	ldrh	r3, [r7, #0]
 8001b16:	4413      	add	r3, r2
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	88f8      	ldrh	r0, [r7, #6]
 8001b1c:	7e3b      	ldrb	r3, [r7, #24]
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	4613      	mov	r3, r2
 8001b22:	4622      	mov	r2, r4
 8001b24:	f7ff febf 	bl	80018a6 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8001b28:	88ba      	ldrh	r2, [r7, #4]
 8001b2a:	883b      	ldrh	r3, [r7, #0]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	b29c      	uxth	r4, r3
 8001b30:	88fa      	ldrh	r2, [r7, #6]
 8001b32:	88b9      	ldrh	r1, [r7, #4]
 8001b34:	88f8      	ldrh	r0, [r7, #6]
 8001b36:	7e3b      	ldrb	r3, [r7, #24]
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	4623      	mov	r3, r4
 8001b3c:	f7ff feb3 	bl	80018a6 <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8001b40:	88fa      	ldrh	r2, [r7, #6]
 8001b42:	887b      	ldrh	r3, [r7, #2]
 8001b44:	4413      	add	r3, r2
 8001b46:	b298      	uxth	r0, r3
 8001b48:	88fa      	ldrh	r2, [r7, #6]
 8001b4a:	887b      	ldrh	r3, [r7, #2]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	b29c      	uxth	r4, r3
 8001b50:	88ba      	ldrh	r2, [r7, #4]
 8001b52:	883b      	ldrh	r3, [r7, #0]
 8001b54:	4413      	add	r3, r2
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	88b9      	ldrh	r1, [r7, #4]
 8001b5a:	7e3b      	ldrb	r3, [r7, #24]
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	4622      	mov	r2, r4
 8001b62:	f7ff fea0 	bl	80018a6 <SSD1306_DrawLine>
 8001b66:	e000      	b.n	8001b6a <SSD1306_DrawRectangle+0xce>
		return;
 8001b68:	bf00      	nop
}
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd90      	pop	{r4, r7, pc}

08001b70 <SSD1306_DrawFilledRectangle>:

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8001b70:	b590      	push	{r4, r7, lr}
 8001b72:	b087      	sub	sp, #28
 8001b74:	af02      	add	r7, sp, #8
 8001b76:	4604      	mov	r4, r0
 8001b78:	4608      	mov	r0, r1
 8001b7a:	4611      	mov	r1, r2
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4623      	mov	r3, r4
 8001b80:	80fb      	strh	r3, [r7, #6]
 8001b82:	4603      	mov	r3, r0
 8001b84:	80bb      	strh	r3, [r7, #4]
 8001b86:	460b      	mov	r3, r1
 8001b88:	807b      	strh	r3, [r7, #2]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	803b      	strh	r3, [r7, #0]
	uint8_t i;
	
	/* Check input parameters */
	if (
 8001b8e:	88fb      	ldrh	r3, [r7, #6]
 8001b90:	2b7f      	cmp	r3, #127	; 0x7f
 8001b92:	d836      	bhi.n	8001c02 <SSD1306_DrawFilledRectangle+0x92>
		x >= SSD1306_WIDTH ||
 8001b94:	88bb      	ldrh	r3, [r7, #4]
 8001b96:	2b3f      	cmp	r3, #63	; 0x3f
 8001b98:	d833      	bhi.n	8001c02 <SSD1306_DrawFilledRectangle+0x92>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8001b9a:	88fa      	ldrh	r2, [r7, #6]
 8001b9c:	887b      	ldrh	r3, [r7, #2]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	2b7f      	cmp	r3, #127	; 0x7f
 8001ba2:	dd03      	ble.n	8001bac <SSD1306_DrawFilledRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8001ba4:	88fb      	ldrh	r3, [r7, #6]
 8001ba6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001baa:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8001bac:	88ba      	ldrh	r2, [r7, #4]
 8001bae:	883b      	ldrh	r3, [r7, #0]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	2b3f      	cmp	r3, #63	; 0x3f
 8001bb4:	dd03      	ble.n	8001bbe <SSD1306_DrawFilledRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8001bb6:	88bb      	ldrh	r3, [r7, #4]
 8001bb8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001bbc:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	73fb      	strb	r3, [r7, #15]
 8001bc2:	e018      	b.n	8001bf6 <SSD1306_DrawFilledRectangle+0x86>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	88bb      	ldrh	r3, [r7, #4]
 8001bca:	4413      	add	r3, r2
 8001bcc:	b299      	uxth	r1, r3
 8001bce:	88fa      	ldrh	r2, [r7, #6]
 8001bd0:	887b      	ldrh	r3, [r7, #2]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	b29c      	uxth	r4, r3
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	88bb      	ldrh	r3, [r7, #4]
 8001bdc:	4413      	add	r3, r2
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	88f8      	ldrh	r0, [r7, #6]
 8001be2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	4613      	mov	r3, r2
 8001bea:	4622      	mov	r2, r4
 8001bec:	f7ff fe5b 	bl	80018a6 <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 8001bf0:	7bfb      	ldrb	r3, [r7, #15]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	73fb      	strb	r3, [r7, #15]
 8001bf6:	7bfb      	ldrb	r3, [r7, #15]
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	883a      	ldrh	r2, [r7, #0]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d2e1      	bcs.n	8001bc4 <SSD1306_DrawFilledRectangle+0x54>
 8001c00:	e000      	b.n	8001c04 <SSD1306_DrawFilledRectangle+0x94>
		return;
 8001c02:	bf00      	nop
	}
}
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd90      	pop	{r4, r7, pc}

08001c0a <SSD1306_DrawTriangle>:

void SSD1306_DrawTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, SSD1306_COLOR_t color) {
 8001c0a:	b590      	push	{r4, r7, lr}
 8001c0c:	b085      	sub	sp, #20
 8001c0e:	af02      	add	r7, sp, #8
 8001c10:	4604      	mov	r4, r0
 8001c12:	4608      	mov	r0, r1
 8001c14:	4611      	mov	r1, r2
 8001c16:	461a      	mov	r2, r3
 8001c18:	4623      	mov	r3, r4
 8001c1a:	80fb      	strh	r3, [r7, #6]
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	80bb      	strh	r3, [r7, #4]
 8001c20:	460b      	mov	r3, r1
 8001c22:	807b      	strh	r3, [r7, #2]
 8001c24:	4613      	mov	r3, r2
 8001c26:	803b      	strh	r3, [r7, #0]
	/* Draw lines */
	SSD1306_DrawLine(x1, y1, x2, y2, color);
 8001c28:	883c      	ldrh	r4, [r7, #0]
 8001c2a:	887a      	ldrh	r2, [r7, #2]
 8001c2c:	88b9      	ldrh	r1, [r7, #4]
 8001c2e:	88f8      	ldrh	r0, [r7, #6]
 8001c30:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	4623      	mov	r3, r4
 8001c38:	f7ff fe35 	bl	80018a6 <SSD1306_DrawLine>
	SSD1306_DrawLine(x2, y2, x3, y3, color);
 8001c3c:	8bbc      	ldrh	r4, [r7, #28]
 8001c3e:	8b3a      	ldrh	r2, [r7, #24]
 8001c40:	8839      	ldrh	r1, [r7, #0]
 8001c42:	8878      	ldrh	r0, [r7, #2]
 8001c44:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	4623      	mov	r3, r4
 8001c4c:	f7ff fe2b 	bl	80018a6 <SSD1306_DrawLine>
	SSD1306_DrawLine(x3, y3, x1, y1, color);
 8001c50:	88bc      	ldrh	r4, [r7, #4]
 8001c52:	88fa      	ldrh	r2, [r7, #6]
 8001c54:	8bb9      	ldrh	r1, [r7, #28]
 8001c56:	8b38      	ldrh	r0, [r7, #24]
 8001c58:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	4623      	mov	r3, r4
 8001c60:	f7ff fe21 	bl	80018a6 <SSD1306_DrawLine>
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd90      	pop	{r4, r7, pc}

08001c6c <SSD1306_DrawFilledTriangle>:


void SSD1306_DrawFilledTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, SSD1306_COLOR_t color) {
 8001c6c:	b590      	push	{r4, r7, lr}
 8001c6e:	b08d      	sub	sp, #52	; 0x34
 8001c70:	af02      	add	r7, sp, #8
 8001c72:	4604      	mov	r4, r0
 8001c74:	4608      	mov	r0, r1
 8001c76:	4611      	mov	r1, r2
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4623      	mov	r3, r4
 8001c7c:	80fb      	strh	r3, [r7, #6]
 8001c7e:	4603      	mov	r3, r0
 8001c80:	80bb      	strh	r3, [r7, #4]
 8001c82:	460b      	mov	r3, r1
 8001c84:	807b      	strh	r3, [r7, #2]
 8001c86:	4613      	mov	r3, r2
 8001c88:	803b      	strh	r3, [r7, #0]
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	823b      	strh	r3, [r7, #16]
 8001c8e:	2300      	movs	r3, #0
 8001c90:	81fb      	strh	r3, [r7, #14]
 8001c92:	2300      	movs	r3, #0
 8001c94:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001c96:	2300      	movs	r3, #0
 8001c98:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	847b      	strh	r3, [r7, #34]	; 0x22
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	843b      	strh	r3, [r7, #32]
	yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	83fb      	strh	r3, [r7, #30]
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	83bb      	strh	r3, [r7, #28]
 8001caa:	2300      	movs	r3, #0
 8001cac:	837b      	strh	r3, [r7, #26]
 8001cae:	2300      	movs	r3, #0
 8001cb0:	833b      	strh	r3, [r7, #24]
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	82fb      	strh	r3, [r7, #22]
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	82bb      	strh	r3, [r7, #20]
	curpixel = 0;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	827b      	strh	r3, [r7, #18]
	
	deltax = ABS(x2 - x1);
 8001cbe:	887a      	ldrh	r2, [r7, #2]
 8001cc0:	88fb      	ldrh	r3, [r7, #6]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	bfb8      	it	lt
 8001cc8:	425b      	neglt	r3, r3
 8001cca:	823b      	strh	r3, [r7, #16]
	deltay = ABS(y2 - y1);
 8001ccc:	883a      	ldrh	r2, [r7, #0]
 8001cce:	88bb      	ldrh	r3, [r7, #4]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	bfb8      	it	lt
 8001cd6:	425b      	neglt	r3, r3
 8001cd8:	81fb      	strh	r3, [r7, #14]
	x = x1;
 8001cda:	88fb      	ldrh	r3, [r7, #6]
 8001cdc:	84fb      	strh	r3, [r7, #38]	; 0x26
	y = y1;
 8001cde:	88bb      	ldrh	r3, [r7, #4]
 8001ce0:	84bb      	strh	r3, [r7, #36]	; 0x24

	if (x2 >= x1) {
 8001ce2:	887a      	ldrh	r2, [r7, #2]
 8001ce4:	88fb      	ldrh	r3, [r7, #6]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d304      	bcc.n	8001cf4 <SSD1306_DrawFilledTriangle+0x88>
		xinc1 = 1;
 8001cea:	2301      	movs	r3, #1
 8001cec:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = 1;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	843b      	strh	r3, [r7, #32]
 8001cf2:	e005      	b.n	8001d00 <SSD1306_DrawFilledTriangle+0x94>
	} else {
		xinc1 = -1;
 8001cf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cf8:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = -1;
 8001cfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cfe:	843b      	strh	r3, [r7, #32]
	}

	if (y2 >= y1) {
 8001d00:	883a      	ldrh	r2, [r7, #0]
 8001d02:	88bb      	ldrh	r3, [r7, #4]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d304      	bcc.n	8001d12 <SSD1306_DrawFilledTriangle+0xa6>
		yinc1 = 1;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	83fb      	strh	r3, [r7, #30]
		yinc2 = 1;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	83bb      	strh	r3, [r7, #28]
 8001d10:	e005      	b.n	8001d1e <SSD1306_DrawFilledTriangle+0xb2>
	} else {
		yinc1 = -1;
 8001d12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d16:	83fb      	strh	r3, [r7, #30]
		yinc2 = -1;
 8001d18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d1c:	83bb      	strh	r3, [r7, #28]
	}

	if (deltax >= deltay){
 8001d1e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001d22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	db10      	blt.n	8001d4c <SSD1306_DrawFilledTriangle+0xe0>
		xinc1 = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	847b      	strh	r3, [r7, #34]	; 0x22
		yinc2 = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	83bb      	strh	r3, [r7, #28]
		den = deltax;
 8001d32:	8a3b      	ldrh	r3, [r7, #16]
 8001d34:	837b      	strh	r3, [r7, #26]
		num = deltax / 2;
 8001d36:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001d3a:	0fda      	lsrs	r2, r3, #31
 8001d3c:	4413      	add	r3, r2
 8001d3e:	105b      	asrs	r3, r3, #1
 8001d40:	833b      	strh	r3, [r7, #24]
		numadd = deltay;
 8001d42:	89fb      	ldrh	r3, [r7, #14]
 8001d44:	82fb      	strh	r3, [r7, #22]
		numpixels = deltax;
 8001d46:	8a3b      	ldrh	r3, [r7, #16]
 8001d48:	82bb      	strh	r3, [r7, #20]
 8001d4a:	e00f      	b.n	8001d6c <SSD1306_DrawFilledTriangle+0x100>
	} else {
		xinc2 = 0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	843b      	strh	r3, [r7, #32]
		yinc1 = 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	83fb      	strh	r3, [r7, #30]
		den = deltay;
 8001d54:	89fb      	ldrh	r3, [r7, #14]
 8001d56:	837b      	strh	r3, [r7, #26]
		num = deltay / 2;
 8001d58:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d5c:	0fda      	lsrs	r2, r3, #31
 8001d5e:	4413      	add	r3, r2
 8001d60:	105b      	asrs	r3, r3, #1
 8001d62:	833b      	strh	r3, [r7, #24]
		numadd = deltax;
 8001d64:	8a3b      	ldrh	r3, [r7, #16]
 8001d66:	82fb      	strh	r3, [r7, #22]
		numpixels = deltay;
 8001d68:	89fb      	ldrh	r3, [r7, #14]
 8001d6a:	82bb      	strh	r3, [r7, #20]
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	827b      	strh	r3, [r7, #18]
 8001d70:	e033      	b.n	8001dda <SSD1306_DrawFilledTriangle+0x16e>
		SSD1306_DrawLine(x, y, x3, y3, color);
 8001d72:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8001d74:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001d76:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 8001d78:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001d7a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001d7e:	9300      	str	r3, [sp, #0]
 8001d80:	4623      	mov	r3, r4
 8001d82:	f7ff fd90 	bl	80018a6 <SSD1306_DrawLine>

		num += numadd;
 8001d86:	8b3a      	ldrh	r2, [r7, #24]
 8001d88:	8afb      	ldrh	r3, [r7, #22]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	833b      	strh	r3, [r7, #24]
		if (num >= den) {
 8001d90:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001d94:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	db0e      	blt.n	8001dba <SSD1306_DrawFilledTriangle+0x14e>
			num -= den;
 8001d9c:	8b3a      	ldrh	r2, [r7, #24]
 8001d9e:	8b7b      	ldrh	r3, [r7, #26]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	833b      	strh	r3, [r7, #24]
			x += xinc1;
 8001da6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001da8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001daa:	4413      	add	r3, r2
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	84fb      	strh	r3, [r7, #38]	; 0x26
			y += yinc1;
 8001db0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001db2:	8bfb      	ldrh	r3, [r7, #30]
 8001db4:	4413      	add	r3, r2
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		x += xinc2;
 8001dba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001dbc:	8c3b      	ldrh	r3, [r7, #32]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	84fb      	strh	r3, [r7, #38]	; 0x26
		y += yinc2;
 8001dc4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001dc6:	8bbb      	ldrh	r3, [r7, #28]
 8001dc8:	4413      	add	r3, r2
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 8001dce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	827b      	strh	r3, [r7, #18]
 8001dda:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001dde:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	ddc5      	ble.n	8001d72 <SSD1306_DrawFilledTriangle+0x106>
	}
}
 8001de6:	bf00      	nop
 8001de8:	bf00      	nop
 8001dea:	372c      	adds	r7, #44	; 0x2c
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd90      	pop	{r4, r7, pc}

08001df0 <SSD1306_DrawCircle>:

void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 8001df0:	b590      	push	{r4, r7, lr}
 8001df2:	b087      	sub	sp, #28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4604      	mov	r4, r0
 8001df8:	4608      	mov	r0, r1
 8001dfa:	4611      	mov	r1, r2
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4623      	mov	r3, r4
 8001e00:	80fb      	strh	r3, [r7, #6]
 8001e02:	4603      	mov	r3, r0
 8001e04:	80bb      	strh	r3, [r7, #4]
 8001e06:	460b      	mov	r3, r1
 8001e08:	807b      	strh	r3, [r7, #2]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8001e0e:	887b      	ldrh	r3, [r7, #2]
 8001e10:	f1c3 0301 	rsb	r3, r3, #1
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8001e1c:	887b      	ldrh	r3, [r7, #2]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	03d2      	lsls	r2, r2, #15
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8001e2e:	887b      	ldrh	r3, [r7, #2]
 8001e30:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 8001e32:	88f8      	ldrh	r0, [r7, #6]
 8001e34:	88ba      	ldrh	r2, [r7, #4]
 8001e36:	887b      	ldrh	r3, [r7, #2]
 8001e38:	4413      	add	r3, r2
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	787a      	ldrb	r2, [r7, #1]
 8001e3e:	4619      	mov	r1, r3
 8001e40:	f7ff fc18 	bl	8001674 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 8001e44:	88f8      	ldrh	r0, [r7, #6]
 8001e46:	88ba      	ldrh	r2, [r7, #4]
 8001e48:	887b      	ldrh	r3, [r7, #2]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	787a      	ldrb	r2, [r7, #1]
 8001e50:	4619      	mov	r1, r3
 8001e52:	f7ff fc0f 	bl	8001674 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 8001e56:	88fa      	ldrh	r2, [r7, #6]
 8001e58:	887b      	ldrh	r3, [r7, #2]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	88b9      	ldrh	r1, [r7, #4]
 8001e60:	787a      	ldrb	r2, [r7, #1]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff fc06 	bl	8001674 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 8001e68:	88fa      	ldrh	r2, [r7, #6]
 8001e6a:	887b      	ldrh	r3, [r7, #2]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	88b9      	ldrh	r1, [r7, #4]
 8001e72:	787a      	ldrb	r2, [r7, #1]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff fbfd 	bl	8001674 <SSD1306_DrawPixel>

    while (x < y) {
 8001e7a:	e081      	b.n	8001f80 <SSD1306_DrawCircle+0x190>
        if (f >= 0) {
 8001e7c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	db0e      	blt.n	8001ea2 <SSD1306_DrawCircle+0xb2>
            y--;
 8001e84:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8001e90:	8a7b      	ldrh	r3, [r7, #18]
 8001e92:	3302      	adds	r3, #2
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8001e98:	8afa      	ldrh	r2, [r7, #22]
 8001e9a:	8a7b      	ldrh	r3, [r7, #18]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8001ea2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8001eae:	8abb      	ldrh	r3, [r7, #20]
 8001eb0:	3302      	adds	r3, #2
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8001eb6:	8afa      	ldrh	r2, [r7, #22]
 8001eb8:	8abb      	ldrh	r3, [r7, #20]
 8001eba:	4413      	add	r3, r2
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawPixel(x0 + x, y0 + y, c);
 8001ec0:	88fa      	ldrh	r2, [r7, #6]
 8001ec2:	8a3b      	ldrh	r3, [r7, #16]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	b298      	uxth	r0, r3
 8001ec8:	88ba      	ldrh	r2, [r7, #4]
 8001eca:	89fb      	ldrh	r3, [r7, #14]
 8001ecc:	4413      	add	r3, r2
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	787a      	ldrb	r2, [r7, #1]
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	f7ff fbce 	bl	8001674 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 + y, c);
 8001ed8:	88fa      	ldrh	r2, [r7, #6]
 8001eda:	8a3b      	ldrh	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	b298      	uxth	r0, r3
 8001ee0:	88ba      	ldrh	r2, [r7, #4]
 8001ee2:	89fb      	ldrh	r3, [r7, #14]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	787a      	ldrb	r2, [r7, #1]
 8001eea:	4619      	mov	r1, r3
 8001eec:	f7ff fbc2 	bl	8001674 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + x, y0 - y, c);
 8001ef0:	88fa      	ldrh	r2, [r7, #6]
 8001ef2:	8a3b      	ldrh	r3, [r7, #16]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	b298      	uxth	r0, r3
 8001ef8:	88ba      	ldrh	r2, [r7, #4]
 8001efa:	89fb      	ldrh	r3, [r7, #14]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	787a      	ldrb	r2, [r7, #1]
 8001f02:	4619      	mov	r1, r3
 8001f04:	f7ff fbb6 	bl	8001674 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 - y, c);
 8001f08:	88fa      	ldrh	r2, [r7, #6]
 8001f0a:	8a3b      	ldrh	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	b298      	uxth	r0, r3
 8001f10:	88ba      	ldrh	r2, [r7, #4]
 8001f12:	89fb      	ldrh	r3, [r7, #14]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	787a      	ldrb	r2, [r7, #1]
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	f7ff fbaa 	bl	8001674 <SSD1306_DrawPixel>

        SSD1306_DrawPixel(x0 + y, y0 + x, c);
 8001f20:	88fa      	ldrh	r2, [r7, #6]
 8001f22:	89fb      	ldrh	r3, [r7, #14]
 8001f24:	4413      	add	r3, r2
 8001f26:	b298      	uxth	r0, r3
 8001f28:	88ba      	ldrh	r2, [r7, #4]
 8001f2a:	8a3b      	ldrh	r3, [r7, #16]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	787a      	ldrb	r2, [r7, #1]
 8001f32:	4619      	mov	r1, r3
 8001f34:	f7ff fb9e 	bl	8001674 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 + x, c);
 8001f38:	88fa      	ldrh	r2, [r7, #6]
 8001f3a:	89fb      	ldrh	r3, [r7, #14]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	b298      	uxth	r0, r3
 8001f40:	88ba      	ldrh	r2, [r7, #4]
 8001f42:	8a3b      	ldrh	r3, [r7, #16]
 8001f44:	4413      	add	r3, r2
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	787a      	ldrb	r2, [r7, #1]
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	f7ff fb92 	bl	8001674 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
 8001f50:	88fa      	ldrh	r2, [r7, #6]
 8001f52:	89fb      	ldrh	r3, [r7, #14]
 8001f54:	4413      	add	r3, r2
 8001f56:	b298      	uxth	r0, r3
 8001f58:	88ba      	ldrh	r2, [r7, #4]
 8001f5a:	8a3b      	ldrh	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	787a      	ldrb	r2, [r7, #1]
 8001f62:	4619      	mov	r1, r3
 8001f64:	f7ff fb86 	bl	8001674 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
 8001f68:	88fa      	ldrh	r2, [r7, #6]
 8001f6a:	89fb      	ldrh	r3, [r7, #14]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	b298      	uxth	r0, r3
 8001f70:	88ba      	ldrh	r2, [r7, #4]
 8001f72:	8a3b      	ldrh	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	787a      	ldrb	r2, [r7, #1]
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	f7ff fb7a 	bl	8001674 <SSD1306_DrawPixel>
    while (x < y) {
 8001f80:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001f84:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	f6ff af77 	blt.w	8001e7c <SSD1306_DrawCircle+0x8c>
    }
}
 8001f8e:	bf00      	nop
 8001f90:	bf00      	nop
 8001f92:	371c      	adds	r7, #28
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd90      	pop	{r4, r7, pc}

08001f98 <SSD1306_DrawFilledCircle>:

void SSD1306_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 8001f98:	b590      	push	{r4, r7, lr}
 8001f9a:	b089      	sub	sp, #36	; 0x24
 8001f9c:	af02      	add	r7, sp, #8
 8001f9e:	4604      	mov	r4, r0
 8001fa0:	4608      	mov	r0, r1
 8001fa2:	4611      	mov	r1, r2
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	4623      	mov	r3, r4
 8001fa8:	80fb      	strh	r3, [r7, #6]
 8001faa:	4603      	mov	r3, r0
 8001fac:	80bb      	strh	r3, [r7, #4]
 8001fae:	460b      	mov	r3, r1
 8001fb0:	807b      	strh	r3, [r7, #2]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8001fb6:	887b      	ldrh	r3, [r7, #2]
 8001fb8:	f1c3 0301 	rsb	r3, r3, #1
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8001fc4:	887b      	ldrh	r3, [r7, #2]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	03d2      	lsls	r2, r2, #15
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8001fd6:	887b      	ldrh	r3, [r7, #2]
 8001fd8:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 8001fda:	88f8      	ldrh	r0, [r7, #6]
 8001fdc:	88ba      	ldrh	r2, [r7, #4]
 8001fde:	887b      	ldrh	r3, [r7, #2]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	787a      	ldrb	r2, [r7, #1]
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	f7ff fb44 	bl	8001674 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 8001fec:	88f8      	ldrh	r0, [r7, #6]
 8001fee:	88ba      	ldrh	r2, [r7, #4]
 8001ff0:	887b      	ldrh	r3, [r7, #2]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	787a      	ldrb	r2, [r7, #1]
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	f7ff fb3b 	bl	8001674 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 8001ffe:	88fa      	ldrh	r2, [r7, #6]
 8002000:	887b      	ldrh	r3, [r7, #2]
 8002002:	4413      	add	r3, r2
 8002004:	b29b      	uxth	r3, r3
 8002006:	88b9      	ldrh	r1, [r7, #4]
 8002008:	787a      	ldrb	r2, [r7, #1]
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff fb32 	bl	8001674 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 8002010:	88fa      	ldrh	r2, [r7, #6]
 8002012:	887b      	ldrh	r3, [r7, #2]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	b29b      	uxth	r3, r3
 8002018:	88b9      	ldrh	r1, [r7, #4]
 800201a:	787a      	ldrb	r2, [r7, #1]
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff fb29 	bl	8001674 <SSD1306_DrawPixel>
    SSD1306_DrawLine(x0 - r, y0, x0 + r, y0, c);
 8002022:	88fa      	ldrh	r2, [r7, #6]
 8002024:	887b      	ldrh	r3, [r7, #2]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	b298      	uxth	r0, r3
 800202a:	88b9      	ldrh	r1, [r7, #4]
 800202c:	88fa      	ldrh	r2, [r7, #6]
 800202e:	887b      	ldrh	r3, [r7, #2]
 8002030:	4413      	add	r3, r2
 8002032:	b29a      	uxth	r2, r3
 8002034:	88bc      	ldrh	r4, [r7, #4]
 8002036:	787b      	ldrb	r3, [r7, #1]
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	4623      	mov	r3, r4
 800203c:	f7ff fc33 	bl	80018a6 <SSD1306_DrawLine>

    while (x < y) {
 8002040:	e079      	b.n	8002136 <SSD1306_DrawFilledCircle+0x19e>
        if (f >= 0) {
 8002042:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002046:	2b00      	cmp	r3, #0
 8002048:	db0e      	blt.n	8002068 <SSD1306_DrawFilledCircle+0xd0>
            y--;
 800204a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800204e:	b29b      	uxth	r3, r3
 8002050:	3b01      	subs	r3, #1
 8002052:	b29b      	uxth	r3, r3
 8002054:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8002056:	8a7b      	ldrh	r3, [r7, #18]
 8002058:	3302      	adds	r3, #2
 800205a:	b29b      	uxth	r3, r3
 800205c:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 800205e:	8afa      	ldrh	r2, [r7, #22]
 8002060:	8a7b      	ldrh	r3, [r7, #18]
 8002062:	4413      	add	r3, r2
 8002064:	b29b      	uxth	r3, r3
 8002066:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8002068:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800206c:	b29b      	uxth	r3, r3
 800206e:	3301      	adds	r3, #1
 8002070:	b29b      	uxth	r3, r3
 8002072:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8002074:	8abb      	ldrh	r3, [r7, #20]
 8002076:	3302      	adds	r3, #2
 8002078:	b29b      	uxth	r3, r3
 800207a:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 800207c:	8afa      	ldrh	r2, [r7, #22]
 800207e:	8abb      	ldrh	r3, [r7, #20]
 8002080:	4413      	add	r3, r2
 8002082:	b29b      	uxth	r3, r3
 8002084:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, c);
 8002086:	88fa      	ldrh	r2, [r7, #6]
 8002088:	8a3b      	ldrh	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	b298      	uxth	r0, r3
 800208e:	88ba      	ldrh	r2, [r7, #4]
 8002090:	89fb      	ldrh	r3, [r7, #14]
 8002092:	4413      	add	r3, r2
 8002094:	b299      	uxth	r1, r3
 8002096:	88fa      	ldrh	r2, [r7, #6]
 8002098:	8a3b      	ldrh	r3, [r7, #16]
 800209a:	4413      	add	r3, r2
 800209c:	b29c      	uxth	r4, r3
 800209e:	88ba      	ldrh	r2, [r7, #4]
 80020a0:	89fb      	ldrh	r3, [r7, #14]
 80020a2:	4413      	add	r3, r2
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	787b      	ldrb	r3, [r7, #1]
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	4613      	mov	r3, r2
 80020ac:	4622      	mov	r2, r4
 80020ae:	f7ff fbfa 	bl	80018a6 <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, c);
 80020b2:	88fa      	ldrh	r2, [r7, #6]
 80020b4:	8a3b      	ldrh	r3, [r7, #16]
 80020b6:	4413      	add	r3, r2
 80020b8:	b298      	uxth	r0, r3
 80020ba:	88ba      	ldrh	r2, [r7, #4]
 80020bc:	89fb      	ldrh	r3, [r7, #14]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	b299      	uxth	r1, r3
 80020c2:	88fa      	ldrh	r2, [r7, #6]
 80020c4:	8a3b      	ldrh	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	b29c      	uxth	r4, r3
 80020ca:	88ba      	ldrh	r2, [r7, #4]
 80020cc:	89fb      	ldrh	r3, [r7, #14]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	787b      	ldrb	r3, [r7, #1]
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	4613      	mov	r3, r2
 80020d8:	4622      	mov	r2, r4
 80020da:	f7ff fbe4 	bl	80018a6 <SSD1306_DrawLine>

        SSD1306_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
 80020de:	88fa      	ldrh	r2, [r7, #6]
 80020e0:	89fb      	ldrh	r3, [r7, #14]
 80020e2:	4413      	add	r3, r2
 80020e4:	b298      	uxth	r0, r3
 80020e6:	88ba      	ldrh	r2, [r7, #4]
 80020e8:	8a3b      	ldrh	r3, [r7, #16]
 80020ea:	4413      	add	r3, r2
 80020ec:	b299      	uxth	r1, r3
 80020ee:	88fa      	ldrh	r2, [r7, #6]
 80020f0:	89fb      	ldrh	r3, [r7, #14]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	b29c      	uxth	r4, r3
 80020f6:	88ba      	ldrh	r2, [r7, #4]
 80020f8:	8a3b      	ldrh	r3, [r7, #16]
 80020fa:	4413      	add	r3, r2
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	787b      	ldrb	r3, [r7, #1]
 8002100:	9300      	str	r3, [sp, #0]
 8002102:	4613      	mov	r3, r2
 8002104:	4622      	mov	r2, r4
 8002106:	f7ff fbce 	bl	80018a6 <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
 800210a:	88fa      	ldrh	r2, [r7, #6]
 800210c:	89fb      	ldrh	r3, [r7, #14]
 800210e:	4413      	add	r3, r2
 8002110:	b298      	uxth	r0, r3
 8002112:	88ba      	ldrh	r2, [r7, #4]
 8002114:	8a3b      	ldrh	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	b299      	uxth	r1, r3
 800211a:	88fa      	ldrh	r2, [r7, #6]
 800211c:	89fb      	ldrh	r3, [r7, #14]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	b29c      	uxth	r4, r3
 8002122:	88ba      	ldrh	r2, [r7, #4]
 8002124:	8a3b      	ldrh	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	b29a      	uxth	r2, r3
 800212a:	787b      	ldrb	r3, [r7, #1]
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	4613      	mov	r3, r2
 8002130:	4622      	mov	r2, r4
 8002132:	f7ff fbb8 	bl	80018a6 <SSD1306_DrawLine>
    while (x < y) {
 8002136:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800213a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800213e:	429a      	cmp	r2, r3
 8002140:	f6ff af7f 	blt.w	8002042 <SSD1306_DrawFilledCircle+0xaa>
    }
}
 8002144:	bf00      	nop
 8002146:	bf00      	nop
 8002148:	371c      	adds	r7, #28
 800214a:	46bd      	mov	sp, r7
 800214c:	bd90      	pop	{r4, r7, pc}
	...

08002150 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002156:	4b07      	ldr	r3, [pc, #28]	; (8002174 <ssd1306_I2C_Init+0x24>)
 8002158:	607b      	str	r3, [r7, #4]
	while(p>0)
 800215a:	e002      	b.n	8002162 <ssd1306_I2C_Init+0x12>
		p--;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3b01      	subs	r3, #1
 8002160:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1f9      	bne.n	800215c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002168:	bf00      	nop
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr
 8002174:	0003d090 	.word	0x0003d090

08002178 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002178:	b590      	push	{r4, r7, lr}
 800217a:	b0c7      	sub	sp, #284	; 0x11c
 800217c:	af02      	add	r7, sp, #8
 800217e:	4604      	mov	r4, r0
 8002180:	4608      	mov	r0, r1
 8002182:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002186:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800218a:	600a      	str	r2, [r1, #0]
 800218c:	4619      	mov	r1, r3
 800218e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002192:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002196:	4622      	mov	r2, r4
 8002198:	701a      	strb	r2, [r3, #0]
 800219a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800219e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80021a2:	4602      	mov	r2, r0
 80021a4:	701a      	strb	r2, [r3, #0]
 80021a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80021aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80021ae:	460a      	mov	r2, r1
 80021b0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80021b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80021b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80021ba:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80021be:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80021c2:	7812      	ldrb	r2, [r2, #0]
 80021c4:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80021c6:	2300      	movs	r3, #0
 80021c8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80021cc:	e015      	b.n	80021fa <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80021ce:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80021d2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80021d6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80021da:	6812      	ldr	r2, [r2, #0]
 80021dc:	441a      	add	r2, r3
 80021de:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80021e2:	3301      	adds	r3, #1
 80021e4:	7811      	ldrb	r1, [r2, #0]
 80021e6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80021ea:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80021ee:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80021f0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80021f4:	3301      	adds	r3, #1
 80021f6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80021fa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80021fe:	b29b      	uxth	r3, r3
 8002200:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002204:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002208:	8812      	ldrh	r2, [r2, #0]
 800220a:	429a      	cmp	r2, r3
 800220c:	d8df      	bhi.n	80021ce <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800220e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002212:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	b299      	uxth	r1, r3
 800221a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800221e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	3301      	adds	r3, #1
 8002226:	b29b      	uxth	r3, r3
 8002228:	f107 020c 	add.w	r2, r7, #12
 800222c:	200a      	movs	r0, #10
 800222e:	9000      	str	r0, [sp, #0]
 8002230:	4803      	ldr	r0, [pc, #12]	; (8002240 <ssd1306_I2C_WriteMulti+0xc8>)
 8002232:	f000 fea1 	bl	8002f78 <HAL_I2C_Master_Transmit>
}
 8002236:	bf00      	nop
 8002238:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800223c:	46bd      	mov	sp, r7
 800223e:	bd90      	pop	{r4, r7, pc}
 8002240:	2000020c 	.word	0x2000020c

08002244 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af02      	add	r7, sp, #8
 800224a:	4603      	mov	r3, r0
 800224c:	71fb      	strb	r3, [r7, #7]
 800224e:	460b      	mov	r3, r1
 8002250:	71bb      	strb	r3, [r7, #6]
 8002252:	4613      	mov	r3, r2
 8002254:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002256:	79bb      	ldrb	r3, [r7, #6]
 8002258:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800225a:	797b      	ldrb	r3, [r7, #5]
 800225c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800225e:	79fb      	ldrb	r3, [r7, #7]
 8002260:	b299      	uxth	r1, r3
 8002262:	f107 020c 	add.w	r2, r7, #12
 8002266:	230a      	movs	r3, #10
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	2302      	movs	r3, #2
 800226c:	4803      	ldr	r0, [pc, #12]	; (800227c <ssd1306_I2C_Write+0x38>)
 800226e:	f000 fe83 	bl	8002f78 <HAL_I2C_Master_Transmit>
}
 8002272:	bf00      	nop
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	2000020c 	.word	0x2000020c

08002280 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002286:	4b0e      	ldr	r3, [pc, #56]	; (80022c0 <HAL_MspInit+0x40>)
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	4a0d      	ldr	r2, [pc, #52]	; (80022c0 <HAL_MspInit+0x40>)
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	6193      	str	r3, [r2, #24]
 8002292:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <HAL_MspInit+0x40>)
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	607b      	str	r3, [r7, #4]
 800229c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800229e:	4b08      	ldr	r3, [pc, #32]	; (80022c0 <HAL_MspInit+0x40>)
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	4a07      	ldr	r2, [pc, #28]	; (80022c0 <HAL_MspInit+0x40>)
 80022a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a8:	61d3      	str	r3, [r2, #28]
 80022aa:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <HAL_MspInit+0x40>)
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b2:	603b      	str	r3, [r7, #0]
 80022b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr
 80022c0:	40021000 	.word	0x40021000

080022c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b088      	sub	sp, #32
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022cc:	f107 0310 	add.w	r3, r7, #16
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	605a      	str	r2, [r3, #4]
 80022d6:	609a      	str	r2, [r3, #8]
 80022d8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a15      	ldr	r2, [pc, #84]	; (8002334 <HAL_I2C_MspInit+0x70>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d123      	bne.n	800232c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e4:	4b14      	ldr	r3, [pc, #80]	; (8002338 <HAL_I2C_MspInit+0x74>)
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	4a13      	ldr	r2, [pc, #76]	; (8002338 <HAL_I2C_MspInit+0x74>)
 80022ea:	f043 0308 	orr.w	r3, r3, #8
 80022ee:	6193      	str	r3, [r2, #24]
 80022f0:	4b11      	ldr	r3, [pc, #68]	; (8002338 <HAL_I2C_MspInit+0x74>)
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	f003 0308 	and.w	r3, r3, #8
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022fc:	23c0      	movs	r3, #192	; 0xc0
 80022fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002300:	2312      	movs	r3, #18
 8002302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002304:	2303      	movs	r3, #3
 8002306:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002308:	f107 0310 	add.w	r3, r7, #16
 800230c:	4619      	mov	r1, r3
 800230e:	480b      	ldr	r0, [pc, #44]	; (800233c <HAL_I2C_MspInit+0x78>)
 8002310:	f000 fb10 	bl	8002934 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002314:	4b08      	ldr	r3, [pc, #32]	; (8002338 <HAL_I2C_MspInit+0x74>)
 8002316:	69db      	ldr	r3, [r3, #28]
 8002318:	4a07      	ldr	r2, [pc, #28]	; (8002338 <HAL_I2C_MspInit+0x74>)
 800231a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800231e:	61d3      	str	r3, [r2, #28]
 8002320:	4b05      	ldr	r3, [pc, #20]	; (8002338 <HAL_I2C_MspInit+0x74>)
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800232c:	bf00      	nop
 800232e:	3720      	adds	r7, #32
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40005400 	.word	0x40005400
 8002338:	40021000 	.word	0x40021000
 800233c:	40010c00 	.word	0x40010c00

08002340 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a19      	ldr	r2, [pc, #100]	; (80023b4 <HAL_TIM_Base_MspInit+0x74>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d12b      	bne.n	80023aa <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002352:	4b19      	ldr	r3, [pc, #100]	; (80023b8 <HAL_TIM_Base_MspInit+0x78>)
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	4a18      	ldr	r2, [pc, #96]	; (80023b8 <HAL_TIM_Base_MspInit+0x78>)
 8002358:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800235c:	6193      	str	r3, [r2, #24]
 800235e:	4b16      	ldr	r3, [pc, #88]	; (80023b8 <HAL_TIM_Base_MspInit+0x78>)
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 800236a:	2200      	movs	r2, #0
 800236c:	2100      	movs	r1, #0
 800236e:	2018      	movs	r0, #24
 8002370:	f000 faa9 	bl	80028c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002374:	2018      	movs	r0, #24
 8002376:	f000 fac2 	bl	80028fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800237a:	2200      	movs	r2, #0
 800237c:	2100      	movs	r1, #0
 800237e:	2019      	movs	r0, #25
 8002380:	f000 faa1 	bl	80028c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002384:	2019      	movs	r0, #25
 8002386:	f000 faba 	bl	80028fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 800238a:	2200      	movs	r2, #0
 800238c:	2100      	movs	r1, #0
 800238e:	201a      	movs	r0, #26
 8002390:	f000 fa99 	bl	80028c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002394:	201a      	movs	r0, #26
 8002396:	f000 fab2 	bl	80028fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800239a:	2200      	movs	r2, #0
 800239c:	2100      	movs	r1, #0
 800239e:	201b      	movs	r0, #27
 80023a0:	f000 fa91 	bl	80028c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80023a4:	201b      	movs	r0, #27
 80023a6:	f000 faaa 	bl	80028fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80023aa:	bf00      	nop
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40012c00 	.word	0x40012c00
 80023b8:	40021000 	.word	0x40021000

080023bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023c0:	e7fe      	b.n	80023c0 <NMI_Handler+0x4>

080023c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023c2:	b480      	push	{r7}
 80023c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023c6:	e7fe      	b.n	80023c6 <HardFault_Handler+0x4>

080023c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023cc:	e7fe      	b.n	80023cc <MemManage_Handler+0x4>

080023ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023ce:	b480      	push	{r7}
 80023d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023d2:	e7fe      	b.n	80023d2 <BusFault_Handler+0x4>

080023d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023d8:	e7fe      	b.n	80023d8 <UsageFault_Handler+0x4>

080023da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023da:	b480      	push	{r7}
 80023dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bc80      	pop	{r7}
 80023e4:	4770      	bx	lr

080023e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023e6:	b480      	push	{r7}
 80023e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bc80      	pop	{r7}
 80023f0:	4770      	bx	lr

080023f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023f2:	b480      	push	{r7}
 80023f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023f6:	bf00      	nop
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr

080023fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002402:	f000 f96d 	bl	80026e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}
	...

0800240c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002410:	4802      	ldr	r0, [pc, #8]	; (800241c <TIM1_BRK_IRQHandler+0x10>)
 8002412:	f001 fe82 	bl	800411a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	20000260 	.word	0x20000260

08002420 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002424:	4802      	ldr	r0, [pc, #8]	; (8002430 <TIM1_UP_IRQHandler+0x10>)
 8002426:	f001 fe78 	bl	800411a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	20000260 	.word	0x20000260

08002434 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002438:	4802      	ldr	r0, [pc, #8]	; (8002444 <TIM1_TRG_COM_IRQHandler+0x10>)
 800243a:	f001 fe6e 	bl	800411a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20000260 	.word	0x20000260

08002448 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800244c:	4802      	ldr	r0, [pc, #8]	; (8002458 <TIM1_CC_IRQHandler+0x10>)
 800244e:	f001 fe64 	bl	800411a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	20000260 	.word	0x20000260

0800245c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DOWN_Pin);
 8002460:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002464:	f000 fc2c 	bl	8002cc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(UP_Pin);
 8002468:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800246c:	f000 fc28 	bl	8002cc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OK_Pin);
 8002470:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002474:	f000 fc24 	bl	8002cc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002478:	bf00      	nop
 800247a:	bd80      	pop	{r7, pc}

0800247c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  return 1;
 8002480:	2301      	movs	r3, #1
}
 8002482:	4618      	mov	r0, r3
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr

0800248a <_kill>:

int _kill(int pid, int sig)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b082      	sub	sp, #8
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
 8002492:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002494:	f003 f9b0 	bl	80057f8 <__errno>
 8002498:	4603      	mov	r3, r0
 800249a:	2216      	movs	r2, #22
 800249c:	601a      	str	r2, [r3, #0]
  return -1;
 800249e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <_exit>:

void _exit (int status)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024b2:	f04f 31ff 	mov.w	r1, #4294967295
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7ff ffe7 	bl	800248a <_kill>
  while (1) {}    /* Make sure we hang here */
 80024bc:	e7fe      	b.n	80024bc <_exit+0x12>

080024be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b086      	sub	sp, #24
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	60f8      	str	r0, [r7, #12]
 80024c6:	60b9      	str	r1, [r7, #8]
 80024c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ca:	2300      	movs	r3, #0
 80024cc:	617b      	str	r3, [r7, #20]
 80024ce:	e00a      	b.n	80024e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024d0:	f3af 8000 	nop.w
 80024d4:	4601      	mov	r1, r0
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	1c5a      	adds	r2, r3, #1
 80024da:	60ba      	str	r2, [r7, #8]
 80024dc:	b2ca      	uxtb	r2, r1
 80024de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	3301      	adds	r3, #1
 80024e4:	617b      	str	r3, [r7, #20]
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	dbf0      	blt.n	80024d0 <_read+0x12>
  }

  return len;
 80024ee:	687b      	ldr	r3, [r7, #4]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002504:	2300      	movs	r3, #0
 8002506:	617b      	str	r3, [r7, #20]
 8002508:	e009      	b.n	800251e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	1c5a      	adds	r2, r3, #1
 800250e:	60ba      	str	r2, [r7, #8]
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	3301      	adds	r3, #1
 800251c:	617b      	str	r3, [r7, #20]
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	429a      	cmp	r2, r3
 8002524:	dbf1      	blt.n	800250a <_write+0x12>
  }
  return len;
 8002526:	687b      	ldr	r3, [r7, #4]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3718      	adds	r7, #24
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <_close>:

int _close(int file)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002538:	f04f 33ff 	mov.w	r3, #4294967295
}
 800253c:	4618      	mov	r0, r3
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr

08002546 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
 800254e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002556:	605a      	str	r2, [r3, #4]
  return 0;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr

08002564 <_isatty>:

int _isatty(int file)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800256c:	2301      	movs	r3, #1
}
 800256e:	4618      	mov	r0, r3
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr

08002578 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr

08002590 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002598:	4a14      	ldr	r2, [pc, #80]	; (80025ec <_sbrk+0x5c>)
 800259a:	4b15      	ldr	r3, [pc, #84]	; (80025f0 <_sbrk+0x60>)
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025a4:	4b13      	ldr	r3, [pc, #76]	; (80025f4 <_sbrk+0x64>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d102      	bne.n	80025b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025ac:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <_sbrk+0x64>)
 80025ae:	4a12      	ldr	r2, [pc, #72]	; (80025f8 <_sbrk+0x68>)
 80025b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025b2:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <_sbrk+0x64>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4413      	add	r3, r2
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d207      	bcs.n	80025d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025c0:	f003 f91a 	bl	80057f8 <__errno>
 80025c4:	4603      	mov	r3, r0
 80025c6:	220c      	movs	r2, #12
 80025c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025ca:	f04f 33ff 	mov.w	r3, #4294967295
 80025ce:	e009      	b.n	80025e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025d0:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <_sbrk+0x64>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025d6:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <_sbrk+0x64>)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4413      	add	r3, r2
 80025de:	4a05      	ldr	r2, [pc, #20]	; (80025f4 <_sbrk+0x64>)
 80025e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025e2:	68fb      	ldr	r3, [r7, #12]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	20010000 	.word	0x20010000
 80025f0:	00000400 	.word	0x00000400
 80025f4:	2000070c 	.word	0x2000070c
 80025f8:	20000860 	.word	0x20000860

080025fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr

08002608 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002608:	f7ff fff8 	bl	80025fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800260c:	480b      	ldr	r0, [pc, #44]	; (800263c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800260e:	490c      	ldr	r1, [pc, #48]	; (8002640 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002610:	4a0c      	ldr	r2, [pc, #48]	; (8002644 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002614:	e002      	b.n	800261c <LoopCopyDataInit>

08002616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800261a:	3304      	adds	r3, #4

0800261c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800261c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800261e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002620:	d3f9      	bcc.n	8002616 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002622:	4a09      	ldr	r2, [pc, #36]	; (8002648 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002624:	4c09      	ldr	r4, [pc, #36]	; (800264c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002628:	e001      	b.n	800262e <LoopFillZerobss>

0800262a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800262a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800262c:	3204      	adds	r2, #4

0800262e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800262e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002630:	d3fb      	bcc.n	800262a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002632:	f003 f8e7 	bl	8005804 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002636:	f7fe fb3b 	bl	8000cb0 <main>
  bx lr
 800263a:	4770      	bx	lr
  ldr r0, =_sdata
 800263c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002640:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002644:	08009bb8 	.word	0x08009bb8
  ldr r2, =_sbss
 8002648:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 800264c:	20000860 	.word	0x20000860

08002650 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002650:	e7fe      	b.n	8002650 <ADC1_2_IRQHandler>
	...

08002654 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002658:	4b08      	ldr	r3, [pc, #32]	; (800267c <HAL_Init+0x28>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a07      	ldr	r2, [pc, #28]	; (800267c <HAL_Init+0x28>)
 800265e:	f043 0310 	orr.w	r3, r3, #16
 8002662:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002664:	2003      	movs	r0, #3
 8002666:	f000 f923 	bl	80028b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800266a:	200f      	movs	r0, #15
 800266c:	f000 f808 	bl	8002680 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002670:	f7ff fe06 	bl	8002280 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40022000 	.word	0x40022000

08002680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002688:	4b12      	ldr	r3, [pc, #72]	; (80026d4 <HAL_InitTick+0x54>)
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	4b12      	ldr	r3, [pc, #72]	; (80026d8 <HAL_InitTick+0x58>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	4619      	mov	r1, r3
 8002692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002696:	fbb3 f3f1 	udiv	r3, r3, r1
 800269a:	fbb2 f3f3 	udiv	r3, r2, r3
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 f93b 	bl	800291a <HAL_SYSTICK_Config>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e00e      	b.n	80026cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b0f      	cmp	r3, #15
 80026b2:	d80a      	bhi.n	80026ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026b4:	2200      	movs	r2, #0
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	f04f 30ff 	mov.w	r0, #4294967295
 80026bc:	f000 f903 	bl	80028c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026c0:	4a06      	ldr	r2, [pc, #24]	; (80026dc <HAL_InitTick+0x5c>)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
 80026c8:	e000      	b.n	80026cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	2000001c 	.word	0x2000001c
 80026d8:	20000024 	.word	0x20000024
 80026dc:	20000020 	.word	0x20000020

080026e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026e4:	4b05      	ldr	r3, [pc, #20]	; (80026fc <HAL_IncTick+0x1c>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	461a      	mov	r2, r3
 80026ea:	4b05      	ldr	r3, [pc, #20]	; (8002700 <HAL_IncTick+0x20>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4413      	add	r3, r2
 80026f0:	4a03      	ldr	r2, [pc, #12]	; (8002700 <HAL_IncTick+0x20>)
 80026f2:	6013      	str	r3, [r2, #0]
}
 80026f4:	bf00      	nop
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bc80      	pop	{r7}
 80026fa:	4770      	bx	lr
 80026fc:	20000024 	.word	0x20000024
 8002700:	20000710 	.word	0x20000710

08002704 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  return uwTick;
 8002708:	4b02      	ldr	r3, [pc, #8]	; (8002714 <HAL_GetTick+0x10>)
 800270a:	681b      	ldr	r3, [r3, #0]
}
 800270c:	4618      	mov	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr
 8002714:	20000710 	.word	0x20000710

08002718 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002728:	4b0c      	ldr	r3, [pc, #48]	; (800275c <__NVIC_SetPriorityGrouping+0x44>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002734:	4013      	ands	r3, r2
 8002736:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002740:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002748:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800274a:	4a04      	ldr	r2, [pc, #16]	; (800275c <__NVIC_SetPriorityGrouping+0x44>)
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	60d3      	str	r3, [r2, #12]
}
 8002750:	bf00      	nop
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	e000ed00 	.word	0xe000ed00

08002760 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002764:	4b04      	ldr	r3, [pc, #16]	; (8002778 <__NVIC_GetPriorityGrouping+0x18>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	0a1b      	lsrs	r3, r3, #8
 800276a:	f003 0307 	and.w	r3, r3, #7
}
 800276e:	4618      	mov	r0, r3
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	e000ed00 	.word	0xe000ed00

0800277c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278a:	2b00      	cmp	r3, #0
 800278c:	db0b      	blt.n	80027a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800278e:	79fb      	ldrb	r3, [r7, #7]
 8002790:	f003 021f 	and.w	r2, r3, #31
 8002794:	4906      	ldr	r1, [pc, #24]	; (80027b0 <__NVIC_EnableIRQ+0x34>)
 8002796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279a:	095b      	lsrs	r3, r3, #5
 800279c:	2001      	movs	r0, #1
 800279e:	fa00 f202 	lsl.w	r2, r0, r2
 80027a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr
 80027b0:	e000e100 	.word	0xe000e100

080027b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	6039      	str	r1, [r7, #0]
 80027be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	db0a      	blt.n	80027de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	490c      	ldr	r1, [pc, #48]	; (8002800 <__NVIC_SetPriority+0x4c>)
 80027ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d2:	0112      	lsls	r2, r2, #4
 80027d4:	b2d2      	uxtb	r2, r2
 80027d6:	440b      	add	r3, r1
 80027d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027dc:	e00a      	b.n	80027f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	4908      	ldr	r1, [pc, #32]	; (8002804 <__NVIC_SetPriority+0x50>)
 80027e4:	79fb      	ldrb	r3, [r7, #7]
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	3b04      	subs	r3, #4
 80027ec:	0112      	lsls	r2, r2, #4
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	440b      	add	r3, r1
 80027f2:	761a      	strb	r2, [r3, #24]
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bc80      	pop	{r7}
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	e000e100 	.word	0xe000e100
 8002804:	e000ed00 	.word	0xe000ed00

08002808 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002808:	b480      	push	{r7}
 800280a:	b089      	sub	sp, #36	; 0x24
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	f1c3 0307 	rsb	r3, r3, #7
 8002822:	2b04      	cmp	r3, #4
 8002824:	bf28      	it	cs
 8002826:	2304      	movcs	r3, #4
 8002828:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	3304      	adds	r3, #4
 800282e:	2b06      	cmp	r3, #6
 8002830:	d902      	bls.n	8002838 <NVIC_EncodePriority+0x30>
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	3b03      	subs	r3, #3
 8002836:	e000      	b.n	800283a <NVIC_EncodePriority+0x32>
 8002838:	2300      	movs	r3, #0
 800283a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800283c:	f04f 32ff 	mov.w	r2, #4294967295
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43da      	mvns	r2, r3
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	401a      	ands	r2, r3
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002850:	f04f 31ff 	mov.w	r1, #4294967295
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	fa01 f303 	lsl.w	r3, r1, r3
 800285a:	43d9      	mvns	r1, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002860:	4313      	orrs	r3, r2
         );
}
 8002862:	4618      	mov	r0, r3
 8002864:	3724      	adds	r7, #36	; 0x24
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr

0800286c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3b01      	subs	r3, #1
 8002878:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800287c:	d301      	bcc.n	8002882 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800287e:	2301      	movs	r3, #1
 8002880:	e00f      	b.n	80028a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002882:	4a0a      	ldr	r2, [pc, #40]	; (80028ac <SysTick_Config+0x40>)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3b01      	subs	r3, #1
 8002888:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800288a:	210f      	movs	r1, #15
 800288c:	f04f 30ff 	mov.w	r0, #4294967295
 8002890:	f7ff ff90 	bl	80027b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002894:	4b05      	ldr	r3, [pc, #20]	; (80028ac <SysTick_Config+0x40>)
 8002896:	2200      	movs	r2, #0
 8002898:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800289a:	4b04      	ldr	r3, [pc, #16]	; (80028ac <SysTick_Config+0x40>)
 800289c:	2207      	movs	r2, #7
 800289e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	e000e010 	.word	0xe000e010

080028b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff ff2d 	bl	8002718 <__NVIC_SetPriorityGrouping>
}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b086      	sub	sp, #24
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	4603      	mov	r3, r0
 80028ce:	60b9      	str	r1, [r7, #8]
 80028d0:	607a      	str	r2, [r7, #4]
 80028d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028d8:	f7ff ff42 	bl	8002760 <__NVIC_GetPriorityGrouping>
 80028dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	68b9      	ldr	r1, [r7, #8]
 80028e2:	6978      	ldr	r0, [r7, #20]
 80028e4:	f7ff ff90 	bl	8002808 <NVIC_EncodePriority>
 80028e8:	4602      	mov	r2, r0
 80028ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ee:	4611      	mov	r1, r2
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff ff5f 	bl	80027b4 <__NVIC_SetPriority>
}
 80028f6:	bf00      	nop
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b082      	sub	sp, #8
 8002902:	af00      	add	r7, sp, #0
 8002904:	4603      	mov	r3, r0
 8002906:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff ff35 	bl	800277c <__NVIC_EnableIRQ>
}
 8002912:	bf00      	nop
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b082      	sub	sp, #8
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7ff ffa2 	bl	800286c <SysTick_Config>
 8002928:	4603      	mov	r3, r0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
	...

08002934 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002934:	b480      	push	{r7}
 8002936:	b08b      	sub	sp, #44	; 0x2c
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800293e:	2300      	movs	r3, #0
 8002940:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002942:	2300      	movs	r3, #0
 8002944:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002946:	e179      	b.n	8002c3c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002948:	2201      	movs	r2, #1
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	69fa      	ldr	r2, [r7, #28]
 8002958:	4013      	ands	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	429a      	cmp	r2, r3
 8002962:	f040 8168 	bne.w	8002c36 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	4a96      	ldr	r2, [pc, #600]	; (8002bc4 <HAL_GPIO_Init+0x290>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d05e      	beq.n	8002a2e <HAL_GPIO_Init+0xfa>
 8002970:	4a94      	ldr	r2, [pc, #592]	; (8002bc4 <HAL_GPIO_Init+0x290>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d875      	bhi.n	8002a62 <HAL_GPIO_Init+0x12e>
 8002976:	4a94      	ldr	r2, [pc, #592]	; (8002bc8 <HAL_GPIO_Init+0x294>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d058      	beq.n	8002a2e <HAL_GPIO_Init+0xfa>
 800297c:	4a92      	ldr	r2, [pc, #584]	; (8002bc8 <HAL_GPIO_Init+0x294>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d86f      	bhi.n	8002a62 <HAL_GPIO_Init+0x12e>
 8002982:	4a92      	ldr	r2, [pc, #584]	; (8002bcc <HAL_GPIO_Init+0x298>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d052      	beq.n	8002a2e <HAL_GPIO_Init+0xfa>
 8002988:	4a90      	ldr	r2, [pc, #576]	; (8002bcc <HAL_GPIO_Init+0x298>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d869      	bhi.n	8002a62 <HAL_GPIO_Init+0x12e>
 800298e:	4a90      	ldr	r2, [pc, #576]	; (8002bd0 <HAL_GPIO_Init+0x29c>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d04c      	beq.n	8002a2e <HAL_GPIO_Init+0xfa>
 8002994:	4a8e      	ldr	r2, [pc, #568]	; (8002bd0 <HAL_GPIO_Init+0x29c>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d863      	bhi.n	8002a62 <HAL_GPIO_Init+0x12e>
 800299a:	4a8e      	ldr	r2, [pc, #568]	; (8002bd4 <HAL_GPIO_Init+0x2a0>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d046      	beq.n	8002a2e <HAL_GPIO_Init+0xfa>
 80029a0:	4a8c      	ldr	r2, [pc, #560]	; (8002bd4 <HAL_GPIO_Init+0x2a0>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d85d      	bhi.n	8002a62 <HAL_GPIO_Init+0x12e>
 80029a6:	2b12      	cmp	r3, #18
 80029a8:	d82a      	bhi.n	8002a00 <HAL_GPIO_Init+0xcc>
 80029aa:	2b12      	cmp	r3, #18
 80029ac:	d859      	bhi.n	8002a62 <HAL_GPIO_Init+0x12e>
 80029ae:	a201      	add	r2, pc, #4	; (adr r2, 80029b4 <HAL_GPIO_Init+0x80>)
 80029b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b4:	08002a2f 	.word	0x08002a2f
 80029b8:	08002a09 	.word	0x08002a09
 80029bc:	08002a1b 	.word	0x08002a1b
 80029c0:	08002a5d 	.word	0x08002a5d
 80029c4:	08002a63 	.word	0x08002a63
 80029c8:	08002a63 	.word	0x08002a63
 80029cc:	08002a63 	.word	0x08002a63
 80029d0:	08002a63 	.word	0x08002a63
 80029d4:	08002a63 	.word	0x08002a63
 80029d8:	08002a63 	.word	0x08002a63
 80029dc:	08002a63 	.word	0x08002a63
 80029e0:	08002a63 	.word	0x08002a63
 80029e4:	08002a63 	.word	0x08002a63
 80029e8:	08002a63 	.word	0x08002a63
 80029ec:	08002a63 	.word	0x08002a63
 80029f0:	08002a63 	.word	0x08002a63
 80029f4:	08002a63 	.word	0x08002a63
 80029f8:	08002a11 	.word	0x08002a11
 80029fc:	08002a25 	.word	0x08002a25
 8002a00:	4a75      	ldr	r2, [pc, #468]	; (8002bd8 <HAL_GPIO_Init+0x2a4>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d013      	beq.n	8002a2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a06:	e02c      	b.n	8002a62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	623b      	str	r3, [r7, #32]
          break;
 8002a0e:	e029      	b.n	8002a64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	3304      	adds	r3, #4
 8002a16:	623b      	str	r3, [r7, #32]
          break;
 8002a18:	e024      	b.n	8002a64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	3308      	adds	r3, #8
 8002a20:	623b      	str	r3, [r7, #32]
          break;
 8002a22:	e01f      	b.n	8002a64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	330c      	adds	r3, #12
 8002a2a:	623b      	str	r3, [r7, #32]
          break;
 8002a2c:	e01a      	b.n	8002a64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d102      	bne.n	8002a3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a36:	2304      	movs	r3, #4
 8002a38:	623b      	str	r3, [r7, #32]
          break;
 8002a3a:	e013      	b.n	8002a64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d105      	bne.n	8002a50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a44:	2308      	movs	r3, #8
 8002a46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	69fa      	ldr	r2, [r7, #28]
 8002a4c:	611a      	str	r2, [r3, #16]
          break;
 8002a4e:	e009      	b.n	8002a64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a50:	2308      	movs	r3, #8
 8002a52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	69fa      	ldr	r2, [r7, #28]
 8002a58:	615a      	str	r2, [r3, #20]
          break;
 8002a5a:	e003      	b.n	8002a64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	623b      	str	r3, [r7, #32]
          break;
 8002a60:	e000      	b.n	8002a64 <HAL_GPIO_Init+0x130>
          break;
 8002a62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	2bff      	cmp	r3, #255	; 0xff
 8002a68:	d801      	bhi.n	8002a6e <HAL_GPIO_Init+0x13a>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	e001      	b.n	8002a72 <HAL_GPIO_Init+0x13e>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	3304      	adds	r3, #4
 8002a72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	2bff      	cmp	r3, #255	; 0xff
 8002a78:	d802      	bhi.n	8002a80 <HAL_GPIO_Init+0x14c>
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	e002      	b.n	8002a86 <HAL_GPIO_Init+0x152>
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a82:	3b08      	subs	r3, #8
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	210f      	movs	r1, #15
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	fa01 f303 	lsl.w	r3, r1, r3
 8002a94:	43db      	mvns	r3, r3
 8002a96:	401a      	ands	r2, r3
 8002a98:	6a39      	ldr	r1, [r7, #32]
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f000 80c1 	beq.w	8002c36 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ab4:	4b49      	ldr	r3, [pc, #292]	; (8002bdc <HAL_GPIO_Init+0x2a8>)
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	4a48      	ldr	r2, [pc, #288]	; (8002bdc <HAL_GPIO_Init+0x2a8>)
 8002aba:	f043 0301 	orr.w	r3, r3, #1
 8002abe:	6193      	str	r3, [r2, #24]
 8002ac0:	4b46      	ldr	r3, [pc, #280]	; (8002bdc <HAL_GPIO_Init+0x2a8>)
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	60bb      	str	r3, [r7, #8]
 8002aca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002acc:	4a44      	ldr	r2, [pc, #272]	; (8002be0 <HAL_GPIO_Init+0x2ac>)
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	089b      	lsrs	r3, r3, #2
 8002ad2:	3302      	adds	r3, #2
 8002ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ad8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	f003 0303 	and.w	r3, r3, #3
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	220f      	movs	r2, #15
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	4013      	ands	r3, r2
 8002aee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a3c      	ldr	r2, [pc, #240]	; (8002be4 <HAL_GPIO_Init+0x2b0>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d01f      	beq.n	8002b38 <HAL_GPIO_Init+0x204>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a3b      	ldr	r2, [pc, #236]	; (8002be8 <HAL_GPIO_Init+0x2b4>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d019      	beq.n	8002b34 <HAL_GPIO_Init+0x200>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a3a      	ldr	r2, [pc, #232]	; (8002bec <HAL_GPIO_Init+0x2b8>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d013      	beq.n	8002b30 <HAL_GPIO_Init+0x1fc>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a39      	ldr	r2, [pc, #228]	; (8002bf0 <HAL_GPIO_Init+0x2bc>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d00d      	beq.n	8002b2c <HAL_GPIO_Init+0x1f8>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a38      	ldr	r2, [pc, #224]	; (8002bf4 <HAL_GPIO_Init+0x2c0>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d007      	beq.n	8002b28 <HAL_GPIO_Init+0x1f4>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a37      	ldr	r2, [pc, #220]	; (8002bf8 <HAL_GPIO_Init+0x2c4>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d101      	bne.n	8002b24 <HAL_GPIO_Init+0x1f0>
 8002b20:	2305      	movs	r3, #5
 8002b22:	e00a      	b.n	8002b3a <HAL_GPIO_Init+0x206>
 8002b24:	2306      	movs	r3, #6
 8002b26:	e008      	b.n	8002b3a <HAL_GPIO_Init+0x206>
 8002b28:	2304      	movs	r3, #4
 8002b2a:	e006      	b.n	8002b3a <HAL_GPIO_Init+0x206>
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e004      	b.n	8002b3a <HAL_GPIO_Init+0x206>
 8002b30:	2302      	movs	r3, #2
 8002b32:	e002      	b.n	8002b3a <HAL_GPIO_Init+0x206>
 8002b34:	2301      	movs	r3, #1
 8002b36:	e000      	b.n	8002b3a <HAL_GPIO_Init+0x206>
 8002b38:	2300      	movs	r3, #0
 8002b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b3c:	f002 0203 	and.w	r2, r2, #3
 8002b40:	0092      	lsls	r2, r2, #2
 8002b42:	4093      	lsls	r3, r2
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b4a:	4925      	ldr	r1, [pc, #148]	; (8002be0 <HAL_GPIO_Init+0x2ac>)
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	089b      	lsrs	r3, r3, #2
 8002b50:	3302      	adds	r3, #2
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d006      	beq.n	8002b72 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b64:	4b25      	ldr	r3, [pc, #148]	; (8002bfc <HAL_GPIO_Init+0x2c8>)
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	4924      	ldr	r1, [pc, #144]	; (8002bfc <HAL_GPIO_Init+0x2c8>)
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	608b      	str	r3, [r1, #8]
 8002b70:	e006      	b.n	8002b80 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b72:	4b22      	ldr	r3, [pc, #136]	; (8002bfc <HAL_GPIO_Init+0x2c8>)
 8002b74:	689a      	ldr	r2, [r3, #8]
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	4920      	ldr	r1, [pc, #128]	; (8002bfc <HAL_GPIO_Init+0x2c8>)
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d006      	beq.n	8002b9a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b8c:	4b1b      	ldr	r3, [pc, #108]	; (8002bfc <HAL_GPIO_Init+0x2c8>)
 8002b8e:	68da      	ldr	r2, [r3, #12]
 8002b90:	491a      	ldr	r1, [pc, #104]	; (8002bfc <HAL_GPIO_Init+0x2c8>)
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	60cb      	str	r3, [r1, #12]
 8002b98:	e006      	b.n	8002ba8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b9a:	4b18      	ldr	r3, [pc, #96]	; (8002bfc <HAL_GPIO_Init+0x2c8>)
 8002b9c:	68da      	ldr	r2, [r3, #12]
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	4916      	ldr	r1, [pc, #88]	; (8002bfc <HAL_GPIO_Init+0x2c8>)
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d025      	beq.n	8002c00 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002bb4:	4b11      	ldr	r3, [pc, #68]	; (8002bfc <HAL_GPIO_Init+0x2c8>)
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	4910      	ldr	r1, [pc, #64]	; (8002bfc <HAL_GPIO_Init+0x2c8>)
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	604b      	str	r3, [r1, #4]
 8002bc0:	e025      	b.n	8002c0e <HAL_GPIO_Init+0x2da>
 8002bc2:	bf00      	nop
 8002bc4:	10320000 	.word	0x10320000
 8002bc8:	10310000 	.word	0x10310000
 8002bcc:	10220000 	.word	0x10220000
 8002bd0:	10210000 	.word	0x10210000
 8002bd4:	10120000 	.word	0x10120000
 8002bd8:	10110000 	.word	0x10110000
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	40010000 	.word	0x40010000
 8002be4:	40010800 	.word	0x40010800
 8002be8:	40010c00 	.word	0x40010c00
 8002bec:	40011000 	.word	0x40011000
 8002bf0:	40011400 	.word	0x40011400
 8002bf4:	40011800 	.word	0x40011800
 8002bf8:	40011c00 	.word	0x40011c00
 8002bfc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c00:	4b15      	ldr	r3, [pc, #84]	; (8002c58 <HAL_GPIO_Init+0x324>)
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	43db      	mvns	r3, r3
 8002c08:	4913      	ldr	r1, [pc, #76]	; (8002c58 <HAL_GPIO_Init+0x324>)
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d006      	beq.n	8002c28 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c1a:	4b0f      	ldr	r3, [pc, #60]	; (8002c58 <HAL_GPIO_Init+0x324>)
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	490e      	ldr	r1, [pc, #56]	; (8002c58 <HAL_GPIO_Init+0x324>)
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	600b      	str	r3, [r1, #0]
 8002c26:	e006      	b.n	8002c36 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c28:	4b0b      	ldr	r3, [pc, #44]	; (8002c58 <HAL_GPIO_Init+0x324>)
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	4909      	ldr	r1, [pc, #36]	; (8002c58 <HAL_GPIO_Init+0x324>)
 8002c32:	4013      	ands	r3, r2
 8002c34:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	3301      	adds	r3, #1
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	fa22 f303 	lsr.w	r3, r2, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f47f ae7e 	bne.w	8002948 <HAL_GPIO_Init+0x14>
  }
}
 8002c4c:	bf00      	nop
 8002c4e:	bf00      	nop
 8002c50:	372c      	adds	r7, #44	; 0x2c
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr
 8002c58:	40010400 	.word	0x40010400

08002c5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	460b      	mov	r3, r1
 8002c66:	807b      	strh	r3, [r7, #2]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c6c:	787b      	ldrb	r3, [r7, #1]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c72:	887a      	ldrh	r2, [r7, #2]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c78:	e003      	b.n	8002c82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c7a:	887b      	ldrh	r3, [r7, #2]
 8002c7c:	041a      	lsls	r2, r3, #16
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	611a      	str	r2, [r3, #16]
}
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr

08002c8c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	460b      	mov	r3, r1
 8002c96:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c9e:	887a      	ldrh	r2, [r7, #2]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	041a      	lsls	r2, r3, #16
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	43d9      	mvns	r1, r3
 8002caa:	887b      	ldrh	r3, [r7, #2]
 8002cac:	400b      	ands	r3, r1
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	611a      	str	r2, [r3, #16]
}
 8002cb4:	bf00      	nop
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc80      	pop	{r7}
 8002cbc:	4770      	bx	lr
	...

08002cc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002cca:	4b08      	ldr	r3, [pc, #32]	; (8002cec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ccc:	695a      	ldr	r2, [r3, #20]
 8002cce:	88fb      	ldrh	r3, [r7, #6]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d006      	beq.n	8002ce4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002cd6:	4a05      	ldr	r2, [pc, #20]	; (8002cec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cd8:	88fb      	ldrh	r3, [r7, #6]
 8002cda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002cdc:	88fb      	ldrh	r3, [r7, #6]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fe fa8a 	bl	80011f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ce4:	bf00      	nop
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40010400 	.word	0x40010400

08002cf0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e12b      	b.n	8002f5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d106      	bne.n	8002d1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7ff fad4 	bl	80022c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2224      	movs	r2, #36	; 0x24
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0201 	bic.w	r2, r2, #1
 8002d32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d54:	f001 f960 	bl	8004018 <HAL_RCC_GetPCLK1Freq>
 8002d58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	4a81      	ldr	r2, [pc, #516]	; (8002f64 <HAL_I2C_Init+0x274>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d807      	bhi.n	8002d74 <HAL_I2C_Init+0x84>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4a80      	ldr	r2, [pc, #512]	; (8002f68 <HAL_I2C_Init+0x278>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	bf94      	ite	ls
 8002d6c:	2301      	movls	r3, #1
 8002d6e:	2300      	movhi	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	e006      	b.n	8002d82 <HAL_I2C_Init+0x92>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	4a7d      	ldr	r2, [pc, #500]	; (8002f6c <HAL_I2C_Init+0x27c>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	bf94      	ite	ls
 8002d7c:	2301      	movls	r3, #1
 8002d7e:	2300      	movhi	r3, #0
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e0e7      	b.n	8002f5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	4a78      	ldr	r2, [pc, #480]	; (8002f70 <HAL_I2C_Init+0x280>)
 8002d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d92:	0c9b      	lsrs	r3, r3, #18
 8002d94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68ba      	ldr	r2, [r7, #8]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	4a6a      	ldr	r2, [pc, #424]	; (8002f64 <HAL_I2C_Init+0x274>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d802      	bhi.n	8002dc4 <HAL_I2C_Init+0xd4>
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	e009      	b.n	8002dd8 <HAL_I2C_Init+0xe8>
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002dca:	fb02 f303 	mul.w	r3, r2, r3
 8002dce:	4a69      	ldr	r2, [pc, #420]	; (8002f74 <HAL_I2C_Init+0x284>)
 8002dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd4:	099b      	lsrs	r3, r3, #6
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6812      	ldr	r2, [r2, #0]
 8002ddc:	430b      	orrs	r3, r1
 8002dde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002dea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	495c      	ldr	r1, [pc, #368]	; (8002f64 <HAL_I2C_Init+0x274>)
 8002df4:	428b      	cmp	r3, r1
 8002df6:	d819      	bhi.n	8002e2c <HAL_I2C_Init+0x13c>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	1e59      	subs	r1, r3, #1
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e06:	1c59      	adds	r1, r3, #1
 8002e08:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e0c:	400b      	ands	r3, r1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00a      	beq.n	8002e28 <HAL_I2C_Init+0x138>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	1e59      	subs	r1, r3, #1
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e20:	3301      	adds	r3, #1
 8002e22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e26:	e051      	b.n	8002ecc <HAL_I2C_Init+0x1dc>
 8002e28:	2304      	movs	r3, #4
 8002e2a:	e04f      	b.n	8002ecc <HAL_I2C_Init+0x1dc>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d111      	bne.n	8002e58 <HAL_I2C_Init+0x168>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	1e58      	subs	r0, r3, #1
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6859      	ldr	r1, [r3, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	440b      	add	r3, r1
 8002e42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e46:	3301      	adds	r3, #1
 8002e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	bf0c      	ite	eq
 8002e50:	2301      	moveq	r3, #1
 8002e52:	2300      	movne	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	e012      	b.n	8002e7e <HAL_I2C_Init+0x18e>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	1e58      	subs	r0, r3, #1
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6859      	ldr	r1, [r3, #4]
 8002e60:	460b      	mov	r3, r1
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	440b      	add	r3, r1
 8002e66:	0099      	lsls	r1, r3, #2
 8002e68:	440b      	add	r3, r1
 8002e6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e6e:	3301      	adds	r3, #1
 8002e70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	bf0c      	ite	eq
 8002e78:	2301      	moveq	r3, #1
 8002e7a:	2300      	movne	r3, #0
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <HAL_I2C_Init+0x196>
 8002e82:	2301      	movs	r3, #1
 8002e84:	e022      	b.n	8002ecc <HAL_I2C_Init+0x1dc>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10e      	bne.n	8002eac <HAL_I2C_Init+0x1bc>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	1e58      	subs	r0, r3, #1
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6859      	ldr	r1, [r3, #4]
 8002e96:	460b      	mov	r3, r1
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	440b      	add	r3, r1
 8002e9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eaa:	e00f      	b.n	8002ecc <HAL_I2C_Init+0x1dc>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	1e58      	subs	r0, r3, #1
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6859      	ldr	r1, [r3, #4]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	440b      	add	r3, r1
 8002eba:	0099      	lsls	r1, r3, #2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	6809      	ldr	r1, [r1, #0]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69da      	ldr	r2, [r3, #28]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002efa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6911      	ldr	r1, [r2, #16]
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	68d2      	ldr	r2, [r2, #12]
 8002f06:	4311      	orrs	r1, r2
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	6812      	ldr	r2, [r2, #0]
 8002f0c:	430b      	orrs	r3, r1
 8002f0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	695a      	ldr	r2, [r3, #20]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	431a      	orrs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 0201 	orr.w	r2, r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2220      	movs	r2, #32
 8002f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	000186a0 	.word	0x000186a0
 8002f68:	001e847f 	.word	0x001e847f
 8002f6c:	003d08ff 	.word	0x003d08ff
 8002f70:	431bde83 	.word	0x431bde83
 8002f74:	10624dd3 	.word	0x10624dd3

08002f78 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b088      	sub	sp, #32
 8002f7c:	af02      	add	r7, sp, #8
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	607a      	str	r2, [r7, #4]
 8002f82:	461a      	mov	r2, r3
 8002f84:	460b      	mov	r3, r1
 8002f86:	817b      	strh	r3, [r7, #10]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f8c:	f7ff fbba 	bl	8002704 <HAL_GetTick>
 8002f90:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b20      	cmp	r3, #32
 8002f9c:	f040 80e0 	bne.w	8003160 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	2319      	movs	r3, #25
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	4970      	ldr	r1, [pc, #448]	; (800316c <HAL_I2C_Master_Transmit+0x1f4>)
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 fa92 	bl	80034d4 <I2C_WaitOnFlagUntilTimeout>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	e0d3      	b.n	8003162 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d101      	bne.n	8002fc8 <HAL_I2C_Master_Transmit+0x50>
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	e0cc      	b.n	8003162 <HAL_I2C_Master_Transmit+0x1ea>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d007      	beq.n	8002fee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f042 0201 	orr.w	r2, r2, #1
 8002fec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ffc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2221      	movs	r2, #33	; 0x21
 8003002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2210      	movs	r2, #16
 800300a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	893a      	ldrh	r2, [r7, #8]
 800301e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003024:	b29a      	uxth	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	4a50      	ldr	r2, [pc, #320]	; (8003170 <HAL_I2C_Master_Transmit+0x1f8>)
 800302e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003030:	8979      	ldrh	r1, [r7, #10]
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	6a3a      	ldr	r2, [r7, #32]
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 f9ca 	bl	80033d0 <I2C_MasterRequestWrite>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e08d      	b.n	8003162 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003046:	2300      	movs	r3, #0
 8003048:	613b      	str	r3, [r7, #16]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	613b      	str	r3, [r7, #16]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	613b      	str	r3, [r7, #16]
 800305a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800305c:	e066      	b.n	800312c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	6a39      	ldr	r1, [r7, #32]
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f000 fb50 	bl	8003708 <I2C_WaitOnTXEFlagUntilTimeout>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00d      	beq.n	800308a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	2b04      	cmp	r3, #4
 8003074:	d107      	bne.n	8003086 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003084:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e06b      	b.n	8003162 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308e:	781a      	ldrb	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	1c5a      	adds	r2, r3, #1
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	3b01      	subs	r3, #1
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b2:	3b01      	subs	r3, #1
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d11b      	bne.n	8003100 <HAL_I2C_Master_Transmit+0x188>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d017      	beq.n	8003100 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	781a      	ldrb	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f8:	3b01      	subs	r3, #1
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	6a39      	ldr	r1, [r7, #32]
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 fb47 	bl	8003798 <I2C_WaitOnBTFFlagUntilTimeout>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00d      	beq.n	800312c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	2b04      	cmp	r3, #4
 8003116:	d107      	bne.n	8003128 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003126:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e01a      	b.n	8003162 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003130:	2b00      	cmp	r3, #0
 8003132:	d194      	bne.n	800305e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003142:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2220      	movs	r2, #32
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800315c:	2300      	movs	r3, #0
 800315e:	e000      	b.n	8003162 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003160:	2302      	movs	r3, #2
  }
}
 8003162:	4618      	mov	r0, r3
 8003164:	3718      	adds	r7, #24
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	00100002 	.word	0x00100002
 8003170:	ffff0000 	.word	0xffff0000

08003174 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b08a      	sub	sp, #40	; 0x28
 8003178:	af02      	add	r7, sp, #8
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	607a      	str	r2, [r7, #4]
 800317e:	603b      	str	r3, [r7, #0]
 8003180:	460b      	mov	r3, r1
 8003182:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003184:	f7ff fabe 	bl	8002704 <HAL_GetTick>
 8003188:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800318a:	2300      	movs	r3, #0
 800318c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b20      	cmp	r3, #32
 8003198:	f040 8111 	bne.w	80033be <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	2319      	movs	r3, #25
 80031a2:	2201      	movs	r2, #1
 80031a4:	4988      	ldr	r1, [pc, #544]	; (80033c8 <HAL_I2C_IsDeviceReady+0x254>)
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f000 f994 	bl	80034d4 <I2C_WaitOnFlagUntilTimeout>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80031b2:	2302      	movs	r3, #2
 80031b4:	e104      	b.n	80033c0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d101      	bne.n	80031c4 <HAL_I2C_IsDeviceReady+0x50>
 80031c0:	2302      	movs	r3, #2
 80031c2:	e0fd      	b.n	80033c0 <HAL_I2C_IsDeviceReady+0x24c>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d007      	beq.n	80031ea <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f042 0201 	orr.w	r2, r2, #1
 80031e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2224      	movs	r2, #36	; 0x24
 80031fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	4a70      	ldr	r2, [pc, #448]	; (80033cc <HAL_I2C_IsDeviceReady+0x258>)
 800320c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800321c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	2200      	movs	r2, #0
 8003226:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f000 f952 	bl	80034d4 <I2C_WaitOnFlagUntilTimeout>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00d      	beq.n	8003252 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003244:	d103      	bne.n	800324e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f44f 7200 	mov.w	r2, #512	; 0x200
 800324c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e0b6      	b.n	80033c0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003252:	897b      	ldrh	r3, [r7, #10]
 8003254:	b2db      	uxtb	r3, r3
 8003256:	461a      	mov	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003260:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003262:	f7ff fa4f 	bl	8002704 <HAL_GetTick>
 8003266:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b02      	cmp	r3, #2
 8003274:	bf0c      	ite	eq
 8003276:	2301      	moveq	r3, #1
 8003278:	2300      	movne	r3, #0
 800327a:	b2db      	uxtb	r3, r3
 800327c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800328c:	bf0c      	ite	eq
 800328e:	2301      	moveq	r3, #1
 8003290:	2300      	movne	r3, #0
 8003292:	b2db      	uxtb	r3, r3
 8003294:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003296:	e025      	b.n	80032e4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003298:	f7ff fa34 	bl	8002704 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d302      	bcc.n	80032ae <HAL_I2C_IsDeviceReady+0x13a>
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d103      	bne.n	80032b6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	22a0      	movs	r2, #160	; 0xa0
 80032b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	bf0c      	ite	eq
 80032c4:	2301      	moveq	r3, #1
 80032c6:	2300      	movne	r3, #0
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032da:	bf0c      	ite	eq
 80032dc:	2301      	moveq	r3, #1
 80032de:	2300      	movne	r3, #0
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2ba0      	cmp	r3, #160	; 0xa0
 80032ee:	d005      	beq.n	80032fc <HAL_I2C_IsDeviceReady+0x188>
 80032f0:	7dfb      	ldrb	r3, [r7, #23]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d102      	bne.n	80032fc <HAL_I2C_IsDeviceReady+0x188>
 80032f6:	7dbb      	ldrb	r3, [r7, #22]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0cd      	beq.n	8003298 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2220      	movs	r2, #32
 8003300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b02      	cmp	r3, #2
 8003310:	d129      	bne.n	8003366 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003320:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003322:	2300      	movs	r3, #0
 8003324:	613b      	str	r3, [r7, #16]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	695b      	ldr	r3, [r3, #20]
 800332c:	613b      	str	r3, [r7, #16]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	613b      	str	r3, [r7, #16]
 8003336:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	2319      	movs	r3, #25
 800333e:	2201      	movs	r2, #1
 8003340:	4921      	ldr	r1, [pc, #132]	; (80033c8 <HAL_I2C_IsDeviceReady+0x254>)
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 f8c6 	bl	80034d4 <I2C_WaitOnFlagUntilTimeout>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e036      	b.n	80033c0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2220      	movs	r2, #32
 8003356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003362:	2300      	movs	r3, #0
 8003364:	e02c      	b.n	80033c0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003374:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800337e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	2319      	movs	r3, #25
 8003386:	2201      	movs	r2, #1
 8003388:	490f      	ldr	r1, [pc, #60]	; (80033c8 <HAL_I2C_IsDeviceReady+0x254>)
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 f8a2 	bl	80034d4 <I2C_WaitOnFlagUntilTimeout>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e012      	b.n	80033c0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	3301      	adds	r3, #1
 800339e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	f4ff af32 	bcc.w	800320e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2220      	movs	r2, #32
 80033ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e000      	b.n	80033c0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80033be:	2302      	movs	r3, #2
  }
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3720      	adds	r7, #32
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	00100002 	.word	0x00100002
 80033cc:	ffff0000 	.word	0xffff0000

080033d0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b088      	sub	sp, #32
 80033d4:	af02      	add	r7, sp, #8
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	607a      	str	r2, [r7, #4]
 80033da:	603b      	str	r3, [r7, #0]
 80033dc:	460b      	mov	r3, r1
 80033de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	d006      	beq.n	80033fa <I2C_MasterRequestWrite+0x2a>
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d003      	beq.n	80033fa <I2C_MasterRequestWrite+0x2a>
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033f8:	d108      	bne.n	800340c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	e00b      	b.n	8003424 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003410:	2b12      	cmp	r3, #18
 8003412:	d107      	bne.n	8003424 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003422:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f000 f84f 	bl	80034d4 <I2C_WaitOnFlagUntilTimeout>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00d      	beq.n	8003458 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800344a:	d103      	bne.n	8003454 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003452:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e035      	b.n	80034c4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003460:	d108      	bne.n	8003474 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003462:	897b      	ldrh	r3, [r7, #10]
 8003464:	b2db      	uxtb	r3, r3
 8003466:	461a      	mov	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003470:	611a      	str	r2, [r3, #16]
 8003472:	e01b      	b.n	80034ac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003474:	897b      	ldrh	r3, [r7, #10]
 8003476:	11db      	asrs	r3, r3, #7
 8003478:	b2db      	uxtb	r3, r3
 800347a:	f003 0306 	and.w	r3, r3, #6
 800347e:	b2db      	uxtb	r3, r3
 8003480:	f063 030f 	orn	r3, r3, #15
 8003484:	b2da      	uxtb	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	490e      	ldr	r1, [pc, #56]	; (80034cc <I2C_MasterRequestWrite+0xfc>)
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f000 f898 	bl	80035c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e010      	b.n	80034c4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80034a2:	897b      	ldrh	r3, [r7, #10]
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	4907      	ldr	r1, [pc, #28]	; (80034d0 <I2C_MasterRequestWrite+0x100>)
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f000 f888 	bl	80035c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e000      	b.n	80034c4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3718      	adds	r7, #24
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	00010008 	.word	0x00010008
 80034d0:	00010002 	.word	0x00010002

080034d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	603b      	str	r3, [r7, #0]
 80034e0:	4613      	mov	r3, r2
 80034e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034e4:	e048      	b.n	8003578 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ec:	d044      	beq.n	8003578 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ee:	f7ff f909 	bl	8002704 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d302      	bcc.n	8003504 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d139      	bne.n	8003578 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	0c1b      	lsrs	r3, r3, #16
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b01      	cmp	r3, #1
 800350c:	d10d      	bne.n	800352a <I2C_WaitOnFlagUntilTimeout+0x56>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	43da      	mvns	r2, r3
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	4013      	ands	r3, r2
 800351a:	b29b      	uxth	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	bf0c      	ite	eq
 8003520:	2301      	moveq	r3, #1
 8003522:	2300      	movne	r3, #0
 8003524:	b2db      	uxtb	r3, r3
 8003526:	461a      	mov	r2, r3
 8003528:	e00c      	b.n	8003544 <I2C_WaitOnFlagUntilTimeout+0x70>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	43da      	mvns	r2, r3
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	4013      	ands	r3, r2
 8003536:	b29b      	uxth	r3, r3
 8003538:	2b00      	cmp	r3, #0
 800353a:	bf0c      	ite	eq
 800353c:	2301      	moveq	r3, #1
 800353e:	2300      	movne	r3, #0
 8003540:	b2db      	uxtb	r3, r3
 8003542:	461a      	mov	r2, r3
 8003544:	79fb      	ldrb	r3, [r7, #7]
 8003546:	429a      	cmp	r2, r3
 8003548:	d116      	bne.n	8003578 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2220      	movs	r2, #32
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003564:	f043 0220 	orr.w	r2, r3, #32
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e023      	b.n	80035c0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	0c1b      	lsrs	r3, r3, #16
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b01      	cmp	r3, #1
 8003580:	d10d      	bne.n	800359e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	43da      	mvns	r2, r3
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	4013      	ands	r3, r2
 800358e:	b29b      	uxth	r3, r3
 8003590:	2b00      	cmp	r3, #0
 8003592:	bf0c      	ite	eq
 8003594:	2301      	moveq	r3, #1
 8003596:	2300      	movne	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	461a      	mov	r2, r3
 800359c:	e00c      	b.n	80035b8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	43da      	mvns	r2, r3
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	4013      	ands	r3, r2
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	bf0c      	ite	eq
 80035b0:	2301      	moveq	r3, #1
 80035b2:	2300      	movne	r3, #0
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	461a      	mov	r2, r3
 80035b8:	79fb      	ldrb	r3, [r7, #7]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d093      	beq.n	80034e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
 80035d4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035d6:	e071      	b.n	80036bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035e6:	d123      	bne.n	8003630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035f6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003600:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361c:	f043 0204 	orr.w	r2, r3, #4
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e067      	b.n	8003700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003636:	d041      	beq.n	80036bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003638:	f7ff f864 	bl	8002704 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	429a      	cmp	r2, r3
 8003646:	d302      	bcc.n	800364e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d136      	bne.n	80036bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	0c1b      	lsrs	r3, r3, #16
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b01      	cmp	r3, #1
 8003656:	d10c      	bne.n	8003672 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	43da      	mvns	r2, r3
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	4013      	ands	r3, r2
 8003664:	b29b      	uxth	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	bf14      	ite	ne
 800366a:	2301      	movne	r3, #1
 800366c:	2300      	moveq	r3, #0
 800366e:	b2db      	uxtb	r3, r3
 8003670:	e00b      	b.n	800368a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	43da      	mvns	r2, r3
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	4013      	ands	r3, r2
 800367e:	b29b      	uxth	r3, r3
 8003680:	2b00      	cmp	r3, #0
 8003682:	bf14      	ite	ne
 8003684:	2301      	movne	r3, #1
 8003686:	2300      	moveq	r3, #0
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d016      	beq.n	80036bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2220      	movs	r2, #32
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a8:	f043 0220 	orr.w	r2, r3, #32
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e021      	b.n	8003700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	0c1b      	lsrs	r3, r3, #16
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d10c      	bne.n	80036e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	43da      	mvns	r2, r3
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	4013      	ands	r3, r2
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	bf14      	ite	ne
 80036d8:	2301      	movne	r3, #1
 80036da:	2300      	moveq	r3, #0
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	e00b      	b.n	80036f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	43da      	mvns	r2, r3
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	4013      	ands	r3, r2
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	bf14      	ite	ne
 80036f2:	2301      	movne	r3, #1
 80036f4:	2300      	moveq	r3, #0
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f47f af6d 	bne.w	80035d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003714:	e034      	b.n	8003780 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 f886 	bl	8003828 <I2C_IsAcknowledgeFailed>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e034      	b.n	8003790 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800372c:	d028      	beq.n	8003780 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800372e:	f7fe ffe9 	bl	8002704 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	429a      	cmp	r2, r3
 800373c:	d302      	bcc.n	8003744 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d11d      	bne.n	8003780 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800374e:	2b80      	cmp	r3, #128	; 0x80
 8003750:	d016      	beq.n	8003780 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2220      	movs	r2, #32
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376c:	f043 0220 	orr.w	r2, r3, #32
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e007      	b.n	8003790 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800378a:	2b80      	cmp	r3, #128	; 0x80
 800378c:	d1c3      	bne.n	8003716 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037a4:	e034      	b.n	8003810 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f000 f83e 	bl	8003828 <I2C_IsAcknowledgeFailed>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e034      	b.n	8003820 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037bc:	d028      	beq.n	8003810 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037be:	f7fe ffa1 	bl	8002704 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	68ba      	ldr	r2, [r7, #8]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d302      	bcc.n	80037d4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d11d      	bne.n	8003810 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	f003 0304 	and.w	r3, r3, #4
 80037de:	2b04      	cmp	r3, #4
 80037e0:	d016      	beq.n	8003810 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2220      	movs	r2, #32
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	f043 0220 	orr.w	r2, r3, #32
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e007      	b.n	8003820 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	f003 0304 	and.w	r3, r3, #4
 800381a:	2b04      	cmp	r3, #4
 800381c:	d1c3      	bne.n	80037a6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800383a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800383e:	d11b      	bne.n	8003878 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003848:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2220      	movs	r2, #32
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003864:	f043 0204 	orr.w	r2, r3, #4
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e000      	b.n	800387a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	bc80      	pop	{r7}
 8003882:	4770      	bx	lr

08003884 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e272      	b.n	8003d7c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f000 8087 	beq.w	80039b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038a4:	4b92      	ldr	r3, [pc, #584]	; (8003af0 <HAL_RCC_OscConfig+0x26c>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f003 030c 	and.w	r3, r3, #12
 80038ac:	2b04      	cmp	r3, #4
 80038ae:	d00c      	beq.n	80038ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038b0:	4b8f      	ldr	r3, [pc, #572]	; (8003af0 <HAL_RCC_OscConfig+0x26c>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f003 030c 	and.w	r3, r3, #12
 80038b8:	2b08      	cmp	r3, #8
 80038ba:	d112      	bne.n	80038e2 <HAL_RCC_OscConfig+0x5e>
 80038bc:	4b8c      	ldr	r3, [pc, #560]	; (8003af0 <HAL_RCC_OscConfig+0x26c>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038c8:	d10b      	bne.n	80038e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ca:	4b89      	ldr	r3, [pc, #548]	; (8003af0 <HAL_RCC_OscConfig+0x26c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d06c      	beq.n	80039b0 <HAL_RCC_OscConfig+0x12c>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d168      	bne.n	80039b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e24c      	b.n	8003d7c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ea:	d106      	bne.n	80038fa <HAL_RCC_OscConfig+0x76>
 80038ec:	4b80      	ldr	r3, [pc, #512]	; (8003af0 <HAL_RCC_OscConfig+0x26c>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a7f      	ldr	r2, [pc, #508]	; (8003af0 <HAL_RCC_OscConfig+0x26c>)
 80038f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038f6:	6013      	str	r3, [r2, #0]
 80038f8:	e02e      	b.n	8003958 <HAL_RCC_OscConfig+0xd4>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10c      	bne.n	800391c <HAL_RCC_OscConfig+0x98>
 8003902:	4b7b      	ldr	r3, [pc, #492]	; (8003af0 <HAL_RCC_OscConfig+0x26c>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a7a      	ldr	r2, [pc, #488]	; (8003af0 <HAL_RCC_OscConfig+0x26c>)
 8003908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800390c:	6013      	str	r3, [r2, #0]
 800390e:	4b78      	ldr	r3, [pc, #480]	; (8003af0 <HAL_RCC_OscConfig+0x26c>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a77      	ldr	r2, [pc, #476]	; (8003af0 <HAL_RCC_OscConfig+0x26c>)
 8003914:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003918:	6013      	str	r3, [r2, #0]
 800391a:	e01d      	b.n	8003958 <HAL_RCC_OscConfig+0xd4>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003924:	d10c      	bne.n	8003940 <HAL_RCC_OscConfig+0xbc>
 8003926:	4b72      	ldr	r3, [pc, #456]	; (8003af0 <HAL_RCC_OscConfig+0x26c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a71      	ldr	r2, [pc, #452]	; (8003af0 <HAL_RCC_OscConfig+0x26c>)
 800392c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003930:	6013      	str	r3, [r2, #0]
 8003932:	4b6f      	ldr	r3, [pc, #444]	; (8003af0 <HAL_RCC_OscConfig+0x26c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a6e      	ldr	r2, [pc, #440]	; (8003af0 <HAL_RCC_OscConfig+0x26c>)
 8003938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	e00b      	b.n	8003958 <HAL_RCC_OscConfig+0xd4>
 8003940:	4b6b      	ldr	r3, [pc, #428]	; (8003af0 <HAL_RCC_OscConfig+0x26c>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a6a      	ldr	r2, [pc, #424]	; (8003af0 <HAL_RCC_OscConfig+0x26c>)
 8003946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800394a:	6013      	str	r3, [r2, #0]
 800394c:	4b68      	ldr	r3, [pc, #416]	; (8003af0 <HAL_RCC_OscConfig+0x26c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a67      	ldr	r2, [pc, #412]	; (8003af0 <HAL_RCC_OscConfig+0x26c>)
 8003952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003956:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d013      	beq.n	8003988 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003960:	f7fe fed0 	bl	8002704 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003968:	f7fe fecc 	bl	8002704 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b64      	cmp	r3, #100	; 0x64
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e200      	b.n	8003d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800397a:	4b5d      	ldr	r3, [pc, #372]	; (8003af0 <HAL_RCC_OscConfig+0x26c>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0f0      	beq.n	8003968 <HAL_RCC_OscConfig+0xe4>
 8003986:	e014      	b.n	80039b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003988:	f7fe febc 	bl	8002704 <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003990:	f7fe feb8 	bl	8002704 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b64      	cmp	r3, #100	; 0x64
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e1ec      	b.n	8003d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039a2:	4b53      	ldr	r3, [pc, #332]	; (8003af0 <HAL_RCC_OscConfig+0x26c>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1f0      	bne.n	8003990 <HAL_RCC_OscConfig+0x10c>
 80039ae:	e000      	b.n	80039b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d063      	beq.n	8003a86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039be:	4b4c      	ldr	r3, [pc, #304]	; (8003af0 <HAL_RCC_OscConfig+0x26c>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f003 030c 	and.w	r3, r3, #12
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00b      	beq.n	80039e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80039ca:	4b49      	ldr	r3, [pc, #292]	; (8003af0 <HAL_RCC_OscConfig+0x26c>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f003 030c 	and.w	r3, r3, #12
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	d11c      	bne.n	8003a10 <HAL_RCC_OscConfig+0x18c>
 80039d6:	4b46      	ldr	r3, [pc, #280]	; (8003af0 <HAL_RCC_OscConfig+0x26c>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d116      	bne.n	8003a10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039e2:	4b43      	ldr	r3, [pc, #268]	; (8003af0 <HAL_RCC_OscConfig+0x26c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d005      	beq.n	80039fa <HAL_RCC_OscConfig+0x176>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d001      	beq.n	80039fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e1c0      	b.n	8003d7c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039fa:	4b3d      	ldr	r3, [pc, #244]	; (8003af0 <HAL_RCC_OscConfig+0x26c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	4939      	ldr	r1, [pc, #228]	; (8003af0 <HAL_RCC_OscConfig+0x26c>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a0e:	e03a      	b.n	8003a86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d020      	beq.n	8003a5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a18:	4b36      	ldr	r3, [pc, #216]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a1e:	f7fe fe71 	bl	8002704 <HAL_GetTick>
 8003a22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a24:	e008      	b.n	8003a38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a26:	f7fe fe6d 	bl	8002704 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d901      	bls.n	8003a38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e1a1      	b.n	8003d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a38:	4b2d      	ldr	r3, [pc, #180]	; (8003af0 <HAL_RCC_OscConfig+0x26c>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d0f0      	beq.n	8003a26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a44:	4b2a      	ldr	r3, [pc, #168]	; (8003af0 <HAL_RCC_OscConfig+0x26c>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	00db      	lsls	r3, r3, #3
 8003a52:	4927      	ldr	r1, [pc, #156]	; (8003af0 <HAL_RCC_OscConfig+0x26c>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	600b      	str	r3, [r1, #0]
 8003a58:	e015      	b.n	8003a86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a5a:	4b26      	ldr	r3, [pc, #152]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a60:	f7fe fe50 	bl	8002704 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a68:	f7fe fe4c 	bl	8002704 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e180      	b.n	8003d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a7a:	4b1d      	ldr	r3, [pc, #116]	; (8003af0 <HAL_RCC_OscConfig+0x26c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1f0      	bne.n	8003a68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0308 	and.w	r3, r3, #8
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d03a      	beq.n	8003b08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d019      	beq.n	8003ace <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a9a:	4b17      	ldr	r3, [pc, #92]	; (8003af8 <HAL_RCC_OscConfig+0x274>)
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aa0:	f7fe fe30 	bl	8002704 <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aa8:	f7fe fe2c 	bl	8002704 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e160      	b.n	8003d7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aba:	4b0d      	ldr	r3, [pc, #52]	; (8003af0 <HAL_RCC_OscConfig+0x26c>)
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d0f0      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003ac6:	2001      	movs	r0, #1
 8003ac8:	f000 faba 	bl	8004040 <RCC_Delay>
 8003acc:	e01c      	b.n	8003b08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ace:	4b0a      	ldr	r3, [pc, #40]	; (8003af8 <HAL_RCC_OscConfig+0x274>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ad4:	f7fe fe16 	bl	8002704 <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ada:	e00f      	b.n	8003afc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003adc:	f7fe fe12 	bl	8002704 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d908      	bls.n	8003afc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e146      	b.n	8003d7c <HAL_RCC_OscConfig+0x4f8>
 8003aee:	bf00      	nop
 8003af0:	40021000 	.word	0x40021000
 8003af4:	42420000 	.word	0x42420000
 8003af8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003afc:	4b92      	ldr	r3, [pc, #584]	; (8003d48 <HAL_RCC_OscConfig+0x4c4>)
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1e9      	bne.n	8003adc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 80a6 	beq.w	8003c62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b16:	2300      	movs	r3, #0
 8003b18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b1a:	4b8b      	ldr	r3, [pc, #556]	; (8003d48 <HAL_RCC_OscConfig+0x4c4>)
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10d      	bne.n	8003b42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b26:	4b88      	ldr	r3, [pc, #544]	; (8003d48 <HAL_RCC_OscConfig+0x4c4>)
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	4a87      	ldr	r2, [pc, #540]	; (8003d48 <HAL_RCC_OscConfig+0x4c4>)
 8003b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b30:	61d3      	str	r3, [r2, #28]
 8003b32:	4b85      	ldr	r3, [pc, #532]	; (8003d48 <HAL_RCC_OscConfig+0x4c4>)
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b3a:	60bb      	str	r3, [r7, #8]
 8003b3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b42:	4b82      	ldr	r3, [pc, #520]	; (8003d4c <HAL_RCC_OscConfig+0x4c8>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d118      	bne.n	8003b80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b4e:	4b7f      	ldr	r3, [pc, #508]	; (8003d4c <HAL_RCC_OscConfig+0x4c8>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a7e      	ldr	r2, [pc, #504]	; (8003d4c <HAL_RCC_OscConfig+0x4c8>)
 8003b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b5a:	f7fe fdd3 	bl	8002704 <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b60:	e008      	b.n	8003b74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b62:	f7fe fdcf 	bl	8002704 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b64      	cmp	r3, #100	; 0x64
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e103      	b.n	8003d7c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b74:	4b75      	ldr	r3, [pc, #468]	; (8003d4c <HAL_RCC_OscConfig+0x4c8>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0f0      	beq.n	8003b62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d106      	bne.n	8003b96 <HAL_RCC_OscConfig+0x312>
 8003b88:	4b6f      	ldr	r3, [pc, #444]	; (8003d48 <HAL_RCC_OscConfig+0x4c4>)
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	4a6e      	ldr	r2, [pc, #440]	; (8003d48 <HAL_RCC_OscConfig+0x4c4>)
 8003b8e:	f043 0301 	orr.w	r3, r3, #1
 8003b92:	6213      	str	r3, [r2, #32]
 8003b94:	e02d      	b.n	8003bf2 <HAL_RCC_OscConfig+0x36e>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10c      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x334>
 8003b9e:	4b6a      	ldr	r3, [pc, #424]	; (8003d48 <HAL_RCC_OscConfig+0x4c4>)
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	4a69      	ldr	r2, [pc, #420]	; (8003d48 <HAL_RCC_OscConfig+0x4c4>)
 8003ba4:	f023 0301 	bic.w	r3, r3, #1
 8003ba8:	6213      	str	r3, [r2, #32]
 8003baa:	4b67      	ldr	r3, [pc, #412]	; (8003d48 <HAL_RCC_OscConfig+0x4c4>)
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	4a66      	ldr	r2, [pc, #408]	; (8003d48 <HAL_RCC_OscConfig+0x4c4>)
 8003bb0:	f023 0304 	bic.w	r3, r3, #4
 8003bb4:	6213      	str	r3, [r2, #32]
 8003bb6:	e01c      	b.n	8003bf2 <HAL_RCC_OscConfig+0x36e>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	2b05      	cmp	r3, #5
 8003bbe:	d10c      	bne.n	8003bda <HAL_RCC_OscConfig+0x356>
 8003bc0:	4b61      	ldr	r3, [pc, #388]	; (8003d48 <HAL_RCC_OscConfig+0x4c4>)
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	4a60      	ldr	r2, [pc, #384]	; (8003d48 <HAL_RCC_OscConfig+0x4c4>)
 8003bc6:	f043 0304 	orr.w	r3, r3, #4
 8003bca:	6213      	str	r3, [r2, #32]
 8003bcc:	4b5e      	ldr	r3, [pc, #376]	; (8003d48 <HAL_RCC_OscConfig+0x4c4>)
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	4a5d      	ldr	r2, [pc, #372]	; (8003d48 <HAL_RCC_OscConfig+0x4c4>)
 8003bd2:	f043 0301 	orr.w	r3, r3, #1
 8003bd6:	6213      	str	r3, [r2, #32]
 8003bd8:	e00b      	b.n	8003bf2 <HAL_RCC_OscConfig+0x36e>
 8003bda:	4b5b      	ldr	r3, [pc, #364]	; (8003d48 <HAL_RCC_OscConfig+0x4c4>)
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	4a5a      	ldr	r2, [pc, #360]	; (8003d48 <HAL_RCC_OscConfig+0x4c4>)
 8003be0:	f023 0301 	bic.w	r3, r3, #1
 8003be4:	6213      	str	r3, [r2, #32]
 8003be6:	4b58      	ldr	r3, [pc, #352]	; (8003d48 <HAL_RCC_OscConfig+0x4c4>)
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	4a57      	ldr	r2, [pc, #348]	; (8003d48 <HAL_RCC_OscConfig+0x4c4>)
 8003bec:	f023 0304 	bic.w	r3, r3, #4
 8003bf0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d015      	beq.n	8003c26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bfa:	f7fe fd83 	bl	8002704 <HAL_GetTick>
 8003bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c00:	e00a      	b.n	8003c18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c02:	f7fe fd7f 	bl	8002704 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e0b1      	b.n	8003d7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c18:	4b4b      	ldr	r3, [pc, #300]	; (8003d48 <HAL_RCC_OscConfig+0x4c4>)
 8003c1a:	6a1b      	ldr	r3, [r3, #32]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0ee      	beq.n	8003c02 <HAL_RCC_OscConfig+0x37e>
 8003c24:	e014      	b.n	8003c50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c26:	f7fe fd6d 	bl	8002704 <HAL_GetTick>
 8003c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c2c:	e00a      	b.n	8003c44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c2e:	f7fe fd69 	bl	8002704 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e09b      	b.n	8003d7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c44:	4b40      	ldr	r3, [pc, #256]	; (8003d48 <HAL_RCC_OscConfig+0x4c4>)
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1ee      	bne.n	8003c2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c50:	7dfb      	ldrb	r3, [r7, #23]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d105      	bne.n	8003c62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c56:	4b3c      	ldr	r3, [pc, #240]	; (8003d48 <HAL_RCC_OscConfig+0x4c4>)
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	4a3b      	ldr	r2, [pc, #236]	; (8003d48 <HAL_RCC_OscConfig+0x4c4>)
 8003c5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f000 8087 	beq.w	8003d7a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c6c:	4b36      	ldr	r3, [pc, #216]	; (8003d48 <HAL_RCC_OscConfig+0x4c4>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f003 030c 	and.w	r3, r3, #12
 8003c74:	2b08      	cmp	r3, #8
 8003c76:	d061      	beq.n	8003d3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	69db      	ldr	r3, [r3, #28]
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d146      	bne.n	8003d0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c80:	4b33      	ldr	r3, [pc, #204]	; (8003d50 <HAL_RCC_OscConfig+0x4cc>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c86:	f7fe fd3d 	bl	8002704 <HAL_GetTick>
 8003c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c8c:	e008      	b.n	8003ca0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c8e:	f7fe fd39 	bl	8002704 <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d901      	bls.n	8003ca0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e06d      	b.n	8003d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ca0:	4b29      	ldr	r3, [pc, #164]	; (8003d48 <HAL_RCC_OscConfig+0x4c4>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1f0      	bne.n	8003c8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a1b      	ldr	r3, [r3, #32]
 8003cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cb4:	d108      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003cb6:	4b24      	ldr	r3, [pc, #144]	; (8003d48 <HAL_RCC_OscConfig+0x4c4>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	4921      	ldr	r1, [pc, #132]	; (8003d48 <HAL_RCC_OscConfig+0x4c4>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cc8:	4b1f      	ldr	r3, [pc, #124]	; (8003d48 <HAL_RCC_OscConfig+0x4c4>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a19      	ldr	r1, [r3, #32]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd8:	430b      	orrs	r3, r1
 8003cda:	491b      	ldr	r1, [pc, #108]	; (8003d48 <HAL_RCC_OscConfig+0x4c4>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ce0:	4b1b      	ldr	r3, [pc, #108]	; (8003d50 <HAL_RCC_OscConfig+0x4cc>)
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce6:	f7fe fd0d 	bl	8002704 <HAL_GetTick>
 8003cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cec:	e008      	b.n	8003d00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cee:	f7fe fd09 	bl	8002704 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d901      	bls.n	8003d00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e03d      	b.n	8003d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d00:	4b11      	ldr	r3, [pc, #68]	; (8003d48 <HAL_RCC_OscConfig+0x4c4>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d0f0      	beq.n	8003cee <HAL_RCC_OscConfig+0x46a>
 8003d0c:	e035      	b.n	8003d7a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d0e:	4b10      	ldr	r3, [pc, #64]	; (8003d50 <HAL_RCC_OscConfig+0x4cc>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d14:	f7fe fcf6 	bl	8002704 <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d1c:	f7fe fcf2 	bl	8002704 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e026      	b.n	8003d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d2e:	4b06      	ldr	r3, [pc, #24]	; (8003d48 <HAL_RCC_OscConfig+0x4c4>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1f0      	bne.n	8003d1c <HAL_RCC_OscConfig+0x498>
 8003d3a:	e01e      	b.n	8003d7a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	69db      	ldr	r3, [r3, #28]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d107      	bne.n	8003d54 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e019      	b.n	8003d7c <HAL_RCC_OscConfig+0x4f8>
 8003d48:	40021000 	.word	0x40021000
 8003d4c:	40007000 	.word	0x40007000
 8003d50:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d54:	4b0b      	ldr	r3, [pc, #44]	; (8003d84 <HAL_RCC_OscConfig+0x500>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d106      	bne.n	8003d76 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d001      	beq.n	8003d7a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e000      	b.n	8003d7c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3718      	adds	r7, #24
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40021000 	.word	0x40021000

08003d88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d101      	bne.n	8003d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e0d0      	b.n	8003f3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d9c:	4b6a      	ldr	r3, [pc, #424]	; (8003f48 <HAL_RCC_ClockConfig+0x1c0>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0307 	and.w	r3, r3, #7
 8003da4:	683a      	ldr	r2, [r7, #0]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d910      	bls.n	8003dcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003daa:	4b67      	ldr	r3, [pc, #412]	; (8003f48 <HAL_RCC_ClockConfig+0x1c0>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f023 0207 	bic.w	r2, r3, #7
 8003db2:	4965      	ldr	r1, [pc, #404]	; (8003f48 <HAL_RCC_ClockConfig+0x1c0>)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dba:	4b63      	ldr	r3, [pc, #396]	; (8003f48 <HAL_RCC_ClockConfig+0x1c0>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0307 	and.w	r3, r3, #7
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d001      	beq.n	8003dcc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e0b8      	b.n	8003f3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d020      	beq.n	8003e1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d005      	beq.n	8003df0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003de4:	4b59      	ldr	r3, [pc, #356]	; (8003f4c <HAL_RCC_ClockConfig+0x1c4>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	4a58      	ldr	r2, [pc, #352]	; (8003f4c <HAL_RCC_ClockConfig+0x1c4>)
 8003dea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003dee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0308 	and.w	r3, r3, #8
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d005      	beq.n	8003e08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dfc:	4b53      	ldr	r3, [pc, #332]	; (8003f4c <HAL_RCC_ClockConfig+0x1c4>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	4a52      	ldr	r2, [pc, #328]	; (8003f4c <HAL_RCC_ClockConfig+0x1c4>)
 8003e02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003e06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e08:	4b50      	ldr	r3, [pc, #320]	; (8003f4c <HAL_RCC_ClockConfig+0x1c4>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	494d      	ldr	r1, [pc, #308]	; (8003f4c <HAL_RCC_ClockConfig+0x1c4>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d040      	beq.n	8003ea8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d107      	bne.n	8003e3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e2e:	4b47      	ldr	r3, [pc, #284]	; (8003f4c <HAL_RCC_ClockConfig+0x1c4>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d115      	bne.n	8003e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e07f      	b.n	8003f3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d107      	bne.n	8003e56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e46:	4b41      	ldr	r3, [pc, #260]	; (8003f4c <HAL_RCC_ClockConfig+0x1c4>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d109      	bne.n	8003e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e073      	b.n	8003f3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e56:	4b3d      	ldr	r3, [pc, #244]	; (8003f4c <HAL_RCC_ClockConfig+0x1c4>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e06b      	b.n	8003f3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e66:	4b39      	ldr	r3, [pc, #228]	; (8003f4c <HAL_RCC_ClockConfig+0x1c4>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f023 0203 	bic.w	r2, r3, #3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	4936      	ldr	r1, [pc, #216]	; (8003f4c <HAL_RCC_ClockConfig+0x1c4>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e78:	f7fe fc44 	bl	8002704 <HAL_GetTick>
 8003e7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e7e:	e00a      	b.n	8003e96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e80:	f7fe fc40 	bl	8002704 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e053      	b.n	8003f3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e96:	4b2d      	ldr	r3, [pc, #180]	; (8003f4c <HAL_RCC_ClockConfig+0x1c4>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f003 020c 	and.w	r2, r3, #12
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d1eb      	bne.n	8003e80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ea8:	4b27      	ldr	r3, [pc, #156]	; (8003f48 <HAL_RCC_ClockConfig+0x1c0>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d210      	bcs.n	8003ed8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eb6:	4b24      	ldr	r3, [pc, #144]	; (8003f48 <HAL_RCC_ClockConfig+0x1c0>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f023 0207 	bic.w	r2, r3, #7
 8003ebe:	4922      	ldr	r1, [pc, #136]	; (8003f48 <HAL_RCC_ClockConfig+0x1c0>)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ec6:	4b20      	ldr	r3, [pc, #128]	; (8003f48 <HAL_RCC_ClockConfig+0x1c0>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0307 	and.w	r3, r3, #7
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d001      	beq.n	8003ed8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e032      	b.n	8003f3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0304 	and.w	r3, r3, #4
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d008      	beq.n	8003ef6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ee4:	4b19      	ldr	r3, [pc, #100]	; (8003f4c <HAL_RCC_ClockConfig+0x1c4>)
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	4916      	ldr	r1, [pc, #88]	; (8003f4c <HAL_RCC_ClockConfig+0x1c4>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0308 	and.w	r3, r3, #8
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d009      	beq.n	8003f16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f02:	4b12      	ldr	r3, [pc, #72]	; (8003f4c <HAL_RCC_ClockConfig+0x1c4>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	490e      	ldr	r1, [pc, #56]	; (8003f4c <HAL_RCC_ClockConfig+0x1c4>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f16:	f000 f821 	bl	8003f5c <HAL_RCC_GetSysClockFreq>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	4b0b      	ldr	r3, [pc, #44]	; (8003f4c <HAL_RCC_ClockConfig+0x1c4>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	091b      	lsrs	r3, r3, #4
 8003f22:	f003 030f 	and.w	r3, r3, #15
 8003f26:	490a      	ldr	r1, [pc, #40]	; (8003f50 <HAL_RCC_ClockConfig+0x1c8>)
 8003f28:	5ccb      	ldrb	r3, [r1, r3]
 8003f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f2e:	4a09      	ldr	r2, [pc, #36]	; (8003f54 <HAL_RCC_ClockConfig+0x1cc>)
 8003f30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f32:	4b09      	ldr	r3, [pc, #36]	; (8003f58 <HAL_RCC_ClockConfig+0x1d0>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7fe fba2 	bl	8002680 <HAL_InitTick>

  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	40022000 	.word	0x40022000
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	08009758 	.word	0x08009758
 8003f54:	2000001c 	.word	0x2000001c
 8003f58:	20000020 	.word	0x20000020

08003f5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b087      	sub	sp, #28
 8003f60:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f62:	2300      	movs	r3, #0
 8003f64:	60fb      	str	r3, [r7, #12]
 8003f66:	2300      	movs	r3, #0
 8003f68:	60bb      	str	r3, [r7, #8]
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	617b      	str	r3, [r7, #20]
 8003f6e:	2300      	movs	r3, #0
 8003f70:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f76:	4b1e      	ldr	r3, [pc, #120]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f003 030c 	and.w	r3, r3, #12
 8003f82:	2b04      	cmp	r3, #4
 8003f84:	d002      	beq.n	8003f8c <HAL_RCC_GetSysClockFreq+0x30>
 8003f86:	2b08      	cmp	r3, #8
 8003f88:	d003      	beq.n	8003f92 <HAL_RCC_GetSysClockFreq+0x36>
 8003f8a:	e027      	b.n	8003fdc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f8c:	4b19      	ldr	r3, [pc, #100]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f8e:	613b      	str	r3, [r7, #16]
      break;
 8003f90:	e027      	b.n	8003fe2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	0c9b      	lsrs	r3, r3, #18
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	4a17      	ldr	r2, [pc, #92]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f9c:	5cd3      	ldrb	r3, [r2, r3]
 8003f9e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d010      	beq.n	8003fcc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003faa:	4b11      	ldr	r3, [pc, #68]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	0c5b      	lsrs	r3, r3, #17
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	4a11      	ldr	r2, [pc, #68]	; (8003ffc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003fb6:	5cd3      	ldrb	r3, [r2, r3]
 8003fb8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a0d      	ldr	r2, [pc, #52]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003fbe:	fb03 f202 	mul.w	r2, r3, r2
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc8:	617b      	str	r3, [r7, #20]
 8003fca:	e004      	b.n	8003fd6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a0c      	ldr	r2, [pc, #48]	; (8004000 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003fd0:	fb02 f303 	mul.w	r3, r2, r3
 8003fd4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	613b      	str	r3, [r7, #16]
      break;
 8003fda:	e002      	b.n	8003fe2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003fdc:	4b05      	ldr	r3, [pc, #20]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003fde:	613b      	str	r3, [r7, #16]
      break;
 8003fe0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fe2:	693b      	ldr	r3, [r7, #16]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	371c      	adds	r7, #28
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bc80      	pop	{r7}
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	40021000 	.word	0x40021000
 8003ff4:	007a1200 	.word	0x007a1200
 8003ff8:	08009770 	.word	0x08009770
 8003ffc:	08009780 	.word	0x08009780
 8004000:	003d0900 	.word	0x003d0900

08004004 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004008:	4b02      	ldr	r3, [pc, #8]	; (8004014 <HAL_RCC_GetHCLKFreq+0x10>)
 800400a:	681b      	ldr	r3, [r3, #0]
}
 800400c:	4618      	mov	r0, r3
 800400e:	46bd      	mov	sp, r7
 8004010:	bc80      	pop	{r7}
 8004012:	4770      	bx	lr
 8004014:	2000001c 	.word	0x2000001c

08004018 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800401c:	f7ff fff2 	bl	8004004 <HAL_RCC_GetHCLKFreq>
 8004020:	4602      	mov	r2, r0
 8004022:	4b05      	ldr	r3, [pc, #20]	; (8004038 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	0a1b      	lsrs	r3, r3, #8
 8004028:	f003 0307 	and.w	r3, r3, #7
 800402c:	4903      	ldr	r1, [pc, #12]	; (800403c <HAL_RCC_GetPCLK1Freq+0x24>)
 800402e:	5ccb      	ldrb	r3, [r1, r3]
 8004030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004034:	4618      	mov	r0, r3
 8004036:	bd80      	pop	{r7, pc}
 8004038:	40021000 	.word	0x40021000
 800403c:	08009768 	.word	0x08009768

08004040 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004048:	4b0a      	ldr	r3, [pc, #40]	; (8004074 <RCC_Delay+0x34>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a0a      	ldr	r2, [pc, #40]	; (8004078 <RCC_Delay+0x38>)
 800404e:	fba2 2303 	umull	r2, r3, r2, r3
 8004052:	0a5b      	lsrs	r3, r3, #9
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	fb02 f303 	mul.w	r3, r2, r3
 800405a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800405c:	bf00      	nop
  }
  while (Delay --);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	1e5a      	subs	r2, r3, #1
 8004062:	60fa      	str	r2, [r7, #12]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1f9      	bne.n	800405c <RCC_Delay+0x1c>
}
 8004068:	bf00      	nop
 800406a:	bf00      	nop
 800406c:	3714      	adds	r7, #20
 800406e:	46bd      	mov	sp, r7
 8004070:	bc80      	pop	{r7}
 8004072:	4770      	bx	lr
 8004074:	2000001c 	.word	0x2000001c
 8004078:	10624dd3 	.word	0x10624dd3

0800407c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e041      	b.n	8004112 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d106      	bne.n	80040a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7fe f94c 	bl	8002340 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2202      	movs	r2, #2
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	3304      	adds	r3, #4
 80040b8:	4619      	mov	r1, r3
 80040ba:	4610      	mov	r0, r2
 80040bc:	f000 fa2a 	bl	8004514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800411a:	b580      	push	{r7, lr}
 800411c:	b082      	sub	sp, #8
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b02      	cmp	r3, #2
 800412e:	d122      	bne.n	8004176 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b02      	cmp	r3, #2
 800413c:	d11b      	bne.n	8004176 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f06f 0202 	mvn.w	r2, #2
 8004146:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	f003 0303 	and.w	r3, r3, #3
 8004158:	2b00      	cmp	r3, #0
 800415a:	d003      	beq.n	8004164 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f9bd 	bl	80044dc <HAL_TIM_IC_CaptureCallback>
 8004162:	e005      	b.n	8004170 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 f9b0 	bl	80044ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f9bf 	bl	80044ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	f003 0304 	and.w	r3, r3, #4
 8004180:	2b04      	cmp	r3, #4
 8004182:	d122      	bne.n	80041ca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	f003 0304 	and.w	r3, r3, #4
 800418e:	2b04      	cmp	r3, #4
 8004190:	d11b      	bne.n	80041ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f06f 0204 	mvn.w	r2, #4
 800419a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2202      	movs	r2, #2
 80041a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d003      	beq.n	80041b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 f993 	bl	80044dc <HAL_TIM_IC_CaptureCallback>
 80041b6:	e005      	b.n	80041c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 f986 	bl	80044ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f995 	bl	80044ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	f003 0308 	and.w	r3, r3, #8
 80041d4:	2b08      	cmp	r3, #8
 80041d6:	d122      	bne.n	800421e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f003 0308 	and.w	r3, r3, #8
 80041e2:	2b08      	cmp	r3, #8
 80041e4:	d11b      	bne.n	800421e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f06f 0208 	mvn.w	r2, #8
 80041ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2204      	movs	r2, #4
 80041f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	69db      	ldr	r3, [r3, #28]
 80041fc:	f003 0303 	and.w	r3, r3, #3
 8004200:	2b00      	cmp	r3, #0
 8004202:	d003      	beq.n	800420c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 f969 	bl	80044dc <HAL_TIM_IC_CaptureCallback>
 800420a:	e005      	b.n	8004218 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 f95c 	bl	80044ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f96b 	bl	80044ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	f003 0310 	and.w	r3, r3, #16
 8004228:	2b10      	cmp	r3, #16
 800422a:	d122      	bne.n	8004272 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	f003 0310 	and.w	r3, r3, #16
 8004236:	2b10      	cmp	r3, #16
 8004238:	d11b      	bne.n	8004272 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f06f 0210 	mvn.w	r2, #16
 8004242:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2208      	movs	r2, #8
 8004248:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	69db      	ldr	r3, [r3, #28]
 8004250:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f93f 	bl	80044dc <HAL_TIM_IC_CaptureCallback>
 800425e:	e005      	b.n	800426c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 f932 	bl	80044ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f941 	bl	80044ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b01      	cmp	r3, #1
 800427e:	d10e      	bne.n	800429e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b01      	cmp	r3, #1
 800428c:	d107      	bne.n	800429e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f06f 0201 	mvn.w	r2, #1
 8004296:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 f90d 	bl	80044b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a8:	2b80      	cmp	r3, #128	; 0x80
 80042aa:	d10e      	bne.n	80042ca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b6:	2b80      	cmp	r3, #128	; 0x80
 80042b8:	d107      	bne.n	80042ca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f000 faaa 	bl	800481e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d4:	2b40      	cmp	r3, #64	; 0x40
 80042d6:	d10e      	bne.n	80042f6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e2:	2b40      	cmp	r3, #64	; 0x40
 80042e4:	d107      	bne.n	80042f6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 f905 	bl	8004500 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	f003 0320 	and.w	r3, r3, #32
 8004300:	2b20      	cmp	r3, #32
 8004302:	d10e      	bne.n	8004322 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	f003 0320 	and.w	r3, r3, #32
 800430e:	2b20      	cmp	r3, #32
 8004310:	d107      	bne.n	8004322 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f06f 0220 	mvn.w	r2, #32
 800431a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 fa75 	bl	800480c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004322:	bf00      	nop
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b084      	sub	sp, #16
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
 8004332:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004334:	2300      	movs	r3, #0
 8004336:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800433e:	2b01      	cmp	r3, #1
 8004340:	d101      	bne.n	8004346 <HAL_TIM_ConfigClockSource+0x1c>
 8004342:	2302      	movs	r3, #2
 8004344:	e0b4      	b.n	80044b0 <HAL_TIM_ConfigClockSource+0x186>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2202      	movs	r2, #2
 8004352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004364:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800436c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800437e:	d03e      	beq.n	80043fe <HAL_TIM_ConfigClockSource+0xd4>
 8004380:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004384:	f200 8087 	bhi.w	8004496 <HAL_TIM_ConfigClockSource+0x16c>
 8004388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800438c:	f000 8086 	beq.w	800449c <HAL_TIM_ConfigClockSource+0x172>
 8004390:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004394:	d87f      	bhi.n	8004496 <HAL_TIM_ConfigClockSource+0x16c>
 8004396:	2b70      	cmp	r3, #112	; 0x70
 8004398:	d01a      	beq.n	80043d0 <HAL_TIM_ConfigClockSource+0xa6>
 800439a:	2b70      	cmp	r3, #112	; 0x70
 800439c:	d87b      	bhi.n	8004496 <HAL_TIM_ConfigClockSource+0x16c>
 800439e:	2b60      	cmp	r3, #96	; 0x60
 80043a0:	d050      	beq.n	8004444 <HAL_TIM_ConfigClockSource+0x11a>
 80043a2:	2b60      	cmp	r3, #96	; 0x60
 80043a4:	d877      	bhi.n	8004496 <HAL_TIM_ConfigClockSource+0x16c>
 80043a6:	2b50      	cmp	r3, #80	; 0x50
 80043a8:	d03c      	beq.n	8004424 <HAL_TIM_ConfigClockSource+0xfa>
 80043aa:	2b50      	cmp	r3, #80	; 0x50
 80043ac:	d873      	bhi.n	8004496 <HAL_TIM_ConfigClockSource+0x16c>
 80043ae:	2b40      	cmp	r3, #64	; 0x40
 80043b0:	d058      	beq.n	8004464 <HAL_TIM_ConfigClockSource+0x13a>
 80043b2:	2b40      	cmp	r3, #64	; 0x40
 80043b4:	d86f      	bhi.n	8004496 <HAL_TIM_ConfigClockSource+0x16c>
 80043b6:	2b30      	cmp	r3, #48	; 0x30
 80043b8:	d064      	beq.n	8004484 <HAL_TIM_ConfigClockSource+0x15a>
 80043ba:	2b30      	cmp	r3, #48	; 0x30
 80043bc:	d86b      	bhi.n	8004496 <HAL_TIM_ConfigClockSource+0x16c>
 80043be:	2b20      	cmp	r3, #32
 80043c0:	d060      	beq.n	8004484 <HAL_TIM_ConfigClockSource+0x15a>
 80043c2:	2b20      	cmp	r3, #32
 80043c4:	d867      	bhi.n	8004496 <HAL_TIM_ConfigClockSource+0x16c>
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d05c      	beq.n	8004484 <HAL_TIM_ConfigClockSource+0x15a>
 80043ca:	2b10      	cmp	r3, #16
 80043cc:	d05a      	beq.n	8004484 <HAL_TIM_ConfigClockSource+0x15a>
 80043ce:	e062      	b.n	8004496 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043e0:	f000 f989 	bl	80046f6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043f2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	609a      	str	r2, [r3, #8]
      break;
 80043fc:	e04f      	b.n	800449e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800440e:	f000 f972 	bl	80046f6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004420:	609a      	str	r2, [r3, #8]
      break;
 8004422:	e03c      	b.n	800449e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004430:	461a      	mov	r2, r3
 8004432:	f000 f8e9 	bl	8004608 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2150      	movs	r1, #80	; 0x50
 800443c:	4618      	mov	r0, r3
 800443e:	f000 f940 	bl	80046c2 <TIM_ITRx_SetConfig>
      break;
 8004442:	e02c      	b.n	800449e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004450:	461a      	mov	r2, r3
 8004452:	f000 f907 	bl	8004664 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2160      	movs	r1, #96	; 0x60
 800445c:	4618      	mov	r0, r3
 800445e:	f000 f930 	bl	80046c2 <TIM_ITRx_SetConfig>
      break;
 8004462:	e01c      	b.n	800449e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004470:	461a      	mov	r2, r3
 8004472:	f000 f8c9 	bl	8004608 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2140      	movs	r1, #64	; 0x40
 800447c:	4618      	mov	r0, r3
 800447e:	f000 f920 	bl	80046c2 <TIM_ITRx_SetConfig>
      break;
 8004482:	e00c      	b.n	800449e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4619      	mov	r1, r3
 800448e:	4610      	mov	r0, r2
 8004490:	f000 f917 	bl	80046c2 <TIM_ITRx_SetConfig>
      break;
 8004494:	e003      	b.n	800449e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	73fb      	strb	r3, [r7, #15]
      break;
 800449a:	e000      	b.n	800449e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800449c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bc80      	pop	{r7}
 80044c8:	4770      	bx	lr

080044ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bc80      	pop	{r7}
 80044da:	4770      	bx	lr

080044dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bc80      	pop	{r7}
 80044ec:	4770      	bx	lr

080044ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044ee:	b480      	push	{r7}
 80044f0:	b083      	sub	sp, #12
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044f6:	bf00      	nop
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bc80      	pop	{r7}
 80044fe:	4770      	bx	lr

08004500 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	bc80      	pop	{r7}
 8004510:	4770      	bx	lr
	...

08004514 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a33      	ldr	r2, [pc, #204]	; (80045f4 <TIM_Base_SetConfig+0xe0>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d013      	beq.n	8004554 <TIM_Base_SetConfig+0x40>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a32      	ldr	r2, [pc, #200]	; (80045f8 <TIM_Base_SetConfig+0xe4>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d00f      	beq.n	8004554 <TIM_Base_SetConfig+0x40>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800453a:	d00b      	beq.n	8004554 <TIM_Base_SetConfig+0x40>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a2f      	ldr	r2, [pc, #188]	; (80045fc <TIM_Base_SetConfig+0xe8>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d007      	beq.n	8004554 <TIM_Base_SetConfig+0x40>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a2e      	ldr	r2, [pc, #184]	; (8004600 <TIM_Base_SetConfig+0xec>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d003      	beq.n	8004554 <TIM_Base_SetConfig+0x40>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a2d      	ldr	r2, [pc, #180]	; (8004604 <TIM_Base_SetConfig+0xf0>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d108      	bne.n	8004566 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800455a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	4313      	orrs	r3, r2
 8004564:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a22      	ldr	r2, [pc, #136]	; (80045f4 <TIM_Base_SetConfig+0xe0>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d013      	beq.n	8004596 <TIM_Base_SetConfig+0x82>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a21      	ldr	r2, [pc, #132]	; (80045f8 <TIM_Base_SetConfig+0xe4>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d00f      	beq.n	8004596 <TIM_Base_SetConfig+0x82>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800457c:	d00b      	beq.n	8004596 <TIM_Base_SetConfig+0x82>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a1e      	ldr	r2, [pc, #120]	; (80045fc <TIM_Base_SetConfig+0xe8>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d007      	beq.n	8004596 <TIM_Base_SetConfig+0x82>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a1d      	ldr	r2, [pc, #116]	; (8004600 <TIM_Base_SetConfig+0xec>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d003      	beq.n	8004596 <TIM_Base_SetConfig+0x82>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a1c      	ldr	r2, [pc, #112]	; (8004604 <TIM_Base_SetConfig+0xf0>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d108      	bne.n	80045a8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800459c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	689a      	ldr	r2, [r3, #8]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a09      	ldr	r2, [pc, #36]	; (80045f4 <TIM_Base_SetConfig+0xe0>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d003      	beq.n	80045dc <TIM_Base_SetConfig+0xc8>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a08      	ldr	r2, [pc, #32]	; (80045f8 <TIM_Base_SetConfig+0xe4>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d103      	bne.n	80045e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	691a      	ldr	r2, [r3, #16]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	615a      	str	r2, [r3, #20]
}
 80045ea:	bf00      	nop
 80045ec:	3714      	adds	r7, #20
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bc80      	pop	{r7}
 80045f2:	4770      	bx	lr
 80045f4:	40012c00 	.word	0x40012c00
 80045f8:	40013400 	.word	0x40013400
 80045fc:	40000400 	.word	0x40000400
 8004600:	40000800 	.word	0x40000800
 8004604:	40000c00 	.word	0x40000c00

08004608 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004608:	b480      	push	{r7}
 800460a:	b087      	sub	sp, #28
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	f023 0201 	bic.w	r2, r3, #1
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004632:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	011b      	lsls	r3, r3, #4
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	4313      	orrs	r3, r2
 800463c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f023 030a 	bic.w	r3, r3, #10
 8004644:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	4313      	orrs	r3, r2
 800464c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	621a      	str	r2, [r3, #32]
}
 800465a:	bf00      	nop
 800465c:	371c      	adds	r7, #28
 800465e:	46bd      	mov	sp, r7
 8004660:	bc80      	pop	{r7}
 8004662:	4770      	bx	lr

08004664 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004664:	b480      	push	{r7}
 8004666:	b087      	sub	sp, #28
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6a1b      	ldr	r3, [r3, #32]
 8004674:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	f023 0210 	bic.w	r2, r3, #16
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800468e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	031b      	lsls	r3, r3, #12
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	4313      	orrs	r3, r2
 8004698:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046a0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	011b      	lsls	r3, r3, #4
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	621a      	str	r2, [r3, #32]
}
 80046b8:	bf00      	nop
 80046ba:	371c      	adds	r7, #28
 80046bc:	46bd      	mov	sp, r7
 80046be:	bc80      	pop	{r7}
 80046c0:	4770      	bx	lr

080046c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046c2:	b480      	push	{r7}
 80046c4:	b085      	sub	sp, #20
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
 80046ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	4313      	orrs	r3, r2
 80046e0:	f043 0307 	orr.w	r3, r3, #7
 80046e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	609a      	str	r2, [r3, #8]
}
 80046ec:	bf00      	nop
 80046ee:	3714      	adds	r7, #20
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bc80      	pop	{r7}
 80046f4:	4770      	bx	lr

080046f6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046f6:	b480      	push	{r7}
 80046f8:	b087      	sub	sp, #28
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	60f8      	str	r0, [r7, #12]
 80046fe:	60b9      	str	r1, [r7, #8]
 8004700:	607a      	str	r2, [r7, #4]
 8004702:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004710:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	021a      	lsls	r2, r3, #8
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	431a      	orrs	r2, r3
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	4313      	orrs	r3, r2
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	4313      	orrs	r3, r2
 8004722:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	609a      	str	r2, [r3, #8]
}
 800472a:	bf00      	nop
 800472c:	371c      	adds	r7, #28
 800472e:	46bd      	mov	sp, r7
 8004730:	bc80      	pop	{r7}
 8004732:	4770      	bx	lr

08004734 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004744:	2b01      	cmp	r3, #1
 8004746:	d101      	bne.n	800474c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004748:	2302      	movs	r3, #2
 800474a:	e050      	b.n	80047ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004772:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	4313      	orrs	r3, r2
 800477c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a1b      	ldr	r2, [pc, #108]	; (80047f8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d018      	beq.n	80047c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a19      	ldr	r2, [pc, #100]	; (80047fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d013      	beq.n	80047c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047a2:	d00e      	beq.n	80047c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a15      	ldr	r2, [pc, #84]	; (8004800 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d009      	beq.n	80047c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a14      	ldr	r2, [pc, #80]	; (8004804 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d004      	beq.n	80047c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a12      	ldr	r2, [pc, #72]	; (8004808 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d10c      	bne.n	80047dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3714      	adds	r7, #20
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bc80      	pop	{r7}
 80047f6:	4770      	bx	lr
 80047f8:	40012c00 	.word	0x40012c00
 80047fc:	40013400 	.word	0x40013400
 8004800:	40000400 	.word	0x40000400
 8004804:	40000800 	.word	0x40000800
 8004808:	40000c00 	.word	0x40000c00

0800480c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	bc80      	pop	{r7}
 800481c:	4770      	bx	lr

0800481e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800481e:	b480      	push	{r7}
 8004820:	b083      	sub	sp, #12
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	bc80      	pop	{r7}
 800482e:	4770      	bx	lr

08004830 <__cvt>:
 8004830:	2b00      	cmp	r3, #0
 8004832:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004836:	461f      	mov	r7, r3
 8004838:	bfbb      	ittet	lt
 800483a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800483e:	461f      	movlt	r7, r3
 8004840:	2300      	movge	r3, #0
 8004842:	232d      	movlt	r3, #45	; 0x2d
 8004844:	b088      	sub	sp, #32
 8004846:	4614      	mov	r4, r2
 8004848:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800484a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800484c:	7013      	strb	r3, [r2, #0]
 800484e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004850:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004854:	f023 0820 	bic.w	r8, r3, #32
 8004858:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800485c:	d005      	beq.n	800486a <__cvt+0x3a>
 800485e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004862:	d100      	bne.n	8004866 <__cvt+0x36>
 8004864:	3501      	adds	r5, #1
 8004866:	2302      	movs	r3, #2
 8004868:	e000      	b.n	800486c <__cvt+0x3c>
 800486a:	2303      	movs	r3, #3
 800486c:	aa07      	add	r2, sp, #28
 800486e:	9204      	str	r2, [sp, #16]
 8004870:	aa06      	add	r2, sp, #24
 8004872:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004876:	e9cd 3500 	strd	r3, r5, [sp]
 800487a:	4622      	mov	r2, r4
 800487c:	463b      	mov	r3, r7
 800487e:	f001 f887 	bl	8005990 <_dtoa_r>
 8004882:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004886:	4606      	mov	r6, r0
 8004888:	d102      	bne.n	8004890 <__cvt+0x60>
 800488a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800488c:	07db      	lsls	r3, r3, #31
 800488e:	d522      	bpl.n	80048d6 <__cvt+0xa6>
 8004890:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004894:	eb06 0905 	add.w	r9, r6, r5
 8004898:	d110      	bne.n	80048bc <__cvt+0x8c>
 800489a:	7833      	ldrb	r3, [r6, #0]
 800489c:	2b30      	cmp	r3, #48	; 0x30
 800489e:	d10a      	bne.n	80048b6 <__cvt+0x86>
 80048a0:	2200      	movs	r2, #0
 80048a2:	2300      	movs	r3, #0
 80048a4:	4620      	mov	r0, r4
 80048a6:	4639      	mov	r1, r7
 80048a8:	f7fc f8ea 	bl	8000a80 <__aeabi_dcmpeq>
 80048ac:	b918      	cbnz	r0, 80048b6 <__cvt+0x86>
 80048ae:	f1c5 0501 	rsb	r5, r5, #1
 80048b2:	f8ca 5000 	str.w	r5, [sl]
 80048b6:	f8da 3000 	ldr.w	r3, [sl]
 80048ba:	4499      	add	r9, r3
 80048bc:	2200      	movs	r2, #0
 80048be:	2300      	movs	r3, #0
 80048c0:	4620      	mov	r0, r4
 80048c2:	4639      	mov	r1, r7
 80048c4:	f7fc f8dc 	bl	8000a80 <__aeabi_dcmpeq>
 80048c8:	b108      	cbz	r0, 80048ce <__cvt+0x9e>
 80048ca:	f8cd 901c 	str.w	r9, [sp, #28]
 80048ce:	2230      	movs	r2, #48	; 0x30
 80048d0:	9b07      	ldr	r3, [sp, #28]
 80048d2:	454b      	cmp	r3, r9
 80048d4:	d307      	bcc.n	80048e6 <__cvt+0xb6>
 80048d6:	4630      	mov	r0, r6
 80048d8:	9b07      	ldr	r3, [sp, #28]
 80048da:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80048dc:	1b9b      	subs	r3, r3, r6
 80048de:	6013      	str	r3, [r2, #0]
 80048e0:	b008      	add	sp, #32
 80048e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048e6:	1c59      	adds	r1, r3, #1
 80048e8:	9107      	str	r1, [sp, #28]
 80048ea:	701a      	strb	r2, [r3, #0]
 80048ec:	e7f0      	b.n	80048d0 <__cvt+0xa0>

080048ee <__exponent>:
 80048ee:	4603      	mov	r3, r0
 80048f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048f2:	2900      	cmp	r1, #0
 80048f4:	f803 2b02 	strb.w	r2, [r3], #2
 80048f8:	bfb6      	itet	lt
 80048fa:	222d      	movlt	r2, #45	; 0x2d
 80048fc:	222b      	movge	r2, #43	; 0x2b
 80048fe:	4249      	neglt	r1, r1
 8004900:	2909      	cmp	r1, #9
 8004902:	7042      	strb	r2, [r0, #1]
 8004904:	dd2a      	ble.n	800495c <__exponent+0x6e>
 8004906:	f10d 0207 	add.w	r2, sp, #7
 800490a:	4617      	mov	r7, r2
 800490c:	260a      	movs	r6, #10
 800490e:	fb91 f5f6 	sdiv	r5, r1, r6
 8004912:	4694      	mov	ip, r2
 8004914:	fb06 1415 	mls	r4, r6, r5, r1
 8004918:	3430      	adds	r4, #48	; 0x30
 800491a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800491e:	460c      	mov	r4, r1
 8004920:	2c63      	cmp	r4, #99	; 0x63
 8004922:	4629      	mov	r1, r5
 8004924:	f102 32ff 	add.w	r2, r2, #4294967295
 8004928:	dcf1      	bgt.n	800490e <__exponent+0x20>
 800492a:	3130      	adds	r1, #48	; 0x30
 800492c:	f1ac 0402 	sub.w	r4, ip, #2
 8004930:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004934:	4622      	mov	r2, r4
 8004936:	1c41      	adds	r1, r0, #1
 8004938:	42ba      	cmp	r2, r7
 800493a:	d30a      	bcc.n	8004952 <__exponent+0x64>
 800493c:	f10d 0209 	add.w	r2, sp, #9
 8004940:	eba2 020c 	sub.w	r2, r2, ip
 8004944:	42bc      	cmp	r4, r7
 8004946:	bf88      	it	hi
 8004948:	2200      	movhi	r2, #0
 800494a:	4413      	add	r3, r2
 800494c:	1a18      	subs	r0, r3, r0
 800494e:	b003      	add	sp, #12
 8004950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004952:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004956:	f801 5f01 	strb.w	r5, [r1, #1]!
 800495a:	e7ed      	b.n	8004938 <__exponent+0x4a>
 800495c:	2330      	movs	r3, #48	; 0x30
 800495e:	3130      	adds	r1, #48	; 0x30
 8004960:	7083      	strb	r3, [r0, #2]
 8004962:	70c1      	strb	r1, [r0, #3]
 8004964:	1d03      	adds	r3, r0, #4
 8004966:	e7f1      	b.n	800494c <__exponent+0x5e>

08004968 <_printf_float>:
 8004968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800496c:	b091      	sub	sp, #68	; 0x44
 800496e:	460c      	mov	r4, r1
 8004970:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004974:	4616      	mov	r6, r2
 8004976:	461f      	mov	r7, r3
 8004978:	4605      	mov	r5, r0
 800497a:	f000 fef3 	bl	8005764 <_localeconv_r>
 800497e:	6803      	ldr	r3, [r0, #0]
 8004980:	4618      	mov	r0, r3
 8004982:	9309      	str	r3, [sp, #36]	; 0x24
 8004984:	f7fb fc50 	bl	8000228 <strlen>
 8004988:	2300      	movs	r3, #0
 800498a:	930e      	str	r3, [sp, #56]	; 0x38
 800498c:	f8d8 3000 	ldr.w	r3, [r8]
 8004990:	900a      	str	r0, [sp, #40]	; 0x28
 8004992:	3307      	adds	r3, #7
 8004994:	f023 0307 	bic.w	r3, r3, #7
 8004998:	f103 0208 	add.w	r2, r3, #8
 800499c:	f894 9018 	ldrb.w	r9, [r4, #24]
 80049a0:	f8d4 b000 	ldr.w	fp, [r4]
 80049a4:	f8c8 2000 	str.w	r2, [r8]
 80049a8:	e9d3 a800 	ldrd	sl, r8, [r3]
 80049ac:	4652      	mov	r2, sl
 80049ae:	4643      	mov	r3, r8
 80049b0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80049b4:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80049b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80049ba:	f04f 32ff 	mov.w	r2, #4294967295
 80049be:	4650      	mov	r0, sl
 80049c0:	4b9c      	ldr	r3, [pc, #624]	; (8004c34 <_printf_float+0x2cc>)
 80049c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80049c4:	f7fc f88e 	bl	8000ae4 <__aeabi_dcmpun>
 80049c8:	bb70      	cbnz	r0, 8004a28 <_printf_float+0xc0>
 80049ca:	f04f 32ff 	mov.w	r2, #4294967295
 80049ce:	4650      	mov	r0, sl
 80049d0:	4b98      	ldr	r3, [pc, #608]	; (8004c34 <_printf_float+0x2cc>)
 80049d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80049d4:	f7fc f868 	bl	8000aa8 <__aeabi_dcmple>
 80049d8:	bb30      	cbnz	r0, 8004a28 <_printf_float+0xc0>
 80049da:	2200      	movs	r2, #0
 80049dc:	2300      	movs	r3, #0
 80049de:	4650      	mov	r0, sl
 80049e0:	4641      	mov	r1, r8
 80049e2:	f7fc f857 	bl	8000a94 <__aeabi_dcmplt>
 80049e6:	b110      	cbz	r0, 80049ee <_printf_float+0x86>
 80049e8:	232d      	movs	r3, #45	; 0x2d
 80049ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049ee:	4a92      	ldr	r2, [pc, #584]	; (8004c38 <_printf_float+0x2d0>)
 80049f0:	4b92      	ldr	r3, [pc, #584]	; (8004c3c <_printf_float+0x2d4>)
 80049f2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80049f6:	bf94      	ite	ls
 80049f8:	4690      	movls	r8, r2
 80049fa:	4698      	movhi	r8, r3
 80049fc:	2303      	movs	r3, #3
 80049fe:	f04f 0a00 	mov.w	sl, #0
 8004a02:	6123      	str	r3, [r4, #16]
 8004a04:	f02b 0304 	bic.w	r3, fp, #4
 8004a08:	6023      	str	r3, [r4, #0]
 8004a0a:	4633      	mov	r3, r6
 8004a0c:	4621      	mov	r1, r4
 8004a0e:	4628      	mov	r0, r5
 8004a10:	9700      	str	r7, [sp, #0]
 8004a12:	aa0f      	add	r2, sp, #60	; 0x3c
 8004a14:	f000 f9d6 	bl	8004dc4 <_printf_common>
 8004a18:	3001      	adds	r0, #1
 8004a1a:	f040 8090 	bne.w	8004b3e <_printf_float+0x1d6>
 8004a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a22:	b011      	add	sp, #68	; 0x44
 8004a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a28:	4652      	mov	r2, sl
 8004a2a:	4643      	mov	r3, r8
 8004a2c:	4650      	mov	r0, sl
 8004a2e:	4641      	mov	r1, r8
 8004a30:	f7fc f858 	bl	8000ae4 <__aeabi_dcmpun>
 8004a34:	b148      	cbz	r0, 8004a4a <_printf_float+0xe2>
 8004a36:	f1b8 0f00 	cmp.w	r8, #0
 8004a3a:	bfb8      	it	lt
 8004a3c:	232d      	movlt	r3, #45	; 0x2d
 8004a3e:	4a80      	ldr	r2, [pc, #512]	; (8004c40 <_printf_float+0x2d8>)
 8004a40:	bfb8      	it	lt
 8004a42:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004a46:	4b7f      	ldr	r3, [pc, #508]	; (8004c44 <_printf_float+0x2dc>)
 8004a48:	e7d3      	b.n	80049f2 <_printf_float+0x8a>
 8004a4a:	6863      	ldr	r3, [r4, #4]
 8004a4c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004a50:	1c5a      	adds	r2, r3, #1
 8004a52:	d142      	bne.n	8004ada <_printf_float+0x172>
 8004a54:	2306      	movs	r3, #6
 8004a56:	6063      	str	r3, [r4, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	9206      	str	r2, [sp, #24]
 8004a5c:	aa0e      	add	r2, sp, #56	; 0x38
 8004a5e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004a62:	aa0d      	add	r2, sp, #52	; 0x34
 8004a64:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004a68:	9203      	str	r2, [sp, #12]
 8004a6a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004a6e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004a72:	6023      	str	r3, [r4, #0]
 8004a74:	6863      	ldr	r3, [r4, #4]
 8004a76:	4652      	mov	r2, sl
 8004a78:	9300      	str	r3, [sp, #0]
 8004a7a:	4628      	mov	r0, r5
 8004a7c:	4643      	mov	r3, r8
 8004a7e:	910b      	str	r1, [sp, #44]	; 0x2c
 8004a80:	f7ff fed6 	bl	8004830 <__cvt>
 8004a84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a86:	4680      	mov	r8, r0
 8004a88:	2947      	cmp	r1, #71	; 0x47
 8004a8a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004a8c:	d108      	bne.n	8004aa0 <_printf_float+0x138>
 8004a8e:	1cc8      	adds	r0, r1, #3
 8004a90:	db02      	blt.n	8004a98 <_printf_float+0x130>
 8004a92:	6863      	ldr	r3, [r4, #4]
 8004a94:	4299      	cmp	r1, r3
 8004a96:	dd40      	ble.n	8004b1a <_printf_float+0x1b2>
 8004a98:	f1a9 0902 	sub.w	r9, r9, #2
 8004a9c:	fa5f f989 	uxtb.w	r9, r9
 8004aa0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004aa4:	d81f      	bhi.n	8004ae6 <_printf_float+0x17e>
 8004aa6:	464a      	mov	r2, r9
 8004aa8:	3901      	subs	r1, #1
 8004aaa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004aae:	910d      	str	r1, [sp, #52]	; 0x34
 8004ab0:	f7ff ff1d 	bl	80048ee <__exponent>
 8004ab4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ab6:	4682      	mov	sl, r0
 8004ab8:	1813      	adds	r3, r2, r0
 8004aba:	2a01      	cmp	r2, #1
 8004abc:	6123      	str	r3, [r4, #16]
 8004abe:	dc02      	bgt.n	8004ac6 <_printf_float+0x15e>
 8004ac0:	6822      	ldr	r2, [r4, #0]
 8004ac2:	07d2      	lsls	r2, r2, #31
 8004ac4:	d501      	bpl.n	8004aca <_printf_float+0x162>
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	6123      	str	r3, [r4, #16]
 8004aca:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d09b      	beq.n	8004a0a <_printf_float+0xa2>
 8004ad2:	232d      	movs	r3, #45	; 0x2d
 8004ad4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ad8:	e797      	b.n	8004a0a <_printf_float+0xa2>
 8004ada:	2947      	cmp	r1, #71	; 0x47
 8004adc:	d1bc      	bne.n	8004a58 <_printf_float+0xf0>
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1ba      	bne.n	8004a58 <_printf_float+0xf0>
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e7b7      	b.n	8004a56 <_printf_float+0xee>
 8004ae6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004aea:	d118      	bne.n	8004b1e <_printf_float+0x1b6>
 8004aec:	2900      	cmp	r1, #0
 8004aee:	6863      	ldr	r3, [r4, #4]
 8004af0:	dd0b      	ble.n	8004b0a <_printf_float+0x1a2>
 8004af2:	6121      	str	r1, [r4, #16]
 8004af4:	b913      	cbnz	r3, 8004afc <_printf_float+0x194>
 8004af6:	6822      	ldr	r2, [r4, #0]
 8004af8:	07d0      	lsls	r0, r2, #31
 8004afa:	d502      	bpl.n	8004b02 <_printf_float+0x19a>
 8004afc:	3301      	adds	r3, #1
 8004afe:	440b      	add	r3, r1
 8004b00:	6123      	str	r3, [r4, #16]
 8004b02:	f04f 0a00 	mov.w	sl, #0
 8004b06:	65a1      	str	r1, [r4, #88]	; 0x58
 8004b08:	e7df      	b.n	8004aca <_printf_float+0x162>
 8004b0a:	b913      	cbnz	r3, 8004b12 <_printf_float+0x1aa>
 8004b0c:	6822      	ldr	r2, [r4, #0]
 8004b0e:	07d2      	lsls	r2, r2, #31
 8004b10:	d501      	bpl.n	8004b16 <_printf_float+0x1ae>
 8004b12:	3302      	adds	r3, #2
 8004b14:	e7f4      	b.n	8004b00 <_printf_float+0x198>
 8004b16:	2301      	movs	r3, #1
 8004b18:	e7f2      	b.n	8004b00 <_printf_float+0x198>
 8004b1a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004b1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b20:	4299      	cmp	r1, r3
 8004b22:	db05      	blt.n	8004b30 <_printf_float+0x1c8>
 8004b24:	6823      	ldr	r3, [r4, #0]
 8004b26:	6121      	str	r1, [r4, #16]
 8004b28:	07d8      	lsls	r0, r3, #31
 8004b2a:	d5ea      	bpl.n	8004b02 <_printf_float+0x19a>
 8004b2c:	1c4b      	adds	r3, r1, #1
 8004b2e:	e7e7      	b.n	8004b00 <_printf_float+0x198>
 8004b30:	2900      	cmp	r1, #0
 8004b32:	bfcc      	ite	gt
 8004b34:	2201      	movgt	r2, #1
 8004b36:	f1c1 0202 	rsble	r2, r1, #2
 8004b3a:	4413      	add	r3, r2
 8004b3c:	e7e0      	b.n	8004b00 <_printf_float+0x198>
 8004b3e:	6823      	ldr	r3, [r4, #0]
 8004b40:	055a      	lsls	r2, r3, #21
 8004b42:	d407      	bmi.n	8004b54 <_printf_float+0x1ec>
 8004b44:	6923      	ldr	r3, [r4, #16]
 8004b46:	4642      	mov	r2, r8
 8004b48:	4631      	mov	r1, r6
 8004b4a:	4628      	mov	r0, r5
 8004b4c:	47b8      	blx	r7
 8004b4e:	3001      	adds	r0, #1
 8004b50:	d12b      	bne.n	8004baa <_printf_float+0x242>
 8004b52:	e764      	b.n	8004a1e <_printf_float+0xb6>
 8004b54:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004b58:	f240 80dd 	bls.w	8004d16 <_printf_float+0x3ae>
 8004b5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b60:	2200      	movs	r2, #0
 8004b62:	2300      	movs	r3, #0
 8004b64:	f7fb ff8c 	bl	8000a80 <__aeabi_dcmpeq>
 8004b68:	2800      	cmp	r0, #0
 8004b6a:	d033      	beq.n	8004bd4 <_printf_float+0x26c>
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	4631      	mov	r1, r6
 8004b70:	4628      	mov	r0, r5
 8004b72:	4a35      	ldr	r2, [pc, #212]	; (8004c48 <_printf_float+0x2e0>)
 8004b74:	47b8      	blx	r7
 8004b76:	3001      	adds	r0, #1
 8004b78:	f43f af51 	beq.w	8004a1e <_printf_float+0xb6>
 8004b7c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004b80:	429a      	cmp	r2, r3
 8004b82:	db02      	blt.n	8004b8a <_printf_float+0x222>
 8004b84:	6823      	ldr	r3, [r4, #0]
 8004b86:	07d8      	lsls	r0, r3, #31
 8004b88:	d50f      	bpl.n	8004baa <_printf_float+0x242>
 8004b8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b8e:	4631      	mov	r1, r6
 8004b90:	4628      	mov	r0, r5
 8004b92:	47b8      	blx	r7
 8004b94:	3001      	adds	r0, #1
 8004b96:	f43f af42 	beq.w	8004a1e <_printf_float+0xb6>
 8004b9a:	f04f 0800 	mov.w	r8, #0
 8004b9e:	f104 091a 	add.w	r9, r4, #26
 8004ba2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	4543      	cmp	r3, r8
 8004ba8:	dc09      	bgt.n	8004bbe <_printf_float+0x256>
 8004baa:	6823      	ldr	r3, [r4, #0]
 8004bac:	079b      	lsls	r3, r3, #30
 8004bae:	f100 8104 	bmi.w	8004dba <_printf_float+0x452>
 8004bb2:	68e0      	ldr	r0, [r4, #12]
 8004bb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004bb6:	4298      	cmp	r0, r3
 8004bb8:	bfb8      	it	lt
 8004bba:	4618      	movlt	r0, r3
 8004bbc:	e731      	b.n	8004a22 <_printf_float+0xba>
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	464a      	mov	r2, r9
 8004bc2:	4631      	mov	r1, r6
 8004bc4:	4628      	mov	r0, r5
 8004bc6:	47b8      	blx	r7
 8004bc8:	3001      	adds	r0, #1
 8004bca:	f43f af28 	beq.w	8004a1e <_printf_float+0xb6>
 8004bce:	f108 0801 	add.w	r8, r8, #1
 8004bd2:	e7e6      	b.n	8004ba2 <_printf_float+0x23a>
 8004bd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	dc38      	bgt.n	8004c4c <_printf_float+0x2e4>
 8004bda:	2301      	movs	r3, #1
 8004bdc:	4631      	mov	r1, r6
 8004bde:	4628      	mov	r0, r5
 8004be0:	4a19      	ldr	r2, [pc, #100]	; (8004c48 <_printf_float+0x2e0>)
 8004be2:	47b8      	blx	r7
 8004be4:	3001      	adds	r0, #1
 8004be6:	f43f af1a 	beq.w	8004a1e <_printf_float+0xb6>
 8004bea:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	d102      	bne.n	8004bf8 <_printf_float+0x290>
 8004bf2:	6823      	ldr	r3, [r4, #0]
 8004bf4:	07d9      	lsls	r1, r3, #31
 8004bf6:	d5d8      	bpl.n	8004baa <_printf_float+0x242>
 8004bf8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004bfc:	4631      	mov	r1, r6
 8004bfe:	4628      	mov	r0, r5
 8004c00:	47b8      	blx	r7
 8004c02:	3001      	adds	r0, #1
 8004c04:	f43f af0b 	beq.w	8004a1e <_printf_float+0xb6>
 8004c08:	f04f 0900 	mov.w	r9, #0
 8004c0c:	f104 0a1a 	add.w	sl, r4, #26
 8004c10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c12:	425b      	negs	r3, r3
 8004c14:	454b      	cmp	r3, r9
 8004c16:	dc01      	bgt.n	8004c1c <_printf_float+0x2b4>
 8004c18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c1a:	e794      	b.n	8004b46 <_printf_float+0x1de>
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	4652      	mov	r2, sl
 8004c20:	4631      	mov	r1, r6
 8004c22:	4628      	mov	r0, r5
 8004c24:	47b8      	blx	r7
 8004c26:	3001      	adds	r0, #1
 8004c28:	f43f aef9 	beq.w	8004a1e <_printf_float+0xb6>
 8004c2c:	f109 0901 	add.w	r9, r9, #1
 8004c30:	e7ee      	b.n	8004c10 <_printf_float+0x2a8>
 8004c32:	bf00      	nop
 8004c34:	7fefffff 	.word	0x7fefffff
 8004c38:	08009782 	.word	0x08009782
 8004c3c:	08009786 	.word	0x08009786
 8004c40:	0800978a 	.word	0x0800978a
 8004c44:	0800978e 	.word	0x0800978e
 8004c48:	08009792 	.word	0x08009792
 8004c4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c50:	429a      	cmp	r2, r3
 8004c52:	bfa8      	it	ge
 8004c54:	461a      	movge	r2, r3
 8004c56:	2a00      	cmp	r2, #0
 8004c58:	4691      	mov	r9, r2
 8004c5a:	dc37      	bgt.n	8004ccc <_printf_float+0x364>
 8004c5c:	f04f 0b00 	mov.w	fp, #0
 8004c60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c64:	f104 021a 	add.w	r2, r4, #26
 8004c68:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004c6c:	ebaa 0309 	sub.w	r3, sl, r9
 8004c70:	455b      	cmp	r3, fp
 8004c72:	dc33      	bgt.n	8004cdc <_printf_float+0x374>
 8004c74:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	db3b      	blt.n	8004cf4 <_printf_float+0x38c>
 8004c7c:	6823      	ldr	r3, [r4, #0]
 8004c7e:	07da      	lsls	r2, r3, #31
 8004c80:	d438      	bmi.n	8004cf4 <_printf_float+0x38c>
 8004c82:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004c86:	eba2 0903 	sub.w	r9, r2, r3
 8004c8a:	eba2 020a 	sub.w	r2, r2, sl
 8004c8e:	4591      	cmp	r9, r2
 8004c90:	bfa8      	it	ge
 8004c92:	4691      	movge	r9, r2
 8004c94:	f1b9 0f00 	cmp.w	r9, #0
 8004c98:	dc34      	bgt.n	8004d04 <_printf_float+0x39c>
 8004c9a:	f04f 0800 	mov.w	r8, #0
 8004c9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ca2:	f104 0a1a 	add.w	sl, r4, #26
 8004ca6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004caa:	1a9b      	subs	r3, r3, r2
 8004cac:	eba3 0309 	sub.w	r3, r3, r9
 8004cb0:	4543      	cmp	r3, r8
 8004cb2:	f77f af7a 	ble.w	8004baa <_printf_float+0x242>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	4652      	mov	r2, sl
 8004cba:	4631      	mov	r1, r6
 8004cbc:	4628      	mov	r0, r5
 8004cbe:	47b8      	blx	r7
 8004cc0:	3001      	adds	r0, #1
 8004cc2:	f43f aeac 	beq.w	8004a1e <_printf_float+0xb6>
 8004cc6:	f108 0801 	add.w	r8, r8, #1
 8004cca:	e7ec      	b.n	8004ca6 <_printf_float+0x33e>
 8004ccc:	4613      	mov	r3, r2
 8004cce:	4631      	mov	r1, r6
 8004cd0:	4642      	mov	r2, r8
 8004cd2:	4628      	mov	r0, r5
 8004cd4:	47b8      	blx	r7
 8004cd6:	3001      	adds	r0, #1
 8004cd8:	d1c0      	bne.n	8004c5c <_printf_float+0x2f4>
 8004cda:	e6a0      	b.n	8004a1e <_printf_float+0xb6>
 8004cdc:	2301      	movs	r3, #1
 8004cde:	4631      	mov	r1, r6
 8004ce0:	4628      	mov	r0, r5
 8004ce2:	920b      	str	r2, [sp, #44]	; 0x2c
 8004ce4:	47b8      	blx	r7
 8004ce6:	3001      	adds	r0, #1
 8004ce8:	f43f ae99 	beq.w	8004a1e <_printf_float+0xb6>
 8004cec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004cee:	f10b 0b01 	add.w	fp, fp, #1
 8004cf2:	e7b9      	b.n	8004c68 <_printf_float+0x300>
 8004cf4:	4631      	mov	r1, r6
 8004cf6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	47b8      	blx	r7
 8004cfe:	3001      	adds	r0, #1
 8004d00:	d1bf      	bne.n	8004c82 <_printf_float+0x31a>
 8004d02:	e68c      	b.n	8004a1e <_printf_float+0xb6>
 8004d04:	464b      	mov	r3, r9
 8004d06:	4631      	mov	r1, r6
 8004d08:	4628      	mov	r0, r5
 8004d0a:	eb08 020a 	add.w	r2, r8, sl
 8004d0e:	47b8      	blx	r7
 8004d10:	3001      	adds	r0, #1
 8004d12:	d1c2      	bne.n	8004c9a <_printf_float+0x332>
 8004d14:	e683      	b.n	8004a1e <_printf_float+0xb6>
 8004d16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d18:	2a01      	cmp	r2, #1
 8004d1a:	dc01      	bgt.n	8004d20 <_printf_float+0x3b8>
 8004d1c:	07db      	lsls	r3, r3, #31
 8004d1e:	d539      	bpl.n	8004d94 <_printf_float+0x42c>
 8004d20:	2301      	movs	r3, #1
 8004d22:	4642      	mov	r2, r8
 8004d24:	4631      	mov	r1, r6
 8004d26:	4628      	mov	r0, r5
 8004d28:	47b8      	blx	r7
 8004d2a:	3001      	adds	r0, #1
 8004d2c:	f43f ae77 	beq.w	8004a1e <_printf_float+0xb6>
 8004d30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d34:	4631      	mov	r1, r6
 8004d36:	4628      	mov	r0, r5
 8004d38:	47b8      	blx	r7
 8004d3a:	3001      	adds	r0, #1
 8004d3c:	f43f ae6f 	beq.w	8004a1e <_printf_float+0xb6>
 8004d40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d44:	2200      	movs	r2, #0
 8004d46:	2300      	movs	r3, #0
 8004d48:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004d4c:	f7fb fe98 	bl	8000a80 <__aeabi_dcmpeq>
 8004d50:	b9d8      	cbnz	r0, 8004d8a <_printf_float+0x422>
 8004d52:	f109 33ff 	add.w	r3, r9, #4294967295
 8004d56:	f108 0201 	add.w	r2, r8, #1
 8004d5a:	4631      	mov	r1, r6
 8004d5c:	4628      	mov	r0, r5
 8004d5e:	47b8      	blx	r7
 8004d60:	3001      	adds	r0, #1
 8004d62:	d10e      	bne.n	8004d82 <_printf_float+0x41a>
 8004d64:	e65b      	b.n	8004a1e <_printf_float+0xb6>
 8004d66:	2301      	movs	r3, #1
 8004d68:	464a      	mov	r2, r9
 8004d6a:	4631      	mov	r1, r6
 8004d6c:	4628      	mov	r0, r5
 8004d6e:	47b8      	blx	r7
 8004d70:	3001      	adds	r0, #1
 8004d72:	f43f ae54 	beq.w	8004a1e <_printf_float+0xb6>
 8004d76:	f108 0801 	add.w	r8, r8, #1
 8004d7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	4543      	cmp	r3, r8
 8004d80:	dcf1      	bgt.n	8004d66 <_printf_float+0x3fe>
 8004d82:	4653      	mov	r3, sl
 8004d84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004d88:	e6de      	b.n	8004b48 <_printf_float+0x1e0>
 8004d8a:	f04f 0800 	mov.w	r8, #0
 8004d8e:	f104 091a 	add.w	r9, r4, #26
 8004d92:	e7f2      	b.n	8004d7a <_printf_float+0x412>
 8004d94:	2301      	movs	r3, #1
 8004d96:	4642      	mov	r2, r8
 8004d98:	e7df      	b.n	8004d5a <_printf_float+0x3f2>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	464a      	mov	r2, r9
 8004d9e:	4631      	mov	r1, r6
 8004da0:	4628      	mov	r0, r5
 8004da2:	47b8      	blx	r7
 8004da4:	3001      	adds	r0, #1
 8004da6:	f43f ae3a 	beq.w	8004a1e <_printf_float+0xb6>
 8004daa:	f108 0801 	add.w	r8, r8, #1
 8004dae:	68e3      	ldr	r3, [r4, #12]
 8004db0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004db2:	1a5b      	subs	r3, r3, r1
 8004db4:	4543      	cmp	r3, r8
 8004db6:	dcf0      	bgt.n	8004d9a <_printf_float+0x432>
 8004db8:	e6fb      	b.n	8004bb2 <_printf_float+0x24a>
 8004dba:	f04f 0800 	mov.w	r8, #0
 8004dbe:	f104 0919 	add.w	r9, r4, #25
 8004dc2:	e7f4      	b.n	8004dae <_printf_float+0x446>

08004dc4 <_printf_common>:
 8004dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dc8:	4616      	mov	r6, r2
 8004dca:	4699      	mov	r9, r3
 8004dcc:	688a      	ldr	r2, [r1, #8]
 8004dce:	690b      	ldr	r3, [r1, #16]
 8004dd0:	4607      	mov	r7, r0
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	bfb8      	it	lt
 8004dd6:	4613      	movlt	r3, r2
 8004dd8:	6033      	str	r3, [r6, #0]
 8004dda:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004dde:	460c      	mov	r4, r1
 8004de0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004de4:	b10a      	cbz	r2, 8004dea <_printf_common+0x26>
 8004de6:	3301      	adds	r3, #1
 8004de8:	6033      	str	r3, [r6, #0]
 8004dea:	6823      	ldr	r3, [r4, #0]
 8004dec:	0699      	lsls	r1, r3, #26
 8004dee:	bf42      	ittt	mi
 8004df0:	6833      	ldrmi	r3, [r6, #0]
 8004df2:	3302      	addmi	r3, #2
 8004df4:	6033      	strmi	r3, [r6, #0]
 8004df6:	6825      	ldr	r5, [r4, #0]
 8004df8:	f015 0506 	ands.w	r5, r5, #6
 8004dfc:	d106      	bne.n	8004e0c <_printf_common+0x48>
 8004dfe:	f104 0a19 	add.w	sl, r4, #25
 8004e02:	68e3      	ldr	r3, [r4, #12]
 8004e04:	6832      	ldr	r2, [r6, #0]
 8004e06:	1a9b      	subs	r3, r3, r2
 8004e08:	42ab      	cmp	r3, r5
 8004e0a:	dc2b      	bgt.n	8004e64 <_printf_common+0xa0>
 8004e0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e10:	1e13      	subs	r3, r2, #0
 8004e12:	6822      	ldr	r2, [r4, #0]
 8004e14:	bf18      	it	ne
 8004e16:	2301      	movne	r3, #1
 8004e18:	0692      	lsls	r2, r2, #26
 8004e1a:	d430      	bmi.n	8004e7e <_printf_common+0xba>
 8004e1c:	4649      	mov	r1, r9
 8004e1e:	4638      	mov	r0, r7
 8004e20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e24:	47c0      	blx	r8
 8004e26:	3001      	adds	r0, #1
 8004e28:	d023      	beq.n	8004e72 <_printf_common+0xae>
 8004e2a:	6823      	ldr	r3, [r4, #0]
 8004e2c:	6922      	ldr	r2, [r4, #16]
 8004e2e:	f003 0306 	and.w	r3, r3, #6
 8004e32:	2b04      	cmp	r3, #4
 8004e34:	bf14      	ite	ne
 8004e36:	2500      	movne	r5, #0
 8004e38:	6833      	ldreq	r3, [r6, #0]
 8004e3a:	f04f 0600 	mov.w	r6, #0
 8004e3e:	bf08      	it	eq
 8004e40:	68e5      	ldreq	r5, [r4, #12]
 8004e42:	f104 041a 	add.w	r4, r4, #26
 8004e46:	bf08      	it	eq
 8004e48:	1aed      	subeq	r5, r5, r3
 8004e4a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004e4e:	bf08      	it	eq
 8004e50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e54:	4293      	cmp	r3, r2
 8004e56:	bfc4      	itt	gt
 8004e58:	1a9b      	subgt	r3, r3, r2
 8004e5a:	18ed      	addgt	r5, r5, r3
 8004e5c:	42b5      	cmp	r5, r6
 8004e5e:	d11a      	bne.n	8004e96 <_printf_common+0xd2>
 8004e60:	2000      	movs	r0, #0
 8004e62:	e008      	b.n	8004e76 <_printf_common+0xb2>
 8004e64:	2301      	movs	r3, #1
 8004e66:	4652      	mov	r2, sl
 8004e68:	4649      	mov	r1, r9
 8004e6a:	4638      	mov	r0, r7
 8004e6c:	47c0      	blx	r8
 8004e6e:	3001      	adds	r0, #1
 8004e70:	d103      	bne.n	8004e7a <_printf_common+0xb6>
 8004e72:	f04f 30ff 	mov.w	r0, #4294967295
 8004e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e7a:	3501      	adds	r5, #1
 8004e7c:	e7c1      	b.n	8004e02 <_printf_common+0x3e>
 8004e7e:	2030      	movs	r0, #48	; 0x30
 8004e80:	18e1      	adds	r1, r4, r3
 8004e82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e86:	1c5a      	adds	r2, r3, #1
 8004e88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e8c:	4422      	add	r2, r4
 8004e8e:	3302      	adds	r3, #2
 8004e90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e94:	e7c2      	b.n	8004e1c <_printf_common+0x58>
 8004e96:	2301      	movs	r3, #1
 8004e98:	4622      	mov	r2, r4
 8004e9a:	4649      	mov	r1, r9
 8004e9c:	4638      	mov	r0, r7
 8004e9e:	47c0      	blx	r8
 8004ea0:	3001      	adds	r0, #1
 8004ea2:	d0e6      	beq.n	8004e72 <_printf_common+0xae>
 8004ea4:	3601      	adds	r6, #1
 8004ea6:	e7d9      	b.n	8004e5c <_printf_common+0x98>

08004ea8 <_printf_i>:
 8004ea8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004eac:	7e0f      	ldrb	r7, [r1, #24]
 8004eae:	4691      	mov	r9, r2
 8004eb0:	2f78      	cmp	r7, #120	; 0x78
 8004eb2:	4680      	mov	r8, r0
 8004eb4:	460c      	mov	r4, r1
 8004eb6:	469a      	mov	sl, r3
 8004eb8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004eba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004ebe:	d807      	bhi.n	8004ed0 <_printf_i+0x28>
 8004ec0:	2f62      	cmp	r7, #98	; 0x62
 8004ec2:	d80a      	bhi.n	8004eda <_printf_i+0x32>
 8004ec4:	2f00      	cmp	r7, #0
 8004ec6:	f000 80d5 	beq.w	8005074 <_printf_i+0x1cc>
 8004eca:	2f58      	cmp	r7, #88	; 0x58
 8004ecc:	f000 80c1 	beq.w	8005052 <_printf_i+0x1aa>
 8004ed0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ed4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ed8:	e03a      	b.n	8004f50 <_printf_i+0xa8>
 8004eda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ede:	2b15      	cmp	r3, #21
 8004ee0:	d8f6      	bhi.n	8004ed0 <_printf_i+0x28>
 8004ee2:	a101      	add	r1, pc, #4	; (adr r1, 8004ee8 <_printf_i+0x40>)
 8004ee4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ee8:	08004f41 	.word	0x08004f41
 8004eec:	08004f55 	.word	0x08004f55
 8004ef0:	08004ed1 	.word	0x08004ed1
 8004ef4:	08004ed1 	.word	0x08004ed1
 8004ef8:	08004ed1 	.word	0x08004ed1
 8004efc:	08004ed1 	.word	0x08004ed1
 8004f00:	08004f55 	.word	0x08004f55
 8004f04:	08004ed1 	.word	0x08004ed1
 8004f08:	08004ed1 	.word	0x08004ed1
 8004f0c:	08004ed1 	.word	0x08004ed1
 8004f10:	08004ed1 	.word	0x08004ed1
 8004f14:	0800505b 	.word	0x0800505b
 8004f18:	08004f81 	.word	0x08004f81
 8004f1c:	08005015 	.word	0x08005015
 8004f20:	08004ed1 	.word	0x08004ed1
 8004f24:	08004ed1 	.word	0x08004ed1
 8004f28:	0800507d 	.word	0x0800507d
 8004f2c:	08004ed1 	.word	0x08004ed1
 8004f30:	08004f81 	.word	0x08004f81
 8004f34:	08004ed1 	.word	0x08004ed1
 8004f38:	08004ed1 	.word	0x08004ed1
 8004f3c:	0800501d 	.word	0x0800501d
 8004f40:	682b      	ldr	r3, [r5, #0]
 8004f42:	1d1a      	adds	r2, r3, #4
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	602a      	str	r2, [r5, #0]
 8004f48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f50:	2301      	movs	r3, #1
 8004f52:	e0a0      	b.n	8005096 <_printf_i+0x1ee>
 8004f54:	6820      	ldr	r0, [r4, #0]
 8004f56:	682b      	ldr	r3, [r5, #0]
 8004f58:	0607      	lsls	r7, r0, #24
 8004f5a:	f103 0104 	add.w	r1, r3, #4
 8004f5e:	6029      	str	r1, [r5, #0]
 8004f60:	d501      	bpl.n	8004f66 <_printf_i+0xbe>
 8004f62:	681e      	ldr	r6, [r3, #0]
 8004f64:	e003      	b.n	8004f6e <_printf_i+0xc6>
 8004f66:	0646      	lsls	r6, r0, #25
 8004f68:	d5fb      	bpl.n	8004f62 <_printf_i+0xba>
 8004f6a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004f6e:	2e00      	cmp	r6, #0
 8004f70:	da03      	bge.n	8004f7a <_printf_i+0xd2>
 8004f72:	232d      	movs	r3, #45	; 0x2d
 8004f74:	4276      	negs	r6, r6
 8004f76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f7a:	230a      	movs	r3, #10
 8004f7c:	4859      	ldr	r0, [pc, #356]	; (80050e4 <_printf_i+0x23c>)
 8004f7e:	e012      	b.n	8004fa6 <_printf_i+0xfe>
 8004f80:	682b      	ldr	r3, [r5, #0]
 8004f82:	6820      	ldr	r0, [r4, #0]
 8004f84:	1d19      	adds	r1, r3, #4
 8004f86:	6029      	str	r1, [r5, #0]
 8004f88:	0605      	lsls	r5, r0, #24
 8004f8a:	d501      	bpl.n	8004f90 <_printf_i+0xe8>
 8004f8c:	681e      	ldr	r6, [r3, #0]
 8004f8e:	e002      	b.n	8004f96 <_printf_i+0xee>
 8004f90:	0641      	lsls	r1, r0, #25
 8004f92:	d5fb      	bpl.n	8004f8c <_printf_i+0xe4>
 8004f94:	881e      	ldrh	r6, [r3, #0]
 8004f96:	2f6f      	cmp	r7, #111	; 0x6f
 8004f98:	bf0c      	ite	eq
 8004f9a:	2308      	moveq	r3, #8
 8004f9c:	230a      	movne	r3, #10
 8004f9e:	4851      	ldr	r0, [pc, #324]	; (80050e4 <_printf_i+0x23c>)
 8004fa0:	2100      	movs	r1, #0
 8004fa2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004fa6:	6865      	ldr	r5, [r4, #4]
 8004fa8:	2d00      	cmp	r5, #0
 8004faa:	bfa8      	it	ge
 8004fac:	6821      	ldrge	r1, [r4, #0]
 8004fae:	60a5      	str	r5, [r4, #8]
 8004fb0:	bfa4      	itt	ge
 8004fb2:	f021 0104 	bicge.w	r1, r1, #4
 8004fb6:	6021      	strge	r1, [r4, #0]
 8004fb8:	b90e      	cbnz	r6, 8004fbe <_printf_i+0x116>
 8004fba:	2d00      	cmp	r5, #0
 8004fbc:	d04b      	beq.n	8005056 <_printf_i+0x1ae>
 8004fbe:	4615      	mov	r5, r2
 8004fc0:	fbb6 f1f3 	udiv	r1, r6, r3
 8004fc4:	fb03 6711 	mls	r7, r3, r1, r6
 8004fc8:	5dc7      	ldrb	r7, [r0, r7]
 8004fca:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004fce:	4637      	mov	r7, r6
 8004fd0:	42bb      	cmp	r3, r7
 8004fd2:	460e      	mov	r6, r1
 8004fd4:	d9f4      	bls.n	8004fc0 <_printf_i+0x118>
 8004fd6:	2b08      	cmp	r3, #8
 8004fd8:	d10b      	bne.n	8004ff2 <_printf_i+0x14a>
 8004fda:	6823      	ldr	r3, [r4, #0]
 8004fdc:	07de      	lsls	r6, r3, #31
 8004fde:	d508      	bpl.n	8004ff2 <_printf_i+0x14a>
 8004fe0:	6923      	ldr	r3, [r4, #16]
 8004fe2:	6861      	ldr	r1, [r4, #4]
 8004fe4:	4299      	cmp	r1, r3
 8004fe6:	bfde      	ittt	le
 8004fe8:	2330      	movle	r3, #48	; 0x30
 8004fea:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004fee:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ff2:	1b52      	subs	r2, r2, r5
 8004ff4:	6122      	str	r2, [r4, #16]
 8004ff6:	464b      	mov	r3, r9
 8004ff8:	4621      	mov	r1, r4
 8004ffa:	4640      	mov	r0, r8
 8004ffc:	f8cd a000 	str.w	sl, [sp]
 8005000:	aa03      	add	r2, sp, #12
 8005002:	f7ff fedf 	bl	8004dc4 <_printf_common>
 8005006:	3001      	adds	r0, #1
 8005008:	d14a      	bne.n	80050a0 <_printf_i+0x1f8>
 800500a:	f04f 30ff 	mov.w	r0, #4294967295
 800500e:	b004      	add	sp, #16
 8005010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005014:	6823      	ldr	r3, [r4, #0]
 8005016:	f043 0320 	orr.w	r3, r3, #32
 800501a:	6023      	str	r3, [r4, #0]
 800501c:	2778      	movs	r7, #120	; 0x78
 800501e:	4832      	ldr	r0, [pc, #200]	; (80050e8 <_printf_i+0x240>)
 8005020:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005024:	6823      	ldr	r3, [r4, #0]
 8005026:	6829      	ldr	r1, [r5, #0]
 8005028:	061f      	lsls	r7, r3, #24
 800502a:	f851 6b04 	ldr.w	r6, [r1], #4
 800502e:	d402      	bmi.n	8005036 <_printf_i+0x18e>
 8005030:	065f      	lsls	r7, r3, #25
 8005032:	bf48      	it	mi
 8005034:	b2b6      	uxthmi	r6, r6
 8005036:	07df      	lsls	r7, r3, #31
 8005038:	bf48      	it	mi
 800503a:	f043 0320 	orrmi.w	r3, r3, #32
 800503e:	6029      	str	r1, [r5, #0]
 8005040:	bf48      	it	mi
 8005042:	6023      	strmi	r3, [r4, #0]
 8005044:	b91e      	cbnz	r6, 800504e <_printf_i+0x1a6>
 8005046:	6823      	ldr	r3, [r4, #0]
 8005048:	f023 0320 	bic.w	r3, r3, #32
 800504c:	6023      	str	r3, [r4, #0]
 800504e:	2310      	movs	r3, #16
 8005050:	e7a6      	b.n	8004fa0 <_printf_i+0xf8>
 8005052:	4824      	ldr	r0, [pc, #144]	; (80050e4 <_printf_i+0x23c>)
 8005054:	e7e4      	b.n	8005020 <_printf_i+0x178>
 8005056:	4615      	mov	r5, r2
 8005058:	e7bd      	b.n	8004fd6 <_printf_i+0x12e>
 800505a:	682b      	ldr	r3, [r5, #0]
 800505c:	6826      	ldr	r6, [r4, #0]
 800505e:	1d18      	adds	r0, r3, #4
 8005060:	6961      	ldr	r1, [r4, #20]
 8005062:	6028      	str	r0, [r5, #0]
 8005064:	0635      	lsls	r5, r6, #24
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	d501      	bpl.n	800506e <_printf_i+0x1c6>
 800506a:	6019      	str	r1, [r3, #0]
 800506c:	e002      	b.n	8005074 <_printf_i+0x1cc>
 800506e:	0670      	lsls	r0, r6, #25
 8005070:	d5fb      	bpl.n	800506a <_printf_i+0x1c2>
 8005072:	8019      	strh	r1, [r3, #0]
 8005074:	2300      	movs	r3, #0
 8005076:	4615      	mov	r5, r2
 8005078:	6123      	str	r3, [r4, #16]
 800507a:	e7bc      	b.n	8004ff6 <_printf_i+0x14e>
 800507c:	682b      	ldr	r3, [r5, #0]
 800507e:	2100      	movs	r1, #0
 8005080:	1d1a      	adds	r2, r3, #4
 8005082:	602a      	str	r2, [r5, #0]
 8005084:	681d      	ldr	r5, [r3, #0]
 8005086:	6862      	ldr	r2, [r4, #4]
 8005088:	4628      	mov	r0, r5
 800508a:	f000 fbe2 	bl	8005852 <memchr>
 800508e:	b108      	cbz	r0, 8005094 <_printf_i+0x1ec>
 8005090:	1b40      	subs	r0, r0, r5
 8005092:	6060      	str	r0, [r4, #4]
 8005094:	6863      	ldr	r3, [r4, #4]
 8005096:	6123      	str	r3, [r4, #16]
 8005098:	2300      	movs	r3, #0
 800509a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800509e:	e7aa      	b.n	8004ff6 <_printf_i+0x14e>
 80050a0:	462a      	mov	r2, r5
 80050a2:	4649      	mov	r1, r9
 80050a4:	4640      	mov	r0, r8
 80050a6:	6923      	ldr	r3, [r4, #16]
 80050a8:	47d0      	blx	sl
 80050aa:	3001      	adds	r0, #1
 80050ac:	d0ad      	beq.n	800500a <_printf_i+0x162>
 80050ae:	6823      	ldr	r3, [r4, #0]
 80050b0:	079b      	lsls	r3, r3, #30
 80050b2:	d413      	bmi.n	80050dc <_printf_i+0x234>
 80050b4:	68e0      	ldr	r0, [r4, #12]
 80050b6:	9b03      	ldr	r3, [sp, #12]
 80050b8:	4298      	cmp	r0, r3
 80050ba:	bfb8      	it	lt
 80050bc:	4618      	movlt	r0, r3
 80050be:	e7a6      	b.n	800500e <_printf_i+0x166>
 80050c0:	2301      	movs	r3, #1
 80050c2:	4632      	mov	r2, r6
 80050c4:	4649      	mov	r1, r9
 80050c6:	4640      	mov	r0, r8
 80050c8:	47d0      	blx	sl
 80050ca:	3001      	adds	r0, #1
 80050cc:	d09d      	beq.n	800500a <_printf_i+0x162>
 80050ce:	3501      	adds	r5, #1
 80050d0:	68e3      	ldr	r3, [r4, #12]
 80050d2:	9903      	ldr	r1, [sp, #12]
 80050d4:	1a5b      	subs	r3, r3, r1
 80050d6:	42ab      	cmp	r3, r5
 80050d8:	dcf2      	bgt.n	80050c0 <_printf_i+0x218>
 80050da:	e7eb      	b.n	80050b4 <_printf_i+0x20c>
 80050dc:	2500      	movs	r5, #0
 80050de:	f104 0619 	add.w	r6, r4, #25
 80050e2:	e7f5      	b.n	80050d0 <_printf_i+0x228>
 80050e4:	08009794 	.word	0x08009794
 80050e8:	080097a5 	.word	0x080097a5

080050ec <_scanf_float>:
 80050ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050f0:	b087      	sub	sp, #28
 80050f2:	9303      	str	r3, [sp, #12]
 80050f4:	688b      	ldr	r3, [r1, #8]
 80050f6:	4617      	mov	r7, r2
 80050f8:	1e5a      	subs	r2, r3, #1
 80050fa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80050fe:	bf85      	ittet	hi
 8005100:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005104:	195b      	addhi	r3, r3, r5
 8005106:	2300      	movls	r3, #0
 8005108:	9302      	strhi	r3, [sp, #8]
 800510a:	bf88      	it	hi
 800510c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005110:	468b      	mov	fp, r1
 8005112:	f04f 0500 	mov.w	r5, #0
 8005116:	bf8c      	ite	hi
 8005118:	608b      	strhi	r3, [r1, #8]
 800511a:	9302      	strls	r3, [sp, #8]
 800511c:	680b      	ldr	r3, [r1, #0]
 800511e:	4680      	mov	r8, r0
 8005120:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005124:	f84b 3b1c 	str.w	r3, [fp], #28
 8005128:	460c      	mov	r4, r1
 800512a:	465e      	mov	r6, fp
 800512c:	46aa      	mov	sl, r5
 800512e:	46a9      	mov	r9, r5
 8005130:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005134:	9501      	str	r5, [sp, #4]
 8005136:	68a2      	ldr	r2, [r4, #8]
 8005138:	b152      	cbz	r2, 8005150 <_scanf_float+0x64>
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	2b4e      	cmp	r3, #78	; 0x4e
 8005140:	d864      	bhi.n	800520c <_scanf_float+0x120>
 8005142:	2b40      	cmp	r3, #64	; 0x40
 8005144:	d83c      	bhi.n	80051c0 <_scanf_float+0xd4>
 8005146:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800514a:	b2c8      	uxtb	r0, r1
 800514c:	280e      	cmp	r0, #14
 800514e:	d93a      	bls.n	80051c6 <_scanf_float+0xda>
 8005150:	f1b9 0f00 	cmp.w	r9, #0
 8005154:	d003      	beq.n	800515e <_scanf_float+0x72>
 8005156:	6823      	ldr	r3, [r4, #0]
 8005158:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800515c:	6023      	str	r3, [r4, #0]
 800515e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005162:	f1ba 0f01 	cmp.w	sl, #1
 8005166:	f200 8113 	bhi.w	8005390 <_scanf_float+0x2a4>
 800516a:	455e      	cmp	r6, fp
 800516c:	f200 8105 	bhi.w	800537a <_scanf_float+0x28e>
 8005170:	2501      	movs	r5, #1
 8005172:	4628      	mov	r0, r5
 8005174:	b007      	add	sp, #28
 8005176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800517a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800517e:	2a0d      	cmp	r2, #13
 8005180:	d8e6      	bhi.n	8005150 <_scanf_float+0x64>
 8005182:	a101      	add	r1, pc, #4	; (adr r1, 8005188 <_scanf_float+0x9c>)
 8005184:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005188:	080052c7 	.word	0x080052c7
 800518c:	08005151 	.word	0x08005151
 8005190:	08005151 	.word	0x08005151
 8005194:	08005151 	.word	0x08005151
 8005198:	08005327 	.word	0x08005327
 800519c:	080052ff 	.word	0x080052ff
 80051a0:	08005151 	.word	0x08005151
 80051a4:	08005151 	.word	0x08005151
 80051a8:	080052d5 	.word	0x080052d5
 80051ac:	08005151 	.word	0x08005151
 80051b0:	08005151 	.word	0x08005151
 80051b4:	08005151 	.word	0x08005151
 80051b8:	08005151 	.word	0x08005151
 80051bc:	0800528d 	.word	0x0800528d
 80051c0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80051c4:	e7db      	b.n	800517e <_scanf_float+0x92>
 80051c6:	290e      	cmp	r1, #14
 80051c8:	d8c2      	bhi.n	8005150 <_scanf_float+0x64>
 80051ca:	a001      	add	r0, pc, #4	; (adr r0, 80051d0 <_scanf_float+0xe4>)
 80051cc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80051d0:	0800527f 	.word	0x0800527f
 80051d4:	08005151 	.word	0x08005151
 80051d8:	0800527f 	.word	0x0800527f
 80051dc:	08005313 	.word	0x08005313
 80051e0:	08005151 	.word	0x08005151
 80051e4:	0800522d 	.word	0x0800522d
 80051e8:	08005269 	.word	0x08005269
 80051ec:	08005269 	.word	0x08005269
 80051f0:	08005269 	.word	0x08005269
 80051f4:	08005269 	.word	0x08005269
 80051f8:	08005269 	.word	0x08005269
 80051fc:	08005269 	.word	0x08005269
 8005200:	08005269 	.word	0x08005269
 8005204:	08005269 	.word	0x08005269
 8005208:	08005269 	.word	0x08005269
 800520c:	2b6e      	cmp	r3, #110	; 0x6e
 800520e:	d809      	bhi.n	8005224 <_scanf_float+0x138>
 8005210:	2b60      	cmp	r3, #96	; 0x60
 8005212:	d8b2      	bhi.n	800517a <_scanf_float+0x8e>
 8005214:	2b54      	cmp	r3, #84	; 0x54
 8005216:	d077      	beq.n	8005308 <_scanf_float+0x21c>
 8005218:	2b59      	cmp	r3, #89	; 0x59
 800521a:	d199      	bne.n	8005150 <_scanf_float+0x64>
 800521c:	2d07      	cmp	r5, #7
 800521e:	d197      	bne.n	8005150 <_scanf_float+0x64>
 8005220:	2508      	movs	r5, #8
 8005222:	e029      	b.n	8005278 <_scanf_float+0x18c>
 8005224:	2b74      	cmp	r3, #116	; 0x74
 8005226:	d06f      	beq.n	8005308 <_scanf_float+0x21c>
 8005228:	2b79      	cmp	r3, #121	; 0x79
 800522a:	e7f6      	b.n	800521a <_scanf_float+0x12e>
 800522c:	6821      	ldr	r1, [r4, #0]
 800522e:	05c8      	lsls	r0, r1, #23
 8005230:	d51a      	bpl.n	8005268 <_scanf_float+0x17c>
 8005232:	9b02      	ldr	r3, [sp, #8]
 8005234:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005238:	6021      	str	r1, [r4, #0]
 800523a:	f109 0901 	add.w	r9, r9, #1
 800523e:	b11b      	cbz	r3, 8005248 <_scanf_float+0x15c>
 8005240:	3b01      	subs	r3, #1
 8005242:	3201      	adds	r2, #1
 8005244:	9302      	str	r3, [sp, #8]
 8005246:	60a2      	str	r2, [r4, #8]
 8005248:	68a3      	ldr	r3, [r4, #8]
 800524a:	3b01      	subs	r3, #1
 800524c:	60a3      	str	r3, [r4, #8]
 800524e:	6923      	ldr	r3, [r4, #16]
 8005250:	3301      	adds	r3, #1
 8005252:	6123      	str	r3, [r4, #16]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	3b01      	subs	r3, #1
 8005258:	2b00      	cmp	r3, #0
 800525a:	607b      	str	r3, [r7, #4]
 800525c:	f340 8084 	ble.w	8005368 <_scanf_float+0x27c>
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	3301      	adds	r3, #1
 8005264:	603b      	str	r3, [r7, #0]
 8005266:	e766      	b.n	8005136 <_scanf_float+0x4a>
 8005268:	eb1a 0f05 	cmn.w	sl, r5
 800526c:	f47f af70 	bne.w	8005150 <_scanf_float+0x64>
 8005270:	6822      	ldr	r2, [r4, #0]
 8005272:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005276:	6022      	str	r2, [r4, #0]
 8005278:	f806 3b01 	strb.w	r3, [r6], #1
 800527c:	e7e4      	b.n	8005248 <_scanf_float+0x15c>
 800527e:	6822      	ldr	r2, [r4, #0]
 8005280:	0610      	lsls	r0, r2, #24
 8005282:	f57f af65 	bpl.w	8005150 <_scanf_float+0x64>
 8005286:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800528a:	e7f4      	b.n	8005276 <_scanf_float+0x18a>
 800528c:	f1ba 0f00 	cmp.w	sl, #0
 8005290:	d10e      	bne.n	80052b0 <_scanf_float+0x1c4>
 8005292:	f1b9 0f00 	cmp.w	r9, #0
 8005296:	d10e      	bne.n	80052b6 <_scanf_float+0x1ca>
 8005298:	6822      	ldr	r2, [r4, #0]
 800529a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800529e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80052a2:	d108      	bne.n	80052b6 <_scanf_float+0x1ca>
 80052a4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80052a8:	f04f 0a01 	mov.w	sl, #1
 80052ac:	6022      	str	r2, [r4, #0]
 80052ae:	e7e3      	b.n	8005278 <_scanf_float+0x18c>
 80052b0:	f1ba 0f02 	cmp.w	sl, #2
 80052b4:	d055      	beq.n	8005362 <_scanf_float+0x276>
 80052b6:	2d01      	cmp	r5, #1
 80052b8:	d002      	beq.n	80052c0 <_scanf_float+0x1d4>
 80052ba:	2d04      	cmp	r5, #4
 80052bc:	f47f af48 	bne.w	8005150 <_scanf_float+0x64>
 80052c0:	3501      	adds	r5, #1
 80052c2:	b2ed      	uxtb	r5, r5
 80052c4:	e7d8      	b.n	8005278 <_scanf_float+0x18c>
 80052c6:	f1ba 0f01 	cmp.w	sl, #1
 80052ca:	f47f af41 	bne.w	8005150 <_scanf_float+0x64>
 80052ce:	f04f 0a02 	mov.w	sl, #2
 80052d2:	e7d1      	b.n	8005278 <_scanf_float+0x18c>
 80052d4:	b97d      	cbnz	r5, 80052f6 <_scanf_float+0x20a>
 80052d6:	f1b9 0f00 	cmp.w	r9, #0
 80052da:	f47f af3c 	bne.w	8005156 <_scanf_float+0x6a>
 80052de:	6822      	ldr	r2, [r4, #0]
 80052e0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80052e4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80052e8:	f47f af39 	bne.w	800515e <_scanf_float+0x72>
 80052ec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80052f0:	2501      	movs	r5, #1
 80052f2:	6022      	str	r2, [r4, #0]
 80052f4:	e7c0      	b.n	8005278 <_scanf_float+0x18c>
 80052f6:	2d03      	cmp	r5, #3
 80052f8:	d0e2      	beq.n	80052c0 <_scanf_float+0x1d4>
 80052fa:	2d05      	cmp	r5, #5
 80052fc:	e7de      	b.n	80052bc <_scanf_float+0x1d0>
 80052fe:	2d02      	cmp	r5, #2
 8005300:	f47f af26 	bne.w	8005150 <_scanf_float+0x64>
 8005304:	2503      	movs	r5, #3
 8005306:	e7b7      	b.n	8005278 <_scanf_float+0x18c>
 8005308:	2d06      	cmp	r5, #6
 800530a:	f47f af21 	bne.w	8005150 <_scanf_float+0x64>
 800530e:	2507      	movs	r5, #7
 8005310:	e7b2      	b.n	8005278 <_scanf_float+0x18c>
 8005312:	6822      	ldr	r2, [r4, #0]
 8005314:	0591      	lsls	r1, r2, #22
 8005316:	f57f af1b 	bpl.w	8005150 <_scanf_float+0x64>
 800531a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800531e:	6022      	str	r2, [r4, #0]
 8005320:	f8cd 9004 	str.w	r9, [sp, #4]
 8005324:	e7a8      	b.n	8005278 <_scanf_float+0x18c>
 8005326:	6822      	ldr	r2, [r4, #0]
 8005328:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800532c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005330:	d006      	beq.n	8005340 <_scanf_float+0x254>
 8005332:	0550      	lsls	r0, r2, #21
 8005334:	f57f af0c 	bpl.w	8005150 <_scanf_float+0x64>
 8005338:	f1b9 0f00 	cmp.w	r9, #0
 800533c:	f43f af0f 	beq.w	800515e <_scanf_float+0x72>
 8005340:	0591      	lsls	r1, r2, #22
 8005342:	bf58      	it	pl
 8005344:	9901      	ldrpl	r1, [sp, #4]
 8005346:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800534a:	bf58      	it	pl
 800534c:	eba9 0101 	subpl.w	r1, r9, r1
 8005350:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005354:	f04f 0900 	mov.w	r9, #0
 8005358:	bf58      	it	pl
 800535a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800535e:	6022      	str	r2, [r4, #0]
 8005360:	e78a      	b.n	8005278 <_scanf_float+0x18c>
 8005362:	f04f 0a03 	mov.w	sl, #3
 8005366:	e787      	b.n	8005278 <_scanf_float+0x18c>
 8005368:	4639      	mov	r1, r7
 800536a:	4640      	mov	r0, r8
 800536c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005370:	4798      	blx	r3
 8005372:	2800      	cmp	r0, #0
 8005374:	f43f aedf 	beq.w	8005136 <_scanf_float+0x4a>
 8005378:	e6ea      	b.n	8005150 <_scanf_float+0x64>
 800537a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800537e:	463a      	mov	r2, r7
 8005380:	4640      	mov	r0, r8
 8005382:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005386:	4798      	blx	r3
 8005388:	6923      	ldr	r3, [r4, #16]
 800538a:	3b01      	subs	r3, #1
 800538c:	6123      	str	r3, [r4, #16]
 800538e:	e6ec      	b.n	800516a <_scanf_float+0x7e>
 8005390:	1e6b      	subs	r3, r5, #1
 8005392:	2b06      	cmp	r3, #6
 8005394:	d825      	bhi.n	80053e2 <_scanf_float+0x2f6>
 8005396:	2d02      	cmp	r5, #2
 8005398:	d836      	bhi.n	8005408 <_scanf_float+0x31c>
 800539a:	455e      	cmp	r6, fp
 800539c:	f67f aee8 	bls.w	8005170 <_scanf_float+0x84>
 80053a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80053a4:	463a      	mov	r2, r7
 80053a6:	4640      	mov	r0, r8
 80053a8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80053ac:	4798      	blx	r3
 80053ae:	6923      	ldr	r3, [r4, #16]
 80053b0:	3b01      	subs	r3, #1
 80053b2:	6123      	str	r3, [r4, #16]
 80053b4:	e7f1      	b.n	800539a <_scanf_float+0x2ae>
 80053b6:	9802      	ldr	r0, [sp, #8]
 80053b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80053bc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80053c0:	463a      	mov	r2, r7
 80053c2:	9002      	str	r0, [sp, #8]
 80053c4:	4640      	mov	r0, r8
 80053c6:	4798      	blx	r3
 80053c8:	6923      	ldr	r3, [r4, #16]
 80053ca:	3b01      	subs	r3, #1
 80053cc:	6123      	str	r3, [r4, #16]
 80053ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80053d2:	fa5f fa8a 	uxtb.w	sl, sl
 80053d6:	f1ba 0f02 	cmp.w	sl, #2
 80053da:	d1ec      	bne.n	80053b6 <_scanf_float+0x2ca>
 80053dc:	3d03      	subs	r5, #3
 80053de:	b2ed      	uxtb	r5, r5
 80053e0:	1b76      	subs	r6, r6, r5
 80053e2:	6823      	ldr	r3, [r4, #0]
 80053e4:	05da      	lsls	r2, r3, #23
 80053e6:	d52f      	bpl.n	8005448 <_scanf_float+0x35c>
 80053e8:	055b      	lsls	r3, r3, #21
 80053ea:	d510      	bpl.n	800540e <_scanf_float+0x322>
 80053ec:	455e      	cmp	r6, fp
 80053ee:	f67f aebf 	bls.w	8005170 <_scanf_float+0x84>
 80053f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80053f6:	463a      	mov	r2, r7
 80053f8:	4640      	mov	r0, r8
 80053fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80053fe:	4798      	blx	r3
 8005400:	6923      	ldr	r3, [r4, #16]
 8005402:	3b01      	subs	r3, #1
 8005404:	6123      	str	r3, [r4, #16]
 8005406:	e7f1      	b.n	80053ec <_scanf_float+0x300>
 8005408:	46aa      	mov	sl, r5
 800540a:	9602      	str	r6, [sp, #8]
 800540c:	e7df      	b.n	80053ce <_scanf_float+0x2e2>
 800540e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005412:	6923      	ldr	r3, [r4, #16]
 8005414:	2965      	cmp	r1, #101	; 0x65
 8005416:	f103 33ff 	add.w	r3, r3, #4294967295
 800541a:	f106 35ff 	add.w	r5, r6, #4294967295
 800541e:	6123      	str	r3, [r4, #16]
 8005420:	d00c      	beq.n	800543c <_scanf_float+0x350>
 8005422:	2945      	cmp	r1, #69	; 0x45
 8005424:	d00a      	beq.n	800543c <_scanf_float+0x350>
 8005426:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800542a:	463a      	mov	r2, r7
 800542c:	4640      	mov	r0, r8
 800542e:	4798      	blx	r3
 8005430:	6923      	ldr	r3, [r4, #16]
 8005432:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005436:	3b01      	subs	r3, #1
 8005438:	1eb5      	subs	r5, r6, #2
 800543a:	6123      	str	r3, [r4, #16]
 800543c:	463a      	mov	r2, r7
 800543e:	4640      	mov	r0, r8
 8005440:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005444:	4798      	blx	r3
 8005446:	462e      	mov	r6, r5
 8005448:	6825      	ldr	r5, [r4, #0]
 800544a:	f015 0510 	ands.w	r5, r5, #16
 800544e:	d155      	bne.n	80054fc <_scanf_float+0x410>
 8005450:	7035      	strb	r5, [r6, #0]
 8005452:	6823      	ldr	r3, [r4, #0]
 8005454:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800545c:	d11d      	bne.n	800549a <_scanf_float+0x3ae>
 800545e:	9b01      	ldr	r3, [sp, #4]
 8005460:	454b      	cmp	r3, r9
 8005462:	eba3 0209 	sub.w	r2, r3, r9
 8005466:	d125      	bne.n	80054b4 <_scanf_float+0x3c8>
 8005468:	2200      	movs	r2, #0
 800546a:	4659      	mov	r1, fp
 800546c:	4640      	mov	r0, r8
 800546e:	f002 fc23 	bl	8007cb8 <_strtod_r>
 8005472:	9b03      	ldr	r3, [sp, #12]
 8005474:	f8d4 c000 	ldr.w	ip, [r4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f01c 0f02 	tst.w	ip, #2
 800547e:	4606      	mov	r6, r0
 8005480:	460f      	mov	r7, r1
 8005482:	f103 0204 	add.w	r2, r3, #4
 8005486:	d020      	beq.n	80054ca <_scanf_float+0x3de>
 8005488:	9903      	ldr	r1, [sp, #12]
 800548a:	600a      	str	r2, [r1, #0]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	e9c3 6700 	strd	r6, r7, [r3]
 8005492:	68e3      	ldr	r3, [r4, #12]
 8005494:	3301      	adds	r3, #1
 8005496:	60e3      	str	r3, [r4, #12]
 8005498:	e66b      	b.n	8005172 <_scanf_float+0x86>
 800549a:	9b04      	ldr	r3, [sp, #16]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d0e3      	beq.n	8005468 <_scanf_float+0x37c>
 80054a0:	9905      	ldr	r1, [sp, #20]
 80054a2:	230a      	movs	r3, #10
 80054a4:	462a      	mov	r2, r5
 80054a6:	4640      	mov	r0, r8
 80054a8:	3101      	adds	r1, #1
 80054aa:	f002 fc89 	bl	8007dc0 <_strtol_r>
 80054ae:	9b04      	ldr	r3, [sp, #16]
 80054b0:	9e05      	ldr	r6, [sp, #20]
 80054b2:	1ac2      	subs	r2, r0, r3
 80054b4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80054b8:	429e      	cmp	r6, r3
 80054ba:	bf28      	it	cs
 80054bc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80054c0:	4630      	mov	r0, r6
 80054c2:	490f      	ldr	r1, [pc, #60]	; (8005500 <_scanf_float+0x414>)
 80054c4:	f000 f8e2 	bl	800568c <siprintf>
 80054c8:	e7ce      	b.n	8005468 <_scanf_float+0x37c>
 80054ca:	f01c 0f04 	tst.w	ip, #4
 80054ce:	d1db      	bne.n	8005488 <_scanf_float+0x39c>
 80054d0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80054d4:	f8cc 2000 	str.w	r2, [ip]
 80054d8:	f8d3 8000 	ldr.w	r8, [r3]
 80054dc:	4602      	mov	r2, r0
 80054de:	460b      	mov	r3, r1
 80054e0:	f7fb fb00 	bl	8000ae4 <__aeabi_dcmpun>
 80054e4:	b128      	cbz	r0, 80054f2 <_scanf_float+0x406>
 80054e6:	4807      	ldr	r0, [pc, #28]	; (8005504 <_scanf_float+0x418>)
 80054e8:	f000 f9c2 	bl	8005870 <nanf>
 80054ec:	f8c8 0000 	str.w	r0, [r8]
 80054f0:	e7cf      	b.n	8005492 <_scanf_float+0x3a6>
 80054f2:	4630      	mov	r0, r6
 80054f4:	4639      	mov	r1, r7
 80054f6:	f7fb fb53 	bl	8000ba0 <__aeabi_d2f>
 80054fa:	e7f7      	b.n	80054ec <_scanf_float+0x400>
 80054fc:	2500      	movs	r5, #0
 80054fe:	e638      	b.n	8005172 <_scanf_float+0x86>
 8005500:	080097b6 	.word	0x080097b6
 8005504:	08009b4d 	.word	0x08009b4d

08005508 <std>:
 8005508:	2300      	movs	r3, #0
 800550a:	b510      	push	{r4, lr}
 800550c:	4604      	mov	r4, r0
 800550e:	e9c0 3300 	strd	r3, r3, [r0]
 8005512:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005516:	6083      	str	r3, [r0, #8]
 8005518:	8181      	strh	r1, [r0, #12]
 800551a:	6643      	str	r3, [r0, #100]	; 0x64
 800551c:	81c2      	strh	r2, [r0, #14]
 800551e:	6183      	str	r3, [r0, #24]
 8005520:	4619      	mov	r1, r3
 8005522:	2208      	movs	r2, #8
 8005524:	305c      	adds	r0, #92	; 0x5c
 8005526:	f000 f914 	bl	8005752 <memset>
 800552a:	4b0d      	ldr	r3, [pc, #52]	; (8005560 <std+0x58>)
 800552c:	6224      	str	r4, [r4, #32]
 800552e:	6263      	str	r3, [r4, #36]	; 0x24
 8005530:	4b0c      	ldr	r3, [pc, #48]	; (8005564 <std+0x5c>)
 8005532:	62a3      	str	r3, [r4, #40]	; 0x28
 8005534:	4b0c      	ldr	r3, [pc, #48]	; (8005568 <std+0x60>)
 8005536:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005538:	4b0c      	ldr	r3, [pc, #48]	; (800556c <std+0x64>)
 800553a:	6323      	str	r3, [r4, #48]	; 0x30
 800553c:	4b0c      	ldr	r3, [pc, #48]	; (8005570 <std+0x68>)
 800553e:	429c      	cmp	r4, r3
 8005540:	d006      	beq.n	8005550 <std+0x48>
 8005542:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005546:	4294      	cmp	r4, r2
 8005548:	d002      	beq.n	8005550 <std+0x48>
 800554a:	33d0      	adds	r3, #208	; 0xd0
 800554c:	429c      	cmp	r4, r3
 800554e:	d105      	bne.n	800555c <std+0x54>
 8005550:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005558:	f000 b978 	b.w	800584c <__retarget_lock_init_recursive>
 800555c:	bd10      	pop	{r4, pc}
 800555e:	bf00      	nop
 8005560:	080056cd 	.word	0x080056cd
 8005564:	080056ef 	.word	0x080056ef
 8005568:	08005727 	.word	0x08005727
 800556c:	0800574b 	.word	0x0800574b
 8005570:	20000714 	.word	0x20000714

08005574 <stdio_exit_handler>:
 8005574:	4a02      	ldr	r2, [pc, #8]	; (8005580 <stdio_exit_handler+0xc>)
 8005576:	4903      	ldr	r1, [pc, #12]	; (8005584 <stdio_exit_handler+0x10>)
 8005578:	4803      	ldr	r0, [pc, #12]	; (8005588 <stdio_exit_handler+0x14>)
 800557a:	f000 b869 	b.w	8005650 <_fwalk_sglue>
 800557e:	bf00      	nop
 8005580:	20000028 	.word	0x20000028
 8005584:	08008179 	.word	0x08008179
 8005588:	20000034 	.word	0x20000034

0800558c <cleanup_stdio>:
 800558c:	6841      	ldr	r1, [r0, #4]
 800558e:	4b0c      	ldr	r3, [pc, #48]	; (80055c0 <cleanup_stdio+0x34>)
 8005590:	b510      	push	{r4, lr}
 8005592:	4299      	cmp	r1, r3
 8005594:	4604      	mov	r4, r0
 8005596:	d001      	beq.n	800559c <cleanup_stdio+0x10>
 8005598:	f002 fdee 	bl	8008178 <_fflush_r>
 800559c:	68a1      	ldr	r1, [r4, #8]
 800559e:	4b09      	ldr	r3, [pc, #36]	; (80055c4 <cleanup_stdio+0x38>)
 80055a0:	4299      	cmp	r1, r3
 80055a2:	d002      	beq.n	80055aa <cleanup_stdio+0x1e>
 80055a4:	4620      	mov	r0, r4
 80055a6:	f002 fde7 	bl	8008178 <_fflush_r>
 80055aa:	68e1      	ldr	r1, [r4, #12]
 80055ac:	4b06      	ldr	r3, [pc, #24]	; (80055c8 <cleanup_stdio+0x3c>)
 80055ae:	4299      	cmp	r1, r3
 80055b0:	d004      	beq.n	80055bc <cleanup_stdio+0x30>
 80055b2:	4620      	mov	r0, r4
 80055b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055b8:	f002 bdde 	b.w	8008178 <_fflush_r>
 80055bc:	bd10      	pop	{r4, pc}
 80055be:	bf00      	nop
 80055c0:	20000714 	.word	0x20000714
 80055c4:	2000077c 	.word	0x2000077c
 80055c8:	200007e4 	.word	0x200007e4

080055cc <global_stdio_init.part.0>:
 80055cc:	b510      	push	{r4, lr}
 80055ce:	4b0b      	ldr	r3, [pc, #44]	; (80055fc <global_stdio_init.part.0+0x30>)
 80055d0:	4c0b      	ldr	r4, [pc, #44]	; (8005600 <global_stdio_init.part.0+0x34>)
 80055d2:	4a0c      	ldr	r2, [pc, #48]	; (8005604 <global_stdio_init.part.0+0x38>)
 80055d4:	4620      	mov	r0, r4
 80055d6:	601a      	str	r2, [r3, #0]
 80055d8:	2104      	movs	r1, #4
 80055da:	2200      	movs	r2, #0
 80055dc:	f7ff ff94 	bl	8005508 <std>
 80055e0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80055e4:	2201      	movs	r2, #1
 80055e6:	2109      	movs	r1, #9
 80055e8:	f7ff ff8e 	bl	8005508 <std>
 80055ec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80055f0:	2202      	movs	r2, #2
 80055f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055f6:	2112      	movs	r1, #18
 80055f8:	f7ff bf86 	b.w	8005508 <std>
 80055fc:	2000084c 	.word	0x2000084c
 8005600:	20000714 	.word	0x20000714
 8005604:	08005575 	.word	0x08005575

08005608 <__sfp_lock_acquire>:
 8005608:	4801      	ldr	r0, [pc, #4]	; (8005610 <__sfp_lock_acquire+0x8>)
 800560a:	f000 b920 	b.w	800584e <__retarget_lock_acquire_recursive>
 800560e:	bf00      	nop
 8005610:	20000855 	.word	0x20000855

08005614 <__sfp_lock_release>:
 8005614:	4801      	ldr	r0, [pc, #4]	; (800561c <__sfp_lock_release+0x8>)
 8005616:	f000 b91b 	b.w	8005850 <__retarget_lock_release_recursive>
 800561a:	bf00      	nop
 800561c:	20000855 	.word	0x20000855

08005620 <__sinit>:
 8005620:	b510      	push	{r4, lr}
 8005622:	4604      	mov	r4, r0
 8005624:	f7ff fff0 	bl	8005608 <__sfp_lock_acquire>
 8005628:	6a23      	ldr	r3, [r4, #32]
 800562a:	b11b      	cbz	r3, 8005634 <__sinit+0x14>
 800562c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005630:	f7ff bff0 	b.w	8005614 <__sfp_lock_release>
 8005634:	4b04      	ldr	r3, [pc, #16]	; (8005648 <__sinit+0x28>)
 8005636:	6223      	str	r3, [r4, #32]
 8005638:	4b04      	ldr	r3, [pc, #16]	; (800564c <__sinit+0x2c>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1f5      	bne.n	800562c <__sinit+0xc>
 8005640:	f7ff ffc4 	bl	80055cc <global_stdio_init.part.0>
 8005644:	e7f2      	b.n	800562c <__sinit+0xc>
 8005646:	bf00      	nop
 8005648:	0800558d 	.word	0x0800558d
 800564c:	2000084c 	.word	0x2000084c

08005650 <_fwalk_sglue>:
 8005650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005654:	4607      	mov	r7, r0
 8005656:	4688      	mov	r8, r1
 8005658:	4614      	mov	r4, r2
 800565a:	2600      	movs	r6, #0
 800565c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005660:	f1b9 0901 	subs.w	r9, r9, #1
 8005664:	d505      	bpl.n	8005672 <_fwalk_sglue+0x22>
 8005666:	6824      	ldr	r4, [r4, #0]
 8005668:	2c00      	cmp	r4, #0
 800566a:	d1f7      	bne.n	800565c <_fwalk_sglue+0xc>
 800566c:	4630      	mov	r0, r6
 800566e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005672:	89ab      	ldrh	r3, [r5, #12]
 8005674:	2b01      	cmp	r3, #1
 8005676:	d907      	bls.n	8005688 <_fwalk_sglue+0x38>
 8005678:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800567c:	3301      	adds	r3, #1
 800567e:	d003      	beq.n	8005688 <_fwalk_sglue+0x38>
 8005680:	4629      	mov	r1, r5
 8005682:	4638      	mov	r0, r7
 8005684:	47c0      	blx	r8
 8005686:	4306      	orrs	r6, r0
 8005688:	3568      	adds	r5, #104	; 0x68
 800568a:	e7e9      	b.n	8005660 <_fwalk_sglue+0x10>

0800568c <siprintf>:
 800568c:	b40e      	push	{r1, r2, r3}
 800568e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005692:	b500      	push	{lr}
 8005694:	b09c      	sub	sp, #112	; 0x70
 8005696:	ab1d      	add	r3, sp, #116	; 0x74
 8005698:	9002      	str	r0, [sp, #8]
 800569a:	9006      	str	r0, [sp, #24]
 800569c:	9107      	str	r1, [sp, #28]
 800569e:	9104      	str	r1, [sp, #16]
 80056a0:	4808      	ldr	r0, [pc, #32]	; (80056c4 <siprintf+0x38>)
 80056a2:	4909      	ldr	r1, [pc, #36]	; (80056c8 <siprintf+0x3c>)
 80056a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80056a8:	9105      	str	r1, [sp, #20]
 80056aa:	6800      	ldr	r0, [r0, #0]
 80056ac:	a902      	add	r1, sp, #8
 80056ae:	9301      	str	r3, [sp, #4]
 80056b0:	f002 fbe2 	bl	8007e78 <_svfiprintf_r>
 80056b4:	2200      	movs	r2, #0
 80056b6:	9b02      	ldr	r3, [sp, #8]
 80056b8:	701a      	strb	r2, [r3, #0]
 80056ba:	b01c      	add	sp, #112	; 0x70
 80056bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80056c0:	b003      	add	sp, #12
 80056c2:	4770      	bx	lr
 80056c4:	20000080 	.word	0x20000080
 80056c8:	ffff0208 	.word	0xffff0208

080056cc <__sread>:
 80056cc:	b510      	push	{r4, lr}
 80056ce:	460c      	mov	r4, r1
 80056d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056d4:	f000 f86c 	bl	80057b0 <_read_r>
 80056d8:	2800      	cmp	r0, #0
 80056da:	bfab      	itete	ge
 80056dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80056de:	89a3      	ldrhlt	r3, [r4, #12]
 80056e0:	181b      	addge	r3, r3, r0
 80056e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80056e6:	bfac      	ite	ge
 80056e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80056ea:	81a3      	strhlt	r3, [r4, #12]
 80056ec:	bd10      	pop	{r4, pc}

080056ee <__swrite>:
 80056ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056f2:	461f      	mov	r7, r3
 80056f4:	898b      	ldrh	r3, [r1, #12]
 80056f6:	4605      	mov	r5, r0
 80056f8:	05db      	lsls	r3, r3, #23
 80056fa:	460c      	mov	r4, r1
 80056fc:	4616      	mov	r6, r2
 80056fe:	d505      	bpl.n	800570c <__swrite+0x1e>
 8005700:	2302      	movs	r3, #2
 8005702:	2200      	movs	r2, #0
 8005704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005708:	f000 f840 	bl	800578c <_lseek_r>
 800570c:	89a3      	ldrh	r3, [r4, #12]
 800570e:	4632      	mov	r2, r6
 8005710:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005714:	81a3      	strh	r3, [r4, #12]
 8005716:	4628      	mov	r0, r5
 8005718:	463b      	mov	r3, r7
 800571a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800571e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005722:	f000 b857 	b.w	80057d4 <_write_r>

08005726 <__sseek>:
 8005726:	b510      	push	{r4, lr}
 8005728:	460c      	mov	r4, r1
 800572a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800572e:	f000 f82d 	bl	800578c <_lseek_r>
 8005732:	1c43      	adds	r3, r0, #1
 8005734:	89a3      	ldrh	r3, [r4, #12]
 8005736:	bf15      	itete	ne
 8005738:	6560      	strne	r0, [r4, #84]	; 0x54
 800573a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800573e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005742:	81a3      	strheq	r3, [r4, #12]
 8005744:	bf18      	it	ne
 8005746:	81a3      	strhne	r3, [r4, #12]
 8005748:	bd10      	pop	{r4, pc}

0800574a <__sclose>:
 800574a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800574e:	f000 b80d 	b.w	800576c <_close_r>

08005752 <memset>:
 8005752:	4603      	mov	r3, r0
 8005754:	4402      	add	r2, r0
 8005756:	4293      	cmp	r3, r2
 8005758:	d100      	bne.n	800575c <memset+0xa>
 800575a:	4770      	bx	lr
 800575c:	f803 1b01 	strb.w	r1, [r3], #1
 8005760:	e7f9      	b.n	8005756 <memset+0x4>
	...

08005764 <_localeconv_r>:
 8005764:	4800      	ldr	r0, [pc, #0]	; (8005768 <_localeconv_r+0x4>)
 8005766:	4770      	bx	lr
 8005768:	20000174 	.word	0x20000174

0800576c <_close_r>:
 800576c:	b538      	push	{r3, r4, r5, lr}
 800576e:	2300      	movs	r3, #0
 8005770:	4d05      	ldr	r5, [pc, #20]	; (8005788 <_close_r+0x1c>)
 8005772:	4604      	mov	r4, r0
 8005774:	4608      	mov	r0, r1
 8005776:	602b      	str	r3, [r5, #0]
 8005778:	f7fc feda 	bl	8002530 <_close>
 800577c:	1c43      	adds	r3, r0, #1
 800577e:	d102      	bne.n	8005786 <_close_r+0x1a>
 8005780:	682b      	ldr	r3, [r5, #0]
 8005782:	b103      	cbz	r3, 8005786 <_close_r+0x1a>
 8005784:	6023      	str	r3, [r4, #0]
 8005786:	bd38      	pop	{r3, r4, r5, pc}
 8005788:	20000850 	.word	0x20000850

0800578c <_lseek_r>:
 800578c:	b538      	push	{r3, r4, r5, lr}
 800578e:	4604      	mov	r4, r0
 8005790:	4608      	mov	r0, r1
 8005792:	4611      	mov	r1, r2
 8005794:	2200      	movs	r2, #0
 8005796:	4d05      	ldr	r5, [pc, #20]	; (80057ac <_lseek_r+0x20>)
 8005798:	602a      	str	r2, [r5, #0]
 800579a:	461a      	mov	r2, r3
 800579c:	f7fc feec 	bl	8002578 <_lseek>
 80057a0:	1c43      	adds	r3, r0, #1
 80057a2:	d102      	bne.n	80057aa <_lseek_r+0x1e>
 80057a4:	682b      	ldr	r3, [r5, #0]
 80057a6:	b103      	cbz	r3, 80057aa <_lseek_r+0x1e>
 80057a8:	6023      	str	r3, [r4, #0]
 80057aa:	bd38      	pop	{r3, r4, r5, pc}
 80057ac:	20000850 	.word	0x20000850

080057b0 <_read_r>:
 80057b0:	b538      	push	{r3, r4, r5, lr}
 80057b2:	4604      	mov	r4, r0
 80057b4:	4608      	mov	r0, r1
 80057b6:	4611      	mov	r1, r2
 80057b8:	2200      	movs	r2, #0
 80057ba:	4d05      	ldr	r5, [pc, #20]	; (80057d0 <_read_r+0x20>)
 80057bc:	602a      	str	r2, [r5, #0]
 80057be:	461a      	mov	r2, r3
 80057c0:	f7fc fe7d 	bl	80024be <_read>
 80057c4:	1c43      	adds	r3, r0, #1
 80057c6:	d102      	bne.n	80057ce <_read_r+0x1e>
 80057c8:	682b      	ldr	r3, [r5, #0]
 80057ca:	b103      	cbz	r3, 80057ce <_read_r+0x1e>
 80057cc:	6023      	str	r3, [r4, #0]
 80057ce:	bd38      	pop	{r3, r4, r5, pc}
 80057d0:	20000850 	.word	0x20000850

080057d4 <_write_r>:
 80057d4:	b538      	push	{r3, r4, r5, lr}
 80057d6:	4604      	mov	r4, r0
 80057d8:	4608      	mov	r0, r1
 80057da:	4611      	mov	r1, r2
 80057dc:	2200      	movs	r2, #0
 80057de:	4d05      	ldr	r5, [pc, #20]	; (80057f4 <_write_r+0x20>)
 80057e0:	602a      	str	r2, [r5, #0]
 80057e2:	461a      	mov	r2, r3
 80057e4:	f7fc fe88 	bl	80024f8 <_write>
 80057e8:	1c43      	adds	r3, r0, #1
 80057ea:	d102      	bne.n	80057f2 <_write_r+0x1e>
 80057ec:	682b      	ldr	r3, [r5, #0]
 80057ee:	b103      	cbz	r3, 80057f2 <_write_r+0x1e>
 80057f0:	6023      	str	r3, [r4, #0]
 80057f2:	bd38      	pop	{r3, r4, r5, pc}
 80057f4:	20000850 	.word	0x20000850

080057f8 <__errno>:
 80057f8:	4b01      	ldr	r3, [pc, #4]	; (8005800 <__errno+0x8>)
 80057fa:	6818      	ldr	r0, [r3, #0]
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	20000080 	.word	0x20000080

08005804 <__libc_init_array>:
 8005804:	b570      	push	{r4, r5, r6, lr}
 8005806:	2600      	movs	r6, #0
 8005808:	4d0c      	ldr	r5, [pc, #48]	; (800583c <__libc_init_array+0x38>)
 800580a:	4c0d      	ldr	r4, [pc, #52]	; (8005840 <__libc_init_array+0x3c>)
 800580c:	1b64      	subs	r4, r4, r5
 800580e:	10a4      	asrs	r4, r4, #2
 8005810:	42a6      	cmp	r6, r4
 8005812:	d109      	bne.n	8005828 <__libc_init_array+0x24>
 8005814:	f003 fbc2 	bl	8008f9c <_init>
 8005818:	2600      	movs	r6, #0
 800581a:	4d0a      	ldr	r5, [pc, #40]	; (8005844 <__libc_init_array+0x40>)
 800581c:	4c0a      	ldr	r4, [pc, #40]	; (8005848 <__libc_init_array+0x44>)
 800581e:	1b64      	subs	r4, r4, r5
 8005820:	10a4      	asrs	r4, r4, #2
 8005822:	42a6      	cmp	r6, r4
 8005824:	d105      	bne.n	8005832 <__libc_init_array+0x2e>
 8005826:	bd70      	pop	{r4, r5, r6, pc}
 8005828:	f855 3b04 	ldr.w	r3, [r5], #4
 800582c:	4798      	blx	r3
 800582e:	3601      	adds	r6, #1
 8005830:	e7ee      	b.n	8005810 <__libc_init_array+0xc>
 8005832:	f855 3b04 	ldr.w	r3, [r5], #4
 8005836:	4798      	blx	r3
 8005838:	3601      	adds	r6, #1
 800583a:	e7f2      	b.n	8005822 <__libc_init_array+0x1e>
 800583c:	08009bb0 	.word	0x08009bb0
 8005840:	08009bb0 	.word	0x08009bb0
 8005844:	08009bb0 	.word	0x08009bb0
 8005848:	08009bb4 	.word	0x08009bb4

0800584c <__retarget_lock_init_recursive>:
 800584c:	4770      	bx	lr

0800584e <__retarget_lock_acquire_recursive>:
 800584e:	4770      	bx	lr

08005850 <__retarget_lock_release_recursive>:
 8005850:	4770      	bx	lr

08005852 <memchr>:
 8005852:	4603      	mov	r3, r0
 8005854:	b510      	push	{r4, lr}
 8005856:	b2c9      	uxtb	r1, r1
 8005858:	4402      	add	r2, r0
 800585a:	4293      	cmp	r3, r2
 800585c:	4618      	mov	r0, r3
 800585e:	d101      	bne.n	8005864 <memchr+0x12>
 8005860:	2000      	movs	r0, #0
 8005862:	e003      	b.n	800586c <memchr+0x1a>
 8005864:	7804      	ldrb	r4, [r0, #0]
 8005866:	3301      	adds	r3, #1
 8005868:	428c      	cmp	r4, r1
 800586a:	d1f6      	bne.n	800585a <memchr+0x8>
 800586c:	bd10      	pop	{r4, pc}
	...

08005870 <nanf>:
 8005870:	4800      	ldr	r0, [pc, #0]	; (8005874 <nanf+0x4>)
 8005872:	4770      	bx	lr
 8005874:	7fc00000 	.word	0x7fc00000

08005878 <quorem>:
 8005878:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800587c:	6903      	ldr	r3, [r0, #16]
 800587e:	690c      	ldr	r4, [r1, #16]
 8005880:	4607      	mov	r7, r0
 8005882:	42a3      	cmp	r3, r4
 8005884:	db7f      	blt.n	8005986 <quorem+0x10e>
 8005886:	3c01      	subs	r4, #1
 8005888:	f100 0514 	add.w	r5, r0, #20
 800588c:	f101 0814 	add.w	r8, r1, #20
 8005890:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005894:	9301      	str	r3, [sp, #4]
 8005896:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800589a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800589e:	3301      	adds	r3, #1
 80058a0:	429a      	cmp	r2, r3
 80058a2:	fbb2 f6f3 	udiv	r6, r2, r3
 80058a6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80058aa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80058ae:	d331      	bcc.n	8005914 <quorem+0x9c>
 80058b0:	f04f 0e00 	mov.w	lr, #0
 80058b4:	4640      	mov	r0, r8
 80058b6:	46ac      	mov	ip, r5
 80058b8:	46f2      	mov	sl, lr
 80058ba:	f850 2b04 	ldr.w	r2, [r0], #4
 80058be:	b293      	uxth	r3, r2
 80058c0:	fb06 e303 	mla	r3, r6, r3, lr
 80058c4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80058c8:	0c1a      	lsrs	r2, r3, #16
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	fb06 220e 	mla	r2, r6, lr, r2
 80058d0:	ebaa 0303 	sub.w	r3, sl, r3
 80058d4:	f8dc a000 	ldr.w	sl, [ip]
 80058d8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80058dc:	fa1f fa8a 	uxth.w	sl, sl
 80058e0:	4453      	add	r3, sl
 80058e2:	f8dc a000 	ldr.w	sl, [ip]
 80058e6:	b292      	uxth	r2, r2
 80058e8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80058ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80058f6:	4581      	cmp	r9, r0
 80058f8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80058fc:	f84c 3b04 	str.w	r3, [ip], #4
 8005900:	d2db      	bcs.n	80058ba <quorem+0x42>
 8005902:	f855 300b 	ldr.w	r3, [r5, fp]
 8005906:	b92b      	cbnz	r3, 8005914 <quorem+0x9c>
 8005908:	9b01      	ldr	r3, [sp, #4]
 800590a:	3b04      	subs	r3, #4
 800590c:	429d      	cmp	r5, r3
 800590e:	461a      	mov	r2, r3
 8005910:	d32d      	bcc.n	800596e <quorem+0xf6>
 8005912:	613c      	str	r4, [r7, #16]
 8005914:	4638      	mov	r0, r7
 8005916:	f001 f9df 	bl	8006cd8 <__mcmp>
 800591a:	2800      	cmp	r0, #0
 800591c:	db23      	blt.n	8005966 <quorem+0xee>
 800591e:	4629      	mov	r1, r5
 8005920:	2000      	movs	r0, #0
 8005922:	3601      	adds	r6, #1
 8005924:	f858 2b04 	ldr.w	r2, [r8], #4
 8005928:	f8d1 c000 	ldr.w	ip, [r1]
 800592c:	b293      	uxth	r3, r2
 800592e:	1ac3      	subs	r3, r0, r3
 8005930:	0c12      	lsrs	r2, r2, #16
 8005932:	fa1f f08c 	uxth.w	r0, ip
 8005936:	4403      	add	r3, r0
 8005938:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800593c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005940:	b29b      	uxth	r3, r3
 8005942:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005946:	45c1      	cmp	r9, r8
 8005948:	ea4f 4022 	mov.w	r0, r2, asr #16
 800594c:	f841 3b04 	str.w	r3, [r1], #4
 8005950:	d2e8      	bcs.n	8005924 <quorem+0xac>
 8005952:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005956:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800595a:	b922      	cbnz	r2, 8005966 <quorem+0xee>
 800595c:	3b04      	subs	r3, #4
 800595e:	429d      	cmp	r5, r3
 8005960:	461a      	mov	r2, r3
 8005962:	d30a      	bcc.n	800597a <quorem+0x102>
 8005964:	613c      	str	r4, [r7, #16]
 8005966:	4630      	mov	r0, r6
 8005968:	b003      	add	sp, #12
 800596a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800596e:	6812      	ldr	r2, [r2, #0]
 8005970:	3b04      	subs	r3, #4
 8005972:	2a00      	cmp	r2, #0
 8005974:	d1cd      	bne.n	8005912 <quorem+0x9a>
 8005976:	3c01      	subs	r4, #1
 8005978:	e7c8      	b.n	800590c <quorem+0x94>
 800597a:	6812      	ldr	r2, [r2, #0]
 800597c:	3b04      	subs	r3, #4
 800597e:	2a00      	cmp	r2, #0
 8005980:	d1f0      	bne.n	8005964 <quorem+0xec>
 8005982:	3c01      	subs	r4, #1
 8005984:	e7eb      	b.n	800595e <quorem+0xe6>
 8005986:	2000      	movs	r0, #0
 8005988:	e7ee      	b.n	8005968 <quorem+0xf0>
 800598a:	0000      	movs	r0, r0
 800598c:	0000      	movs	r0, r0
	...

08005990 <_dtoa_r>:
 8005990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005994:	4616      	mov	r6, r2
 8005996:	461f      	mov	r7, r3
 8005998:	69c4      	ldr	r4, [r0, #28]
 800599a:	b099      	sub	sp, #100	; 0x64
 800599c:	4605      	mov	r5, r0
 800599e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80059a2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80059a6:	b974      	cbnz	r4, 80059c6 <_dtoa_r+0x36>
 80059a8:	2010      	movs	r0, #16
 80059aa:	f000 fe1d 	bl	80065e8 <malloc>
 80059ae:	4602      	mov	r2, r0
 80059b0:	61e8      	str	r0, [r5, #28]
 80059b2:	b920      	cbnz	r0, 80059be <_dtoa_r+0x2e>
 80059b4:	21ef      	movs	r1, #239	; 0xef
 80059b6:	4bac      	ldr	r3, [pc, #688]	; (8005c68 <_dtoa_r+0x2d8>)
 80059b8:	48ac      	ldr	r0, [pc, #688]	; (8005c6c <_dtoa_r+0x2dc>)
 80059ba:	f002 fc55 	bl	8008268 <__assert_func>
 80059be:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80059c2:	6004      	str	r4, [r0, #0]
 80059c4:	60c4      	str	r4, [r0, #12]
 80059c6:	69eb      	ldr	r3, [r5, #28]
 80059c8:	6819      	ldr	r1, [r3, #0]
 80059ca:	b151      	cbz	r1, 80059e2 <_dtoa_r+0x52>
 80059cc:	685a      	ldr	r2, [r3, #4]
 80059ce:	2301      	movs	r3, #1
 80059d0:	4093      	lsls	r3, r2
 80059d2:	604a      	str	r2, [r1, #4]
 80059d4:	608b      	str	r3, [r1, #8]
 80059d6:	4628      	mov	r0, r5
 80059d8:	f000 fefa 	bl	80067d0 <_Bfree>
 80059dc:	2200      	movs	r2, #0
 80059de:	69eb      	ldr	r3, [r5, #28]
 80059e0:	601a      	str	r2, [r3, #0]
 80059e2:	1e3b      	subs	r3, r7, #0
 80059e4:	bfaf      	iteee	ge
 80059e6:	2300      	movge	r3, #0
 80059e8:	2201      	movlt	r2, #1
 80059ea:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80059ee:	9305      	strlt	r3, [sp, #20]
 80059f0:	bfa8      	it	ge
 80059f2:	f8c8 3000 	strge.w	r3, [r8]
 80059f6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80059fa:	4b9d      	ldr	r3, [pc, #628]	; (8005c70 <_dtoa_r+0x2e0>)
 80059fc:	bfb8      	it	lt
 80059fe:	f8c8 2000 	strlt.w	r2, [r8]
 8005a02:	ea33 0309 	bics.w	r3, r3, r9
 8005a06:	d119      	bne.n	8005a3c <_dtoa_r+0xac>
 8005a08:	f242 730f 	movw	r3, #9999	; 0x270f
 8005a0c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005a0e:	6013      	str	r3, [r2, #0]
 8005a10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005a14:	4333      	orrs	r3, r6
 8005a16:	f000 8589 	beq.w	800652c <_dtoa_r+0xb9c>
 8005a1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005a1c:	b953      	cbnz	r3, 8005a34 <_dtoa_r+0xa4>
 8005a1e:	4b95      	ldr	r3, [pc, #596]	; (8005c74 <_dtoa_r+0x2e4>)
 8005a20:	e023      	b.n	8005a6a <_dtoa_r+0xda>
 8005a22:	4b95      	ldr	r3, [pc, #596]	; (8005c78 <_dtoa_r+0x2e8>)
 8005a24:	9303      	str	r3, [sp, #12]
 8005a26:	3308      	adds	r3, #8
 8005a28:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005a2a:	6013      	str	r3, [r2, #0]
 8005a2c:	9803      	ldr	r0, [sp, #12]
 8005a2e:	b019      	add	sp, #100	; 0x64
 8005a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a34:	4b8f      	ldr	r3, [pc, #572]	; (8005c74 <_dtoa_r+0x2e4>)
 8005a36:	9303      	str	r3, [sp, #12]
 8005a38:	3303      	adds	r3, #3
 8005a3a:	e7f5      	b.n	8005a28 <_dtoa_r+0x98>
 8005a3c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005a40:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005a44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a48:	2200      	movs	r2, #0
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	f7fb f818 	bl	8000a80 <__aeabi_dcmpeq>
 8005a50:	4680      	mov	r8, r0
 8005a52:	b160      	cbz	r0, 8005a6e <_dtoa_r+0xde>
 8005a54:	2301      	movs	r3, #1
 8005a56:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005a58:	6013      	str	r3, [r2, #0]
 8005a5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f000 8562 	beq.w	8006526 <_dtoa_r+0xb96>
 8005a62:	4b86      	ldr	r3, [pc, #536]	; (8005c7c <_dtoa_r+0x2ec>)
 8005a64:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005a66:	6013      	str	r3, [r2, #0]
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	9303      	str	r3, [sp, #12]
 8005a6c:	e7de      	b.n	8005a2c <_dtoa_r+0x9c>
 8005a6e:	ab16      	add	r3, sp, #88	; 0x58
 8005a70:	9301      	str	r3, [sp, #4]
 8005a72:	ab17      	add	r3, sp, #92	; 0x5c
 8005a74:	9300      	str	r3, [sp, #0]
 8005a76:	4628      	mov	r0, r5
 8005a78:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005a7c:	f001 fa3c 	bl	8006ef8 <__d2b>
 8005a80:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005a84:	4682      	mov	sl, r0
 8005a86:	2c00      	cmp	r4, #0
 8005a88:	d07e      	beq.n	8005b88 <_dtoa_r+0x1f8>
 8005a8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a90:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005a94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a98:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005a9c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005aa0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	4b75      	ldr	r3, [pc, #468]	; (8005c80 <_dtoa_r+0x2f0>)
 8005aaa:	f7fa fbc9 	bl	8000240 <__aeabi_dsub>
 8005aae:	a368      	add	r3, pc, #416	; (adr r3, 8005c50 <_dtoa_r+0x2c0>)
 8005ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab4:	f7fa fd7c 	bl	80005b0 <__aeabi_dmul>
 8005ab8:	a367      	add	r3, pc, #412	; (adr r3, 8005c58 <_dtoa_r+0x2c8>)
 8005aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005abe:	f7fa fbc1 	bl	8000244 <__adddf3>
 8005ac2:	4606      	mov	r6, r0
 8005ac4:	4620      	mov	r0, r4
 8005ac6:	460f      	mov	r7, r1
 8005ac8:	f7fa fd08 	bl	80004dc <__aeabi_i2d>
 8005acc:	a364      	add	r3, pc, #400	; (adr r3, 8005c60 <_dtoa_r+0x2d0>)
 8005ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad2:	f7fa fd6d 	bl	80005b0 <__aeabi_dmul>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	460b      	mov	r3, r1
 8005ada:	4630      	mov	r0, r6
 8005adc:	4639      	mov	r1, r7
 8005ade:	f7fa fbb1 	bl	8000244 <__adddf3>
 8005ae2:	4606      	mov	r6, r0
 8005ae4:	460f      	mov	r7, r1
 8005ae6:	f7fb f813 	bl	8000b10 <__aeabi_d2iz>
 8005aea:	2200      	movs	r2, #0
 8005aec:	4683      	mov	fp, r0
 8005aee:	2300      	movs	r3, #0
 8005af0:	4630      	mov	r0, r6
 8005af2:	4639      	mov	r1, r7
 8005af4:	f7fa ffce 	bl	8000a94 <__aeabi_dcmplt>
 8005af8:	b148      	cbz	r0, 8005b0e <_dtoa_r+0x17e>
 8005afa:	4658      	mov	r0, fp
 8005afc:	f7fa fcee 	bl	80004dc <__aeabi_i2d>
 8005b00:	4632      	mov	r2, r6
 8005b02:	463b      	mov	r3, r7
 8005b04:	f7fa ffbc 	bl	8000a80 <__aeabi_dcmpeq>
 8005b08:	b908      	cbnz	r0, 8005b0e <_dtoa_r+0x17e>
 8005b0a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005b0e:	f1bb 0f16 	cmp.w	fp, #22
 8005b12:	d857      	bhi.n	8005bc4 <_dtoa_r+0x234>
 8005b14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b18:	4b5a      	ldr	r3, [pc, #360]	; (8005c84 <_dtoa_r+0x2f4>)
 8005b1a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b22:	f7fa ffb7 	bl	8000a94 <__aeabi_dcmplt>
 8005b26:	2800      	cmp	r0, #0
 8005b28:	d04e      	beq.n	8005bc8 <_dtoa_r+0x238>
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005b30:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b32:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005b34:	1b1b      	subs	r3, r3, r4
 8005b36:	1e5a      	subs	r2, r3, #1
 8005b38:	bf46      	itte	mi
 8005b3a:	f1c3 0901 	rsbmi	r9, r3, #1
 8005b3e:	2300      	movmi	r3, #0
 8005b40:	f04f 0900 	movpl.w	r9, #0
 8005b44:	9209      	str	r2, [sp, #36]	; 0x24
 8005b46:	bf48      	it	mi
 8005b48:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005b4a:	f1bb 0f00 	cmp.w	fp, #0
 8005b4e:	db3d      	blt.n	8005bcc <_dtoa_r+0x23c>
 8005b50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b52:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8005b56:	445b      	add	r3, fp
 8005b58:	9309      	str	r3, [sp, #36]	; 0x24
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	930a      	str	r3, [sp, #40]	; 0x28
 8005b5e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b60:	2b09      	cmp	r3, #9
 8005b62:	d867      	bhi.n	8005c34 <_dtoa_r+0x2a4>
 8005b64:	2b05      	cmp	r3, #5
 8005b66:	bfc4      	itt	gt
 8005b68:	3b04      	subgt	r3, #4
 8005b6a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005b6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b6e:	bfc8      	it	gt
 8005b70:	2400      	movgt	r4, #0
 8005b72:	f1a3 0302 	sub.w	r3, r3, #2
 8005b76:	bfd8      	it	le
 8005b78:	2401      	movle	r4, #1
 8005b7a:	2b03      	cmp	r3, #3
 8005b7c:	f200 8086 	bhi.w	8005c8c <_dtoa_r+0x2fc>
 8005b80:	e8df f003 	tbb	[pc, r3]
 8005b84:	5637392c 	.word	0x5637392c
 8005b88:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005b8c:	441c      	add	r4, r3
 8005b8e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005b92:	2b20      	cmp	r3, #32
 8005b94:	bfc1      	itttt	gt
 8005b96:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005b9a:	fa09 f903 	lslgt.w	r9, r9, r3
 8005b9e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8005ba2:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005ba6:	bfd6      	itet	le
 8005ba8:	f1c3 0320 	rsble	r3, r3, #32
 8005bac:	ea49 0003 	orrgt.w	r0, r9, r3
 8005bb0:	fa06 f003 	lslle.w	r0, r6, r3
 8005bb4:	f7fa fc82 	bl	80004bc <__aeabi_ui2d>
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005bbe:	3c01      	subs	r4, #1
 8005bc0:	9213      	str	r2, [sp, #76]	; 0x4c
 8005bc2:	e76f      	b.n	8005aa4 <_dtoa_r+0x114>
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e7b3      	b.n	8005b30 <_dtoa_r+0x1a0>
 8005bc8:	900f      	str	r0, [sp, #60]	; 0x3c
 8005bca:	e7b2      	b.n	8005b32 <_dtoa_r+0x1a2>
 8005bcc:	f1cb 0300 	rsb	r3, fp, #0
 8005bd0:	930a      	str	r3, [sp, #40]	; 0x28
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	eba9 090b 	sub.w	r9, r9, fp
 8005bd8:	930e      	str	r3, [sp, #56]	; 0x38
 8005bda:	e7c0      	b.n	8005b5e <_dtoa_r+0x1ce>
 8005bdc:	2300      	movs	r3, #0
 8005bde:	930b      	str	r3, [sp, #44]	; 0x2c
 8005be0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	dc55      	bgt.n	8005c92 <_dtoa_r+0x302>
 8005be6:	2301      	movs	r3, #1
 8005be8:	461a      	mov	r2, r3
 8005bea:	9306      	str	r3, [sp, #24]
 8005bec:	9308      	str	r3, [sp, #32]
 8005bee:	9223      	str	r2, [sp, #140]	; 0x8c
 8005bf0:	e00b      	b.n	8005c0a <_dtoa_r+0x27a>
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e7f3      	b.n	8005bde <_dtoa_r+0x24e>
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	930b      	str	r3, [sp, #44]	; 0x2c
 8005bfa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005bfc:	445b      	add	r3, fp
 8005bfe:	9306      	str	r3, [sp, #24]
 8005c00:	3301      	adds	r3, #1
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	9308      	str	r3, [sp, #32]
 8005c06:	bfb8      	it	lt
 8005c08:	2301      	movlt	r3, #1
 8005c0a:	2100      	movs	r1, #0
 8005c0c:	2204      	movs	r2, #4
 8005c0e:	69e8      	ldr	r0, [r5, #28]
 8005c10:	f102 0614 	add.w	r6, r2, #20
 8005c14:	429e      	cmp	r6, r3
 8005c16:	d940      	bls.n	8005c9a <_dtoa_r+0x30a>
 8005c18:	6041      	str	r1, [r0, #4]
 8005c1a:	4628      	mov	r0, r5
 8005c1c:	f000 fd98 	bl	8006750 <_Balloc>
 8005c20:	9003      	str	r0, [sp, #12]
 8005c22:	2800      	cmp	r0, #0
 8005c24:	d13c      	bne.n	8005ca0 <_dtoa_r+0x310>
 8005c26:	4602      	mov	r2, r0
 8005c28:	f240 11af 	movw	r1, #431	; 0x1af
 8005c2c:	4b16      	ldr	r3, [pc, #88]	; (8005c88 <_dtoa_r+0x2f8>)
 8005c2e:	e6c3      	b.n	80059b8 <_dtoa_r+0x28>
 8005c30:	2301      	movs	r3, #1
 8005c32:	e7e1      	b.n	8005bf8 <_dtoa_r+0x268>
 8005c34:	2401      	movs	r4, #1
 8005c36:	2300      	movs	r3, #0
 8005c38:	940b      	str	r4, [sp, #44]	; 0x2c
 8005c3a:	9322      	str	r3, [sp, #136]	; 0x88
 8005c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c40:	2200      	movs	r2, #0
 8005c42:	9306      	str	r3, [sp, #24]
 8005c44:	9308      	str	r3, [sp, #32]
 8005c46:	2312      	movs	r3, #18
 8005c48:	e7d1      	b.n	8005bee <_dtoa_r+0x25e>
 8005c4a:	bf00      	nop
 8005c4c:	f3af 8000 	nop.w
 8005c50:	636f4361 	.word	0x636f4361
 8005c54:	3fd287a7 	.word	0x3fd287a7
 8005c58:	8b60c8b3 	.word	0x8b60c8b3
 8005c5c:	3fc68a28 	.word	0x3fc68a28
 8005c60:	509f79fb 	.word	0x509f79fb
 8005c64:	3fd34413 	.word	0x3fd34413
 8005c68:	080097c8 	.word	0x080097c8
 8005c6c:	080097df 	.word	0x080097df
 8005c70:	7ff00000 	.word	0x7ff00000
 8005c74:	080097c4 	.word	0x080097c4
 8005c78:	080097bb 	.word	0x080097bb
 8005c7c:	08009793 	.word	0x08009793
 8005c80:	3ff80000 	.word	0x3ff80000
 8005c84:	080098d0 	.word	0x080098d0
 8005c88:	08009837 	.word	0x08009837
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c90:	e7d4      	b.n	8005c3c <_dtoa_r+0x2ac>
 8005c92:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c94:	9306      	str	r3, [sp, #24]
 8005c96:	9308      	str	r3, [sp, #32]
 8005c98:	e7b7      	b.n	8005c0a <_dtoa_r+0x27a>
 8005c9a:	3101      	adds	r1, #1
 8005c9c:	0052      	lsls	r2, r2, #1
 8005c9e:	e7b7      	b.n	8005c10 <_dtoa_r+0x280>
 8005ca0:	69eb      	ldr	r3, [r5, #28]
 8005ca2:	9a03      	ldr	r2, [sp, #12]
 8005ca4:	601a      	str	r2, [r3, #0]
 8005ca6:	9b08      	ldr	r3, [sp, #32]
 8005ca8:	2b0e      	cmp	r3, #14
 8005caa:	f200 80a8 	bhi.w	8005dfe <_dtoa_r+0x46e>
 8005cae:	2c00      	cmp	r4, #0
 8005cb0:	f000 80a5 	beq.w	8005dfe <_dtoa_r+0x46e>
 8005cb4:	f1bb 0f00 	cmp.w	fp, #0
 8005cb8:	dd34      	ble.n	8005d24 <_dtoa_r+0x394>
 8005cba:	4b9a      	ldr	r3, [pc, #616]	; (8005f24 <_dtoa_r+0x594>)
 8005cbc:	f00b 020f 	and.w	r2, fp, #15
 8005cc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005cc4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005cc8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005ccc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005cd0:	ea4f 142b 	mov.w	r4, fp, asr #4
 8005cd4:	d016      	beq.n	8005d04 <_dtoa_r+0x374>
 8005cd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005cda:	4b93      	ldr	r3, [pc, #588]	; (8005f28 <_dtoa_r+0x598>)
 8005cdc:	2703      	movs	r7, #3
 8005cde:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005ce2:	f7fa fd8f 	bl	8000804 <__aeabi_ddiv>
 8005ce6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005cea:	f004 040f 	and.w	r4, r4, #15
 8005cee:	4e8e      	ldr	r6, [pc, #568]	; (8005f28 <_dtoa_r+0x598>)
 8005cf0:	b954      	cbnz	r4, 8005d08 <_dtoa_r+0x378>
 8005cf2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005cf6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005cfa:	f7fa fd83 	bl	8000804 <__aeabi_ddiv>
 8005cfe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d02:	e029      	b.n	8005d58 <_dtoa_r+0x3c8>
 8005d04:	2702      	movs	r7, #2
 8005d06:	e7f2      	b.n	8005cee <_dtoa_r+0x35e>
 8005d08:	07e1      	lsls	r1, r4, #31
 8005d0a:	d508      	bpl.n	8005d1e <_dtoa_r+0x38e>
 8005d0c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d10:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005d14:	f7fa fc4c 	bl	80005b0 <__aeabi_dmul>
 8005d18:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005d1c:	3701      	adds	r7, #1
 8005d1e:	1064      	asrs	r4, r4, #1
 8005d20:	3608      	adds	r6, #8
 8005d22:	e7e5      	b.n	8005cf0 <_dtoa_r+0x360>
 8005d24:	f000 80a5 	beq.w	8005e72 <_dtoa_r+0x4e2>
 8005d28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d2c:	f1cb 0400 	rsb	r4, fp, #0
 8005d30:	4b7c      	ldr	r3, [pc, #496]	; (8005f24 <_dtoa_r+0x594>)
 8005d32:	f004 020f 	and.w	r2, r4, #15
 8005d36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3e:	f7fa fc37 	bl	80005b0 <__aeabi_dmul>
 8005d42:	2702      	movs	r7, #2
 8005d44:	2300      	movs	r3, #0
 8005d46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d4a:	4e77      	ldr	r6, [pc, #476]	; (8005f28 <_dtoa_r+0x598>)
 8005d4c:	1124      	asrs	r4, r4, #4
 8005d4e:	2c00      	cmp	r4, #0
 8005d50:	f040 8084 	bne.w	8005e5c <_dtoa_r+0x4cc>
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1d2      	bne.n	8005cfe <_dtoa_r+0x36e>
 8005d58:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005d5c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005d60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f000 8087 	beq.w	8005e76 <_dtoa_r+0x4e6>
 8005d68:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	4b6f      	ldr	r3, [pc, #444]	; (8005f2c <_dtoa_r+0x59c>)
 8005d70:	f7fa fe90 	bl	8000a94 <__aeabi_dcmplt>
 8005d74:	2800      	cmp	r0, #0
 8005d76:	d07e      	beq.n	8005e76 <_dtoa_r+0x4e6>
 8005d78:	9b08      	ldr	r3, [sp, #32]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d07b      	beq.n	8005e76 <_dtoa_r+0x4e6>
 8005d7e:	9b06      	ldr	r3, [sp, #24]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	dd38      	ble.n	8005df6 <_dtoa_r+0x466>
 8005d84:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d88:	2200      	movs	r2, #0
 8005d8a:	4b69      	ldr	r3, [pc, #420]	; (8005f30 <_dtoa_r+0x5a0>)
 8005d8c:	f7fa fc10 	bl	80005b0 <__aeabi_dmul>
 8005d90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d94:	9c06      	ldr	r4, [sp, #24]
 8005d96:	f10b 38ff 	add.w	r8, fp, #4294967295
 8005d9a:	3701      	adds	r7, #1
 8005d9c:	4638      	mov	r0, r7
 8005d9e:	f7fa fb9d 	bl	80004dc <__aeabi_i2d>
 8005da2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005da6:	f7fa fc03 	bl	80005b0 <__aeabi_dmul>
 8005daa:	2200      	movs	r2, #0
 8005dac:	4b61      	ldr	r3, [pc, #388]	; (8005f34 <_dtoa_r+0x5a4>)
 8005dae:	f7fa fa49 	bl	8000244 <__adddf3>
 8005db2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005db6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005dba:	9611      	str	r6, [sp, #68]	; 0x44
 8005dbc:	2c00      	cmp	r4, #0
 8005dbe:	d15d      	bne.n	8005e7c <_dtoa_r+0x4ec>
 8005dc0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	4b5c      	ldr	r3, [pc, #368]	; (8005f38 <_dtoa_r+0x5a8>)
 8005dc8:	f7fa fa3a 	bl	8000240 <__aeabi_dsub>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	460b      	mov	r3, r1
 8005dd0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005dd4:	4633      	mov	r3, r6
 8005dd6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005dd8:	f7fa fe7a 	bl	8000ad0 <__aeabi_dcmpgt>
 8005ddc:	2800      	cmp	r0, #0
 8005dde:	f040 8295 	bne.w	800630c <_dtoa_r+0x97c>
 8005de2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005de6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005de8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005dec:	f7fa fe52 	bl	8000a94 <__aeabi_dcmplt>
 8005df0:	2800      	cmp	r0, #0
 8005df2:	f040 8289 	bne.w	8006308 <_dtoa_r+0x978>
 8005df6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005dfa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005dfe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f2c0 8151 	blt.w	80060a8 <_dtoa_r+0x718>
 8005e06:	f1bb 0f0e 	cmp.w	fp, #14
 8005e0a:	f300 814d 	bgt.w	80060a8 <_dtoa_r+0x718>
 8005e0e:	4b45      	ldr	r3, [pc, #276]	; (8005f24 <_dtoa_r+0x594>)
 8005e10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005e14:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005e18:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005e1c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f280 80da 	bge.w	8005fd8 <_dtoa_r+0x648>
 8005e24:	9b08      	ldr	r3, [sp, #32]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f300 80d6 	bgt.w	8005fd8 <_dtoa_r+0x648>
 8005e2c:	f040 826b 	bne.w	8006306 <_dtoa_r+0x976>
 8005e30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e34:	2200      	movs	r2, #0
 8005e36:	4b40      	ldr	r3, [pc, #256]	; (8005f38 <_dtoa_r+0x5a8>)
 8005e38:	f7fa fbba 	bl	80005b0 <__aeabi_dmul>
 8005e3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e40:	f7fa fe3c 	bl	8000abc <__aeabi_dcmpge>
 8005e44:	9c08      	ldr	r4, [sp, #32]
 8005e46:	4626      	mov	r6, r4
 8005e48:	2800      	cmp	r0, #0
 8005e4a:	f040 8241 	bne.w	80062d0 <_dtoa_r+0x940>
 8005e4e:	2331      	movs	r3, #49	; 0x31
 8005e50:	9f03      	ldr	r7, [sp, #12]
 8005e52:	f10b 0b01 	add.w	fp, fp, #1
 8005e56:	f807 3b01 	strb.w	r3, [r7], #1
 8005e5a:	e23d      	b.n	80062d8 <_dtoa_r+0x948>
 8005e5c:	07e2      	lsls	r2, r4, #31
 8005e5e:	d505      	bpl.n	8005e6c <_dtoa_r+0x4dc>
 8005e60:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005e64:	f7fa fba4 	bl	80005b0 <__aeabi_dmul>
 8005e68:	2301      	movs	r3, #1
 8005e6a:	3701      	adds	r7, #1
 8005e6c:	1064      	asrs	r4, r4, #1
 8005e6e:	3608      	adds	r6, #8
 8005e70:	e76d      	b.n	8005d4e <_dtoa_r+0x3be>
 8005e72:	2702      	movs	r7, #2
 8005e74:	e770      	b.n	8005d58 <_dtoa_r+0x3c8>
 8005e76:	46d8      	mov	r8, fp
 8005e78:	9c08      	ldr	r4, [sp, #32]
 8005e7a:	e78f      	b.n	8005d9c <_dtoa_r+0x40c>
 8005e7c:	9903      	ldr	r1, [sp, #12]
 8005e7e:	4b29      	ldr	r3, [pc, #164]	; (8005f24 <_dtoa_r+0x594>)
 8005e80:	4421      	add	r1, r4
 8005e82:	9112      	str	r1, [sp, #72]	; 0x48
 8005e84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e86:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005e8a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005e8e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005e92:	2900      	cmp	r1, #0
 8005e94:	d054      	beq.n	8005f40 <_dtoa_r+0x5b0>
 8005e96:	2000      	movs	r0, #0
 8005e98:	4928      	ldr	r1, [pc, #160]	; (8005f3c <_dtoa_r+0x5ac>)
 8005e9a:	f7fa fcb3 	bl	8000804 <__aeabi_ddiv>
 8005e9e:	463b      	mov	r3, r7
 8005ea0:	4632      	mov	r2, r6
 8005ea2:	f7fa f9cd 	bl	8000240 <__aeabi_dsub>
 8005ea6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005eaa:	9f03      	ldr	r7, [sp, #12]
 8005eac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005eb0:	f7fa fe2e 	bl	8000b10 <__aeabi_d2iz>
 8005eb4:	4604      	mov	r4, r0
 8005eb6:	f7fa fb11 	bl	80004dc <__aeabi_i2d>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ec2:	f7fa f9bd 	bl	8000240 <__aeabi_dsub>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	460b      	mov	r3, r1
 8005eca:	3430      	adds	r4, #48	; 0x30
 8005ecc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005ed0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005ed4:	f807 4b01 	strb.w	r4, [r7], #1
 8005ed8:	f7fa fddc 	bl	8000a94 <__aeabi_dcmplt>
 8005edc:	2800      	cmp	r0, #0
 8005ede:	d173      	bne.n	8005fc8 <_dtoa_r+0x638>
 8005ee0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ee4:	2000      	movs	r0, #0
 8005ee6:	4911      	ldr	r1, [pc, #68]	; (8005f2c <_dtoa_r+0x59c>)
 8005ee8:	f7fa f9aa 	bl	8000240 <__aeabi_dsub>
 8005eec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005ef0:	f7fa fdd0 	bl	8000a94 <__aeabi_dcmplt>
 8005ef4:	2800      	cmp	r0, #0
 8005ef6:	f040 80b6 	bne.w	8006066 <_dtoa_r+0x6d6>
 8005efa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005efc:	429f      	cmp	r7, r3
 8005efe:	f43f af7a 	beq.w	8005df6 <_dtoa_r+0x466>
 8005f02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005f06:	2200      	movs	r2, #0
 8005f08:	4b09      	ldr	r3, [pc, #36]	; (8005f30 <_dtoa_r+0x5a0>)
 8005f0a:	f7fa fb51 	bl	80005b0 <__aeabi_dmul>
 8005f0e:	2200      	movs	r2, #0
 8005f10:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005f14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f18:	4b05      	ldr	r3, [pc, #20]	; (8005f30 <_dtoa_r+0x5a0>)
 8005f1a:	f7fa fb49 	bl	80005b0 <__aeabi_dmul>
 8005f1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f22:	e7c3      	b.n	8005eac <_dtoa_r+0x51c>
 8005f24:	080098d0 	.word	0x080098d0
 8005f28:	080098a8 	.word	0x080098a8
 8005f2c:	3ff00000 	.word	0x3ff00000
 8005f30:	40240000 	.word	0x40240000
 8005f34:	401c0000 	.word	0x401c0000
 8005f38:	40140000 	.word	0x40140000
 8005f3c:	3fe00000 	.word	0x3fe00000
 8005f40:	4630      	mov	r0, r6
 8005f42:	4639      	mov	r1, r7
 8005f44:	f7fa fb34 	bl	80005b0 <__aeabi_dmul>
 8005f48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f4a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005f4e:	9c03      	ldr	r4, [sp, #12]
 8005f50:	9314      	str	r3, [sp, #80]	; 0x50
 8005f52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f56:	f7fa fddb 	bl	8000b10 <__aeabi_d2iz>
 8005f5a:	9015      	str	r0, [sp, #84]	; 0x54
 8005f5c:	f7fa fabe 	bl	80004dc <__aeabi_i2d>
 8005f60:	4602      	mov	r2, r0
 8005f62:	460b      	mov	r3, r1
 8005f64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f68:	f7fa f96a 	bl	8000240 <__aeabi_dsub>
 8005f6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005f6e:	4606      	mov	r6, r0
 8005f70:	3330      	adds	r3, #48	; 0x30
 8005f72:	f804 3b01 	strb.w	r3, [r4], #1
 8005f76:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f78:	460f      	mov	r7, r1
 8005f7a:	429c      	cmp	r4, r3
 8005f7c:	f04f 0200 	mov.w	r2, #0
 8005f80:	d124      	bne.n	8005fcc <_dtoa_r+0x63c>
 8005f82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005f86:	4baf      	ldr	r3, [pc, #700]	; (8006244 <_dtoa_r+0x8b4>)
 8005f88:	f7fa f95c 	bl	8000244 <__adddf3>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	460b      	mov	r3, r1
 8005f90:	4630      	mov	r0, r6
 8005f92:	4639      	mov	r1, r7
 8005f94:	f7fa fd9c 	bl	8000ad0 <__aeabi_dcmpgt>
 8005f98:	2800      	cmp	r0, #0
 8005f9a:	d163      	bne.n	8006064 <_dtoa_r+0x6d4>
 8005f9c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005fa0:	2000      	movs	r0, #0
 8005fa2:	49a8      	ldr	r1, [pc, #672]	; (8006244 <_dtoa_r+0x8b4>)
 8005fa4:	f7fa f94c 	bl	8000240 <__aeabi_dsub>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	460b      	mov	r3, r1
 8005fac:	4630      	mov	r0, r6
 8005fae:	4639      	mov	r1, r7
 8005fb0:	f7fa fd70 	bl	8000a94 <__aeabi_dcmplt>
 8005fb4:	2800      	cmp	r0, #0
 8005fb6:	f43f af1e 	beq.w	8005df6 <_dtoa_r+0x466>
 8005fba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005fbc:	1e7b      	subs	r3, r7, #1
 8005fbe:	9314      	str	r3, [sp, #80]	; 0x50
 8005fc0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005fc4:	2b30      	cmp	r3, #48	; 0x30
 8005fc6:	d0f8      	beq.n	8005fba <_dtoa_r+0x62a>
 8005fc8:	46c3      	mov	fp, r8
 8005fca:	e03b      	b.n	8006044 <_dtoa_r+0x6b4>
 8005fcc:	4b9e      	ldr	r3, [pc, #632]	; (8006248 <_dtoa_r+0x8b8>)
 8005fce:	f7fa faef 	bl	80005b0 <__aeabi_dmul>
 8005fd2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005fd6:	e7bc      	b.n	8005f52 <_dtoa_r+0x5c2>
 8005fd8:	9f03      	ldr	r7, [sp, #12]
 8005fda:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005fde:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005fe2:	4640      	mov	r0, r8
 8005fe4:	4649      	mov	r1, r9
 8005fe6:	f7fa fc0d 	bl	8000804 <__aeabi_ddiv>
 8005fea:	f7fa fd91 	bl	8000b10 <__aeabi_d2iz>
 8005fee:	4604      	mov	r4, r0
 8005ff0:	f7fa fa74 	bl	80004dc <__aeabi_i2d>
 8005ff4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ff8:	f7fa fada 	bl	80005b0 <__aeabi_dmul>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	460b      	mov	r3, r1
 8006000:	4640      	mov	r0, r8
 8006002:	4649      	mov	r1, r9
 8006004:	f7fa f91c 	bl	8000240 <__aeabi_dsub>
 8006008:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800600c:	f807 6b01 	strb.w	r6, [r7], #1
 8006010:	9e03      	ldr	r6, [sp, #12]
 8006012:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006016:	1bbe      	subs	r6, r7, r6
 8006018:	45b4      	cmp	ip, r6
 800601a:	4602      	mov	r2, r0
 800601c:	460b      	mov	r3, r1
 800601e:	d136      	bne.n	800608e <_dtoa_r+0x6fe>
 8006020:	f7fa f910 	bl	8000244 <__adddf3>
 8006024:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006028:	4680      	mov	r8, r0
 800602a:	4689      	mov	r9, r1
 800602c:	f7fa fd50 	bl	8000ad0 <__aeabi_dcmpgt>
 8006030:	bb58      	cbnz	r0, 800608a <_dtoa_r+0x6fa>
 8006032:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006036:	4640      	mov	r0, r8
 8006038:	4649      	mov	r1, r9
 800603a:	f7fa fd21 	bl	8000a80 <__aeabi_dcmpeq>
 800603e:	b108      	cbz	r0, 8006044 <_dtoa_r+0x6b4>
 8006040:	07e3      	lsls	r3, r4, #31
 8006042:	d422      	bmi.n	800608a <_dtoa_r+0x6fa>
 8006044:	4651      	mov	r1, sl
 8006046:	4628      	mov	r0, r5
 8006048:	f000 fbc2 	bl	80067d0 <_Bfree>
 800604c:	2300      	movs	r3, #0
 800604e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006050:	703b      	strb	r3, [r7, #0]
 8006052:	f10b 0301 	add.w	r3, fp, #1
 8006056:	6013      	str	r3, [r2, #0]
 8006058:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800605a:	2b00      	cmp	r3, #0
 800605c:	f43f ace6 	beq.w	8005a2c <_dtoa_r+0x9c>
 8006060:	601f      	str	r7, [r3, #0]
 8006062:	e4e3      	b.n	8005a2c <_dtoa_r+0x9c>
 8006064:	4627      	mov	r7, r4
 8006066:	463b      	mov	r3, r7
 8006068:	461f      	mov	r7, r3
 800606a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800606e:	2a39      	cmp	r2, #57	; 0x39
 8006070:	d107      	bne.n	8006082 <_dtoa_r+0x6f2>
 8006072:	9a03      	ldr	r2, [sp, #12]
 8006074:	429a      	cmp	r2, r3
 8006076:	d1f7      	bne.n	8006068 <_dtoa_r+0x6d8>
 8006078:	2230      	movs	r2, #48	; 0x30
 800607a:	9903      	ldr	r1, [sp, #12]
 800607c:	f108 0801 	add.w	r8, r8, #1
 8006080:	700a      	strb	r2, [r1, #0]
 8006082:	781a      	ldrb	r2, [r3, #0]
 8006084:	3201      	adds	r2, #1
 8006086:	701a      	strb	r2, [r3, #0]
 8006088:	e79e      	b.n	8005fc8 <_dtoa_r+0x638>
 800608a:	46d8      	mov	r8, fp
 800608c:	e7eb      	b.n	8006066 <_dtoa_r+0x6d6>
 800608e:	2200      	movs	r2, #0
 8006090:	4b6d      	ldr	r3, [pc, #436]	; (8006248 <_dtoa_r+0x8b8>)
 8006092:	f7fa fa8d 	bl	80005b0 <__aeabi_dmul>
 8006096:	2200      	movs	r2, #0
 8006098:	2300      	movs	r3, #0
 800609a:	4680      	mov	r8, r0
 800609c:	4689      	mov	r9, r1
 800609e:	f7fa fcef 	bl	8000a80 <__aeabi_dcmpeq>
 80060a2:	2800      	cmp	r0, #0
 80060a4:	d09b      	beq.n	8005fde <_dtoa_r+0x64e>
 80060a6:	e7cd      	b.n	8006044 <_dtoa_r+0x6b4>
 80060a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80060aa:	2a00      	cmp	r2, #0
 80060ac:	f000 80c4 	beq.w	8006238 <_dtoa_r+0x8a8>
 80060b0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80060b2:	2a01      	cmp	r2, #1
 80060b4:	f300 80a8 	bgt.w	8006208 <_dtoa_r+0x878>
 80060b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80060ba:	2a00      	cmp	r2, #0
 80060bc:	f000 80a0 	beq.w	8006200 <_dtoa_r+0x870>
 80060c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80060c4:	464f      	mov	r7, r9
 80060c6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80060c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060ca:	2101      	movs	r1, #1
 80060cc:	441a      	add	r2, r3
 80060ce:	4628      	mov	r0, r5
 80060d0:	4499      	add	r9, r3
 80060d2:	9209      	str	r2, [sp, #36]	; 0x24
 80060d4:	f000 fc7c 	bl	80069d0 <__i2b>
 80060d8:	4606      	mov	r6, r0
 80060da:	b15f      	cbz	r7, 80060f4 <_dtoa_r+0x764>
 80060dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060de:	2b00      	cmp	r3, #0
 80060e0:	dd08      	ble.n	80060f4 <_dtoa_r+0x764>
 80060e2:	42bb      	cmp	r3, r7
 80060e4:	bfa8      	it	ge
 80060e6:	463b      	movge	r3, r7
 80060e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060ea:	eba9 0903 	sub.w	r9, r9, r3
 80060ee:	1aff      	subs	r7, r7, r3
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	9309      	str	r3, [sp, #36]	; 0x24
 80060f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060f6:	b1f3      	cbz	r3, 8006136 <_dtoa_r+0x7a6>
 80060f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	f000 80a0 	beq.w	8006240 <_dtoa_r+0x8b0>
 8006100:	2c00      	cmp	r4, #0
 8006102:	dd10      	ble.n	8006126 <_dtoa_r+0x796>
 8006104:	4631      	mov	r1, r6
 8006106:	4622      	mov	r2, r4
 8006108:	4628      	mov	r0, r5
 800610a:	f000 fd1f 	bl	8006b4c <__pow5mult>
 800610e:	4652      	mov	r2, sl
 8006110:	4601      	mov	r1, r0
 8006112:	4606      	mov	r6, r0
 8006114:	4628      	mov	r0, r5
 8006116:	f000 fc71 	bl	80069fc <__multiply>
 800611a:	4680      	mov	r8, r0
 800611c:	4651      	mov	r1, sl
 800611e:	4628      	mov	r0, r5
 8006120:	f000 fb56 	bl	80067d0 <_Bfree>
 8006124:	46c2      	mov	sl, r8
 8006126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006128:	1b1a      	subs	r2, r3, r4
 800612a:	d004      	beq.n	8006136 <_dtoa_r+0x7a6>
 800612c:	4651      	mov	r1, sl
 800612e:	4628      	mov	r0, r5
 8006130:	f000 fd0c 	bl	8006b4c <__pow5mult>
 8006134:	4682      	mov	sl, r0
 8006136:	2101      	movs	r1, #1
 8006138:	4628      	mov	r0, r5
 800613a:	f000 fc49 	bl	80069d0 <__i2b>
 800613e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006140:	4604      	mov	r4, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	f340 8082 	ble.w	800624c <_dtoa_r+0x8bc>
 8006148:	461a      	mov	r2, r3
 800614a:	4601      	mov	r1, r0
 800614c:	4628      	mov	r0, r5
 800614e:	f000 fcfd 	bl	8006b4c <__pow5mult>
 8006152:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006154:	4604      	mov	r4, r0
 8006156:	2b01      	cmp	r3, #1
 8006158:	dd7b      	ble.n	8006252 <_dtoa_r+0x8c2>
 800615a:	f04f 0800 	mov.w	r8, #0
 800615e:	6923      	ldr	r3, [r4, #16]
 8006160:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006164:	6918      	ldr	r0, [r3, #16]
 8006166:	f000 fbe5 	bl	8006934 <__hi0bits>
 800616a:	f1c0 0020 	rsb	r0, r0, #32
 800616e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006170:	4418      	add	r0, r3
 8006172:	f010 001f 	ands.w	r0, r0, #31
 8006176:	f000 8092 	beq.w	800629e <_dtoa_r+0x90e>
 800617a:	f1c0 0320 	rsb	r3, r0, #32
 800617e:	2b04      	cmp	r3, #4
 8006180:	f340 8085 	ble.w	800628e <_dtoa_r+0x8fe>
 8006184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006186:	f1c0 001c 	rsb	r0, r0, #28
 800618a:	4403      	add	r3, r0
 800618c:	4481      	add	r9, r0
 800618e:	4407      	add	r7, r0
 8006190:	9309      	str	r3, [sp, #36]	; 0x24
 8006192:	f1b9 0f00 	cmp.w	r9, #0
 8006196:	dd05      	ble.n	80061a4 <_dtoa_r+0x814>
 8006198:	4651      	mov	r1, sl
 800619a:	464a      	mov	r2, r9
 800619c:	4628      	mov	r0, r5
 800619e:	f000 fd2f 	bl	8006c00 <__lshift>
 80061a2:	4682      	mov	sl, r0
 80061a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	dd05      	ble.n	80061b6 <_dtoa_r+0x826>
 80061aa:	4621      	mov	r1, r4
 80061ac:	461a      	mov	r2, r3
 80061ae:	4628      	mov	r0, r5
 80061b0:	f000 fd26 	bl	8006c00 <__lshift>
 80061b4:	4604      	mov	r4, r0
 80061b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d072      	beq.n	80062a2 <_dtoa_r+0x912>
 80061bc:	4621      	mov	r1, r4
 80061be:	4650      	mov	r0, sl
 80061c0:	f000 fd8a 	bl	8006cd8 <__mcmp>
 80061c4:	2800      	cmp	r0, #0
 80061c6:	da6c      	bge.n	80062a2 <_dtoa_r+0x912>
 80061c8:	2300      	movs	r3, #0
 80061ca:	4651      	mov	r1, sl
 80061cc:	220a      	movs	r2, #10
 80061ce:	4628      	mov	r0, r5
 80061d0:	f000 fb20 	bl	8006814 <__multadd>
 80061d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061d6:	4682      	mov	sl, r0
 80061d8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80061dc:	2b00      	cmp	r3, #0
 80061de:	f000 81ac 	beq.w	800653a <_dtoa_r+0xbaa>
 80061e2:	2300      	movs	r3, #0
 80061e4:	4631      	mov	r1, r6
 80061e6:	220a      	movs	r2, #10
 80061e8:	4628      	mov	r0, r5
 80061ea:	f000 fb13 	bl	8006814 <__multadd>
 80061ee:	9b06      	ldr	r3, [sp, #24]
 80061f0:	4606      	mov	r6, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	f300 8093 	bgt.w	800631e <_dtoa_r+0x98e>
 80061f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	dc59      	bgt.n	80062b2 <_dtoa_r+0x922>
 80061fe:	e08e      	b.n	800631e <_dtoa_r+0x98e>
 8006200:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006202:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006206:	e75d      	b.n	80060c4 <_dtoa_r+0x734>
 8006208:	9b08      	ldr	r3, [sp, #32]
 800620a:	1e5c      	subs	r4, r3, #1
 800620c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800620e:	42a3      	cmp	r3, r4
 8006210:	bfbf      	itttt	lt
 8006212:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006214:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8006216:	1ae3      	sublt	r3, r4, r3
 8006218:	18d2      	addlt	r2, r2, r3
 800621a:	bfa8      	it	ge
 800621c:	1b1c      	subge	r4, r3, r4
 800621e:	9b08      	ldr	r3, [sp, #32]
 8006220:	bfbe      	ittt	lt
 8006222:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006224:	920e      	strlt	r2, [sp, #56]	; 0x38
 8006226:	2400      	movlt	r4, #0
 8006228:	2b00      	cmp	r3, #0
 800622a:	bfb5      	itete	lt
 800622c:	eba9 0703 	sublt.w	r7, r9, r3
 8006230:	464f      	movge	r7, r9
 8006232:	2300      	movlt	r3, #0
 8006234:	9b08      	ldrge	r3, [sp, #32]
 8006236:	e747      	b.n	80060c8 <_dtoa_r+0x738>
 8006238:	464f      	mov	r7, r9
 800623a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800623c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800623e:	e74c      	b.n	80060da <_dtoa_r+0x74a>
 8006240:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006242:	e773      	b.n	800612c <_dtoa_r+0x79c>
 8006244:	3fe00000 	.word	0x3fe00000
 8006248:	40240000 	.word	0x40240000
 800624c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800624e:	2b01      	cmp	r3, #1
 8006250:	dc18      	bgt.n	8006284 <_dtoa_r+0x8f4>
 8006252:	9b04      	ldr	r3, [sp, #16]
 8006254:	b9b3      	cbnz	r3, 8006284 <_dtoa_r+0x8f4>
 8006256:	9b05      	ldr	r3, [sp, #20]
 8006258:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800625c:	b993      	cbnz	r3, 8006284 <_dtoa_r+0x8f4>
 800625e:	9b05      	ldr	r3, [sp, #20]
 8006260:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006264:	0d1b      	lsrs	r3, r3, #20
 8006266:	051b      	lsls	r3, r3, #20
 8006268:	b17b      	cbz	r3, 800628a <_dtoa_r+0x8fa>
 800626a:	f04f 0801 	mov.w	r8, #1
 800626e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006270:	f109 0901 	add.w	r9, r9, #1
 8006274:	3301      	adds	r3, #1
 8006276:	9309      	str	r3, [sp, #36]	; 0x24
 8006278:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800627a:	2b00      	cmp	r3, #0
 800627c:	f47f af6f 	bne.w	800615e <_dtoa_r+0x7ce>
 8006280:	2001      	movs	r0, #1
 8006282:	e774      	b.n	800616e <_dtoa_r+0x7de>
 8006284:	f04f 0800 	mov.w	r8, #0
 8006288:	e7f6      	b.n	8006278 <_dtoa_r+0x8e8>
 800628a:	4698      	mov	r8, r3
 800628c:	e7f4      	b.n	8006278 <_dtoa_r+0x8e8>
 800628e:	d080      	beq.n	8006192 <_dtoa_r+0x802>
 8006290:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006292:	331c      	adds	r3, #28
 8006294:	441a      	add	r2, r3
 8006296:	4499      	add	r9, r3
 8006298:	441f      	add	r7, r3
 800629a:	9209      	str	r2, [sp, #36]	; 0x24
 800629c:	e779      	b.n	8006192 <_dtoa_r+0x802>
 800629e:	4603      	mov	r3, r0
 80062a0:	e7f6      	b.n	8006290 <_dtoa_r+0x900>
 80062a2:	9b08      	ldr	r3, [sp, #32]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	dc34      	bgt.n	8006312 <_dtoa_r+0x982>
 80062a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	dd31      	ble.n	8006312 <_dtoa_r+0x982>
 80062ae:	9b08      	ldr	r3, [sp, #32]
 80062b0:	9306      	str	r3, [sp, #24]
 80062b2:	9b06      	ldr	r3, [sp, #24]
 80062b4:	b963      	cbnz	r3, 80062d0 <_dtoa_r+0x940>
 80062b6:	4621      	mov	r1, r4
 80062b8:	2205      	movs	r2, #5
 80062ba:	4628      	mov	r0, r5
 80062bc:	f000 faaa 	bl	8006814 <__multadd>
 80062c0:	4601      	mov	r1, r0
 80062c2:	4604      	mov	r4, r0
 80062c4:	4650      	mov	r0, sl
 80062c6:	f000 fd07 	bl	8006cd8 <__mcmp>
 80062ca:	2800      	cmp	r0, #0
 80062cc:	f73f adbf 	bgt.w	8005e4e <_dtoa_r+0x4be>
 80062d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80062d2:	9f03      	ldr	r7, [sp, #12]
 80062d4:	ea6f 0b03 	mvn.w	fp, r3
 80062d8:	f04f 0800 	mov.w	r8, #0
 80062dc:	4621      	mov	r1, r4
 80062de:	4628      	mov	r0, r5
 80062e0:	f000 fa76 	bl	80067d0 <_Bfree>
 80062e4:	2e00      	cmp	r6, #0
 80062e6:	f43f aead 	beq.w	8006044 <_dtoa_r+0x6b4>
 80062ea:	f1b8 0f00 	cmp.w	r8, #0
 80062ee:	d005      	beq.n	80062fc <_dtoa_r+0x96c>
 80062f0:	45b0      	cmp	r8, r6
 80062f2:	d003      	beq.n	80062fc <_dtoa_r+0x96c>
 80062f4:	4641      	mov	r1, r8
 80062f6:	4628      	mov	r0, r5
 80062f8:	f000 fa6a 	bl	80067d0 <_Bfree>
 80062fc:	4631      	mov	r1, r6
 80062fe:	4628      	mov	r0, r5
 8006300:	f000 fa66 	bl	80067d0 <_Bfree>
 8006304:	e69e      	b.n	8006044 <_dtoa_r+0x6b4>
 8006306:	2400      	movs	r4, #0
 8006308:	4626      	mov	r6, r4
 800630a:	e7e1      	b.n	80062d0 <_dtoa_r+0x940>
 800630c:	46c3      	mov	fp, r8
 800630e:	4626      	mov	r6, r4
 8006310:	e59d      	b.n	8005e4e <_dtoa_r+0x4be>
 8006312:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006314:	2b00      	cmp	r3, #0
 8006316:	f000 80c8 	beq.w	80064aa <_dtoa_r+0xb1a>
 800631a:	9b08      	ldr	r3, [sp, #32]
 800631c:	9306      	str	r3, [sp, #24]
 800631e:	2f00      	cmp	r7, #0
 8006320:	dd05      	ble.n	800632e <_dtoa_r+0x99e>
 8006322:	4631      	mov	r1, r6
 8006324:	463a      	mov	r2, r7
 8006326:	4628      	mov	r0, r5
 8006328:	f000 fc6a 	bl	8006c00 <__lshift>
 800632c:	4606      	mov	r6, r0
 800632e:	f1b8 0f00 	cmp.w	r8, #0
 8006332:	d05b      	beq.n	80063ec <_dtoa_r+0xa5c>
 8006334:	4628      	mov	r0, r5
 8006336:	6871      	ldr	r1, [r6, #4]
 8006338:	f000 fa0a 	bl	8006750 <_Balloc>
 800633c:	4607      	mov	r7, r0
 800633e:	b928      	cbnz	r0, 800634c <_dtoa_r+0x9bc>
 8006340:	4602      	mov	r2, r0
 8006342:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006346:	4b81      	ldr	r3, [pc, #516]	; (800654c <_dtoa_r+0xbbc>)
 8006348:	f7ff bb36 	b.w	80059b8 <_dtoa_r+0x28>
 800634c:	6932      	ldr	r2, [r6, #16]
 800634e:	f106 010c 	add.w	r1, r6, #12
 8006352:	3202      	adds	r2, #2
 8006354:	0092      	lsls	r2, r2, #2
 8006356:	300c      	adds	r0, #12
 8006358:	f001 ff72 	bl	8008240 <memcpy>
 800635c:	2201      	movs	r2, #1
 800635e:	4639      	mov	r1, r7
 8006360:	4628      	mov	r0, r5
 8006362:	f000 fc4d 	bl	8006c00 <__lshift>
 8006366:	46b0      	mov	r8, r6
 8006368:	4606      	mov	r6, r0
 800636a:	9b03      	ldr	r3, [sp, #12]
 800636c:	9a03      	ldr	r2, [sp, #12]
 800636e:	3301      	adds	r3, #1
 8006370:	9308      	str	r3, [sp, #32]
 8006372:	9b06      	ldr	r3, [sp, #24]
 8006374:	4413      	add	r3, r2
 8006376:	930b      	str	r3, [sp, #44]	; 0x2c
 8006378:	9b04      	ldr	r3, [sp, #16]
 800637a:	f003 0301 	and.w	r3, r3, #1
 800637e:	930a      	str	r3, [sp, #40]	; 0x28
 8006380:	9b08      	ldr	r3, [sp, #32]
 8006382:	4621      	mov	r1, r4
 8006384:	3b01      	subs	r3, #1
 8006386:	4650      	mov	r0, sl
 8006388:	9304      	str	r3, [sp, #16]
 800638a:	f7ff fa75 	bl	8005878 <quorem>
 800638e:	4641      	mov	r1, r8
 8006390:	9006      	str	r0, [sp, #24]
 8006392:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006396:	4650      	mov	r0, sl
 8006398:	f000 fc9e 	bl	8006cd8 <__mcmp>
 800639c:	4632      	mov	r2, r6
 800639e:	9009      	str	r0, [sp, #36]	; 0x24
 80063a0:	4621      	mov	r1, r4
 80063a2:	4628      	mov	r0, r5
 80063a4:	f000 fcb4 	bl	8006d10 <__mdiff>
 80063a8:	68c2      	ldr	r2, [r0, #12]
 80063aa:	4607      	mov	r7, r0
 80063ac:	bb02      	cbnz	r2, 80063f0 <_dtoa_r+0xa60>
 80063ae:	4601      	mov	r1, r0
 80063b0:	4650      	mov	r0, sl
 80063b2:	f000 fc91 	bl	8006cd8 <__mcmp>
 80063b6:	4602      	mov	r2, r0
 80063b8:	4639      	mov	r1, r7
 80063ba:	4628      	mov	r0, r5
 80063bc:	920c      	str	r2, [sp, #48]	; 0x30
 80063be:	f000 fa07 	bl	80067d0 <_Bfree>
 80063c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80063c6:	9f08      	ldr	r7, [sp, #32]
 80063c8:	ea43 0102 	orr.w	r1, r3, r2
 80063cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063ce:	4319      	orrs	r1, r3
 80063d0:	d110      	bne.n	80063f4 <_dtoa_r+0xa64>
 80063d2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80063d6:	d029      	beq.n	800642c <_dtoa_r+0xa9c>
 80063d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063da:	2b00      	cmp	r3, #0
 80063dc:	dd02      	ble.n	80063e4 <_dtoa_r+0xa54>
 80063de:	9b06      	ldr	r3, [sp, #24]
 80063e0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80063e4:	9b04      	ldr	r3, [sp, #16]
 80063e6:	f883 9000 	strb.w	r9, [r3]
 80063ea:	e777      	b.n	80062dc <_dtoa_r+0x94c>
 80063ec:	4630      	mov	r0, r6
 80063ee:	e7ba      	b.n	8006366 <_dtoa_r+0x9d6>
 80063f0:	2201      	movs	r2, #1
 80063f2:	e7e1      	b.n	80063b8 <_dtoa_r+0xa28>
 80063f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	db04      	blt.n	8006404 <_dtoa_r+0xa74>
 80063fa:	9922      	ldr	r1, [sp, #136]	; 0x88
 80063fc:	430b      	orrs	r3, r1
 80063fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006400:	430b      	orrs	r3, r1
 8006402:	d120      	bne.n	8006446 <_dtoa_r+0xab6>
 8006404:	2a00      	cmp	r2, #0
 8006406:	dded      	ble.n	80063e4 <_dtoa_r+0xa54>
 8006408:	4651      	mov	r1, sl
 800640a:	2201      	movs	r2, #1
 800640c:	4628      	mov	r0, r5
 800640e:	f000 fbf7 	bl	8006c00 <__lshift>
 8006412:	4621      	mov	r1, r4
 8006414:	4682      	mov	sl, r0
 8006416:	f000 fc5f 	bl	8006cd8 <__mcmp>
 800641a:	2800      	cmp	r0, #0
 800641c:	dc03      	bgt.n	8006426 <_dtoa_r+0xa96>
 800641e:	d1e1      	bne.n	80063e4 <_dtoa_r+0xa54>
 8006420:	f019 0f01 	tst.w	r9, #1
 8006424:	d0de      	beq.n	80063e4 <_dtoa_r+0xa54>
 8006426:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800642a:	d1d8      	bne.n	80063de <_dtoa_r+0xa4e>
 800642c:	2339      	movs	r3, #57	; 0x39
 800642e:	9a04      	ldr	r2, [sp, #16]
 8006430:	7013      	strb	r3, [r2, #0]
 8006432:	463b      	mov	r3, r7
 8006434:	461f      	mov	r7, r3
 8006436:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800643a:	3b01      	subs	r3, #1
 800643c:	2a39      	cmp	r2, #57	; 0x39
 800643e:	d06b      	beq.n	8006518 <_dtoa_r+0xb88>
 8006440:	3201      	adds	r2, #1
 8006442:	701a      	strb	r2, [r3, #0]
 8006444:	e74a      	b.n	80062dc <_dtoa_r+0x94c>
 8006446:	2a00      	cmp	r2, #0
 8006448:	dd07      	ble.n	800645a <_dtoa_r+0xaca>
 800644a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800644e:	d0ed      	beq.n	800642c <_dtoa_r+0xa9c>
 8006450:	9a04      	ldr	r2, [sp, #16]
 8006452:	f109 0301 	add.w	r3, r9, #1
 8006456:	7013      	strb	r3, [r2, #0]
 8006458:	e740      	b.n	80062dc <_dtoa_r+0x94c>
 800645a:	9b08      	ldr	r3, [sp, #32]
 800645c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800645e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006462:	4293      	cmp	r3, r2
 8006464:	d042      	beq.n	80064ec <_dtoa_r+0xb5c>
 8006466:	4651      	mov	r1, sl
 8006468:	2300      	movs	r3, #0
 800646a:	220a      	movs	r2, #10
 800646c:	4628      	mov	r0, r5
 800646e:	f000 f9d1 	bl	8006814 <__multadd>
 8006472:	45b0      	cmp	r8, r6
 8006474:	4682      	mov	sl, r0
 8006476:	f04f 0300 	mov.w	r3, #0
 800647a:	f04f 020a 	mov.w	r2, #10
 800647e:	4641      	mov	r1, r8
 8006480:	4628      	mov	r0, r5
 8006482:	d107      	bne.n	8006494 <_dtoa_r+0xb04>
 8006484:	f000 f9c6 	bl	8006814 <__multadd>
 8006488:	4680      	mov	r8, r0
 800648a:	4606      	mov	r6, r0
 800648c:	9b08      	ldr	r3, [sp, #32]
 800648e:	3301      	adds	r3, #1
 8006490:	9308      	str	r3, [sp, #32]
 8006492:	e775      	b.n	8006380 <_dtoa_r+0x9f0>
 8006494:	f000 f9be 	bl	8006814 <__multadd>
 8006498:	4631      	mov	r1, r6
 800649a:	4680      	mov	r8, r0
 800649c:	2300      	movs	r3, #0
 800649e:	220a      	movs	r2, #10
 80064a0:	4628      	mov	r0, r5
 80064a2:	f000 f9b7 	bl	8006814 <__multadd>
 80064a6:	4606      	mov	r6, r0
 80064a8:	e7f0      	b.n	800648c <_dtoa_r+0xafc>
 80064aa:	9b08      	ldr	r3, [sp, #32]
 80064ac:	9306      	str	r3, [sp, #24]
 80064ae:	9f03      	ldr	r7, [sp, #12]
 80064b0:	4621      	mov	r1, r4
 80064b2:	4650      	mov	r0, sl
 80064b4:	f7ff f9e0 	bl	8005878 <quorem>
 80064b8:	9b03      	ldr	r3, [sp, #12]
 80064ba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80064be:	f807 9b01 	strb.w	r9, [r7], #1
 80064c2:	1afa      	subs	r2, r7, r3
 80064c4:	9b06      	ldr	r3, [sp, #24]
 80064c6:	4293      	cmp	r3, r2
 80064c8:	dd07      	ble.n	80064da <_dtoa_r+0xb4a>
 80064ca:	4651      	mov	r1, sl
 80064cc:	2300      	movs	r3, #0
 80064ce:	220a      	movs	r2, #10
 80064d0:	4628      	mov	r0, r5
 80064d2:	f000 f99f 	bl	8006814 <__multadd>
 80064d6:	4682      	mov	sl, r0
 80064d8:	e7ea      	b.n	80064b0 <_dtoa_r+0xb20>
 80064da:	9b06      	ldr	r3, [sp, #24]
 80064dc:	f04f 0800 	mov.w	r8, #0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	bfcc      	ite	gt
 80064e4:	461f      	movgt	r7, r3
 80064e6:	2701      	movle	r7, #1
 80064e8:	9b03      	ldr	r3, [sp, #12]
 80064ea:	441f      	add	r7, r3
 80064ec:	4651      	mov	r1, sl
 80064ee:	2201      	movs	r2, #1
 80064f0:	4628      	mov	r0, r5
 80064f2:	f000 fb85 	bl	8006c00 <__lshift>
 80064f6:	4621      	mov	r1, r4
 80064f8:	4682      	mov	sl, r0
 80064fa:	f000 fbed 	bl	8006cd8 <__mcmp>
 80064fe:	2800      	cmp	r0, #0
 8006500:	dc97      	bgt.n	8006432 <_dtoa_r+0xaa2>
 8006502:	d102      	bne.n	800650a <_dtoa_r+0xb7a>
 8006504:	f019 0f01 	tst.w	r9, #1
 8006508:	d193      	bne.n	8006432 <_dtoa_r+0xaa2>
 800650a:	463b      	mov	r3, r7
 800650c:	461f      	mov	r7, r3
 800650e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006512:	2a30      	cmp	r2, #48	; 0x30
 8006514:	d0fa      	beq.n	800650c <_dtoa_r+0xb7c>
 8006516:	e6e1      	b.n	80062dc <_dtoa_r+0x94c>
 8006518:	9a03      	ldr	r2, [sp, #12]
 800651a:	429a      	cmp	r2, r3
 800651c:	d18a      	bne.n	8006434 <_dtoa_r+0xaa4>
 800651e:	2331      	movs	r3, #49	; 0x31
 8006520:	f10b 0b01 	add.w	fp, fp, #1
 8006524:	e797      	b.n	8006456 <_dtoa_r+0xac6>
 8006526:	4b0a      	ldr	r3, [pc, #40]	; (8006550 <_dtoa_r+0xbc0>)
 8006528:	f7ff ba9f 	b.w	8005a6a <_dtoa_r+0xda>
 800652c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800652e:	2b00      	cmp	r3, #0
 8006530:	f47f aa77 	bne.w	8005a22 <_dtoa_r+0x92>
 8006534:	4b07      	ldr	r3, [pc, #28]	; (8006554 <_dtoa_r+0xbc4>)
 8006536:	f7ff ba98 	b.w	8005a6a <_dtoa_r+0xda>
 800653a:	9b06      	ldr	r3, [sp, #24]
 800653c:	2b00      	cmp	r3, #0
 800653e:	dcb6      	bgt.n	80064ae <_dtoa_r+0xb1e>
 8006540:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006542:	2b02      	cmp	r3, #2
 8006544:	f73f aeb5 	bgt.w	80062b2 <_dtoa_r+0x922>
 8006548:	e7b1      	b.n	80064ae <_dtoa_r+0xb1e>
 800654a:	bf00      	nop
 800654c:	08009837 	.word	0x08009837
 8006550:	08009792 	.word	0x08009792
 8006554:	080097bb 	.word	0x080097bb

08006558 <_free_r>:
 8006558:	b538      	push	{r3, r4, r5, lr}
 800655a:	4605      	mov	r5, r0
 800655c:	2900      	cmp	r1, #0
 800655e:	d040      	beq.n	80065e2 <_free_r+0x8a>
 8006560:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006564:	1f0c      	subs	r4, r1, #4
 8006566:	2b00      	cmp	r3, #0
 8006568:	bfb8      	it	lt
 800656a:	18e4      	addlt	r4, r4, r3
 800656c:	f000 f8e4 	bl	8006738 <__malloc_lock>
 8006570:	4a1c      	ldr	r2, [pc, #112]	; (80065e4 <_free_r+0x8c>)
 8006572:	6813      	ldr	r3, [r2, #0]
 8006574:	b933      	cbnz	r3, 8006584 <_free_r+0x2c>
 8006576:	6063      	str	r3, [r4, #4]
 8006578:	6014      	str	r4, [r2, #0]
 800657a:	4628      	mov	r0, r5
 800657c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006580:	f000 b8e0 	b.w	8006744 <__malloc_unlock>
 8006584:	42a3      	cmp	r3, r4
 8006586:	d908      	bls.n	800659a <_free_r+0x42>
 8006588:	6820      	ldr	r0, [r4, #0]
 800658a:	1821      	adds	r1, r4, r0
 800658c:	428b      	cmp	r3, r1
 800658e:	bf01      	itttt	eq
 8006590:	6819      	ldreq	r1, [r3, #0]
 8006592:	685b      	ldreq	r3, [r3, #4]
 8006594:	1809      	addeq	r1, r1, r0
 8006596:	6021      	streq	r1, [r4, #0]
 8006598:	e7ed      	b.n	8006576 <_free_r+0x1e>
 800659a:	461a      	mov	r2, r3
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	b10b      	cbz	r3, 80065a4 <_free_r+0x4c>
 80065a0:	42a3      	cmp	r3, r4
 80065a2:	d9fa      	bls.n	800659a <_free_r+0x42>
 80065a4:	6811      	ldr	r1, [r2, #0]
 80065a6:	1850      	adds	r0, r2, r1
 80065a8:	42a0      	cmp	r0, r4
 80065aa:	d10b      	bne.n	80065c4 <_free_r+0x6c>
 80065ac:	6820      	ldr	r0, [r4, #0]
 80065ae:	4401      	add	r1, r0
 80065b0:	1850      	adds	r0, r2, r1
 80065b2:	4283      	cmp	r3, r0
 80065b4:	6011      	str	r1, [r2, #0]
 80065b6:	d1e0      	bne.n	800657a <_free_r+0x22>
 80065b8:	6818      	ldr	r0, [r3, #0]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	4408      	add	r0, r1
 80065be:	6010      	str	r0, [r2, #0]
 80065c0:	6053      	str	r3, [r2, #4]
 80065c2:	e7da      	b.n	800657a <_free_r+0x22>
 80065c4:	d902      	bls.n	80065cc <_free_r+0x74>
 80065c6:	230c      	movs	r3, #12
 80065c8:	602b      	str	r3, [r5, #0]
 80065ca:	e7d6      	b.n	800657a <_free_r+0x22>
 80065cc:	6820      	ldr	r0, [r4, #0]
 80065ce:	1821      	adds	r1, r4, r0
 80065d0:	428b      	cmp	r3, r1
 80065d2:	bf01      	itttt	eq
 80065d4:	6819      	ldreq	r1, [r3, #0]
 80065d6:	685b      	ldreq	r3, [r3, #4]
 80065d8:	1809      	addeq	r1, r1, r0
 80065da:	6021      	streq	r1, [r4, #0]
 80065dc:	6063      	str	r3, [r4, #4]
 80065de:	6054      	str	r4, [r2, #4]
 80065e0:	e7cb      	b.n	800657a <_free_r+0x22>
 80065e2:	bd38      	pop	{r3, r4, r5, pc}
 80065e4:	20000858 	.word	0x20000858

080065e8 <malloc>:
 80065e8:	4b02      	ldr	r3, [pc, #8]	; (80065f4 <malloc+0xc>)
 80065ea:	4601      	mov	r1, r0
 80065ec:	6818      	ldr	r0, [r3, #0]
 80065ee:	f000 b823 	b.w	8006638 <_malloc_r>
 80065f2:	bf00      	nop
 80065f4:	20000080 	.word	0x20000080

080065f8 <sbrk_aligned>:
 80065f8:	b570      	push	{r4, r5, r6, lr}
 80065fa:	4e0e      	ldr	r6, [pc, #56]	; (8006634 <sbrk_aligned+0x3c>)
 80065fc:	460c      	mov	r4, r1
 80065fe:	6831      	ldr	r1, [r6, #0]
 8006600:	4605      	mov	r5, r0
 8006602:	b911      	cbnz	r1, 800660a <sbrk_aligned+0x12>
 8006604:	f001 fe0c 	bl	8008220 <_sbrk_r>
 8006608:	6030      	str	r0, [r6, #0]
 800660a:	4621      	mov	r1, r4
 800660c:	4628      	mov	r0, r5
 800660e:	f001 fe07 	bl	8008220 <_sbrk_r>
 8006612:	1c43      	adds	r3, r0, #1
 8006614:	d00a      	beq.n	800662c <sbrk_aligned+0x34>
 8006616:	1cc4      	adds	r4, r0, #3
 8006618:	f024 0403 	bic.w	r4, r4, #3
 800661c:	42a0      	cmp	r0, r4
 800661e:	d007      	beq.n	8006630 <sbrk_aligned+0x38>
 8006620:	1a21      	subs	r1, r4, r0
 8006622:	4628      	mov	r0, r5
 8006624:	f001 fdfc 	bl	8008220 <_sbrk_r>
 8006628:	3001      	adds	r0, #1
 800662a:	d101      	bne.n	8006630 <sbrk_aligned+0x38>
 800662c:	f04f 34ff 	mov.w	r4, #4294967295
 8006630:	4620      	mov	r0, r4
 8006632:	bd70      	pop	{r4, r5, r6, pc}
 8006634:	2000085c 	.word	0x2000085c

08006638 <_malloc_r>:
 8006638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800663c:	1ccd      	adds	r5, r1, #3
 800663e:	f025 0503 	bic.w	r5, r5, #3
 8006642:	3508      	adds	r5, #8
 8006644:	2d0c      	cmp	r5, #12
 8006646:	bf38      	it	cc
 8006648:	250c      	movcc	r5, #12
 800664a:	2d00      	cmp	r5, #0
 800664c:	4607      	mov	r7, r0
 800664e:	db01      	blt.n	8006654 <_malloc_r+0x1c>
 8006650:	42a9      	cmp	r1, r5
 8006652:	d905      	bls.n	8006660 <_malloc_r+0x28>
 8006654:	230c      	movs	r3, #12
 8006656:	2600      	movs	r6, #0
 8006658:	603b      	str	r3, [r7, #0]
 800665a:	4630      	mov	r0, r6
 800665c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006660:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006734 <_malloc_r+0xfc>
 8006664:	f000 f868 	bl	8006738 <__malloc_lock>
 8006668:	f8d8 3000 	ldr.w	r3, [r8]
 800666c:	461c      	mov	r4, r3
 800666e:	bb5c      	cbnz	r4, 80066c8 <_malloc_r+0x90>
 8006670:	4629      	mov	r1, r5
 8006672:	4638      	mov	r0, r7
 8006674:	f7ff ffc0 	bl	80065f8 <sbrk_aligned>
 8006678:	1c43      	adds	r3, r0, #1
 800667a:	4604      	mov	r4, r0
 800667c:	d155      	bne.n	800672a <_malloc_r+0xf2>
 800667e:	f8d8 4000 	ldr.w	r4, [r8]
 8006682:	4626      	mov	r6, r4
 8006684:	2e00      	cmp	r6, #0
 8006686:	d145      	bne.n	8006714 <_malloc_r+0xdc>
 8006688:	2c00      	cmp	r4, #0
 800668a:	d048      	beq.n	800671e <_malloc_r+0xe6>
 800668c:	6823      	ldr	r3, [r4, #0]
 800668e:	4631      	mov	r1, r6
 8006690:	4638      	mov	r0, r7
 8006692:	eb04 0903 	add.w	r9, r4, r3
 8006696:	f001 fdc3 	bl	8008220 <_sbrk_r>
 800669a:	4581      	cmp	r9, r0
 800669c:	d13f      	bne.n	800671e <_malloc_r+0xe6>
 800669e:	6821      	ldr	r1, [r4, #0]
 80066a0:	4638      	mov	r0, r7
 80066a2:	1a6d      	subs	r5, r5, r1
 80066a4:	4629      	mov	r1, r5
 80066a6:	f7ff ffa7 	bl	80065f8 <sbrk_aligned>
 80066aa:	3001      	adds	r0, #1
 80066ac:	d037      	beq.n	800671e <_malloc_r+0xe6>
 80066ae:	6823      	ldr	r3, [r4, #0]
 80066b0:	442b      	add	r3, r5
 80066b2:	6023      	str	r3, [r4, #0]
 80066b4:	f8d8 3000 	ldr.w	r3, [r8]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d038      	beq.n	800672e <_malloc_r+0xf6>
 80066bc:	685a      	ldr	r2, [r3, #4]
 80066be:	42a2      	cmp	r2, r4
 80066c0:	d12b      	bne.n	800671a <_malloc_r+0xe2>
 80066c2:	2200      	movs	r2, #0
 80066c4:	605a      	str	r2, [r3, #4]
 80066c6:	e00f      	b.n	80066e8 <_malloc_r+0xb0>
 80066c8:	6822      	ldr	r2, [r4, #0]
 80066ca:	1b52      	subs	r2, r2, r5
 80066cc:	d41f      	bmi.n	800670e <_malloc_r+0xd6>
 80066ce:	2a0b      	cmp	r2, #11
 80066d0:	d917      	bls.n	8006702 <_malloc_r+0xca>
 80066d2:	1961      	adds	r1, r4, r5
 80066d4:	42a3      	cmp	r3, r4
 80066d6:	6025      	str	r5, [r4, #0]
 80066d8:	bf18      	it	ne
 80066da:	6059      	strne	r1, [r3, #4]
 80066dc:	6863      	ldr	r3, [r4, #4]
 80066de:	bf08      	it	eq
 80066e0:	f8c8 1000 	streq.w	r1, [r8]
 80066e4:	5162      	str	r2, [r4, r5]
 80066e6:	604b      	str	r3, [r1, #4]
 80066e8:	4638      	mov	r0, r7
 80066ea:	f104 060b 	add.w	r6, r4, #11
 80066ee:	f000 f829 	bl	8006744 <__malloc_unlock>
 80066f2:	f026 0607 	bic.w	r6, r6, #7
 80066f6:	1d23      	adds	r3, r4, #4
 80066f8:	1af2      	subs	r2, r6, r3
 80066fa:	d0ae      	beq.n	800665a <_malloc_r+0x22>
 80066fc:	1b9b      	subs	r3, r3, r6
 80066fe:	50a3      	str	r3, [r4, r2]
 8006700:	e7ab      	b.n	800665a <_malloc_r+0x22>
 8006702:	42a3      	cmp	r3, r4
 8006704:	6862      	ldr	r2, [r4, #4]
 8006706:	d1dd      	bne.n	80066c4 <_malloc_r+0x8c>
 8006708:	f8c8 2000 	str.w	r2, [r8]
 800670c:	e7ec      	b.n	80066e8 <_malloc_r+0xb0>
 800670e:	4623      	mov	r3, r4
 8006710:	6864      	ldr	r4, [r4, #4]
 8006712:	e7ac      	b.n	800666e <_malloc_r+0x36>
 8006714:	4634      	mov	r4, r6
 8006716:	6876      	ldr	r6, [r6, #4]
 8006718:	e7b4      	b.n	8006684 <_malloc_r+0x4c>
 800671a:	4613      	mov	r3, r2
 800671c:	e7cc      	b.n	80066b8 <_malloc_r+0x80>
 800671e:	230c      	movs	r3, #12
 8006720:	4638      	mov	r0, r7
 8006722:	603b      	str	r3, [r7, #0]
 8006724:	f000 f80e 	bl	8006744 <__malloc_unlock>
 8006728:	e797      	b.n	800665a <_malloc_r+0x22>
 800672a:	6025      	str	r5, [r4, #0]
 800672c:	e7dc      	b.n	80066e8 <_malloc_r+0xb0>
 800672e:	605b      	str	r3, [r3, #4]
 8006730:	deff      	udf	#255	; 0xff
 8006732:	bf00      	nop
 8006734:	20000858 	.word	0x20000858

08006738 <__malloc_lock>:
 8006738:	4801      	ldr	r0, [pc, #4]	; (8006740 <__malloc_lock+0x8>)
 800673a:	f7ff b888 	b.w	800584e <__retarget_lock_acquire_recursive>
 800673e:	bf00      	nop
 8006740:	20000854 	.word	0x20000854

08006744 <__malloc_unlock>:
 8006744:	4801      	ldr	r0, [pc, #4]	; (800674c <__malloc_unlock+0x8>)
 8006746:	f7ff b883 	b.w	8005850 <__retarget_lock_release_recursive>
 800674a:	bf00      	nop
 800674c:	20000854 	.word	0x20000854

08006750 <_Balloc>:
 8006750:	b570      	push	{r4, r5, r6, lr}
 8006752:	69c6      	ldr	r6, [r0, #28]
 8006754:	4604      	mov	r4, r0
 8006756:	460d      	mov	r5, r1
 8006758:	b976      	cbnz	r6, 8006778 <_Balloc+0x28>
 800675a:	2010      	movs	r0, #16
 800675c:	f7ff ff44 	bl	80065e8 <malloc>
 8006760:	4602      	mov	r2, r0
 8006762:	61e0      	str	r0, [r4, #28]
 8006764:	b920      	cbnz	r0, 8006770 <_Balloc+0x20>
 8006766:	216b      	movs	r1, #107	; 0x6b
 8006768:	4b17      	ldr	r3, [pc, #92]	; (80067c8 <_Balloc+0x78>)
 800676a:	4818      	ldr	r0, [pc, #96]	; (80067cc <_Balloc+0x7c>)
 800676c:	f001 fd7c 	bl	8008268 <__assert_func>
 8006770:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006774:	6006      	str	r6, [r0, #0]
 8006776:	60c6      	str	r6, [r0, #12]
 8006778:	69e6      	ldr	r6, [r4, #28]
 800677a:	68f3      	ldr	r3, [r6, #12]
 800677c:	b183      	cbz	r3, 80067a0 <_Balloc+0x50>
 800677e:	69e3      	ldr	r3, [r4, #28]
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006786:	b9b8      	cbnz	r0, 80067b8 <_Balloc+0x68>
 8006788:	2101      	movs	r1, #1
 800678a:	fa01 f605 	lsl.w	r6, r1, r5
 800678e:	1d72      	adds	r2, r6, #5
 8006790:	4620      	mov	r0, r4
 8006792:	0092      	lsls	r2, r2, #2
 8006794:	f001 fd86 	bl	80082a4 <_calloc_r>
 8006798:	b160      	cbz	r0, 80067b4 <_Balloc+0x64>
 800679a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800679e:	e00e      	b.n	80067be <_Balloc+0x6e>
 80067a0:	2221      	movs	r2, #33	; 0x21
 80067a2:	2104      	movs	r1, #4
 80067a4:	4620      	mov	r0, r4
 80067a6:	f001 fd7d 	bl	80082a4 <_calloc_r>
 80067aa:	69e3      	ldr	r3, [r4, #28]
 80067ac:	60f0      	str	r0, [r6, #12]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d1e4      	bne.n	800677e <_Balloc+0x2e>
 80067b4:	2000      	movs	r0, #0
 80067b6:	bd70      	pop	{r4, r5, r6, pc}
 80067b8:	6802      	ldr	r2, [r0, #0]
 80067ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80067be:	2300      	movs	r3, #0
 80067c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80067c4:	e7f7      	b.n	80067b6 <_Balloc+0x66>
 80067c6:	bf00      	nop
 80067c8:	080097c8 	.word	0x080097c8
 80067cc:	08009848 	.word	0x08009848

080067d0 <_Bfree>:
 80067d0:	b570      	push	{r4, r5, r6, lr}
 80067d2:	69c6      	ldr	r6, [r0, #28]
 80067d4:	4605      	mov	r5, r0
 80067d6:	460c      	mov	r4, r1
 80067d8:	b976      	cbnz	r6, 80067f8 <_Bfree+0x28>
 80067da:	2010      	movs	r0, #16
 80067dc:	f7ff ff04 	bl	80065e8 <malloc>
 80067e0:	4602      	mov	r2, r0
 80067e2:	61e8      	str	r0, [r5, #28]
 80067e4:	b920      	cbnz	r0, 80067f0 <_Bfree+0x20>
 80067e6:	218f      	movs	r1, #143	; 0x8f
 80067e8:	4b08      	ldr	r3, [pc, #32]	; (800680c <_Bfree+0x3c>)
 80067ea:	4809      	ldr	r0, [pc, #36]	; (8006810 <_Bfree+0x40>)
 80067ec:	f001 fd3c 	bl	8008268 <__assert_func>
 80067f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80067f4:	6006      	str	r6, [r0, #0]
 80067f6:	60c6      	str	r6, [r0, #12]
 80067f8:	b13c      	cbz	r4, 800680a <_Bfree+0x3a>
 80067fa:	69eb      	ldr	r3, [r5, #28]
 80067fc:	6862      	ldr	r2, [r4, #4]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006804:	6021      	str	r1, [r4, #0]
 8006806:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800680a:	bd70      	pop	{r4, r5, r6, pc}
 800680c:	080097c8 	.word	0x080097c8
 8006810:	08009848 	.word	0x08009848

08006814 <__multadd>:
 8006814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006818:	4607      	mov	r7, r0
 800681a:	460c      	mov	r4, r1
 800681c:	461e      	mov	r6, r3
 800681e:	2000      	movs	r0, #0
 8006820:	690d      	ldr	r5, [r1, #16]
 8006822:	f101 0c14 	add.w	ip, r1, #20
 8006826:	f8dc 3000 	ldr.w	r3, [ip]
 800682a:	3001      	adds	r0, #1
 800682c:	b299      	uxth	r1, r3
 800682e:	fb02 6101 	mla	r1, r2, r1, r6
 8006832:	0c1e      	lsrs	r6, r3, #16
 8006834:	0c0b      	lsrs	r3, r1, #16
 8006836:	fb02 3306 	mla	r3, r2, r6, r3
 800683a:	b289      	uxth	r1, r1
 800683c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006840:	4285      	cmp	r5, r0
 8006842:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006846:	f84c 1b04 	str.w	r1, [ip], #4
 800684a:	dcec      	bgt.n	8006826 <__multadd+0x12>
 800684c:	b30e      	cbz	r6, 8006892 <__multadd+0x7e>
 800684e:	68a3      	ldr	r3, [r4, #8]
 8006850:	42ab      	cmp	r3, r5
 8006852:	dc19      	bgt.n	8006888 <__multadd+0x74>
 8006854:	6861      	ldr	r1, [r4, #4]
 8006856:	4638      	mov	r0, r7
 8006858:	3101      	adds	r1, #1
 800685a:	f7ff ff79 	bl	8006750 <_Balloc>
 800685e:	4680      	mov	r8, r0
 8006860:	b928      	cbnz	r0, 800686e <__multadd+0x5a>
 8006862:	4602      	mov	r2, r0
 8006864:	21ba      	movs	r1, #186	; 0xba
 8006866:	4b0c      	ldr	r3, [pc, #48]	; (8006898 <__multadd+0x84>)
 8006868:	480c      	ldr	r0, [pc, #48]	; (800689c <__multadd+0x88>)
 800686a:	f001 fcfd 	bl	8008268 <__assert_func>
 800686e:	6922      	ldr	r2, [r4, #16]
 8006870:	f104 010c 	add.w	r1, r4, #12
 8006874:	3202      	adds	r2, #2
 8006876:	0092      	lsls	r2, r2, #2
 8006878:	300c      	adds	r0, #12
 800687a:	f001 fce1 	bl	8008240 <memcpy>
 800687e:	4621      	mov	r1, r4
 8006880:	4638      	mov	r0, r7
 8006882:	f7ff ffa5 	bl	80067d0 <_Bfree>
 8006886:	4644      	mov	r4, r8
 8006888:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800688c:	3501      	adds	r5, #1
 800688e:	615e      	str	r6, [r3, #20]
 8006890:	6125      	str	r5, [r4, #16]
 8006892:	4620      	mov	r0, r4
 8006894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006898:	08009837 	.word	0x08009837
 800689c:	08009848 	.word	0x08009848

080068a0 <__s2b>:
 80068a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068a4:	4615      	mov	r5, r2
 80068a6:	2209      	movs	r2, #9
 80068a8:	461f      	mov	r7, r3
 80068aa:	3308      	adds	r3, #8
 80068ac:	460c      	mov	r4, r1
 80068ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80068b2:	4606      	mov	r6, r0
 80068b4:	2201      	movs	r2, #1
 80068b6:	2100      	movs	r1, #0
 80068b8:	429a      	cmp	r2, r3
 80068ba:	db09      	blt.n	80068d0 <__s2b+0x30>
 80068bc:	4630      	mov	r0, r6
 80068be:	f7ff ff47 	bl	8006750 <_Balloc>
 80068c2:	b940      	cbnz	r0, 80068d6 <__s2b+0x36>
 80068c4:	4602      	mov	r2, r0
 80068c6:	21d3      	movs	r1, #211	; 0xd3
 80068c8:	4b18      	ldr	r3, [pc, #96]	; (800692c <__s2b+0x8c>)
 80068ca:	4819      	ldr	r0, [pc, #100]	; (8006930 <__s2b+0x90>)
 80068cc:	f001 fccc 	bl	8008268 <__assert_func>
 80068d0:	0052      	lsls	r2, r2, #1
 80068d2:	3101      	adds	r1, #1
 80068d4:	e7f0      	b.n	80068b8 <__s2b+0x18>
 80068d6:	9b08      	ldr	r3, [sp, #32]
 80068d8:	2d09      	cmp	r5, #9
 80068da:	6143      	str	r3, [r0, #20]
 80068dc:	f04f 0301 	mov.w	r3, #1
 80068e0:	6103      	str	r3, [r0, #16]
 80068e2:	dd16      	ble.n	8006912 <__s2b+0x72>
 80068e4:	f104 0909 	add.w	r9, r4, #9
 80068e8:	46c8      	mov	r8, r9
 80068ea:	442c      	add	r4, r5
 80068ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 80068f0:	4601      	mov	r1, r0
 80068f2:	220a      	movs	r2, #10
 80068f4:	4630      	mov	r0, r6
 80068f6:	3b30      	subs	r3, #48	; 0x30
 80068f8:	f7ff ff8c 	bl	8006814 <__multadd>
 80068fc:	45a0      	cmp	r8, r4
 80068fe:	d1f5      	bne.n	80068ec <__s2b+0x4c>
 8006900:	f1a5 0408 	sub.w	r4, r5, #8
 8006904:	444c      	add	r4, r9
 8006906:	1b2d      	subs	r5, r5, r4
 8006908:	1963      	adds	r3, r4, r5
 800690a:	42bb      	cmp	r3, r7
 800690c:	db04      	blt.n	8006918 <__s2b+0x78>
 800690e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006912:	2509      	movs	r5, #9
 8006914:	340a      	adds	r4, #10
 8006916:	e7f6      	b.n	8006906 <__s2b+0x66>
 8006918:	f814 3b01 	ldrb.w	r3, [r4], #1
 800691c:	4601      	mov	r1, r0
 800691e:	220a      	movs	r2, #10
 8006920:	4630      	mov	r0, r6
 8006922:	3b30      	subs	r3, #48	; 0x30
 8006924:	f7ff ff76 	bl	8006814 <__multadd>
 8006928:	e7ee      	b.n	8006908 <__s2b+0x68>
 800692a:	bf00      	nop
 800692c:	08009837 	.word	0x08009837
 8006930:	08009848 	.word	0x08009848

08006934 <__hi0bits>:
 8006934:	0c02      	lsrs	r2, r0, #16
 8006936:	0412      	lsls	r2, r2, #16
 8006938:	4603      	mov	r3, r0
 800693a:	b9ca      	cbnz	r2, 8006970 <__hi0bits+0x3c>
 800693c:	0403      	lsls	r3, r0, #16
 800693e:	2010      	movs	r0, #16
 8006940:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006944:	bf04      	itt	eq
 8006946:	021b      	lsleq	r3, r3, #8
 8006948:	3008      	addeq	r0, #8
 800694a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800694e:	bf04      	itt	eq
 8006950:	011b      	lsleq	r3, r3, #4
 8006952:	3004      	addeq	r0, #4
 8006954:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006958:	bf04      	itt	eq
 800695a:	009b      	lsleq	r3, r3, #2
 800695c:	3002      	addeq	r0, #2
 800695e:	2b00      	cmp	r3, #0
 8006960:	db05      	blt.n	800696e <__hi0bits+0x3a>
 8006962:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006966:	f100 0001 	add.w	r0, r0, #1
 800696a:	bf08      	it	eq
 800696c:	2020      	moveq	r0, #32
 800696e:	4770      	bx	lr
 8006970:	2000      	movs	r0, #0
 8006972:	e7e5      	b.n	8006940 <__hi0bits+0xc>

08006974 <__lo0bits>:
 8006974:	6803      	ldr	r3, [r0, #0]
 8006976:	4602      	mov	r2, r0
 8006978:	f013 0007 	ands.w	r0, r3, #7
 800697c:	d00b      	beq.n	8006996 <__lo0bits+0x22>
 800697e:	07d9      	lsls	r1, r3, #31
 8006980:	d421      	bmi.n	80069c6 <__lo0bits+0x52>
 8006982:	0798      	lsls	r0, r3, #30
 8006984:	bf49      	itett	mi
 8006986:	085b      	lsrmi	r3, r3, #1
 8006988:	089b      	lsrpl	r3, r3, #2
 800698a:	2001      	movmi	r0, #1
 800698c:	6013      	strmi	r3, [r2, #0]
 800698e:	bf5c      	itt	pl
 8006990:	2002      	movpl	r0, #2
 8006992:	6013      	strpl	r3, [r2, #0]
 8006994:	4770      	bx	lr
 8006996:	b299      	uxth	r1, r3
 8006998:	b909      	cbnz	r1, 800699e <__lo0bits+0x2a>
 800699a:	2010      	movs	r0, #16
 800699c:	0c1b      	lsrs	r3, r3, #16
 800699e:	b2d9      	uxtb	r1, r3
 80069a0:	b909      	cbnz	r1, 80069a6 <__lo0bits+0x32>
 80069a2:	3008      	adds	r0, #8
 80069a4:	0a1b      	lsrs	r3, r3, #8
 80069a6:	0719      	lsls	r1, r3, #28
 80069a8:	bf04      	itt	eq
 80069aa:	091b      	lsreq	r3, r3, #4
 80069ac:	3004      	addeq	r0, #4
 80069ae:	0799      	lsls	r1, r3, #30
 80069b0:	bf04      	itt	eq
 80069b2:	089b      	lsreq	r3, r3, #2
 80069b4:	3002      	addeq	r0, #2
 80069b6:	07d9      	lsls	r1, r3, #31
 80069b8:	d403      	bmi.n	80069c2 <__lo0bits+0x4e>
 80069ba:	085b      	lsrs	r3, r3, #1
 80069bc:	f100 0001 	add.w	r0, r0, #1
 80069c0:	d003      	beq.n	80069ca <__lo0bits+0x56>
 80069c2:	6013      	str	r3, [r2, #0]
 80069c4:	4770      	bx	lr
 80069c6:	2000      	movs	r0, #0
 80069c8:	4770      	bx	lr
 80069ca:	2020      	movs	r0, #32
 80069cc:	4770      	bx	lr
	...

080069d0 <__i2b>:
 80069d0:	b510      	push	{r4, lr}
 80069d2:	460c      	mov	r4, r1
 80069d4:	2101      	movs	r1, #1
 80069d6:	f7ff febb 	bl	8006750 <_Balloc>
 80069da:	4602      	mov	r2, r0
 80069dc:	b928      	cbnz	r0, 80069ea <__i2b+0x1a>
 80069de:	f240 1145 	movw	r1, #325	; 0x145
 80069e2:	4b04      	ldr	r3, [pc, #16]	; (80069f4 <__i2b+0x24>)
 80069e4:	4804      	ldr	r0, [pc, #16]	; (80069f8 <__i2b+0x28>)
 80069e6:	f001 fc3f 	bl	8008268 <__assert_func>
 80069ea:	2301      	movs	r3, #1
 80069ec:	6144      	str	r4, [r0, #20]
 80069ee:	6103      	str	r3, [r0, #16]
 80069f0:	bd10      	pop	{r4, pc}
 80069f2:	bf00      	nop
 80069f4:	08009837 	.word	0x08009837
 80069f8:	08009848 	.word	0x08009848

080069fc <__multiply>:
 80069fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a00:	4691      	mov	r9, r2
 8006a02:	690a      	ldr	r2, [r1, #16]
 8006a04:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006a08:	460c      	mov	r4, r1
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	bfbe      	ittt	lt
 8006a0e:	460b      	movlt	r3, r1
 8006a10:	464c      	movlt	r4, r9
 8006a12:	4699      	movlt	r9, r3
 8006a14:	6927      	ldr	r7, [r4, #16]
 8006a16:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006a1a:	68a3      	ldr	r3, [r4, #8]
 8006a1c:	6861      	ldr	r1, [r4, #4]
 8006a1e:	eb07 060a 	add.w	r6, r7, sl
 8006a22:	42b3      	cmp	r3, r6
 8006a24:	b085      	sub	sp, #20
 8006a26:	bfb8      	it	lt
 8006a28:	3101      	addlt	r1, #1
 8006a2a:	f7ff fe91 	bl	8006750 <_Balloc>
 8006a2e:	b930      	cbnz	r0, 8006a3e <__multiply+0x42>
 8006a30:	4602      	mov	r2, r0
 8006a32:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006a36:	4b43      	ldr	r3, [pc, #268]	; (8006b44 <__multiply+0x148>)
 8006a38:	4843      	ldr	r0, [pc, #268]	; (8006b48 <__multiply+0x14c>)
 8006a3a:	f001 fc15 	bl	8008268 <__assert_func>
 8006a3e:	f100 0514 	add.w	r5, r0, #20
 8006a42:	462b      	mov	r3, r5
 8006a44:	2200      	movs	r2, #0
 8006a46:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006a4a:	4543      	cmp	r3, r8
 8006a4c:	d321      	bcc.n	8006a92 <__multiply+0x96>
 8006a4e:	f104 0314 	add.w	r3, r4, #20
 8006a52:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006a56:	f109 0314 	add.w	r3, r9, #20
 8006a5a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006a5e:	9202      	str	r2, [sp, #8]
 8006a60:	1b3a      	subs	r2, r7, r4
 8006a62:	3a15      	subs	r2, #21
 8006a64:	f022 0203 	bic.w	r2, r2, #3
 8006a68:	3204      	adds	r2, #4
 8006a6a:	f104 0115 	add.w	r1, r4, #21
 8006a6e:	428f      	cmp	r7, r1
 8006a70:	bf38      	it	cc
 8006a72:	2204      	movcc	r2, #4
 8006a74:	9201      	str	r2, [sp, #4]
 8006a76:	9a02      	ldr	r2, [sp, #8]
 8006a78:	9303      	str	r3, [sp, #12]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d80c      	bhi.n	8006a98 <__multiply+0x9c>
 8006a7e:	2e00      	cmp	r6, #0
 8006a80:	dd03      	ble.n	8006a8a <__multiply+0x8e>
 8006a82:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d05a      	beq.n	8006b40 <__multiply+0x144>
 8006a8a:	6106      	str	r6, [r0, #16]
 8006a8c:	b005      	add	sp, #20
 8006a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a92:	f843 2b04 	str.w	r2, [r3], #4
 8006a96:	e7d8      	b.n	8006a4a <__multiply+0x4e>
 8006a98:	f8b3 a000 	ldrh.w	sl, [r3]
 8006a9c:	f1ba 0f00 	cmp.w	sl, #0
 8006aa0:	d023      	beq.n	8006aea <__multiply+0xee>
 8006aa2:	46a9      	mov	r9, r5
 8006aa4:	f04f 0c00 	mov.w	ip, #0
 8006aa8:	f104 0e14 	add.w	lr, r4, #20
 8006aac:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006ab0:	f8d9 1000 	ldr.w	r1, [r9]
 8006ab4:	fa1f fb82 	uxth.w	fp, r2
 8006ab8:	b289      	uxth	r1, r1
 8006aba:	fb0a 110b 	mla	r1, sl, fp, r1
 8006abe:	4461      	add	r1, ip
 8006ac0:	f8d9 c000 	ldr.w	ip, [r9]
 8006ac4:	0c12      	lsrs	r2, r2, #16
 8006ac6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006aca:	fb0a c202 	mla	r2, sl, r2, ip
 8006ace:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006ad2:	b289      	uxth	r1, r1
 8006ad4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006ad8:	4577      	cmp	r7, lr
 8006ada:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006ade:	f849 1b04 	str.w	r1, [r9], #4
 8006ae2:	d8e3      	bhi.n	8006aac <__multiply+0xb0>
 8006ae4:	9a01      	ldr	r2, [sp, #4]
 8006ae6:	f845 c002 	str.w	ip, [r5, r2]
 8006aea:	9a03      	ldr	r2, [sp, #12]
 8006aec:	3304      	adds	r3, #4
 8006aee:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006af2:	f1b9 0f00 	cmp.w	r9, #0
 8006af6:	d021      	beq.n	8006b3c <__multiply+0x140>
 8006af8:	46ae      	mov	lr, r5
 8006afa:	f04f 0a00 	mov.w	sl, #0
 8006afe:	6829      	ldr	r1, [r5, #0]
 8006b00:	f104 0c14 	add.w	ip, r4, #20
 8006b04:	f8bc b000 	ldrh.w	fp, [ip]
 8006b08:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006b0c:	b289      	uxth	r1, r1
 8006b0e:	fb09 220b 	mla	r2, r9, fp, r2
 8006b12:	4452      	add	r2, sl
 8006b14:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006b18:	f84e 1b04 	str.w	r1, [lr], #4
 8006b1c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006b20:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006b24:	f8be 1000 	ldrh.w	r1, [lr]
 8006b28:	4567      	cmp	r7, ip
 8006b2a:	fb09 110a 	mla	r1, r9, sl, r1
 8006b2e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006b32:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006b36:	d8e5      	bhi.n	8006b04 <__multiply+0x108>
 8006b38:	9a01      	ldr	r2, [sp, #4]
 8006b3a:	50a9      	str	r1, [r5, r2]
 8006b3c:	3504      	adds	r5, #4
 8006b3e:	e79a      	b.n	8006a76 <__multiply+0x7a>
 8006b40:	3e01      	subs	r6, #1
 8006b42:	e79c      	b.n	8006a7e <__multiply+0x82>
 8006b44:	08009837 	.word	0x08009837
 8006b48:	08009848 	.word	0x08009848

08006b4c <__pow5mult>:
 8006b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b50:	4615      	mov	r5, r2
 8006b52:	f012 0203 	ands.w	r2, r2, #3
 8006b56:	4606      	mov	r6, r0
 8006b58:	460f      	mov	r7, r1
 8006b5a:	d007      	beq.n	8006b6c <__pow5mult+0x20>
 8006b5c:	4c25      	ldr	r4, [pc, #148]	; (8006bf4 <__pow5mult+0xa8>)
 8006b5e:	3a01      	subs	r2, #1
 8006b60:	2300      	movs	r3, #0
 8006b62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006b66:	f7ff fe55 	bl	8006814 <__multadd>
 8006b6a:	4607      	mov	r7, r0
 8006b6c:	10ad      	asrs	r5, r5, #2
 8006b6e:	d03d      	beq.n	8006bec <__pow5mult+0xa0>
 8006b70:	69f4      	ldr	r4, [r6, #28]
 8006b72:	b97c      	cbnz	r4, 8006b94 <__pow5mult+0x48>
 8006b74:	2010      	movs	r0, #16
 8006b76:	f7ff fd37 	bl	80065e8 <malloc>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	61f0      	str	r0, [r6, #28]
 8006b7e:	b928      	cbnz	r0, 8006b8c <__pow5mult+0x40>
 8006b80:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006b84:	4b1c      	ldr	r3, [pc, #112]	; (8006bf8 <__pow5mult+0xac>)
 8006b86:	481d      	ldr	r0, [pc, #116]	; (8006bfc <__pow5mult+0xb0>)
 8006b88:	f001 fb6e 	bl	8008268 <__assert_func>
 8006b8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b90:	6004      	str	r4, [r0, #0]
 8006b92:	60c4      	str	r4, [r0, #12]
 8006b94:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006b98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006b9c:	b94c      	cbnz	r4, 8006bb2 <__pow5mult+0x66>
 8006b9e:	f240 2171 	movw	r1, #625	; 0x271
 8006ba2:	4630      	mov	r0, r6
 8006ba4:	f7ff ff14 	bl	80069d0 <__i2b>
 8006ba8:	2300      	movs	r3, #0
 8006baa:	4604      	mov	r4, r0
 8006bac:	f8c8 0008 	str.w	r0, [r8, #8]
 8006bb0:	6003      	str	r3, [r0, #0]
 8006bb2:	f04f 0900 	mov.w	r9, #0
 8006bb6:	07eb      	lsls	r3, r5, #31
 8006bb8:	d50a      	bpl.n	8006bd0 <__pow5mult+0x84>
 8006bba:	4639      	mov	r1, r7
 8006bbc:	4622      	mov	r2, r4
 8006bbe:	4630      	mov	r0, r6
 8006bc0:	f7ff ff1c 	bl	80069fc <__multiply>
 8006bc4:	4680      	mov	r8, r0
 8006bc6:	4639      	mov	r1, r7
 8006bc8:	4630      	mov	r0, r6
 8006bca:	f7ff fe01 	bl	80067d0 <_Bfree>
 8006bce:	4647      	mov	r7, r8
 8006bd0:	106d      	asrs	r5, r5, #1
 8006bd2:	d00b      	beq.n	8006bec <__pow5mult+0xa0>
 8006bd4:	6820      	ldr	r0, [r4, #0]
 8006bd6:	b938      	cbnz	r0, 8006be8 <__pow5mult+0x9c>
 8006bd8:	4622      	mov	r2, r4
 8006bda:	4621      	mov	r1, r4
 8006bdc:	4630      	mov	r0, r6
 8006bde:	f7ff ff0d 	bl	80069fc <__multiply>
 8006be2:	6020      	str	r0, [r4, #0]
 8006be4:	f8c0 9000 	str.w	r9, [r0]
 8006be8:	4604      	mov	r4, r0
 8006bea:	e7e4      	b.n	8006bb6 <__pow5mult+0x6a>
 8006bec:	4638      	mov	r0, r7
 8006bee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bf2:	bf00      	nop
 8006bf4:	08009998 	.word	0x08009998
 8006bf8:	080097c8 	.word	0x080097c8
 8006bfc:	08009848 	.word	0x08009848

08006c00 <__lshift>:
 8006c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c04:	460c      	mov	r4, r1
 8006c06:	4607      	mov	r7, r0
 8006c08:	4691      	mov	r9, r2
 8006c0a:	6923      	ldr	r3, [r4, #16]
 8006c0c:	6849      	ldr	r1, [r1, #4]
 8006c0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006c12:	68a3      	ldr	r3, [r4, #8]
 8006c14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006c18:	f108 0601 	add.w	r6, r8, #1
 8006c1c:	42b3      	cmp	r3, r6
 8006c1e:	db0b      	blt.n	8006c38 <__lshift+0x38>
 8006c20:	4638      	mov	r0, r7
 8006c22:	f7ff fd95 	bl	8006750 <_Balloc>
 8006c26:	4605      	mov	r5, r0
 8006c28:	b948      	cbnz	r0, 8006c3e <__lshift+0x3e>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006c30:	4b27      	ldr	r3, [pc, #156]	; (8006cd0 <__lshift+0xd0>)
 8006c32:	4828      	ldr	r0, [pc, #160]	; (8006cd4 <__lshift+0xd4>)
 8006c34:	f001 fb18 	bl	8008268 <__assert_func>
 8006c38:	3101      	adds	r1, #1
 8006c3a:	005b      	lsls	r3, r3, #1
 8006c3c:	e7ee      	b.n	8006c1c <__lshift+0x1c>
 8006c3e:	2300      	movs	r3, #0
 8006c40:	f100 0114 	add.w	r1, r0, #20
 8006c44:	f100 0210 	add.w	r2, r0, #16
 8006c48:	4618      	mov	r0, r3
 8006c4a:	4553      	cmp	r3, sl
 8006c4c:	db33      	blt.n	8006cb6 <__lshift+0xb6>
 8006c4e:	6920      	ldr	r0, [r4, #16]
 8006c50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006c54:	f104 0314 	add.w	r3, r4, #20
 8006c58:	f019 091f 	ands.w	r9, r9, #31
 8006c5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006c60:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006c64:	d02b      	beq.n	8006cbe <__lshift+0xbe>
 8006c66:	468a      	mov	sl, r1
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f1c9 0e20 	rsb	lr, r9, #32
 8006c6e:	6818      	ldr	r0, [r3, #0]
 8006c70:	fa00 f009 	lsl.w	r0, r0, r9
 8006c74:	4310      	orrs	r0, r2
 8006c76:	f84a 0b04 	str.w	r0, [sl], #4
 8006c7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c7e:	459c      	cmp	ip, r3
 8006c80:	fa22 f20e 	lsr.w	r2, r2, lr
 8006c84:	d8f3      	bhi.n	8006c6e <__lshift+0x6e>
 8006c86:	ebac 0304 	sub.w	r3, ip, r4
 8006c8a:	3b15      	subs	r3, #21
 8006c8c:	f023 0303 	bic.w	r3, r3, #3
 8006c90:	3304      	adds	r3, #4
 8006c92:	f104 0015 	add.w	r0, r4, #21
 8006c96:	4584      	cmp	ip, r0
 8006c98:	bf38      	it	cc
 8006c9a:	2304      	movcc	r3, #4
 8006c9c:	50ca      	str	r2, [r1, r3]
 8006c9e:	b10a      	cbz	r2, 8006ca4 <__lshift+0xa4>
 8006ca0:	f108 0602 	add.w	r6, r8, #2
 8006ca4:	3e01      	subs	r6, #1
 8006ca6:	4638      	mov	r0, r7
 8006ca8:	4621      	mov	r1, r4
 8006caa:	612e      	str	r6, [r5, #16]
 8006cac:	f7ff fd90 	bl	80067d0 <_Bfree>
 8006cb0:	4628      	mov	r0, r5
 8006cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cb6:	f842 0f04 	str.w	r0, [r2, #4]!
 8006cba:	3301      	adds	r3, #1
 8006cbc:	e7c5      	b.n	8006c4a <__lshift+0x4a>
 8006cbe:	3904      	subs	r1, #4
 8006cc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cc4:	459c      	cmp	ip, r3
 8006cc6:	f841 2f04 	str.w	r2, [r1, #4]!
 8006cca:	d8f9      	bhi.n	8006cc0 <__lshift+0xc0>
 8006ccc:	e7ea      	b.n	8006ca4 <__lshift+0xa4>
 8006cce:	bf00      	nop
 8006cd0:	08009837 	.word	0x08009837
 8006cd4:	08009848 	.word	0x08009848

08006cd8 <__mcmp>:
 8006cd8:	4603      	mov	r3, r0
 8006cda:	690a      	ldr	r2, [r1, #16]
 8006cdc:	6900      	ldr	r0, [r0, #16]
 8006cde:	b530      	push	{r4, r5, lr}
 8006ce0:	1a80      	subs	r0, r0, r2
 8006ce2:	d10d      	bne.n	8006d00 <__mcmp+0x28>
 8006ce4:	3314      	adds	r3, #20
 8006ce6:	3114      	adds	r1, #20
 8006ce8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006cec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006cf0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006cf4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006cf8:	4295      	cmp	r5, r2
 8006cfa:	d002      	beq.n	8006d02 <__mcmp+0x2a>
 8006cfc:	d304      	bcc.n	8006d08 <__mcmp+0x30>
 8006cfe:	2001      	movs	r0, #1
 8006d00:	bd30      	pop	{r4, r5, pc}
 8006d02:	42a3      	cmp	r3, r4
 8006d04:	d3f4      	bcc.n	8006cf0 <__mcmp+0x18>
 8006d06:	e7fb      	b.n	8006d00 <__mcmp+0x28>
 8006d08:	f04f 30ff 	mov.w	r0, #4294967295
 8006d0c:	e7f8      	b.n	8006d00 <__mcmp+0x28>
	...

08006d10 <__mdiff>:
 8006d10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d14:	460d      	mov	r5, r1
 8006d16:	4607      	mov	r7, r0
 8006d18:	4611      	mov	r1, r2
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	4614      	mov	r4, r2
 8006d1e:	f7ff ffdb 	bl	8006cd8 <__mcmp>
 8006d22:	1e06      	subs	r6, r0, #0
 8006d24:	d111      	bne.n	8006d4a <__mdiff+0x3a>
 8006d26:	4631      	mov	r1, r6
 8006d28:	4638      	mov	r0, r7
 8006d2a:	f7ff fd11 	bl	8006750 <_Balloc>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	b928      	cbnz	r0, 8006d3e <__mdiff+0x2e>
 8006d32:	f240 2137 	movw	r1, #567	; 0x237
 8006d36:	4b3a      	ldr	r3, [pc, #232]	; (8006e20 <__mdiff+0x110>)
 8006d38:	483a      	ldr	r0, [pc, #232]	; (8006e24 <__mdiff+0x114>)
 8006d3a:	f001 fa95 	bl	8008268 <__assert_func>
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006d44:	4610      	mov	r0, r2
 8006d46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d4a:	bfa4      	itt	ge
 8006d4c:	4623      	movge	r3, r4
 8006d4e:	462c      	movge	r4, r5
 8006d50:	4638      	mov	r0, r7
 8006d52:	6861      	ldr	r1, [r4, #4]
 8006d54:	bfa6      	itte	ge
 8006d56:	461d      	movge	r5, r3
 8006d58:	2600      	movge	r6, #0
 8006d5a:	2601      	movlt	r6, #1
 8006d5c:	f7ff fcf8 	bl	8006750 <_Balloc>
 8006d60:	4602      	mov	r2, r0
 8006d62:	b918      	cbnz	r0, 8006d6c <__mdiff+0x5c>
 8006d64:	f240 2145 	movw	r1, #581	; 0x245
 8006d68:	4b2d      	ldr	r3, [pc, #180]	; (8006e20 <__mdiff+0x110>)
 8006d6a:	e7e5      	b.n	8006d38 <__mdiff+0x28>
 8006d6c:	f102 0814 	add.w	r8, r2, #20
 8006d70:	46c2      	mov	sl, r8
 8006d72:	f04f 0c00 	mov.w	ip, #0
 8006d76:	6927      	ldr	r7, [r4, #16]
 8006d78:	60c6      	str	r6, [r0, #12]
 8006d7a:	692e      	ldr	r6, [r5, #16]
 8006d7c:	f104 0014 	add.w	r0, r4, #20
 8006d80:	f105 0914 	add.w	r9, r5, #20
 8006d84:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006d88:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006d8c:	3410      	adds	r4, #16
 8006d8e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006d92:	f859 3b04 	ldr.w	r3, [r9], #4
 8006d96:	fa1f f18b 	uxth.w	r1, fp
 8006d9a:	4461      	add	r1, ip
 8006d9c:	fa1f fc83 	uxth.w	ip, r3
 8006da0:	0c1b      	lsrs	r3, r3, #16
 8006da2:	eba1 010c 	sub.w	r1, r1, ip
 8006da6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006daa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006dae:	b289      	uxth	r1, r1
 8006db0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006db4:	454e      	cmp	r6, r9
 8006db6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006dba:	f84a 1b04 	str.w	r1, [sl], #4
 8006dbe:	d8e6      	bhi.n	8006d8e <__mdiff+0x7e>
 8006dc0:	1b73      	subs	r3, r6, r5
 8006dc2:	3b15      	subs	r3, #21
 8006dc4:	f023 0303 	bic.w	r3, r3, #3
 8006dc8:	3515      	adds	r5, #21
 8006dca:	3304      	adds	r3, #4
 8006dcc:	42ae      	cmp	r6, r5
 8006dce:	bf38      	it	cc
 8006dd0:	2304      	movcc	r3, #4
 8006dd2:	4418      	add	r0, r3
 8006dd4:	4443      	add	r3, r8
 8006dd6:	461e      	mov	r6, r3
 8006dd8:	4605      	mov	r5, r0
 8006dda:	4575      	cmp	r5, lr
 8006ddc:	d30e      	bcc.n	8006dfc <__mdiff+0xec>
 8006dde:	f10e 0103 	add.w	r1, lr, #3
 8006de2:	1a09      	subs	r1, r1, r0
 8006de4:	f021 0103 	bic.w	r1, r1, #3
 8006de8:	3803      	subs	r0, #3
 8006dea:	4586      	cmp	lr, r0
 8006dec:	bf38      	it	cc
 8006dee:	2100      	movcc	r1, #0
 8006df0:	440b      	add	r3, r1
 8006df2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006df6:	b189      	cbz	r1, 8006e1c <__mdiff+0x10c>
 8006df8:	6117      	str	r7, [r2, #16]
 8006dfa:	e7a3      	b.n	8006d44 <__mdiff+0x34>
 8006dfc:	f855 8b04 	ldr.w	r8, [r5], #4
 8006e00:	fa1f f188 	uxth.w	r1, r8
 8006e04:	4461      	add	r1, ip
 8006e06:	140c      	asrs	r4, r1, #16
 8006e08:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006e0c:	b289      	uxth	r1, r1
 8006e0e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006e12:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006e16:	f846 1b04 	str.w	r1, [r6], #4
 8006e1a:	e7de      	b.n	8006dda <__mdiff+0xca>
 8006e1c:	3f01      	subs	r7, #1
 8006e1e:	e7e8      	b.n	8006df2 <__mdiff+0xe2>
 8006e20:	08009837 	.word	0x08009837
 8006e24:	08009848 	.word	0x08009848

08006e28 <__ulp>:
 8006e28:	4b0e      	ldr	r3, [pc, #56]	; (8006e64 <__ulp+0x3c>)
 8006e2a:	400b      	ands	r3, r1
 8006e2c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	dc08      	bgt.n	8006e46 <__ulp+0x1e>
 8006e34:	425b      	negs	r3, r3
 8006e36:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006e3a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006e3e:	da04      	bge.n	8006e4a <__ulp+0x22>
 8006e40:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006e44:	4113      	asrs	r3, r2
 8006e46:	2200      	movs	r2, #0
 8006e48:	e008      	b.n	8006e5c <__ulp+0x34>
 8006e4a:	f1a2 0314 	sub.w	r3, r2, #20
 8006e4e:	2b1e      	cmp	r3, #30
 8006e50:	bfd6      	itet	le
 8006e52:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006e56:	2201      	movgt	r2, #1
 8006e58:	40da      	lsrle	r2, r3
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	4610      	mov	r0, r2
 8006e60:	4770      	bx	lr
 8006e62:	bf00      	nop
 8006e64:	7ff00000 	.word	0x7ff00000

08006e68 <__b2d>:
 8006e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e6a:	6905      	ldr	r5, [r0, #16]
 8006e6c:	f100 0714 	add.w	r7, r0, #20
 8006e70:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006e74:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006e78:	1f2e      	subs	r6, r5, #4
 8006e7a:	4620      	mov	r0, r4
 8006e7c:	f7ff fd5a 	bl	8006934 <__hi0bits>
 8006e80:	f1c0 0220 	rsb	r2, r0, #32
 8006e84:	280a      	cmp	r0, #10
 8006e86:	4603      	mov	r3, r0
 8006e88:	f8df c068 	ldr.w	ip, [pc, #104]	; 8006ef4 <__b2d+0x8c>
 8006e8c:	600a      	str	r2, [r1, #0]
 8006e8e:	dc12      	bgt.n	8006eb6 <__b2d+0x4e>
 8006e90:	f1c0 0e0b 	rsb	lr, r0, #11
 8006e94:	fa24 f20e 	lsr.w	r2, r4, lr
 8006e98:	42b7      	cmp	r7, r6
 8006e9a:	ea42 010c 	orr.w	r1, r2, ip
 8006e9e:	bf2c      	ite	cs
 8006ea0:	2200      	movcs	r2, #0
 8006ea2:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8006ea6:	3315      	adds	r3, #21
 8006ea8:	fa04 f303 	lsl.w	r3, r4, r3
 8006eac:	fa22 f20e 	lsr.w	r2, r2, lr
 8006eb0:	431a      	orrs	r2, r3
 8006eb2:	4610      	mov	r0, r2
 8006eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006eb6:	42b7      	cmp	r7, r6
 8006eb8:	bf2e      	itee	cs
 8006eba:	2200      	movcs	r2, #0
 8006ebc:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8006ec0:	f1a5 0608 	subcc.w	r6, r5, #8
 8006ec4:	3b0b      	subs	r3, #11
 8006ec6:	d012      	beq.n	8006eee <__b2d+0x86>
 8006ec8:	f1c3 0520 	rsb	r5, r3, #32
 8006ecc:	fa22 f105 	lsr.w	r1, r2, r5
 8006ed0:	409c      	lsls	r4, r3
 8006ed2:	430c      	orrs	r4, r1
 8006ed4:	42be      	cmp	r6, r7
 8006ed6:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8006eda:	bf94      	ite	ls
 8006edc:	2400      	movls	r4, #0
 8006ede:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8006ee2:	409a      	lsls	r2, r3
 8006ee4:	40ec      	lsrs	r4, r5
 8006ee6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006eea:	4322      	orrs	r2, r4
 8006eec:	e7e1      	b.n	8006eb2 <__b2d+0x4a>
 8006eee:	ea44 010c 	orr.w	r1, r4, ip
 8006ef2:	e7de      	b.n	8006eb2 <__b2d+0x4a>
 8006ef4:	3ff00000 	.word	0x3ff00000

08006ef8 <__d2b>:
 8006ef8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006efa:	2101      	movs	r1, #1
 8006efc:	4617      	mov	r7, r2
 8006efe:	461c      	mov	r4, r3
 8006f00:	9e08      	ldr	r6, [sp, #32]
 8006f02:	f7ff fc25 	bl	8006750 <_Balloc>
 8006f06:	4605      	mov	r5, r0
 8006f08:	b930      	cbnz	r0, 8006f18 <__d2b+0x20>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	f240 310f 	movw	r1, #783	; 0x30f
 8006f10:	4b22      	ldr	r3, [pc, #136]	; (8006f9c <__d2b+0xa4>)
 8006f12:	4823      	ldr	r0, [pc, #140]	; (8006fa0 <__d2b+0xa8>)
 8006f14:	f001 f9a8 	bl	8008268 <__assert_func>
 8006f18:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006f1c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006f20:	bb24      	cbnz	r4, 8006f6c <__d2b+0x74>
 8006f22:	2f00      	cmp	r7, #0
 8006f24:	9301      	str	r3, [sp, #4]
 8006f26:	d026      	beq.n	8006f76 <__d2b+0x7e>
 8006f28:	4668      	mov	r0, sp
 8006f2a:	9700      	str	r7, [sp, #0]
 8006f2c:	f7ff fd22 	bl	8006974 <__lo0bits>
 8006f30:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006f34:	b1e8      	cbz	r0, 8006f72 <__d2b+0x7a>
 8006f36:	f1c0 0320 	rsb	r3, r0, #32
 8006f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f3e:	430b      	orrs	r3, r1
 8006f40:	40c2      	lsrs	r2, r0
 8006f42:	616b      	str	r3, [r5, #20]
 8006f44:	9201      	str	r2, [sp, #4]
 8006f46:	9b01      	ldr	r3, [sp, #4]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	bf14      	ite	ne
 8006f4c:	2102      	movne	r1, #2
 8006f4e:	2101      	moveq	r1, #1
 8006f50:	61ab      	str	r3, [r5, #24]
 8006f52:	6129      	str	r1, [r5, #16]
 8006f54:	b1bc      	cbz	r4, 8006f86 <__d2b+0x8e>
 8006f56:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006f5a:	4404      	add	r4, r0
 8006f5c:	6034      	str	r4, [r6, #0]
 8006f5e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006f62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f64:	6018      	str	r0, [r3, #0]
 8006f66:	4628      	mov	r0, r5
 8006f68:	b003      	add	sp, #12
 8006f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f70:	e7d7      	b.n	8006f22 <__d2b+0x2a>
 8006f72:	6169      	str	r1, [r5, #20]
 8006f74:	e7e7      	b.n	8006f46 <__d2b+0x4e>
 8006f76:	a801      	add	r0, sp, #4
 8006f78:	f7ff fcfc 	bl	8006974 <__lo0bits>
 8006f7c:	9b01      	ldr	r3, [sp, #4]
 8006f7e:	2101      	movs	r1, #1
 8006f80:	616b      	str	r3, [r5, #20]
 8006f82:	3020      	adds	r0, #32
 8006f84:	e7e5      	b.n	8006f52 <__d2b+0x5a>
 8006f86:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006f8a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8006f8e:	6030      	str	r0, [r6, #0]
 8006f90:	6918      	ldr	r0, [r3, #16]
 8006f92:	f7ff fccf 	bl	8006934 <__hi0bits>
 8006f96:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006f9a:	e7e2      	b.n	8006f62 <__d2b+0x6a>
 8006f9c:	08009837 	.word	0x08009837
 8006fa0:	08009848 	.word	0x08009848

08006fa4 <__ratio>:
 8006fa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fa8:	4688      	mov	r8, r1
 8006faa:	4669      	mov	r1, sp
 8006fac:	4681      	mov	r9, r0
 8006fae:	f7ff ff5b 	bl	8006e68 <__b2d>
 8006fb2:	460f      	mov	r7, r1
 8006fb4:	4604      	mov	r4, r0
 8006fb6:	460d      	mov	r5, r1
 8006fb8:	4640      	mov	r0, r8
 8006fba:	a901      	add	r1, sp, #4
 8006fbc:	f7ff ff54 	bl	8006e68 <__b2d>
 8006fc0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006fc4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006fc8:	468b      	mov	fp, r1
 8006fca:	eba3 0c02 	sub.w	ip, r3, r2
 8006fce:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006fd2:	1a9b      	subs	r3, r3, r2
 8006fd4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	bfd5      	itete	le
 8006fdc:	460a      	movle	r2, r1
 8006fde:	462a      	movgt	r2, r5
 8006fe0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006fe4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006fe8:	bfd8      	it	le
 8006fea:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006fee:	465b      	mov	r3, fp
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	4639      	mov	r1, r7
 8006ff4:	4620      	mov	r0, r4
 8006ff6:	f7f9 fc05 	bl	8000804 <__aeabi_ddiv>
 8006ffa:	b003      	add	sp, #12
 8006ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007000 <__copybits>:
 8007000:	3901      	subs	r1, #1
 8007002:	b570      	push	{r4, r5, r6, lr}
 8007004:	1149      	asrs	r1, r1, #5
 8007006:	6914      	ldr	r4, [r2, #16]
 8007008:	3101      	adds	r1, #1
 800700a:	f102 0314 	add.w	r3, r2, #20
 800700e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007012:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007016:	1f05      	subs	r5, r0, #4
 8007018:	42a3      	cmp	r3, r4
 800701a:	d30c      	bcc.n	8007036 <__copybits+0x36>
 800701c:	1aa3      	subs	r3, r4, r2
 800701e:	3b11      	subs	r3, #17
 8007020:	f023 0303 	bic.w	r3, r3, #3
 8007024:	3211      	adds	r2, #17
 8007026:	42a2      	cmp	r2, r4
 8007028:	bf88      	it	hi
 800702a:	2300      	movhi	r3, #0
 800702c:	4418      	add	r0, r3
 800702e:	2300      	movs	r3, #0
 8007030:	4288      	cmp	r0, r1
 8007032:	d305      	bcc.n	8007040 <__copybits+0x40>
 8007034:	bd70      	pop	{r4, r5, r6, pc}
 8007036:	f853 6b04 	ldr.w	r6, [r3], #4
 800703a:	f845 6f04 	str.w	r6, [r5, #4]!
 800703e:	e7eb      	b.n	8007018 <__copybits+0x18>
 8007040:	f840 3b04 	str.w	r3, [r0], #4
 8007044:	e7f4      	b.n	8007030 <__copybits+0x30>

08007046 <__any_on>:
 8007046:	f100 0214 	add.w	r2, r0, #20
 800704a:	6900      	ldr	r0, [r0, #16]
 800704c:	114b      	asrs	r3, r1, #5
 800704e:	4298      	cmp	r0, r3
 8007050:	b510      	push	{r4, lr}
 8007052:	db11      	blt.n	8007078 <__any_on+0x32>
 8007054:	dd0a      	ble.n	800706c <__any_on+0x26>
 8007056:	f011 011f 	ands.w	r1, r1, #31
 800705a:	d007      	beq.n	800706c <__any_on+0x26>
 800705c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007060:	fa24 f001 	lsr.w	r0, r4, r1
 8007064:	fa00 f101 	lsl.w	r1, r0, r1
 8007068:	428c      	cmp	r4, r1
 800706a:	d10b      	bne.n	8007084 <__any_on+0x3e>
 800706c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007070:	4293      	cmp	r3, r2
 8007072:	d803      	bhi.n	800707c <__any_on+0x36>
 8007074:	2000      	movs	r0, #0
 8007076:	bd10      	pop	{r4, pc}
 8007078:	4603      	mov	r3, r0
 800707a:	e7f7      	b.n	800706c <__any_on+0x26>
 800707c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007080:	2900      	cmp	r1, #0
 8007082:	d0f5      	beq.n	8007070 <__any_on+0x2a>
 8007084:	2001      	movs	r0, #1
 8007086:	e7f6      	b.n	8007076 <__any_on+0x30>

08007088 <sulp>:
 8007088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800708c:	460f      	mov	r7, r1
 800708e:	4690      	mov	r8, r2
 8007090:	f7ff feca 	bl	8006e28 <__ulp>
 8007094:	4604      	mov	r4, r0
 8007096:	460d      	mov	r5, r1
 8007098:	f1b8 0f00 	cmp.w	r8, #0
 800709c:	d011      	beq.n	80070c2 <sulp+0x3a>
 800709e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80070a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	dd0b      	ble.n	80070c2 <sulp+0x3a>
 80070aa:	2400      	movs	r4, #0
 80070ac:	051b      	lsls	r3, r3, #20
 80070ae:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80070b2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80070b6:	4622      	mov	r2, r4
 80070b8:	462b      	mov	r3, r5
 80070ba:	f7f9 fa79 	bl	80005b0 <__aeabi_dmul>
 80070be:	4604      	mov	r4, r0
 80070c0:	460d      	mov	r5, r1
 80070c2:	4620      	mov	r0, r4
 80070c4:	4629      	mov	r1, r5
 80070c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070ca:	0000      	movs	r0, r0
 80070cc:	0000      	movs	r0, r0
	...

080070d0 <_strtod_l>:
 80070d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070d4:	b09f      	sub	sp, #124	; 0x7c
 80070d6:	9217      	str	r2, [sp, #92]	; 0x5c
 80070d8:	2200      	movs	r2, #0
 80070da:	4604      	mov	r4, r0
 80070dc:	921a      	str	r2, [sp, #104]	; 0x68
 80070de:	460d      	mov	r5, r1
 80070e0:	f04f 0800 	mov.w	r8, #0
 80070e4:	f04f 0900 	mov.w	r9, #0
 80070e8:	460a      	mov	r2, r1
 80070ea:	9219      	str	r2, [sp, #100]	; 0x64
 80070ec:	7811      	ldrb	r1, [r2, #0]
 80070ee:	292b      	cmp	r1, #43	; 0x2b
 80070f0:	d04a      	beq.n	8007188 <_strtod_l+0xb8>
 80070f2:	d838      	bhi.n	8007166 <_strtod_l+0x96>
 80070f4:	290d      	cmp	r1, #13
 80070f6:	d832      	bhi.n	800715e <_strtod_l+0x8e>
 80070f8:	2908      	cmp	r1, #8
 80070fa:	d832      	bhi.n	8007162 <_strtod_l+0x92>
 80070fc:	2900      	cmp	r1, #0
 80070fe:	d03b      	beq.n	8007178 <_strtod_l+0xa8>
 8007100:	2200      	movs	r2, #0
 8007102:	920e      	str	r2, [sp, #56]	; 0x38
 8007104:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007106:	7832      	ldrb	r2, [r6, #0]
 8007108:	2a30      	cmp	r2, #48	; 0x30
 800710a:	f040 80b2 	bne.w	8007272 <_strtod_l+0x1a2>
 800710e:	7872      	ldrb	r2, [r6, #1]
 8007110:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007114:	2a58      	cmp	r2, #88	; 0x58
 8007116:	d16e      	bne.n	80071f6 <_strtod_l+0x126>
 8007118:	9302      	str	r3, [sp, #8]
 800711a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800711c:	4620      	mov	r0, r4
 800711e:	9301      	str	r3, [sp, #4]
 8007120:	ab1a      	add	r3, sp, #104	; 0x68
 8007122:	9300      	str	r3, [sp, #0]
 8007124:	4a8c      	ldr	r2, [pc, #560]	; (8007358 <_strtod_l+0x288>)
 8007126:	ab1b      	add	r3, sp, #108	; 0x6c
 8007128:	a919      	add	r1, sp, #100	; 0x64
 800712a:	f001 f937 	bl	800839c <__gethex>
 800712e:	f010 070f 	ands.w	r7, r0, #15
 8007132:	4605      	mov	r5, r0
 8007134:	d005      	beq.n	8007142 <_strtod_l+0x72>
 8007136:	2f06      	cmp	r7, #6
 8007138:	d128      	bne.n	800718c <_strtod_l+0xbc>
 800713a:	2300      	movs	r3, #0
 800713c:	3601      	adds	r6, #1
 800713e:	9619      	str	r6, [sp, #100]	; 0x64
 8007140:	930e      	str	r3, [sp, #56]	; 0x38
 8007142:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007144:	2b00      	cmp	r3, #0
 8007146:	f040 85a0 	bne.w	8007c8a <_strtod_l+0xbba>
 800714a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800714c:	b1cb      	cbz	r3, 8007182 <_strtod_l+0xb2>
 800714e:	4642      	mov	r2, r8
 8007150:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007154:	4610      	mov	r0, r2
 8007156:	4619      	mov	r1, r3
 8007158:	b01f      	add	sp, #124	; 0x7c
 800715a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800715e:	2920      	cmp	r1, #32
 8007160:	d1ce      	bne.n	8007100 <_strtod_l+0x30>
 8007162:	3201      	adds	r2, #1
 8007164:	e7c1      	b.n	80070ea <_strtod_l+0x1a>
 8007166:	292d      	cmp	r1, #45	; 0x2d
 8007168:	d1ca      	bne.n	8007100 <_strtod_l+0x30>
 800716a:	2101      	movs	r1, #1
 800716c:	910e      	str	r1, [sp, #56]	; 0x38
 800716e:	1c51      	adds	r1, r2, #1
 8007170:	9119      	str	r1, [sp, #100]	; 0x64
 8007172:	7852      	ldrb	r2, [r2, #1]
 8007174:	2a00      	cmp	r2, #0
 8007176:	d1c5      	bne.n	8007104 <_strtod_l+0x34>
 8007178:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800717a:	9519      	str	r5, [sp, #100]	; 0x64
 800717c:	2b00      	cmp	r3, #0
 800717e:	f040 8582 	bne.w	8007c86 <_strtod_l+0xbb6>
 8007182:	4642      	mov	r2, r8
 8007184:	464b      	mov	r3, r9
 8007186:	e7e5      	b.n	8007154 <_strtod_l+0x84>
 8007188:	2100      	movs	r1, #0
 800718a:	e7ef      	b.n	800716c <_strtod_l+0x9c>
 800718c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800718e:	b13a      	cbz	r2, 80071a0 <_strtod_l+0xd0>
 8007190:	2135      	movs	r1, #53	; 0x35
 8007192:	a81c      	add	r0, sp, #112	; 0x70
 8007194:	f7ff ff34 	bl	8007000 <__copybits>
 8007198:	4620      	mov	r0, r4
 800719a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800719c:	f7ff fb18 	bl	80067d0 <_Bfree>
 80071a0:	3f01      	subs	r7, #1
 80071a2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80071a4:	2f04      	cmp	r7, #4
 80071a6:	d806      	bhi.n	80071b6 <_strtod_l+0xe6>
 80071a8:	e8df f007 	tbb	[pc, r7]
 80071ac:	201d0314 	.word	0x201d0314
 80071b0:	14          	.byte	0x14
 80071b1:	00          	.byte	0x00
 80071b2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80071b6:	05e9      	lsls	r1, r5, #23
 80071b8:	bf48      	it	mi
 80071ba:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80071be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80071c2:	0d1b      	lsrs	r3, r3, #20
 80071c4:	051b      	lsls	r3, r3, #20
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1bb      	bne.n	8007142 <_strtod_l+0x72>
 80071ca:	f7fe fb15 	bl	80057f8 <__errno>
 80071ce:	2322      	movs	r3, #34	; 0x22
 80071d0:	6003      	str	r3, [r0, #0]
 80071d2:	e7b6      	b.n	8007142 <_strtod_l+0x72>
 80071d4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80071d8:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80071dc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80071e0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80071e4:	e7e7      	b.n	80071b6 <_strtod_l+0xe6>
 80071e6:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800735c <_strtod_l+0x28c>
 80071ea:	e7e4      	b.n	80071b6 <_strtod_l+0xe6>
 80071ec:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80071f0:	f04f 38ff 	mov.w	r8, #4294967295
 80071f4:	e7df      	b.n	80071b6 <_strtod_l+0xe6>
 80071f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80071f8:	1c5a      	adds	r2, r3, #1
 80071fa:	9219      	str	r2, [sp, #100]	; 0x64
 80071fc:	785b      	ldrb	r3, [r3, #1]
 80071fe:	2b30      	cmp	r3, #48	; 0x30
 8007200:	d0f9      	beq.n	80071f6 <_strtod_l+0x126>
 8007202:	2b00      	cmp	r3, #0
 8007204:	d09d      	beq.n	8007142 <_strtod_l+0x72>
 8007206:	2301      	movs	r3, #1
 8007208:	f04f 0a00 	mov.w	sl, #0
 800720c:	220a      	movs	r2, #10
 800720e:	46d3      	mov	fp, sl
 8007210:	9305      	str	r3, [sp, #20]
 8007212:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007214:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8007218:	930b      	str	r3, [sp, #44]	; 0x2c
 800721a:	9819      	ldr	r0, [sp, #100]	; 0x64
 800721c:	7806      	ldrb	r6, [r0, #0]
 800721e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007222:	b2d9      	uxtb	r1, r3
 8007224:	2909      	cmp	r1, #9
 8007226:	d926      	bls.n	8007276 <_strtod_l+0x1a6>
 8007228:	2201      	movs	r2, #1
 800722a:	494d      	ldr	r1, [pc, #308]	; (8007360 <_strtod_l+0x290>)
 800722c:	f000 ffe6 	bl	80081fc <strncmp>
 8007230:	2800      	cmp	r0, #0
 8007232:	d030      	beq.n	8007296 <_strtod_l+0x1c6>
 8007234:	2000      	movs	r0, #0
 8007236:	4632      	mov	r2, r6
 8007238:	4603      	mov	r3, r0
 800723a:	465e      	mov	r6, fp
 800723c:	9008      	str	r0, [sp, #32]
 800723e:	2a65      	cmp	r2, #101	; 0x65
 8007240:	d001      	beq.n	8007246 <_strtod_l+0x176>
 8007242:	2a45      	cmp	r2, #69	; 0x45
 8007244:	d113      	bne.n	800726e <_strtod_l+0x19e>
 8007246:	b91e      	cbnz	r6, 8007250 <_strtod_l+0x180>
 8007248:	9a05      	ldr	r2, [sp, #20]
 800724a:	4302      	orrs	r2, r0
 800724c:	d094      	beq.n	8007178 <_strtod_l+0xa8>
 800724e:	2600      	movs	r6, #0
 8007250:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007252:	1c6a      	adds	r2, r5, #1
 8007254:	9219      	str	r2, [sp, #100]	; 0x64
 8007256:	786a      	ldrb	r2, [r5, #1]
 8007258:	2a2b      	cmp	r2, #43	; 0x2b
 800725a:	d074      	beq.n	8007346 <_strtod_l+0x276>
 800725c:	2a2d      	cmp	r2, #45	; 0x2d
 800725e:	d078      	beq.n	8007352 <_strtod_l+0x282>
 8007260:	f04f 0c00 	mov.w	ip, #0
 8007264:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007268:	2909      	cmp	r1, #9
 800726a:	d97f      	bls.n	800736c <_strtod_l+0x29c>
 800726c:	9519      	str	r5, [sp, #100]	; 0x64
 800726e:	2700      	movs	r7, #0
 8007270:	e09e      	b.n	80073b0 <_strtod_l+0x2e0>
 8007272:	2300      	movs	r3, #0
 8007274:	e7c8      	b.n	8007208 <_strtod_l+0x138>
 8007276:	f1bb 0f08 	cmp.w	fp, #8
 800727a:	bfd8      	it	le
 800727c:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800727e:	f100 0001 	add.w	r0, r0, #1
 8007282:	bfd6      	itet	le
 8007284:	fb02 3301 	mlale	r3, r2, r1, r3
 8007288:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800728c:	930a      	strle	r3, [sp, #40]	; 0x28
 800728e:	f10b 0b01 	add.w	fp, fp, #1
 8007292:	9019      	str	r0, [sp, #100]	; 0x64
 8007294:	e7c1      	b.n	800721a <_strtod_l+0x14a>
 8007296:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007298:	1c5a      	adds	r2, r3, #1
 800729a:	9219      	str	r2, [sp, #100]	; 0x64
 800729c:	785a      	ldrb	r2, [r3, #1]
 800729e:	f1bb 0f00 	cmp.w	fp, #0
 80072a2:	d037      	beq.n	8007314 <_strtod_l+0x244>
 80072a4:	465e      	mov	r6, fp
 80072a6:	9008      	str	r0, [sp, #32]
 80072a8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80072ac:	2b09      	cmp	r3, #9
 80072ae:	d912      	bls.n	80072d6 <_strtod_l+0x206>
 80072b0:	2301      	movs	r3, #1
 80072b2:	e7c4      	b.n	800723e <_strtod_l+0x16e>
 80072b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80072b6:	3001      	adds	r0, #1
 80072b8:	1c5a      	adds	r2, r3, #1
 80072ba:	9219      	str	r2, [sp, #100]	; 0x64
 80072bc:	785a      	ldrb	r2, [r3, #1]
 80072be:	2a30      	cmp	r2, #48	; 0x30
 80072c0:	d0f8      	beq.n	80072b4 <_strtod_l+0x1e4>
 80072c2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80072c6:	2b08      	cmp	r3, #8
 80072c8:	f200 84e4 	bhi.w	8007c94 <_strtod_l+0xbc4>
 80072cc:	9008      	str	r0, [sp, #32]
 80072ce:	2000      	movs	r0, #0
 80072d0:	4606      	mov	r6, r0
 80072d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80072d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80072d6:	3a30      	subs	r2, #48	; 0x30
 80072d8:	f100 0301 	add.w	r3, r0, #1
 80072dc:	d014      	beq.n	8007308 <_strtod_l+0x238>
 80072de:	9908      	ldr	r1, [sp, #32]
 80072e0:	eb00 0c06 	add.w	ip, r0, r6
 80072e4:	4419      	add	r1, r3
 80072e6:	9108      	str	r1, [sp, #32]
 80072e8:	4633      	mov	r3, r6
 80072ea:	210a      	movs	r1, #10
 80072ec:	4563      	cmp	r3, ip
 80072ee:	d113      	bne.n	8007318 <_strtod_l+0x248>
 80072f0:	1833      	adds	r3, r6, r0
 80072f2:	2b08      	cmp	r3, #8
 80072f4:	f106 0601 	add.w	r6, r6, #1
 80072f8:	4406      	add	r6, r0
 80072fa:	dc1a      	bgt.n	8007332 <_strtod_l+0x262>
 80072fc:	230a      	movs	r3, #10
 80072fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007300:	fb03 2301 	mla	r3, r3, r1, r2
 8007304:	930a      	str	r3, [sp, #40]	; 0x28
 8007306:	2300      	movs	r3, #0
 8007308:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800730a:	4618      	mov	r0, r3
 800730c:	1c51      	adds	r1, r2, #1
 800730e:	9119      	str	r1, [sp, #100]	; 0x64
 8007310:	7852      	ldrb	r2, [r2, #1]
 8007312:	e7c9      	b.n	80072a8 <_strtod_l+0x1d8>
 8007314:	4658      	mov	r0, fp
 8007316:	e7d2      	b.n	80072be <_strtod_l+0x1ee>
 8007318:	2b08      	cmp	r3, #8
 800731a:	f103 0301 	add.w	r3, r3, #1
 800731e:	dc03      	bgt.n	8007328 <_strtod_l+0x258>
 8007320:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007322:	434f      	muls	r7, r1
 8007324:	970a      	str	r7, [sp, #40]	; 0x28
 8007326:	e7e1      	b.n	80072ec <_strtod_l+0x21c>
 8007328:	2b10      	cmp	r3, #16
 800732a:	bfd8      	it	le
 800732c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007330:	e7dc      	b.n	80072ec <_strtod_l+0x21c>
 8007332:	2e10      	cmp	r6, #16
 8007334:	bfdc      	itt	le
 8007336:	230a      	movle	r3, #10
 8007338:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800733c:	e7e3      	b.n	8007306 <_strtod_l+0x236>
 800733e:	2300      	movs	r3, #0
 8007340:	9308      	str	r3, [sp, #32]
 8007342:	2301      	movs	r3, #1
 8007344:	e780      	b.n	8007248 <_strtod_l+0x178>
 8007346:	f04f 0c00 	mov.w	ip, #0
 800734a:	1caa      	adds	r2, r5, #2
 800734c:	9219      	str	r2, [sp, #100]	; 0x64
 800734e:	78aa      	ldrb	r2, [r5, #2]
 8007350:	e788      	b.n	8007264 <_strtod_l+0x194>
 8007352:	f04f 0c01 	mov.w	ip, #1
 8007356:	e7f8      	b.n	800734a <_strtod_l+0x27a>
 8007358:	080099a8 	.word	0x080099a8
 800735c:	7ff00000 	.word	0x7ff00000
 8007360:	080099a4 	.word	0x080099a4
 8007364:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007366:	1c51      	adds	r1, r2, #1
 8007368:	9119      	str	r1, [sp, #100]	; 0x64
 800736a:	7852      	ldrb	r2, [r2, #1]
 800736c:	2a30      	cmp	r2, #48	; 0x30
 800736e:	d0f9      	beq.n	8007364 <_strtod_l+0x294>
 8007370:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007374:	2908      	cmp	r1, #8
 8007376:	f63f af7a 	bhi.w	800726e <_strtod_l+0x19e>
 800737a:	3a30      	subs	r2, #48	; 0x30
 800737c:	9209      	str	r2, [sp, #36]	; 0x24
 800737e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007380:	920c      	str	r2, [sp, #48]	; 0x30
 8007382:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007384:	1c57      	adds	r7, r2, #1
 8007386:	9719      	str	r7, [sp, #100]	; 0x64
 8007388:	7852      	ldrb	r2, [r2, #1]
 800738a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800738e:	f1be 0f09 	cmp.w	lr, #9
 8007392:	d938      	bls.n	8007406 <_strtod_l+0x336>
 8007394:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007396:	1a7f      	subs	r7, r7, r1
 8007398:	2f08      	cmp	r7, #8
 800739a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800739e:	dc03      	bgt.n	80073a8 <_strtod_l+0x2d8>
 80073a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073a2:	428f      	cmp	r7, r1
 80073a4:	bfa8      	it	ge
 80073a6:	460f      	movge	r7, r1
 80073a8:	f1bc 0f00 	cmp.w	ip, #0
 80073ac:	d000      	beq.n	80073b0 <_strtod_l+0x2e0>
 80073ae:	427f      	negs	r7, r7
 80073b0:	2e00      	cmp	r6, #0
 80073b2:	d14f      	bne.n	8007454 <_strtod_l+0x384>
 80073b4:	9905      	ldr	r1, [sp, #20]
 80073b6:	4301      	orrs	r1, r0
 80073b8:	f47f aec3 	bne.w	8007142 <_strtod_l+0x72>
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f47f aedb 	bne.w	8007178 <_strtod_l+0xa8>
 80073c2:	2a69      	cmp	r2, #105	; 0x69
 80073c4:	d029      	beq.n	800741a <_strtod_l+0x34a>
 80073c6:	dc26      	bgt.n	8007416 <_strtod_l+0x346>
 80073c8:	2a49      	cmp	r2, #73	; 0x49
 80073ca:	d026      	beq.n	800741a <_strtod_l+0x34a>
 80073cc:	2a4e      	cmp	r2, #78	; 0x4e
 80073ce:	f47f aed3 	bne.w	8007178 <_strtod_l+0xa8>
 80073d2:	499a      	ldr	r1, [pc, #616]	; (800763c <_strtod_l+0x56c>)
 80073d4:	a819      	add	r0, sp, #100	; 0x64
 80073d6:	f001 fa23 	bl	8008820 <__match>
 80073da:	2800      	cmp	r0, #0
 80073dc:	f43f aecc 	beq.w	8007178 <_strtod_l+0xa8>
 80073e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	2b28      	cmp	r3, #40	; 0x28
 80073e6:	d12f      	bne.n	8007448 <_strtod_l+0x378>
 80073e8:	4995      	ldr	r1, [pc, #596]	; (8007640 <_strtod_l+0x570>)
 80073ea:	aa1c      	add	r2, sp, #112	; 0x70
 80073ec:	a819      	add	r0, sp, #100	; 0x64
 80073ee:	f001 fa2b 	bl	8008848 <__hexnan>
 80073f2:	2805      	cmp	r0, #5
 80073f4:	d128      	bne.n	8007448 <_strtod_l+0x378>
 80073f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80073f8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80073fc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007400:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007404:	e69d      	b.n	8007142 <_strtod_l+0x72>
 8007406:	210a      	movs	r1, #10
 8007408:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800740a:	fb01 2107 	mla	r1, r1, r7, r2
 800740e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007412:	9209      	str	r2, [sp, #36]	; 0x24
 8007414:	e7b5      	b.n	8007382 <_strtod_l+0x2b2>
 8007416:	2a6e      	cmp	r2, #110	; 0x6e
 8007418:	e7d9      	b.n	80073ce <_strtod_l+0x2fe>
 800741a:	498a      	ldr	r1, [pc, #552]	; (8007644 <_strtod_l+0x574>)
 800741c:	a819      	add	r0, sp, #100	; 0x64
 800741e:	f001 f9ff 	bl	8008820 <__match>
 8007422:	2800      	cmp	r0, #0
 8007424:	f43f aea8 	beq.w	8007178 <_strtod_l+0xa8>
 8007428:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800742a:	4987      	ldr	r1, [pc, #540]	; (8007648 <_strtod_l+0x578>)
 800742c:	3b01      	subs	r3, #1
 800742e:	a819      	add	r0, sp, #100	; 0x64
 8007430:	9319      	str	r3, [sp, #100]	; 0x64
 8007432:	f001 f9f5 	bl	8008820 <__match>
 8007436:	b910      	cbnz	r0, 800743e <_strtod_l+0x36e>
 8007438:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800743a:	3301      	adds	r3, #1
 800743c:	9319      	str	r3, [sp, #100]	; 0x64
 800743e:	f04f 0800 	mov.w	r8, #0
 8007442:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800764c <_strtod_l+0x57c>
 8007446:	e67c      	b.n	8007142 <_strtod_l+0x72>
 8007448:	4881      	ldr	r0, [pc, #516]	; (8007650 <_strtod_l+0x580>)
 800744a:	f000 ff07 	bl	800825c <nan>
 800744e:	4680      	mov	r8, r0
 8007450:	4689      	mov	r9, r1
 8007452:	e676      	b.n	8007142 <_strtod_l+0x72>
 8007454:	9b08      	ldr	r3, [sp, #32]
 8007456:	f1bb 0f00 	cmp.w	fp, #0
 800745a:	bf08      	it	eq
 800745c:	46b3      	moveq	fp, r6
 800745e:	1afb      	subs	r3, r7, r3
 8007460:	2e10      	cmp	r6, #16
 8007462:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007464:	4635      	mov	r5, r6
 8007466:	9309      	str	r3, [sp, #36]	; 0x24
 8007468:	bfa8      	it	ge
 800746a:	2510      	movge	r5, #16
 800746c:	f7f9 f826 	bl	80004bc <__aeabi_ui2d>
 8007470:	2e09      	cmp	r6, #9
 8007472:	4680      	mov	r8, r0
 8007474:	4689      	mov	r9, r1
 8007476:	dd13      	ble.n	80074a0 <_strtod_l+0x3d0>
 8007478:	4b76      	ldr	r3, [pc, #472]	; (8007654 <_strtod_l+0x584>)
 800747a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800747e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007482:	f7f9 f895 	bl	80005b0 <__aeabi_dmul>
 8007486:	4680      	mov	r8, r0
 8007488:	4650      	mov	r0, sl
 800748a:	4689      	mov	r9, r1
 800748c:	f7f9 f816 	bl	80004bc <__aeabi_ui2d>
 8007490:	4602      	mov	r2, r0
 8007492:	460b      	mov	r3, r1
 8007494:	4640      	mov	r0, r8
 8007496:	4649      	mov	r1, r9
 8007498:	f7f8 fed4 	bl	8000244 <__adddf3>
 800749c:	4680      	mov	r8, r0
 800749e:	4689      	mov	r9, r1
 80074a0:	2e0f      	cmp	r6, #15
 80074a2:	dc36      	bgt.n	8007512 <_strtod_l+0x442>
 80074a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	f43f ae4b 	beq.w	8007142 <_strtod_l+0x72>
 80074ac:	dd22      	ble.n	80074f4 <_strtod_l+0x424>
 80074ae:	2b16      	cmp	r3, #22
 80074b0:	dc09      	bgt.n	80074c6 <_strtod_l+0x3f6>
 80074b2:	4968      	ldr	r1, [pc, #416]	; (8007654 <_strtod_l+0x584>)
 80074b4:	4642      	mov	r2, r8
 80074b6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80074ba:	464b      	mov	r3, r9
 80074bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074c0:	f7f9 f876 	bl	80005b0 <__aeabi_dmul>
 80074c4:	e7c3      	b.n	800744e <_strtod_l+0x37e>
 80074c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074c8:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80074cc:	4293      	cmp	r3, r2
 80074ce:	db20      	blt.n	8007512 <_strtod_l+0x442>
 80074d0:	4c60      	ldr	r4, [pc, #384]	; (8007654 <_strtod_l+0x584>)
 80074d2:	f1c6 060f 	rsb	r6, r6, #15
 80074d6:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80074da:	4642      	mov	r2, r8
 80074dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074e0:	464b      	mov	r3, r9
 80074e2:	f7f9 f865 	bl	80005b0 <__aeabi_dmul>
 80074e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074e8:	1b9e      	subs	r6, r3, r6
 80074ea:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80074ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 80074f2:	e7e5      	b.n	80074c0 <_strtod_l+0x3f0>
 80074f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074f6:	3316      	adds	r3, #22
 80074f8:	db0b      	blt.n	8007512 <_strtod_l+0x442>
 80074fa:	9b08      	ldr	r3, [sp, #32]
 80074fc:	4640      	mov	r0, r8
 80074fe:	1bdf      	subs	r7, r3, r7
 8007500:	4b54      	ldr	r3, [pc, #336]	; (8007654 <_strtod_l+0x584>)
 8007502:	4649      	mov	r1, r9
 8007504:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007508:	e9d7 2300 	ldrd	r2, r3, [r7]
 800750c:	f7f9 f97a 	bl	8000804 <__aeabi_ddiv>
 8007510:	e79d      	b.n	800744e <_strtod_l+0x37e>
 8007512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007514:	1b75      	subs	r5, r6, r5
 8007516:	441d      	add	r5, r3
 8007518:	2d00      	cmp	r5, #0
 800751a:	dd70      	ble.n	80075fe <_strtod_l+0x52e>
 800751c:	f015 030f 	ands.w	r3, r5, #15
 8007520:	d00a      	beq.n	8007538 <_strtod_l+0x468>
 8007522:	494c      	ldr	r1, [pc, #304]	; (8007654 <_strtod_l+0x584>)
 8007524:	4642      	mov	r2, r8
 8007526:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800752a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800752e:	464b      	mov	r3, r9
 8007530:	f7f9 f83e 	bl	80005b0 <__aeabi_dmul>
 8007534:	4680      	mov	r8, r0
 8007536:	4689      	mov	r9, r1
 8007538:	f035 050f 	bics.w	r5, r5, #15
 800753c:	d04d      	beq.n	80075da <_strtod_l+0x50a>
 800753e:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007542:	dd22      	ble.n	800758a <_strtod_l+0x4ba>
 8007544:	2600      	movs	r6, #0
 8007546:	46b3      	mov	fp, r6
 8007548:	960b      	str	r6, [sp, #44]	; 0x2c
 800754a:	9608      	str	r6, [sp, #32]
 800754c:	2322      	movs	r3, #34	; 0x22
 800754e:	f04f 0800 	mov.w	r8, #0
 8007552:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800764c <_strtod_l+0x57c>
 8007556:	6023      	str	r3, [r4, #0]
 8007558:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800755a:	2b00      	cmp	r3, #0
 800755c:	f43f adf1 	beq.w	8007142 <_strtod_l+0x72>
 8007560:	4620      	mov	r0, r4
 8007562:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007564:	f7ff f934 	bl	80067d0 <_Bfree>
 8007568:	4620      	mov	r0, r4
 800756a:	9908      	ldr	r1, [sp, #32]
 800756c:	f7ff f930 	bl	80067d0 <_Bfree>
 8007570:	4659      	mov	r1, fp
 8007572:	4620      	mov	r0, r4
 8007574:	f7ff f92c 	bl	80067d0 <_Bfree>
 8007578:	4620      	mov	r0, r4
 800757a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800757c:	f7ff f928 	bl	80067d0 <_Bfree>
 8007580:	4631      	mov	r1, r6
 8007582:	4620      	mov	r0, r4
 8007584:	f7ff f924 	bl	80067d0 <_Bfree>
 8007588:	e5db      	b.n	8007142 <_strtod_l+0x72>
 800758a:	4b33      	ldr	r3, [pc, #204]	; (8007658 <_strtod_l+0x588>)
 800758c:	4640      	mov	r0, r8
 800758e:	9305      	str	r3, [sp, #20]
 8007590:	2300      	movs	r3, #0
 8007592:	4649      	mov	r1, r9
 8007594:	469a      	mov	sl, r3
 8007596:	112d      	asrs	r5, r5, #4
 8007598:	2d01      	cmp	r5, #1
 800759a:	dc21      	bgt.n	80075e0 <_strtod_l+0x510>
 800759c:	b10b      	cbz	r3, 80075a2 <_strtod_l+0x4d2>
 800759e:	4680      	mov	r8, r0
 80075a0:	4689      	mov	r9, r1
 80075a2:	492d      	ldr	r1, [pc, #180]	; (8007658 <_strtod_l+0x588>)
 80075a4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80075a8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80075ac:	4642      	mov	r2, r8
 80075ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075b2:	464b      	mov	r3, r9
 80075b4:	f7f8 fffc 	bl	80005b0 <__aeabi_dmul>
 80075b8:	4b24      	ldr	r3, [pc, #144]	; (800764c <_strtod_l+0x57c>)
 80075ba:	460a      	mov	r2, r1
 80075bc:	400b      	ands	r3, r1
 80075be:	4927      	ldr	r1, [pc, #156]	; (800765c <_strtod_l+0x58c>)
 80075c0:	4680      	mov	r8, r0
 80075c2:	428b      	cmp	r3, r1
 80075c4:	d8be      	bhi.n	8007544 <_strtod_l+0x474>
 80075c6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80075ca:	428b      	cmp	r3, r1
 80075cc:	bf86      	itte	hi
 80075ce:	f04f 38ff 	movhi.w	r8, #4294967295
 80075d2:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8007660 <_strtod_l+0x590>
 80075d6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80075da:	2300      	movs	r3, #0
 80075dc:	9305      	str	r3, [sp, #20]
 80075de:	e07b      	b.n	80076d8 <_strtod_l+0x608>
 80075e0:	07ea      	lsls	r2, r5, #31
 80075e2:	d505      	bpl.n	80075f0 <_strtod_l+0x520>
 80075e4:	9b05      	ldr	r3, [sp, #20]
 80075e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ea:	f7f8 ffe1 	bl	80005b0 <__aeabi_dmul>
 80075ee:	2301      	movs	r3, #1
 80075f0:	9a05      	ldr	r2, [sp, #20]
 80075f2:	f10a 0a01 	add.w	sl, sl, #1
 80075f6:	3208      	adds	r2, #8
 80075f8:	106d      	asrs	r5, r5, #1
 80075fa:	9205      	str	r2, [sp, #20]
 80075fc:	e7cc      	b.n	8007598 <_strtod_l+0x4c8>
 80075fe:	d0ec      	beq.n	80075da <_strtod_l+0x50a>
 8007600:	426d      	negs	r5, r5
 8007602:	f015 020f 	ands.w	r2, r5, #15
 8007606:	d00a      	beq.n	800761e <_strtod_l+0x54e>
 8007608:	4b12      	ldr	r3, [pc, #72]	; (8007654 <_strtod_l+0x584>)
 800760a:	4640      	mov	r0, r8
 800760c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007610:	4649      	mov	r1, r9
 8007612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007616:	f7f9 f8f5 	bl	8000804 <__aeabi_ddiv>
 800761a:	4680      	mov	r8, r0
 800761c:	4689      	mov	r9, r1
 800761e:	112d      	asrs	r5, r5, #4
 8007620:	d0db      	beq.n	80075da <_strtod_l+0x50a>
 8007622:	2d1f      	cmp	r5, #31
 8007624:	dd1e      	ble.n	8007664 <_strtod_l+0x594>
 8007626:	2600      	movs	r6, #0
 8007628:	46b3      	mov	fp, r6
 800762a:	960b      	str	r6, [sp, #44]	; 0x2c
 800762c:	9608      	str	r6, [sp, #32]
 800762e:	2322      	movs	r3, #34	; 0x22
 8007630:	f04f 0800 	mov.w	r8, #0
 8007634:	f04f 0900 	mov.w	r9, #0
 8007638:	6023      	str	r3, [r4, #0]
 800763a:	e78d      	b.n	8007558 <_strtod_l+0x488>
 800763c:	0800978f 	.word	0x0800978f
 8007640:	080099bc 	.word	0x080099bc
 8007644:	08009787 	.word	0x08009787
 8007648:	080097be 	.word	0x080097be
 800764c:	7ff00000 	.word	0x7ff00000
 8007650:	08009b4d 	.word	0x08009b4d
 8007654:	080098d0 	.word	0x080098d0
 8007658:	080098a8 	.word	0x080098a8
 800765c:	7ca00000 	.word	0x7ca00000
 8007660:	7fefffff 	.word	0x7fefffff
 8007664:	f015 0310 	ands.w	r3, r5, #16
 8007668:	bf18      	it	ne
 800766a:	236a      	movne	r3, #106	; 0x6a
 800766c:	4640      	mov	r0, r8
 800766e:	9305      	str	r3, [sp, #20]
 8007670:	4649      	mov	r1, r9
 8007672:	2300      	movs	r3, #0
 8007674:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8007940 <_strtod_l+0x870>
 8007678:	07ea      	lsls	r2, r5, #31
 800767a:	d504      	bpl.n	8007686 <_strtod_l+0x5b6>
 800767c:	e9da 2300 	ldrd	r2, r3, [sl]
 8007680:	f7f8 ff96 	bl	80005b0 <__aeabi_dmul>
 8007684:	2301      	movs	r3, #1
 8007686:	106d      	asrs	r5, r5, #1
 8007688:	f10a 0a08 	add.w	sl, sl, #8
 800768c:	d1f4      	bne.n	8007678 <_strtod_l+0x5a8>
 800768e:	b10b      	cbz	r3, 8007694 <_strtod_l+0x5c4>
 8007690:	4680      	mov	r8, r0
 8007692:	4689      	mov	r9, r1
 8007694:	9b05      	ldr	r3, [sp, #20]
 8007696:	b1bb      	cbz	r3, 80076c8 <_strtod_l+0x5f8>
 8007698:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800769c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	4649      	mov	r1, r9
 80076a4:	dd10      	ble.n	80076c8 <_strtod_l+0x5f8>
 80076a6:	2b1f      	cmp	r3, #31
 80076a8:	f340 8128 	ble.w	80078fc <_strtod_l+0x82c>
 80076ac:	2b34      	cmp	r3, #52	; 0x34
 80076ae:	bfd8      	it	le
 80076b0:	f04f 33ff 	movle.w	r3, #4294967295
 80076b4:	f04f 0800 	mov.w	r8, #0
 80076b8:	bfcf      	iteee	gt
 80076ba:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80076be:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80076c2:	4093      	lslle	r3, r2
 80076c4:	ea03 0901 	andle.w	r9, r3, r1
 80076c8:	2200      	movs	r2, #0
 80076ca:	2300      	movs	r3, #0
 80076cc:	4640      	mov	r0, r8
 80076ce:	4649      	mov	r1, r9
 80076d0:	f7f9 f9d6 	bl	8000a80 <__aeabi_dcmpeq>
 80076d4:	2800      	cmp	r0, #0
 80076d6:	d1a6      	bne.n	8007626 <_strtod_l+0x556>
 80076d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076da:	465a      	mov	r2, fp
 80076dc:	9300      	str	r3, [sp, #0]
 80076de:	4620      	mov	r0, r4
 80076e0:	4633      	mov	r3, r6
 80076e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80076e4:	f7ff f8dc 	bl	80068a0 <__s2b>
 80076e8:	900b      	str	r0, [sp, #44]	; 0x2c
 80076ea:	2800      	cmp	r0, #0
 80076ec:	f43f af2a 	beq.w	8007544 <_strtod_l+0x474>
 80076f0:	2600      	movs	r6, #0
 80076f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076f4:	9b08      	ldr	r3, [sp, #32]
 80076f6:	2a00      	cmp	r2, #0
 80076f8:	eba3 0307 	sub.w	r3, r3, r7
 80076fc:	bfa8      	it	ge
 80076fe:	2300      	movge	r3, #0
 8007700:	46b3      	mov	fp, r6
 8007702:	9312      	str	r3, [sp, #72]	; 0x48
 8007704:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007708:	9316      	str	r3, [sp, #88]	; 0x58
 800770a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800770c:	4620      	mov	r0, r4
 800770e:	6859      	ldr	r1, [r3, #4]
 8007710:	f7ff f81e 	bl	8006750 <_Balloc>
 8007714:	9008      	str	r0, [sp, #32]
 8007716:	2800      	cmp	r0, #0
 8007718:	f43f af18 	beq.w	800754c <_strtod_l+0x47c>
 800771c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800771e:	300c      	adds	r0, #12
 8007720:	691a      	ldr	r2, [r3, #16]
 8007722:	f103 010c 	add.w	r1, r3, #12
 8007726:	3202      	adds	r2, #2
 8007728:	0092      	lsls	r2, r2, #2
 800772a:	f000 fd89 	bl	8008240 <memcpy>
 800772e:	ab1c      	add	r3, sp, #112	; 0x70
 8007730:	9301      	str	r3, [sp, #4]
 8007732:	ab1b      	add	r3, sp, #108	; 0x6c
 8007734:	9300      	str	r3, [sp, #0]
 8007736:	4642      	mov	r2, r8
 8007738:	464b      	mov	r3, r9
 800773a:	4620      	mov	r0, r4
 800773c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8007740:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8007744:	f7ff fbd8 	bl	8006ef8 <__d2b>
 8007748:	901a      	str	r0, [sp, #104]	; 0x68
 800774a:	2800      	cmp	r0, #0
 800774c:	f43f aefe 	beq.w	800754c <_strtod_l+0x47c>
 8007750:	2101      	movs	r1, #1
 8007752:	4620      	mov	r0, r4
 8007754:	f7ff f93c 	bl	80069d0 <__i2b>
 8007758:	4683      	mov	fp, r0
 800775a:	2800      	cmp	r0, #0
 800775c:	f43f aef6 	beq.w	800754c <_strtod_l+0x47c>
 8007760:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8007762:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007764:	2f00      	cmp	r7, #0
 8007766:	bfab      	itete	ge
 8007768:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 800776a:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800776c:	eb07 0a03 	addge.w	sl, r7, r3
 8007770:	1bdd      	sublt	r5, r3, r7
 8007772:	9b05      	ldr	r3, [sp, #20]
 8007774:	bfa8      	it	ge
 8007776:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007778:	eba7 0703 	sub.w	r7, r7, r3
 800777c:	4417      	add	r7, r2
 800777e:	4b71      	ldr	r3, [pc, #452]	; (8007944 <_strtod_l+0x874>)
 8007780:	f107 37ff 	add.w	r7, r7, #4294967295
 8007784:	bfb8      	it	lt
 8007786:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800778a:	429f      	cmp	r7, r3
 800778c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007790:	f280 80c7 	bge.w	8007922 <_strtod_l+0x852>
 8007794:	1bdb      	subs	r3, r3, r7
 8007796:	2b1f      	cmp	r3, #31
 8007798:	f04f 0101 	mov.w	r1, #1
 800779c:	eba2 0203 	sub.w	r2, r2, r3
 80077a0:	f300 80b3 	bgt.w	800790a <_strtod_l+0x83a>
 80077a4:	fa01 f303 	lsl.w	r3, r1, r3
 80077a8:	9313      	str	r3, [sp, #76]	; 0x4c
 80077aa:	2300      	movs	r3, #0
 80077ac:	9310      	str	r3, [sp, #64]	; 0x40
 80077ae:	eb0a 0702 	add.w	r7, sl, r2
 80077b2:	9b05      	ldr	r3, [sp, #20]
 80077b4:	45ba      	cmp	sl, r7
 80077b6:	4415      	add	r5, r2
 80077b8:	441d      	add	r5, r3
 80077ba:	4653      	mov	r3, sl
 80077bc:	bfa8      	it	ge
 80077be:	463b      	movge	r3, r7
 80077c0:	42ab      	cmp	r3, r5
 80077c2:	bfa8      	it	ge
 80077c4:	462b      	movge	r3, r5
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	bfc2      	ittt	gt
 80077ca:	1aff      	subgt	r7, r7, r3
 80077cc:	1aed      	subgt	r5, r5, r3
 80077ce:	ebaa 0a03 	subgt.w	sl, sl, r3
 80077d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	dd17      	ble.n	8007808 <_strtod_l+0x738>
 80077d8:	4659      	mov	r1, fp
 80077da:	461a      	mov	r2, r3
 80077dc:	4620      	mov	r0, r4
 80077de:	f7ff f9b5 	bl	8006b4c <__pow5mult>
 80077e2:	4683      	mov	fp, r0
 80077e4:	2800      	cmp	r0, #0
 80077e6:	f43f aeb1 	beq.w	800754c <_strtod_l+0x47c>
 80077ea:	4601      	mov	r1, r0
 80077ec:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80077ee:	4620      	mov	r0, r4
 80077f0:	f7ff f904 	bl	80069fc <__multiply>
 80077f4:	900a      	str	r0, [sp, #40]	; 0x28
 80077f6:	2800      	cmp	r0, #0
 80077f8:	f43f aea8 	beq.w	800754c <_strtod_l+0x47c>
 80077fc:	4620      	mov	r0, r4
 80077fe:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007800:	f7fe ffe6 	bl	80067d0 <_Bfree>
 8007804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007806:	931a      	str	r3, [sp, #104]	; 0x68
 8007808:	2f00      	cmp	r7, #0
 800780a:	f300 808f 	bgt.w	800792c <_strtod_l+0x85c>
 800780e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007810:	2b00      	cmp	r3, #0
 8007812:	dd08      	ble.n	8007826 <_strtod_l+0x756>
 8007814:	4620      	mov	r0, r4
 8007816:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007818:	9908      	ldr	r1, [sp, #32]
 800781a:	f7ff f997 	bl	8006b4c <__pow5mult>
 800781e:	9008      	str	r0, [sp, #32]
 8007820:	2800      	cmp	r0, #0
 8007822:	f43f ae93 	beq.w	800754c <_strtod_l+0x47c>
 8007826:	2d00      	cmp	r5, #0
 8007828:	dd08      	ble.n	800783c <_strtod_l+0x76c>
 800782a:	462a      	mov	r2, r5
 800782c:	4620      	mov	r0, r4
 800782e:	9908      	ldr	r1, [sp, #32]
 8007830:	f7ff f9e6 	bl	8006c00 <__lshift>
 8007834:	9008      	str	r0, [sp, #32]
 8007836:	2800      	cmp	r0, #0
 8007838:	f43f ae88 	beq.w	800754c <_strtod_l+0x47c>
 800783c:	f1ba 0f00 	cmp.w	sl, #0
 8007840:	dd08      	ble.n	8007854 <_strtod_l+0x784>
 8007842:	4659      	mov	r1, fp
 8007844:	4652      	mov	r2, sl
 8007846:	4620      	mov	r0, r4
 8007848:	f7ff f9da 	bl	8006c00 <__lshift>
 800784c:	4683      	mov	fp, r0
 800784e:	2800      	cmp	r0, #0
 8007850:	f43f ae7c 	beq.w	800754c <_strtod_l+0x47c>
 8007854:	4620      	mov	r0, r4
 8007856:	9a08      	ldr	r2, [sp, #32]
 8007858:	991a      	ldr	r1, [sp, #104]	; 0x68
 800785a:	f7ff fa59 	bl	8006d10 <__mdiff>
 800785e:	4606      	mov	r6, r0
 8007860:	2800      	cmp	r0, #0
 8007862:	f43f ae73 	beq.w	800754c <_strtod_l+0x47c>
 8007866:	2500      	movs	r5, #0
 8007868:	68c3      	ldr	r3, [r0, #12]
 800786a:	4659      	mov	r1, fp
 800786c:	60c5      	str	r5, [r0, #12]
 800786e:	930a      	str	r3, [sp, #40]	; 0x28
 8007870:	f7ff fa32 	bl	8006cd8 <__mcmp>
 8007874:	42a8      	cmp	r0, r5
 8007876:	da6b      	bge.n	8007950 <_strtod_l+0x880>
 8007878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800787a:	ea53 0308 	orrs.w	r3, r3, r8
 800787e:	f040 808f 	bne.w	80079a0 <_strtod_l+0x8d0>
 8007882:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007886:	2b00      	cmp	r3, #0
 8007888:	f040 808a 	bne.w	80079a0 <_strtod_l+0x8d0>
 800788c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007890:	0d1b      	lsrs	r3, r3, #20
 8007892:	051b      	lsls	r3, r3, #20
 8007894:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007898:	f240 8082 	bls.w	80079a0 <_strtod_l+0x8d0>
 800789c:	6973      	ldr	r3, [r6, #20]
 800789e:	b913      	cbnz	r3, 80078a6 <_strtod_l+0x7d6>
 80078a0:	6933      	ldr	r3, [r6, #16]
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	dd7c      	ble.n	80079a0 <_strtod_l+0x8d0>
 80078a6:	4631      	mov	r1, r6
 80078a8:	2201      	movs	r2, #1
 80078aa:	4620      	mov	r0, r4
 80078ac:	f7ff f9a8 	bl	8006c00 <__lshift>
 80078b0:	4659      	mov	r1, fp
 80078b2:	4606      	mov	r6, r0
 80078b4:	f7ff fa10 	bl	8006cd8 <__mcmp>
 80078b8:	2800      	cmp	r0, #0
 80078ba:	dd71      	ble.n	80079a0 <_strtod_l+0x8d0>
 80078bc:	9905      	ldr	r1, [sp, #20]
 80078be:	464b      	mov	r3, r9
 80078c0:	4a21      	ldr	r2, [pc, #132]	; (8007948 <_strtod_l+0x878>)
 80078c2:	2900      	cmp	r1, #0
 80078c4:	f000 808d 	beq.w	80079e2 <_strtod_l+0x912>
 80078c8:	ea02 0109 	and.w	r1, r2, r9
 80078cc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80078d0:	f300 8087 	bgt.w	80079e2 <_strtod_l+0x912>
 80078d4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80078d8:	f77f aea9 	ble.w	800762e <_strtod_l+0x55e>
 80078dc:	4640      	mov	r0, r8
 80078de:	4649      	mov	r1, r9
 80078e0:	4b1a      	ldr	r3, [pc, #104]	; (800794c <_strtod_l+0x87c>)
 80078e2:	2200      	movs	r2, #0
 80078e4:	f7f8 fe64 	bl	80005b0 <__aeabi_dmul>
 80078e8:	4b17      	ldr	r3, [pc, #92]	; (8007948 <_strtod_l+0x878>)
 80078ea:	4680      	mov	r8, r0
 80078ec:	400b      	ands	r3, r1
 80078ee:	4689      	mov	r9, r1
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	f47f ae35 	bne.w	8007560 <_strtod_l+0x490>
 80078f6:	2322      	movs	r3, #34	; 0x22
 80078f8:	6023      	str	r3, [r4, #0]
 80078fa:	e631      	b.n	8007560 <_strtod_l+0x490>
 80078fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007900:	fa02 f303 	lsl.w	r3, r2, r3
 8007904:	ea03 0808 	and.w	r8, r3, r8
 8007908:	e6de      	b.n	80076c8 <_strtod_l+0x5f8>
 800790a:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800790e:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8007912:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8007916:	37e2      	adds	r7, #226	; 0xe2
 8007918:	fa01 f307 	lsl.w	r3, r1, r7
 800791c:	9310      	str	r3, [sp, #64]	; 0x40
 800791e:	9113      	str	r1, [sp, #76]	; 0x4c
 8007920:	e745      	b.n	80077ae <_strtod_l+0x6de>
 8007922:	2300      	movs	r3, #0
 8007924:	9310      	str	r3, [sp, #64]	; 0x40
 8007926:	2301      	movs	r3, #1
 8007928:	9313      	str	r3, [sp, #76]	; 0x4c
 800792a:	e740      	b.n	80077ae <_strtod_l+0x6de>
 800792c:	463a      	mov	r2, r7
 800792e:	4620      	mov	r0, r4
 8007930:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007932:	f7ff f965 	bl	8006c00 <__lshift>
 8007936:	901a      	str	r0, [sp, #104]	; 0x68
 8007938:	2800      	cmp	r0, #0
 800793a:	f47f af68 	bne.w	800780e <_strtod_l+0x73e>
 800793e:	e605      	b.n	800754c <_strtod_l+0x47c>
 8007940:	080099d0 	.word	0x080099d0
 8007944:	fffffc02 	.word	0xfffffc02
 8007948:	7ff00000 	.word	0x7ff00000
 800794c:	39500000 	.word	0x39500000
 8007950:	46ca      	mov	sl, r9
 8007952:	d165      	bne.n	8007a20 <_strtod_l+0x950>
 8007954:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007956:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800795a:	b352      	cbz	r2, 80079b2 <_strtod_l+0x8e2>
 800795c:	4a9e      	ldr	r2, [pc, #632]	; (8007bd8 <_strtod_l+0xb08>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d12a      	bne.n	80079b8 <_strtod_l+0x8e8>
 8007962:	9b05      	ldr	r3, [sp, #20]
 8007964:	4641      	mov	r1, r8
 8007966:	b1fb      	cbz	r3, 80079a8 <_strtod_l+0x8d8>
 8007968:	4b9c      	ldr	r3, [pc, #624]	; (8007bdc <_strtod_l+0xb0c>)
 800796a:	f04f 32ff 	mov.w	r2, #4294967295
 800796e:	ea09 0303 	and.w	r3, r9, r3
 8007972:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007976:	d81a      	bhi.n	80079ae <_strtod_l+0x8de>
 8007978:	0d1b      	lsrs	r3, r3, #20
 800797a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800797e:	fa02 f303 	lsl.w	r3, r2, r3
 8007982:	4299      	cmp	r1, r3
 8007984:	d118      	bne.n	80079b8 <_strtod_l+0x8e8>
 8007986:	4b96      	ldr	r3, [pc, #600]	; (8007be0 <_strtod_l+0xb10>)
 8007988:	459a      	cmp	sl, r3
 800798a:	d102      	bne.n	8007992 <_strtod_l+0x8c2>
 800798c:	3101      	adds	r1, #1
 800798e:	f43f addd 	beq.w	800754c <_strtod_l+0x47c>
 8007992:	f04f 0800 	mov.w	r8, #0
 8007996:	4b91      	ldr	r3, [pc, #580]	; (8007bdc <_strtod_l+0xb0c>)
 8007998:	ea0a 0303 	and.w	r3, sl, r3
 800799c:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80079a0:	9b05      	ldr	r3, [sp, #20]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d19a      	bne.n	80078dc <_strtod_l+0x80c>
 80079a6:	e5db      	b.n	8007560 <_strtod_l+0x490>
 80079a8:	f04f 33ff 	mov.w	r3, #4294967295
 80079ac:	e7e9      	b.n	8007982 <_strtod_l+0x8b2>
 80079ae:	4613      	mov	r3, r2
 80079b0:	e7e7      	b.n	8007982 <_strtod_l+0x8b2>
 80079b2:	ea53 0308 	orrs.w	r3, r3, r8
 80079b6:	d081      	beq.n	80078bc <_strtod_l+0x7ec>
 80079b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80079ba:	b1e3      	cbz	r3, 80079f6 <_strtod_l+0x926>
 80079bc:	ea13 0f0a 	tst.w	r3, sl
 80079c0:	d0ee      	beq.n	80079a0 <_strtod_l+0x8d0>
 80079c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079c4:	4640      	mov	r0, r8
 80079c6:	4649      	mov	r1, r9
 80079c8:	9a05      	ldr	r2, [sp, #20]
 80079ca:	b1c3      	cbz	r3, 80079fe <_strtod_l+0x92e>
 80079cc:	f7ff fb5c 	bl	8007088 <sulp>
 80079d0:	4602      	mov	r2, r0
 80079d2:	460b      	mov	r3, r1
 80079d4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80079d6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80079d8:	f7f8 fc34 	bl	8000244 <__adddf3>
 80079dc:	4680      	mov	r8, r0
 80079de:	4689      	mov	r9, r1
 80079e0:	e7de      	b.n	80079a0 <_strtod_l+0x8d0>
 80079e2:	4013      	ands	r3, r2
 80079e4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80079e8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80079ec:	f04f 38ff 	mov.w	r8, #4294967295
 80079f0:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80079f4:	e7d4      	b.n	80079a0 <_strtod_l+0x8d0>
 80079f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80079f8:	ea13 0f08 	tst.w	r3, r8
 80079fc:	e7e0      	b.n	80079c0 <_strtod_l+0x8f0>
 80079fe:	f7ff fb43 	bl	8007088 <sulp>
 8007a02:	4602      	mov	r2, r0
 8007a04:	460b      	mov	r3, r1
 8007a06:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007a08:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007a0a:	f7f8 fc19 	bl	8000240 <__aeabi_dsub>
 8007a0e:	2200      	movs	r2, #0
 8007a10:	2300      	movs	r3, #0
 8007a12:	4680      	mov	r8, r0
 8007a14:	4689      	mov	r9, r1
 8007a16:	f7f9 f833 	bl	8000a80 <__aeabi_dcmpeq>
 8007a1a:	2800      	cmp	r0, #0
 8007a1c:	d0c0      	beq.n	80079a0 <_strtod_l+0x8d0>
 8007a1e:	e606      	b.n	800762e <_strtod_l+0x55e>
 8007a20:	4659      	mov	r1, fp
 8007a22:	4630      	mov	r0, r6
 8007a24:	f7ff fabe 	bl	8006fa4 <__ratio>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007a30:	2200      	movs	r2, #0
 8007a32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a36:	f7f9 f837 	bl	8000aa8 <__aeabi_dcmple>
 8007a3a:	2800      	cmp	r0, #0
 8007a3c:	d06f      	beq.n	8007b1e <_strtod_l+0xa4e>
 8007a3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d17c      	bne.n	8007b3e <_strtod_l+0xa6e>
 8007a44:	f1b8 0f00 	cmp.w	r8, #0
 8007a48:	d159      	bne.n	8007afe <_strtod_l+0xa2e>
 8007a4a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d17b      	bne.n	8007b4a <_strtod_l+0xa7a>
 8007a52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a56:	2200      	movs	r2, #0
 8007a58:	4b62      	ldr	r3, [pc, #392]	; (8007be4 <_strtod_l+0xb14>)
 8007a5a:	f7f9 f81b 	bl	8000a94 <__aeabi_dcmplt>
 8007a5e:	2800      	cmp	r0, #0
 8007a60:	d15a      	bne.n	8007b18 <_strtod_l+0xa48>
 8007a62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a66:	2200      	movs	r2, #0
 8007a68:	4b5f      	ldr	r3, [pc, #380]	; (8007be8 <_strtod_l+0xb18>)
 8007a6a:	f7f8 fda1 	bl	80005b0 <__aeabi_dmul>
 8007a6e:	4605      	mov	r5, r0
 8007a70:	460f      	mov	r7, r1
 8007a72:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007a76:	9506      	str	r5, [sp, #24]
 8007a78:	9307      	str	r3, [sp, #28]
 8007a7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a7e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007a82:	4b56      	ldr	r3, [pc, #344]	; (8007bdc <_strtod_l+0xb0c>)
 8007a84:	4a55      	ldr	r2, [pc, #340]	; (8007bdc <_strtod_l+0xb0c>)
 8007a86:	ea0a 0303 	and.w	r3, sl, r3
 8007a8a:	9313      	str	r3, [sp, #76]	; 0x4c
 8007a8c:	4b57      	ldr	r3, [pc, #348]	; (8007bec <_strtod_l+0xb1c>)
 8007a8e:	ea0a 0202 	and.w	r2, sl, r2
 8007a92:	429a      	cmp	r2, r3
 8007a94:	f040 80b0 	bne.w	8007bf8 <_strtod_l+0xb28>
 8007a98:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8007a9c:	4640      	mov	r0, r8
 8007a9e:	4649      	mov	r1, r9
 8007aa0:	f7ff f9c2 	bl	8006e28 <__ulp>
 8007aa4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007aa8:	f7f8 fd82 	bl	80005b0 <__aeabi_dmul>
 8007aac:	4642      	mov	r2, r8
 8007aae:	464b      	mov	r3, r9
 8007ab0:	f7f8 fbc8 	bl	8000244 <__adddf3>
 8007ab4:	f8df a124 	ldr.w	sl, [pc, #292]	; 8007bdc <_strtod_l+0xb0c>
 8007ab8:	4a4d      	ldr	r2, [pc, #308]	; (8007bf0 <_strtod_l+0xb20>)
 8007aba:	ea01 0a0a 	and.w	sl, r1, sl
 8007abe:	4592      	cmp	sl, r2
 8007ac0:	4680      	mov	r8, r0
 8007ac2:	d948      	bls.n	8007b56 <_strtod_l+0xa86>
 8007ac4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007ac6:	4b46      	ldr	r3, [pc, #280]	; (8007be0 <_strtod_l+0xb10>)
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d103      	bne.n	8007ad4 <_strtod_l+0xa04>
 8007acc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ace:	3301      	adds	r3, #1
 8007ad0:	f43f ad3c 	beq.w	800754c <_strtod_l+0x47c>
 8007ad4:	f04f 38ff 	mov.w	r8, #4294967295
 8007ad8:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8007be0 <_strtod_l+0xb10>
 8007adc:	4620      	mov	r0, r4
 8007ade:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007ae0:	f7fe fe76 	bl	80067d0 <_Bfree>
 8007ae4:	4620      	mov	r0, r4
 8007ae6:	9908      	ldr	r1, [sp, #32]
 8007ae8:	f7fe fe72 	bl	80067d0 <_Bfree>
 8007aec:	4659      	mov	r1, fp
 8007aee:	4620      	mov	r0, r4
 8007af0:	f7fe fe6e 	bl	80067d0 <_Bfree>
 8007af4:	4631      	mov	r1, r6
 8007af6:	4620      	mov	r0, r4
 8007af8:	f7fe fe6a 	bl	80067d0 <_Bfree>
 8007afc:	e605      	b.n	800770a <_strtod_l+0x63a>
 8007afe:	f1b8 0f01 	cmp.w	r8, #1
 8007b02:	d103      	bne.n	8007b0c <_strtod_l+0xa3c>
 8007b04:	f1b9 0f00 	cmp.w	r9, #0
 8007b08:	f43f ad91 	beq.w	800762e <_strtod_l+0x55e>
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	4b39      	ldr	r3, [pc, #228]	; (8007bf4 <_strtod_l+0xb24>)
 8007b10:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007b12:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007b16:	e016      	b.n	8007b46 <_strtod_l+0xa76>
 8007b18:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007b1a:	4f33      	ldr	r7, [pc, #204]	; (8007be8 <_strtod_l+0xb18>)
 8007b1c:	e7a9      	b.n	8007a72 <_strtod_l+0x9a2>
 8007b1e:	4b32      	ldr	r3, [pc, #200]	; (8007be8 <_strtod_l+0xb18>)
 8007b20:	2200      	movs	r2, #0
 8007b22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007b26:	f7f8 fd43 	bl	80005b0 <__aeabi_dmul>
 8007b2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b2c:	4605      	mov	r5, r0
 8007b2e:	460f      	mov	r7, r1
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d09e      	beq.n	8007a72 <_strtod_l+0x9a2>
 8007b34:	4602      	mov	r2, r0
 8007b36:	460b      	mov	r3, r1
 8007b38:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007b3c:	e79d      	b.n	8007a7a <_strtod_l+0x9aa>
 8007b3e:	2200      	movs	r2, #0
 8007b40:	4b28      	ldr	r3, [pc, #160]	; (8007be4 <_strtod_l+0xb14>)
 8007b42:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007b46:	4f27      	ldr	r7, [pc, #156]	; (8007be4 <_strtod_l+0xb14>)
 8007b48:	e797      	b.n	8007a7a <_strtod_l+0x9aa>
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	4b29      	ldr	r3, [pc, #164]	; (8007bf4 <_strtod_l+0xb24>)
 8007b4e:	4645      	mov	r5, r8
 8007b50:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007b54:	e7f7      	b.n	8007b46 <_strtod_l+0xa76>
 8007b56:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8007b5a:	9b05      	ldr	r3, [sp, #20]
 8007b5c:	46ca      	mov	sl, r9
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d1bc      	bne.n	8007adc <_strtod_l+0xa0c>
 8007b62:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007b66:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007b68:	0d1b      	lsrs	r3, r3, #20
 8007b6a:	051b      	lsls	r3, r3, #20
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d1b5      	bne.n	8007adc <_strtod_l+0xa0c>
 8007b70:	4628      	mov	r0, r5
 8007b72:	4639      	mov	r1, r7
 8007b74:	f7f9 f864 	bl	8000c40 <__aeabi_d2lz>
 8007b78:	f7f8 fcec 	bl	8000554 <__aeabi_l2d>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	460b      	mov	r3, r1
 8007b80:	4628      	mov	r0, r5
 8007b82:	4639      	mov	r1, r7
 8007b84:	f7f8 fb5c 	bl	8000240 <__aeabi_dsub>
 8007b88:	460b      	mov	r3, r1
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8007b90:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007b94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b96:	ea4a 0a08 	orr.w	sl, sl, r8
 8007b9a:	ea5a 0a03 	orrs.w	sl, sl, r3
 8007b9e:	d06c      	beq.n	8007c7a <_strtod_l+0xbaa>
 8007ba0:	a309      	add	r3, pc, #36	; (adr r3, 8007bc8 <_strtod_l+0xaf8>)
 8007ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba6:	f7f8 ff75 	bl	8000a94 <__aeabi_dcmplt>
 8007baa:	2800      	cmp	r0, #0
 8007bac:	f47f acd8 	bne.w	8007560 <_strtod_l+0x490>
 8007bb0:	a307      	add	r3, pc, #28	; (adr r3, 8007bd0 <_strtod_l+0xb00>)
 8007bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007bba:	f7f8 ff89 	bl	8000ad0 <__aeabi_dcmpgt>
 8007bbe:	2800      	cmp	r0, #0
 8007bc0:	d08c      	beq.n	8007adc <_strtod_l+0xa0c>
 8007bc2:	e4cd      	b.n	8007560 <_strtod_l+0x490>
 8007bc4:	f3af 8000 	nop.w
 8007bc8:	94a03595 	.word	0x94a03595
 8007bcc:	3fdfffff 	.word	0x3fdfffff
 8007bd0:	35afe535 	.word	0x35afe535
 8007bd4:	3fe00000 	.word	0x3fe00000
 8007bd8:	000fffff 	.word	0x000fffff
 8007bdc:	7ff00000 	.word	0x7ff00000
 8007be0:	7fefffff 	.word	0x7fefffff
 8007be4:	3ff00000 	.word	0x3ff00000
 8007be8:	3fe00000 	.word	0x3fe00000
 8007bec:	7fe00000 	.word	0x7fe00000
 8007bf0:	7c9fffff 	.word	0x7c9fffff
 8007bf4:	bff00000 	.word	0xbff00000
 8007bf8:	9b05      	ldr	r3, [sp, #20]
 8007bfa:	b333      	cbz	r3, 8007c4a <_strtod_l+0xb7a>
 8007bfc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007bfe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007c02:	d822      	bhi.n	8007c4a <_strtod_l+0xb7a>
 8007c04:	a328      	add	r3, pc, #160	; (adr r3, 8007ca8 <_strtod_l+0xbd8>)
 8007c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0a:	4628      	mov	r0, r5
 8007c0c:	4639      	mov	r1, r7
 8007c0e:	f7f8 ff4b 	bl	8000aa8 <__aeabi_dcmple>
 8007c12:	b1a0      	cbz	r0, 8007c3e <_strtod_l+0xb6e>
 8007c14:	4639      	mov	r1, r7
 8007c16:	4628      	mov	r0, r5
 8007c18:	f7f8 ffa2 	bl	8000b60 <__aeabi_d2uiz>
 8007c1c:	2801      	cmp	r0, #1
 8007c1e:	bf38      	it	cc
 8007c20:	2001      	movcc	r0, #1
 8007c22:	f7f8 fc4b 	bl	80004bc <__aeabi_ui2d>
 8007c26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c28:	4605      	mov	r5, r0
 8007c2a:	460f      	mov	r7, r1
 8007c2c:	bb03      	cbnz	r3, 8007c70 <_strtod_l+0xba0>
 8007c2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c32:	9014      	str	r0, [sp, #80]	; 0x50
 8007c34:	9315      	str	r3, [sp, #84]	; 0x54
 8007c36:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007c3a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007c3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007c42:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007c46:	1a9b      	subs	r3, r3, r2
 8007c48:	9311      	str	r3, [sp, #68]	; 0x44
 8007c4a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007c4c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007c4e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8007c52:	f7ff f8e9 	bl	8006e28 <__ulp>
 8007c56:	4602      	mov	r2, r0
 8007c58:	460b      	mov	r3, r1
 8007c5a:	4640      	mov	r0, r8
 8007c5c:	4649      	mov	r1, r9
 8007c5e:	f7f8 fca7 	bl	80005b0 <__aeabi_dmul>
 8007c62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c66:	f7f8 faed 	bl	8000244 <__adddf3>
 8007c6a:	4680      	mov	r8, r0
 8007c6c:	4689      	mov	r9, r1
 8007c6e:	e774      	b.n	8007b5a <_strtod_l+0xa8a>
 8007c70:	4602      	mov	r2, r0
 8007c72:	460b      	mov	r3, r1
 8007c74:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007c78:	e7dd      	b.n	8007c36 <_strtod_l+0xb66>
 8007c7a:	a30d      	add	r3, pc, #52	; (adr r3, 8007cb0 <_strtod_l+0xbe0>)
 8007c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c80:	f7f8 ff08 	bl	8000a94 <__aeabi_dcmplt>
 8007c84:	e79b      	b.n	8007bbe <_strtod_l+0xaee>
 8007c86:	2300      	movs	r3, #0
 8007c88:	930e      	str	r3, [sp, #56]	; 0x38
 8007c8a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c8c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007c8e:	6013      	str	r3, [r2, #0]
 8007c90:	f7ff ba5b 	b.w	800714a <_strtod_l+0x7a>
 8007c94:	2a65      	cmp	r2, #101	; 0x65
 8007c96:	f43f ab52 	beq.w	800733e <_strtod_l+0x26e>
 8007c9a:	2a45      	cmp	r2, #69	; 0x45
 8007c9c:	f43f ab4f 	beq.w	800733e <_strtod_l+0x26e>
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	f7ff bb87 	b.w	80073b4 <_strtod_l+0x2e4>
 8007ca6:	bf00      	nop
 8007ca8:	ffc00000 	.word	0xffc00000
 8007cac:	41dfffff 	.word	0x41dfffff
 8007cb0:	94a03595 	.word	0x94a03595
 8007cb4:	3fcfffff 	.word	0x3fcfffff

08007cb8 <_strtod_r>:
 8007cb8:	4b01      	ldr	r3, [pc, #4]	; (8007cc0 <_strtod_r+0x8>)
 8007cba:	f7ff ba09 	b.w	80070d0 <_strtod_l>
 8007cbe:	bf00      	nop
 8007cc0:	20000084 	.word	0x20000084

08007cc4 <_strtol_l.constprop.0>:
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cca:	4686      	mov	lr, r0
 8007ccc:	4690      	mov	r8, r2
 8007cce:	d001      	beq.n	8007cd4 <_strtol_l.constprop.0+0x10>
 8007cd0:	2b24      	cmp	r3, #36	; 0x24
 8007cd2:	d906      	bls.n	8007ce2 <_strtol_l.constprop.0+0x1e>
 8007cd4:	f7fd fd90 	bl	80057f8 <__errno>
 8007cd8:	2316      	movs	r3, #22
 8007cda:	6003      	str	r3, [r0, #0]
 8007cdc:	2000      	movs	r0, #0
 8007cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ce2:	460d      	mov	r5, r1
 8007ce4:	4835      	ldr	r0, [pc, #212]	; (8007dbc <_strtol_l.constprop.0+0xf8>)
 8007ce6:	462a      	mov	r2, r5
 8007ce8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007cec:	5d06      	ldrb	r6, [r0, r4]
 8007cee:	f016 0608 	ands.w	r6, r6, #8
 8007cf2:	d1f8      	bne.n	8007ce6 <_strtol_l.constprop.0+0x22>
 8007cf4:	2c2d      	cmp	r4, #45	; 0x2d
 8007cf6:	d12e      	bne.n	8007d56 <_strtol_l.constprop.0+0x92>
 8007cf8:	2601      	movs	r6, #1
 8007cfa:	782c      	ldrb	r4, [r5, #0]
 8007cfc:	1c95      	adds	r5, r2, #2
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d057      	beq.n	8007db2 <_strtol_l.constprop.0+0xee>
 8007d02:	2b10      	cmp	r3, #16
 8007d04:	d109      	bne.n	8007d1a <_strtol_l.constprop.0+0x56>
 8007d06:	2c30      	cmp	r4, #48	; 0x30
 8007d08:	d107      	bne.n	8007d1a <_strtol_l.constprop.0+0x56>
 8007d0a:	782a      	ldrb	r2, [r5, #0]
 8007d0c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007d10:	2a58      	cmp	r2, #88	; 0x58
 8007d12:	d149      	bne.n	8007da8 <_strtol_l.constprop.0+0xe4>
 8007d14:	2310      	movs	r3, #16
 8007d16:	786c      	ldrb	r4, [r5, #1]
 8007d18:	3502      	adds	r5, #2
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8007d20:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007d24:	fbbc f9f3 	udiv	r9, ip, r3
 8007d28:	4610      	mov	r0, r2
 8007d2a:	fb03 ca19 	mls	sl, r3, r9, ip
 8007d2e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007d32:	2f09      	cmp	r7, #9
 8007d34:	d814      	bhi.n	8007d60 <_strtol_l.constprop.0+0x9c>
 8007d36:	463c      	mov	r4, r7
 8007d38:	42a3      	cmp	r3, r4
 8007d3a:	dd20      	ble.n	8007d7e <_strtol_l.constprop.0+0xba>
 8007d3c:	1c57      	adds	r7, r2, #1
 8007d3e:	d007      	beq.n	8007d50 <_strtol_l.constprop.0+0x8c>
 8007d40:	4581      	cmp	r9, r0
 8007d42:	d319      	bcc.n	8007d78 <_strtol_l.constprop.0+0xb4>
 8007d44:	d101      	bne.n	8007d4a <_strtol_l.constprop.0+0x86>
 8007d46:	45a2      	cmp	sl, r4
 8007d48:	db16      	blt.n	8007d78 <_strtol_l.constprop.0+0xb4>
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	fb00 4003 	mla	r0, r0, r3, r4
 8007d50:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d54:	e7eb      	b.n	8007d2e <_strtol_l.constprop.0+0x6a>
 8007d56:	2c2b      	cmp	r4, #43	; 0x2b
 8007d58:	bf04      	itt	eq
 8007d5a:	782c      	ldrbeq	r4, [r5, #0]
 8007d5c:	1c95      	addeq	r5, r2, #2
 8007d5e:	e7ce      	b.n	8007cfe <_strtol_l.constprop.0+0x3a>
 8007d60:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007d64:	2f19      	cmp	r7, #25
 8007d66:	d801      	bhi.n	8007d6c <_strtol_l.constprop.0+0xa8>
 8007d68:	3c37      	subs	r4, #55	; 0x37
 8007d6a:	e7e5      	b.n	8007d38 <_strtol_l.constprop.0+0x74>
 8007d6c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007d70:	2f19      	cmp	r7, #25
 8007d72:	d804      	bhi.n	8007d7e <_strtol_l.constprop.0+0xba>
 8007d74:	3c57      	subs	r4, #87	; 0x57
 8007d76:	e7df      	b.n	8007d38 <_strtol_l.constprop.0+0x74>
 8007d78:	f04f 32ff 	mov.w	r2, #4294967295
 8007d7c:	e7e8      	b.n	8007d50 <_strtol_l.constprop.0+0x8c>
 8007d7e:	1c53      	adds	r3, r2, #1
 8007d80:	d108      	bne.n	8007d94 <_strtol_l.constprop.0+0xd0>
 8007d82:	2322      	movs	r3, #34	; 0x22
 8007d84:	4660      	mov	r0, ip
 8007d86:	f8ce 3000 	str.w	r3, [lr]
 8007d8a:	f1b8 0f00 	cmp.w	r8, #0
 8007d8e:	d0a6      	beq.n	8007cde <_strtol_l.constprop.0+0x1a>
 8007d90:	1e69      	subs	r1, r5, #1
 8007d92:	e006      	b.n	8007da2 <_strtol_l.constprop.0+0xde>
 8007d94:	b106      	cbz	r6, 8007d98 <_strtol_l.constprop.0+0xd4>
 8007d96:	4240      	negs	r0, r0
 8007d98:	f1b8 0f00 	cmp.w	r8, #0
 8007d9c:	d09f      	beq.n	8007cde <_strtol_l.constprop.0+0x1a>
 8007d9e:	2a00      	cmp	r2, #0
 8007da0:	d1f6      	bne.n	8007d90 <_strtol_l.constprop.0+0xcc>
 8007da2:	f8c8 1000 	str.w	r1, [r8]
 8007da6:	e79a      	b.n	8007cde <_strtol_l.constprop.0+0x1a>
 8007da8:	2430      	movs	r4, #48	; 0x30
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d1b5      	bne.n	8007d1a <_strtol_l.constprop.0+0x56>
 8007dae:	2308      	movs	r3, #8
 8007db0:	e7b3      	b.n	8007d1a <_strtol_l.constprop.0+0x56>
 8007db2:	2c30      	cmp	r4, #48	; 0x30
 8007db4:	d0a9      	beq.n	8007d0a <_strtol_l.constprop.0+0x46>
 8007db6:	230a      	movs	r3, #10
 8007db8:	e7af      	b.n	8007d1a <_strtol_l.constprop.0+0x56>
 8007dba:	bf00      	nop
 8007dbc:	080099f9 	.word	0x080099f9

08007dc0 <_strtol_r>:
 8007dc0:	f7ff bf80 	b.w	8007cc4 <_strtol_l.constprop.0>

08007dc4 <__ssputs_r>:
 8007dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dc8:	461f      	mov	r7, r3
 8007dca:	688e      	ldr	r6, [r1, #8]
 8007dcc:	4682      	mov	sl, r0
 8007dce:	42be      	cmp	r6, r7
 8007dd0:	460c      	mov	r4, r1
 8007dd2:	4690      	mov	r8, r2
 8007dd4:	680b      	ldr	r3, [r1, #0]
 8007dd6:	d82c      	bhi.n	8007e32 <__ssputs_r+0x6e>
 8007dd8:	898a      	ldrh	r2, [r1, #12]
 8007dda:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007dde:	d026      	beq.n	8007e2e <__ssputs_r+0x6a>
 8007de0:	6965      	ldr	r5, [r4, #20]
 8007de2:	6909      	ldr	r1, [r1, #16]
 8007de4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007de8:	eba3 0901 	sub.w	r9, r3, r1
 8007dec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007df0:	1c7b      	adds	r3, r7, #1
 8007df2:	444b      	add	r3, r9
 8007df4:	106d      	asrs	r5, r5, #1
 8007df6:	429d      	cmp	r5, r3
 8007df8:	bf38      	it	cc
 8007dfa:	461d      	movcc	r5, r3
 8007dfc:	0553      	lsls	r3, r2, #21
 8007dfe:	d527      	bpl.n	8007e50 <__ssputs_r+0x8c>
 8007e00:	4629      	mov	r1, r5
 8007e02:	f7fe fc19 	bl	8006638 <_malloc_r>
 8007e06:	4606      	mov	r6, r0
 8007e08:	b360      	cbz	r0, 8007e64 <__ssputs_r+0xa0>
 8007e0a:	464a      	mov	r2, r9
 8007e0c:	6921      	ldr	r1, [r4, #16]
 8007e0e:	f000 fa17 	bl	8008240 <memcpy>
 8007e12:	89a3      	ldrh	r3, [r4, #12]
 8007e14:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e1c:	81a3      	strh	r3, [r4, #12]
 8007e1e:	6126      	str	r6, [r4, #16]
 8007e20:	444e      	add	r6, r9
 8007e22:	6026      	str	r6, [r4, #0]
 8007e24:	463e      	mov	r6, r7
 8007e26:	6165      	str	r5, [r4, #20]
 8007e28:	eba5 0509 	sub.w	r5, r5, r9
 8007e2c:	60a5      	str	r5, [r4, #8]
 8007e2e:	42be      	cmp	r6, r7
 8007e30:	d900      	bls.n	8007e34 <__ssputs_r+0x70>
 8007e32:	463e      	mov	r6, r7
 8007e34:	4632      	mov	r2, r6
 8007e36:	4641      	mov	r1, r8
 8007e38:	6820      	ldr	r0, [r4, #0]
 8007e3a:	f000 f9c5 	bl	80081c8 <memmove>
 8007e3e:	2000      	movs	r0, #0
 8007e40:	68a3      	ldr	r3, [r4, #8]
 8007e42:	1b9b      	subs	r3, r3, r6
 8007e44:	60a3      	str	r3, [r4, #8]
 8007e46:	6823      	ldr	r3, [r4, #0]
 8007e48:	4433      	add	r3, r6
 8007e4a:	6023      	str	r3, [r4, #0]
 8007e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e50:	462a      	mov	r2, r5
 8007e52:	f000 fda6 	bl	80089a2 <_realloc_r>
 8007e56:	4606      	mov	r6, r0
 8007e58:	2800      	cmp	r0, #0
 8007e5a:	d1e0      	bne.n	8007e1e <__ssputs_r+0x5a>
 8007e5c:	4650      	mov	r0, sl
 8007e5e:	6921      	ldr	r1, [r4, #16]
 8007e60:	f7fe fb7a 	bl	8006558 <_free_r>
 8007e64:	230c      	movs	r3, #12
 8007e66:	f8ca 3000 	str.w	r3, [sl]
 8007e6a:	89a3      	ldrh	r3, [r4, #12]
 8007e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e74:	81a3      	strh	r3, [r4, #12]
 8007e76:	e7e9      	b.n	8007e4c <__ssputs_r+0x88>

08007e78 <_svfiprintf_r>:
 8007e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e7c:	4698      	mov	r8, r3
 8007e7e:	898b      	ldrh	r3, [r1, #12]
 8007e80:	4607      	mov	r7, r0
 8007e82:	061b      	lsls	r3, r3, #24
 8007e84:	460d      	mov	r5, r1
 8007e86:	4614      	mov	r4, r2
 8007e88:	b09d      	sub	sp, #116	; 0x74
 8007e8a:	d50e      	bpl.n	8007eaa <_svfiprintf_r+0x32>
 8007e8c:	690b      	ldr	r3, [r1, #16]
 8007e8e:	b963      	cbnz	r3, 8007eaa <_svfiprintf_r+0x32>
 8007e90:	2140      	movs	r1, #64	; 0x40
 8007e92:	f7fe fbd1 	bl	8006638 <_malloc_r>
 8007e96:	6028      	str	r0, [r5, #0]
 8007e98:	6128      	str	r0, [r5, #16]
 8007e9a:	b920      	cbnz	r0, 8007ea6 <_svfiprintf_r+0x2e>
 8007e9c:	230c      	movs	r3, #12
 8007e9e:	603b      	str	r3, [r7, #0]
 8007ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea4:	e0d0      	b.n	8008048 <_svfiprintf_r+0x1d0>
 8007ea6:	2340      	movs	r3, #64	; 0x40
 8007ea8:	616b      	str	r3, [r5, #20]
 8007eaa:	2300      	movs	r3, #0
 8007eac:	9309      	str	r3, [sp, #36]	; 0x24
 8007eae:	2320      	movs	r3, #32
 8007eb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007eb4:	2330      	movs	r3, #48	; 0x30
 8007eb6:	f04f 0901 	mov.w	r9, #1
 8007eba:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ebe:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8008060 <_svfiprintf_r+0x1e8>
 8007ec2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ec6:	4623      	mov	r3, r4
 8007ec8:	469a      	mov	sl, r3
 8007eca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ece:	b10a      	cbz	r2, 8007ed4 <_svfiprintf_r+0x5c>
 8007ed0:	2a25      	cmp	r2, #37	; 0x25
 8007ed2:	d1f9      	bne.n	8007ec8 <_svfiprintf_r+0x50>
 8007ed4:	ebba 0b04 	subs.w	fp, sl, r4
 8007ed8:	d00b      	beq.n	8007ef2 <_svfiprintf_r+0x7a>
 8007eda:	465b      	mov	r3, fp
 8007edc:	4622      	mov	r2, r4
 8007ede:	4629      	mov	r1, r5
 8007ee0:	4638      	mov	r0, r7
 8007ee2:	f7ff ff6f 	bl	8007dc4 <__ssputs_r>
 8007ee6:	3001      	adds	r0, #1
 8007ee8:	f000 80a9 	beq.w	800803e <_svfiprintf_r+0x1c6>
 8007eec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007eee:	445a      	add	r2, fp
 8007ef0:	9209      	str	r2, [sp, #36]	; 0x24
 8007ef2:	f89a 3000 	ldrb.w	r3, [sl]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	f000 80a1 	beq.w	800803e <_svfiprintf_r+0x1c6>
 8007efc:	2300      	movs	r3, #0
 8007efe:	f04f 32ff 	mov.w	r2, #4294967295
 8007f02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f06:	f10a 0a01 	add.w	sl, sl, #1
 8007f0a:	9304      	str	r3, [sp, #16]
 8007f0c:	9307      	str	r3, [sp, #28]
 8007f0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f12:	931a      	str	r3, [sp, #104]	; 0x68
 8007f14:	4654      	mov	r4, sl
 8007f16:	2205      	movs	r2, #5
 8007f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f1c:	4850      	ldr	r0, [pc, #320]	; (8008060 <_svfiprintf_r+0x1e8>)
 8007f1e:	f7fd fc98 	bl	8005852 <memchr>
 8007f22:	9a04      	ldr	r2, [sp, #16]
 8007f24:	b9d8      	cbnz	r0, 8007f5e <_svfiprintf_r+0xe6>
 8007f26:	06d0      	lsls	r0, r2, #27
 8007f28:	bf44      	itt	mi
 8007f2a:	2320      	movmi	r3, #32
 8007f2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f30:	0711      	lsls	r1, r2, #28
 8007f32:	bf44      	itt	mi
 8007f34:	232b      	movmi	r3, #43	; 0x2b
 8007f36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f3a:	f89a 3000 	ldrb.w	r3, [sl]
 8007f3e:	2b2a      	cmp	r3, #42	; 0x2a
 8007f40:	d015      	beq.n	8007f6e <_svfiprintf_r+0xf6>
 8007f42:	4654      	mov	r4, sl
 8007f44:	2000      	movs	r0, #0
 8007f46:	f04f 0c0a 	mov.w	ip, #10
 8007f4a:	9a07      	ldr	r2, [sp, #28]
 8007f4c:	4621      	mov	r1, r4
 8007f4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f52:	3b30      	subs	r3, #48	; 0x30
 8007f54:	2b09      	cmp	r3, #9
 8007f56:	d94d      	bls.n	8007ff4 <_svfiprintf_r+0x17c>
 8007f58:	b1b0      	cbz	r0, 8007f88 <_svfiprintf_r+0x110>
 8007f5a:	9207      	str	r2, [sp, #28]
 8007f5c:	e014      	b.n	8007f88 <_svfiprintf_r+0x110>
 8007f5e:	eba0 0308 	sub.w	r3, r0, r8
 8007f62:	fa09 f303 	lsl.w	r3, r9, r3
 8007f66:	4313      	orrs	r3, r2
 8007f68:	46a2      	mov	sl, r4
 8007f6a:	9304      	str	r3, [sp, #16]
 8007f6c:	e7d2      	b.n	8007f14 <_svfiprintf_r+0x9c>
 8007f6e:	9b03      	ldr	r3, [sp, #12]
 8007f70:	1d19      	adds	r1, r3, #4
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	9103      	str	r1, [sp, #12]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	bfbb      	ittet	lt
 8007f7a:	425b      	neglt	r3, r3
 8007f7c:	f042 0202 	orrlt.w	r2, r2, #2
 8007f80:	9307      	strge	r3, [sp, #28]
 8007f82:	9307      	strlt	r3, [sp, #28]
 8007f84:	bfb8      	it	lt
 8007f86:	9204      	strlt	r2, [sp, #16]
 8007f88:	7823      	ldrb	r3, [r4, #0]
 8007f8a:	2b2e      	cmp	r3, #46	; 0x2e
 8007f8c:	d10c      	bne.n	8007fa8 <_svfiprintf_r+0x130>
 8007f8e:	7863      	ldrb	r3, [r4, #1]
 8007f90:	2b2a      	cmp	r3, #42	; 0x2a
 8007f92:	d134      	bne.n	8007ffe <_svfiprintf_r+0x186>
 8007f94:	9b03      	ldr	r3, [sp, #12]
 8007f96:	3402      	adds	r4, #2
 8007f98:	1d1a      	adds	r2, r3, #4
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	9203      	str	r2, [sp, #12]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	bfb8      	it	lt
 8007fa2:	f04f 33ff 	movlt.w	r3, #4294967295
 8007fa6:	9305      	str	r3, [sp, #20]
 8007fa8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8008064 <_svfiprintf_r+0x1ec>
 8007fac:	2203      	movs	r2, #3
 8007fae:	4650      	mov	r0, sl
 8007fb0:	7821      	ldrb	r1, [r4, #0]
 8007fb2:	f7fd fc4e 	bl	8005852 <memchr>
 8007fb6:	b138      	cbz	r0, 8007fc8 <_svfiprintf_r+0x150>
 8007fb8:	2240      	movs	r2, #64	; 0x40
 8007fba:	9b04      	ldr	r3, [sp, #16]
 8007fbc:	eba0 000a 	sub.w	r0, r0, sl
 8007fc0:	4082      	lsls	r2, r0
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	3401      	adds	r4, #1
 8007fc6:	9304      	str	r3, [sp, #16]
 8007fc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fcc:	2206      	movs	r2, #6
 8007fce:	4826      	ldr	r0, [pc, #152]	; (8008068 <_svfiprintf_r+0x1f0>)
 8007fd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fd4:	f7fd fc3d 	bl	8005852 <memchr>
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	d038      	beq.n	800804e <_svfiprintf_r+0x1d6>
 8007fdc:	4b23      	ldr	r3, [pc, #140]	; (800806c <_svfiprintf_r+0x1f4>)
 8007fde:	bb1b      	cbnz	r3, 8008028 <_svfiprintf_r+0x1b0>
 8007fe0:	9b03      	ldr	r3, [sp, #12]
 8007fe2:	3307      	adds	r3, #7
 8007fe4:	f023 0307 	bic.w	r3, r3, #7
 8007fe8:	3308      	adds	r3, #8
 8007fea:	9303      	str	r3, [sp, #12]
 8007fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fee:	4433      	add	r3, r6
 8007ff0:	9309      	str	r3, [sp, #36]	; 0x24
 8007ff2:	e768      	b.n	8007ec6 <_svfiprintf_r+0x4e>
 8007ff4:	460c      	mov	r4, r1
 8007ff6:	2001      	movs	r0, #1
 8007ff8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ffc:	e7a6      	b.n	8007f4c <_svfiprintf_r+0xd4>
 8007ffe:	2300      	movs	r3, #0
 8008000:	f04f 0c0a 	mov.w	ip, #10
 8008004:	4619      	mov	r1, r3
 8008006:	3401      	adds	r4, #1
 8008008:	9305      	str	r3, [sp, #20]
 800800a:	4620      	mov	r0, r4
 800800c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008010:	3a30      	subs	r2, #48	; 0x30
 8008012:	2a09      	cmp	r2, #9
 8008014:	d903      	bls.n	800801e <_svfiprintf_r+0x1a6>
 8008016:	2b00      	cmp	r3, #0
 8008018:	d0c6      	beq.n	8007fa8 <_svfiprintf_r+0x130>
 800801a:	9105      	str	r1, [sp, #20]
 800801c:	e7c4      	b.n	8007fa8 <_svfiprintf_r+0x130>
 800801e:	4604      	mov	r4, r0
 8008020:	2301      	movs	r3, #1
 8008022:	fb0c 2101 	mla	r1, ip, r1, r2
 8008026:	e7f0      	b.n	800800a <_svfiprintf_r+0x192>
 8008028:	ab03      	add	r3, sp, #12
 800802a:	9300      	str	r3, [sp, #0]
 800802c:	462a      	mov	r2, r5
 800802e:	4638      	mov	r0, r7
 8008030:	4b0f      	ldr	r3, [pc, #60]	; (8008070 <_svfiprintf_r+0x1f8>)
 8008032:	a904      	add	r1, sp, #16
 8008034:	f7fc fc98 	bl	8004968 <_printf_float>
 8008038:	1c42      	adds	r2, r0, #1
 800803a:	4606      	mov	r6, r0
 800803c:	d1d6      	bne.n	8007fec <_svfiprintf_r+0x174>
 800803e:	89ab      	ldrh	r3, [r5, #12]
 8008040:	065b      	lsls	r3, r3, #25
 8008042:	f53f af2d 	bmi.w	8007ea0 <_svfiprintf_r+0x28>
 8008046:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008048:	b01d      	add	sp, #116	; 0x74
 800804a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800804e:	ab03      	add	r3, sp, #12
 8008050:	9300      	str	r3, [sp, #0]
 8008052:	462a      	mov	r2, r5
 8008054:	4638      	mov	r0, r7
 8008056:	4b06      	ldr	r3, [pc, #24]	; (8008070 <_svfiprintf_r+0x1f8>)
 8008058:	a904      	add	r1, sp, #16
 800805a:	f7fc ff25 	bl	8004ea8 <_printf_i>
 800805e:	e7eb      	b.n	8008038 <_svfiprintf_r+0x1c0>
 8008060:	08009af9 	.word	0x08009af9
 8008064:	08009aff 	.word	0x08009aff
 8008068:	08009b03 	.word	0x08009b03
 800806c:	08004969 	.word	0x08004969
 8008070:	08007dc5 	.word	0x08007dc5

08008074 <__sflush_r>:
 8008074:	898a      	ldrh	r2, [r1, #12]
 8008076:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008078:	4605      	mov	r5, r0
 800807a:	0710      	lsls	r0, r2, #28
 800807c:	460c      	mov	r4, r1
 800807e:	d457      	bmi.n	8008130 <__sflush_r+0xbc>
 8008080:	684b      	ldr	r3, [r1, #4]
 8008082:	2b00      	cmp	r3, #0
 8008084:	dc04      	bgt.n	8008090 <__sflush_r+0x1c>
 8008086:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008088:	2b00      	cmp	r3, #0
 800808a:	dc01      	bgt.n	8008090 <__sflush_r+0x1c>
 800808c:	2000      	movs	r0, #0
 800808e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008090:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008092:	2e00      	cmp	r6, #0
 8008094:	d0fa      	beq.n	800808c <__sflush_r+0x18>
 8008096:	2300      	movs	r3, #0
 8008098:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800809c:	682f      	ldr	r7, [r5, #0]
 800809e:	6a21      	ldr	r1, [r4, #32]
 80080a0:	602b      	str	r3, [r5, #0]
 80080a2:	d032      	beq.n	800810a <__sflush_r+0x96>
 80080a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80080a6:	89a3      	ldrh	r3, [r4, #12]
 80080a8:	075a      	lsls	r2, r3, #29
 80080aa:	d505      	bpl.n	80080b8 <__sflush_r+0x44>
 80080ac:	6863      	ldr	r3, [r4, #4]
 80080ae:	1ac0      	subs	r0, r0, r3
 80080b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80080b2:	b10b      	cbz	r3, 80080b8 <__sflush_r+0x44>
 80080b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080b6:	1ac0      	subs	r0, r0, r3
 80080b8:	2300      	movs	r3, #0
 80080ba:	4602      	mov	r2, r0
 80080bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080be:	4628      	mov	r0, r5
 80080c0:	6a21      	ldr	r1, [r4, #32]
 80080c2:	47b0      	blx	r6
 80080c4:	1c43      	adds	r3, r0, #1
 80080c6:	89a3      	ldrh	r3, [r4, #12]
 80080c8:	d106      	bne.n	80080d8 <__sflush_r+0x64>
 80080ca:	6829      	ldr	r1, [r5, #0]
 80080cc:	291d      	cmp	r1, #29
 80080ce:	d82b      	bhi.n	8008128 <__sflush_r+0xb4>
 80080d0:	4a28      	ldr	r2, [pc, #160]	; (8008174 <__sflush_r+0x100>)
 80080d2:	410a      	asrs	r2, r1
 80080d4:	07d6      	lsls	r6, r2, #31
 80080d6:	d427      	bmi.n	8008128 <__sflush_r+0xb4>
 80080d8:	2200      	movs	r2, #0
 80080da:	6062      	str	r2, [r4, #4]
 80080dc:	6922      	ldr	r2, [r4, #16]
 80080de:	04d9      	lsls	r1, r3, #19
 80080e0:	6022      	str	r2, [r4, #0]
 80080e2:	d504      	bpl.n	80080ee <__sflush_r+0x7a>
 80080e4:	1c42      	adds	r2, r0, #1
 80080e6:	d101      	bne.n	80080ec <__sflush_r+0x78>
 80080e8:	682b      	ldr	r3, [r5, #0]
 80080ea:	b903      	cbnz	r3, 80080ee <__sflush_r+0x7a>
 80080ec:	6560      	str	r0, [r4, #84]	; 0x54
 80080ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080f0:	602f      	str	r7, [r5, #0]
 80080f2:	2900      	cmp	r1, #0
 80080f4:	d0ca      	beq.n	800808c <__sflush_r+0x18>
 80080f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080fa:	4299      	cmp	r1, r3
 80080fc:	d002      	beq.n	8008104 <__sflush_r+0x90>
 80080fe:	4628      	mov	r0, r5
 8008100:	f7fe fa2a 	bl	8006558 <_free_r>
 8008104:	2000      	movs	r0, #0
 8008106:	6360      	str	r0, [r4, #52]	; 0x34
 8008108:	e7c1      	b.n	800808e <__sflush_r+0x1a>
 800810a:	2301      	movs	r3, #1
 800810c:	4628      	mov	r0, r5
 800810e:	47b0      	blx	r6
 8008110:	1c41      	adds	r1, r0, #1
 8008112:	d1c8      	bne.n	80080a6 <__sflush_r+0x32>
 8008114:	682b      	ldr	r3, [r5, #0]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d0c5      	beq.n	80080a6 <__sflush_r+0x32>
 800811a:	2b1d      	cmp	r3, #29
 800811c:	d001      	beq.n	8008122 <__sflush_r+0xae>
 800811e:	2b16      	cmp	r3, #22
 8008120:	d101      	bne.n	8008126 <__sflush_r+0xb2>
 8008122:	602f      	str	r7, [r5, #0]
 8008124:	e7b2      	b.n	800808c <__sflush_r+0x18>
 8008126:	89a3      	ldrh	r3, [r4, #12]
 8008128:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800812c:	81a3      	strh	r3, [r4, #12]
 800812e:	e7ae      	b.n	800808e <__sflush_r+0x1a>
 8008130:	690f      	ldr	r7, [r1, #16]
 8008132:	2f00      	cmp	r7, #0
 8008134:	d0aa      	beq.n	800808c <__sflush_r+0x18>
 8008136:	0793      	lsls	r3, r2, #30
 8008138:	bf18      	it	ne
 800813a:	2300      	movne	r3, #0
 800813c:	680e      	ldr	r6, [r1, #0]
 800813e:	bf08      	it	eq
 8008140:	694b      	ldreq	r3, [r1, #20]
 8008142:	1bf6      	subs	r6, r6, r7
 8008144:	600f      	str	r7, [r1, #0]
 8008146:	608b      	str	r3, [r1, #8]
 8008148:	2e00      	cmp	r6, #0
 800814a:	dd9f      	ble.n	800808c <__sflush_r+0x18>
 800814c:	4633      	mov	r3, r6
 800814e:	463a      	mov	r2, r7
 8008150:	4628      	mov	r0, r5
 8008152:	6a21      	ldr	r1, [r4, #32]
 8008154:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008158:	47e0      	blx	ip
 800815a:	2800      	cmp	r0, #0
 800815c:	dc06      	bgt.n	800816c <__sflush_r+0xf8>
 800815e:	89a3      	ldrh	r3, [r4, #12]
 8008160:	f04f 30ff 	mov.w	r0, #4294967295
 8008164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008168:	81a3      	strh	r3, [r4, #12]
 800816a:	e790      	b.n	800808e <__sflush_r+0x1a>
 800816c:	4407      	add	r7, r0
 800816e:	1a36      	subs	r6, r6, r0
 8008170:	e7ea      	b.n	8008148 <__sflush_r+0xd4>
 8008172:	bf00      	nop
 8008174:	dfbffffe 	.word	0xdfbffffe

08008178 <_fflush_r>:
 8008178:	b538      	push	{r3, r4, r5, lr}
 800817a:	690b      	ldr	r3, [r1, #16]
 800817c:	4605      	mov	r5, r0
 800817e:	460c      	mov	r4, r1
 8008180:	b913      	cbnz	r3, 8008188 <_fflush_r+0x10>
 8008182:	2500      	movs	r5, #0
 8008184:	4628      	mov	r0, r5
 8008186:	bd38      	pop	{r3, r4, r5, pc}
 8008188:	b118      	cbz	r0, 8008192 <_fflush_r+0x1a>
 800818a:	6a03      	ldr	r3, [r0, #32]
 800818c:	b90b      	cbnz	r3, 8008192 <_fflush_r+0x1a>
 800818e:	f7fd fa47 	bl	8005620 <__sinit>
 8008192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d0f3      	beq.n	8008182 <_fflush_r+0xa>
 800819a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800819c:	07d0      	lsls	r0, r2, #31
 800819e:	d404      	bmi.n	80081aa <_fflush_r+0x32>
 80081a0:	0599      	lsls	r1, r3, #22
 80081a2:	d402      	bmi.n	80081aa <_fflush_r+0x32>
 80081a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081a6:	f7fd fb52 	bl	800584e <__retarget_lock_acquire_recursive>
 80081aa:	4628      	mov	r0, r5
 80081ac:	4621      	mov	r1, r4
 80081ae:	f7ff ff61 	bl	8008074 <__sflush_r>
 80081b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081b4:	4605      	mov	r5, r0
 80081b6:	07da      	lsls	r2, r3, #31
 80081b8:	d4e4      	bmi.n	8008184 <_fflush_r+0xc>
 80081ba:	89a3      	ldrh	r3, [r4, #12]
 80081bc:	059b      	lsls	r3, r3, #22
 80081be:	d4e1      	bmi.n	8008184 <_fflush_r+0xc>
 80081c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081c2:	f7fd fb45 	bl	8005850 <__retarget_lock_release_recursive>
 80081c6:	e7dd      	b.n	8008184 <_fflush_r+0xc>

080081c8 <memmove>:
 80081c8:	4288      	cmp	r0, r1
 80081ca:	b510      	push	{r4, lr}
 80081cc:	eb01 0402 	add.w	r4, r1, r2
 80081d0:	d902      	bls.n	80081d8 <memmove+0x10>
 80081d2:	4284      	cmp	r4, r0
 80081d4:	4623      	mov	r3, r4
 80081d6:	d807      	bhi.n	80081e8 <memmove+0x20>
 80081d8:	1e43      	subs	r3, r0, #1
 80081da:	42a1      	cmp	r1, r4
 80081dc:	d008      	beq.n	80081f0 <memmove+0x28>
 80081de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80081e6:	e7f8      	b.n	80081da <memmove+0x12>
 80081e8:	4601      	mov	r1, r0
 80081ea:	4402      	add	r2, r0
 80081ec:	428a      	cmp	r2, r1
 80081ee:	d100      	bne.n	80081f2 <memmove+0x2a>
 80081f0:	bd10      	pop	{r4, pc}
 80081f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80081f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80081fa:	e7f7      	b.n	80081ec <memmove+0x24>

080081fc <strncmp>:
 80081fc:	b510      	push	{r4, lr}
 80081fe:	b16a      	cbz	r2, 800821c <strncmp+0x20>
 8008200:	3901      	subs	r1, #1
 8008202:	1884      	adds	r4, r0, r2
 8008204:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008208:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800820c:	429a      	cmp	r2, r3
 800820e:	d103      	bne.n	8008218 <strncmp+0x1c>
 8008210:	42a0      	cmp	r0, r4
 8008212:	d001      	beq.n	8008218 <strncmp+0x1c>
 8008214:	2a00      	cmp	r2, #0
 8008216:	d1f5      	bne.n	8008204 <strncmp+0x8>
 8008218:	1ad0      	subs	r0, r2, r3
 800821a:	bd10      	pop	{r4, pc}
 800821c:	4610      	mov	r0, r2
 800821e:	e7fc      	b.n	800821a <strncmp+0x1e>

08008220 <_sbrk_r>:
 8008220:	b538      	push	{r3, r4, r5, lr}
 8008222:	2300      	movs	r3, #0
 8008224:	4d05      	ldr	r5, [pc, #20]	; (800823c <_sbrk_r+0x1c>)
 8008226:	4604      	mov	r4, r0
 8008228:	4608      	mov	r0, r1
 800822a:	602b      	str	r3, [r5, #0]
 800822c:	f7fa f9b0 	bl	8002590 <_sbrk>
 8008230:	1c43      	adds	r3, r0, #1
 8008232:	d102      	bne.n	800823a <_sbrk_r+0x1a>
 8008234:	682b      	ldr	r3, [r5, #0]
 8008236:	b103      	cbz	r3, 800823a <_sbrk_r+0x1a>
 8008238:	6023      	str	r3, [r4, #0]
 800823a:	bd38      	pop	{r3, r4, r5, pc}
 800823c:	20000850 	.word	0x20000850

08008240 <memcpy>:
 8008240:	440a      	add	r2, r1
 8008242:	4291      	cmp	r1, r2
 8008244:	f100 33ff 	add.w	r3, r0, #4294967295
 8008248:	d100      	bne.n	800824c <memcpy+0xc>
 800824a:	4770      	bx	lr
 800824c:	b510      	push	{r4, lr}
 800824e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008252:	4291      	cmp	r1, r2
 8008254:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008258:	d1f9      	bne.n	800824e <memcpy+0xe>
 800825a:	bd10      	pop	{r4, pc}

0800825c <nan>:
 800825c:	2000      	movs	r0, #0
 800825e:	4901      	ldr	r1, [pc, #4]	; (8008264 <nan+0x8>)
 8008260:	4770      	bx	lr
 8008262:	bf00      	nop
 8008264:	7ff80000 	.word	0x7ff80000

08008268 <__assert_func>:
 8008268:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800826a:	4614      	mov	r4, r2
 800826c:	461a      	mov	r2, r3
 800826e:	4b09      	ldr	r3, [pc, #36]	; (8008294 <__assert_func+0x2c>)
 8008270:	4605      	mov	r5, r0
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	68d8      	ldr	r0, [r3, #12]
 8008276:	b14c      	cbz	r4, 800828c <__assert_func+0x24>
 8008278:	4b07      	ldr	r3, [pc, #28]	; (8008298 <__assert_func+0x30>)
 800827a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800827e:	9100      	str	r1, [sp, #0]
 8008280:	462b      	mov	r3, r5
 8008282:	4906      	ldr	r1, [pc, #24]	; (800829c <__assert_func+0x34>)
 8008284:	f000 fbca 	bl	8008a1c <fiprintf>
 8008288:	f000 fbda 	bl	8008a40 <abort>
 800828c:	4b04      	ldr	r3, [pc, #16]	; (80082a0 <__assert_func+0x38>)
 800828e:	461c      	mov	r4, r3
 8008290:	e7f3      	b.n	800827a <__assert_func+0x12>
 8008292:	bf00      	nop
 8008294:	20000080 	.word	0x20000080
 8008298:	08009b12 	.word	0x08009b12
 800829c:	08009b1f 	.word	0x08009b1f
 80082a0:	08009b4d 	.word	0x08009b4d

080082a4 <_calloc_r>:
 80082a4:	b570      	push	{r4, r5, r6, lr}
 80082a6:	fba1 5402 	umull	r5, r4, r1, r2
 80082aa:	b934      	cbnz	r4, 80082ba <_calloc_r+0x16>
 80082ac:	4629      	mov	r1, r5
 80082ae:	f7fe f9c3 	bl	8006638 <_malloc_r>
 80082b2:	4606      	mov	r6, r0
 80082b4:	b928      	cbnz	r0, 80082c2 <_calloc_r+0x1e>
 80082b6:	4630      	mov	r0, r6
 80082b8:	bd70      	pop	{r4, r5, r6, pc}
 80082ba:	220c      	movs	r2, #12
 80082bc:	2600      	movs	r6, #0
 80082be:	6002      	str	r2, [r0, #0]
 80082c0:	e7f9      	b.n	80082b6 <_calloc_r+0x12>
 80082c2:	462a      	mov	r2, r5
 80082c4:	4621      	mov	r1, r4
 80082c6:	f7fd fa44 	bl	8005752 <memset>
 80082ca:	e7f4      	b.n	80082b6 <_calloc_r+0x12>

080082cc <rshift>:
 80082cc:	6903      	ldr	r3, [r0, #16]
 80082ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80082d2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80082d6:	f100 0414 	add.w	r4, r0, #20
 80082da:	ea4f 1261 	mov.w	r2, r1, asr #5
 80082de:	dd46      	ble.n	800836e <rshift+0xa2>
 80082e0:	f011 011f 	ands.w	r1, r1, #31
 80082e4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80082e8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80082ec:	d10c      	bne.n	8008308 <rshift+0x3c>
 80082ee:	4629      	mov	r1, r5
 80082f0:	f100 0710 	add.w	r7, r0, #16
 80082f4:	42b1      	cmp	r1, r6
 80082f6:	d335      	bcc.n	8008364 <rshift+0x98>
 80082f8:	1a9b      	subs	r3, r3, r2
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	1eea      	subs	r2, r5, #3
 80082fe:	4296      	cmp	r6, r2
 8008300:	bf38      	it	cc
 8008302:	2300      	movcc	r3, #0
 8008304:	4423      	add	r3, r4
 8008306:	e015      	b.n	8008334 <rshift+0x68>
 8008308:	46a1      	mov	r9, r4
 800830a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800830e:	f1c1 0820 	rsb	r8, r1, #32
 8008312:	40cf      	lsrs	r7, r1
 8008314:	f105 0e04 	add.w	lr, r5, #4
 8008318:	4576      	cmp	r6, lr
 800831a:	46f4      	mov	ip, lr
 800831c:	d816      	bhi.n	800834c <rshift+0x80>
 800831e:	1a9a      	subs	r2, r3, r2
 8008320:	0092      	lsls	r2, r2, #2
 8008322:	3a04      	subs	r2, #4
 8008324:	3501      	adds	r5, #1
 8008326:	42ae      	cmp	r6, r5
 8008328:	bf38      	it	cc
 800832a:	2200      	movcc	r2, #0
 800832c:	18a3      	adds	r3, r4, r2
 800832e:	50a7      	str	r7, [r4, r2]
 8008330:	b107      	cbz	r7, 8008334 <rshift+0x68>
 8008332:	3304      	adds	r3, #4
 8008334:	42a3      	cmp	r3, r4
 8008336:	eba3 0204 	sub.w	r2, r3, r4
 800833a:	bf08      	it	eq
 800833c:	2300      	moveq	r3, #0
 800833e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008342:	6102      	str	r2, [r0, #16]
 8008344:	bf08      	it	eq
 8008346:	6143      	streq	r3, [r0, #20]
 8008348:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800834c:	f8dc c000 	ldr.w	ip, [ip]
 8008350:	fa0c fc08 	lsl.w	ip, ip, r8
 8008354:	ea4c 0707 	orr.w	r7, ip, r7
 8008358:	f849 7b04 	str.w	r7, [r9], #4
 800835c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008360:	40cf      	lsrs	r7, r1
 8008362:	e7d9      	b.n	8008318 <rshift+0x4c>
 8008364:	f851 cb04 	ldr.w	ip, [r1], #4
 8008368:	f847 cf04 	str.w	ip, [r7, #4]!
 800836c:	e7c2      	b.n	80082f4 <rshift+0x28>
 800836e:	4623      	mov	r3, r4
 8008370:	e7e0      	b.n	8008334 <rshift+0x68>

08008372 <__hexdig_fun>:
 8008372:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008376:	2b09      	cmp	r3, #9
 8008378:	d802      	bhi.n	8008380 <__hexdig_fun+0xe>
 800837a:	3820      	subs	r0, #32
 800837c:	b2c0      	uxtb	r0, r0
 800837e:	4770      	bx	lr
 8008380:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008384:	2b05      	cmp	r3, #5
 8008386:	d801      	bhi.n	800838c <__hexdig_fun+0x1a>
 8008388:	3847      	subs	r0, #71	; 0x47
 800838a:	e7f7      	b.n	800837c <__hexdig_fun+0xa>
 800838c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008390:	2b05      	cmp	r3, #5
 8008392:	d801      	bhi.n	8008398 <__hexdig_fun+0x26>
 8008394:	3827      	subs	r0, #39	; 0x27
 8008396:	e7f1      	b.n	800837c <__hexdig_fun+0xa>
 8008398:	2000      	movs	r0, #0
 800839a:	4770      	bx	lr

0800839c <__gethex>:
 800839c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083a0:	4681      	mov	r9, r0
 80083a2:	468a      	mov	sl, r1
 80083a4:	4617      	mov	r7, r2
 80083a6:	680a      	ldr	r2, [r1, #0]
 80083a8:	b085      	sub	sp, #20
 80083aa:	f102 0b02 	add.w	fp, r2, #2
 80083ae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80083b2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80083b6:	9302      	str	r3, [sp, #8]
 80083b8:	32fe      	adds	r2, #254	; 0xfe
 80083ba:	eb02 030b 	add.w	r3, r2, fp
 80083be:	46d8      	mov	r8, fp
 80083c0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80083c4:	9301      	str	r3, [sp, #4]
 80083c6:	2830      	cmp	r0, #48	; 0x30
 80083c8:	d0f7      	beq.n	80083ba <__gethex+0x1e>
 80083ca:	f7ff ffd2 	bl	8008372 <__hexdig_fun>
 80083ce:	4604      	mov	r4, r0
 80083d0:	2800      	cmp	r0, #0
 80083d2:	d138      	bne.n	8008446 <__gethex+0xaa>
 80083d4:	2201      	movs	r2, #1
 80083d6:	4640      	mov	r0, r8
 80083d8:	49a7      	ldr	r1, [pc, #668]	; (8008678 <__gethex+0x2dc>)
 80083da:	f7ff ff0f 	bl	80081fc <strncmp>
 80083de:	4606      	mov	r6, r0
 80083e0:	2800      	cmp	r0, #0
 80083e2:	d169      	bne.n	80084b8 <__gethex+0x11c>
 80083e4:	f898 0001 	ldrb.w	r0, [r8, #1]
 80083e8:	465d      	mov	r5, fp
 80083ea:	f7ff ffc2 	bl	8008372 <__hexdig_fun>
 80083ee:	2800      	cmp	r0, #0
 80083f0:	d064      	beq.n	80084bc <__gethex+0x120>
 80083f2:	465a      	mov	r2, fp
 80083f4:	7810      	ldrb	r0, [r2, #0]
 80083f6:	4690      	mov	r8, r2
 80083f8:	2830      	cmp	r0, #48	; 0x30
 80083fa:	f102 0201 	add.w	r2, r2, #1
 80083fe:	d0f9      	beq.n	80083f4 <__gethex+0x58>
 8008400:	f7ff ffb7 	bl	8008372 <__hexdig_fun>
 8008404:	2301      	movs	r3, #1
 8008406:	fab0 f480 	clz	r4, r0
 800840a:	465e      	mov	r6, fp
 800840c:	0964      	lsrs	r4, r4, #5
 800840e:	9301      	str	r3, [sp, #4]
 8008410:	4642      	mov	r2, r8
 8008412:	4615      	mov	r5, r2
 8008414:	7828      	ldrb	r0, [r5, #0]
 8008416:	3201      	adds	r2, #1
 8008418:	f7ff ffab 	bl	8008372 <__hexdig_fun>
 800841c:	2800      	cmp	r0, #0
 800841e:	d1f8      	bne.n	8008412 <__gethex+0x76>
 8008420:	2201      	movs	r2, #1
 8008422:	4628      	mov	r0, r5
 8008424:	4994      	ldr	r1, [pc, #592]	; (8008678 <__gethex+0x2dc>)
 8008426:	f7ff fee9 	bl	80081fc <strncmp>
 800842a:	b978      	cbnz	r0, 800844c <__gethex+0xb0>
 800842c:	b946      	cbnz	r6, 8008440 <__gethex+0xa4>
 800842e:	1c6e      	adds	r6, r5, #1
 8008430:	4632      	mov	r2, r6
 8008432:	4615      	mov	r5, r2
 8008434:	7828      	ldrb	r0, [r5, #0]
 8008436:	3201      	adds	r2, #1
 8008438:	f7ff ff9b 	bl	8008372 <__hexdig_fun>
 800843c:	2800      	cmp	r0, #0
 800843e:	d1f8      	bne.n	8008432 <__gethex+0x96>
 8008440:	1b73      	subs	r3, r6, r5
 8008442:	009e      	lsls	r6, r3, #2
 8008444:	e004      	b.n	8008450 <__gethex+0xb4>
 8008446:	2400      	movs	r4, #0
 8008448:	4626      	mov	r6, r4
 800844a:	e7e1      	b.n	8008410 <__gethex+0x74>
 800844c:	2e00      	cmp	r6, #0
 800844e:	d1f7      	bne.n	8008440 <__gethex+0xa4>
 8008450:	782b      	ldrb	r3, [r5, #0]
 8008452:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008456:	2b50      	cmp	r3, #80	; 0x50
 8008458:	d13d      	bne.n	80084d6 <__gethex+0x13a>
 800845a:	786b      	ldrb	r3, [r5, #1]
 800845c:	2b2b      	cmp	r3, #43	; 0x2b
 800845e:	d02f      	beq.n	80084c0 <__gethex+0x124>
 8008460:	2b2d      	cmp	r3, #45	; 0x2d
 8008462:	d031      	beq.n	80084c8 <__gethex+0x12c>
 8008464:	f04f 0b00 	mov.w	fp, #0
 8008468:	1c69      	adds	r1, r5, #1
 800846a:	7808      	ldrb	r0, [r1, #0]
 800846c:	f7ff ff81 	bl	8008372 <__hexdig_fun>
 8008470:	1e42      	subs	r2, r0, #1
 8008472:	b2d2      	uxtb	r2, r2
 8008474:	2a18      	cmp	r2, #24
 8008476:	d82e      	bhi.n	80084d6 <__gethex+0x13a>
 8008478:	f1a0 0210 	sub.w	r2, r0, #16
 800847c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008480:	f7ff ff77 	bl	8008372 <__hexdig_fun>
 8008484:	f100 3cff 	add.w	ip, r0, #4294967295
 8008488:	fa5f fc8c 	uxtb.w	ip, ip
 800848c:	f1bc 0f18 	cmp.w	ip, #24
 8008490:	d91d      	bls.n	80084ce <__gethex+0x132>
 8008492:	f1bb 0f00 	cmp.w	fp, #0
 8008496:	d000      	beq.n	800849a <__gethex+0xfe>
 8008498:	4252      	negs	r2, r2
 800849a:	4416      	add	r6, r2
 800849c:	f8ca 1000 	str.w	r1, [sl]
 80084a0:	b1dc      	cbz	r4, 80084da <__gethex+0x13e>
 80084a2:	9b01      	ldr	r3, [sp, #4]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	bf14      	ite	ne
 80084a8:	f04f 0800 	movne.w	r8, #0
 80084ac:	f04f 0806 	moveq.w	r8, #6
 80084b0:	4640      	mov	r0, r8
 80084b2:	b005      	add	sp, #20
 80084b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084b8:	4645      	mov	r5, r8
 80084ba:	4626      	mov	r6, r4
 80084bc:	2401      	movs	r4, #1
 80084be:	e7c7      	b.n	8008450 <__gethex+0xb4>
 80084c0:	f04f 0b00 	mov.w	fp, #0
 80084c4:	1ca9      	adds	r1, r5, #2
 80084c6:	e7d0      	b.n	800846a <__gethex+0xce>
 80084c8:	f04f 0b01 	mov.w	fp, #1
 80084cc:	e7fa      	b.n	80084c4 <__gethex+0x128>
 80084ce:	230a      	movs	r3, #10
 80084d0:	fb03 0002 	mla	r0, r3, r2, r0
 80084d4:	e7d0      	b.n	8008478 <__gethex+0xdc>
 80084d6:	4629      	mov	r1, r5
 80084d8:	e7e0      	b.n	800849c <__gethex+0x100>
 80084da:	4621      	mov	r1, r4
 80084dc:	eba5 0308 	sub.w	r3, r5, r8
 80084e0:	3b01      	subs	r3, #1
 80084e2:	2b07      	cmp	r3, #7
 80084e4:	dc0a      	bgt.n	80084fc <__gethex+0x160>
 80084e6:	4648      	mov	r0, r9
 80084e8:	f7fe f932 	bl	8006750 <_Balloc>
 80084ec:	4604      	mov	r4, r0
 80084ee:	b940      	cbnz	r0, 8008502 <__gethex+0x166>
 80084f0:	4602      	mov	r2, r0
 80084f2:	21e4      	movs	r1, #228	; 0xe4
 80084f4:	4b61      	ldr	r3, [pc, #388]	; (800867c <__gethex+0x2e0>)
 80084f6:	4862      	ldr	r0, [pc, #392]	; (8008680 <__gethex+0x2e4>)
 80084f8:	f7ff feb6 	bl	8008268 <__assert_func>
 80084fc:	3101      	adds	r1, #1
 80084fe:	105b      	asrs	r3, r3, #1
 8008500:	e7ef      	b.n	80084e2 <__gethex+0x146>
 8008502:	2300      	movs	r3, #0
 8008504:	469b      	mov	fp, r3
 8008506:	f100 0a14 	add.w	sl, r0, #20
 800850a:	f8cd a004 	str.w	sl, [sp, #4]
 800850e:	45a8      	cmp	r8, r5
 8008510:	d344      	bcc.n	800859c <__gethex+0x200>
 8008512:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008516:	4658      	mov	r0, fp
 8008518:	f848 bb04 	str.w	fp, [r8], #4
 800851c:	eba8 080a 	sub.w	r8, r8, sl
 8008520:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8008524:	6122      	str	r2, [r4, #16]
 8008526:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800852a:	f7fe fa03 	bl	8006934 <__hi0bits>
 800852e:	683d      	ldr	r5, [r7, #0]
 8008530:	eba8 0800 	sub.w	r8, r8, r0
 8008534:	45a8      	cmp	r8, r5
 8008536:	dd59      	ble.n	80085ec <__gethex+0x250>
 8008538:	eba8 0805 	sub.w	r8, r8, r5
 800853c:	4641      	mov	r1, r8
 800853e:	4620      	mov	r0, r4
 8008540:	f7fe fd81 	bl	8007046 <__any_on>
 8008544:	4683      	mov	fp, r0
 8008546:	b1b8      	cbz	r0, 8008578 <__gethex+0x1dc>
 8008548:	f04f 0b01 	mov.w	fp, #1
 800854c:	f108 33ff 	add.w	r3, r8, #4294967295
 8008550:	1159      	asrs	r1, r3, #5
 8008552:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008556:	f003 021f 	and.w	r2, r3, #31
 800855a:	fa0b f202 	lsl.w	r2, fp, r2
 800855e:	420a      	tst	r2, r1
 8008560:	d00a      	beq.n	8008578 <__gethex+0x1dc>
 8008562:	455b      	cmp	r3, fp
 8008564:	dd06      	ble.n	8008574 <__gethex+0x1d8>
 8008566:	4620      	mov	r0, r4
 8008568:	f1a8 0102 	sub.w	r1, r8, #2
 800856c:	f7fe fd6b 	bl	8007046 <__any_on>
 8008570:	2800      	cmp	r0, #0
 8008572:	d138      	bne.n	80085e6 <__gethex+0x24a>
 8008574:	f04f 0b02 	mov.w	fp, #2
 8008578:	4641      	mov	r1, r8
 800857a:	4620      	mov	r0, r4
 800857c:	f7ff fea6 	bl	80082cc <rshift>
 8008580:	4446      	add	r6, r8
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	42b3      	cmp	r3, r6
 8008586:	da41      	bge.n	800860c <__gethex+0x270>
 8008588:	4621      	mov	r1, r4
 800858a:	4648      	mov	r0, r9
 800858c:	f7fe f920 	bl	80067d0 <_Bfree>
 8008590:	2300      	movs	r3, #0
 8008592:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008594:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8008598:	6013      	str	r3, [r2, #0]
 800859a:	e789      	b.n	80084b0 <__gethex+0x114>
 800859c:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80085a0:	2a2e      	cmp	r2, #46	; 0x2e
 80085a2:	d014      	beq.n	80085ce <__gethex+0x232>
 80085a4:	2b20      	cmp	r3, #32
 80085a6:	d106      	bne.n	80085b6 <__gethex+0x21a>
 80085a8:	9b01      	ldr	r3, [sp, #4]
 80085aa:	f843 bb04 	str.w	fp, [r3], #4
 80085ae:	f04f 0b00 	mov.w	fp, #0
 80085b2:	9301      	str	r3, [sp, #4]
 80085b4:	465b      	mov	r3, fp
 80085b6:	7828      	ldrb	r0, [r5, #0]
 80085b8:	9303      	str	r3, [sp, #12]
 80085ba:	f7ff feda 	bl	8008372 <__hexdig_fun>
 80085be:	9b03      	ldr	r3, [sp, #12]
 80085c0:	f000 000f 	and.w	r0, r0, #15
 80085c4:	4098      	lsls	r0, r3
 80085c6:	ea4b 0b00 	orr.w	fp, fp, r0
 80085ca:	3304      	adds	r3, #4
 80085cc:	e79f      	b.n	800850e <__gethex+0x172>
 80085ce:	45a8      	cmp	r8, r5
 80085d0:	d8e8      	bhi.n	80085a4 <__gethex+0x208>
 80085d2:	2201      	movs	r2, #1
 80085d4:	4628      	mov	r0, r5
 80085d6:	4928      	ldr	r1, [pc, #160]	; (8008678 <__gethex+0x2dc>)
 80085d8:	9303      	str	r3, [sp, #12]
 80085da:	f7ff fe0f 	bl	80081fc <strncmp>
 80085de:	9b03      	ldr	r3, [sp, #12]
 80085e0:	2800      	cmp	r0, #0
 80085e2:	d1df      	bne.n	80085a4 <__gethex+0x208>
 80085e4:	e793      	b.n	800850e <__gethex+0x172>
 80085e6:	f04f 0b03 	mov.w	fp, #3
 80085ea:	e7c5      	b.n	8008578 <__gethex+0x1dc>
 80085ec:	da0b      	bge.n	8008606 <__gethex+0x26a>
 80085ee:	eba5 0808 	sub.w	r8, r5, r8
 80085f2:	4621      	mov	r1, r4
 80085f4:	4642      	mov	r2, r8
 80085f6:	4648      	mov	r0, r9
 80085f8:	f7fe fb02 	bl	8006c00 <__lshift>
 80085fc:	4604      	mov	r4, r0
 80085fe:	eba6 0608 	sub.w	r6, r6, r8
 8008602:	f100 0a14 	add.w	sl, r0, #20
 8008606:	f04f 0b00 	mov.w	fp, #0
 800860a:	e7ba      	b.n	8008582 <__gethex+0x1e6>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	42b3      	cmp	r3, r6
 8008610:	dd74      	ble.n	80086fc <__gethex+0x360>
 8008612:	1b9e      	subs	r6, r3, r6
 8008614:	42b5      	cmp	r5, r6
 8008616:	dc35      	bgt.n	8008684 <__gethex+0x2e8>
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2b02      	cmp	r3, #2
 800861c:	d023      	beq.n	8008666 <__gethex+0x2ca>
 800861e:	2b03      	cmp	r3, #3
 8008620:	d025      	beq.n	800866e <__gethex+0x2d2>
 8008622:	2b01      	cmp	r3, #1
 8008624:	d115      	bne.n	8008652 <__gethex+0x2b6>
 8008626:	42b5      	cmp	r5, r6
 8008628:	d113      	bne.n	8008652 <__gethex+0x2b6>
 800862a:	2d01      	cmp	r5, #1
 800862c:	d10b      	bne.n	8008646 <__gethex+0x2aa>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	9a02      	ldr	r2, [sp, #8]
 8008632:	f04f 0862 	mov.w	r8, #98	; 0x62
 8008636:	6013      	str	r3, [r2, #0]
 8008638:	2301      	movs	r3, #1
 800863a:	6123      	str	r3, [r4, #16]
 800863c:	f8ca 3000 	str.w	r3, [sl]
 8008640:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008642:	601c      	str	r4, [r3, #0]
 8008644:	e734      	b.n	80084b0 <__gethex+0x114>
 8008646:	4620      	mov	r0, r4
 8008648:	1e69      	subs	r1, r5, #1
 800864a:	f7fe fcfc 	bl	8007046 <__any_on>
 800864e:	2800      	cmp	r0, #0
 8008650:	d1ed      	bne.n	800862e <__gethex+0x292>
 8008652:	4621      	mov	r1, r4
 8008654:	4648      	mov	r0, r9
 8008656:	f7fe f8bb 	bl	80067d0 <_Bfree>
 800865a:	2300      	movs	r3, #0
 800865c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800865e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8008662:	6013      	str	r3, [r2, #0]
 8008664:	e724      	b.n	80084b0 <__gethex+0x114>
 8008666:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008668:	2b00      	cmp	r3, #0
 800866a:	d1f2      	bne.n	8008652 <__gethex+0x2b6>
 800866c:	e7df      	b.n	800862e <__gethex+0x292>
 800866e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008670:	2b00      	cmp	r3, #0
 8008672:	d1dc      	bne.n	800862e <__gethex+0x292>
 8008674:	e7ed      	b.n	8008652 <__gethex+0x2b6>
 8008676:	bf00      	nop
 8008678:	080099a4 	.word	0x080099a4
 800867c:	08009837 	.word	0x08009837
 8008680:	08009b4e 	.word	0x08009b4e
 8008684:	f106 38ff 	add.w	r8, r6, #4294967295
 8008688:	f1bb 0f00 	cmp.w	fp, #0
 800868c:	d133      	bne.n	80086f6 <__gethex+0x35a>
 800868e:	f1b8 0f00 	cmp.w	r8, #0
 8008692:	d004      	beq.n	800869e <__gethex+0x302>
 8008694:	4641      	mov	r1, r8
 8008696:	4620      	mov	r0, r4
 8008698:	f7fe fcd5 	bl	8007046 <__any_on>
 800869c:	4683      	mov	fp, r0
 800869e:	2301      	movs	r3, #1
 80086a0:	ea4f 1268 	mov.w	r2, r8, asr #5
 80086a4:	f008 081f 	and.w	r8, r8, #31
 80086a8:	fa03 f308 	lsl.w	r3, r3, r8
 80086ac:	f04f 0802 	mov.w	r8, #2
 80086b0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80086b4:	4631      	mov	r1, r6
 80086b6:	4213      	tst	r3, r2
 80086b8:	4620      	mov	r0, r4
 80086ba:	bf18      	it	ne
 80086bc:	f04b 0b02 	orrne.w	fp, fp, #2
 80086c0:	1bad      	subs	r5, r5, r6
 80086c2:	f7ff fe03 	bl	80082cc <rshift>
 80086c6:	687e      	ldr	r6, [r7, #4]
 80086c8:	f1bb 0f00 	cmp.w	fp, #0
 80086cc:	d04a      	beq.n	8008764 <__gethex+0x3c8>
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2b02      	cmp	r3, #2
 80086d2:	d016      	beq.n	8008702 <__gethex+0x366>
 80086d4:	2b03      	cmp	r3, #3
 80086d6:	d018      	beq.n	800870a <__gethex+0x36e>
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d109      	bne.n	80086f0 <__gethex+0x354>
 80086dc:	f01b 0f02 	tst.w	fp, #2
 80086e0:	d006      	beq.n	80086f0 <__gethex+0x354>
 80086e2:	f8da 3000 	ldr.w	r3, [sl]
 80086e6:	ea4b 0b03 	orr.w	fp, fp, r3
 80086ea:	f01b 0f01 	tst.w	fp, #1
 80086ee:	d10f      	bne.n	8008710 <__gethex+0x374>
 80086f0:	f048 0810 	orr.w	r8, r8, #16
 80086f4:	e036      	b.n	8008764 <__gethex+0x3c8>
 80086f6:	f04f 0b01 	mov.w	fp, #1
 80086fa:	e7d0      	b.n	800869e <__gethex+0x302>
 80086fc:	f04f 0801 	mov.w	r8, #1
 8008700:	e7e2      	b.n	80086c8 <__gethex+0x32c>
 8008702:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008704:	f1c3 0301 	rsb	r3, r3, #1
 8008708:	930f      	str	r3, [sp, #60]	; 0x3c
 800870a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800870c:	2b00      	cmp	r3, #0
 800870e:	d0ef      	beq.n	80086f0 <__gethex+0x354>
 8008710:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008714:	f104 0214 	add.w	r2, r4, #20
 8008718:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800871c:	9301      	str	r3, [sp, #4]
 800871e:	2300      	movs	r3, #0
 8008720:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8008724:	4694      	mov	ip, r2
 8008726:	f852 1b04 	ldr.w	r1, [r2], #4
 800872a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800872e:	d01e      	beq.n	800876e <__gethex+0x3d2>
 8008730:	3101      	adds	r1, #1
 8008732:	f8cc 1000 	str.w	r1, [ip]
 8008736:	f1b8 0f02 	cmp.w	r8, #2
 800873a:	f104 0214 	add.w	r2, r4, #20
 800873e:	d13d      	bne.n	80087bc <__gethex+0x420>
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	3b01      	subs	r3, #1
 8008744:	42ab      	cmp	r3, r5
 8008746:	d10b      	bne.n	8008760 <__gethex+0x3c4>
 8008748:	2301      	movs	r3, #1
 800874a:	1169      	asrs	r1, r5, #5
 800874c:	f005 051f 	and.w	r5, r5, #31
 8008750:	fa03 f505 	lsl.w	r5, r3, r5
 8008754:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008758:	421d      	tst	r5, r3
 800875a:	bf18      	it	ne
 800875c:	f04f 0801 	movne.w	r8, #1
 8008760:	f048 0820 	orr.w	r8, r8, #32
 8008764:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008766:	601c      	str	r4, [r3, #0]
 8008768:	9b02      	ldr	r3, [sp, #8]
 800876a:	601e      	str	r6, [r3, #0]
 800876c:	e6a0      	b.n	80084b0 <__gethex+0x114>
 800876e:	4290      	cmp	r0, r2
 8008770:	f842 3c04 	str.w	r3, [r2, #-4]
 8008774:	d8d6      	bhi.n	8008724 <__gethex+0x388>
 8008776:	68a2      	ldr	r2, [r4, #8]
 8008778:	4593      	cmp	fp, r2
 800877a:	db17      	blt.n	80087ac <__gethex+0x410>
 800877c:	6861      	ldr	r1, [r4, #4]
 800877e:	4648      	mov	r0, r9
 8008780:	3101      	adds	r1, #1
 8008782:	f7fd ffe5 	bl	8006750 <_Balloc>
 8008786:	4682      	mov	sl, r0
 8008788:	b918      	cbnz	r0, 8008792 <__gethex+0x3f6>
 800878a:	4602      	mov	r2, r0
 800878c:	2184      	movs	r1, #132	; 0x84
 800878e:	4b1a      	ldr	r3, [pc, #104]	; (80087f8 <__gethex+0x45c>)
 8008790:	e6b1      	b.n	80084f6 <__gethex+0x15a>
 8008792:	6922      	ldr	r2, [r4, #16]
 8008794:	f104 010c 	add.w	r1, r4, #12
 8008798:	3202      	adds	r2, #2
 800879a:	0092      	lsls	r2, r2, #2
 800879c:	300c      	adds	r0, #12
 800879e:	f7ff fd4f 	bl	8008240 <memcpy>
 80087a2:	4621      	mov	r1, r4
 80087a4:	4648      	mov	r0, r9
 80087a6:	f7fe f813 	bl	80067d0 <_Bfree>
 80087aa:	4654      	mov	r4, sl
 80087ac:	6922      	ldr	r2, [r4, #16]
 80087ae:	1c51      	adds	r1, r2, #1
 80087b0:	6121      	str	r1, [r4, #16]
 80087b2:	2101      	movs	r1, #1
 80087b4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80087b8:	6151      	str	r1, [r2, #20]
 80087ba:	e7bc      	b.n	8008736 <__gethex+0x39a>
 80087bc:	6921      	ldr	r1, [r4, #16]
 80087be:	4559      	cmp	r1, fp
 80087c0:	dd0b      	ble.n	80087da <__gethex+0x43e>
 80087c2:	2101      	movs	r1, #1
 80087c4:	4620      	mov	r0, r4
 80087c6:	f7ff fd81 	bl	80082cc <rshift>
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	3601      	adds	r6, #1
 80087ce:	42b3      	cmp	r3, r6
 80087d0:	f6ff aeda 	blt.w	8008588 <__gethex+0x1ec>
 80087d4:	f04f 0801 	mov.w	r8, #1
 80087d8:	e7c2      	b.n	8008760 <__gethex+0x3c4>
 80087da:	f015 051f 	ands.w	r5, r5, #31
 80087de:	d0f9      	beq.n	80087d4 <__gethex+0x438>
 80087e0:	9b01      	ldr	r3, [sp, #4]
 80087e2:	f1c5 0520 	rsb	r5, r5, #32
 80087e6:	441a      	add	r2, r3
 80087e8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80087ec:	f7fe f8a2 	bl	8006934 <__hi0bits>
 80087f0:	42a8      	cmp	r0, r5
 80087f2:	dbe6      	blt.n	80087c2 <__gethex+0x426>
 80087f4:	e7ee      	b.n	80087d4 <__gethex+0x438>
 80087f6:	bf00      	nop
 80087f8:	08009837 	.word	0x08009837

080087fc <L_shift>:
 80087fc:	f1c2 0208 	rsb	r2, r2, #8
 8008800:	0092      	lsls	r2, r2, #2
 8008802:	b570      	push	{r4, r5, r6, lr}
 8008804:	f1c2 0620 	rsb	r6, r2, #32
 8008808:	6843      	ldr	r3, [r0, #4]
 800880a:	6804      	ldr	r4, [r0, #0]
 800880c:	fa03 f506 	lsl.w	r5, r3, r6
 8008810:	432c      	orrs	r4, r5
 8008812:	40d3      	lsrs	r3, r2
 8008814:	6004      	str	r4, [r0, #0]
 8008816:	f840 3f04 	str.w	r3, [r0, #4]!
 800881a:	4288      	cmp	r0, r1
 800881c:	d3f4      	bcc.n	8008808 <L_shift+0xc>
 800881e:	bd70      	pop	{r4, r5, r6, pc}

08008820 <__match>:
 8008820:	b530      	push	{r4, r5, lr}
 8008822:	6803      	ldr	r3, [r0, #0]
 8008824:	3301      	adds	r3, #1
 8008826:	f811 4b01 	ldrb.w	r4, [r1], #1
 800882a:	b914      	cbnz	r4, 8008832 <__match+0x12>
 800882c:	6003      	str	r3, [r0, #0]
 800882e:	2001      	movs	r0, #1
 8008830:	bd30      	pop	{r4, r5, pc}
 8008832:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008836:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800883a:	2d19      	cmp	r5, #25
 800883c:	bf98      	it	ls
 800883e:	3220      	addls	r2, #32
 8008840:	42a2      	cmp	r2, r4
 8008842:	d0f0      	beq.n	8008826 <__match+0x6>
 8008844:	2000      	movs	r0, #0
 8008846:	e7f3      	b.n	8008830 <__match+0x10>

08008848 <__hexnan>:
 8008848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800884c:	2500      	movs	r5, #0
 800884e:	680b      	ldr	r3, [r1, #0]
 8008850:	4682      	mov	sl, r0
 8008852:	115e      	asrs	r6, r3, #5
 8008854:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008858:	f013 031f 	ands.w	r3, r3, #31
 800885c:	bf18      	it	ne
 800885e:	3604      	addne	r6, #4
 8008860:	1f37      	subs	r7, r6, #4
 8008862:	4690      	mov	r8, r2
 8008864:	46b9      	mov	r9, r7
 8008866:	463c      	mov	r4, r7
 8008868:	46ab      	mov	fp, r5
 800886a:	b087      	sub	sp, #28
 800886c:	6801      	ldr	r1, [r0, #0]
 800886e:	9301      	str	r3, [sp, #4]
 8008870:	f846 5c04 	str.w	r5, [r6, #-4]
 8008874:	9502      	str	r5, [sp, #8]
 8008876:	784a      	ldrb	r2, [r1, #1]
 8008878:	1c4b      	adds	r3, r1, #1
 800887a:	9303      	str	r3, [sp, #12]
 800887c:	b342      	cbz	r2, 80088d0 <__hexnan+0x88>
 800887e:	4610      	mov	r0, r2
 8008880:	9105      	str	r1, [sp, #20]
 8008882:	9204      	str	r2, [sp, #16]
 8008884:	f7ff fd75 	bl	8008372 <__hexdig_fun>
 8008888:	2800      	cmp	r0, #0
 800888a:	d14f      	bne.n	800892c <__hexnan+0xe4>
 800888c:	9a04      	ldr	r2, [sp, #16]
 800888e:	9905      	ldr	r1, [sp, #20]
 8008890:	2a20      	cmp	r2, #32
 8008892:	d818      	bhi.n	80088c6 <__hexnan+0x7e>
 8008894:	9b02      	ldr	r3, [sp, #8]
 8008896:	459b      	cmp	fp, r3
 8008898:	dd13      	ble.n	80088c2 <__hexnan+0x7a>
 800889a:	454c      	cmp	r4, r9
 800889c:	d206      	bcs.n	80088ac <__hexnan+0x64>
 800889e:	2d07      	cmp	r5, #7
 80088a0:	dc04      	bgt.n	80088ac <__hexnan+0x64>
 80088a2:	462a      	mov	r2, r5
 80088a4:	4649      	mov	r1, r9
 80088a6:	4620      	mov	r0, r4
 80088a8:	f7ff ffa8 	bl	80087fc <L_shift>
 80088ac:	4544      	cmp	r4, r8
 80088ae:	d950      	bls.n	8008952 <__hexnan+0x10a>
 80088b0:	2300      	movs	r3, #0
 80088b2:	f1a4 0904 	sub.w	r9, r4, #4
 80088b6:	f844 3c04 	str.w	r3, [r4, #-4]
 80088ba:	461d      	mov	r5, r3
 80088bc:	464c      	mov	r4, r9
 80088be:	f8cd b008 	str.w	fp, [sp, #8]
 80088c2:	9903      	ldr	r1, [sp, #12]
 80088c4:	e7d7      	b.n	8008876 <__hexnan+0x2e>
 80088c6:	2a29      	cmp	r2, #41	; 0x29
 80088c8:	d155      	bne.n	8008976 <__hexnan+0x12e>
 80088ca:	3102      	adds	r1, #2
 80088cc:	f8ca 1000 	str.w	r1, [sl]
 80088d0:	f1bb 0f00 	cmp.w	fp, #0
 80088d4:	d04f      	beq.n	8008976 <__hexnan+0x12e>
 80088d6:	454c      	cmp	r4, r9
 80088d8:	d206      	bcs.n	80088e8 <__hexnan+0xa0>
 80088da:	2d07      	cmp	r5, #7
 80088dc:	dc04      	bgt.n	80088e8 <__hexnan+0xa0>
 80088de:	462a      	mov	r2, r5
 80088e0:	4649      	mov	r1, r9
 80088e2:	4620      	mov	r0, r4
 80088e4:	f7ff ff8a 	bl	80087fc <L_shift>
 80088e8:	4544      	cmp	r4, r8
 80088ea:	d934      	bls.n	8008956 <__hexnan+0x10e>
 80088ec:	4623      	mov	r3, r4
 80088ee:	f1a8 0204 	sub.w	r2, r8, #4
 80088f2:	f853 1b04 	ldr.w	r1, [r3], #4
 80088f6:	429f      	cmp	r7, r3
 80088f8:	f842 1f04 	str.w	r1, [r2, #4]!
 80088fc:	d2f9      	bcs.n	80088f2 <__hexnan+0xaa>
 80088fe:	1b3b      	subs	r3, r7, r4
 8008900:	f023 0303 	bic.w	r3, r3, #3
 8008904:	3304      	adds	r3, #4
 8008906:	3e03      	subs	r6, #3
 8008908:	3401      	adds	r4, #1
 800890a:	42a6      	cmp	r6, r4
 800890c:	bf38      	it	cc
 800890e:	2304      	movcc	r3, #4
 8008910:	2200      	movs	r2, #0
 8008912:	4443      	add	r3, r8
 8008914:	f843 2b04 	str.w	r2, [r3], #4
 8008918:	429f      	cmp	r7, r3
 800891a:	d2fb      	bcs.n	8008914 <__hexnan+0xcc>
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	b91b      	cbnz	r3, 8008928 <__hexnan+0xe0>
 8008920:	4547      	cmp	r7, r8
 8008922:	d126      	bne.n	8008972 <__hexnan+0x12a>
 8008924:	2301      	movs	r3, #1
 8008926:	603b      	str	r3, [r7, #0]
 8008928:	2005      	movs	r0, #5
 800892a:	e025      	b.n	8008978 <__hexnan+0x130>
 800892c:	3501      	adds	r5, #1
 800892e:	2d08      	cmp	r5, #8
 8008930:	f10b 0b01 	add.w	fp, fp, #1
 8008934:	dd06      	ble.n	8008944 <__hexnan+0xfc>
 8008936:	4544      	cmp	r4, r8
 8008938:	d9c3      	bls.n	80088c2 <__hexnan+0x7a>
 800893a:	2300      	movs	r3, #0
 800893c:	2501      	movs	r5, #1
 800893e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008942:	3c04      	subs	r4, #4
 8008944:	6822      	ldr	r2, [r4, #0]
 8008946:	f000 000f 	and.w	r0, r0, #15
 800894a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800894e:	6020      	str	r0, [r4, #0]
 8008950:	e7b7      	b.n	80088c2 <__hexnan+0x7a>
 8008952:	2508      	movs	r5, #8
 8008954:	e7b5      	b.n	80088c2 <__hexnan+0x7a>
 8008956:	9b01      	ldr	r3, [sp, #4]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d0df      	beq.n	800891c <__hexnan+0xd4>
 800895c:	f04f 32ff 	mov.w	r2, #4294967295
 8008960:	f1c3 0320 	rsb	r3, r3, #32
 8008964:	40da      	lsrs	r2, r3
 8008966:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800896a:	4013      	ands	r3, r2
 800896c:	f846 3c04 	str.w	r3, [r6, #-4]
 8008970:	e7d4      	b.n	800891c <__hexnan+0xd4>
 8008972:	3f04      	subs	r7, #4
 8008974:	e7d2      	b.n	800891c <__hexnan+0xd4>
 8008976:	2004      	movs	r0, #4
 8008978:	b007      	add	sp, #28
 800897a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800897e <__ascii_mbtowc>:
 800897e:	b082      	sub	sp, #8
 8008980:	b901      	cbnz	r1, 8008984 <__ascii_mbtowc+0x6>
 8008982:	a901      	add	r1, sp, #4
 8008984:	b142      	cbz	r2, 8008998 <__ascii_mbtowc+0x1a>
 8008986:	b14b      	cbz	r3, 800899c <__ascii_mbtowc+0x1e>
 8008988:	7813      	ldrb	r3, [r2, #0]
 800898a:	600b      	str	r3, [r1, #0]
 800898c:	7812      	ldrb	r2, [r2, #0]
 800898e:	1e10      	subs	r0, r2, #0
 8008990:	bf18      	it	ne
 8008992:	2001      	movne	r0, #1
 8008994:	b002      	add	sp, #8
 8008996:	4770      	bx	lr
 8008998:	4610      	mov	r0, r2
 800899a:	e7fb      	b.n	8008994 <__ascii_mbtowc+0x16>
 800899c:	f06f 0001 	mvn.w	r0, #1
 80089a0:	e7f8      	b.n	8008994 <__ascii_mbtowc+0x16>

080089a2 <_realloc_r>:
 80089a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089a6:	4680      	mov	r8, r0
 80089a8:	4614      	mov	r4, r2
 80089aa:	460e      	mov	r6, r1
 80089ac:	b921      	cbnz	r1, 80089b8 <_realloc_r+0x16>
 80089ae:	4611      	mov	r1, r2
 80089b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089b4:	f7fd be40 	b.w	8006638 <_malloc_r>
 80089b8:	b92a      	cbnz	r2, 80089c6 <_realloc_r+0x24>
 80089ba:	f7fd fdcd 	bl	8006558 <_free_r>
 80089be:	4625      	mov	r5, r4
 80089c0:	4628      	mov	r0, r5
 80089c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089c6:	f000 f842 	bl	8008a4e <_malloc_usable_size_r>
 80089ca:	4284      	cmp	r4, r0
 80089cc:	4607      	mov	r7, r0
 80089ce:	d802      	bhi.n	80089d6 <_realloc_r+0x34>
 80089d0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80089d4:	d812      	bhi.n	80089fc <_realloc_r+0x5a>
 80089d6:	4621      	mov	r1, r4
 80089d8:	4640      	mov	r0, r8
 80089da:	f7fd fe2d 	bl	8006638 <_malloc_r>
 80089de:	4605      	mov	r5, r0
 80089e0:	2800      	cmp	r0, #0
 80089e2:	d0ed      	beq.n	80089c0 <_realloc_r+0x1e>
 80089e4:	42bc      	cmp	r4, r7
 80089e6:	4622      	mov	r2, r4
 80089e8:	4631      	mov	r1, r6
 80089ea:	bf28      	it	cs
 80089ec:	463a      	movcs	r2, r7
 80089ee:	f7ff fc27 	bl	8008240 <memcpy>
 80089f2:	4631      	mov	r1, r6
 80089f4:	4640      	mov	r0, r8
 80089f6:	f7fd fdaf 	bl	8006558 <_free_r>
 80089fa:	e7e1      	b.n	80089c0 <_realloc_r+0x1e>
 80089fc:	4635      	mov	r5, r6
 80089fe:	e7df      	b.n	80089c0 <_realloc_r+0x1e>

08008a00 <__ascii_wctomb>:
 8008a00:	4603      	mov	r3, r0
 8008a02:	4608      	mov	r0, r1
 8008a04:	b141      	cbz	r1, 8008a18 <__ascii_wctomb+0x18>
 8008a06:	2aff      	cmp	r2, #255	; 0xff
 8008a08:	d904      	bls.n	8008a14 <__ascii_wctomb+0x14>
 8008a0a:	228a      	movs	r2, #138	; 0x8a
 8008a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a10:	601a      	str	r2, [r3, #0]
 8008a12:	4770      	bx	lr
 8008a14:	2001      	movs	r0, #1
 8008a16:	700a      	strb	r2, [r1, #0]
 8008a18:	4770      	bx	lr
	...

08008a1c <fiprintf>:
 8008a1c:	b40e      	push	{r1, r2, r3}
 8008a1e:	b503      	push	{r0, r1, lr}
 8008a20:	4601      	mov	r1, r0
 8008a22:	ab03      	add	r3, sp, #12
 8008a24:	4805      	ldr	r0, [pc, #20]	; (8008a3c <fiprintf+0x20>)
 8008a26:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a2a:	6800      	ldr	r0, [r0, #0]
 8008a2c:	9301      	str	r3, [sp, #4]
 8008a2e:	f000 f83d 	bl	8008aac <_vfiprintf_r>
 8008a32:	b002      	add	sp, #8
 8008a34:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a38:	b003      	add	sp, #12
 8008a3a:	4770      	bx	lr
 8008a3c:	20000080 	.word	0x20000080

08008a40 <abort>:
 8008a40:	2006      	movs	r0, #6
 8008a42:	b508      	push	{r3, lr}
 8008a44:	f000 fa0a 	bl	8008e5c <raise>
 8008a48:	2001      	movs	r0, #1
 8008a4a:	f7f9 fd2e 	bl	80024aa <_exit>

08008a4e <_malloc_usable_size_r>:
 8008a4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a52:	1f18      	subs	r0, r3, #4
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	bfbc      	itt	lt
 8008a58:	580b      	ldrlt	r3, [r1, r0]
 8008a5a:	18c0      	addlt	r0, r0, r3
 8008a5c:	4770      	bx	lr

08008a5e <__sfputc_r>:
 8008a5e:	6893      	ldr	r3, [r2, #8]
 8008a60:	b410      	push	{r4}
 8008a62:	3b01      	subs	r3, #1
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	6093      	str	r3, [r2, #8]
 8008a68:	da07      	bge.n	8008a7a <__sfputc_r+0x1c>
 8008a6a:	6994      	ldr	r4, [r2, #24]
 8008a6c:	42a3      	cmp	r3, r4
 8008a6e:	db01      	blt.n	8008a74 <__sfputc_r+0x16>
 8008a70:	290a      	cmp	r1, #10
 8008a72:	d102      	bne.n	8008a7a <__sfputc_r+0x1c>
 8008a74:	bc10      	pop	{r4}
 8008a76:	f000 b933 	b.w	8008ce0 <__swbuf_r>
 8008a7a:	6813      	ldr	r3, [r2, #0]
 8008a7c:	1c58      	adds	r0, r3, #1
 8008a7e:	6010      	str	r0, [r2, #0]
 8008a80:	7019      	strb	r1, [r3, #0]
 8008a82:	4608      	mov	r0, r1
 8008a84:	bc10      	pop	{r4}
 8008a86:	4770      	bx	lr

08008a88 <__sfputs_r>:
 8008a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a8a:	4606      	mov	r6, r0
 8008a8c:	460f      	mov	r7, r1
 8008a8e:	4614      	mov	r4, r2
 8008a90:	18d5      	adds	r5, r2, r3
 8008a92:	42ac      	cmp	r4, r5
 8008a94:	d101      	bne.n	8008a9a <__sfputs_r+0x12>
 8008a96:	2000      	movs	r0, #0
 8008a98:	e007      	b.n	8008aaa <__sfputs_r+0x22>
 8008a9a:	463a      	mov	r2, r7
 8008a9c:	4630      	mov	r0, r6
 8008a9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aa2:	f7ff ffdc 	bl	8008a5e <__sfputc_r>
 8008aa6:	1c43      	adds	r3, r0, #1
 8008aa8:	d1f3      	bne.n	8008a92 <__sfputs_r+0xa>
 8008aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008aac <_vfiprintf_r>:
 8008aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ab0:	460d      	mov	r5, r1
 8008ab2:	4614      	mov	r4, r2
 8008ab4:	4698      	mov	r8, r3
 8008ab6:	4606      	mov	r6, r0
 8008ab8:	b09d      	sub	sp, #116	; 0x74
 8008aba:	b118      	cbz	r0, 8008ac4 <_vfiprintf_r+0x18>
 8008abc:	6a03      	ldr	r3, [r0, #32]
 8008abe:	b90b      	cbnz	r3, 8008ac4 <_vfiprintf_r+0x18>
 8008ac0:	f7fc fdae 	bl	8005620 <__sinit>
 8008ac4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ac6:	07d9      	lsls	r1, r3, #31
 8008ac8:	d405      	bmi.n	8008ad6 <_vfiprintf_r+0x2a>
 8008aca:	89ab      	ldrh	r3, [r5, #12]
 8008acc:	059a      	lsls	r2, r3, #22
 8008ace:	d402      	bmi.n	8008ad6 <_vfiprintf_r+0x2a>
 8008ad0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ad2:	f7fc febc 	bl	800584e <__retarget_lock_acquire_recursive>
 8008ad6:	89ab      	ldrh	r3, [r5, #12]
 8008ad8:	071b      	lsls	r3, r3, #28
 8008ada:	d501      	bpl.n	8008ae0 <_vfiprintf_r+0x34>
 8008adc:	692b      	ldr	r3, [r5, #16]
 8008ade:	b99b      	cbnz	r3, 8008b08 <_vfiprintf_r+0x5c>
 8008ae0:	4629      	mov	r1, r5
 8008ae2:	4630      	mov	r0, r6
 8008ae4:	f000 f93a 	bl	8008d5c <__swsetup_r>
 8008ae8:	b170      	cbz	r0, 8008b08 <_vfiprintf_r+0x5c>
 8008aea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008aec:	07dc      	lsls	r4, r3, #31
 8008aee:	d504      	bpl.n	8008afa <_vfiprintf_r+0x4e>
 8008af0:	f04f 30ff 	mov.w	r0, #4294967295
 8008af4:	b01d      	add	sp, #116	; 0x74
 8008af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008afa:	89ab      	ldrh	r3, [r5, #12]
 8008afc:	0598      	lsls	r0, r3, #22
 8008afe:	d4f7      	bmi.n	8008af0 <_vfiprintf_r+0x44>
 8008b00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b02:	f7fc fea5 	bl	8005850 <__retarget_lock_release_recursive>
 8008b06:	e7f3      	b.n	8008af0 <_vfiprintf_r+0x44>
 8008b08:	2300      	movs	r3, #0
 8008b0a:	9309      	str	r3, [sp, #36]	; 0x24
 8008b0c:	2320      	movs	r3, #32
 8008b0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b12:	2330      	movs	r3, #48	; 0x30
 8008b14:	f04f 0901 	mov.w	r9, #1
 8008b18:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008ccc <_vfiprintf_r+0x220>
 8008b20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b24:	4623      	mov	r3, r4
 8008b26:	469a      	mov	sl, r3
 8008b28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b2c:	b10a      	cbz	r2, 8008b32 <_vfiprintf_r+0x86>
 8008b2e:	2a25      	cmp	r2, #37	; 0x25
 8008b30:	d1f9      	bne.n	8008b26 <_vfiprintf_r+0x7a>
 8008b32:	ebba 0b04 	subs.w	fp, sl, r4
 8008b36:	d00b      	beq.n	8008b50 <_vfiprintf_r+0xa4>
 8008b38:	465b      	mov	r3, fp
 8008b3a:	4622      	mov	r2, r4
 8008b3c:	4629      	mov	r1, r5
 8008b3e:	4630      	mov	r0, r6
 8008b40:	f7ff ffa2 	bl	8008a88 <__sfputs_r>
 8008b44:	3001      	adds	r0, #1
 8008b46:	f000 80a9 	beq.w	8008c9c <_vfiprintf_r+0x1f0>
 8008b4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b4c:	445a      	add	r2, fp
 8008b4e:	9209      	str	r2, [sp, #36]	; 0x24
 8008b50:	f89a 3000 	ldrb.w	r3, [sl]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	f000 80a1 	beq.w	8008c9c <_vfiprintf_r+0x1f0>
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b64:	f10a 0a01 	add.w	sl, sl, #1
 8008b68:	9304      	str	r3, [sp, #16]
 8008b6a:	9307      	str	r3, [sp, #28]
 8008b6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b70:	931a      	str	r3, [sp, #104]	; 0x68
 8008b72:	4654      	mov	r4, sl
 8008b74:	2205      	movs	r2, #5
 8008b76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b7a:	4854      	ldr	r0, [pc, #336]	; (8008ccc <_vfiprintf_r+0x220>)
 8008b7c:	f7fc fe69 	bl	8005852 <memchr>
 8008b80:	9a04      	ldr	r2, [sp, #16]
 8008b82:	b9d8      	cbnz	r0, 8008bbc <_vfiprintf_r+0x110>
 8008b84:	06d1      	lsls	r1, r2, #27
 8008b86:	bf44      	itt	mi
 8008b88:	2320      	movmi	r3, #32
 8008b8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b8e:	0713      	lsls	r3, r2, #28
 8008b90:	bf44      	itt	mi
 8008b92:	232b      	movmi	r3, #43	; 0x2b
 8008b94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b98:	f89a 3000 	ldrb.w	r3, [sl]
 8008b9c:	2b2a      	cmp	r3, #42	; 0x2a
 8008b9e:	d015      	beq.n	8008bcc <_vfiprintf_r+0x120>
 8008ba0:	4654      	mov	r4, sl
 8008ba2:	2000      	movs	r0, #0
 8008ba4:	f04f 0c0a 	mov.w	ip, #10
 8008ba8:	9a07      	ldr	r2, [sp, #28]
 8008baa:	4621      	mov	r1, r4
 8008bac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bb0:	3b30      	subs	r3, #48	; 0x30
 8008bb2:	2b09      	cmp	r3, #9
 8008bb4:	d94d      	bls.n	8008c52 <_vfiprintf_r+0x1a6>
 8008bb6:	b1b0      	cbz	r0, 8008be6 <_vfiprintf_r+0x13a>
 8008bb8:	9207      	str	r2, [sp, #28]
 8008bba:	e014      	b.n	8008be6 <_vfiprintf_r+0x13a>
 8008bbc:	eba0 0308 	sub.w	r3, r0, r8
 8008bc0:	fa09 f303 	lsl.w	r3, r9, r3
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	46a2      	mov	sl, r4
 8008bc8:	9304      	str	r3, [sp, #16]
 8008bca:	e7d2      	b.n	8008b72 <_vfiprintf_r+0xc6>
 8008bcc:	9b03      	ldr	r3, [sp, #12]
 8008bce:	1d19      	adds	r1, r3, #4
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	9103      	str	r1, [sp, #12]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	bfbb      	ittet	lt
 8008bd8:	425b      	neglt	r3, r3
 8008bda:	f042 0202 	orrlt.w	r2, r2, #2
 8008bde:	9307      	strge	r3, [sp, #28]
 8008be0:	9307      	strlt	r3, [sp, #28]
 8008be2:	bfb8      	it	lt
 8008be4:	9204      	strlt	r2, [sp, #16]
 8008be6:	7823      	ldrb	r3, [r4, #0]
 8008be8:	2b2e      	cmp	r3, #46	; 0x2e
 8008bea:	d10c      	bne.n	8008c06 <_vfiprintf_r+0x15a>
 8008bec:	7863      	ldrb	r3, [r4, #1]
 8008bee:	2b2a      	cmp	r3, #42	; 0x2a
 8008bf0:	d134      	bne.n	8008c5c <_vfiprintf_r+0x1b0>
 8008bf2:	9b03      	ldr	r3, [sp, #12]
 8008bf4:	3402      	adds	r4, #2
 8008bf6:	1d1a      	adds	r2, r3, #4
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	9203      	str	r2, [sp, #12]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	bfb8      	it	lt
 8008c00:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c04:	9305      	str	r3, [sp, #20]
 8008c06:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008cd0 <_vfiprintf_r+0x224>
 8008c0a:	2203      	movs	r2, #3
 8008c0c:	4650      	mov	r0, sl
 8008c0e:	7821      	ldrb	r1, [r4, #0]
 8008c10:	f7fc fe1f 	bl	8005852 <memchr>
 8008c14:	b138      	cbz	r0, 8008c26 <_vfiprintf_r+0x17a>
 8008c16:	2240      	movs	r2, #64	; 0x40
 8008c18:	9b04      	ldr	r3, [sp, #16]
 8008c1a:	eba0 000a 	sub.w	r0, r0, sl
 8008c1e:	4082      	lsls	r2, r0
 8008c20:	4313      	orrs	r3, r2
 8008c22:	3401      	adds	r4, #1
 8008c24:	9304      	str	r3, [sp, #16]
 8008c26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c2a:	2206      	movs	r2, #6
 8008c2c:	4829      	ldr	r0, [pc, #164]	; (8008cd4 <_vfiprintf_r+0x228>)
 8008c2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c32:	f7fc fe0e 	bl	8005852 <memchr>
 8008c36:	2800      	cmp	r0, #0
 8008c38:	d03f      	beq.n	8008cba <_vfiprintf_r+0x20e>
 8008c3a:	4b27      	ldr	r3, [pc, #156]	; (8008cd8 <_vfiprintf_r+0x22c>)
 8008c3c:	bb1b      	cbnz	r3, 8008c86 <_vfiprintf_r+0x1da>
 8008c3e:	9b03      	ldr	r3, [sp, #12]
 8008c40:	3307      	adds	r3, #7
 8008c42:	f023 0307 	bic.w	r3, r3, #7
 8008c46:	3308      	adds	r3, #8
 8008c48:	9303      	str	r3, [sp, #12]
 8008c4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c4c:	443b      	add	r3, r7
 8008c4e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c50:	e768      	b.n	8008b24 <_vfiprintf_r+0x78>
 8008c52:	460c      	mov	r4, r1
 8008c54:	2001      	movs	r0, #1
 8008c56:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c5a:	e7a6      	b.n	8008baa <_vfiprintf_r+0xfe>
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	f04f 0c0a 	mov.w	ip, #10
 8008c62:	4619      	mov	r1, r3
 8008c64:	3401      	adds	r4, #1
 8008c66:	9305      	str	r3, [sp, #20]
 8008c68:	4620      	mov	r0, r4
 8008c6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c6e:	3a30      	subs	r2, #48	; 0x30
 8008c70:	2a09      	cmp	r2, #9
 8008c72:	d903      	bls.n	8008c7c <_vfiprintf_r+0x1d0>
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d0c6      	beq.n	8008c06 <_vfiprintf_r+0x15a>
 8008c78:	9105      	str	r1, [sp, #20]
 8008c7a:	e7c4      	b.n	8008c06 <_vfiprintf_r+0x15a>
 8008c7c:	4604      	mov	r4, r0
 8008c7e:	2301      	movs	r3, #1
 8008c80:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c84:	e7f0      	b.n	8008c68 <_vfiprintf_r+0x1bc>
 8008c86:	ab03      	add	r3, sp, #12
 8008c88:	9300      	str	r3, [sp, #0]
 8008c8a:	462a      	mov	r2, r5
 8008c8c:	4630      	mov	r0, r6
 8008c8e:	4b13      	ldr	r3, [pc, #76]	; (8008cdc <_vfiprintf_r+0x230>)
 8008c90:	a904      	add	r1, sp, #16
 8008c92:	f7fb fe69 	bl	8004968 <_printf_float>
 8008c96:	4607      	mov	r7, r0
 8008c98:	1c78      	adds	r0, r7, #1
 8008c9a:	d1d6      	bne.n	8008c4a <_vfiprintf_r+0x19e>
 8008c9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c9e:	07d9      	lsls	r1, r3, #31
 8008ca0:	d405      	bmi.n	8008cae <_vfiprintf_r+0x202>
 8008ca2:	89ab      	ldrh	r3, [r5, #12]
 8008ca4:	059a      	lsls	r2, r3, #22
 8008ca6:	d402      	bmi.n	8008cae <_vfiprintf_r+0x202>
 8008ca8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008caa:	f7fc fdd1 	bl	8005850 <__retarget_lock_release_recursive>
 8008cae:	89ab      	ldrh	r3, [r5, #12]
 8008cb0:	065b      	lsls	r3, r3, #25
 8008cb2:	f53f af1d 	bmi.w	8008af0 <_vfiprintf_r+0x44>
 8008cb6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cb8:	e71c      	b.n	8008af4 <_vfiprintf_r+0x48>
 8008cba:	ab03      	add	r3, sp, #12
 8008cbc:	9300      	str	r3, [sp, #0]
 8008cbe:	462a      	mov	r2, r5
 8008cc0:	4630      	mov	r0, r6
 8008cc2:	4b06      	ldr	r3, [pc, #24]	; (8008cdc <_vfiprintf_r+0x230>)
 8008cc4:	a904      	add	r1, sp, #16
 8008cc6:	f7fc f8ef 	bl	8004ea8 <_printf_i>
 8008cca:	e7e4      	b.n	8008c96 <_vfiprintf_r+0x1ea>
 8008ccc:	08009af9 	.word	0x08009af9
 8008cd0:	08009aff 	.word	0x08009aff
 8008cd4:	08009b03 	.word	0x08009b03
 8008cd8:	08004969 	.word	0x08004969
 8008cdc:	08008a89 	.word	0x08008a89

08008ce0 <__swbuf_r>:
 8008ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ce2:	460e      	mov	r6, r1
 8008ce4:	4614      	mov	r4, r2
 8008ce6:	4605      	mov	r5, r0
 8008ce8:	b118      	cbz	r0, 8008cf2 <__swbuf_r+0x12>
 8008cea:	6a03      	ldr	r3, [r0, #32]
 8008cec:	b90b      	cbnz	r3, 8008cf2 <__swbuf_r+0x12>
 8008cee:	f7fc fc97 	bl	8005620 <__sinit>
 8008cf2:	69a3      	ldr	r3, [r4, #24]
 8008cf4:	60a3      	str	r3, [r4, #8]
 8008cf6:	89a3      	ldrh	r3, [r4, #12]
 8008cf8:	071a      	lsls	r2, r3, #28
 8008cfa:	d525      	bpl.n	8008d48 <__swbuf_r+0x68>
 8008cfc:	6923      	ldr	r3, [r4, #16]
 8008cfe:	b31b      	cbz	r3, 8008d48 <__swbuf_r+0x68>
 8008d00:	6823      	ldr	r3, [r4, #0]
 8008d02:	6922      	ldr	r2, [r4, #16]
 8008d04:	b2f6      	uxtb	r6, r6
 8008d06:	1a98      	subs	r0, r3, r2
 8008d08:	6963      	ldr	r3, [r4, #20]
 8008d0a:	4637      	mov	r7, r6
 8008d0c:	4283      	cmp	r3, r0
 8008d0e:	dc04      	bgt.n	8008d1a <__swbuf_r+0x3a>
 8008d10:	4621      	mov	r1, r4
 8008d12:	4628      	mov	r0, r5
 8008d14:	f7ff fa30 	bl	8008178 <_fflush_r>
 8008d18:	b9e0      	cbnz	r0, 8008d54 <__swbuf_r+0x74>
 8008d1a:	68a3      	ldr	r3, [r4, #8]
 8008d1c:	3b01      	subs	r3, #1
 8008d1e:	60a3      	str	r3, [r4, #8]
 8008d20:	6823      	ldr	r3, [r4, #0]
 8008d22:	1c5a      	adds	r2, r3, #1
 8008d24:	6022      	str	r2, [r4, #0]
 8008d26:	701e      	strb	r6, [r3, #0]
 8008d28:	6962      	ldr	r2, [r4, #20]
 8008d2a:	1c43      	adds	r3, r0, #1
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d004      	beq.n	8008d3a <__swbuf_r+0x5a>
 8008d30:	89a3      	ldrh	r3, [r4, #12]
 8008d32:	07db      	lsls	r3, r3, #31
 8008d34:	d506      	bpl.n	8008d44 <__swbuf_r+0x64>
 8008d36:	2e0a      	cmp	r6, #10
 8008d38:	d104      	bne.n	8008d44 <__swbuf_r+0x64>
 8008d3a:	4621      	mov	r1, r4
 8008d3c:	4628      	mov	r0, r5
 8008d3e:	f7ff fa1b 	bl	8008178 <_fflush_r>
 8008d42:	b938      	cbnz	r0, 8008d54 <__swbuf_r+0x74>
 8008d44:	4638      	mov	r0, r7
 8008d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d48:	4621      	mov	r1, r4
 8008d4a:	4628      	mov	r0, r5
 8008d4c:	f000 f806 	bl	8008d5c <__swsetup_r>
 8008d50:	2800      	cmp	r0, #0
 8008d52:	d0d5      	beq.n	8008d00 <__swbuf_r+0x20>
 8008d54:	f04f 37ff 	mov.w	r7, #4294967295
 8008d58:	e7f4      	b.n	8008d44 <__swbuf_r+0x64>
	...

08008d5c <__swsetup_r>:
 8008d5c:	b538      	push	{r3, r4, r5, lr}
 8008d5e:	4b2a      	ldr	r3, [pc, #168]	; (8008e08 <__swsetup_r+0xac>)
 8008d60:	4605      	mov	r5, r0
 8008d62:	6818      	ldr	r0, [r3, #0]
 8008d64:	460c      	mov	r4, r1
 8008d66:	b118      	cbz	r0, 8008d70 <__swsetup_r+0x14>
 8008d68:	6a03      	ldr	r3, [r0, #32]
 8008d6a:	b90b      	cbnz	r3, 8008d70 <__swsetup_r+0x14>
 8008d6c:	f7fc fc58 	bl	8005620 <__sinit>
 8008d70:	89a3      	ldrh	r3, [r4, #12]
 8008d72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d76:	0718      	lsls	r0, r3, #28
 8008d78:	d422      	bmi.n	8008dc0 <__swsetup_r+0x64>
 8008d7a:	06d9      	lsls	r1, r3, #27
 8008d7c:	d407      	bmi.n	8008d8e <__swsetup_r+0x32>
 8008d7e:	2309      	movs	r3, #9
 8008d80:	602b      	str	r3, [r5, #0]
 8008d82:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008d86:	f04f 30ff 	mov.w	r0, #4294967295
 8008d8a:	81a3      	strh	r3, [r4, #12]
 8008d8c:	e034      	b.n	8008df8 <__swsetup_r+0x9c>
 8008d8e:	0758      	lsls	r0, r3, #29
 8008d90:	d512      	bpl.n	8008db8 <__swsetup_r+0x5c>
 8008d92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d94:	b141      	cbz	r1, 8008da8 <__swsetup_r+0x4c>
 8008d96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d9a:	4299      	cmp	r1, r3
 8008d9c:	d002      	beq.n	8008da4 <__swsetup_r+0x48>
 8008d9e:	4628      	mov	r0, r5
 8008da0:	f7fd fbda 	bl	8006558 <_free_r>
 8008da4:	2300      	movs	r3, #0
 8008da6:	6363      	str	r3, [r4, #52]	; 0x34
 8008da8:	89a3      	ldrh	r3, [r4, #12]
 8008daa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008dae:	81a3      	strh	r3, [r4, #12]
 8008db0:	2300      	movs	r3, #0
 8008db2:	6063      	str	r3, [r4, #4]
 8008db4:	6923      	ldr	r3, [r4, #16]
 8008db6:	6023      	str	r3, [r4, #0]
 8008db8:	89a3      	ldrh	r3, [r4, #12]
 8008dba:	f043 0308 	orr.w	r3, r3, #8
 8008dbe:	81a3      	strh	r3, [r4, #12]
 8008dc0:	6923      	ldr	r3, [r4, #16]
 8008dc2:	b94b      	cbnz	r3, 8008dd8 <__swsetup_r+0x7c>
 8008dc4:	89a3      	ldrh	r3, [r4, #12]
 8008dc6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008dca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dce:	d003      	beq.n	8008dd8 <__swsetup_r+0x7c>
 8008dd0:	4621      	mov	r1, r4
 8008dd2:	4628      	mov	r0, r5
 8008dd4:	f000 f883 	bl	8008ede <__smakebuf_r>
 8008dd8:	89a0      	ldrh	r0, [r4, #12]
 8008dda:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008dde:	f010 0301 	ands.w	r3, r0, #1
 8008de2:	d00a      	beq.n	8008dfa <__swsetup_r+0x9e>
 8008de4:	2300      	movs	r3, #0
 8008de6:	60a3      	str	r3, [r4, #8]
 8008de8:	6963      	ldr	r3, [r4, #20]
 8008dea:	425b      	negs	r3, r3
 8008dec:	61a3      	str	r3, [r4, #24]
 8008dee:	6923      	ldr	r3, [r4, #16]
 8008df0:	b943      	cbnz	r3, 8008e04 <__swsetup_r+0xa8>
 8008df2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008df6:	d1c4      	bne.n	8008d82 <__swsetup_r+0x26>
 8008df8:	bd38      	pop	{r3, r4, r5, pc}
 8008dfa:	0781      	lsls	r1, r0, #30
 8008dfc:	bf58      	it	pl
 8008dfe:	6963      	ldrpl	r3, [r4, #20]
 8008e00:	60a3      	str	r3, [r4, #8]
 8008e02:	e7f4      	b.n	8008dee <__swsetup_r+0x92>
 8008e04:	2000      	movs	r0, #0
 8008e06:	e7f7      	b.n	8008df8 <__swsetup_r+0x9c>
 8008e08:	20000080 	.word	0x20000080

08008e0c <_raise_r>:
 8008e0c:	291f      	cmp	r1, #31
 8008e0e:	b538      	push	{r3, r4, r5, lr}
 8008e10:	4604      	mov	r4, r0
 8008e12:	460d      	mov	r5, r1
 8008e14:	d904      	bls.n	8008e20 <_raise_r+0x14>
 8008e16:	2316      	movs	r3, #22
 8008e18:	6003      	str	r3, [r0, #0]
 8008e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e1e:	bd38      	pop	{r3, r4, r5, pc}
 8008e20:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008e22:	b112      	cbz	r2, 8008e2a <_raise_r+0x1e>
 8008e24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e28:	b94b      	cbnz	r3, 8008e3e <_raise_r+0x32>
 8008e2a:	4620      	mov	r0, r4
 8008e2c:	f000 f830 	bl	8008e90 <_getpid_r>
 8008e30:	462a      	mov	r2, r5
 8008e32:	4601      	mov	r1, r0
 8008e34:	4620      	mov	r0, r4
 8008e36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e3a:	f000 b817 	b.w	8008e6c <_kill_r>
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d00a      	beq.n	8008e58 <_raise_r+0x4c>
 8008e42:	1c59      	adds	r1, r3, #1
 8008e44:	d103      	bne.n	8008e4e <_raise_r+0x42>
 8008e46:	2316      	movs	r3, #22
 8008e48:	6003      	str	r3, [r0, #0]
 8008e4a:	2001      	movs	r0, #1
 8008e4c:	e7e7      	b.n	8008e1e <_raise_r+0x12>
 8008e4e:	2400      	movs	r4, #0
 8008e50:	4628      	mov	r0, r5
 8008e52:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008e56:	4798      	blx	r3
 8008e58:	2000      	movs	r0, #0
 8008e5a:	e7e0      	b.n	8008e1e <_raise_r+0x12>

08008e5c <raise>:
 8008e5c:	4b02      	ldr	r3, [pc, #8]	; (8008e68 <raise+0xc>)
 8008e5e:	4601      	mov	r1, r0
 8008e60:	6818      	ldr	r0, [r3, #0]
 8008e62:	f7ff bfd3 	b.w	8008e0c <_raise_r>
 8008e66:	bf00      	nop
 8008e68:	20000080 	.word	0x20000080

08008e6c <_kill_r>:
 8008e6c:	b538      	push	{r3, r4, r5, lr}
 8008e6e:	2300      	movs	r3, #0
 8008e70:	4d06      	ldr	r5, [pc, #24]	; (8008e8c <_kill_r+0x20>)
 8008e72:	4604      	mov	r4, r0
 8008e74:	4608      	mov	r0, r1
 8008e76:	4611      	mov	r1, r2
 8008e78:	602b      	str	r3, [r5, #0]
 8008e7a:	f7f9 fb06 	bl	800248a <_kill>
 8008e7e:	1c43      	adds	r3, r0, #1
 8008e80:	d102      	bne.n	8008e88 <_kill_r+0x1c>
 8008e82:	682b      	ldr	r3, [r5, #0]
 8008e84:	b103      	cbz	r3, 8008e88 <_kill_r+0x1c>
 8008e86:	6023      	str	r3, [r4, #0]
 8008e88:	bd38      	pop	{r3, r4, r5, pc}
 8008e8a:	bf00      	nop
 8008e8c:	20000850 	.word	0x20000850

08008e90 <_getpid_r>:
 8008e90:	f7f9 baf4 	b.w	800247c <_getpid>

08008e94 <__swhatbuf_r>:
 8008e94:	b570      	push	{r4, r5, r6, lr}
 8008e96:	460c      	mov	r4, r1
 8008e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e9c:	4615      	mov	r5, r2
 8008e9e:	2900      	cmp	r1, #0
 8008ea0:	461e      	mov	r6, r3
 8008ea2:	b096      	sub	sp, #88	; 0x58
 8008ea4:	da0c      	bge.n	8008ec0 <__swhatbuf_r+0x2c>
 8008ea6:	89a3      	ldrh	r3, [r4, #12]
 8008ea8:	2100      	movs	r1, #0
 8008eaa:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008eae:	bf0c      	ite	eq
 8008eb0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008eb4:	2340      	movne	r3, #64	; 0x40
 8008eb6:	2000      	movs	r0, #0
 8008eb8:	6031      	str	r1, [r6, #0]
 8008eba:	602b      	str	r3, [r5, #0]
 8008ebc:	b016      	add	sp, #88	; 0x58
 8008ebe:	bd70      	pop	{r4, r5, r6, pc}
 8008ec0:	466a      	mov	r2, sp
 8008ec2:	f000 f849 	bl	8008f58 <_fstat_r>
 8008ec6:	2800      	cmp	r0, #0
 8008ec8:	dbed      	blt.n	8008ea6 <__swhatbuf_r+0x12>
 8008eca:	9901      	ldr	r1, [sp, #4]
 8008ecc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008ed0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008ed4:	4259      	negs	r1, r3
 8008ed6:	4159      	adcs	r1, r3
 8008ed8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008edc:	e7eb      	b.n	8008eb6 <__swhatbuf_r+0x22>

08008ede <__smakebuf_r>:
 8008ede:	898b      	ldrh	r3, [r1, #12]
 8008ee0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ee2:	079d      	lsls	r5, r3, #30
 8008ee4:	4606      	mov	r6, r0
 8008ee6:	460c      	mov	r4, r1
 8008ee8:	d507      	bpl.n	8008efa <__smakebuf_r+0x1c>
 8008eea:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008eee:	6023      	str	r3, [r4, #0]
 8008ef0:	6123      	str	r3, [r4, #16]
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	6163      	str	r3, [r4, #20]
 8008ef6:	b002      	add	sp, #8
 8008ef8:	bd70      	pop	{r4, r5, r6, pc}
 8008efa:	466a      	mov	r2, sp
 8008efc:	ab01      	add	r3, sp, #4
 8008efe:	f7ff ffc9 	bl	8008e94 <__swhatbuf_r>
 8008f02:	9900      	ldr	r1, [sp, #0]
 8008f04:	4605      	mov	r5, r0
 8008f06:	4630      	mov	r0, r6
 8008f08:	f7fd fb96 	bl	8006638 <_malloc_r>
 8008f0c:	b948      	cbnz	r0, 8008f22 <__smakebuf_r+0x44>
 8008f0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f12:	059a      	lsls	r2, r3, #22
 8008f14:	d4ef      	bmi.n	8008ef6 <__smakebuf_r+0x18>
 8008f16:	f023 0303 	bic.w	r3, r3, #3
 8008f1a:	f043 0302 	orr.w	r3, r3, #2
 8008f1e:	81a3      	strh	r3, [r4, #12]
 8008f20:	e7e3      	b.n	8008eea <__smakebuf_r+0xc>
 8008f22:	89a3      	ldrh	r3, [r4, #12]
 8008f24:	6020      	str	r0, [r4, #0]
 8008f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f2a:	81a3      	strh	r3, [r4, #12]
 8008f2c:	9b00      	ldr	r3, [sp, #0]
 8008f2e:	6120      	str	r0, [r4, #16]
 8008f30:	6163      	str	r3, [r4, #20]
 8008f32:	9b01      	ldr	r3, [sp, #4]
 8008f34:	b15b      	cbz	r3, 8008f4e <__smakebuf_r+0x70>
 8008f36:	4630      	mov	r0, r6
 8008f38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f3c:	f000 f81e 	bl	8008f7c <_isatty_r>
 8008f40:	b128      	cbz	r0, 8008f4e <__smakebuf_r+0x70>
 8008f42:	89a3      	ldrh	r3, [r4, #12]
 8008f44:	f023 0303 	bic.w	r3, r3, #3
 8008f48:	f043 0301 	orr.w	r3, r3, #1
 8008f4c:	81a3      	strh	r3, [r4, #12]
 8008f4e:	89a3      	ldrh	r3, [r4, #12]
 8008f50:	431d      	orrs	r5, r3
 8008f52:	81a5      	strh	r5, [r4, #12]
 8008f54:	e7cf      	b.n	8008ef6 <__smakebuf_r+0x18>
	...

08008f58 <_fstat_r>:
 8008f58:	b538      	push	{r3, r4, r5, lr}
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	4d06      	ldr	r5, [pc, #24]	; (8008f78 <_fstat_r+0x20>)
 8008f5e:	4604      	mov	r4, r0
 8008f60:	4608      	mov	r0, r1
 8008f62:	4611      	mov	r1, r2
 8008f64:	602b      	str	r3, [r5, #0]
 8008f66:	f7f9 faee 	bl	8002546 <_fstat>
 8008f6a:	1c43      	adds	r3, r0, #1
 8008f6c:	d102      	bne.n	8008f74 <_fstat_r+0x1c>
 8008f6e:	682b      	ldr	r3, [r5, #0]
 8008f70:	b103      	cbz	r3, 8008f74 <_fstat_r+0x1c>
 8008f72:	6023      	str	r3, [r4, #0]
 8008f74:	bd38      	pop	{r3, r4, r5, pc}
 8008f76:	bf00      	nop
 8008f78:	20000850 	.word	0x20000850

08008f7c <_isatty_r>:
 8008f7c:	b538      	push	{r3, r4, r5, lr}
 8008f7e:	2300      	movs	r3, #0
 8008f80:	4d05      	ldr	r5, [pc, #20]	; (8008f98 <_isatty_r+0x1c>)
 8008f82:	4604      	mov	r4, r0
 8008f84:	4608      	mov	r0, r1
 8008f86:	602b      	str	r3, [r5, #0]
 8008f88:	f7f9 faec 	bl	8002564 <_isatty>
 8008f8c:	1c43      	adds	r3, r0, #1
 8008f8e:	d102      	bne.n	8008f96 <_isatty_r+0x1a>
 8008f90:	682b      	ldr	r3, [r5, #0]
 8008f92:	b103      	cbz	r3, 8008f96 <_isatty_r+0x1a>
 8008f94:	6023      	str	r3, [r4, #0]
 8008f96:	bd38      	pop	{r3, r4, r5, pc}
 8008f98:	20000850 	.word	0x20000850

08008f9c <_init>:
 8008f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f9e:	bf00      	nop
 8008fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fa2:	bc08      	pop	{r3}
 8008fa4:	469e      	mov	lr, r3
 8008fa6:	4770      	bx	lr

08008fa8 <_fini>:
 8008fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008faa:	bf00      	nop
 8008fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fae:	bc08      	pop	{r3}
 8008fb0:	469e      	mov	lr, r3
 8008fb2:	4770      	bx	lr
