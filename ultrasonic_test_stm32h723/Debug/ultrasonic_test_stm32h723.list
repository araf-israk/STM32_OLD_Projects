
ultrasonic_test_stm32h723.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b30  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002e00  08002e00  00012e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002e10  08002e10  00012e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002e14  08002e14  00012e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08002e18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000007c  24000010  08002e28  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400008c  08002e28  0002008c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000cb54  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000019ef  00000000  00000000  0002cbd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000be0  00000000  00000000  0002e5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000092a  00000000  00000000  0002f1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031365  00000000  00000000  0002fad2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000d4c4  00000000  00000000  00060e37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00142f6f  00000000  00000000  0006e2fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000031b0  00000000  00000000  001b126c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000059  00000000  00000000  001b441c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000010 	.word	0x24000010
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08002de8 	.word	0x08002de8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000014 	.word	0x24000014
 800030c:	08002de8 	.word	0x08002de8

08000310 <delay>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void delay (uint16_t time)
{
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800031a:	4b09      	ldr	r3, [pc, #36]	; (8000340 <delay+0x30>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	2200      	movs	r2, #0
 8000320:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < time);
 8000322:	bf00      	nop
 8000324:	4b06      	ldr	r3, [pc, #24]	; (8000340 <delay+0x30>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800032a:	88fb      	ldrh	r3, [r7, #6]
 800032c:	429a      	cmp	r2, r3
 800032e:	d3f9      	bcc.n	8000324 <delay+0x14>
}
 8000330:	bf00      	nop
 8000332:	bf00      	nop
 8000334:	370c      	adds	r7, #12
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	2400002c 	.word	0x2400002c
 8000344:	00000000 	.word	0x00000000

08000348 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	7f1b      	ldrb	r3, [r3, #28]
 8000354:	2b01      	cmp	r3, #1
 8000356:	d17a      	bne.n	800044e <HAL_TIM_IC_CaptureCallback+0x106>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8000358:	4b41      	ldr	r3, [pc, #260]	; (8000460 <HAL_TIM_IC_CaptureCallback+0x118>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d11a      	bne.n	8000396 <HAL_TIM_IC_CaptureCallback+0x4e>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000360:	2100      	movs	r1, #0
 8000362:	6878      	ldr	r0, [r7, #4]
 8000364:	f002 f9e0 	bl	8002728 <HAL_TIM_ReadCapturedValue>
 8000368:	4603      	mov	r3, r0
 800036a:	4a3e      	ldr	r2, [pc, #248]	; (8000464 <HAL_TIM_IC_CaptureCallback+0x11c>)
 800036c:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 800036e:	4b3c      	ldr	r3, [pc, #240]	; (8000460 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000370:	2201      	movs	r2, #1
 8000372:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	6a1a      	ldr	r2, [r3, #32]
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	f022 020a 	bic.w	r2, r2, #10
 8000382:	621a      	str	r2, [r3, #32]
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	6a1a      	ldr	r2, [r3, #32]
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	f042 0202 	orr.w	r2, r2, #2
 8000392:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8000394:	e05b      	b.n	800044e <HAL_TIM_IC_CaptureCallback+0x106>
		else if (Is_First_Captured==1)   // if the first is already captured
 8000396:	4b32      	ldr	r3, [pc, #200]	; (8000460 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	2b01      	cmp	r3, #1
 800039c:	d157      	bne.n	800044e <HAL_TIM_IC_CaptureCallback+0x106>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 800039e:	2100      	movs	r1, #0
 80003a0:	6878      	ldr	r0, [r7, #4]
 80003a2:	f002 f9c1 	bl	8002728 <HAL_TIM_ReadCapturedValue>
 80003a6:	4603      	mov	r3, r0
 80003a8:	4a2f      	ldr	r2, [pc, #188]	; (8000468 <HAL_TIM_IC_CaptureCallback+0x120>)
 80003aa:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	2200      	movs	r2, #0
 80003b2:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 80003b4:	4b2c      	ldr	r3, [pc, #176]	; (8000468 <HAL_TIM_IC_CaptureCallback+0x120>)
 80003b6:	681a      	ldr	r2, [r3, #0]
 80003b8:	4b2a      	ldr	r3, [pc, #168]	; (8000464 <HAL_TIM_IC_CaptureCallback+0x11c>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	429a      	cmp	r2, r3
 80003be:	d907      	bls.n	80003d0 <HAL_TIM_IC_CaptureCallback+0x88>
				Difference = IC_Val2-IC_Val1;
 80003c0:	4b29      	ldr	r3, [pc, #164]	; (8000468 <HAL_TIM_IC_CaptureCallback+0x120>)
 80003c2:	681a      	ldr	r2, [r3, #0]
 80003c4:	4b27      	ldr	r3, [pc, #156]	; (8000464 <HAL_TIM_IC_CaptureCallback+0x11c>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	1ad3      	subs	r3, r2, r3
 80003ca:	4a28      	ldr	r2, [pc, #160]	; (800046c <HAL_TIM_IC_CaptureCallback+0x124>)
 80003cc:	6013      	str	r3, [r2, #0]
 80003ce:	e00f      	b.n	80003f0 <HAL_TIM_IC_CaptureCallback+0xa8>
			else if (IC_Val1 > IC_Val2)
 80003d0:	4b24      	ldr	r3, [pc, #144]	; (8000464 <HAL_TIM_IC_CaptureCallback+0x11c>)
 80003d2:	681a      	ldr	r2, [r3, #0]
 80003d4:	4b24      	ldr	r3, [pc, #144]	; (8000468 <HAL_TIM_IC_CaptureCallback+0x120>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	429a      	cmp	r2, r3
 80003da:	d909      	bls.n	80003f0 <HAL_TIM_IC_CaptureCallback+0xa8>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 80003dc:	4b22      	ldr	r3, [pc, #136]	; (8000468 <HAL_TIM_IC_CaptureCallback+0x120>)
 80003de:	681a      	ldr	r2, [r3, #0]
 80003e0:	4b20      	ldr	r3, [pc, #128]	; (8000464 <HAL_TIM_IC_CaptureCallback+0x11c>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	1ad2      	subs	r2, r2, r3
 80003e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80003ea:	4413      	add	r3, r2
 80003ec:	4a1f      	ldr	r2, [pc, #124]	; (800046c <HAL_TIM_IC_CaptureCallback+0x124>)
 80003ee:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 80003f0:	4b1e      	ldr	r3, [pc, #120]	; (800046c <HAL_TIM_IC_CaptureCallback+0x124>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	ee07 3a90 	vmov	s15, r3
 80003f8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80003fc:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8000458 <HAL_TIM_IC_CaptureCallback+0x110>
 8000400:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000404:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000408:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800040c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000410:	edc7 7a00 	vstr	s15, [r7]
 8000414:	783b      	ldrb	r3, [r7, #0]
 8000416:	b2da      	uxtb	r2, r3
 8000418:	4b15      	ldr	r3, [pc, #84]	; (8000470 <HAL_TIM_IC_CaptureCallback+0x128>)
 800041a:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 800041c:	4b10      	ldr	r3, [pc, #64]	; (8000460 <HAL_TIM_IC_CaptureCallback+0x118>)
 800041e:	2200      	movs	r2, #0
 8000420:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	6a1a      	ldr	r2, [r3, #32]
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	f022 020a 	bic.w	r2, r2, #10
 8000430:	621a      	str	r2, [r3, #32]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	681a      	ldr	r2, [r3, #0]
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	6a12      	ldr	r2, [r2, #32]
 800043c:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 800043e:	4b0d      	ldr	r3, [pc, #52]	; (8000474 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	68da      	ldr	r2, [r3, #12]
 8000444:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	f022 0202 	bic.w	r2, r2, #2
 800044c:	60da      	str	r2, [r3, #12]
}
 800044e:	bf00      	nop
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	b020c49c 	.word	0xb020c49c
 800045c:	3fa16872 	.word	0x3fa16872
 8000460:	24000084 	.word	0x24000084
 8000464:	24000078 	.word	0x24000078
 8000468:	2400007c 	.word	0x2400007c
 800046c:	24000080 	.word	0x24000080
 8000470:	24000085 	.word	0x24000085
 8000474:	2400002c 	.word	0x2400002c

08000478 <HCSR04_Read>:

void HCSR04_Read (void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 800047c:	2201      	movs	r2, #1
 800047e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000482:	480b      	ldr	r0, [pc, #44]	; (80004b0 <HCSR04_Read+0x38>)
 8000484:	f000 fe98 	bl	80011b8 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8000488:	200a      	movs	r0, #10
 800048a:	f7ff ff41 	bl	8000310 <delay>
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 800048e:	2200      	movs	r2, #0
 8000490:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000494:	4806      	ldr	r0, [pc, #24]	; (80004b0 <HCSR04_Read+0x38>)
 8000496:	f000 fe8f 	bl	80011b8 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 800049a:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <HCSR04_Read+0x3c>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	68da      	ldr	r2, [r3, #12]
 80004a0:	4b04      	ldr	r3, [pc, #16]	; (80004b4 <HCSR04_Read+0x3c>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	f042 0202 	orr.w	r2, r2, #2
 80004a8:	60da      	str	r2, [r3, #12]
}
 80004aa:	bf00      	nop
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	58021000 	.word	0x58021000
 80004b4:	2400002c 	.word	0x2400002c

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80004bc:	f000 f922 	bl	8000704 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c0:	f000 fa94 	bl	80009ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c4:	f000 f810 	bl	80004e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c8:	f000 f8d6 	bl	8000678 <MX_GPIO_Init>
  MX_TIM1_Init();
 80004cc:	f000 f87a 	bl	80005c4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80004d0:	2100      	movs	r1, #0
 80004d2:	4804      	ldr	r0, [pc, #16]	; (80004e4 <main+0x2c>)
 80004d4:	f001 fe26 	bl	8002124 <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HCSR04_Read();
 80004d8:	f7ff ffce 	bl	8000478 <HCSR04_Read>
	  HAL_Delay(200);
 80004dc:	20c8      	movs	r0, #200	; 0xc8
 80004de:	f000 fb17 	bl	8000b10 <HAL_Delay>
	  HCSR04_Read();
 80004e2:	e7f9      	b.n	80004d8 <main+0x20>
 80004e4:	2400002c 	.word	0x2400002c

080004e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b09c      	sub	sp, #112	; 0x70
 80004ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004f2:	224c      	movs	r2, #76	; 0x4c
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f002 fc4a 	bl	8002d90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	2220      	movs	r2, #32
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f002 fc44 	bl	8002d90 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000508:	2002      	movs	r0, #2
 800050a:	f000 fe6f 	bl	80011ec <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800050e:	2300      	movs	r3, #0
 8000510:	603b      	str	r3, [r7, #0]
 8000512:	4b2b      	ldr	r3, [pc, #172]	; (80005c0 <SystemClock_Config+0xd8>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	4a2a      	ldr	r2, [pc, #168]	; (80005c0 <SystemClock_Config+0xd8>)
 8000518:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800051c:	6193      	str	r3, [r2, #24]
 800051e:	4b28      	ldr	r3, [pc, #160]	; (80005c0 <SystemClock_Config+0xd8>)
 8000520:	699b      	ldr	r3, [r3, #24]
 8000522:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000526:	603b      	str	r3, [r7, #0]
 8000528:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800052a:	bf00      	nop
 800052c:	4b24      	ldr	r3, [pc, #144]	; (80005c0 <SystemClock_Config+0xd8>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000534:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000538:	d1f8      	bne.n	800052c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800053a:	2301      	movs	r3, #1
 800053c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800053e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000542:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000544:	2302      	movs	r3, #2
 8000546:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000548:	2302      	movs	r3, #2
 800054a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800054c:	2302      	movs	r3, #2
 800054e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000550:	232c      	movs	r3, #44	; 0x2c
 8000552:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000554:	2301      	movs	r3, #1
 8000556:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000558:	2302      	movs	r3, #2
 800055a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800055c:	2302      	movs	r3, #2
 800055e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000560:	230c      	movs	r3, #12
 8000562:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000564:	2300      	movs	r3, #0
 8000566:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000568:	2300      	movs	r3, #0
 800056a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000570:	4618      	mov	r0, r3
 8000572:	f000 fe75 	bl	8001260 <HAL_RCC_OscConfig>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800057c:	f000 f8ee 	bl	800075c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000580:	233f      	movs	r3, #63	; 0x3f
 8000582:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000584:	2303      	movs	r3, #3
 8000586:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000588:	2300      	movs	r3, #0
 800058a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800058c:	2308      	movs	r3, #8
 800058e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000590:	2340      	movs	r3, #64	; 0x40
 8000592:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000594:	2340      	movs	r3, #64	; 0x40
 8000596:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000598:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800059c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800059e:	2340      	movs	r3, #64	; 0x40
 80005a0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	2103      	movs	r1, #3
 80005a6:	4618      	mov	r0, r3
 80005a8:	f001 fa34 	bl	8001a14 <HAL_RCC_ClockConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80005b2:	f000 f8d3 	bl	800075c <Error_Handler>
  }
}
 80005b6:	bf00      	nop
 80005b8:	3770      	adds	r7, #112	; 0x70
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	58024800 	.word	0x58024800

080005c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b088      	sub	sp, #32
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ca:	f107 0314 	add.w	r3, r7, #20
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005e2:	4b23      	ldr	r3, [pc, #140]	; (8000670 <MX_TIM1_Init+0xac>)
 80005e4:	4a23      	ldr	r2, [pc, #140]	; (8000674 <MX_TIM1_Init+0xb0>)
 80005e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 275-1;
 80005e8:	4b21      	ldr	r3, [pc, #132]	; (8000670 <MX_TIM1_Init+0xac>)
 80005ea:	f44f 7289 	mov.w	r2, #274	; 0x112
 80005ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f0:	4b1f      	ldr	r3, [pc, #124]	; (8000670 <MX_TIM1_Init+0xac>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80005f6:	4b1e      	ldr	r3, [pc, #120]	; (8000670 <MX_TIM1_Init+0xac>)
 80005f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005fe:	4b1c      	ldr	r3, [pc, #112]	; (8000670 <MX_TIM1_Init+0xac>)
 8000600:	2200      	movs	r2, #0
 8000602:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000604:	4b1a      	ldr	r3, [pc, #104]	; (8000670 <MX_TIM1_Init+0xac>)
 8000606:	2200      	movs	r2, #0
 8000608:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800060a:	4b19      	ldr	r3, [pc, #100]	; (8000670 <MX_TIM1_Init+0xac>)
 800060c:	2200      	movs	r2, #0
 800060e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000610:	4817      	ldr	r0, [pc, #92]	; (8000670 <MX_TIM1_Init+0xac>)
 8000612:	f001 fd2f 	bl	8002074 <HAL_TIM_IC_Init>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 800061c:	f000 f89e 	bl	800075c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000624:	2300      	movs	r3, #0
 8000626:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000628:	2300      	movs	r3, #0
 800062a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	4619      	mov	r1, r3
 8000632:	480f      	ldr	r0, [pc, #60]	; (8000670 <MX_TIM1_Init+0xac>)
 8000634:	f002 faf2 	bl	8002c1c <HAL_TIMEx_MasterConfigSynchronization>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800063e:	f000 f88d 	bl	800075c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000642:	2300      	movs	r3, #0
 8000644:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000646:	2301      	movs	r3, #1
 8000648:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	2200      	movs	r2, #0
 8000656:	4619      	mov	r1, r3
 8000658:	4805      	ldr	r0, [pc, #20]	; (8000670 <MX_TIM1_Init+0xac>)
 800065a:	f001 ffc8 	bl	80025ee <HAL_TIM_IC_ConfigChannel>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000664:	f000 f87a 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000668:	bf00      	nop
 800066a:	3720      	adds	r7, #32
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	2400002c 	.word	0x2400002c
 8000674:	40010000 	.word	0x40010000

08000678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 030c 	add.w	r3, r7, #12
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068e:	4b1b      	ldr	r3, [pc, #108]	; (80006fc <MX_GPIO_Init+0x84>)
 8000690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000694:	4a19      	ldr	r2, [pc, #100]	; (80006fc <MX_GPIO_Init+0x84>)
 8000696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800069a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800069e:	4b17      	ldr	r3, [pc, #92]	; (80006fc <MX_GPIO_Init+0x84>)
 80006a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006ac:	4b13      	ldr	r3, [pc, #76]	; (80006fc <MX_GPIO_Init+0x84>)
 80006ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b2:	4a12      	ldr	r2, [pc, #72]	; (80006fc <MX_GPIO_Init+0x84>)
 80006b4:	f043 0310 	orr.w	r3, r3, #16
 80006b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_GPIO_Init+0x84>)
 80006be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c2:	f003 0310 	and.w	r3, r3, #16
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006d0:	480b      	ldr	r0, [pc, #44]	; (8000700 <MX_GPIO_Init+0x88>)
 80006d2:	f000 fd71 	bl	80011b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 80006d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006dc:	2301      	movs	r3, #1
 80006de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006e0:	2302      	movs	r3, #2
 80006e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006e4:	2302      	movs	r3, #2
 80006e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	4619      	mov	r1, r3
 80006ee:	4804      	ldr	r0, [pc, #16]	; (8000700 <MX_GPIO_Init+0x88>)
 80006f0:	f000 fbba 	bl	8000e68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006f4:	bf00      	nop
 80006f6:	3720      	adds	r7, #32
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	58024400 	.word	0x58024400
 8000700:	58021000 	.word	0x58021000

08000704 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800070a:	463b      	mov	r3, r7
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000716:	f000 fb2f 	bl	8000d78 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800071a:	2301      	movs	r3, #1
 800071c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800071e:	2300      	movs	r3, #0
 8000720:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000726:	231f      	movs	r3, #31
 8000728:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800072a:	2387      	movs	r3, #135	; 0x87
 800072c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800072e:	2300      	movs	r3, #0
 8000730:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000732:	2300      	movs	r3, #0
 8000734:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000736:	2301      	movs	r3, #1
 8000738:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800073a:	2301      	movs	r3, #1
 800073c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800073e:	2300      	movs	r3, #0
 8000740:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000742:	2300      	movs	r3, #0
 8000744:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000746:	463b      	mov	r3, r7
 8000748:	4618      	mov	r0, r3
 800074a:	f000 fb4d 	bl	8000de8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800074e:	2004      	movs	r0, #4
 8000750:	f000 fb2a 	bl	8000da8 <HAL_MPU_Enable>

}
 8000754:	bf00      	nop
 8000756:	3710      	adds	r7, #16
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000760:	b672      	cpsid	i
}
 8000762:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000764:	e7fe      	b.n	8000764 <Error_Handler+0x8>
	...

08000768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076e:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <HAL_MspInit+0x30>)
 8000770:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000774:	4a08      	ldr	r2, [pc, #32]	; (8000798 <HAL_MspInit+0x30>)
 8000776:	f043 0302 	orr.w	r3, r3, #2
 800077a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <HAL_MspInit+0x30>)
 8000780:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000784:	f003 0302 	and.w	r3, r3, #2
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	58024400 	.word	0x58024400

0800079c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	; 0x28
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a1e      	ldr	r2, [pc, #120]	; (8000834 <HAL_TIM_IC_MspInit+0x98>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d136      	bne.n	800082c <HAL_TIM_IC_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80007be:	4b1e      	ldr	r3, [pc, #120]	; (8000838 <HAL_TIM_IC_MspInit+0x9c>)
 80007c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80007c4:	4a1c      	ldr	r2, [pc, #112]	; (8000838 <HAL_TIM_IC_MspInit+0x9c>)
 80007c6:	f043 0301 	orr.w	r3, r3, #1
 80007ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80007ce:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <HAL_TIM_IC_MspInit+0x9c>)
 80007d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80007d4:	f003 0301 	and.w	r3, r3, #1
 80007d8:	613b      	str	r3, [r7, #16]
 80007da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80007dc:	4b16      	ldr	r3, [pc, #88]	; (8000838 <HAL_TIM_IC_MspInit+0x9c>)
 80007de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e2:	4a15      	ldr	r2, [pc, #84]	; (8000838 <HAL_TIM_IC_MspInit+0x9c>)
 80007e4:	f043 0310 	orr.w	r3, r3, #16
 80007e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <HAL_TIM_IC_MspInit+0x9c>)
 80007ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f2:	f003 0310 	and.w	r3, r3, #16
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000800:	2302      	movs	r3, #2
 8000802:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	2300      	movs	r3, #0
 800080a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800080c:	2301      	movs	r3, #1
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4619      	mov	r1, r3
 8000816:	4809      	ldr	r0, [pc, #36]	; (800083c <HAL_TIM_IC_MspInit+0xa0>)
 8000818:	f000 fb26 	bl	8000e68 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800081c:	2200      	movs	r2, #0
 800081e:	2100      	movs	r1, #0
 8000820:	201b      	movs	r0, #27
 8000822:	f000 fa74 	bl	8000d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000826:	201b      	movs	r0, #27
 8000828:	f000 fa8b 	bl	8000d42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800082c:	bf00      	nop
 800082e:	3728      	adds	r7, #40	; 0x28
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40010000 	.word	0x40010000
 8000838:	58024400 	.word	0x58024400
 800083c:	58021000 	.word	0x58021000

08000840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000844:	e7fe      	b.n	8000844 <NMI_Handler+0x4>

08000846 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800084a:	e7fe      	b.n	800084a <HardFault_Handler+0x4>

0800084c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000850:	e7fe      	b.n	8000850 <MemManage_Handler+0x4>

08000852 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000856:	e7fe      	b.n	8000856 <BusFault_Handler+0x4>

08000858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800085c:	e7fe      	b.n	800085c <UsageFault_Handler+0x4>

0800085e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr

0800087a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800088c:	f000 f920 	bl	8000ad0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}

08000894 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000898:	4802      	ldr	r0, [pc, #8]	; (80008a4 <TIM1_CC_IRQHandler+0x10>)
 800089a:	f001 fda1 	bl	80023e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	2400002c 	.word	0x2400002c

080008a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008ac:	4b32      	ldr	r3, [pc, #200]	; (8000978 <SystemInit+0xd0>)
 80008ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008b2:	4a31      	ldr	r2, [pc, #196]	; (8000978 <SystemInit+0xd0>)
 80008b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80008bc:	4b2f      	ldr	r3, [pc, #188]	; (800097c <SystemInit+0xd4>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f003 030f 	and.w	r3, r3, #15
 80008c4:	2b06      	cmp	r3, #6
 80008c6:	d807      	bhi.n	80008d8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80008c8:	4b2c      	ldr	r3, [pc, #176]	; (800097c <SystemInit+0xd4>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f023 030f 	bic.w	r3, r3, #15
 80008d0:	4a2a      	ldr	r2, [pc, #168]	; (800097c <SystemInit+0xd4>)
 80008d2:	f043 0307 	orr.w	r3, r3, #7
 80008d6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80008d8:	4b29      	ldr	r3, [pc, #164]	; (8000980 <SystemInit+0xd8>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a28      	ldr	r2, [pc, #160]	; (8000980 <SystemInit+0xd8>)
 80008de:	f043 0301 	orr.w	r3, r3, #1
 80008e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80008e4:	4b26      	ldr	r3, [pc, #152]	; (8000980 <SystemInit+0xd8>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80008ea:	4b25      	ldr	r3, [pc, #148]	; (8000980 <SystemInit+0xd8>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	4924      	ldr	r1, [pc, #144]	; (8000980 <SystemInit+0xd8>)
 80008f0:	4b24      	ldr	r3, [pc, #144]	; (8000984 <SystemInit+0xdc>)
 80008f2:	4013      	ands	r3, r2
 80008f4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80008f6:	4b21      	ldr	r3, [pc, #132]	; (800097c <SystemInit+0xd4>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	f003 0308 	and.w	r3, r3, #8
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d007      	beq.n	8000912 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000902:	4b1e      	ldr	r3, [pc, #120]	; (800097c <SystemInit+0xd4>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	f023 030f 	bic.w	r3, r3, #15
 800090a:	4a1c      	ldr	r2, [pc, #112]	; (800097c <SystemInit+0xd4>)
 800090c:	f043 0307 	orr.w	r3, r3, #7
 8000910:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000912:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <SystemInit+0xd8>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000918:	4b19      	ldr	r3, [pc, #100]	; (8000980 <SystemInit+0xd8>)
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800091e:	4b18      	ldr	r3, [pc, #96]	; (8000980 <SystemInit+0xd8>)
 8000920:	2200      	movs	r2, #0
 8000922:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000924:	4b16      	ldr	r3, [pc, #88]	; (8000980 <SystemInit+0xd8>)
 8000926:	4a18      	ldr	r2, [pc, #96]	; (8000988 <SystemInit+0xe0>)
 8000928:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800092a:	4b15      	ldr	r3, [pc, #84]	; (8000980 <SystemInit+0xd8>)
 800092c:	4a17      	ldr	r2, [pc, #92]	; (800098c <SystemInit+0xe4>)
 800092e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000930:	4b13      	ldr	r3, [pc, #76]	; (8000980 <SystemInit+0xd8>)
 8000932:	4a17      	ldr	r2, [pc, #92]	; (8000990 <SystemInit+0xe8>)
 8000934:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000936:	4b12      	ldr	r3, [pc, #72]	; (8000980 <SystemInit+0xd8>)
 8000938:	2200      	movs	r2, #0
 800093a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800093c:	4b10      	ldr	r3, [pc, #64]	; (8000980 <SystemInit+0xd8>)
 800093e:	4a14      	ldr	r2, [pc, #80]	; (8000990 <SystemInit+0xe8>)
 8000940:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000942:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <SystemInit+0xd8>)
 8000944:	2200      	movs	r2, #0
 8000946:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000948:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <SystemInit+0xd8>)
 800094a:	4a11      	ldr	r2, [pc, #68]	; (8000990 <SystemInit+0xe8>)
 800094c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800094e:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <SystemInit+0xd8>)
 8000950:	2200      	movs	r2, #0
 8000952:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000954:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <SystemInit+0xd8>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a09      	ldr	r2, [pc, #36]	; (8000980 <SystemInit+0xd8>)
 800095a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800095e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000960:	4b07      	ldr	r3, [pc, #28]	; (8000980 <SystemInit+0xd8>)
 8000962:	2200      	movs	r2, #0
 8000964:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <SystemInit+0xec>)
 8000968:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800096c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	e000ed00 	.word	0xe000ed00
 800097c:	52002000 	.word	0x52002000
 8000980:	58024400 	.word	0x58024400
 8000984:	eaf6ed7f 	.word	0xeaf6ed7f
 8000988:	02020200 	.word	0x02020200
 800098c:	01ff0000 	.word	0x01ff0000
 8000990:	01010280 	.word	0x01010280
 8000994:	52004000 	.word	0x52004000

08000998 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000998:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800099c:	f7ff ff84 	bl	80008a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009a0:	480c      	ldr	r0, [pc, #48]	; (80009d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009a2:	490d      	ldr	r1, [pc, #52]	; (80009d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009a4:	4a0d      	ldr	r2, [pc, #52]	; (80009dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a8:	e002      	b.n	80009b0 <LoopCopyDataInit>

080009aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ae:	3304      	adds	r3, #4

080009b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b4:	d3f9      	bcc.n	80009aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b6:	4a0a      	ldr	r2, [pc, #40]	; (80009e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009b8:	4c0a      	ldr	r4, [pc, #40]	; (80009e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009bc:	e001      	b.n	80009c2 <LoopFillZerobss>

080009be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c0:	3204      	adds	r2, #4

080009c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c4:	d3fb      	bcc.n	80009be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009c6:	f002 f9eb 	bl	8002da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ca:	f7ff fd75 	bl	80004b8 <main>
  bx  lr
 80009ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009d0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80009d4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80009d8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80009dc:	08002e18 	.word	0x08002e18
  ldr r2, =_sbss
 80009e0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80009e4:	2400008c 	.word	0x2400008c

080009e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009e8:	e7fe      	b.n	80009e8 <ADC3_IRQHandler>
	...

080009ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f2:	2003      	movs	r0, #3
 80009f4:	f000 f980 	bl	8000cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80009f8:	f001 f9c2 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 80009fc:	4602      	mov	r2, r0
 80009fe:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <HAL_Init+0x68>)
 8000a00:	699b      	ldr	r3, [r3, #24]
 8000a02:	0a1b      	lsrs	r3, r3, #8
 8000a04:	f003 030f 	and.w	r3, r3, #15
 8000a08:	4913      	ldr	r1, [pc, #76]	; (8000a58 <HAL_Init+0x6c>)
 8000a0a:	5ccb      	ldrb	r3, [r1, r3]
 8000a0c:	f003 031f 	and.w	r3, r3, #31
 8000a10:	fa22 f303 	lsr.w	r3, r2, r3
 8000a14:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000a16:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <HAL_Init+0x68>)
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	f003 030f 	and.w	r3, r3, #15
 8000a1e:	4a0e      	ldr	r2, [pc, #56]	; (8000a58 <HAL_Init+0x6c>)
 8000a20:	5cd3      	ldrb	r3, [r2, r3]
 8000a22:	f003 031f 	and.w	r3, r3, #31
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	fa22 f303 	lsr.w	r3, r2, r3
 8000a2c:	4a0b      	ldr	r2, [pc, #44]	; (8000a5c <HAL_Init+0x70>)
 8000a2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000a30:	4a0b      	ldr	r2, [pc, #44]	; (8000a60 <HAL_Init+0x74>)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a36:	200f      	movs	r0, #15
 8000a38:	f000 f814 	bl	8000a64 <HAL_InitTick>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
 8000a44:	e002      	b.n	8000a4c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000a46:	f7ff fe8f 	bl	8000768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a4a:	2300      	movs	r3, #0
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	58024400 	.word	0x58024400
 8000a58:	08002e00 	.word	0x08002e00
 8000a5c:	24000004 	.word	0x24000004
 8000a60:	24000000 	.word	0x24000000

08000a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000a6c:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <HAL_InitTick+0x60>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d101      	bne.n	8000a78 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000a74:	2301      	movs	r3, #1
 8000a76:	e021      	b.n	8000abc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000a78:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <HAL_InitTick+0x64>)
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <HAL_InitTick+0x60>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	4619      	mov	r1, r3
 8000a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f000 f965 	bl	8000d5e <HAL_SYSTICK_Config>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e00e      	b.n	8000abc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2b0f      	cmp	r3, #15
 8000aa2:	d80a      	bhi.n	8000aba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	6879      	ldr	r1, [r7, #4]
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	f000 f92f 	bl	8000d0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab0:	4a06      	ldr	r2, [pc, #24]	; (8000acc <HAL_InitTick+0x68>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	e000      	b.n	8000abc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	2400000c 	.word	0x2400000c
 8000ac8:	24000000 	.word	0x24000000
 8000acc:	24000008 	.word	0x24000008

08000ad0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_IncTick+0x20>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_IncTick+0x24>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4413      	add	r3, r2
 8000ae0:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <HAL_IncTick+0x24>)
 8000ae2:	6013      	str	r3, [r2, #0]
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	2400000c 	.word	0x2400000c
 8000af4:	24000088 	.word	0x24000088

08000af8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return uwTick;
 8000afc:	4b03      	ldr	r3, [pc, #12]	; (8000b0c <HAL_GetTick+0x14>)
 8000afe:	681b      	ldr	r3, [r3, #0]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	24000088 	.word	0x24000088

08000b10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b18:	f7ff ffee 	bl	8000af8 <HAL_GetTick>
 8000b1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b28:	d005      	beq.n	8000b36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <HAL_Delay+0x44>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	461a      	mov	r2, r3
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	4413      	add	r3, r2
 8000b34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b36:	bf00      	nop
 8000b38:	f7ff ffde 	bl	8000af8 <HAL_GetTick>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	68fa      	ldr	r2, [r7, #12]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d8f7      	bhi.n	8000b38 <HAL_Delay+0x28>
  {
  }
}
 8000b48:	bf00      	nop
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	2400000c 	.word	0x2400000c

08000b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b68:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <__NVIC_SetPriorityGrouping+0x40>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b6e:	68ba      	ldr	r2, [r7, #8]
 8000b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b74:	4013      	ands	r3, r2
 8000b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <__NVIC_SetPriorityGrouping+0x44>)
 8000b82:	4313      	orrs	r3, r2
 8000b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b86:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <__NVIC_SetPriorityGrouping+0x40>)
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	60d3      	str	r3, [r2, #12]
}
 8000b8c:	bf00      	nop
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000ed00 	.word	0xe000ed00
 8000b9c:	05fa0000 	.word	0x05fa0000

08000ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba4:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	0a1b      	lsrs	r3, r3, #8
 8000baa:	f003 0307 	and.w	r3, r3, #7
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000bc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	db0b      	blt.n	8000be6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bce:	88fb      	ldrh	r3, [r7, #6]
 8000bd0:	f003 021f 	and.w	r2, r3, #31
 8000bd4:	4907      	ldr	r1, [pc, #28]	; (8000bf4 <__NVIC_EnableIRQ+0x38>)
 8000bd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bda:	095b      	lsrs	r3, r3, #5
 8000bdc:	2001      	movs	r0, #1
 8000bde:	fa00 f202 	lsl.w	r2, r0, r2
 8000be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000e100 	.word	0xe000e100

08000bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	6039      	str	r1, [r7, #0]
 8000c02:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	db0a      	blt.n	8000c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	490c      	ldr	r1, [pc, #48]	; (8000c44 <__NVIC_SetPriority+0x4c>)
 8000c12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c16:	0112      	lsls	r2, r2, #4
 8000c18:	b2d2      	uxtb	r2, r2
 8000c1a:	440b      	add	r3, r1
 8000c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c20:	e00a      	b.n	8000c38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	4908      	ldr	r1, [pc, #32]	; (8000c48 <__NVIC_SetPriority+0x50>)
 8000c28:	88fb      	ldrh	r3, [r7, #6]
 8000c2a:	f003 030f 	and.w	r3, r3, #15
 8000c2e:	3b04      	subs	r3, #4
 8000c30:	0112      	lsls	r2, r2, #4
 8000c32:	b2d2      	uxtb	r2, r2
 8000c34:	440b      	add	r3, r1
 8000c36:	761a      	strb	r2, [r3, #24]
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000e100 	.word	0xe000e100
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b089      	sub	sp, #36	; 0x24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	f1c3 0307 	rsb	r3, r3, #7
 8000c66:	2b04      	cmp	r3, #4
 8000c68:	bf28      	it	cs
 8000c6a:	2304      	movcs	r3, #4
 8000c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	3304      	adds	r3, #4
 8000c72:	2b06      	cmp	r3, #6
 8000c74:	d902      	bls.n	8000c7c <NVIC_EncodePriority+0x30>
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3b03      	subs	r3, #3
 8000c7a:	e000      	b.n	8000c7e <NVIC_EncodePriority+0x32>
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c80:	f04f 32ff 	mov.w	r2, #4294967295
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43da      	mvns	r2, r3
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	401a      	ands	r2, r3
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c94:	f04f 31ff 	mov.w	r1, #4294967295
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9e:	43d9      	mvns	r1, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	4313      	orrs	r3, r2
         );
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3724      	adds	r7, #36	; 0x24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
	...

08000cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cc4:	d301      	bcc.n	8000cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e00f      	b.n	8000cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cca:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <SysTick_Config+0x40>)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd2:	210f      	movs	r1, #15
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd8:	f7ff ff8e 	bl	8000bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <SysTick_Config+0x40>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce2:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <SysTick_Config+0x40>)
 8000ce4:	2207      	movs	r2, #7
 8000ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	e000e010 	.word	0xe000e010

08000cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff ff29 	bl	8000b58 <__NVIC_SetPriorityGrouping>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b086      	sub	sp, #24
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	4603      	mov	r3, r0
 8000d16:	60b9      	str	r1, [r7, #8]
 8000d18:	607a      	str	r2, [r7, #4]
 8000d1a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d1c:	f7ff ff40 	bl	8000ba0 <__NVIC_GetPriorityGrouping>
 8000d20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	68b9      	ldr	r1, [r7, #8]
 8000d26:	6978      	ldr	r0, [r7, #20]
 8000d28:	f7ff ff90 	bl	8000c4c <NVIC_EncodePriority>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d32:	4611      	mov	r1, r2
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ff5f 	bl	8000bf8 <__NVIC_SetPriority>
}
 8000d3a:	bf00      	nop
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	4603      	mov	r3, r0
 8000d4a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ff33 	bl	8000bbc <__NVIC_EnableIRQ>
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff ffa4 	bl	8000cb4 <SysTick_Config>
 8000d6c:	4603      	mov	r3, r0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000d7c:	f3bf 8f5f 	dmb	sy
}
 8000d80:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000d82:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <HAL_MPU_Disable+0x28>)
 8000d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d86:	4a06      	ldr	r2, [pc, #24]	; (8000da0 <HAL_MPU_Disable+0x28>)
 8000d88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d8c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000d8e:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <HAL_MPU_Disable+0x2c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	605a      	str	r2, [r3, #4]
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	e000ed00 	.word	0xe000ed00
 8000da4:	e000ed90 	.word	0xe000ed90

08000da8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000db0:	4a0b      	ldr	r2, [pc, #44]	; (8000de0 <HAL_MPU_Enable+0x38>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000dba:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <HAL_MPU_Enable+0x3c>)
 8000dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dbe:	4a09      	ldr	r2, [pc, #36]	; (8000de4 <HAL_MPU_Enable+0x3c>)
 8000dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dc4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000dc6:	f3bf 8f4f 	dsb	sy
}
 8000dca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dcc:	f3bf 8f6f 	isb	sy
}
 8000dd0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000ed90 	.word	0xe000ed90
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	785a      	ldrb	r2, [r3, #1]
 8000df4:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <HAL_MPU_ConfigRegion+0x7c>)
 8000df6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000df8:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <HAL_MPU_ConfigRegion+0x7c>)
 8000dfa:	691b      	ldr	r3, [r3, #16]
 8000dfc:	4a19      	ldr	r2, [pc, #100]	; (8000e64 <HAL_MPU_ConfigRegion+0x7c>)
 8000dfe:	f023 0301 	bic.w	r3, r3, #1
 8000e02:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000e04:	4a17      	ldr	r2, [pc, #92]	; (8000e64 <HAL_MPU_ConfigRegion+0x7c>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	7b1b      	ldrb	r3, [r3, #12]
 8000e10:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	7adb      	ldrb	r3, [r3, #11]
 8000e16:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e18:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	7a9b      	ldrb	r3, [r3, #10]
 8000e1e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000e20:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	7b5b      	ldrb	r3, [r3, #13]
 8000e26:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000e28:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	7b9b      	ldrb	r3, [r3, #14]
 8000e2e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000e30:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	7bdb      	ldrb	r3, [r3, #15]
 8000e36:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000e38:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	7a5b      	ldrb	r3, [r3, #9]
 8000e3e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000e40:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	7a1b      	ldrb	r3, [r3, #8]
 8000e46:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000e48:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	7812      	ldrb	r2, [r2, #0]
 8000e4e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e50:	4a04      	ldr	r2, [pc, #16]	; (8000e64 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000e52:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e54:	6113      	str	r3, [r2, #16]
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000ed90 	.word	0xe000ed90

08000e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b089      	sub	sp, #36	; 0x24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000e76:	4b86      	ldr	r3, [pc, #536]	; (8001090 <HAL_GPIO_Init+0x228>)
 8000e78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000e7a:	e18c      	b.n	8001196 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	2101      	movs	r1, #1
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	fa01 f303 	lsl.w	r3, r1, r3
 8000e88:	4013      	ands	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	f000 817e 	beq.w	8001190 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f003 0303 	and.w	r3, r3, #3
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d005      	beq.n	8000eac <HAL_GPIO_Init+0x44>
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 0303 	and.w	r3, r3, #3
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d130      	bne.n	8000f0e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	68da      	ldr	r2, [r3, #12]
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43db      	mvns	r3, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	091b      	lsrs	r3, r3, #4
 8000ef8:	f003 0201 	and.w	r2, r3, #1
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f003 0303 	and.w	r3, r3, #3
 8000f16:	2b03      	cmp	r3, #3
 8000f18:	d017      	beq.n	8000f4a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	68db      	ldr	r3, [r3, #12]
 8000f1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	2203      	movs	r2, #3
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	689a      	ldr	r2, [r3, #8]
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d123      	bne.n	8000f9e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	08da      	lsrs	r2, r3, #3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	3208      	adds	r2, #8
 8000f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	220f      	movs	r2, #15
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43db      	mvns	r3, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4013      	ands	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	691a      	ldr	r2, [r3, #16]
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	f003 0307 	and.w	r3, r3, #7
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	08da      	lsrs	r2, r3, #3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3208      	adds	r2, #8
 8000f98:	69b9      	ldr	r1, [r7, #24]
 8000f9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	2203      	movs	r2, #3
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f003 0203 	and.w	r2, r3, #3
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	f000 80d8 	beq.w	8001190 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe0:	4b2c      	ldr	r3, [pc, #176]	; (8001094 <HAL_GPIO_Init+0x22c>)
 8000fe2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fe6:	4a2b      	ldr	r2, [pc, #172]	; (8001094 <HAL_GPIO_Init+0x22c>)
 8000fe8:	f043 0302 	orr.w	r3, r3, #2
 8000fec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ff0:	4b28      	ldr	r3, [pc, #160]	; (8001094 <HAL_GPIO_Init+0x22c>)
 8000ff2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ffe:	4a26      	ldr	r2, [pc, #152]	; (8001098 <HAL_GPIO_Init+0x230>)
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	089b      	lsrs	r3, r3, #2
 8001004:	3302      	adds	r3, #2
 8001006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800100a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f003 0303 	and.w	r3, r3, #3
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	220f      	movs	r2, #15
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43db      	mvns	r3, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4013      	ands	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a1d      	ldr	r2, [pc, #116]	; (800109c <HAL_GPIO_Init+0x234>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d04a      	beq.n	80010c0 <HAL_GPIO_Init+0x258>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a1c      	ldr	r2, [pc, #112]	; (80010a0 <HAL_GPIO_Init+0x238>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d02b      	beq.n	800108a <HAL_GPIO_Init+0x222>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a1b      	ldr	r2, [pc, #108]	; (80010a4 <HAL_GPIO_Init+0x23c>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d025      	beq.n	8001086 <HAL_GPIO_Init+0x21e>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a1a      	ldr	r2, [pc, #104]	; (80010a8 <HAL_GPIO_Init+0x240>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d01f      	beq.n	8001082 <HAL_GPIO_Init+0x21a>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a19      	ldr	r2, [pc, #100]	; (80010ac <HAL_GPIO_Init+0x244>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d019      	beq.n	800107e <HAL_GPIO_Init+0x216>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a18      	ldr	r2, [pc, #96]	; (80010b0 <HAL_GPIO_Init+0x248>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d013      	beq.n	800107a <HAL_GPIO_Init+0x212>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a17      	ldr	r2, [pc, #92]	; (80010b4 <HAL_GPIO_Init+0x24c>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d00d      	beq.n	8001076 <HAL_GPIO_Init+0x20e>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a16      	ldr	r2, [pc, #88]	; (80010b8 <HAL_GPIO_Init+0x250>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d007      	beq.n	8001072 <HAL_GPIO_Init+0x20a>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a15      	ldr	r2, [pc, #84]	; (80010bc <HAL_GPIO_Init+0x254>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d101      	bne.n	800106e <HAL_GPIO_Init+0x206>
 800106a:	2309      	movs	r3, #9
 800106c:	e029      	b.n	80010c2 <HAL_GPIO_Init+0x25a>
 800106e:	230a      	movs	r3, #10
 8001070:	e027      	b.n	80010c2 <HAL_GPIO_Init+0x25a>
 8001072:	2307      	movs	r3, #7
 8001074:	e025      	b.n	80010c2 <HAL_GPIO_Init+0x25a>
 8001076:	2306      	movs	r3, #6
 8001078:	e023      	b.n	80010c2 <HAL_GPIO_Init+0x25a>
 800107a:	2305      	movs	r3, #5
 800107c:	e021      	b.n	80010c2 <HAL_GPIO_Init+0x25a>
 800107e:	2304      	movs	r3, #4
 8001080:	e01f      	b.n	80010c2 <HAL_GPIO_Init+0x25a>
 8001082:	2303      	movs	r3, #3
 8001084:	e01d      	b.n	80010c2 <HAL_GPIO_Init+0x25a>
 8001086:	2302      	movs	r3, #2
 8001088:	e01b      	b.n	80010c2 <HAL_GPIO_Init+0x25a>
 800108a:	2301      	movs	r3, #1
 800108c:	e019      	b.n	80010c2 <HAL_GPIO_Init+0x25a>
 800108e:	bf00      	nop
 8001090:	58000080 	.word	0x58000080
 8001094:	58024400 	.word	0x58024400
 8001098:	58000400 	.word	0x58000400
 800109c:	58020000 	.word	0x58020000
 80010a0:	58020400 	.word	0x58020400
 80010a4:	58020800 	.word	0x58020800
 80010a8:	58020c00 	.word	0x58020c00
 80010ac:	58021000 	.word	0x58021000
 80010b0:	58021400 	.word	0x58021400
 80010b4:	58021800 	.word	0x58021800
 80010b8:	58021c00 	.word	0x58021c00
 80010bc:	58022400 	.word	0x58022400
 80010c0:	2300      	movs	r3, #0
 80010c2:	69fa      	ldr	r2, [r7, #28]
 80010c4:	f002 0203 	and.w	r2, r2, #3
 80010c8:	0092      	lsls	r2, r2, #2
 80010ca:	4093      	lsls	r3, r2
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010d2:	4938      	ldr	r1, [pc, #224]	; (80011b4 <HAL_GPIO_Init+0x34c>)
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	089b      	lsrs	r3, r3, #2
 80010d8:	3302      	adds	r3, #2
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	43db      	mvns	r3, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4013      	ands	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d003      	beq.n	8001106 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001106:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800110e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d003      	beq.n	8001134 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	4313      	orrs	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001134:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	43db      	mvns	r3, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	43db      	mvns	r3, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4013      	ands	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	3301      	adds	r3, #1
 8001194:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	fa22 f303 	lsr.w	r3, r2, r3
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	f47f ae6b 	bne.w	8000e7c <HAL_GPIO_Init+0x14>
  }
}
 80011a6:	bf00      	nop
 80011a8:	bf00      	nop
 80011aa:	3724      	adds	r7, #36	; 0x24
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	58000400 	.word	0x58000400

080011b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	807b      	strh	r3, [r7, #2]
 80011c4:	4613      	mov	r3, r2
 80011c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011c8:	787b      	ldrb	r3, [r7, #1]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ce:	887a      	ldrh	r2, [r7, #2]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80011d4:	e003      	b.n	80011de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80011d6:	887b      	ldrh	r3, [r7, #2]
 80011d8:	041a      	lsls	r2, r3, #16
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	619a      	str	r2, [r3, #24]
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80011f4:	4b19      	ldr	r3, [pc, #100]	; (800125c <HAL_PWREx_ConfigSupply+0x70>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	f003 0304 	and.w	r3, r3, #4
 80011fc:	2b04      	cmp	r3, #4
 80011fe:	d00a      	beq.n	8001216 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001200:	4b16      	ldr	r3, [pc, #88]	; (800125c <HAL_PWREx_ConfigSupply+0x70>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	f003 0307 	and.w	r3, r3, #7
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	429a      	cmp	r2, r3
 800120c:	d001      	beq.n	8001212 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e01f      	b.n	8001252 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001212:	2300      	movs	r3, #0
 8001214:	e01d      	b.n	8001252 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001216:	4b11      	ldr	r3, [pc, #68]	; (800125c <HAL_PWREx_ConfigSupply+0x70>)
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	f023 0207 	bic.w	r2, r3, #7
 800121e:	490f      	ldr	r1, [pc, #60]	; (800125c <HAL_PWREx_ConfigSupply+0x70>)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4313      	orrs	r3, r2
 8001224:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001226:	f7ff fc67 	bl	8000af8 <HAL_GetTick>
 800122a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800122c:	e009      	b.n	8001242 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800122e:	f7ff fc63 	bl	8000af8 <HAL_GetTick>
 8001232:	4602      	mov	r2, r0
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800123c:	d901      	bls.n	8001242 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e007      	b.n	8001252 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <HAL_PWREx_ConfigSupply+0x70>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800124a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800124e:	d1ee      	bne.n	800122e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	58024800 	.word	0x58024800

08001260 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08c      	sub	sp, #48	; 0x30
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d101      	bne.n	8001272 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e3c8      	b.n	8001a04 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	2b00      	cmp	r3, #0
 800127c:	f000 8087 	beq.w	800138e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001280:	4b88      	ldr	r3, [pc, #544]	; (80014a4 <HAL_RCC_OscConfig+0x244>)
 8001282:	691b      	ldr	r3, [r3, #16]
 8001284:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001288:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800128a:	4b86      	ldr	r3, [pc, #536]	; (80014a4 <HAL_RCC_OscConfig+0x244>)
 800128c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001292:	2b10      	cmp	r3, #16
 8001294:	d007      	beq.n	80012a6 <HAL_RCC_OscConfig+0x46>
 8001296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001298:	2b18      	cmp	r3, #24
 800129a:	d110      	bne.n	80012be <HAL_RCC_OscConfig+0x5e>
 800129c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800129e:	f003 0303 	and.w	r3, r3, #3
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d10b      	bne.n	80012be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a6:	4b7f      	ldr	r3, [pc, #508]	; (80014a4 <HAL_RCC_OscConfig+0x244>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d06c      	beq.n	800138c <HAL_RCC_OscConfig+0x12c>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d168      	bne.n	800138c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e3a2      	b.n	8001a04 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012c6:	d106      	bne.n	80012d6 <HAL_RCC_OscConfig+0x76>
 80012c8:	4b76      	ldr	r3, [pc, #472]	; (80014a4 <HAL_RCC_OscConfig+0x244>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a75      	ldr	r2, [pc, #468]	; (80014a4 <HAL_RCC_OscConfig+0x244>)
 80012ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	e02e      	b.n	8001334 <HAL_RCC_OscConfig+0xd4>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d10c      	bne.n	80012f8 <HAL_RCC_OscConfig+0x98>
 80012de:	4b71      	ldr	r3, [pc, #452]	; (80014a4 <HAL_RCC_OscConfig+0x244>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a70      	ldr	r2, [pc, #448]	; (80014a4 <HAL_RCC_OscConfig+0x244>)
 80012e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012e8:	6013      	str	r3, [r2, #0]
 80012ea:	4b6e      	ldr	r3, [pc, #440]	; (80014a4 <HAL_RCC_OscConfig+0x244>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a6d      	ldr	r2, [pc, #436]	; (80014a4 <HAL_RCC_OscConfig+0x244>)
 80012f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	e01d      	b.n	8001334 <HAL_RCC_OscConfig+0xd4>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001300:	d10c      	bne.n	800131c <HAL_RCC_OscConfig+0xbc>
 8001302:	4b68      	ldr	r3, [pc, #416]	; (80014a4 <HAL_RCC_OscConfig+0x244>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a67      	ldr	r2, [pc, #412]	; (80014a4 <HAL_RCC_OscConfig+0x244>)
 8001308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800130c:	6013      	str	r3, [r2, #0]
 800130e:	4b65      	ldr	r3, [pc, #404]	; (80014a4 <HAL_RCC_OscConfig+0x244>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a64      	ldr	r2, [pc, #400]	; (80014a4 <HAL_RCC_OscConfig+0x244>)
 8001314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	e00b      	b.n	8001334 <HAL_RCC_OscConfig+0xd4>
 800131c:	4b61      	ldr	r3, [pc, #388]	; (80014a4 <HAL_RCC_OscConfig+0x244>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a60      	ldr	r2, [pc, #384]	; (80014a4 <HAL_RCC_OscConfig+0x244>)
 8001322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001326:	6013      	str	r3, [r2, #0]
 8001328:	4b5e      	ldr	r3, [pc, #376]	; (80014a4 <HAL_RCC_OscConfig+0x244>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a5d      	ldr	r2, [pc, #372]	; (80014a4 <HAL_RCC_OscConfig+0x244>)
 800132e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001332:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d013      	beq.n	8001364 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800133c:	f7ff fbdc 	bl	8000af8 <HAL_GetTick>
 8001340:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001344:	f7ff fbd8 	bl	8000af8 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b64      	cmp	r3, #100	; 0x64
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e356      	b.n	8001a04 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001356:	4b53      	ldr	r3, [pc, #332]	; (80014a4 <HAL_RCC_OscConfig+0x244>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d0f0      	beq.n	8001344 <HAL_RCC_OscConfig+0xe4>
 8001362:	e014      	b.n	800138e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001364:	f7ff fbc8 	bl	8000af8 <HAL_GetTick>
 8001368:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800136a:	e008      	b.n	800137e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800136c:	f7ff fbc4 	bl	8000af8 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b64      	cmp	r3, #100	; 0x64
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e342      	b.n	8001a04 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800137e:	4b49      	ldr	r3, [pc, #292]	; (80014a4 <HAL_RCC_OscConfig+0x244>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1f0      	bne.n	800136c <HAL_RCC_OscConfig+0x10c>
 800138a:	e000      	b.n	800138e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800138c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	f000 808c 	beq.w	80014b4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800139c:	4b41      	ldr	r3, [pc, #260]	; (80014a4 <HAL_RCC_OscConfig+0x244>)
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80013a4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80013a6:	4b3f      	ldr	r3, [pc, #252]	; (80014a4 <HAL_RCC_OscConfig+0x244>)
 80013a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013aa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80013ac:	6a3b      	ldr	r3, [r7, #32]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d007      	beq.n	80013c2 <HAL_RCC_OscConfig+0x162>
 80013b2:	6a3b      	ldr	r3, [r7, #32]
 80013b4:	2b18      	cmp	r3, #24
 80013b6:	d137      	bne.n	8001428 <HAL_RCC_OscConfig+0x1c8>
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	f003 0303 	and.w	r3, r3, #3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d132      	bne.n	8001428 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013c2:	4b38      	ldr	r3, [pc, #224]	; (80014a4 <HAL_RCC_OscConfig+0x244>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0304 	and.w	r3, r3, #4
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d005      	beq.n	80013da <HAL_RCC_OscConfig+0x17a>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e314      	b.n	8001a04 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80013da:	4b32      	ldr	r3, [pc, #200]	; (80014a4 <HAL_RCC_OscConfig+0x244>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f023 0219 	bic.w	r2, r3, #25
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	492f      	ldr	r1, [pc, #188]	; (80014a4 <HAL_RCC_OscConfig+0x244>)
 80013e8:	4313      	orrs	r3, r2
 80013ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ec:	f7ff fb84 	bl	8000af8 <HAL_GetTick>
 80013f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013f4:	f7ff fb80 	bl	8000af8 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e2fe      	b.n	8001a04 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001406:	4b27      	ldr	r3, [pc, #156]	; (80014a4 <HAL_RCC_OscConfig+0x244>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0304 	and.w	r3, r3, #4
 800140e:	2b00      	cmp	r3, #0
 8001410:	d0f0      	beq.n	80013f4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001412:	4b24      	ldr	r3, [pc, #144]	; (80014a4 <HAL_RCC_OscConfig+0x244>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	061b      	lsls	r3, r3, #24
 8001420:	4920      	ldr	r1, [pc, #128]	; (80014a4 <HAL_RCC_OscConfig+0x244>)
 8001422:	4313      	orrs	r3, r2
 8001424:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001426:	e045      	b.n	80014b4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d026      	beq.n	800147e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001430:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <HAL_RCC_OscConfig+0x244>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f023 0219 	bic.w	r2, r3, #25
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	4919      	ldr	r1, [pc, #100]	; (80014a4 <HAL_RCC_OscConfig+0x244>)
 800143e:	4313      	orrs	r3, r2
 8001440:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001442:	f7ff fb59 	bl	8000af8 <HAL_GetTick>
 8001446:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001448:	e008      	b.n	800145c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800144a:	f7ff fb55 	bl	8000af8 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e2d3      	b.n	8001a04 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800145c:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <HAL_RCC_OscConfig+0x244>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	2b00      	cmp	r3, #0
 8001466:	d0f0      	beq.n	800144a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001468:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <HAL_RCC_OscConfig+0x244>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	691b      	ldr	r3, [r3, #16]
 8001474:	061b      	lsls	r3, r3, #24
 8001476:	490b      	ldr	r1, [pc, #44]	; (80014a4 <HAL_RCC_OscConfig+0x244>)
 8001478:	4313      	orrs	r3, r2
 800147a:	604b      	str	r3, [r1, #4]
 800147c:	e01a      	b.n	80014b4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <HAL_RCC_OscConfig+0x244>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a08      	ldr	r2, [pc, #32]	; (80014a4 <HAL_RCC_OscConfig+0x244>)
 8001484:	f023 0301 	bic.w	r3, r3, #1
 8001488:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800148a:	f7ff fb35 	bl	8000af8 <HAL_GetTick>
 800148e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001490:	e00a      	b.n	80014a8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001492:	f7ff fb31 	bl	8000af8 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d903      	bls.n	80014a8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e2af      	b.n	8001a04 <HAL_RCC_OscConfig+0x7a4>
 80014a4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80014a8:	4b96      	ldr	r3, [pc, #600]	; (8001704 <HAL_RCC_OscConfig+0x4a4>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0304 	and.w	r3, r3, #4
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1ee      	bne.n	8001492 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0310 	and.w	r3, r3, #16
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d06a      	beq.n	8001596 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014c0:	4b90      	ldr	r3, [pc, #576]	; (8001704 <HAL_RCC_OscConfig+0x4a4>)
 80014c2:	691b      	ldr	r3, [r3, #16]
 80014c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80014c8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014ca:	4b8e      	ldr	r3, [pc, #568]	; (8001704 <HAL_RCC_OscConfig+0x4a4>)
 80014cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ce:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	2b08      	cmp	r3, #8
 80014d4:	d007      	beq.n	80014e6 <HAL_RCC_OscConfig+0x286>
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	2b18      	cmp	r3, #24
 80014da:	d11b      	bne.n	8001514 <HAL_RCC_OscConfig+0x2b4>
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	f003 0303 	and.w	r3, r3, #3
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d116      	bne.n	8001514 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014e6:	4b87      	ldr	r3, [pc, #540]	; (8001704 <HAL_RCC_OscConfig+0x4a4>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d005      	beq.n	80014fe <HAL_RCC_OscConfig+0x29e>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	2b80      	cmp	r3, #128	; 0x80
 80014f8:	d001      	beq.n	80014fe <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e282      	b.n	8001a04 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014fe:	4b81      	ldr	r3, [pc, #516]	; (8001704 <HAL_RCC_OscConfig+0x4a4>)
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	061b      	lsls	r3, r3, #24
 800150c:	497d      	ldr	r1, [pc, #500]	; (8001704 <HAL_RCC_OscConfig+0x4a4>)
 800150e:	4313      	orrs	r3, r2
 8001510:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001512:	e040      	b.n	8001596 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	69db      	ldr	r3, [r3, #28]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d023      	beq.n	8001564 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800151c:	4b79      	ldr	r3, [pc, #484]	; (8001704 <HAL_RCC_OscConfig+0x4a4>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a78      	ldr	r2, [pc, #480]	; (8001704 <HAL_RCC_OscConfig+0x4a4>)
 8001522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001528:	f7ff fae6 	bl	8000af8 <HAL_GetTick>
 800152c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001530:	f7ff fae2 	bl	8000af8 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e260      	b.n	8001a04 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001542:	4b70      	ldr	r3, [pc, #448]	; (8001704 <HAL_RCC_OscConfig+0x4a4>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800154a:	2b00      	cmp	r3, #0
 800154c:	d0f0      	beq.n	8001530 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800154e:	4b6d      	ldr	r3, [pc, #436]	; (8001704 <HAL_RCC_OscConfig+0x4a4>)
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a1b      	ldr	r3, [r3, #32]
 800155a:	061b      	lsls	r3, r3, #24
 800155c:	4969      	ldr	r1, [pc, #420]	; (8001704 <HAL_RCC_OscConfig+0x4a4>)
 800155e:	4313      	orrs	r3, r2
 8001560:	60cb      	str	r3, [r1, #12]
 8001562:	e018      	b.n	8001596 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001564:	4b67      	ldr	r3, [pc, #412]	; (8001704 <HAL_RCC_OscConfig+0x4a4>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a66      	ldr	r2, [pc, #408]	; (8001704 <HAL_RCC_OscConfig+0x4a4>)
 800156a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800156e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001570:	f7ff fac2 	bl	8000af8 <HAL_GetTick>
 8001574:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001578:	f7ff fabe 	bl	8000af8 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e23c      	b.n	8001a04 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800158a:	4b5e      	ldr	r3, [pc, #376]	; (8001704 <HAL_RCC_OscConfig+0x4a4>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1f0      	bne.n	8001578 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0308 	and.w	r3, r3, #8
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d036      	beq.n	8001610 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	695b      	ldr	r3, [r3, #20]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d019      	beq.n	80015de <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015aa:	4b56      	ldr	r3, [pc, #344]	; (8001704 <HAL_RCC_OscConfig+0x4a4>)
 80015ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015ae:	4a55      	ldr	r2, [pc, #340]	; (8001704 <HAL_RCC_OscConfig+0x4a4>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b6:	f7ff fa9f 	bl	8000af8 <HAL_GetTick>
 80015ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015be:	f7ff fa9b 	bl	8000af8 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e219      	b.n	8001a04 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015d0:	4b4c      	ldr	r3, [pc, #304]	; (8001704 <HAL_RCC_OscConfig+0x4a4>)
 80015d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0f0      	beq.n	80015be <HAL_RCC_OscConfig+0x35e>
 80015dc:	e018      	b.n	8001610 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015de:	4b49      	ldr	r3, [pc, #292]	; (8001704 <HAL_RCC_OscConfig+0x4a4>)
 80015e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015e2:	4a48      	ldr	r2, [pc, #288]	; (8001704 <HAL_RCC_OscConfig+0x4a4>)
 80015e4:	f023 0301 	bic.w	r3, r3, #1
 80015e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ea:	f7ff fa85 	bl	8000af8 <HAL_GetTick>
 80015ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015f2:	f7ff fa81 	bl	8000af8 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e1ff      	b.n	8001a04 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001604:	4b3f      	ldr	r3, [pc, #252]	; (8001704 <HAL_RCC_OscConfig+0x4a4>)
 8001606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1f0      	bne.n	80015f2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0320 	and.w	r3, r3, #32
 8001618:	2b00      	cmp	r3, #0
 800161a:	d036      	beq.n	800168a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d019      	beq.n	8001658 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001624:	4b37      	ldr	r3, [pc, #220]	; (8001704 <HAL_RCC_OscConfig+0x4a4>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a36      	ldr	r2, [pc, #216]	; (8001704 <HAL_RCC_OscConfig+0x4a4>)
 800162a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800162e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001630:	f7ff fa62 	bl	8000af8 <HAL_GetTick>
 8001634:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001638:	f7ff fa5e 	bl	8000af8 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e1dc      	b.n	8001a04 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800164a:	4b2e      	ldr	r3, [pc, #184]	; (8001704 <HAL_RCC_OscConfig+0x4a4>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0f0      	beq.n	8001638 <HAL_RCC_OscConfig+0x3d8>
 8001656:	e018      	b.n	800168a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001658:	4b2a      	ldr	r3, [pc, #168]	; (8001704 <HAL_RCC_OscConfig+0x4a4>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a29      	ldr	r2, [pc, #164]	; (8001704 <HAL_RCC_OscConfig+0x4a4>)
 800165e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001662:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001664:	f7ff fa48 	bl	8000af8 <HAL_GetTick>
 8001668:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800166c:	f7ff fa44 	bl	8000af8 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e1c2      	b.n	8001a04 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800167e:	4b21      	ldr	r3, [pc, #132]	; (8001704 <HAL_RCC_OscConfig+0x4a4>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1f0      	bne.n	800166c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	2b00      	cmp	r3, #0
 8001694:	f000 8086 	beq.w	80017a4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001698:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <HAL_RCC_OscConfig+0x4a8>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a1a      	ldr	r2, [pc, #104]	; (8001708 <HAL_RCC_OscConfig+0x4a8>)
 800169e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80016a4:	f7ff fa28 	bl	8000af8 <HAL_GetTick>
 80016a8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ac:	f7ff fa24 	bl	8000af8 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b64      	cmp	r3, #100	; 0x64
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e1a2      	b.n	8001a04 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80016be:	4b12      	ldr	r3, [pc, #72]	; (8001708 <HAL_RCC_OscConfig+0x4a8>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d0f0      	beq.n	80016ac <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d106      	bne.n	80016e0 <HAL_RCC_OscConfig+0x480>
 80016d2:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <HAL_RCC_OscConfig+0x4a4>)
 80016d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d6:	4a0b      	ldr	r2, [pc, #44]	; (8001704 <HAL_RCC_OscConfig+0x4a4>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6713      	str	r3, [r2, #112]	; 0x70
 80016de:	e032      	b.n	8001746 <HAL_RCC_OscConfig+0x4e6>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d111      	bne.n	800170c <HAL_RCC_OscConfig+0x4ac>
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <HAL_RCC_OscConfig+0x4a4>)
 80016ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ec:	4a05      	ldr	r2, [pc, #20]	; (8001704 <HAL_RCC_OscConfig+0x4a4>)
 80016ee:	f023 0301 	bic.w	r3, r3, #1
 80016f2:	6713      	str	r3, [r2, #112]	; 0x70
 80016f4:	4b03      	ldr	r3, [pc, #12]	; (8001704 <HAL_RCC_OscConfig+0x4a4>)
 80016f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f8:	4a02      	ldr	r2, [pc, #8]	; (8001704 <HAL_RCC_OscConfig+0x4a4>)
 80016fa:	f023 0304 	bic.w	r3, r3, #4
 80016fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001700:	e021      	b.n	8001746 <HAL_RCC_OscConfig+0x4e6>
 8001702:	bf00      	nop
 8001704:	58024400 	.word	0x58024400
 8001708:	58024800 	.word	0x58024800
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	2b05      	cmp	r3, #5
 8001712:	d10c      	bne.n	800172e <HAL_RCC_OscConfig+0x4ce>
 8001714:	4b83      	ldr	r3, [pc, #524]	; (8001924 <HAL_RCC_OscConfig+0x6c4>)
 8001716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001718:	4a82      	ldr	r2, [pc, #520]	; (8001924 <HAL_RCC_OscConfig+0x6c4>)
 800171a:	f043 0304 	orr.w	r3, r3, #4
 800171e:	6713      	str	r3, [r2, #112]	; 0x70
 8001720:	4b80      	ldr	r3, [pc, #512]	; (8001924 <HAL_RCC_OscConfig+0x6c4>)
 8001722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001724:	4a7f      	ldr	r2, [pc, #508]	; (8001924 <HAL_RCC_OscConfig+0x6c4>)
 8001726:	f043 0301 	orr.w	r3, r3, #1
 800172a:	6713      	str	r3, [r2, #112]	; 0x70
 800172c:	e00b      	b.n	8001746 <HAL_RCC_OscConfig+0x4e6>
 800172e:	4b7d      	ldr	r3, [pc, #500]	; (8001924 <HAL_RCC_OscConfig+0x6c4>)
 8001730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001732:	4a7c      	ldr	r2, [pc, #496]	; (8001924 <HAL_RCC_OscConfig+0x6c4>)
 8001734:	f023 0301 	bic.w	r3, r3, #1
 8001738:	6713      	str	r3, [r2, #112]	; 0x70
 800173a:	4b7a      	ldr	r3, [pc, #488]	; (8001924 <HAL_RCC_OscConfig+0x6c4>)
 800173c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800173e:	4a79      	ldr	r2, [pc, #484]	; (8001924 <HAL_RCC_OscConfig+0x6c4>)
 8001740:	f023 0304 	bic.w	r3, r3, #4
 8001744:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d015      	beq.n	800177a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800174e:	f7ff f9d3 	bl	8000af8 <HAL_GetTick>
 8001752:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001754:	e00a      	b.n	800176c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001756:	f7ff f9cf 	bl	8000af8 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	f241 3288 	movw	r2, #5000	; 0x1388
 8001764:	4293      	cmp	r3, r2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e14b      	b.n	8001a04 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800176c:	4b6d      	ldr	r3, [pc, #436]	; (8001924 <HAL_RCC_OscConfig+0x6c4>)
 800176e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d0ee      	beq.n	8001756 <HAL_RCC_OscConfig+0x4f6>
 8001778:	e014      	b.n	80017a4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800177a:	f7ff f9bd 	bl	8000af8 <HAL_GetTick>
 800177e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001780:	e00a      	b.n	8001798 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001782:	f7ff f9b9 	bl	8000af8 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001790:	4293      	cmp	r3, r2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e135      	b.n	8001a04 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001798:	4b62      	ldr	r3, [pc, #392]	; (8001924 <HAL_RCC_OscConfig+0x6c4>)
 800179a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1ee      	bne.n	8001782 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f000 812a 	beq.w	8001a02 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80017ae:	4b5d      	ldr	r3, [pc, #372]	; (8001924 <HAL_RCC_OscConfig+0x6c4>)
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017b6:	2b18      	cmp	r3, #24
 80017b8:	f000 80ba 	beq.w	8001930 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	f040 8095 	bne.w	80018f0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c6:	4b57      	ldr	r3, [pc, #348]	; (8001924 <HAL_RCC_OscConfig+0x6c4>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a56      	ldr	r2, [pc, #344]	; (8001924 <HAL_RCC_OscConfig+0x6c4>)
 80017cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d2:	f7ff f991 	bl	8000af8 <HAL_GetTick>
 80017d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017da:	f7ff f98d 	bl	8000af8 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e10b      	b.n	8001a04 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017ec:	4b4d      	ldr	r3, [pc, #308]	; (8001924 <HAL_RCC_OscConfig+0x6c4>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d1f0      	bne.n	80017da <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017f8:	4b4a      	ldr	r3, [pc, #296]	; (8001924 <HAL_RCC_OscConfig+0x6c4>)
 80017fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017fc:	4b4a      	ldr	r3, [pc, #296]	; (8001928 <HAL_RCC_OscConfig+0x6c8>)
 80017fe:	4013      	ands	r3, r2
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001808:	0112      	lsls	r2, r2, #4
 800180a:	430a      	orrs	r2, r1
 800180c:	4945      	ldr	r1, [pc, #276]	; (8001924 <HAL_RCC_OscConfig+0x6c4>)
 800180e:	4313      	orrs	r3, r2
 8001810:	628b      	str	r3, [r1, #40]	; 0x28
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	3b01      	subs	r3, #1
 8001818:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001820:	3b01      	subs	r3, #1
 8001822:	025b      	lsls	r3, r3, #9
 8001824:	b29b      	uxth	r3, r3
 8001826:	431a      	orrs	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800182c:	3b01      	subs	r3, #1
 800182e:	041b      	lsls	r3, r3, #16
 8001830:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001834:	431a      	orrs	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800183a:	3b01      	subs	r3, #1
 800183c:	061b      	lsls	r3, r3, #24
 800183e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001842:	4938      	ldr	r1, [pc, #224]	; (8001924 <HAL_RCC_OscConfig+0x6c4>)
 8001844:	4313      	orrs	r3, r2
 8001846:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001848:	4b36      	ldr	r3, [pc, #216]	; (8001924 <HAL_RCC_OscConfig+0x6c4>)
 800184a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184c:	4a35      	ldr	r2, [pc, #212]	; (8001924 <HAL_RCC_OscConfig+0x6c4>)
 800184e:	f023 0301 	bic.w	r3, r3, #1
 8001852:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001854:	4b33      	ldr	r3, [pc, #204]	; (8001924 <HAL_RCC_OscConfig+0x6c4>)
 8001856:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001858:	4b34      	ldr	r3, [pc, #208]	; (800192c <HAL_RCC_OscConfig+0x6cc>)
 800185a:	4013      	ands	r3, r2
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001860:	00d2      	lsls	r2, r2, #3
 8001862:	4930      	ldr	r1, [pc, #192]	; (8001924 <HAL_RCC_OscConfig+0x6c4>)
 8001864:	4313      	orrs	r3, r2
 8001866:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001868:	4b2e      	ldr	r3, [pc, #184]	; (8001924 <HAL_RCC_OscConfig+0x6c4>)
 800186a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186c:	f023 020c 	bic.w	r2, r3, #12
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001874:	492b      	ldr	r1, [pc, #172]	; (8001924 <HAL_RCC_OscConfig+0x6c4>)
 8001876:	4313      	orrs	r3, r2
 8001878:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800187a:	4b2a      	ldr	r3, [pc, #168]	; (8001924 <HAL_RCC_OscConfig+0x6c4>)
 800187c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187e:	f023 0202 	bic.w	r2, r3, #2
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001886:	4927      	ldr	r1, [pc, #156]	; (8001924 <HAL_RCC_OscConfig+0x6c4>)
 8001888:	4313      	orrs	r3, r2
 800188a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800188c:	4b25      	ldr	r3, [pc, #148]	; (8001924 <HAL_RCC_OscConfig+0x6c4>)
 800188e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001890:	4a24      	ldr	r2, [pc, #144]	; (8001924 <HAL_RCC_OscConfig+0x6c4>)
 8001892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001896:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001898:	4b22      	ldr	r3, [pc, #136]	; (8001924 <HAL_RCC_OscConfig+0x6c4>)
 800189a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189c:	4a21      	ldr	r2, [pc, #132]	; (8001924 <HAL_RCC_OscConfig+0x6c4>)
 800189e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80018a4:	4b1f      	ldr	r3, [pc, #124]	; (8001924 <HAL_RCC_OscConfig+0x6c4>)
 80018a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a8:	4a1e      	ldr	r2, [pc, #120]	; (8001924 <HAL_RCC_OscConfig+0x6c4>)
 80018aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80018b0:	4b1c      	ldr	r3, [pc, #112]	; (8001924 <HAL_RCC_OscConfig+0x6c4>)
 80018b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b4:	4a1b      	ldr	r2, [pc, #108]	; (8001924 <HAL_RCC_OscConfig+0x6c4>)
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018bc:	4b19      	ldr	r3, [pc, #100]	; (8001924 <HAL_RCC_OscConfig+0x6c4>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a18      	ldr	r2, [pc, #96]	; (8001924 <HAL_RCC_OscConfig+0x6c4>)
 80018c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c8:	f7ff f916 	bl	8000af8 <HAL_GetTick>
 80018cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d0:	f7ff f912 	bl	8000af8 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e090      	b.n	8001a04 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018e2:	4b10      	ldr	r3, [pc, #64]	; (8001924 <HAL_RCC_OscConfig+0x6c4>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d0f0      	beq.n	80018d0 <HAL_RCC_OscConfig+0x670>
 80018ee:	e088      	b.n	8001a02 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f0:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <HAL_RCC_OscConfig+0x6c4>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a0b      	ldr	r2, [pc, #44]	; (8001924 <HAL_RCC_OscConfig+0x6c4>)
 80018f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fc:	f7ff f8fc 	bl	8000af8 <HAL_GetTick>
 8001900:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001904:	f7ff f8f8 	bl	8000af8 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e076      	b.n	8001a04 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001916:	4b03      	ldr	r3, [pc, #12]	; (8001924 <HAL_RCC_OscConfig+0x6c4>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f0      	bne.n	8001904 <HAL_RCC_OscConfig+0x6a4>
 8001922:	e06e      	b.n	8001a02 <HAL_RCC_OscConfig+0x7a2>
 8001924:	58024400 	.word	0x58024400
 8001928:	fffffc0c 	.word	0xfffffc0c
 800192c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001930:	4b36      	ldr	r3, [pc, #216]	; (8001a0c <HAL_RCC_OscConfig+0x7ac>)
 8001932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001934:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001936:	4b35      	ldr	r3, [pc, #212]	; (8001a0c <HAL_RCC_OscConfig+0x7ac>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001940:	2b01      	cmp	r3, #1
 8001942:	d031      	beq.n	80019a8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	f003 0203 	and.w	r2, r3, #3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800194e:	429a      	cmp	r2, r3
 8001950:	d12a      	bne.n	80019a8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	091b      	lsrs	r3, r3, #4
 8001956:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800195e:	429a      	cmp	r2, r3
 8001960:	d122      	bne.n	80019a8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800196e:	429a      	cmp	r2, r3
 8001970:	d11a      	bne.n	80019a8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	0a5b      	lsrs	r3, r3, #9
 8001976:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800197e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001980:	429a      	cmp	r2, r3
 8001982:	d111      	bne.n	80019a8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	0c1b      	lsrs	r3, r3, #16
 8001988:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001990:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001992:	429a      	cmp	r2, r3
 8001994:	d108      	bne.n	80019a8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	0e1b      	lsrs	r3, r3, #24
 800199a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019a2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d001      	beq.n	80019ac <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e02b      	b.n	8001a04 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80019ac:	4b17      	ldr	r3, [pc, #92]	; (8001a0c <HAL_RCC_OscConfig+0x7ac>)
 80019ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019b0:	08db      	lsrs	r3, r3, #3
 80019b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80019b6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d01f      	beq.n	8001a02 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80019c2:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <HAL_RCC_OscConfig+0x7ac>)
 80019c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c6:	4a11      	ldr	r2, [pc, #68]	; (8001a0c <HAL_RCC_OscConfig+0x7ac>)
 80019c8:	f023 0301 	bic.w	r3, r3, #1
 80019cc:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019ce:	f7ff f893 	bl	8000af8 <HAL_GetTick>
 80019d2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80019d4:	bf00      	nop
 80019d6:	f7ff f88f 	bl	8000af8 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019de:	4293      	cmp	r3, r2
 80019e0:	d0f9      	beq.n	80019d6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80019e2:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <HAL_RCC_OscConfig+0x7ac>)
 80019e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019e6:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <HAL_RCC_OscConfig+0x7b0>)
 80019e8:	4013      	ands	r3, r2
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80019ee:	00d2      	lsls	r2, r2, #3
 80019f0:	4906      	ldr	r1, [pc, #24]	; (8001a0c <HAL_RCC_OscConfig+0x7ac>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80019f6:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <HAL_RCC_OscConfig+0x7ac>)
 80019f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fa:	4a04      	ldr	r2, [pc, #16]	; (8001a0c <HAL_RCC_OscConfig+0x7ac>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3730      	adds	r7, #48	; 0x30
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	58024400 	.word	0x58024400
 8001a10:	ffff0007 	.word	0xffff0007

08001a14 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d101      	bne.n	8001a28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e19c      	b.n	8001d62 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a28:	4b8a      	ldr	r3, [pc, #552]	; (8001c54 <HAL_RCC_ClockConfig+0x240>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 030f 	and.w	r3, r3, #15
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d910      	bls.n	8001a58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a36:	4b87      	ldr	r3, [pc, #540]	; (8001c54 <HAL_RCC_ClockConfig+0x240>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f023 020f 	bic.w	r2, r3, #15
 8001a3e:	4985      	ldr	r1, [pc, #532]	; (8001c54 <HAL_RCC_ClockConfig+0x240>)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a46:	4b83      	ldr	r3, [pc, #524]	; (8001c54 <HAL_RCC_ClockConfig+0x240>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 030f 	and.w	r3, r3, #15
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d001      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e184      	b.n	8001d62 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d010      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691a      	ldr	r2, [r3, #16]
 8001a68:	4b7b      	ldr	r3, [pc, #492]	; (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d908      	bls.n	8001a86 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001a74:	4b78      	ldr	r3, [pc, #480]	; (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	4975      	ldr	r1, [pc, #468]	; (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0308 	and.w	r3, r3, #8
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d010      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	695a      	ldr	r2, [r3, #20]
 8001a96:	4b70      	ldr	r3, [pc, #448]	; (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d908      	bls.n	8001ab4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001aa2:	4b6d      	ldr	r3, [pc, #436]	; (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	496a      	ldr	r1, [pc, #424]	; (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0310 	and.w	r3, r3, #16
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d010      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	699a      	ldr	r2, [r3, #24]
 8001ac4:	4b64      	ldr	r3, [pc, #400]	; (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001ac6:	69db      	ldr	r3, [r3, #28]
 8001ac8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d908      	bls.n	8001ae2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001ad0:	4b61      	ldr	r3, [pc, #388]	; (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001ad2:	69db      	ldr	r3, [r3, #28]
 8001ad4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	495e      	ldr	r1, [pc, #376]	; (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0320 	and.w	r3, r3, #32
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d010      	beq.n	8001b10 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69da      	ldr	r2, [r3, #28]
 8001af2:	4b59      	ldr	r3, [pc, #356]	; (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001af4:	6a1b      	ldr	r3, [r3, #32]
 8001af6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d908      	bls.n	8001b10 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001afe:	4b56      	ldr	r3, [pc, #344]	; (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001b00:	6a1b      	ldr	r3, [r3, #32]
 8001b02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	4953      	ldr	r1, [pc, #332]	; (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d010      	beq.n	8001b3e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68da      	ldr	r2, [r3, #12]
 8001b20:	4b4d      	ldr	r3, [pc, #308]	; (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	f003 030f 	and.w	r3, r3, #15
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d908      	bls.n	8001b3e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b2c:	4b4a      	ldr	r3, [pc, #296]	; (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	f023 020f 	bic.w	r2, r3, #15
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	4947      	ldr	r1, [pc, #284]	; (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d055      	beq.n	8001bf6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001b4a:	4b43      	ldr	r3, [pc, #268]	; (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	4940      	ldr	r1, [pc, #256]	; (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d107      	bne.n	8001b74 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b64:	4b3c      	ldr	r3, [pc, #240]	; (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d121      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e0f6      	b.n	8001d62 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b03      	cmp	r3, #3
 8001b7a:	d107      	bne.n	8001b8c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b7c:	4b36      	ldr	r3, [pc, #216]	; (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d115      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e0ea      	b.n	8001d62 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d107      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b94:	4b30      	ldr	r3, [pc, #192]	; (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d109      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e0de      	b.n	8001d62 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ba4:	4b2c      	ldr	r3, [pc, #176]	; (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d101      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e0d6      	b.n	8001d62 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bb4:	4b28      	ldr	r3, [pc, #160]	; (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	f023 0207 	bic.w	r2, r3, #7
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	4925      	ldr	r1, [pc, #148]	; (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bc6:	f7fe ff97 	bl	8000af8 <HAL_GetTick>
 8001bca:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bcc:	e00a      	b.n	8001be4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bce:	f7fe ff93 	bl	8000af8 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e0be      	b.n	8001d62 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001be4:	4b1c      	ldr	r3, [pc, #112]	; (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d1eb      	bne.n	8001bce <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d010      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68da      	ldr	r2, [r3, #12]
 8001c06:	4b14      	ldr	r3, [pc, #80]	; (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d208      	bcs.n	8001c24 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c12:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	f023 020f 	bic.w	r2, r3, #15
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	490e      	ldr	r1, [pc, #56]	; (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c24:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <HAL_RCC_ClockConfig+0x240>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 030f 	and.w	r3, r3, #15
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d214      	bcs.n	8001c5c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c32:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <HAL_RCC_ClockConfig+0x240>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f023 020f 	bic.w	r2, r3, #15
 8001c3a:	4906      	ldr	r1, [pc, #24]	; (8001c54 <HAL_RCC_ClockConfig+0x240>)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c42:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <HAL_RCC_ClockConfig+0x240>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	683a      	ldr	r2, [r7, #0]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d005      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e086      	b.n	8001d62 <HAL_RCC_ClockConfig+0x34e>
 8001c54:	52002000 	.word	0x52002000
 8001c58:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d010      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	691a      	ldr	r2, [r3, #16]
 8001c6c:	4b3f      	ldr	r3, [pc, #252]	; (8001d6c <HAL_RCC_ClockConfig+0x358>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d208      	bcs.n	8001c8a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c78:	4b3c      	ldr	r3, [pc, #240]	; (8001d6c <HAL_RCC_ClockConfig+0x358>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	4939      	ldr	r1, [pc, #228]	; (8001d6c <HAL_RCC_ClockConfig+0x358>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0308 	and.w	r3, r3, #8
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d010      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	695a      	ldr	r2, [r3, #20]
 8001c9a:	4b34      	ldr	r3, [pc, #208]	; (8001d6c <HAL_RCC_ClockConfig+0x358>)
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d208      	bcs.n	8001cb8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001ca6:	4b31      	ldr	r3, [pc, #196]	; (8001d6c <HAL_RCC_ClockConfig+0x358>)
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	492e      	ldr	r1, [pc, #184]	; (8001d6c <HAL_RCC_ClockConfig+0x358>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0310 	and.w	r3, r3, #16
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d010      	beq.n	8001ce6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	699a      	ldr	r2, [r3, #24]
 8001cc8:	4b28      	ldr	r3, [pc, #160]	; (8001d6c <HAL_RCC_ClockConfig+0x358>)
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d208      	bcs.n	8001ce6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001cd4:	4b25      	ldr	r3, [pc, #148]	; (8001d6c <HAL_RCC_ClockConfig+0x358>)
 8001cd6:	69db      	ldr	r3, [r3, #28]
 8001cd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	4922      	ldr	r1, [pc, #136]	; (8001d6c <HAL_RCC_ClockConfig+0x358>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0320 	and.w	r3, r3, #32
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d010      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69da      	ldr	r2, [r3, #28]
 8001cf6:	4b1d      	ldr	r3, [pc, #116]	; (8001d6c <HAL_RCC_ClockConfig+0x358>)
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d208      	bcs.n	8001d14 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001d02:	4b1a      	ldr	r3, [pc, #104]	; (8001d6c <HAL_RCC_ClockConfig+0x358>)
 8001d04:	6a1b      	ldr	r3, [r3, #32]
 8001d06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	4917      	ldr	r1, [pc, #92]	; (8001d6c <HAL_RCC_ClockConfig+0x358>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d14:	f000 f834 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	4b14      	ldr	r3, [pc, #80]	; (8001d6c <HAL_RCC_ClockConfig+0x358>)
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	0a1b      	lsrs	r3, r3, #8
 8001d20:	f003 030f 	and.w	r3, r3, #15
 8001d24:	4912      	ldr	r1, [pc, #72]	; (8001d70 <HAL_RCC_ClockConfig+0x35c>)
 8001d26:	5ccb      	ldrb	r3, [r1, r3]
 8001d28:	f003 031f 	and.w	r3, r3, #31
 8001d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d30:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d32:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <HAL_RCC_ClockConfig+0x358>)
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	4a0d      	ldr	r2, [pc, #52]	; (8001d70 <HAL_RCC_ClockConfig+0x35c>)
 8001d3c:	5cd3      	ldrb	r3, [r2, r3]
 8001d3e:	f003 031f 	and.w	r3, r3, #31
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	fa22 f303 	lsr.w	r3, r2, r3
 8001d48:	4a0a      	ldr	r2, [pc, #40]	; (8001d74 <HAL_RCC_ClockConfig+0x360>)
 8001d4a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d4c:	4a0a      	ldr	r2, [pc, #40]	; (8001d78 <HAL_RCC_ClockConfig+0x364>)
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001d52:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <HAL_RCC_ClockConfig+0x368>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7fe fe84 	bl	8000a64 <HAL_InitTick>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	58024400 	.word	0x58024400
 8001d70:	08002e00 	.word	0x08002e00
 8001d74:	24000004 	.word	0x24000004
 8001d78:	24000000 	.word	0x24000000
 8001d7c:	24000008 	.word	0x24000008

08001d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b089      	sub	sp, #36	; 0x24
 8001d84:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d86:	4bb3      	ldr	r3, [pc, #716]	; (8002054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d8e:	2b18      	cmp	r3, #24
 8001d90:	f200 8155 	bhi.w	800203e <HAL_RCC_GetSysClockFreq+0x2be>
 8001d94:	a201      	add	r2, pc, #4	; (adr r2, 8001d9c <HAL_RCC_GetSysClockFreq+0x1c>)
 8001d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d9a:	bf00      	nop
 8001d9c:	08001e01 	.word	0x08001e01
 8001da0:	0800203f 	.word	0x0800203f
 8001da4:	0800203f 	.word	0x0800203f
 8001da8:	0800203f 	.word	0x0800203f
 8001dac:	0800203f 	.word	0x0800203f
 8001db0:	0800203f 	.word	0x0800203f
 8001db4:	0800203f 	.word	0x0800203f
 8001db8:	0800203f 	.word	0x0800203f
 8001dbc:	08001e27 	.word	0x08001e27
 8001dc0:	0800203f 	.word	0x0800203f
 8001dc4:	0800203f 	.word	0x0800203f
 8001dc8:	0800203f 	.word	0x0800203f
 8001dcc:	0800203f 	.word	0x0800203f
 8001dd0:	0800203f 	.word	0x0800203f
 8001dd4:	0800203f 	.word	0x0800203f
 8001dd8:	0800203f 	.word	0x0800203f
 8001ddc:	08001e2d 	.word	0x08001e2d
 8001de0:	0800203f 	.word	0x0800203f
 8001de4:	0800203f 	.word	0x0800203f
 8001de8:	0800203f 	.word	0x0800203f
 8001dec:	0800203f 	.word	0x0800203f
 8001df0:	0800203f 	.word	0x0800203f
 8001df4:	0800203f 	.word	0x0800203f
 8001df8:	0800203f 	.word	0x0800203f
 8001dfc:	08001e33 	.word	0x08001e33
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e00:	4b94      	ldr	r3, [pc, #592]	; (8002054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0320 	and.w	r3, r3, #32
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d009      	beq.n	8001e20 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001e0c:	4b91      	ldr	r3, [pc, #580]	; (8002054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	08db      	lsrs	r3, r3, #3
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	4a90      	ldr	r2, [pc, #576]	; (8002058 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e18:	fa22 f303 	lsr.w	r3, r2, r3
 8001e1c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001e1e:	e111      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001e20:	4b8d      	ldr	r3, [pc, #564]	; (8002058 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e22:	61bb      	str	r3, [r7, #24]
      break;
 8001e24:	e10e      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001e26:	4b8d      	ldr	r3, [pc, #564]	; (800205c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001e28:	61bb      	str	r3, [r7, #24]
      break;
 8001e2a:	e10b      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001e2c:	4b8c      	ldr	r3, [pc, #560]	; (8002060 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001e2e:	61bb      	str	r3, [r7, #24]
      break;
 8001e30:	e108      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001e32:	4b88      	ldr	r3, [pc, #544]	; (8002054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e36:	f003 0303 	and.w	r3, r3, #3
 8001e3a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001e3c:	4b85      	ldr	r3, [pc, #532]	; (8002054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e40:	091b      	lsrs	r3, r3, #4
 8001e42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e46:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001e48:	4b82      	ldr	r3, [pc, #520]	; (8002054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001e52:	4b80      	ldr	r3, [pc, #512]	; (8002054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e56:	08db      	lsrs	r3, r3, #3
 8001e58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	fb02 f303 	mul.w	r3, r2, r3
 8001e62:	ee07 3a90 	vmov	s15, r3
 8001e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e6a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 80e1 	beq.w	8002038 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	f000 8083 	beq.w	8001f84 <HAL_RCC_GetSysClockFreq+0x204>
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	f200 80a1 	bhi.w	8001fc8 <HAL_RCC_GetSysClockFreq+0x248>
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <HAL_RCC_GetSysClockFreq+0x114>
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d056      	beq.n	8001f40 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001e92:	e099      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e94:	4b6f      	ldr	r3, [pc, #444]	; (8002054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0320 	and.w	r3, r3, #32
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d02d      	beq.n	8001efc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001ea0:	4b6c      	ldr	r3, [pc, #432]	; (8002054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	08db      	lsrs	r3, r3, #3
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	4a6b      	ldr	r2, [pc, #428]	; (8002058 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001eac:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	ee07 3a90 	vmov	s15, r3
 8001eb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	ee07 3a90 	vmov	s15, r3
 8001ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001eca:	4b62      	ldr	r3, [pc, #392]	; (8002054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ed2:	ee07 3a90 	vmov	s15, r3
 8001ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001eda:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ede:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002064 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001eea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ef6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001efa:	e087      	b.n	800200c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	ee07 3a90 	vmov	s15, r3
 8001f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f06:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002068 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f0e:	4b51      	ldr	r3, [pc, #324]	; (8002054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f16:	ee07 3a90 	vmov	s15, r3
 8001f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f22:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002064 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f3e:	e065      	b.n	800200c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	ee07 3a90 	vmov	s15, r3
 8001f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f4a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800206c <HAL_RCC_GetSysClockFreq+0x2ec>
 8001f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f52:	4b40      	ldr	r3, [pc, #256]	; (8002054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f5a:	ee07 3a90 	vmov	s15, r3
 8001f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f62:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f66:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002064 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f82:	e043      	b.n	800200c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	ee07 3a90 	vmov	s15, r3
 8001f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f8e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002070 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f96:	4b2f      	ldr	r3, [pc, #188]	; (8002054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f9e:	ee07 3a90 	vmov	s15, r3
 8001fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fa6:	ed97 6a02 	vldr	s12, [r7, #8]
 8001faa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002064 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fc2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001fc6:	e021      	b.n	800200c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	ee07 3a90 	vmov	s15, r3
 8001fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fd2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800206c <HAL_RCC_GetSysClockFreq+0x2ec>
 8001fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fda:	4b1e      	ldr	r3, [pc, #120]	; (8002054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fe2:	ee07 3a90 	vmov	s15, r3
 8001fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fea:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fee:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002064 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ffa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002006:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800200a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800200c:	4b11      	ldr	r3, [pc, #68]	; (8002054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800200e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002010:	0a5b      	lsrs	r3, r3, #9
 8002012:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002016:	3301      	adds	r3, #1
 8002018:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	ee07 3a90 	vmov	s15, r3
 8002020:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002024:	edd7 6a07 	vldr	s13, [r7, #28]
 8002028:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800202c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002030:	ee17 3a90 	vmov	r3, s15
 8002034:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002036:	e005      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002038:	2300      	movs	r3, #0
 800203a:	61bb      	str	r3, [r7, #24]
      break;
 800203c:	e002      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800203e:	4b07      	ldr	r3, [pc, #28]	; (800205c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002040:	61bb      	str	r3, [r7, #24]
      break;
 8002042:	bf00      	nop
  }

  return sysclockfreq;
 8002044:	69bb      	ldr	r3, [r7, #24]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3724      	adds	r7, #36	; 0x24
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	58024400 	.word	0x58024400
 8002058:	03d09000 	.word	0x03d09000
 800205c:	003d0900 	.word	0x003d0900
 8002060:	017d7840 	.word	0x017d7840
 8002064:	46000000 	.word	0x46000000
 8002068:	4c742400 	.word	0x4c742400
 800206c:	4a742400 	.word	0x4a742400
 8002070:	4bbebc20 	.word	0x4bbebc20

08002074 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e049      	b.n	800211a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d106      	bne.n	80020a0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7fe fb7e 	bl	800079c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2202      	movs	r2, #2
 80020a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3304      	adds	r3, #4
 80020b0:	4619      	mov	r1, r3
 80020b2:	4610      	mov	r0, r2
 80020b4:	f000 fba4 	bl	8002800 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800212e:	2300      	movs	r3, #0
 8002130:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d104      	bne.n	8002142 <HAL_TIM_IC_Start_IT+0x1e>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800213e:	b2db      	uxtb	r3, r3
 8002140:	e023      	b.n	800218a <HAL_TIM_IC_Start_IT+0x66>
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	2b04      	cmp	r3, #4
 8002146:	d104      	bne.n	8002152 <HAL_TIM_IC_Start_IT+0x2e>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800214e:	b2db      	uxtb	r3, r3
 8002150:	e01b      	b.n	800218a <HAL_TIM_IC_Start_IT+0x66>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	2b08      	cmp	r3, #8
 8002156:	d104      	bne.n	8002162 <HAL_TIM_IC_Start_IT+0x3e>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800215e:	b2db      	uxtb	r3, r3
 8002160:	e013      	b.n	800218a <HAL_TIM_IC_Start_IT+0x66>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	2b0c      	cmp	r3, #12
 8002166:	d104      	bne.n	8002172 <HAL_TIM_IC_Start_IT+0x4e>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800216e:	b2db      	uxtb	r3, r3
 8002170:	e00b      	b.n	800218a <HAL_TIM_IC_Start_IT+0x66>
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	2b10      	cmp	r3, #16
 8002176:	d104      	bne.n	8002182 <HAL_TIM_IC_Start_IT+0x5e>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800217e:	b2db      	uxtb	r3, r3
 8002180:	e003      	b.n	800218a <HAL_TIM_IC_Start_IT+0x66>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002188:	b2db      	uxtb	r3, r3
 800218a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d104      	bne.n	800219c <HAL_TIM_IC_Start_IT+0x78>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002198:	b2db      	uxtb	r3, r3
 800219a:	e013      	b.n	80021c4 <HAL_TIM_IC_Start_IT+0xa0>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	2b04      	cmp	r3, #4
 80021a0:	d104      	bne.n	80021ac <HAL_TIM_IC_Start_IT+0x88>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	e00b      	b.n	80021c4 <HAL_TIM_IC_Start_IT+0xa0>
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	2b08      	cmp	r3, #8
 80021b0:	d104      	bne.n	80021bc <HAL_TIM_IC_Start_IT+0x98>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	e003      	b.n	80021c4 <HAL_TIM_IC_Start_IT+0xa0>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80021c6:	7bbb      	ldrb	r3, [r7, #14]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d102      	bne.n	80021d2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80021cc:	7b7b      	ldrb	r3, [r7, #13]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d001      	beq.n	80021d6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e0ec      	b.n	80023b0 <HAL_TIM_IC_Start_IT+0x28c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d104      	bne.n	80021e6 <HAL_TIM_IC_Start_IT+0xc2>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2202      	movs	r2, #2
 80021e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021e4:	e023      	b.n	800222e <HAL_TIM_IC_Start_IT+0x10a>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	2b04      	cmp	r3, #4
 80021ea:	d104      	bne.n	80021f6 <HAL_TIM_IC_Start_IT+0xd2>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2202      	movs	r2, #2
 80021f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021f4:	e01b      	b.n	800222e <HAL_TIM_IC_Start_IT+0x10a>
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d104      	bne.n	8002206 <HAL_TIM_IC_Start_IT+0xe2>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2202      	movs	r2, #2
 8002200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002204:	e013      	b.n	800222e <HAL_TIM_IC_Start_IT+0x10a>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	2b0c      	cmp	r3, #12
 800220a:	d104      	bne.n	8002216 <HAL_TIM_IC_Start_IT+0xf2>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2202      	movs	r2, #2
 8002210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002214:	e00b      	b.n	800222e <HAL_TIM_IC_Start_IT+0x10a>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	2b10      	cmp	r3, #16
 800221a:	d104      	bne.n	8002226 <HAL_TIM_IC_Start_IT+0x102>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2202      	movs	r2, #2
 8002220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002224:	e003      	b.n	800222e <HAL_TIM_IC_Start_IT+0x10a>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2202      	movs	r2, #2
 800222a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d104      	bne.n	800223e <HAL_TIM_IC_Start_IT+0x11a>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2202      	movs	r2, #2
 8002238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800223c:	e013      	b.n	8002266 <HAL_TIM_IC_Start_IT+0x142>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	2b04      	cmp	r3, #4
 8002242:	d104      	bne.n	800224e <HAL_TIM_IC_Start_IT+0x12a>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2202      	movs	r2, #2
 8002248:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800224c:	e00b      	b.n	8002266 <HAL_TIM_IC_Start_IT+0x142>
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	2b08      	cmp	r3, #8
 8002252:	d104      	bne.n	800225e <HAL_TIM_IC_Start_IT+0x13a>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2202      	movs	r2, #2
 8002258:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800225c:	e003      	b.n	8002266 <HAL_TIM_IC_Start_IT+0x142>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2202      	movs	r2, #2
 8002262:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	2b0c      	cmp	r3, #12
 800226a:	d841      	bhi.n	80022f0 <HAL_TIM_IC_Start_IT+0x1cc>
 800226c:	a201      	add	r2, pc, #4	; (adr r2, 8002274 <HAL_TIM_IC_Start_IT+0x150>)
 800226e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002272:	bf00      	nop
 8002274:	080022a9 	.word	0x080022a9
 8002278:	080022f1 	.word	0x080022f1
 800227c:	080022f1 	.word	0x080022f1
 8002280:	080022f1 	.word	0x080022f1
 8002284:	080022bb 	.word	0x080022bb
 8002288:	080022f1 	.word	0x080022f1
 800228c:	080022f1 	.word	0x080022f1
 8002290:	080022f1 	.word	0x080022f1
 8002294:	080022cd 	.word	0x080022cd
 8002298:	080022f1 	.word	0x080022f1
 800229c:	080022f1 	.word	0x080022f1
 80022a0:	080022f1 	.word	0x080022f1
 80022a4:	080022df 	.word	0x080022df
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68da      	ldr	r2, [r3, #12]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 0202 	orr.w	r2, r2, #2
 80022b6:	60da      	str	r2, [r3, #12]
      break;
 80022b8:	e01d      	b.n	80022f6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68da      	ldr	r2, [r3, #12]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f042 0204 	orr.w	r2, r2, #4
 80022c8:	60da      	str	r2, [r3, #12]
      break;
 80022ca:	e014      	b.n	80022f6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f042 0208 	orr.w	r2, r2, #8
 80022da:	60da      	str	r2, [r3, #12]
      break;
 80022dc:	e00b      	b.n	80022f6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68da      	ldr	r2, [r3, #12]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f042 0210 	orr.w	r2, r2, #16
 80022ec:	60da      	str	r2, [r3, #12]
      break;
 80022ee:	e002      	b.n	80022f6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	73fb      	strb	r3, [r7, #15]
      break;
 80022f4:	bf00      	nop
  }

  if (status == HAL_OK)
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d158      	bne.n	80023ae <HAL_TIM_IC_Start_IT+0x28a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2201      	movs	r2, #1
 8002302:	6839      	ldr	r1, [r7, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f000 fc63 	bl	8002bd0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a2a      	ldr	r2, [pc, #168]	; (80023b8 <HAL_TIM_IC_Start_IT+0x294>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d02c      	beq.n	800236e <HAL_TIM_IC_Start_IT+0x24a>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800231c:	d027      	beq.n	800236e <HAL_TIM_IC_Start_IT+0x24a>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a26      	ldr	r2, [pc, #152]	; (80023bc <HAL_TIM_IC_Start_IT+0x298>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d022      	beq.n	800236e <HAL_TIM_IC_Start_IT+0x24a>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a24      	ldr	r2, [pc, #144]	; (80023c0 <HAL_TIM_IC_Start_IT+0x29c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d01d      	beq.n	800236e <HAL_TIM_IC_Start_IT+0x24a>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a23      	ldr	r2, [pc, #140]	; (80023c4 <HAL_TIM_IC_Start_IT+0x2a0>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d018      	beq.n	800236e <HAL_TIM_IC_Start_IT+0x24a>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a21      	ldr	r2, [pc, #132]	; (80023c8 <HAL_TIM_IC_Start_IT+0x2a4>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d013      	beq.n	800236e <HAL_TIM_IC_Start_IT+0x24a>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a20      	ldr	r2, [pc, #128]	; (80023cc <HAL_TIM_IC_Start_IT+0x2a8>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d00e      	beq.n	800236e <HAL_TIM_IC_Start_IT+0x24a>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a1e      	ldr	r2, [pc, #120]	; (80023d0 <HAL_TIM_IC_Start_IT+0x2ac>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d009      	beq.n	800236e <HAL_TIM_IC_Start_IT+0x24a>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a1d      	ldr	r2, [pc, #116]	; (80023d4 <HAL_TIM_IC_Start_IT+0x2b0>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d004      	beq.n	800236e <HAL_TIM_IC_Start_IT+0x24a>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a1b      	ldr	r2, [pc, #108]	; (80023d8 <HAL_TIM_IC_Start_IT+0x2b4>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d115      	bne.n	800239a <HAL_TIM_IC_Start_IT+0x276>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	4b19      	ldr	r3, [pc, #100]	; (80023dc <HAL_TIM_IC_Start_IT+0x2b8>)
 8002376:	4013      	ands	r3, r2
 8002378:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	2b06      	cmp	r3, #6
 800237e:	d015      	beq.n	80023ac <HAL_TIM_IC_Start_IT+0x288>
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002386:	d011      	beq.n	80023ac <HAL_TIM_IC_Start_IT+0x288>
      {
        __HAL_TIM_ENABLE(htim);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f042 0201 	orr.w	r2, r2, #1
 8002396:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002398:	e008      	b.n	80023ac <HAL_TIM_IC_Start_IT+0x288>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f042 0201 	orr.w	r2, r2, #1
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	e000      	b.n	80023ae <HAL_TIM_IC_Start_IT+0x28a>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ac:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80023ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40010000 	.word	0x40010000
 80023bc:	40000400 	.word	0x40000400
 80023c0:	40000800 	.word	0x40000800
 80023c4:	40000c00 	.word	0x40000c00
 80023c8:	40010400 	.word	0x40010400
 80023cc:	40001800 	.word	0x40001800
 80023d0:	40014000 	.word	0x40014000
 80023d4:	4000e000 	.word	0x4000e000
 80023d8:	4000e400 	.word	0x4000e400
 80023dc:	00010007 	.word	0x00010007

080023e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d020      	beq.n	8002444 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d01b      	beq.n	8002444 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f06f 0202 	mvn.w	r2, #2
 8002414:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7fd ff8c 	bl	8000348 <HAL_TIM_IC_CaptureCallback>
 8002430:	e005      	b.n	800243e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f9c6 	bl	80027c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 f9cd 	bl	80027d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	f003 0304 	and.w	r3, r3, #4
 800244a:	2b00      	cmp	r3, #0
 800244c:	d020      	beq.n	8002490 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b00      	cmp	r3, #0
 8002456:	d01b      	beq.n	8002490 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f06f 0204 	mvn.w	r2, #4
 8002460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2202      	movs	r2, #2
 8002466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7fd ff66 	bl	8000348 <HAL_TIM_IC_CaptureCallback>
 800247c:	e005      	b.n	800248a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f9a0 	bl	80027c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 f9a7 	bl	80027d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	2b00      	cmp	r3, #0
 8002498:	d020      	beq.n	80024dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f003 0308 	and.w	r3, r3, #8
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d01b      	beq.n	80024dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f06f 0208 	mvn.w	r2, #8
 80024ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2204      	movs	r2, #4
 80024b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7fd ff40 	bl	8000348 <HAL_TIM_IC_CaptureCallback>
 80024c8:	e005      	b.n	80024d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f97a 	bl	80027c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 f981 	bl	80027d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	f003 0310 	and.w	r3, r3, #16
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d020      	beq.n	8002528 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f003 0310 	and.w	r3, r3, #16
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d01b      	beq.n	8002528 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f06f 0210 	mvn.w	r2, #16
 80024f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2208      	movs	r2, #8
 80024fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7fd ff1a 	bl	8000348 <HAL_TIM_IC_CaptureCallback>
 8002514:	e005      	b.n	8002522 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f954 	bl	80027c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 f95b 	bl	80027d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00c      	beq.n	800254c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b00      	cmp	r3, #0
 800253a:	d007      	beq.n	800254c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f06f 0201 	mvn.w	r2, #1
 8002544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f932 	bl	80027b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002552:	2b00      	cmp	r3, #0
 8002554:	d104      	bne.n	8002560 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00c      	beq.n	800257a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002566:	2b00      	cmp	r3, #0
 8002568:	d007      	beq.n	800257a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8002572:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 fbf7 	bl	8002d68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00c      	beq.n	800259e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800258a:	2b00      	cmp	r3, #0
 800258c:	d007      	beq.n	800259e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002596:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f000 fbef 	bl	8002d7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00c      	beq.n	80025c2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d007      	beq.n	80025c2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f000 f915 	bl	80027ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	f003 0320 	and.w	r3, r3, #32
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00c      	beq.n	80025e6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f003 0320 	and.w	r3, r3, #32
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d007      	beq.n	80025e6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f06f 0220 	mvn.w	r2, #32
 80025de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 fbb7 	bl	8002d54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025e6:	bf00      	nop
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b086      	sub	sp, #24
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	60f8      	str	r0, [r7, #12]
 80025f6:	60b9      	str	r1, [r7, #8]
 80025f8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025fa:	2300      	movs	r3, #0
 80025fc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002604:	2b01      	cmp	r3, #1
 8002606:	d101      	bne.n	800260c <HAL_TIM_IC_ConfigChannel+0x1e>
 8002608:	2302      	movs	r3, #2
 800260a:	e088      	b.n	800271e <HAL_TIM_IC_ConfigChannel+0x130>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d11b      	bne.n	8002652 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800262a:	f000 f99b 	bl	8002964 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	699a      	ldr	r2, [r3, #24]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 020c 	bic.w	r2, r2, #12
 800263c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6999      	ldr	r1, [r3, #24]
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	430a      	orrs	r2, r1
 800264e:	619a      	str	r2, [r3, #24]
 8002650:	e060      	b.n	8002714 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b04      	cmp	r3, #4
 8002656:	d11c      	bne.n	8002692 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002668:	f000 f9fc 	bl	8002a64 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	699a      	ldr	r2, [r3, #24]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800267a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6999      	ldr	r1, [r3, #24]
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	021a      	lsls	r2, r3, #8
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	430a      	orrs	r2, r1
 800268e:	619a      	str	r2, [r3, #24]
 8002690:	e040      	b.n	8002714 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b08      	cmp	r3, #8
 8002696:	d11b      	bne.n	80026d0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80026a8:	f000 fa19 	bl	8002ade <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	69da      	ldr	r2, [r3, #28]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 020c 	bic.w	r2, r2, #12
 80026ba:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	69d9      	ldr	r1, [r3, #28]
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	430a      	orrs	r2, r1
 80026cc:	61da      	str	r2, [r3, #28]
 80026ce:	e021      	b.n	8002714 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b0c      	cmp	r3, #12
 80026d4:	d11c      	bne.n	8002710 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80026e6:	f000 fa36 	bl	8002b56 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	69da      	ldr	r2, [r3, #28]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80026f8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	69d9      	ldr	r1, [r3, #28]
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	021a      	lsls	r2, r3, #8
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	61da      	str	r2, [r3, #28]
 800270e:	e001      	b.n	8002714 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800271c:	7dfb      	ldrb	r3, [r7, #23]
}
 800271e:	4618      	mov	r0, r3
 8002720:	3718      	adds	r7, #24
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
	...

08002728 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002732:	2300      	movs	r3, #0
 8002734:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	2b0c      	cmp	r3, #12
 800273a:	d831      	bhi.n	80027a0 <HAL_TIM_ReadCapturedValue+0x78>
 800273c:	a201      	add	r2, pc, #4	; (adr r2, 8002744 <HAL_TIM_ReadCapturedValue+0x1c>)
 800273e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002742:	bf00      	nop
 8002744:	08002779 	.word	0x08002779
 8002748:	080027a1 	.word	0x080027a1
 800274c:	080027a1 	.word	0x080027a1
 8002750:	080027a1 	.word	0x080027a1
 8002754:	08002783 	.word	0x08002783
 8002758:	080027a1 	.word	0x080027a1
 800275c:	080027a1 	.word	0x080027a1
 8002760:	080027a1 	.word	0x080027a1
 8002764:	0800278d 	.word	0x0800278d
 8002768:	080027a1 	.word	0x080027a1
 800276c:	080027a1 	.word	0x080027a1
 8002770:	080027a1 	.word	0x080027a1
 8002774:	08002797 	.word	0x08002797
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800277e:	60fb      	str	r3, [r7, #12]

      break;
 8002780:	e00f      	b.n	80027a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002788:	60fb      	str	r3, [r7, #12]

      break;
 800278a:	e00a      	b.n	80027a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002792:	60fb      	str	r3, [r7, #12]

      break;
 8002794:	e005      	b.n	80027a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	60fb      	str	r3, [r7, #12]

      break;
 800279e:	e000      	b.n	80027a2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80027a0:	bf00      	nop
  }

  return tmpreg;
 80027a2:	68fb      	ldr	r3, [r7, #12]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3714      	adds	r7, #20
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a4a      	ldr	r2, [pc, #296]	; (800293c <TIM_Base_SetConfig+0x13c>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d013      	beq.n	8002840 <TIM_Base_SetConfig+0x40>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800281e:	d00f      	beq.n	8002840 <TIM_Base_SetConfig+0x40>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a47      	ldr	r2, [pc, #284]	; (8002940 <TIM_Base_SetConfig+0x140>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d00b      	beq.n	8002840 <TIM_Base_SetConfig+0x40>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a46      	ldr	r2, [pc, #280]	; (8002944 <TIM_Base_SetConfig+0x144>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d007      	beq.n	8002840 <TIM_Base_SetConfig+0x40>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a45      	ldr	r2, [pc, #276]	; (8002948 <TIM_Base_SetConfig+0x148>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d003      	beq.n	8002840 <TIM_Base_SetConfig+0x40>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a44      	ldr	r2, [pc, #272]	; (800294c <TIM_Base_SetConfig+0x14c>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d108      	bne.n	8002852 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002846:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	4313      	orrs	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a39      	ldr	r2, [pc, #228]	; (800293c <TIM_Base_SetConfig+0x13c>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d027      	beq.n	80028aa <TIM_Base_SetConfig+0xaa>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002860:	d023      	beq.n	80028aa <TIM_Base_SetConfig+0xaa>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a36      	ldr	r2, [pc, #216]	; (8002940 <TIM_Base_SetConfig+0x140>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d01f      	beq.n	80028aa <TIM_Base_SetConfig+0xaa>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a35      	ldr	r2, [pc, #212]	; (8002944 <TIM_Base_SetConfig+0x144>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d01b      	beq.n	80028aa <TIM_Base_SetConfig+0xaa>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a34      	ldr	r2, [pc, #208]	; (8002948 <TIM_Base_SetConfig+0x148>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d017      	beq.n	80028aa <TIM_Base_SetConfig+0xaa>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a33      	ldr	r2, [pc, #204]	; (800294c <TIM_Base_SetConfig+0x14c>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d013      	beq.n	80028aa <TIM_Base_SetConfig+0xaa>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a32      	ldr	r2, [pc, #200]	; (8002950 <TIM_Base_SetConfig+0x150>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d00f      	beq.n	80028aa <TIM_Base_SetConfig+0xaa>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a31      	ldr	r2, [pc, #196]	; (8002954 <TIM_Base_SetConfig+0x154>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d00b      	beq.n	80028aa <TIM_Base_SetConfig+0xaa>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a30      	ldr	r2, [pc, #192]	; (8002958 <TIM_Base_SetConfig+0x158>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d007      	beq.n	80028aa <TIM_Base_SetConfig+0xaa>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a2f      	ldr	r2, [pc, #188]	; (800295c <TIM_Base_SetConfig+0x15c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d003      	beq.n	80028aa <TIM_Base_SetConfig+0xaa>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a2e      	ldr	r2, [pc, #184]	; (8002960 <TIM_Base_SetConfig+0x160>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d108      	bne.n	80028bc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a16      	ldr	r2, [pc, #88]	; (800293c <TIM_Base_SetConfig+0x13c>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d00f      	beq.n	8002908 <TIM_Base_SetConfig+0x108>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a18      	ldr	r2, [pc, #96]	; (800294c <TIM_Base_SetConfig+0x14c>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d00b      	beq.n	8002908 <TIM_Base_SetConfig+0x108>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a17      	ldr	r2, [pc, #92]	; (8002950 <TIM_Base_SetConfig+0x150>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d007      	beq.n	8002908 <TIM_Base_SetConfig+0x108>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a16      	ldr	r2, [pc, #88]	; (8002954 <TIM_Base_SetConfig+0x154>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d003      	beq.n	8002908 <TIM_Base_SetConfig+0x108>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a15      	ldr	r2, [pc, #84]	; (8002958 <TIM_Base_SetConfig+0x158>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d103      	bne.n	8002910 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	691a      	ldr	r2, [r3, #16]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b01      	cmp	r3, #1
 8002920:	d105      	bne.n	800292e <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	f023 0201 	bic.w	r2, r3, #1
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	611a      	str	r2, [r3, #16]
  }
}
 800292e:	bf00      	nop
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	40010000 	.word	0x40010000
 8002940:	40000400 	.word	0x40000400
 8002944:	40000800 	.word	0x40000800
 8002948:	40000c00 	.word	0x40000c00
 800294c:	40010400 	.word	0x40010400
 8002950:	40014000 	.word	0x40014000
 8002954:	40014400 	.word	0x40014400
 8002958:	40014800 	.word	0x40014800
 800295c:	4000e000 	.word	0x4000e000
 8002960:	4000e400 	.word	0x4000e400

08002964 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002964:	b480      	push	{r7}
 8002966:	b087      	sub	sp, #28
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
 8002970:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	f023 0201 	bic.w	r2, r3, #1
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	4a2c      	ldr	r2, [pc, #176]	; (8002a40 <TIM_TI1_SetConfig+0xdc>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d023      	beq.n	80029da <TIM_TI1_SetConfig+0x76>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002998:	d01f      	beq.n	80029da <TIM_TI1_SetConfig+0x76>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	4a29      	ldr	r2, [pc, #164]	; (8002a44 <TIM_TI1_SetConfig+0xe0>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d01b      	beq.n	80029da <TIM_TI1_SetConfig+0x76>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	4a28      	ldr	r2, [pc, #160]	; (8002a48 <TIM_TI1_SetConfig+0xe4>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d017      	beq.n	80029da <TIM_TI1_SetConfig+0x76>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	4a27      	ldr	r2, [pc, #156]	; (8002a4c <TIM_TI1_SetConfig+0xe8>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d013      	beq.n	80029da <TIM_TI1_SetConfig+0x76>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	4a26      	ldr	r2, [pc, #152]	; (8002a50 <TIM_TI1_SetConfig+0xec>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d00f      	beq.n	80029da <TIM_TI1_SetConfig+0x76>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	4a25      	ldr	r2, [pc, #148]	; (8002a54 <TIM_TI1_SetConfig+0xf0>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d00b      	beq.n	80029da <TIM_TI1_SetConfig+0x76>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	4a24      	ldr	r2, [pc, #144]	; (8002a58 <TIM_TI1_SetConfig+0xf4>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d007      	beq.n	80029da <TIM_TI1_SetConfig+0x76>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	4a23      	ldr	r2, [pc, #140]	; (8002a5c <TIM_TI1_SetConfig+0xf8>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d003      	beq.n	80029da <TIM_TI1_SetConfig+0x76>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	4a22      	ldr	r2, [pc, #136]	; (8002a60 <TIM_TI1_SetConfig+0xfc>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d101      	bne.n	80029de <TIM_TI1_SetConfig+0x7a>
 80029da:	2301      	movs	r3, #1
 80029dc:	e000      	b.n	80029e0 <TIM_TI1_SetConfig+0x7c>
 80029de:	2300      	movs	r3, #0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d008      	beq.n	80029f6 <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	f023 0303 	bic.w	r3, r3, #3
 80029ea:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80029ec:	697a      	ldr	r2, [r7, #20]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	617b      	str	r3, [r7, #20]
 80029f4:	e003      	b.n	80029fe <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f043 0301 	orr.w	r3, r3, #1
 80029fc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	011b      	lsls	r3, r3, #4
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	f023 030a 	bic.w	r3, r3, #10
 8002a18:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	f003 030a 	and.w	r3, r3, #10
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	621a      	str	r2, [r3, #32]
}
 8002a32:	bf00      	nop
 8002a34:	371c      	adds	r7, #28
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	40010000 	.word	0x40010000
 8002a44:	40000400 	.word	0x40000400
 8002a48:	40000800 	.word	0x40000800
 8002a4c:	40000c00 	.word	0x40000c00
 8002a50:	40010400 	.word	0x40010400
 8002a54:	40001800 	.word	0x40001800
 8002a58:	40014000 	.word	0x40014000
 8002a5c:	4000e000 	.word	0x4000e000
 8002a60:	4000e400 	.word	0x4000e400

08002a64 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b087      	sub	sp, #28
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
 8002a70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	f023 0210 	bic.w	r2, r3, #16
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	021b      	lsls	r3, r3, #8
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002aa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	031b      	lsls	r3, r3, #12
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ab6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	011b      	lsls	r3, r3, #4
 8002abc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	621a      	str	r2, [r3, #32]
}
 8002ad2:	bf00      	nop
 8002ad4:	371c      	adds	r7, #28
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b087      	sub	sp, #28
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	60f8      	str	r0, [r7, #12]
 8002ae6:	60b9      	str	r1, [r7, #8]
 8002ae8:	607a      	str	r2, [r7, #4]
 8002aea:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	f023 0303 	bic.w	r3, r3, #3
 8002b0a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b1a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002b2e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	021b      	lsls	r3, r3, #8
 8002b34:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	621a      	str	r2, [r3, #32]
}
 8002b4a:	bf00      	nop
 8002b4c:	371c      	adds	r7, #28
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr

08002b56 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b087      	sub	sp, #28
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	60f8      	str	r0, [r7, #12]
 8002b5e:	60b9      	str	r1, [r7, #8]
 8002b60:	607a      	str	r2, [r7, #4]
 8002b62:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b82:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	021b      	lsls	r3, r3, #8
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b94:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	031b      	lsls	r3, r3, #12
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002ba8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	031b      	lsls	r3, r3, #12
 8002bae:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	621a      	str	r2, [r3, #32]
}
 8002bc4:	bf00      	nop
 8002bc6:	371c      	adds	r7, #28
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b087      	sub	sp, #28
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	f003 031f 	and.w	r3, r3, #31
 8002be2:	2201      	movs	r2, #1
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6a1a      	ldr	r2, [r3, #32]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	401a      	ands	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6a1a      	ldr	r2, [r3, #32]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	f003 031f 	and.w	r3, r3, #31
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	fa01 f303 	lsl.w	r3, r1, r3
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	621a      	str	r2, [r3, #32]
}
 8002c0e:	bf00      	nop
 8002c10:	371c      	adds	r7, #28
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
	...

08002c1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d101      	bne.n	8002c34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c30:	2302      	movs	r3, #2
 8002c32:	e077      	b.n	8002d24 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2202      	movs	r2, #2
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a35      	ldr	r2, [pc, #212]	; (8002d30 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d004      	beq.n	8002c68 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a34      	ldr	r2, [pc, #208]	; (8002d34 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d108      	bne.n	8002c7a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002c6e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c80:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a25      	ldr	r2, [pc, #148]	; (8002d30 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d02c      	beq.n	8002cf8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca6:	d027      	beq.n	8002cf8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a22      	ldr	r2, [pc, #136]	; (8002d38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d022      	beq.n	8002cf8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a21      	ldr	r2, [pc, #132]	; (8002d3c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d01d      	beq.n	8002cf8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a1f      	ldr	r2, [pc, #124]	; (8002d40 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d018      	beq.n	8002cf8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a1a      	ldr	r2, [pc, #104]	; (8002d34 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d013      	beq.n	8002cf8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a1b      	ldr	r2, [pc, #108]	; (8002d44 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d00e      	beq.n	8002cf8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a1a      	ldr	r2, [pc, #104]	; (8002d48 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d009      	beq.n	8002cf8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a18      	ldr	r2, [pc, #96]	; (8002d4c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d004      	beq.n	8002cf8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a17      	ldr	r2, [pc, #92]	; (8002d50 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d10c      	bne.n	8002d12 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cfe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	68ba      	ldr	r2, [r7, #8]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3714      	adds	r7, #20
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr
 8002d30:	40010000 	.word	0x40010000
 8002d34:	40010400 	.word	0x40010400
 8002d38:	40000400 	.word	0x40000400
 8002d3c:	40000800 	.word	0x40000800
 8002d40:	40000c00 	.word	0x40000c00
 8002d44:	40001800 	.word	0x40001800
 8002d48:	40014000 	.word	0x40014000
 8002d4c:	4000e000 	.word	0x4000e000
 8002d50:	4000e400 	.word	0x4000e400

08002d54 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <memset>:
 8002d90:	4402      	add	r2, r0
 8002d92:	4603      	mov	r3, r0
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d100      	bne.n	8002d9a <memset+0xa>
 8002d98:	4770      	bx	lr
 8002d9a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d9e:	e7f9      	b.n	8002d94 <memset+0x4>

08002da0 <__libc_init_array>:
 8002da0:	b570      	push	{r4, r5, r6, lr}
 8002da2:	4d0d      	ldr	r5, [pc, #52]	; (8002dd8 <__libc_init_array+0x38>)
 8002da4:	4c0d      	ldr	r4, [pc, #52]	; (8002ddc <__libc_init_array+0x3c>)
 8002da6:	1b64      	subs	r4, r4, r5
 8002da8:	10a4      	asrs	r4, r4, #2
 8002daa:	2600      	movs	r6, #0
 8002dac:	42a6      	cmp	r6, r4
 8002dae:	d109      	bne.n	8002dc4 <__libc_init_array+0x24>
 8002db0:	4d0b      	ldr	r5, [pc, #44]	; (8002de0 <__libc_init_array+0x40>)
 8002db2:	4c0c      	ldr	r4, [pc, #48]	; (8002de4 <__libc_init_array+0x44>)
 8002db4:	f000 f818 	bl	8002de8 <_init>
 8002db8:	1b64      	subs	r4, r4, r5
 8002dba:	10a4      	asrs	r4, r4, #2
 8002dbc:	2600      	movs	r6, #0
 8002dbe:	42a6      	cmp	r6, r4
 8002dc0:	d105      	bne.n	8002dce <__libc_init_array+0x2e>
 8002dc2:	bd70      	pop	{r4, r5, r6, pc}
 8002dc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dc8:	4798      	blx	r3
 8002dca:	3601      	adds	r6, #1
 8002dcc:	e7ee      	b.n	8002dac <__libc_init_array+0xc>
 8002dce:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dd2:	4798      	blx	r3
 8002dd4:	3601      	adds	r6, #1
 8002dd6:	e7f2      	b.n	8002dbe <__libc_init_array+0x1e>
 8002dd8:	08002e10 	.word	0x08002e10
 8002ddc:	08002e10 	.word	0x08002e10
 8002de0:	08002e10 	.word	0x08002e10
 8002de4:	08002e14 	.word	0x08002e14

08002de8 <_init>:
 8002de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dea:	bf00      	nop
 8002dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dee:	bc08      	pop	{r3}
 8002df0:	469e      	mov	lr, r3
 8002df2:	4770      	bx	lr

08002df4 <_fini>:
 8002df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002df6:	bf00      	nop
 8002df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dfa:	bc08      	pop	{r3}
 8002dfc:	469e      	mov	lr, r3
 8002dfe:	4770      	bx	lr
