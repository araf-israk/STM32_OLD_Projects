
Master_device_project_MEIRO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006760  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  080068f8  080068f8  000168f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b28  08006b28  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006b28  08006b28  00016b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b30  08006b30  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b30  08006b30  00016b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b34  08006b34  00016b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006b38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000000c  08006b44  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08006b44  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b3e2  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d5d  00000000  00000000  0002b461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b20  00000000  00000000  0002d1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000089e  00000000  00000000  0002dce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001629d  00000000  00000000  0002e57e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e043  00000000  00000000  0004481b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087ee1  00000000  00000000  0005285e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000331c  00000000  00000000  000da740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000dda5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080068e0 	.word	0x080068e0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080068e0 	.word	0x080068e0

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2f>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000adc:	bf24      	itt	cs
 8000ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ae6:	d90d      	bls.n	8000b04 <__aeabi_d2f+0x30>
 8000ae8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000afc:	bf08      	it	eq
 8000afe:	f020 0001 	biceq.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b08:	d121      	bne.n	8000b4e <__aeabi_d2f+0x7a>
 8000b0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b0e:	bfbc      	itt	lt
 8000b10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	4770      	bxlt	lr
 8000b16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b1e:	f1c2 0218 	rsb	r2, r2, #24
 8000b22:	f1c2 0c20 	rsb	ip, r2, #32
 8000b26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b2e:	bf18      	it	ne
 8000b30:	f040 0001 	orrne.w	r0, r0, #1
 8000b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b40:	ea40 000c 	orr.w	r0, r0, ip
 8000b44:	fa23 f302 	lsr.w	r3, r3, r2
 8000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b4c:	e7cc      	b.n	8000ae8 <__aeabi_d2f+0x14>
 8000b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b52:	d107      	bne.n	8000b64 <__aeabi_d2f+0x90>
 8000b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b58:	bf1e      	ittt	ne
 8000b5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b62:	4770      	bxne	lr
 8000b64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_uldivmod>:
 8000b74:	b953      	cbnz	r3, 8000b8c <__aeabi_uldivmod+0x18>
 8000b76:	b94a      	cbnz	r2, 8000b8c <__aeabi_uldivmod+0x18>
 8000b78:	2900      	cmp	r1, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	2800      	cmpeq	r0, #0
 8000b7e:	bf1c      	itt	ne
 8000b80:	f04f 31ff 	movne.w	r1, #4294967295
 8000b84:	f04f 30ff 	movne.w	r0, #4294967295
 8000b88:	f000 b970 	b.w	8000e6c <__aeabi_idiv0>
 8000b8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b94:	f000 f806 	bl	8000ba4 <__udivmoddi4>
 8000b98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba0:	b004      	add	sp, #16
 8000ba2:	4770      	bx	lr

08000ba4 <__udivmoddi4>:
 8000ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba8:	9e08      	ldr	r6, [sp, #32]
 8000baa:	460d      	mov	r5, r1
 8000bac:	4604      	mov	r4, r0
 8000bae:	460f      	mov	r7, r1
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d14a      	bne.n	8000c4a <__udivmoddi4+0xa6>
 8000bb4:	428a      	cmp	r2, r1
 8000bb6:	4694      	mov	ip, r2
 8000bb8:	d965      	bls.n	8000c86 <__udivmoddi4+0xe2>
 8000bba:	fab2 f382 	clz	r3, r2
 8000bbe:	b143      	cbz	r3, 8000bd2 <__udivmoddi4+0x2e>
 8000bc0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bc4:	f1c3 0220 	rsb	r2, r3, #32
 8000bc8:	409f      	lsls	r7, r3
 8000bca:	fa20 f202 	lsr.w	r2, r0, r2
 8000bce:	4317      	orrs	r7, r2
 8000bd0:	409c      	lsls	r4, r3
 8000bd2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bd6:	fa1f f58c 	uxth.w	r5, ip
 8000bda:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bde:	0c22      	lsrs	r2, r4, #16
 8000be0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000be4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000be8:	fb01 f005 	mul.w	r0, r1, r5
 8000bec:	4290      	cmp	r0, r2
 8000bee:	d90a      	bls.n	8000c06 <__udivmoddi4+0x62>
 8000bf0:	eb1c 0202 	adds.w	r2, ip, r2
 8000bf4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bf8:	f080 811c 	bcs.w	8000e34 <__udivmoddi4+0x290>
 8000bfc:	4290      	cmp	r0, r2
 8000bfe:	f240 8119 	bls.w	8000e34 <__udivmoddi4+0x290>
 8000c02:	3902      	subs	r1, #2
 8000c04:	4462      	add	r2, ip
 8000c06:	1a12      	subs	r2, r2, r0
 8000c08:	b2a4      	uxth	r4, r4
 8000c0a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c0e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c12:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c16:	fb00 f505 	mul.w	r5, r0, r5
 8000c1a:	42a5      	cmp	r5, r4
 8000c1c:	d90a      	bls.n	8000c34 <__udivmoddi4+0x90>
 8000c1e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c22:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c26:	f080 8107 	bcs.w	8000e38 <__udivmoddi4+0x294>
 8000c2a:	42a5      	cmp	r5, r4
 8000c2c:	f240 8104 	bls.w	8000e38 <__udivmoddi4+0x294>
 8000c30:	4464      	add	r4, ip
 8000c32:	3802      	subs	r0, #2
 8000c34:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c38:	1b64      	subs	r4, r4, r5
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	b11e      	cbz	r6, 8000c46 <__udivmoddi4+0xa2>
 8000c3e:	40dc      	lsrs	r4, r3
 8000c40:	2300      	movs	r3, #0
 8000c42:	e9c6 4300 	strd	r4, r3, [r6]
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d908      	bls.n	8000c60 <__udivmoddi4+0xbc>
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	f000 80ed 	beq.w	8000e2e <__udivmoddi4+0x28a>
 8000c54:	2100      	movs	r1, #0
 8000c56:	e9c6 0500 	strd	r0, r5, [r6]
 8000c5a:	4608      	mov	r0, r1
 8000c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c60:	fab3 f183 	clz	r1, r3
 8000c64:	2900      	cmp	r1, #0
 8000c66:	d149      	bne.n	8000cfc <__udivmoddi4+0x158>
 8000c68:	42ab      	cmp	r3, r5
 8000c6a:	d302      	bcc.n	8000c72 <__udivmoddi4+0xce>
 8000c6c:	4282      	cmp	r2, r0
 8000c6e:	f200 80f8 	bhi.w	8000e62 <__udivmoddi4+0x2be>
 8000c72:	1a84      	subs	r4, r0, r2
 8000c74:	eb65 0203 	sbc.w	r2, r5, r3
 8000c78:	2001      	movs	r0, #1
 8000c7a:	4617      	mov	r7, r2
 8000c7c:	2e00      	cmp	r6, #0
 8000c7e:	d0e2      	beq.n	8000c46 <__udivmoddi4+0xa2>
 8000c80:	e9c6 4700 	strd	r4, r7, [r6]
 8000c84:	e7df      	b.n	8000c46 <__udivmoddi4+0xa2>
 8000c86:	b902      	cbnz	r2, 8000c8a <__udivmoddi4+0xe6>
 8000c88:	deff      	udf	#255	; 0xff
 8000c8a:	fab2 f382 	clz	r3, r2
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f040 8090 	bne.w	8000db4 <__udivmoddi4+0x210>
 8000c94:	1a8a      	subs	r2, r1, r2
 8000c96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c9a:	fa1f fe8c 	uxth.w	lr, ip
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ca4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ca8:	0c22      	lsrs	r2, r4, #16
 8000caa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cae:	fb0e f005 	mul.w	r0, lr, r5
 8000cb2:	4290      	cmp	r0, r2
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0x124>
 8000cb6:	eb1c 0202 	adds.w	r2, ip, r2
 8000cba:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0x122>
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	f200 80cb 	bhi.w	8000e5c <__udivmoddi4+0x2b8>
 8000cc6:	4645      	mov	r5, r8
 8000cc8:	1a12      	subs	r2, r2, r0
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cd0:	fb07 2210 	mls	r2, r7, r0, r2
 8000cd4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cdc:	45a6      	cmp	lr, r4
 8000cde:	d908      	bls.n	8000cf2 <__udivmoddi4+0x14e>
 8000ce0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ce8:	d202      	bcs.n	8000cf0 <__udivmoddi4+0x14c>
 8000cea:	45a6      	cmp	lr, r4
 8000cec:	f200 80bb 	bhi.w	8000e66 <__udivmoddi4+0x2c2>
 8000cf0:	4610      	mov	r0, r2
 8000cf2:	eba4 040e 	sub.w	r4, r4, lr
 8000cf6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cfa:	e79f      	b.n	8000c3c <__udivmoddi4+0x98>
 8000cfc:	f1c1 0720 	rsb	r7, r1, #32
 8000d00:	408b      	lsls	r3, r1
 8000d02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d0a:	fa05 f401 	lsl.w	r4, r5, r1
 8000d0e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d12:	40fd      	lsrs	r5, r7
 8000d14:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d18:	4323      	orrs	r3, r4
 8000d1a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	fb09 5518 	mls	r5, r9, r8, r5
 8000d26:	0c1c      	lsrs	r4, r3, #16
 8000d28:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d2c:	fb08 f50e 	mul.w	r5, r8, lr
 8000d30:	42a5      	cmp	r5, r4
 8000d32:	fa02 f201 	lsl.w	r2, r2, r1
 8000d36:	fa00 f001 	lsl.w	r0, r0, r1
 8000d3a:	d90b      	bls.n	8000d54 <__udivmoddi4+0x1b0>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d44:	f080 8088 	bcs.w	8000e58 <__udivmoddi4+0x2b4>
 8000d48:	42a5      	cmp	r5, r4
 8000d4a:	f240 8085 	bls.w	8000e58 <__udivmoddi4+0x2b4>
 8000d4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d52:	4464      	add	r4, ip
 8000d54:	1b64      	subs	r4, r4, r5
 8000d56:	b29d      	uxth	r5, r3
 8000d58:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d5c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d60:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d64:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x1da>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d74:	d26c      	bcs.n	8000e50 <__udivmoddi4+0x2ac>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	d96a      	bls.n	8000e50 <__udivmoddi4+0x2ac>
 8000d7a:	3b02      	subs	r3, #2
 8000d7c:	4464      	add	r4, ip
 8000d7e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d82:	fba3 9502 	umull	r9, r5, r3, r2
 8000d86:	eba4 040e 	sub.w	r4, r4, lr
 8000d8a:	42ac      	cmp	r4, r5
 8000d8c:	46c8      	mov	r8, r9
 8000d8e:	46ae      	mov	lr, r5
 8000d90:	d356      	bcc.n	8000e40 <__udivmoddi4+0x29c>
 8000d92:	d053      	beq.n	8000e3c <__udivmoddi4+0x298>
 8000d94:	b156      	cbz	r6, 8000dac <__udivmoddi4+0x208>
 8000d96:	ebb0 0208 	subs.w	r2, r0, r8
 8000d9a:	eb64 040e 	sbc.w	r4, r4, lr
 8000d9e:	fa04 f707 	lsl.w	r7, r4, r7
 8000da2:	40ca      	lsrs	r2, r1
 8000da4:	40cc      	lsrs	r4, r1
 8000da6:	4317      	orrs	r7, r2
 8000da8:	e9c6 7400 	strd	r7, r4, [r6]
 8000dac:	4618      	mov	r0, r3
 8000dae:	2100      	movs	r1, #0
 8000db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db4:	f1c3 0120 	rsb	r1, r3, #32
 8000db8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dbc:	fa20 f201 	lsr.w	r2, r0, r1
 8000dc0:	fa25 f101 	lsr.w	r1, r5, r1
 8000dc4:	409d      	lsls	r5, r3
 8000dc6:	432a      	orrs	r2, r5
 8000dc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dcc:	fa1f fe8c 	uxth.w	lr, ip
 8000dd0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd4:	fb07 1510 	mls	r5, r7, r0, r1
 8000dd8:	0c11      	lsrs	r1, r2, #16
 8000dda:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dde:	fb00 f50e 	mul.w	r5, r0, lr
 8000de2:	428d      	cmp	r5, r1
 8000de4:	fa04 f403 	lsl.w	r4, r4, r3
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x258>
 8000dea:	eb1c 0101 	adds.w	r1, ip, r1
 8000dee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000df2:	d22f      	bcs.n	8000e54 <__udivmoddi4+0x2b0>
 8000df4:	428d      	cmp	r5, r1
 8000df6:	d92d      	bls.n	8000e54 <__udivmoddi4+0x2b0>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	4461      	add	r1, ip
 8000dfc:	1b49      	subs	r1, r1, r5
 8000dfe:	b292      	uxth	r2, r2
 8000e00:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e04:	fb07 1115 	mls	r1, r7, r5, r1
 8000e08:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e0c:	fb05 f10e 	mul.w	r1, r5, lr
 8000e10:	4291      	cmp	r1, r2
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x282>
 8000e14:	eb1c 0202 	adds.w	r2, ip, r2
 8000e18:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e1c:	d216      	bcs.n	8000e4c <__udivmoddi4+0x2a8>
 8000e1e:	4291      	cmp	r1, r2
 8000e20:	d914      	bls.n	8000e4c <__udivmoddi4+0x2a8>
 8000e22:	3d02      	subs	r5, #2
 8000e24:	4462      	add	r2, ip
 8000e26:	1a52      	subs	r2, r2, r1
 8000e28:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e2c:	e738      	b.n	8000ca0 <__udivmoddi4+0xfc>
 8000e2e:	4631      	mov	r1, r6
 8000e30:	4630      	mov	r0, r6
 8000e32:	e708      	b.n	8000c46 <__udivmoddi4+0xa2>
 8000e34:	4639      	mov	r1, r7
 8000e36:	e6e6      	b.n	8000c06 <__udivmoddi4+0x62>
 8000e38:	4610      	mov	r0, r2
 8000e3a:	e6fb      	b.n	8000c34 <__udivmoddi4+0x90>
 8000e3c:	4548      	cmp	r0, r9
 8000e3e:	d2a9      	bcs.n	8000d94 <__udivmoddi4+0x1f0>
 8000e40:	ebb9 0802 	subs.w	r8, r9, r2
 8000e44:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	e7a3      	b.n	8000d94 <__udivmoddi4+0x1f0>
 8000e4c:	4645      	mov	r5, r8
 8000e4e:	e7ea      	b.n	8000e26 <__udivmoddi4+0x282>
 8000e50:	462b      	mov	r3, r5
 8000e52:	e794      	b.n	8000d7e <__udivmoddi4+0x1da>
 8000e54:	4640      	mov	r0, r8
 8000e56:	e7d1      	b.n	8000dfc <__udivmoddi4+0x258>
 8000e58:	46d0      	mov	r8, sl
 8000e5a:	e77b      	b.n	8000d54 <__udivmoddi4+0x1b0>
 8000e5c:	3d02      	subs	r5, #2
 8000e5e:	4462      	add	r2, ip
 8000e60:	e732      	b.n	8000cc8 <__udivmoddi4+0x124>
 8000e62:	4608      	mov	r0, r1
 8000e64:	e70a      	b.n	8000c7c <__udivmoddi4+0xd8>
 8000e66:	4464      	add	r4, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	e742      	b.n	8000cf2 <__udivmoddi4+0x14e>

08000e6c <__aeabi_idiv0>:
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop

08000e70 <GC9A01_Init>:

//==============================================================================
// Процедура инициализации дисплея
//==============================================================================
//==== данные для инициализации дисплея GC9A01_240X240 ==========
void GC9A01_Init(void){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af02      	add	r7, sp, #8
	
		// Задержка после подачи питания
		// если при старте не всегда запускаеться дисплей увеличиваем время задержки
		HAL_Delay(100);	
 8000e76:	2064      	movs	r0, #100	; 0x64
 8000e78:	f001 fd7e 	bl	8002978 <HAL_Delay>

		GC9A01_Width = GC9A01_WIDTH;
 8000e7c:	4bfb      	ldr	r3, [pc, #1004]	; (800126c <GC9A01_Init+0x3fc>)
 8000e7e:	22f0      	movs	r2, #240	; 0xf0
 8000e80:	801a      	strh	r2, [r3, #0]
		GC9A01_Height = GC9A01_HEIGHT;
 8000e82:	4bfb      	ldr	r3, [pc, #1004]	; (8001270 <GC9A01_Init+0x400>)
 8000e84:	22f0      	movs	r2, #240	; 0xf0
 8000e86:	801a      	strh	r2, [r3, #0]
	
		GC9A01_HardReset(); 
 8000e88:	f000 fa64 	bl	8001354 <GC9A01_HardReset>

    GC9A01_Select();
 8000e8c:	f000 fa46 	bl	800131c <GC9A01_Select>

		GC9A01_SendCmd(GC9A01_InnerReg2Enable);
 8000e90:	20ef      	movs	r0, #239	; 0xef
 8000e92:	f000 fa77 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendCmd(0xEB);        
 8000e96:	20eb      	movs	r0, #235	; 0xeb
 8000e98:	f000 fa74 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x14);
 8000e9c:	2014      	movs	r0, #20
 8000e9e:	f000 faa7 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(GC9A01_InnerReg1Enable);
 8000ea2:	20fe      	movs	r0, #254	; 0xfe
 8000ea4:	f000 fa6e 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendCmd(GC9A01_InnerReg2Enable);
 8000ea8:	20ef      	movs	r0, #239	; 0xef
 8000eaa:	f000 fa6b 	bl	8001384 <GC9A01_SendCmd>

		GC9A01_SendCmd(0xEB);        
 8000eae:	20eb      	movs	r0, #235	; 0xeb
 8000eb0:	f000 fa68 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x14);       
 8000eb4:	2014      	movs	r0, #20
 8000eb6:	f000 fa9b 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0x84);       
 8000eba:	2084      	movs	r0, #132	; 0x84
 8000ebc:	f000 fa62 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x40);
 8000ec0:	2040      	movs	r0, #64	; 0x40
 8000ec2:	f000 fa95 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0x85);        
 8000ec6:	2085      	movs	r0, #133	; 0x85
 8000ec8:	f000 fa5c 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0xFF);
 8000ecc:	20ff      	movs	r0, #255	; 0xff
 8000ece:	f000 fa8f 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0x86);       
 8000ed2:	2086      	movs	r0, #134	; 0x86
 8000ed4:	f000 fa56 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0xFF);
 8000ed8:	20ff      	movs	r0, #255	; 0xff
 8000eda:	f000 fa89 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0x87);        
 8000ede:	2087      	movs	r0, #135	; 0x87
 8000ee0:	f000 fa50 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0xFF);
 8000ee4:	20ff      	movs	r0, #255	; 0xff
 8000ee6:	f000 fa83 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0x88);        
 8000eea:	2088      	movs	r0, #136	; 0x88
 8000eec:	f000 fa4a 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x0A);
 8000ef0:	200a      	movs	r0, #10
 8000ef2:	f000 fa7d 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0x89);        
 8000ef6:	2089      	movs	r0, #137	; 0x89
 8000ef8:	f000 fa44 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x21);
 8000efc:	2021      	movs	r0, #33	; 0x21
 8000efe:	f000 fa77 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0x8A);        
 8000f02:	208a      	movs	r0, #138	; 0x8a
 8000f04:	f000 fa3e 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x00);
 8000f08:	2000      	movs	r0, #0
 8000f0a:	f000 fa71 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0x8B);        
 8000f0e:	208b      	movs	r0, #139	; 0x8b
 8000f10:	f000 fa38 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x80);
 8000f14:	2080      	movs	r0, #128	; 0x80
 8000f16:	f000 fa6b 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0x8C);        
 8000f1a:	208c      	movs	r0, #140	; 0x8c
 8000f1c:	f000 fa32 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x01);
 8000f20:	2001      	movs	r0, #1
 8000f22:	f000 fa65 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0x8D);        
 8000f26:	208d      	movs	r0, #141	; 0x8d
 8000f28:	f000 fa2c 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x01);
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	f000 fa5f 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0x8E);        
 8000f32:	208e      	movs	r0, #142	; 0x8e
 8000f34:	f000 fa26 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0xFF);
 8000f38:	20ff      	movs	r0, #255	; 0xff
 8000f3a:	f000 fa59 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0x8F);        
 8000f3e:	208f      	movs	r0, #143	; 0x8f
 8000f40:	f000 fa20 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0xFF);
 8000f44:	20ff      	movs	r0, #255	; 0xff
 8000f46:	f000 fa53 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(GC9A01_DisplayFunctionControl);
 8000f4a:	20b6      	movs	r0, #182	; 0xb6
 8000f4c:	f000 fa1a 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x00);
 8000f50:	2000      	movs	r0, #0
 8000f52:	f000 fa4d 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x20); // Scan direction S360 -> S1
 8000f56:	2020      	movs	r0, #32
 8000f58:	f000 fa4a 	bl	80013f0 <GC9A01_SendData>

		// def rotation
		GC9A01_SendCmd(GC9A01_MADCTL);
 8000f5c:	2036      	movs	r0, #54	; 0x36
 8000f5e:	f000 fa11 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(GC9A01_DEF_ROTATION);
 8000f62:	2008      	movs	r0, #8
 8000f64:	f000 fa44 	bl	80013f0 <GC9A01_SendData>
		
		// ColorMode
		GC9A01_SendCmd(GC9A01_COLMOD);
 8000f68:	203a      	movs	r0, #58	; 0x3a
 8000f6a:	f000 fa0b 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(ColorMode_MCU_16bit & 0x77);
 8000f6e:	2005      	movs	r0, #5
 8000f70:	f000 fa3e 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0x90);        
 8000f74:	2090      	movs	r0, #144	; 0x90
 8000f76:	f000 fa05 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x08);
 8000f7a:	2008      	movs	r0, #8
 8000f7c:	f000 fa38 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x08);
 8000f80:	2008      	movs	r0, #8
 8000f82:	f000 fa35 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x08);
 8000f86:	2008      	movs	r0, #8
 8000f88:	f000 fa32 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x08);
 8000f8c:	2008      	movs	r0, #8
 8000f8e:	f000 fa2f 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0xBD);        
 8000f92:	20bd      	movs	r0, #189	; 0xbd
 8000f94:	f000 f9f6 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x06);
 8000f98:	2006      	movs	r0, #6
 8000f9a:	f000 fa29 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0xBC);        
 8000f9e:	20bc      	movs	r0, #188	; 0xbc
 8000fa0:	f000 f9f0 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x00);
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f000 fa23 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0xFF);        
 8000faa:	20ff      	movs	r0, #255	; 0xff
 8000fac:	f000 f9ea 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x60);
 8000fb0:	2060      	movs	r0, #96	; 0x60
 8000fb2:	f000 fa1d 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x01);
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f000 fa1a 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x04);
 8000fbc:	2004      	movs	r0, #4
 8000fbe:	f000 fa17 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(GC9A01_PWCTR2);  // Power control 2
 8000fc2:	20c3      	movs	r0, #195	; 0xc3
 8000fc4:	f000 f9de 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x13);       // 5.18 V
 8000fc8:	2013      	movs	r0, #19
 8000fca:	f000 fa11 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendCmd(GC9A01_PWCTR3);  // Power control 3
 8000fce:	20c4      	movs	r0, #196	; 0xc4
 8000fd0:	f000 f9d8 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x13);       // VREG2A = -3.82 V, VREG2B = 0.68 V
 8000fd4:	2013      	movs	r0, #19
 8000fd6:	f000 fa0b 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendCmd(GC9A01_PWCTR4);  // Power control 4
 8000fda:	20c9      	movs	r0, #201	; 0xc9
 8000fdc:	f000 f9d2 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x22);       // VREG2A = 5.88 V, VREG2B = -2.88 V
 8000fe0:	2022      	movs	r0, #34	; 0x22
 8000fe2:	f000 fa05 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0xBE);        
 8000fe6:	20be      	movs	r0, #190	; 0xbe
 8000fe8:	f000 f9cc 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x11);
 8000fec:	2011      	movs	r0, #17
 8000fee:	f000 f9ff 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0xE1);        
 8000ff2:	20e1      	movs	r0, #225	; 0xe1
 8000ff4:	f000 f9c6 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x10);
 8000ff8:	2010      	movs	r0, #16
 8000ffa:	f000 f9f9 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x0E);
 8000ffe:	200e      	movs	r0, #14
 8001000:	f000 f9f6 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0xDF);        
 8001004:	20df      	movs	r0, #223	; 0xdf
 8001006:	f000 f9bd 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x21);
 800100a:	2021      	movs	r0, #33	; 0x21
 800100c:	f000 f9f0 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x0c);
 8001010:	200c      	movs	r0, #12
 8001012:	f000 f9ed 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x02);
 8001016:	2002      	movs	r0, #2
 8001018:	f000 f9ea 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(GC9A01_GAMMA1);
 800101c:	20f0      	movs	r0, #240	; 0xf0
 800101e:	f000 f9b1 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x45);
 8001022:	2045      	movs	r0, #69	; 0x45
 8001024:	f000 f9e4 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x09);
 8001028:	2009      	movs	r0, #9
 800102a:	f000 f9e1 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x08);
 800102e:	2008      	movs	r0, #8
 8001030:	f000 f9de 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x08);
 8001034:	2008      	movs	r0, #8
 8001036:	f000 f9db 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x26);
 800103a:	2026      	movs	r0, #38	; 0x26
 800103c:	f000 f9d8 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x2A);
 8001040:	202a      	movs	r0, #42	; 0x2a
 8001042:	f000 f9d5 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(GC9A01_GAMMA2);
 8001046:	20f1      	movs	r0, #241	; 0xf1
 8001048:	f000 f99c 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x43);
 800104c:	2043      	movs	r0, #67	; 0x43
 800104e:	f000 f9cf 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x70);
 8001052:	2070      	movs	r0, #112	; 0x70
 8001054:	f000 f9cc 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x72);
 8001058:	2072      	movs	r0, #114	; 0x72
 800105a:	f000 f9c9 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x36);
 800105e:	2036      	movs	r0, #54	; 0x36
 8001060:	f000 f9c6 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x37);
 8001064:	2037      	movs	r0, #55	; 0x37
 8001066:	f000 f9c3 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x6F);
 800106a:	206f      	movs	r0, #111	; 0x6f
 800106c:	f000 f9c0 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(GC9A01_GAMMA3);
 8001070:	20f2      	movs	r0, #242	; 0xf2
 8001072:	f000 f987 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x45);
 8001076:	2045      	movs	r0, #69	; 0x45
 8001078:	f000 f9ba 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x09);
 800107c:	2009      	movs	r0, #9
 800107e:	f000 f9b7 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x08);
 8001082:	2008      	movs	r0, #8
 8001084:	f000 f9b4 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x08);
 8001088:	2008      	movs	r0, #8
 800108a:	f000 f9b1 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x26);
 800108e:	2026      	movs	r0, #38	; 0x26
 8001090:	f000 f9ae 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x2A);
 8001094:	202a      	movs	r0, #42	; 0x2a
 8001096:	f000 f9ab 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(GC9A01_GAMMA4);
 800109a:	20f3      	movs	r0, #243	; 0xf3
 800109c:	f000 f972 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x43);
 80010a0:	2043      	movs	r0, #67	; 0x43
 80010a2:	f000 f9a5 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x70);
 80010a6:	2070      	movs	r0, #112	; 0x70
 80010a8:	f000 f9a2 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x72);
 80010ac:	2072      	movs	r0, #114	; 0x72
 80010ae:	f000 f99f 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x36);
 80010b2:	2036      	movs	r0, #54	; 0x36
 80010b4:	f000 f99c 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x37);
 80010b8:	2037      	movs	r0, #55	; 0x37
 80010ba:	f000 f999 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x6F);
 80010be:	206f      	movs	r0, #111	; 0x6f
 80010c0:	f000 f996 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0xED);        
 80010c4:	20ed      	movs	r0, #237	; 0xed
 80010c6:	f000 f95d 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x1B);
 80010ca:	201b      	movs	r0, #27
 80010cc:	f000 f990 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x0B);
 80010d0:	200b      	movs	r0, #11
 80010d2:	f000 f98d 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0xAE);        
 80010d6:	20ae      	movs	r0, #174	; 0xae
 80010d8:	f000 f954 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x77);
 80010dc:	2077      	movs	r0, #119	; 0x77
 80010de:	f000 f987 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0xCD);        
 80010e2:	20cd      	movs	r0, #205	; 0xcd
 80010e4:	f000 f94e 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x63);
 80010e8:	2063      	movs	r0, #99	; 0x63
 80010ea:	f000 f981 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0x70);        
 80010ee:	2070      	movs	r0, #112	; 0x70
 80010f0:	f000 f948 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x07);
 80010f4:	2007      	movs	r0, #7
 80010f6:	f000 f97b 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x07);
 80010fa:	2007      	movs	r0, #7
 80010fc:	f000 f978 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x04);
 8001100:	2004      	movs	r0, #4
 8001102:	f000 f975 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x0E);
 8001106:	200e      	movs	r0, #14
 8001108:	f000 f972 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x0F);
 800110c:	200f      	movs	r0, #15
 800110e:	f000 f96f 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x09);
 8001112:	2009      	movs	r0, #9
 8001114:	f000 f96c 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x07);
 8001118:	2007      	movs	r0, #7
 800111a:	f000 f969 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x08);
 800111e:	2008      	movs	r0, #8
 8001120:	f000 f966 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x03);
 8001124:	2003      	movs	r0, #3
 8001126:	f000 f963 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(GC9A01_FRAMERATE);       // Frame rate
 800112a:	20e8      	movs	r0, #232	; 0xe8
 800112c:	f000 f92a 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x34);                  // 4 dot inversion
 8001130:	2034      	movs	r0, #52	; 0x34
 8001132:	f000 f95d 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0x62);       
 8001136:	2062      	movs	r0, #98	; 0x62
 8001138:	f000 f924 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x18);
 800113c:	2018      	movs	r0, #24
 800113e:	f000 f957 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x0D);
 8001142:	200d      	movs	r0, #13
 8001144:	f000 f954 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x71);
 8001148:	2071      	movs	r0, #113	; 0x71
 800114a:	f000 f951 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0xED);
 800114e:	20ed      	movs	r0, #237	; 0xed
 8001150:	f000 f94e 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x70);
 8001154:	2070      	movs	r0, #112	; 0x70
 8001156:	f000 f94b 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x70);
 800115a:	2070      	movs	r0, #112	; 0x70
 800115c:	f000 f948 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x18);
 8001160:	2018      	movs	r0, #24
 8001162:	f000 f945 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x0F);
 8001166:	200f      	movs	r0, #15
 8001168:	f000 f942 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x71);
 800116c:	2071      	movs	r0, #113	; 0x71
 800116e:	f000 f93f 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0xEF);
 8001172:	20ef      	movs	r0, #239	; 0xef
 8001174:	f000 f93c 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x70);
 8001178:	2070      	movs	r0, #112	; 0x70
 800117a:	f000 f939 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x70);
 800117e:	2070      	movs	r0, #112	; 0x70
 8001180:	f000 f936 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0x63);        
 8001184:	2063      	movs	r0, #99	; 0x63
 8001186:	f000 f8fd 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x18);
 800118a:	2018      	movs	r0, #24
 800118c:	f000 f930 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x11);
 8001190:	2011      	movs	r0, #17
 8001192:	f000 f92d 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x71);
 8001196:	2071      	movs	r0, #113	; 0x71
 8001198:	f000 f92a 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0xF1);
 800119c:	20f1      	movs	r0, #241	; 0xf1
 800119e:	f000 f927 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x70);
 80011a2:	2070      	movs	r0, #112	; 0x70
 80011a4:	f000 f924 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x70);
 80011a8:	2070      	movs	r0, #112	; 0x70
 80011aa:	f000 f921 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x18);
 80011ae:	2018      	movs	r0, #24
 80011b0:	f000 f91e 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x13);
 80011b4:	2013      	movs	r0, #19
 80011b6:	f000 f91b 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x71);
 80011ba:	2071      	movs	r0, #113	; 0x71
 80011bc:	f000 f918 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0xF3);
 80011c0:	20f3      	movs	r0, #243	; 0xf3
 80011c2:	f000 f915 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x70);
 80011c6:	2070      	movs	r0, #112	; 0x70
 80011c8:	f000 f912 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x70);
 80011cc:	2070      	movs	r0, #112	; 0x70
 80011ce:	f000 f90f 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0x64);        
 80011d2:	2064      	movs	r0, #100	; 0x64
 80011d4:	f000 f8d6 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x28);
 80011d8:	2028      	movs	r0, #40	; 0x28
 80011da:	f000 f909 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x29);
 80011de:	2029      	movs	r0, #41	; 0x29
 80011e0:	f000 f906 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0xF1);
 80011e4:	20f1      	movs	r0, #241	; 0xf1
 80011e6:	f000 f903 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x01);
 80011ea:	2001      	movs	r0, #1
 80011ec:	f000 f900 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0xF1);
 80011f0:	20f1      	movs	r0, #241	; 0xf1
 80011f2:	f000 f8fd 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x00);
 80011f6:	2000      	movs	r0, #0
 80011f8:	f000 f8fa 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x07);
 80011fc:	2007      	movs	r0, #7
 80011fe:	f000 f8f7 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0x66);        
 8001202:	2066      	movs	r0, #102	; 0x66
 8001204:	f000 f8be 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x3C);
 8001208:	203c      	movs	r0, #60	; 0x3c
 800120a:	f000 f8f1 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x00);
 800120e:	2000      	movs	r0, #0
 8001210:	f000 f8ee 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0xCD);
 8001214:	20cd      	movs	r0, #205	; 0xcd
 8001216:	f000 f8eb 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x67);
 800121a:	2067      	movs	r0, #103	; 0x67
 800121c:	f000 f8e8 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x45);
 8001220:	2045      	movs	r0, #69	; 0x45
 8001222:	f000 f8e5 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x45);
 8001226:	2045      	movs	r0, #69	; 0x45
 8001228:	f000 f8e2 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x10);
 800122c:	2010      	movs	r0, #16
 800122e:	f000 f8df 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x00);
 8001232:	2000      	movs	r0, #0
 8001234:	f000 f8dc 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x00);
 8001238:	2000      	movs	r0, #0
 800123a:	f000 f8d9 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x00);
 800123e:	2000      	movs	r0, #0
 8001240:	f000 f8d6 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0x67);       
 8001244:	2067      	movs	r0, #103	; 0x67
 8001246:	f000 f89d 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x00);
 800124a:	2000      	movs	r0, #0
 800124c:	f000 f8d0 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x3C);
 8001250:	203c      	movs	r0, #60	; 0x3c
 8001252:	f000 f8cd 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x00);
 8001256:	2000      	movs	r0, #0
 8001258:	f000 f8ca 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x00);
 800125c:	2000      	movs	r0, #0
 800125e:	f000 f8c7 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x00);
 8001262:	2000      	movs	r0, #0
 8001264:	f000 f8c4 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x01);
 8001268:	2001      	movs	r0, #1
 800126a:	e003      	b.n	8001274 <GC9A01_Init+0x404>
 800126c:	2000002c 	.word	0x2000002c
 8001270:	2000002e 	.word	0x2000002e
 8001274:	f000 f8bc 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x54);
 8001278:	2054      	movs	r0, #84	; 0x54
 800127a:	f000 f8b9 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x10);
 800127e:	2010      	movs	r0, #16
 8001280:	f000 f8b6 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x32);
 8001284:	2032      	movs	r0, #50	; 0x32
 8001286:	f000 f8b3 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x98);
 800128a:	2098      	movs	r0, #152	; 0x98
 800128c:	f000 f8b0 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0x74);        
 8001290:	2074      	movs	r0, #116	; 0x74
 8001292:	f000 f877 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x10);
 8001296:	2010      	movs	r0, #16
 8001298:	f000 f8aa 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x85);
 800129c:	2085      	movs	r0, #133	; 0x85
 800129e:	f000 f8a7 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x80);
 80012a2:	2080      	movs	r0, #128	; 0x80
 80012a4:	f000 f8a4 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x00);
 80012a8:	2000      	movs	r0, #0
 80012aa:	f000 f8a1 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x00);
 80012ae:	2000      	movs	r0, #0
 80012b0:	f000 f89e 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x4E);
 80012b4:	204e      	movs	r0, #78	; 0x4e
 80012b6:	f000 f89b 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x00);
 80012ba:	2000      	movs	r0, #0
 80012bc:	f000 f898 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0x98);       
 80012c0:	2098      	movs	r0, #152	; 0x98
 80012c2:	f000 f85f 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x3e);
 80012c6:	203e      	movs	r0, #62	; 0x3e
 80012c8:	f000 f892 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x07);
 80012cc:	2007      	movs	r0, #7
 80012ce:	f000 f88f 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(GC9A01_TEON); 		// Tearing effect line on
 80012d2:	2035      	movs	r0, #53	; 0x35
 80012d4:	f000 f856 	bl	8001384 <GC9A01_SendCmd>

		// Inversion Mode 1;
		GC9A01_SendCmd(GC9A01_INVON);
 80012d8:	2021      	movs	r0, #33	; 0x21
 80012da:	f000 f853 	bl	8001384 <GC9A01_SendCmd>
		
		// Sleep Mode Exit
		GC9A01_SendCmd(GC9A01_SLPOUT);
 80012de:	2011      	movs	r0, #17
 80012e0:	f000 f850 	bl	8001384 <GC9A01_SendCmd>

		HAL_Delay(120);
 80012e4:	2078      	movs	r0, #120	; 0x78
 80012e6:	f001 fb47 	bl	8002978 <HAL_Delay>
		
		// Display Power on
		GC9A01_SendCmd(GC9A01_DISPON);
 80012ea:	2029      	movs	r0, #41	; 0x29
 80012ec:	f000 f84a 	bl	8001384 <GC9A01_SendCmd>
		
		GC9A01_Unselect();
 80012f0:	f000 f822 	bl	8001338 <GC9A01_Unselect>
		
		GC9A01_FillRect(0, 0, GC9A01_Width, GC9A01_Height, GC9A01_BLACK);
 80012f4:	4b07      	ldr	r3, [pc, #28]	; (8001314 <GC9A01_Init+0x4a4>)
 80012f6:	881b      	ldrh	r3, [r3, #0]
 80012f8:	b21a      	sxth	r2, r3
 80012fa:	4b07      	ldr	r3, [pc, #28]	; (8001318 <GC9A01_Init+0x4a8>)
 80012fc:	881b      	ldrh	r3, [r3, #0]
 80012fe:	b21b      	sxth	r3, r3
 8001300:	2100      	movs	r1, #0
 8001302:	9100      	str	r1, [sp, #0]
 8001304:	2100      	movs	r1, #0
 8001306:	2000      	movs	r0, #0
 8001308:	f000 f8d8 	bl	80014bc <GC9A01_FillRect>
		
#if FRAME_BUFFER	// если включен буфер кадра
		GC9A01_Update();
#endif
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	2000002c 	.word	0x2000002c
 8001318:	2000002e 	.word	0x2000002e

0800131c <GC9A01_Select>:


//==============================================================================
// Процедура управления SPI
//==============================================================================
static void GC9A01_Select(void) {
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
			#endif
			//-----------------------------------------------------
			
			//-- если захотим переделать под CMSIS  ---------------
			#ifdef GC9A01_SPI_CMSIS
				CS_GPIO_Port->BSRR = ( CS_Pin << 16 );
 8001320:	4b04      	ldr	r3, [pc, #16]	; (8001334 <GC9A01_Select+0x18>)
 8001322:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001326:	619a      	str	r2, [r3, #24]
			#endif
			//-----------------------------------------------------
	#endif
	
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	40020000 	.word	0x40020000

08001338 <GC9A01_Unselect>:


//==============================================================================
// Процедура управления SPI
//==============================================================================
static void GC9A01_Unselect(void) {
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
			#endif
			//-----------------------------------------------------
			
			//-- если захотим переделать под CMSIS  ---------------
			#ifdef GC9A01_SPI_CMSIS
					 CS_GPIO_Port->BSRR = CS_Pin;
 800133c:	4b04      	ldr	r3, [pc, #16]	; (8001350 <GC9A01_Unselect+0x18>)
 800133e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001342:	619a      	str	r2, [r3, #24]
			#endif
			//-----------------------------------------------------
	
	#endif
	
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	40020000 	.word	0x40020000

08001354 <GC9A01_HardReset>:


//==============================================================================
// Процедура аппаратного сброса дисплея (ножкой RESET)
//==============================================================================
void GC9A01_HardReset(void){
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8001358:	2200      	movs	r2, #0
 800135a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800135e:	4808      	ldr	r0, [pc, #32]	; (8001380 <GC9A01_HardReset+0x2c>)
 8001360:	f002 f934 	bl	80035cc <HAL_GPIO_WritePin>
	HAL_Delay(50);	
 8001364:	2032      	movs	r0, #50	; 0x32
 8001366:	f001 fb07 	bl	8002978 <HAL_Delay>
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 800136a:	2201      	movs	r2, #1
 800136c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001370:	4803      	ldr	r0, [pc, #12]	; (8001380 <GC9A01_HardReset+0x2c>)
 8001372:	f002 f92b 	bl	80035cc <HAL_GPIO_WritePin>
	HAL_Delay(150);
 8001376:	2096      	movs	r0, #150	; 0x96
 8001378:	f001 fafe 	bl	8002978 <HAL_Delay>
	
}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40020000 	.word	0x40020000

08001384 <GC9A01_SendCmd>:


//==============================================================================
// Процедура отправки команды в дисплей
//==============================================================================
__inline static void GC9A01_SendCmd(uint8_t Cmd){	
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
	
	//-- если захотим переделать под CMSIS  ---------------------------------------------
	#ifdef GC9A01_SPI_CMSIS
		
		// pin DC LOW
		DC_GPIO_Port->BSRR = ( DC_Pin << 16 );
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <GC9A01_SendCmd+0x60>)
 8001390:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001394:	619a      	str	r2, [r3, #24]
		//======  FOR F-SERIES ===========================================================
			
			// Disable SPI	
			//CLEAR_BIT(GC9A01_SPI_CMSIS->CR1, SPI_CR1_SPE);	// GC9A01_SPI_CMSIS->CR1 &= ~SPI_CR1_SPE;
			// Enable SPI
			if((GC9A01_SPI_CMSIS->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE){
 8001396:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <GC9A01_SendCmd+0x64>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800139e:	2b40      	cmp	r3, #64	; 0x40
 80013a0:	d005      	beq.n	80013ae <GC9A01_SendCmd+0x2a>
				// If disabled, I enable it
				SET_BIT(GC9A01_SPI_CMSIS->CR1, SPI_CR1_SPE);	// GC9A01_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <GC9A01_SendCmd+0x64>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a10      	ldr	r2, [pc, #64]	; (80013e8 <GC9A01_SendCmd+0x64>)
 80013a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013ac:	6013      	str	r3, [r2, #0]
			}
			
			// Ждем, пока не освободится буфер передатчика
			// TXE(Transmit buffer empty) – устанавливается когда буфер передачи(регистр SPI_DR) пуст, очищается при загрузке данных
			while( (GC9A01_SPI_CMSIS->SR & SPI_SR_TXE) == RESET ){};	
 80013ae:	bf00      	nop
 80013b0:	4b0d      	ldr	r3, [pc, #52]	; (80013e8 <GC9A01_SendCmd+0x64>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d0f9      	beq.n	80013b0 <GC9A01_SendCmd+0x2c>
			
			// заполняем буфер передатчика 1 байт информации--------------
			*((__IO uint8_t *)&GC9A01_SPI_CMSIS->DR) = Cmd;
 80013bc:	4a0b      	ldr	r2, [pc, #44]	; (80013ec <GC9A01_SendCmd+0x68>)
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	7013      	strb	r3, [r2, #0]
			
			// TXE(Transmit buffer empty) – устанавливается когда буфер передачи(регистр SPI_DR) пуст, очищается при загрузке данных
			while( (GC9A01_SPI_CMSIS->SR & (SPI_SR_TXE | SPI_SR_BSY)) != SPI_SR_TXE ){};
 80013c2:	bf00      	nop
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <GC9A01_SendCmd+0x64>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f003 0382 	and.w	r3, r3, #130	; 0x82
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d1f9      	bne.n	80013c4 <GC9A01_SendCmd+0x40>
			//CLEAR_BIT(GC9A01_SPI_CMSIS->CR1, SPI_CR1_SPE);
			
*/		//================================================================================
		
		// pin DC HIGH
		DC_GPIO_Port->BSRR = DC_Pin;
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <GC9A01_SendCmd+0x60>)
 80013d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013d6:	619a      	str	r2, [r3, #24]
	
	#endif
	//-----------------------------------------------------------------------------------

}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	40020000 	.word	0x40020000
 80013e8:	40003800 	.word	0x40003800
 80013ec:	4000380c 	.word	0x4000380c

080013f0 <GC9A01_SendData>:


//==============================================================================
// Процедура отправки данных (параметров) в дисплей 1 BYTE
//==============================================================================
__inline static void GC9A01_SendData(uint8_t Data ){
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
		//======  FOR F-SERIES ===========================================================
			
			// Disable SPI	
			//CLEAR_BIT(GC9A01_SPI_CMSIS->CR1, SPI_CR1_SPE);	// GC9A01_SPI_CMSIS->CR1 &= ~SPI_CR1_SPE;
			// Enable SPI
			if((GC9A01_SPI_CMSIS->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE){
 80013fa:	4b12      	ldr	r3, [pc, #72]	; (8001444 <GC9A01_SendData+0x54>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001402:	2b40      	cmp	r3, #64	; 0x40
 8001404:	d005      	beq.n	8001412 <GC9A01_SendData+0x22>
				// If disabled, I enable it
				SET_BIT(GC9A01_SPI_CMSIS->CR1, SPI_CR1_SPE);	// GC9A01_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 8001406:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <GC9A01_SendData+0x54>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a0e      	ldr	r2, [pc, #56]	; (8001444 <GC9A01_SendData+0x54>)
 800140c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001410:	6013      	str	r3, [r2, #0]
			}

			// Ждем, пока не освободится буфер передатчика
			// TXE(Transmit buffer empty) – устанавливается когда буфер передачи(регистр SPI_DR) пуст, очищается при загрузке данных
			while( (GC9A01_SPI_CMSIS->SR & SPI_SR_TXE) == RESET ){};
 8001412:	bf00      	nop
 8001414:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <GC9A01_SendData+0x54>)
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	2b00      	cmp	r3, #0
 800141e:	d0f9      	beq.n	8001414 <GC9A01_SendData+0x24>
		
			// передаем 1 байт информации--------------
			*((__IO uint8_t *)&GC9A01_SPI_CMSIS->DR) = Data;
 8001420:	4a09      	ldr	r2, [pc, #36]	; (8001448 <GC9A01_SendData+0x58>)
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	7013      	strb	r3, [r2, #0]

			// TXE(Transmit buffer empty) – устанавливается когда буфер передачи(регистр SPI_DR) пуст, очищается при загрузке данных
			while( (GC9A01_SPI_CMSIS->SR & (SPI_SR_TXE | SPI_SR_BSY)) != SPI_SR_TXE ){};
 8001426:	bf00      	nop
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <GC9A01_SendData+0x54>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f003 0382 	and.w	r3, r3, #130	; 0x82
 8001430:	2b02      	cmp	r3, #2
 8001432:	d1f9      	bne.n	8001428 <GC9A01_SendData+0x38>
*/		//================================================================================
		
	#endif
	//-----------------------------------------------------------------------------------

}
 8001434:	bf00      	nop
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	40003800 	.word	0x40003800
 8001448:	4000380c 	.word	0x4000380c

0800144c <GC9A01_SendDataMASS>:


//==============================================================================
// Процедура отправки данных (параметров) в дисплей MASS
//==============================================================================
__inline static void GC9A01_SendDataMASS(uint8_t* buff, size_t buff_size){
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
		//======  FOR F-SERIES ===========================================================
			
			// Disable SPI	
			//CLEAR_BIT(GC9A01_SPI_CMSIS->CR1, SPI_CR1_SPE);	// GC9A01_SPI_CMSIS->CR1 &= ~SPI_CR1_SPE;
			// Enable SPI
			if((GC9A01_SPI_CMSIS->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE){
 8001456:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <GC9A01_SendDataMASS+0x68>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800145e:	2b40      	cmp	r3, #64	; 0x40
 8001460:	d016      	beq.n	8001490 <GC9A01_SendDataMASS+0x44>
				// If disabled, I enable it
				SET_BIT(GC9A01_SPI_CMSIS->CR1, SPI_CR1_SPE);	// GC9A01_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 8001462:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <GC9A01_SendDataMASS+0x68>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a13      	ldr	r2, [pc, #76]	; (80014b4 <GC9A01_SendDataMASS+0x68>)
 8001468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800146c:	6013      	str	r3, [r2, #0]
			}
			
			while( buff_size ){
 800146e:	e00f      	b.n	8001490 <GC9A01_SendDataMASS+0x44>
				
			// Ждем, пока не освободится буфер передатчика
			// TXE(Transmit buffer empty) – устанавливается когда буфер передачи(регистр SPI_DR) пуст, очищается при загрузке данных
			while( (GC9A01_SPI_CMSIS->SR & SPI_SR_TXE) == RESET ){};
 8001470:	bf00      	nop
 8001472:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <GC9A01_SendDataMASS+0x68>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0f9      	beq.n	8001472 <GC9A01_SendDataMASS+0x26>
					
				// передаем 1 байт информации--------------
				*((__IO uint8_t *)&GC9A01_SPI_CMSIS->DR) = *buff++;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	1c5a      	adds	r2, r3, #1
 8001482:	607a      	str	r2, [r7, #4]
 8001484:	4a0c      	ldr	r2, [pc, #48]	; (80014b8 <GC9A01_SendDataMASS+0x6c>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	7013      	strb	r3, [r2, #0]

				buff_size--;
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	3b01      	subs	r3, #1
 800148e:	603b      	str	r3, [r7, #0]
			while( buff_size ){
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1ec      	bne.n	8001470 <GC9A01_SendDataMASS+0x24>
			}
			
			// TXE(Transmit buffer empty) – устанавливается когда буфер передачи(регистр SPI_DR) пуст, очищается при загрузке данных
			while( (GC9A01_SPI_CMSIS->SR & (SPI_SR_TXE | SPI_SR_BSY)) != SPI_SR_TXE ){};
 8001496:	bf00      	nop
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <GC9A01_SendDataMASS+0x68>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f003 0382 	and.w	r3, r3, #130	; 0x82
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d1f9      	bne.n	8001498 <GC9A01_SendDataMASS+0x4c>
*/		//================================================================================
		
	#endif
	//-----------------------------------------------------------------------------------

}
 80014a4:	bf00      	nop
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	40003800 	.word	0x40003800
 80014b8:	4000380c 	.word	0x4000380c

080014bc <GC9A01_FillRect>:


//==============================================================================
// Процедура заполнения прямоугольника цветом color
//==============================================================================
void GC9A01_FillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color){
 80014bc:	b590      	push	{r4, r7, lr}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4604      	mov	r4, r0
 80014c4:	4608      	mov	r0, r1
 80014c6:	4611      	mov	r1, r2
 80014c8:	461a      	mov	r2, r3
 80014ca:	4623      	mov	r3, r4
 80014cc:	80fb      	strh	r3, [r7, #6]
 80014ce:	4603      	mov	r3, r0
 80014d0:	80bb      	strh	r3, [r7, #4]
 80014d2:	460b      	mov	r3, r1
 80014d4:	807b      	strh	r3, [r7, #2]
 80014d6:	4613      	mov	r3, r2
 80014d8:	803b      	strh	r3, [r7, #0]
	
  if ((x >= GC9A01_Width) || (y >= GC9A01_Height)){
 80014da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014de:	4a24      	ldr	r2, [pc, #144]	; (8001570 <GC9A01_FillRect+0xb4>)
 80014e0:	8812      	ldrh	r2, [r2, #0]
 80014e2:	4293      	cmp	r3, r2
 80014e4:	da40      	bge.n	8001568 <GC9A01_FillRect+0xac>
 80014e6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014ea:	4a22      	ldr	r2, [pc, #136]	; (8001574 <GC9A01_FillRect+0xb8>)
 80014ec:	8812      	ldrh	r2, [r2, #0]
 80014ee:	4293      	cmp	r3, r2
 80014f0:	da3a      	bge.n	8001568 <GC9A01_FillRect+0xac>
	  return;
  }
  
  if ((x + w) > GC9A01_Width){	  
 80014f2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80014f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80014fa:	4413      	add	r3, r2
 80014fc:	4a1c      	ldr	r2, [pc, #112]	; (8001570 <GC9A01_FillRect+0xb4>)
 80014fe:	8812      	ldrh	r2, [r2, #0]
 8001500:	4293      	cmp	r3, r2
 8001502:	dd05      	ble.n	8001510 <GC9A01_FillRect+0x54>
	  w = GC9A01_Width - x;
 8001504:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <GC9A01_FillRect+0xb4>)
 8001506:	881a      	ldrh	r2, [r3, #0]
 8001508:	88fb      	ldrh	r3, [r7, #6]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	b29b      	uxth	r3, r3
 800150e:	807b      	strh	r3, [r7, #2]
  }
  
  if ((y + h) > GC9A01_Height){
 8001510:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001514:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001518:	4413      	add	r3, r2
 800151a:	4a16      	ldr	r2, [pc, #88]	; (8001574 <GC9A01_FillRect+0xb8>)
 800151c:	8812      	ldrh	r2, [r2, #0]
 800151e:	4293      	cmp	r3, r2
 8001520:	dd05      	ble.n	800152e <GC9A01_FillRect+0x72>
	  h = GC9A01_Height - y;
 8001522:	4b14      	ldr	r3, [pc, #80]	; (8001574 <GC9A01_FillRect+0xb8>)
 8001524:	881a      	ldrh	r2, [r3, #0]
 8001526:	88bb      	ldrh	r3, [r7, #4]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	b29b      	uxth	r3, r3
 800152c:	803b      	strh	r3, [r7, #0]
		for( uint16_t j = 0; j < w; j++ ){
			buff_frame[( y + i ) * GC9A01_Width + x + j] = ((color & 0xFF)<<8) | (color >> 8 );
		}
	}
#else	//если попиксельный вывод
	GC9A01_SetWindow(x, y, x + w - 1, y + h - 1);
 800152e:	88f8      	ldrh	r0, [r7, #6]
 8001530:	88b9      	ldrh	r1, [r7, #4]
 8001532:	88fa      	ldrh	r2, [r7, #6]
 8001534:	887b      	ldrh	r3, [r7, #2]
 8001536:	4413      	add	r3, r2
 8001538:	b29b      	uxth	r3, r3
 800153a:	3b01      	subs	r3, #1
 800153c:	b29c      	uxth	r4, r3
 800153e:	88ba      	ldrh	r2, [r7, #4]
 8001540:	883b      	ldrh	r3, [r7, #0]
 8001542:	4413      	add	r3, r2
 8001544:	b29b      	uxth	r3, r3
 8001546:	3b01      	subs	r3, #1
 8001548:	b29b      	uxth	r3, r3
 800154a:	4622      	mov	r2, r4
 800154c:	f000 f814 	bl	8001578 <GC9A01_SetWindow>
 	
  GC9A01_RamWrite(&color, (h * w)); 
 8001550:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001554:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001558:	fb02 f303 	mul.w	r3, r2, r3
 800155c:	4619      	mov	r1, r3
 800155e:	f107 0018 	add.w	r0, r7, #24
 8001562:	f000 f82f 	bl	80015c4 <GC9A01_RamWrite>
 8001566:	e000      	b.n	800156a <GC9A01_FillRect+0xae>
	  return;
 8001568:	bf00      	nop
#endif
	

}
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	bd90      	pop	{r4, r7, pc}
 8001570:	2000002c 	.word	0x2000002c
 8001574:	2000002e 	.word	0x2000002e

08001578 <GC9A01_SetWindow>:


//==============================================================================
// Процедура установка границ экрана для заполнения
//==============================================================================
static void GC9A01_SetWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1){
 8001578:	b590      	push	{r4, r7, lr}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4604      	mov	r4, r0
 8001580:	4608      	mov	r0, r1
 8001582:	4611      	mov	r1, r2
 8001584:	461a      	mov	r2, r3
 8001586:	4623      	mov	r3, r4
 8001588:	80fb      	strh	r3, [r7, #6]
 800158a:	4603      	mov	r3, r0
 800158c:	80bb      	strh	r3, [r7, #4]
 800158e:	460b      	mov	r3, r1
 8001590:	807b      	strh	r3, [r7, #2]
 8001592:	4613      	mov	r3, r2
 8001594:	803b      	strh	r3, [r7, #0]
	
	GC9A01_Select();
 8001596:	f7ff fec1 	bl	800131c <GC9A01_Select>
	
	GC9A01_ColumnSet(x0, x1);
 800159a:	887a      	ldrh	r2, [r7, #2]
 800159c:	88fb      	ldrh	r3, [r7, #6]
 800159e:	4611      	mov	r1, r2
 80015a0:	4618      	mov	r0, r3
 80015a2:	f000 f833 	bl	800160c <GC9A01_ColumnSet>
	GC9A01_RowSet(y0, y1);
 80015a6:	883a      	ldrh	r2, [r7, #0]
 80015a8:	88bb      	ldrh	r3, [r7, #4]
 80015aa:	4611      	mov	r1, r2
 80015ac:	4618      	mov	r0, r3
 80015ae:	f000 f86f 	bl	8001690 <GC9A01_RowSet>
	
	// write to RAM
	GC9A01_SendCmd(GC9A01_RAMWR);
 80015b2:	202c      	movs	r0, #44	; 0x2c
 80015b4:	f7ff fee6 	bl	8001384 <GC9A01_SendCmd>
	
	GC9A01_Unselect();
 80015b8:	f7ff febe 	bl	8001338 <GC9A01_Unselect>
	
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd90      	pop	{r4, r7, pc}

080015c4 <GC9A01_RamWrite>:


//==============================================================================
// Процедура записи данных в дисплей
//==============================================================================
static void GC9A01_RamWrite(uint16_t *pBuff, uint32_t Len){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
	
  GC9A01_Select();
 80015ce:	f7ff fea5 	bl	800131c <GC9A01_Select>
	
  uint8_t buff[2];
  buff[0] = *pBuff >> 8;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	0a1b      	lsrs	r3, r3, #8
 80015d8:	b29b      	uxth	r3, r3
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	733b      	strb	r3, [r7, #12]
  buff[1] = *pBuff & 0xFF;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	881b      	ldrh	r3, [r3, #0]
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	737b      	strb	r3, [r7, #13]
	
  while (Len--){
 80015e6:	e005      	b.n	80015f4 <GC9A01_RamWrite+0x30>
	  GC9A01_SendDataMASS( (uint8_t*)buff, 2);
 80015e8:	f107 030c 	add.w	r3, r7, #12
 80015ec:	2102      	movs	r1, #2
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff ff2c 	bl	800144c <GC9A01_SendDataMASS>
  while (Len--){
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	1e5a      	subs	r2, r3, #1
 80015f8:	603a      	str	r2, [r7, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f4      	bne.n	80015e8 <GC9A01_RamWrite+0x24>
  } 
	
  GC9A01_Unselect();
 80015fe:	f7ff fe9b 	bl	8001338 <GC9A01_Unselect>
}
 8001602:	bf00      	nop
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <GC9A01_ColumnSet>:


//==============================================================================
// Процедура установки начального и конечного адресов колонок
//==============================================================================
static void GC9A01_ColumnSet(uint16_t ColumnStart, uint16_t ColumnEnd){
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	460a      	mov	r2, r1
 8001616:	80fb      	strh	r3, [r7, #6]
 8001618:	4613      	mov	r3, r2
 800161a:	80bb      	strh	r3, [r7, #4]
	
  if (ColumnStart > ColumnEnd){
 800161c:	88fa      	ldrh	r2, [r7, #6]
 800161e:	88bb      	ldrh	r3, [r7, #4]
 8001620:	429a      	cmp	r2, r3
 8001622:	d82a      	bhi.n	800167a <GC9A01_ColumnSet+0x6e>
    return;
  }
  
  if (ColumnEnd > GC9A01_Width){
 8001624:	4b18      	ldr	r3, [pc, #96]	; (8001688 <GC9A01_ColumnSet+0x7c>)
 8001626:	881b      	ldrh	r3, [r3, #0]
 8001628:	88ba      	ldrh	r2, [r7, #4]
 800162a:	429a      	cmp	r2, r3
 800162c:	d827      	bhi.n	800167e <GC9A01_ColumnSet+0x72>
    return;
  }
  
  ColumnStart += GC9A01_X_Start;
 800162e:	4b17      	ldr	r3, [pc, #92]	; (800168c <GC9A01_ColumnSet+0x80>)
 8001630:	881a      	ldrh	r2, [r3, #0]
 8001632:	88fb      	ldrh	r3, [r7, #6]
 8001634:	4413      	add	r3, r2
 8001636:	80fb      	strh	r3, [r7, #6]
  ColumnEnd += GC9A01_X_Start;
 8001638:	4b14      	ldr	r3, [pc, #80]	; (800168c <GC9A01_ColumnSet+0x80>)
 800163a:	881a      	ldrh	r2, [r3, #0]
 800163c:	88bb      	ldrh	r3, [r7, #4]
 800163e:	4413      	add	r3, r2
 8001640:	80bb      	strh	r3, [r7, #4]
  
  GC9A01_SendCmd(GC9A01_CASET);
 8001642:	202a      	movs	r0, #42	; 0x2a
 8001644:	f7ff fe9e 	bl	8001384 <GC9A01_SendCmd>
  GC9A01_SendData(ColumnStart >> 8);  
 8001648:	88fb      	ldrh	r3, [r7, #6]
 800164a:	0a1b      	lsrs	r3, r3, #8
 800164c:	b29b      	uxth	r3, r3
 800164e:	b2db      	uxtb	r3, r3
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fecd 	bl	80013f0 <GC9A01_SendData>
  GC9A01_SendData(ColumnStart & 0xFF);  
 8001656:	88fb      	ldrh	r3, [r7, #6]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff fec8 	bl	80013f0 <GC9A01_SendData>
  GC9A01_SendData(ColumnEnd >> 8);  
 8001660:	88bb      	ldrh	r3, [r7, #4]
 8001662:	0a1b      	lsrs	r3, r3, #8
 8001664:	b29b      	uxth	r3, r3
 8001666:	b2db      	uxtb	r3, r3
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff fec1 	bl	80013f0 <GC9A01_SendData>
  GC9A01_SendData(ColumnEnd & 0xFF);  
 800166e:	88bb      	ldrh	r3, [r7, #4]
 8001670:	b2db      	uxtb	r3, r3
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff febc 	bl	80013f0 <GC9A01_SendData>
 8001678:	e002      	b.n	8001680 <GC9A01_ColumnSet+0x74>
    return;
 800167a:	bf00      	nop
 800167c:	e000      	b.n	8001680 <GC9A01_ColumnSet+0x74>
    return;
 800167e:	bf00      	nop
  
}
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	2000002c 	.word	0x2000002c
 800168c:	20000028 	.word	0x20000028

08001690 <GC9A01_RowSet>:


//==============================================================================
// Процедура установки начального и конечного адресов строк
//==============================================================================
static void GC9A01_RowSet(uint16_t RowStart, uint16_t RowEnd){
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	460a      	mov	r2, r1
 800169a:	80fb      	strh	r3, [r7, #6]
 800169c:	4613      	mov	r3, r2
 800169e:	80bb      	strh	r3, [r7, #4]
	
  if (RowStart > RowEnd){
 80016a0:	88fa      	ldrh	r2, [r7, #6]
 80016a2:	88bb      	ldrh	r3, [r7, #4]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d82a      	bhi.n	80016fe <GC9A01_RowSet+0x6e>
    return;
  }
  
  if (RowEnd > GC9A01_Height){
 80016a8:	4b18      	ldr	r3, [pc, #96]	; (800170c <GC9A01_RowSet+0x7c>)
 80016aa:	881b      	ldrh	r3, [r3, #0]
 80016ac:	88ba      	ldrh	r2, [r7, #4]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d827      	bhi.n	8001702 <GC9A01_RowSet+0x72>
    return;
  }
  
  RowStart += GC9A01_Y_Start;
 80016b2:	4b17      	ldr	r3, [pc, #92]	; (8001710 <GC9A01_RowSet+0x80>)
 80016b4:	881a      	ldrh	r2, [r3, #0]
 80016b6:	88fb      	ldrh	r3, [r7, #6]
 80016b8:	4413      	add	r3, r2
 80016ba:	80fb      	strh	r3, [r7, #6]
  RowEnd += GC9A01_Y_Start;
 80016bc:	4b14      	ldr	r3, [pc, #80]	; (8001710 <GC9A01_RowSet+0x80>)
 80016be:	881a      	ldrh	r2, [r3, #0]
 80016c0:	88bb      	ldrh	r3, [r7, #4]
 80016c2:	4413      	add	r3, r2
 80016c4:	80bb      	strh	r3, [r7, #4]
 
  GC9A01_SendCmd(GC9A01_RASET);
 80016c6:	202b      	movs	r0, #43	; 0x2b
 80016c8:	f7ff fe5c 	bl	8001384 <GC9A01_SendCmd>
  GC9A01_SendData(RowStart >> 8);  
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	0a1b      	lsrs	r3, r3, #8
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff fe8b 	bl	80013f0 <GC9A01_SendData>
  GC9A01_SendData(RowStart & 0xFF);  
 80016da:	88fb      	ldrh	r3, [r7, #6]
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fe86 	bl	80013f0 <GC9A01_SendData>
  GC9A01_SendData(RowEnd >> 8);  
 80016e4:	88bb      	ldrh	r3, [r7, #4]
 80016e6:	0a1b      	lsrs	r3, r3, #8
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff fe7f 	bl	80013f0 <GC9A01_SendData>
  GC9A01_SendData(RowEnd & 0xFF);  
 80016f2:	88bb      	ldrh	r3, [r7, #4]
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fe7a 	bl	80013f0 <GC9A01_SendData>
 80016fc:	e002      	b.n	8001704 <GC9A01_RowSet+0x74>
    return;
 80016fe:	bf00      	nop
 8001700:	e000      	b.n	8001704 <GC9A01_RowSet+0x74>
    return;
 8001702:	bf00      	nop

}
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	2000002e 	.word	0x2000002e
 8001710:	2000002a 	.word	0x2000002a

08001714 <GC9A01_DrawLine_Slow>:


//==============================================================================
// Процедура вспомогательная для --- Процедура рисования линии
//==============================================================================
static void GC9A01_DrawLine_Slow(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
 8001714:	b590      	push	{r4, r7, lr}
 8001716:	b087      	sub	sp, #28
 8001718:	af00      	add	r7, sp, #0
 800171a:	4604      	mov	r4, r0
 800171c:	4608      	mov	r0, r1
 800171e:	4611      	mov	r1, r2
 8001720:	461a      	mov	r2, r3
 8001722:	4623      	mov	r3, r4
 8001724:	80fb      	strh	r3, [r7, #6]
 8001726:	4603      	mov	r3, r0
 8001728:	80bb      	strh	r3, [r7, #4]
 800172a:	460b      	mov	r3, r1
 800172c:	807b      	strh	r3, [r7, #2]
 800172e:	4613      	mov	r3, r2
 8001730:	803b      	strh	r3, [r7, #0]
	
  const int16_t deltaX = abs(x2 - x1);
 8001732:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001736:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b00      	cmp	r3, #0
 800173e:	bfb8      	it	lt
 8001740:	425b      	neglt	r3, r3
 8001742:	82bb      	strh	r3, [r7, #20]
  const int16_t deltaY = abs(y2 - y1);
 8001744:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001748:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b00      	cmp	r3, #0
 8001750:	bfb8      	it	lt
 8001752:	425b      	neglt	r3, r3
 8001754:	827b      	strh	r3, [r7, #18]
  const int16_t signX = x1 < x2 ? 1 : -1;
 8001756:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800175a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800175e:	429a      	cmp	r2, r3
 8001760:	da01      	bge.n	8001766 <GC9A01_DrawLine_Slow+0x52>
 8001762:	2301      	movs	r3, #1
 8001764:	e001      	b.n	800176a <GC9A01_DrawLine_Slow+0x56>
 8001766:	f04f 33ff 	mov.w	r3, #4294967295
 800176a:	823b      	strh	r3, [r7, #16]
  const int16_t signY = y1 < y2 ? 1 : -1;
 800176c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001770:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001774:	429a      	cmp	r2, r3
 8001776:	da01      	bge.n	800177c <GC9A01_DrawLine_Slow+0x68>
 8001778:	2301      	movs	r3, #1
 800177a:	e001      	b.n	8001780 <GC9A01_DrawLine_Slow+0x6c>
 800177c:	f04f 33ff 	mov.w	r3, #4294967295
 8001780:	81fb      	strh	r3, [r7, #14]

  int16_t error = deltaX - deltaY;
 8001782:	8aba      	ldrh	r2, [r7, #20]
 8001784:	8a7b      	ldrh	r3, [r7, #18]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	b29b      	uxth	r3, r3
 800178a:	82fb      	strh	r3, [r7, #22]

  GC9A01_DrawPixel(x2, y2, color);
 800178c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800178e:	f9b7 1000 	ldrsh.w	r1, [r7]
 8001792:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001796:	4618      	mov	r0, r3
 8001798:	f000 f8bc 	bl	8001914 <GC9A01_DrawPixel>

  while (x1 != x2 || y1 != y2) {
 800179c:	e02c      	b.n	80017f8 <GC9A01_DrawLine_Slow+0xe4>
	  
    GC9A01_DrawPixel(x1, y1, color);
 800179e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80017a0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80017a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f000 f8b3 	bl	8001914 <GC9A01_DrawPixel>
    const int16_t error2 = error * 2;
 80017ae:	8afb      	ldrh	r3, [r7, #22]
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	81bb      	strh	r3, [r7, #12]
 
    if (error2 > -deltaY) {
 80017b6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80017ba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80017be:	425b      	negs	r3, r3
 80017c0:	429a      	cmp	r2, r3
 80017c2:	dd09      	ble.n	80017d8 <GC9A01_DrawLine_Slow+0xc4>
		
      error -= deltaY;
 80017c4:	8afa      	ldrh	r2, [r7, #22]
 80017c6:	8a7b      	ldrh	r3, [r7, #18]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	82fb      	strh	r3, [r7, #22]
      x1 += signX;
 80017ce:	88fa      	ldrh	r2, [r7, #6]
 80017d0:	8a3b      	ldrh	r3, [r7, #16]
 80017d2:	4413      	add	r3, r2
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	80fb      	strh	r3, [r7, #6]
    }
    if (error2 < deltaX){
 80017d8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80017dc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	da09      	bge.n	80017f8 <GC9A01_DrawLine_Slow+0xe4>
		
      error += deltaX;
 80017e4:	8afa      	ldrh	r2, [r7, #22]
 80017e6:	8abb      	ldrh	r3, [r7, #20]
 80017e8:	4413      	add	r3, r2
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	82fb      	strh	r3, [r7, #22]
      y1 += signY;
 80017ee:	88ba      	ldrh	r2, [r7, #4]
 80017f0:	89fb      	ldrh	r3, [r7, #14]
 80017f2:	4413      	add	r3, r2
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	80bb      	strh	r3, [r7, #4]
  while (x1 != x2 || y1 != y2) {
 80017f8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80017fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001800:	429a      	cmp	r2, r3
 8001802:	d1cc      	bne.n	800179e <GC9A01_DrawLine_Slow+0x8a>
 8001804:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001808:	f9b7 3000 	ldrsh.w	r3, [r7]
 800180c:	429a      	cmp	r2, r3
 800180e:	d1c6      	bne.n	800179e <GC9A01_DrawLine_Slow+0x8a>
    }
  }
}
 8001810:	bf00      	nop
 8001812:	bf00      	nop
 8001814:	371c      	adds	r7, #28
 8001816:	46bd      	mov	sp, r7
 8001818:	bd90      	pop	{r4, r7, pc}

0800181a <GC9A01_DrawLine>:


//==============================================================================
// Процедура рисования линии
//==============================================================================
void GC9A01_DrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
 800181a:	b590      	push	{r4, r7, lr}
 800181c:	b085      	sub	sp, #20
 800181e:	af02      	add	r7, sp, #8
 8001820:	4604      	mov	r4, r0
 8001822:	4608      	mov	r0, r1
 8001824:	4611      	mov	r1, r2
 8001826:	461a      	mov	r2, r3
 8001828:	4623      	mov	r3, r4
 800182a:	80fb      	strh	r3, [r7, #6]
 800182c:	4603      	mov	r3, r0
 800182e:	80bb      	strh	r3, [r7, #4]
 8001830:	460b      	mov	r3, r1
 8001832:	807b      	strh	r3, [r7, #2]
 8001834:	4613      	mov	r3, r2
 8001836:	803b      	strh	r3, [r7, #0]

  if (x1 == x2){
 8001838:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800183c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001840:	429a      	cmp	r2, r3
 8001842:	d129      	bne.n	8001898 <GC9A01_DrawLine+0x7e>

    if (y1 > y2){
 8001844:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001848:	f9b7 3000 	ldrsh.w	r3, [r7]
 800184c:	429a      	cmp	r2, r3
 800184e:	dd11      	ble.n	8001874 <GC9A01_DrawLine+0x5a>
      GC9A01_FillRect(x1, y2, 1, y1 - y2 + 1, color);
 8001850:	88ba      	ldrh	r2, [r7, #4]
 8001852:	883b      	ldrh	r3, [r7, #0]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	b29b      	uxth	r3, r3
 8001858:	3301      	adds	r3, #1
 800185a:	b29b      	uxth	r3, r3
 800185c:	b21a      	sxth	r2, r3
 800185e:	f9b7 1000 	ldrsh.w	r1, [r7]
 8001862:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001866:	8b3b      	ldrh	r3, [r7, #24]
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	4613      	mov	r3, r2
 800186c:	2201      	movs	r2, #1
 800186e:	f7ff fe25 	bl	80014bc <GC9A01_FillRect>
	}
    else{
      GC9A01_FillRect(x1, y1, 1, y2 - y1 + 1, color);
	}
	
    return;
 8001872:	e04c      	b.n	800190e <GC9A01_DrawLine+0xf4>
      GC9A01_FillRect(x1, y1, 1, y2 - y1 + 1, color);
 8001874:	883a      	ldrh	r2, [r7, #0]
 8001876:	88bb      	ldrh	r3, [r7, #4]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	b29b      	uxth	r3, r3
 800187c:	3301      	adds	r3, #1
 800187e:	b29b      	uxth	r3, r3
 8001880:	b21a      	sxth	r2, r3
 8001882:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001886:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800188a:	8b3b      	ldrh	r3, [r7, #24]
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	4613      	mov	r3, r2
 8001890:	2201      	movs	r2, #1
 8001892:	f7ff fe13 	bl	80014bc <GC9A01_FillRect>
    return;
 8001896:	e03a      	b.n	800190e <GC9A01_DrawLine+0xf4>
  }
  
  if (y1 == y2){
 8001898:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800189c:	f9b7 3000 	ldrsh.w	r3, [r7]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d127      	bne.n	80018f4 <GC9A01_DrawLine+0xda>
    
    if (x1 > x2){
 80018a4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80018a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	dd10      	ble.n	80018d2 <GC9A01_DrawLine+0xb8>
      GC9A01_FillRect(x2, y1, x1 - x2 + 1, 1, color);
 80018b0:	88fa      	ldrh	r2, [r7, #6]
 80018b2:	887b      	ldrh	r3, [r7, #2]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	3301      	adds	r3, #1
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	b21a      	sxth	r2, r3
 80018be:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80018c2:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80018c6:	8b3b      	ldrh	r3, [r7, #24]
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	2301      	movs	r3, #1
 80018cc:	f7ff fdf6 	bl	80014bc <GC9A01_FillRect>
	}
    else{
      GC9A01_FillRect(x1, y1, x2 - x1 + 1, 1, color);
	}
	
    return;
 80018d0:	e01d      	b.n	800190e <GC9A01_DrawLine+0xf4>
      GC9A01_FillRect(x1, y1, x2 - x1 + 1, 1, color);
 80018d2:	887a      	ldrh	r2, [r7, #2]
 80018d4:	88fb      	ldrh	r3, [r7, #6]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	b29b      	uxth	r3, r3
 80018da:	3301      	adds	r3, #1
 80018dc:	b29b      	uxth	r3, r3
 80018de:	b21a      	sxth	r2, r3
 80018e0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80018e4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80018e8:	8b3b      	ldrh	r3, [r7, #24]
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	2301      	movs	r3, #1
 80018ee:	f7ff fde5 	bl	80014bc <GC9A01_FillRect>
    return;
 80018f2:	e00c      	b.n	800190e <GC9A01_DrawLine+0xf4>
  }
  
  GC9A01_DrawLine_Slow(x1, y1, x2, y2, color);
 80018f4:	f9b7 4000 	ldrsh.w	r4, [r7]
 80018f8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80018fc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001900:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001904:	8b3b      	ldrh	r3, [r7, #24]
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	4623      	mov	r3, r4
 800190a:	f7ff ff03 	bl	8001714 <GC9A01_DrawLine_Slow>
}
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	bd90      	pop	{r4, r7, pc}

08001914 <GC9A01_DrawPixel>:


//==============================================================================
// Процедура окрашивает 1 пиксель дисплея
//==============================================================================
void GC9A01_DrawPixel(int16_t x, int16_t y, uint16_t color){
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	80fb      	strh	r3, [r7, #6]
 800191e:	460b      	mov	r3, r1
 8001920:	80bb      	strh	r3, [r7, #4]
 8001922:	4613      	mov	r3, r2
 8001924:	807b      	strh	r3, [r7, #2]
	
  if ((x < 0) ||(x >= GC9A01_Width) || (y < 0) || (y >= GC9A01_Height)){
 8001926:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800192a:	2b00      	cmp	r3, #0
 800192c:	db1b      	blt.n	8001966 <GC9A01_DrawPixel+0x52>
 800192e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001932:	4a0f      	ldr	r2, [pc, #60]	; (8001970 <GC9A01_DrawPixel+0x5c>)
 8001934:	8812      	ldrh	r2, [r2, #0]
 8001936:	4293      	cmp	r3, r2
 8001938:	da15      	bge.n	8001966 <GC9A01_DrawPixel+0x52>
 800193a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	db11      	blt.n	8001966 <GC9A01_DrawPixel+0x52>
 8001942:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001946:	4a0b      	ldr	r2, [pc, #44]	; (8001974 <GC9A01_DrawPixel+0x60>)
 8001948:	8812      	ldrh	r2, [r2, #0]
 800194a:	4293      	cmp	r3, r2
 800194c:	da0b      	bge.n	8001966 <GC9A01_DrawPixel+0x52>
  }
	
#if FRAME_BUFFER	// если включен буфер кадра
	buff_frame[y * GC9A01_Width + x] = ((color & 0xFF)<<8) | (color >> 8 );
#else	//если попиксельный вывод
	GC9A01_SetWindow(x, y, x, y);
 800194e:	88f8      	ldrh	r0, [r7, #6]
 8001950:	88b9      	ldrh	r1, [r7, #4]
 8001952:	88fa      	ldrh	r2, [r7, #6]
 8001954:	88bb      	ldrh	r3, [r7, #4]
 8001956:	f7ff fe0f 	bl	8001578 <GC9A01_SetWindow>
  GC9A01_RamWrite(&color, 1);
 800195a:	1cbb      	adds	r3, r7, #2
 800195c:	2101      	movs	r1, #1
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fe30 	bl	80015c4 <GC9A01_RamWrite>
 8001964:	e000      	b.n	8001968 <GC9A01_DrawPixel+0x54>
    return;
 8001966:	bf00      	nop
#endif
}
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	2000002c 	.word	0x2000002c
 8001974:	2000002e 	.word	0x2000002e

08001978 <GC9A01_DrawCircleFilled>:


//==============================================================================
// Процедура рисования круг ( заполненый )
//==============================================================================
void GC9A01_DrawCircleFilled(int16_t x0, int16_t y0, int16_t radius, uint16_t fillcolor) {
 8001978:	b590      	push	{r4, r7, lr}
 800197a:	b089      	sub	sp, #36	; 0x24
 800197c:	af02      	add	r7, sp, #8
 800197e:	4604      	mov	r4, r0
 8001980:	4608      	mov	r0, r1
 8001982:	4611      	mov	r1, r2
 8001984:	461a      	mov	r2, r3
 8001986:	4623      	mov	r3, r4
 8001988:	80fb      	strh	r3, [r7, #6]
 800198a:	4603      	mov	r3, r0
 800198c:	80bb      	strh	r3, [r7, #4]
 800198e:	460b      	mov	r3, r1
 8001990:	807b      	strh	r3, [r7, #2]
 8001992:	4613      	mov	r3, r2
 8001994:	803b      	strh	r3, [r7, #0]
	
  int x = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
  int y = radius;
 800199a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800199e:	613b      	str	r3, [r7, #16]
  int delta = 1 - 2 * radius;
 80019a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	f1c3 0301 	rsb	r3, r3, #1
 80019aa:	60fb      	str	r3, [r7, #12]
  int error = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	60bb      	str	r3, [r7, #8]

  while (y >= 0){
 80019b0:	e075      	b.n	8001a9e <GC9A01_DrawCircleFilled+0x126>
	  
    GC9A01_DrawLine(x0 + x, y0 - y, x0 + x, y0 + y, fillcolor);
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	88fb      	ldrh	r3, [r7, #6]
 80019b8:	4413      	add	r3, r2
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	b218      	sxth	r0, r3
 80019be:	88ba      	ldrh	r2, [r7, #4]
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	b219      	sxth	r1, r3
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	88fb      	ldrh	r3, [r7, #6]
 80019d0:	4413      	add	r3, r2
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	b21c      	sxth	r4, r3
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	b29a      	uxth	r2, r3
 80019da:	88bb      	ldrh	r3, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	b29b      	uxth	r3, r3
 80019e0:	b21a      	sxth	r2, r3
 80019e2:	883b      	ldrh	r3, [r7, #0]
 80019e4:	9300      	str	r3, [sp, #0]
 80019e6:	4613      	mov	r3, r2
 80019e8:	4622      	mov	r2, r4
 80019ea:	f7ff ff16 	bl	800181a <GC9A01_DrawLine>
    GC9A01_DrawLine(x0 - x, y0 - y, x0 - x, y0 + y, fillcolor);
 80019ee:	88fa      	ldrh	r2, [r7, #6]
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	b218      	sxth	r0, r3
 80019fa:	88ba      	ldrh	r2, [r7, #4]
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	b219      	sxth	r1, r3
 8001a06:	88fa      	ldrh	r2, [r7, #6]
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	b21c      	sxth	r4, r3
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	88bb      	ldrh	r3, [r7, #4]
 8001a18:	4413      	add	r3, r2
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	b21a      	sxth	r2, r3
 8001a1e:	883b      	ldrh	r3, [r7, #0]
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	4613      	mov	r3, r2
 8001a24:	4622      	mov	r2, r4
 8001a26:	f7ff fef8 	bl	800181a <GC9A01_DrawLine>
    error = 2 * (delta + y) - 1;
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	4413      	add	r3, r2
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	3b01      	subs	r3, #1
 8001a34:	60bb      	str	r3, [r7, #8]

    if (delta < 0 && error <= 0) {
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	da0c      	bge.n	8001a56 <GC9A01_DrawCircleFilled+0xde>
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	dc09      	bgt.n	8001a56 <GC9A01_DrawCircleFilled+0xde>
		
      ++x;
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	3301      	adds	r3, #1
 8001a46:	617b      	str	r3, [r7, #20]
      delta += 2 * x + 1;
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	4413      	add	r3, r2
 8001a52:	60fb      	str	r3, [r7, #12]
      continue;
 8001a54:	e023      	b.n	8001a9e <GC9A01_DrawCircleFilled+0x126>
    }
	
    error = 2 * (delta - x) - 1;
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	60bb      	str	r3, [r7, #8]
		
    if (delta > 0 && error > 0) {
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	dd0d      	ble.n	8001a84 <GC9A01_DrawCircleFilled+0x10c>
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	dd0a      	ble.n	8001a84 <GC9A01_DrawCircleFilled+0x10c>
		
      --y;
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	3b01      	subs	r3, #1
 8001a72:	613b      	str	r3, [r7, #16]
      delta += 1 - 2 * y;
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	f1c3 0301 	rsb	r3, r3, #1
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	4413      	add	r3, r2
 8001a80:	60fb      	str	r3, [r7, #12]
      continue;
 8001a82:	e00c      	b.n	8001a9e <GC9A01_DrawCircleFilled+0x126>
    }
	
    ++x;
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	3301      	adds	r3, #1
 8001a88:	617b      	str	r3, [r7, #20]
    delta += 2 * (x - y);
 8001a8a:	697a      	ldr	r2, [r7, #20]
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	4413      	add	r3, r2
 8001a96:	60fb      	str	r3, [r7, #12]
    --y;
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	613b      	str	r3, [r7, #16]
  while (y >= 0){
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	da86      	bge.n	80019b2 <GC9A01_DrawCircleFilled+0x3a>
  }
}
 8001aa4:	bf00      	nop
 8001aa6:	bf00      	nop
 8001aa8:	371c      	adds	r7, #28
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd90      	pop	{r4, r7, pc}

08001aae <GC9A01_DrawLineThick>:
//==============================================================================

//==============================================================================
// Процедура рисования линия толстая ( последний параметр толщина )
//==============================================================================
void GC9A01_DrawLineThick(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color, uint8_t thick) {
 8001aae:	b590      	push	{r4, r7, lr}
 8001ab0:	b087      	sub	sp, #28
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	4604      	mov	r4, r0
 8001ab6:	4608      	mov	r0, r1
 8001ab8:	4611      	mov	r1, r2
 8001aba:	461a      	mov	r2, r3
 8001abc:	4623      	mov	r3, r4
 8001abe:	80fb      	strh	r3, [r7, #6]
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	80bb      	strh	r3, [r7, #4]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	807b      	strh	r3, [r7, #2]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	803b      	strh	r3, [r7, #0]
	const int16_t deltaX = abs(x2 - x1);
 8001acc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001ad0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	bfb8      	it	lt
 8001ada:	425b      	neglt	r3, r3
 8001adc:	82bb      	strh	r3, [r7, #20]
	const int16_t deltaY = abs(y2 - y1);
 8001ade:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001ae2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	bfb8      	it	lt
 8001aec:	425b      	neglt	r3, r3
 8001aee:	827b      	strh	r3, [r7, #18]
	const int16_t signX = x1 < x2 ? 1 : -1;
 8001af0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001af4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	da01      	bge.n	8001b00 <GC9A01_DrawLineThick+0x52>
 8001afc:	2301      	movs	r3, #1
 8001afe:	e001      	b.n	8001b04 <GC9A01_DrawLineThick+0x56>
 8001b00:	f04f 33ff 	mov.w	r3, #4294967295
 8001b04:	823b      	strh	r3, [r7, #16]
	const int16_t signY = y1 < y2 ? 1 : -1;
 8001b06:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001b0a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	da01      	bge.n	8001b16 <GC9A01_DrawLineThick+0x68>
 8001b12:	2301      	movs	r3, #1
 8001b14:	e001      	b.n	8001b1a <GC9A01_DrawLineThick+0x6c>
 8001b16:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1a:	81fb      	strh	r3, [r7, #14]

	int16_t error = deltaX - deltaY;
 8001b1c:	8aba      	ldrh	r2, [r7, #20]
 8001b1e:	8a7b      	ldrh	r3, [r7, #18]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	82fb      	strh	r3, [r7, #22]

	if (thick > 1){
 8001b26:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d90c      	bls.n	8001b48 <GC9A01_DrawLineThick+0x9a>
		GC9A01_DrawCircleFilled(x2, y2, thick >> 1, color);
 8001b2e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b32:	085b      	lsrs	r3, r3, #1
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	b21a      	sxth	r2, r3
 8001b38:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b3a:	f9b7 1000 	ldrsh.w	r1, [r7]
 8001b3e:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8001b42:	f7ff ff19 	bl	8001978 <GC9A01_DrawCircleFilled>
 8001b46:	e046      	b.n	8001bd6 <GC9A01_DrawLineThick+0x128>
	}
	else{
		GC9A01_DrawPixel(x2, y2, color);
 8001b48:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001b4a:	f9b7 1000 	ldrsh.w	r1, [r7]
 8001b4e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff fede 	bl	8001914 <GC9A01_DrawPixel>
	}

	while (x1 != x2 || y1 != y2) {
 8001b58:	e03d      	b.n	8001bd6 <GC9A01_DrawLineThick+0x128>
		if (thick > 1){
 8001b5a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d90c      	bls.n	8001b7c <GC9A01_DrawLineThick+0xce>
			GC9A01_DrawCircleFilled(x1, y1, thick >> 1, color);
 8001b62:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b66:	085b      	lsrs	r3, r3, #1
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	b21a      	sxth	r2, r3
 8001b6c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b6e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001b72:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001b76:	f7ff feff 	bl	8001978 <GC9A01_DrawCircleFilled>
 8001b7a:	e007      	b.n	8001b8c <GC9A01_DrawLineThick+0xde>
		}
		else{
			GC9A01_DrawPixel(x1, y1, color);
 8001b7c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001b7e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001b82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff fec4 	bl	8001914 <GC9A01_DrawPixel>
		}

		const int16_t error2 = error * 2;
 8001b8c:	8afb      	ldrh	r3, [r7, #22]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	81bb      	strh	r3, [r7, #12]
		if (error2 > -deltaY) {
 8001b94:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001b98:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b9c:	425b      	negs	r3, r3
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	dd09      	ble.n	8001bb6 <GC9A01_DrawLineThick+0x108>
			error -= deltaY;
 8001ba2:	8afa      	ldrh	r2, [r7, #22]
 8001ba4:	8a7b      	ldrh	r3, [r7, #18]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	82fb      	strh	r3, [r7, #22]
			x1 += signX;
 8001bac:	88fa      	ldrh	r2, [r7, #6]
 8001bae:	8a3b      	ldrh	r3, [r7, #16]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	80fb      	strh	r3, [r7, #6]
		}
		if (error2 < deltaX) {
 8001bb6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001bba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	da09      	bge.n	8001bd6 <GC9A01_DrawLineThick+0x128>
			error += deltaX;
 8001bc2:	8afa      	ldrh	r2, [r7, #22]
 8001bc4:	8abb      	ldrh	r3, [r7, #20]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	82fb      	strh	r3, [r7, #22]
			y1 += signY;
 8001bcc:	88ba      	ldrh	r2, [r7, #4]
 8001bce:	89fb      	ldrh	r3, [r7, #14]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	80bb      	strh	r3, [r7, #4]
	while (x1 != x2 || y1 != y2) {
 8001bd6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001bda:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d1bb      	bne.n	8001b5a <GC9A01_DrawLineThick+0xac>
 8001be2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001be6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d1b5      	bne.n	8001b5a <GC9A01_DrawLineThick+0xac>
		}
	}
}
 8001bee:	bf00      	nop
 8001bf0:	bf00      	nop
 8001bf2:	371c      	adds	r7, #28
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd90      	pop	{r4, r7, pc}

08001bf8 <SPI_Write>:

/************************ (C) COPYRIGHT GKP *****END OF FILE****/


	HAL_StatusTypeDef SPI_Write(uint8_t* pbuff, uint16_t size)
	{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	460b      	mov	r3, r1
 8001c02:	807b      	strh	r3, [r7, #2]
		//DMA, use HAL_SPI_Transmit_DMA() function
	    HAL_StatusTypeDef status =  HAL_SPI_Transmit_DMA(&hspi2, pbuff, size);
 8001c04:	887b      	ldrh	r3, [r7, #2]
 8001c06:	461a      	mov	r2, r3
 8001c08:	6879      	ldr	r1, [r7, #4]
 8001c0a:	4808      	ldr	r0, [pc, #32]	; (8001c2c <SPI_Write+0x34>)
 8001c0c:	f003 f9ea 	bl	8004fe4 <HAL_SPI_Transmit_DMA>
 8001c10:	4603      	mov	r3, r0
 8001c12:	73fb      	strb	r3, [r7, #15]
	    while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY){;}
 8001c14:	bf00      	nop
 8001c16:	4805      	ldr	r0, [pc, #20]	; (8001c2c <SPI_Write+0x34>)
 8001c18:	f003 fab4 	bl	8005184 <HAL_SPI_GetState>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d1f9      	bne.n	8001c16 <SPI_Write+0x1e>
	    return status;
 8001c22:	7bfb      	ldrb	r3, [r7, #15]

	    //no DMA, use HAL_SPI_Transmit() function
	    //return HAL_SPI_Transmit(&hspi1, pbuff, size, 100);
	}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20000084 	.word	0x20000084

08001c30 <Write_Cmd_Data>:




	void  Write_Cmd_Data (unsigned char CMDP)
	{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	71fb      	strb	r3, [r7, #7]
	    LCD_CS_0;
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c40:	480b      	ldr	r0, [pc, #44]	; (8001c70 <Write_Cmd_Data+0x40>)
 8001c42:	f001 fcc3 	bl	80035cc <HAL_GPIO_WritePin>
	   	LCD_DC_1;
 8001c46:	2201      	movs	r2, #1
 8001c48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c4c:	4808      	ldr	r0, [pc, #32]	; (8001c70 <Write_Cmd_Data+0x40>)
 8001c4e:	f001 fcbd 	bl	80035cc <HAL_GPIO_WritePin>

	   	SPI_Write(&CMDP, 1);
 8001c52:	1dfb      	adds	r3, r7, #7
 8001c54:	2101      	movs	r1, #1
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff ffce 	bl	8001bf8 <SPI_Write>

	   	LCD_CS_1;
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c62:	4803      	ldr	r0, [pc, #12]	; (8001c70 <Write_Cmd_Data+0x40>)
 8001c64:	f001 fcb2 	bl	80035cc <HAL_GPIO_WritePin>
	}
 8001c68:	bf00      	nop
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40020000 	.word	0x40020000

08001c74 <Write_Cmd>:

	//=============================================================
	//write command

	void Write_Cmd(unsigned char CMD)
	{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	71fb      	strb	r3, [r7, #7]
	    LCD_CS_0;
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c84:	480b      	ldr	r0, [pc, #44]	; (8001cb4 <Write_Cmd+0x40>)
 8001c86:	f001 fca1 	bl	80035cc <HAL_GPIO_WritePin>
	   	LCD_DC_0;
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c90:	4808      	ldr	r0, [pc, #32]	; (8001cb4 <Write_Cmd+0x40>)
 8001c92:	f001 fc9b 	bl	80035cc <HAL_GPIO_WritePin>

	   	SPI_Write(&CMD, 1);
 8001c96:	1dfb      	adds	r3, r7, #7
 8001c98:	2101      	movs	r1, #1
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff ffac 	bl	8001bf8 <SPI_Write>

	   	LCD_CS_1;
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ca6:	4803      	ldr	r0, [pc, #12]	; (8001cb4 <Write_Cmd+0x40>)
 8001ca8:	f001 fc90 	bl	80035cc <HAL_GPIO_WritePin>
	}
 8001cac:	bf00      	nop
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40020000 	.word	0x40020000

08001cb8 <LCD_SetPos>:



	 void LCD_SetPos(unsigned int Xstart,unsigned int Ystart,unsigned int Xend,unsigned int Yend)
	{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
 8001cc4:	603b      	str	r3, [r7, #0]
		Write_Cmd(0x2a);
 8001cc6:	202a      	movs	r0, #42	; 0x2a
 8001cc8:	f7ff ffd4 	bl	8001c74 <Write_Cmd>
		Write_Cmd_Data(Xstart>>8);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	0a1b      	lsrs	r3, r3, #8
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff ffac 	bl	8001c30 <Write_Cmd_Data>
		Write_Cmd_Data(Xstart);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff ffa7 	bl	8001c30 <Write_Cmd_Data>
	 	Write_Cmd_Data(Xend>>8);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	0a1b      	lsrs	r3, r3, #8
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff ffa1 	bl	8001c30 <Write_Cmd_Data>
		Write_Cmd_Data(Xend);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff ff9c 	bl	8001c30 <Write_Cmd_Data>

		Write_Cmd(0x2b);
 8001cf8:	202b      	movs	r0, #43	; 0x2b
 8001cfa:	f7ff ffbb 	bl	8001c74 <Write_Cmd>
		Write_Cmd_Data(Ystart>>8);
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	0a1b      	lsrs	r3, r3, #8
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff ff93 	bl	8001c30 <Write_Cmd_Data>
		Write_Cmd_Data(Ystart);
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff ff8e 	bl	8001c30 <Write_Cmd_Data>
		Write_Cmd_Data(Yend>>8);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	0a1b      	lsrs	r3, r3, #8
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff ff88 	bl	8001c30 <Write_Cmd_Data>
		Write_Cmd_Data(Yend);
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff ff83 	bl	8001c30 <Write_Cmd_Data>

	  	Write_Cmd(0x2c);//LCD_WriteCMD(GRAMWR);
 8001d2a:	202c      	movs	r0, #44	; 0x2c
 8001d2c:	f7ff ffa2 	bl	8001c74 <Write_Cmd>
	}
 8001d30:	bf00      	nop
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <Write_Bytes>:



	void Write_Bytes(unsigned char * pbuff, unsigned short size)
	{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	460b      	mov	r3, r1
 8001d42:	807b      	strh	r3, [r7, #2]
	    LCD_CS_0;
 8001d44:	2200      	movs	r2, #0
 8001d46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d4a:	480c      	ldr	r0, [pc, #48]	; (8001d7c <Write_Bytes+0x44>)
 8001d4c:	f001 fc3e 	bl	80035cc <HAL_GPIO_WritePin>
	   	LCD_DC_1;
 8001d50:	2201      	movs	r2, #1
 8001d52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d56:	4809      	ldr	r0, [pc, #36]	; (8001d7c <Write_Bytes+0x44>)
 8001d58:	f001 fc38 	bl	80035cc <HAL_GPIO_WritePin>

	   	SPI_Write(pbuff, size);
 8001d5c:	887b      	ldrh	r3, [r7, #2]
 8001d5e:	4619      	mov	r1, r3
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f7ff ff49 	bl	8001bf8 <SPI_Write>

	   	LCD_CS_1;
 8001d66:	2201      	movs	r2, #1
 8001d68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d6c:	4803      	ldr	r0, [pc, #12]	; (8001d7c <Write_Bytes+0x44>)
 8001d6e:	f001 fc2d 	bl	80035cc <HAL_GPIO_WritePin>
	}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40020000 	.word	0x40020000

08001d80 <ClearWindow>:


	void ClearWindow(unsigned int startX, unsigned int startY, unsigned int endX, unsigned int endY, unsigned int bColor)
	{
 8001d80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d84:	b08f      	sub	sp, #60	; 0x3c
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	60f8      	str	r0, [r7, #12]
 8001d8a:	60b9      	str	r1, [r7, #8]
 8001d8c:	607a      	str	r2, [r7, #4]
 8001d8e:	603b      	str	r3, [r7, #0]
 8001d90:	466b      	mov	r3, sp
 8001d92:	461e      	mov	r6, r3
	 unsigned int i;

	 //Exchange high 8bit and low 8bit of bColor for DMA batch transmit
	 unsigned char hb = (bColor&0xFFFF) >> 8;
 8001d94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d96:	0a1b      	lsrs	r3, r3, #8
 8001d98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	 unsigned char lb = bColor & 0xFF;
 8001d9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d9e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	 unsigned short tempColor = lb * 256 + hb;
 8001da2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	021b      	lsls	r3, r3, #8
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	4413      	add	r3, r2
 8001db4:	863b      	strh	r3, [r7, #48]	; 0x30

	 unsigned int totalSize = (endX-startX) * (endY - startY) * 2; // total clear window data size
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	6839      	ldr	r1, [r7, #0]
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	1a8a      	subs	r2, r1, r2
 8001dc2:	fb02 f303 	mul.w	r3, r2, r3
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
	 unsigned int bufSize = 512;  // define bufSize, need less than DMA transmit size
 8001dca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dce:	62bb      	str	r3, [r7, #40]	; 0x28

	 unsigned int loopNum = (totalSize - (totalSize % bufSize)) / bufSize; // transmit loop times
 8001dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001dd4:	fbb3 f2f2 	udiv	r2, r3, r2
 8001dd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001dda:	fb01 f202 	mul.w	r2, r1, r2
 8001dde:	1a9b      	subs	r3, r3, r2
 8001de0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001de2:	1ad2      	subs	r2, r2, r3
 8001de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dea:	627b      	str	r3, [r7, #36]	; 0x24
	 unsigned int modNum = totalSize % bufSize;  // remainder data bytes
 8001dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001df0:	fbb3 f2f2 	udiv	r2, r3, r2
 8001df4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001df6:	fb01 f202 	mul.w	r2, r1, r2
 8001dfa:	1a9b      	subs	r3, r3, r2
 8001dfc:	623b      	str	r3, [r7, #32]


	 //use a tempBuf to initial bColor data, bufSize < DMA transmit size
	 unsigned short tempBuf[bufSize];
 8001dfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e00:	460b      	mov	r3, r1
 8001e02:	3b01      	subs	r3, #1
 8001e04:	61fb      	str	r3, [r7, #28]
 8001e06:	2300      	movs	r3, #0
 8001e08:	4688      	mov	r8, r1
 8001e0a:	4699      	mov	r9, r3
 8001e0c:	f04f 0200 	mov.w	r2, #0
 8001e10:	f04f 0300 	mov.w	r3, #0
 8001e14:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8001e18:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8001e1c:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8001e20:	2300      	movs	r3, #0
 8001e22:	460c      	mov	r4, r1
 8001e24:	461d      	mov	r5, r3
 8001e26:	f04f 0200 	mov.w	r2, #0
 8001e2a:	f04f 0300 	mov.w	r3, #0
 8001e2e:	012b      	lsls	r3, r5, #4
 8001e30:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001e34:	0122      	lsls	r2, r4, #4
 8001e36:	004b      	lsls	r3, r1, #1
 8001e38:	3307      	adds	r3, #7
 8001e3a:	08db      	lsrs	r3, r3, #3
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	ebad 0d03 	sub.w	sp, sp, r3
 8001e42:	466b      	mov	r3, sp
 8001e44:	3301      	adds	r3, #1
 8001e46:	085b      	lsrs	r3, r3, #1
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	61bb      	str	r3, [r7, #24]
	 unsigned char * ptempBuf;

	 //init tempBuf data to tempColor( Exchange high 8bit and low 8bit of bColor )
	 for(i=0; i<bufSize; i++){
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	637b      	str	r3, [r7, #52]	; 0x34
 8001e50:	e007      	b.n	8001e62 <ClearWindow+0xe2>
		 tempBuf[i] = tempColor;
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e56:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8001e58:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	 for(i=0; i<bufSize; i++){
 8001e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e5e:	3301      	adds	r3, #1
 8001e60:	637b      	str	r3, [r7, #52]	; 0x34
 8001e62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d3f3      	bcc.n	8001e52 <ClearWindow+0xd2>
	 }

	 // Clear window size: from (startX, startY) to (endX, endY)
	 LCD_SetPos(startX,startY,endX-1,endY-1);// (endX-startX) * (endY - startY)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	1e5a      	subs	r2, r3, #1
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	3b01      	subs	r3, #1
 8001e72:	68b9      	ldr	r1, [r7, #8]
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f7ff ff1f 	bl	8001cb8 <LCD_SetPos>

	 // transmit bufSize byte one time, loopNum loops
	 ptempBuf = (unsigned char *)tempBuf;
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	617b      	str	r3, [r7, #20]
	 for(i=0; i<loopNum; i++){
 8001e7e:	2300      	movs	r3, #0
 8001e80:	637b      	str	r3, [r7, #52]	; 0x34
 8001e82:	e008      	b.n	8001e96 <ClearWindow+0x116>
		 Write_Bytes(ptempBuf, bufSize);
 8001e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	4619      	mov	r1, r3
 8001e8a:	6978      	ldr	r0, [r7, #20]
 8001e8c:	f7ff ff54 	bl	8001d38 <Write_Bytes>
	 for(i=0; i<loopNum; i++){
 8001e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e92:	3301      	adds	r3, #1
 8001e94:	637b      	str	r3, [r7, #52]	; 0x34
 8001e96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d3f2      	bcc.n	8001e84 <ClearWindow+0x104>
	 }

	 // transmit remainder data, modNum bytes
	 Write_Bytes(ptempBuf, modNum);
 8001e9e:	6a3b      	ldr	r3, [r7, #32]
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	6978      	ldr	r0, [r7, #20]
 8001ea6:	f7ff ff47 	bl	8001d38 <Write_Bytes>
 8001eaa:	46b5      	mov	sp, r6

	}
 8001eac:	bf00      	nop
 8001eae:	373c      	adds	r7, #60	; 0x3c
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001eb6 <QMC_init>:
#include"QMC5883.h"
#include "math.h"

//###############################################################################################################
uint8_t QMC_init(QMC_t *qmc,I2C_HandleTypeDef *i2c,uint8_t Output_Data_Rate)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b08a      	sub	sp, #40	; 0x28
 8001eba:	af04      	add	r7, sp, #16
 8001ebc:	60f8      	str	r0, [r7, #12]
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	71fb      	strb	r3, [r7, #7]
	uint8_t array[2];
	qmc->i2c=i2c;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	601a      	str	r2, [r3, #0]
	qmc->Control_Register=0x11;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2211      	movs	r2, #17
 8001ece:	711a      	strb	r2, [r3, #4]
	array[0]=1;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	753b      	strb	r3, [r7, #20]
	array[1]=qmc->Control_Register;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	791b      	ldrb	r3, [r3, #4]
 8001ed8:	757b      	strb	r3, [r7, #21]

	if(Output_Data_Rate==200)qmc->Control_Register|=0b00001100;
 8001eda:	79fb      	ldrb	r3, [r7, #7]
 8001edc:	2bc8      	cmp	r3, #200	; 0xc8
 8001ede:	d107      	bne.n	8001ef0 <QMC_init+0x3a>
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	791b      	ldrb	r3, [r3, #4]
 8001ee4:	f043 030c 	orr.w	r3, r3, #12
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	711a      	strb	r2, [r3, #4]
 8001eee:	e024      	b.n	8001f3a <QMC_init+0x84>
	else if(Output_Data_Rate==100)qmc->Control_Register|=0b00001000;
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	2b64      	cmp	r3, #100	; 0x64
 8001ef4:	d107      	bne.n	8001f06 <QMC_init+0x50>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	791b      	ldrb	r3, [r3, #4]
 8001efa:	f043 0308 	orr.w	r3, r3, #8
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	711a      	strb	r2, [r3, #4]
 8001f04:	e019      	b.n	8001f3a <QMC_init+0x84>
	else if(Output_Data_Rate==50)qmc->Control_Register|=0b00000100;
 8001f06:	79fb      	ldrb	r3, [r7, #7]
 8001f08:	2b32      	cmp	r3, #50	; 0x32
 8001f0a:	d107      	bne.n	8001f1c <QMC_init+0x66>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	791b      	ldrb	r3, [r3, #4]
 8001f10:	f043 0304 	orr.w	r3, r3, #4
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	711a      	strb	r2, [r3, #4]
 8001f1a:	e00e      	b.n	8001f3a <QMC_init+0x84>
	else if(Output_Data_Rate==10)qmc->Control_Register|=0b00000000;
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	2b0a      	cmp	r3, #10
 8001f20:	d104      	bne.n	8001f2c <QMC_init+0x76>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	791a      	ldrb	r2, [r3, #4]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	711a      	strb	r2, [r3, #4]
 8001f2a:	e006      	b.n	8001f3a <QMC_init+0x84>
	else qmc->Control_Register|=0b00001100;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	791b      	ldrb	r3, [r3, #4]
 8001f30:	f043 030c 	orr.w	r3, r3, #12
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	711a      	strb	r2, [r3, #4]

	if(HAL_I2C_Mem_Write(qmc->i2c, 0x1A, 0x0B, 1, &array[0], 1, 100)!=HAL_OK)return 1;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6818      	ldr	r0, [r3, #0]
 8001f3e:	2364      	movs	r3, #100	; 0x64
 8001f40:	9302      	str	r3, [sp, #8]
 8001f42:	2301      	movs	r3, #1
 8001f44:	9301      	str	r3, [sp, #4]
 8001f46:	f107 0314 	add.w	r3, r7, #20
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	220b      	movs	r2, #11
 8001f50:	211a      	movs	r1, #26
 8001f52:	f001 fc99 	bl	8003888 <HAL_I2C_Mem_Write>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <QMC_init+0xaa>
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e014      	b.n	8001f8a <QMC_init+0xd4>
	if(HAL_I2C_Mem_Write(qmc->i2c, 0x1A, 0x09, 1, &array[1], 1, 100)!=HAL_OK)return 1;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6818      	ldr	r0, [r3, #0]
 8001f64:	2364      	movs	r3, #100	; 0x64
 8001f66:	9302      	str	r3, [sp, #8]
 8001f68:	2301      	movs	r3, #1
 8001f6a:	9301      	str	r3, [sp, #4]
 8001f6c:	f107 0314 	add.w	r3, r7, #20
 8001f70:	3301      	adds	r3, #1
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	2301      	movs	r3, #1
 8001f76:	2209      	movs	r2, #9
 8001f78:	211a      	movs	r1, #26
 8001f7a:	f001 fc85 	bl	8003888 <HAL_I2C_Mem_Write>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <QMC_init+0xd2>
 8001f84:	2301      	movs	r3, #1
 8001f86:	e000      	b.n	8001f8a <QMC_init+0xd4>

	return 0;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3718      	adds	r7, #24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	0000      	movs	r0, r0
 8001f94:	0000      	movs	r0, r0
	...

08001f98 <QMC_read>:

uint8_t QMC_read(QMC_t *qmc)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af04      	add	r7, sp, #16
 8001f9e:	6078      	str	r0, [r7, #4]
	  qmc->datas[0]=0;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	715a      	strb	r2, [r3, #5]
	  HAL_I2C_Mem_Read(qmc->i2c, 0x1A, 0x06, 1, qmc->datas, 1, 100);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6818      	ldr	r0, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3305      	adds	r3, #5
 8001fae:	2264      	movs	r2, #100	; 0x64
 8001fb0:	9202      	str	r2, [sp, #8]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	9201      	str	r2, [sp, #4]
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	2301      	movs	r3, #1
 8001fba:	2206      	movs	r2, #6
 8001fbc:	211a      	movs	r1, #26
 8001fbe:	f001 fd5d 	bl	8003a7c <HAL_I2C_Mem_Read>

	  if((qmc->datas[0]&0x01)==1)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	795b      	ldrb	r3, [r3, #5]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d076      	beq.n	80020bc <QMC_read+0x124>
	  {
		  HAL_I2C_Mem_Read(qmc->i2c, 0x1A, 0x00, 1, qmc->datas, 6, 100);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6818      	ldr	r0, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	3305      	adds	r3, #5
 8001fd6:	2264      	movs	r2, #100	; 0x64
 8001fd8:	9202      	str	r2, [sp, #8]
 8001fda:	2206      	movs	r2, #6
 8001fdc:	9201      	str	r2, [sp, #4]
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	211a      	movs	r1, #26
 8001fe6:	f001 fd49 	bl	8003a7c <HAL_I2C_Mem_Read>
		  qmc->Xaxis= (qmc->datas[1]<<8) | qmc->datas[0];
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	799b      	ldrb	r3, [r3, #6]
 8001fee:	021b      	lsls	r3, r3, #8
 8001ff0:	b21a      	sxth	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	795b      	ldrb	r3, [r3, #5]
 8001ff6:	b21b      	sxth	r3, r3
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	b21a      	sxth	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	819a      	strh	r2, [r3, #12]
		  qmc->Yaxis= (qmc->datas[3]<<8) | qmc->datas[2];
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	7a1b      	ldrb	r3, [r3, #8]
 8002004:	021b      	lsls	r3, r3, #8
 8002006:	b21a      	sxth	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	79db      	ldrb	r3, [r3, #7]
 800200c:	b21b      	sxth	r3, r3
 800200e:	4313      	orrs	r3, r2
 8002010:	b21a      	sxth	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	81da      	strh	r2, [r3, #14]
		  qmc->Zaxis= (qmc->datas[5]<<8) | qmc->datas[4];
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	7a9b      	ldrb	r3, [r3, #10]
 800201a:	021b      	lsls	r3, r3, #8
 800201c:	b21a      	sxth	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	7a5b      	ldrb	r3, [r3, #9]
 8002022:	b21b      	sxth	r3, r3
 8002024:	4313      	orrs	r3, r2
 8002026:	b21a      	sxth	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	821a      	strh	r2, [r3, #16]

		  qmc->compas=atan2f(qmc->Yaxis,qmc->Xaxis)*180.00/M_PI;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002032:	ee07 3a90 	vmov	s15, r3
 8002036:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002040:	ee07 3a10 	vmov	s14, r3
 8002044:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002048:	eef0 0a47 	vmov.f32	s1, s14
 800204c:	eeb0 0a67 	vmov.f32	s0, s15
 8002050:	f003 fade 	bl	8005610 <atan2f>
 8002054:	ee10 3a10 	vmov	r3, s0
 8002058:	4618      	mov	r0, r3
 800205a:	f7fe fa21 	bl	80004a0 <__aeabi_f2d>
 800205e:	f04f 0200 	mov.w	r2, #0
 8002062:	4b1d      	ldr	r3, [pc, #116]	; (80020d8 <QMC_read+0x140>)
 8002064:	f7fe fa74 	bl	8000550 <__aeabi_dmul>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	4610      	mov	r0, r2
 800206e:	4619      	mov	r1, r3
 8002070:	a317      	add	r3, pc, #92	; (adr r3, 80020d0 <QMC_read+0x138>)
 8002072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002076:	f7fe fb95 	bl	80007a4 <__aeabi_ddiv>
 800207a:	4602      	mov	r2, r0
 800207c:	460b      	mov	r3, r1
 800207e:	4610      	mov	r0, r2
 8002080:	4619      	mov	r1, r3
 8002082:	f7fe fd27 	bl	8000ad4 <__aeabi_d2f>
 8002086:	4602      	mov	r2, r0
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	619a      	str	r2, [r3, #24]

		  if(qmc->compas>0)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002092:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800209a:	dd04      	ble.n	80020a6 <QMC_read+0x10e>
		  {
			  qmc->heading= qmc->compas;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	699a      	ldr	r2, [r3, #24]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	615a      	str	r2, [r3, #20]
 80020a4:	e00c      	b.n	80020c0 <QMC_read+0x128>
		  }
		  else
		  {
			  qmc->heading=360+qmc->compas;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	edd3 7a06 	vldr	s15, [r3, #24]
 80020ac:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80020dc <QMC_read+0x144>
 80020b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	edc3 7a05 	vstr	s15, [r3, #20]
 80020ba:	e001      	b.n	80020c0 <QMC_read+0x128>
		  }
	  }
	  else
	  {
		  return 1;
 80020bc:	2301      	movs	r3, #1
 80020be:	e000      	b.n	80020c2 <QMC_read+0x12a>
	  }
return 0;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	f3af 8000 	nop.w
 80020d0:	54442d18 	.word	0x54442d18
 80020d4:	400921fb 	.word	0x400921fb
 80020d8:	40668000 	.word	0x40668000
 80020dc:	43b40000 	.word	0x43b40000

080020e0 <DrawArrow>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void DrawArrow(int16_t angle, uint8_t lineLen, uint8_t thick, uint16_t color) {
 80020e0:	b5b0      	push	{r4, r5, r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af02      	add	r7, sp, #8
 80020e6:	4604      	mov	r4, r0
 80020e8:	4608      	mov	r0, r1
 80020ea:	4611      	mov	r1, r2
 80020ec:	461a      	mov	r2, r3
 80020ee:	4623      	mov	r3, r4
 80020f0:	80fb      	strh	r3, [r7, #6]
 80020f2:	4603      	mov	r3, r0
 80020f4:	717b      	strb	r3, [r7, #5]
 80020f6:	460b      	mov	r3, r1
 80020f8:	713b      	strb	r3, [r7, #4]
 80020fa:	4613      	mov	r3, r2
 80020fc:	807b      	strh	r3, [r7, #2]

	angle -= 90;
 80020fe:	88fb      	ldrh	r3, [r7, #6]
 8002100:	3b5a      	subs	r3, #90	; 0x5a
 8002102:	b29b      	uxth	r3, r3
 8002104:	80fb      	strh	r3, [r7, #6]
	float angleRad = (float) angle * PI / 180;
 8002106:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800210a:	ee07 3a90 	vmov	s15, r3
 800210e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002112:	ee17 0a90 	vmov	r0, s15
 8002116:	f7fe f9c3 	bl	80004a0 <__aeabi_f2d>
 800211a:	a33b      	add	r3, pc, #236	; (adr r3, 8002208 <DrawArrow+0x128>)
 800211c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002120:	f7fe fa16 	bl	8000550 <__aeabi_dmul>
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	4610      	mov	r0, r2
 800212a:	4619      	mov	r1, r3
 800212c:	f04f 0200 	mov.w	r2, #0
 8002130:	4b33      	ldr	r3, [pc, #204]	; (8002200 <DrawArrow+0x120>)
 8002132:	f7fe fb37 	bl	80007a4 <__aeabi_ddiv>
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	4610      	mov	r0, r2
 800213c:	4619      	mov	r1, r3
 800213e:	f7fe fcc9 	bl	8000ad4 <__aeabi_d2f>
 8002142:	4603      	mov	r3, r0
 8002144:	617b      	str	r3, [r7, #20]
	int x = cos(angleRad) * lineLen + xC;
 8002146:	6978      	ldr	r0, [r7, #20]
 8002148:	f7fe f9aa 	bl	80004a0 <__aeabi_f2d>
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	ec43 2b10 	vmov	d0, r2, r3
 8002154:	f003 f9b0 	bl	80054b8 <cos>
 8002158:	ec55 4b10 	vmov	r4, r5, d0
 800215c:	797b      	ldrb	r3, [r7, #5]
 800215e:	4618      	mov	r0, r3
 8002160:	f7fe f98c 	bl	800047c <__aeabi_i2d>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	4620      	mov	r0, r4
 800216a:	4629      	mov	r1, r5
 800216c:	f7fe f9f0 	bl	8000550 <__aeabi_dmul>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	4610      	mov	r0, r2
 8002176:	4619      	mov	r1, r3
 8002178:	f04f 0200 	mov.w	r2, #0
 800217c:	4b21      	ldr	r3, [pc, #132]	; (8002204 <DrawArrow+0x124>)
 800217e:	f7fe f831 	bl	80001e4 <__adddf3>
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	4610      	mov	r0, r2
 8002188:	4619      	mov	r1, r3
 800218a:	f7fe fc7b 	bl	8000a84 <__aeabi_d2iz>
 800218e:	4603      	mov	r3, r0
 8002190:	613b      	str	r3, [r7, #16]
	int y = sin(angleRad) * lineLen + yC;
 8002192:	6978      	ldr	r0, [r7, #20]
 8002194:	f7fe f984 	bl	80004a0 <__aeabi_f2d>
 8002198:	4602      	mov	r2, r0
 800219a:	460b      	mov	r3, r1
 800219c:	ec43 2b10 	vmov	d0, r2, r3
 80021a0:	f003 f9de 	bl	8005560 <sin>
 80021a4:	ec55 4b10 	vmov	r4, r5, d0
 80021a8:	797b      	ldrb	r3, [r7, #5]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe f966 	bl	800047c <__aeabi_i2d>
 80021b0:	4602      	mov	r2, r0
 80021b2:	460b      	mov	r3, r1
 80021b4:	4620      	mov	r0, r4
 80021b6:	4629      	mov	r1, r5
 80021b8:	f7fe f9ca 	bl	8000550 <__aeabi_dmul>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	4610      	mov	r0, r2
 80021c2:	4619      	mov	r1, r3
 80021c4:	f04f 0200 	mov.w	r2, #0
 80021c8:	4b0e      	ldr	r3, [pc, #56]	; (8002204 <DrawArrow+0x124>)
 80021ca:	f7fe f80b 	bl	80001e4 <__adddf3>
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	4610      	mov	r0, r2
 80021d4:	4619      	mov	r1, r3
 80021d6:	f7fe fc55 	bl	8000a84 <__aeabi_d2iz>
 80021da:	4603      	mov	r3, r0
 80021dc:	60fb      	str	r3, [r7, #12]

	GC9A01_DrawLineThick(xC, yC, x, y, color, thick);
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	b21a      	sxth	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	b219      	sxth	r1, r3
 80021e6:	793b      	ldrb	r3, [r7, #4]
 80021e8:	9301      	str	r3, [sp, #4]
 80021ea:	887b      	ldrh	r3, [r7, #2]
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	460b      	mov	r3, r1
 80021f0:	2178      	movs	r1, #120	; 0x78
 80021f2:	2078      	movs	r0, #120	; 0x78
 80021f4:	f7ff fc5b 	bl	8001aae <GC9A01_DrawLineThick>
}
 80021f8:	bf00      	nop
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002200:	40668000 	.word	0x40668000
 8002204:	405e0000 	.word	0x405e0000
 8002208:	53c8d4f1 	.word	0x53c8d4f1
 800220c:	400921fb 	.word	0x400921fb

08002210 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002216:	f000 fb3d 	bl	8002894 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800221a:	f000 f837 	bl	800228c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800221e:	f000 f92b 	bl	8002478 <MX_GPIO_Init>
  MX_DMA_Init();
 8002222:	f000 f901 	bl	8002428 <MX_DMA_Init>
  MX_I2C3_Init();
 8002226:	f000 f89b 	bl	8002360 <MX_I2C3_Init>
  MX_SPI2_Init();
 800222a:	f000 f8c7 	bl	80023bc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  QMC_init(&pusula_sensor, &hi2c3, 200);
 800222e:	22c8      	movs	r2, #200	; 0xc8
 8002230:	4913      	ldr	r1, [pc, #76]	; (8002280 <main+0x70>)
 8002232:	4814      	ldr	r0, [pc, #80]	; (8002284 <main+0x74>)
 8002234:	f7ff fe3f 	bl	8001eb6 <QMC_init>

  GC9A01_Init();
 8002238:	f7fe fe1a 	bl	8000e70 <GC9A01_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  DrawArrow(Compas_Value, 100, 5, GC9A01_RED);
 800223c:	4b12      	ldr	r3, [pc, #72]	; (8002288 <main+0x78>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	b218      	sxth	r0, r3
 8002242:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002246:	2205      	movs	r2, #5
 8002248:	2164      	movs	r1, #100	; 0x64
 800224a:	f7ff ff49 	bl	80020e0 <DrawArrow>
	  //HAL_Delay(100);
	  ClearWindow(0, 0, GC9A01_TFTWIDTH, GC9A01_TFTHEIGHT, GC9A01_BLACK);
 800224e:	2300      	movs	r3, #0
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	23f0      	movs	r3, #240	; 0xf0
 8002254:	22f0      	movs	r2, #240	; 0xf0
 8002256:	2100      	movs	r1, #0
 8002258:	2000      	movs	r0, #0
 800225a:	f7ff fd91 	bl	8001d80 <ClearWindow>
	  if(QMC_read(&pusula_sensor)==0)
 800225e:	4809      	ldr	r0, [pc, #36]	; (8002284 <main+0x74>)
 8002260:	f7ff fe9a 	bl	8001f98 <QMC_read>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1e8      	bne.n	800223c <main+0x2c>
	  {
		  Compas_Value=pusula_sensor.heading;
 800226a:	4b06      	ldr	r3, [pc, #24]	; (8002284 <main+0x74>)
 800226c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002270:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002274:	ee17 2a90 	vmov	r2, s15
 8002278:	4b03      	ldr	r3, [pc, #12]	; (8002288 <main+0x78>)
 800227a:	601a      	str	r2, [r3, #0]
  {
 800227c:	e7de      	b.n	800223c <main+0x2c>
 800227e:	bf00      	nop
 8002280:	20000030 	.word	0x20000030
 8002284:	2000019c 	.word	0x2000019c
 8002288:	200001b8 	.word	0x200001b8

0800228c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b094      	sub	sp, #80	; 0x50
 8002290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002292:	f107 0320 	add.w	r3, r7, #32
 8002296:	2230      	movs	r2, #48	; 0x30
 8002298:	2100      	movs	r1, #0
 800229a:	4618      	mov	r0, r3
 800229c:	f003 f8de 	bl	800545c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022a0:	f107 030c 	add.w	r3, r7, #12
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	60da      	str	r2, [r3, #12]
 80022ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022b0:	2300      	movs	r3, #0
 80022b2:	60bb      	str	r3, [r7, #8]
 80022b4:	4b28      	ldr	r3, [pc, #160]	; (8002358 <SystemClock_Config+0xcc>)
 80022b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b8:	4a27      	ldr	r2, [pc, #156]	; (8002358 <SystemClock_Config+0xcc>)
 80022ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022be:	6413      	str	r3, [r2, #64]	; 0x40
 80022c0:	4b25      	ldr	r3, [pc, #148]	; (8002358 <SystemClock_Config+0xcc>)
 80022c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80022cc:	2300      	movs	r3, #0
 80022ce:	607b      	str	r3, [r7, #4]
 80022d0:	4b22      	ldr	r3, [pc, #136]	; (800235c <SystemClock_Config+0xd0>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80022d8:	4a20      	ldr	r2, [pc, #128]	; (800235c <SystemClock_Config+0xd0>)
 80022da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022de:	6013      	str	r3, [r2, #0]
 80022e0:	4b1e      	ldr	r3, [pc, #120]	; (800235c <SystemClock_Config+0xd0>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80022e8:	607b      	str	r3, [r7, #4]
 80022ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022ec:	2301      	movs	r3, #1
 80022ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022f6:	2302      	movs	r3, #2
 80022f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002300:	2319      	movs	r3, #25
 8002302:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002304:	23a8      	movs	r3, #168	; 0xa8
 8002306:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002308:	2302      	movs	r3, #2
 800230a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800230c:	2304      	movs	r3, #4
 800230e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002310:	f107 0320 	add.w	r3, r7, #32
 8002314:	4618      	mov	r0, r3
 8002316:	f002 f997 	bl	8004648 <HAL_RCC_OscConfig>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002320:	f000 f8fc 	bl	800251c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002324:	230f      	movs	r3, #15
 8002326:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002328:	2302      	movs	r3, #2
 800232a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002330:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002334:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002336:	2300      	movs	r3, #0
 8002338:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800233a:	f107 030c 	add.w	r3, r7, #12
 800233e:	2102      	movs	r1, #2
 8002340:	4618      	mov	r0, r3
 8002342:	f002 fbf9 	bl	8004b38 <HAL_RCC_ClockConfig>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800234c:	f000 f8e6 	bl	800251c <Error_Handler>
  }
}
 8002350:	bf00      	nop
 8002352:	3750      	adds	r7, #80	; 0x50
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40023800 	.word	0x40023800
 800235c:	40007000 	.word	0x40007000

08002360 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002364:	4b12      	ldr	r3, [pc, #72]	; (80023b0 <MX_I2C3_Init+0x50>)
 8002366:	4a13      	ldr	r2, [pc, #76]	; (80023b4 <MX_I2C3_Init+0x54>)
 8002368:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800236a:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <MX_I2C3_Init+0x50>)
 800236c:	4a12      	ldr	r2, [pc, #72]	; (80023b8 <MX_I2C3_Init+0x58>)
 800236e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002370:	4b0f      	ldr	r3, [pc, #60]	; (80023b0 <MX_I2C3_Init+0x50>)
 8002372:	2200      	movs	r2, #0
 8002374:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002376:	4b0e      	ldr	r3, [pc, #56]	; (80023b0 <MX_I2C3_Init+0x50>)
 8002378:	2200      	movs	r2, #0
 800237a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800237c:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <MX_I2C3_Init+0x50>)
 800237e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002382:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002384:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <MX_I2C3_Init+0x50>)
 8002386:	2200      	movs	r2, #0
 8002388:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800238a:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <MX_I2C3_Init+0x50>)
 800238c:	2200      	movs	r2, #0
 800238e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002390:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <MX_I2C3_Init+0x50>)
 8002392:	2200      	movs	r2, #0
 8002394:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002396:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <MX_I2C3_Init+0x50>)
 8002398:	2200      	movs	r2, #0
 800239a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800239c:	4804      	ldr	r0, [pc, #16]	; (80023b0 <MX_I2C3_Init+0x50>)
 800239e:	f001 f92f 	bl	8003600 <HAL_I2C_Init>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80023a8:	f000 f8b8 	bl	800251c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80023ac:	bf00      	nop
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	20000030 	.word	0x20000030
 80023b4:	40005c00 	.word	0x40005c00
 80023b8:	00061a80 	.word	0x00061a80

080023bc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80023c0:	4b17      	ldr	r3, [pc, #92]	; (8002420 <MX_SPI2_Init+0x64>)
 80023c2:	4a18      	ldr	r2, [pc, #96]	; (8002424 <MX_SPI2_Init+0x68>)
 80023c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80023c6:	4b16      	ldr	r3, [pc, #88]	; (8002420 <MX_SPI2_Init+0x64>)
 80023c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80023ce:	4b14      	ldr	r3, [pc, #80]	; (8002420 <MX_SPI2_Init+0x64>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80023d4:	4b12      	ldr	r3, [pc, #72]	; (8002420 <MX_SPI2_Init+0x64>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023da:	4b11      	ldr	r3, [pc, #68]	; (8002420 <MX_SPI2_Init+0x64>)
 80023dc:	2200      	movs	r2, #0
 80023de:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023e0:	4b0f      	ldr	r3, [pc, #60]	; (8002420 <MX_SPI2_Init+0x64>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80023e6:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <MX_SPI2_Init+0x64>)
 80023e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023ec:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023ee:	4b0c      	ldr	r3, [pc, #48]	; (8002420 <MX_SPI2_Init+0x64>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023f4:	4b0a      	ldr	r3, [pc, #40]	; (8002420 <MX_SPI2_Init+0x64>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80023fa:	4b09      	ldr	r3, [pc, #36]	; (8002420 <MX_SPI2_Init+0x64>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002400:	4b07      	ldr	r3, [pc, #28]	; (8002420 <MX_SPI2_Init+0x64>)
 8002402:	2200      	movs	r2, #0
 8002404:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002406:	4b06      	ldr	r3, [pc, #24]	; (8002420 <MX_SPI2_Init+0x64>)
 8002408:	220a      	movs	r2, #10
 800240a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800240c:	4804      	ldr	r0, [pc, #16]	; (8002420 <MX_SPI2_Init+0x64>)
 800240e:	f002 fd5f 	bl	8004ed0 <HAL_SPI_Init>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002418:	f000 f880 	bl	800251c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800241c:	bf00      	nop
 800241e:	bd80      	pop	{r7, pc}
 8002420:	20000084 	.word	0x20000084
 8002424:	40003800 	.word	0x40003800

08002428 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	607b      	str	r3, [r7, #4]
 8002432:	4b10      	ldr	r3, [pc, #64]	; (8002474 <MX_DMA_Init+0x4c>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	4a0f      	ldr	r2, [pc, #60]	; (8002474 <MX_DMA_Init+0x4c>)
 8002438:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800243c:	6313      	str	r3, [r2, #48]	; 0x30
 800243e:	4b0d      	ldr	r3, [pc, #52]	; (8002474 <MX_DMA_Init+0x4c>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002446:	607b      	str	r3, [r7, #4]
 8002448:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800244a:	2200      	movs	r2, #0
 800244c:	2100      	movs	r1, #0
 800244e:	200e      	movs	r0, #14
 8002450:	f000 fb91 	bl	8002b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002454:	200e      	movs	r0, #14
 8002456:	f000 fbaa 	bl	8002bae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800245a:	2200      	movs	r2, #0
 800245c:	2100      	movs	r1, #0
 800245e:	200f      	movs	r0, #15
 8002460:	f000 fb89 	bl	8002b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002464:	200f      	movs	r0, #15
 8002466:	f000 fba2 	bl	8002bae <HAL_NVIC_EnableIRQ>

}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40023800 	.word	0x40023800

08002478 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b088      	sub	sp, #32
 800247c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800247e:	f107 030c 	add.w	r3, r7, #12
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	605a      	str	r2, [r3, #4]
 8002488:	609a      	str	r2, [r3, #8]
 800248a:	60da      	str	r2, [r3, #12]
 800248c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	60bb      	str	r3, [r7, #8]
 8002492:	4b20      	ldr	r3, [pc, #128]	; (8002514 <MX_GPIO_Init+0x9c>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	4a1f      	ldr	r2, [pc, #124]	; (8002514 <MX_GPIO_Init+0x9c>)
 8002498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800249c:	6313      	str	r3, [r2, #48]	; 0x30
 800249e:	4b1d      	ldr	r3, [pc, #116]	; (8002514 <MX_GPIO_Init+0x9c>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a6:	60bb      	str	r3, [r7, #8]
 80024a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	607b      	str	r3, [r7, #4]
 80024ae:	4b19      	ldr	r3, [pc, #100]	; (8002514 <MX_GPIO_Init+0x9c>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	4a18      	ldr	r2, [pc, #96]	; (8002514 <MX_GPIO_Init+0x9c>)
 80024b4:	f043 0302 	orr.w	r3, r3, #2
 80024b8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ba:	4b16      	ldr	r3, [pc, #88]	; (8002514 <MX_GPIO_Init+0x9c>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	607b      	str	r3, [r7, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	603b      	str	r3, [r7, #0]
 80024ca:	4b12      	ldr	r3, [pc, #72]	; (8002514 <MX_GPIO_Init+0x9c>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	4a11      	ldr	r2, [pc, #68]	; (8002514 <MX_GPIO_Init+0x9c>)
 80024d0:	f043 0301 	orr.w	r3, r3, #1
 80024d4:	6313      	str	r3, [r2, #48]	; 0x30
 80024d6:	4b0f      	ldr	r3, [pc, #60]	; (8002514 <MX_GPIO_Init+0x9c>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	603b      	str	r3, [r7, #0]
 80024e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RST_Pin|LCD_CS_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 80024e2:	2200      	movs	r2, #0
 80024e4:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 80024e8:	480b      	ldr	r0, [pc, #44]	; (8002518 <MX_GPIO_Init+0xa0>)
 80024ea:	f001 f86f 	bl	80035cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RST_Pin LCD_CS_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_CS_Pin|LCD_DC_Pin;
 80024ee:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 80024f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024f4:	2301      	movs	r3, #1
 80024f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fc:	2300      	movs	r3, #0
 80024fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002500:	f107 030c 	add.w	r3, r7, #12
 8002504:	4619      	mov	r1, r3
 8002506:	4804      	ldr	r0, [pc, #16]	; (8002518 <MX_GPIO_Init+0xa0>)
 8002508:	f000 fedc 	bl	80032c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800250c:	bf00      	nop
 800250e:	3720      	adds	r7, #32
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40023800 	.word	0x40023800
 8002518:	40020000 	.word	0x40020000

0800251c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002520:	b672      	cpsid	i
}
 8002522:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002524:	e7fe      	b.n	8002524 <Error_Handler+0x8>
	...

08002528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	607b      	str	r3, [r7, #4]
 8002532:	4b10      	ldr	r3, [pc, #64]	; (8002574 <HAL_MspInit+0x4c>)
 8002534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002536:	4a0f      	ldr	r2, [pc, #60]	; (8002574 <HAL_MspInit+0x4c>)
 8002538:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800253c:	6453      	str	r3, [r2, #68]	; 0x44
 800253e:	4b0d      	ldr	r3, [pc, #52]	; (8002574 <HAL_MspInit+0x4c>)
 8002540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002546:	607b      	str	r3, [r7, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	603b      	str	r3, [r7, #0]
 800254e:	4b09      	ldr	r3, [pc, #36]	; (8002574 <HAL_MspInit+0x4c>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	4a08      	ldr	r2, [pc, #32]	; (8002574 <HAL_MspInit+0x4c>)
 8002554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002558:	6413      	str	r3, [r2, #64]	; 0x40
 800255a:	4b06      	ldr	r3, [pc, #24]	; (8002574 <HAL_MspInit+0x4c>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002562:	603b      	str	r3, [r7, #0]
 8002564:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	40023800 	.word	0x40023800

08002578 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b08a      	sub	sp, #40	; 0x28
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002580:	f107 0314 	add.w	r3, r7, #20
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	605a      	str	r2, [r3, #4]
 800258a:	609a      	str	r2, [r3, #8]
 800258c:	60da      	str	r2, [r3, #12]
 800258e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a28      	ldr	r2, [pc, #160]	; (8002638 <HAL_I2C_MspInit+0xc0>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d14a      	bne.n	8002630 <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	613b      	str	r3, [r7, #16]
 800259e:	4b27      	ldr	r3, [pc, #156]	; (800263c <HAL_I2C_MspInit+0xc4>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	4a26      	ldr	r2, [pc, #152]	; (800263c <HAL_I2C_MspInit+0xc4>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	6313      	str	r3, [r2, #48]	; 0x30
 80025aa:	4b24      	ldr	r3, [pc, #144]	; (800263c <HAL_I2C_MspInit+0xc4>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	613b      	str	r3, [r7, #16]
 80025b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	4b20      	ldr	r3, [pc, #128]	; (800263c <HAL_I2C_MspInit+0xc4>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	4a1f      	ldr	r2, [pc, #124]	; (800263c <HAL_I2C_MspInit+0xc4>)
 80025c0:	f043 0302 	orr.w	r3, r3, #2
 80025c4:	6313      	str	r3, [r2, #48]	; 0x30
 80025c6:	4b1d      	ldr	r3, [pc, #116]	; (800263c <HAL_I2C_MspInit+0xc4>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80025d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025d8:	2312      	movs	r3, #18
 80025da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025dc:	2300      	movs	r3, #0
 80025de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e0:	2303      	movs	r3, #3
 80025e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80025e4:	2304      	movs	r3, #4
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e8:	f107 0314 	add.w	r3, r7, #20
 80025ec:	4619      	mov	r1, r3
 80025ee:	4814      	ldr	r0, [pc, #80]	; (8002640 <HAL_I2C_MspInit+0xc8>)
 80025f0:	f000 fe68 	bl	80032c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80025f4:	2310      	movs	r3, #16
 80025f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025f8:	2312      	movs	r3, #18
 80025fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002600:	2303      	movs	r3, #3
 8002602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8002604:	2309      	movs	r3, #9
 8002606:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002608:	f107 0314 	add.w	r3, r7, #20
 800260c:	4619      	mov	r1, r3
 800260e:	480d      	ldr	r0, [pc, #52]	; (8002644 <HAL_I2C_MspInit+0xcc>)
 8002610:	f000 fe58 	bl	80032c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002614:	2300      	movs	r3, #0
 8002616:	60bb      	str	r3, [r7, #8]
 8002618:	4b08      	ldr	r3, [pc, #32]	; (800263c <HAL_I2C_MspInit+0xc4>)
 800261a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261c:	4a07      	ldr	r2, [pc, #28]	; (800263c <HAL_I2C_MspInit+0xc4>)
 800261e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002622:	6413      	str	r3, [r2, #64]	; 0x40
 8002624:	4b05      	ldr	r3, [pc, #20]	; (800263c <HAL_I2C_MspInit+0xc4>)
 8002626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002628:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002630:	bf00      	nop
 8002632:	3728      	adds	r7, #40	; 0x28
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40005c00 	.word	0x40005c00
 800263c:	40023800 	.word	0x40023800
 8002640:	40020000 	.word	0x40020000
 8002644:	40020400 	.word	0x40020400

08002648 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08a      	sub	sp, #40	; 0x28
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002650:	f107 0314 	add.w	r3, r7, #20
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	605a      	str	r2, [r3, #4]
 800265a:	609a      	str	r2, [r3, #8]
 800265c:	60da      	str	r2, [r3, #12]
 800265e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a47      	ldr	r2, [pc, #284]	; (8002784 <HAL_SPI_MspInit+0x13c>)
 8002666:	4293      	cmp	r3, r2
 8002668:	f040 8087 	bne.w	800277a <HAL_SPI_MspInit+0x132>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800266c:	2300      	movs	r3, #0
 800266e:	613b      	str	r3, [r7, #16]
 8002670:	4b45      	ldr	r3, [pc, #276]	; (8002788 <HAL_SPI_MspInit+0x140>)
 8002672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002674:	4a44      	ldr	r2, [pc, #272]	; (8002788 <HAL_SPI_MspInit+0x140>)
 8002676:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800267a:	6413      	str	r3, [r2, #64]	; 0x40
 800267c:	4b42      	ldr	r3, [pc, #264]	; (8002788 <HAL_SPI_MspInit+0x140>)
 800267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002680:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002688:	2300      	movs	r3, #0
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	4b3e      	ldr	r3, [pc, #248]	; (8002788 <HAL_SPI_MspInit+0x140>)
 800268e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002690:	4a3d      	ldr	r2, [pc, #244]	; (8002788 <HAL_SPI_MspInit+0x140>)
 8002692:	f043 0302 	orr.w	r3, r3, #2
 8002696:	6313      	str	r3, [r2, #48]	; 0x30
 8002698:	4b3b      	ldr	r3, [pc, #236]	; (8002788 <HAL_SPI_MspInit+0x140>)
 800269a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80026a4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80026a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026aa:	2302      	movs	r3, #2
 80026ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b2:	2303      	movs	r3, #3
 80026b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026b6:	2305      	movs	r3, #5
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ba:	f107 0314 	add.w	r3, r7, #20
 80026be:	4619      	mov	r1, r3
 80026c0:	4832      	ldr	r0, [pc, #200]	; (800278c <HAL_SPI_MspInit+0x144>)
 80026c2:	f000 fdff 	bl	80032c4 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80026c6:	4b32      	ldr	r3, [pc, #200]	; (8002790 <HAL_SPI_MspInit+0x148>)
 80026c8:	4a32      	ldr	r2, [pc, #200]	; (8002794 <HAL_SPI_MspInit+0x14c>)
 80026ca:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80026cc:	4b30      	ldr	r3, [pc, #192]	; (8002790 <HAL_SPI_MspInit+0x148>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026d2:	4b2f      	ldr	r3, [pc, #188]	; (8002790 <HAL_SPI_MspInit+0x148>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026d8:	4b2d      	ldr	r3, [pc, #180]	; (8002790 <HAL_SPI_MspInit+0x148>)
 80026da:	2200      	movs	r2, #0
 80026dc:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026de:	4b2c      	ldr	r3, [pc, #176]	; (8002790 <HAL_SPI_MspInit+0x148>)
 80026e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026e4:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026e6:	4b2a      	ldr	r3, [pc, #168]	; (8002790 <HAL_SPI_MspInit+0x148>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026ec:	4b28      	ldr	r3, [pc, #160]	; (8002790 <HAL_SPI_MspInit+0x148>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80026f2:	4b27      	ldr	r3, [pc, #156]	; (8002790 <HAL_SPI_MspInit+0x148>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026f8:	4b25      	ldr	r3, [pc, #148]	; (8002790 <HAL_SPI_MspInit+0x148>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026fe:	4b24      	ldr	r3, [pc, #144]	; (8002790 <HAL_SPI_MspInit+0x148>)
 8002700:	2200      	movs	r2, #0
 8002702:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002704:	4822      	ldr	r0, [pc, #136]	; (8002790 <HAL_SPI_MspInit+0x148>)
 8002706:	f000 fa6d 	bl	8002be4 <HAL_DMA_Init>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8002710:	f7ff ff04 	bl	800251c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a1e      	ldr	r2, [pc, #120]	; (8002790 <HAL_SPI_MspInit+0x148>)
 8002718:	64da      	str	r2, [r3, #76]	; 0x4c
 800271a:	4a1d      	ldr	r2, [pc, #116]	; (8002790 <HAL_SPI_MspInit+0x148>)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8002720:	4b1d      	ldr	r3, [pc, #116]	; (8002798 <HAL_SPI_MspInit+0x150>)
 8002722:	4a1e      	ldr	r2, [pc, #120]	; (800279c <HAL_SPI_MspInit+0x154>)
 8002724:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8002726:	4b1c      	ldr	r3, [pc, #112]	; (8002798 <HAL_SPI_MspInit+0x150>)
 8002728:	2200      	movs	r2, #0
 800272a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800272c:	4b1a      	ldr	r3, [pc, #104]	; (8002798 <HAL_SPI_MspInit+0x150>)
 800272e:	2240      	movs	r2, #64	; 0x40
 8002730:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002732:	4b19      	ldr	r3, [pc, #100]	; (8002798 <HAL_SPI_MspInit+0x150>)
 8002734:	2200      	movs	r2, #0
 8002736:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002738:	4b17      	ldr	r3, [pc, #92]	; (8002798 <HAL_SPI_MspInit+0x150>)
 800273a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800273e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002740:	4b15      	ldr	r3, [pc, #84]	; (8002798 <HAL_SPI_MspInit+0x150>)
 8002742:	2200      	movs	r2, #0
 8002744:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002746:	4b14      	ldr	r3, [pc, #80]	; (8002798 <HAL_SPI_MspInit+0x150>)
 8002748:	2200      	movs	r2, #0
 800274a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800274c:	4b12      	ldr	r3, [pc, #72]	; (8002798 <HAL_SPI_MspInit+0x150>)
 800274e:	2200      	movs	r2, #0
 8002750:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002752:	4b11      	ldr	r3, [pc, #68]	; (8002798 <HAL_SPI_MspInit+0x150>)
 8002754:	2200      	movs	r2, #0
 8002756:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002758:	4b0f      	ldr	r3, [pc, #60]	; (8002798 <HAL_SPI_MspInit+0x150>)
 800275a:	2200      	movs	r2, #0
 800275c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800275e:	480e      	ldr	r0, [pc, #56]	; (8002798 <HAL_SPI_MspInit+0x150>)
 8002760:	f000 fa40 	bl	8002be4 <HAL_DMA_Init>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <HAL_SPI_MspInit+0x126>
    {
      Error_Handler();
 800276a:	f7ff fed7 	bl	800251c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a09      	ldr	r2, [pc, #36]	; (8002798 <HAL_SPI_MspInit+0x150>)
 8002772:	649a      	str	r2, [r3, #72]	; 0x48
 8002774:	4a08      	ldr	r2, [pc, #32]	; (8002798 <HAL_SPI_MspInit+0x150>)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800277a:	bf00      	nop
 800277c:	3728      	adds	r7, #40	; 0x28
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40003800 	.word	0x40003800
 8002788:	40023800 	.word	0x40023800
 800278c:	40020400 	.word	0x40020400
 8002790:	200000dc 	.word	0x200000dc
 8002794:	40026058 	.word	0x40026058
 8002798:	2000013c 	.word	0x2000013c
 800279c:	40026070 	.word	0x40026070

080027a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027a4:	e7fe      	b.n	80027a4 <NMI_Handler+0x4>

080027a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027a6:	b480      	push	{r7}
 80027a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027aa:	e7fe      	b.n	80027aa <HardFault_Handler+0x4>

080027ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027b0:	e7fe      	b.n	80027b0 <MemManage_Handler+0x4>

080027b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027b2:	b480      	push	{r7}
 80027b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027b6:	e7fe      	b.n	80027b6 <BusFault_Handler+0x4>

080027b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027bc:	e7fe      	b.n	80027bc <UsageFault_Handler+0x4>

080027be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027be:	b480      	push	{r7}
 80027c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027d0:	bf00      	nop
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027da:	b480      	push	{r7}
 80027dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027de:	bf00      	nop
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027ec:	f000 f8a4 	bl	8002938 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027f0:	bf00      	nop
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80027f8:	4802      	ldr	r0, [pc, #8]	; (8002804 <DMA1_Stream3_IRQHandler+0x10>)
 80027fa:	f000 faf9 	bl	8002df0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80027fe:	bf00      	nop
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	200000dc 	.word	0x200000dc

08002808 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800280c:	4802      	ldr	r0, [pc, #8]	; (8002818 <DMA1_Stream4_IRQHandler+0x10>)
 800280e:	f000 faef 	bl	8002df0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002812:	bf00      	nop
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	2000013c 	.word	0x2000013c

0800281c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002820:	4b06      	ldr	r3, [pc, #24]	; (800283c <SystemInit+0x20>)
 8002822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002826:	4a05      	ldr	r2, [pc, #20]	; (800283c <SystemInit+0x20>)
 8002828:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800282c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002830:	bf00      	nop
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002840:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002878 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002844:	f7ff ffea 	bl	800281c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002848:	480c      	ldr	r0, [pc, #48]	; (800287c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800284a:	490d      	ldr	r1, [pc, #52]	; (8002880 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800284c:	4a0d      	ldr	r2, [pc, #52]	; (8002884 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800284e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002850:	e002      	b.n	8002858 <LoopCopyDataInit>

08002852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002856:	3304      	adds	r3, #4

08002858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800285a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800285c:	d3f9      	bcc.n	8002852 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800285e:	4a0a      	ldr	r2, [pc, #40]	; (8002888 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002860:	4c0a      	ldr	r4, [pc, #40]	; (800288c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002864:	e001      	b.n	800286a <LoopFillZerobss>

08002866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002868:	3204      	adds	r2, #4

0800286a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800286a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800286c:	d3fb      	bcc.n	8002866 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800286e:	f002 fdfd 	bl	800546c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002872:	f7ff fccd 	bl	8002210 <main>
  bx  lr    
 8002876:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002878:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800287c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002880:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002884:	08006b38 	.word	0x08006b38
  ldr r2, =_sbss
 8002888:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800288c:	200001c0 	.word	0x200001c0

08002890 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002890:	e7fe      	b.n	8002890 <ADC_IRQHandler>
	...

08002894 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002898:	4b0e      	ldr	r3, [pc, #56]	; (80028d4 <HAL_Init+0x40>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a0d      	ldr	r2, [pc, #52]	; (80028d4 <HAL_Init+0x40>)
 800289e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028a4:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <HAL_Init+0x40>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a0a      	ldr	r2, [pc, #40]	; (80028d4 <HAL_Init+0x40>)
 80028aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028b0:	4b08      	ldr	r3, [pc, #32]	; (80028d4 <HAL_Init+0x40>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a07      	ldr	r2, [pc, #28]	; (80028d4 <HAL_Init+0x40>)
 80028b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028bc:	2003      	movs	r0, #3
 80028be:	f000 f94f 	bl	8002b60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028c2:	200f      	movs	r0, #15
 80028c4:	f000 f808 	bl	80028d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028c8:	f7ff fe2e 	bl	8002528 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40023c00 	.word	0x40023c00

080028d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028e0:	4b12      	ldr	r3, [pc, #72]	; (800292c <HAL_InitTick+0x54>)
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	4b12      	ldr	r3, [pc, #72]	; (8002930 <HAL_InitTick+0x58>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	4619      	mov	r1, r3
 80028ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80028f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 f967 	bl	8002bca <HAL_SYSTICK_Config>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e00e      	b.n	8002924 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b0f      	cmp	r3, #15
 800290a:	d80a      	bhi.n	8002922 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800290c:	2200      	movs	r2, #0
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	f04f 30ff 	mov.w	r0, #4294967295
 8002914:	f000 f92f 	bl	8002b76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002918:	4a06      	ldr	r2, [pc, #24]	; (8002934 <HAL_InitTick+0x5c>)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800291e:	2300      	movs	r3, #0
 8002920:	e000      	b.n	8002924 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
}
 8002924:	4618      	mov	r0, r3
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	20000000 	.word	0x20000000
 8002930:	20000008 	.word	0x20000008
 8002934:	20000004 	.word	0x20000004

08002938 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800293c:	4b06      	ldr	r3, [pc, #24]	; (8002958 <HAL_IncTick+0x20>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	461a      	mov	r2, r3
 8002942:	4b06      	ldr	r3, [pc, #24]	; (800295c <HAL_IncTick+0x24>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4413      	add	r3, r2
 8002948:	4a04      	ldr	r2, [pc, #16]	; (800295c <HAL_IncTick+0x24>)
 800294a:	6013      	str	r3, [r2, #0]
}
 800294c:	bf00      	nop
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	20000008 	.word	0x20000008
 800295c:	200001bc 	.word	0x200001bc

08002960 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  return uwTick;
 8002964:	4b03      	ldr	r3, [pc, #12]	; (8002974 <HAL_GetTick+0x14>)
 8002966:	681b      	ldr	r3, [r3, #0]
}
 8002968:	4618      	mov	r0, r3
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	200001bc 	.word	0x200001bc

08002978 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002980:	f7ff ffee 	bl	8002960 <HAL_GetTick>
 8002984:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002990:	d005      	beq.n	800299e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002992:	4b0a      	ldr	r3, [pc, #40]	; (80029bc <HAL_Delay+0x44>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	461a      	mov	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4413      	add	r3, r2
 800299c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800299e:	bf00      	nop
 80029a0:	f7ff ffde 	bl	8002960 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d8f7      	bhi.n	80029a0 <HAL_Delay+0x28>
  {
  }
}
 80029b0:	bf00      	nop
 80029b2:	bf00      	nop
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	20000008 	.word	0x20000008

080029c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029d0:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <__NVIC_SetPriorityGrouping+0x44>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029dc:	4013      	ands	r3, r2
 80029de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029f2:	4a04      	ldr	r2, [pc, #16]	; (8002a04 <__NVIC_SetPriorityGrouping+0x44>)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	60d3      	str	r3, [r2, #12]
}
 80029f8:	bf00      	nop
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	e000ed00 	.word	0xe000ed00

08002a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a0c:	4b04      	ldr	r3, [pc, #16]	; (8002a20 <__NVIC_GetPriorityGrouping+0x18>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	0a1b      	lsrs	r3, r3, #8
 8002a12:	f003 0307 	and.w	r3, r3, #7
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	e000ed00 	.word	0xe000ed00

08002a24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	db0b      	blt.n	8002a4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a36:	79fb      	ldrb	r3, [r7, #7]
 8002a38:	f003 021f 	and.w	r2, r3, #31
 8002a3c:	4907      	ldr	r1, [pc, #28]	; (8002a5c <__NVIC_EnableIRQ+0x38>)
 8002a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a42:	095b      	lsrs	r3, r3, #5
 8002a44:	2001      	movs	r0, #1
 8002a46:	fa00 f202 	lsl.w	r2, r0, r2
 8002a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	e000e100 	.word	0xe000e100

08002a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	6039      	str	r1, [r7, #0]
 8002a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	db0a      	blt.n	8002a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	490c      	ldr	r1, [pc, #48]	; (8002aac <__NVIC_SetPriority+0x4c>)
 8002a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7e:	0112      	lsls	r2, r2, #4
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	440b      	add	r3, r1
 8002a84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a88:	e00a      	b.n	8002aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	4908      	ldr	r1, [pc, #32]	; (8002ab0 <__NVIC_SetPriority+0x50>)
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	3b04      	subs	r3, #4
 8002a98:	0112      	lsls	r2, r2, #4
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	761a      	strb	r2, [r3, #24]
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	e000e100 	.word	0xe000e100
 8002ab0:	e000ed00 	.word	0xe000ed00

08002ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b089      	sub	sp, #36	; 0x24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f1c3 0307 	rsb	r3, r3, #7
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	bf28      	it	cs
 8002ad2:	2304      	movcs	r3, #4
 8002ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	3304      	adds	r3, #4
 8002ada:	2b06      	cmp	r3, #6
 8002adc:	d902      	bls.n	8002ae4 <NVIC_EncodePriority+0x30>
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	3b03      	subs	r3, #3
 8002ae2:	e000      	b.n	8002ae6 <NVIC_EncodePriority+0x32>
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	43da      	mvns	r2, r3
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	401a      	ands	r2, r3
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002afc:	f04f 31ff 	mov.w	r1, #4294967295
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	fa01 f303 	lsl.w	r3, r1, r3
 8002b06:	43d9      	mvns	r1, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b0c:	4313      	orrs	r3, r2
         );
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3724      	adds	r7, #36	; 0x24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
	...

08002b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	3b01      	subs	r3, #1
 8002b28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b2c:	d301      	bcc.n	8002b32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e00f      	b.n	8002b52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b32:	4a0a      	ldr	r2, [pc, #40]	; (8002b5c <SysTick_Config+0x40>)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3b01      	subs	r3, #1
 8002b38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b3a:	210f      	movs	r1, #15
 8002b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b40:	f7ff ff8e 	bl	8002a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b44:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <SysTick_Config+0x40>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b4a:	4b04      	ldr	r3, [pc, #16]	; (8002b5c <SysTick_Config+0x40>)
 8002b4c:	2207      	movs	r2, #7
 8002b4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	e000e010 	.word	0xe000e010

08002b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f7ff ff29 	bl	80029c0 <__NVIC_SetPriorityGrouping>
}
 8002b6e:	bf00      	nop
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b086      	sub	sp, #24
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	60b9      	str	r1, [r7, #8]
 8002b80:	607a      	str	r2, [r7, #4]
 8002b82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b88:	f7ff ff3e 	bl	8002a08 <__NVIC_GetPriorityGrouping>
 8002b8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	68b9      	ldr	r1, [r7, #8]
 8002b92:	6978      	ldr	r0, [r7, #20]
 8002b94:	f7ff ff8e 	bl	8002ab4 <NVIC_EncodePriority>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b9e:	4611      	mov	r1, r2
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff ff5d 	bl	8002a60 <__NVIC_SetPriority>
}
 8002ba6:	bf00      	nop
 8002ba8:	3718      	adds	r7, #24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b082      	sub	sp, #8
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff ff31 	bl	8002a24 <__NVIC_EnableIRQ>
}
 8002bc2:	bf00      	nop
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b082      	sub	sp, #8
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7ff ffa2 	bl	8002b1c <SysTick_Config>
 8002bd8:	4603      	mov	r3, r0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
	...

08002be4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002bf0:	f7ff feb6 	bl	8002960 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d101      	bne.n	8002c00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e099      	b.n	8002d34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2202      	movs	r2, #2
 8002c04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 0201 	bic.w	r2, r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c20:	e00f      	b.n	8002c42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c22:	f7ff fe9d 	bl	8002960 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b05      	cmp	r3, #5
 8002c2e:	d908      	bls.n	8002c42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2220      	movs	r2, #32
 8002c34:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2203      	movs	r2, #3
 8002c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e078      	b.n	8002d34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1e8      	bne.n	8002c22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	4b38      	ldr	r3, [pc, #224]	; (8002d3c <HAL_DMA_Init+0x158>)
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	2b04      	cmp	r3, #4
 8002c9a:	d107      	bne.n	8002cac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	f023 0307 	bic.w	r3, r3, #7
 8002cc2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d117      	bne.n	8002d06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00e      	beq.n	8002d06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 fa6f 	bl	80031cc <DMA_CheckFifoParam>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d008      	beq.n	8002d06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2240      	movs	r2, #64	; 0x40
 8002cf8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002d02:	2301      	movs	r3, #1
 8002d04:	e016      	b.n	8002d34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 fa26 	bl	8003160 <DMA_CalcBaseAndBitshift>
 8002d14:	4603      	mov	r3, r0
 8002d16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d1c:	223f      	movs	r2, #63	; 0x3f
 8002d1e:	409a      	lsls	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3718      	adds	r7, #24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	f010803f 	.word	0xf010803f

08002d40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
 8002d4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d56:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d101      	bne.n	8002d66 <HAL_DMA_Start_IT+0x26>
 8002d62:	2302      	movs	r3, #2
 8002d64:	e040      	b.n	8002de8 <HAL_DMA_Start_IT+0xa8>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d12f      	bne.n	8002dda <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	68b9      	ldr	r1, [r7, #8]
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 f9b8 	bl	8003104 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d98:	223f      	movs	r2, #63	; 0x3f
 8002d9a:	409a      	lsls	r2, r3
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f042 0216 	orr.w	r2, r2, #22
 8002dae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d007      	beq.n	8002dc8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f042 0208 	orr.w	r2, r2, #8
 8002dc6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f042 0201 	orr.w	r2, r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	e005      	b.n	8002de6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002de2:	2302      	movs	r3, #2
 8002de4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002dfc:	4b8e      	ldr	r3, [pc, #568]	; (8003038 <HAL_DMA_IRQHandler+0x248>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a8e      	ldr	r2, [pc, #568]	; (800303c <HAL_DMA_IRQHandler+0x24c>)
 8002e02:	fba2 2303 	umull	r2, r3, r2, r3
 8002e06:	0a9b      	lsrs	r3, r3, #10
 8002e08:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1a:	2208      	movs	r2, #8
 8002e1c:	409a      	lsls	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	4013      	ands	r3, r2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d01a      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d013      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 0204 	bic.w	r2, r2, #4
 8002e42:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e48:	2208      	movs	r2, #8
 8002e4a:	409a      	lsls	r2, r3
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e54:	f043 0201 	orr.w	r2, r3, #1
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e60:	2201      	movs	r2, #1
 8002e62:	409a      	lsls	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	4013      	ands	r3, r2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d012      	beq.n	8002e92 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00b      	beq.n	8002e92 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e7e:	2201      	movs	r2, #1
 8002e80:	409a      	lsls	r2, r3
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8a:	f043 0202 	orr.w	r2, r3, #2
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e96:	2204      	movs	r2, #4
 8002e98:	409a      	lsls	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d012      	beq.n	8002ec8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00b      	beq.n	8002ec8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb4:	2204      	movs	r2, #4
 8002eb6:	409a      	lsls	r2, r3
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec0:	f043 0204 	orr.w	r2, r3, #4
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ecc:	2210      	movs	r2, #16
 8002ece:	409a      	lsls	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d043      	beq.n	8002f60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d03c      	beq.n	8002f60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eea:	2210      	movs	r2, #16
 8002eec:	409a      	lsls	r2, r3
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d018      	beq.n	8002f32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d108      	bne.n	8002f20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d024      	beq.n	8002f60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	4798      	blx	r3
 8002f1e:	e01f      	b.n	8002f60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d01b      	beq.n	8002f60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	4798      	blx	r3
 8002f30:	e016      	b.n	8002f60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d107      	bne.n	8002f50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0208 	bic.w	r2, r2, #8
 8002f4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d003      	beq.n	8002f60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f64:	2220      	movs	r2, #32
 8002f66:	409a      	lsls	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f000 808f 	beq.w	8003090 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0310 	and.w	r3, r3, #16
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 8087 	beq.w	8003090 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f86:	2220      	movs	r2, #32
 8002f88:	409a      	lsls	r2, r3
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b05      	cmp	r3, #5
 8002f98:	d136      	bne.n	8003008 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 0216 	bic.w	r2, r2, #22
 8002fa8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	695a      	ldr	r2, [r3, #20]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fb8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d103      	bne.n	8002fca <HAL_DMA_IRQHandler+0x1da>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d007      	beq.n	8002fda <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 0208 	bic.w	r2, r2, #8
 8002fd8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fde:	223f      	movs	r2, #63	; 0x3f
 8002fe0:	409a      	lsls	r2, r3
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d07e      	beq.n	80030fc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	4798      	blx	r3
        }
        return;
 8003006:	e079      	b.n	80030fc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d01d      	beq.n	8003052 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10d      	bne.n	8003040 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003028:	2b00      	cmp	r3, #0
 800302a:	d031      	beq.n	8003090 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	4798      	blx	r3
 8003034:	e02c      	b.n	8003090 <HAL_DMA_IRQHandler+0x2a0>
 8003036:	bf00      	nop
 8003038:	20000000 	.word	0x20000000
 800303c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003044:	2b00      	cmp	r3, #0
 8003046:	d023      	beq.n	8003090 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	4798      	blx	r3
 8003050:	e01e      	b.n	8003090 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10f      	bne.n	8003080 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f022 0210 	bic.w	r2, r2, #16
 800306e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003084:	2b00      	cmp	r3, #0
 8003086:	d003      	beq.n	8003090 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003094:	2b00      	cmp	r3, #0
 8003096:	d032      	beq.n	80030fe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d022      	beq.n	80030ea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2205      	movs	r2, #5
 80030a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 0201 	bic.w	r2, r2, #1
 80030ba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	3301      	adds	r3, #1
 80030c0:	60bb      	str	r3, [r7, #8]
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d307      	bcc.n	80030d8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1f2      	bne.n	80030bc <HAL_DMA_IRQHandler+0x2cc>
 80030d6:	e000      	b.n	80030da <HAL_DMA_IRQHandler+0x2ea>
          break;
 80030d8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d005      	beq.n	80030fe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	4798      	blx	r3
 80030fa:	e000      	b.n	80030fe <HAL_DMA_IRQHandler+0x30e>
        return;
 80030fc:	bf00      	nop
    }
  }
}
 80030fe:	3718      	adds	r7, #24
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
 8003110:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003120:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	2b40      	cmp	r3, #64	; 0x40
 8003130:	d108      	bne.n	8003144 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003142:	e007      	b.n	8003154 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68ba      	ldr	r2, [r7, #8]
 800314a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	60da      	str	r2, [r3, #12]
}
 8003154:	bf00      	nop
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	b2db      	uxtb	r3, r3
 800316e:	3b10      	subs	r3, #16
 8003170:	4a14      	ldr	r2, [pc, #80]	; (80031c4 <DMA_CalcBaseAndBitshift+0x64>)
 8003172:	fba2 2303 	umull	r2, r3, r2, r3
 8003176:	091b      	lsrs	r3, r3, #4
 8003178:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800317a:	4a13      	ldr	r2, [pc, #76]	; (80031c8 <DMA_CalcBaseAndBitshift+0x68>)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4413      	add	r3, r2
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	461a      	mov	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2b03      	cmp	r3, #3
 800318c:	d909      	bls.n	80031a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003196:	f023 0303 	bic.w	r3, r3, #3
 800319a:	1d1a      	adds	r2, r3, #4
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	659a      	str	r2, [r3, #88]	; 0x58
 80031a0:	e007      	b.n	80031b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031aa:	f023 0303 	bic.w	r3, r3, #3
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	aaaaaaab 	.word	0xaaaaaaab
 80031c8:	08006910 	.word	0x08006910

080031cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031d4:	2300      	movs	r3, #0
 80031d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d11f      	bne.n	8003226 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	2b03      	cmp	r3, #3
 80031ea:	d856      	bhi.n	800329a <DMA_CheckFifoParam+0xce>
 80031ec:	a201      	add	r2, pc, #4	; (adr r2, 80031f4 <DMA_CheckFifoParam+0x28>)
 80031ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f2:	bf00      	nop
 80031f4:	08003205 	.word	0x08003205
 80031f8:	08003217 	.word	0x08003217
 80031fc:	08003205 	.word	0x08003205
 8003200:	0800329b 	.word	0x0800329b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003208:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d046      	beq.n	800329e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003214:	e043      	b.n	800329e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800321e:	d140      	bne.n	80032a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003224:	e03d      	b.n	80032a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800322e:	d121      	bne.n	8003274 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	2b03      	cmp	r3, #3
 8003234:	d837      	bhi.n	80032a6 <DMA_CheckFifoParam+0xda>
 8003236:	a201      	add	r2, pc, #4	; (adr r2, 800323c <DMA_CheckFifoParam+0x70>)
 8003238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323c:	0800324d 	.word	0x0800324d
 8003240:	08003253 	.word	0x08003253
 8003244:	0800324d 	.word	0x0800324d
 8003248:	08003265 	.word	0x08003265
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	73fb      	strb	r3, [r7, #15]
      break;
 8003250:	e030      	b.n	80032b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003256:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d025      	beq.n	80032aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003262:	e022      	b.n	80032aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003268:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800326c:	d11f      	bne.n	80032ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003272:	e01c      	b.n	80032ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2b02      	cmp	r3, #2
 8003278:	d903      	bls.n	8003282 <DMA_CheckFifoParam+0xb6>
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	2b03      	cmp	r3, #3
 800327e:	d003      	beq.n	8003288 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003280:	e018      	b.n	80032b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	73fb      	strb	r3, [r7, #15]
      break;
 8003286:	e015      	b.n	80032b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00e      	beq.n	80032b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	73fb      	strb	r3, [r7, #15]
      break;
 8003298:	e00b      	b.n	80032b2 <DMA_CheckFifoParam+0xe6>
      break;
 800329a:	bf00      	nop
 800329c:	e00a      	b.n	80032b4 <DMA_CheckFifoParam+0xe8>
      break;
 800329e:	bf00      	nop
 80032a0:	e008      	b.n	80032b4 <DMA_CheckFifoParam+0xe8>
      break;
 80032a2:	bf00      	nop
 80032a4:	e006      	b.n	80032b4 <DMA_CheckFifoParam+0xe8>
      break;
 80032a6:	bf00      	nop
 80032a8:	e004      	b.n	80032b4 <DMA_CheckFifoParam+0xe8>
      break;
 80032aa:	bf00      	nop
 80032ac:	e002      	b.n	80032b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80032ae:	bf00      	nop
 80032b0:	e000      	b.n	80032b4 <DMA_CheckFifoParam+0xe8>
      break;
 80032b2:	bf00      	nop
    }
  } 
  
  return status; 
 80032b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3714      	adds	r7, #20
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop

080032c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b089      	sub	sp, #36	; 0x24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032ce:	2300      	movs	r3, #0
 80032d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032d2:	2300      	movs	r3, #0
 80032d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032d6:	2300      	movs	r3, #0
 80032d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032da:	2300      	movs	r3, #0
 80032dc:	61fb      	str	r3, [r7, #28]
 80032de:	e159      	b.n	8003594 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032e0:	2201      	movs	r2, #1
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	4013      	ands	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	f040 8148 	bne.w	800358e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	2b01      	cmp	r3, #1
 8003308:	d005      	beq.n	8003316 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003312:	2b02      	cmp	r3, #2
 8003314:	d130      	bne.n	8003378 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	2203      	movs	r2, #3
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	43db      	mvns	r3, r3
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	4013      	ands	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	68da      	ldr	r2, [r3, #12]
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4313      	orrs	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800334c:	2201      	movs	r2, #1
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	43db      	mvns	r3, r3
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	4013      	ands	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	091b      	lsrs	r3, r3, #4
 8003362:	f003 0201 	and.w	r2, r3, #1
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	4313      	orrs	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f003 0303 	and.w	r3, r3, #3
 8003380:	2b03      	cmp	r3, #3
 8003382:	d017      	beq.n	80033b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	2203      	movs	r2, #3
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	43db      	mvns	r3, r3
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	4013      	ands	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f003 0303 	and.w	r3, r3, #3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d123      	bne.n	8003408 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	08da      	lsrs	r2, r3, #3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3208      	adds	r2, #8
 80033c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	220f      	movs	r2, #15
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	43db      	mvns	r3, r3
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	4013      	ands	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	691a      	ldr	r2, [r3, #16]
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	08da      	lsrs	r2, r3, #3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3208      	adds	r2, #8
 8003402:	69b9      	ldr	r1, [r7, #24]
 8003404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	2203      	movs	r2, #3
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	43db      	mvns	r3, r3
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	4013      	ands	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f003 0203 	and.w	r2, r3, #3
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4313      	orrs	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 80a2 	beq.w	800358e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800344a:	2300      	movs	r3, #0
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	4b57      	ldr	r3, [pc, #348]	; (80035ac <HAL_GPIO_Init+0x2e8>)
 8003450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003452:	4a56      	ldr	r2, [pc, #344]	; (80035ac <HAL_GPIO_Init+0x2e8>)
 8003454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003458:	6453      	str	r3, [r2, #68]	; 0x44
 800345a:	4b54      	ldr	r3, [pc, #336]	; (80035ac <HAL_GPIO_Init+0x2e8>)
 800345c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003466:	4a52      	ldr	r2, [pc, #328]	; (80035b0 <HAL_GPIO_Init+0x2ec>)
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	089b      	lsrs	r3, r3, #2
 800346c:	3302      	adds	r3, #2
 800346e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003472:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	220f      	movs	r2, #15
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	43db      	mvns	r3, r3
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	4013      	ands	r3, r2
 8003488:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a49      	ldr	r2, [pc, #292]	; (80035b4 <HAL_GPIO_Init+0x2f0>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d019      	beq.n	80034c6 <HAL_GPIO_Init+0x202>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a48      	ldr	r2, [pc, #288]	; (80035b8 <HAL_GPIO_Init+0x2f4>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d013      	beq.n	80034c2 <HAL_GPIO_Init+0x1fe>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a47      	ldr	r2, [pc, #284]	; (80035bc <HAL_GPIO_Init+0x2f8>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d00d      	beq.n	80034be <HAL_GPIO_Init+0x1fa>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a46      	ldr	r2, [pc, #280]	; (80035c0 <HAL_GPIO_Init+0x2fc>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d007      	beq.n	80034ba <HAL_GPIO_Init+0x1f6>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a45      	ldr	r2, [pc, #276]	; (80035c4 <HAL_GPIO_Init+0x300>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d101      	bne.n	80034b6 <HAL_GPIO_Init+0x1f2>
 80034b2:	2304      	movs	r3, #4
 80034b4:	e008      	b.n	80034c8 <HAL_GPIO_Init+0x204>
 80034b6:	2307      	movs	r3, #7
 80034b8:	e006      	b.n	80034c8 <HAL_GPIO_Init+0x204>
 80034ba:	2303      	movs	r3, #3
 80034bc:	e004      	b.n	80034c8 <HAL_GPIO_Init+0x204>
 80034be:	2302      	movs	r3, #2
 80034c0:	e002      	b.n	80034c8 <HAL_GPIO_Init+0x204>
 80034c2:	2301      	movs	r3, #1
 80034c4:	e000      	b.n	80034c8 <HAL_GPIO_Init+0x204>
 80034c6:	2300      	movs	r3, #0
 80034c8:	69fa      	ldr	r2, [r7, #28]
 80034ca:	f002 0203 	and.w	r2, r2, #3
 80034ce:	0092      	lsls	r2, r2, #2
 80034d0:	4093      	lsls	r3, r2
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034d8:	4935      	ldr	r1, [pc, #212]	; (80035b0 <HAL_GPIO_Init+0x2ec>)
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	089b      	lsrs	r3, r3, #2
 80034de:	3302      	adds	r3, #2
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034e6:	4b38      	ldr	r3, [pc, #224]	; (80035c8 <HAL_GPIO_Init+0x304>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	43db      	mvns	r3, r3
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	4013      	ands	r3, r2
 80034f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	4313      	orrs	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800350a:	4a2f      	ldr	r2, [pc, #188]	; (80035c8 <HAL_GPIO_Init+0x304>)
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003510:	4b2d      	ldr	r3, [pc, #180]	; (80035c8 <HAL_GPIO_Init+0x304>)
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	43db      	mvns	r3, r3
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	4013      	ands	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d003      	beq.n	8003534 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	4313      	orrs	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003534:	4a24      	ldr	r2, [pc, #144]	; (80035c8 <HAL_GPIO_Init+0x304>)
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800353a:	4b23      	ldr	r3, [pc, #140]	; (80035c8 <HAL_GPIO_Init+0x304>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	43db      	mvns	r3, r3
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	4013      	ands	r3, r2
 8003548:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d003      	beq.n	800355e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	4313      	orrs	r3, r2
 800355c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800355e:	4a1a      	ldr	r2, [pc, #104]	; (80035c8 <HAL_GPIO_Init+0x304>)
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003564:	4b18      	ldr	r3, [pc, #96]	; (80035c8 <HAL_GPIO_Init+0x304>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	43db      	mvns	r3, r3
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	4013      	ands	r3, r2
 8003572:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d003      	beq.n	8003588 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	4313      	orrs	r3, r2
 8003586:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003588:	4a0f      	ldr	r2, [pc, #60]	; (80035c8 <HAL_GPIO_Init+0x304>)
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	3301      	adds	r3, #1
 8003592:	61fb      	str	r3, [r7, #28]
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	2b0f      	cmp	r3, #15
 8003598:	f67f aea2 	bls.w	80032e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800359c:	bf00      	nop
 800359e:	bf00      	nop
 80035a0:	3724      	adds	r7, #36	; 0x24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	40023800 	.word	0x40023800
 80035b0:	40013800 	.word	0x40013800
 80035b4:	40020000 	.word	0x40020000
 80035b8:	40020400 	.word	0x40020400
 80035bc:	40020800 	.word	0x40020800
 80035c0:	40020c00 	.word	0x40020c00
 80035c4:	40021000 	.word	0x40021000
 80035c8:	40013c00 	.word	0x40013c00

080035cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	460b      	mov	r3, r1
 80035d6:	807b      	strh	r3, [r7, #2]
 80035d8:	4613      	mov	r3, r2
 80035da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035dc:	787b      	ldrb	r3, [r7, #1]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035e2:	887a      	ldrh	r2, [r7, #2]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035e8:	e003      	b.n	80035f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035ea:	887b      	ldrh	r3, [r7, #2]
 80035ec:	041a      	lsls	r2, r3, #16
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	619a      	str	r2, [r3, #24]
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
	...

08003600 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e12b      	b.n	800386a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d106      	bne.n	800362c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7fe ffa6 	bl	8002578 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2224      	movs	r2, #36	; 0x24
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 0201 	bic.w	r2, r2, #1
 8003642:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003652:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003662:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003664:	f001 fc20 	bl	8004ea8 <HAL_RCC_GetPCLK1Freq>
 8003668:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	4a81      	ldr	r2, [pc, #516]	; (8003874 <HAL_I2C_Init+0x274>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d807      	bhi.n	8003684 <HAL_I2C_Init+0x84>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	4a80      	ldr	r2, [pc, #512]	; (8003878 <HAL_I2C_Init+0x278>)
 8003678:	4293      	cmp	r3, r2
 800367a:	bf94      	ite	ls
 800367c:	2301      	movls	r3, #1
 800367e:	2300      	movhi	r3, #0
 8003680:	b2db      	uxtb	r3, r3
 8003682:	e006      	b.n	8003692 <HAL_I2C_Init+0x92>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4a7d      	ldr	r2, [pc, #500]	; (800387c <HAL_I2C_Init+0x27c>)
 8003688:	4293      	cmp	r3, r2
 800368a:	bf94      	ite	ls
 800368c:	2301      	movls	r3, #1
 800368e:	2300      	movhi	r3, #0
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e0e7      	b.n	800386a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	4a78      	ldr	r2, [pc, #480]	; (8003880 <HAL_I2C_Init+0x280>)
 800369e:	fba2 2303 	umull	r2, r3, r2, r3
 80036a2:	0c9b      	lsrs	r3, r3, #18
 80036a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	4a6a      	ldr	r2, [pc, #424]	; (8003874 <HAL_I2C_Init+0x274>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d802      	bhi.n	80036d4 <HAL_I2C_Init+0xd4>
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	3301      	adds	r3, #1
 80036d2:	e009      	b.n	80036e8 <HAL_I2C_Init+0xe8>
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80036da:	fb02 f303 	mul.w	r3, r2, r3
 80036de:	4a69      	ldr	r2, [pc, #420]	; (8003884 <HAL_I2C_Init+0x284>)
 80036e0:	fba2 2303 	umull	r2, r3, r2, r3
 80036e4:	099b      	lsrs	r3, r3, #6
 80036e6:	3301      	adds	r3, #1
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6812      	ldr	r2, [r2, #0]
 80036ec:	430b      	orrs	r3, r1
 80036ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80036fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	495c      	ldr	r1, [pc, #368]	; (8003874 <HAL_I2C_Init+0x274>)
 8003704:	428b      	cmp	r3, r1
 8003706:	d819      	bhi.n	800373c <HAL_I2C_Init+0x13c>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	1e59      	subs	r1, r3, #1
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	fbb1 f3f3 	udiv	r3, r1, r3
 8003716:	1c59      	adds	r1, r3, #1
 8003718:	f640 73fc 	movw	r3, #4092	; 0xffc
 800371c:	400b      	ands	r3, r1
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00a      	beq.n	8003738 <HAL_I2C_Init+0x138>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	1e59      	subs	r1, r3, #1
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003730:	3301      	adds	r3, #1
 8003732:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003736:	e051      	b.n	80037dc <HAL_I2C_Init+0x1dc>
 8003738:	2304      	movs	r3, #4
 800373a:	e04f      	b.n	80037dc <HAL_I2C_Init+0x1dc>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d111      	bne.n	8003768 <HAL_I2C_Init+0x168>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	1e58      	subs	r0, r3, #1
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6859      	ldr	r1, [r3, #4]
 800374c:	460b      	mov	r3, r1
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	440b      	add	r3, r1
 8003752:	fbb0 f3f3 	udiv	r3, r0, r3
 8003756:	3301      	adds	r3, #1
 8003758:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800375c:	2b00      	cmp	r3, #0
 800375e:	bf0c      	ite	eq
 8003760:	2301      	moveq	r3, #1
 8003762:	2300      	movne	r3, #0
 8003764:	b2db      	uxtb	r3, r3
 8003766:	e012      	b.n	800378e <HAL_I2C_Init+0x18e>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	1e58      	subs	r0, r3, #1
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6859      	ldr	r1, [r3, #4]
 8003770:	460b      	mov	r3, r1
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	0099      	lsls	r1, r3, #2
 8003778:	440b      	add	r3, r1
 800377a:	fbb0 f3f3 	udiv	r3, r0, r3
 800377e:	3301      	adds	r3, #1
 8003780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003784:	2b00      	cmp	r3, #0
 8003786:	bf0c      	ite	eq
 8003788:	2301      	moveq	r3, #1
 800378a:	2300      	movne	r3, #0
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <HAL_I2C_Init+0x196>
 8003792:	2301      	movs	r3, #1
 8003794:	e022      	b.n	80037dc <HAL_I2C_Init+0x1dc>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10e      	bne.n	80037bc <HAL_I2C_Init+0x1bc>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	1e58      	subs	r0, r3, #1
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6859      	ldr	r1, [r3, #4]
 80037a6:	460b      	mov	r3, r1
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	440b      	add	r3, r1
 80037ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80037b0:	3301      	adds	r3, #1
 80037b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037ba:	e00f      	b.n	80037dc <HAL_I2C_Init+0x1dc>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	1e58      	subs	r0, r3, #1
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6859      	ldr	r1, [r3, #4]
 80037c4:	460b      	mov	r3, r1
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	440b      	add	r3, r1
 80037ca:	0099      	lsls	r1, r3, #2
 80037cc:	440b      	add	r3, r1
 80037ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80037d2:	3301      	adds	r3, #1
 80037d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	6809      	ldr	r1, [r1, #0]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	69da      	ldr	r2, [r3, #28]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	431a      	orrs	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800380a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6911      	ldr	r1, [r2, #16]
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	68d2      	ldr	r2, [r2, #12]
 8003816:	4311      	orrs	r1, r2
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6812      	ldr	r2, [r2, #0]
 800381c:	430b      	orrs	r3, r1
 800381e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	695a      	ldr	r2, [r3, #20]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	431a      	orrs	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f042 0201 	orr.w	r2, r2, #1
 800384a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2220      	movs	r2, #32
 8003856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	000186a0 	.word	0x000186a0
 8003878:	001e847f 	.word	0x001e847f
 800387c:	003d08ff 	.word	0x003d08ff
 8003880:	431bde83 	.word	0x431bde83
 8003884:	10624dd3 	.word	0x10624dd3

08003888 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b088      	sub	sp, #32
 800388c:	af02      	add	r7, sp, #8
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	4608      	mov	r0, r1
 8003892:	4611      	mov	r1, r2
 8003894:	461a      	mov	r2, r3
 8003896:	4603      	mov	r3, r0
 8003898:	817b      	strh	r3, [r7, #10]
 800389a:	460b      	mov	r3, r1
 800389c:	813b      	strh	r3, [r7, #8]
 800389e:	4613      	mov	r3, r2
 80038a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038a2:	f7ff f85d 	bl	8002960 <HAL_GetTick>
 80038a6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b20      	cmp	r3, #32
 80038b2:	f040 80d9 	bne.w	8003a68 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	2319      	movs	r3, #25
 80038bc:	2201      	movs	r2, #1
 80038be:	496d      	ldr	r1, [pc, #436]	; (8003a74 <HAL_I2C_Mem_Write+0x1ec>)
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 fc8b 	bl	80041dc <I2C_WaitOnFlagUntilTimeout>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80038cc:	2302      	movs	r3, #2
 80038ce:	e0cc      	b.n	8003a6a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d101      	bne.n	80038de <HAL_I2C_Mem_Write+0x56>
 80038da:	2302      	movs	r3, #2
 80038dc:	e0c5      	b.n	8003a6a <HAL_I2C_Mem_Write+0x1e2>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d007      	beq.n	8003904 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f042 0201 	orr.w	r2, r2, #1
 8003902:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003912:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2221      	movs	r2, #33	; 0x21
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2240      	movs	r2, #64	; 0x40
 8003920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6a3a      	ldr	r2, [r7, #32]
 800392e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003934:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393a:	b29a      	uxth	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4a4d      	ldr	r2, [pc, #308]	; (8003a78 <HAL_I2C_Mem_Write+0x1f0>)
 8003944:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003946:	88f8      	ldrh	r0, [r7, #6]
 8003948:	893a      	ldrh	r2, [r7, #8]
 800394a:	8979      	ldrh	r1, [r7, #10]
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	9301      	str	r3, [sp, #4]
 8003950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	4603      	mov	r3, r0
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f000 fac2 	bl	8003ee0 <I2C_RequestMemoryWrite>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d052      	beq.n	8003a08 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e081      	b.n	8003a6a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 fd50 	bl	8004410 <I2C_WaitOnTXEFlagUntilTimeout>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00d      	beq.n	8003992 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	2b04      	cmp	r3, #4
 800397c:	d107      	bne.n	800398e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800398c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e06b      	b.n	8003a6a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003996:	781a      	ldrb	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	1c5a      	adds	r2, r3, #1
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	3b01      	subs	r3, #1
 80039bc:	b29a      	uxth	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b04      	cmp	r3, #4
 80039ce:	d11b      	bne.n	8003a08 <HAL_I2C_Mem_Write+0x180>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d017      	beq.n	8003a08 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039dc:	781a      	ldrb	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e8:	1c5a      	adds	r2, r3, #1
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f2:	3b01      	subs	r3, #1
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	3b01      	subs	r3, #1
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1aa      	bne.n	8003966 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 fd43 	bl	80044a0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00d      	beq.n	8003a3c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a24:	2b04      	cmp	r3, #4
 8003a26:	d107      	bne.n	8003a38 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a36:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e016      	b.n	8003a6a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a64:	2300      	movs	r3, #0
 8003a66:	e000      	b.n	8003a6a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003a68:	2302      	movs	r3, #2
  }
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3718      	adds	r7, #24
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	00100002 	.word	0x00100002
 8003a78:	ffff0000 	.word	0xffff0000

08003a7c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b08c      	sub	sp, #48	; 0x30
 8003a80:	af02      	add	r7, sp, #8
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	4608      	mov	r0, r1
 8003a86:	4611      	mov	r1, r2
 8003a88:	461a      	mov	r2, r3
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	817b      	strh	r3, [r7, #10]
 8003a8e:	460b      	mov	r3, r1
 8003a90:	813b      	strh	r3, [r7, #8]
 8003a92:	4613      	mov	r3, r2
 8003a94:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a96:	f7fe ff63 	bl	8002960 <HAL_GetTick>
 8003a9a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b20      	cmp	r3, #32
 8003aa6:	f040 8214 	bne.w	8003ed2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	2319      	movs	r3, #25
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	497b      	ldr	r1, [pc, #492]	; (8003ca0 <HAL_I2C_Mem_Read+0x224>)
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	f000 fb91 	bl	80041dc <I2C_WaitOnFlagUntilTimeout>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	e207      	b.n	8003ed4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d101      	bne.n	8003ad2 <HAL_I2C_Mem_Read+0x56>
 8003ace:	2302      	movs	r3, #2
 8003ad0:	e200      	b.n	8003ed4 <HAL_I2C_Mem_Read+0x458>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d007      	beq.n	8003af8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f042 0201 	orr.w	r2, r2, #1
 8003af6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2222      	movs	r2, #34	; 0x22
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2240      	movs	r2, #64	; 0x40
 8003b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003b28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	4a5b      	ldr	r2, [pc, #364]	; (8003ca4 <HAL_I2C_Mem_Read+0x228>)
 8003b38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b3a:	88f8      	ldrh	r0, [r7, #6]
 8003b3c:	893a      	ldrh	r2, [r7, #8]
 8003b3e:	8979      	ldrh	r1, [r7, #10]
 8003b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b42:	9301      	str	r3, [sp, #4]
 8003b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	4603      	mov	r3, r0
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f000 fa5e 	bl	800400c <I2C_RequestMemoryRead>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e1bc      	b.n	8003ed4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d113      	bne.n	8003b8a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b62:	2300      	movs	r3, #0
 8003b64:	623b      	str	r3, [r7, #32]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	623b      	str	r3, [r7, #32]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	623b      	str	r3, [r7, #32]
 8003b76:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	e190      	b.n	8003eac <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d11b      	bne.n	8003bca <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ba0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	61fb      	str	r3, [r7, #28]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	61fb      	str	r3, [r7, #28]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	61fb      	str	r3, [r7, #28]
 8003bb6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	e170      	b.n	8003eac <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d11b      	bne.n	8003c0a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003be0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bf0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	61bb      	str	r3, [r7, #24]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	61bb      	str	r3, [r7, #24]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	61bb      	str	r3, [r7, #24]
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	e150      	b.n	8003eac <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	617b      	str	r3, [r7, #20]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	617b      	str	r3, [r7, #20]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	617b      	str	r3, [r7, #20]
 8003c1e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003c20:	e144      	b.n	8003eac <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c26:	2b03      	cmp	r3, #3
 8003c28:	f200 80f1 	bhi.w	8003e0e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d123      	bne.n	8003c7c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f000 fc79 	bl	8004530 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e145      	b.n	8003ed4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	691a      	ldr	r2, [r3, #16]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	b2d2      	uxtb	r2, r2
 8003c54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5a:	1c5a      	adds	r2, r3, #1
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c64:	3b01      	subs	r3, #1
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	3b01      	subs	r3, #1
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c7a:	e117      	b.n	8003eac <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d14e      	bne.n	8003d22 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	4906      	ldr	r1, [pc, #24]	; (8003ca8 <HAL_I2C_Mem_Read+0x22c>)
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f000 faa4 	bl	80041dc <I2C_WaitOnFlagUntilTimeout>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d008      	beq.n	8003cac <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e11a      	b.n	8003ed4 <HAL_I2C_Mem_Read+0x458>
 8003c9e:	bf00      	nop
 8003ca0:	00100002 	.word	0x00100002
 8003ca4:	ffff0000 	.word	0xffff0000
 8003ca8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	691a      	ldr	r2, [r3, #16]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cce:	1c5a      	adds	r2, r3, #1
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	691a      	ldr	r2, [r3, #16]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	b2d2      	uxtb	r2, r2
 8003cfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d00:	1c5a      	adds	r2, r3, #1
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d20:	e0c4      	b.n	8003eac <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d28:	2200      	movs	r2, #0
 8003d2a:	496c      	ldr	r1, [pc, #432]	; (8003edc <HAL_I2C_Mem_Read+0x460>)
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f000 fa55 	bl	80041dc <I2C_WaitOnFlagUntilTimeout>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d001      	beq.n	8003d3c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e0cb      	b.n	8003ed4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	691a      	ldr	r2, [r3, #16]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d56:	b2d2      	uxtb	r2, r2
 8003d58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	3b01      	subs	r3, #1
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d84:	2200      	movs	r2, #0
 8003d86:	4955      	ldr	r1, [pc, #340]	; (8003edc <HAL_I2C_Mem_Read+0x460>)
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f000 fa27 	bl	80041dc <I2C_WaitOnFlagUntilTimeout>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e09d      	b.n	8003ed4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003da6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	691a      	ldr	r2, [r3, #16]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	b2d2      	uxtb	r2, r2
 8003db4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	1c5a      	adds	r2, r3, #1
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	691a      	ldr	r2, [r3, #16]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de4:	b2d2      	uxtb	r2, r2
 8003de6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dec:	1c5a      	adds	r2, r3, #1
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df6:	3b01      	subs	r3, #1
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	3b01      	subs	r3, #1
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e0c:	e04e      	b.n	8003eac <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 fb8c 	bl	8004530 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e058      	b.n	8003ed4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	691a      	ldr	r2, [r3, #16]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2c:	b2d2      	uxtb	r2, r2
 8003e2e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e34:	1c5a      	adds	r2, r3, #1
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	f003 0304 	and.w	r3, r3, #4
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	d124      	bne.n	8003eac <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e66:	2b03      	cmp	r3, #3
 8003e68:	d107      	bne.n	8003e7a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e78:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	691a      	ldr	r2, [r3, #16]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e84:	b2d2      	uxtb	r2, r2
 8003e86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8c:	1c5a      	adds	r2, r3, #1
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e96:	3b01      	subs	r3, #1
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f47f aeb6 	bne.w	8003c22 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	e000      	b.n	8003ed4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003ed2:	2302      	movs	r3, #2
  }
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3728      	adds	r7, #40	; 0x28
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	00010004 	.word	0x00010004

08003ee0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b088      	sub	sp, #32
 8003ee4:	af02      	add	r7, sp, #8
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	4608      	mov	r0, r1
 8003eea:	4611      	mov	r1, r2
 8003eec:	461a      	mov	r2, r3
 8003eee:	4603      	mov	r3, r0
 8003ef0:	817b      	strh	r3, [r7, #10]
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	813b      	strh	r3, [r7, #8]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	6a3b      	ldr	r3, [r7, #32]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 f960 	bl	80041dc <I2C_WaitOnFlagUntilTimeout>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00d      	beq.n	8003f3e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f30:	d103      	bne.n	8003f3a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f38:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e05f      	b.n	8003ffe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f3e:	897b      	ldrh	r3, [r7, #10]
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	461a      	mov	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f50:	6a3a      	ldr	r2, [r7, #32]
 8003f52:	492d      	ldr	r1, [pc, #180]	; (8004008 <I2C_RequestMemoryWrite+0x128>)
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f000 f9bb 	bl	80042d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e04c      	b.n	8003ffe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f64:	2300      	movs	r3, #0
 8003f66:	617b      	str	r3, [r7, #20]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	617b      	str	r3, [r7, #20]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	617b      	str	r3, [r7, #20]
 8003f78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f7c:	6a39      	ldr	r1, [r7, #32]
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 fa46 	bl	8004410 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00d      	beq.n	8003fa6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	d107      	bne.n	8003fa2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fa0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e02b      	b.n	8003ffe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fa6:	88fb      	ldrh	r3, [r7, #6]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d105      	bne.n	8003fb8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fac:	893b      	ldrh	r3, [r7, #8]
 8003fae:	b2da      	uxtb	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	611a      	str	r2, [r3, #16]
 8003fb6:	e021      	b.n	8003ffc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003fb8:	893b      	ldrh	r3, [r7, #8]
 8003fba:	0a1b      	lsrs	r3, r3, #8
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fc8:	6a39      	ldr	r1, [r7, #32]
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f000 fa20 	bl	8004410 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00d      	beq.n	8003ff2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	d107      	bne.n	8003fee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e005      	b.n	8003ffe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ff2:	893b      	ldrh	r3, [r7, #8]
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3718      	adds	r7, #24
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	00010002 	.word	0x00010002

0800400c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b088      	sub	sp, #32
 8004010:	af02      	add	r7, sp, #8
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	4608      	mov	r0, r1
 8004016:	4611      	mov	r1, r2
 8004018:	461a      	mov	r2, r3
 800401a:	4603      	mov	r3, r0
 800401c:	817b      	strh	r3, [r7, #10]
 800401e:	460b      	mov	r3, r1
 8004020:	813b      	strh	r3, [r7, #8]
 8004022:	4613      	mov	r3, r2
 8004024:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004034:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004044:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004048:	9300      	str	r3, [sp, #0]
 800404a:	6a3b      	ldr	r3, [r7, #32]
 800404c:	2200      	movs	r2, #0
 800404e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	f000 f8c2 	bl	80041dc <I2C_WaitOnFlagUntilTimeout>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00d      	beq.n	800407a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004068:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800406c:	d103      	bne.n	8004076 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004074:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e0aa      	b.n	80041d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800407a:	897b      	ldrh	r3, [r7, #10]
 800407c:	b2db      	uxtb	r3, r3
 800407e:	461a      	mov	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004088:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408c:	6a3a      	ldr	r2, [r7, #32]
 800408e:	4952      	ldr	r1, [pc, #328]	; (80041d8 <I2C_RequestMemoryRead+0x1cc>)
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f000 f91d 	bl	80042d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e097      	b.n	80041d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040a0:	2300      	movs	r3, #0
 80040a2:	617b      	str	r3, [r7, #20]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	617b      	str	r3, [r7, #20]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	617b      	str	r3, [r7, #20]
 80040b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040b8:	6a39      	ldr	r1, [r7, #32]
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f000 f9a8 	bl	8004410 <I2C_WaitOnTXEFlagUntilTimeout>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00d      	beq.n	80040e2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	2b04      	cmp	r3, #4
 80040cc:	d107      	bne.n	80040de <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e076      	b.n	80041d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040e2:	88fb      	ldrh	r3, [r7, #6]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d105      	bne.n	80040f4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040e8:	893b      	ldrh	r3, [r7, #8]
 80040ea:	b2da      	uxtb	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	611a      	str	r2, [r3, #16]
 80040f2:	e021      	b.n	8004138 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80040f4:	893b      	ldrh	r3, [r7, #8]
 80040f6:	0a1b      	lsrs	r3, r3, #8
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	b2da      	uxtb	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004104:	6a39      	ldr	r1, [r7, #32]
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 f982 	bl	8004410 <I2C_WaitOnTXEFlagUntilTimeout>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00d      	beq.n	800412e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004116:	2b04      	cmp	r3, #4
 8004118:	d107      	bne.n	800412a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004128:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e050      	b.n	80041d0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800412e:	893b      	ldrh	r3, [r7, #8]
 8004130:	b2da      	uxtb	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800413a:	6a39      	ldr	r1, [r7, #32]
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f000 f967 	bl	8004410 <I2C_WaitOnTXEFlagUntilTimeout>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00d      	beq.n	8004164 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414c:	2b04      	cmp	r3, #4
 800414e:	d107      	bne.n	8004160 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800415e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e035      	b.n	80041d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004172:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	6a3b      	ldr	r3, [r7, #32]
 800417a:	2200      	movs	r2, #0
 800417c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 f82b 	bl	80041dc <I2C_WaitOnFlagUntilTimeout>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00d      	beq.n	80041a8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800419a:	d103      	bne.n	80041a4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e013      	b.n	80041d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80041a8:	897b      	ldrh	r3, [r7, #10]
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	f043 0301 	orr.w	r3, r3, #1
 80041b0:	b2da      	uxtb	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ba:	6a3a      	ldr	r2, [r7, #32]
 80041bc:	4906      	ldr	r1, [pc, #24]	; (80041d8 <I2C_RequestMemoryRead+0x1cc>)
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f000 f886 	bl	80042d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e000      	b.n	80041d0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3718      	adds	r7, #24
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	00010002 	.word	0x00010002

080041dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	603b      	str	r3, [r7, #0]
 80041e8:	4613      	mov	r3, r2
 80041ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041ec:	e048      	b.n	8004280 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f4:	d044      	beq.n	8004280 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041f6:	f7fe fbb3 	bl	8002960 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	429a      	cmp	r2, r3
 8004204:	d302      	bcc.n	800420c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d139      	bne.n	8004280 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	0c1b      	lsrs	r3, r3, #16
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b01      	cmp	r3, #1
 8004214:	d10d      	bne.n	8004232 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	695b      	ldr	r3, [r3, #20]
 800421c:	43da      	mvns	r2, r3
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	4013      	ands	r3, r2
 8004222:	b29b      	uxth	r3, r3
 8004224:	2b00      	cmp	r3, #0
 8004226:	bf0c      	ite	eq
 8004228:	2301      	moveq	r3, #1
 800422a:	2300      	movne	r3, #0
 800422c:	b2db      	uxtb	r3, r3
 800422e:	461a      	mov	r2, r3
 8004230:	e00c      	b.n	800424c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	43da      	mvns	r2, r3
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	4013      	ands	r3, r2
 800423e:	b29b      	uxth	r3, r3
 8004240:	2b00      	cmp	r3, #0
 8004242:	bf0c      	ite	eq
 8004244:	2301      	moveq	r3, #1
 8004246:	2300      	movne	r3, #0
 8004248:	b2db      	uxtb	r3, r3
 800424a:	461a      	mov	r2, r3
 800424c:	79fb      	ldrb	r3, [r7, #7]
 800424e:	429a      	cmp	r2, r3
 8004250:	d116      	bne.n	8004280 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2220      	movs	r2, #32
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426c:	f043 0220 	orr.w	r2, r3, #32
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e023      	b.n	80042c8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	0c1b      	lsrs	r3, r3, #16
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b01      	cmp	r3, #1
 8004288:	d10d      	bne.n	80042a6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	43da      	mvns	r2, r3
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	4013      	ands	r3, r2
 8004296:	b29b      	uxth	r3, r3
 8004298:	2b00      	cmp	r3, #0
 800429a:	bf0c      	ite	eq
 800429c:	2301      	moveq	r3, #1
 800429e:	2300      	movne	r3, #0
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	461a      	mov	r2, r3
 80042a4:	e00c      	b.n	80042c0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	43da      	mvns	r2, r3
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	4013      	ands	r3, r2
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	bf0c      	ite	eq
 80042b8:	2301      	moveq	r3, #1
 80042ba:	2300      	movne	r3, #0
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	461a      	mov	r2, r3
 80042c0:	79fb      	ldrb	r3, [r7, #7]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d093      	beq.n	80041ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
 80042dc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042de:	e071      	b.n	80043c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ee:	d123      	bne.n	8004338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042fe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004308:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2220      	movs	r2, #32
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004324:	f043 0204 	orr.w	r2, r3, #4
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e067      	b.n	8004408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433e:	d041      	beq.n	80043c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004340:	f7fe fb0e 	bl	8002960 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	429a      	cmp	r2, r3
 800434e:	d302      	bcc.n	8004356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d136      	bne.n	80043c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	0c1b      	lsrs	r3, r3, #16
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b01      	cmp	r3, #1
 800435e:	d10c      	bne.n	800437a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	43da      	mvns	r2, r3
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	4013      	ands	r3, r2
 800436c:	b29b      	uxth	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	bf14      	ite	ne
 8004372:	2301      	movne	r3, #1
 8004374:	2300      	moveq	r3, #0
 8004376:	b2db      	uxtb	r3, r3
 8004378:	e00b      	b.n	8004392 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	43da      	mvns	r2, r3
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	4013      	ands	r3, r2
 8004386:	b29b      	uxth	r3, r3
 8004388:	2b00      	cmp	r3, #0
 800438a:	bf14      	ite	ne
 800438c:	2301      	movne	r3, #1
 800438e:	2300      	moveq	r3, #0
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d016      	beq.n	80043c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2220      	movs	r2, #32
 80043a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b0:	f043 0220 	orr.w	r2, r3, #32
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e021      	b.n	8004408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	0c1b      	lsrs	r3, r3, #16
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d10c      	bne.n	80043e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	43da      	mvns	r2, r3
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	4013      	ands	r3, r2
 80043da:	b29b      	uxth	r3, r3
 80043dc:	2b00      	cmp	r3, #0
 80043de:	bf14      	ite	ne
 80043e0:	2301      	movne	r3, #1
 80043e2:	2300      	moveq	r3, #0
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	e00b      	b.n	8004400 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	43da      	mvns	r2, r3
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	4013      	ands	r3, r2
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	bf14      	ite	ne
 80043fa:	2301      	movne	r3, #1
 80043fc:	2300      	moveq	r3, #0
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b00      	cmp	r3, #0
 8004402:	f47f af6d 	bne.w	80042e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800441c:	e034      	b.n	8004488 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f000 f8e3 	bl	80045ea <I2C_IsAcknowledgeFailed>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e034      	b.n	8004498 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004434:	d028      	beq.n	8004488 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004436:	f7fe fa93 	bl	8002960 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	68ba      	ldr	r2, [r7, #8]
 8004442:	429a      	cmp	r2, r3
 8004444:	d302      	bcc.n	800444c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d11d      	bne.n	8004488 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004456:	2b80      	cmp	r3, #128	; 0x80
 8004458:	d016      	beq.n	8004488 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2220      	movs	r2, #32
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004474:	f043 0220 	orr.w	r2, r3, #32
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e007      	b.n	8004498 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004492:	2b80      	cmp	r3, #128	; 0x80
 8004494:	d1c3      	bne.n	800441e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044ac:	e034      	b.n	8004518 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f000 f89b 	bl	80045ea <I2C_IsAcknowledgeFailed>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e034      	b.n	8004528 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c4:	d028      	beq.n	8004518 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044c6:	f7fe fa4b 	bl	8002960 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d302      	bcc.n	80044dc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d11d      	bne.n	8004518 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	f003 0304 	and.w	r3, r3, #4
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	d016      	beq.n	8004518 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2220      	movs	r2, #32
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004504:	f043 0220 	orr.w	r2, r3, #32
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e007      	b.n	8004528 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	f003 0304 	and.w	r3, r3, #4
 8004522:	2b04      	cmp	r3, #4
 8004524:	d1c3      	bne.n	80044ae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800453c:	e049      	b.n	80045d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	f003 0310 	and.w	r3, r3, #16
 8004548:	2b10      	cmp	r3, #16
 800454a:	d119      	bne.n	8004580 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f06f 0210 	mvn.w	r2, #16
 8004554:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2220      	movs	r2, #32
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e030      	b.n	80045e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004580:	f7fe f9ee 	bl	8002960 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	429a      	cmp	r2, r3
 800458e:	d302      	bcc.n	8004596 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d11d      	bne.n	80045d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a0:	2b40      	cmp	r3, #64	; 0x40
 80045a2:	d016      	beq.n	80045d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2220      	movs	r2, #32
 80045ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045be:	f043 0220 	orr.w	r2, r3, #32
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e007      	b.n	80045e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045dc:	2b40      	cmp	r3, #64	; 0x40
 80045de:	d1ae      	bne.n	800453e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b083      	sub	sp, #12
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	695b      	ldr	r3, [r3, #20]
 80045f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004600:	d11b      	bne.n	800463a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800460a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2220      	movs	r2, #32
 8004616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	f043 0204 	orr.w	r2, r3, #4
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e000      	b.n	800463c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e267      	b.n	8004b2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d075      	beq.n	8004752 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004666:	4b88      	ldr	r3, [pc, #544]	; (8004888 <HAL_RCC_OscConfig+0x240>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f003 030c 	and.w	r3, r3, #12
 800466e:	2b04      	cmp	r3, #4
 8004670:	d00c      	beq.n	800468c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004672:	4b85      	ldr	r3, [pc, #532]	; (8004888 <HAL_RCC_OscConfig+0x240>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800467a:	2b08      	cmp	r3, #8
 800467c:	d112      	bne.n	80046a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800467e:	4b82      	ldr	r3, [pc, #520]	; (8004888 <HAL_RCC_OscConfig+0x240>)
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004686:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800468a:	d10b      	bne.n	80046a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800468c:	4b7e      	ldr	r3, [pc, #504]	; (8004888 <HAL_RCC_OscConfig+0x240>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d05b      	beq.n	8004750 <HAL_RCC_OscConfig+0x108>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d157      	bne.n	8004750 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e242      	b.n	8004b2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ac:	d106      	bne.n	80046bc <HAL_RCC_OscConfig+0x74>
 80046ae:	4b76      	ldr	r3, [pc, #472]	; (8004888 <HAL_RCC_OscConfig+0x240>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a75      	ldr	r2, [pc, #468]	; (8004888 <HAL_RCC_OscConfig+0x240>)
 80046b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046b8:	6013      	str	r3, [r2, #0]
 80046ba:	e01d      	b.n	80046f8 <HAL_RCC_OscConfig+0xb0>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046c4:	d10c      	bne.n	80046e0 <HAL_RCC_OscConfig+0x98>
 80046c6:	4b70      	ldr	r3, [pc, #448]	; (8004888 <HAL_RCC_OscConfig+0x240>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a6f      	ldr	r2, [pc, #444]	; (8004888 <HAL_RCC_OscConfig+0x240>)
 80046cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046d0:	6013      	str	r3, [r2, #0]
 80046d2:	4b6d      	ldr	r3, [pc, #436]	; (8004888 <HAL_RCC_OscConfig+0x240>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a6c      	ldr	r2, [pc, #432]	; (8004888 <HAL_RCC_OscConfig+0x240>)
 80046d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046dc:	6013      	str	r3, [r2, #0]
 80046de:	e00b      	b.n	80046f8 <HAL_RCC_OscConfig+0xb0>
 80046e0:	4b69      	ldr	r3, [pc, #420]	; (8004888 <HAL_RCC_OscConfig+0x240>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a68      	ldr	r2, [pc, #416]	; (8004888 <HAL_RCC_OscConfig+0x240>)
 80046e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046ea:	6013      	str	r3, [r2, #0]
 80046ec:	4b66      	ldr	r3, [pc, #408]	; (8004888 <HAL_RCC_OscConfig+0x240>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a65      	ldr	r2, [pc, #404]	; (8004888 <HAL_RCC_OscConfig+0x240>)
 80046f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d013      	beq.n	8004728 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004700:	f7fe f92e 	bl	8002960 <HAL_GetTick>
 8004704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004706:	e008      	b.n	800471a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004708:	f7fe f92a 	bl	8002960 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b64      	cmp	r3, #100	; 0x64
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e207      	b.n	8004b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800471a:	4b5b      	ldr	r3, [pc, #364]	; (8004888 <HAL_RCC_OscConfig+0x240>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d0f0      	beq.n	8004708 <HAL_RCC_OscConfig+0xc0>
 8004726:	e014      	b.n	8004752 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004728:	f7fe f91a 	bl	8002960 <HAL_GetTick>
 800472c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800472e:	e008      	b.n	8004742 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004730:	f7fe f916 	bl	8002960 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b64      	cmp	r3, #100	; 0x64
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e1f3      	b.n	8004b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004742:	4b51      	ldr	r3, [pc, #324]	; (8004888 <HAL_RCC_OscConfig+0x240>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1f0      	bne.n	8004730 <HAL_RCC_OscConfig+0xe8>
 800474e:	e000      	b.n	8004752 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d063      	beq.n	8004826 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800475e:	4b4a      	ldr	r3, [pc, #296]	; (8004888 <HAL_RCC_OscConfig+0x240>)
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f003 030c 	and.w	r3, r3, #12
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00b      	beq.n	8004782 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800476a:	4b47      	ldr	r3, [pc, #284]	; (8004888 <HAL_RCC_OscConfig+0x240>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004772:	2b08      	cmp	r3, #8
 8004774:	d11c      	bne.n	80047b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004776:	4b44      	ldr	r3, [pc, #272]	; (8004888 <HAL_RCC_OscConfig+0x240>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d116      	bne.n	80047b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004782:	4b41      	ldr	r3, [pc, #260]	; (8004888 <HAL_RCC_OscConfig+0x240>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d005      	beq.n	800479a <HAL_RCC_OscConfig+0x152>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d001      	beq.n	800479a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e1c7      	b.n	8004b2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800479a:	4b3b      	ldr	r3, [pc, #236]	; (8004888 <HAL_RCC_OscConfig+0x240>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	4937      	ldr	r1, [pc, #220]	; (8004888 <HAL_RCC_OscConfig+0x240>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047ae:	e03a      	b.n	8004826 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d020      	beq.n	80047fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047b8:	4b34      	ldr	r3, [pc, #208]	; (800488c <HAL_RCC_OscConfig+0x244>)
 80047ba:	2201      	movs	r2, #1
 80047bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047be:	f7fe f8cf 	bl	8002960 <HAL_GetTick>
 80047c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047c4:	e008      	b.n	80047d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047c6:	f7fe f8cb 	bl	8002960 <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d901      	bls.n	80047d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e1a8      	b.n	8004b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047d8:	4b2b      	ldr	r3, [pc, #172]	; (8004888 <HAL_RCC_OscConfig+0x240>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d0f0      	beq.n	80047c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047e4:	4b28      	ldr	r3, [pc, #160]	; (8004888 <HAL_RCC_OscConfig+0x240>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	00db      	lsls	r3, r3, #3
 80047f2:	4925      	ldr	r1, [pc, #148]	; (8004888 <HAL_RCC_OscConfig+0x240>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	600b      	str	r3, [r1, #0]
 80047f8:	e015      	b.n	8004826 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047fa:	4b24      	ldr	r3, [pc, #144]	; (800488c <HAL_RCC_OscConfig+0x244>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004800:	f7fe f8ae 	bl	8002960 <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004806:	e008      	b.n	800481a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004808:	f7fe f8aa 	bl	8002960 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b02      	cmp	r3, #2
 8004814:	d901      	bls.n	800481a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e187      	b.n	8004b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800481a:	4b1b      	ldr	r3, [pc, #108]	; (8004888 <HAL_RCC_OscConfig+0x240>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0302 	and.w	r3, r3, #2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1f0      	bne.n	8004808 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0308 	and.w	r3, r3, #8
 800482e:	2b00      	cmp	r3, #0
 8004830:	d036      	beq.n	80048a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d016      	beq.n	8004868 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800483a:	4b15      	ldr	r3, [pc, #84]	; (8004890 <HAL_RCC_OscConfig+0x248>)
 800483c:	2201      	movs	r2, #1
 800483e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004840:	f7fe f88e 	bl	8002960 <HAL_GetTick>
 8004844:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004846:	e008      	b.n	800485a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004848:	f7fe f88a 	bl	8002960 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b02      	cmp	r3, #2
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e167      	b.n	8004b2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800485a:	4b0b      	ldr	r3, [pc, #44]	; (8004888 <HAL_RCC_OscConfig+0x240>)
 800485c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d0f0      	beq.n	8004848 <HAL_RCC_OscConfig+0x200>
 8004866:	e01b      	b.n	80048a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004868:	4b09      	ldr	r3, [pc, #36]	; (8004890 <HAL_RCC_OscConfig+0x248>)
 800486a:	2200      	movs	r2, #0
 800486c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800486e:	f7fe f877 	bl	8002960 <HAL_GetTick>
 8004872:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004874:	e00e      	b.n	8004894 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004876:	f7fe f873 	bl	8002960 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d907      	bls.n	8004894 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e150      	b.n	8004b2a <HAL_RCC_OscConfig+0x4e2>
 8004888:	40023800 	.word	0x40023800
 800488c:	42470000 	.word	0x42470000
 8004890:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004894:	4b88      	ldr	r3, [pc, #544]	; (8004ab8 <HAL_RCC_OscConfig+0x470>)
 8004896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1ea      	bne.n	8004876 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0304 	and.w	r3, r3, #4
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f000 8097 	beq.w	80049dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048ae:	2300      	movs	r3, #0
 80048b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048b2:	4b81      	ldr	r3, [pc, #516]	; (8004ab8 <HAL_RCC_OscConfig+0x470>)
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10f      	bne.n	80048de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048be:	2300      	movs	r3, #0
 80048c0:	60bb      	str	r3, [r7, #8]
 80048c2:	4b7d      	ldr	r3, [pc, #500]	; (8004ab8 <HAL_RCC_OscConfig+0x470>)
 80048c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c6:	4a7c      	ldr	r2, [pc, #496]	; (8004ab8 <HAL_RCC_OscConfig+0x470>)
 80048c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048cc:	6413      	str	r3, [r2, #64]	; 0x40
 80048ce:	4b7a      	ldr	r3, [pc, #488]	; (8004ab8 <HAL_RCC_OscConfig+0x470>)
 80048d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048d6:	60bb      	str	r3, [r7, #8]
 80048d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048da:	2301      	movs	r3, #1
 80048dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048de:	4b77      	ldr	r3, [pc, #476]	; (8004abc <HAL_RCC_OscConfig+0x474>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d118      	bne.n	800491c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048ea:	4b74      	ldr	r3, [pc, #464]	; (8004abc <HAL_RCC_OscConfig+0x474>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a73      	ldr	r2, [pc, #460]	; (8004abc <HAL_RCC_OscConfig+0x474>)
 80048f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048f6:	f7fe f833 	bl	8002960 <HAL_GetTick>
 80048fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048fc:	e008      	b.n	8004910 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048fe:	f7fe f82f 	bl	8002960 <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	2b02      	cmp	r3, #2
 800490a:	d901      	bls.n	8004910 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e10c      	b.n	8004b2a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004910:	4b6a      	ldr	r3, [pc, #424]	; (8004abc <HAL_RCC_OscConfig+0x474>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004918:	2b00      	cmp	r3, #0
 800491a:	d0f0      	beq.n	80048fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d106      	bne.n	8004932 <HAL_RCC_OscConfig+0x2ea>
 8004924:	4b64      	ldr	r3, [pc, #400]	; (8004ab8 <HAL_RCC_OscConfig+0x470>)
 8004926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004928:	4a63      	ldr	r2, [pc, #396]	; (8004ab8 <HAL_RCC_OscConfig+0x470>)
 800492a:	f043 0301 	orr.w	r3, r3, #1
 800492e:	6713      	str	r3, [r2, #112]	; 0x70
 8004930:	e01c      	b.n	800496c <HAL_RCC_OscConfig+0x324>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	2b05      	cmp	r3, #5
 8004938:	d10c      	bne.n	8004954 <HAL_RCC_OscConfig+0x30c>
 800493a:	4b5f      	ldr	r3, [pc, #380]	; (8004ab8 <HAL_RCC_OscConfig+0x470>)
 800493c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800493e:	4a5e      	ldr	r2, [pc, #376]	; (8004ab8 <HAL_RCC_OscConfig+0x470>)
 8004940:	f043 0304 	orr.w	r3, r3, #4
 8004944:	6713      	str	r3, [r2, #112]	; 0x70
 8004946:	4b5c      	ldr	r3, [pc, #368]	; (8004ab8 <HAL_RCC_OscConfig+0x470>)
 8004948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494a:	4a5b      	ldr	r2, [pc, #364]	; (8004ab8 <HAL_RCC_OscConfig+0x470>)
 800494c:	f043 0301 	orr.w	r3, r3, #1
 8004950:	6713      	str	r3, [r2, #112]	; 0x70
 8004952:	e00b      	b.n	800496c <HAL_RCC_OscConfig+0x324>
 8004954:	4b58      	ldr	r3, [pc, #352]	; (8004ab8 <HAL_RCC_OscConfig+0x470>)
 8004956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004958:	4a57      	ldr	r2, [pc, #348]	; (8004ab8 <HAL_RCC_OscConfig+0x470>)
 800495a:	f023 0301 	bic.w	r3, r3, #1
 800495e:	6713      	str	r3, [r2, #112]	; 0x70
 8004960:	4b55      	ldr	r3, [pc, #340]	; (8004ab8 <HAL_RCC_OscConfig+0x470>)
 8004962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004964:	4a54      	ldr	r2, [pc, #336]	; (8004ab8 <HAL_RCC_OscConfig+0x470>)
 8004966:	f023 0304 	bic.w	r3, r3, #4
 800496a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d015      	beq.n	80049a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004974:	f7fd fff4 	bl	8002960 <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800497a:	e00a      	b.n	8004992 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800497c:	f7fd fff0 	bl	8002960 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	f241 3288 	movw	r2, #5000	; 0x1388
 800498a:	4293      	cmp	r3, r2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e0cb      	b.n	8004b2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004992:	4b49      	ldr	r3, [pc, #292]	; (8004ab8 <HAL_RCC_OscConfig+0x470>)
 8004994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d0ee      	beq.n	800497c <HAL_RCC_OscConfig+0x334>
 800499e:	e014      	b.n	80049ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049a0:	f7fd ffde 	bl	8002960 <HAL_GetTick>
 80049a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049a6:	e00a      	b.n	80049be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049a8:	f7fd ffda 	bl	8002960 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d901      	bls.n	80049be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e0b5      	b.n	8004b2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049be:	4b3e      	ldr	r3, [pc, #248]	; (8004ab8 <HAL_RCC_OscConfig+0x470>)
 80049c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1ee      	bne.n	80049a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049ca:	7dfb      	ldrb	r3, [r7, #23]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d105      	bne.n	80049dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049d0:	4b39      	ldr	r3, [pc, #228]	; (8004ab8 <HAL_RCC_OscConfig+0x470>)
 80049d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d4:	4a38      	ldr	r2, [pc, #224]	; (8004ab8 <HAL_RCC_OscConfig+0x470>)
 80049d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f000 80a1 	beq.w	8004b28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049e6:	4b34      	ldr	r3, [pc, #208]	; (8004ab8 <HAL_RCC_OscConfig+0x470>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f003 030c 	and.w	r3, r3, #12
 80049ee:	2b08      	cmp	r3, #8
 80049f0:	d05c      	beq.n	8004aac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d141      	bne.n	8004a7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049fa:	4b31      	ldr	r3, [pc, #196]	; (8004ac0 <HAL_RCC_OscConfig+0x478>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a00:	f7fd ffae 	bl	8002960 <HAL_GetTick>
 8004a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a06:	e008      	b.n	8004a1a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a08:	f7fd ffaa 	bl	8002960 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e087      	b.n	8004b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a1a:	4b27      	ldr	r3, [pc, #156]	; (8004ab8 <HAL_RCC_OscConfig+0x470>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1f0      	bne.n	8004a08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	69da      	ldr	r2, [r3, #28]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a34:	019b      	lsls	r3, r3, #6
 8004a36:	431a      	orrs	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3c:	085b      	lsrs	r3, r3, #1
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	041b      	lsls	r3, r3, #16
 8004a42:	431a      	orrs	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a48:	061b      	lsls	r3, r3, #24
 8004a4a:	491b      	ldr	r1, [pc, #108]	; (8004ab8 <HAL_RCC_OscConfig+0x470>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a50:	4b1b      	ldr	r3, [pc, #108]	; (8004ac0 <HAL_RCC_OscConfig+0x478>)
 8004a52:	2201      	movs	r2, #1
 8004a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a56:	f7fd ff83 	bl	8002960 <HAL_GetTick>
 8004a5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a5c:	e008      	b.n	8004a70 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a5e:	f7fd ff7f 	bl	8002960 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d901      	bls.n	8004a70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e05c      	b.n	8004b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a70:	4b11      	ldr	r3, [pc, #68]	; (8004ab8 <HAL_RCC_OscConfig+0x470>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d0f0      	beq.n	8004a5e <HAL_RCC_OscConfig+0x416>
 8004a7c:	e054      	b.n	8004b28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a7e:	4b10      	ldr	r3, [pc, #64]	; (8004ac0 <HAL_RCC_OscConfig+0x478>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a84:	f7fd ff6c 	bl	8002960 <HAL_GetTick>
 8004a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a8a:	e008      	b.n	8004a9e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a8c:	f7fd ff68 	bl	8002960 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e045      	b.n	8004b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a9e:	4b06      	ldr	r3, [pc, #24]	; (8004ab8 <HAL_RCC_OscConfig+0x470>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1f0      	bne.n	8004a8c <HAL_RCC_OscConfig+0x444>
 8004aaa:	e03d      	b.n	8004b28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d107      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e038      	b.n	8004b2a <HAL_RCC_OscConfig+0x4e2>
 8004ab8:	40023800 	.word	0x40023800
 8004abc:	40007000 	.word	0x40007000
 8004ac0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ac4:	4b1b      	ldr	r3, [pc, #108]	; (8004b34 <HAL_RCC_OscConfig+0x4ec>)
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d028      	beq.n	8004b24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d121      	bne.n	8004b24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d11a      	bne.n	8004b24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004af4:	4013      	ands	r3, r2
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004afa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d111      	bne.n	8004b24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0a:	085b      	lsrs	r3, r3, #1
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d107      	bne.n	8004b24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d001      	beq.n	8004b28 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e000      	b.n	8004b2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3718      	adds	r7, #24
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	40023800 	.word	0x40023800

08004b38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e0cc      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b4c:	4b68      	ldr	r3, [pc, #416]	; (8004cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0307 	and.w	r3, r3, #7
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d90c      	bls.n	8004b74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b5a:	4b65      	ldr	r3, [pc, #404]	; (8004cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	b2d2      	uxtb	r2, r2
 8004b60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b62:	4b63      	ldr	r3, [pc, #396]	; (8004cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0307 	and.w	r3, r3, #7
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d001      	beq.n	8004b74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e0b8      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d020      	beq.n	8004bc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0304 	and.w	r3, r3, #4
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d005      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b8c:	4b59      	ldr	r3, [pc, #356]	; (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	4a58      	ldr	r2, [pc, #352]	; (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0308 	and.w	r3, r3, #8
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d005      	beq.n	8004bb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ba4:	4b53      	ldr	r3, [pc, #332]	; (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	4a52      	ldr	r2, [pc, #328]	; (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004baa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004bae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bb0:	4b50      	ldr	r3, [pc, #320]	; (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	494d      	ldr	r1, [pc, #308]	; (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d044      	beq.n	8004c58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d107      	bne.n	8004be6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bd6:	4b47      	ldr	r3, [pc, #284]	; (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d119      	bne.n	8004c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e07f      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d003      	beq.n	8004bf6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bf2:	2b03      	cmp	r3, #3
 8004bf4:	d107      	bne.n	8004c06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bf6:	4b3f      	ldr	r3, [pc, #252]	; (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d109      	bne.n	8004c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e06f      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c06:	4b3b      	ldr	r3, [pc, #236]	; (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e067      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c16:	4b37      	ldr	r3, [pc, #220]	; (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f023 0203 	bic.w	r2, r3, #3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	4934      	ldr	r1, [pc, #208]	; (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c28:	f7fd fe9a 	bl	8002960 <HAL_GetTick>
 8004c2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c2e:	e00a      	b.n	8004c46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c30:	f7fd fe96 	bl	8002960 <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e04f      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c46:	4b2b      	ldr	r3, [pc, #172]	; (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f003 020c 	and.w	r2, r3, #12
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d1eb      	bne.n	8004c30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c58:	4b25      	ldr	r3, [pc, #148]	; (8004cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0307 	and.w	r3, r3, #7
 8004c60:	683a      	ldr	r2, [r7, #0]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d20c      	bcs.n	8004c80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c66:	4b22      	ldr	r3, [pc, #136]	; (8004cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c68:	683a      	ldr	r2, [r7, #0]
 8004c6a:	b2d2      	uxtb	r2, r2
 8004c6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c6e:	4b20      	ldr	r3, [pc, #128]	; (8004cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0307 	and.w	r3, r3, #7
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d001      	beq.n	8004c80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e032      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0304 	and.w	r3, r3, #4
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d008      	beq.n	8004c9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c8c:	4b19      	ldr	r3, [pc, #100]	; (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	4916      	ldr	r1, [pc, #88]	; (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0308 	and.w	r3, r3, #8
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d009      	beq.n	8004cbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004caa:	4b12      	ldr	r3, [pc, #72]	; (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	00db      	lsls	r3, r3, #3
 8004cb8:	490e      	ldr	r1, [pc, #56]	; (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004cbe:	f000 f821 	bl	8004d04 <HAL_RCC_GetSysClockFreq>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	4b0b      	ldr	r3, [pc, #44]	; (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	091b      	lsrs	r3, r3, #4
 8004cca:	f003 030f 	and.w	r3, r3, #15
 8004cce:	490a      	ldr	r1, [pc, #40]	; (8004cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8004cd0:	5ccb      	ldrb	r3, [r1, r3]
 8004cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8004cd6:	4a09      	ldr	r2, [pc, #36]	; (8004cfc <HAL_RCC_ClockConfig+0x1c4>)
 8004cd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004cda:	4b09      	ldr	r3, [pc, #36]	; (8004d00 <HAL_RCC_ClockConfig+0x1c8>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7fd fdfa 	bl	80028d8 <HAL_InitTick>

  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	40023c00 	.word	0x40023c00
 8004cf4:	40023800 	.word	0x40023800
 8004cf8:	080068f8 	.word	0x080068f8
 8004cfc:	20000000 	.word	0x20000000
 8004d00:	20000004 	.word	0x20000004

08004d04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d08:	b090      	sub	sp, #64	; 0x40
 8004d0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	637b      	str	r3, [r7, #52]	; 0x34
 8004d10:	2300      	movs	r3, #0
 8004d12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d14:	2300      	movs	r3, #0
 8004d16:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d1c:	4b59      	ldr	r3, [pc, #356]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f003 030c 	and.w	r3, r3, #12
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	d00d      	beq.n	8004d44 <HAL_RCC_GetSysClockFreq+0x40>
 8004d28:	2b08      	cmp	r3, #8
 8004d2a:	f200 80a1 	bhi.w	8004e70 <HAL_RCC_GetSysClockFreq+0x16c>
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <HAL_RCC_GetSysClockFreq+0x34>
 8004d32:	2b04      	cmp	r3, #4
 8004d34:	d003      	beq.n	8004d3e <HAL_RCC_GetSysClockFreq+0x3a>
 8004d36:	e09b      	b.n	8004e70 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d38:	4b53      	ldr	r3, [pc, #332]	; (8004e88 <HAL_RCC_GetSysClockFreq+0x184>)
 8004d3a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004d3c:	e09b      	b.n	8004e76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d3e:	4b53      	ldr	r3, [pc, #332]	; (8004e8c <HAL_RCC_GetSysClockFreq+0x188>)
 8004d40:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d42:	e098      	b.n	8004e76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d44:	4b4f      	ldr	r3, [pc, #316]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d4c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d4e:	4b4d      	ldr	r3, [pc, #308]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d028      	beq.n	8004dac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d5a:	4b4a      	ldr	r3, [pc, #296]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	099b      	lsrs	r3, r3, #6
 8004d60:	2200      	movs	r2, #0
 8004d62:	623b      	str	r3, [r7, #32]
 8004d64:	627a      	str	r2, [r7, #36]	; 0x24
 8004d66:	6a3b      	ldr	r3, [r7, #32]
 8004d68:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	4b47      	ldr	r3, [pc, #284]	; (8004e8c <HAL_RCC_GetSysClockFreq+0x188>)
 8004d70:	fb03 f201 	mul.w	r2, r3, r1
 8004d74:	2300      	movs	r3, #0
 8004d76:	fb00 f303 	mul.w	r3, r0, r3
 8004d7a:	4413      	add	r3, r2
 8004d7c:	4a43      	ldr	r2, [pc, #268]	; (8004e8c <HAL_RCC_GetSysClockFreq+0x188>)
 8004d7e:	fba0 1202 	umull	r1, r2, r0, r2
 8004d82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d84:	460a      	mov	r2, r1
 8004d86:	62ba      	str	r2, [r7, #40]	; 0x28
 8004d88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d8a:	4413      	add	r3, r2
 8004d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d90:	2200      	movs	r2, #0
 8004d92:	61bb      	str	r3, [r7, #24]
 8004d94:	61fa      	str	r2, [r7, #28]
 8004d96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d9a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004d9e:	f7fb fee9 	bl	8000b74 <__aeabi_uldivmod>
 8004da2:	4602      	mov	r2, r0
 8004da4:	460b      	mov	r3, r1
 8004da6:	4613      	mov	r3, r2
 8004da8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004daa:	e053      	b.n	8004e54 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dac:	4b35      	ldr	r3, [pc, #212]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x180>)
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	099b      	lsrs	r3, r3, #6
 8004db2:	2200      	movs	r2, #0
 8004db4:	613b      	str	r3, [r7, #16]
 8004db6:	617a      	str	r2, [r7, #20]
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004dbe:	f04f 0b00 	mov.w	fp, #0
 8004dc2:	4652      	mov	r2, sl
 8004dc4:	465b      	mov	r3, fp
 8004dc6:	f04f 0000 	mov.w	r0, #0
 8004dca:	f04f 0100 	mov.w	r1, #0
 8004dce:	0159      	lsls	r1, r3, #5
 8004dd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dd4:	0150      	lsls	r0, r2, #5
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	460b      	mov	r3, r1
 8004dda:	ebb2 080a 	subs.w	r8, r2, sl
 8004dde:	eb63 090b 	sbc.w	r9, r3, fp
 8004de2:	f04f 0200 	mov.w	r2, #0
 8004de6:	f04f 0300 	mov.w	r3, #0
 8004dea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004dee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004df2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004df6:	ebb2 0408 	subs.w	r4, r2, r8
 8004dfa:	eb63 0509 	sbc.w	r5, r3, r9
 8004dfe:	f04f 0200 	mov.w	r2, #0
 8004e02:	f04f 0300 	mov.w	r3, #0
 8004e06:	00eb      	lsls	r3, r5, #3
 8004e08:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e0c:	00e2      	lsls	r2, r4, #3
 8004e0e:	4614      	mov	r4, r2
 8004e10:	461d      	mov	r5, r3
 8004e12:	eb14 030a 	adds.w	r3, r4, sl
 8004e16:	603b      	str	r3, [r7, #0]
 8004e18:	eb45 030b 	adc.w	r3, r5, fp
 8004e1c:	607b      	str	r3, [r7, #4]
 8004e1e:	f04f 0200 	mov.w	r2, #0
 8004e22:	f04f 0300 	mov.w	r3, #0
 8004e26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e2a:	4629      	mov	r1, r5
 8004e2c:	028b      	lsls	r3, r1, #10
 8004e2e:	4621      	mov	r1, r4
 8004e30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e34:	4621      	mov	r1, r4
 8004e36:	028a      	lsls	r2, r1, #10
 8004e38:	4610      	mov	r0, r2
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e3e:	2200      	movs	r2, #0
 8004e40:	60bb      	str	r3, [r7, #8]
 8004e42:	60fa      	str	r2, [r7, #12]
 8004e44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e48:	f7fb fe94 	bl	8000b74 <__aeabi_uldivmod>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	460b      	mov	r3, r1
 8004e50:	4613      	mov	r3, r2
 8004e52:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e54:	4b0b      	ldr	r3, [pc, #44]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	0c1b      	lsrs	r3, r3, #16
 8004e5a:	f003 0303 	and.w	r3, r3, #3
 8004e5e:	3301      	adds	r3, #1
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004e64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e6c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004e6e:	e002      	b.n	8004e76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e70:	4b05      	ldr	r3, [pc, #20]	; (8004e88 <HAL_RCC_GetSysClockFreq+0x184>)
 8004e72:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004e74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3740      	adds	r7, #64	; 0x40
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e82:	bf00      	nop
 8004e84:	40023800 	.word	0x40023800
 8004e88:	00f42400 	.word	0x00f42400
 8004e8c:	017d7840 	.word	0x017d7840

08004e90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e94:	4b03      	ldr	r3, [pc, #12]	; (8004ea4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e96:	681b      	ldr	r3, [r3, #0]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	20000000 	.word	0x20000000

08004ea8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004eac:	f7ff fff0 	bl	8004e90 <HAL_RCC_GetHCLKFreq>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	4b05      	ldr	r3, [pc, #20]	; (8004ec8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	0a9b      	lsrs	r3, r3, #10
 8004eb8:	f003 0307 	and.w	r3, r3, #7
 8004ebc:	4903      	ldr	r1, [pc, #12]	; (8004ecc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ebe:	5ccb      	ldrb	r3, [r1, r3]
 8004ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	40023800 	.word	0x40023800
 8004ecc:	08006908 	.word	0x08006908

08004ed0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e07b      	b.n	8004fda <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d108      	bne.n	8004efc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ef2:	d009      	beq.n	8004f08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	61da      	str	r2, [r3, #28]
 8004efa:	e005      	b.n	8004f08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d106      	bne.n	8004f28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7fd fb90 	bl	8002648 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f3e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f50:	431a      	orrs	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	431a      	orrs	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f78:	431a      	orrs	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	69db      	ldr	r3, [r3, #28]
 8004f7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f82:	431a      	orrs	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a1b      	ldr	r3, [r3, #32]
 8004f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f8c:	ea42 0103 	orr.w	r1, r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f94:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	0c1b      	lsrs	r3, r3, #16
 8004fa6:	f003 0104 	and.w	r1, r3, #4
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fae:	f003 0210 	and.w	r2, r3, #16
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	69da      	ldr	r2, [r3, #28]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fc8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
	...

08004fe4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d101      	bne.n	8005004 <HAL_SPI_Transmit_DMA+0x20>
 8005000:	2302      	movs	r3, #2
 8005002:	e097      	b.n	8005134 <HAL_SPI_Transmit_DMA+0x150>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005012:	b2db      	uxtb	r3, r3
 8005014:	2b01      	cmp	r3, #1
 8005016:	d002      	beq.n	800501e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005018:	2302      	movs	r3, #2
 800501a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800501c:	e085      	b.n	800512a <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d002      	beq.n	800502a <HAL_SPI_Transmit_DMA+0x46>
 8005024:	88fb      	ldrh	r3, [r7, #6]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d102      	bne.n	8005030 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800502e:	e07c      	b.n	800512a <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2203      	movs	r2, #3
 8005034:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	88fa      	ldrh	r2, [r7, #6]
 8005048:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	88fa      	ldrh	r2, [r7, #6]
 800504e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005076:	d10f      	bne.n	8005098 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005086:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005096:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800509c:	4a27      	ldr	r2, [pc, #156]	; (800513c <HAL_SPI_Transmit_DMA+0x158>)
 800509e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050a4:	4a26      	ldr	r2, [pc, #152]	; (8005140 <HAL_SPI_Transmit_DMA+0x15c>)
 80050a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050ac:	4a25      	ldr	r2, [pc, #148]	; (8005144 <HAL_SPI_Transmit_DMA+0x160>)
 80050ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050b4:	2200      	movs	r2, #0
 80050b6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c0:	4619      	mov	r1, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	330c      	adds	r3, #12
 80050c8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050ce:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80050d0:	f7fd fe36 	bl	8002d40 <HAL_DMA_Start_IT>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d008      	beq.n	80050ec <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050de:	f043 0210 	orr.w	r2, r3, #16
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	75fb      	strb	r3, [r7, #23]

    goto error;
 80050ea:	e01e      	b.n	800512a <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f6:	2b40      	cmp	r3, #64	; 0x40
 80050f8:	d007      	beq.n	800510a <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005108:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f042 0220 	orr.w	r2, r2, #32
 8005118:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f042 0202 	orr.w	r2, r2, #2
 8005128:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005132:	7dfb      	ldrb	r3, [r7, #23]
}
 8005134:	4618      	mov	r0, r3
 8005136:	3718      	adds	r7, #24
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	08005249 	.word	0x08005249
 8005140:	080051a1 	.word	0x080051a1
 8005144:	08005265 	.word	0x08005265

08005148 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8005150:	bf00      	nop
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005192:	b2db      	uxtb	r3, r3
}
 8005194:	4618      	mov	r0, r3
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ac:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051ae:	f7fd fbd7 	bl	8002960 <HAL_GetTick>
 80051b2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051c2:	d03b      	beq.n	800523c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f022 0220 	bic.w	r2, r2, #32
 80051d2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f022 0202 	bic.w	r2, r2, #2
 80051e2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	2164      	movs	r1, #100	; 0x64
 80051e8:	6978      	ldr	r0, [r7, #20]
 80051ea:	f000 f8e3 	bl	80053b4 <SPI_EndRxTxTransaction>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d005      	beq.n	8005200 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051f8:	f043 0220 	orr.w	r2, r3, #32
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d10a      	bne.n	800521e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005208:	2300      	movs	r3, #0
 800520a:	60fb      	str	r3, [r7, #12]
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	60fb      	str	r3, [r7, #12]
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	60fb      	str	r3, [r7, #12]
 800521c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	2200      	movs	r2, #0
 8005222:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005230:	2b00      	cmp	r3, #0
 8005232:	d003      	beq.n	800523c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005234:	6978      	ldr	r0, [r7, #20]
 8005236:	f7ff ff9b 	bl	8005170 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800523a:	e002      	b.n	8005242 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800523c:	6978      	ldr	r0, [r7, #20]
 800523e:	f7ff ff83 	bl	8005148 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005242:	3718      	adds	r7, #24
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005254:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f7ff ff80 	bl	800515c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800525c:	bf00      	nop
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005270:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	685a      	ldr	r2, [r3, #4]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 0203 	bic.w	r2, r2, #3
 8005280:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005286:	f043 0210 	orr.w	r2, r3, #16
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f7ff ff6a 	bl	8005170 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800529c:	bf00      	nop
 800529e:	3710      	adds	r7, #16
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b088      	sub	sp, #32
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	603b      	str	r3, [r7, #0]
 80052b0:	4613      	mov	r3, r2
 80052b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80052b4:	f7fd fb54 	bl	8002960 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052bc:	1a9b      	subs	r3, r3, r2
 80052be:	683a      	ldr	r2, [r7, #0]
 80052c0:	4413      	add	r3, r2
 80052c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80052c4:	f7fd fb4c 	bl	8002960 <HAL_GetTick>
 80052c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80052ca:	4b39      	ldr	r3, [pc, #228]	; (80053b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	015b      	lsls	r3, r3, #5
 80052d0:	0d1b      	lsrs	r3, r3, #20
 80052d2:	69fa      	ldr	r2, [r7, #28]
 80052d4:	fb02 f303 	mul.w	r3, r2, r3
 80052d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052da:	e054      	b.n	8005386 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e2:	d050      	beq.n	8005386 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80052e4:	f7fd fb3c 	bl	8002960 <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	69fa      	ldr	r2, [r7, #28]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d902      	bls.n	80052fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d13d      	bne.n	8005376 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005308:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005312:	d111      	bne.n	8005338 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800531c:	d004      	beq.n	8005328 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005326:	d107      	bne.n	8005338 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005336:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800533c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005340:	d10f      	bne.n	8005362 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005350:	601a      	str	r2, [r3, #0]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005360:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2201      	movs	r2, #1
 8005366:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e017      	b.n	80053a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d101      	bne.n	8005380 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800537c:	2300      	movs	r3, #0
 800537e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	3b01      	subs	r3, #1
 8005384:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	689a      	ldr	r2, [r3, #8]
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	4013      	ands	r3, r2
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	429a      	cmp	r2, r3
 8005394:	bf0c      	ite	eq
 8005396:	2301      	moveq	r3, #1
 8005398:	2300      	movne	r3, #0
 800539a:	b2db      	uxtb	r3, r3
 800539c:	461a      	mov	r2, r3
 800539e:	79fb      	ldrb	r3, [r7, #7]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d19b      	bne.n	80052dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3720      	adds	r7, #32
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	20000000 	.word	0x20000000

080053b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b088      	sub	sp, #32
 80053b8:	af02      	add	r7, sp, #8
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	2201      	movs	r2, #1
 80053c8:	2102      	movs	r1, #2
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f7ff ff6a 	bl	80052a4 <SPI_WaitFlagStateUntilTimeout>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d007      	beq.n	80053e6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053da:	f043 0220 	orr.w	r2, r3, #32
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e032      	b.n	800544c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80053e6:	4b1b      	ldr	r3, [pc, #108]	; (8005454 <SPI_EndRxTxTransaction+0xa0>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a1b      	ldr	r2, [pc, #108]	; (8005458 <SPI_EndRxTxTransaction+0xa4>)
 80053ec:	fba2 2303 	umull	r2, r3, r2, r3
 80053f0:	0d5b      	lsrs	r3, r3, #21
 80053f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80053f6:	fb02 f303 	mul.w	r3, r2, r3
 80053fa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005404:	d112      	bne.n	800542c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	9300      	str	r3, [sp, #0]
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	2200      	movs	r2, #0
 800540e:	2180      	movs	r1, #128	; 0x80
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f7ff ff47 	bl	80052a4 <SPI_WaitFlagStateUntilTimeout>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d016      	beq.n	800544a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005420:	f043 0220 	orr.w	r2, r3, #32
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e00f      	b.n	800544c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00a      	beq.n	8005448 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	3b01      	subs	r3, #1
 8005436:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005442:	2b80      	cmp	r3, #128	; 0x80
 8005444:	d0f2      	beq.n	800542c <SPI_EndRxTxTransaction+0x78>
 8005446:	e000      	b.n	800544a <SPI_EndRxTxTransaction+0x96>
        break;
 8005448:	bf00      	nop
  }

  return HAL_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3718      	adds	r7, #24
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	20000000 	.word	0x20000000
 8005458:	165e9f81 	.word	0x165e9f81

0800545c <memset>:
 800545c:	4402      	add	r2, r0
 800545e:	4603      	mov	r3, r0
 8005460:	4293      	cmp	r3, r2
 8005462:	d100      	bne.n	8005466 <memset+0xa>
 8005464:	4770      	bx	lr
 8005466:	f803 1b01 	strb.w	r1, [r3], #1
 800546a:	e7f9      	b.n	8005460 <memset+0x4>

0800546c <__libc_init_array>:
 800546c:	b570      	push	{r4, r5, r6, lr}
 800546e:	4d0d      	ldr	r5, [pc, #52]	; (80054a4 <__libc_init_array+0x38>)
 8005470:	4c0d      	ldr	r4, [pc, #52]	; (80054a8 <__libc_init_array+0x3c>)
 8005472:	1b64      	subs	r4, r4, r5
 8005474:	10a4      	asrs	r4, r4, #2
 8005476:	2600      	movs	r6, #0
 8005478:	42a6      	cmp	r6, r4
 800547a:	d109      	bne.n	8005490 <__libc_init_array+0x24>
 800547c:	4d0b      	ldr	r5, [pc, #44]	; (80054ac <__libc_init_array+0x40>)
 800547e:	4c0c      	ldr	r4, [pc, #48]	; (80054b0 <__libc_init_array+0x44>)
 8005480:	f001 fa2e 	bl	80068e0 <_init>
 8005484:	1b64      	subs	r4, r4, r5
 8005486:	10a4      	asrs	r4, r4, #2
 8005488:	2600      	movs	r6, #0
 800548a:	42a6      	cmp	r6, r4
 800548c:	d105      	bne.n	800549a <__libc_init_array+0x2e>
 800548e:	bd70      	pop	{r4, r5, r6, pc}
 8005490:	f855 3b04 	ldr.w	r3, [r5], #4
 8005494:	4798      	blx	r3
 8005496:	3601      	adds	r6, #1
 8005498:	e7ee      	b.n	8005478 <__libc_init_array+0xc>
 800549a:	f855 3b04 	ldr.w	r3, [r5], #4
 800549e:	4798      	blx	r3
 80054a0:	3601      	adds	r6, #1
 80054a2:	e7f2      	b.n	800548a <__libc_init_array+0x1e>
 80054a4:	08006b30 	.word	0x08006b30
 80054a8:	08006b30 	.word	0x08006b30
 80054ac:	08006b30 	.word	0x08006b30
 80054b0:	08006b34 	.word	0x08006b34
 80054b4:	00000000 	.word	0x00000000

080054b8 <cos>:
 80054b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80054ba:	ec53 2b10 	vmov	r2, r3, d0
 80054be:	4826      	ldr	r0, [pc, #152]	; (8005558 <cos+0xa0>)
 80054c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80054c4:	4281      	cmp	r1, r0
 80054c6:	dc06      	bgt.n	80054d6 <cos+0x1e>
 80054c8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8005550 <cos+0x98>
 80054cc:	b005      	add	sp, #20
 80054ce:	f85d eb04 	ldr.w	lr, [sp], #4
 80054d2:	f000 b8a1 	b.w	8005618 <__kernel_cos>
 80054d6:	4821      	ldr	r0, [pc, #132]	; (800555c <cos+0xa4>)
 80054d8:	4281      	cmp	r1, r0
 80054da:	dd09      	ble.n	80054f0 <cos+0x38>
 80054dc:	ee10 0a10 	vmov	r0, s0
 80054e0:	4619      	mov	r1, r3
 80054e2:	f7fa fe7d 	bl	80001e0 <__aeabi_dsub>
 80054e6:	ec41 0b10 	vmov	d0, r0, r1
 80054ea:	b005      	add	sp, #20
 80054ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80054f0:	4668      	mov	r0, sp
 80054f2:	f000 fa19 	bl	8005928 <__ieee754_rem_pio2>
 80054f6:	f000 0003 	and.w	r0, r0, #3
 80054fa:	2801      	cmp	r0, #1
 80054fc:	d00b      	beq.n	8005516 <cos+0x5e>
 80054fe:	2802      	cmp	r0, #2
 8005500:	d016      	beq.n	8005530 <cos+0x78>
 8005502:	b9e0      	cbnz	r0, 800553e <cos+0x86>
 8005504:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005508:	ed9d 0b00 	vldr	d0, [sp]
 800550c:	f000 f884 	bl	8005618 <__kernel_cos>
 8005510:	ec51 0b10 	vmov	r0, r1, d0
 8005514:	e7e7      	b.n	80054e6 <cos+0x2e>
 8005516:	ed9d 1b02 	vldr	d1, [sp, #8]
 800551a:	ed9d 0b00 	vldr	d0, [sp]
 800551e:	f000 f943 	bl	80057a8 <__kernel_sin>
 8005522:	ec53 2b10 	vmov	r2, r3, d0
 8005526:	ee10 0a10 	vmov	r0, s0
 800552a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800552e:	e7da      	b.n	80054e6 <cos+0x2e>
 8005530:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005534:	ed9d 0b00 	vldr	d0, [sp]
 8005538:	f000 f86e 	bl	8005618 <__kernel_cos>
 800553c:	e7f1      	b.n	8005522 <cos+0x6a>
 800553e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005542:	ed9d 0b00 	vldr	d0, [sp]
 8005546:	2001      	movs	r0, #1
 8005548:	f000 f92e 	bl	80057a8 <__kernel_sin>
 800554c:	e7e0      	b.n	8005510 <cos+0x58>
 800554e:	bf00      	nop
	...
 8005558:	3fe921fb 	.word	0x3fe921fb
 800555c:	7fefffff 	.word	0x7fefffff

08005560 <sin>:
 8005560:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005562:	ec53 2b10 	vmov	r2, r3, d0
 8005566:	4828      	ldr	r0, [pc, #160]	; (8005608 <sin+0xa8>)
 8005568:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800556c:	4281      	cmp	r1, r0
 800556e:	dc07      	bgt.n	8005580 <sin+0x20>
 8005570:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8005600 <sin+0xa0>
 8005574:	2000      	movs	r0, #0
 8005576:	b005      	add	sp, #20
 8005578:	f85d eb04 	ldr.w	lr, [sp], #4
 800557c:	f000 b914 	b.w	80057a8 <__kernel_sin>
 8005580:	4822      	ldr	r0, [pc, #136]	; (800560c <sin+0xac>)
 8005582:	4281      	cmp	r1, r0
 8005584:	dd09      	ble.n	800559a <sin+0x3a>
 8005586:	ee10 0a10 	vmov	r0, s0
 800558a:	4619      	mov	r1, r3
 800558c:	f7fa fe28 	bl	80001e0 <__aeabi_dsub>
 8005590:	ec41 0b10 	vmov	d0, r0, r1
 8005594:	b005      	add	sp, #20
 8005596:	f85d fb04 	ldr.w	pc, [sp], #4
 800559a:	4668      	mov	r0, sp
 800559c:	f000 f9c4 	bl	8005928 <__ieee754_rem_pio2>
 80055a0:	f000 0003 	and.w	r0, r0, #3
 80055a4:	2801      	cmp	r0, #1
 80055a6:	d00c      	beq.n	80055c2 <sin+0x62>
 80055a8:	2802      	cmp	r0, #2
 80055aa:	d011      	beq.n	80055d0 <sin+0x70>
 80055ac:	b9f0      	cbnz	r0, 80055ec <sin+0x8c>
 80055ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 80055b2:	ed9d 0b00 	vldr	d0, [sp]
 80055b6:	2001      	movs	r0, #1
 80055b8:	f000 f8f6 	bl	80057a8 <__kernel_sin>
 80055bc:	ec51 0b10 	vmov	r0, r1, d0
 80055c0:	e7e6      	b.n	8005590 <sin+0x30>
 80055c2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80055c6:	ed9d 0b00 	vldr	d0, [sp]
 80055ca:	f000 f825 	bl	8005618 <__kernel_cos>
 80055ce:	e7f5      	b.n	80055bc <sin+0x5c>
 80055d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80055d4:	ed9d 0b00 	vldr	d0, [sp]
 80055d8:	2001      	movs	r0, #1
 80055da:	f000 f8e5 	bl	80057a8 <__kernel_sin>
 80055de:	ec53 2b10 	vmov	r2, r3, d0
 80055e2:	ee10 0a10 	vmov	r0, s0
 80055e6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80055ea:	e7d1      	b.n	8005590 <sin+0x30>
 80055ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 80055f0:	ed9d 0b00 	vldr	d0, [sp]
 80055f4:	f000 f810 	bl	8005618 <__kernel_cos>
 80055f8:	e7f1      	b.n	80055de <sin+0x7e>
 80055fa:	bf00      	nop
 80055fc:	f3af 8000 	nop.w
	...
 8005608:	3fe921fb 	.word	0x3fe921fb
 800560c:	7fefffff 	.word	0x7fefffff

08005610 <atan2f>:
 8005610:	f000 bb9a 	b.w	8005d48 <__ieee754_atan2f>
 8005614:	0000      	movs	r0, r0
	...

08005618 <__kernel_cos>:
 8005618:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800561c:	ec57 6b10 	vmov	r6, r7, d0
 8005620:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8005624:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8005628:	ed8d 1b00 	vstr	d1, [sp]
 800562c:	da07      	bge.n	800563e <__kernel_cos+0x26>
 800562e:	ee10 0a10 	vmov	r0, s0
 8005632:	4639      	mov	r1, r7
 8005634:	f7fb fa26 	bl	8000a84 <__aeabi_d2iz>
 8005638:	2800      	cmp	r0, #0
 800563a:	f000 8088 	beq.w	800574e <__kernel_cos+0x136>
 800563e:	4632      	mov	r2, r6
 8005640:	463b      	mov	r3, r7
 8005642:	4630      	mov	r0, r6
 8005644:	4639      	mov	r1, r7
 8005646:	f7fa ff83 	bl	8000550 <__aeabi_dmul>
 800564a:	4b51      	ldr	r3, [pc, #324]	; (8005790 <__kernel_cos+0x178>)
 800564c:	2200      	movs	r2, #0
 800564e:	4604      	mov	r4, r0
 8005650:	460d      	mov	r5, r1
 8005652:	f7fa ff7d 	bl	8000550 <__aeabi_dmul>
 8005656:	a340      	add	r3, pc, #256	; (adr r3, 8005758 <__kernel_cos+0x140>)
 8005658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565c:	4682      	mov	sl, r0
 800565e:	468b      	mov	fp, r1
 8005660:	4620      	mov	r0, r4
 8005662:	4629      	mov	r1, r5
 8005664:	f7fa ff74 	bl	8000550 <__aeabi_dmul>
 8005668:	a33d      	add	r3, pc, #244	; (adr r3, 8005760 <__kernel_cos+0x148>)
 800566a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566e:	f7fa fdb9 	bl	80001e4 <__adddf3>
 8005672:	4622      	mov	r2, r4
 8005674:	462b      	mov	r3, r5
 8005676:	f7fa ff6b 	bl	8000550 <__aeabi_dmul>
 800567a:	a33b      	add	r3, pc, #236	; (adr r3, 8005768 <__kernel_cos+0x150>)
 800567c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005680:	f7fa fdae 	bl	80001e0 <__aeabi_dsub>
 8005684:	4622      	mov	r2, r4
 8005686:	462b      	mov	r3, r5
 8005688:	f7fa ff62 	bl	8000550 <__aeabi_dmul>
 800568c:	a338      	add	r3, pc, #224	; (adr r3, 8005770 <__kernel_cos+0x158>)
 800568e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005692:	f7fa fda7 	bl	80001e4 <__adddf3>
 8005696:	4622      	mov	r2, r4
 8005698:	462b      	mov	r3, r5
 800569a:	f7fa ff59 	bl	8000550 <__aeabi_dmul>
 800569e:	a336      	add	r3, pc, #216	; (adr r3, 8005778 <__kernel_cos+0x160>)
 80056a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a4:	f7fa fd9c 	bl	80001e0 <__aeabi_dsub>
 80056a8:	4622      	mov	r2, r4
 80056aa:	462b      	mov	r3, r5
 80056ac:	f7fa ff50 	bl	8000550 <__aeabi_dmul>
 80056b0:	a333      	add	r3, pc, #204	; (adr r3, 8005780 <__kernel_cos+0x168>)
 80056b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b6:	f7fa fd95 	bl	80001e4 <__adddf3>
 80056ba:	4622      	mov	r2, r4
 80056bc:	462b      	mov	r3, r5
 80056be:	f7fa ff47 	bl	8000550 <__aeabi_dmul>
 80056c2:	4622      	mov	r2, r4
 80056c4:	462b      	mov	r3, r5
 80056c6:	f7fa ff43 	bl	8000550 <__aeabi_dmul>
 80056ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80056ce:	4604      	mov	r4, r0
 80056d0:	460d      	mov	r5, r1
 80056d2:	4630      	mov	r0, r6
 80056d4:	4639      	mov	r1, r7
 80056d6:	f7fa ff3b 	bl	8000550 <__aeabi_dmul>
 80056da:	460b      	mov	r3, r1
 80056dc:	4602      	mov	r2, r0
 80056de:	4629      	mov	r1, r5
 80056e0:	4620      	mov	r0, r4
 80056e2:	f7fa fd7d 	bl	80001e0 <__aeabi_dsub>
 80056e6:	4b2b      	ldr	r3, [pc, #172]	; (8005794 <__kernel_cos+0x17c>)
 80056e8:	4598      	cmp	r8, r3
 80056ea:	4606      	mov	r6, r0
 80056ec:	460f      	mov	r7, r1
 80056ee:	dc10      	bgt.n	8005712 <__kernel_cos+0xfa>
 80056f0:	4602      	mov	r2, r0
 80056f2:	460b      	mov	r3, r1
 80056f4:	4650      	mov	r0, sl
 80056f6:	4659      	mov	r1, fp
 80056f8:	f7fa fd72 	bl	80001e0 <__aeabi_dsub>
 80056fc:	460b      	mov	r3, r1
 80056fe:	4926      	ldr	r1, [pc, #152]	; (8005798 <__kernel_cos+0x180>)
 8005700:	4602      	mov	r2, r0
 8005702:	2000      	movs	r0, #0
 8005704:	f7fa fd6c 	bl	80001e0 <__aeabi_dsub>
 8005708:	ec41 0b10 	vmov	d0, r0, r1
 800570c:	b003      	add	sp, #12
 800570e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005712:	4b22      	ldr	r3, [pc, #136]	; (800579c <__kernel_cos+0x184>)
 8005714:	4920      	ldr	r1, [pc, #128]	; (8005798 <__kernel_cos+0x180>)
 8005716:	4598      	cmp	r8, r3
 8005718:	bfcc      	ite	gt
 800571a:	4d21      	ldrgt	r5, [pc, #132]	; (80057a0 <__kernel_cos+0x188>)
 800571c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8005720:	2400      	movs	r4, #0
 8005722:	4622      	mov	r2, r4
 8005724:	462b      	mov	r3, r5
 8005726:	2000      	movs	r0, #0
 8005728:	f7fa fd5a 	bl	80001e0 <__aeabi_dsub>
 800572c:	4622      	mov	r2, r4
 800572e:	4680      	mov	r8, r0
 8005730:	4689      	mov	r9, r1
 8005732:	462b      	mov	r3, r5
 8005734:	4650      	mov	r0, sl
 8005736:	4659      	mov	r1, fp
 8005738:	f7fa fd52 	bl	80001e0 <__aeabi_dsub>
 800573c:	4632      	mov	r2, r6
 800573e:	463b      	mov	r3, r7
 8005740:	f7fa fd4e 	bl	80001e0 <__aeabi_dsub>
 8005744:	4602      	mov	r2, r0
 8005746:	460b      	mov	r3, r1
 8005748:	4640      	mov	r0, r8
 800574a:	4649      	mov	r1, r9
 800574c:	e7da      	b.n	8005704 <__kernel_cos+0xec>
 800574e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8005788 <__kernel_cos+0x170>
 8005752:	e7db      	b.n	800570c <__kernel_cos+0xf4>
 8005754:	f3af 8000 	nop.w
 8005758:	be8838d4 	.word	0xbe8838d4
 800575c:	bda8fae9 	.word	0xbda8fae9
 8005760:	bdb4b1c4 	.word	0xbdb4b1c4
 8005764:	3e21ee9e 	.word	0x3e21ee9e
 8005768:	809c52ad 	.word	0x809c52ad
 800576c:	3e927e4f 	.word	0x3e927e4f
 8005770:	19cb1590 	.word	0x19cb1590
 8005774:	3efa01a0 	.word	0x3efa01a0
 8005778:	16c15177 	.word	0x16c15177
 800577c:	3f56c16c 	.word	0x3f56c16c
 8005780:	5555554c 	.word	0x5555554c
 8005784:	3fa55555 	.word	0x3fa55555
 8005788:	00000000 	.word	0x00000000
 800578c:	3ff00000 	.word	0x3ff00000
 8005790:	3fe00000 	.word	0x3fe00000
 8005794:	3fd33332 	.word	0x3fd33332
 8005798:	3ff00000 	.word	0x3ff00000
 800579c:	3fe90000 	.word	0x3fe90000
 80057a0:	3fd20000 	.word	0x3fd20000
 80057a4:	00000000 	.word	0x00000000

080057a8 <__kernel_sin>:
 80057a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ac:	ed2d 8b04 	vpush	{d8-d9}
 80057b0:	eeb0 8a41 	vmov.f32	s16, s2
 80057b4:	eef0 8a61 	vmov.f32	s17, s3
 80057b8:	ec55 4b10 	vmov	r4, r5, d0
 80057bc:	b083      	sub	sp, #12
 80057be:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80057c2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80057c6:	9001      	str	r0, [sp, #4]
 80057c8:	da06      	bge.n	80057d8 <__kernel_sin+0x30>
 80057ca:	ee10 0a10 	vmov	r0, s0
 80057ce:	4629      	mov	r1, r5
 80057d0:	f7fb f958 	bl	8000a84 <__aeabi_d2iz>
 80057d4:	2800      	cmp	r0, #0
 80057d6:	d051      	beq.n	800587c <__kernel_sin+0xd4>
 80057d8:	4622      	mov	r2, r4
 80057da:	462b      	mov	r3, r5
 80057dc:	4620      	mov	r0, r4
 80057de:	4629      	mov	r1, r5
 80057e0:	f7fa feb6 	bl	8000550 <__aeabi_dmul>
 80057e4:	4682      	mov	sl, r0
 80057e6:	468b      	mov	fp, r1
 80057e8:	4602      	mov	r2, r0
 80057ea:	460b      	mov	r3, r1
 80057ec:	4620      	mov	r0, r4
 80057ee:	4629      	mov	r1, r5
 80057f0:	f7fa feae 	bl	8000550 <__aeabi_dmul>
 80057f4:	a341      	add	r3, pc, #260	; (adr r3, 80058fc <__kernel_sin+0x154>)
 80057f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fa:	4680      	mov	r8, r0
 80057fc:	4689      	mov	r9, r1
 80057fe:	4650      	mov	r0, sl
 8005800:	4659      	mov	r1, fp
 8005802:	f7fa fea5 	bl	8000550 <__aeabi_dmul>
 8005806:	a33f      	add	r3, pc, #252	; (adr r3, 8005904 <__kernel_sin+0x15c>)
 8005808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580c:	f7fa fce8 	bl	80001e0 <__aeabi_dsub>
 8005810:	4652      	mov	r2, sl
 8005812:	465b      	mov	r3, fp
 8005814:	f7fa fe9c 	bl	8000550 <__aeabi_dmul>
 8005818:	a33c      	add	r3, pc, #240	; (adr r3, 800590c <__kernel_sin+0x164>)
 800581a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581e:	f7fa fce1 	bl	80001e4 <__adddf3>
 8005822:	4652      	mov	r2, sl
 8005824:	465b      	mov	r3, fp
 8005826:	f7fa fe93 	bl	8000550 <__aeabi_dmul>
 800582a:	a33a      	add	r3, pc, #232	; (adr r3, 8005914 <__kernel_sin+0x16c>)
 800582c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005830:	f7fa fcd6 	bl	80001e0 <__aeabi_dsub>
 8005834:	4652      	mov	r2, sl
 8005836:	465b      	mov	r3, fp
 8005838:	f7fa fe8a 	bl	8000550 <__aeabi_dmul>
 800583c:	a337      	add	r3, pc, #220	; (adr r3, 800591c <__kernel_sin+0x174>)
 800583e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005842:	f7fa fccf 	bl	80001e4 <__adddf3>
 8005846:	9b01      	ldr	r3, [sp, #4]
 8005848:	4606      	mov	r6, r0
 800584a:	460f      	mov	r7, r1
 800584c:	b9eb      	cbnz	r3, 800588a <__kernel_sin+0xe2>
 800584e:	4602      	mov	r2, r0
 8005850:	460b      	mov	r3, r1
 8005852:	4650      	mov	r0, sl
 8005854:	4659      	mov	r1, fp
 8005856:	f7fa fe7b 	bl	8000550 <__aeabi_dmul>
 800585a:	a325      	add	r3, pc, #148	; (adr r3, 80058f0 <__kernel_sin+0x148>)
 800585c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005860:	f7fa fcbe 	bl	80001e0 <__aeabi_dsub>
 8005864:	4642      	mov	r2, r8
 8005866:	464b      	mov	r3, r9
 8005868:	f7fa fe72 	bl	8000550 <__aeabi_dmul>
 800586c:	4602      	mov	r2, r0
 800586e:	460b      	mov	r3, r1
 8005870:	4620      	mov	r0, r4
 8005872:	4629      	mov	r1, r5
 8005874:	f7fa fcb6 	bl	80001e4 <__adddf3>
 8005878:	4604      	mov	r4, r0
 800587a:	460d      	mov	r5, r1
 800587c:	ec45 4b10 	vmov	d0, r4, r5
 8005880:	b003      	add	sp, #12
 8005882:	ecbd 8b04 	vpop	{d8-d9}
 8005886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800588a:	4b1b      	ldr	r3, [pc, #108]	; (80058f8 <__kernel_sin+0x150>)
 800588c:	ec51 0b18 	vmov	r0, r1, d8
 8005890:	2200      	movs	r2, #0
 8005892:	f7fa fe5d 	bl	8000550 <__aeabi_dmul>
 8005896:	4632      	mov	r2, r6
 8005898:	ec41 0b19 	vmov	d9, r0, r1
 800589c:	463b      	mov	r3, r7
 800589e:	4640      	mov	r0, r8
 80058a0:	4649      	mov	r1, r9
 80058a2:	f7fa fe55 	bl	8000550 <__aeabi_dmul>
 80058a6:	4602      	mov	r2, r0
 80058a8:	460b      	mov	r3, r1
 80058aa:	ec51 0b19 	vmov	r0, r1, d9
 80058ae:	f7fa fc97 	bl	80001e0 <__aeabi_dsub>
 80058b2:	4652      	mov	r2, sl
 80058b4:	465b      	mov	r3, fp
 80058b6:	f7fa fe4b 	bl	8000550 <__aeabi_dmul>
 80058ba:	ec53 2b18 	vmov	r2, r3, d8
 80058be:	f7fa fc8f 	bl	80001e0 <__aeabi_dsub>
 80058c2:	a30b      	add	r3, pc, #44	; (adr r3, 80058f0 <__kernel_sin+0x148>)
 80058c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c8:	4606      	mov	r6, r0
 80058ca:	460f      	mov	r7, r1
 80058cc:	4640      	mov	r0, r8
 80058ce:	4649      	mov	r1, r9
 80058d0:	f7fa fe3e 	bl	8000550 <__aeabi_dmul>
 80058d4:	4602      	mov	r2, r0
 80058d6:	460b      	mov	r3, r1
 80058d8:	4630      	mov	r0, r6
 80058da:	4639      	mov	r1, r7
 80058dc:	f7fa fc82 	bl	80001e4 <__adddf3>
 80058e0:	4602      	mov	r2, r0
 80058e2:	460b      	mov	r3, r1
 80058e4:	4620      	mov	r0, r4
 80058e6:	4629      	mov	r1, r5
 80058e8:	f7fa fc7a 	bl	80001e0 <__aeabi_dsub>
 80058ec:	e7c4      	b.n	8005878 <__kernel_sin+0xd0>
 80058ee:	bf00      	nop
 80058f0:	55555549 	.word	0x55555549
 80058f4:	3fc55555 	.word	0x3fc55555
 80058f8:	3fe00000 	.word	0x3fe00000
 80058fc:	5acfd57c 	.word	0x5acfd57c
 8005900:	3de5d93a 	.word	0x3de5d93a
 8005904:	8a2b9ceb 	.word	0x8a2b9ceb
 8005908:	3e5ae5e6 	.word	0x3e5ae5e6
 800590c:	57b1fe7d 	.word	0x57b1fe7d
 8005910:	3ec71de3 	.word	0x3ec71de3
 8005914:	19c161d5 	.word	0x19c161d5
 8005918:	3f2a01a0 	.word	0x3f2a01a0
 800591c:	1110f8a6 	.word	0x1110f8a6
 8005920:	3f811111 	.word	0x3f811111
 8005924:	00000000 	.word	0x00000000

08005928 <__ieee754_rem_pio2>:
 8005928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800592c:	ed2d 8b02 	vpush	{d8}
 8005930:	ec55 4b10 	vmov	r4, r5, d0
 8005934:	4bca      	ldr	r3, [pc, #808]	; (8005c60 <__ieee754_rem_pio2+0x338>)
 8005936:	b08b      	sub	sp, #44	; 0x2c
 8005938:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800593c:	4598      	cmp	r8, r3
 800593e:	4682      	mov	sl, r0
 8005940:	9502      	str	r5, [sp, #8]
 8005942:	dc08      	bgt.n	8005956 <__ieee754_rem_pio2+0x2e>
 8005944:	2200      	movs	r2, #0
 8005946:	2300      	movs	r3, #0
 8005948:	ed80 0b00 	vstr	d0, [r0]
 800594c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005950:	f04f 0b00 	mov.w	fp, #0
 8005954:	e028      	b.n	80059a8 <__ieee754_rem_pio2+0x80>
 8005956:	4bc3      	ldr	r3, [pc, #780]	; (8005c64 <__ieee754_rem_pio2+0x33c>)
 8005958:	4598      	cmp	r8, r3
 800595a:	dc78      	bgt.n	8005a4e <__ieee754_rem_pio2+0x126>
 800595c:	9b02      	ldr	r3, [sp, #8]
 800595e:	4ec2      	ldr	r6, [pc, #776]	; (8005c68 <__ieee754_rem_pio2+0x340>)
 8005960:	2b00      	cmp	r3, #0
 8005962:	ee10 0a10 	vmov	r0, s0
 8005966:	a3b0      	add	r3, pc, #704	; (adr r3, 8005c28 <__ieee754_rem_pio2+0x300>)
 8005968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596c:	4629      	mov	r1, r5
 800596e:	dd39      	ble.n	80059e4 <__ieee754_rem_pio2+0xbc>
 8005970:	f7fa fc36 	bl	80001e0 <__aeabi_dsub>
 8005974:	45b0      	cmp	r8, r6
 8005976:	4604      	mov	r4, r0
 8005978:	460d      	mov	r5, r1
 800597a:	d01b      	beq.n	80059b4 <__ieee754_rem_pio2+0x8c>
 800597c:	a3ac      	add	r3, pc, #688	; (adr r3, 8005c30 <__ieee754_rem_pio2+0x308>)
 800597e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005982:	f7fa fc2d 	bl	80001e0 <__aeabi_dsub>
 8005986:	4602      	mov	r2, r0
 8005988:	460b      	mov	r3, r1
 800598a:	e9ca 2300 	strd	r2, r3, [sl]
 800598e:	4620      	mov	r0, r4
 8005990:	4629      	mov	r1, r5
 8005992:	f7fa fc25 	bl	80001e0 <__aeabi_dsub>
 8005996:	a3a6      	add	r3, pc, #664	; (adr r3, 8005c30 <__ieee754_rem_pio2+0x308>)
 8005998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800599c:	f7fa fc20 	bl	80001e0 <__aeabi_dsub>
 80059a0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80059a4:	f04f 0b01 	mov.w	fp, #1
 80059a8:	4658      	mov	r0, fp
 80059aa:	b00b      	add	sp, #44	; 0x2c
 80059ac:	ecbd 8b02 	vpop	{d8}
 80059b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059b4:	a3a0      	add	r3, pc, #640	; (adr r3, 8005c38 <__ieee754_rem_pio2+0x310>)
 80059b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ba:	f7fa fc11 	bl	80001e0 <__aeabi_dsub>
 80059be:	a3a0      	add	r3, pc, #640	; (adr r3, 8005c40 <__ieee754_rem_pio2+0x318>)
 80059c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c4:	4604      	mov	r4, r0
 80059c6:	460d      	mov	r5, r1
 80059c8:	f7fa fc0a 	bl	80001e0 <__aeabi_dsub>
 80059cc:	4602      	mov	r2, r0
 80059ce:	460b      	mov	r3, r1
 80059d0:	e9ca 2300 	strd	r2, r3, [sl]
 80059d4:	4620      	mov	r0, r4
 80059d6:	4629      	mov	r1, r5
 80059d8:	f7fa fc02 	bl	80001e0 <__aeabi_dsub>
 80059dc:	a398      	add	r3, pc, #608	; (adr r3, 8005c40 <__ieee754_rem_pio2+0x318>)
 80059de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e2:	e7db      	b.n	800599c <__ieee754_rem_pio2+0x74>
 80059e4:	f7fa fbfe 	bl	80001e4 <__adddf3>
 80059e8:	45b0      	cmp	r8, r6
 80059ea:	4604      	mov	r4, r0
 80059ec:	460d      	mov	r5, r1
 80059ee:	d016      	beq.n	8005a1e <__ieee754_rem_pio2+0xf6>
 80059f0:	a38f      	add	r3, pc, #572	; (adr r3, 8005c30 <__ieee754_rem_pio2+0x308>)
 80059f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f6:	f7fa fbf5 	bl	80001e4 <__adddf3>
 80059fa:	4602      	mov	r2, r0
 80059fc:	460b      	mov	r3, r1
 80059fe:	e9ca 2300 	strd	r2, r3, [sl]
 8005a02:	4620      	mov	r0, r4
 8005a04:	4629      	mov	r1, r5
 8005a06:	f7fa fbeb 	bl	80001e0 <__aeabi_dsub>
 8005a0a:	a389      	add	r3, pc, #548	; (adr r3, 8005c30 <__ieee754_rem_pio2+0x308>)
 8005a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a10:	f7fa fbe8 	bl	80001e4 <__adddf3>
 8005a14:	f04f 3bff 	mov.w	fp, #4294967295
 8005a18:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005a1c:	e7c4      	b.n	80059a8 <__ieee754_rem_pio2+0x80>
 8005a1e:	a386      	add	r3, pc, #536	; (adr r3, 8005c38 <__ieee754_rem_pio2+0x310>)
 8005a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a24:	f7fa fbde 	bl	80001e4 <__adddf3>
 8005a28:	a385      	add	r3, pc, #532	; (adr r3, 8005c40 <__ieee754_rem_pio2+0x318>)
 8005a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2e:	4604      	mov	r4, r0
 8005a30:	460d      	mov	r5, r1
 8005a32:	f7fa fbd7 	bl	80001e4 <__adddf3>
 8005a36:	4602      	mov	r2, r0
 8005a38:	460b      	mov	r3, r1
 8005a3a:	e9ca 2300 	strd	r2, r3, [sl]
 8005a3e:	4620      	mov	r0, r4
 8005a40:	4629      	mov	r1, r5
 8005a42:	f7fa fbcd 	bl	80001e0 <__aeabi_dsub>
 8005a46:	a37e      	add	r3, pc, #504	; (adr r3, 8005c40 <__ieee754_rem_pio2+0x318>)
 8005a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4c:	e7e0      	b.n	8005a10 <__ieee754_rem_pio2+0xe8>
 8005a4e:	4b87      	ldr	r3, [pc, #540]	; (8005c6c <__ieee754_rem_pio2+0x344>)
 8005a50:	4598      	cmp	r8, r3
 8005a52:	f300 80d8 	bgt.w	8005c06 <__ieee754_rem_pio2+0x2de>
 8005a56:	f000 f96d 	bl	8005d34 <fabs>
 8005a5a:	ec55 4b10 	vmov	r4, r5, d0
 8005a5e:	ee10 0a10 	vmov	r0, s0
 8005a62:	a379      	add	r3, pc, #484	; (adr r3, 8005c48 <__ieee754_rem_pio2+0x320>)
 8005a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a68:	4629      	mov	r1, r5
 8005a6a:	f7fa fd71 	bl	8000550 <__aeabi_dmul>
 8005a6e:	4b80      	ldr	r3, [pc, #512]	; (8005c70 <__ieee754_rem_pio2+0x348>)
 8005a70:	2200      	movs	r2, #0
 8005a72:	f7fa fbb7 	bl	80001e4 <__adddf3>
 8005a76:	f7fb f805 	bl	8000a84 <__aeabi_d2iz>
 8005a7a:	4683      	mov	fp, r0
 8005a7c:	f7fa fcfe 	bl	800047c <__aeabi_i2d>
 8005a80:	4602      	mov	r2, r0
 8005a82:	460b      	mov	r3, r1
 8005a84:	ec43 2b18 	vmov	d8, r2, r3
 8005a88:	a367      	add	r3, pc, #412	; (adr r3, 8005c28 <__ieee754_rem_pio2+0x300>)
 8005a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8e:	f7fa fd5f 	bl	8000550 <__aeabi_dmul>
 8005a92:	4602      	mov	r2, r0
 8005a94:	460b      	mov	r3, r1
 8005a96:	4620      	mov	r0, r4
 8005a98:	4629      	mov	r1, r5
 8005a9a:	f7fa fba1 	bl	80001e0 <__aeabi_dsub>
 8005a9e:	a364      	add	r3, pc, #400	; (adr r3, 8005c30 <__ieee754_rem_pio2+0x308>)
 8005aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa4:	4606      	mov	r6, r0
 8005aa6:	460f      	mov	r7, r1
 8005aa8:	ec51 0b18 	vmov	r0, r1, d8
 8005aac:	f7fa fd50 	bl	8000550 <__aeabi_dmul>
 8005ab0:	f1bb 0f1f 	cmp.w	fp, #31
 8005ab4:	4604      	mov	r4, r0
 8005ab6:	460d      	mov	r5, r1
 8005ab8:	dc0d      	bgt.n	8005ad6 <__ieee754_rem_pio2+0x1ae>
 8005aba:	4b6e      	ldr	r3, [pc, #440]	; (8005c74 <__ieee754_rem_pio2+0x34c>)
 8005abc:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ac4:	4543      	cmp	r3, r8
 8005ac6:	d006      	beq.n	8005ad6 <__ieee754_rem_pio2+0x1ae>
 8005ac8:	4622      	mov	r2, r4
 8005aca:	462b      	mov	r3, r5
 8005acc:	4630      	mov	r0, r6
 8005ace:	4639      	mov	r1, r7
 8005ad0:	f7fa fb86 	bl	80001e0 <__aeabi_dsub>
 8005ad4:	e00e      	b.n	8005af4 <__ieee754_rem_pio2+0x1cc>
 8005ad6:	462b      	mov	r3, r5
 8005ad8:	4622      	mov	r2, r4
 8005ada:	4630      	mov	r0, r6
 8005adc:	4639      	mov	r1, r7
 8005ade:	f7fa fb7f 	bl	80001e0 <__aeabi_dsub>
 8005ae2:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005ae6:	9303      	str	r3, [sp, #12]
 8005ae8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005aec:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8005af0:	2b10      	cmp	r3, #16
 8005af2:	dc02      	bgt.n	8005afa <__ieee754_rem_pio2+0x1d2>
 8005af4:	e9ca 0100 	strd	r0, r1, [sl]
 8005af8:	e039      	b.n	8005b6e <__ieee754_rem_pio2+0x246>
 8005afa:	a34f      	add	r3, pc, #316	; (adr r3, 8005c38 <__ieee754_rem_pio2+0x310>)
 8005afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b00:	ec51 0b18 	vmov	r0, r1, d8
 8005b04:	f7fa fd24 	bl	8000550 <__aeabi_dmul>
 8005b08:	4604      	mov	r4, r0
 8005b0a:	460d      	mov	r5, r1
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	460b      	mov	r3, r1
 8005b10:	4630      	mov	r0, r6
 8005b12:	4639      	mov	r1, r7
 8005b14:	f7fa fb64 	bl	80001e0 <__aeabi_dsub>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	4680      	mov	r8, r0
 8005b1e:	4689      	mov	r9, r1
 8005b20:	4630      	mov	r0, r6
 8005b22:	4639      	mov	r1, r7
 8005b24:	f7fa fb5c 	bl	80001e0 <__aeabi_dsub>
 8005b28:	4622      	mov	r2, r4
 8005b2a:	462b      	mov	r3, r5
 8005b2c:	f7fa fb58 	bl	80001e0 <__aeabi_dsub>
 8005b30:	a343      	add	r3, pc, #268	; (adr r3, 8005c40 <__ieee754_rem_pio2+0x318>)
 8005b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b36:	4604      	mov	r4, r0
 8005b38:	460d      	mov	r5, r1
 8005b3a:	ec51 0b18 	vmov	r0, r1, d8
 8005b3e:	f7fa fd07 	bl	8000550 <__aeabi_dmul>
 8005b42:	4622      	mov	r2, r4
 8005b44:	462b      	mov	r3, r5
 8005b46:	f7fa fb4b 	bl	80001e0 <__aeabi_dsub>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	4604      	mov	r4, r0
 8005b50:	460d      	mov	r5, r1
 8005b52:	4640      	mov	r0, r8
 8005b54:	4649      	mov	r1, r9
 8005b56:	f7fa fb43 	bl	80001e0 <__aeabi_dsub>
 8005b5a:	9a03      	ldr	r2, [sp, #12]
 8005b5c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	2b31      	cmp	r3, #49	; 0x31
 8005b64:	dc24      	bgt.n	8005bb0 <__ieee754_rem_pio2+0x288>
 8005b66:	e9ca 0100 	strd	r0, r1, [sl]
 8005b6a:	4646      	mov	r6, r8
 8005b6c:	464f      	mov	r7, r9
 8005b6e:	e9da 8900 	ldrd	r8, r9, [sl]
 8005b72:	4630      	mov	r0, r6
 8005b74:	4642      	mov	r2, r8
 8005b76:	464b      	mov	r3, r9
 8005b78:	4639      	mov	r1, r7
 8005b7a:	f7fa fb31 	bl	80001e0 <__aeabi_dsub>
 8005b7e:	462b      	mov	r3, r5
 8005b80:	4622      	mov	r2, r4
 8005b82:	f7fa fb2d 	bl	80001e0 <__aeabi_dsub>
 8005b86:	9b02      	ldr	r3, [sp, #8]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005b8e:	f6bf af0b 	bge.w	80059a8 <__ieee754_rem_pio2+0x80>
 8005b92:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005b96:	f8ca 3004 	str.w	r3, [sl, #4]
 8005b9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005b9e:	f8ca 8000 	str.w	r8, [sl]
 8005ba2:	f8ca 0008 	str.w	r0, [sl, #8]
 8005ba6:	f8ca 300c 	str.w	r3, [sl, #12]
 8005baa:	f1cb 0b00 	rsb	fp, fp, #0
 8005bae:	e6fb      	b.n	80059a8 <__ieee754_rem_pio2+0x80>
 8005bb0:	a327      	add	r3, pc, #156	; (adr r3, 8005c50 <__ieee754_rem_pio2+0x328>)
 8005bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb6:	ec51 0b18 	vmov	r0, r1, d8
 8005bba:	f7fa fcc9 	bl	8000550 <__aeabi_dmul>
 8005bbe:	4604      	mov	r4, r0
 8005bc0:	460d      	mov	r5, r1
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	4640      	mov	r0, r8
 8005bc8:	4649      	mov	r1, r9
 8005bca:	f7fa fb09 	bl	80001e0 <__aeabi_dsub>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	4606      	mov	r6, r0
 8005bd4:	460f      	mov	r7, r1
 8005bd6:	4640      	mov	r0, r8
 8005bd8:	4649      	mov	r1, r9
 8005bda:	f7fa fb01 	bl	80001e0 <__aeabi_dsub>
 8005bde:	4622      	mov	r2, r4
 8005be0:	462b      	mov	r3, r5
 8005be2:	f7fa fafd 	bl	80001e0 <__aeabi_dsub>
 8005be6:	a31c      	add	r3, pc, #112	; (adr r3, 8005c58 <__ieee754_rem_pio2+0x330>)
 8005be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bec:	4604      	mov	r4, r0
 8005bee:	460d      	mov	r5, r1
 8005bf0:	ec51 0b18 	vmov	r0, r1, d8
 8005bf4:	f7fa fcac 	bl	8000550 <__aeabi_dmul>
 8005bf8:	4622      	mov	r2, r4
 8005bfa:	462b      	mov	r3, r5
 8005bfc:	f7fa faf0 	bl	80001e0 <__aeabi_dsub>
 8005c00:	4604      	mov	r4, r0
 8005c02:	460d      	mov	r5, r1
 8005c04:	e760      	b.n	8005ac8 <__ieee754_rem_pio2+0x1a0>
 8005c06:	4b1c      	ldr	r3, [pc, #112]	; (8005c78 <__ieee754_rem_pio2+0x350>)
 8005c08:	4598      	cmp	r8, r3
 8005c0a:	dd37      	ble.n	8005c7c <__ieee754_rem_pio2+0x354>
 8005c0c:	ee10 2a10 	vmov	r2, s0
 8005c10:	462b      	mov	r3, r5
 8005c12:	4620      	mov	r0, r4
 8005c14:	4629      	mov	r1, r5
 8005c16:	f7fa fae3 	bl	80001e0 <__aeabi_dsub>
 8005c1a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005c1e:	e9ca 0100 	strd	r0, r1, [sl]
 8005c22:	e695      	b.n	8005950 <__ieee754_rem_pio2+0x28>
 8005c24:	f3af 8000 	nop.w
 8005c28:	54400000 	.word	0x54400000
 8005c2c:	3ff921fb 	.word	0x3ff921fb
 8005c30:	1a626331 	.word	0x1a626331
 8005c34:	3dd0b461 	.word	0x3dd0b461
 8005c38:	1a600000 	.word	0x1a600000
 8005c3c:	3dd0b461 	.word	0x3dd0b461
 8005c40:	2e037073 	.word	0x2e037073
 8005c44:	3ba3198a 	.word	0x3ba3198a
 8005c48:	6dc9c883 	.word	0x6dc9c883
 8005c4c:	3fe45f30 	.word	0x3fe45f30
 8005c50:	2e000000 	.word	0x2e000000
 8005c54:	3ba3198a 	.word	0x3ba3198a
 8005c58:	252049c1 	.word	0x252049c1
 8005c5c:	397b839a 	.word	0x397b839a
 8005c60:	3fe921fb 	.word	0x3fe921fb
 8005c64:	4002d97b 	.word	0x4002d97b
 8005c68:	3ff921fb 	.word	0x3ff921fb
 8005c6c:	413921fb 	.word	0x413921fb
 8005c70:	3fe00000 	.word	0x3fe00000
 8005c74:	08006918 	.word	0x08006918
 8005c78:	7fefffff 	.word	0x7fefffff
 8005c7c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8005c80:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8005c84:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8005c88:	4620      	mov	r0, r4
 8005c8a:	460d      	mov	r5, r1
 8005c8c:	f7fa fefa 	bl	8000a84 <__aeabi_d2iz>
 8005c90:	f7fa fbf4 	bl	800047c <__aeabi_i2d>
 8005c94:	4602      	mov	r2, r0
 8005c96:	460b      	mov	r3, r1
 8005c98:	4620      	mov	r0, r4
 8005c9a:	4629      	mov	r1, r5
 8005c9c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005ca0:	f7fa fa9e 	bl	80001e0 <__aeabi_dsub>
 8005ca4:	4b21      	ldr	r3, [pc, #132]	; (8005d2c <__ieee754_rem_pio2+0x404>)
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f7fa fc52 	bl	8000550 <__aeabi_dmul>
 8005cac:	460d      	mov	r5, r1
 8005cae:	4604      	mov	r4, r0
 8005cb0:	f7fa fee8 	bl	8000a84 <__aeabi_d2iz>
 8005cb4:	f7fa fbe2 	bl	800047c <__aeabi_i2d>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	460b      	mov	r3, r1
 8005cbc:	4620      	mov	r0, r4
 8005cbe:	4629      	mov	r1, r5
 8005cc0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005cc4:	f7fa fa8c 	bl	80001e0 <__aeabi_dsub>
 8005cc8:	4b18      	ldr	r3, [pc, #96]	; (8005d2c <__ieee754_rem_pio2+0x404>)
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f7fa fc40 	bl	8000550 <__aeabi_dmul>
 8005cd0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005cd4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8005cd8:	2703      	movs	r7, #3
 8005cda:	2400      	movs	r4, #0
 8005cdc:	2500      	movs	r5, #0
 8005cde:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8005ce2:	4622      	mov	r2, r4
 8005ce4:	462b      	mov	r3, r5
 8005ce6:	46b9      	mov	r9, r7
 8005ce8:	3f01      	subs	r7, #1
 8005cea:	f7fa fe99 	bl	8000a20 <__aeabi_dcmpeq>
 8005cee:	2800      	cmp	r0, #0
 8005cf0:	d1f5      	bne.n	8005cde <__ieee754_rem_pio2+0x3b6>
 8005cf2:	4b0f      	ldr	r3, [pc, #60]	; (8005d30 <__ieee754_rem_pio2+0x408>)
 8005cf4:	9301      	str	r3, [sp, #4]
 8005cf6:	2302      	movs	r3, #2
 8005cf8:	9300      	str	r3, [sp, #0]
 8005cfa:	4632      	mov	r2, r6
 8005cfc:	464b      	mov	r3, r9
 8005cfe:	4651      	mov	r1, sl
 8005d00:	a804      	add	r0, sp, #16
 8005d02:	f000 f99d 	bl	8006040 <__kernel_rem_pio2>
 8005d06:	9b02      	ldr	r3, [sp, #8]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	4683      	mov	fp, r0
 8005d0c:	f6bf ae4c 	bge.w	80059a8 <__ieee754_rem_pio2+0x80>
 8005d10:	e9da 2100 	ldrd	r2, r1, [sl]
 8005d14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d18:	e9ca 2300 	strd	r2, r3, [sl]
 8005d1c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8005d20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d24:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8005d28:	e73f      	b.n	8005baa <__ieee754_rem_pio2+0x282>
 8005d2a:	bf00      	nop
 8005d2c:	41700000 	.word	0x41700000
 8005d30:	08006998 	.word	0x08006998

08005d34 <fabs>:
 8005d34:	ec51 0b10 	vmov	r0, r1, d0
 8005d38:	ee10 2a10 	vmov	r2, s0
 8005d3c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005d40:	ec43 2b10 	vmov	d0, r2, r3
 8005d44:	4770      	bx	lr
	...

08005d48 <__ieee754_atan2f>:
 8005d48:	ee10 2a90 	vmov	r2, s1
 8005d4c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8005d50:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8005d54:	b510      	push	{r4, lr}
 8005d56:	eef0 7a40 	vmov.f32	s15, s0
 8005d5a:	dc06      	bgt.n	8005d6a <__ieee754_atan2f+0x22>
 8005d5c:	ee10 0a10 	vmov	r0, s0
 8005d60:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8005d64:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005d68:	dd04      	ble.n	8005d74 <__ieee754_atan2f+0x2c>
 8005d6a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8005d6e:	eeb0 0a67 	vmov.f32	s0, s15
 8005d72:	bd10      	pop	{r4, pc}
 8005d74:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8005d78:	d103      	bne.n	8005d82 <__ieee754_atan2f+0x3a>
 8005d7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d7e:	f000 b883 	b.w	8005e88 <atanf>
 8005d82:	1794      	asrs	r4, r2, #30
 8005d84:	f004 0402 	and.w	r4, r4, #2
 8005d88:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8005d8c:	b943      	cbnz	r3, 8005da0 <__ieee754_atan2f+0x58>
 8005d8e:	2c02      	cmp	r4, #2
 8005d90:	d05e      	beq.n	8005e50 <__ieee754_atan2f+0x108>
 8005d92:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8005e64 <__ieee754_atan2f+0x11c>
 8005d96:	2c03      	cmp	r4, #3
 8005d98:	bf08      	it	eq
 8005d9a:	eef0 7a47 	vmoveq.f32	s15, s14
 8005d9e:	e7e6      	b.n	8005d6e <__ieee754_atan2f+0x26>
 8005da0:	b941      	cbnz	r1, 8005db4 <__ieee754_atan2f+0x6c>
 8005da2:	eddf 7a31 	vldr	s15, [pc, #196]	; 8005e68 <__ieee754_atan2f+0x120>
 8005da6:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8005e6c <__ieee754_atan2f+0x124>
 8005daa:	2800      	cmp	r0, #0
 8005dac:	bfb8      	it	lt
 8005dae:	eef0 7a47 	vmovlt.f32	s15, s14
 8005db2:	e7dc      	b.n	8005d6e <__ieee754_atan2f+0x26>
 8005db4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8005db8:	d110      	bne.n	8005ddc <__ieee754_atan2f+0x94>
 8005dba:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005dbe:	f104 34ff 	add.w	r4, r4, #4294967295
 8005dc2:	d107      	bne.n	8005dd4 <__ieee754_atan2f+0x8c>
 8005dc4:	2c02      	cmp	r4, #2
 8005dc6:	d846      	bhi.n	8005e56 <__ieee754_atan2f+0x10e>
 8005dc8:	4b29      	ldr	r3, [pc, #164]	; (8005e70 <__ieee754_atan2f+0x128>)
 8005dca:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005dce:	edd3 7a00 	vldr	s15, [r3]
 8005dd2:	e7cc      	b.n	8005d6e <__ieee754_atan2f+0x26>
 8005dd4:	2c02      	cmp	r4, #2
 8005dd6:	d841      	bhi.n	8005e5c <__ieee754_atan2f+0x114>
 8005dd8:	4b26      	ldr	r3, [pc, #152]	; (8005e74 <__ieee754_atan2f+0x12c>)
 8005dda:	e7f6      	b.n	8005dca <__ieee754_atan2f+0x82>
 8005ddc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005de0:	d0df      	beq.n	8005da2 <__ieee754_atan2f+0x5a>
 8005de2:	1a5b      	subs	r3, r3, r1
 8005de4:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8005de8:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8005dec:	da1a      	bge.n	8005e24 <__ieee754_atan2f+0xdc>
 8005dee:	2a00      	cmp	r2, #0
 8005df0:	da01      	bge.n	8005df6 <__ieee754_atan2f+0xae>
 8005df2:	313c      	adds	r1, #60	; 0x3c
 8005df4:	db19      	blt.n	8005e2a <__ieee754_atan2f+0xe2>
 8005df6:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8005dfa:	f000 f919 	bl	8006030 <fabsf>
 8005dfe:	f000 f843 	bl	8005e88 <atanf>
 8005e02:	eef0 7a40 	vmov.f32	s15, s0
 8005e06:	2c01      	cmp	r4, #1
 8005e08:	d012      	beq.n	8005e30 <__ieee754_atan2f+0xe8>
 8005e0a:	2c02      	cmp	r4, #2
 8005e0c:	d017      	beq.n	8005e3e <__ieee754_atan2f+0xf6>
 8005e0e:	2c00      	cmp	r4, #0
 8005e10:	d0ad      	beq.n	8005d6e <__ieee754_atan2f+0x26>
 8005e12:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005e78 <__ieee754_atan2f+0x130>
 8005e16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005e1a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005e7c <__ieee754_atan2f+0x134>
 8005e1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005e22:	e7a4      	b.n	8005d6e <__ieee754_atan2f+0x26>
 8005e24:	eddf 7a10 	vldr	s15, [pc, #64]	; 8005e68 <__ieee754_atan2f+0x120>
 8005e28:	e7ed      	b.n	8005e06 <__ieee754_atan2f+0xbe>
 8005e2a:	eddf 7a15 	vldr	s15, [pc, #84]	; 8005e80 <__ieee754_atan2f+0x138>
 8005e2e:	e7ea      	b.n	8005e06 <__ieee754_atan2f+0xbe>
 8005e30:	ee17 3a90 	vmov	r3, s15
 8005e34:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005e38:	ee07 3a90 	vmov	s15, r3
 8005e3c:	e797      	b.n	8005d6e <__ieee754_atan2f+0x26>
 8005e3e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8005e78 <__ieee754_atan2f+0x130>
 8005e42:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005e46:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8005e7c <__ieee754_atan2f+0x134>
 8005e4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e4e:	e78e      	b.n	8005d6e <__ieee754_atan2f+0x26>
 8005e50:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8005e7c <__ieee754_atan2f+0x134>
 8005e54:	e78b      	b.n	8005d6e <__ieee754_atan2f+0x26>
 8005e56:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8005e84 <__ieee754_atan2f+0x13c>
 8005e5a:	e788      	b.n	8005d6e <__ieee754_atan2f+0x26>
 8005e5c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8005e80 <__ieee754_atan2f+0x138>
 8005e60:	e785      	b.n	8005d6e <__ieee754_atan2f+0x26>
 8005e62:	bf00      	nop
 8005e64:	c0490fdb 	.word	0xc0490fdb
 8005e68:	3fc90fdb 	.word	0x3fc90fdb
 8005e6c:	bfc90fdb 	.word	0xbfc90fdb
 8005e70:	08006aa0 	.word	0x08006aa0
 8005e74:	08006aac 	.word	0x08006aac
 8005e78:	33bbbd2e 	.word	0x33bbbd2e
 8005e7c:	40490fdb 	.word	0x40490fdb
 8005e80:	00000000 	.word	0x00000000
 8005e84:	3f490fdb 	.word	0x3f490fdb

08005e88 <atanf>:
 8005e88:	b538      	push	{r3, r4, r5, lr}
 8005e8a:	ee10 5a10 	vmov	r5, s0
 8005e8e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8005e92:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8005e96:	eef0 7a40 	vmov.f32	s15, s0
 8005e9a:	db10      	blt.n	8005ebe <atanf+0x36>
 8005e9c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8005ea0:	dd04      	ble.n	8005eac <atanf+0x24>
 8005ea2:	ee70 7a00 	vadd.f32	s15, s0, s0
 8005ea6:	eeb0 0a67 	vmov.f32	s0, s15
 8005eaa:	bd38      	pop	{r3, r4, r5, pc}
 8005eac:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8005fe4 <atanf+0x15c>
 8005eb0:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8005fe8 <atanf+0x160>
 8005eb4:	2d00      	cmp	r5, #0
 8005eb6:	bfd8      	it	le
 8005eb8:	eef0 7a47 	vmovle.f32	s15, s14
 8005ebc:	e7f3      	b.n	8005ea6 <atanf+0x1e>
 8005ebe:	4b4b      	ldr	r3, [pc, #300]	; (8005fec <atanf+0x164>)
 8005ec0:	429c      	cmp	r4, r3
 8005ec2:	dc10      	bgt.n	8005ee6 <atanf+0x5e>
 8005ec4:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8005ec8:	da0a      	bge.n	8005ee0 <atanf+0x58>
 8005eca:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8005ff0 <atanf+0x168>
 8005ece:	ee30 7a07 	vadd.f32	s14, s0, s14
 8005ed2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ed6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8005eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ede:	dce2      	bgt.n	8005ea6 <atanf+0x1e>
 8005ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ee4:	e013      	b.n	8005f0e <atanf+0x86>
 8005ee6:	f000 f8a3 	bl	8006030 <fabsf>
 8005eea:	4b42      	ldr	r3, [pc, #264]	; (8005ff4 <atanf+0x16c>)
 8005eec:	429c      	cmp	r4, r3
 8005eee:	dc4f      	bgt.n	8005f90 <atanf+0x108>
 8005ef0:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8005ef4:	429c      	cmp	r4, r3
 8005ef6:	dc41      	bgt.n	8005f7c <atanf+0xf4>
 8005ef8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8005efc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8005f00:	eea0 7a27 	vfma.f32	s14, s0, s15
 8005f04:	2300      	movs	r3, #0
 8005f06:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005f0a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8005f0e:	1c5a      	adds	r2, r3, #1
 8005f10:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8005f14:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8005ff8 <atanf+0x170>
 8005f18:	eddf 5a38 	vldr	s11, [pc, #224]	; 8005ffc <atanf+0x174>
 8005f1c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8006000 <atanf+0x178>
 8005f20:	ee66 6a06 	vmul.f32	s13, s12, s12
 8005f24:	eee6 5a87 	vfma.f32	s11, s13, s14
 8005f28:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8006004 <atanf+0x17c>
 8005f2c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8005f30:	eddf 5a35 	vldr	s11, [pc, #212]	; 8006008 <atanf+0x180>
 8005f34:	eee7 5a26 	vfma.f32	s11, s14, s13
 8005f38:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800600c <atanf+0x184>
 8005f3c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8005f40:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006010 <atanf+0x188>
 8005f44:	eee7 5a26 	vfma.f32	s11, s14, s13
 8005f48:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8006014 <atanf+0x18c>
 8005f4c:	eea6 5a87 	vfma.f32	s10, s13, s14
 8005f50:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8006018 <atanf+0x190>
 8005f54:	eea5 7a26 	vfma.f32	s14, s10, s13
 8005f58:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800601c <atanf+0x194>
 8005f5c:	eea7 5a26 	vfma.f32	s10, s14, s13
 8005f60:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8006020 <atanf+0x198>
 8005f64:	eea5 7a26 	vfma.f32	s14, s10, s13
 8005f68:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005f6c:	eea5 7a86 	vfma.f32	s14, s11, s12
 8005f70:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005f74:	d121      	bne.n	8005fba <atanf+0x132>
 8005f76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005f7a:	e794      	b.n	8005ea6 <atanf+0x1e>
 8005f7c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005f80:	ee30 7a67 	vsub.f32	s14, s0, s15
 8005f84:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005f88:	2301      	movs	r3, #1
 8005f8a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8005f8e:	e7be      	b.n	8005f0e <atanf+0x86>
 8005f90:	4b24      	ldr	r3, [pc, #144]	; (8006024 <atanf+0x19c>)
 8005f92:	429c      	cmp	r4, r3
 8005f94:	dc0b      	bgt.n	8005fae <atanf+0x126>
 8005f96:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8005f9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f9e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8005fa2:	2302      	movs	r3, #2
 8005fa4:	ee70 6a67 	vsub.f32	s13, s0, s15
 8005fa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fac:	e7af      	b.n	8005f0e <atanf+0x86>
 8005fae:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8005fb2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e7a9      	b.n	8005f0e <atanf+0x86>
 8005fba:	4a1b      	ldr	r2, [pc, #108]	; (8006028 <atanf+0x1a0>)
 8005fbc:	491b      	ldr	r1, [pc, #108]	; (800602c <atanf+0x1a4>)
 8005fbe:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005fc2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8005fc6:	edd3 6a00 	vldr	s13, [r3]
 8005fca:	ee37 7a66 	vsub.f32	s14, s14, s13
 8005fce:	2d00      	cmp	r5, #0
 8005fd0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005fd4:	edd2 7a00 	vldr	s15, [r2]
 8005fd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005fdc:	bfb8      	it	lt
 8005fde:	eef1 7a67 	vneglt.f32	s15, s15
 8005fe2:	e760      	b.n	8005ea6 <atanf+0x1e>
 8005fe4:	3fc90fdb 	.word	0x3fc90fdb
 8005fe8:	bfc90fdb 	.word	0xbfc90fdb
 8005fec:	3edfffff 	.word	0x3edfffff
 8005ff0:	7149f2ca 	.word	0x7149f2ca
 8005ff4:	3f97ffff 	.word	0x3f97ffff
 8005ff8:	3c8569d7 	.word	0x3c8569d7
 8005ffc:	3d4bda59 	.word	0x3d4bda59
 8006000:	bd6ef16b 	.word	0xbd6ef16b
 8006004:	3d886b35 	.word	0x3d886b35
 8006008:	3dba2e6e 	.word	0x3dba2e6e
 800600c:	3e124925 	.word	0x3e124925
 8006010:	3eaaaaab 	.word	0x3eaaaaab
 8006014:	bd15a221 	.word	0xbd15a221
 8006018:	bd9d8795 	.word	0xbd9d8795
 800601c:	bde38e38 	.word	0xbde38e38
 8006020:	be4ccccd 	.word	0xbe4ccccd
 8006024:	401bffff 	.word	0x401bffff
 8006028:	08006ab8 	.word	0x08006ab8
 800602c:	08006ac8 	.word	0x08006ac8

08006030 <fabsf>:
 8006030:	ee10 3a10 	vmov	r3, s0
 8006034:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006038:	ee00 3a10 	vmov	s0, r3
 800603c:	4770      	bx	lr
	...

08006040 <__kernel_rem_pio2>:
 8006040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006044:	ed2d 8b02 	vpush	{d8}
 8006048:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800604c:	f112 0f14 	cmn.w	r2, #20
 8006050:	9306      	str	r3, [sp, #24]
 8006052:	9104      	str	r1, [sp, #16]
 8006054:	4bc2      	ldr	r3, [pc, #776]	; (8006360 <__kernel_rem_pio2+0x320>)
 8006056:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8006058:	9009      	str	r0, [sp, #36]	; 0x24
 800605a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	9b06      	ldr	r3, [sp, #24]
 8006062:	f103 33ff 	add.w	r3, r3, #4294967295
 8006066:	bfa8      	it	ge
 8006068:	1ed4      	subge	r4, r2, #3
 800606a:	9305      	str	r3, [sp, #20]
 800606c:	bfb2      	itee	lt
 800606e:	2400      	movlt	r4, #0
 8006070:	2318      	movge	r3, #24
 8006072:	fb94 f4f3 	sdivge	r4, r4, r3
 8006076:	f06f 0317 	mvn.w	r3, #23
 800607a:	fb04 3303 	mla	r3, r4, r3, r3
 800607e:	eb03 0a02 	add.w	sl, r3, r2
 8006082:	9b00      	ldr	r3, [sp, #0]
 8006084:	9a05      	ldr	r2, [sp, #20]
 8006086:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8006350 <__kernel_rem_pio2+0x310>
 800608a:	eb03 0802 	add.w	r8, r3, r2
 800608e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006090:	1aa7      	subs	r7, r4, r2
 8006092:	ae20      	add	r6, sp, #128	; 0x80
 8006094:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006098:	2500      	movs	r5, #0
 800609a:	4545      	cmp	r5, r8
 800609c:	dd13      	ble.n	80060c6 <__kernel_rem_pio2+0x86>
 800609e:	9b06      	ldr	r3, [sp, #24]
 80060a0:	aa20      	add	r2, sp, #128	; 0x80
 80060a2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80060a6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80060aa:	f04f 0800 	mov.w	r8, #0
 80060ae:	9b00      	ldr	r3, [sp, #0]
 80060b0:	4598      	cmp	r8, r3
 80060b2:	dc31      	bgt.n	8006118 <__kernel_rem_pio2+0xd8>
 80060b4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8006350 <__kernel_rem_pio2+0x310>
 80060b8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80060bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80060c0:	462f      	mov	r7, r5
 80060c2:	2600      	movs	r6, #0
 80060c4:	e01b      	b.n	80060fe <__kernel_rem_pio2+0xbe>
 80060c6:	42ef      	cmn	r7, r5
 80060c8:	d407      	bmi.n	80060da <__kernel_rem_pio2+0x9a>
 80060ca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80060ce:	f7fa f9d5 	bl	800047c <__aeabi_i2d>
 80060d2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80060d6:	3501      	adds	r5, #1
 80060d8:	e7df      	b.n	800609a <__kernel_rem_pio2+0x5a>
 80060da:	ec51 0b18 	vmov	r0, r1, d8
 80060de:	e7f8      	b.n	80060d2 <__kernel_rem_pio2+0x92>
 80060e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060e4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80060e8:	f7fa fa32 	bl	8000550 <__aeabi_dmul>
 80060ec:	4602      	mov	r2, r0
 80060ee:	460b      	mov	r3, r1
 80060f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060f4:	f7fa f876 	bl	80001e4 <__adddf3>
 80060f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060fc:	3601      	adds	r6, #1
 80060fe:	9b05      	ldr	r3, [sp, #20]
 8006100:	429e      	cmp	r6, r3
 8006102:	f1a7 0708 	sub.w	r7, r7, #8
 8006106:	ddeb      	ble.n	80060e0 <__kernel_rem_pio2+0xa0>
 8006108:	ed9d 7b02 	vldr	d7, [sp, #8]
 800610c:	f108 0801 	add.w	r8, r8, #1
 8006110:	ecab 7b02 	vstmia	fp!, {d7}
 8006114:	3508      	adds	r5, #8
 8006116:	e7ca      	b.n	80060ae <__kernel_rem_pio2+0x6e>
 8006118:	9b00      	ldr	r3, [sp, #0]
 800611a:	aa0c      	add	r2, sp, #48	; 0x30
 800611c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006120:	930b      	str	r3, [sp, #44]	; 0x2c
 8006122:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006124:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006128:	9c00      	ldr	r4, [sp, #0]
 800612a:	930a      	str	r3, [sp, #40]	; 0x28
 800612c:	00e3      	lsls	r3, r4, #3
 800612e:	9308      	str	r3, [sp, #32]
 8006130:	ab98      	add	r3, sp, #608	; 0x260
 8006132:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006136:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800613a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800613e:	ab70      	add	r3, sp, #448	; 0x1c0
 8006140:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8006144:	46c3      	mov	fp, r8
 8006146:	46a1      	mov	r9, r4
 8006148:	f1b9 0f00 	cmp.w	r9, #0
 800614c:	f1a5 0508 	sub.w	r5, r5, #8
 8006150:	dc77      	bgt.n	8006242 <__kernel_rem_pio2+0x202>
 8006152:	ec47 6b10 	vmov	d0, r6, r7
 8006156:	4650      	mov	r0, sl
 8006158:	f000 fac2 	bl	80066e0 <scalbn>
 800615c:	ec57 6b10 	vmov	r6, r7, d0
 8006160:	2200      	movs	r2, #0
 8006162:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006166:	ee10 0a10 	vmov	r0, s0
 800616a:	4639      	mov	r1, r7
 800616c:	f7fa f9f0 	bl	8000550 <__aeabi_dmul>
 8006170:	ec41 0b10 	vmov	d0, r0, r1
 8006174:	f000 fb34 	bl	80067e0 <floor>
 8006178:	4b7a      	ldr	r3, [pc, #488]	; (8006364 <__kernel_rem_pio2+0x324>)
 800617a:	ec51 0b10 	vmov	r0, r1, d0
 800617e:	2200      	movs	r2, #0
 8006180:	f7fa f9e6 	bl	8000550 <__aeabi_dmul>
 8006184:	4602      	mov	r2, r0
 8006186:	460b      	mov	r3, r1
 8006188:	4630      	mov	r0, r6
 800618a:	4639      	mov	r1, r7
 800618c:	f7fa f828 	bl	80001e0 <__aeabi_dsub>
 8006190:	460f      	mov	r7, r1
 8006192:	4606      	mov	r6, r0
 8006194:	f7fa fc76 	bl	8000a84 <__aeabi_d2iz>
 8006198:	9002      	str	r0, [sp, #8]
 800619a:	f7fa f96f 	bl	800047c <__aeabi_i2d>
 800619e:	4602      	mov	r2, r0
 80061a0:	460b      	mov	r3, r1
 80061a2:	4630      	mov	r0, r6
 80061a4:	4639      	mov	r1, r7
 80061a6:	f7fa f81b 	bl	80001e0 <__aeabi_dsub>
 80061aa:	f1ba 0f00 	cmp.w	sl, #0
 80061ae:	4606      	mov	r6, r0
 80061b0:	460f      	mov	r7, r1
 80061b2:	dd6d      	ble.n	8006290 <__kernel_rem_pio2+0x250>
 80061b4:	1e61      	subs	r1, r4, #1
 80061b6:	ab0c      	add	r3, sp, #48	; 0x30
 80061b8:	9d02      	ldr	r5, [sp, #8]
 80061ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80061be:	f1ca 0018 	rsb	r0, sl, #24
 80061c2:	fa43 f200 	asr.w	r2, r3, r0
 80061c6:	4415      	add	r5, r2
 80061c8:	4082      	lsls	r2, r0
 80061ca:	1a9b      	subs	r3, r3, r2
 80061cc:	aa0c      	add	r2, sp, #48	; 0x30
 80061ce:	9502      	str	r5, [sp, #8]
 80061d0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80061d4:	f1ca 0217 	rsb	r2, sl, #23
 80061d8:	fa43 fb02 	asr.w	fp, r3, r2
 80061dc:	f1bb 0f00 	cmp.w	fp, #0
 80061e0:	dd65      	ble.n	80062ae <__kernel_rem_pio2+0x26e>
 80061e2:	9b02      	ldr	r3, [sp, #8]
 80061e4:	2200      	movs	r2, #0
 80061e6:	3301      	adds	r3, #1
 80061e8:	9302      	str	r3, [sp, #8]
 80061ea:	4615      	mov	r5, r2
 80061ec:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80061f0:	4294      	cmp	r4, r2
 80061f2:	f300 809f 	bgt.w	8006334 <__kernel_rem_pio2+0x2f4>
 80061f6:	f1ba 0f00 	cmp.w	sl, #0
 80061fa:	dd07      	ble.n	800620c <__kernel_rem_pio2+0x1cc>
 80061fc:	f1ba 0f01 	cmp.w	sl, #1
 8006200:	f000 80c1 	beq.w	8006386 <__kernel_rem_pio2+0x346>
 8006204:	f1ba 0f02 	cmp.w	sl, #2
 8006208:	f000 80c7 	beq.w	800639a <__kernel_rem_pio2+0x35a>
 800620c:	f1bb 0f02 	cmp.w	fp, #2
 8006210:	d14d      	bne.n	80062ae <__kernel_rem_pio2+0x26e>
 8006212:	4632      	mov	r2, r6
 8006214:	463b      	mov	r3, r7
 8006216:	4954      	ldr	r1, [pc, #336]	; (8006368 <__kernel_rem_pio2+0x328>)
 8006218:	2000      	movs	r0, #0
 800621a:	f7f9 ffe1 	bl	80001e0 <__aeabi_dsub>
 800621e:	4606      	mov	r6, r0
 8006220:	460f      	mov	r7, r1
 8006222:	2d00      	cmp	r5, #0
 8006224:	d043      	beq.n	80062ae <__kernel_rem_pio2+0x26e>
 8006226:	4650      	mov	r0, sl
 8006228:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8006358 <__kernel_rem_pio2+0x318>
 800622c:	f000 fa58 	bl	80066e0 <scalbn>
 8006230:	4630      	mov	r0, r6
 8006232:	4639      	mov	r1, r7
 8006234:	ec53 2b10 	vmov	r2, r3, d0
 8006238:	f7f9 ffd2 	bl	80001e0 <__aeabi_dsub>
 800623c:	4606      	mov	r6, r0
 800623e:	460f      	mov	r7, r1
 8006240:	e035      	b.n	80062ae <__kernel_rem_pio2+0x26e>
 8006242:	4b4a      	ldr	r3, [pc, #296]	; (800636c <__kernel_rem_pio2+0x32c>)
 8006244:	2200      	movs	r2, #0
 8006246:	4630      	mov	r0, r6
 8006248:	4639      	mov	r1, r7
 800624a:	f7fa f981 	bl	8000550 <__aeabi_dmul>
 800624e:	f7fa fc19 	bl	8000a84 <__aeabi_d2iz>
 8006252:	f7fa f913 	bl	800047c <__aeabi_i2d>
 8006256:	4602      	mov	r2, r0
 8006258:	460b      	mov	r3, r1
 800625a:	ec43 2b18 	vmov	d8, r2, r3
 800625e:	4b44      	ldr	r3, [pc, #272]	; (8006370 <__kernel_rem_pio2+0x330>)
 8006260:	2200      	movs	r2, #0
 8006262:	f7fa f975 	bl	8000550 <__aeabi_dmul>
 8006266:	4602      	mov	r2, r0
 8006268:	460b      	mov	r3, r1
 800626a:	4630      	mov	r0, r6
 800626c:	4639      	mov	r1, r7
 800626e:	f7f9 ffb7 	bl	80001e0 <__aeabi_dsub>
 8006272:	f7fa fc07 	bl	8000a84 <__aeabi_d2iz>
 8006276:	e9d5 2300 	ldrd	r2, r3, [r5]
 800627a:	f84b 0b04 	str.w	r0, [fp], #4
 800627e:	ec51 0b18 	vmov	r0, r1, d8
 8006282:	f7f9 ffaf 	bl	80001e4 <__adddf3>
 8006286:	f109 39ff 	add.w	r9, r9, #4294967295
 800628a:	4606      	mov	r6, r0
 800628c:	460f      	mov	r7, r1
 800628e:	e75b      	b.n	8006148 <__kernel_rem_pio2+0x108>
 8006290:	d106      	bne.n	80062a0 <__kernel_rem_pio2+0x260>
 8006292:	1e63      	subs	r3, r4, #1
 8006294:	aa0c      	add	r2, sp, #48	; 0x30
 8006296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800629a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800629e:	e79d      	b.n	80061dc <__kernel_rem_pio2+0x19c>
 80062a0:	4b34      	ldr	r3, [pc, #208]	; (8006374 <__kernel_rem_pio2+0x334>)
 80062a2:	2200      	movs	r2, #0
 80062a4:	f7fa fbda 	bl	8000a5c <__aeabi_dcmpge>
 80062a8:	2800      	cmp	r0, #0
 80062aa:	d140      	bne.n	800632e <__kernel_rem_pio2+0x2ee>
 80062ac:	4683      	mov	fp, r0
 80062ae:	2200      	movs	r2, #0
 80062b0:	2300      	movs	r3, #0
 80062b2:	4630      	mov	r0, r6
 80062b4:	4639      	mov	r1, r7
 80062b6:	f7fa fbb3 	bl	8000a20 <__aeabi_dcmpeq>
 80062ba:	2800      	cmp	r0, #0
 80062bc:	f000 80c1 	beq.w	8006442 <__kernel_rem_pio2+0x402>
 80062c0:	1e65      	subs	r5, r4, #1
 80062c2:	462b      	mov	r3, r5
 80062c4:	2200      	movs	r2, #0
 80062c6:	9900      	ldr	r1, [sp, #0]
 80062c8:	428b      	cmp	r3, r1
 80062ca:	da6d      	bge.n	80063a8 <__kernel_rem_pio2+0x368>
 80062cc:	2a00      	cmp	r2, #0
 80062ce:	f000 808a 	beq.w	80063e6 <__kernel_rem_pio2+0x3a6>
 80062d2:	ab0c      	add	r3, sp, #48	; 0x30
 80062d4:	f1aa 0a18 	sub.w	sl, sl, #24
 80062d8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f000 80ae 	beq.w	800643e <__kernel_rem_pio2+0x3fe>
 80062e2:	4650      	mov	r0, sl
 80062e4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8006358 <__kernel_rem_pio2+0x318>
 80062e8:	f000 f9fa 	bl	80066e0 <scalbn>
 80062ec:	1c6b      	adds	r3, r5, #1
 80062ee:	00da      	lsls	r2, r3, #3
 80062f0:	9205      	str	r2, [sp, #20]
 80062f2:	ec57 6b10 	vmov	r6, r7, d0
 80062f6:	aa70      	add	r2, sp, #448	; 0x1c0
 80062f8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800636c <__kernel_rem_pio2+0x32c>
 80062fc:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8006300:	462c      	mov	r4, r5
 8006302:	f04f 0800 	mov.w	r8, #0
 8006306:	2c00      	cmp	r4, #0
 8006308:	f280 80d4 	bge.w	80064b4 <__kernel_rem_pio2+0x474>
 800630c:	462c      	mov	r4, r5
 800630e:	2c00      	cmp	r4, #0
 8006310:	f2c0 8102 	blt.w	8006518 <__kernel_rem_pio2+0x4d8>
 8006314:	4b18      	ldr	r3, [pc, #96]	; (8006378 <__kernel_rem_pio2+0x338>)
 8006316:	461e      	mov	r6, r3
 8006318:	ab70      	add	r3, sp, #448	; 0x1c0
 800631a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800631e:	1b2b      	subs	r3, r5, r4
 8006320:	f04f 0900 	mov.w	r9, #0
 8006324:	f04f 0a00 	mov.w	sl, #0
 8006328:	2700      	movs	r7, #0
 800632a:	9306      	str	r3, [sp, #24]
 800632c:	e0e6      	b.n	80064fc <__kernel_rem_pio2+0x4bc>
 800632e:	f04f 0b02 	mov.w	fp, #2
 8006332:	e756      	b.n	80061e2 <__kernel_rem_pio2+0x1a2>
 8006334:	f8d8 3000 	ldr.w	r3, [r8]
 8006338:	bb05      	cbnz	r5, 800637c <__kernel_rem_pio2+0x33c>
 800633a:	b123      	cbz	r3, 8006346 <__kernel_rem_pio2+0x306>
 800633c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006340:	f8c8 3000 	str.w	r3, [r8]
 8006344:	2301      	movs	r3, #1
 8006346:	3201      	adds	r2, #1
 8006348:	f108 0804 	add.w	r8, r8, #4
 800634c:	461d      	mov	r5, r3
 800634e:	e74f      	b.n	80061f0 <__kernel_rem_pio2+0x1b0>
	...
 800635c:	3ff00000 	.word	0x3ff00000
 8006360:	08006b18 	.word	0x08006b18
 8006364:	40200000 	.word	0x40200000
 8006368:	3ff00000 	.word	0x3ff00000
 800636c:	3e700000 	.word	0x3e700000
 8006370:	41700000 	.word	0x41700000
 8006374:	3fe00000 	.word	0x3fe00000
 8006378:	08006ad8 	.word	0x08006ad8
 800637c:	1acb      	subs	r3, r1, r3
 800637e:	f8c8 3000 	str.w	r3, [r8]
 8006382:	462b      	mov	r3, r5
 8006384:	e7df      	b.n	8006346 <__kernel_rem_pio2+0x306>
 8006386:	1e62      	subs	r2, r4, #1
 8006388:	ab0c      	add	r3, sp, #48	; 0x30
 800638a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800638e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006392:	a90c      	add	r1, sp, #48	; 0x30
 8006394:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006398:	e738      	b.n	800620c <__kernel_rem_pio2+0x1cc>
 800639a:	1e62      	subs	r2, r4, #1
 800639c:	ab0c      	add	r3, sp, #48	; 0x30
 800639e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063a2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80063a6:	e7f4      	b.n	8006392 <__kernel_rem_pio2+0x352>
 80063a8:	a90c      	add	r1, sp, #48	; 0x30
 80063aa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80063ae:	3b01      	subs	r3, #1
 80063b0:	430a      	orrs	r2, r1
 80063b2:	e788      	b.n	80062c6 <__kernel_rem_pio2+0x286>
 80063b4:	3301      	adds	r3, #1
 80063b6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80063ba:	2900      	cmp	r1, #0
 80063bc:	d0fa      	beq.n	80063b4 <__kernel_rem_pio2+0x374>
 80063be:	9a08      	ldr	r2, [sp, #32]
 80063c0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 80063c4:	446a      	add	r2, sp
 80063c6:	3a98      	subs	r2, #152	; 0x98
 80063c8:	9208      	str	r2, [sp, #32]
 80063ca:	9a06      	ldr	r2, [sp, #24]
 80063cc:	a920      	add	r1, sp, #128	; 0x80
 80063ce:	18a2      	adds	r2, r4, r2
 80063d0:	18e3      	adds	r3, r4, r3
 80063d2:	f104 0801 	add.w	r8, r4, #1
 80063d6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80063da:	9302      	str	r3, [sp, #8]
 80063dc:	9b02      	ldr	r3, [sp, #8]
 80063de:	4543      	cmp	r3, r8
 80063e0:	da04      	bge.n	80063ec <__kernel_rem_pio2+0x3ac>
 80063e2:	461c      	mov	r4, r3
 80063e4:	e6a2      	b.n	800612c <__kernel_rem_pio2+0xec>
 80063e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80063e8:	2301      	movs	r3, #1
 80063ea:	e7e4      	b.n	80063b6 <__kernel_rem_pio2+0x376>
 80063ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063ee:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80063f2:	f7fa f843 	bl	800047c <__aeabi_i2d>
 80063f6:	e8e5 0102 	strd	r0, r1, [r5], #8
 80063fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063fc:	46ab      	mov	fp, r5
 80063fe:	461c      	mov	r4, r3
 8006400:	f04f 0900 	mov.w	r9, #0
 8006404:	2600      	movs	r6, #0
 8006406:	2700      	movs	r7, #0
 8006408:	9b05      	ldr	r3, [sp, #20]
 800640a:	4599      	cmp	r9, r3
 800640c:	dd06      	ble.n	800641c <__kernel_rem_pio2+0x3dc>
 800640e:	9b08      	ldr	r3, [sp, #32]
 8006410:	e8e3 6702 	strd	r6, r7, [r3], #8
 8006414:	f108 0801 	add.w	r8, r8, #1
 8006418:	9308      	str	r3, [sp, #32]
 800641a:	e7df      	b.n	80063dc <__kernel_rem_pio2+0x39c>
 800641c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006420:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8006424:	f7fa f894 	bl	8000550 <__aeabi_dmul>
 8006428:	4602      	mov	r2, r0
 800642a:	460b      	mov	r3, r1
 800642c:	4630      	mov	r0, r6
 800642e:	4639      	mov	r1, r7
 8006430:	f7f9 fed8 	bl	80001e4 <__adddf3>
 8006434:	f109 0901 	add.w	r9, r9, #1
 8006438:	4606      	mov	r6, r0
 800643a:	460f      	mov	r7, r1
 800643c:	e7e4      	b.n	8006408 <__kernel_rem_pio2+0x3c8>
 800643e:	3d01      	subs	r5, #1
 8006440:	e747      	b.n	80062d2 <__kernel_rem_pio2+0x292>
 8006442:	ec47 6b10 	vmov	d0, r6, r7
 8006446:	f1ca 0000 	rsb	r0, sl, #0
 800644a:	f000 f949 	bl	80066e0 <scalbn>
 800644e:	ec57 6b10 	vmov	r6, r7, d0
 8006452:	4ba0      	ldr	r3, [pc, #640]	; (80066d4 <__kernel_rem_pio2+0x694>)
 8006454:	ee10 0a10 	vmov	r0, s0
 8006458:	2200      	movs	r2, #0
 800645a:	4639      	mov	r1, r7
 800645c:	f7fa fafe 	bl	8000a5c <__aeabi_dcmpge>
 8006460:	b1f8      	cbz	r0, 80064a2 <__kernel_rem_pio2+0x462>
 8006462:	4b9d      	ldr	r3, [pc, #628]	; (80066d8 <__kernel_rem_pio2+0x698>)
 8006464:	2200      	movs	r2, #0
 8006466:	4630      	mov	r0, r6
 8006468:	4639      	mov	r1, r7
 800646a:	f7fa f871 	bl	8000550 <__aeabi_dmul>
 800646e:	f7fa fb09 	bl	8000a84 <__aeabi_d2iz>
 8006472:	4680      	mov	r8, r0
 8006474:	f7fa f802 	bl	800047c <__aeabi_i2d>
 8006478:	4b96      	ldr	r3, [pc, #600]	; (80066d4 <__kernel_rem_pio2+0x694>)
 800647a:	2200      	movs	r2, #0
 800647c:	f7fa f868 	bl	8000550 <__aeabi_dmul>
 8006480:	460b      	mov	r3, r1
 8006482:	4602      	mov	r2, r0
 8006484:	4639      	mov	r1, r7
 8006486:	4630      	mov	r0, r6
 8006488:	f7f9 feaa 	bl	80001e0 <__aeabi_dsub>
 800648c:	f7fa fafa 	bl	8000a84 <__aeabi_d2iz>
 8006490:	1c65      	adds	r5, r4, #1
 8006492:	ab0c      	add	r3, sp, #48	; 0x30
 8006494:	f10a 0a18 	add.w	sl, sl, #24
 8006498:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800649c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80064a0:	e71f      	b.n	80062e2 <__kernel_rem_pio2+0x2a2>
 80064a2:	4630      	mov	r0, r6
 80064a4:	4639      	mov	r1, r7
 80064a6:	f7fa faed 	bl	8000a84 <__aeabi_d2iz>
 80064aa:	ab0c      	add	r3, sp, #48	; 0x30
 80064ac:	4625      	mov	r5, r4
 80064ae:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80064b2:	e716      	b.n	80062e2 <__kernel_rem_pio2+0x2a2>
 80064b4:	ab0c      	add	r3, sp, #48	; 0x30
 80064b6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80064ba:	f7f9 ffdf 	bl	800047c <__aeabi_i2d>
 80064be:	4632      	mov	r2, r6
 80064c0:	463b      	mov	r3, r7
 80064c2:	f7fa f845 	bl	8000550 <__aeabi_dmul>
 80064c6:	4642      	mov	r2, r8
 80064c8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80064cc:	464b      	mov	r3, r9
 80064ce:	4630      	mov	r0, r6
 80064d0:	4639      	mov	r1, r7
 80064d2:	f7fa f83d 	bl	8000550 <__aeabi_dmul>
 80064d6:	3c01      	subs	r4, #1
 80064d8:	4606      	mov	r6, r0
 80064da:	460f      	mov	r7, r1
 80064dc:	e713      	b.n	8006306 <__kernel_rem_pio2+0x2c6>
 80064de:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80064e2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80064e6:	f7fa f833 	bl	8000550 <__aeabi_dmul>
 80064ea:	4602      	mov	r2, r0
 80064ec:	460b      	mov	r3, r1
 80064ee:	4648      	mov	r0, r9
 80064f0:	4651      	mov	r1, sl
 80064f2:	f7f9 fe77 	bl	80001e4 <__adddf3>
 80064f6:	3701      	adds	r7, #1
 80064f8:	4681      	mov	r9, r0
 80064fa:	468a      	mov	sl, r1
 80064fc:	9b00      	ldr	r3, [sp, #0]
 80064fe:	429f      	cmp	r7, r3
 8006500:	dc02      	bgt.n	8006508 <__kernel_rem_pio2+0x4c8>
 8006502:	9b06      	ldr	r3, [sp, #24]
 8006504:	429f      	cmp	r7, r3
 8006506:	ddea      	ble.n	80064de <__kernel_rem_pio2+0x49e>
 8006508:	9a06      	ldr	r2, [sp, #24]
 800650a:	ab48      	add	r3, sp, #288	; 0x120
 800650c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8006510:	e9c6 9a00 	strd	r9, sl, [r6]
 8006514:	3c01      	subs	r4, #1
 8006516:	e6fa      	b.n	800630e <__kernel_rem_pio2+0x2ce>
 8006518:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800651a:	2b02      	cmp	r3, #2
 800651c:	dc0b      	bgt.n	8006536 <__kernel_rem_pio2+0x4f6>
 800651e:	2b00      	cmp	r3, #0
 8006520:	dc39      	bgt.n	8006596 <__kernel_rem_pio2+0x556>
 8006522:	d05d      	beq.n	80065e0 <__kernel_rem_pio2+0x5a0>
 8006524:	9b02      	ldr	r3, [sp, #8]
 8006526:	f003 0007 	and.w	r0, r3, #7
 800652a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800652e:	ecbd 8b02 	vpop	{d8}
 8006532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006536:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006538:	2b03      	cmp	r3, #3
 800653a:	d1f3      	bne.n	8006524 <__kernel_rem_pio2+0x4e4>
 800653c:	9b05      	ldr	r3, [sp, #20]
 800653e:	9500      	str	r5, [sp, #0]
 8006540:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8006544:	eb0d 0403 	add.w	r4, sp, r3
 8006548:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800654c:	46a2      	mov	sl, r4
 800654e:	9b00      	ldr	r3, [sp, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	f1aa 0a08 	sub.w	sl, sl, #8
 8006556:	dc69      	bgt.n	800662c <__kernel_rem_pio2+0x5ec>
 8006558:	46aa      	mov	sl, r5
 800655a:	f1ba 0f01 	cmp.w	sl, #1
 800655e:	f1a4 0408 	sub.w	r4, r4, #8
 8006562:	f300 8083 	bgt.w	800666c <__kernel_rem_pio2+0x62c>
 8006566:	9c05      	ldr	r4, [sp, #20]
 8006568:	ab48      	add	r3, sp, #288	; 0x120
 800656a:	441c      	add	r4, r3
 800656c:	2000      	movs	r0, #0
 800656e:	2100      	movs	r1, #0
 8006570:	2d01      	cmp	r5, #1
 8006572:	f300 809a 	bgt.w	80066aa <__kernel_rem_pio2+0x66a>
 8006576:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800657a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800657e:	f1bb 0f00 	cmp.w	fp, #0
 8006582:	f040 8098 	bne.w	80066b6 <__kernel_rem_pio2+0x676>
 8006586:	9b04      	ldr	r3, [sp, #16]
 8006588:	e9c3 7800 	strd	r7, r8, [r3]
 800658c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006590:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006594:	e7c6      	b.n	8006524 <__kernel_rem_pio2+0x4e4>
 8006596:	9e05      	ldr	r6, [sp, #20]
 8006598:	ab48      	add	r3, sp, #288	; 0x120
 800659a:	441e      	add	r6, r3
 800659c:	462c      	mov	r4, r5
 800659e:	2000      	movs	r0, #0
 80065a0:	2100      	movs	r1, #0
 80065a2:	2c00      	cmp	r4, #0
 80065a4:	da33      	bge.n	800660e <__kernel_rem_pio2+0x5ce>
 80065a6:	f1bb 0f00 	cmp.w	fp, #0
 80065aa:	d036      	beq.n	800661a <__kernel_rem_pio2+0x5da>
 80065ac:	4602      	mov	r2, r0
 80065ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80065b2:	9c04      	ldr	r4, [sp, #16]
 80065b4:	e9c4 2300 	strd	r2, r3, [r4]
 80065b8:	4602      	mov	r2, r0
 80065ba:	460b      	mov	r3, r1
 80065bc:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80065c0:	f7f9 fe0e 	bl	80001e0 <__aeabi_dsub>
 80065c4:	ae4a      	add	r6, sp, #296	; 0x128
 80065c6:	2401      	movs	r4, #1
 80065c8:	42a5      	cmp	r5, r4
 80065ca:	da29      	bge.n	8006620 <__kernel_rem_pio2+0x5e0>
 80065cc:	f1bb 0f00 	cmp.w	fp, #0
 80065d0:	d002      	beq.n	80065d8 <__kernel_rem_pio2+0x598>
 80065d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80065d6:	4619      	mov	r1, r3
 80065d8:	9b04      	ldr	r3, [sp, #16]
 80065da:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80065de:	e7a1      	b.n	8006524 <__kernel_rem_pio2+0x4e4>
 80065e0:	9c05      	ldr	r4, [sp, #20]
 80065e2:	ab48      	add	r3, sp, #288	; 0x120
 80065e4:	441c      	add	r4, r3
 80065e6:	2000      	movs	r0, #0
 80065e8:	2100      	movs	r1, #0
 80065ea:	2d00      	cmp	r5, #0
 80065ec:	da09      	bge.n	8006602 <__kernel_rem_pio2+0x5c2>
 80065ee:	f1bb 0f00 	cmp.w	fp, #0
 80065f2:	d002      	beq.n	80065fa <__kernel_rem_pio2+0x5ba>
 80065f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80065f8:	4619      	mov	r1, r3
 80065fa:	9b04      	ldr	r3, [sp, #16]
 80065fc:	e9c3 0100 	strd	r0, r1, [r3]
 8006600:	e790      	b.n	8006524 <__kernel_rem_pio2+0x4e4>
 8006602:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006606:	f7f9 fded 	bl	80001e4 <__adddf3>
 800660a:	3d01      	subs	r5, #1
 800660c:	e7ed      	b.n	80065ea <__kernel_rem_pio2+0x5aa>
 800660e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8006612:	f7f9 fde7 	bl	80001e4 <__adddf3>
 8006616:	3c01      	subs	r4, #1
 8006618:	e7c3      	b.n	80065a2 <__kernel_rem_pio2+0x562>
 800661a:	4602      	mov	r2, r0
 800661c:	460b      	mov	r3, r1
 800661e:	e7c8      	b.n	80065b2 <__kernel_rem_pio2+0x572>
 8006620:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8006624:	f7f9 fdde 	bl	80001e4 <__adddf3>
 8006628:	3401      	adds	r4, #1
 800662a:	e7cd      	b.n	80065c8 <__kernel_rem_pio2+0x588>
 800662c:	e9da 8900 	ldrd	r8, r9, [sl]
 8006630:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8006634:	9b00      	ldr	r3, [sp, #0]
 8006636:	3b01      	subs	r3, #1
 8006638:	9300      	str	r3, [sp, #0]
 800663a:	4632      	mov	r2, r6
 800663c:	463b      	mov	r3, r7
 800663e:	4640      	mov	r0, r8
 8006640:	4649      	mov	r1, r9
 8006642:	f7f9 fdcf 	bl	80001e4 <__adddf3>
 8006646:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800664a:	4602      	mov	r2, r0
 800664c:	460b      	mov	r3, r1
 800664e:	4640      	mov	r0, r8
 8006650:	4649      	mov	r1, r9
 8006652:	f7f9 fdc5 	bl	80001e0 <__aeabi_dsub>
 8006656:	4632      	mov	r2, r6
 8006658:	463b      	mov	r3, r7
 800665a:	f7f9 fdc3 	bl	80001e4 <__adddf3>
 800665e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8006662:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006666:	ed8a 7b00 	vstr	d7, [sl]
 800666a:	e770      	b.n	800654e <__kernel_rem_pio2+0x50e>
 800666c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006670:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8006674:	4640      	mov	r0, r8
 8006676:	4632      	mov	r2, r6
 8006678:	463b      	mov	r3, r7
 800667a:	4649      	mov	r1, r9
 800667c:	f7f9 fdb2 	bl	80001e4 <__adddf3>
 8006680:	e9cd 0100 	strd	r0, r1, [sp]
 8006684:	4602      	mov	r2, r0
 8006686:	460b      	mov	r3, r1
 8006688:	4640      	mov	r0, r8
 800668a:	4649      	mov	r1, r9
 800668c:	f7f9 fda8 	bl	80001e0 <__aeabi_dsub>
 8006690:	4632      	mov	r2, r6
 8006692:	463b      	mov	r3, r7
 8006694:	f7f9 fda6 	bl	80001e4 <__adddf3>
 8006698:	ed9d 7b00 	vldr	d7, [sp]
 800669c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80066a0:	ed84 7b00 	vstr	d7, [r4]
 80066a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80066a8:	e757      	b.n	800655a <__kernel_rem_pio2+0x51a>
 80066aa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80066ae:	f7f9 fd99 	bl	80001e4 <__adddf3>
 80066b2:	3d01      	subs	r5, #1
 80066b4:	e75c      	b.n	8006570 <__kernel_rem_pio2+0x530>
 80066b6:	9b04      	ldr	r3, [sp, #16]
 80066b8:	9a04      	ldr	r2, [sp, #16]
 80066ba:	601f      	str	r7, [r3, #0]
 80066bc:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80066c0:	605c      	str	r4, [r3, #4]
 80066c2:	609d      	str	r5, [r3, #8]
 80066c4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80066c8:	60d3      	str	r3, [r2, #12]
 80066ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80066ce:	6110      	str	r0, [r2, #16]
 80066d0:	6153      	str	r3, [r2, #20]
 80066d2:	e727      	b.n	8006524 <__kernel_rem_pio2+0x4e4>
 80066d4:	41700000 	.word	0x41700000
 80066d8:	3e700000 	.word	0x3e700000
 80066dc:	00000000 	.word	0x00000000

080066e0 <scalbn>:
 80066e0:	b570      	push	{r4, r5, r6, lr}
 80066e2:	ec55 4b10 	vmov	r4, r5, d0
 80066e6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80066ea:	4606      	mov	r6, r0
 80066ec:	462b      	mov	r3, r5
 80066ee:	b999      	cbnz	r1, 8006718 <scalbn+0x38>
 80066f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80066f4:	4323      	orrs	r3, r4
 80066f6:	d03f      	beq.n	8006778 <scalbn+0x98>
 80066f8:	4b35      	ldr	r3, [pc, #212]	; (80067d0 <scalbn+0xf0>)
 80066fa:	4629      	mov	r1, r5
 80066fc:	ee10 0a10 	vmov	r0, s0
 8006700:	2200      	movs	r2, #0
 8006702:	f7f9 ff25 	bl	8000550 <__aeabi_dmul>
 8006706:	4b33      	ldr	r3, [pc, #204]	; (80067d4 <scalbn+0xf4>)
 8006708:	429e      	cmp	r6, r3
 800670a:	4604      	mov	r4, r0
 800670c:	460d      	mov	r5, r1
 800670e:	da10      	bge.n	8006732 <scalbn+0x52>
 8006710:	a327      	add	r3, pc, #156	; (adr r3, 80067b0 <scalbn+0xd0>)
 8006712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006716:	e01f      	b.n	8006758 <scalbn+0x78>
 8006718:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800671c:	4291      	cmp	r1, r2
 800671e:	d10c      	bne.n	800673a <scalbn+0x5a>
 8006720:	ee10 2a10 	vmov	r2, s0
 8006724:	4620      	mov	r0, r4
 8006726:	4629      	mov	r1, r5
 8006728:	f7f9 fd5c 	bl	80001e4 <__adddf3>
 800672c:	4604      	mov	r4, r0
 800672e:	460d      	mov	r5, r1
 8006730:	e022      	b.n	8006778 <scalbn+0x98>
 8006732:	460b      	mov	r3, r1
 8006734:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006738:	3936      	subs	r1, #54	; 0x36
 800673a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800673e:	4296      	cmp	r6, r2
 8006740:	dd0d      	ble.n	800675e <scalbn+0x7e>
 8006742:	2d00      	cmp	r5, #0
 8006744:	a11c      	add	r1, pc, #112	; (adr r1, 80067b8 <scalbn+0xd8>)
 8006746:	e9d1 0100 	ldrd	r0, r1, [r1]
 800674a:	da02      	bge.n	8006752 <scalbn+0x72>
 800674c:	a11c      	add	r1, pc, #112	; (adr r1, 80067c0 <scalbn+0xe0>)
 800674e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006752:	a319      	add	r3, pc, #100	; (adr r3, 80067b8 <scalbn+0xd8>)
 8006754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006758:	f7f9 fefa 	bl	8000550 <__aeabi_dmul>
 800675c:	e7e6      	b.n	800672c <scalbn+0x4c>
 800675e:	1872      	adds	r2, r6, r1
 8006760:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006764:	428a      	cmp	r2, r1
 8006766:	dcec      	bgt.n	8006742 <scalbn+0x62>
 8006768:	2a00      	cmp	r2, #0
 800676a:	dd08      	ble.n	800677e <scalbn+0x9e>
 800676c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006770:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006774:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006778:	ec45 4b10 	vmov	d0, r4, r5
 800677c:	bd70      	pop	{r4, r5, r6, pc}
 800677e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006782:	da08      	bge.n	8006796 <scalbn+0xb6>
 8006784:	2d00      	cmp	r5, #0
 8006786:	a10a      	add	r1, pc, #40	; (adr r1, 80067b0 <scalbn+0xd0>)
 8006788:	e9d1 0100 	ldrd	r0, r1, [r1]
 800678c:	dac0      	bge.n	8006710 <scalbn+0x30>
 800678e:	a10e      	add	r1, pc, #56	; (adr r1, 80067c8 <scalbn+0xe8>)
 8006790:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006794:	e7bc      	b.n	8006710 <scalbn+0x30>
 8006796:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800679a:	3236      	adds	r2, #54	; 0x36
 800679c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80067a0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80067a4:	4620      	mov	r0, r4
 80067a6:	4b0c      	ldr	r3, [pc, #48]	; (80067d8 <scalbn+0xf8>)
 80067a8:	2200      	movs	r2, #0
 80067aa:	e7d5      	b.n	8006758 <scalbn+0x78>
 80067ac:	f3af 8000 	nop.w
 80067b0:	c2f8f359 	.word	0xc2f8f359
 80067b4:	01a56e1f 	.word	0x01a56e1f
 80067b8:	8800759c 	.word	0x8800759c
 80067bc:	7e37e43c 	.word	0x7e37e43c
 80067c0:	8800759c 	.word	0x8800759c
 80067c4:	fe37e43c 	.word	0xfe37e43c
 80067c8:	c2f8f359 	.word	0xc2f8f359
 80067cc:	81a56e1f 	.word	0x81a56e1f
 80067d0:	43500000 	.word	0x43500000
 80067d4:	ffff3cb0 	.word	0xffff3cb0
 80067d8:	3c900000 	.word	0x3c900000
 80067dc:	00000000 	.word	0x00000000

080067e0 <floor>:
 80067e0:	ec51 0b10 	vmov	r0, r1, d0
 80067e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80067e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067ec:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 80067f0:	2e13      	cmp	r6, #19
 80067f2:	ee10 5a10 	vmov	r5, s0
 80067f6:	ee10 8a10 	vmov	r8, s0
 80067fa:	460c      	mov	r4, r1
 80067fc:	dc31      	bgt.n	8006862 <floor+0x82>
 80067fe:	2e00      	cmp	r6, #0
 8006800:	da14      	bge.n	800682c <floor+0x4c>
 8006802:	a333      	add	r3, pc, #204	; (adr r3, 80068d0 <floor+0xf0>)
 8006804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006808:	f7f9 fcec 	bl	80001e4 <__adddf3>
 800680c:	2200      	movs	r2, #0
 800680e:	2300      	movs	r3, #0
 8006810:	f7fa f92e 	bl	8000a70 <__aeabi_dcmpgt>
 8006814:	b138      	cbz	r0, 8006826 <floor+0x46>
 8006816:	2c00      	cmp	r4, #0
 8006818:	da53      	bge.n	80068c2 <floor+0xe2>
 800681a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800681e:	4325      	orrs	r5, r4
 8006820:	d052      	beq.n	80068c8 <floor+0xe8>
 8006822:	4c2d      	ldr	r4, [pc, #180]	; (80068d8 <floor+0xf8>)
 8006824:	2500      	movs	r5, #0
 8006826:	4621      	mov	r1, r4
 8006828:	4628      	mov	r0, r5
 800682a:	e024      	b.n	8006876 <floor+0x96>
 800682c:	4f2b      	ldr	r7, [pc, #172]	; (80068dc <floor+0xfc>)
 800682e:	4137      	asrs	r7, r6
 8006830:	ea01 0307 	and.w	r3, r1, r7
 8006834:	4303      	orrs	r3, r0
 8006836:	d01e      	beq.n	8006876 <floor+0x96>
 8006838:	a325      	add	r3, pc, #148	; (adr r3, 80068d0 <floor+0xf0>)
 800683a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683e:	f7f9 fcd1 	bl	80001e4 <__adddf3>
 8006842:	2200      	movs	r2, #0
 8006844:	2300      	movs	r3, #0
 8006846:	f7fa f913 	bl	8000a70 <__aeabi_dcmpgt>
 800684a:	2800      	cmp	r0, #0
 800684c:	d0eb      	beq.n	8006826 <floor+0x46>
 800684e:	2c00      	cmp	r4, #0
 8006850:	bfbe      	ittt	lt
 8006852:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006856:	4133      	asrlt	r3, r6
 8006858:	18e4      	addlt	r4, r4, r3
 800685a:	ea24 0407 	bic.w	r4, r4, r7
 800685e:	2500      	movs	r5, #0
 8006860:	e7e1      	b.n	8006826 <floor+0x46>
 8006862:	2e33      	cmp	r6, #51	; 0x33
 8006864:	dd0b      	ble.n	800687e <floor+0x9e>
 8006866:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800686a:	d104      	bne.n	8006876 <floor+0x96>
 800686c:	ee10 2a10 	vmov	r2, s0
 8006870:	460b      	mov	r3, r1
 8006872:	f7f9 fcb7 	bl	80001e4 <__adddf3>
 8006876:	ec41 0b10 	vmov	d0, r0, r1
 800687a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800687e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8006882:	f04f 37ff 	mov.w	r7, #4294967295
 8006886:	40df      	lsrs	r7, r3
 8006888:	4238      	tst	r0, r7
 800688a:	d0f4      	beq.n	8006876 <floor+0x96>
 800688c:	a310      	add	r3, pc, #64	; (adr r3, 80068d0 <floor+0xf0>)
 800688e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006892:	f7f9 fca7 	bl	80001e4 <__adddf3>
 8006896:	2200      	movs	r2, #0
 8006898:	2300      	movs	r3, #0
 800689a:	f7fa f8e9 	bl	8000a70 <__aeabi_dcmpgt>
 800689e:	2800      	cmp	r0, #0
 80068a0:	d0c1      	beq.n	8006826 <floor+0x46>
 80068a2:	2c00      	cmp	r4, #0
 80068a4:	da0a      	bge.n	80068bc <floor+0xdc>
 80068a6:	2e14      	cmp	r6, #20
 80068a8:	d101      	bne.n	80068ae <floor+0xce>
 80068aa:	3401      	adds	r4, #1
 80068ac:	e006      	b.n	80068bc <floor+0xdc>
 80068ae:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80068b2:	2301      	movs	r3, #1
 80068b4:	40b3      	lsls	r3, r6
 80068b6:	441d      	add	r5, r3
 80068b8:	45a8      	cmp	r8, r5
 80068ba:	d8f6      	bhi.n	80068aa <floor+0xca>
 80068bc:	ea25 0507 	bic.w	r5, r5, r7
 80068c0:	e7b1      	b.n	8006826 <floor+0x46>
 80068c2:	2500      	movs	r5, #0
 80068c4:	462c      	mov	r4, r5
 80068c6:	e7ae      	b.n	8006826 <floor+0x46>
 80068c8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80068cc:	e7ab      	b.n	8006826 <floor+0x46>
 80068ce:	bf00      	nop
 80068d0:	8800759c 	.word	0x8800759c
 80068d4:	7e37e43c 	.word	0x7e37e43c
 80068d8:	bff00000 	.word	0xbff00000
 80068dc:	000fffff 	.word	0x000fffff

080068e0 <_init>:
 80068e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068e2:	bf00      	nop
 80068e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068e6:	bc08      	pop	{r3}
 80068e8:	469e      	mov	lr, r3
 80068ea:	4770      	bx	lr

080068ec <_fini>:
 80068ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ee:	bf00      	nop
 80068f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068f2:	bc08      	pop	{r3}
 80068f4:	469e      	mov	lr, r3
 80068f6:	4770      	bx	lr
