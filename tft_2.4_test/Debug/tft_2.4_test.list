
tft_2.4_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005688  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f70  08005794  08005794  00015794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006704  08006704  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08006704  08006704  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006704  08006704  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006704  08006704  00016704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006708  08006708  00016708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  0800670c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000018  08006724  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  08006724  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a499  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000198a  00000000  00000000  0002a51d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000be0  00000000  00000000  0002bea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c49  00000000  00000000  0002ca88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c901  00000000  00000000  000436d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008894c  00000000  00000000  0004ffd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 0000092a  00000000  00000000  000d891e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000031e8  00000000  00000000  000d9248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000dc430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	0800577c 	.word	0x0800577c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	0800577c 	.word	0x0800577c

0800014c <delay>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
void delay(uint32_t time)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000154:	4b08      	ldr	r3, [pc, #32]	; (8000178 <delay+0x2c>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	2200      	movs	r2, #0
 800015a:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim2))<time);
 800015c:	bf00      	nop
 800015e:	4b06      	ldr	r3, [pc, #24]	; (8000178 <delay+0x2c>)
 8000160:	681b      	ldr	r3, [r3, #0]
 8000162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000164:	687a      	ldr	r2, [r7, #4]
 8000166:	429a      	cmp	r2, r3
 8000168:	d8f9      	bhi.n	800015e <delay+0x12>
}
 800016a:	bf00      	nop
 800016c:	bf00      	nop
 800016e:	370c      	adds	r7, #12
 8000170:	46bd      	mov	sp, r7
 8000172:	bc80      	pop	{r7}
 8000174:	4770      	bx	lr
 8000176:	bf00      	nop
 8000178:	20000038 	.word	0x20000038

0800017c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000182:	f004 f933 	bl	80043ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000186:	f000 f84b 	bl	8000220 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018a:	f000 f8db 	bl	8000344 <MX_GPIO_Init>
  MX_TIM2_Init();
 800018e:	f000 f88d 	bl	80002ac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 8000192:	481f      	ldr	r0, [pc, #124]	; (8000210 <main+0x94>)
 8000194:	f005 f85e 	bl	8005254 <HAL_TIM_Base_Start>

  ID = readID();
 8000198:	f001 fbd0 	bl	800193c <readID>
 800019c:	4603      	mov	r3, r0
 800019e:	461a      	mov	r2, r3
 80001a0:	4b1c      	ldr	r3, [pc, #112]	; (8000214 <main+0x98>)
 80001a2:	801a      	strh	r2, [r3, #0]

  HAL_Delay(100);
 80001a4:	2064      	movs	r0, #100	; 0x64
 80001a6:	f004 f983 	bl	80044b0 <HAL_Delay>

  tft_init(ID);
 80001aa:	4b1a      	ldr	r3, [pc, #104]	; (8000214 <main+0x98>)
 80001ac:	881b      	ldrh	r3, [r3, #0]
 80001ae:	4618      	mov	r0, r3
 80001b0:	f001 f806 	bl	80011c0 <tft_init>

  setRotation(0);
 80001b4:	2000      	movs	r0, #0
 80001b6:	f002 f9f9 	bl	80025ac <setRotation>

  fillScreen(BLACK);
 80001ba:	2000      	movs	r0, #0
 80001bc:	f002 ff7e 	bl	80030bc <fillScreen>

  testFillScreen();
 80001c0:	f003 fd02 	bl	8003bc8 <testFillScreen>
  testLines(CYAN);
 80001c4:	f240 70ff 	movw	r0, #2047	; 0x7ff
 80001c8:	f003 fd13 	bl	8003bf2 <testLines>
  testFastLines(RED, BLUE);
 80001cc:	211f      	movs	r1, #31
 80001ce:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80001d2:	f003 fe0c 	bl	8003dee <testFastLines>
  testFilledCircles(10, MAGENTA);
 80001d6:	f64f 011f 	movw	r1, #63519	; 0xf81f
 80001da:	200a      	movs	r0, #10
 80001dc:	f003 fe43 	bl	8003e66 <testFilledCircles>
  testCircles(10, WHITE);
 80001e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80001e4:	200a      	movs	r0, #10
 80001e6:	f003 fe78 	bl	8003eda <testCircles>

  fillScreen(BLACK);
 80001ea:	2000      	movs	r0, #0
 80001ec:	f002 ff66 	bl	80030bc <fillScreen>

  setRotation(0);
 80001f0:	2000      	movs	r0, #0
 80001f2:	f002 f9db 	bl	80025ac <setRotation>

  printnewtstr(100, RED, &mono12x7bold, 2, "HELLO WORLD");
 80001f6:	4b08      	ldr	r3, [pc, #32]	; (8000218 <main+0x9c>)
 80001f8:	9300      	str	r3, [sp, #0]
 80001fa:	2302      	movs	r3, #2
 80001fc:	4a07      	ldr	r2, [pc, #28]	; (800021c <main+0xa0>)
 80001fe:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8000202:	2064      	movs	r0, #100	; 0x64
 8000204:	f004 f836 	bl	8004274 <printnewtstr>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  scrollup(100);
 8000208:	2064      	movs	r0, #100	; 0x64
 800020a:	f004 f88b 	bl	8004324 <scrollup>
 800020e:	e7fb      	b.n	8000208 <main+0x8c>
 8000210:	20000038 	.word	0x20000038
 8000214:	20000080 	.word	0x20000080
 8000218:	08005794 	.word	0x08005794
 800021c:	08006160 	.word	0x08006160

08000220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b090      	sub	sp, #64	; 0x40
 8000224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000226:	f107 0318 	add.w	r3, r7, #24
 800022a:	2228      	movs	r2, #40	; 0x28
 800022c:	2100      	movs	r1, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f005 fa78 	bl	8005724 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000234:	1d3b      	adds	r3, r7, #4
 8000236:	2200      	movs	r2, #0
 8000238:	601a      	str	r2, [r3, #0]
 800023a:	605a      	str	r2, [r3, #4]
 800023c:	609a      	str	r2, [r3, #8]
 800023e:	60da      	str	r2, [r3, #12]
 8000240:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000242:	2301      	movs	r3, #1
 8000244:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000246:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800024a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800024c:	2300      	movs	r3, #0
 800024e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000250:	2301      	movs	r3, #1
 8000252:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000254:	2302      	movs	r3, #2
 8000256:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000258:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800025c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800025e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000262:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000264:	f107 0318 	add.w	r3, r7, #24
 8000268:	4618      	mov	r0, r3
 800026a:	f004 fbc5 	bl	80049f8 <HAL_RCC_OscConfig>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000274:	f000 f8c6 	bl	8000404 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000278:	230f      	movs	r3, #15
 800027a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800027c:	2302      	movs	r3, #2
 800027e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000280:	2300      	movs	r3, #0
 8000282:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000284:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000288:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	2102      	movs	r1, #2
 8000292:	4618      	mov	r0, r3
 8000294:	f004 fe32 	bl	8004efc <HAL_RCC_ClockConfig>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800029e:	f000 f8b1 	bl	8000404 <Error_Handler>
  }
}
 80002a2:	bf00      	nop
 80002a4:	3740      	adds	r7, #64	; 0x40
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
	...

080002ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b086      	sub	sp, #24
 80002b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002b2:	f107 0308 	add.w	r3, r7, #8
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002c0:	463b      	mov	r3, r7
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002c8:	4b1d      	ldr	r3, [pc, #116]	; (8000340 <MX_TIM2_Init+0x94>)
 80002ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80002d0:	4b1b      	ldr	r3, [pc, #108]	; (8000340 <MX_TIM2_Init+0x94>)
 80002d2:	2247      	movs	r2, #71	; 0x47
 80002d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002d6:	4b1a      	ldr	r3, [pc, #104]	; (8000340 <MX_TIM2_Init+0x94>)
 80002d8:	2200      	movs	r2, #0
 80002da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80002dc:	4b18      	ldr	r3, [pc, #96]	; (8000340 <MX_TIM2_Init+0x94>)
 80002de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002e4:	4b16      	ldr	r3, [pc, #88]	; (8000340 <MX_TIM2_Init+0x94>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002ea:	4b15      	ldr	r3, [pc, #84]	; (8000340 <MX_TIM2_Init+0x94>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002f0:	4813      	ldr	r0, [pc, #76]	; (8000340 <MX_TIM2_Init+0x94>)
 80002f2:	f004 ff5f 	bl	80051b4 <HAL_TIM_Base_Init>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80002fc:	f000 f882 	bl	8000404 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000304:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000306:	f107 0308 	add.w	r3, r7, #8
 800030a:	4619      	mov	r1, r3
 800030c:	480c      	ldr	r0, [pc, #48]	; (8000340 <MX_TIM2_Init+0x94>)
 800030e:	f004 ffeb 	bl	80052e8 <HAL_TIM_ConfigClockSource>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000318:	f000 f874 	bl	8000404 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800031c:	2300      	movs	r3, #0
 800031e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000320:	2300      	movs	r3, #0
 8000322:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000324:	463b      	mov	r3, r7
 8000326:	4619      	mov	r1, r3
 8000328:	4805      	ldr	r0, [pc, #20]	; (8000340 <MX_TIM2_Init+0x94>)
 800032a:	f005 f99d 	bl	8005668 <HAL_TIMEx_MasterConfigSynchronization>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000334:	f000 f866 	bl	8000404 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000338:	bf00      	nop
 800033a:	3718      	adds	r7, #24
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}
 8000340:	20000038 	.word	0x20000038

08000344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b088      	sub	sp, #32
 8000348:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800034a:	f107 0310 	add.w	r3, r7, #16
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000358:	4b27      	ldr	r3, [pc, #156]	; (80003f8 <MX_GPIO_Init+0xb4>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	4a26      	ldr	r2, [pc, #152]	; (80003f8 <MX_GPIO_Init+0xb4>)
 800035e:	f043 0320 	orr.w	r3, r3, #32
 8000362:	6193      	str	r3, [r2, #24]
 8000364:	4b24      	ldr	r3, [pc, #144]	; (80003f8 <MX_GPIO_Init+0xb4>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	f003 0320 	and.w	r3, r3, #32
 800036c:	60fb      	str	r3, [r7, #12]
 800036e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000370:	4b21      	ldr	r3, [pc, #132]	; (80003f8 <MX_GPIO_Init+0xb4>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	4a20      	ldr	r2, [pc, #128]	; (80003f8 <MX_GPIO_Init+0xb4>)
 8000376:	f043 0304 	orr.w	r3, r3, #4
 800037a:	6193      	str	r3, [r2, #24]
 800037c:	4b1e      	ldr	r3, [pc, #120]	; (80003f8 <MX_GPIO_Init+0xb4>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	f003 0304 	and.w	r3, r3, #4
 8000384:	60bb      	str	r3, [r7, #8]
 8000386:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000388:	4b1b      	ldr	r3, [pc, #108]	; (80003f8 <MX_GPIO_Init+0xb4>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a1a      	ldr	r2, [pc, #104]	; (80003f8 <MX_GPIO_Init+0xb4>)
 800038e:	f043 0308 	orr.w	r3, r3, #8
 8000392:	6193      	str	r3, [r2, #24]
 8000394:	4b18      	ldr	r3, [pc, #96]	; (80003f8 <MX_GPIO_Init+0xb4>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	f003 0308 	and.w	r3, r3, #8
 800039c:	607b      	str	r3, [r7, #4]
 800039e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80003a0:	2200      	movs	r2, #0
 80003a2:	f248 013f 	movw	r1, #32831	; 0x803f
 80003a6:	4815      	ldr	r0, [pc, #84]	; (80003fc <MX_GPIO_Init+0xb8>)
 80003a8:	f004 fb0e 	bl	80049c8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80003ac:	2200      	movs	r2, #0
 80003ae:	217b      	movs	r1, #123	; 0x7b
 80003b0:	4813      	ldr	r0, [pc, #76]	; (8000400 <MX_GPIO_Init+0xbc>)
 80003b2:	f004 fb09 	bl	80049c8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80003b6:	f248 033f 	movw	r3, #32831	; 0x803f
 80003ba:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003bc:	2301      	movs	r3, #1
 80003be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c0:	2300      	movs	r3, #0
 80003c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c4:	2302      	movs	r3, #2
 80003c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003c8:	f107 0310 	add.w	r3, r7, #16
 80003cc:	4619      	mov	r1, r3
 80003ce:	480b      	ldr	r0, [pc, #44]	; (80003fc <MX_GPIO_Init+0xb8>)
 80003d0:	f004 f976 	bl	80046c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB3 PB4
                           PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80003d4:	237b      	movs	r3, #123	; 0x7b
 80003d6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d8:	2301      	movs	r3, #1
 80003da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003dc:	2300      	movs	r3, #0
 80003de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e0:	2302      	movs	r3, #2
 80003e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003e4:	f107 0310 	add.w	r3, r7, #16
 80003e8:	4619      	mov	r1, r3
 80003ea:	4805      	ldr	r0, [pc, #20]	; (8000400 <MX_GPIO_Init+0xbc>)
 80003ec:	f004 f968 	bl	80046c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003f0:	bf00      	nop
 80003f2:	3720      	adds	r7, #32
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	40021000 	.word	0x40021000
 80003fc:	40010800 	.word	0x40010800
 8000400:	40010c00 	.word	0x40010c00

08000404 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000408:	b672      	cpsid	i
}
 800040a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800040c:	e7fe      	b.n	800040c <Error_Handler+0x8>
	...

08000410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000410:	b480      	push	{r7}
 8000412:	b085      	sub	sp, #20
 8000414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000416:	4b15      	ldr	r3, [pc, #84]	; (800046c <HAL_MspInit+0x5c>)
 8000418:	699b      	ldr	r3, [r3, #24]
 800041a:	4a14      	ldr	r2, [pc, #80]	; (800046c <HAL_MspInit+0x5c>)
 800041c:	f043 0301 	orr.w	r3, r3, #1
 8000420:	6193      	str	r3, [r2, #24]
 8000422:	4b12      	ldr	r3, [pc, #72]	; (800046c <HAL_MspInit+0x5c>)
 8000424:	699b      	ldr	r3, [r3, #24]
 8000426:	f003 0301 	and.w	r3, r3, #1
 800042a:	60bb      	str	r3, [r7, #8]
 800042c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800042e:	4b0f      	ldr	r3, [pc, #60]	; (800046c <HAL_MspInit+0x5c>)
 8000430:	69db      	ldr	r3, [r3, #28]
 8000432:	4a0e      	ldr	r2, [pc, #56]	; (800046c <HAL_MspInit+0x5c>)
 8000434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000438:	61d3      	str	r3, [r2, #28]
 800043a:	4b0c      	ldr	r3, [pc, #48]	; (800046c <HAL_MspInit+0x5c>)
 800043c:	69db      	ldr	r3, [r3, #28]
 800043e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000442:	607b      	str	r3, [r7, #4]
 8000444:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000446:	4b0a      	ldr	r3, [pc, #40]	; (8000470 <HAL_MspInit+0x60>)
 8000448:	685b      	ldr	r3, [r3, #4]
 800044a:	60fb      	str	r3, [r7, #12]
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000452:	60fb      	str	r3, [r7, #12]
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800045a:	60fb      	str	r3, [r7, #12]
 800045c:	4a04      	ldr	r2, [pc, #16]	; (8000470 <HAL_MspInit+0x60>)
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000462:	bf00      	nop
 8000464:	3714      	adds	r7, #20
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr
 800046c:	40021000 	.word	0x40021000
 8000470:	40010000 	.word	0x40010000

08000474 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000474:	b480      	push	{r7}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000484:	d10b      	bne.n	800049e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000486:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <HAL_TIM_Base_MspInit+0x34>)
 8000488:	69db      	ldr	r3, [r3, #28]
 800048a:	4a07      	ldr	r2, [pc, #28]	; (80004a8 <HAL_TIM_Base_MspInit+0x34>)
 800048c:	f043 0301 	orr.w	r3, r3, #1
 8000490:	61d3      	str	r3, [r2, #28]
 8000492:	4b05      	ldr	r3, [pc, #20]	; (80004a8 <HAL_TIM_Base_MspInit+0x34>)
 8000494:	69db      	ldr	r3, [r3, #28]
 8000496:	f003 0301 	and.w	r3, r3, #1
 800049a:	60fb      	str	r3, [r7, #12]
 800049c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800049e:	bf00      	nop
 80004a0:	3714      	adds	r7, #20
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr
 80004a8:	40021000 	.word	0x40021000

080004ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004b0:	e7fe      	b.n	80004b0 <NMI_Handler+0x4>

080004b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004b2:	b480      	push	{r7}
 80004b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004b6:	e7fe      	b.n	80004b6 <HardFault_Handler+0x4>

080004b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004bc:	e7fe      	b.n	80004bc <MemManage_Handler+0x4>

080004be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004be:	b480      	push	{r7}
 80004c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004c2:	e7fe      	b.n	80004c2 <BusFault_Handler+0x4>

080004c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004c8:	e7fe      	b.n	80004c8 <UsageFault_Handler+0x4>

080004ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ca:	b480      	push	{r7}
 80004cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004ce:	bf00      	nop
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bc80      	pop	{r7}
 80004d4:	4770      	bx	lr

080004d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004d6:	b480      	push	{r7}
 80004d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004da:	bf00      	nop
 80004dc:	46bd      	mov	sp, r7
 80004de:	bc80      	pop	{r7}
 80004e0:	4770      	bx	lr

080004e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004e2:	b480      	push	{r7}
 80004e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004e6:	bf00      	nop
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bc80      	pop	{r7}
 80004ec:	4770      	bx	lr

080004ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004ee:	b580      	push	{r7, lr}
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004f2:	f003 ffc1 	bl	8004478 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}

080004fa <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004fe:	bf00      	nop
 8000500:	46bd      	mov	sp, r7
 8000502:	bc80      	pop	{r7}
 8000504:	4770      	bx	lr

08000506 <PIN_LOW>:

/********************************************** NO CHNAGES AFTER THIS ************************************************/


void PIN_LOW (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000506:	b580      	push	{r7, lr}
 8000508:	b082      	sub	sp, #8
 800050a:	af00      	add	r7, sp, #0
 800050c:	6078      	str	r0, [r7, #4]
 800050e:	460b      	mov	r3, r1
 8000510:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000512:	887b      	ldrh	r3, [r7, #2]
 8000514:	2200      	movs	r2, #0
 8000516:	4619      	mov	r1, r3
 8000518:	6878      	ldr	r0, [r7, #4]
 800051a:	f004 fa55 	bl	80049c8 <HAL_GPIO_WritePin>
}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}

08000526 <PIN_HIGH>:

void PIN_HIGH (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000526:	b580      	push	{r7, lr}
 8000528:	b082      	sub	sp, #8
 800052a:	af00      	add	r7, sp, #0
 800052c:	6078      	str	r0, [r7, #4]
 800052e:	460b      	mov	r3, r1
 8000530:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8000532:	887b      	ldrh	r3, [r7, #2]
 8000534:	2201      	movs	r2, #1
 8000536:	4619      	mov	r1, r3
 8000538:	6878      	ldr	r0, [r7, #4]
 800053a:	f004 fa45 	bl	80049c8 <HAL_GPIO_WritePin>
}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}

08000546 <PIN_INPUT>:

void PIN_INPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000546:	b580      	push	{r7, lr}
 8000548:	b086      	sub	sp, #24
 800054a:	af00      	add	r7, sp, #0
 800054c:	6078      	str	r0, [r7, #4]
 800054e:	460b      	mov	r3, r1
 8000550:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 8000552:	887b      	ldrh	r3, [r7, #2]
 8000554:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000556:	2300      	movs	r3, #0
 8000558:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800055a:	2301      	movs	r3, #1
 800055c:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800055e:	f107 0308 	add.w	r3, r7, #8
 8000562:	4619      	mov	r1, r3
 8000564:	6878      	ldr	r0, [r7, #4]
 8000566:	f004 f8ab 	bl	80046c0 <HAL_GPIO_Init>
}
 800056a:	bf00      	nop
 800056c:	3718      	adds	r7, #24
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}

08000572 <PIN_OUTPUT>:

void PIN_OUTPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000572:	b580      	push	{r7, lr}
 8000574:	b086      	sub	sp, #24
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
 800057a:	460b      	mov	r3, r1
 800057c:	807b      	strh	r3, [r7, #2]
	 GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 800057e:	887b      	ldrh	r3, [r7, #2]
 8000580:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000582:	2301      	movs	r3, #1
 8000584:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000586:	2300      	movs	r3, #0
 8000588:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800058a:	2303      	movs	r3, #3
 800058c:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800058e:	f107 0308 	add.w	r3, r7, #8
 8000592:	4619      	mov	r1, r3
 8000594:	6878      	ldr	r0, [r7, #4]
 8000596:	f004 f893 	bl	80046c0 <HAL_GPIO_Init>
}
 800059a:	bf00      	nop
 800059c:	3718      	adds	r7, #24
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
	...

080005a4 <width>:

uint16_t _width    = WIDTH;
uint16_t _height   = HEIGHT;

uint16_t width(void)
{ return _width; }
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	4b02      	ldr	r3, [pc, #8]	; (80005b4 <width+0x10>)
 80005aa:	881b      	ldrh	r3, [r3, #0]
 80005ac:	4618      	mov	r0, r3
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr
 80005b4:	20000004 	.word	0x20000004

080005b8 <height>:

uint16_t height(void)
{ return _height; }
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	4b02      	ldr	r3, [pc, #8]	; (80005c8 <height+0x10>)
 80005be:	881b      	ldrh	r3, [r3, #0]
 80005c0:	4618      	mov	r0, r3
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr
 80005c8:	20000006 	.word	0x20000006

080005cc <color565_to_555>:
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h);

void setReadDir (void);
void setWriteDir (void);
static uint8_t done_reset, is8347, is555, is9797;
static uint16_t color565_to_555(uint16_t color) {
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x1F) << 1) | ((color & 0x01));  //lose Green LSB, extend Blue LSB
 80005d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005da:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80005de:	b21a      	sxth	r2, r3
 80005e0:	88fb      	ldrh	r3, [r7, #6]
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	b21b      	sxth	r3, r3
 80005e6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80005ea:	b21b      	sxth	r3, r3
 80005ec:	4313      	orrs	r3, r2
 80005ee:	b21a      	sxth	r2, r3
 80005f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005f4:	f003 0301 	and.w	r3, r3, #1
 80005f8:	b21b      	sxth	r3, r3
 80005fa:	4313      	orrs	r3, r2
 80005fc:	b21b      	sxth	r3, r3
 80005fe:	b29b      	uxth	r3, r3
}
 8000600:	4618      	mov	r0, r3
 8000602:	370c      	adds	r7, #12
 8000604:	46bd      	mov	sp, r7
 8000606:	bc80      	pop	{r7}
 8000608:	4770      	bx	lr

0800060a <color555_to_565>:
static uint16_t color555_to_565(uint16_t color) {
 800060a:	b480      	push	{r7}
 800060c:	b083      	sub	sp, #12
 800060e:	af00      	add	r7, sp, #0
 8000610:	4603      	mov	r3, r0
 8000612:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x0400) >> 5) | ((color & 0x3F) >> 1); //extend Green LSB
 8000614:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000618:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800061c:	b21a      	sxth	r2, r3
 800061e:	88fb      	ldrh	r3, [r7, #6]
 8000620:	115b      	asrs	r3, r3, #5
 8000622:	b21b      	sxth	r3, r3
 8000624:	f003 0320 	and.w	r3, r3, #32
 8000628:	b21b      	sxth	r3, r3
 800062a:	4313      	orrs	r3, r2
 800062c:	b21a      	sxth	r2, r3
 800062e:	88fb      	ldrh	r3, [r7, #6]
 8000630:	105b      	asrs	r3, r3, #1
 8000632:	b21b      	sxth	r3, r3
 8000634:	f003 031f 	and.w	r3, r3, #31
 8000638:	b21b      	sxth	r3, r3
 800063a:	4313      	orrs	r3, r2
 800063c:	b21b      	sxth	r3, r3
 800063e:	b29b      	uxth	r3, r3
}
 8000640:	4618      	mov	r0, r3
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	bc80      	pop	{r7}
 8000648:	4770      	bx	lr

0800064a <color565_to_r>:
static uint8_t color565_to_r(uint16_t color) {
 800064a:	b480      	push	{r7}
 800064c:	b083      	sub	sp, #12
 800064e:	af00      	add	r7, sp, #0
 8000650:	4603      	mov	r3, r0
 8000652:	80fb      	strh	r3, [r7, #6]
    return ((color & 0xF800) >> 8);  // transform to rrrrrxxx
 8000654:	88fb      	ldrh	r3, [r7, #6]
 8000656:	121b      	asrs	r3, r3, #8
 8000658:	b2db      	uxtb	r3, r3
 800065a:	f023 0307 	bic.w	r3, r3, #7
 800065e:	b2db      	uxtb	r3, r3
}
 8000660:	4618      	mov	r0, r3
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr

0800066a <color565_to_g>:
static uint8_t color565_to_g(uint16_t color) {
 800066a:	b480      	push	{r7}
 800066c:	b083      	sub	sp, #12
 800066e:	af00      	add	r7, sp, #0
 8000670:	4603      	mov	r3, r0
 8000672:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x07E0) >> 3);  // transform to ggggggxx
 8000674:	88fb      	ldrh	r3, [r7, #6]
 8000676:	10db      	asrs	r3, r3, #3
 8000678:	b2db      	uxtb	r3, r3
 800067a:	f023 0303 	bic.w	r3, r3, #3
 800067e:	b2db      	uxtb	r3, r3
}
 8000680:	4618      	mov	r0, r3
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr

0800068a <color565_to_b>:
static uint8_t color565_to_b(uint16_t color) {
 800068a:	b480      	push	{r7}
 800068c:	b083      	sub	sp, #12
 800068e:	af00      	add	r7, sp, #0
 8000690:	4603      	mov	r3, r0
 8000692:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x001F) << 3);  // transform to bbbbbxxx
 8000694:	88fb      	ldrh	r3, [r7, #6]
 8000696:	00db      	lsls	r3, r3, #3
 8000698:	b2db      	uxtb	r3, r3
}
 800069a:	4618      	mov	r0, r3
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr

080006a4 <color565>:

uint16_t color565(uint8_t r, uint8_t g, uint8_t b) { return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3); }
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	71fb      	strb	r3, [r7, #7]
 80006ae:	460b      	mov	r3, r1
 80006b0:	71bb      	strb	r3, [r7, #6]
 80006b2:	4613      	mov	r3, r2
 80006b4:	717b      	strb	r3, [r7, #5]
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	021b      	lsls	r3, r3, #8
 80006ba:	b21b      	sxth	r3, r3
 80006bc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80006c0:	f023 0307 	bic.w	r3, r3, #7
 80006c4:	b21a      	sxth	r2, r3
 80006c6:	79bb      	ldrb	r3, [r7, #6]
 80006c8:	00db      	lsls	r3, r3, #3
 80006ca:	b21b      	sxth	r3, r3
 80006cc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80006d0:	b21b      	sxth	r3, r3
 80006d2:	4313      	orrs	r3, r2
 80006d4:	b21a      	sxth	r2, r3
 80006d6:	797b      	ldrb	r3, [r7, #5]
 80006d8:	08db      	lsrs	r3, r3, #3
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	b21b      	sxth	r3, r3
 80006de:	4313      	orrs	r3, r2
 80006e0:	b21b      	sxth	r3, r3
 80006e2:	b29b      	uxth	r3, r3
 80006e4:	4618      	mov	r0, r3
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr

080006ee <readPixel>:
uint16_t readPixel(int16_t x, int16_t y) { uint16_t color; readGRAM(x, y, &color, 1, 1); return color; }
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b086      	sub	sp, #24
 80006f2:	af02      	add	r7, sp, #8
 80006f4:	4603      	mov	r3, r0
 80006f6:	460a      	mov	r2, r1
 80006f8:	80fb      	strh	r3, [r7, #6]
 80006fa:	4613      	mov	r3, r2
 80006fc:	80bb      	strh	r3, [r7, #4]
 80006fe:	f107 020e 	add.w	r2, r7, #14
 8000702:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000706:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800070a:	2301      	movs	r3, #1
 800070c:	9300      	str	r3, [sp, #0]
 800070e:	2301      	movs	r3, #1
 8000710:	f001 fa54 	bl	8001bbc <readGRAM>
 8000714:	89fb      	ldrh	r3, [r7, #14]
 8000716:	4618      	mov	r0, r3
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <WriteCmdData>:

static void write24(uint16_t color);

static void writecmddata(uint16_t cmd, uint16_t dat);

void WriteCmdData(uint16_t cmd, uint16_t dat) { writecmddata(cmd, dat); }
 800071e:	b580      	push	{r7, lr}
 8000720:	b082      	sub	sp, #8
 8000722:	af00      	add	r7, sp, #0
 8000724:	4603      	mov	r3, r0
 8000726:	460a      	mov	r2, r1
 8000728:	80fb      	strh	r3, [r7, #6]
 800072a:	4613      	mov	r3, r2
 800072c:	80bb      	strh	r3, [r7, #4]
 800072e:	88ba      	ldrh	r2, [r7, #4]
 8000730:	88fb      	ldrh	r3, [r7, #6]
 8000732:	4611      	mov	r1, r2
 8000734:	4618      	mov	r0, r3
 8000736:	f000 f8f5 	bl	8000924 <writecmddata>
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}

08000742 <pushCommand>:

static void init_table(const void *table, int16_t size);

static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block);

void pushCommand(uint16_t cmd, uint8_t * block, int8_t N) { WriteCmdParamN(cmd, N, block); }
 8000742:	b580      	push	{r7, lr}
 8000744:	b082      	sub	sp, #8
 8000746:	af00      	add	r7, sp, #0
 8000748:	4603      	mov	r3, r0
 800074a:	6039      	str	r1, [r7, #0]
 800074c:	80fb      	strh	r3, [r7, #6]
 800074e:	4613      	mov	r3, r2
 8000750:	717b      	strb	r3, [r7, #5]
 8000752:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8000756:	88fb      	ldrh	r3, [r7, #6]
 8000758:	683a      	ldr	r2, [r7, #0]
 800075a:	4618      	mov	r0, r3
 800075c:	f000 f99c 	bl	8000a98 <WriteCmdParamN>
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <setReadDir>:


//extern GFXfont *gfxFont;

void setReadDir (void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	PIN_INPUT(D0_PORT, D0_PIN);
 800076c:	2101      	movs	r1, #1
 800076e:	4811      	ldr	r0, [pc, #68]	; (80007b4 <setReadDir+0x4c>)
 8000770:	f7ff fee9 	bl	8000546 <PIN_INPUT>
	PIN_INPUT(D1_PORT, D1_PIN);
 8000774:	2102      	movs	r1, #2
 8000776:	480f      	ldr	r0, [pc, #60]	; (80007b4 <setReadDir+0x4c>)
 8000778:	f7ff fee5 	bl	8000546 <PIN_INPUT>
	PIN_INPUT(D2_PORT, D2_PIN);
 800077c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000780:	480d      	ldr	r0, [pc, #52]	; (80007b8 <setReadDir+0x50>)
 8000782:	f7ff fee0 	bl	8000546 <PIN_INPUT>
	PIN_INPUT(D3_PORT, D3_PIN);
 8000786:	2108      	movs	r1, #8
 8000788:	480a      	ldr	r0, [pc, #40]	; (80007b4 <setReadDir+0x4c>)
 800078a:	f7ff fedc 	bl	8000546 <PIN_INPUT>
	PIN_INPUT(D4_PORT, D4_PIN);
 800078e:	2110      	movs	r1, #16
 8000790:	4808      	ldr	r0, [pc, #32]	; (80007b4 <setReadDir+0x4c>)
 8000792:	f7ff fed8 	bl	8000546 <PIN_INPUT>
	PIN_INPUT(D5_PORT, D5_PIN);
 8000796:	2120      	movs	r1, #32
 8000798:	4806      	ldr	r0, [pc, #24]	; (80007b4 <setReadDir+0x4c>)
 800079a:	f7ff fed4 	bl	8000546 <PIN_INPUT>
	PIN_INPUT(D6_PORT, D6_PIN);
 800079e:	2140      	movs	r1, #64	; 0x40
 80007a0:	4804      	ldr	r0, [pc, #16]	; (80007b4 <setReadDir+0x4c>)
 80007a2:	f7ff fed0 	bl	8000546 <PIN_INPUT>
	PIN_INPUT(D7_PORT, D7_PIN);
 80007a6:	2120      	movs	r1, #32
 80007a8:	4803      	ldr	r0, [pc, #12]	; (80007b8 <setReadDir+0x50>)
 80007aa:	f7ff fecc 	bl	8000546 <PIN_INPUT>
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40010c00 	.word	0x40010c00
 80007b8:	40010800 	.word	0x40010800

080007bc <setWriteDir>:

void setWriteDir (void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
	PIN_OUTPUT(D0_PORT, D0_PIN);
 80007c0:	2101      	movs	r1, #1
 80007c2:	4811      	ldr	r0, [pc, #68]	; (8000808 <setWriteDir+0x4c>)
 80007c4:	f7ff fed5 	bl	8000572 <PIN_OUTPUT>
	PIN_OUTPUT(D1_PORT, D1_PIN);
 80007c8:	2102      	movs	r1, #2
 80007ca:	480f      	ldr	r0, [pc, #60]	; (8000808 <setWriteDir+0x4c>)
 80007cc:	f7ff fed1 	bl	8000572 <PIN_OUTPUT>
	PIN_OUTPUT(D2_PORT, D2_PIN);
 80007d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007d4:	480d      	ldr	r0, [pc, #52]	; (800080c <setWriteDir+0x50>)
 80007d6:	f7ff fecc 	bl	8000572 <PIN_OUTPUT>
	PIN_OUTPUT(D3_PORT, D3_PIN);
 80007da:	2108      	movs	r1, #8
 80007dc:	480a      	ldr	r0, [pc, #40]	; (8000808 <setWriteDir+0x4c>)
 80007de:	f7ff fec8 	bl	8000572 <PIN_OUTPUT>
	PIN_OUTPUT(D4_PORT, D4_PIN);
 80007e2:	2110      	movs	r1, #16
 80007e4:	4808      	ldr	r0, [pc, #32]	; (8000808 <setWriteDir+0x4c>)
 80007e6:	f7ff fec4 	bl	8000572 <PIN_OUTPUT>
	PIN_OUTPUT(D5_PORT, D5_PIN);
 80007ea:	2120      	movs	r1, #32
 80007ec:	4806      	ldr	r0, [pc, #24]	; (8000808 <setWriteDir+0x4c>)
 80007ee:	f7ff fec0 	bl	8000572 <PIN_OUTPUT>
	PIN_OUTPUT(D6_PORT, D6_PIN);
 80007f2:	2140      	movs	r1, #64	; 0x40
 80007f4:	4804      	ldr	r0, [pc, #16]	; (8000808 <setWriteDir+0x4c>)
 80007f6:	f7ff febc 	bl	8000572 <PIN_OUTPUT>
	PIN_OUTPUT(D7_PORT, D7_PIN);
 80007fa:	2120      	movs	r1, #32
 80007fc:	4803      	ldr	r0, [pc, #12]	; (800080c <setWriteDir+0x50>)
 80007fe:	f7ff feb8 	bl	8000572 <PIN_OUTPUT>
}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40010c00 	.word	0x40010c00
 800080c:	40010800 	.word	0x40010800

08000810 <write24>:
    }
    CS_IDLE;
}

static void write24(uint16_t color)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	80fb      	strh	r3, [r7, #6]
    uint8_t r = color565_to_r(color);
 800081a:	88fb      	ldrh	r3, [r7, #6]
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff ff14 	bl	800064a <color565_to_r>
 8000822:	4603      	mov	r3, r0
 8000824:	73fb      	strb	r3, [r7, #15]
    uint8_t g = color565_to_g(color);
 8000826:	88fb      	ldrh	r3, [r7, #6]
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff ff1e 	bl	800066a <color565_to_g>
 800082e:	4603      	mov	r3, r0
 8000830:	73bb      	strb	r3, [r7, #14]
    uint8_t b = color565_to_b(color);
 8000832:	88fb      	ldrh	r3, [r7, #6]
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff ff28 	bl	800068a <color565_to_b>
 800083a:	4603      	mov	r3, r0
 800083c:	737b      	strb	r3, [r7, #13]
    write8(r);
 800083e:	4b36      	ldr	r3, [pc, #216]	; (8000918 <write24+0x108>)
 8000840:	4a36      	ldr	r2, [pc, #216]	; (800091c <write24+0x10c>)
 8000842:	611a      	str	r2, [r3, #16]
 8000844:	4b36      	ldr	r3, [pc, #216]	; (8000920 <write24+0x110>)
 8000846:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 800084a:	611a      	str	r2, [r3, #16]
 800084c:	7bfb      	ldrb	r3, [r7, #15]
 800084e:	035b      	lsls	r3, r3, #13
 8000850:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	109b      	asrs	r3, r3, #2
 8000858:	f003 0320 	and.w	r3, r3, #32
 800085c:	431a      	orrs	r2, r3
 800085e:	4b2e      	ldr	r3, [pc, #184]	; (8000918 <write24+0x108>)
 8000860:	611a      	str	r2, [r3, #16]
 8000862:	7bfb      	ldrb	r3, [r7, #15]
 8000864:	4a2e      	ldr	r2, [pc, #184]	; (8000920 <write24+0x110>)
 8000866:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 800086a:	6113      	str	r3, [r2, #16]
 800086c:	2108      	movs	r1, #8
 800086e:	482a      	ldr	r0, [pc, #168]	; (8000918 <write24+0x108>)
 8000870:	f7ff fe49 	bl	8000506 <PIN_LOW>
 8000874:	2108      	movs	r1, #8
 8000876:	4828      	ldr	r0, [pc, #160]	; (8000918 <write24+0x108>)
 8000878:	f7ff fe55 	bl	8000526 <PIN_HIGH>
 800087c:	2108      	movs	r1, #8
 800087e:	4826      	ldr	r0, [pc, #152]	; (8000918 <write24+0x108>)
 8000880:	f7ff fe51 	bl	8000526 <PIN_HIGH>
    write8(g);
 8000884:	4b24      	ldr	r3, [pc, #144]	; (8000918 <write24+0x108>)
 8000886:	4a25      	ldr	r2, [pc, #148]	; (800091c <write24+0x10c>)
 8000888:	611a      	str	r2, [r3, #16]
 800088a:	4b25      	ldr	r3, [pc, #148]	; (8000920 <write24+0x110>)
 800088c:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8000890:	611a      	str	r2, [r3, #16]
 8000892:	7bbb      	ldrb	r3, [r7, #14]
 8000894:	035b      	lsls	r3, r3, #13
 8000896:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 800089a:	7bbb      	ldrb	r3, [r7, #14]
 800089c:	109b      	asrs	r3, r3, #2
 800089e:	f003 0320 	and.w	r3, r3, #32
 80008a2:	431a      	orrs	r2, r3
 80008a4:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <write24+0x108>)
 80008a6:	611a      	str	r2, [r3, #16]
 80008a8:	7bbb      	ldrb	r3, [r7, #14]
 80008aa:	4a1d      	ldr	r2, [pc, #116]	; (8000920 <write24+0x110>)
 80008ac:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 80008b0:	6113      	str	r3, [r2, #16]
 80008b2:	2108      	movs	r1, #8
 80008b4:	4818      	ldr	r0, [pc, #96]	; (8000918 <write24+0x108>)
 80008b6:	f7ff fe26 	bl	8000506 <PIN_LOW>
 80008ba:	2108      	movs	r1, #8
 80008bc:	4816      	ldr	r0, [pc, #88]	; (8000918 <write24+0x108>)
 80008be:	f7ff fe32 	bl	8000526 <PIN_HIGH>
 80008c2:	2108      	movs	r1, #8
 80008c4:	4814      	ldr	r0, [pc, #80]	; (8000918 <write24+0x108>)
 80008c6:	f7ff fe2e 	bl	8000526 <PIN_HIGH>
    write8(b);
 80008ca:	4b13      	ldr	r3, [pc, #76]	; (8000918 <write24+0x108>)
 80008cc:	4a13      	ldr	r2, [pc, #76]	; (800091c <write24+0x10c>)
 80008ce:	611a      	str	r2, [r3, #16]
 80008d0:	4b13      	ldr	r3, [pc, #76]	; (8000920 <write24+0x110>)
 80008d2:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 80008d6:	611a      	str	r2, [r3, #16]
 80008d8:	7b7b      	ldrb	r3, [r7, #13]
 80008da:	035b      	lsls	r3, r3, #13
 80008dc:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 80008e0:	7b7b      	ldrb	r3, [r7, #13]
 80008e2:	109b      	asrs	r3, r3, #2
 80008e4:	f003 0320 	and.w	r3, r3, #32
 80008e8:	431a      	orrs	r2, r3
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <write24+0x108>)
 80008ec:	611a      	str	r2, [r3, #16]
 80008ee:	7b7b      	ldrb	r3, [r7, #13]
 80008f0:	4a0b      	ldr	r2, [pc, #44]	; (8000920 <write24+0x110>)
 80008f2:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 80008f6:	6113      	str	r3, [r2, #16]
 80008f8:	2108      	movs	r1, #8
 80008fa:	4807      	ldr	r0, [pc, #28]	; (8000918 <write24+0x108>)
 80008fc:	f7ff fe03 	bl	8000506 <PIN_LOW>
 8000900:	2108      	movs	r1, #8
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <write24+0x108>)
 8000904:	f7ff fe0f 	bl	8000526 <PIN_HIGH>
 8000908:	2108      	movs	r1, #8
 800090a:	4803      	ldr	r0, [pc, #12]	; (8000918 <write24+0x108>)
 800090c:	f7ff fe0b 	bl	8000526 <PIN_HIGH>
}
 8000910:	bf00      	nop
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40010800 	.word	0x40010800
 800091c:	80200000 	.word	0x80200000
 8000920:	40010c00 	.word	0x40010c00

08000924 <writecmddata>:


static void writecmddata(uint16_t cmd, uint16_t dat)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	460a      	mov	r2, r1
 800092e:	80fb      	strh	r3, [r7, #6]
 8000930:	4613      	mov	r3, r2
 8000932:	80bb      	strh	r3, [r7, #4]
    CS_ACTIVE;
 8000934:	2102      	movs	r1, #2
 8000936:	4855      	ldr	r0, [pc, #340]	; (8000a8c <writecmddata+0x168>)
 8000938:	f7ff fde5 	bl	8000506 <PIN_LOW>
    WriteCmd(cmd);
 800093c:	2104      	movs	r1, #4
 800093e:	4853      	ldr	r0, [pc, #332]	; (8000a8c <writecmddata+0x168>)
 8000940:	f7ff fde1 	bl	8000506 <PIN_LOW>
 8000944:	88fb      	ldrh	r3, [r7, #6]
 8000946:	0a1b      	lsrs	r3, r3, #8
 8000948:	b29b      	uxth	r3, r3
 800094a:	73fb      	strb	r3, [r7, #15]
 800094c:	88fb      	ldrh	r3, [r7, #6]
 800094e:	73bb      	strb	r3, [r7, #14]
 8000950:	4b4e      	ldr	r3, [pc, #312]	; (8000a8c <writecmddata+0x168>)
 8000952:	4a4f      	ldr	r2, [pc, #316]	; (8000a90 <writecmddata+0x16c>)
 8000954:	611a      	str	r2, [r3, #16]
 8000956:	4b4f      	ldr	r3, [pc, #316]	; (8000a94 <writecmddata+0x170>)
 8000958:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 800095c:	611a      	str	r2, [r3, #16]
 800095e:	7bfb      	ldrb	r3, [r7, #15]
 8000960:	035b      	lsls	r3, r3, #13
 8000962:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8000966:	7bfb      	ldrb	r3, [r7, #15]
 8000968:	109b      	asrs	r3, r3, #2
 800096a:	f003 0320 	and.w	r3, r3, #32
 800096e:	431a      	orrs	r2, r3
 8000970:	4b46      	ldr	r3, [pc, #280]	; (8000a8c <writecmddata+0x168>)
 8000972:	611a      	str	r2, [r3, #16]
 8000974:	7bfb      	ldrb	r3, [r7, #15]
 8000976:	4a47      	ldr	r2, [pc, #284]	; (8000a94 <writecmddata+0x170>)
 8000978:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 800097c:	6113      	str	r3, [r2, #16]
 800097e:	2108      	movs	r1, #8
 8000980:	4842      	ldr	r0, [pc, #264]	; (8000a8c <writecmddata+0x168>)
 8000982:	f7ff fdc0 	bl	8000506 <PIN_LOW>
 8000986:	2108      	movs	r1, #8
 8000988:	4840      	ldr	r0, [pc, #256]	; (8000a8c <writecmddata+0x168>)
 800098a:	f7ff fdcc 	bl	8000526 <PIN_HIGH>
 800098e:	2108      	movs	r1, #8
 8000990:	483e      	ldr	r0, [pc, #248]	; (8000a8c <writecmddata+0x168>)
 8000992:	f7ff fdc8 	bl	8000526 <PIN_HIGH>
 8000996:	4b3d      	ldr	r3, [pc, #244]	; (8000a8c <writecmddata+0x168>)
 8000998:	4a3d      	ldr	r2, [pc, #244]	; (8000a90 <writecmddata+0x16c>)
 800099a:	611a      	str	r2, [r3, #16]
 800099c:	4b3d      	ldr	r3, [pc, #244]	; (8000a94 <writecmddata+0x170>)
 800099e:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 80009a2:	611a      	str	r2, [r3, #16]
 80009a4:	7bbb      	ldrb	r3, [r7, #14]
 80009a6:	035b      	lsls	r3, r3, #13
 80009a8:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 80009ac:	7bbb      	ldrb	r3, [r7, #14]
 80009ae:	109b      	asrs	r3, r3, #2
 80009b0:	f003 0320 	and.w	r3, r3, #32
 80009b4:	431a      	orrs	r2, r3
 80009b6:	4b35      	ldr	r3, [pc, #212]	; (8000a8c <writecmddata+0x168>)
 80009b8:	611a      	str	r2, [r3, #16]
 80009ba:	7bbb      	ldrb	r3, [r7, #14]
 80009bc:	4a35      	ldr	r2, [pc, #212]	; (8000a94 <writecmddata+0x170>)
 80009be:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 80009c2:	6113      	str	r3, [r2, #16]
 80009c4:	2108      	movs	r1, #8
 80009c6:	4831      	ldr	r0, [pc, #196]	; (8000a8c <writecmddata+0x168>)
 80009c8:	f7ff fd9d 	bl	8000506 <PIN_LOW>
 80009cc:	2108      	movs	r1, #8
 80009ce:	482f      	ldr	r0, [pc, #188]	; (8000a8c <writecmddata+0x168>)
 80009d0:	f7ff fda9 	bl	8000526 <PIN_HIGH>
 80009d4:	2108      	movs	r1, #8
 80009d6:	482d      	ldr	r0, [pc, #180]	; (8000a8c <writecmddata+0x168>)
 80009d8:	f7ff fda5 	bl	8000526 <PIN_HIGH>
 80009dc:	2104      	movs	r1, #4
 80009de:	482b      	ldr	r0, [pc, #172]	; (8000a8c <writecmddata+0x168>)
 80009e0:	f7ff fda1 	bl	8000526 <PIN_HIGH>
    WriteData(dat);
 80009e4:	88bb      	ldrh	r3, [r7, #4]
 80009e6:	0a1b      	lsrs	r3, r3, #8
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	737b      	strb	r3, [r7, #13]
 80009ec:	88bb      	ldrh	r3, [r7, #4]
 80009ee:	733b      	strb	r3, [r7, #12]
 80009f0:	4b26      	ldr	r3, [pc, #152]	; (8000a8c <writecmddata+0x168>)
 80009f2:	4a27      	ldr	r2, [pc, #156]	; (8000a90 <writecmddata+0x16c>)
 80009f4:	611a      	str	r2, [r3, #16]
 80009f6:	4b27      	ldr	r3, [pc, #156]	; (8000a94 <writecmddata+0x170>)
 80009f8:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 80009fc:	611a      	str	r2, [r3, #16]
 80009fe:	7b7b      	ldrb	r3, [r7, #13]
 8000a00:	035b      	lsls	r3, r3, #13
 8000a02:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8000a06:	7b7b      	ldrb	r3, [r7, #13]
 8000a08:	109b      	asrs	r3, r3, #2
 8000a0a:	f003 0320 	and.w	r3, r3, #32
 8000a0e:	431a      	orrs	r2, r3
 8000a10:	4b1e      	ldr	r3, [pc, #120]	; (8000a8c <writecmddata+0x168>)
 8000a12:	611a      	str	r2, [r3, #16]
 8000a14:	7b7b      	ldrb	r3, [r7, #13]
 8000a16:	4a1f      	ldr	r2, [pc, #124]	; (8000a94 <writecmddata+0x170>)
 8000a18:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8000a1c:	6113      	str	r3, [r2, #16]
 8000a1e:	2108      	movs	r1, #8
 8000a20:	481a      	ldr	r0, [pc, #104]	; (8000a8c <writecmddata+0x168>)
 8000a22:	f7ff fd70 	bl	8000506 <PIN_LOW>
 8000a26:	2108      	movs	r1, #8
 8000a28:	4818      	ldr	r0, [pc, #96]	; (8000a8c <writecmddata+0x168>)
 8000a2a:	f7ff fd7c 	bl	8000526 <PIN_HIGH>
 8000a2e:	2108      	movs	r1, #8
 8000a30:	4816      	ldr	r0, [pc, #88]	; (8000a8c <writecmddata+0x168>)
 8000a32:	f7ff fd78 	bl	8000526 <PIN_HIGH>
 8000a36:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <writecmddata+0x168>)
 8000a38:	4a15      	ldr	r2, [pc, #84]	; (8000a90 <writecmddata+0x16c>)
 8000a3a:	611a      	str	r2, [r3, #16]
 8000a3c:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <writecmddata+0x170>)
 8000a3e:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8000a42:	611a      	str	r2, [r3, #16]
 8000a44:	7b3b      	ldrb	r3, [r7, #12]
 8000a46:	035b      	lsls	r3, r3, #13
 8000a48:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8000a4c:	7b3b      	ldrb	r3, [r7, #12]
 8000a4e:	109b      	asrs	r3, r3, #2
 8000a50:	f003 0320 	and.w	r3, r3, #32
 8000a54:	431a      	orrs	r2, r3
 8000a56:	4b0d      	ldr	r3, [pc, #52]	; (8000a8c <writecmddata+0x168>)
 8000a58:	611a      	str	r2, [r3, #16]
 8000a5a:	7b3b      	ldrb	r3, [r7, #12]
 8000a5c:	4a0d      	ldr	r2, [pc, #52]	; (8000a94 <writecmddata+0x170>)
 8000a5e:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8000a62:	6113      	str	r3, [r2, #16]
 8000a64:	2108      	movs	r1, #8
 8000a66:	4809      	ldr	r0, [pc, #36]	; (8000a8c <writecmddata+0x168>)
 8000a68:	f7ff fd4d 	bl	8000506 <PIN_LOW>
 8000a6c:	2108      	movs	r1, #8
 8000a6e:	4807      	ldr	r0, [pc, #28]	; (8000a8c <writecmddata+0x168>)
 8000a70:	f7ff fd59 	bl	8000526 <PIN_HIGH>
 8000a74:	2108      	movs	r1, #8
 8000a76:	4805      	ldr	r0, [pc, #20]	; (8000a8c <writecmddata+0x168>)
 8000a78:	f7ff fd55 	bl	8000526 <PIN_HIGH>
    CS_IDLE;
 8000a7c:	2102      	movs	r1, #2
 8000a7e:	4803      	ldr	r0, [pc, #12]	; (8000a8c <writecmddata+0x168>)
 8000a80:	f7ff fd51 	bl	8000526 <PIN_HIGH>
}
 8000a84:	bf00      	nop
 8000a86:	3710      	adds	r7, #16
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40010800 	.word	0x40010800
 8000a90:	80200000 	.word	0x80200000
 8000a94:	40010c00 	.word	0x40010c00

08000a98 <WriteCmdParamN>:



static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	603a      	str	r2, [r7, #0]
 8000aa2:	80fb      	strh	r3, [r7, #6]
 8000aa4:	460b      	mov	r3, r1
 8000aa6:	717b      	strb	r3, [r7, #5]
    CS_ACTIVE;
 8000aa8:	2102      	movs	r1, #2
 8000aaa:	4878      	ldr	r0, [pc, #480]	; (8000c8c <WriteCmdParamN+0x1f4>)
 8000aac:	f7ff fd2b 	bl	8000506 <PIN_LOW>
    WriteCmd(cmd);
 8000ab0:	2104      	movs	r1, #4
 8000ab2:	4876      	ldr	r0, [pc, #472]	; (8000c8c <WriteCmdParamN+0x1f4>)
 8000ab4:	f7ff fd27 	bl	8000506 <PIN_LOW>
 8000ab8:	88fb      	ldrh	r3, [r7, #6]
 8000aba:	0a1b      	lsrs	r3, r3, #8
 8000abc:	b29b      	uxth	r3, r3
 8000abe:	73fb      	strb	r3, [r7, #15]
 8000ac0:	88fb      	ldrh	r3, [r7, #6]
 8000ac2:	73bb      	strb	r3, [r7, #14]
 8000ac4:	4b71      	ldr	r3, [pc, #452]	; (8000c8c <WriteCmdParamN+0x1f4>)
 8000ac6:	4a72      	ldr	r2, [pc, #456]	; (8000c90 <WriteCmdParamN+0x1f8>)
 8000ac8:	611a      	str	r2, [r3, #16]
 8000aca:	4b72      	ldr	r3, [pc, #456]	; (8000c94 <WriteCmdParamN+0x1fc>)
 8000acc:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8000ad0:	611a      	str	r2, [r3, #16]
 8000ad2:	7bfb      	ldrb	r3, [r7, #15]
 8000ad4:	035b      	lsls	r3, r3, #13
 8000ad6:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8000ada:	7bfb      	ldrb	r3, [r7, #15]
 8000adc:	109b      	asrs	r3, r3, #2
 8000ade:	f003 0320 	and.w	r3, r3, #32
 8000ae2:	431a      	orrs	r2, r3
 8000ae4:	4b69      	ldr	r3, [pc, #420]	; (8000c8c <WriteCmdParamN+0x1f4>)
 8000ae6:	611a      	str	r2, [r3, #16]
 8000ae8:	7bfb      	ldrb	r3, [r7, #15]
 8000aea:	4a6a      	ldr	r2, [pc, #424]	; (8000c94 <WriteCmdParamN+0x1fc>)
 8000aec:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8000af0:	6113      	str	r3, [r2, #16]
 8000af2:	2108      	movs	r1, #8
 8000af4:	4865      	ldr	r0, [pc, #404]	; (8000c8c <WriteCmdParamN+0x1f4>)
 8000af6:	f7ff fd06 	bl	8000506 <PIN_LOW>
 8000afa:	2108      	movs	r1, #8
 8000afc:	4863      	ldr	r0, [pc, #396]	; (8000c8c <WriteCmdParamN+0x1f4>)
 8000afe:	f7ff fd12 	bl	8000526 <PIN_HIGH>
 8000b02:	2108      	movs	r1, #8
 8000b04:	4861      	ldr	r0, [pc, #388]	; (8000c8c <WriteCmdParamN+0x1f4>)
 8000b06:	f7ff fd0e 	bl	8000526 <PIN_HIGH>
 8000b0a:	4b60      	ldr	r3, [pc, #384]	; (8000c8c <WriteCmdParamN+0x1f4>)
 8000b0c:	4a60      	ldr	r2, [pc, #384]	; (8000c90 <WriteCmdParamN+0x1f8>)
 8000b0e:	611a      	str	r2, [r3, #16]
 8000b10:	4b60      	ldr	r3, [pc, #384]	; (8000c94 <WriteCmdParamN+0x1fc>)
 8000b12:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8000b16:	611a      	str	r2, [r3, #16]
 8000b18:	7bbb      	ldrb	r3, [r7, #14]
 8000b1a:	035b      	lsls	r3, r3, #13
 8000b1c:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8000b20:	7bbb      	ldrb	r3, [r7, #14]
 8000b22:	109b      	asrs	r3, r3, #2
 8000b24:	f003 0320 	and.w	r3, r3, #32
 8000b28:	431a      	orrs	r2, r3
 8000b2a:	4b58      	ldr	r3, [pc, #352]	; (8000c8c <WriteCmdParamN+0x1f4>)
 8000b2c:	611a      	str	r2, [r3, #16]
 8000b2e:	7bbb      	ldrb	r3, [r7, #14]
 8000b30:	4a58      	ldr	r2, [pc, #352]	; (8000c94 <WriteCmdParamN+0x1fc>)
 8000b32:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8000b36:	6113      	str	r3, [r2, #16]
 8000b38:	2108      	movs	r1, #8
 8000b3a:	4854      	ldr	r0, [pc, #336]	; (8000c8c <WriteCmdParamN+0x1f4>)
 8000b3c:	f7ff fce3 	bl	8000506 <PIN_LOW>
 8000b40:	2108      	movs	r1, #8
 8000b42:	4852      	ldr	r0, [pc, #328]	; (8000c8c <WriteCmdParamN+0x1f4>)
 8000b44:	f7ff fcef 	bl	8000526 <PIN_HIGH>
 8000b48:	2108      	movs	r1, #8
 8000b4a:	4850      	ldr	r0, [pc, #320]	; (8000c8c <WriteCmdParamN+0x1f4>)
 8000b4c:	f7ff fceb 	bl	8000526 <PIN_HIGH>
 8000b50:	2104      	movs	r1, #4
 8000b52:	484e      	ldr	r0, [pc, #312]	; (8000c8c <WriteCmdParamN+0x1f4>)
 8000b54:	f7ff fce7 	bl	8000526 <PIN_HIGH>
    while (N-- > 0) {
 8000b58:	e086      	b.n	8000c68 <WriteCmdParamN+0x1d0>
        uint8_t u8 = *block++;
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	1c5a      	adds	r2, r3, #1
 8000b5e:	603a      	str	r2, [r7, #0]
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	737b      	strb	r3, [r7, #13]
        write8(u8);
 8000b64:	4b49      	ldr	r3, [pc, #292]	; (8000c8c <WriteCmdParamN+0x1f4>)
 8000b66:	4a4a      	ldr	r2, [pc, #296]	; (8000c90 <WriteCmdParamN+0x1f8>)
 8000b68:	611a      	str	r2, [r3, #16]
 8000b6a:	4b4a      	ldr	r3, [pc, #296]	; (8000c94 <WriteCmdParamN+0x1fc>)
 8000b6c:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8000b70:	611a      	str	r2, [r3, #16]
 8000b72:	7b7b      	ldrb	r3, [r7, #13]
 8000b74:	035b      	lsls	r3, r3, #13
 8000b76:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8000b7a:	7b7b      	ldrb	r3, [r7, #13]
 8000b7c:	109b      	asrs	r3, r3, #2
 8000b7e:	f003 0320 	and.w	r3, r3, #32
 8000b82:	431a      	orrs	r2, r3
 8000b84:	4b41      	ldr	r3, [pc, #260]	; (8000c8c <WriteCmdParamN+0x1f4>)
 8000b86:	611a      	str	r2, [r3, #16]
 8000b88:	7b7b      	ldrb	r3, [r7, #13]
 8000b8a:	4a42      	ldr	r2, [pc, #264]	; (8000c94 <WriteCmdParamN+0x1fc>)
 8000b8c:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8000b90:	6113      	str	r3, [r2, #16]
 8000b92:	2108      	movs	r1, #8
 8000b94:	483d      	ldr	r0, [pc, #244]	; (8000c8c <WriteCmdParamN+0x1f4>)
 8000b96:	f7ff fcb6 	bl	8000506 <PIN_LOW>
 8000b9a:	2108      	movs	r1, #8
 8000b9c:	483b      	ldr	r0, [pc, #236]	; (8000c8c <WriteCmdParamN+0x1f4>)
 8000b9e:	f7ff fcc2 	bl	8000526 <PIN_HIGH>
 8000ba2:	2108      	movs	r1, #8
 8000ba4:	4839      	ldr	r0, [pc, #228]	; (8000c8c <WriteCmdParamN+0x1f4>)
 8000ba6:	f7ff fcbe 	bl	8000526 <PIN_HIGH>
        if (N && is8347) {
 8000baa:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d05a      	beq.n	8000c68 <WriteCmdParamN+0x1d0>
 8000bb2:	4b39      	ldr	r3, [pc, #228]	; (8000c98 <WriteCmdParamN+0x200>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d056      	beq.n	8000c68 <WriteCmdParamN+0x1d0>
            cmd++;
 8000bba:	88fb      	ldrh	r3, [r7, #6]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	80fb      	strh	r3, [r7, #6]
            WriteCmd(cmd);
 8000bc0:	2104      	movs	r1, #4
 8000bc2:	4832      	ldr	r0, [pc, #200]	; (8000c8c <WriteCmdParamN+0x1f4>)
 8000bc4:	f7ff fc9f 	bl	8000506 <PIN_LOW>
 8000bc8:	88fb      	ldrh	r3, [r7, #6]
 8000bca:	0a1b      	lsrs	r3, r3, #8
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	733b      	strb	r3, [r7, #12]
 8000bd0:	88fb      	ldrh	r3, [r7, #6]
 8000bd2:	72fb      	strb	r3, [r7, #11]
 8000bd4:	4b2d      	ldr	r3, [pc, #180]	; (8000c8c <WriteCmdParamN+0x1f4>)
 8000bd6:	4a2e      	ldr	r2, [pc, #184]	; (8000c90 <WriteCmdParamN+0x1f8>)
 8000bd8:	611a      	str	r2, [r3, #16]
 8000bda:	4b2e      	ldr	r3, [pc, #184]	; (8000c94 <WriteCmdParamN+0x1fc>)
 8000bdc:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8000be0:	611a      	str	r2, [r3, #16]
 8000be2:	7b3b      	ldrb	r3, [r7, #12]
 8000be4:	035b      	lsls	r3, r3, #13
 8000be6:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8000bea:	7b3b      	ldrb	r3, [r7, #12]
 8000bec:	109b      	asrs	r3, r3, #2
 8000bee:	f003 0320 	and.w	r3, r3, #32
 8000bf2:	431a      	orrs	r2, r3
 8000bf4:	4b25      	ldr	r3, [pc, #148]	; (8000c8c <WriteCmdParamN+0x1f4>)
 8000bf6:	611a      	str	r2, [r3, #16]
 8000bf8:	7b3b      	ldrb	r3, [r7, #12]
 8000bfa:	4a26      	ldr	r2, [pc, #152]	; (8000c94 <WriteCmdParamN+0x1fc>)
 8000bfc:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8000c00:	6113      	str	r3, [r2, #16]
 8000c02:	2108      	movs	r1, #8
 8000c04:	4821      	ldr	r0, [pc, #132]	; (8000c8c <WriteCmdParamN+0x1f4>)
 8000c06:	f7ff fc7e 	bl	8000506 <PIN_LOW>
 8000c0a:	2108      	movs	r1, #8
 8000c0c:	481f      	ldr	r0, [pc, #124]	; (8000c8c <WriteCmdParamN+0x1f4>)
 8000c0e:	f7ff fc8a 	bl	8000526 <PIN_HIGH>
 8000c12:	2108      	movs	r1, #8
 8000c14:	481d      	ldr	r0, [pc, #116]	; (8000c8c <WriteCmdParamN+0x1f4>)
 8000c16:	f7ff fc86 	bl	8000526 <PIN_HIGH>
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <WriteCmdParamN+0x1f4>)
 8000c1c:	4a1c      	ldr	r2, [pc, #112]	; (8000c90 <WriteCmdParamN+0x1f8>)
 8000c1e:	611a      	str	r2, [r3, #16]
 8000c20:	4b1c      	ldr	r3, [pc, #112]	; (8000c94 <WriteCmdParamN+0x1fc>)
 8000c22:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8000c26:	611a      	str	r2, [r3, #16]
 8000c28:	7afb      	ldrb	r3, [r7, #11]
 8000c2a:	035b      	lsls	r3, r3, #13
 8000c2c:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8000c30:	7afb      	ldrb	r3, [r7, #11]
 8000c32:	109b      	asrs	r3, r3, #2
 8000c34:	f003 0320 	and.w	r3, r3, #32
 8000c38:	431a      	orrs	r2, r3
 8000c3a:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <WriteCmdParamN+0x1f4>)
 8000c3c:	611a      	str	r2, [r3, #16]
 8000c3e:	7afb      	ldrb	r3, [r7, #11]
 8000c40:	4a14      	ldr	r2, [pc, #80]	; (8000c94 <WriteCmdParamN+0x1fc>)
 8000c42:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8000c46:	6113      	str	r3, [r2, #16]
 8000c48:	2108      	movs	r1, #8
 8000c4a:	4810      	ldr	r0, [pc, #64]	; (8000c8c <WriteCmdParamN+0x1f4>)
 8000c4c:	f7ff fc5b 	bl	8000506 <PIN_LOW>
 8000c50:	2108      	movs	r1, #8
 8000c52:	480e      	ldr	r0, [pc, #56]	; (8000c8c <WriteCmdParamN+0x1f4>)
 8000c54:	f7ff fc67 	bl	8000526 <PIN_HIGH>
 8000c58:	2108      	movs	r1, #8
 8000c5a:	480c      	ldr	r0, [pc, #48]	; (8000c8c <WriteCmdParamN+0x1f4>)
 8000c5c:	f7ff fc63 	bl	8000526 <PIN_HIGH>
 8000c60:	2104      	movs	r1, #4
 8000c62:	480a      	ldr	r0, [pc, #40]	; (8000c8c <WriteCmdParamN+0x1f4>)
 8000c64:	f7ff fc5f 	bl	8000526 <PIN_HIGH>
    while (N-- > 0) {
 8000c68:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	3a01      	subs	r2, #1
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	717a      	strb	r2, [r7, #5]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	f73f af70 	bgt.w	8000b5a <WriteCmdParamN+0xc2>
        }
    }
    CS_IDLE;
 8000c7a:	2102      	movs	r1, #2
 8000c7c:	4803      	ldr	r0, [pc, #12]	; (8000c8c <WriteCmdParamN+0x1f4>)
 8000c7e:	f7ff fc52 	bl	8000526 <PIN_HIGH>
}
 8000c82:	bf00      	nop
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40010800 	.word	0x40010800
 8000c90:	80200000 	.word	0x80200000
 8000c94:	40010c00 	.word	0x40010c00
 8000c98:	20000083 	.word	0x20000083

08000c9c <WriteCmdParam4>:

static inline void WriteCmdParam4(uint8_t cmd, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4)
{
 8000c9c:	b590      	push	{r4, r7, lr}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4604      	mov	r4, r0
 8000ca4:	4608      	mov	r0, r1
 8000ca6:	4611      	mov	r1, r2
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4623      	mov	r3, r4
 8000cac:	71fb      	strb	r3, [r7, #7]
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71bb      	strb	r3, [r7, #6]
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	717b      	strb	r3, [r7, #5]
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	713b      	strb	r3, [r7, #4]
    uint8_t d[4];
    d[0] = d1, d[1] = d2, d[2] = d3, d[3] = d4;
 8000cba:	79bb      	ldrb	r3, [r7, #6]
 8000cbc:	733b      	strb	r3, [r7, #12]
 8000cbe:	797b      	ldrb	r3, [r7, #5]
 8000cc0:	737b      	strb	r3, [r7, #13]
 8000cc2:	793b      	ldrb	r3, [r7, #4]
 8000cc4:	73bb      	strb	r3, [r7, #14]
 8000cc6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000cca:	73fb      	strb	r3, [r7, #15]
    WriteCmdParamN(cmd, 4, d);
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	f107 020c 	add.w	r2, r7, #12
 8000cd4:	2104      	movs	r1, #4
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fede 	bl	8000a98 <WriteCmdParamN>
}
 8000cdc:	bf00      	nop
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd90      	pop	{r4, r7, pc}

08000ce4 <init_table>:

#define TFTLCD_DELAY 0xFFFF
#define TFTLCD_DELAY8 0x7F
static void init_table(const void *table, int16_t size)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	; 0x28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	460b      	mov	r3, r1
 8000cee:	807b      	strh	r3, [r7, #2]

    uint8_t *p = (uint8_t *) table, dat[24];            //R61526 has GAMMA[22]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24

    while (size > 0)
 8000cf4:	e046      	b.n	8000d84 <init_table+0xa0>
    {
        uint8_t cmd = pgm_read_byte(p++);
 8000cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf8:	1c5a      	adds	r2, r3, #1
 8000cfa:	627a      	str	r2, [r7, #36]	; 0x24
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        uint8_t len = pgm_read_byte(p++);
 8000d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d04:	1c5a      	adds	r2, r3, #1
 8000d06:	627a      	str	r2, [r7, #36]	; 0x24
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (cmd == TFTLCD_DELAY8)
 8000d0e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000d12:	2b7f      	cmp	r3, #127	; 0x7f
 8000d14:	d108      	bne.n	8000d28 <init_table+0x44>
        {
            delay(len);
 8000d16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fa16 	bl	800014c <delay>
            len = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000d26:	e024      	b.n	8000d72 <init_table+0x8e>
        }
        else
        {
            for (uint8_t i = 0; i < len; i++)
 8000d28:	2300      	movs	r3, #0
 8000d2a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000d2e:	e010      	b.n	8000d52 <init_table+0x6e>
                dat[i] = pgm_read_byte(p++);
 8000d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d32:	1c5a      	adds	r2, r3, #1
 8000d34:	627a      	str	r2, [r7, #36]	; 0x24
 8000d36:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000d3a:	7819      	ldrb	r1, [r3, #0]
 8000d3c:	f102 0328 	add.w	r3, r2, #40	; 0x28
 8000d40:	443b      	add	r3, r7
 8000d42:	460a      	mov	r2, r1
 8000d44:	f803 2c20 	strb.w	r2, [r3, #-32]
            for (uint8_t i = 0; i < len; i++)
 8000d48:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000d52:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000d56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d3e8      	bcc.n	8000d30 <init_table+0x4c>
            WriteCmdParamN(cmd, len, dat);
 8000d5e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 8000d68:	f107 0208 	add.w	r2, r7, #8
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fe93 	bl	8000a98 <WriteCmdParamN>
        }
        size -= len + 2;
 8000d72:	887a      	ldrh	r2, [r7, #2]
 8000d74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	1ad3      	subs	r3, r2, r3
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	3b02      	subs	r3, #2
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	807b      	strh	r3, [r7, #2]
    while (size > 0)
 8000d84:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	dcb4      	bgt.n	8000cf6 <init_table+0x12>
    }
}
 8000d8c:	bf00      	nop
 8000d8e:	bf00      	nop
 8000d90:	3728      	adds	r7, #40	; 0x28
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <init_table16>:


static void init_table16(const void *table, int16_t size)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b084      	sub	sp, #16
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
 8000d9e:	460b      	mov	r3, r1
 8000da0:	807b      	strh	r3, [r7, #2]
    uint16_t *p = (uint16_t *) table;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	60fb      	str	r3, [r7, #12]
    while (size > 0) {
 8000da6:	e01d      	b.n	8000de4 <init_table16+0x4e>
        uint16_t cmd = pgm_read_word(p++);
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	1c9a      	adds	r2, r3, #2
 8000dac:	60fa      	str	r2, [r7, #12]
 8000dae:	881b      	ldrh	r3, [r3, #0]
 8000db0:	817b      	strh	r3, [r7, #10]
        uint16_t d = pgm_read_word(p++);
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	1c9a      	adds	r2, r3, #2
 8000db6:	60fa      	str	r2, [r7, #12]
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	813b      	strh	r3, [r7, #8]
        if (cmd == TFTLCD_DELAY)
 8000dbc:	897b      	ldrh	r3, [r7, #10]
 8000dbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d104      	bne.n	8000dd0 <init_table16+0x3a>
            delay(d);
 8000dc6:	893b      	ldrh	r3, [r7, #8]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff f9bf 	bl	800014c <delay>
 8000dce:	e005      	b.n	8000ddc <init_table16+0x46>
        else {
			writecmddata(cmd, d);                      //static function
 8000dd0:	893a      	ldrh	r2, [r7, #8]
 8000dd2:	897b      	ldrh	r3, [r7, #10]
 8000dd4:	4611      	mov	r1, r2
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff fda4 	bl	8000924 <writecmddata>
        }
        size -= 2 * sizeof(int16_t);
 8000ddc:	887b      	ldrh	r3, [r7, #2]
 8000dde:	3b04      	subs	r3, #4
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	807b      	strh	r3, [r7, #2]
    while (size > 0) {
 8000de4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	dcdd      	bgt.n	8000da8 <init_table16+0x12>
    }
}
 8000dec:	bf00      	nop
 8000dee:	bf00      	nop
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <reset>:



void reset(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
    done_reset = 1;
 8000dfc:	4b1f      	ldr	r3, [pc, #124]	; (8000e7c <reset+0x84>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	701a      	strb	r2, [r3, #0]
    setWriteDir();
 8000e02:	f7ff fcdb 	bl	80007bc <setWriteDir>
    CTL_INIT();
 8000e06:	2110      	movs	r1, #16
 8000e08:	481d      	ldr	r0, [pc, #116]	; (8000e80 <reset+0x88>)
 8000e0a:	f7ff fbb2 	bl	8000572 <PIN_OUTPUT>
 8000e0e:	2108      	movs	r1, #8
 8000e10:	481b      	ldr	r0, [pc, #108]	; (8000e80 <reset+0x88>)
 8000e12:	f7ff fbae 	bl	8000572 <PIN_OUTPUT>
 8000e16:	2104      	movs	r1, #4
 8000e18:	4819      	ldr	r0, [pc, #100]	; (8000e80 <reset+0x88>)
 8000e1a:	f7ff fbaa 	bl	8000572 <PIN_OUTPUT>
 8000e1e:	2102      	movs	r1, #2
 8000e20:	4817      	ldr	r0, [pc, #92]	; (8000e80 <reset+0x88>)
 8000e22:	f7ff fba6 	bl	8000572 <PIN_OUTPUT>
 8000e26:	2101      	movs	r1, #1
 8000e28:	4815      	ldr	r0, [pc, #84]	; (8000e80 <reset+0x88>)
 8000e2a:	f7ff fba2 	bl	8000572 <PIN_OUTPUT>
    CS_IDLE;
 8000e2e:	2102      	movs	r1, #2
 8000e30:	4813      	ldr	r0, [pc, #76]	; (8000e80 <reset+0x88>)
 8000e32:	f7ff fb78 	bl	8000526 <PIN_HIGH>
    RD_IDLE;
 8000e36:	2110      	movs	r1, #16
 8000e38:	4811      	ldr	r0, [pc, #68]	; (8000e80 <reset+0x88>)
 8000e3a:	f7ff fb74 	bl	8000526 <PIN_HIGH>
    WR_IDLE;
 8000e3e:	2108      	movs	r1, #8
 8000e40:	480f      	ldr	r0, [pc, #60]	; (8000e80 <reset+0x88>)
 8000e42:	f7ff fb70 	bl	8000526 <PIN_HIGH>
    RESET_IDLE;
 8000e46:	2101      	movs	r1, #1
 8000e48:	480d      	ldr	r0, [pc, #52]	; (8000e80 <reset+0x88>)
 8000e4a:	f7ff fb6c 	bl	8000526 <PIN_HIGH>
    delay(50);
 8000e4e:	2032      	movs	r0, #50	; 0x32
 8000e50:	f7ff f97c 	bl	800014c <delay>
    RESET_ACTIVE;
 8000e54:	2101      	movs	r1, #1
 8000e56:	480a      	ldr	r0, [pc, #40]	; (8000e80 <reset+0x88>)
 8000e58:	f7ff fb55 	bl	8000506 <PIN_LOW>
    delay(100);
 8000e5c:	2064      	movs	r0, #100	; 0x64
 8000e5e:	f7ff f975 	bl	800014c <delay>
    RESET_IDLE;
 8000e62:	2101      	movs	r1, #1
 8000e64:	4806      	ldr	r0, [pc, #24]	; (8000e80 <reset+0x88>)
 8000e66:	f7ff fb5e 	bl	8000526 <PIN_HIGH>
    delay(100);
 8000e6a:	2064      	movs	r0, #100	; 0x64
 8000e6c:	f7ff f96e 	bl	800014c <delay>
	WriteCmdData(0xB0, 0x0000);   //R61520 needs this to read ID
 8000e70:	2100      	movs	r1, #0
 8000e72:	20b0      	movs	r0, #176	; 0xb0
 8000e74:	f7ff fc53 	bl	800071e <WriteCmdData>
}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000082 	.word	0x20000082
 8000e80:	40010800 	.word	0x40010800

08000e84 <read16bits>:

static uint16_t read16bits(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
    uint16_t ret;
    uint8_t lo;
    READ_8(ret);
 8000e8a:	2110      	movs	r1, #16
 8000e8c:	4862      	ldr	r0, [pc, #392]	; (8001018 <read16bits+0x194>)
 8000e8e:	f7ff fb4a 	bl	8000526 <PIN_HIGH>
 8000e92:	2110      	movs	r1, #16
 8000e94:	4860      	ldr	r0, [pc, #384]	; (8001018 <read16bits+0x194>)
 8000e96:	f7ff fb36 	bl	8000506 <PIN_LOW>
 8000e9a:	2110      	movs	r1, #16
 8000e9c:	485e      	ldr	r0, [pc, #376]	; (8001018 <read16bits+0x194>)
 8000e9e:	f7ff fb32 	bl	8000506 <PIN_LOW>
 8000ea2:	2110      	movs	r1, #16
 8000ea4:	485c      	ldr	r0, [pc, #368]	; (8001018 <read16bits+0x194>)
 8000ea6:	f7ff fb2e 	bl	8000506 <PIN_LOW>
 8000eaa:	2110      	movs	r1, #16
 8000eac:	485a      	ldr	r0, [pc, #360]	; (8001018 <read16bits+0x194>)
 8000eae:	f7ff fb2a 	bl	8000506 <PIN_LOW>
 8000eb2:	4b5a      	ldr	r3, [pc, #360]	; (800101c <read16bits+0x198>)
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	f003 0301 	and.w	r3, r3, #1
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	4b57      	ldr	r3, [pc, #348]	; (800101c <read16bits+0x198>)
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	f003 0302 	and.w	r3, r3, #2
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	4b52      	ldr	r3, [pc, #328]	; (8001018 <read16bits+0x194>)
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	0b5b      	lsrs	r3, r3, #13
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	f003 0304 	and.w	r3, r3, #4
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	4313      	orrs	r3, r2
 8000ede:	b29a      	uxth	r2, r3
 8000ee0:	4b4e      	ldr	r3, [pc, #312]	; (800101c <read16bits+0x198>)
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	f003 0308 	and.w	r3, r3, #8
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	4313      	orrs	r3, r2
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	4b4a      	ldr	r3, [pc, #296]	; (800101c <read16bits+0x198>)
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	f003 0310 	and.w	r3, r3, #16
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	4313      	orrs	r3, r2
 8000efe:	b29a      	uxth	r2, r3
 8000f00:	4b46      	ldr	r3, [pc, #280]	; (800101c <read16bits+0x198>)
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	f003 0320 	and.w	r3, r3, #32
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	4b42      	ldr	r3, [pc, #264]	; (800101c <read16bits+0x198>)
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	4b3d      	ldr	r3, [pc, #244]	; (8001018 <read16bits+0x194>)
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	4313      	orrs	r3, r2
 8000f32:	80fb      	strh	r3, [r7, #6]
 8000f34:	2110      	movs	r1, #16
 8000f36:	4838      	ldr	r0, [pc, #224]	; (8001018 <read16bits+0x194>)
 8000f38:	f7ff faf5 	bl	8000526 <PIN_HIGH>
 8000f3c:	2110      	movs	r1, #16
 8000f3e:	4836      	ldr	r0, [pc, #216]	; (8001018 <read16bits+0x194>)
 8000f40:	f7ff faf1 	bl	8000526 <PIN_HIGH>
    READ_8(lo);
 8000f44:	2110      	movs	r1, #16
 8000f46:	4834      	ldr	r0, [pc, #208]	; (8001018 <read16bits+0x194>)
 8000f48:	f7ff faed 	bl	8000526 <PIN_HIGH>
 8000f4c:	2110      	movs	r1, #16
 8000f4e:	4832      	ldr	r0, [pc, #200]	; (8001018 <read16bits+0x194>)
 8000f50:	f7ff fad9 	bl	8000506 <PIN_LOW>
 8000f54:	2110      	movs	r1, #16
 8000f56:	4830      	ldr	r0, [pc, #192]	; (8001018 <read16bits+0x194>)
 8000f58:	f7ff fad5 	bl	8000506 <PIN_LOW>
 8000f5c:	2110      	movs	r1, #16
 8000f5e:	482e      	ldr	r0, [pc, #184]	; (8001018 <read16bits+0x194>)
 8000f60:	f7ff fad1 	bl	8000506 <PIN_LOW>
 8000f64:	2110      	movs	r1, #16
 8000f66:	482c      	ldr	r0, [pc, #176]	; (8001018 <read16bits+0x194>)
 8000f68:	f7ff facd 	bl	8000506 <PIN_LOW>
 8000f6c:	4b2b      	ldr	r3, [pc, #172]	; (800101c <read16bits+0x198>)
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	4b28      	ldr	r3, [pc, #160]	; (800101c <read16bits+0x198>)
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	4313      	orrs	r3, r2
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	4b23      	ldr	r3, [pc, #140]	; (8001018 <read16bits+0x194>)
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	0b5b      	lsrs	r3, r3, #13
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	f003 0304 	and.w	r3, r3, #4
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	4313      	orrs	r3, r2
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	4b20      	ldr	r3, [pc, #128]	; (800101c <read16bits+0x198>)
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	f003 0308 	and.w	r3, r3, #8
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4b1c      	ldr	r3, [pc, #112]	; (800101c <read16bits+0x198>)
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	f003 0310 	and.w	r3, r3, #16
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4b18      	ldr	r3, [pc, #96]	; (800101c <read16bits+0x198>)
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	f003 0320 	and.w	r3, r3, #32
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <read16bits+0x198>)
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <read16bits+0x194>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	4313      	orrs	r3, r2
 8000fec:	717b      	strb	r3, [r7, #5]
 8000fee:	2110      	movs	r1, #16
 8000ff0:	4809      	ldr	r0, [pc, #36]	; (8001018 <read16bits+0x194>)
 8000ff2:	f7ff fa98 	bl	8000526 <PIN_HIGH>
 8000ff6:	2110      	movs	r1, #16
 8000ff8:	4807      	ldr	r0, [pc, #28]	; (8001018 <read16bits+0x194>)
 8000ffa:	f7ff fa94 	bl	8000526 <PIN_HIGH>
    return (ret << 8) | lo;
 8000ffe:	88fb      	ldrh	r3, [r7, #6]
 8001000:	021b      	lsls	r3, r3, #8
 8001002:	b21a      	sxth	r2, r3
 8001004:	797b      	ldrb	r3, [r7, #5]
 8001006:	b21b      	sxth	r3, r3
 8001008:	4313      	orrs	r3, r2
 800100a:	b21b      	sxth	r3, r3
 800100c:	b29b      	uxth	r3, r3
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40010800 	.word	0x40010800
 800101c:	40010c00 	.word	0x40010c00

08001020 <readReg>:

uint16_t readReg(uint16_t reg, int8_t index)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	460a      	mov	r2, r1
 800102a:	80fb      	strh	r3, [r7, #6]
 800102c:	4613      	mov	r3, r2
 800102e:	717b      	strb	r3, [r7, #5]
    uint16_t ret;
    uint8_t lo;
    if (!done_reset)
 8001030:	4b3e      	ldr	r3, [pc, #248]	; (800112c <readReg+0x10c>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d101      	bne.n	800103c <readReg+0x1c>
        reset();
 8001038:	f7ff fede 	bl	8000df8 <reset>
    CS_ACTIVE;
 800103c:	2102      	movs	r1, #2
 800103e:	483c      	ldr	r0, [pc, #240]	; (8001130 <readReg+0x110>)
 8001040:	f7ff fa61 	bl	8000506 <PIN_LOW>
    WriteCmd(reg);
 8001044:	2104      	movs	r1, #4
 8001046:	483a      	ldr	r0, [pc, #232]	; (8001130 <readReg+0x110>)
 8001048:	f7ff fa5d 	bl	8000506 <PIN_LOW>
 800104c:	88fb      	ldrh	r3, [r7, #6]
 800104e:	0a1b      	lsrs	r3, r3, #8
 8001050:	b29b      	uxth	r3, r3
 8001052:	73fb      	strb	r3, [r7, #15]
 8001054:	88fb      	ldrh	r3, [r7, #6]
 8001056:	73bb      	strb	r3, [r7, #14]
 8001058:	4b35      	ldr	r3, [pc, #212]	; (8001130 <readReg+0x110>)
 800105a:	4a36      	ldr	r2, [pc, #216]	; (8001134 <readReg+0x114>)
 800105c:	611a      	str	r2, [r3, #16]
 800105e:	4b36      	ldr	r3, [pc, #216]	; (8001138 <readReg+0x118>)
 8001060:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8001064:	611a      	str	r2, [r3, #16]
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	035b      	lsls	r3, r3, #13
 800106a:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	109b      	asrs	r3, r3, #2
 8001072:	f003 0320 	and.w	r3, r3, #32
 8001076:	431a      	orrs	r2, r3
 8001078:	4b2d      	ldr	r3, [pc, #180]	; (8001130 <readReg+0x110>)
 800107a:	611a      	str	r2, [r3, #16]
 800107c:	7bfb      	ldrb	r3, [r7, #15]
 800107e:	4a2e      	ldr	r2, [pc, #184]	; (8001138 <readReg+0x118>)
 8001080:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8001084:	6113      	str	r3, [r2, #16]
 8001086:	2108      	movs	r1, #8
 8001088:	4829      	ldr	r0, [pc, #164]	; (8001130 <readReg+0x110>)
 800108a:	f7ff fa3c 	bl	8000506 <PIN_LOW>
 800108e:	2108      	movs	r1, #8
 8001090:	4827      	ldr	r0, [pc, #156]	; (8001130 <readReg+0x110>)
 8001092:	f7ff fa48 	bl	8000526 <PIN_HIGH>
 8001096:	2108      	movs	r1, #8
 8001098:	4825      	ldr	r0, [pc, #148]	; (8001130 <readReg+0x110>)
 800109a:	f7ff fa44 	bl	8000526 <PIN_HIGH>
 800109e:	4b24      	ldr	r3, [pc, #144]	; (8001130 <readReg+0x110>)
 80010a0:	4a24      	ldr	r2, [pc, #144]	; (8001134 <readReg+0x114>)
 80010a2:	611a      	str	r2, [r3, #16]
 80010a4:	4b24      	ldr	r3, [pc, #144]	; (8001138 <readReg+0x118>)
 80010a6:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 80010aa:	611a      	str	r2, [r3, #16]
 80010ac:	7bbb      	ldrb	r3, [r7, #14]
 80010ae:	035b      	lsls	r3, r3, #13
 80010b0:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 80010b4:	7bbb      	ldrb	r3, [r7, #14]
 80010b6:	109b      	asrs	r3, r3, #2
 80010b8:	f003 0320 	and.w	r3, r3, #32
 80010bc:	431a      	orrs	r2, r3
 80010be:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <readReg+0x110>)
 80010c0:	611a      	str	r2, [r3, #16]
 80010c2:	7bbb      	ldrb	r3, [r7, #14]
 80010c4:	4a1c      	ldr	r2, [pc, #112]	; (8001138 <readReg+0x118>)
 80010c6:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 80010ca:	6113      	str	r3, [r2, #16]
 80010cc:	2108      	movs	r1, #8
 80010ce:	4818      	ldr	r0, [pc, #96]	; (8001130 <readReg+0x110>)
 80010d0:	f7ff fa19 	bl	8000506 <PIN_LOW>
 80010d4:	2108      	movs	r1, #8
 80010d6:	4816      	ldr	r0, [pc, #88]	; (8001130 <readReg+0x110>)
 80010d8:	f7ff fa25 	bl	8000526 <PIN_HIGH>
 80010dc:	2108      	movs	r1, #8
 80010de:	4814      	ldr	r0, [pc, #80]	; (8001130 <readReg+0x110>)
 80010e0:	f7ff fa21 	bl	8000526 <PIN_HIGH>
 80010e4:	2104      	movs	r1, #4
 80010e6:	4812      	ldr	r0, [pc, #72]	; (8001130 <readReg+0x110>)
 80010e8:	f7ff fa1d 	bl	8000526 <PIN_HIGH>
    setReadDir();
 80010ec:	f7ff fb3c 	bl	8000768 <setReadDir>
    delay(1);    //1us should be adequate
 80010f0:	2001      	movs	r0, #1
 80010f2:	f7ff f82b 	bl	800014c <delay>
    //    READ_16(ret);
    do { ret = read16bits(); }while (--index >= 0);  //need to test with SSD1963
 80010f6:	f7ff fec5 	bl	8000e84 <read16bits>
 80010fa:	4603      	mov	r3, r0
 80010fc:	81bb      	strh	r3, [r7, #12]
 80010fe:	797b      	ldrb	r3, [r7, #5]
 8001100:	3b01      	subs	r3, #1
 8001102:	b2db      	uxtb	r3, r3
 8001104:	717b      	strb	r3, [r7, #5]
 8001106:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800110a:	2b00      	cmp	r3, #0
 800110c:	daf3      	bge.n	80010f6 <readReg+0xd6>
    RD_IDLE;
 800110e:	2110      	movs	r1, #16
 8001110:	4807      	ldr	r0, [pc, #28]	; (8001130 <readReg+0x110>)
 8001112:	f7ff fa08 	bl	8000526 <PIN_HIGH>
    CS_IDLE;
 8001116:	2102      	movs	r1, #2
 8001118:	4805      	ldr	r0, [pc, #20]	; (8001130 <readReg+0x110>)
 800111a:	f7ff fa04 	bl	8000526 <PIN_HIGH>
    setWriteDir();
 800111e:	f7ff fb4d 	bl	80007bc <setWriteDir>
    return ret;
 8001122:	89bb      	ldrh	r3, [r7, #12]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000082 	.word	0x20000082
 8001130:	40010800 	.word	0x40010800
 8001134:	80200000 	.word	0x80200000
 8001138:	40010c00 	.word	0x40010c00

0800113c <readReg32>:

uint32_t readReg32(uint16_t reg)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 8001146:	88fb      	ldrh	r3, [r7, #6]
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff ff68 	bl	8001020 <readReg>
 8001150:	4603      	mov	r3, r0
 8001152:	81fb      	strh	r3, [r7, #14]
    uint16_t l = readReg(reg, 1);
 8001154:	88fb      	ldrh	r3, [r7, #6]
 8001156:	2101      	movs	r1, #1
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff61 	bl	8001020 <readReg>
 800115e:	4603      	mov	r3, r0
 8001160:	81bb      	strh	r3, [r7, #12]
    return ((uint32_t) h << 16) | (l);
 8001162:	89fb      	ldrh	r3, [r7, #14]
 8001164:	041a      	lsls	r2, r3, #16
 8001166:	89bb      	ldrh	r3, [r7, #12]
 8001168:	4313      	orrs	r3, r2
}
 800116a:	4618      	mov	r0, r3
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <readReg40>:

uint32_t readReg40(uint16_t reg)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b084      	sub	sp, #16
 8001176:	af00      	add	r7, sp, #0
 8001178:	4603      	mov	r3, r0
 800117a:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 800117c:	88fb      	ldrh	r3, [r7, #6]
 800117e:	2100      	movs	r1, #0
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff ff4d 	bl	8001020 <readReg>
 8001186:	4603      	mov	r3, r0
 8001188:	81fb      	strh	r3, [r7, #14]
    uint16_t m = readReg(reg, 1);
 800118a:	88fb      	ldrh	r3, [r7, #6]
 800118c:	2101      	movs	r1, #1
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff ff46 	bl	8001020 <readReg>
 8001194:	4603      	mov	r3, r0
 8001196:	81bb      	strh	r3, [r7, #12]
    uint16_t l = readReg(reg, 2);
 8001198:	88fb      	ldrh	r3, [r7, #6]
 800119a:	2102      	movs	r1, #2
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff3f 	bl	8001020 <readReg>
 80011a2:	4603      	mov	r3, r0
 80011a4:	817b      	strh	r3, [r7, #10]
    return ((uint32_t) h << 24) | (m << 8) | (l >> 8);
 80011a6:	89fb      	ldrh	r3, [r7, #14]
 80011a8:	061b      	lsls	r3, r3, #24
 80011aa:	89ba      	ldrh	r2, [r7, #12]
 80011ac:	0212      	lsls	r2, r2, #8
 80011ae:	4313      	orrs	r3, r2
 80011b0:	897a      	ldrh	r2, [r7, #10]
 80011b2:	0a12      	lsrs	r2, r2, #8
 80011b4:	b292      	uxth	r2, r2
 80011b6:	4313      	orrs	r3, r2
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <tft_init>:


void tft_init(uint16_t ID)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	80fb      	strh	r3, [r7, #6]
	int dummy=0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]
    int16_t *p16;               //so we can "write" to a const protected variable.
    const uint8_t *table8_ads = NULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
    int16_t table_size;
    _lcd_xor = 0;
 80011d2:	4bd7      	ldr	r3, [pc, #860]	; (8001530 <tft_init+0x370>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	801a      	strh	r2, [r3, #0]
    switch (_lcd_ID = ID) {
 80011d8:	4ad6      	ldr	r2, [pc, #856]	; (8001534 <tft_init+0x374>)
 80011da:	88fb      	ldrh	r3, [r7, #6]
 80011dc:	8013      	strh	r3, [r2, #0]
 80011de:	4bd5      	ldr	r3, [pc, #852]	; (8001534 <tft_init+0x374>)
 80011e0:	881b      	ldrh	r3, [r3, #0]
 80011e2:	f24c 5205 	movw	r2, #50437	; 0xc505
 80011e6:	4293      	cmp	r3, r2
 80011e8:	f000 8320 	beq.w	800182c <tft_init+0x66c>
 80011ec:	f24c 5205 	movw	r2, #50437	; 0xc505
 80011f0:	4293      	cmp	r3, r2
 80011f2:	f300 8333 	bgt.w	800185c <tft_init+0x69c>
 80011f6:	f24b 5209 	movw	r2, #46345	; 0xb509
 80011fa:	4293      	cmp	r3, r2
 80011fc:	f000 831f 	beq.w	800183e <tft_init+0x67e>
 8001200:	f24b 5209 	movw	r2, #46345	; 0xb509
 8001204:	4293      	cmp	r3, r2
 8001206:	f300 8329 	bgt.w	800185c <tft_init+0x69c>
 800120a:	f24b 5205 	movw	r2, #46341	; 0xb505
 800120e:	4293      	cmp	r3, r2
 8001210:	f000 830c 	beq.w	800182c <tft_init+0x66c>
 8001214:	f24b 5205 	movw	r2, #46341	; 0xb505
 8001218:	4293      	cmp	r3, r2
 800121a:	f300 831f 	bgt.w	800185c <tft_init+0x69c>
 800121e:	f64a 4211 	movw	r2, #44049	; 0xac11
 8001222:	4293      	cmp	r3, r2
 8001224:	f000 8263 	beq.w	80016ee <tft_init+0x52e>
 8001228:	f64a 4211 	movw	r2, #44049	; 0xac11
 800122c:	4293      	cmp	r3, r2
 800122e:	f300 8315 	bgt.w	800185c <tft_init+0x69c>
 8001232:	f249 5295 	movw	r2, #38293	; 0x9595
 8001236:	4293      	cmp	r3, r2
 8001238:	f000 81d0 	beq.w	80015dc <tft_init+0x41c>
 800123c:	f249 5295 	movw	r2, #38293	; 0x9595
 8001240:	4293      	cmp	r3, r2
 8001242:	f300 830b 	bgt.w	800185c <tft_init+0x69c>
 8001246:	f249 4288 	movw	r2, #38024	; 0x9488
 800124a:	4293      	cmp	r3, r2
 800124c:	f300 8306 	bgt.w	800185c <tft_init+0x69c>
 8001250:	f249 4287 	movw	r2, #38023	; 0x9487
 8001254:	4293      	cmp	r3, r2
 8001256:	f280 82d2 	bge.w	80017fe <tft_init+0x63e>
 800125a:	f249 4286 	movw	r2, #38022	; 0x9486
 800125e:	4293      	cmp	r3, r2
 8001260:	f000 8289 	beq.w	8001776 <tft_init+0x5b6>
 8001264:	f249 4286 	movw	r2, #38022	; 0x9486
 8001268:	4293      	cmp	r3, r2
 800126a:	f300 82f7 	bgt.w	800185c <tft_init+0x69c>
 800126e:	f249 4281 	movw	r2, #38017	; 0x9481
 8001272:	4293      	cmp	r3, r2
 8001274:	f000 8268 	beq.w	8001748 <tft_init+0x588>
 8001278:	f249 4281 	movw	r2, #38017	; 0x9481
 800127c:	4293      	cmp	r3, r2
 800127e:	f300 82ed 	bgt.w	800185c <tft_init+0x69c>
 8001282:	f249 3241 	movw	r2, #37697	; 0x9341
 8001286:	4293      	cmp	r3, r2
 8001288:	f300 82e8 	bgt.w	800185c <tft_init+0x69c>
 800128c:	f249 3202 	movw	r2, #37634	; 0x9302
 8001290:	4293      	cmp	r3, r2
 8001292:	f280 80c3 	bge.w	800141c <tft_init+0x25c>
 8001296:	f249 0290 	movw	r2, #37008	; 0x9090
 800129a:	4293      	cmp	r3, r2
 800129c:	f000 81af 	beq.w	80015fe <tft_init+0x43e>
 80012a0:	f249 0290 	movw	r2, #37008	; 0x9090
 80012a4:	4293      	cmp	r3, r2
 80012a6:	f300 82d9 	bgt.w	800185c <tft_init+0x69c>
 80012aa:	f248 3257 	movw	r2, #33623	; 0x8357
 80012ae:	4293      	cmp	r3, r2
 80012b0:	f000 81a0 	beq.w	80015f4 <tft_init+0x434>
 80012b4:	f248 3257 	movw	r2, #33623	; 0x8357
 80012b8:	4293      	cmp	r3, r2
 80012ba:	f300 82cf 	bgt.w	800185c <tft_init+0x69c>
 80012be:	f248 0231 	movw	r2, #32817	; 0x8031
 80012c2:	4293      	cmp	r3, r2
 80012c4:	f000 817c 	beq.w	80015c0 <tft_init+0x400>
 80012c8:	f248 0231 	movw	r2, #32817	; 0x8031
 80012cc:	4293      	cmp	r3, r2
 80012ce:	f300 82c5 	bgt.w	800185c <tft_init+0x69c>
 80012d2:	f247 7296 	movw	r2, #30614	; 0x7796
 80012d6:	4293      	cmp	r3, r2
 80012d8:	f000 828c 	beq.w	80017f4 <tft_init+0x634>
 80012dc:	f247 7296 	movw	r2, #30614	; 0x7796
 80012e0:	4293      	cmp	r3, r2
 80012e2:	f300 82bb 	bgt.w	800185c <tft_init+0x69c>
 80012e6:	f247 7293 	movw	r2, #30611	; 0x7793
 80012ea:	4293      	cmp	r3, r2
 80012ec:	f000 82a7 	beq.w	800183e <tft_init+0x67e>
 80012f0:	f247 7293 	movw	r2, #30611	; 0x7793
 80012f4:	4293      	cmp	r3, r2
 80012f6:	f300 82b1 	bgt.w	800185c <tft_init+0x69c>
 80012fa:	f247 7289 	movw	r2, #30601	; 0x7789
 80012fe:	4293      	cmp	r3, r2
 8001300:	f000 8155 	beq.w	80015ae <tft_init+0x3ee>
 8001304:	f247 7289 	movw	r2, #30601	; 0x7789
 8001308:	4293      	cmp	r3, r2
 800130a:	f300 82a7 	bgt.w	800185c <tft_init+0x69c>
 800130e:	f247 5275 	movw	r2, #30069	; 0x7575
 8001312:	4293      	cmp	r3, r2
 8001314:	f000 8162 	beq.w	80015dc <tft_init+0x41c>
 8001318:	f247 5275 	movw	r2, #30069	; 0x7575
 800131c:	4293      	cmp	r3, r2
 800131e:	f300 829d 	bgt.w	800185c <tft_init+0x69c>
 8001322:	f646 0209 	movw	r2, #26633	; 0x6809
 8001326:	4293      	cmp	r3, r2
 8001328:	f000 81aa 	beq.w	8001680 <tft_init+0x4c0>
 800132c:	f646 0209 	movw	r2, #26633	; 0x6809
 8001330:	4293      	cmp	r3, r2
 8001332:	f300 8293 	bgt.w	800185c <tft_init+0x69c>
 8001336:	f246 7267 	movw	r2, #26471	; 0x6767
 800133a:	4293      	cmp	r3, r2
 800133c:	f000 814e 	beq.w	80015dc <tft_init+0x41c>
 8001340:	f246 7267 	movw	r2, #26471	; 0x6767
 8001344:	4293      	cmp	r3, r2
 8001346:	f300 8289 	bgt.w	800185c <tft_init+0x69c>
 800134a:	f245 4208 	movw	r2, #21512	; 0x5408
 800134e:	4293      	cmp	r3, r2
 8001350:	f000 8186 	beq.w	8001660 <tft_init+0x4a0>
 8001354:	f245 4208 	movw	r2, #21512	; 0x5408
 8001358:	4293      	cmp	r3, r2
 800135a:	f300 827f 	bgt.w	800185c <tft_init+0x69c>
 800135e:	f245 3210 	movw	r2, #21264	; 0x5310
 8001362:	4293      	cmp	r3, r2
 8001364:	f000 810e 	beq.w	8001584 <tft_init+0x3c4>
 8001368:	f245 3210 	movw	r2, #21264	; 0x5310
 800136c:	4293      	cmp	r3, r2
 800136e:	f300 8275 	bgt.w	800185c <tft_init+0x69c>
 8001372:	f244 7247 	movw	r2, #18247	; 0x4747
 8001376:	4293      	cmp	r3, r2
 8001378:	f000 812b 	beq.w	80015d2 <tft_init+0x412>
 800137c:	f244 7247 	movw	r2, #18247	; 0x4747
 8001380:	4293      	cmp	r3, r2
 8001382:	f300 826b 	bgt.w	800185c <tft_init+0x69c>
 8001386:	f242 0253 	movw	r2, #8275	; 0x2053
 800138a:	4293      	cmp	r3, r2
 800138c:	f000 81aa 	beq.w	80016e4 <tft_init+0x524>
 8001390:	f242 0253 	movw	r2, #8275	; 0x2053
 8001394:	4293      	cmp	r3, r2
 8001396:	f300 8261 	bgt.w	800185c <tft_init+0x69c>
 800139a:	f241 6202 	movw	r2, #5634	; 0x1602
 800139e:	4293      	cmp	r3, r2
 80013a0:	f000 8197 	beq.w	80016d2 <tft_init+0x512>
 80013a4:	f241 6202 	movw	r2, #5634	; 0x1602
 80013a8:	4293      	cmp	r3, r2
 80013aa:	f300 8257 	bgt.w	800185c <tft_init+0x69c>
 80013ae:	f241 5281 	movw	r2, #5505	; 0x1581
 80013b2:	4293      	cmp	r3, r2
 80013b4:	f000 81c3 	beq.w	800173e <tft_init+0x57e>
 80013b8:	f241 5281 	movw	r2, #5505	; 0x1581
 80013bc:	4293      	cmp	r3, r2
 80013be:	f300 824d 	bgt.w	800185c <tft_init+0x69c>
 80013c2:	f241 5226 	movw	r2, #5414	; 0x1526
 80013c6:	4293      	cmp	r3, r2
 80013c8:	f000 80d3 	beq.w	8001572 <tft_init+0x3b2>
 80013cc:	f241 5226 	movw	r2, #5414	; 0x1526
 80013d0:	4293      	cmp	r3, r2
 80013d2:	f300 8243 	bgt.w	800185c <tft_init+0x69c>
 80013d6:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 80013da:	f000 80c1 	beq.w	8001560 <tft_init+0x3a0>
 80013de:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 80013e2:	f300 823b 	bgt.w	800185c <tft_init+0x69c>
 80013e6:	f241 5211 	movw	r2, #5393	; 0x1511
 80013ea:	4293      	cmp	r3, r2
 80013ec:	f000 80a4 	beq.w	8001538 <tft_init+0x378>
 80013f0:	f241 5211 	movw	r2, #5393	; 0x1511
 80013f4:	4293      	cmp	r3, r2
 80013f6:	f300 8231 	bgt.w	800185c <tft_init+0x69c>
 80013fa:	f241 5205 	movw	r2, #5381	; 0x1505
 80013fe:	4293      	cmp	r3, r2
 8001400:	f000 8133 	beq.w	800166a <tft_init+0x4aa>
 8001404:	f241 5205 	movw	r2, #5381	; 0x1505
 8001408:	4293      	cmp	r3, r2
 800140a:	f300 8227 	bgt.w	800185c <tft_init+0x69c>
 800140e:	2b01      	cmp	r3, #1
 8001410:	f000 8121 	beq.w	8001656 <tft_init+0x496>
 8001414:	2b99      	cmp	r3, #153	; 0x99
 8001416:	f000 8109 	beq.w	800162c <tft_init+0x46c>
 800141a:	e21f      	b.n	800185c <tft_init+0x69c>
 800141c:	f5a3 4313 	sub.w	r3, r3, #37632	; 0x9300
 8001420:	3b02      	subs	r3, #2
 8001422:	2b3f      	cmp	r3, #63	; 0x3f
 8001424:	f200 821a 	bhi.w	800185c <tft_init+0x69c>
 8001428:	a201      	add	r2, pc, #4	; (adr r2, 8001430 <tft_init+0x270>)
 800142a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800142e:	bf00      	nop
 8001430:	080016f9 	.word	0x080016f9
 8001434:	0800185d 	.word	0x0800185d
 8001438:	0800185d 	.word	0x0800185d
 800143c:	0800185d 	.word	0x0800185d
 8001440:	0800185d 	.word	0x0800185d
 8001444:	0800185d 	.word	0x0800185d
 8001448:	0800185d 	.word	0x0800185d
 800144c:	0800185d 	.word	0x0800185d
 8001450:	0800185d 	.word	0x0800185d
 8001454:	0800185d 	.word	0x0800185d
 8001458:	0800185d 	.word	0x0800185d
 800145c:	0800185d 	.word	0x0800185d
 8001460:	0800185d 	.word	0x0800185d
 8001464:	0800185d 	.word	0x0800185d
 8001468:	0800185d 	.word	0x0800185d
 800146c:	0800185d 	.word	0x0800185d
 8001470:	0800185d 	.word	0x0800185d
 8001474:	0800185d 	.word	0x0800185d
 8001478:	0800185d 	.word	0x0800185d
 800147c:	0800185d 	.word	0x0800185d
 8001480:	0800185d 	.word	0x0800185d
 8001484:	0800185d 	.word	0x0800185d
 8001488:	0800185d 	.word	0x0800185d
 800148c:	0800185d 	.word	0x0800185d
 8001490:	0800185d 	.word	0x0800185d
 8001494:	0800185d 	.word	0x0800185d
 8001498:	0800185d 	.word	0x0800185d
 800149c:	0800185d 	.word	0x0800185d
 80014a0:	0800185d 	.word	0x0800185d
 80014a4:	0800185d 	.word	0x0800185d
 80014a8:	0800166b 	.word	0x0800166b
 80014ac:	0800185d 	.word	0x0800185d
 80014b0:	0800185d 	.word	0x0800185d
 80014b4:	0800185d 	.word	0x0800185d
 80014b8:	0800185d 	.word	0x0800185d
 80014bc:	0800168b 	.word	0x0800168b
 80014c0:	0800185d 	.word	0x0800185d
 80014c4:	080016ab 	.word	0x080016ab
 80014c8:	0800168b 	.word	0x0800168b
 80014cc:	0800170d 	.word	0x0800170d
 80014d0:	0800185d 	.word	0x0800185d
 80014d4:	0800185d 	.word	0x0800185d
 80014d8:	0800185d 	.word	0x0800185d
 80014dc:	0800185d 	.word	0x0800185d
 80014e0:	0800185d 	.word	0x0800185d
 80014e4:	0800185d 	.word	0x0800185d
 80014e8:	0800185d 	.word	0x0800185d
 80014ec:	08001695 	.word	0x08001695
 80014f0:	0800185d 	.word	0x0800185d
 80014f4:	0800185d 	.word	0x0800185d
 80014f8:	0800185d 	.word	0x0800185d
 80014fc:	08001695 	.word	0x08001695
 8001500:	0800185d 	.word	0x0800185d
 8001504:	0800185d 	.word	0x0800185d
 8001508:	08001703 	.word	0x08001703
 800150c:	0800185d 	.word	0x0800185d
 8001510:	0800185d 	.word	0x0800185d
 8001514:	0800185d 	.word	0x0800185d
 8001518:	0800185d 	.word	0x0800185d
 800151c:	0800185d 	.word	0x0800185d
 8001520:	0800185d 	.word	0x0800185d
 8001524:	0800185d 	.word	0x0800185d
 8001528:	08001723 	.word	0x08001723
 800152c:	0800172d 	.word	0x0800172d
 8001530:	2000008a 	.word	0x2000008a
 8001534:	2000008e 	.word	0x2000008e
        init_table16(SSD1289_regValues, sizeof(SSD1289_regValues));
        break;
#endif

    case 0x1511:                // Unknown from Levy
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1;   //extra read_8(dummy)
 8001538:	4b99      	ldr	r3, [pc, #612]	; (80017a0 <tft_init+0x5e0>)
 800153a:	2203      	movs	r2, #3
 800153c:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61511_regValues[]  = {
			0xB0, 1, 0x00,       //Command Access Protect
        };
        table8_ads = R61511_regValues, table_size = sizeof(R61511_regValues);
 800153e:	4b99      	ldr	r3, [pc, #612]	; (80017a4 <tft_init+0x5e4>)
 8001540:	61fb      	str	r3, [r7, #28]
 8001542:	2303      	movs	r3, #3
 8001544:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001546:	4b98      	ldr	r3, [pc, #608]	; (80017a8 <tft_init+0x5e8>)
 8001548:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001550:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001552:	4b96      	ldr	r3, [pc, #600]	; (80017ac <tft_init+0x5ec>)
 8001554:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800155c:	801a      	strh	r2, [r3, #0]
        break;
 800155e:	e183      	b.n	8001868 <tft_init+0x6a8>

    case 0x1520:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8001560:	4b8f      	ldr	r3, [pc, #572]	; (80017a0 <tft_init+0x5e0>)
 8001562:	f240 4213 	movw	r2, #1043	; 0x413
 8001566:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61520_regValues[]  = {
            0xB0, 1, 0x00,      //Command Access Protect
            0xC0, 1, 0x0A,      //DM=1, BGR=1
        };
        table8_ads = R61520_regValues, table_size = sizeof(R61520_regValues);
 8001568:	4b91      	ldr	r3, [pc, #580]	; (80017b0 <tft_init+0x5f0>)
 800156a:	61fb      	str	r3, [r7, #28]
 800156c:	2306      	movs	r3, #6
 800156e:	837b      	strh	r3, [r7, #26]
        break;
 8001570:	e17a      	b.n	8001868 <tft_init+0x6a8>

	case 0x1526:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8001572:	4b8b      	ldr	r3, [pc, #556]	; (80017a0 <tft_init+0x5e0>)
 8001574:	f240 4213 	movw	r2, #1043	; 0x413
 8001578:	801a      	strh	r2, [r3, #0]
            0xB0, 1, 0x03,      //Command Access
            0xE2, 1, 0x3F,      //Command Write Access
            0xC0, 1, 0x22,      //REV=0, BGR=1, SS=0
            0xE2, 1, 0x00,      //Command Write Protect
        };
        table8_ads = R61526_regValues, table_size = sizeof(R61526_regValues);
 800157a:	4b8e      	ldr	r3, [pc, #568]	; (80017b4 <tft_init+0x5f4>)
 800157c:	61fb      	str	r3, [r7, #28]
 800157e:	230c      	movs	r3, #12
 8001580:	837b      	strh	r3, [r7, #26]
        break;
 8001582:	e171      	b.n	8001868 <tft_init+0x6a8>
        init_table16(LGDP4535_regValues, sizeof(LGDP4535_regValues));
        break;
#endif

    case 0x5310:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | INVERT_RGB | READ_24BITS;
 8001584:	4b86      	ldr	r3, [pc, #536]	; (80017a0 <tft_init+0x5e0>)
 8001586:	f640 6213 	movw	r2, #3603	; 0xe13
 800158a:	801a      	strh	r2, [r3, #0]
        static const uint8_t NT35310_regValues[]  = {        //
            TFTLCD_DELAY8, 10,    //just some dummy
        };
        table8_ads = NT35310_regValues, table_size = sizeof(NT35310_regValues);
 800158c:	4b8a      	ldr	r3, [pc, #552]	; (80017b8 <tft_init+0x5f8>)
 800158e:	61fb      	str	r3, [r7, #28]
 8001590:	2302      	movs	r3, #2
 8001592:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001594:	4b84      	ldr	r3, [pc, #528]	; (80017a8 <tft_init+0x5e8>)
 8001596:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800159e:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80015a0:	4b82      	ldr	r3, [pc, #520]	; (80017ac <tft_init+0x5ec>)
 80015a2:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80015aa:	801a      	strh	r2, [r3, #0]
        break;
 80015ac:	e15c      	b.n	8001868 <tft_init+0x6a8>
        init_table16(ST7781_regValues, sizeof(ST7781_regValues));
        break;
#endif

    case 0x7789:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80015ae:	4b7c      	ldr	r3, [pc, #496]	; (80017a0 <tft_init+0x5e0>)
 80015b0:	f240 4213 	movw	r2, #1043	; 0x413
 80015b4:	801a      	strh	r2, [r3, #0]
            (0x55), 1, 0x90,    //WRCACE  [00]
            (0xD0), 2, 0xA4, 0xA1,      //PWCTRL1: Power Control 1 [A4 A1]
            (0xE0), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x2A, 0x3C, 0x55, 0x4B, 0x08, 0x16, 0x14, 0x19, 0x20,     //PVGAMCTRL: Positive Voltage Gamma control
            (0xE1), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x29, 0x36, 0x54, 0x4B, 0x0D, 0x16, 0x14, 0x21, 0x20,     //NVGAMCTRL: Negative Voltage Gamma control
        };
        table8_ads = ST7789_regValues, table_size = sizeof(ST7789_regValues); //
 80015b6:	4b81      	ldr	r3, [pc, #516]	; (80017bc <tft_init+0x5fc>)
 80015b8:	61fb      	str	r3, [r7, #28]
 80015ba:	2341      	movs	r3, #65	; 0x41
 80015bc:	837b      	strh	r3, [r7, #26]
        break;
 80015be:	e153      	b.n	8001868 <tft_init+0x6a8>

    case 0x8031:      //Unknown BangGood thanks PrinceCharles
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 80015c0:	4b77      	ldr	r3, [pc, #476]	; (80017a0 <tft_init+0x5e0>)
 80015c2:	f241 4213 	movw	r2, #5139	; 0x1413
 80015c6:	801a      	strh	r2, [r3, #0]
        static const uint8_t FK8031_regValues[]  = {
            // 0xF2:8.2 = SM, 0xF2:8.0 = REV. invertDisplay(), vertScroll() do not work
            0xF2,11, 0x16, 0x16, 0x03, 0x08, 0x08, 0x08, 0x08, 0x10, 0x04, 0x16, 0x16, // f.k. 0xF2:8.2 SM=1
            0xFD, 3, 0x11, 0x02, 0x35,     //f.k 0xFD:1.1 creates contiguous scan lins
        };
        table8_ads = FK8031_regValues, table_size = sizeof(FK8031_regValues);
 80015c8:	4b7d      	ldr	r3, [pc, #500]	; (80017c0 <tft_init+0x600>)
 80015ca:	61fb      	str	r3, [r7, #28]
 80015cc:	2312      	movs	r3, #18
 80015ce:	837b      	strh	r3, [r7, #26]
        break;
 80015d0:	e14a      	b.n	8001868 <tft_init+0x6a8>

#ifdef SUPPORT_8347D
    case 0x4747:       //HX8347-D
        _lcd_capable = REV_SCREEN | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | AUTO_READINC | READ_24BITS;
 80015d2:	4b73      	ldr	r3, [pc, #460]	; (80017a0 <tft_init+0x5e0>)
 80015d4:	f241 6213 	movw	r2, #5651	; 0x1613
 80015d8:	801a      	strh	r2, [r3, #0]
		goto common_8347DGI;
 80015da:	e003      	b.n	80015e4 <tft_init+0x424>
    case 0x6767:       //HX8367-A
	case 0x7575:       //HX8347-G
	case 0x9595:       //HX8347-I
        _lcd_capable = REV_SCREEN | MIPI_DCS_REV1 | MV_AXIS;
 80015dc:	4b70      	ldr	r3, [pc, #448]	; (80017a0 <tft_init+0x5e0>)
 80015de:	f241 4201 	movw	r2, #5121	; 0x1401
 80015e2:	801a      	strh	r2, [r3, #0]
      common_8347DGI:
		is8347 = 1;
 80015e4:	4b77      	ldr	r3, [pc, #476]	; (80017c4 <tft_init+0x604>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	701a      	strb	r2, [r3, #0]
            TFTLCD_DELAY8, 40,
            0x28, 1, 0x3F,      //GON=1, DTE=1, D=1100

            0x16, 1, 0x18,
        };
        init_table(HX8347G_2_regValues, sizeof(HX8347G_2_regValues));
 80015ea:	2170      	movs	r1, #112	; 0x70
 80015ec:	4876      	ldr	r0, [pc, #472]	; (80017c8 <tft_init+0x608>)
 80015ee:	f7ff fb79 	bl	8000ce4 <init_table>
        break;
 80015f2:	e139      	b.n	8001868 <tft_init+0x6a8>
        //        init_table(HX8347G_2_regValues, sizeof(HX8347G_2_regValues));
        break;
#endif

    case 0x8357:                //BIG CHANGE: HX8357-B is now 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN;
 80015f4:	4b6a      	ldr	r3, [pc, #424]	; (80017a0 <tft_init+0x5e0>)
 80015f6:	f241 4203 	movw	r2, #5123	; 0x1403
 80015fa:	801a      	strh	r2, [r3, #0]
        goto common_8357;
 80015fc:	e003      	b.n	8001606 <tft_init+0x446>
    case 0x9090:                //BIG CHANGE: HX8357-D was 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 80015fe:	4b68      	ldr	r3, [pc, #416]	; (80017a0 <tft_init+0x5e0>)
 8001600:	f241 4213 	movw	r2, #5139	; 0x1413
 8001604:	801a      	strh	r2, [r3, #0]
      common_8357:
	  	dummy=1;
 8001606:	2301      	movs	r3, #1
 8001608:	617b      	str	r3, [r7, #20]
        static const uint8_t HX8357C_regValues[]  = {
            TFTLCD_DELAY8, 1,  //dummy table
        };
        table8_ads = HX8357C_regValues, table_size = sizeof(HX8357C_regValues);
 800160a:	4b70      	ldr	r3, [pc, #448]	; (80017cc <tft_init+0x60c>)
 800160c:	61fb      	str	r3, [r7, #28]
 800160e:	2302      	movs	r3, #2
 8001610:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001612:	4b65      	ldr	r3, [pc, #404]	; (80017a8 <tft_init+0x5e8>)
 8001614:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800161c:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 800161e:	4b63      	ldr	r3, [pc, #396]	; (80017ac <tft_init+0x5ec>)
 8001620:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001628:	801a      	strh	r2, [r3, #0]
        break;
 800162a:	e11d      	b.n	8001868 <tft_init+0x6a8>

    case 0x0099:                //HX8357-D matches datasheet
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 800162c:	4b5c      	ldr	r3, [pc, #368]	; (80017a0 <tft_init+0x5e0>)
 800162e:	f241 4213 	movw	r2, #5139	; 0x1413
 8001632:	801a      	strh	r2, [r3, #0]
#ifdef SUPPORT_8357D_GAMMA
            // HX8357D_SETGAMMA [0B 0C 11 1D 25 37 43 4B 4E 47 41 39 35 31 2E 21 1C 1D 1D 26 31 44 4E 56 44 3F 39 33 31 2E 28 1D E0 01]
            (0xE0),34, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x00, 0x01,
#endif
        };
        table8_ads = HX8357_99_regValues, table_size = sizeof(HX8357_99_regValues);
 8001634:	4b66      	ldr	r3, [pc, #408]	; (80017d0 <tft_init+0x610>)
 8001636:	61fb      	str	r3, [r7, #28]
 8001638:	231d      	movs	r3, #29
 800163a:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 800163c:	4b5a      	ldr	r3, [pc, #360]	; (80017a8 <tft_init+0x5e8>)
 800163e:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001646:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001648:	4b58      	ldr	r3, [pc, #352]	; (80017ac <tft_init+0x5ec>)
 800164a:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001652:	801a      	strh	r2, [r3, #0]
        break;
 8001654:	e108      	b.n	8001868 <tft_init+0x6a8>
        *p16 = 176;
        break;
#endif

    case 0x0001:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS; //no RGB bug. thanks Ivo_Deshev
 8001656:	4b52      	ldr	r3, [pc, #328]	; (80017a0 <tft_init+0x5e0>)
 8001658:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 800165c:	801a      	strh	r2, [r3, #0]
        goto common_9320;
 800165e:	e008      	b.n	8001672 <tft_init+0x4b2>
    case 0x5408:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR; //Red 2.4" thanks jorgenv, Ardlab_Gent
 8001660:	4b4f      	ldr	r3, [pc, #316]	; (80017a0 <tft_init+0x5e0>)
 8001662:	f241 0204 	movw	r2, #4100	; 0x1004
 8001666:	801a      	strh	r2, [r3, #0]
//        _lcd_capable = 0 | REV_SCREEN | READ_BGR | INVERT_GS; //Blue 2.8" might be different
        goto common_9320;
 8001668:	e003      	b.n	8001672 <tft_init+0x4b2>
    case 0x1505:                //R61505 thanks Ravi_kanchan2004. R61505V, R61505W different
    case 0x9320:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR;
 800166a:	4b4d      	ldr	r3, [pc, #308]	; (80017a0 <tft_init+0x5e0>)
 800166c:	f241 0204 	movw	r2, #4100	; 0x1004
 8001670:	801a      	strh	r2, [r3, #0]
      common_9320:
	    dummy=1;
 8001672:	2301      	movs	r3, #1
 8001674:	617b      	str	r3, [r7, #20]
            0x0098, 0x0000,
            //-----Display on-----------------------
            0x0007, 0x0173,
            TFTLCD_DELAY, 50,
        };
        init_table16(ILI9320_regValues, sizeof(ILI9320_regValues));
 8001676:	21d8      	movs	r1, #216	; 0xd8
 8001678:	4856      	ldr	r0, [pc, #344]	; (80017d4 <tft_init+0x614>)
 800167a:	f7ff fb8c 	bl	8000d96 <init_table16>
        break;
 800167e:	e0f3      	b.n	8001868 <tft_init+0x6a8>
    case 0x6809:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS | AUTO_READINC;
 8001680:	4b47      	ldr	r3, [pc, #284]	; (80017a0 <tft_init+0x5e0>)
 8001682:	f241 1202 	movw	r2, #4354	; 0x1102
 8001686:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 8001688:	e008      	b.n	800169c <tft_init+0x4dc>
    case 0x9328:
    case 0x9325:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS;
 800168a:	4b45      	ldr	r3, [pc, #276]	; (80017a0 <tft_init+0x5e0>)
 800168c:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 8001690:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 8001692:	e003      	b.n	800169c <tft_init+0x4dc>
    case 0x9331:
    case 0x9335:
        _lcd_capable = 0 | REV_SCREEN;
 8001694:	4b42      	ldr	r3, [pc, #264]	; (80017a0 <tft_init+0x5e0>)
 8001696:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800169a:	801a      	strh	r2, [r3, #0]
      common_93x5:
	    dummy=1;
 800169c:	2301      	movs	r3, #1
 800169e:	617b      	str	r3, [r7, #20]
            //-------------- Panel Control -------------------//
            0x0090, 0x0010,
            0x0092, 0x0000,
            0x0007, 0x0133,     // 262K color and display ON
        };
        init_table16(ILI9325_regValues, sizeof(ILI9325_regValues));
 80016a0:	21cc      	movs	r1, #204	; 0xcc
 80016a2:	484d      	ldr	r0, [pc, #308]	; (80017d8 <tft_init+0x618>)
 80016a4:	f7ff fb77 	bl	8000d96 <init_table16>
        break;
 80016a8:	e0de      	b.n	8001868 <tft_init+0x6a8>
        *p16 = 240;
        break;
#endif

    case 0x9327:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 80016aa:	4b3d      	ldr	r3, [pc, #244]	; (80017a0 <tft_init+0x5e0>)
 80016ac:	f240 4203 	movw	r2, #1027	; 0x403
 80016b0:	801a      	strh	r2, [r3, #0]
            //            0xC8, 15, 0x00, 0x77, 0x77, 0x04, 0x04, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
            0xCA, 1, 0x00,      //DGC LUT ???
            0xEA, 1, 0x80,      //3-Gamma Function Enable
            //                     0xB0, 1, 0x03,      //Enable Protect
        };
        table8_ads = ILI9327_regValues, table_size = sizeof(ILI9327_regValues);
 80016b2:	4b4a      	ldr	r3, [pc, #296]	; (80017dc <tft_init+0x61c>)
 80016b4:	61fb      	str	r3, [r7, #28]
 80016b6:	231e      	movs	r3, #30
 80016b8:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80016ba:	4b3b      	ldr	r3, [pc, #236]	; (80017a8 <tft_init+0x5e8>)
 80016bc:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80016c4:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80016c6:	4b39      	ldr	r3, [pc, #228]	; (80017ac <tft_init+0x5ec>)
 80016c8:	613b      	str	r3, [r7, #16]
        *p16 = 240;
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	22f0      	movs	r2, #240	; 0xf0
 80016ce:	801a      	strh	r2, [r3, #0]
        break;
 80016d0:	e0ca      	b.n	8001868 <tft_init+0x6a8>
    case 0x1602:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //does not readGRAM
 80016d2:	4b33      	ldr	r3, [pc, #204]	; (80017a0 <tft_init+0x5e0>)
 80016d4:	f240 4203 	movw	r2, #1027	; 0x403
 80016d8:	801a      	strh	r2, [r3, #0]
        static const uint8_t XX1602_regValues[]  = {
            0xB8, 1, 0x01,      //GS [00]
            0xC0, 1, 0x0E,      //??Power [0A]
        };
        table8_ads = XX1602_regValues, table_size = sizeof(XX1602_regValues);
 80016da:	4b41      	ldr	r3, [pc, #260]	; (80017e0 <tft_init+0x620>)
 80016dc:	61fb      	str	r3, [r7, #28]
 80016de:	2306      	movs	r3, #6
 80016e0:	837b      	strh	r3, [r7, #26]
        break;
 80016e2:	e0c1      	b.n	8001868 <tft_init+0x6a8>

    case 0x2053:    //weird from BangGood
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN | READ_BGR;
 80016e4:	4b2e      	ldr	r3, [pc, #184]	; (80017a0 <tft_init+0x5e0>)
 80016e6:	f241 4217 	movw	r2, #5143	; 0x1417
 80016ea:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 80016ec:	e012      	b.n	8001714 <tft_init+0x554>
    case 0xAC11:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN; //thanks viliam
 80016ee:	4b2c      	ldr	r3, [pc, #176]	; (80017a0 <tft_init+0x5e0>)
 80016f0:	f241 4213 	movw	r2, #5139	; 0x1413
 80016f4:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 80016f6:	e00d      	b.n	8001714 <tft_init+0x554>
    case 0x9302:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 80016f8:	4b29      	ldr	r3, [pc, #164]	; (80017a0 <tft_init+0x5e0>)
 80016fa:	f240 4203 	movw	r2, #1027	; 0x403
 80016fe:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8001700:	e008      	b.n	8001714 <tft_init+0x554>
    case 0x9338:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8001702:	4b27      	ldr	r3, [pc, #156]	; (80017a0 <tft_init+0x5e0>)
 8001704:	f240 4213 	movw	r2, #1043	; 0x413
 8001708:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 800170a:	e003      	b.n	8001714 <tft_init+0x554>
    case 0x9329:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | REV_SCREEN;
 800170c:	4b24      	ldr	r3, [pc, #144]	; (80017a0 <tft_init+0x5e0>)
 800170e:	f241 6203 	movw	r2, #5635	; 0x1603
 8001712:	801a      	strh	r2, [r3, #0]
	  common_9329:
	    dummy=1;
 8001714:	2301      	movs	r3, #1
 8001716:	617b      	str	r3, [r7, #20]
//            0xF6, 3, 0x01, 0x01, 0x00,  //Interface Control needs EXTC=1 MX_EOR=1, TM=0, RIM=0
//            0xB6, 3, 0x0A, 0x82, 0x27,  //Display Function [0A 82 27]
//            0xB7, 1, 0x06,      //Entry Mode Set [06]
            0x36, 1, 0x00,      //Memory Access [00] pointless but stops an empty array
        };
        table8_ads = ILI9329_regValues, table_size = sizeof(ILI9329_regValues);
 8001718:	4b32      	ldr	r3, [pc, #200]	; (80017e4 <tft_init+0x624>)
 800171a:	61fb      	str	r3, [r7, #28]
 800171c:	2303      	movs	r3, #3
 800171e:	837b      	strh	r3, [r7, #26]
        break;
 8001720:	e0a2      	b.n	8001868 <tft_init+0x6a8>

    case 0x9340:                //ILI9340 thanks Ravi_kanchan2004.
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 8001722:	4b1f      	ldr	r3, [pc, #124]	; (80017a0 <tft_init+0x5e0>)
 8001724:	f241 4213 	movw	r2, #5139	; 0x1413
 8001728:	801a      	strh	r2, [r3, #0]
        goto common_9341;
 800172a:	bf00      	nop
    case 0x9341:
      common_9341:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 800172c:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <tft_init+0x5e0>)
 800172e:	f240 4213 	movw	r2, #1043	; 0x413
 8001732:	801a      	strh	r2, [r3, #0]
            0xC7, 1, 0xC0,      //VCOM 2 [C0]
            0x36, 1, 0x88,      //Memory Access [00]
            0xB1, 2, 0x00, 0x1B,        //Frame Control [00 1B]
            0xB7, 1, 0x07,      //Entry Mode [00]
        };
        table8_ads = ILI9341_regValues_2_4, table_size = sizeof(ILI9341_regValues_2_4);   //
 8001734:	4b2c      	ldr	r3, [pc, #176]	; (80017e8 <tft_init+0x628>)
 8001736:	61fb      	str	r3, [r7, #28]
 8001738:	2365      	movs	r3, #101	; 0x65
 800173a:	837b      	strh	r3, [r7, #26]
        break;
 800173c:	e094      	b.n	8001868 <tft_init+0x6a8>
        p16 = (int16_t *) & width;
        *p16 = 320;
        break;
#endif
    case 0x1581:                        //no BGR in MADCTL.  set BGR in Panel Control
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS; //thanks zdravke
 800173e:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <tft_init+0x5e0>)
 8001740:	f240 4213 	movw	r2, #1043	; 0x413
 8001744:	801a      	strh	r2, [r3, #0]
		goto common_9481;
 8001746:	e003      	b.n	8001750 <tft_init+0x590>
    case 0x9481:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_BGR;
 8001748:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <tft_init+0x5e0>)
 800174a:	f240 4207 	movw	r2, #1031	; 0x407
 800174e:	801a      	strh	r2, [r3, #0]
	  common_9481:
	    dummy=1;
 8001750:	2301      	movs	r3, #1
 8001752:	617b      	str	r3, [r7, #20]
            0x0C, 2, 0x00, 0x55, //RDCOLMOD
			0xB4, 1, 0x00,      //SETDISPLAY
//			0xB3, 4, 0x00, 0x01, 0x06, 0x01,  //SETGRAM simple example
			0xB3, 4, 0x00, 0x01, 0x06, 0x30,  //jpegs example
        };
        table8_ads = ILI9481_regValues, table_size = sizeof(ILI9481_regValues);
 8001754:	4b25      	ldr	r3, [pc, #148]	; (80017ec <tft_init+0x62c>)
 8001756:	61fb      	str	r3, [r7, #28]
 8001758:	2345      	movs	r3, #69	; 0x45
 800175a:	837b      	strh	r3, [r7, #26]
//        table8_ads = ILI9481_CPT29_regValues, table_size = sizeof(ILI9481_CPT29_regValues);
//        table8_ads = ILI9481_PVI35_regValues, table_size = sizeof(ILI9481_PVI35_regValues);
//        table8_ads = ILI9481_AUO317_regValues, table_size = sizeof(ILI9481_AUO317_regValues);
//        table8_ads = ILI9481_CMO35_regValues, table_size = sizeof(ILI9481_CMO35_regValues);
//        table8_ads = ILI9481_RGB_regValues, table_size = sizeof(ILI9481_RGB_regValues);
        p16 = (int16_t *) & height;
 800175c:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <tft_init+0x5e8>)
 800175e:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001766:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001768:	4b10      	ldr	r3, [pc, #64]	; (80017ac <tft_init+0x5ec>)
 800176a:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001772:	801a      	strh	r2, [r3, #0]
        break;
 8001774:	e078      	b.n	8001868 <tft_init+0x6a8>
    case 0x9486:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //Red 3.5", Blue 3.5"
 8001776:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <tft_init+0x5e0>)
 8001778:	f240 4203 	movw	r2, #1027	; 0x403
 800177c:	801a      	strh	r2, [r3, #0]
            // 4.2 WTK 3.5 Inch Initial Code too white
			0xE0, 15, 0x0F, 0x10, 0x08, 0x05, 0x09, 0x05, 0x37, 0x98, 0x26, 0x07, 0x0F, 0x02, 0x09, 0x07, 0x00,
			0xE1, 15, 0x0F, 0x38, 0x36, 0x0D, 0x10, 0x08, 0x59, 0x76, 0x48, 0x0A, 0x16, 0x0A, 0x37, 0x2F, 0x00,
#endif
        };
        table8_ads = ILI9486_regValues, table_size = sizeof(ILI9486_regValues);
 800177e:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <tft_init+0x630>)
 8001780:	61fb      	str	r3, [r7, #28]
 8001782:	233b      	movs	r3, #59	; 0x3b
 8001784:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001786:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <tft_init+0x5e8>)
 8001788:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001790:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <tft_init+0x5ec>)
 8001794:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800179c:	801a      	strh	r2, [r3, #0]
        break;
 800179e:	e063      	b.n	8001868 <tft_init+0x6a8>
 80017a0:	2000008c 	.word	0x2000008c
 80017a4:	0800617c 	.word	0x0800617c
 80017a8:	080005b9 	.word	0x080005b9
 80017ac:	080005a5 	.word	0x080005a5
 80017b0:	08006180 	.word	0x08006180
 80017b4:	08006188 	.word	0x08006188
 80017b8:	08006194 	.word	0x08006194
 80017bc:	08006198 	.word	0x08006198
 80017c0:	080061dc 	.word	0x080061dc
 80017c4:	20000083 	.word	0x20000083
 80017c8:	080061f0 	.word	0x080061f0
 80017cc:	08006260 	.word	0x08006260
 80017d0:	08006264 	.word	0x08006264
 80017d4:	08006284 	.word	0x08006284
 80017d8:	0800635c 	.word	0x0800635c
 80017dc:	08006428 	.word	0x08006428
 80017e0:	08006448 	.word	0x08006448
 80017e4:	08006450 	.word	0x08006450
 80017e8:	08006454 	.word	0x08006454
 80017ec:	080064bc 	.word	0x080064bc
 80017f0:	08006504 	.word	0x08006504
    case 0x7796:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;   //thanks to safari1
 80017f4:	4b46      	ldr	r3, [pc, #280]	; (8001910 <tft_init+0x750>)
 80017f6:	f240 4203 	movw	r2, #1027	; 0x403
 80017fa:	801a      	strh	r2, [r3, #0]
        goto common_9488;
 80017fc:	e003      	b.n	8001806 <tft_init+0x646>
    case 0x9487:                //with thanks to Charlyf
    case 0x9488:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80017fe:	4b44      	ldr	r3, [pc, #272]	; (8001910 <tft_init+0x750>)
 8001800:	f240 4213 	movw	r2, #1043	; 0x413
 8001804:	801a      	strh	r2, [r3, #0]
      common_9488:
	    dummy=1;
 8001806:	2301      	movs	r3, #1
 8001808:	617b      	str	r3, [r7, #20]
            0xB6, 3, 0x02, 0x02, 0x3B,  // Display Function Control [02 02 3B] .kbv NL=480
            0xB7, 1, 0xC6,      //Entry Mode      [06]
            0x3A, 1, 0x55,      //Interlace Pixel Format [XX]
            0xF7, 4, 0xA9, 0x51, 0x2C, 0x82,    //Adjustment Control 3 [A9 51 2C 82]
        };
        table8_ads = ILI9488_regValues_max, table_size = sizeof(ILI9488_regValues_max);
 800180a:	4b42      	ldr	r3, [pc, #264]	; (8001914 <tft_init+0x754>)
 800180c:	61fb      	str	r3, [r7, #28]
 800180e:	232b      	movs	r3, #43	; 0x2b
 8001810:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001812:	4b41      	ldr	r3, [pc, #260]	; (8001918 <tft_init+0x758>)
 8001814:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800181c:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 800181e:	4b3f      	ldr	r3, [pc, #252]	; (800191c <tft_init+0x75c>)
 8001820:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001828:	801a      	strh	r2, [r3, #0]
        break;
 800182a:	e01d      	b.n	8001868 <tft_init+0x6a8>
    case 0xB505:                //R61505V
    case 0xC505:                //R61505W
        _lcd_capable = 0 | REV_SCREEN | READ_LOWHIGH;
 800182c:	4b38      	ldr	r3, [pc, #224]	; (8001910 <tft_init+0x750>)
 800182e:	f241 0208 	movw	r2, #4104	; 0x1008
 8001832:	801a      	strh	r2, [r3, #0]
            0x0092, 0x0100,
            0x0093, 0x0701,
            TFTLCD_DELAY, 80,
            0x0007, 0x0100,     //BASEE=1--Display On
        };
        init_table16(R61505V_regValues, sizeof(R61505V_regValues));
 8001834:	21b0      	movs	r1, #176	; 0xb0
 8001836:	483a      	ldr	r0, [pc, #232]	; (8001920 <tft_init+0x760>)
 8001838:	f7ff faad 	bl	8000d96 <init_table16>
        break;
 800183c:	e014      	b.n	8001868 <tft_init+0x6a8>

#if defined(SUPPORT_B509_7793)
    case 0x7793:
    case 0xB509:
        _lcd_capable = REV_SCREEN;
 800183e:	4b34      	ldr	r3, [pc, #208]	; (8001910 <tft_init+0x750>)
 8001840:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001844:	801a      	strh	r2, [r3, #0]
            TFTLCD_DELAY, 50,

            0x0200, 0x0000,
            0x0201, 0x0000,
        };
        init_table16(R61509V_regValues, sizeof(R61509V_regValues));
 8001846:	21c0      	movs	r1, #192	; 0xc0
 8001848:	4836      	ldr	r0, [pc, #216]	; (8001924 <tft_init+0x764>)
 800184a:	f7ff faa4 	bl	8000d96 <init_table16>
        p16 = (int16_t *) & height;
 800184e:	4b32      	ldr	r3, [pc, #200]	; (8001918 <tft_init+0x758>)
 8001850:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001858:	801a      	strh	r2, [r3, #0]
        break;
 800185a:	e005      	b.n	8001868 <tft_init+0x6a8>
        p16 = (int16_t *) & width;
        *p16 = 854;
        break;
#endif
    default:
        p16 = (int16_t *) & width;
 800185c:	4b2f      	ldr	r3, [pc, #188]	; (800191c <tft_init+0x75c>)
 800185e:	613b      	str	r3, [r7, #16]
        *p16 = 0;       //error value for width
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	2200      	movs	r2, #0
 8001864:	801a      	strh	r2, [r3, #0]
        break;
 8001866:	bf00      	nop
    }
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0);
 8001868:	4b29      	ldr	r3, [pc, #164]	; (8001910 <tft_init+0x750>)
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001870:	2b00      	cmp	r3, #0
 8001872:	bf14      	ite	ne
 8001874:	2301      	movne	r3, #1
 8001876:	2300      	moveq	r3, #0
 8001878:	b2db      	uxtb	r3, r3
 800187a:	b29a      	uxth	r2, r3
 800187c:	4b2a      	ldr	r3, [pc, #168]	; (8001928 <tft_init+0x768>)
 800187e:	801a      	strh	r2, [r3, #0]
    if (table8_ads != NULL) {
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00d      	beq.n	80018a2 <tft_init+0x6e2>
        static const uint8_t wake_on[]  = {
			0x11, 0,            //Sleep Out
            TFTLCD_DELAY8, 150,
            0x29, 0,            //Display On
        };
		init_table(&reset_off, sizeof(reset_off));
 8001886:	2109      	movs	r1, #9
 8001888:	4828      	ldr	r0, [pc, #160]	; (800192c <tft_init+0x76c>)
 800188a:	f7ff fa2b 	bl	8000ce4 <init_table>
	    init_table(table8_ads, table_size);   //can change PIXFMT
 800188e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001892:	4619      	mov	r1, r3
 8001894:	69f8      	ldr	r0, [r7, #28]
 8001896:	f7ff fa25 	bl	8000ce4 <init_table>
		init_table(&wake_on, sizeof(wake_on));
 800189a:	2106      	movs	r1, #6
 800189c:	4824      	ldr	r0, [pc, #144]	; (8001930 <tft_init+0x770>)
 800189e:	f7ff fa21 	bl	8000ce4 <init_table>
    }
    setRotation(0);             //PORTRAIT
 80018a2:	2000      	movs	r0, #0
 80018a4:	f000 fe82 	bl	80025ac <setRotation>
    invertDisplay(false);
 80018a8:	2000      	movs	r0, #0
 80018aa:	f001 fc21 	bl	80030f0 <invertDisplay>
#if defined(SUPPORT_9488_555)
    if (_lcd_ID == 0x9488) {
 80018ae:	4b21      	ldr	r3, [pc, #132]	; (8001934 <tft_init+0x774>)
 80018b0:	881b      	ldrh	r3, [r3, #0]
 80018b2:	f249 4288 	movw	r2, #38024	; 0x9488
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d125      	bne.n	8001906 <tft_init+0x746>
		is555 = 0;
 80018ba:	4b1f      	ldr	r3, [pc, #124]	; (8001938 <tft_init+0x778>)
 80018bc:	2200      	movs	r2, #0
 80018be:	701a      	strb	r2, [r3, #0]
		drawPixel(0, 0, 0xFFE0);
 80018c0:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80018c4:	2100      	movs	r1, #0
 80018c6:	2000      	movs	r0, #0
 80018c8:	f001 f8f8 	bl	8002abc <drawPixel>
		if (readPixel(0, 0) == 0xFF1F) {
 80018cc:	2100      	movs	r1, #0
 80018ce:	2000      	movs	r0, #0
 80018d0:	f7fe ff0d 	bl	80006ee <readPixel>
 80018d4:	4603      	mov	r3, r0
 80018d6:	461a      	mov	r2, r3
 80018d8:	f64f 731f 	movw	r3, #65311	; 0xff1f
 80018dc:	429a      	cmp	r2, r3
 80018de:	d112      	bne.n	8001906 <tft_init+0x746>
			uint8_t pixfmt = 0x06;
 80018e0:	2306      	movs	r3, #6
 80018e2:	73fb      	strb	r3, [r7, #15]
			pushCommand(0x3A, &pixfmt, 1);
 80018e4:	f107 030f 	add.w	r3, r7, #15
 80018e8:	2201      	movs	r2, #1
 80018ea:	4619      	mov	r1, r3
 80018ec:	203a      	movs	r0, #58	; 0x3a
 80018ee:	f7fe ff28 	bl	8000742 <pushCommand>
			_lcd_capable &= ~READ_24BITS;
 80018f2:	4b07      	ldr	r3, [pc, #28]	; (8001910 <tft_init+0x750>)
 80018f4:	881b      	ldrh	r3, [r3, #0]
 80018f6:	f023 0310 	bic.w	r3, r3, #16
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	4b04      	ldr	r3, [pc, #16]	; (8001910 <tft_init+0x750>)
 80018fe:	801a      	strh	r2, [r3, #0]
			is555 = 1;
 8001900:	4b0d      	ldr	r3, [pc, #52]	; (8001938 <tft_init+0x778>)
 8001902:	2201      	movs	r2, #1
 8001904:	701a      	strb	r2, [r3, #0]
		}
	}
#endif
}
 8001906:	bf00      	nop
 8001908:	3720      	adds	r7, #32
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	2000008c 	.word	0x2000008c
 8001914:	08006540 	.word	0x08006540
 8001918:	080005b9 	.word	0x080005b9
 800191c:	080005a5 	.word	0x080005a5
 8001920:	0800656c 	.word	0x0800656c
 8001924:	0800661c 	.word	0x0800661c
 8001928:	20000090 	.word	0x20000090
 800192c:	080066dc 	.word	0x080066dc
 8001930:	080066e8 	.word	0x080066e8
 8001934:	2000008e 	.word	0x2000008e
 8001938:	20000084 	.word	0x20000084

0800193c <readID>:




uint16_t readID(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
    uint16_t ret, ret2;
    uint8_t msb;
    ret = readReg(0,0);           //forces a reset() if called before begin()
 8001942:	2100      	movs	r1, #0
 8001944:	2000      	movs	r0, #0
 8001946:	f7ff fb6b 	bl	8001020 <readReg>
 800194a:	4603      	mov	r3, r0
 800194c:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5408)          //the SPFD5408 fails the 0xD3D3 test.
 800194e:	89fb      	ldrh	r3, [r7, #14]
 8001950:	f245 4208 	movw	r2, #21512	; 0x5408
 8001954:	4293      	cmp	r3, r2
 8001956:	d102      	bne.n	800195e <readID+0x22>
        return 0x5408;
 8001958:	f245 4308 	movw	r3, #21512	; 0x5408
 800195c:	e128      	b.n	8001bb0 <readID+0x274>
    if (ret == 0x5420)          //the SPFD5420 fails the 0xD3D3 test.
 800195e:	89fb      	ldrh	r3, [r7, #14]
 8001960:	f245 4220 	movw	r2, #21536	; 0x5420
 8001964:	4293      	cmp	r3, r2
 8001966:	d102      	bne.n	800196e <readID+0x32>
        return 0x5420;
 8001968:	f245 4320 	movw	r3, #21536	; 0x5420
 800196c:	e120      	b.n	8001bb0 <readID+0x274>
    if (ret == 0x8989)          //SSD1289 is always 8989
 800196e:	89fb      	ldrh	r3, [r7, #14]
 8001970:	f648 1289 	movw	r2, #35209	; 0x8989
 8001974:	4293      	cmp	r3, r2
 8001976:	d102      	bne.n	800197e <readID+0x42>
        return 0x1289;
 8001978:	f241 2389 	movw	r3, #4745	; 0x1289
 800197c:	e118      	b.n	8001bb0 <readID+0x274>
    ret = readReg(0x67,0);        //HX8347-A
 800197e:	2100      	movs	r1, #0
 8001980:	2067      	movs	r0, #103	; 0x67
 8001982:	f7ff fb4d 	bl	8001020 <readReg>
 8001986:	4603      	mov	r3, r0
 8001988:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x4747)
 800198a:	89fb      	ldrh	r3, [r7, #14]
 800198c:	f244 7247 	movw	r2, #18247	; 0x4747
 8001990:	4293      	cmp	r3, r2
 8001992:	d102      	bne.n	800199a <readID+0x5e>
        return 0x8347;
 8001994:	f248 3347 	movw	r3, #33607	; 0x8347
 8001998:	e10a      	b.n	8001bb0 <readID+0x274>
//#if defined(SUPPORT_1963) && USING_16BIT_BUS
    ret = readReg32(0xA1);      //SSD1963: [01 57 61 01]
 800199a:	20a1      	movs	r0, #161	; 0xa1
 800199c:	f7ff fbce 	bl	800113c <readReg32>
 80019a0:	4603      	mov	r3, r0
 80019a2:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x6101)
 80019a4:	89fb      	ldrh	r3, [r7, #14]
 80019a6:	f246 1201 	movw	r2, #24833	; 0x6101
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d102      	bne.n	80019b4 <readID+0x78>
        return 0x1963;
 80019ae:	f641 1363 	movw	r3, #6499	; 0x1963
 80019b2:	e0fd      	b.n	8001bb0 <readID+0x274>
    if (ret == 0xFFFF)          //R61526: [xx FF FF FF]
 80019b4:	89fb      	ldrh	r3, [r7, #14]
 80019b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d102      	bne.n	80019c4 <readID+0x88>
        return 0x1526;          //subsequent begin() enables Command Access
 80019be:	f241 5326 	movw	r3, #5414	; 0x1526
 80019c2:	e0f5      	b.n	8001bb0 <readID+0x274>
//    if (ret == 0xFF00)          //R61520: [xx FF FF 00]
//        return 0x1520;          //subsequent begin() enables Command Access
//#endif
	ret = readReg40(0xBF);
 80019c4:	20bf      	movs	r0, #191	; 0xbf
 80019c6:	f7ff fbd4 	bl	8001172 <readReg40>
 80019ca:	4603      	mov	r3, r0
 80019cc:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x8357)          //HX8357B: [xx 01 62 83 57 FF]
 80019ce:	89fb      	ldrh	r3, [r7, #14]
 80019d0:	f248 3257 	movw	r2, #33623	; 0x8357
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d102      	bne.n	80019de <readID+0xa2>
        return 0x8357;
 80019d8:	f248 3357 	movw	r3, #33623	; 0x8357
 80019dc:	e0e8      	b.n	8001bb0 <readID+0x274>
	if (ret == 0x9481)          //ILI9481: [xx 02 04 94 81 FF]
 80019de:	89fb      	ldrh	r3, [r7, #14]
 80019e0:	f249 4281 	movw	r2, #38017	; 0x9481
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d102      	bne.n	80019ee <readID+0xb2>
        return 0x9481;
 80019e8:	f249 4381 	movw	r3, #38017	; 0x9481
 80019ec:	e0e0      	b.n	8001bb0 <readID+0x274>
    if (ret == 0x1511)          //?R61511: [xx 02 04 15 11] not tested yet
 80019ee:	89fb      	ldrh	r3, [r7, #14]
 80019f0:	f241 5211 	movw	r2, #5393	; 0x1511
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d102      	bne.n	80019fe <readID+0xc2>
        return 0x1511;
 80019f8:	f241 5311 	movw	r3, #5393	; 0x1511
 80019fc:	e0d8      	b.n	8001bb0 <readID+0x274>
    if (ret == 0x1520)          //?R61520: [xx 01 22 15 20]
 80019fe:	89fb      	ldrh	r3, [r7, #14]
 8001a00:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 8001a04:	d102      	bne.n	8001a0c <readID+0xd0>
        return 0x1520;
 8001a06:	f44f 53a9 	mov.w	r3, #5408	; 0x1520
 8001a0a:	e0d1      	b.n	8001bb0 <readID+0x274>
    if (ret == 0x1526)          //?R61526: [xx 01 22 15 26]
 8001a0c:	89fb      	ldrh	r3, [r7, #14]
 8001a0e:	f241 5226 	movw	r2, #5414	; 0x1526
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d102      	bne.n	8001a1c <readID+0xe0>
        return 0x1526;
 8001a16:	f241 5326 	movw	r3, #5414	; 0x1526
 8001a1a:	e0c9      	b.n	8001bb0 <readID+0x274>
    if (ret == 0x1581)          //R61581:  [xx 01 22 15 81]
 8001a1c:	89fb      	ldrh	r3, [r7, #14]
 8001a1e:	f241 5281 	movw	r2, #5505	; 0x1581
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d102      	bne.n	8001a2c <readID+0xf0>
        return 0x1581;
 8001a26:	f241 5381 	movw	r3, #5505	; 0x1581
 8001a2a:	e0c1      	b.n	8001bb0 <readID+0x274>
    if (ret == 0x1400)          //?RM68140:[xx FF 68 14 00] not tested yet
 8001a2c:	89fb      	ldrh	r3, [r7, #14]
 8001a2e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8001a32:	d102      	bne.n	8001a3a <readID+0xfe>
        return 0x6814;
 8001a34:	f646 0314 	movw	r3, #26644	; 0x6814
 8001a38:	e0ba      	b.n	8001bb0 <readID+0x274>
    ret = readReg32(0xD4);
 8001a3a:	20d4      	movs	r0, #212	; 0xd4
 8001a3c:	f7ff fb7e 	bl	800113c <readReg32>
 8001a40:	4603      	mov	r3, r0
 8001a42:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5310)          //NT35310: [xx 01 53 10]
 8001a44:	89fb      	ldrh	r3, [r7, #14]
 8001a46:	f245 3210 	movw	r2, #21264	; 0x5310
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d102      	bne.n	8001a54 <readID+0x118>
        return 0x5310;
 8001a4e:	f245 3310 	movw	r3, #21264	; 0x5310
 8001a52:	e0ad      	b.n	8001bb0 <readID+0x274>
    ret = readReg32(0xD7);
 8001a54:	20d7      	movs	r0, #215	; 0xd7
 8001a56:	f7ff fb71 	bl	800113c <readReg32>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x8031)          //weird unknown from BangGood [xx 20 80 31] PrinceCharles
 8001a5e:	89fb      	ldrh	r3, [r7, #14]
 8001a60:	f248 0231 	movw	r2, #32817	; 0x8031
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d102      	bne.n	8001a6e <readID+0x132>
        return 0x8031;
 8001a68:	f248 0331 	movw	r3, #32817	; 0x8031
 8001a6c:	e0a0      	b.n	8001bb0 <readID+0x274>
    ret = readReg40(0xEF);      //ILI9327: [xx 02 04 93 27 FF]
 8001a6e:	20ef      	movs	r0, #239	; 0xef
 8001a70:	f7ff fb7f 	bl	8001172 <readReg40>
 8001a74:	4603      	mov	r3, r0
 8001a76:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9327)
 8001a78:	89fb      	ldrh	r3, [r7, #14]
 8001a7a:	f249 3227 	movw	r2, #37671	; 0x9327
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d102      	bne.n	8001a88 <readID+0x14c>
        return 0x9327;
 8001a82:	f249 3327 	movw	r3, #37671	; 0x9327
 8001a86:	e093      	b.n	8001bb0 <readID+0x274>
    ret = readReg32(0xFE) >> 8; //weird unknown from BangGood [04 20 53]
 8001a88:	20fe      	movs	r0, #254	; 0xfe
 8001a8a:	f7ff fb57 	bl	800113c <readReg32>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	0a1b      	lsrs	r3, r3, #8
 8001a92:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x2053)
 8001a94:	89fb      	ldrh	r3, [r7, #14]
 8001a96:	f242 0253 	movw	r2, #8275	; 0x2053
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d102      	bne.n	8001aa4 <readID+0x168>
        return 0x2053;
 8001a9e:	f242 0353 	movw	r3, #8275	; 0x2053
 8001aa2:	e085      	b.n	8001bb0 <readID+0x274>
    uint32_t ret32 = readReg32(0x04);
 8001aa4:	2004      	movs	r0, #4
 8001aa6:	f7ff fb49 	bl	800113c <readReg32>
 8001aaa:	60b8      	str	r0, [r7, #8]
    msb = ret32 >> 16;
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	0c1b      	lsrs	r3, r3, #16
 8001ab0:	71fb      	strb	r3, [r7, #7]
    ret = ret32;
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	81fb      	strh	r3, [r7, #14]
//    if (msb = 0x38 && ret == 0x8000) //unknown [xx 38 80 00] with D3 = 0x1602
    if (msb == 0x00 && ret == 0x8000) { //HX8357-D [xx 00 80 00]
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d122      	bne.n	8001b02 <readID+0x1c6>
 8001abc:	89fb      	ldrh	r3, [r7, #14]
 8001abe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ac2:	d11e      	bne.n	8001b02 <readID+0x1c6>
#if 1
        uint8_t cmds[] = {0xFF, 0x83, 0x57};
 8001ac4:	4a3c      	ldr	r2, [pc, #240]	; (8001bb8 <readID+0x27c>)
 8001ac6:	1d3b      	adds	r3, r7, #4
 8001ac8:	6812      	ldr	r2, [r2, #0]
 8001aca:	4611      	mov	r1, r2
 8001acc:	8019      	strh	r1, [r3, #0]
 8001ace:	3302      	adds	r3, #2
 8001ad0:	0c12      	lsrs	r2, r2, #16
 8001ad2:	701a      	strb	r2, [r3, #0]
        pushCommand(0xB9, cmds, 3);
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	2203      	movs	r2, #3
 8001ad8:	4619      	mov	r1, r3
 8001ada:	20b9      	movs	r0, #185	; 0xb9
 8001adc:	f7fe fe31 	bl	8000742 <pushCommand>
        msb = readReg(0xD0,0);
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	20d0      	movs	r0, #208	; 0xd0
 8001ae4:	f7ff fa9c 	bl	8001020 <readReg>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	71fb      	strb	r3, [r7, #7]
        if (msb == 0x99) return 0x0099; //HX8357-D from datasheet
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	2b99      	cmp	r3, #153	; 0x99
 8001af0:	d101      	bne.n	8001af6 <readID+0x1ba>
 8001af2:	2399      	movs	r3, #153	; 0x99
 8001af4:	e05c      	b.n	8001bb0 <readID+0x274>
        if (msb == 0x90)        //HX8357-C undocumented
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	2b90      	cmp	r3, #144	; 0x90
 8001afa:	d102      	bne.n	8001b02 <readID+0x1c6>
#endif
            return 0x9090;      //BIG CHANGE: HX8357-D was 0x8357
 8001afc:	f249 0390 	movw	r3, #37008	; 0x9090
 8001b00:	e056      	b.n	8001bb0 <readID+0x274>
    }
//    if (msb == 0xFF && ret == 0xFFFF) //R61526 [xx FF FF FF]
//        return 0x1526;          //subsequent begin() enables Command Access
    if (ret == 0x1526)          //R61526 [xx 06 15 26] if I have written NVM
 8001b02:	89fb      	ldrh	r3, [r7, #14]
 8001b04:	f241 5226 	movw	r2, #5414	; 0x1526
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d102      	bne.n	8001b12 <readID+0x1d6>
        return 0x1526;          //subsequent begin() enables Command Access
 8001b0c:	f241 5326 	movw	r3, #5414	; 0x1526
 8001b10:	e04e      	b.n	8001bb0 <readID+0x274>
	if (ret == 0x89F0)          //ST7735S: [xx 7C 89 F0]
 8001b12:	89fb      	ldrh	r3, [r7, #14]
 8001b14:	f648 12f0 	movw	r2, #35312	; 0x89f0
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d102      	bne.n	8001b22 <readID+0x1e6>
        return 0x7735;
 8001b1c:	f247 7335 	movw	r3, #30517	; 0x7735
 8001b20:	e046      	b.n	8001bb0 <readID+0x274>
	if (ret == 0x8552)          //ST7789V: [xx 85 85 52]
 8001b22:	89fb      	ldrh	r3, [r7, #14]
 8001b24:	f248 5252 	movw	r2, #34130	; 0x8552
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d102      	bne.n	8001b32 <readID+0x1f6>
        return 0x7789;
 8001b2c:	f247 7389 	movw	r3, #30601	; 0x7789
 8001b30:	e03e      	b.n	8001bb0 <readID+0x274>
    if (ret == 0xAC11)          //?unknown [xx 61 AC 11]
 8001b32:	89fb      	ldrh	r3, [r7, #14]
 8001b34:	f64a 4211 	movw	r2, #44049	; 0xac11
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d102      	bne.n	8001b42 <readID+0x206>
        return 0xAC11;
 8001b3c:	f64a 4311 	movw	r3, #44049	; 0xac11
 8001b40:	e036      	b.n	8001bb0 <readID+0x274>
    ret32 = readReg32(0xD3);      //[xx 91 63 00]
 8001b42:	20d3      	movs	r0, #211	; 0xd3
 8001b44:	f7ff fafa 	bl	800113c <readReg32>
 8001b48:	60b8      	str	r0, [r7, #8]
    ret = ret32 >> 8;
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	0a1b      	lsrs	r3, r3, #8
 8001b4e:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9163) return ret;
 8001b50:	89fb      	ldrh	r3, [r7, #14]
 8001b52:	f249 1263 	movw	r2, #37219	; 0x9163
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d101      	bne.n	8001b5e <readID+0x222>
 8001b5a:	89fb      	ldrh	r3, [r7, #14]
 8001b5c:	e028      	b.n	8001bb0 <readID+0x274>
    ret = readReg32(0xD3);      //for ILI9488, 9486, 9340, 9341
 8001b5e:	20d3      	movs	r0, #211	; 0xd3
 8001b60:	f7ff faec 	bl	800113c <readReg32>
 8001b64:	4603      	mov	r3, r0
 8001b66:	81fb      	strh	r3, [r7, #14]
    msb = ret >> 8;
 8001b68:	89fb      	ldrh	r3, [r7, #14]
 8001b6a:	0a1b      	lsrs	r3, r3, #8
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	71fb      	strb	r3, [r7, #7]
    if (msb == 0x93 || msb == 0x94 || msb == 0x98 || msb == 0x77 || msb == 0x16)
 8001b70:	79fb      	ldrb	r3, [r7, #7]
 8001b72:	2b93      	cmp	r3, #147	; 0x93
 8001b74:	d00b      	beq.n	8001b8e <readID+0x252>
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	2b94      	cmp	r3, #148	; 0x94
 8001b7a:	d008      	beq.n	8001b8e <readID+0x252>
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	2b98      	cmp	r3, #152	; 0x98
 8001b80:	d005      	beq.n	8001b8e <readID+0x252>
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	2b77      	cmp	r3, #119	; 0x77
 8001b86:	d002      	beq.n	8001b8e <readID+0x252>
 8001b88:	79fb      	ldrb	r3, [r7, #7]
 8001b8a:	2b16      	cmp	r3, #22
 8001b8c:	d101      	bne.n	8001b92 <readID+0x256>
        return ret;             //0x9488, 9486, 9340, 9341, 7796
 8001b8e:	89fb      	ldrh	r3, [r7, #14]
 8001b90:	e00e      	b.n	8001bb0 <readID+0x274>
    if (ret == 0x00D3 || ret == 0xD3D3)
 8001b92:	89fb      	ldrh	r3, [r7, #14]
 8001b94:	2bd3      	cmp	r3, #211	; 0xd3
 8001b96:	d004      	beq.n	8001ba2 <readID+0x266>
 8001b98:	89fb      	ldrh	r3, [r7, #14]
 8001b9a:	f24d 32d3 	movw	r2, #54227	; 0xd3d3
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d101      	bne.n	8001ba6 <readID+0x26a>
        return ret;             //16-bit write-only bus
 8001ba2:	89fb      	ldrh	r3, [r7, #14]
 8001ba4:	e004      	b.n	8001bb0 <readID+0x274>
	pushCommand(0xD9, &msb, 1);
	ret = (ret2 << 8) | readReg(0xD3);
//	if (ret2 == 0x93)
    	return ret2;
*/
	return readReg(0,0);          //0154, 7783, 9320, 9325, 9335, B505, B509
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	2000      	movs	r0, #0
 8001baa:	f7ff fa39 	bl	8001020 <readReg>
 8001bae:	4603      	mov	r3, r0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	080057a0 	.word	0x080057a0

08001bbc <readGRAM>:

// independent cursor and window registers.   S6D0154, ST7781 increments.  ILI92320/5 do not.
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h)
{
 8001bbc:	b590      	push	{r4, r7, lr}
 8001bbe:	b08b      	sub	sp, #44	; 0x2c
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60ba      	str	r2, [r7, #8]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	81fb      	strh	r3, [r7, #14]
 8001bca:	460b      	mov	r3, r1
 8001bcc:	81bb      	strh	r3, [r7, #12]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	80fb      	strh	r3, [r7, #6]
    uint16_t ret, dummy, _MR = _MW;
 8001bd2:	4b8d      	ldr	r3, [pc, #564]	; (8001e08 <readGRAM+0x24c>)
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	84bb      	strh	r3, [r7, #36]	; 0x24
    int16_t n = w * h, row = 0, col = 0;
 8001bd8:	88fb      	ldrh	r3, [r7, #6]
 8001bda:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001bdc:	fb02 f303 	mul.w	r3, r2, r3
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	847b      	strh	r3, [r7, #34]	; 0x22
 8001be4:	2300      	movs	r3, #0
 8001be6:	843b      	strh	r3, [r7, #32]
 8001be8:	2300      	movs	r3, #0
 8001bea:	83fb      	strh	r3, [r7, #30]
    uint8_t r, g, b, tmp;
    if (!is8347 && (_lcd_capable & MIPI_DCS_REV1)) // HX8347 uses same register
 8001bec:	4b87      	ldr	r3, [pc, #540]	; (8001e0c <readGRAM+0x250>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d107      	bne.n	8001c04 <readGRAM+0x48>
 8001bf4:	4b86      	ldr	r3, [pc, #536]	; (8001e10 <readGRAM+0x254>)
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <readGRAM+0x48>
        _MR = 0x2E;
 8001c00:	232e      	movs	r3, #46	; 0x2e
 8001c02:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (_lcd_ID == 0x1602) _MR = 0x2E;
 8001c04:	4b83      	ldr	r3, [pc, #524]	; (8001e14 <readGRAM+0x258>)
 8001c06:	881b      	ldrh	r3, [r3, #0]
 8001c08:	f241 6202 	movw	r2, #5634	; 0x1602
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d101      	bne.n	8001c14 <readGRAM+0x58>
 8001c10:	232e      	movs	r3, #46	; 0x2e
 8001c12:	84bb      	strh	r3, [r7, #36]	; 0x24
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 8001c14:	89fa      	ldrh	r2, [r7, #14]
 8001c16:	88fb      	ldrh	r3, [r7, #6]
 8001c18:	4413      	add	r3, r2
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	b21c      	sxth	r4, r3
 8001c22:	89ba      	ldrh	r2, [r7, #12]
 8001c24:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001c26:	4413      	add	r3, r2
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	b21b      	sxth	r3, r3
 8001c30:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001c34:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001c38:	4622      	mov	r2, r4
 8001c3a:	f000 fff5 	bl	8002c28 <setAddrWindow>
    while (n > 0) {
 8001c3e:	f000 bc8c 	b.w	800255a <readGRAM+0x99e>
        if (!(_lcd_capable & MIPI_DCS_REV1)) {
 8001c42:	4b73      	ldr	r3, [pc, #460]	; (8001e10 <readGRAM+0x254>)
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d111      	bne.n	8001c72 <readGRAM+0xb6>
            WriteCmdData(_MC, x + col);
 8001c4e:	4b72      	ldr	r3, [pc, #456]	; (8001e18 <readGRAM+0x25c>)
 8001c50:	8818      	ldrh	r0, [r3, #0]
 8001c52:	89fa      	ldrh	r2, [r7, #14]
 8001c54:	8bfb      	ldrh	r3, [r7, #30]
 8001c56:	4413      	add	r3, r2
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	f7fe fd5f 	bl	800071e <WriteCmdData>
            WriteCmdData(_MP, y + row);
 8001c60:	4b6e      	ldr	r3, [pc, #440]	; (8001e1c <readGRAM+0x260>)
 8001c62:	8818      	ldrh	r0, [r3, #0]
 8001c64:	89ba      	ldrh	r2, [r7, #12]
 8001c66:	8c3b      	ldrh	r3, [r7, #32]
 8001c68:	4413      	add	r3, r2
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f7fe fd56 	bl	800071e <WriteCmdData>
        }
        CS_ACTIVE;
 8001c72:	2102      	movs	r1, #2
 8001c74:	486a      	ldr	r0, [pc, #424]	; (8001e20 <readGRAM+0x264>)
 8001c76:	f7fe fc46 	bl	8000506 <PIN_LOW>
        WriteCmd(_MR);
 8001c7a:	2104      	movs	r1, #4
 8001c7c:	4868      	ldr	r0, [pc, #416]	; (8001e20 <readGRAM+0x264>)
 8001c7e:	f7fe fc42 	bl	8000506 <PIN_LOW>
 8001c82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c84:	0a1b      	lsrs	r3, r3, #8
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	777b      	strb	r3, [r7, #29]
 8001c8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c8c:	773b      	strb	r3, [r7, #28]
 8001c8e:	4b64      	ldr	r3, [pc, #400]	; (8001e20 <readGRAM+0x264>)
 8001c90:	4a64      	ldr	r2, [pc, #400]	; (8001e24 <readGRAM+0x268>)
 8001c92:	611a      	str	r2, [r3, #16]
 8001c94:	4b64      	ldr	r3, [pc, #400]	; (8001e28 <readGRAM+0x26c>)
 8001c96:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8001c9a:	611a      	str	r2, [r3, #16]
 8001c9c:	7f7b      	ldrb	r3, [r7, #29]
 8001c9e:	035b      	lsls	r3, r3, #13
 8001ca0:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8001ca4:	7f7b      	ldrb	r3, [r7, #29]
 8001ca6:	109b      	asrs	r3, r3, #2
 8001ca8:	f003 0320 	and.w	r3, r3, #32
 8001cac:	431a      	orrs	r2, r3
 8001cae:	4b5c      	ldr	r3, [pc, #368]	; (8001e20 <readGRAM+0x264>)
 8001cb0:	611a      	str	r2, [r3, #16]
 8001cb2:	7f7b      	ldrb	r3, [r7, #29]
 8001cb4:	4a5c      	ldr	r2, [pc, #368]	; (8001e28 <readGRAM+0x26c>)
 8001cb6:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8001cba:	6113      	str	r3, [r2, #16]
 8001cbc:	2108      	movs	r1, #8
 8001cbe:	4858      	ldr	r0, [pc, #352]	; (8001e20 <readGRAM+0x264>)
 8001cc0:	f7fe fc21 	bl	8000506 <PIN_LOW>
 8001cc4:	2108      	movs	r1, #8
 8001cc6:	4856      	ldr	r0, [pc, #344]	; (8001e20 <readGRAM+0x264>)
 8001cc8:	f7fe fc2d 	bl	8000526 <PIN_HIGH>
 8001ccc:	2108      	movs	r1, #8
 8001cce:	4854      	ldr	r0, [pc, #336]	; (8001e20 <readGRAM+0x264>)
 8001cd0:	f7fe fc29 	bl	8000526 <PIN_HIGH>
 8001cd4:	4b52      	ldr	r3, [pc, #328]	; (8001e20 <readGRAM+0x264>)
 8001cd6:	4a53      	ldr	r2, [pc, #332]	; (8001e24 <readGRAM+0x268>)
 8001cd8:	611a      	str	r2, [r3, #16]
 8001cda:	4b53      	ldr	r3, [pc, #332]	; (8001e28 <readGRAM+0x26c>)
 8001cdc:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8001ce0:	611a      	str	r2, [r3, #16]
 8001ce2:	7f3b      	ldrb	r3, [r7, #28]
 8001ce4:	035b      	lsls	r3, r3, #13
 8001ce6:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8001cea:	7f3b      	ldrb	r3, [r7, #28]
 8001cec:	109b      	asrs	r3, r3, #2
 8001cee:	f003 0320 	and.w	r3, r3, #32
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	4b4a      	ldr	r3, [pc, #296]	; (8001e20 <readGRAM+0x264>)
 8001cf6:	611a      	str	r2, [r3, #16]
 8001cf8:	7f3b      	ldrb	r3, [r7, #28]
 8001cfa:	4a4b      	ldr	r2, [pc, #300]	; (8001e28 <readGRAM+0x26c>)
 8001cfc:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8001d00:	6113      	str	r3, [r2, #16]
 8001d02:	2108      	movs	r1, #8
 8001d04:	4846      	ldr	r0, [pc, #280]	; (8001e20 <readGRAM+0x264>)
 8001d06:	f7fe fbfe 	bl	8000506 <PIN_LOW>
 8001d0a:	2108      	movs	r1, #8
 8001d0c:	4844      	ldr	r0, [pc, #272]	; (8001e20 <readGRAM+0x264>)
 8001d0e:	f7fe fc0a 	bl	8000526 <PIN_HIGH>
 8001d12:	2108      	movs	r1, #8
 8001d14:	4842      	ldr	r0, [pc, #264]	; (8001e20 <readGRAM+0x264>)
 8001d16:	f7fe fc06 	bl	8000526 <PIN_HIGH>
 8001d1a:	2104      	movs	r1, #4
 8001d1c:	4840      	ldr	r0, [pc, #256]	; (8001e20 <readGRAM+0x264>)
 8001d1e:	f7fe fc02 	bl	8000526 <PIN_HIGH>
        setReadDir();
 8001d22:	f7fe fd21 	bl	8000768 <setReadDir>
        if (_lcd_capable & READ_NODUMMY) {
 8001d26:	4b3a      	ldr	r3, [pc, #232]	; (8001e10 <readGRAM+0x254>)
 8001d28:	881b      	ldrh	r3, [r3, #0]
 8001d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f040 813e 	bne.w	8001fb0 <readGRAM+0x3f4>
            ;
        } else if ((_lcd_capable & MIPI_DCS_REV1) || _lcd_ID == 0x1289) {
 8001d34:	4b36      	ldr	r3, [pc, #216]	; (8001e10 <readGRAM+0x254>)
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d105      	bne.n	8001d4c <readGRAM+0x190>
 8001d40:	4b34      	ldr	r3, [pc, #208]	; (8001e14 <readGRAM+0x258>)
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	f241 2289 	movw	r2, #4745	; 0x1289
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d16f      	bne.n	8001e2c <readGRAM+0x270>
            READ_8(r);
 8001d4c:	2110      	movs	r1, #16
 8001d4e:	4834      	ldr	r0, [pc, #208]	; (8001e20 <readGRAM+0x264>)
 8001d50:	f7fe fbe9 	bl	8000526 <PIN_HIGH>
 8001d54:	2110      	movs	r1, #16
 8001d56:	4832      	ldr	r0, [pc, #200]	; (8001e20 <readGRAM+0x264>)
 8001d58:	f7fe fbd5 	bl	8000506 <PIN_LOW>
 8001d5c:	2110      	movs	r1, #16
 8001d5e:	4830      	ldr	r0, [pc, #192]	; (8001e20 <readGRAM+0x264>)
 8001d60:	f7fe fbd1 	bl	8000506 <PIN_LOW>
 8001d64:	2110      	movs	r1, #16
 8001d66:	482e      	ldr	r0, [pc, #184]	; (8001e20 <readGRAM+0x264>)
 8001d68:	f7fe fbcd 	bl	8000506 <PIN_LOW>
 8001d6c:	2110      	movs	r1, #16
 8001d6e:	482c      	ldr	r0, [pc, #176]	; (8001e20 <readGRAM+0x264>)
 8001d70:	f7fe fbc9 	bl	8000506 <PIN_LOW>
 8001d74:	4b2c      	ldr	r3, [pc, #176]	; (8001e28 <readGRAM+0x26c>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	4b29      	ldr	r3, [pc, #164]	; (8001e28 <readGRAM+0x26c>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	4b23      	ldr	r3, [pc, #140]	; (8001e20 <readGRAM+0x264>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	0b5b      	lsrs	r3, r3, #13
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	4b21      	ldr	r3, [pc, #132]	; (8001e28 <readGRAM+0x26c>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	f003 0308 	and.w	r3, r3, #8
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	4313      	orrs	r3, r2
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	4b1d      	ldr	r3, [pc, #116]	; (8001e28 <readGRAM+0x26c>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	f003 0310 	and.w	r3, r3, #16
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	4b19      	ldr	r3, [pc, #100]	; (8001e28 <readGRAM+0x26c>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	f003 0320 	and.w	r3, r3, #32
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <readGRAM+0x26c>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	4313      	orrs	r3, r2
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <readGRAM+0x264>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	4313      	orrs	r3, r2
 8001df4:	75fb      	strb	r3, [r7, #23]
 8001df6:	2110      	movs	r1, #16
 8001df8:	4809      	ldr	r0, [pc, #36]	; (8001e20 <readGRAM+0x264>)
 8001dfa:	f7fe fb94 	bl	8000526 <PIN_HIGH>
 8001dfe:	2110      	movs	r1, #16
 8001e00:	4807      	ldr	r0, [pc, #28]	; (8001e20 <readGRAM+0x264>)
 8001e02:	f7fe fb90 	bl	8000526 <PIN_HIGH>
 8001e06:	e0d3      	b.n	8001fb0 <readGRAM+0x3f4>
 8001e08:	20000098 	.word	0x20000098
 8001e0c:	20000083 	.word	0x20000083
 8001e10:	2000008c 	.word	0x2000008c
 8001e14:	2000008e 	.word	0x2000008e
 8001e18:	20000094 	.word	0x20000094
 8001e1c:	20000096 	.word	0x20000096
 8001e20:	40010800 	.word	0x40010800
 8001e24:	80200000 	.word	0x80200000
 8001e28:	40010c00 	.word	0x40010c00
        } else {
            READ_16(dummy);
 8001e2c:	2110      	movs	r1, #16
 8001e2e:	4893      	ldr	r0, [pc, #588]	; (800207c <readGRAM+0x4c0>)
 8001e30:	f7fe fb79 	bl	8000526 <PIN_HIGH>
 8001e34:	2110      	movs	r1, #16
 8001e36:	4891      	ldr	r0, [pc, #580]	; (800207c <readGRAM+0x4c0>)
 8001e38:	f7fe fb65 	bl	8000506 <PIN_LOW>
 8001e3c:	2110      	movs	r1, #16
 8001e3e:	488f      	ldr	r0, [pc, #572]	; (800207c <readGRAM+0x4c0>)
 8001e40:	f7fe fb61 	bl	8000506 <PIN_LOW>
 8001e44:	2110      	movs	r1, #16
 8001e46:	488d      	ldr	r0, [pc, #564]	; (800207c <readGRAM+0x4c0>)
 8001e48:	f7fe fb5d 	bl	8000506 <PIN_LOW>
 8001e4c:	2110      	movs	r1, #16
 8001e4e:	488b      	ldr	r0, [pc, #556]	; (800207c <readGRAM+0x4c0>)
 8001e50:	f7fe fb59 	bl	8000506 <PIN_LOW>
 8001e54:	4b8a      	ldr	r3, [pc, #552]	; (8002080 <readGRAM+0x4c4>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	4b87      	ldr	r3, [pc, #540]	; (8002080 <readGRAM+0x4c4>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	b2da      	uxtb	r2, r3
 8001e70:	4b82      	ldr	r3, [pc, #520]	; (800207c <readGRAM+0x4c0>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	0b5b      	lsrs	r3, r3, #13
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	b2da      	uxtb	r2, r3
 8001e82:	4b7f      	ldr	r3, [pc, #508]	; (8002080 <readGRAM+0x4c4>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	f003 0308 	and.w	r3, r3, #8
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	4b7b      	ldr	r3, [pc, #492]	; (8002080 <readGRAM+0x4c4>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	f003 0310 	and.w	r3, r3, #16
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	4b77      	ldr	r3, [pc, #476]	; (8002080 <readGRAM+0x4c4>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	f003 0320 	and.w	r3, r3, #32
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	4b73      	ldr	r3, [pc, #460]	; (8002080 <readGRAM+0x4c4>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	4b6e      	ldr	r3, [pc, #440]	; (800207c <readGRAM+0x4c0>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	76fb      	strb	r3, [r7, #27]
 8001ed6:	2110      	movs	r1, #16
 8001ed8:	4868      	ldr	r0, [pc, #416]	; (800207c <readGRAM+0x4c0>)
 8001eda:	f7fe fb24 	bl	8000526 <PIN_HIGH>
 8001ede:	2110      	movs	r1, #16
 8001ee0:	4866      	ldr	r0, [pc, #408]	; (800207c <readGRAM+0x4c0>)
 8001ee2:	f7fe fb20 	bl	8000526 <PIN_HIGH>
 8001ee6:	2110      	movs	r1, #16
 8001ee8:	4864      	ldr	r0, [pc, #400]	; (800207c <readGRAM+0x4c0>)
 8001eea:	f7fe fb1c 	bl	8000526 <PIN_HIGH>
 8001eee:	2110      	movs	r1, #16
 8001ef0:	4862      	ldr	r0, [pc, #392]	; (800207c <readGRAM+0x4c0>)
 8001ef2:	f7fe fb08 	bl	8000506 <PIN_LOW>
 8001ef6:	2110      	movs	r1, #16
 8001ef8:	4860      	ldr	r0, [pc, #384]	; (800207c <readGRAM+0x4c0>)
 8001efa:	f7fe fb04 	bl	8000506 <PIN_LOW>
 8001efe:	2110      	movs	r1, #16
 8001f00:	485e      	ldr	r0, [pc, #376]	; (800207c <readGRAM+0x4c0>)
 8001f02:	f7fe fb00 	bl	8000506 <PIN_LOW>
 8001f06:	2110      	movs	r1, #16
 8001f08:	485c      	ldr	r0, [pc, #368]	; (800207c <readGRAM+0x4c0>)
 8001f0a:	f7fe fafc 	bl	8000506 <PIN_LOW>
 8001f0e:	4b5c      	ldr	r3, [pc, #368]	; (8002080 <readGRAM+0x4c4>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	4b59      	ldr	r3, [pc, #356]	; (8002080 <readGRAM+0x4c4>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	4313      	orrs	r3, r2
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	4b54      	ldr	r3, [pc, #336]	; (800207c <readGRAM+0x4c0>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	0b5b      	lsrs	r3, r3, #13
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	f003 0304 	and.w	r3, r3, #4
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	4b50      	ldr	r3, [pc, #320]	; (8002080 <readGRAM+0x4c4>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	f003 0308 	and.w	r3, r3, #8
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	4b4c      	ldr	r3, [pc, #304]	; (8002080 <readGRAM+0x4c4>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	f003 0310 	and.w	r3, r3, #16
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	4b48      	ldr	r3, [pc, #288]	; (8002080 <readGRAM+0x4c4>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	f003 0320 	and.w	r3, r3, #32
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	4b44      	ldr	r3, [pc, #272]	; (8002080 <readGRAM+0x4c4>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	4b3f      	ldr	r3, [pc, #252]	; (800207c <readGRAM+0x4c0>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	833b      	strh	r3, [r7, #24]
 8001f90:	2110      	movs	r1, #16
 8001f92:	483a      	ldr	r0, [pc, #232]	; (800207c <readGRAM+0x4c0>)
 8001f94:	f7fe fac7 	bl	8000526 <PIN_HIGH>
 8001f98:	2110      	movs	r1, #16
 8001f9a:	4838      	ldr	r0, [pc, #224]	; (800207c <readGRAM+0x4c0>)
 8001f9c:	f7fe fac3 	bl	8000526 <PIN_HIGH>
 8001fa0:	7efb      	ldrb	r3, [r7, #27]
 8001fa2:	021b      	lsls	r3, r3, #8
 8001fa4:	b21a      	sxth	r2, r3
 8001fa6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	b21b      	sxth	r3, r3
 8001fae:	833b      	strh	r3, [r7, #24]
        }
		if (_lcd_ID == 0x1511) READ_8(r);   //extra dummy for R61511
 8001fb0:	4b34      	ldr	r3, [pc, #208]	; (8002084 <readGRAM+0x4c8>)
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	f241 5211 	movw	r2, #5393	; 0x1511
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	f040 82a5 	bne.w	8002508 <readGRAM+0x94c>
 8001fbe:	2110      	movs	r1, #16
 8001fc0:	482e      	ldr	r0, [pc, #184]	; (800207c <readGRAM+0x4c0>)
 8001fc2:	f7fe fab0 	bl	8000526 <PIN_HIGH>
 8001fc6:	2110      	movs	r1, #16
 8001fc8:	482c      	ldr	r0, [pc, #176]	; (800207c <readGRAM+0x4c0>)
 8001fca:	f7fe fa9c 	bl	8000506 <PIN_LOW>
 8001fce:	2110      	movs	r1, #16
 8001fd0:	482a      	ldr	r0, [pc, #168]	; (800207c <readGRAM+0x4c0>)
 8001fd2:	f7fe fa98 	bl	8000506 <PIN_LOW>
 8001fd6:	2110      	movs	r1, #16
 8001fd8:	4828      	ldr	r0, [pc, #160]	; (800207c <readGRAM+0x4c0>)
 8001fda:	f7fe fa94 	bl	8000506 <PIN_LOW>
 8001fde:	2110      	movs	r1, #16
 8001fe0:	4826      	ldr	r0, [pc, #152]	; (800207c <readGRAM+0x4c0>)
 8001fe2:	f7fe fa90 	bl	8000506 <PIN_LOW>
 8001fe6:	4b26      	ldr	r3, [pc, #152]	; (8002080 <readGRAM+0x4c4>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	4b23      	ldr	r3, [pc, #140]	; (8002080 <readGRAM+0x4c4>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	4313      	orrs	r3, r2
 8002000:	b2da      	uxtb	r2, r3
 8002002:	4b1e      	ldr	r3, [pc, #120]	; (800207c <readGRAM+0x4c0>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	0b5b      	lsrs	r3, r3, #13
 8002008:	b2db      	uxtb	r3, r3
 800200a:	f003 0304 	and.w	r3, r3, #4
 800200e:	b2db      	uxtb	r3, r3
 8002010:	4313      	orrs	r3, r2
 8002012:	b2da      	uxtb	r2, r3
 8002014:	4b1a      	ldr	r3, [pc, #104]	; (8002080 <readGRAM+0x4c4>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	b2db      	uxtb	r3, r3
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	b2db      	uxtb	r3, r3
 8002020:	4313      	orrs	r3, r2
 8002022:	b2da      	uxtb	r2, r3
 8002024:	4b16      	ldr	r3, [pc, #88]	; (8002080 <readGRAM+0x4c4>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	b2db      	uxtb	r3, r3
 800202a:	f003 0310 	and.w	r3, r3, #16
 800202e:	b2db      	uxtb	r3, r3
 8002030:	4313      	orrs	r3, r2
 8002032:	b2da      	uxtb	r2, r3
 8002034:	4b12      	ldr	r3, [pc, #72]	; (8002080 <readGRAM+0x4c4>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	b2db      	uxtb	r3, r3
 800203a:	f003 0320 	and.w	r3, r3, #32
 800203e:	b2db      	uxtb	r3, r3
 8002040:	4313      	orrs	r3, r2
 8002042:	b2da      	uxtb	r2, r3
 8002044:	4b0e      	ldr	r3, [pc, #56]	; (8002080 <readGRAM+0x4c4>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	b2db      	uxtb	r3, r3
 800204a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800204e:	b2db      	uxtb	r3, r3
 8002050:	4313      	orrs	r3, r2
 8002052:	b2da      	uxtb	r2, r3
 8002054:	4b09      	ldr	r3, [pc, #36]	; (800207c <readGRAM+0x4c0>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	b2db      	uxtb	r3, r3
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	b2db      	uxtb	r3, r3
 800205e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002062:	b2db      	uxtb	r3, r3
 8002064:	4313      	orrs	r3, r2
 8002066:	75fb      	strb	r3, [r7, #23]
 8002068:	2110      	movs	r1, #16
 800206a:	4804      	ldr	r0, [pc, #16]	; (800207c <readGRAM+0x4c0>)
 800206c:	f7fe fa5b 	bl	8000526 <PIN_HIGH>
 8002070:	2110      	movs	r1, #16
 8002072:	4802      	ldr	r0, [pc, #8]	; (800207c <readGRAM+0x4c0>)
 8002074:	f7fe fa57 	bl	8000526 <PIN_HIGH>
        while (n)
 8002078:	e246      	b.n	8002508 <readGRAM+0x94c>
 800207a:	bf00      	nop
 800207c:	40010800 	.word	0x40010800
 8002080:	40010c00 	.word	0x40010c00
 8002084:	2000008e 	.word	0x2000008e
        {
            if (_lcd_capable & READ_24BITS)
 8002088:	4b9a      	ldr	r3, [pc, #616]	; (80022f4 <readGRAM+0x738>)
 800208a:	881b      	ldrh	r3, [r3, #0]
 800208c:	f003 0310 	and.w	r3, r3, #16
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 8135 	beq.w	8002300 <readGRAM+0x744>
            {
                READ_8(r);
 8002096:	2110      	movs	r1, #16
 8002098:	4897      	ldr	r0, [pc, #604]	; (80022f8 <readGRAM+0x73c>)
 800209a:	f7fe fa44 	bl	8000526 <PIN_HIGH>
 800209e:	2110      	movs	r1, #16
 80020a0:	4895      	ldr	r0, [pc, #596]	; (80022f8 <readGRAM+0x73c>)
 80020a2:	f7fe fa30 	bl	8000506 <PIN_LOW>
 80020a6:	2110      	movs	r1, #16
 80020a8:	4893      	ldr	r0, [pc, #588]	; (80022f8 <readGRAM+0x73c>)
 80020aa:	f7fe fa2c 	bl	8000506 <PIN_LOW>
 80020ae:	2110      	movs	r1, #16
 80020b0:	4891      	ldr	r0, [pc, #580]	; (80022f8 <readGRAM+0x73c>)
 80020b2:	f7fe fa28 	bl	8000506 <PIN_LOW>
 80020b6:	2110      	movs	r1, #16
 80020b8:	488f      	ldr	r0, [pc, #572]	; (80022f8 <readGRAM+0x73c>)
 80020ba:	f7fe fa24 	bl	8000506 <PIN_LOW>
 80020be:	4b8f      	ldr	r3, [pc, #572]	; (80022fc <readGRAM+0x740>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	4b8c      	ldr	r3, [pc, #560]	; (80022fc <readGRAM+0x740>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	4313      	orrs	r3, r2
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	4b87      	ldr	r3, [pc, #540]	; (80022f8 <readGRAM+0x73c>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	0b5b      	lsrs	r3, r3, #13
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	f003 0304 	and.w	r3, r3, #4
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	4313      	orrs	r3, r2
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	4b83      	ldr	r3, [pc, #524]	; (80022fc <readGRAM+0x740>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	f003 0308 	and.w	r3, r3, #8
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	4313      	orrs	r3, r2
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	4b7f      	ldr	r3, [pc, #508]	; (80022fc <readGRAM+0x740>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	b2db      	uxtb	r3, r3
 8002102:	f003 0310 	and.w	r3, r3, #16
 8002106:	b2db      	uxtb	r3, r3
 8002108:	4313      	orrs	r3, r2
 800210a:	b2da      	uxtb	r2, r3
 800210c:	4b7b      	ldr	r3, [pc, #492]	; (80022fc <readGRAM+0x740>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	b2db      	uxtb	r3, r3
 8002112:	f003 0320 	and.w	r3, r3, #32
 8002116:	b2db      	uxtb	r3, r3
 8002118:	4313      	orrs	r3, r2
 800211a:	b2da      	uxtb	r2, r3
 800211c:	4b77      	ldr	r3, [pc, #476]	; (80022fc <readGRAM+0x740>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	b2db      	uxtb	r3, r3
 8002122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002126:	b2db      	uxtb	r3, r3
 8002128:	4313      	orrs	r3, r2
 800212a:	b2da      	uxtb	r2, r3
 800212c:	4b72      	ldr	r3, [pc, #456]	; (80022f8 <readGRAM+0x73c>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	b2db      	uxtb	r3, r3
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	b2db      	uxtb	r3, r3
 8002136:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800213a:	b2db      	uxtb	r3, r3
 800213c:	4313      	orrs	r3, r2
 800213e:	75fb      	strb	r3, [r7, #23]
 8002140:	2110      	movs	r1, #16
 8002142:	486d      	ldr	r0, [pc, #436]	; (80022f8 <readGRAM+0x73c>)
 8002144:	f7fe f9ef 	bl	8000526 <PIN_HIGH>
 8002148:	2110      	movs	r1, #16
 800214a:	486b      	ldr	r0, [pc, #428]	; (80022f8 <readGRAM+0x73c>)
 800214c:	f7fe f9eb 	bl	8000526 <PIN_HIGH>
                READ_8(g);
 8002150:	2110      	movs	r1, #16
 8002152:	4869      	ldr	r0, [pc, #420]	; (80022f8 <readGRAM+0x73c>)
 8002154:	f7fe f9e7 	bl	8000526 <PIN_HIGH>
 8002158:	2110      	movs	r1, #16
 800215a:	4867      	ldr	r0, [pc, #412]	; (80022f8 <readGRAM+0x73c>)
 800215c:	f7fe f9d3 	bl	8000506 <PIN_LOW>
 8002160:	2110      	movs	r1, #16
 8002162:	4865      	ldr	r0, [pc, #404]	; (80022f8 <readGRAM+0x73c>)
 8002164:	f7fe f9cf 	bl	8000506 <PIN_LOW>
 8002168:	2110      	movs	r1, #16
 800216a:	4863      	ldr	r0, [pc, #396]	; (80022f8 <readGRAM+0x73c>)
 800216c:	f7fe f9cb 	bl	8000506 <PIN_LOW>
 8002170:	2110      	movs	r1, #16
 8002172:	4861      	ldr	r0, [pc, #388]	; (80022f8 <readGRAM+0x73c>)
 8002174:	f7fe f9c7 	bl	8000506 <PIN_LOW>
 8002178:	4b60      	ldr	r3, [pc, #384]	; (80022fc <readGRAM+0x740>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	b2db      	uxtb	r3, r3
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	b2da      	uxtb	r2, r3
 8002184:	4b5d      	ldr	r3, [pc, #372]	; (80022fc <readGRAM+0x740>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	b2db      	uxtb	r3, r3
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	b2db      	uxtb	r3, r3
 8002190:	4313      	orrs	r3, r2
 8002192:	b2da      	uxtb	r2, r3
 8002194:	4b58      	ldr	r3, [pc, #352]	; (80022f8 <readGRAM+0x73c>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	0b5b      	lsrs	r3, r3, #13
 800219a:	b2db      	uxtb	r3, r3
 800219c:	f003 0304 	and.w	r3, r3, #4
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	4313      	orrs	r3, r2
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	4b55      	ldr	r3, [pc, #340]	; (80022fc <readGRAM+0x740>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	f003 0308 	and.w	r3, r3, #8
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	4313      	orrs	r3, r2
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	4b51      	ldr	r3, [pc, #324]	; (80022fc <readGRAM+0x740>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	f003 0310 	and.w	r3, r3, #16
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	4313      	orrs	r3, r2
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	4b4d      	ldr	r3, [pc, #308]	; (80022fc <readGRAM+0x740>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	f003 0320 	and.w	r3, r3, #32
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	4313      	orrs	r3, r2
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	4b49      	ldr	r3, [pc, #292]	; (80022fc <readGRAM+0x740>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	4313      	orrs	r3, r2
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	4b44      	ldr	r3, [pc, #272]	; (80022f8 <readGRAM+0x73c>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	4313      	orrs	r3, r2
 80021f8:	757b      	strb	r3, [r7, #21]
 80021fa:	2110      	movs	r1, #16
 80021fc:	483e      	ldr	r0, [pc, #248]	; (80022f8 <readGRAM+0x73c>)
 80021fe:	f7fe f992 	bl	8000526 <PIN_HIGH>
 8002202:	2110      	movs	r1, #16
 8002204:	483c      	ldr	r0, [pc, #240]	; (80022f8 <readGRAM+0x73c>)
 8002206:	f7fe f98e 	bl	8000526 <PIN_HIGH>
                READ_8(b);
 800220a:	2110      	movs	r1, #16
 800220c:	483a      	ldr	r0, [pc, #232]	; (80022f8 <readGRAM+0x73c>)
 800220e:	f7fe f98a 	bl	8000526 <PIN_HIGH>
 8002212:	2110      	movs	r1, #16
 8002214:	4838      	ldr	r0, [pc, #224]	; (80022f8 <readGRAM+0x73c>)
 8002216:	f7fe f976 	bl	8000506 <PIN_LOW>
 800221a:	2110      	movs	r1, #16
 800221c:	4836      	ldr	r0, [pc, #216]	; (80022f8 <readGRAM+0x73c>)
 800221e:	f7fe f972 	bl	8000506 <PIN_LOW>
 8002222:	2110      	movs	r1, #16
 8002224:	4834      	ldr	r0, [pc, #208]	; (80022f8 <readGRAM+0x73c>)
 8002226:	f7fe f96e 	bl	8000506 <PIN_LOW>
 800222a:	2110      	movs	r1, #16
 800222c:	4832      	ldr	r0, [pc, #200]	; (80022f8 <readGRAM+0x73c>)
 800222e:	f7fe f96a 	bl	8000506 <PIN_LOW>
 8002232:	4b32      	ldr	r3, [pc, #200]	; (80022fc <readGRAM+0x740>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	b2db      	uxtb	r3, r3
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	b2da      	uxtb	r2, r3
 800223e:	4b2f      	ldr	r3, [pc, #188]	; (80022fc <readGRAM+0x740>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	b2db      	uxtb	r3, r3
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	b2db      	uxtb	r3, r3
 800224a:	4313      	orrs	r3, r2
 800224c:	b2da      	uxtb	r2, r3
 800224e:	4b2a      	ldr	r3, [pc, #168]	; (80022f8 <readGRAM+0x73c>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	0b5b      	lsrs	r3, r3, #13
 8002254:	b2db      	uxtb	r3, r3
 8002256:	f003 0304 	and.w	r3, r3, #4
 800225a:	b2db      	uxtb	r3, r3
 800225c:	4313      	orrs	r3, r2
 800225e:	b2da      	uxtb	r2, r3
 8002260:	4b26      	ldr	r3, [pc, #152]	; (80022fc <readGRAM+0x740>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	b2db      	uxtb	r3, r3
 8002266:	f003 0308 	and.w	r3, r3, #8
 800226a:	b2db      	uxtb	r3, r3
 800226c:	4313      	orrs	r3, r2
 800226e:	b2da      	uxtb	r2, r3
 8002270:	4b22      	ldr	r3, [pc, #136]	; (80022fc <readGRAM+0x740>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	b2db      	uxtb	r3, r3
 8002276:	f003 0310 	and.w	r3, r3, #16
 800227a:	b2db      	uxtb	r3, r3
 800227c:	4313      	orrs	r3, r2
 800227e:	b2da      	uxtb	r2, r3
 8002280:	4b1e      	ldr	r3, [pc, #120]	; (80022fc <readGRAM+0x740>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	b2db      	uxtb	r3, r3
 8002286:	f003 0320 	and.w	r3, r3, #32
 800228a:	b2db      	uxtb	r3, r3
 800228c:	4313      	orrs	r3, r2
 800228e:	b2da      	uxtb	r2, r3
 8002290:	4b1a      	ldr	r3, [pc, #104]	; (80022fc <readGRAM+0x740>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	b2db      	uxtb	r3, r3
 8002296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800229a:	b2db      	uxtb	r3, r3
 800229c:	4313      	orrs	r3, r2
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	4b15      	ldr	r3, [pc, #84]	; (80022f8 <readGRAM+0x73c>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	4313      	orrs	r3, r2
 80022b2:	753b      	strb	r3, [r7, #20]
 80022b4:	2110      	movs	r1, #16
 80022b6:	4810      	ldr	r0, [pc, #64]	; (80022f8 <readGRAM+0x73c>)
 80022b8:	f7fe f935 	bl	8000526 <PIN_HIGH>
 80022bc:	2110      	movs	r1, #16
 80022be:	480e      	ldr	r0, [pc, #56]	; (80022f8 <readGRAM+0x73c>)
 80022c0:	f7fe f931 	bl	8000526 <PIN_HIGH>
                if (_lcd_capable & READ_BGR)
 80022c4:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <readGRAM+0x738>)
 80022c6:	881b      	ldrh	r3, [r3, #0]
 80022c8:	f003 0304 	and.w	r3, r3, #4
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d008      	beq.n	80022e2 <readGRAM+0x726>
                    ret = color565(b, g, r);
 80022d0:	7dfa      	ldrb	r2, [r7, #23]
 80022d2:	7d79      	ldrb	r1, [r7, #21]
 80022d4:	7d3b      	ldrb	r3, [r7, #20]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fe f9e4 	bl	80006a4 <color565>
 80022dc:	4603      	mov	r3, r0
 80022de:	84fb      	strh	r3, [r7, #38]	; 0x26
 80022e0:	e0f7      	b.n	80024d2 <readGRAM+0x916>
                else
                    ret = color565(r, g, b);
 80022e2:	7d3a      	ldrb	r2, [r7, #20]
 80022e4:	7d79      	ldrb	r1, [r7, #21]
 80022e6:	7dfb      	ldrb	r3, [r7, #23]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7fe f9db 	bl	80006a4 <color565>
 80022ee:	4603      	mov	r3, r0
 80022f0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80022f2:	e0ee      	b.n	80024d2 <readGRAM+0x916>
 80022f4:	2000008c 	.word	0x2000008c
 80022f8:	40010800 	.word	0x40010800
 80022fc:	40010c00 	.word	0x40010c00
            } else
            {
                READ_16(ret);
 8002300:	2110      	movs	r1, #16
 8002302:	48a6      	ldr	r0, [pc, #664]	; (800259c <readGRAM+0x9e0>)
 8002304:	f7fe f90f 	bl	8000526 <PIN_HIGH>
 8002308:	2110      	movs	r1, #16
 800230a:	48a4      	ldr	r0, [pc, #656]	; (800259c <readGRAM+0x9e0>)
 800230c:	f7fe f8fb 	bl	8000506 <PIN_LOW>
 8002310:	2110      	movs	r1, #16
 8002312:	48a2      	ldr	r0, [pc, #648]	; (800259c <readGRAM+0x9e0>)
 8002314:	f7fe f8f7 	bl	8000506 <PIN_LOW>
 8002318:	2110      	movs	r1, #16
 800231a:	48a0      	ldr	r0, [pc, #640]	; (800259c <readGRAM+0x9e0>)
 800231c:	f7fe f8f3 	bl	8000506 <PIN_LOW>
 8002320:	2110      	movs	r1, #16
 8002322:	489e      	ldr	r0, [pc, #632]	; (800259c <readGRAM+0x9e0>)
 8002324:	f7fe f8ef 	bl	8000506 <PIN_LOW>
 8002328:	4b9d      	ldr	r3, [pc, #628]	; (80025a0 <readGRAM+0x9e4>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	b2db      	uxtb	r3, r3
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	b2da      	uxtb	r2, r3
 8002334:	4b9a      	ldr	r3, [pc, #616]	; (80025a0 <readGRAM+0x9e4>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	b2db      	uxtb	r3, r3
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	b2db      	uxtb	r3, r3
 8002340:	4313      	orrs	r3, r2
 8002342:	b2da      	uxtb	r2, r3
 8002344:	4b95      	ldr	r3, [pc, #596]	; (800259c <readGRAM+0x9e0>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	0b5b      	lsrs	r3, r3, #13
 800234a:	b2db      	uxtb	r3, r3
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	b2db      	uxtb	r3, r3
 8002352:	4313      	orrs	r3, r2
 8002354:	b2da      	uxtb	r2, r3
 8002356:	4b92      	ldr	r3, [pc, #584]	; (80025a0 <readGRAM+0x9e4>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	b2db      	uxtb	r3, r3
 800235c:	f003 0308 	and.w	r3, r3, #8
 8002360:	b2db      	uxtb	r3, r3
 8002362:	4313      	orrs	r3, r2
 8002364:	b2da      	uxtb	r2, r3
 8002366:	4b8e      	ldr	r3, [pc, #568]	; (80025a0 <readGRAM+0x9e4>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	b2db      	uxtb	r3, r3
 800236c:	f003 0310 	and.w	r3, r3, #16
 8002370:	b2db      	uxtb	r3, r3
 8002372:	4313      	orrs	r3, r2
 8002374:	b2da      	uxtb	r2, r3
 8002376:	4b8a      	ldr	r3, [pc, #552]	; (80025a0 <readGRAM+0x9e4>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	b2db      	uxtb	r3, r3
 800237c:	f003 0320 	and.w	r3, r3, #32
 8002380:	b2db      	uxtb	r3, r3
 8002382:	4313      	orrs	r3, r2
 8002384:	b2da      	uxtb	r2, r3
 8002386:	4b86      	ldr	r3, [pc, #536]	; (80025a0 <readGRAM+0x9e4>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	b2db      	uxtb	r3, r3
 800238c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002390:	b2db      	uxtb	r3, r3
 8002392:	4313      	orrs	r3, r2
 8002394:	b2da      	uxtb	r2, r3
 8002396:	4b81      	ldr	r3, [pc, #516]	; (800259c <readGRAM+0x9e0>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	b2db      	uxtb	r3, r3
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	4313      	orrs	r3, r2
 80023a8:	75bb      	strb	r3, [r7, #22]
 80023aa:	2110      	movs	r1, #16
 80023ac:	487b      	ldr	r0, [pc, #492]	; (800259c <readGRAM+0x9e0>)
 80023ae:	f7fe f8ba 	bl	8000526 <PIN_HIGH>
 80023b2:	2110      	movs	r1, #16
 80023b4:	4879      	ldr	r0, [pc, #484]	; (800259c <readGRAM+0x9e0>)
 80023b6:	f7fe f8b6 	bl	8000526 <PIN_HIGH>
 80023ba:	2110      	movs	r1, #16
 80023bc:	4877      	ldr	r0, [pc, #476]	; (800259c <readGRAM+0x9e0>)
 80023be:	f7fe f8b2 	bl	8000526 <PIN_HIGH>
 80023c2:	2110      	movs	r1, #16
 80023c4:	4875      	ldr	r0, [pc, #468]	; (800259c <readGRAM+0x9e0>)
 80023c6:	f7fe f89e 	bl	8000506 <PIN_LOW>
 80023ca:	2110      	movs	r1, #16
 80023cc:	4873      	ldr	r0, [pc, #460]	; (800259c <readGRAM+0x9e0>)
 80023ce:	f7fe f89a 	bl	8000506 <PIN_LOW>
 80023d2:	2110      	movs	r1, #16
 80023d4:	4871      	ldr	r0, [pc, #452]	; (800259c <readGRAM+0x9e0>)
 80023d6:	f7fe f896 	bl	8000506 <PIN_LOW>
 80023da:	2110      	movs	r1, #16
 80023dc:	486f      	ldr	r0, [pc, #444]	; (800259c <readGRAM+0x9e0>)
 80023de:	f7fe f892 	bl	8000506 <PIN_LOW>
 80023e2:	4b6f      	ldr	r3, [pc, #444]	; (80025a0 <readGRAM+0x9e4>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	4b6c      	ldr	r3, [pc, #432]	; (80025a0 <readGRAM+0x9e4>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	4313      	orrs	r3, r2
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	4b67      	ldr	r3, [pc, #412]	; (800259c <readGRAM+0x9e0>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	0b5b      	lsrs	r3, r3, #13
 8002404:	b29b      	uxth	r3, r3
 8002406:	f003 0304 	and.w	r3, r3, #4
 800240a:	b29b      	uxth	r3, r3
 800240c:	4313      	orrs	r3, r2
 800240e:	b29a      	uxth	r2, r3
 8002410:	4b63      	ldr	r3, [pc, #396]	; (80025a0 <readGRAM+0x9e4>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	b29b      	uxth	r3, r3
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	b29b      	uxth	r3, r3
 800241c:	4313      	orrs	r3, r2
 800241e:	b29a      	uxth	r2, r3
 8002420:	4b5f      	ldr	r3, [pc, #380]	; (80025a0 <readGRAM+0x9e4>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	b29b      	uxth	r3, r3
 8002426:	f003 0310 	and.w	r3, r3, #16
 800242a:	b29b      	uxth	r3, r3
 800242c:	4313      	orrs	r3, r2
 800242e:	b29a      	uxth	r2, r3
 8002430:	4b5b      	ldr	r3, [pc, #364]	; (80025a0 <readGRAM+0x9e4>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	b29b      	uxth	r3, r3
 8002436:	f003 0320 	and.w	r3, r3, #32
 800243a:	b29b      	uxth	r3, r3
 800243c:	4313      	orrs	r3, r2
 800243e:	b29a      	uxth	r2, r3
 8002440:	4b57      	ldr	r3, [pc, #348]	; (80025a0 <readGRAM+0x9e4>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	b29b      	uxth	r3, r3
 8002446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800244a:	b29b      	uxth	r3, r3
 800244c:	4313      	orrs	r3, r2
 800244e:	b29a      	uxth	r2, r3
 8002450:	4b52      	ldr	r3, [pc, #328]	; (800259c <readGRAM+0x9e0>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	b29b      	uxth	r3, r3
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	b29b      	uxth	r3, r3
 800245a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800245e:	b29b      	uxth	r3, r3
 8002460:	4313      	orrs	r3, r2
 8002462:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002464:	2110      	movs	r1, #16
 8002466:	484d      	ldr	r0, [pc, #308]	; (800259c <readGRAM+0x9e0>)
 8002468:	f7fe f85d 	bl	8000526 <PIN_HIGH>
 800246c:	2110      	movs	r1, #16
 800246e:	484b      	ldr	r0, [pc, #300]	; (800259c <readGRAM+0x9e0>)
 8002470:	f7fe f859 	bl	8000526 <PIN_HIGH>
 8002474:	7dbb      	ldrb	r3, [r7, #22]
 8002476:	021b      	lsls	r3, r3, #8
 8002478:	b21a      	sxth	r2, r3
 800247a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800247e:	4313      	orrs	r3, r2
 8002480:	b21b      	sxth	r3, r3
 8002482:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (_lcd_capable & READ_LOWHIGH)
 8002484:	4b47      	ldr	r3, [pc, #284]	; (80025a4 <readGRAM+0x9e8>)
 8002486:	881b      	ldrh	r3, [r3, #0]
 8002488:	f003 0308 	and.w	r3, r3, #8
 800248c:	2b00      	cmp	r3, #0
 800248e:	d009      	beq.n	80024a4 <readGRAM+0x8e8>
                    ret = (ret >> 8) | (ret << 8);
 8002490:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002492:	0a1b      	lsrs	r3, r3, #8
 8002494:	b29b      	uxth	r3, r3
 8002496:	b21a      	sxth	r2, r3
 8002498:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800249a:	021b      	lsls	r3, r3, #8
 800249c:	b21b      	sxth	r3, r3
 800249e:	4313      	orrs	r3, r2
 80024a0:	b21b      	sxth	r3, r3
 80024a2:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (_lcd_capable & READ_BGR)
 80024a4:	4b3f      	ldr	r3, [pc, #252]	; (80025a4 <readGRAM+0x9e8>)
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d010      	beq.n	80024d2 <readGRAM+0x916>
                    ret = (ret & 0x07E0) | (ret >> 11) | (ret << 11);
 80024b0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80024b4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80024b8:	b21a      	sxth	r2, r3
 80024ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80024bc:	0adb      	lsrs	r3, r3, #11
 80024be:	b29b      	uxth	r3, r3
 80024c0:	b21b      	sxth	r3, r3
 80024c2:	4313      	orrs	r3, r2
 80024c4:	b21a      	sxth	r2, r3
 80024c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80024c8:	02db      	lsls	r3, r3, #11
 80024ca:	b21b      	sxth	r3, r3
 80024cc:	4313      	orrs	r3, r2
 80024ce:	b21b      	sxth	r3, r3
 80024d0:	84fb      	strh	r3, [r7, #38]	; 0x26
            }
#if defined(SUPPORT_9488_555)
    if (is555) ret = color555_to_565(ret);
 80024d2:	4b35      	ldr	r3, [pc, #212]	; (80025a8 <readGRAM+0x9ec>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d005      	beq.n	80024e6 <readGRAM+0x92a>
 80024da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fe f894 	bl	800060a <color555_to_565>
 80024e2:	4603      	mov	r3, r0
 80024e4:	84fb      	strh	r3, [r7, #38]	; 0x26
#endif
            *block++ = ret;
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	1c9a      	adds	r2, r3, #2
 80024ea:	60ba      	str	r2, [r7, #8]
 80024ec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80024ee:	801a      	strh	r2, [r3, #0]
            n--;
 80024f0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	3b01      	subs	r3, #1
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	847b      	strh	r3, [r7, #34]	; 0x22
            if (!(_lcd_capable & AUTO_READINC))
 80024fc:	4b29      	ldr	r3, [pc, #164]	; (80025a4 <readGRAM+0x9e8>)
 80024fe:	881b      	ldrh	r3, [r3, #0]
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d005      	beq.n	8002514 <readGRAM+0x958>
        while (n)
 8002508:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800250c:	2b00      	cmp	r3, #0
 800250e:	f47f adbb 	bne.w	8002088 <readGRAM+0x4cc>
 8002512:	e000      	b.n	8002516 <readGRAM+0x95a>
                break;
 8002514:	bf00      	nop
        }
        if (++col >= w) {
 8002516:	8bfb      	ldrh	r3, [r7, #30]
 8002518:	3301      	adds	r3, #1
 800251a:	b29b      	uxth	r3, r3
 800251c:	83fb      	strh	r3, [r7, #30]
 800251e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8002522:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002526:	429a      	cmp	r2, r3
 8002528:	db0d      	blt.n	8002546 <readGRAM+0x98a>
            col = 0;
 800252a:	2300      	movs	r3, #0
 800252c:	83fb      	strh	r3, [r7, #30]
            if (++row >= h)
 800252e:	8c3b      	ldrh	r3, [r7, #32]
 8002530:	3301      	adds	r3, #1
 8002532:	b29b      	uxth	r3, r3
 8002534:	843b      	strh	r3, [r7, #32]
 8002536:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800253a:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800253e:	429a      	cmp	r2, r3
 8002540:	db01      	blt.n	8002546 <readGRAM+0x98a>
                row = 0;
 8002542:	2300      	movs	r3, #0
 8002544:	843b      	strh	r3, [r7, #32]
        }
        RD_IDLE;
 8002546:	2110      	movs	r1, #16
 8002548:	4814      	ldr	r0, [pc, #80]	; (800259c <readGRAM+0x9e0>)
 800254a:	f7fd ffec 	bl	8000526 <PIN_HIGH>
        CS_IDLE;
 800254e:	2102      	movs	r1, #2
 8002550:	4812      	ldr	r0, [pc, #72]	; (800259c <readGRAM+0x9e0>)
 8002552:	f7fd ffe8 	bl	8000526 <PIN_HIGH>
        setWriteDir();
 8002556:	f7fe f931 	bl	80007bc <setWriteDir>
    while (n > 0) {
 800255a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800255e:	2b00      	cmp	r3, #0
 8002560:	f73f ab6f 	bgt.w	8001c42 <readGRAM+0x86>
    }
    if (!(_lcd_capable & MIPI_DCS_REV1))
 8002564:	4b0f      	ldr	r3, [pc, #60]	; (80025a4 <readGRAM+0x9e8>)
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b00      	cmp	r3, #0
 800256e:	d110      	bne.n	8002592 <readGRAM+0x9d6>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 8002570:	f7fe f818 	bl	80005a4 <width>
 8002574:	4603      	mov	r3, r0
 8002576:	3b01      	subs	r3, #1
 8002578:	b29b      	uxth	r3, r3
 800257a:	b21c      	sxth	r4, r3
 800257c:	f7fe f81c 	bl	80005b8 <height>
 8002580:	4603      	mov	r3, r0
 8002582:	3b01      	subs	r3, #1
 8002584:	b29b      	uxth	r3, r3
 8002586:	b21b      	sxth	r3, r3
 8002588:	4622      	mov	r2, r4
 800258a:	2100      	movs	r1, #0
 800258c:	2000      	movs	r0, #0
 800258e:	f000 fb4b 	bl	8002c28 <setAddrWindow>
    return 0;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	372c      	adds	r7, #44	; 0x2c
 8002598:	46bd      	mov	sp, r7
 800259a:	bd90      	pop	{r4, r7, pc}
 800259c:	40010800 	.word	0x40010800
 80025a0:	40010c00 	.word	0x40010c00
 80025a4:	2000008c 	.word	0x2000008c
 80025a8:	20000084 	.word	0x20000084

080025ac <setRotation>:

void setRotation(uint8_t r)
{
 80025ac:	b590      	push	{r4, r7, lr}
 80025ae:	b087      	sub	sp, #28
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	71fb      	strb	r3, [r7, #7]
   uint16_t GS, SS_v, ORG, REV = _lcd_rev;
 80025b6:	4b9c      	ldr	r3, [pc, #624]	; (8002828 <setRotation+0x27c>)
 80025b8:	881b      	ldrh	r3, [r3, #0]
 80025ba:	827b      	strh	r3, [r7, #18]
   uint8_t val, d[3];
   rotation = r & 3;           // just perform the operation ourselves on the protected variables
 80025bc:	79fb      	ldrb	r3, [r7, #7]
 80025be:	f003 0303 	and.w	r3, r3, #3
 80025c2:	b2da      	uxtb	r2, r3
 80025c4:	4b99      	ldr	r3, [pc, #612]	; (800282c <setRotation+0x280>)
 80025c6:	701a      	strb	r2, [r3, #0]
   _width = (rotation & 1) ? HEIGHT : WIDTH;
 80025c8:	4b98      	ldr	r3, [pc, #608]	; (800282c <setRotation+0x280>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d002      	beq.n	80025da <setRotation+0x2e>
 80025d4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80025d8:	e000      	b.n	80025dc <setRotation+0x30>
 80025da:	22f0      	movs	r2, #240	; 0xf0
 80025dc:	4b94      	ldr	r3, [pc, #592]	; (8002830 <setRotation+0x284>)
 80025de:	801a      	strh	r2, [r3, #0]
   _height = (rotation & 1) ? WIDTH : HEIGHT;
 80025e0:	4b92      	ldr	r3, [pc, #584]	; (800282c <setRotation+0x280>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <setRotation+0x44>
 80025ec:	22f0      	movs	r2, #240	; 0xf0
 80025ee:	e001      	b.n	80025f4 <setRotation+0x48>
 80025f0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80025f4:	4b8f      	ldr	r3, [pc, #572]	; (8002834 <setRotation+0x288>)
 80025f6:	801a      	strh	r2, [r3, #0]
   switch (rotation) {
 80025f8:	4b8c      	ldr	r3, [pc, #560]	; (800282c <setRotation+0x280>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2b03      	cmp	r3, #3
 80025fe:	d817      	bhi.n	8002630 <setRotation+0x84>
 8002600:	a201      	add	r2, pc, #4	; (adr r2, 8002608 <setRotation+0x5c>)
 8002602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002606:	bf00      	nop
 8002608:	08002619 	.word	0x08002619
 800260c:	0800261f 	.word	0x0800261f
 8002610:	08002625 	.word	0x08002625
 8002614:	0800262b 	.word	0x0800262b
   case 0:                    //PORTRAIT:
       val = 0x48;             //MY=0, MX=1, MV=0, ML=0, BGR=1
 8002618:	2348      	movs	r3, #72	; 0x48
 800261a:	72fb      	strb	r3, [r7, #11]
       break;
 800261c:	e008      	b.n	8002630 <setRotation+0x84>
   case 1:                    //LANDSCAPE: 90 degrees
       val = 0x28;             //MY=0, MX=0, MV=1, ML=0, BGR=1
 800261e:	2328      	movs	r3, #40	; 0x28
 8002620:	72fb      	strb	r3, [r7, #11]
       break;
 8002622:	e005      	b.n	8002630 <setRotation+0x84>
   case 2:                    //PORTRAIT_REV: 180 degrees
       val = 0x98;             //MY=1, MX=0, MV=0, ML=1, BGR=1
 8002624:	2398      	movs	r3, #152	; 0x98
 8002626:	72fb      	strb	r3, [r7, #11]
       break;
 8002628:	e002      	b.n	8002630 <setRotation+0x84>
   case 3:                    //LANDSCAPE_REV: 270 degrees
       val = 0xF8;             //MY=1, MX=1, MV=1, ML=1, BGR=1
 800262a:	23f8      	movs	r3, #248	; 0xf8
 800262c:	72fb      	strb	r3, [r7, #11]
       break;
 800262e:	bf00      	nop
   }
   if (_lcd_capable & INVERT_GS)
 8002630:	4b81      	ldr	r3, [pc, #516]	; (8002838 <setRotation+0x28c>)
 8002632:	881b      	ldrh	r3, [r3, #0]
 8002634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002638:	2b00      	cmp	r3, #0
 800263a:	d005      	beq.n	8002648 <setRotation+0x9c>
       val ^= 0x80;
 800263c:	7afb      	ldrb	r3, [r7, #11]
 800263e:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 8002642:	43db      	mvns	r3, r3
 8002644:	b2db      	uxtb	r3, r3
 8002646:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_SS)
 8002648:	4b7b      	ldr	r3, [pc, #492]	; (8002838 <setRotation+0x28c>)
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002650:	2b00      	cmp	r3, #0
 8002652:	d004      	beq.n	800265e <setRotation+0xb2>
       val ^= 0x40;
 8002654:	7afb      	ldrb	r3, [r7, #11]
 8002656:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 800265a:	b2db      	uxtb	r3, r3
 800265c:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_RGB)
 800265e:	4b76      	ldr	r3, [pc, #472]	; (8002838 <setRotation+0x28c>)
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002666:	2b00      	cmp	r3, #0
 8002668:	d004      	beq.n	8002674 <setRotation+0xc8>
       val ^= 0x08;
 800266a:	7afb      	ldrb	r3, [r7, #11]
 800266c:	f083 0308 	eor.w	r3, r3, #8
 8002670:	b2db      	uxtb	r3, r3
 8002672:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & MIPI_DCS_REV1) {
 8002674:	4b70      	ldr	r3, [pc, #448]	; (8002838 <setRotation+0x28c>)
 8002676:	881b      	ldrh	r3, [r3, #0]
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 8119 	beq.w	80028b4 <setRotation+0x308>
       if (_lcd_ID == 0x6814) {  //.kbv my weird 0x9486 might be 68140
 8002682:	4b6e      	ldr	r3, [pc, #440]	; (800283c <setRotation+0x290>)
 8002684:	881b      	ldrh	r3, [r3, #0]
 8002686:	f646 0214 	movw	r2, #26644	; 0x6814
 800268a:	4293      	cmp	r3, r2
 800268c:	d128      	bne.n	80026e0 <setRotation+0x134>
           GS = (val & 0x80) ? (1 << 6) : 0;   //MY
 800268e:	7afb      	ldrb	r3, [r7, #11]
 8002690:	b25b      	sxtb	r3, r3
 8002692:	105b      	asrs	r3, r3, #1
 8002694:	b25b      	sxtb	r3, r3
 8002696:	b29b      	uxth	r3, r3
 8002698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800269c:	823b      	strh	r3, [r7, #16]
           SS_v = (val & 0x40) ? (1 << 5) : 0;   //MX
 800269e:	7afb      	ldrb	r3, [r7, #11]
 80026a0:	105b      	asrs	r3, r3, #1
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	f003 0320 	and.w	r3, r3, #32
 80026a8:	81fb      	strh	r3, [r7, #14]
           val &= 0x28;        //keep MV, BGR, MY=0, MX=0, ML=0
 80026aa:	7afb      	ldrb	r3, [r7, #11]
 80026ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	72fb      	strb	r3, [r7, #11]
           d[0] = 0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	723b      	strb	r3, [r7, #8]
           d[1] = GS | SS_v | 0x02;      //MY, MX
 80026b8:	8a3b      	ldrh	r3, [r7, #16]
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	89fb      	ldrh	r3, [r7, #14]
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	4313      	orrs	r3, r2
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	f043 0302 	orr.w	r3, r3, #2
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	727b      	strb	r3, [r7, #9]
           d[2] = 0x3B;
 80026cc:	233b      	movs	r3, #59	; 0x3b
 80026ce:	72bb      	strb	r3, [r7, #10]
           WriteCmdParamN(0xB6, 3, d);
 80026d0:	f107 0308 	add.w	r3, r7, #8
 80026d4:	461a      	mov	r2, r3
 80026d6:	2103      	movs	r1, #3
 80026d8:	20b6      	movs	r0, #182	; 0xb6
 80026da:	f7fe f9dd 	bl	8000a98 <WriteCmdParamN>
           goto common_MC;
 80026de:	e0c0      	b.n	8002862 <setRotation+0x2b6>
       }
       else if (_lcd_ID == 0x1963 || _lcd_ID == 0x9481 || _lcd_ID == 0x1511) {
 80026e0:	4b56      	ldr	r3, [pc, #344]	; (800283c <setRotation+0x290>)
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	f641 1263 	movw	r2, #6499	; 0x1963
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d00b      	beq.n	8002704 <setRotation+0x158>
 80026ec:	4b53      	ldr	r3, [pc, #332]	; (800283c <setRotation+0x290>)
 80026ee:	881b      	ldrh	r3, [r3, #0]
 80026f0:	f249 4281 	movw	r2, #38017	; 0x9481
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d005      	beq.n	8002704 <setRotation+0x158>
 80026f8:	4b50      	ldr	r3, [pc, #320]	; (800283c <setRotation+0x290>)
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	f241 5211 	movw	r2, #5393	; 0x1511
 8002700:	4293      	cmp	r3, r2
 8002702:	d139      	bne.n	8002778 <setRotation+0x1cc>
           if (val & 0x80)
 8002704:	7afb      	ldrb	r3, [r7, #11]
 8002706:	b25b      	sxtb	r3, r3
 8002708:	2b00      	cmp	r3, #0
 800270a:	da04      	bge.n	8002716 <setRotation+0x16a>
               val |= 0x01;    //GS
 800270c:	7afb      	ldrb	r3, [r7, #11]
 800270e:	f043 0301 	orr.w	r3, r3, #1
 8002712:	b2db      	uxtb	r3, r3
 8002714:	72fb      	strb	r3, [r7, #11]
           if ((val & 0x40))
 8002716:	7afb      	ldrb	r3, [r7, #11]
 8002718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800271c:	2b00      	cmp	r3, #0
 800271e:	d004      	beq.n	800272a <setRotation+0x17e>
               val |= 0x02;    //SS
 8002720:	7afb      	ldrb	r3, [r7, #11]
 8002722:	f043 0302 	orr.w	r3, r3, #2
 8002726:	b2db      	uxtb	r3, r3
 8002728:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1963) val &= ~0xC0;
 800272a:	4b44      	ldr	r3, [pc, #272]	; (800283c <setRotation+0x290>)
 800272c:	881b      	ldrh	r3, [r3, #0]
 800272e:	f641 1263 	movw	r2, #6499	; 0x1963
 8002732:	4293      	cmp	r3, r2
 8002734:	d104      	bne.n	8002740 <setRotation+0x194>
 8002736:	7afb      	ldrb	r3, [r7, #11]
 8002738:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800273c:	b2db      	uxtb	r3, r3
 800273e:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x9481) val &= ~0xD0;
 8002740:	4b3e      	ldr	r3, [pc, #248]	; (800283c <setRotation+0x290>)
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	f249 4281 	movw	r2, #38017	; 0x9481
 8002748:	4293      	cmp	r3, r2
 800274a:	d104      	bne.n	8002756 <setRotation+0x1aa>
 800274c:	7afb      	ldrb	r3, [r7, #11]
 800274e:	f003 032f 	and.w	r3, r3, #47	; 0x2f
 8002752:	b2db      	uxtb	r3, r3
 8002754:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1511) {
 8002756:	4b39      	ldr	r3, [pc, #228]	; (800283c <setRotation+0x290>)
 8002758:	881b      	ldrh	r3, [r3, #0]
 800275a:	f241 5211 	movw	r2, #5393	; 0x1511
 800275e:	4293      	cmp	r3, r2
 8002760:	d160      	bne.n	8002824 <setRotation+0x278>
               val &= ~0x10;   //remove ML
 8002762:	7afb      	ldrb	r3, [r7, #11]
 8002764:	f023 0310 	bic.w	r3, r3, #16
 8002768:	b2db      	uxtb	r3, r3
 800276a:	72fb      	strb	r3, [r7, #11]
               val |= 0xC0;    //force penguin 180 rotation
 800276c:	7afb      	ldrb	r3, [r7, #11]
 800276e:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002772:	b2db      	uxtb	r3, r3
 8002774:	72fb      	strb	r3, [r7, #11]
           }
//            val &= (_lcd_ID == 0x1963) ? ~0xC0 : ~0xD0; //MY=0, MX=0 with ML=0 for ILI9481
           goto common_MC;
 8002776:	e055      	b.n	8002824 <setRotation+0x278>
      }
       else if (is8347) {
 8002778:	4b31      	ldr	r3, [pc, #196]	; (8002840 <setRotation+0x294>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d06f      	beq.n	8002860 <setRotation+0x2b4>
           _MC = 0x02, _MP = 0x06, _MW = 0x22, _SC = 0x02, _EC = 0x04, _SP = 0x06, _EP = 0x08;
 8002780:	4b30      	ldr	r3, [pc, #192]	; (8002844 <setRotation+0x298>)
 8002782:	2202      	movs	r2, #2
 8002784:	801a      	strh	r2, [r3, #0]
 8002786:	4b30      	ldr	r3, [pc, #192]	; (8002848 <setRotation+0x29c>)
 8002788:	2206      	movs	r2, #6
 800278a:	801a      	strh	r2, [r3, #0]
 800278c:	4b2f      	ldr	r3, [pc, #188]	; (800284c <setRotation+0x2a0>)
 800278e:	2222      	movs	r2, #34	; 0x22
 8002790:	801a      	strh	r2, [r3, #0]
 8002792:	4b2f      	ldr	r3, [pc, #188]	; (8002850 <setRotation+0x2a4>)
 8002794:	2202      	movs	r2, #2
 8002796:	801a      	strh	r2, [r3, #0]
 8002798:	4b2e      	ldr	r3, [pc, #184]	; (8002854 <setRotation+0x2a8>)
 800279a:	2204      	movs	r2, #4
 800279c:	801a      	strh	r2, [r3, #0]
 800279e:	4b2e      	ldr	r3, [pc, #184]	; (8002858 <setRotation+0x2ac>)
 80027a0:	2206      	movs	r2, #6
 80027a2:	801a      	strh	r2, [r3, #0]
 80027a4:	4b2d      	ldr	r3, [pc, #180]	; (800285c <setRotation+0x2b0>)
 80027a6:	2208      	movs	r2, #8
 80027a8:	801a      	strh	r2, [r3, #0]
           if (_lcd_ID == 0x0065) {             //HX8352-B
 80027aa:	4b24      	ldr	r3, [pc, #144]	; (800283c <setRotation+0x290>)
 80027ac:	881b      	ldrh	r3, [r3, #0]
 80027ae:	2b65      	cmp	r3, #101	; 0x65
 80027b0:	d121      	bne.n	80027f6 <setRotation+0x24a>
               val |= 0x01;    //GS=1
 80027b2:	7afb      	ldrb	r3, [r7, #11]
 80027b4:	f043 0301 	orr.w	r3, r3, #1
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD3;  //(ML) flip MY, MX, ML, SS, GS
 80027bc:	7afb      	ldrb	r3, [r7, #11]
 80027be:	f003 0310 	and.w	r3, r3, #16
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d005      	beq.n	80027d2 <setRotation+0x226>
 80027c6:	7afb      	ldrb	r3, [r7, #11]
 80027c8:	f083 032c 	eor.w	r3, r3, #44	; 0x2c
 80027cc:	43db      	mvns	r3, r3
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	72fb      	strb	r3, [r7, #11]
               if (r & 1) _MC = 0x82, _MP = 0x80;
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d006      	beq.n	80027ea <setRotation+0x23e>
 80027dc:	4b19      	ldr	r3, [pc, #100]	; (8002844 <setRotation+0x298>)
 80027de:	2282      	movs	r2, #130	; 0x82
 80027e0:	801a      	strh	r2, [r3, #0]
 80027e2:	4b19      	ldr	r3, [pc, #100]	; (8002848 <setRotation+0x29c>)
 80027e4:	2280      	movs	r2, #128	; 0x80
 80027e6:	801a      	strh	r2, [r3, #0]
 80027e8:	e005      	b.n	80027f6 <setRotation+0x24a>
               else _MC = 0x80, _MP = 0x82;
 80027ea:	4b16      	ldr	r3, [pc, #88]	; (8002844 <setRotation+0x298>)
 80027ec:	2280      	movs	r2, #128	; 0x80
 80027ee:	801a      	strh	r2, [r3, #0]
 80027f0:	4b15      	ldr	r3, [pc, #84]	; (8002848 <setRotation+0x29c>)
 80027f2:	2282      	movs	r2, #130	; 0x82
 80027f4:	801a      	strh	r2, [r3, #0]
           }
           if (_lcd_ID == 0x5252) {             //HX8352-A
 80027f6:	4b11      	ldr	r3, [pc, #68]	; (800283c <setRotation+0x290>)
 80027f8:	881b      	ldrh	r3, [r3, #0]
 80027fa:	f245 2252 	movw	r2, #21074	; 0x5252
 80027fe:	4293      	cmp	r3, r2
 8002800:	d145      	bne.n	800288e <setRotation+0x2e2>
               val |= 0x02;   //VERT_SCROLLON
 8002802:	7afb      	ldrb	r3, [r7, #11]
 8002804:	f043 0302 	orr.w	r3, r3, #2
 8002808:	b2db      	uxtb	r3, r3
 800280a:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD4;  //(ML) flip MY, MX, SS. GS=1
 800280c:	7afb      	ldrb	r3, [r7, #11]
 800280e:	f003 0310 	and.w	r3, r3, #16
 8002812:	2b00      	cmp	r3, #0
 8002814:	d03b      	beq.n	800288e <setRotation+0x2e2>
 8002816:	7afb      	ldrb	r3, [r7, #11]
 8002818:	f083 032b 	eor.w	r3, r3, #43	; 0x2b
 800281c:	43db      	mvns	r3, r3
 800281e:	b2db      	uxtb	r3, r3
 8002820:	72fb      	strb	r3, [r7, #11]
           }
			goto common_BGR;
 8002822:	e034      	b.n	800288e <setRotation+0x2e2>
           goto common_MC;
 8002824:	bf00      	nop
 8002826:	e01c      	b.n	8002862 <setRotation+0x2b6>
 8002828:	20000090 	.word	0x20000090
 800282c:	20000088 	.word	0x20000088
 8002830:	20000004 	.word	0x20000004
 8002834:	20000006 	.word	0x20000006
 8002838:	2000008c 	.word	0x2000008c
 800283c:	2000008e 	.word	0x2000008e
 8002840:	20000083 	.word	0x20000083
 8002844:	20000094 	.word	0x20000094
 8002848:	20000096 	.word	0x20000096
 800284c:	20000098 	.word	0x20000098
 8002850:	2000009a 	.word	0x2000009a
 8002854:	2000009c 	.word	0x2000009c
 8002858:	2000009e 	.word	0x2000009e
 800285c:	200000a0 	.word	0x200000a0
       }
     common_MC:
 8002860:	bf00      	nop
       _MC = 0x2A, _MP = 0x2B, _MW = 0x2C, _SC = 0x2A, _EC = 0x2A, _SP = 0x2B, _EP = 0x2B;
 8002862:	4b8a      	ldr	r3, [pc, #552]	; (8002a8c <setRotation+0x4e0>)
 8002864:	222a      	movs	r2, #42	; 0x2a
 8002866:	801a      	strh	r2, [r3, #0]
 8002868:	4b89      	ldr	r3, [pc, #548]	; (8002a90 <setRotation+0x4e4>)
 800286a:	222b      	movs	r2, #43	; 0x2b
 800286c:	801a      	strh	r2, [r3, #0]
 800286e:	4b89      	ldr	r3, [pc, #548]	; (8002a94 <setRotation+0x4e8>)
 8002870:	222c      	movs	r2, #44	; 0x2c
 8002872:	801a      	strh	r2, [r3, #0]
 8002874:	4b88      	ldr	r3, [pc, #544]	; (8002a98 <setRotation+0x4ec>)
 8002876:	222a      	movs	r2, #42	; 0x2a
 8002878:	801a      	strh	r2, [r3, #0]
 800287a:	4b88      	ldr	r3, [pc, #544]	; (8002a9c <setRotation+0x4f0>)
 800287c:	222a      	movs	r2, #42	; 0x2a
 800287e:	801a      	strh	r2, [r3, #0]
 8002880:	4b87      	ldr	r3, [pc, #540]	; (8002aa0 <setRotation+0x4f4>)
 8002882:	222b      	movs	r2, #43	; 0x2b
 8002884:	801a      	strh	r2, [r3, #0]
 8002886:	4b87      	ldr	r3, [pc, #540]	; (8002aa4 <setRotation+0x4f8>)
 8002888:	222b      	movs	r2, #43	; 0x2b
 800288a:	801a      	strh	r2, [r3, #0]
 800288c:	e000      	b.n	8002890 <setRotation+0x2e4>
			goto common_BGR;
 800288e:	bf00      	nop
     common_BGR:
       WriteCmdParamN(is8347 ? 0x16 : 0x36, 1, &val);
 8002890:	4b85      	ldr	r3, [pc, #532]	; (8002aa8 <setRotation+0x4fc>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <setRotation+0x2f0>
 8002898:	2316      	movs	r3, #22
 800289a:	e000      	b.n	800289e <setRotation+0x2f2>
 800289c:	2336      	movs	r3, #54	; 0x36
 800289e:	f107 020b 	add.w	r2, r7, #11
 80028a2:	2101      	movs	r1, #1
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7fe f8f7 	bl	8000a98 <WriteCmdParamN>
       _lcd_madctl = val;
 80028aa:	7afb      	ldrb	r3, [r7, #11]
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	4b7f      	ldr	r3, [pc, #508]	; (8002aac <setRotation+0x500>)
 80028b0:	801a      	strh	r2, [r3, #0]
 80028b2:	e0a5      	b.n	8002a00 <setRotation+0x454>
//	    if (_lcd_ID	== 0x1963) WriteCmdParamN(0x13, 0, NULL);   //NORMAL mode
   }
   // cope with 9320 variants
   else {
       switch (_lcd_ID) {
 80028b4:	4b7e      	ldr	r3, [pc, #504]	; (8002ab0 <setRotation+0x504>)
 80028b6:	881b      	ldrh	r3, [r3, #0]
 80028b8:	f24b 5209 	movw	r2, #46345	; 0xb509
 80028bc:	4293      	cmp	r3, r2
 80028be:	d013      	beq.n	80028e8 <setRotation+0x33c>
 80028c0:	f24b 5209 	movw	r2, #46345	; 0xb509
 80028c4:	4293      	cmp	r3, r2
 80028c6:	dc4f      	bgt.n	8002968 <setRotation+0x3bc>
 80028c8:	f249 3226 	movw	r2, #37670	; 0x9326
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d00b      	beq.n	80028e8 <setRotation+0x33c>
 80028d0:	f249 3226 	movw	r2, #37670	; 0x9326
 80028d4:	4293      	cmp	r3, r2
 80028d6:	dc47      	bgt.n	8002968 <setRotation+0x3bc>
 80028d8:	f245 4220 	movw	r2, #21536	; 0x5420
 80028dc:	4293      	cmp	r3, r2
 80028de:	d003      	beq.n	80028e8 <setRotation+0x33c>
 80028e0:	f247 7293 	movw	r2, #30611	; 0x7793
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d13f      	bne.n	8002968 <setRotation+0x3bc>
#endif
       case 0x5420:
       case 0x7793:
       case 0x9326:
		case 0xB509:
           _MC = 0x200, _MP = 0x201, _MW = 0x202, _SC = 0x210, _EC = 0x211, _SP = 0x212, _EP = 0x213;
 80028e8:	4b68      	ldr	r3, [pc, #416]	; (8002a8c <setRotation+0x4e0>)
 80028ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028ee:	801a      	strh	r2, [r3, #0]
 80028f0:	4b67      	ldr	r3, [pc, #412]	; (8002a90 <setRotation+0x4e4>)
 80028f2:	f240 2201 	movw	r2, #513	; 0x201
 80028f6:	801a      	strh	r2, [r3, #0]
 80028f8:	4b66      	ldr	r3, [pc, #408]	; (8002a94 <setRotation+0x4e8>)
 80028fa:	f240 2202 	movw	r2, #514	; 0x202
 80028fe:	801a      	strh	r2, [r3, #0]
 8002900:	4b65      	ldr	r3, [pc, #404]	; (8002a98 <setRotation+0x4ec>)
 8002902:	f44f 7204 	mov.w	r2, #528	; 0x210
 8002906:	801a      	strh	r2, [r3, #0]
 8002908:	4b64      	ldr	r3, [pc, #400]	; (8002a9c <setRotation+0x4f0>)
 800290a:	f240 2211 	movw	r2, #529	; 0x211
 800290e:	801a      	strh	r2, [r3, #0]
 8002910:	4b63      	ldr	r3, [pc, #396]	; (8002aa0 <setRotation+0x4f4>)
 8002912:	f240 2212 	movw	r2, #530	; 0x212
 8002916:	801a      	strh	r2, [r3, #0]
 8002918:	4b62      	ldr	r3, [pc, #392]	; (8002aa4 <setRotation+0x4f8>)
 800291a:	f240 2213 	movw	r2, #531	; 0x213
 800291e:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 8002920:	7afb      	ldrb	r3, [r7, #11]
 8002922:	b25b      	sxtb	r3, r3
 8002924:	b29b      	uxth	r3, r3
 8002926:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800292a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800292e:	823b      	strh	r3, [r7, #16]
			uint16_t NL;
			NL = ((432 / 8) - 1) << 9;
 8002930:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8002934:	82bb      	strh	r3, [r7, #20]
           if (_lcd_ID == 0x9326 || _lcd_ID == 0x5420) NL >>= 1;
 8002936:	4b5e      	ldr	r3, [pc, #376]	; (8002ab0 <setRotation+0x504>)
 8002938:	881b      	ldrh	r3, [r3, #0]
 800293a:	f249 3226 	movw	r2, #37670	; 0x9326
 800293e:	4293      	cmp	r3, r2
 8002940:	d005      	beq.n	800294e <setRotation+0x3a2>
 8002942:	4b5b      	ldr	r3, [pc, #364]	; (8002ab0 <setRotation+0x504>)
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	f245 4220 	movw	r2, #21536	; 0x5420
 800294a:	4293      	cmp	r3, r2
 800294c:	d102      	bne.n	8002954 <setRotation+0x3a8>
 800294e:	8abb      	ldrh	r3, [r7, #20]
 8002950:	085b      	lsrs	r3, r3, #1
 8002952:	82bb      	strh	r3, [r7, #20]
           WriteCmdData(0x400, GS | NL);
 8002954:	8a3a      	ldrh	r2, [r7, #16]
 8002956:	8abb      	ldrh	r3, [r7, #20]
 8002958:	4313      	orrs	r3, r2
 800295a:	b29b      	uxth	r3, r3
 800295c:	4619      	mov	r1, r3
 800295e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002962:	f7fd fedc 	bl	800071e <WriteCmdData>
           goto common_SS;
 8002966:	e024      	b.n	80029b2 <setRotation+0x406>
       default:
           _MC = 0x20, _MP = 0x21, _MW = 0x22, _SC = 0x50, _EC = 0x51, _SP = 0x52, _EP = 0x53;
 8002968:	4b48      	ldr	r3, [pc, #288]	; (8002a8c <setRotation+0x4e0>)
 800296a:	2220      	movs	r2, #32
 800296c:	801a      	strh	r2, [r3, #0]
 800296e:	4b48      	ldr	r3, [pc, #288]	; (8002a90 <setRotation+0x4e4>)
 8002970:	2221      	movs	r2, #33	; 0x21
 8002972:	801a      	strh	r2, [r3, #0]
 8002974:	4b47      	ldr	r3, [pc, #284]	; (8002a94 <setRotation+0x4e8>)
 8002976:	2222      	movs	r2, #34	; 0x22
 8002978:	801a      	strh	r2, [r3, #0]
 800297a:	4b47      	ldr	r3, [pc, #284]	; (8002a98 <setRotation+0x4ec>)
 800297c:	2250      	movs	r2, #80	; 0x50
 800297e:	801a      	strh	r2, [r3, #0]
 8002980:	4b46      	ldr	r3, [pc, #280]	; (8002a9c <setRotation+0x4f0>)
 8002982:	2251      	movs	r2, #81	; 0x51
 8002984:	801a      	strh	r2, [r3, #0]
 8002986:	4b46      	ldr	r3, [pc, #280]	; (8002aa0 <setRotation+0x4f4>)
 8002988:	2252      	movs	r2, #82	; 0x52
 800298a:	801a      	strh	r2, [r3, #0]
 800298c:	4b45      	ldr	r3, [pc, #276]	; (8002aa4 <setRotation+0x4f8>)
 800298e:	2253      	movs	r2, #83	; 0x53
 8002990:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 8002992:	7afb      	ldrb	r3, [r7, #11]
 8002994:	b25b      	sxtb	r3, r3
 8002996:	b29b      	uxth	r3, r3
 8002998:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800299c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80029a0:	823b      	strh	r3, [r7, #16]
           WriteCmdData(0x60, GS | 0x2700);    // Gate Scan Line (0xA700)
 80029a2:	8a3b      	ldrh	r3, [r7, #16]
 80029a4:	f443 531c 	orr.w	r3, r3, #9984	; 0x2700
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	4619      	mov	r1, r3
 80029ac:	2060      	movs	r0, #96	; 0x60
 80029ae:	f7fd feb6 	bl	800071e <WriteCmdData>
         common_SS:
           SS_v = (val & 0x40) ? (1 << 8) : 0;
 80029b2:	7afb      	ldrb	r3, [r7, #11]
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029bc:	81fb      	strh	r3, [r7, #14]
           WriteCmdData(0x01, SS_v);     // set Driver Output Control
 80029be:	89fb      	ldrh	r3, [r7, #14]
 80029c0:	4619      	mov	r1, r3
 80029c2:	2001      	movs	r0, #1
 80029c4:	f7fd feab 	bl	800071e <WriteCmdData>
         common_ORG:
           ORG = (val & 0x20) ? (1 << 3) : 0;
 80029c8:	7afb      	ldrb	r3, [r7, #11]
 80029ca:	109b      	asrs	r3, r3, #2
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	f003 0308 	and.w	r3, r3, #8
 80029d2:	82fb      	strh	r3, [r7, #22]
               if (rotation == 1 || rotation == 2) {
                   val ^= 0x08;        // change BGR bit for LANDSCAPE and PORTRAIT_REV
               }
           }
#endif
           if (val & 0x08)
 80029d4:	7afb      	ldrb	r3, [r7, #11]
 80029d6:	f003 0308 	and.w	r3, r3, #8
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <setRotation+0x43a>
               ORG |= 0x1000;  //BGR
 80029de:	8afb      	ldrh	r3, [r7, #22]
 80029e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029e4:	82fb      	strh	r3, [r7, #22]
           _lcd_madctl = ORG | 0x0030;
 80029e6:	8afb      	ldrh	r3, [r7, #22]
 80029e8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	4b2f      	ldr	r3, [pc, #188]	; (8002aac <setRotation+0x500>)
 80029f0:	801a      	strh	r2, [r3, #0]
           WriteCmdData(0x03, _lcd_madctl);    // set GRAM write direction and BGR=1.
 80029f2:	4b2e      	ldr	r3, [pc, #184]	; (8002aac <setRotation+0x500>)
 80029f4:	881b      	ldrh	r3, [r3, #0]
 80029f6:	4619      	mov	r1, r3
 80029f8:	2003      	movs	r0, #3
 80029fa:	f7fd fe90 	bl	800071e <WriteCmdData>
           break;
 80029fe:	bf00      	nop
           WriteCmdData(0x11, ORG | 0x6070);   // DFM=3, EN=0, TY=1
           break;
#endif
		}
   }
   if ((rotation & 1) && ((_lcd_capable & MV_AXIS) == 0)) {
 8002a00:	4b2c      	ldr	r3, [pc, #176]	; (8002ab4 <setRotation+0x508>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d023      	beq.n	8002a54 <setRotation+0x4a8>
 8002a0c:	4b2a      	ldr	r3, [pc, #168]	; (8002ab8 <setRotation+0x50c>)
 8002a0e:	881b      	ldrh	r3, [r3, #0]
 8002a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d11d      	bne.n	8002a54 <setRotation+0x4a8>
       uint16_t x;
       x = _MC, _MC = _MP, _MP = x;
 8002a18:	4b1c      	ldr	r3, [pc, #112]	; (8002a8c <setRotation+0x4e0>)
 8002a1a:	881b      	ldrh	r3, [r3, #0]
 8002a1c:	81bb      	strh	r3, [r7, #12]
 8002a1e:	4b1c      	ldr	r3, [pc, #112]	; (8002a90 <setRotation+0x4e4>)
 8002a20:	881a      	ldrh	r2, [r3, #0]
 8002a22:	4b1a      	ldr	r3, [pc, #104]	; (8002a8c <setRotation+0x4e0>)
 8002a24:	801a      	strh	r2, [r3, #0]
 8002a26:	4a1a      	ldr	r2, [pc, #104]	; (8002a90 <setRotation+0x4e4>)
 8002a28:	89bb      	ldrh	r3, [r7, #12]
 8002a2a:	8013      	strh	r3, [r2, #0]
       x = _SC, _SC = _SP, _SP = x;    //.kbv check 0139
 8002a2c:	4b1a      	ldr	r3, [pc, #104]	; (8002a98 <setRotation+0x4ec>)
 8002a2e:	881b      	ldrh	r3, [r3, #0]
 8002a30:	81bb      	strh	r3, [r7, #12]
 8002a32:	4b1b      	ldr	r3, [pc, #108]	; (8002aa0 <setRotation+0x4f4>)
 8002a34:	881a      	ldrh	r2, [r3, #0]
 8002a36:	4b18      	ldr	r3, [pc, #96]	; (8002a98 <setRotation+0x4ec>)
 8002a38:	801a      	strh	r2, [r3, #0]
 8002a3a:	4a19      	ldr	r2, [pc, #100]	; (8002aa0 <setRotation+0x4f4>)
 8002a3c:	89bb      	ldrh	r3, [r7, #12]
 8002a3e:	8013      	strh	r3, [r2, #0]
       x = _EC, _EC = _EP, _EP = x;    //.kbv check 0139
 8002a40:	4b16      	ldr	r3, [pc, #88]	; (8002a9c <setRotation+0x4f0>)
 8002a42:	881b      	ldrh	r3, [r3, #0]
 8002a44:	81bb      	strh	r3, [r7, #12]
 8002a46:	4b17      	ldr	r3, [pc, #92]	; (8002aa4 <setRotation+0x4f8>)
 8002a48:	881a      	ldrh	r2, [r3, #0]
 8002a4a:	4b14      	ldr	r3, [pc, #80]	; (8002a9c <setRotation+0x4f0>)
 8002a4c:	801a      	strh	r2, [r3, #0]
 8002a4e:	4a15      	ldr	r2, [pc, #84]	; (8002aa4 <setRotation+0x4f8>)
 8002a50:	89bb      	ldrh	r3, [r7, #12]
 8002a52:	8013      	strh	r3, [r2, #0]
   }
   setAddrWindow(0, 0, width() - 1, height() - 1);
 8002a54:	f7fd fda6 	bl	80005a4 <width>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	b21c      	sxth	r4, r3
 8002a60:	f7fd fdaa 	bl	80005b8 <height>
 8002a64:	4603      	mov	r3, r0
 8002a66:	3b01      	subs	r3, #1
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	b21b      	sxth	r3, r3
 8002a6c:	4622      	mov	r2, r4
 8002a6e:	2100      	movs	r1, #0
 8002a70:	2000      	movs	r0, #0
 8002a72:	f000 f8d9 	bl	8002c28 <setAddrWindow>
   vertScroll(0, HEIGHT, 0);   //reset scrolling after a rotation
 8002a76:	2200      	movs	r2, #0
 8002a78:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8002a7c:	2000      	movs	r0, #0
 8002a7e:	f000 f9f7 	bl	8002e70 <vertScroll>
}
 8002a82:	bf00      	nop
 8002a84:	371c      	adds	r7, #28
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd90      	pop	{r4, r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	20000094 	.word	0x20000094
 8002a90:	20000096 	.word	0x20000096
 8002a94:	20000098 	.word	0x20000098
 8002a98:	2000009a 	.word	0x2000009a
 8002a9c:	2000009c 	.word	0x2000009c
 8002aa0:	2000009e 	.word	0x2000009e
 8002aa4:	200000a0 	.word	0x200000a0
 8002aa8:	20000083 	.word	0x20000083
 8002aac:	20000092 	.word	0x20000092
 8002ab0:	2000008e 	.word	0x2000008e
 8002ab4:	20000088 	.word	0x20000088
 8002ab8:	2000008c 	.word	0x2000008c

08002abc <drawPixel>:

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8002abc:	b590      	push	{r4, r7, lr}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	80fb      	strh	r3, [r7, #6]
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	80bb      	strh	r3, [r7, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	807b      	strh	r3, [r7, #2]
   // MCUFRIEND just plots at edge if you try to write outside of the box:
   if (x < 0 || y < 0 || x >= width() || y >= height())
 8002ace:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f2c0 8098 	blt.w	8002c08 <drawPixel+0x14c>
 8002ad8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f2c0 8093 	blt.w	8002c08 <drawPixel+0x14c>
 8002ae2:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8002ae6:	f7fd fd5d 	bl	80005a4 <width>
 8002aea:	4603      	mov	r3, r0
 8002aec:	429c      	cmp	r4, r3
 8002aee:	f280 808b 	bge.w	8002c08 <drawPixel+0x14c>
 8002af2:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8002af6:	f7fd fd5f 	bl	80005b8 <height>
 8002afa:	4603      	mov	r3, r0
 8002afc:	429c      	cmp	r4, r3
 8002afe:	f280 8083 	bge.w	8002c08 <drawPixel+0x14c>
       return;
#if defined(SUPPORT_9488_555)
   if (is555) color = color565_to_555(color);
 8002b02:	4b43      	ldr	r3, [pc, #268]	; (8002c10 <drawPixel+0x154>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d005      	beq.n	8002b16 <drawPixel+0x5a>
 8002b0a:	887b      	ldrh	r3, [r7, #2]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7fd fd5d 	bl	80005cc <color565_to_555>
 8002b12:	4603      	mov	r3, r0
 8002b14:	807b      	strh	r3, [r7, #2]
#endif
   setAddrWindow(x, y, x, y);
 8002b16:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002b1a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b1e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002b22:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002b26:	f000 f87f 	bl	8002c28 <setAddrWindow>
//    CS_ACTIVE; WriteCmd(_MW); write16(color); CS_IDLE; //-0.01s +98B
   if (is9797) { CS_ACTIVE; WriteCmd(_MW); write24(color); CS_IDLE;} else
 8002b2a:	4b3a      	ldr	r3, [pc, #232]	; (8002c14 <drawPixel+0x158>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d062      	beq.n	8002bf8 <drawPixel+0x13c>
 8002b32:	2102      	movs	r1, #2
 8002b34:	4838      	ldr	r0, [pc, #224]	; (8002c18 <drawPixel+0x15c>)
 8002b36:	f7fd fce6 	bl	8000506 <PIN_LOW>
 8002b3a:	2104      	movs	r1, #4
 8002b3c:	4836      	ldr	r0, [pc, #216]	; (8002c18 <drawPixel+0x15c>)
 8002b3e:	f7fd fce2 	bl	8000506 <PIN_LOW>
 8002b42:	4b36      	ldr	r3, [pc, #216]	; (8002c1c <drawPixel+0x160>)
 8002b44:	881b      	ldrh	r3, [r3, #0]
 8002b46:	0a1b      	lsrs	r3, r3, #8
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	73fb      	strb	r3, [r7, #15]
 8002b4c:	4b33      	ldr	r3, [pc, #204]	; (8002c1c <drawPixel+0x160>)
 8002b4e:	881b      	ldrh	r3, [r3, #0]
 8002b50:	73bb      	strb	r3, [r7, #14]
 8002b52:	4b31      	ldr	r3, [pc, #196]	; (8002c18 <drawPixel+0x15c>)
 8002b54:	4a32      	ldr	r2, [pc, #200]	; (8002c20 <drawPixel+0x164>)
 8002b56:	611a      	str	r2, [r3, #16]
 8002b58:	4b32      	ldr	r3, [pc, #200]	; (8002c24 <drawPixel+0x168>)
 8002b5a:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8002b5e:	611a      	str	r2, [r3, #16]
 8002b60:	7bfb      	ldrb	r3, [r7, #15]
 8002b62:	035b      	lsls	r3, r3, #13
 8002b64:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8002b68:	7bfb      	ldrb	r3, [r7, #15]
 8002b6a:	109b      	asrs	r3, r3, #2
 8002b6c:	f003 0320 	and.w	r3, r3, #32
 8002b70:	431a      	orrs	r2, r3
 8002b72:	4b29      	ldr	r3, [pc, #164]	; (8002c18 <drawPixel+0x15c>)
 8002b74:	611a      	str	r2, [r3, #16]
 8002b76:	7bfb      	ldrb	r3, [r7, #15]
 8002b78:	4a2a      	ldr	r2, [pc, #168]	; (8002c24 <drawPixel+0x168>)
 8002b7a:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8002b7e:	6113      	str	r3, [r2, #16]
 8002b80:	2108      	movs	r1, #8
 8002b82:	4825      	ldr	r0, [pc, #148]	; (8002c18 <drawPixel+0x15c>)
 8002b84:	f7fd fcbf 	bl	8000506 <PIN_LOW>
 8002b88:	2108      	movs	r1, #8
 8002b8a:	4823      	ldr	r0, [pc, #140]	; (8002c18 <drawPixel+0x15c>)
 8002b8c:	f7fd fccb 	bl	8000526 <PIN_HIGH>
 8002b90:	2108      	movs	r1, #8
 8002b92:	4821      	ldr	r0, [pc, #132]	; (8002c18 <drawPixel+0x15c>)
 8002b94:	f7fd fcc7 	bl	8000526 <PIN_HIGH>
 8002b98:	4b1f      	ldr	r3, [pc, #124]	; (8002c18 <drawPixel+0x15c>)
 8002b9a:	4a21      	ldr	r2, [pc, #132]	; (8002c20 <drawPixel+0x164>)
 8002b9c:	611a      	str	r2, [r3, #16]
 8002b9e:	4b21      	ldr	r3, [pc, #132]	; (8002c24 <drawPixel+0x168>)
 8002ba0:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8002ba4:	611a      	str	r2, [r3, #16]
 8002ba6:	7bbb      	ldrb	r3, [r7, #14]
 8002ba8:	035b      	lsls	r3, r3, #13
 8002baa:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8002bae:	7bbb      	ldrb	r3, [r7, #14]
 8002bb0:	109b      	asrs	r3, r3, #2
 8002bb2:	f003 0320 	and.w	r3, r3, #32
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	4b17      	ldr	r3, [pc, #92]	; (8002c18 <drawPixel+0x15c>)
 8002bba:	611a      	str	r2, [r3, #16]
 8002bbc:	7bbb      	ldrb	r3, [r7, #14]
 8002bbe:	4a19      	ldr	r2, [pc, #100]	; (8002c24 <drawPixel+0x168>)
 8002bc0:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8002bc4:	6113      	str	r3, [r2, #16]
 8002bc6:	2108      	movs	r1, #8
 8002bc8:	4813      	ldr	r0, [pc, #76]	; (8002c18 <drawPixel+0x15c>)
 8002bca:	f7fd fc9c 	bl	8000506 <PIN_LOW>
 8002bce:	2108      	movs	r1, #8
 8002bd0:	4811      	ldr	r0, [pc, #68]	; (8002c18 <drawPixel+0x15c>)
 8002bd2:	f7fd fca8 	bl	8000526 <PIN_HIGH>
 8002bd6:	2108      	movs	r1, #8
 8002bd8:	480f      	ldr	r0, [pc, #60]	; (8002c18 <drawPixel+0x15c>)
 8002bda:	f7fd fca4 	bl	8000526 <PIN_HIGH>
 8002bde:	2104      	movs	r1, #4
 8002be0:	480d      	ldr	r0, [pc, #52]	; (8002c18 <drawPixel+0x15c>)
 8002be2:	f7fd fca0 	bl	8000526 <PIN_HIGH>
 8002be6:	887b      	ldrh	r3, [r7, #2]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7fd fe11 	bl	8000810 <write24>
 8002bee:	2102      	movs	r1, #2
 8002bf0:	4809      	ldr	r0, [pc, #36]	; (8002c18 <drawPixel+0x15c>)
 8002bf2:	f7fd fc98 	bl	8000526 <PIN_HIGH>
 8002bf6:	e008      	b.n	8002c0a <drawPixel+0x14e>
   WriteCmdData(_MW, color);
 8002bf8:	4b08      	ldr	r3, [pc, #32]	; (8002c1c <drawPixel+0x160>)
 8002bfa:	881b      	ldrh	r3, [r3, #0]
 8002bfc:	887a      	ldrh	r2, [r7, #2]
 8002bfe:	4611      	mov	r1, r2
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7fd fd8c 	bl	800071e <WriteCmdData>
 8002c06:	e000      	b.n	8002c0a <drawPixel+0x14e>
       return;
 8002c08:	bf00      	nop
}
 8002c0a:	3714      	adds	r7, #20
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd90      	pop	{r4, r7, pc}
 8002c10:	20000084 	.word	0x20000084
 8002c14:	20000085 	.word	0x20000085
 8002c18:	40010800 	.word	0x40010800
 8002c1c:	20000098 	.word	0x20000098
 8002c20:	80200000 	.word	0x80200000
 8002c24:	40010c00 	.word	0x40010c00

08002c28 <setAddrWindow>:

void setAddrWindow(int16_t x, int16_t y, int16_t x1, int16_t y1)
{
 8002c28:	b590      	push	{r4, r7, lr}
 8002c2a:	b087      	sub	sp, #28
 8002c2c:	af02      	add	r7, sp, #8
 8002c2e:	4604      	mov	r4, r0
 8002c30:	4608      	mov	r0, r1
 8002c32:	4611      	mov	r1, r2
 8002c34:	461a      	mov	r2, r3
 8002c36:	4623      	mov	r3, r4
 8002c38:	80fb      	strh	r3, [r7, #6]
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	80bb      	strh	r3, [r7, #4]
 8002c3e:	460b      	mov	r3, r1
 8002c40:	807b      	strh	r3, [r7, #2]
 8002c42:	4613      	mov	r3, r2
 8002c44:	803b      	strh	r3, [r7, #0]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 8002c46:	4b80      	ldr	r3, [pc, #512]	; (8002e48 <setAddrWindow+0x220>)
 8002c48:	881b      	ldrh	r3, [r3, #0]
 8002c4a:	f249 3227 	movw	r2, #37671	; 0x9327
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d117      	bne.n	8002c82 <setAddrWindow+0x5a>
	    if (rotation == 2) y += OFFSET_9327, y1 += OFFSET_9327;
 8002c52:	4b7e      	ldr	r3, [pc, #504]	; (8002e4c <setAddrWindow+0x224>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d107      	bne.n	8002c6a <setAddrWindow+0x42>
 8002c5a:	88bb      	ldrh	r3, [r7, #4]
 8002c5c:	3320      	adds	r3, #32
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	80bb      	strh	r3, [r7, #4]
 8002c62:	883b      	ldrh	r3, [r7, #0]
 8002c64:	3320      	adds	r3, #32
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	803b      	strh	r3, [r7, #0]
	    if (rotation == 3) x += OFFSET_9327, x1 += OFFSET_9327;
 8002c6a:	4b78      	ldr	r3, [pc, #480]	; (8002e4c <setAddrWindow+0x224>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2b03      	cmp	r3, #3
 8002c70:	d107      	bne.n	8002c82 <setAddrWindow+0x5a>
 8002c72:	88fb      	ldrh	r3, [r7, #6]
 8002c74:	3320      	adds	r3, #32
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	80fb      	strh	r3, [r7, #6]
 8002c7a:	887b      	ldrh	r3, [r7, #2]
 8002c7c:	3320      	adds	r3, #32
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	807b      	strh	r3, [r7, #2]
   }
#endif
#if 1
   if (_lcd_ID == 0x1526 && (rotation & 1)) {
 8002c82:	4b71      	ldr	r3, [pc, #452]	; (8002e48 <setAddrWindow+0x220>)
 8002c84:	881b      	ldrh	r3, [r3, #0]
 8002c86:	f241 5226 	movw	r2, #5414	; 0x1526
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d128      	bne.n	8002ce0 <setAddrWindow+0xb8>
 8002c8e:	4b6f      	ldr	r3, [pc, #444]	; (8002e4c <setAddrWindow+0x224>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d022      	beq.n	8002ce0 <setAddrWindow+0xb8>
		int16_t dx = x1 - x, dy = y1 - y;
 8002c9a:	887a      	ldrh	r2, [r7, #2]
 8002c9c:	88fb      	ldrh	r3, [r7, #6]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	81fb      	strh	r3, [r7, #14]
 8002ca4:	883a      	ldrh	r2, [r7, #0]
 8002ca6:	88bb      	ldrh	r3, [r7, #4]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	81bb      	strh	r3, [r7, #12]
		if (dy == 0) { y1++; }
 8002cae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d106      	bne.n	8002cc4 <setAddrWindow+0x9c>
 8002cb6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	803b      	strh	r3, [r7, #0]
 8002cc2:	e00d      	b.n	8002ce0 <setAddrWindow+0xb8>
		else if (dx == 0) { x1 += dy; y1 -= dy; }
 8002cc4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d109      	bne.n	8002ce0 <setAddrWindow+0xb8>
 8002ccc:	887a      	ldrh	r2, [r7, #2]
 8002cce:	89bb      	ldrh	r3, [r7, #12]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	807b      	strh	r3, [r7, #2]
 8002cd6:	883a      	ldrh	r2, [r7, #0]
 8002cd8:	89bb      	ldrh	r3, [r7, #12]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	803b      	strh	r3, [r7, #0]
   }
#endif
   if (_lcd_capable & MIPI_DCS_REV1) {
 8002ce0:	4b5b      	ldr	r3, [pc, #364]	; (8002e50 <setAddrWindow+0x228>)
 8002ce2:	881b      	ldrh	r3, [r3, #0]
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d054      	beq.n	8002d96 <setAddrWindow+0x16e>
       WriteCmdParam4(_SC, x >> 8, x, x1 >> 8, x1);   //Start column instead of _MC
 8002cec:	4b59      	ldr	r3, [pc, #356]	; (8002e54 <setAddrWindow+0x22c>)
 8002cee:	881b      	ldrh	r3, [r3, #0]
 8002cf0:	b2d8      	uxtb	r0, r3
 8002cf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cf6:	121b      	asrs	r3, r3, #8
 8002cf8:	b21b      	sxth	r3, r3
 8002cfa:	b2d9      	uxtb	r1, r3
 8002cfc:	88fb      	ldrh	r3, [r7, #6]
 8002cfe:	b2da      	uxtb	r2, r3
 8002d00:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002d04:	121b      	asrs	r3, r3, #8
 8002d06:	b21b      	sxth	r3, r3
 8002d08:	b2dc      	uxtb	r4, r3
 8002d0a:	887b      	ldrh	r3, [r7, #2]
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	4623      	mov	r3, r4
 8002d12:	f7fd ffc3 	bl	8000c9c <WriteCmdParam4>
       WriteCmdParam4(_SP, y >> 8, y, y1 >> 8, y1);   //
 8002d16:	4b50      	ldr	r3, [pc, #320]	; (8002e58 <setAddrWindow+0x230>)
 8002d18:	881b      	ldrh	r3, [r3, #0]
 8002d1a:	b2d8      	uxtb	r0, r3
 8002d1c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002d20:	121b      	asrs	r3, r3, #8
 8002d22:	b21b      	sxth	r3, r3
 8002d24:	b2d9      	uxtb	r1, r3
 8002d26:	88bb      	ldrh	r3, [r7, #4]
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002d2e:	121b      	asrs	r3, r3, #8
 8002d30:	b21b      	sxth	r3, r3
 8002d32:	b2dc      	uxtb	r4, r3
 8002d34:	883b      	ldrh	r3, [r7, #0]
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	4623      	mov	r3, r4
 8002d3c:	f7fd ffae 	bl	8000c9c <WriteCmdParam4>
       if (is8347 && _lcd_ID == 0x0065) {             //HX8352-B has separate _MC, _SC
 8002d40:	4b46      	ldr	r3, [pc, #280]	; (8002e5c <setAddrWindow+0x234>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d07b      	beq.n	8002e40 <setAddrWindow+0x218>
 8002d48:	4b3f      	ldr	r3, [pc, #252]	; (8002e48 <setAddrWindow+0x220>)
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	2b65      	cmp	r3, #101	; 0x65
 8002d4e:	d177      	bne.n	8002e40 <setAddrWindow+0x218>
           uint8_t d[2];
           d[0] = x >> 8; d[1] = x;
 8002d50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d54:	121b      	asrs	r3, r3, #8
 8002d56:	b21b      	sxth	r3, r3
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	723b      	strb	r3, [r7, #8]
 8002d5c:	88fb      	ldrh	r3, [r7, #6]
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MC, 2, d);                 //allows !MV_AXIS to work
 8002d62:	4b3f      	ldr	r3, [pc, #252]	; (8002e60 <setAddrWindow+0x238>)
 8002d64:	881b      	ldrh	r3, [r3, #0]
 8002d66:	f107 0208 	add.w	r2, r7, #8
 8002d6a:	2102      	movs	r1, #2
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7fd fe93 	bl	8000a98 <WriteCmdParamN>
           d[0] = y >> 8; d[1] = y;
 8002d72:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002d76:	121b      	asrs	r3, r3, #8
 8002d78:	b21b      	sxth	r3, r3
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	723b      	strb	r3, [r7, #8]
 8002d7e:	88bb      	ldrh	r3, [r7, #4]
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MP, 2, d);
 8002d84:	4b37      	ldr	r3, [pc, #220]	; (8002e64 <setAddrWindow+0x23c>)
 8002d86:	881b      	ldrh	r3, [r3, #0]
 8002d88:	f107 0208 	add.w	r2, r7, #8
 8002d8c:	2102      	movs	r1, #2
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fd fe82 	bl	8000a98 <WriteCmdParamN>
           WriteCmdData(_SP, y);
           WriteCmdData(_EC, x1);
           WriteCmdData(_EP, y1);
       }
   }
}
 8002d94:	e054      	b.n	8002e40 <setAddrWindow+0x218>
       WriteCmdData(_MC, x);
 8002d96:	4b32      	ldr	r3, [pc, #200]	; (8002e60 <setAddrWindow+0x238>)
 8002d98:	881b      	ldrh	r3, [r3, #0]
 8002d9a:	88fa      	ldrh	r2, [r7, #6]
 8002d9c:	4611      	mov	r1, r2
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fd fcbd 	bl	800071e <WriteCmdData>
       WriteCmdData(_MP, y);
 8002da4:	4b2f      	ldr	r3, [pc, #188]	; (8002e64 <setAddrWindow+0x23c>)
 8002da6:	881b      	ldrh	r3, [r3, #0]
 8002da8:	88ba      	ldrh	r2, [r7, #4]
 8002daa:	4611      	mov	r1, r2
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7fd fcb6 	bl	800071e <WriteCmdData>
       if (!(x == x1 && y == y1)) {  //only need MC,MP for drawPixel
 8002db2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002db6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d105      	bne.n	8002dca <setAddrWindow+0x1a2>
 8002dbe:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002dc2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d03a      	beq.n	8002e40 <setAddrWindow+0x218>
           if (_lcd_capable & XSA_XEA_16BIT) {
 8002dca:	4b21      	ldr	r3, [pc, #132]	; (8002e50 <setAddrWindow+0x228>)
 8002dcc:	881b      	ldrh	r3, [r3, #0]
 8002dce:	f003 0320 	and.w	r3, r3, #32
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d018      	beq.n	8002e08 <setAddrWindow+0x1e0>
               if (rotation & 1)
 8002dd6:	4b1d      	ldr	r3, [pc, #116]	; (8002e4c <setAddrWindow+0x224>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d009      	beq.n	8002df6 <setAddrWindow+0x1ce>
                   y1 = y = (y1 << 8) | y;
 8002de2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002de6:	021b      	lsls	r3, r3, #8
 8002de8:	b21a      	sxth	r2, r3
 8002dea:	88bb      	ldrh	r3, [r7, #4]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	80bb      	strh	r3, [r7, #4]
 8002df0:	88bb      	ldrh	r3, [r7, #4]
 8002df2:	803b      	strh	r3, [r7, #0]
 8002df4:	e008      	b.n	8002e08 <setAddrWindow+0x1e0>
                   x1 = x = (x1 << 8) | x;
 8002df6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002dfa:	021b      	lsls	r3, r3, #8
 8002dfc:	b21a      	sxth	r2, r3
 8002dfe:	88fb      	ldrh	r3, [r7, #6]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	80fb      	strh	r3, [r7, #6]
 8002e04:	88fb      	ldrh	r3, [r7, #6]
 8002e06:	807b      	strh	r3, [r7, #2]
           WriteCmdData(_SC, x);
 8002e08:	4b12      	ldr	r3, [pc, #72]	; (8002e54 <setAddrWindow+0x22c>)
 8002e0a:	881b      	ldrh	r3, [r3, #0]
 8002e0c:	88fa      	ldrh	r2, [r7, #6]
 8002e0e:	4611      	mov	r1, r2
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7fd fc84 	bl	800071e <WriteCmdData>
           WriteCmdData(_SP, y);
 8002e16:	4b10      	ldr	r3, [pc, #64]	; (8002e58 <setAddrWindow+0x230>)
 8002e18:	881b      	ldrh	r3, [r3, #0]
 8002e1a:	88ba      	ldrh	r2, [r7, #4]
 8002e1c:	4611      	mov	r1, r2
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fd fc7d 	bl	800071e <WriteCmdData>
           WriteCmdData(_EC, x1);
 8002e24:	4b10      	ldr	r3, [pc, #64]	; (8002e68 <setAddrWindow+0x240>)
 8002e26:	881b      	ldrh	r3, [r3, #0]
 8002e28:	887a      	ldrh	r2, [r7, #2]
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7fd fc76 	bl	800071e <WriteCmdData>
           WriteCmdData(_EP, y1);
 8002e32:	4b0e      	ldr	r3, [pc, #56]	; (8002e6c <setAddrWindow+0x244>)
 8002e34:	881b      	ldrh	r3, [r3, #0]
 8002e36:	883a      	ldrh	r2, [r7, #0]
 8002e38:	4611      	mov	r1, r2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fd fc6f 	bl	800071e <WriteCmdData>
}
 8002e40:	bf00      	nop
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd90      	pop	{r4, r7, pc}
 8002e48:	2000008e 	.word	0x2000008e
 8002e4c:	20000088 	.word	0x20000088
 8002e50:	2000008c 	.word	0x2000008c
 8002e54:	2000009a 	.word	0x2000009a
 8002e58:	2000009e 	.word	0x2000009e
 8002e5c:	20000083 	.word	0x20000083
 8002e60:	20000094 	.word	0x20000094
 8002e64:	20000096 	.word	0x20000096
 8002e68:	2000009c 	.word	0x2000009c
 8002e6c:	200000a0 	.word	0x200000a0

08002e70 <vertScroll>:

void vertScroll(int16_t top, int16_t scrollines, int16_t offset)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4603      	mov	r3, r0
 8002e78:	80fb      	strh	r3, [r7, #6]
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	80bb      	strh	r3, [r7, #4]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	807b      	strh	r3, [r7, #2]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 8002e82:	4b89      	ldr	r3, [pc, #548]	; (80030a8 <vertScroll+0x238>)
 8002e84:	881b      	ldrh	r3, [r3, #0]
 8002e86:	f249 3227 	movw	r2, #37671	; 0x9327
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d10b      	bne.n	8002ea6 <vertScroll+0x36>
	    if (rotation == 2 || rotation == 3) top += OFFSET_9327;
 8002e8e:	4b87      	ldr	r3, [pc, #540]	; (80030ac <vertScroll+0x23c>)
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d003      	beq.n	8002e9e <vertScroll+0x2e>
 8002e96:	4b85      	ldr	r3, [pc, #532]	; (80030ac <vertScroll+0x23c>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	2b03      	cmp	r3, #3
 8002e9c:	d103      	bne.n	8002ea6 <vertScroll+0x36>
 8002e9e:	88fb      	ldrh	r3, [r7, #6]
 8002ea0:	3320      	adds	r3, #32
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	80fb      	strh	r3, [r7, #6]
    }
#endif
    int16_t bfa = HEIGHT - top - scrollines;  // bottom fixed area
 8002ea6:	88fa      	ldrh	r2, [r7, #6]
 8002ea8:	88bb      	ldrh	r3, [r7, #4]
 8002eaa:	4413      	add	r3, r2
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	82fb      	strh	r3, [r7, #22]
    int16_t vsp;
    int16_t sea = top;
 8002eb6:	88fb      	ldrh	r3, [r7, #6]
 8002eb8:	827b      	strh	r3, [r7, #18]
	if (_lcd_ID == 0x9327) bfa += 32;
 8002eba:	4b7b      	ldr	r3, [pc, #492]	; (80030a8 <vertScroll+0x238>)
 8002ebc:	881b      	ldrh	r3, [r3, #0]
 8002ebe:	f249 3227 	movw	r2, #37671	; 0x9327
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d103      	bne.n	8002ece <vertScroll+0x5e>
 8002ec6:	8afb      	ldrh	r3, [r7, #22]
 8002ec8:	3320      	adds	r3, #32
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	82fb      	strh	r3, [r7, #22]
    if (offset <= -scrollines || offset >= scrollines) offset = 0; //valid scroll
 8002ece:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002ed2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002ed6:	425b      	negs	r3, r3
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	dd05      	ble.n	8002ee8 <vertScroll+0x78>
 8002edc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002ee0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	db01      	blt.n	8002eec <vertScroll+0x7c>
 8002ee8:	2300      	movs	r3, #0
 8002eea:	807b      	strh	r3, [r7, #2]
	vsp = top + offset; // vertical start position
 8002eec:	88fa      	ldrh	r2, [r7, #6]
 8002eee:	887b      	ldrh	r3, [r7, #2]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	82bb      	strh	r3, [r7, #20]
    if (offset < 0)
 8002ef6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	da04      	bge.n	8002f08 <vertScroll+0x98>
        vsp += scrollines;          //keep in unsigned range
 8002efe:	8aba      	ldrh	r2, [r7, #20]
 8002f00:	88bb      	ldrh	r3, [r7, #4]
 8002f02:	4413      	add	r3, r2
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	82bb      	strh	r3, [r7, #20]
    sea = top + scrollines - 1;
 8002f08:	88fa      	ldrh	r2, [r7, #6]
 8002f0a:	88bb      	ldrh	r3, [r7, #4]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	3b01      	subs	r3, #1
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	827b      	strh	r3, [r7, #18]
    if (_lcd_capable & MIPI_DCS_REV1) {
 8002f16:	4b66      	ldr	r3, [pc, #408]	; (80030b0 <vertScroll+0x240>)
 8002f18:	881b      	ldrh	r3, [r3, #0]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d071      	beq.n	8003006 <vertScroll+0x196>
        uint8_t d[6];           // for multi-byte parameters
        d[0] = top >> 8;        //TFA
 8002f22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f26:	121b      	asrs	r3, r3, #8
 8002f28:	b21b      	sxth	r3, r3
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	733b      	strb	r3, [r7, #12]
        d[1] = top;
 8002f2e:	88fb      	ldrh	r3, [r7, #6]
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	737b      	strb	r3, [r7, #13]
        d[2] = scrollines >> 8; //VSA
 8002f34:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002f38:	121b      	asrs	r3, r3, #8
 8002f3a:	b21b      	sxth	r3, r3
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	73bb      	strb	r3, [r7, #14]
        d[3] = scrollines;
 8002f40:	88bb      	ldrh	r3, [r7, #4]
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	73fb      	strb	r3, [r7, #15]
        d[4] = bfa >> 8;        //BFA
 8002f46:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002f4a:	121b      	asrs	r3, r3, #8
 8002f4c:	b21b      	sxth	r3, r3
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	743b      	strb	r3, [r7, #16]
        d[5] = bfa;
 8002f52:	8afb      	ldrh	r3, [r7, #22]
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	747b      	strb	r3, [r7, #17]
        WriteCmdParamN(is8347 ? 0x0E : 0x33, 6, d);
 8002f58:	4b56      	ldr	r3, [pc, #344]	; (80030b4 <vertScroll+0x244>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <vertScroll+0xf4>
 8002f60:	230e      	movs	r3, #14
 8002f62:	e000      	b.n	8002f66 <vertScroll+0xf6>
 8002f64:	2333      	movs	r3, #51	; 0x33
 8002f66:	f107 020c 	add.w	r2, r7, #12
 8002f6a:	2106      	movs	r1, #6
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7fd fd93 	bl	8000a98 <WriteCmdParamN>
//        if (offset == 0 && rotation > 1) vsp = top + scrollines;   //make non-valid
		d[0] = vsp >> 8;        //VSP
 8002f72:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002f76:	121b      	asrs	r3, r3, #8
 8002f78:	b21b      	sxth	r3, r3
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	733b      	strb	r3, [r7, #12]
        d[1] = vsp;
 8002f7e:	8abb      	ldrh	r3, [r7, #20]
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	737b      	strb	r3, [r7, #13]
        WriteCmdParamN(is8347 ? 0x14 : 0x37, 2, d);
 8002f84:	4b4b      	ldr	r3, [pc, #300]	; (80030b4 <vertScroll+0x244>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <vertScroll+0x120>
 8002f8c:	2314      	movs	r3, #20
 8002f8e:	e000      	b.n	8002f92 <vertScroll+0x122>
 8002f90:	2337      	movs	r3, #55	; 0x37
 8002f92:	f107 020c 	add.w	r2, r7, #12
 8002f96:	2102      	movs	r1, #2
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7fd fd7d 	bl	8000a98 <WriteCmdParamN>
		if (is8347) {
 8002f9e:	4b45      	ldr	r3, [pc, #276]	; (80030b4 <vertScroll+0x244>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d01f      	beq.n	8002fe6 <vertScroll+0x176>
		    d[0] = (offset != 0) ? (_lcd_ID == 0x8347 ? 0x02 : 0x08) : 0;
 8002fa6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d009      	beq.n	8002fc2 <vertScroll+0x152>
 8002fae:	4b3e      	ldr	r3, [pc, #248]	; (80030a8 <vertScroll+0x238>)
 8002fb0:	881b      	ldrh	r3, [r3, #0]
 8002fb2:	f248 3247 	movw	r2, #33607	; 0x8347
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d101      	bne.n	8002fbe <vertScroll+0x14e>
 8002fba:	2302      	movs	r3, #2
 8002fbc:	e002      	b.n	8002fc4 <vertScroll+0x154>
 8002fbe:	2308      	movs	r3, #8
 8002fc0:	e000      	b.n	8002fc4 <vertScroll+0x154>
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	733b      	strb	r3, [r7, #12]
			WriteCmdParamN(_lcd_ID == 0x8347 ? 0x18 : 0x01, 1, d);  //HX8347-D
 8002fc6:	4b38      	ldr	r3, [pc, #224]	; (80030a8 <vertScroll+0x238>)
 8002fc8:	881b      	ldrh	r3, [r3, #0]
 8002fca:	f248 3247 	movw	r2, #33607	; 0x8347
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d101      	bne.n	8002fd6 <vertScroll+0x166>
 8002fd2:	2318      	movs	r3, #24
 8002fd4:	e000      	b.n	8002fd8 <vertScroll+0x168>
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	f107 020c 	add.w	r2, r7, #12
 8002fdc:	2101      	movs	r1, #1
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fd fd5a 	bl	8000a98 <WriteCmdParamN>
 8002fe4:	e05d      	b.n	80030a2 <vertScroll+0x232>
		} else if (offset == 0 && (_lcd_capable & MIPI_DCS_REV1)) {
 8002fe6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d159      	bne.n	80030a2 <vertScroll+0x232>
 8002fee:	4b30      	ldr	r3, [pc, #192]	; (80030b0 <vertScroll+0x240>)
 8002ff0:	881b      	ldrh	r3, [r3, #0]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d053      	beq.n	80030a2 <vertScroll+0x232>
			WriteCmdParamN(0x13, 0, NULL);    //NORMAL i.e. disable scroll
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	2013      	movs	r0, #19
 8003000:	f7fd fd4a 	bl	8000a98 <WriteCmdParamN>
 8003004:	e04d      	b.n	80030a2 <vertScroll+0x232>
		}
		return;
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 8003006:	4b28      	ldr	r3, [pc, #160]	; (80030a8 <vertScroll+0x238>)
 8003008:	881b      	ldrh	r3, [r3, #0]
 800300a:	f24b 5209 	movw	r2, #46345	; 0xb509
 800300e:	4293      	cmp	r3, r2
 8003010:	d027      	beq.n	8003062 <vertScroll+0x1f2>
 8003012:	f24b 5209 	movw	r2, #46345	; 0xb509
 8003016:	4293      	cmp	r3, r2
 8003018:	dc34      	bgt.n	8003084 <vertScroll+0x214>
 800301a:	f249 3226 	movw	r2, #37670	; 0x9326
 800301e:	4293      	cmp	r3, r2
 8003020:	d01f      	beq.n	8003062 <vertScroll+0x1f2>
 8003022:	f249 3226 	movw	r2, #37670	; 0x9326
 8003026:	4293      	cmp	r3, r2
 8003028:	dc2c      	bgt.n	8003084 <vertScroll+0x214>
 800302a:	f247 7293 	movw	r2, #30611	; 0x7793
 800302e:	4293      	cmp	r3, r2
 8003030:	d017      	beq.n	8003062 <vertScroll+0x1f2>
 8003032:	f247 7293 	movw	r2, #30611	; 0x7793
 8003036:	4293      	cmp	r3, r2
 8003038:	dc24      	bgt.n	8003084 <vertScroll+0x214>
 800303a:	f245 4220 	movw	r2, #21536	; 0x5420
 800303e:	4293      	cmp	r3, r2
 8003040:	d00f      	beq.n	8003062 <vertScroll+0x1f2>
 8003042:	f247 7283 	movw	r2, #30595	; 0x7783
 8003046:	4293      	cmp	r3, r2
 8003048:	d11c      	bne.n	8003084 <vertScroll+0x214>
    case 0x7783:
        WriteCmdData(0x61, _lcd_rev);   //!NDL, !VLE, REV
 800304a:	4b1b      	ldr	r3, [pc, #108]	; (80030b8 <vertScroll+0x248>)
 800304c:	881b      	ldrh	r3, [r3, #0]
 800304e:	4619      	mov	r1, r3
 8003050:	2061      	movs	r0, #97	; 0x61
 8003052:	f7fd fb64 	bl	800071e <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 8003056:	8abb      	ldrh	r3, [r7, #20]
 8003058:	4619      	mov	r1, r3
 800305a:	206a      	movs	r0, #106	; 0x6a
 800305c:	f7fd fb5f 	bl	800071e <WriteCmdData>
        break;
 8003060:	e01f      	b.n	80030a2 <vertScroll+0x232>
#endif
	case 0x5420:
    case 0x7793:
	case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //VLE, REV
 8003062:	4b15      	ldr	r3, [pc, #84]	; (80030b8 <vertScroll+0x248>)
 8003064:	881b      	ldrh	r3, [r3, #0]
 8003066:	f043 0302 	orr.w	r3, r3, #2
 800306a:	b29b      	uxth	r3, r3
 800306c:	4619      	mov	r1, r3
 800306e:	f240 4001 	movw	r0, #1025	; 0x401
 8003072:	f7fd fb54 	bl	800071e <WriteCmdData>
        WriteCmdData(0x404, vsp);       //VL#
 8003076:	8abb      	ldrh	r3, [r7, #20]
 8003078:	4619      	mov	r1, r3
 800307a:	f240 4004 	movw	r0, #1028	; 0x404
 800307e:	f7fd fb4e 	bl	800071e <WriteCmdData>
        break;
 8003082:	e00e      	b.n	80030a2 <vertScroll+0x232>
    default:
        // 0x6809, 0x9320, 0x9325, 0x9335, 0xB505 can only scroll whole screen
        WriteCmdData(0x61, (1 << 1) | _lcd_rev);        //!NDL, VLE, REV
 8003084:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <vertScroll+0x248>)
 8003086:	881b      	ldrh	r3, [r3, #0]
 8003088:	f043 0302 	orr.w	r3, r3, #2
 800308c:	b29b      	uxth	r3, r3
 800308e:	4619      	mov	r1, r3
 8003090:	2061      	movs	r0, #97	; 0x61
 8003092:	f7fd fb44 	bl	800071e <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 8003096:	8abb      	ldrh	r3, [r7, #20]
 8003098:	4619      	mov	r1, r3
 800309a:	206a      	movs	r0, #106	; 0x6a
 800309c:	f7fd fb3f 	bl	800071e <WriteCmdData>
        break;
 80030a0:	bf00      	nop
    }
}
 80030a2:	3718      	adds	r7, #24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	2000008e 	.word	0x2000008e
 80030ac:	20000088 	.word	0x20000088
 80030b0:	2000008c 	.word	0x2000008c
 80030b4:	20000083 	.word	0x20000083
 80030b8:	20000090 	.word	0x20000090

080030bc <fillScreen>:
    pushColors_any(_MW, (uint8_t *)block, n, first, bigend ? 3 : 1);
}


void fillScreen(uint16_t color)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af02      	add	r7, sp, #8
 80030c2:	4603      	mov	r3, r0
 80030c4:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 80030c6:	4b08      	ldr	r3, [pc, #32]	; (80030e8 <fillScreen+0x2c>)
 80030c8:	881b      	ldrh	r3, [r3, #0]
 80030ca:	b21a      	sxth	r2, r3
 80030cc:	4b07      	ldr	r3, [pc, #28]	; (80030ec <fillScreen+0x30>)
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	b219      	sxth	r1, r3
 80030d2:	88fb      	ldrh	r3, [r7, #6]
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	460b      	mov	r3, r1
 80030d8:	2100      	movs	r1, #0
 80030da:	2000      	movs	r0, #0
 80030dc:	f000 fbee 	bl	80038bc <fillRect>
}
 80030e0:	bf00      	nop
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	20000004 	.word	0x20000004
 80030ec:	20000006 	.word	0x20000006

080030f0 <invertDisplay>:

void invertDisplay(uint8_t i)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4603      	mov	r3, r0
 80030f8:	71fb      	strb	r3, [r7, #7]
    uint8_t val;
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0) ^ i;
 80030fa:	4b4c      	ldr	r3, [pc, #304]	; (800322c <invertDisplay+0x13c>)
 80030fc:	881b      	ldrh	r3, [r3, #0]
 80030fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003102:	2b00      	cmp	r3, #0
 8003104:	bf14      	ite	ne
 8003106:	2301      	movne	r3, #1
 8003108:	2300      	moveq	r3, #0
 800310a:	b2db      	uxtb	r3, r3
 800310c:	b21a      	sxth	r2, r3
 800310e:	79fb      	ldrb	r3, [r7, #7]
 8003110:	b21b      	sxth	r3, r3
 8003112:	4053      	eors	r3, r2
 8003114:	b21b      	sxth	r3, r3
 8003116:	b29a      	uxth	r2, r3
 8003118:	4b45      	ldr	r3, [pc, #276]	; (8003230 <invertDisplay+0x140>)
 800311a:	801a      	strh	r2, [r3, #0]
    if (_lcd_capable & MIPI_DCS_REV1) {
 800311c:	4b43      	ldr	r3, [pc, #268]	; (800322c <invertDisplay+0x13c>)
 800311e:	881b      	ldrh	r3, [r3, #0]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b00      	cmp	r3, #0
 8003126:	d035      	beq.n	8003194 <invertDisplay+0xa4>
        if (is8347) {
 8003128:	4b42      	ldr	r3, [pc, #264]	; (8003234 <invertDisplay+0x144>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d024      	beq.n	800317a <invertDisplay+0x8a>
            // HX8347D: 0x36 Panel Characteristic. REV_Panel
            // HX8347A: 0x36 is Display Control 10
            if (_lcd_ID == 0x8347 || _lcd_ID == 0x5252) // HX8347-A, HX5352-A
 8003130:	4b41      	ldr	r3, [pc, #260]	; (8003238 <invertDisplay+0x148>)
 8003132:	881b      	ldrh	r3, [r3, #0]
 8003134:	f248 3247 	movw	r2, #33607	; 0x8347
 8003138:	4293      	cmp	r3, r2
 800313a:	d005      	beq.n	8003148 <invertDisplay+0x58>
 800313c:	4b3e      	ldr	r3, [pc, #248]	; (8003238 <invertDisplay+0x148>)
 800313e:	881b      	ldrh	r3, [r3, #0]
 8003140:	f245 2252 	movw	r2, #21074	; 0x5252
 8003144:	4293      	cmp	r3, r2
 8003146:	d108      	bne.n	800315a <invertDisplay+0x6a>
			    val = _lcd_rev ? 6 : 2;       //INVON id bit#2,  NORON=bit#1
 8003148:	4b39      	ldr	r3, [pc, #228]	; (8003230 <invertDisplay+0x140>)
 800314a:	881b      	ldrh	r3, [r3, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <invertDisplay+0x64>
 8003150:	2306      	movs	r3, #6
 8003152:	e000      	b.n	8003156 <invertDisplay+0x66>
 8003154:	2302      	movs	r3, #2
 8003156:	73fb      	strb	r3, [r7, #15]
 8003158:	e007      	b.n	800316a <invertDisplay+0x7a>
            else val = _lcd_rev ? 8 : 10;     //HX8347-D, G, I: SCROLLON=bit3, INVON=bit1
 800315a:	4b35      	ldr	r3, [pc, #212]	; (8003230 <invertDisplay+0x140>)
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <invertDisplay+0x76>
 8003162:	2308      	movs	r3, #8
 8003164:	e000      	b.n	8003168 <invertDisplay+0x78>
 8003166:	230a      	movs	r3, #10
 8003168:	73fb      	strb	r3, [r7, #15]
            // HX8347: 0x01 Display Mode has diff bit mapping for A, D
            WriteCmdParamN(0x01, 1, &val);
 800316a:	f107 030f 	add.w	r3, r7, #15
 800316e:	461a      	mov	r2, r3
 8003170:	2101      	movs	r1, #1
 8003172:	2001      	movs	r0, #1
 8003174:	f7fd fc90 	bl	8000a98 <WriteCmdParamN>
        } else
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
        return;
 8003178:	e055      	b.n	8003226 <invertDisplay+0x136>
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
 800317a:	4b2d      	ldr	r3, [pc, #180]	; (8003230 <invertDisplay+0x140>)
 800317c:	881b      	ldrh	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <invertDisplay+0x96>
 8003182:	2321      	movs	r3, #33	; 0x21
 8003184:	e000      	b.n	8003188 <invertDisplay+0x98>
 8003186:	2320      	movs	r3, #32
 8003188:	2200      	movs	r2, #0
 800318a:	2100      	movs	r1, #0
 800318c:	4618      	mov	r0, r3
 800318e:	f7fd fc83 	bl	8000a98 <WriteCmdParamN>
 8003192:	e048      	b.n	8003226 <invertDisplay+0x136>
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 8003194:	4b28      	ldr	r3, [pc, #160]	; (8003238 <invertDisplay+0x148>)
 8003196:	881b      	ldrh	r3, [r3, #0]
 8003198:	f24b 5209 	movw	r2, #46345	; 0xb509
 800319c:	4293      	cmp	r3, r2
 800319e:	d030      	beq.n	8003202 <invertDisplay+0x112>
 80031a0:	f24b 5209 	movw	r2, #46345	; 0xb509
 80031a4:	4293      	cmp	r3, r2
 80031a6:	dc37      	bgt.n	8003218 <invertDisplay+0x128>
 80031a8:	f249 3226 	movw	r2, #37670	; 0x9326
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d028      	beq.n	8003202 <invertDisplay+0x112>
 80031b0:	f249 3226 	movw	r2, #37670	; 0x9326
 80031b4:	4293      	cmp	r3, r2
 80031b6:	dc2f      	bgt.n	8003218 <invertDisplay+0x128>
 80031b8:	f249 2225 	movw	r2, #37413	; 0x9225
 80031bc:	4293      	cmp	r3, r2
 80031be:	d013      	beq.n	80031e8 <invertDisplay+0xf8>
 80031c0:	f249 2225 	movw	r2, #37413	; 0x9225
 80031c4:	4293      	cmp	r3, r2
 80031c6:	dc27      	bgt.n	8003218 <invertDisplay+0x128>
 80031c8:	f247 7293 	movw	r2, #30611	; 0x7793
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d018      	beq.n	8003202 <invertDisplay+0x112>
 80031d0:	f247 7293 	movw	r2, #30611	; 0x7793
 80031d4:	4293      	cmp	r3, r2
 80031d6:	dc1f      	bgt.n	8003218 <invertDisplay+0x128>
 80031d8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80031dc:	d004      	beq.n	80031e8 <invertDisplay+0xf8>
 80031de:	f245 4220 	movw	r2, #21536	; 0x5420
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d00d      	beq.n	8003202 <invertDisplay+0x112>
 80031e6:	e017      	b.n	8003218 <invertDisplay+0x128>
#ifdef SUPPORT_0139
    case 0x0139:
#endif
    case 0x9225:                                        //REV is in reg(0x07) like Samsung
    case 0x0154:
        WriteCmdData(0x07, 0x13 | (_lcd_rev << 2));     //.kbv kludge
 80031e8:	4b11      	ldr	r3, [pc, #68]	; (8003230 <invertDisplay+0x140>)
 80031ea:	881b      	ldrh	r3, [r3, #0]
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	b21b      	sxth	r3, r3
 80031f0:	f043 0313 	orr.w	r3, r3, #19
 80031f4:	b21b      	sxth	r3, r3
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	4619      	mov	r1, r3
 80031fa:	2007      	movs	r0, #7
 80031fc:	f7fd fa8f 	bl	800071e <WriteCmdData>
        break;
 8003200:	e011      	b.n	8003226 <invertDisplay+0x136>
#endif
	case 0x5420:
    case 0x7793:
    case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //.kbv kludge VLE
 8003202:	4b0b      	ldr	r3, [pc, #44]	; (8003230 <invertDisplay+0x140>)
 8003204:	881b      	ldrh	r3, [r3, #0]
 8003206:	f043 0302 	orr.w	r3, r3, #2
 800320a:	b29b      	uxth	r3, r3
 800320c:	4619      	mov	r1, r3
 800320e:	f240 4001 	movw	r0, #1025	; 0x401
 8003212:	f7fd fa84 	bl	800071e <WriteCmdData>
        break;
 8003216:	e006      	b.n	8003226 <invertDisplay+0x136>
    default:
        WriteCmdData(0x61, _lcd_rev);
 8003218:	4b05      	ldr	r3, [pc, #20]	; (8003230 <invertDisplay+0x140>)
 800321a:	881b      	ldrh	r3, [r3, #0]
 800321c:	4619      	mov	r1, r3
 800321e:	2061      	movs	r0, #97	; 0x61
 8003220:	f7fd fa7d 	bl	800071e <WriteCmdData>
        break;
 8003224:	bf00      	nop
    }
}
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	2000008c 	.word	0x2000008c
 8003230:	20000090 	.word	0x20000090
 8003234:	20000083 	.word	0x20000083
 8003238:	2000008e 	.word	0x2000008e

0800323c <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 800323c:	b590      	push	{r4, r7, lr}
 800323e:	b085      	sub	sp, #20
 8003240:	af02      	add	r7, sp, #8
 8003242:	4604      	mov	r4, r0
 8003244:	4608      	mov	r0, r1
 8003246:	4611      	mov	r1, r2
 8003248:	461a      	mov	r2, r3
 800324a:	4623      	mov	r3, r4
 800324c:	80fb      	strh	r3, [r7, #6]
 800324e:	4603      	mov	r3, r0
 8003250:	80bb      	strh	r3, [r7, #4]
 8003252:	460b      	mov	r3, r1
 8003254:	807b      	strh	r3, [r7, #2]
 8003256:	4613      	mov	r3, r2
 8003258:	803b      	strh	r3, [r7, #0]
	fillRect(x, y, 1, h, color);
 800325a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800325e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003262:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003266:	883b      	ldrh	r3, [r7, #0]
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	4613      	mov	r3, r2
 800326c:	2201      	movs	r2, #1
 800326e:	f000 fb25 	bl	80038bc <fillRect>
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	bd90      	pop	{r4, r7, pc}

0800327a <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 800327a:	b590      	push	{r4, r7, lr}
 800327c:	b085      	sub	sp, #20
 800327e:	af02      	add	r7, sp, #8
 8003280:	4604      	mov	r4, r0
 8003282:	4608      	mov	r0, r1
 8003284:	4611      	mov	r1, r2
 8003286:	461a      	mov	r2, r3
 8003288:	4623      	mov	r3, r4
 800328a:	80fb      	strh	r3, [r7, #6]
 800328c:	4603      	mov	r3, r0
 800328e:	80bb      	strh	r3, [r7, #4]
 8003290:	460b      	mov	r3, r1
 8003292:	807b      	strh	r3, [r7, #2]
 8003294:	4613      	mov	r3, r2
 8003296:	803b      	strh	r3, [r7, #0]
	fillRect(x, y, w, 1, color);
 8003298:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800329c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80032a0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80032a4:	883b      	ldrh	r3, [r7, #0]
 80032a6:	9300      	str	r3, [sp, #0]
 80032a8:	2301      	movs	r3, #1
 80032aa:	f000 fb07 	bl	80038bc <fillRect>
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd90      	pop	{r4, r7, pc}

080032b6 <writePixel>:

void writePixel(int16_t x, int16_t y, uint16_t color)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b082      	sub	sp, #8
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	4603      	mov	r3, r0
 80032be:	80fb      	strh	r3, [r7, #6]
 80032c0:	460b      	mov	r3, r1
 80032c2:	80bb      	strh	r3, [r7, #4]
 80032c4:	4613      	mov	r3, r2
 80032c6:	807b      	strh	r3, [r7, #2]
    drawPixel(x, y, color);
 80032c8:	887a      	ldrh	r2, [r7, #2]
 80032ca:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80032ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff fbf2 	bl	8002abc <drawPixel>
}
 80032d8:	bf00      	nop
 80032da:	3708      	adds	r7, #8
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
 80032e0:	b590      	push	{r4, r7, lr}
 80032e2:	b089      	sub	sp, #36	; 0x24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	4604      	mov	r4, r0
 80032e8:	4608      	mov	r0, r1
 80032ea:	4611      	mov	r1, r2
 80032ec:	461a      	mov	r2, r3
 80032ee:	4623      	mov	r3, r4
 80032f0:	80fb      	strh	r3, [r7, #6]
 80032f2:	4603      	mov	r3, r0
 80032f4:	80bb      	strh	r3, [r7, #4]
 80032f6:	460b      	mov	r3, r1
 80032f8:	807b      	strh	r3, [r7, #2]
 80032fa:	4613      	mov	r3, r2
 80032fc:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80032fe:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003302:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800330c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003310:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8003314:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003318:	1acb      	subs	r3, r1, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	bfb8      	it	lt
 800331e:	425b      	neglt	r3, r3
 8003320:	429a      	cmp	r2, r3
 8003322:	bfcc      	ite	gt
 8003324:	2301      	movgt	r3, #1
 8003326:	2300      	movle	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	837b      	strh	r3, [r7, #26]
    if (steep) {
 800332c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00b      	beq.n	800334c <writeLine+0x6c>
        _swap_int16_t(x0, y0);
 8003334:	88fb      	ldrh	r3, [r7, #6]
 8003336:	833b      	strh	r3, [r7, #24]
 8003338:	88bb      	ldrh	r3, [r7, #4]
 800333a:	80fb      	strh	r3, [r7, #6]
 800333c:	8b3b      	ldrh	r3, [r7, #24]
 800333e:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 8003340:	887b      	ldrh	r3, [r7, #2]
 8003342:	82fb      	strh	r3, [r7, #22]
 8003344:	883b      	ldrh	r3, [r7, #0]
 8003346:	807b      	strh	r3, [r7, #2]
 8003348:	8afb      	ldrh	r3, [r7, #22]
 800334a:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 800334c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003350:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003354:	429a      	cmp	r2, r3
 8003356:	dd0b      	ble.n	8003370 <writeLine+0x90>
        _swap_int16_t(x0, x1);
 8003358:	88fb      	ldrh	r3, [r7, #6]
 800335a:	82bb      	strh	r3, [r7, #20]
 800335c:	887b      	ldrh	r3, [r7, #2]
 800335e:	80fb      	strh	r3, [r7, #6]
 8003360:	8abb      	ldrh	r3, [r7, #20]
 8003362:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 8003364:	88bb      	ldrh	r3, [r7, #4]
 8003366:	827b      	strh	r3, [r7, #18]
 8003368:	883b      	ldrh	r3, [r7, #0]
 800336a:	80bb      	strh	r3, [r7, #4]
 800336c:	8a7b      	ldrh	r3, [r7, #18]
 800336e:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 8003370:	887a      	ldrh	r2, [r7, #2]
 8003372:	88fb      	ldrh	r3, [r7, #6]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	b29b      	uxth	r3, r3
 8003378:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
 800337a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800337e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b00      	cmp	r3, #0
 8003386:	bfb8      	it	lt
 8003388:	425b      	neglt	r3, r3
 800338a:	81fb      	strh	r3, [r7, #14]

    int16_t err = dx / 2;
 800338c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003390:	0fda      	lsrs	r2, r3, #31
 8003392:	4413      	add	r3, r2
 8003394:	105b      	asrs	r3, r3, #1
 8003396:	83fb      	strh	r3, [r7, #30]
    int16_t ystep;

    if (y0 < y1) {
 8003398:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800339c:	f9b7 3000 	ldrsh.w	r3, [r7]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	da02      	bge.n	80033aa <writeLine+0xca>
        ystep = 1;
 80033a4:	2301      	movs	r3, #1
 80033a6:	83bb      	strh	r3, [r7, #28]
 80033a8:	e031      	b.n	800340e <writeLine+0x12e>
    } else {
        ystep = -1;
 80033aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033ae:	83bb      	strh	r3, [r7, #28]
    }

    for (; x0<=x1; x0++) {
 80033b0:	e02d      	b.n	800340e <writeLine+0x12e>
        if (steep) {
 80033b2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d008      	beq.n	80033cc <writeLine+0xec>
            writePixel(y0, x0, color);
 80033ba:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80033bc:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80033c0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff ff76 	bl	80032b6 <writePixel>
 80033ca:	e007      	b.n	80033dc <writeLine+0xfc>
        } else {
            writePixel(x0, y0, color);
 80033cc:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80033ce:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80033d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7ff ff6d 	bl	80032b6 <writePixel>
        }
        err -= dy;
 80033dc:	8bfa      	ldrh	r2, [r7, #30]
 80033de:	89fb      	ldrh	r3, [r7, #14]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	83fb      	strh	r3, [r7, #30]
        if (err < 0) {
 80033e6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	da09      	bge.n	8003402 <writeLine+0x122>
            y0 += ystep;
 80033ee:	88ba      	ldrh	r2, [r7, #4]
 80033f0:	8bbb      	ldrh	r3, [r7, #28]
 80033f2:	4413      	add	r3, r2
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	80bb      	strh	r3, [r7, #4]
            err += dx;
 80033f8:	8bfa      	ldrh	r2, [r7, #30]
 80033fa:	8a3b      	ldrh	r3, [r7, #16]
 80033fc:	4413      	add	r3, r2
 80033fe:	b29b      	uxth	r3, r3
 8003400:	83fb      	strh	r3, [r7, #30]
    for (; x0<=x1; x0++) {
 8003402:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003406:	b29b      	uxth	r3, r3
 8003408:	3301      	adds	r3, #1
 800340a:	b29b      	uxth	r3, r3
 800340c:	80fb      	strh	r3, [r7, #6]
 800340e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003412:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003416:	429a      	cmp	r2, r3
 8003418:	ddcb      	ble.n	80033b2 <writeLine+0xd2>
        }
    }
}
 800341a:	bf00      	nop
 800341c:	bf00      	nop
 800341e:	3724      	adds	r7, #36	; 0x24
 8003420:	46bd      	mov	sp, r7
 8003422:	bd90      	pop	{r4, r7, pc}

08003424 <drawLine>:


void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8003424:	b590      	push	{r4, r7, lr}
 8003426:	b087      	sub	sp, #28
 8003428:	af02      	add	r7, sp, #8
 800342a:	4604      	mov	r4, r0
 800342c:	4608      	mov	r0, r1
 800342e:	4611      	mov	r1, r2
 8003430:	461a      	mov	r2, r3
 8003432:	4623      	mov	r3, r4
 8003434:	80fb      	strh	r3, [r7, #6]
 8003436:	4603      	mov	r3, r0
 8003438:	80bb      	strh	r3, [r7, #4]
 800343a:	460b      	mov	r3, r1
 800343c:	807b      	strh	r3, [r7, #2]
 800343e:	4613      	mov	r3, r2
 8003440:	803b      	strh	r3, [r7, #0]
    if(x0 == x1){
 8003442:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003446:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800344a:	429a      	cmp	r2, r3
 800344c:	d11a      	bne.n	8003484 <drawLine+0x60>
        if(y0 > y1) _swap_int16_t(y0, y1);
 800344e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003452:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003456:	429a      	cmp	r2, r3
 8003458:	dd05      	ble.n	8003466 <drawLine+0x42>
 800345a:	88bb      	ldrh	r3, [r7, #4]
 800345c:	81bb      	strh	r3, [r7, #12]
 800345e:	883b      	ldrh	r3, [r7, #0]
 8003460:	80bb      	strh	r3, [r7, #4]
 8003462:	89bb      	ldrh	r3, [r7, #12]
 8003464:	803b      	strh	r3, [r7, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 8003466:	883a      	ldrh	r2, [r7, #0]
 8003468:	88bb      	ldrh	r3, [r7, #4]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	b29b      	uxth	r3, r3
 800346e:	3301      	adds	r3, #1
 8003470:	b29b      	uxth	r3, r3
 8003472:	b21a      	sxth	r2, r3
 8003474:	8c3b      	ldrh	r3, [r7, #32]
 8003476:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800347a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800347e:	f7ff fedd 	bl	800323c <drawFastVLine>
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
 8003482:	e02d      	b.n	80034e0 <drawLine+0xbc>
    } else if(y0 == y1){
 8003484:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003488:	f9b7 3000 	ldrsh.w	r3, [r7]
 800348c:	429a      	cmp	r2, r3
 800348e:	d11a      	bne.n	80034c6 <drawLine+0xa2>
        if(x0 > x1) _swap_int16_t(x0, x1);
 8003490:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003494:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003498:	429a      	cmp	r2, r3
 800349a:	dd05      	ble.n	80034a8 <drawLine+0x84>
 800349c:	88fb      	ldrh	r3, [r7, #6]
 800349e:	81fb      	strh	r3, [r7, #14]
 80034a0:	887b      	ldrh	r3, [r7, #2]
 80034a2:	80fb      	strh	r3, [r7, #6]
 80034a4:	89fb      	ldrh	r3, [r7, #14]
 80034a6:	807b      	strh	r3, [r7, #2]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 80034a8:	887a      	ldrh	r2, [r7, #2]
 80034aa:	88fb      	ldrh	r3, [r7, #6]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	3301      	adds	r3, #1
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	b21a      	sxth	r2, r3
 80034b6:	8c3b      	ldrh	r3, [r7, #32]
 80034b8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80034bc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80034c0:	f7ff fedb 	bl	800327a <drawFastHLine>
}
 80034c4:	e00c      	b.n	80034e0 <drawLine+0xbc>
        writeLine(x0, y0, x1, y1, color);
 80034c6:	f9b7 4000 	ldrsh.w	r4, [r7]
 80034ca:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80034ce:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80034d2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80034d6:	8c3b      	ldrh	r3, [r7, #32]
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	4623      	mov	r3, r4
 80034dc:	f7ff ff00 	bl	80032e0 <writeLine>
}
 80034e0:	bf00      	nop
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd90      	pop	{r4, r7, pc}

080034e8 <drawCircle>:

void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 80034e8:	b590      	push	{r4, r7, lr}
 80034ea:	b087      	sub	sp, #28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	4604      	mov	r4, r0
 80034f0:	4608      	mov	r0, r1
 80034f2:	4611      	mov	r1, r2
 80034f4:	461a      	mov	r2, r3
 80034f6:	4623      	mov	r3, r4
 80034f8:	80fb      	strh	r3, [r7, #6]
 80034fa:	4603      	mov	r3, r0
 80034fc:	80bb      	strh	r3, [r7, #4]
 80034fe:	460b      	mov	r3, r1
 8003500:	807b      	strh	r3, [r7, #2]
 8003502:	4613      	mov	r3, r2
 8003504:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 8003506:	887b      	ldrh	r3, [r7, #2]
 8003508:	f1c3 0301 	rsb	r3, r3, #1
 800350c:	b29b      	uxth	r3, r3
 800350e:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8003510:	2301      	movs	r3, #1
 8003512:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8003514:	887b      	ldrh	r3, [r7, #2]
 8003516:	461a      	mov	r2, r3
 8003518:	03d2      	lsls	r2, r2, #15
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	b29b      	uxth	r3, r3
 8003520:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 8003522:	2300      	movs	r3, #0
 8003524:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 8003526:	887b      	ldrh	r3, [r7, #2]
 8003528:	81fb      	strh	r3, [r7, #14]

    writePixel(x0  , y0+r, color);
 800352a:	88ba      	ldrh	r2, [r7, #4]
 800352c:	887b      	ldrh	r3, [r7, #2]
 800352e:	4413      	add	r3, r2
 8003530:	b29b      	uxth	r3, r3
 8003532:	b219      	sxth	r1, r3
 8003534:	883a      	ldrh	r2, [r7, #0]
 8003536:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800353a:	4618      	mov	r0, r3
 800353c:	f7ff febb 	bl	80032b6 <writePixel>
    writePixel(x0  , y0-r, color);
 8003540:	88ba      	ldrh	r2, [r7, #4]
 8003542:	887b      	ldrh	r3, [r7, #2]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	b29b      	uxth	r3, r3
 8003548:	b219      	sxth	r1, r3
 800354a:	883a      	ldrh	r2, [r7, #0]
 800354c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003550:	4618      	mov	r0, r3
 8003552:	f7ff feb0 	bl	80032b6 <writePixel>
    writePixel(x0+r, y0  , color);
 8003556:	88fa      	ldrh	r2, [r7, #6]
 8003558:	887b      	ldrh	r3, [r7, #2]
 800355a:	4413      	add	r3, r2
 800355c:	b29b      	uxth	r3, r3
 800355e:	b21b      	sxth	r3, r3
 8003560:	883a      	ldrh	r2, [r7, #0]
 8003562:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff fea5 	bl	80032b6 <writePixel>
    writePixel(x0-r, y0  , color);
 800356c:	88fa      	ldrh	r2, [r7, #6]
 800356e:	887b      	ldrh	r3, [r7, #2]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	b29b      	uxth	r3, r3
 8003574:	b21b      	sxth	r3, r3
 8003576:	883a      	ldrh	r2, [r7, #0]
 8003578:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff fe9a 	bl	80032b6 <writePixel>

    while (x<y) {
 8003582:	e091      	b.n	80036a8 <drawCircle+0x1c0>
        if (f >= 0) {
 8003584:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003588:	2b00      	cmp	r3, #0
 800358a:	db0e      	blt.n	80035aa <drawCircle+0xc2>
            y--;
 800358c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003590:	b29b      	uxth	r3, r3
 8003592:	3b01      	subs	r3, #1
 8003594:	b29b      	uxth	r3, r3
 8003596:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8003598:	8a7b      	ldrh	r3, [r7, #18]
 800359a:	3302      	adds	r3, #2
 800359c:	b29b      	uxth	r3, r3
 800359e:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 80035a0:	8afa      	ldrh	r2, [r7, #22]
 80035a2:	8a7b      	ldrh	r3, [r7, #18]
 80035a4:	4413      	add	r3, r2
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80035aa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	3301      	adds	r3, #1
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80035b6:	8abb      	ldrh	r3, [r7, #20]
 80035b8:	3302      	adds	r3, #2
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 80035be:	8afa      	ldrh	r2, [r7, #22]
 80035c0:	8abb      	ldrh	r3, [r7, #20]
 80035c2:	4413      	add	r3, r2
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	82fb      	strh	r3, [r7, #22]

        writePixel(x0 + x, y0 + y, color);
 80035c8:	88fa      	ldrh	r2, [r7, #6]
 80035ca:	8a3b      	ldrh	r3, [r7, #16]
 80035cc:	4413      	add	r3, r2
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	b218      	sxth	r0, r3
 80035d2:	88ba      	ldrh	r2, [r7, #4]
 80035d4:	89fb      	ldrh	r3, [r7, #14]
 80035d6:	4413      	add	r3, r2
 80035d8:	b29b      	uxth	r3, r3
 80035da:	b21b      	sxth	r3, r3
 80035dc:	883a      	ldrh	r2, [r7, #0]
 80035de:	4619      	mov	r1, r3
 80035e0:	f7ff fe69 	bl	80032b6 <writePixel>
        writePixel(x0 - x, y0 + y, color);
 80035e4:	88fa      	ldrh	r2, [r7, #6]
 80035e6:	8a3b      	ldrh	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	b218      	sxth	r0, r3
 80035ee:	88ba      	ldrh	r2, [r7, #4]
 80035f0:	89fb      	ldrh	r3, [r7, #14]
 80035f2:	4413      	add	r3, r2
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	b21b      	sxth	r3, r3
 80035f8:	883a      	ldrh	r2, [r7, #0]
 80035fa:	4619      	mov	r1, r3
 80035fc:	f7ff fe5b 	bl	80032b6 <writePixel>
        writePixel(x0 + x, y0 - y, color);
 8003600:	88fa      	ldrh	r2, [r7, #6]
 8003602:	8a3b      	ldrh	r3, [r7, #16]
 8003604:	4413      	add	r3, r2
 8003606:	b29b      	uxth	r3, r3
 8003608:	b218      	sxth	r0, r3
 800360a:	88ba      	ldrh	r2, [r7, #4]
 800360c:	89fb      	ldrh	r3, [r7, #14]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	b29b      	uxth	r3, r3
 8003612:	b21b      	sxth	r3, r3
 8003614:	883a      	ldrh	r2, [r7, #0]
 8003616:	4619      	mov	r1, r3
 8003618:	f7ff fe4d 	bl	80032b6 <writePixel>
        writePixel(x0 - x, y0 - y, color);
 800361c:	88fa      	ldrh	r2, [r7, #6]
 800361e:	8a3b      	ldrh	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	b29b      	uxth	r3, r3
 8003624:	b218      	sxth	r0, r3
 8003626:	88ba      	ldrh	r2, [r7, #4]
 8003628:	89fb      	ldrh	r3, [r7, #14]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	b29b      	uxth	r3, r3
 800362e:	b21b      	sxth	r3, r3
 8003630:	883a      	ldrh	r2, [r7, #0]
 8003632:	4619      	mov	r1, r3
 8003634:	f7ff fe3f 	bl	80032b6 <writePixel>
        writePixel(x0 + y, y0 + x, color);
 8003638:	88fa      	ldrh	r2, [r7, #6]
 800363a:	89fb      	ldrh	r3, [r7, #14]
 800363c:	4413      	add	r3, r2
 800363e:	b29b      	uxth	r3, r3
 8003640:	b218      	sxth	r0, r3
 8003642:	88ba      	ldrh	r2, [r7, #4]
 8003644:	8a3b      	ldrh	r3, [r7, #16]
 8003646:	4413      	add	r3, r2
 8003648:	b29b      	uxth	r3, r3
 800364a:	b21b      	sxth	r3, r3
 800364c:	883a      	ldrh	r2, [r7, #0]
 800364e:	4619      	mov	r1, r3
 8003650:	f7ff fe31 	bl	80032b6 <writePixel>
        writePixel(x0 - y, y0 + x, color);
 8003654:	88fa      	ldrh	r2, [r7, #6]
 8003656:	89fb      	ldrh	r3, [r7, #14]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	b29b      	uxth	r3, r3
 800365c:	b218      	sxth	r0, r3
 800365e:	88ba      	ldrh	r2, [r7, #4]
 8003660:	8a3b      	ldrh	r3, [r7, #16]
 8003662:	4413      	add	r3, r2
 8003664:	b29b      	uxth	r3, r3
 8003666:	b21b      	sxth	r3, r3
 8003668:	883a      	ldrh	r2, [r7, #0]
 800366a:	4619      	mov	r1, r3
 800366c:	f7ff fe23 	bl	80032b6 <writePixel>
        writePixel(x0 + y, y0 - x, color);
 8003670:	88fa      	ldrh	r2, [r7, #6]
 8003672:	89fb      	ldrh	r3, [r7, #14]
 8003674:	4413      	add	r3, r2
 8003676:	b29b      	uxth	r3, r3
 8003678:	b218      	sxth	r0, r3
 800367a:	88ba      	ldrh	r2, [r7, #4]
 800367c:	8a3b      	ldrh	r3, [r7, #16]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	b29b      	uxth	r3, r3
 8003682:	b21b      	sxth	r3, r3
 8003684:	883a      	ldrh	r2, [r7, #0]
 8003686:	4619      	mov	r1, r3
 8003688:	f7ff fe15 	bl	80032b6 <writePixel>
        writePixel(x0 - y, y0 - x, color);
 800368c:	88fa      	ldrh	r2, [r7, #6]
 800368e:	89fb      	ldrh	r3, [r7, #14]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	b29b      	uxth	r3, r3
 8003694:	b218      	sxth	r0, r3
 8003696:	88ba      	ldrh	r2, [r7, #4]
 8003698:	8a3b      	ldrh	r3, [r7, #16]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	b29b      	uxth	r3, r3
 800369e:	b21b      	sxth	r3, r3
 80036a0:	883a      	ldrh	r2, [r7, #0]
 80036a2:	4619      	mov	r1, r3
 80036a4:	f7ff fe07 	bl	80032b6 <writePixel>
    while (x<y) {
 80036a8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80036ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	f6ff af67 	blt.w	8003584 <drawCircle+0x9c>
    }
}
 80036b6:	bf00      	nop
 80036b8:	bf00      	nop
 80036ba:	371c      	adds	r7, #28
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd90      	pop	{r4, r7, pc}

080036c0 <fillCircle>:
        }
    }
}

void fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 80036c0:	b590      	push	{r4, r7, lr}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af02      	add	r7, sp, #8
 80036c6:	4604      	mov	r4, r0
 80036c8:	4608      	mov	r0, r1
 80036ca:	4611      	mov	r1, r2
 80036cc:	461a      	mov	r2, r3
 80036ce:	4623      	mov	r3, r4
 80036d0:	80fb      	strh	r3, [r7, #6]
 80036d2:	4603      	mov	r3, r0
 80036d4:	80bb      	strh	r3, [r7, #4]
 80036d6:	460b      	mov	r3, r1
 80036d8:	807b      	strh	r3, [r7, #2]
 80036da:	4613      	mov	r3, r2
 80036dc:	803b      	strh	r3, [r7, #0]
    drawFastVLine(x0, y0-r, 2*r+1, color);
 80036de:	88ba      	ldrh	r2, [r7, #4]
 80036e0:	887b      	ldrh	r3, [r7, #2]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	b219      	sxth	r1, r3
 80036e8:	887b      	ldrh	r3, [r7, #2]
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	3301      	adds	r3, #1
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	b21a      	sxth	r2, r3
 80036f4:	883b      	ldrh	r3, [r7, #0]
 80036f6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80036fa:	f7ff fd9f 	bl	800323c <drawFastVLine>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 80036fe:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003702:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003706:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800370a:	883b      	ldrh	r3, [r7, #0]
 800370c:	9301      	str	r3, [sp, #4]
 800370e:	2300      	movs	r3, #0
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	2303      	movs	r3, #3
 8003714:	f000 f804 	bl	8003720 <fillCircleHelper>
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	bd90      	pop	{r4, r7, pc}

08003720 <fillCircleHelper>:

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color)
{
 8003720:	b590      	push	{r4, r7, lr}
 8003722:	b087      	sub	sp, #28
 8003724:	af00      	add	r7, sp, #0
 8003726:	4604      	mov	r4, r0
 8003728:	4608      	mov	r0, r1
 800372a:	4611      	mov	r1, r2
 800372c:	461a      	mov	r2, r3
 800372e:	4623      	mov	r3, r4
 8003730:	80fb      	strh	r3, [r7, #6]
 8003732:	4603      	mov	r3, r0
 8003734:	80bb      	strh	r3, [r7, #4]
 8003736:	460b      	mov	r3, r1
 8003738:	807b      	strh	r3, [r7, #2]
 800373a:	4613      	mov	r3, r2
 800373c:	707b      	strb	r3, [r7, #1]

    int16_t f     = 1 - r;
 800373e:	887b      	ldrh	r3, [r7, #2]
 8003740:	f1c3 0301 	rsb	r3, r3, #1
 8003744:	b29b      	uxth	r3, r3
 8003746:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8003748:	2301      	movs	r3, #1
 800374a:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 800374c:	887b      	ldrh	r3, [r7, #2]
 800374e:	461a      	mov	r2, r3
 8003750:	03d2      	lsls	r2, r2, #15
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	b29b      	uxth	r3, r3
 8003758:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 800375a:	2300      	movs	r3, #0
 800375c:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 800375e:	887b      	ldrh	r3, [r7, #2]
 8003760:	81fb      	strh	r3, [r7, #14]
    int16_t px    = x;
 8003762:	8a3b      	ldrh	r3, [r7, #16]
 8003764:	81bb      	strh	r3, [r7, #12]
    int16_t py    = y;
 8003766:	89fb      	ldrh	r3, [r7, #14]
 8003768:	817b      	strh	r3, [r7, #10]

    delta++; // Avoid some +1's in the loop
 800376a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800376e:	b29b      	uxth	r3, r3
 8003770:	3301      	adds	r3, #1
 8003772:	b29b      	uxth	r3, r3
 8003774:	853b      	strh	r3, [r7, #40]	; 0x28

    while(x < y) {
 8003776:	e095      	b.n	80038a4 <fillCircleHelper+0x184>
        if (f >= 0) {
 8003778:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800377c:	2b00      	cmp	r3, #0
 800377e:	db0e      	blt.n	800379e <fillCircleHelper+0x7e>
            y--;
 8003780:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003784:	b29b      	uxth	r3, r3
 8003786:	3b01      	subs	r3, #1
 8003788:	b29b      	uxth	r3, r3
 800378a:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 800378c:	8a7b      	ldrh	r3, [r7, #18]
 800378e:	3302      	adds	r3, #2
 8003790:	b29b      	uxth	r3, r3
 8003792:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8003794:	8afa      	ldrh	r2, [r7, #22]
 8003796:	8a7b      	ldrh	r3, [r7, #18]
 8003798:	4413      	add	r3, r2
 800379a:	b29b      	uxth	r3, r3
 800379c:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 800379e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	3301      	adds	r3, #1
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80037aa:	8abb      	ldrh	r3, [r7, #20]
 80037ac:	3302      	adds	r3, #2
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 80037b2:	8afa      	ldrh	r2, [r7, #22]
 80037b4:	8abb      	ldrh	r3, [r7, #20]
 80037b6:	4413      	add	r3, r2
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	82fb      	strh	r3, [r7, #22]
        // These checks avoid double-drawing certain lines, important
        // for the SSD1306 library which has an INVERT drawing mode.
        if(x < (y + 1)) {
 80037bc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80037c0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	db31      	blt.n	800382c <fillCircleHelper+0x10c>
            if(corners & 1) drawFastVLine(x0+x, y0-y, 2*y+delta, color);
 80037c8:	787b      	ldrb	r3, [r7, #1]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d013      	beq.n	80037fa <fillCircleHelper+0xda>
 80037d2:	88fa      	ldrh	r2, [r7, #6]
 80037d4:	8a3b      	ldrh	r3, [r7, #16]
 80037d6:	4413      	add	r3, r2
 80037d8:	b29b      	uxth	r3, r3
 80037da:	b218      	sxth	r0, r3
 80037dc:	88ba      	ldrh	r2, [r7, #4]
 80037de:	89fb      	ldrh	r3, [r7, #14]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	b219      	sxth	r1, r3
 80037e6:	89fb      	ldrh	r3, [r7, #14]
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80037ee:	4413      	add	r3, r2
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	b21a      	sxth	r2, r3
 80037f4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80037f6:	f7ff fd21 	bl	800323c <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-x, y0-y, 2*y+delta, color);
 80037fa:	787b      	ldrb	r3, [r7, #1]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d013      	beq.n	800382c <fillCircleHelper+0x10c>
 8003804:	88fa      	ldrh	r2, [r7, #6]
 8003806:	8a3b      	ldrh	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	b29b      	uxth	r3, r3
 800380c:	b218      	sxth	r0, r3
 800380e:	88ba      	ldrh	r2, [r7, #4]
 8003810:	89fb      	ldrh	r3, [r7, #14]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	b29b      	uxth	r3, r3
 8003816:	b219      	sxth	r1, r3
 8003818:	89fb      	ldrh	r3, [r7, #14]
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	b29a      	uxth	r2, r3
 800381e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003820:	4413      	add	r3, r2
 8003822:	b29b      	uxth	r3, r3
 8003824:	b21a      	sxth	r2, r3
 8003826:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003828:	f7ff fd08 	bl	800323c <drawFastVLine>
        }
        if(y != py) {
 800382c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003830:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003834:	429a      	cmp	r2, r3
 8003836:	d033      	beq.n	80038a0 <fillCircleHelper+0x180>
            if(corners & 1) drawFastVLine(x0+py, y0-px, 2*px+delta, color);
 8003838:	787b      	ldrb	r3, [r7, #1]
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b00      	cmp	r3, #0
 8003840:	d013      	beq.n	800386a <fillCircleHelper+0x14a>
 8003842:	88fa      	ldrh	r2, [r7, #6]
 8003844:	897b      	ldrh	r3, [r7, #10]
 8003846:	4413      	add	r3, r2
 8003848:	b29b      	uxth	r3, r3
 800384a:	b218      	sxth	r0, r3
 800384c:	88ba      	ldrh	r2, [r7, #4]
 800384e:	89bb      	ldrh	r3, [r7, #12]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	b29b      	uxth	r3, r3
 8003854:	b219      	sxth	r1, r3
 8003856:	89bb      	ldrh	r3, [r7, #12]
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	b29a      	uxth	r2, r3
 800385c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800385e:	4413      	add	r3, r2
 8003860:	b29b      	uxth	r3, r3
 8003862:	b21a      	sxth	r2, r3
 8003864:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003866:	f7ff fce9 	bl	800323c <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-py, y0-px, 2*px+delta, color);
 800386a:	787b      	ldrb	r3, [r7, #1]
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d013      	beq.n	800389c <fillCircleHelper+0x17c>
 8003874:	88fa      	ldrh	r2, [r7, #6]
 8003876:	897b      	ldrh	r3, [r7, #10]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	b29b      	uxth	r3, r3
 800387c:	b218      	sxth	r0, r3
 800387e:	88ba      	ldrh	r2, [r7, #4]
 8003880:	89bb      	ldrh	r3, [r7, #12]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	b29b      	uxth	r3, r3
 8003886:	b219      	sxth	r1, r3
 8003888:	89bb      	ldrh	r3, [r7, #12]
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	b29a      	uxth	r2, r3
 800388e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003890:	4413      	add	r3, r2
 8003892:	b29b      	uxth	r3, r3
 8003894:	b21a      	sxth	r2, r3
 8003896:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003898:	f7ff fcd0 	bl	800323c <drawFastVLine>
            py = y;
 800389c:	89fb      	ldrh	r3, [r7, #14]
 800389e:	817b      	strh	r3, [r7, #10]
        }
        px = x;
 80038a0:	8a3b      	ldrh	r3, [r7, #16]
 80038a2:	81bb      	strh	r3, [r7, #12]
    while(x < y) {
 80038a4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80038a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	f6ff af63 	blt.w	8003778 <fillCircleHelper+0x58>
    }
}
 80038b2:	bf00      	nop
 80038b4:	bf00      	nop
 80038b6:	371c      	adds	r7, #28
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd90      	pop	{r4, r7, pc}

080038bc <fillRect>:
    drawFastVLine(x, y, h, color);
    drawFastVLine(x+w-1, y, h, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80038bc:	b590      	push	{r4, r7, lr}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	4604      	mov	r4, r0
 80038c4:	4608      	mov	r0, r1
 80038c6:	4611      	mov	r1, r2
 80038c8:	461a      	mov	r2, r3
 80038ca:	4623      	mov	r3, r4
 80038cc:	80fb      	strh	r3, [r7, #6]
 80038ce:	4603      	mov	r3, r0
 80038d0:	80bb      	strh	r3, [r7, #4]
 80038d2:	460b      	mov	r3, r1
 80038d4:	807b      	strh	r3, [r7, #2]
 80038d6:	4613      	mov	r3, r2
 80038d8:	803b      	strh	r3, [r7, #0]
    int16_t end;
#if defined(SUPPORT_9488_555)
    if (is555) color = color565_to_555(color);
 80038da:	4b6e      	ldr	r3, [pc, #440]	; (8003a94 <fillRect+0x1d8>)
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d005      	beq.n	80038ee <fillRect+0x32>
 80038e2:	8c3b      	ldrh	r3, [r7, #32]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7fc fe71 	bl	80005cc <color565_to_555>
 80038ea:	4603      	mov	r3, r0
 80038ec:	843b      	strh	r3, [r7, #32]
#endif
    if (w < 0) {
 80038ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	da08      	bge.n	8003908 <fillRect+0x4c>
        w = -w;
 80038f6:	887b      	ldrh	r3, [r7, #2]
 80038f8:	425b      	negs	r3, r3
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	807b      	strh	r3, [r7, #2]
        x -= w;
 80038fe:	88fa      	ldrh	r2, [r7, #6]
 8003900:	887b      	ldrh	r3, [r7, #2]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	b29b      	uxth	r3, r3
 8003906:	80fb      	strh	r3, [r7, #6]
    }                           //+ve w
    end = x + w;
 8003908:	88fa      	ldrh	r2, [r7, #6]
 800390a:	887b      	ldrh	r3, [r7, #2]
 800390c:	4413      	add	r3, r2
 800390e:	b29b      	uxth	r3, r3
 8003910:	81fb      	strh	r3, [r7, #14]
    if (x < 0)
 8003912:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003916:	2b00      	cmp	r3, #0
 8003918:	da01      	bge.n	800391e <fillRect+0x62>
        x = 0;
 800391a:	2300      	movs	r3, #0
 800391c:	80fb      	strh	r3, [r7, #6]
    if (end > width())
 800391e:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8003922:	f7fc fe3f 	bl	80005a4 <width>
 8003926:	4603      	mov	r3, r0
 8003928:	429c      	cmp	r4, r3
 800392a:	dd03      	ble.n	8003934 <fillRect+0x78>
        end = width();
 800392c:	f7fc fe3a 	bl	80005a4 <width>
 8003930:	4603      	mov	r3, r0
 8003932:	81fb      	strh	r3, [r7, #14]
    w = end - x;
 8003934:	89fa      	ldrh	r2, [r7, #14]
 8003936:	88fb      	ldrh	r3, [r7, #6]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	b29b      	uxth	r3, r3
 800393c:	807b      	strh	r3, [r7, #2]
    if (h < 0) {
 800393e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003942:	2b00      	cmp	r3, #0
 8003944:	da08      	bge.n	8003958 <fillRect+0x9c>
        h = -h;
 8003946:	883b      	ldrh	r3, [r7, #0]
 8003948:	425b      	negs	r3, r3
 800394a:	b29b      	uxth	r3, r3
 800394c:	803b      	strh	r3, [r7, #0]
        y -= h;
 800394e:	88ba      	ldrh	r2, [r7, #4]
 8003950:	883b      	ldrh	r3, [r7, #0]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	b29b      	uxth	r3, r3
 8003956:	80bb      	strh	r3, [r7, #4]
    }                           //+ve h
    end = y + h;
 8003958:	88ba      	ldrh	r2, [r7, #4]
 800395a:	883b      	ldrh	r3, [r7, #0]
 800395c:	4413      	add	r3, r2
 800395e:	b29b      	uxth	r3, r3
 8003960:	81fb      	strh	r3, [r7, #14]
    if (y < 0)
 8003962:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	da01      	bge.n	800396e <fillRect+0xb2>
        y = 0;
 800396a:	2300      	movs	r3, #0
 800396c:	80bb      	strh	r3, [r7, #4]
    if (end > height())
 800396e:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8003972:	f7fc fe21 	bl	80005b8 <height>
 8003976:	4603      	mov	r3, r0
 8003978:	429c      	cmp	r4, r3
 800397a:	dd03      	ble.n	8003984 <fillRect+0xc8>
        end = height();
 800397c:	f7fc fe1c 	bl	80005b8 <height>
 8003980:	4603      	mov	r3, r0
 8003982:	81fb      	strh	r3, [r7, #14]
    h = end - y;
 8003984:	89fa      	ldrh	r2, [r7, #14]
 8003986:	88bb      	ldrh	r3, [r7, #4]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	b29b      	uxth	r3, r3
 800398c:	803b      	strh	r3, [r7, #0]
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 800398e:	88fa      	ldrh	r2, [r7, #6]
 8003990:	887b      	ldrh	r3, [r7, #2]
 8003992:	4413      	add	r3, r2
 8003994:	b29b      	uxth	r3, r3
 8003996:	3b01      	subs	r3, #1
 8003998:	b29b      	uxth	r3, r3
 800399a:	b21c      	sxth	r4, r3
 800399c:	88ba      	ldrh	r2, [r7, #4]
 800399e:	883b      	ldrh	r3, [r7, #0]
 80039a0:	4413      	add	r3, r2
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	3b01      	subs	r3, #1
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	b21b      	sxth	r3, r3
 80039aa:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80039ae:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80039b2:	4622      	mov	r2, r4
 80039b4:	f7ff f938 	bl	8002c28 <setAddrWindow>
    CS_ACTIVE;
 80039b8:	2102      	movs	r1, #2
 80039ba:	4837      	ldr	r0, [pc, #220]	; (8003a98 <fillRect+0x1dc>)
 80039bc:	f7fc fda3 	bl	8000506 <PIN_LOW>
    WriteCmd(_MW);
 80039c0:	2104      	movs	r1, #4
 80039c2:	4835      	ldr	r0, [pc, #212]	; (8003a98 <fillRect+0x1dc>)
 80039c4:	f7fc fd9f 	bl	8000506 <PIN_LOW>
 80039c8:	4b34      	ldr	r3, [pc, #208]	; (8003a9c <fillRect+0x1e0>)
 80039ca:	881b      	ldrh	r3, [r3, #0]
 80039cc:	0a1b      	lsrs	r3, r3, #8
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	737b      	strb	r3, [r7, #13]
 80039d2:	4b32      	ldr	r3, [pc, #200]	; (8003a9c <fillRect+0x1e0>)
 80039d4:	881b      	ldrh	r3, [r3, #0]
 80039d6:	733b      	strb	r3, [r7, #12]
 80039d8:	4b2f      	ldr	r3, [pc, #188]	; (8003a98 <fillRect+0x1dc>)
 80039da:	4a31      	ldr	r2, [pc, #196]	; (8003aa0 <fillRect+0x1e4>)
 80039dc:	611a      	str	r2, [r3, #16]
 80039de:	4b31      	ldr	r3, [pc, #196]	; (8003aa4 <fillRect+0x1e8>)
 80039e0:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 80039e4:	611a      	str	r2, [r3, #16]
 80039e6:	7b7b      	ldrb	r3, [r7, #13]
 80039e8:	035b      	lsls	r3, r3, #13
 80039ea:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 80039ee:	7b7b      	ldrb	r3, [r7, #13]
 80039f0:	109b      	asrs	r3, r3, #2
 80039f2:	f003 0320 	and.w	r3, r3, #32
 80039f6:	431a      	orrs	r2, r3
 80039f8:	4b27      	ldr	r3, [pc, #156]	; (8003a98 <fillRect+0x1dc>)
 80039fa:	611a      	str	r2, [r3, #16]
 80039fc:	7b7b      	ldrb	r3, [r7, #13]
 80039fe:	4a29      	ldr	r2, [pc, #164]	; (8003aa4 <fillRect+0x1e8>)
 8003a00:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8003a04:	6113      	str	r3, [r2, #16]
 8003a06:	2108      	movs	r1, #8
 8003a08:	4823      	ldr	r0, [pc, #140]	; (8003a98 <fillRect+0x1dc>)
 8003a0a:	f7fc fd7c 	bl	8000506 <PIN_LOW>
 8003a0e:	2108      	movs	r1, #8
 8003a10:	4821      	ldr	r0, [pc, #132]	; (8003a98 <fillRect+0x1dc>)
 8003a12:	f7fc fd88 	bl	8000526 <PIN_HIGH>
 8003a16:	2108      	movs	r1, #8
 8003a18:	481f      	ldr	r0, [pc, #124]	; (8003a98 <fillRect+0x1dc>)
 8003a1a:	f7fc fd84 	bl	8000526 <PIN_HIGH>
 8003a1e:	4b1e      	ldr	r3, [pc, #120]	; (8003a98 <fillRect+0x1dc>)
 8003a20:	4a1f      	ldr	r2, [pc, #124]	; (8003aa0 <fillRect+0x1e4>)
 8003a22:	611a      	str	r2, [r3, #16]
 8003a24:	4b1f      	ldr	r3, [pc, #124]	; (8003aa4 <fillRect+0x1e8>)
 8003a26:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8003a2a:	611a      	str	r2, [r3, #16]
 8003a2c:	7b3b      	ldrb	r3, [r7, #12]
 8003a2e:	035b      	lsls	r3, r3, #13
 8003a30:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8003a34:	7b3b      	ldrb	r3, [r7, #12]
 8003a36:	109b      	asrs	r3, r3, #2
 8003a38:	f003 0320 	and.w	r3, r3, #32
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	4b16      	ldr	r3, [pc, #88]	; (8003a98 <fillRect+0x1dc>)
 8003a40:	611a      	str	r2, [r3, #16]
 8003a42:	7b3b      	ldrb	r3, [r7, #12]
 8003a44:	4a17      	ldr	r2, [pc, #92]	; (8003aa4 <fillRect+0x1e8>)
 8003a46:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8003a4a:	6113      	str	r3, [r2, #16]
 8003a4c:	2108      	movs	r1, #8
 8003a4e:	4812      	ldr	r0, [pc, #72]	; (8003a98 <fillRect+0x1dc>)
 8003a50:	f7fc fd59 	bl	8000506 <PIN_LOW>
 8003a54:	2108      	movs	r1, #8
 8003a56:	4810      	ldr	r0, [pc, #64]	; (8003a98 <fillRect+0x1dc>)
 8003a58:	f7fc fd65 	bl	8000526 <PIN_HIGH>
 8003a5c:	2108      	movs	r1, #8
 8003a5e:	480e      	ldr	r0, [pc, #56]	; (8003a98 <fillRect+0x1dc>)
 8003a60:	f7fc fd61 	bl	8000526 <PIN_HIGH>
 8003a64:	2104      	movs	r1, #4
 8003a66:	480c      	ldr	r0, [pc, #48]	; (8003a98 <fillRect+0x1dc>)
 8003a68:	f7fc fd5d 	bl	8000526 <PIN_HIGH>
    if (h > w) {
 8003a6c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003a70:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	dd05      	ble.n	8003a84 <fillRect+0x1c8>
        end = h;
 8003a78:	883b      	ldrh	r3, [r7, #0]
 8003a7a:	81fb      	strh	r3, [r7, #14]
        h = w;
 8003a7c:	887b      	ldrh	r3, [r7, #2]
 8003a7e:	803b      	strh	r3, [r7, #0]
        w = end;
 8003a80:	89fb      	ldrh	r3, [r7, #14]
 8003a82:	807b      	strh	r3, [r7, #2]
    }
    uint8_t hi = color >> 8, lo = color & 0xFF;
 8003a84:	8c3b      	ldrh	r3, [r7, #32]
 8003a86:	0a1b      	lsrs	r3, r3, #8
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	72fb      	strb	r3, [r7, #11]
 8003a8c:	8c3b      	ldrh	r3, [r7, #32]
 8003a8e:	72bb      	strb	r3, [r7, #10]
    while (h-- > 0) {
 8003a90:	e05a      	b.n	8003b48 <fillRect+0x28c>
 8003a92:	bf00      	nop
 8003a94:	20000084 	.word	0x20000084
 8003a98:	40010800 	.word	0x40010800
 8003a9c:	20000098 	.word	0x20000098
 8003aa0:	80200000 	.word	0x80200000
 8003aa4:	40010c00 	.word	0x40010c00
        end = w;
 8003aa8:	887b      	ldrh	r3, [r7, #2]
 8003aaa:	81fb      	strh	r3, [r7, #14]
//                 write8(b);
//             } while (--end != 0);
//        } else
//#endif
        do {
            write8(hi);
 8003aac:	4b40      	ldr	r3, [pc, #256]	; (8003bb0 <fillRect+0x2f4>)
 8003aae:	4a41      	ldr	r2, [pc, #260]	; (8003bb4 <fillRect+0x2f8>)
 8003ab0:	611a      	str	r2, [r3, #16]
 8003ab2:	4b41      	ldr	r3, [pc, #260]	; (8003bb8 <fillRect+0x2fc>)
 8003ab4:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8003ab8:	611a      	str	r2, [r3, #16]
 8003aba:	7afb      	ldrb	r3, [r7, #11]
 8003abc:	035b      	lsls	r3, r3, #13
 8003abe:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8003ac2:	7afb      	ldrb	r3, [r7, #11]
 8003ac4:	109b      	asrs	r3, r3, #2
 8003ac6:	f003 0320 	and.w	r3, r3, #32
 8003aca:	431a      	orrs	r2, r3
 8003acc:	4b38      	ldr	r3, [pc, #224]	; (8003bb0 <fillRect+0x2f4>)
 8003ace:	611a      	str	r2, [r3, #16]
 8003ad0:	7afb      	ldrb	r3, [r7, #11]
 8003ad2:	4a39      	ldr	r2, [pc, #228]	; (8003bb8 <fillRect+0x2fc>)
 8003ad4:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8003ad8:	6113      	str	r3, [r2, #16]
 8003ada:	2108      	movs	r1, #8
 8003adc:	4834      	ldr	r0, [pc, #208]	; (8003bb0 <fillRect+0x2f4>)
 8003ade:	f7fc fd12 	bl	8000506 <PIN_LOW>
 8003ae2:	2108      	movs	r1, #8
 8003ae4:	4832      	ldr	r0, [pc, #200]	; (8003bb0 <fillRect+0x2f4>)
 8003ae6:	f7fc fd1e 	bl	8000526 <PIN_HIGH>
 8003aea:	2108      	movs	r1, #8
 8003aec:	4830      	ldr	r0, [pc, #192]	; (8003bb0 <fillRect+0x2f4>)
 8003aee:	f7fc fd1a 	bl	8000526 <PIN_HIGH>
            write8(lo);
 8003af2:	4b2f      	ldr	r3, [pc, #188]	; (8003bb0 <fillRect+0x2f4>)
 8003af4:	4a2f      	ldr	r2, [pc, #188]	; (8003bb4 <fillRect+0x2f8>)
 8003af6:	611a      	str	r2, [r3, #16]
 8003af8:	4b2f      	ldr	r3, [pc, #188]	; (8003bb8 <fillRect+0x2fc>)
 8003afa:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8003afe:	611a      	str	r2, [r3, #16]
 8003b00:	7abb      	ldrb	r3, [r7, #10]
 8003b02:	035b      	lsls	r3, r3, #13
 8003b04:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8003b08:	7abb      	ldrb	r3, [r7, #10]
 8003b0a:	109b      	asrs	r3, r3, #2
 8003b0c:	f003 0320 	and.w	r3, r3, #32
 8003b10:	431a      	orrs	r2, r3
 8003b12:	4b27      	ldr	r3, [pc, #156]	; (8003bb0 <fillRect+0x2f4>)
 8003b14:	611a      	str	r2, [r3, #16]
 8003b16:	7abb      	ldrb	r3, [r7, #10]
 8003b18:	4a27      	ldr	r2, [pc, #156]	; (8003bb8 <fillRect+0x2fc>)
 8003b1a:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8003b1e:	6113      	str	r3, [r2, #16]
 8003b20:	2108      	movs	r1, #8
 8003b22:	4823      	ldr	r0, [pc, #140]	; (8003bb0 <fillRect+0x2f4>)
 8003b24:	f7fc fcef 	bl	8000506 <PIN_LOW>
 8003b28:	2108      	movs	r1, #8
 8003b2a:	4821      	ldr	r0, [pc, #132]	; (8003bb0 <fillRect+0x2f4>)
 8003b2c:	f7fc fcfb 	bl	8000526 <PIN_HIGH>
 8003b30:	2108      	movs	r1, #8
 8003b32:	481f      	ldr	r0, [pc, #124]	; (8003bb0 <fillRect+0x2f4>)
 8003b34:	f7fc fcf7 	bl	8000526 <PIN_HIGH>
        } while (--end != 0);
 8003b38:	89fb      	ldrh	r3, [r7, #14]
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	81fb      	strh	r3, [r7, #14]
 8003b40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1b1      	bne.n	8003aac <fillRect+0x1f0>
    while (h-- > 0) {
 8003b48:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	3a01      	subs	r2, #1
 8003b50:	b292      	uxth	r2, r2
 8003b52:	803a      	strh	r2, [r7, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	dca7      	bgt.n	8003aa8 <fillRect+0x1ec>
#endif
    }
    CS_IDLE;
 8003b58:	2102      	movs	r1, #2
 8003b5a:	4815      	ldr	r0, [pc, #84]	; (8003bb0 <fillRect+0x2f4>)
 8003b5c:	f7fc fce3 	bl	8000526 <PIN_HIGH>
    if (!(_lcd_capable & MIPI_DCS_REV1) || ((_lcd_ID == 0x1526) && (rotation & 1)))
 8003b60:	4b16      	ldr	r3, [pc, #88]	; (8003bbc <fillRect+0x300>)
 8003b62:	881b      	ldrh	r3, [r3, #0]
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00b      	beq.n	8003b84 <fillRect+0x2c8>
 8003b6c:	4b14      	ldr	r3, [pc, #80]	; (8003bc0 <fillRect+0x304>)
 8003b6e:	881b      	ldrh	r3, [r3, #0]
 8003b70:	f241 5226 	movw	r2, #5414	; 0x1526
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d116      	bne.n	8003ba6 <fillRect+0x2ea>
 8003b78:	4b12      	ldr	r3, [pc, #72]	; (8003bc4 <fillRect+0x308>)
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d010      	beq.n	8003ba6 <fillRect+0x2ea>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 8003b84:	f7fc fd0e 	bl	80005a4 <width>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	b21c      	sxth	r4, r3
 8003b90:	f7fc fd12 	bl	80005b8 <height>
 8003b94:	4603      	mov	r3, r0
 8003b96:	3b01      	subs	r3, #1
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	b21b      	sxth	r3, r3
 8003b9c:	4622      	mov	r2, r4
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	2000      	movs	r0, #0
 8003ba2:	f7ff f841 	bl	8002c28 <setAddrWindow>
}
 8003ba6:	bf00      	nop
 8003ba8:	3714      	adds	r7, #20
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd90      	pop	{r4, r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40010800 	.word	0x40010800
 8003bb4:	80200000 	.word	0x80200000
 8003bb8:	40010c00 	.word	0x40010c00
 8003bbc:	2000008c 	.word	0x2000008c
 8003bc0:	2000008e 	.word	0x2000008e
 8003bc4:	20000088 	.word	0x20000088

08003bc8 <testFillScreen>:


/********************************* TESTS  *********************************************/

void testFillScreen()
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	af00      	add	r7, sp, #0
    fillScreen(BLACK);
 8003bcc:	2000      	movs	r0, #0
 8003bce:	f7ff fa75 	bl	80030bc <fillScreen>
    fillScreen(RED);
 8003bd2:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8003bd6:	f7ff fa71 	bl	80030bc <fillScreen>
    fillScreen(GREEN);
 8003bda:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8003bde:	f7ff fa6d 	bl	80030bc <fillScreen>
    fillScreen(BLUE);
 8003be2:	201f      	movs	r0, #31
 8003be4:	f7ff fa6a 	bl	80030bc <fillScreen>
    fillScreen(BLACK);
 8003be8:	2000      	movs	r0, #0
 8003bea:	f7ff fa67 	bl	80030bc <fillScreen>
}
 8003bee:	bf00      	nop
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <testLines>:

void testLines(uint16_t color)
{
 8003bf2:	b590      	push	{r4, r7, lr}
 8003bf4:	b08b      	sub	sp, #44	; 0x2c
 8003bf6:	af02      	add	r7, sp, #8
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	80fb      	strh	r3, [r7, #6]
    int           x1, y1, x2, y2,
                  w = width(),
 8003bfc:	f7fc fcd2 	bl	80005a4 <width>
 8003c00:	4603      	mov	r3, r0
 8003c02:	617b      	str	r3, [r7, #20]
                  h = height();
 8003c04:	f7fc fcd8 	bl	80005b8 <height>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	613b      	str	r3, [r7, #16]

    fillScreen(BLACK);
 8003c0c:	2000      	movs	r0, #0
 8003c0e:	f7ff fa55 	bl	80030bc <fillScreen>

    x1 = y1 = 0;
 8003c12:	2300      	movs	r3, #0
 8003c14:	60fb      	str	r3, [r7, #12]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	60bb      	str	r3, [r7, #8]
    y2    = h - 1;
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 8003c20:	2300      	movs	r3, #0
 8003c22:	61fb      	str	r3, [r7, #28]
 8003c24:	e00f      	b.n	8003c46 <testLines+0x54>
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	b218      	sxth	r0, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	b219      	sxth	r1, r3
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	b21a      	sxth	r2, r3
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	b21c      	sxth	r4, r3
 8003c36:	88fb      	ldrh	r3, [r7, #6]
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	4623      	mov	r3, r4
 8003c3c:	f7ff fbf2 	bl	8003424 <drawLine>
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	3306      	adds	r3, #6
 8003c44:	61fb      	str	r3, [r7, #28]
 8003c46:	69fa      	ldr	r2, [r7, #28]
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	dbeb      	blt.n	8003c26 <testLines+0x34>
    x2    = w - 1;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	3b01      	subs	r3, #1
 8003c52:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 8003c54:	2300      	movs	r3, #0
 8003c56:	61bb      	str	r3, [r7, #24]
 8003c58:	e00f      	b.n	8003c7a <testLines+0x88>
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	b218      	sxth	r0, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	b219      	sxth	r1, r3
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	b21a      	sxth	r2, r3
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	b21c      	sxth	r4, r3
 8003c6a:	88fb      	ldrh	r3, [r7, #6]
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	4623      	mov	r3, r4
 8003c70:	f7ff fbd8 	bl	8003424 <drawLine>
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	3306      	adds	r3, #6
 8003c78:	61bb      	str	r3, [r7, #24]
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	dbeb      	blt.n	8003c5a <testLines+0x68>

    fillScreen(BLACK);
 8003c82:	2000      	movs	r0, #0
 8003c84:	f7ff fa1a 	bl	80030bc <fillScreen>

    x1    = w - 1;
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	60bb      	str	r3, [r7, #8]
    y1    = 0;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	60fb      	str	r3, [r7, #12]
    y2    = h - 1;
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	3b01      	subs	r3, #1
 8003c96:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 8003c98:	2300      	movs	r3, #0
 8003c9a:	61fb      	str	r3, [r7, #28]
 8003c9c:	e00f      	b.n	8003cbe <testLines+0xcc>
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	b218      	sxth	r0, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	b219      	sxth	r1, r3
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	b21a      	sxth	r2, r3
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	b21c      	sxth	r4, r3
 8003cae:	88fb      	ldrh	r3, [r7, #6]
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	4623      	mov	r3, r4
 8003cb4:	f7ff fbb6 	bl	8003424 <drawLine>
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	3306      	adds	r3, #6
 8003cbc:	61fb      	str	r3, [r7, #28]
 8003cbe:	69fa      	ldr	r2, [r7, #28]
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	dbeb      	blt.n	8003c9e <testLines+0xac>
    x2    = 0;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 8003cca:	2300      	movs	r3, #0
 8003ccc:	61bb      	str	r3, [r7, #24]
 8003cce:	e00f      	b.n	8003cf0 <testLines+0xfe>
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	b218      	sxth	r0, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	b219      	sxth	r1, r3
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	b21a      	sxth	r2, r3
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	b21c      	sxth	r4, r3
 8003ce0:	88fb      	ldrh	r3, [r7, #6]
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	4623      	mov	r3, r4
 8003ce6:	f7ff fb9d 	bl	8003424 <drawLine>
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	3306      	adds	r3, #6
 8003cee:	61bb      	str	r3, [r7, #24]
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	dbeb      	blt.n	8003cd0 <testLines+0xde>

    fillScreen(BLACK);
 8003cf8:	2000      	movs	r0, #0
 8003cfa:	f7ff f9df 	bl	80030bc <fillScreen>

    x1    = 0;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	3b01      	subs	r3, #1
 8003d06:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	61fb      	str	r3, [r7, #28]
 8003d10:	e00f      	b.n	8003d32 <testLines+0x140>
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	b218      	sxth	r0, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	b219      	sxth	r1, r3
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	b21a      	sxth	r2, r3
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	b21c      	sxth	r4, r3
 8003d22:	88fb      	ldrh	r3, [r7, #6]
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	4623      	mov	r3, r4
 8003d28:	f7ff fb7c 	bl	8003424 <drawLine>
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	3306      	adds	r3, #6
 8003d30:	61fb      	str	r3, [r7, #28]
 8003d32:	69fa      	ldr	r2, [r7, #28]
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	dbeb      	blt.n	8003d12 <testLines+0x120>
    x2    = w - 1;
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 8003d40:	2300      	movs	r3, #0
 8003d42:	61bb      	str	r3, [r7, #24]
 8003d44:	e00f      	b.n	8003d66 <testLines+0x174>
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	b218      	sxth	r0, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	b219      	sxth	r1, r3
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	b21a      	sxth	r2, r3
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	b21c      	sxth	r4, r3
 8003d56:	88fb      	ldrh	r3, [r7, #6]
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	4623      	mov	r3, r4
 8003d5c:	f7ff fb62 	bl	8003424 <drawLine>
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	3306      	adds	r3, #6
 8003d64:	61bb      	str	r3, [r7, #24]
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	dbeb      	blt.n	8003d46 <testLines+0x154>

    fillScreen(BLACK);
 8003d6e:	2000      	movs	r0, #0
 8003d70:	f7ff f9a4 	bl	80030bc <fillScreen>

    x1    = w - 1;
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	3b01      	subs	r3, #1
 8003d78:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 8003d80:	2300      	movs	r3, #0
 8003d82:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 8003d84:	2300      	movs	r3, #0
 8003d86:	61fb      	str	r3, [r7, #28]
 8003d88:	e00f      	b.n	8003daa <testLines+0x1b8>
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	b218      	sxth	r0, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	b219      	sxth	r1, r3
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	b21a      	sxth	r2, r3
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	b21c      	sxth	r4, r3
 8003d9a:	88fb      	ldrh	r3, [r7, #6]
 8003d9c:	9300      	str	r3, [sp, #0]
 8003d9e:	4623      	mov	r3, r4
 8003da0:	f7ff fb40 	bl	8003424 <drawLine>
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	3306      	adds	r3, #6
 8003da8:	61fb      	str	r3, [r7, #28]
 8003daa:	69fa      	ldr	r2, [r7, #28]
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	dbeb      	blt.n	8003d8a <testLines+0x198>
    x2    = 0;
 8003db2:	2300      	movs	r3, #0
 8003db4:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 8003db6:	2300      	movs	r3, #0
 8003db8:	61bb      	str	r3, [r7, #24]
 8003dba:	e00f      	b.n	8003ddc <testLines+0x1ea>
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	b218      	sxth	r0, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	b219      	sxth	r1, r3
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	b21a      	sxth	r2, r3
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	b21c      	sxth	r4, r3
 8003dcc:	88fb      	ldrh	r3, [r7, #6]
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	4623      	mov	r3, r4
 8003dd2:	f7ff fb27 	bl	8003424 <drawLine>
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	3306      	adds	r3, #6
 8003dda:	61bb      	str	r3, [r7, #24]
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	dbeb      	blt.n	8003dbc <testLines+0x1ca>

}
 8003de4:	bf00      	nop
 8003de6:	bf00      	nop
 8003de8:	3724      	adds	r7, #36	; 0x24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd90      	pop	{r4, r7, pc}

08003dee <testFastLines>:

void testFastLines(uint16_t color1, uint16_t color2)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b086      	sub	sp, #24
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	4603      	mov	r3, r0
 8003df6:	460a      	mov	r2, r1
 8003df8:	80fb      	strh	r3, [r7, #6]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	80bb      	strh	r3, [r7, #4]
    int           x, y, w = width(), h = height();
 8003dfe:	f7fc fbd1 	bl	80005a4 <width>
 8003e02:	4603      	mov	r3, r0
 8003e04:	60fb      	str	r3, [r7, #12]
 8003e06:	f7fc fbd7 	bl	80005b8 <height>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	60bb      	str	r3, [r7, #8]

    fillScreen(BLACK);
 8003e0e:	2000      	movs	r0, #0
 8003e10:	f7ff f954 	bl	80030bc <fillScreen>
    for (y = 0; y < h; y += 5) drawFastHLine(0, y, w, color1);
 8003e14:	2300      	movs	r3, #0
 8003e16:	613b      	str	r3, [r7, #16]
 8003e18:	e00a      	b.n	8003e30 <testFastLines+0x42>
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	b219      	sxth	r1, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	b21a      	sxth	r2, r3
 8003e22:	88fb      	ldrh	r3, [r7, #6]
 8003e24:	2000      	movs	r0, #0
 8003e26:	f7ff fa28 	bl	800327a <drawFastHLine>
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	3305      	adds	r3, #5
 8003e2e:	613b      	str	r3, [r7, #16]
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	dbf0      	blt.n	8003e1a <testFastLines+0x2c>
    for (x = 0; x < w; x += 5) drawFastVLine(x, 0, h, color2);
 8003e38:	2300      	movs	r3, #0
 8003e3a:	617b      	str	r3, [r7, #20]
 8003e3c:	e00a      	b.n	8003e54 <testFastLines+0x66>
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	b218      	sxth	r0, r3
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	b21a      	sxth	r2, r3
 8003e46:	88bb      	ldrh	r3, [r7, #4]
 8003e48:	2100      	movs	r1, #0
 8003e4a:	f7ff f9f7 	bl	800323c <drawFastVLine>
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	3305      	adds	r3, #5
 8003e52:	617b      	str	r3, [r7, #20]
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	dbf0      	blt.n	8003e3e <testFastLines+0x50>
}
 8003e5c:	bf00      	nop
 8003e5e:	bf00      	nop
 8003e60:	3718      	adds	r7, #24
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <testFilledCircles>:
        drawRect(cx - i2, cy - i2, i, i, color2);
    }
}

void testFilledCircles(uint8_t radius, uint16_t color)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b088      	sub	sp, #32
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	460a      	mov	r2, r1
 8003e70:	71fb      	strb	r3, [r7, #7]
 8003e72:	4613      	mov	r3, r2
 8003e74:	80bb      	strh	r3, [r7, #4]
    int x, y, w = width(), h = height(), r2 = radius * 2;
 8003e76:	f7fc fb95 	bl	80005a4 <width>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	617b      	str	r3, [r7, #20]
 8003e7e:	f7fc fb9b 	bl	80005b8 <height>
 8003e82:	4603      	mov	r3, r0
 8003e84:	613b      	str	r3, [r7, #16]
 8003e86:	79fb      	ldrb	r3, [r7, #7]
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	60fb      	str	r3, [r7, #12]

    fillScreen(BLACK);
 8003e8c:	2000      	movs	r0, #0
 8003e8e:	f7ff f915 	bl	80030bc <fillScreen>
    for (x = radius; x < w; x += r2) {
 8003e92:	79fb      	ldrb	r3, [r7, #7]
 8003e94:	61fb      	str	r3, [r7, #28]
 8003e96:	e017      	b.n	8003ec8 <testFilledCircles+0x62>
        for (y = radius; y < h; y += r2) {
 8003e98:	79fb      	ldrb	r3, [r7, #7]
 8003e9a:	61bb      	str	r3, [r7, #24]
 8003e9c:	e00c      	b.n	8003eb8 <testFilledCircles+0x52>
            fillCircle(x, y, radius, color);
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	b218      	sxth	r0, r3
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	b219      	sxth	r1, r3
 8003ea6:	79fb      	ldrb	r3, [r7, #7]
 8003ea8:	b21a      	sxth	r2, r3
 8003eaa:	88bb      	ldrh	r3, [r7, #4]
 8003eac:	f7ff fc08 	bl	80036c0 <fillCircle>
        for (y = radius; y < h; y += r2) {
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	61bb      	str	r3, [r7, #24]
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	dbee      	blt.n	8003e9e <testFilledCircles+0x38>
    for (x = radius; x < w; x += r2) {
 8003ec0:	69fa      	ldr	r2, [r7, #28]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	61fb      	str	r3, [r7, #28]
 8003ec8:	69fa      	ldr	r2, [r7, #28]
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	dbe3      	blt.n	8003e98 <testFilledCircles+0x32>
        }
    }

}
 8003ed0:	bf00      	nop
 8003ed2:	bf00      	nop
 8003ed4:	3720      	adds	r7, #32
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <testCircles>:

void testCircles(uint8_t radius, uint16_t color)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b088      	sub	sp, #32
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	460a      	mov	r2, r1
 8003ee4:	71fb      	strb	r3, [r7, #7]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	80bb      	strh	r3, [r7, #4]
    int           x, y, r2 = radius * 2,
 8003eea:	79fb      	ldrb	r3, [r7, #7]
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	617b      	str	r3, [r7, #20]
                        w = width()  + radius,
 8003ef0:	f7fc fb58 	bl	80005a4 <width>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	79fb      	ldrb	r3, [r7, #7]
 8003efa:	4413      	add	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
                        h = height() + radius;
 8003efe:	f7fc fb5b 	bl	80005b8 <height>
 8003f02:	4603      	mov	r3, r0
 8003f04:	461a      	mov	r2, r3
 8003f06:	79fb      	ldrb	r3, [r7, #7]
 8003f08:	4413      	add	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]

    // Screen is not cleared for this one -- this is
    // intentional and does not affect the reported time.
    for (x = 0; x < w; x += r2) {
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	61fb      	str	r3, [r7, #28]
 8003f10:	e017      	b.n	8003f42 <testCircles+0x68>
        for (y = 0; y < h; y += r2) {
 8003f12:	2300      	movs	r3, #0
 8003f14:	61bb      	str	r3, [r7, #24]
 8003f16:	e00c      	b.n	8003f32 <testCircles+0x58>
            drawCircle(x, y, radius, color);
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	b218      	sxth	r0, r3
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	b219      	sxth	r1, r3
 8003f20:	79fb      	ldrb	r3, [r7, #7]
 8003f22:	b21a      	sxth	r2, r3
 8003f24:	88bb      	ldrh	r3, [r7, #4]
 8003f26:	f7ff fadf 	bl	80034e8 <drawCircle>
        for (y = 0; y < h; y += r2) {
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	4413      	add	r3, r2
 8003f30:	61bb      	str	r3, [r7, #24]
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	dbee      	blt.n	8003f18 <testCircles+0x3e>
    for (x = 0; x < w; x += r2) {
 8003f3a:	69fa      	ldr	r2, [r7, #28]
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	4413      	add	r3, r2
 8003f40:	61fb      	str	r3, [r7, #28]
 8003f42:	69fa      	ldr	r2, [r7, #28]
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	dbe3      	blt.n	8003f12 <testCircles+0x38>
        }
    }

}
 8003f4a:	bf00      	nop
 8003f4c:	bf00      	nop
 8003f4e:	3720      	adds	r7, #32
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <drawChar>:
}



void drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 8003f54:	b590      	push	{r4, r7, lr}
 8003f56:	b08b      	sub	sp, #44	; 0x2c
 8003f58:	af02      	add	r7, sp, #8
 8003f5a:	4604      	mov	r4, r0
 8003f5c:	4608      	mov	r0, r1
 8003f5e:	4611      	mov	r1, r2
 8003f60:	461a      	mov	r2, r3
 8003f62:	4623      	mov	r3, r4
 8003f64:	80fb      	strh	r3, [r7, #6]
 8003f66:	4603      	mov	r3, r0
 8003f68:	80bb      	strh	r3, [r7, #4]
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	70fb      	strb	r3, [r7, #3]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	803b      	strh	r3, [r7, #0]

        // Character is assumed previously filtered by write() to eliminate
        // newlines, returns, non-printable characters, etc.  Calling
        // drawChar() directly with 'bad' characters of font may cause mayhem!

        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 8003f72:	4b57      	ldr	r3, [pc, #348]	; (80040d0 <drawChar+0x17c>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	3308      	adds	r3, #8
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	78fa      	ldrb	r2, [r7, #3]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	70fb      	strb	r3, [r7, #3]
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
 8003f80:	78fb      	ldrb	r3, [r7, #3]
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	4a52      	ldr	r2, [pc, #328]	; (80040d0 <drawChar+0x17c>)
 8003f86:	6812      	ldr	r2, [r2, #0]
 8003f88:	3204      	adds	r2, #4
 8003f8a:	8812      	ldrh	r2, [r2, #0]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]
        uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
 8003f90:	4b4f      	ldr	r3, [pc, #316]	; (80040d0 <drawChar+0x17c>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	881b      	ldrh	r3, [r3, #0]
 8003f96:	60fb      	str	r3, [r7, #12]

        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	881b      	ldrh	r3, [r3, #0]
 8003f9c:	83fb      	strh	r3, [r7, #30]
        uint8_t  w  = pgm_read_byte(&glyph->width),
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	3302      	adds	r3, #2
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	72fb      	strb	r3, [r7, #11]
                 h  = pgm_read_byte(&glyph->height);
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	3303      	adds	r3, #3
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	72bb      	strb	r3, [r7, #10]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	3305      	adds	r3, #5
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	727b      	strb	r3, [r7, #9]
                 yo = pgm_read_byte(&glyph->yOffset);
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	3306      	adds	r3, #6
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	723b      	strb	r3, [r7, #8]
        uint8_t  xx, yy, bits = 0, bit = 0;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	76fb      	strb	r3, [r7, #27]
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	76bb      	strb	r3, [r7, #26]
        int16_t  xo16 = 0, yo16 = 0;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	833b      	strh	r3, [r7, #24]
 8003fca:	2300      	movs	r3, #0
 8003fcc:	82fb      	strh	r3, [r7, #22]

        if(size > 1) {
 8003fce:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d905      	bls.n	8003fe2 <drawChar+0x8e>
            xo16 = xo;
 8003fd6:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8003fda:	833b      	strh	r3, [r7, #24]
            yo16 = yo;
 8003fdc:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8003fe0:	82fb      	strh	r3, [r7, #22]
        }

        for(yy=0; yy<h; yy++) {
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	773b      	strb	r3, [r7, #28]
 8003fe6:	e06a      	b.n	80040be <drawChar+0x16a>
            for(xx=0; xx<w; xx++) {
 8003fe8:	2300      	movs	r3, #0
 8003fea:	777b      	strb	r3, [r7, #29]
 8003fec:	e060      	b.n	80040b0 <drawChar+0x15c>
                if(!(bit++ & 7)) {
 8003fee:	7ebb      	ldrb	r3, [r7, #26]
 8003ff0:	1c5a      	adds	r2, r3, #1
 8003ff2:	76ba      	strb	r2, [r7, #26]
 8003ff4:	f003 0307 	and.w	r3, r3, #7
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d107      	bne.n	800400c <drawChar+0xb8>
                    bits = pgm_read_byte(&bitmap[bo++]);
 8003ffc:	8bfb      	ldrh	r3, [r7, #30]
 8003ffe:	1c5a      	adds	r2, r3, #1
 8004000:	83fa      	strh	r2, [r7, #30]
 8004002:	461a      	mov	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4413      	add	r3, r2
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	76fb      	strb	r3, [r7, #27]
                }
                if(bits & 0x80) {
 800400c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004010:	2b00      	cmp	r3, #0
 8004012:	da47      	bge.n	80040a4 <drawChar+0x150>
                    if(size == 1) {
 8004014:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004018:	2b01      	cmp	r3, #1
 800401a:	d11a      	bne.n	8004052 <drawChar+0xfe>
                        writePixel(x+xo+xx, y+yo+yy, color);
 800401c:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8004020:	b29a      	uxth	r2, r3
 8004022:	88fb      	ldrh	r3, [r7, #6]
 8004024:	4413      	add	r3, r2
 8004026:	b29a      	uxth	r2, r3
 8004028:	7f7b      	ldrb	r3, [r7, #29]
 800402a:	b29b      	uxth	r3, r3
 800402c:	4413      	add	r3, r2
 800402e:	b29b      	uxth	r3, r3
 8004030:	b218      	sxth	r0, r3
 8004032:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8004036:	b29a      	uxth	r2, r3
 8004038:	88bb      	ldrh	r3, [r7, #4]
 800403a:	4413      	add	r3, r2
 800403c:	b29a      	uxth	r2, r3
 800403e:	7f3b      	ldrb	r3, [r7, #28]
 8004040:	b29b      	uxth	r3, r3
 8004042:	4413      	add	r3, r2
 8004044:	b29b      	uxth	r3, r3
 8004046:	b21b      	sxth	r3, r3
 8004048:	883a      	ldrh	r2, [r7, #0]
 800404a:	4619      	mov	r1, r3
 800404c:	f7ff f933 	bl	80032b6 <writePixel>
 8004050:	e028      	b.n	80040a4 <drawChar+0x150>
                    } else {
                        fillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
 8004052:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004056:	7f7b      	ldrb	r3, [r7, #29]
 8004058:	4413      	add	r3, r2
 800405a:	b29b      	uxth	r3, r3
 800405c:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8004060:	b292      	uxth	r2, r2
 8004062:	fb02 f303 	mul.w	r3, r2, r3
 8004066:	b29a      	uxth	r2, r3
 8004068:	88fb      	ldrh	r3, [r7, #6]
 800406a:	4413      	add	r3, r2
 800406c:	b29b      	uxth	r3, r3
 800406e:	b218      	sxth	r0, r3
 8004070:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004074:	7f3b      	ldrb	r3, [r7, #28]
 8004076:	4413      	add	r3, r2
 8004078:	b29b      	uxth	r3, r3
 800407a:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800407e:	b292      	uxth	r2, r2
 8004080:	fb02 f303 	mul.w	r3, r2, r3
 8004084:	b29a      	uxth	r2, r3
 8004086:	88bb      	ldrh	r3, [r7, #4]
 8004088:	4413      	add	r3, r2
 800408a:	b29b      	uxth	r3, r3
 800408c:	b219      	sxth	r1, r3
 800408e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004092:	b21a      	sxth	r2, r3
 8004094:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004098:	b21c      	sxth	r4, r3
 800409a:	883b      	ldrh	r3, [r7, #0]
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	4623      	mov	r3, r4
 80040a0:	f7ff fc0c 	bl	80038bc <fillRect>
                          size, size, color);
                    }
                }
                bits <<= 1;
 80040a4:	7efb      	ldrb	r3, [r7, #27]
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	76fb      	strb	r3, [r7, #27]
            for(xx=0; xx<w; xx++) {
 80040aa:	7f7b      	ldrb	r3, [r7, #29]
 80040ac:	3301      	adds	r3, #1
 80040ae:	777b      	strb	r3, [r7, #29]
 80040b0:	7f7a      	ldrb	r2, [r7, #29]
 80040b2:	7afb      	ldrb	r3, [r7, #11]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d39a      	bcc.n	8003fee <drawChar+0x9a>
        for(yy=0; yy<h; yy++) {
 80040b8:	7f3b      	ldrb	r3, [r7, #28]
 80040ba:	3301      	adds	r3, #1
 80040bc:	773b      	strb	r3, [r7, #28]
 80040be:	7f3a      	ldrb	r2, [r7, #28]
 80040c0:	7abb      	ldrb	r3, [r7, #10]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d390      	bcc.n	8003fe8 <drawChar+0x94>
            }
        }

    } // End classic vs custom font
}
 80040c6:	bf00      	nop
 80040c8:	bf00      	nop
 80040ca:	3724      	adds	r7, #36	; 0x24
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd90      	pop	{r4, r7, pc}
 80040d0:	20000034 	.word	0x20000034

080040d4 <write>:
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t write(uint8_t c)
{
 80040d4:	b5b0      	push	{r4, r5, r7, lr}
 80040d6:	b088      	sub	sp, #32
 80040d8:	af02      	add	r7, sp, #8
 80040da:	4603      	mov	r3, r0
 80040dc:	71fb      	strb	r3, [r7, #7]
	{

        if(c == '\n') {
 80040de:	79fb      	ldrb	r3, [r7, #7]
 80040e0:	2b0a      	cmp	r3, #10
 80040e2:	d112      	bne.n	800410a <write+0x36>
            cursor_x  = 0;
 80040e4:	4b47      	ldr	r3, [pc, #284]	; (8004204 <write+0x130>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	701a      	strb	r2, [r3, #0]
            cursor_y += (int16_t)textsize *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 80040ea:	4b47      	ldr	r3, [pc, #284]	; (8004208 <write+0x134>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	330a      	adds	r3, #10
 80040f0:	781b      	ldrb	r3, [r3, #0]
            cursor_y += (int16_t)textsize *
 80040f2:	4a46      	ldr	r2, [pc, #280]	; (800420c <write+0x138>)
 80040f4:	7812      	ldrb	r2, [r2, #0]
 80040f6:	fb02 f303 	mul.w	r3, r2, r3
 80040fa:	b2da      	uxtb	r2, r3
 80040fc:	4b44      	ldr	r3, [pc, #272]	; (8004210 <write+0x13c>)
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	4413      	add	r3, r2
 8004102:	b2da      	uxtb	r2, r3
 8004104:	4b42      	ldr	r3, [pc, #264]	; (8004210 <write+0x13c>)
 8004106:	701a      	strb	r2, [r3, #0]
 8004108:	e077      	b.n	80041fa <write+0x126>
        } else if(c != '\r') {
 800410a:	79fb      	ldrb	r3, [r7, #7]
 800410c:	2b0d      	cmp	r3, #13
 800410e:	d074      	beq.n	80041fa <write+0x126>
            uint8_t first = pgm_read_byte(&gfxFont->first);
 8004110:	4b3d      	ldr	r3, [pc, #244]	; (8004208 <write+0x134>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	3308      	adds	r3, #8
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	75fb      	strb	r3, [r7, #23]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 800411a:	79fa      	ldrb	r2, [r7, #7]
 800411c:	7dfb      	ldrb	r3, [r7, #23]
 800411e:	429a      	cmp	r2, r3
 8004120:	d36b      	bcc.n	80041fa <write+0x126>
 8004122:	4b39      	ldr	r3, [pc, #228]	; (8004208 <write+0x134>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	3309      	adds	r3, #9
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	79fa      	ldrb	r2, [r7, #7]
 800412c:	429a      	cmp	r2, r3
 800412e:	d864      	bhi.n	80041fa <write+0x126>
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
                  &gfxFont->glyph))[c - first]);
 8004130:	79fa      	ldrb	r2, [r7, #7]
 8004132:	7dfb      	ldrb	r3, [r7, #23]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	00db      	lsls	r3, r3, #3
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
 8004138:	4a33      	ldr	r2, [pc, #204]	; (8004208 <write+0x134>)
 800413a:	6812      	ldr	r2, [r2, #0]
 800413c:	3204      	adds	r2, #4
 800413e:	8812      	ldrh	r2, [r2, #0]
                  &gfxFont->glyph))[c - first]);
 8004140:	4413      	add	r3, r2
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
 8004142:	613b      	str	r3, [r7, #16]
                uint8_t   w     = pgm_read_byte(&glyph->width),
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	3302      	adds	r3, #2
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	73fb      	strb	r3, [r7, #15]
                          h     = pgm_read_byte(&glyph->height);
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	3303      	adds	r3, #3
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	73bb      	strb	r3, [r7, #14]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
 8004154:	7bfb      	ldrb	r3, [r7, #15]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d041      	beq.n	80041de <write+0x10a>
 800415a:	7bbb      	ldrb	r3, [r7, #14]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d03e      	beq.n	80041de <write+0x10a>
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	3305      	adds	r3, #5
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	b25b      	sxtb	r3, r3
 8004168:	81bb      	strh	r3, [r7, #12]
                    if(wrap && ((cursor_x + textsize * (xo + w)) > _width)) {
 800416a:	4b2a      	ldr	r3, [pc, #168]	; (8004214 <write+0x140>)
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d022      	beq.n	80041b8 <write+0xe4>
 8004172:	4b24      	ldr	r3, [pc, #144]	; (8004204 <write+0x130>)
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	4619      	mov	r1, r3
 8004178:	4b24      	ldr	r3, [pc, #144]	; (800420c <write+0x138>)
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	4618      	mov	r0, r3
 800417e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004182:	7bfb      	ldrb	r3, [r7, #15]
 8004184:	4413      	add	r3, r2
 8004186:	fb00 f303 	mul.w	r3, r0, r3
 800418a:	440b      	add	r3, r1
 800418c:	4a22      	ldr	r2, [pc, #136]	; (8004218 <write+0x144>)
 800418e:	8812      	ldrh	r2, [r2, #0]
 8004190:	4293      	cmp	r3, r2
 8004192:	dd11      	ble.n	80041b8 <write+0xe4>
                        cursor_x  = 0;
 8004194:	4b1b      	ldr	r3, [pc, #108]	; (8004204 <write+0x130>)
 8004196:	2200      	movs	r2, #0
 8004198:	701a      	strb	r2, [r3, #0]
                        cursor_y += (int16_t)textsize *
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 800419a:	4b1b      	ldr	r3, [pc, #108]	; (8004208 <write+0x134>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	330a      	adds	r3, #10
 80041a0:	781b      	ldrb	r3, [r3, #0]
                        cursor_y += (int16_t)textsize *
 80041a2:	4a1a      	ldr	r2, [pc, #104]	; (800420c <write+0x138>)
 80041a4:	7812      	ldrb	r2, [r2, #0]
 80041a6:	fb02 f303 	mul.w	r3, r2, r3
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	4b18      	ldr	r3, [pc, #96]	; (8004210 <write+0x13c>)
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	4413      	add	r3, r2
 80041b2:	b2da      	uxtb	r2, r3
 80041b4:	4b16      	ldr	r3, [pc, #88]	; (8004210 <write+0x13c>)
 80041b6:	701a      	strb	r2, [r3, #0]
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 80041b8:	4b12      	ldr	r3, [pc, #72]	; (8004204 <write+0x130>)
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	b218      	sxth	r0, r3
 80041be:	4b14      	ldr	r3, [pc, #80]	; (8004210 <write+0x13c>)
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	b219      	sxth	r1, r3
 80041c4:	4b15      	ldr	r3, [pc, #84]	; (800421c <write+0x148>)
 80041c6:	881d      	ldrh	r5, [r3, #0]
 80041c8:	4b15      	ldr	r3, [pc, #84]	; (8004220 <write+0x14c>)
 80041ca:	881b      	ldrh	r3, [r3, #0]
 80041cc:	4a0f      	ldr	r2, [pc, #60]	; (800420c <write+0x138>)
 80041ce:	7812      	ldrb	r2, [r2, #0]
 80041d0:	79fc      	ldrb	r4, [r7, #7]
 80041d2:	9201      	str	r2, [sp, #4]
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	462b      	mov	r3, r5
 80041d8:	4622      	mov	r2, r4
 80041da:	f7ff febb 	bl	8003f54 <drawChar>
                }
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize;
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	3304      	adds	r3, #4
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	4a09      	ldr	r2, [pc, #36]	; (800420c <write+0x138>)
 80041e6:	7812      	ldrb	r2, [r2, #0]
 80041e8:	fb02 f303 	mul.w	r3, r2, r3
 80041ec:	b2da      	uxtb	r2, r3
 80041ee:	4b05      	ldr	r3, [pc, #20]	; (8004204 <write+0x130>)
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	4413      	add	r3, r2
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	4b03      	ldr	r3, [pc, #12]	; (8004204 <write+0x130>)
 80041f8:	701a      	strb	r2, [r3, #0]
            }
        }

    }
    return 1;
 80041fa:	2301      	movs	r3, #1
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3718      	adds	r7, #24
 8004200:	46bd      	mov	sp, r7
 8004202:	bdb0      	pop	{r4, r5, r7, pc}
 8004204:	20000087 	.word	0x20000087
 8004208:	20000034 	.word	0x20000034
 800420c:	20000008 	.word	0x20000008
 8004210:	20000086 	.word	0x20000086
 8004214:	2000000e 	.word	0x2000000e
 8004218:	20000004 	.word	0x20000004
 800421c:	2000000a 	.word	0x2000000a
 8004220:	2000000c 	.word	0x2000000c

08004224 <setFont>:
/*!
    @brief Set the font to display when print()ing, either custom or default
    @param  f  The GFXfont object, if NULL use built in 6x8 font
*/
/**************************************************************************/
void setFont(const GFXfont *f) {
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
    if(f) {            // Font struct pointer passed in?
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00a      	beq.n	8004248 <setFont+0x24>
        if(!gfxFont) { // And no current font struct?
 8004232:	4b0e      	ldr	r3, [pc, #56]	; (800426c <setFont+0x48>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d110      	bne.n	800425c <setFont+0x38>
            // Switching from classic to new font behavior.
            // Move cursor pos down 6 pixels so it's on baseline.
            cursor_y += 6;
 800423a:	4b0d      	ldr	r3, [pc, #52]	; (8004270 <setFont+0x4c>)
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	3306      	adds	r3, #6
 8004240:	b2da      	uxtb	r2, r3
 8004242:	4b0b      	ldr	r3, [pc, #44]	; (8004270 <setFont+0x4c>)
 8004244:	701a      	strb	r2, [r3, #0]
 8004246:	e009      	b.n	800425c <setFont+0x38>
        }
    } else if(gfxFont) { // NULL passed.  Current font struct defined?
 8004248:	4b08      	ldr	r3, [pc, #32]	; (800426c <setFont+0x48>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d005      	beq.n	800425c <setFont+0x38>
        // Switching from new to classic font behavior.
        // Move cursor pos up 6 pixels so it's at top-left of char.
        cursor_y -= 6;
 8004250:	4b07      	ldr	r3, [pc, #28]	; (8004270 <setFont+0x4c>)
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	3b06      	subs	r3, #6
 8004256:	b2da      	uxtb	r2, r3
 8004258:	4b05      	ldr	r3, [pc, #20]	; (8004270 <setFont+0x4c>)
 800425a:	701a      	strb	r2, [r3, #0]
    }
    gfxFont = (GFXfont *)f;
 800425c:	4a03      	ldr	r2, [pc, #12]	; (800426c <setFont+0x48>)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6013      	str	r3, [r2, #0]
}
 8004262:	bf00      	nop
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	bc80      	pop	{r7}
 800426a:	4770      	bx	lr
 800426c:	20000034 	.word	0x20000034
 8004270:	20000086 	.word	0x20000086

08004274 <printnewtstr>:
    }
}


void printnewtstr (int row, uint16_t txtcolor, const GFXfont *f, uint8_t txtsize, uint8_t *str)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	607a      	str	r2, [r7, #4]
 800427e:	461a      	mov	r2, r3
 8004280:	460b      	mov	r3, r1
 8004282:	817b      	strh	r3, [r7, #10]
 8004284:	4613      	mov	r3, r2
 8004286:	727b      	strb	r3, [r7, #9]
	setFont(f);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f7ff ffcb 	bl	8004224 <setFont>
	textcolor = txtcolor;
 800428e:	4a11      	ldr	r2, [pc, #68]	; (80042d4 <printnewtstr+0x60>)
 8004290:	897b      	ldrh	r3, [r7, #10]
 8004292:	8013      	strh	r3, [r2, #0]
	textsize = (txtsize > 0) ? txtsize : 1;
 8004294:	7a7b      	ldrb	r3, [r7, #9]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <printnewtstr+0x2a>
 800429a:	7a7b      	ldrb	r3, [r7, #9]
 800429c:	e000      	b.n	80042a0 <printnewtstr+0x2c>
 800429e:	2301      	movs	r3, #1
 80042a0:	4a0d      	ldr	r2, [pc, #52]	; (80042d8 <printnewtstr+0x64>)
 80042a2:	7013      	strb	r3, [r2, #0]
	setCursor(0, row);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	b21b      	sxth	r3, r3
 80042a8:	4619      	mov	r1, r3
 80042aa:	2000      	movs	r0, #0
 80042ac:	f000 f816 	bl	80042dc <setCursor>
	while (*str) write (*str++);
 80042b0:	e006      	b.n	80042c0 <printnewtstr+0x4c>
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	1c5a      	adds	r2, r3, #1
 80042b6:	61ba      	str	r2, [r7, #24]
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7ff ff0a 	bl	80040d4 <write>
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1f4      	bne.n	80042b2 <printnewtstr+0x3e>
}
 80042c8:	bf00      	nop
 80042ca:	bf00      	nop
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	2000000a 	.word	0x2000000a
 80042d8:	20000008 	.word	0x20000008

080042dc <setCursor>:
void setTextSize (uint8_t size)
{
	textsize = size;
}

void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	4603      	mov	r3, r0
 80042e4:	460a      	mov	r2, r1
 80042e6:	80fb      	strh	r3, [r7, #6]
 80042e8:	4613      	mov	r3, r2
 80042ea:	80bb      	strh	r3, [r7, #4]
 80042ec:	88fb      	ldrh	r3, [r7, #6]
 80042ee:	b2da      	uxtb	r2, r3
 80042f0:	4b05      	ldr	r3, [pc, #20]	; (8004308 <setCursor+0x2c>)
 80042f2:	701a      	strb	r2, [r3, #0]
 80042f4:	88bb      	ldrh	r3, [r7, #4]
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	4b04      	ldr	r3, [pc, #16]	; (800430c <setCursor+0x30>)
 80042fa:	701a      	strb	r2, [r3, #0]
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	bc80      	pop	{r7}
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	20000087 	.word	0x20000087
 800430c:	20000086 	.word	0x20000086

08004310 <getRotation>:

uint8_t getRotation (void)
{
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0
	return rotation;
 8004314:	4b02      	ldr	r3, [pc, #8]	; (8004320 <getRotation+0x10>)
 8004316:	781b      	ldrb	r3, [r3, #0]
}
 8004318:	4618      	mov	r0, r3
 800431a:	46bd      	mov	sp, r7
 800431c:	bc80      	pop	{r7}
 800431e:	4770      	bx	lr
 8004320:	20000088 	.word	0x20000088

08004324 <scrollup>:

void scrollup (uint16_t speed)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	4603      	mov	r3, r0
 800432c:	80fb      	strh	r3, [r7, #6]
     uint16_t maxscroll;
     if (getRotation() & 1) maxscroll = width();
 800432e:	f7ff ffef 	bl	8004310 <getRotation>
 8004332:	4603      	mov	r3, r0
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	2b00      	cmp	r3, #0
 800433a:	d004      	beq.n	8004346 <scrollup+0x22>
 800433c:	f7fc f932 	bl	80005a4 <width>
 8004340:	4603      	mov	r3, r0
 8004342:	81fb      	strh	r3, [r7, #14]
 8004344:	e003      	b.n	800434e <scrollup+0x2a>
     else maxscroll = height();
 8004346:	f7fc f937 	bl	80005b8 <height>
 800434a:	4603      	mov	r3, r0
 800434c:	81fb      	strh	r3, [r7, #14]
     for (uint16_t i = 1; i <= maxscroll; i++)
 800434e:	2301      	movs	r3, #1
 8004350:	81bb      	strh	r3, [r7, #12]
 8004352:	e01b      	b.n	800438c <scrollup+0x68>
     {
          vertScroll(0, maxscroll, i);
 8004354:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004358:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800435c:	4619      	mov	r1, r3
 800435e:	2000      	movs	r0, #0
 8004360:	f7fe fd86 	bl	8002e70 <vertScroll>
         if (speed < 655) delay(speed*100);
 8004364:	88fb      	ldrh	r3, [r7, #6]
 8004366:	f240 228e 	movw	r2, #654	; 0x28e
 800436a:	4293      	cmp	r3, r2
 800436c:	d807      	bhi.n	800437e <scrollup+0x5a>
 800436e:	88fb      	ldrh	r3, [r7, #6]
 8004370:	2264      	movs	r2, #100	; 0x64
 8004372:	fb02 f303 	mul.w	r3, r2, r3
 8004376:	4618      	mov	r0, r3
 8004378:	f7fb fee8 	bl	800014c <delay>
 800437c:	e003      	b.n	8004386 <scrollup+0x62>
         else HAL_Delay(speed);
 800437e:	88fb      	ldrh	r3, [r7, #6]
 8004380:	4618      	mov	r0, r3
 8004382:	f000 f895 	bl	80044b0 <HAL_Delay>
     for (uint16_t i = 1; i <= maxscroll; i++)
 8004386:	89bb      	ldrh	r3, [r7, #12]
 8004388:	3301      	adds	r3, #1
 800438a:	81bb      	strh	r3, [r7, #12]
 800438c:	89ba      	ldrh	r2, [r7, #12]
 800438e:	89fb      	ldrh	r3, [r7, #14]
 8004390:	429a      	cmp	r2, r3
 8004392:	d9df      	bls.n	8004354 <scrollup+0x30>
     }

}
 8004394:	bf00      	nop
 8004396:	bf00      	nop
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
	...

080043a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80043a0:	f7fc f8ab 	bl	80004fa <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80043a4:	480b      	ldr	r0, [pc, #44]	; (80043d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80043a6:	490c      	ldr	r1, [pc, #48]	; (80043d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80043a8:	4a0c      	ldr	r2, [pc, #48]	; (80043dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80043aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043ac:	e002      	b.n	80043b4 <LoopCopyDataInit>

080043ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043b2:	3304      	adds	r3, #4

080043b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043b8:	d3f9      	bcc.n	80043ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043ba:	4a09      	ldr	r2, [pc, #36]	; (80043e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80043bc:	4c09      	ldr	r4, [pc, #36]	; (80043e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80043be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043c0:	e001      	b.n	80043c6 <LoopFillZerobss>

080043c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043c4:	3204      	adds	r2, #4

080043c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043c8:	d3fb      	bcc.n	80043c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80043ca:	f001 f9b3 	bl	8005734 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80043ce:	f7fb fed5 	bl	800017c <main>
  bx lr
 80043d2:	4770      	bx	lr
  ldr r0, =_sdata
 80043d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043d8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80043dc:	0800670c 	.word	0x0800670c
  ldr r2, =_sbss
 80043e0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80043e4:	200000a8 	.word	0x200000a8

080043e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80043e8:	e7fe      	b.n	80043e8 <ADC1_2_IRQHandler>
	...

080043ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043f0:	4b08      	ldr	r3, [pc, #32]	; (8004414 <HAL_Init+0x28>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a07      	ldr	r2, [pc, #28]	; (8004414 <HAL_Init+0x28>)
 80043f6:	f043 0310 	orr.w	r3, r3, #16
 80043fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043fc:	2003      	movs	r0, #3
 80043fe:	f000 f92b 	bl	8004658 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004402:	200f      	movs	r0, #15
 8004404:	f000 f808 	bl	8004418 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004408:	f7fc f802 	bl	8000410 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	40022000 	.word	0x40022000

08004418 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004420:	4b12      	ldr	r3, [pc, #72]	; (800446c <HAL_InitTick+0x54>)
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	4b12      	ldr	r3, [pc, #72]	; (8004470 <HAL_InitTick+0x58>)
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	4619      	mov	r1, r3
 800442a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800442e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004432:	fbb2 f3f3 	udiv	r3, r2, r3
 8004436:	4618      	mov	r0, r3
 8004438:	f000 f935 	bl	80046a6 <HAL_SYSTICK_Config>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e00e      	b.n	8004464 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b0f      	cmp	r3, #15
 800444a:	d80a      	bhi.n	8004462 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800444c:	2200      	movs	r2, #0
 800444e:	6879      	ldr	r1, [r7, #4]
 8004450:	f04f 30ff 	mov.w	r0, #4294967295
 8004454:	f000 f90b 	bl	800466e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004458:	4a06      	ldr	r2, [pc, #24]	; (8004474 <HAL_InitTick+0x5c>)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800445e:	2300      	movs	r3, #0
 8004460:	e000      	b.n	8004464 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
}
 8004464:	4618      	mov	r0, r3
 8004466:	3708      	adds	r7, #8
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	20000000 	.word	0x20000000
 8004470:	20000014 	.word	0x20000014
 8004474:	20000010 	.word	0x20000010

08004478 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004478:	b480      	push	{r7}
 800447a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800447c:	4b05      	ldr	r3, [pc, #20]	; (8004494 <HAL_IncTick+0x1c>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	461a      	mov	r2, r3
 8004482:	4b05      	ldr	r3, [pc, #20]	; (8004498 <HAL_IncTick+0x20>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4413      	add	r3, r2
 8004488:	4a03      	ldr	r2, [pc, #12]	; (8004498 <HAL_IncTick+0x20>)
 800448a:	6013      	str	r3, [r2, #0]
}
 800448c:	bf00      	nop
 800448e:	46bd      	mov	sp, r7
 8004490:	bc80      	pop	{r7}
 8004492:	4770      	bx	lr
 8004494:	20000014 	.word	0x20000014
 8004498:	200000a4 	.word	0x200000a4

0800449c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800449c:	b480      	push	{r7}
 800449e:	af00      	add	r7, sp, #0
  return uwTick;
 80044a0:	4b02      	ldr	r3, [pc, #8]	; (80044ac <HAL_GetTick+0x10>)
 80044a2:	681b      	ldr	r3, [r3, #0]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bc80      	pop	{r7}
 80044aa:	4770      	bx	lr
 80044ac:	200000a4 	.word	0x200000a4

080044b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044b8:	f7ff fff0 	bl	800449c <HAL_GetTick>
 80044bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c8:	d005      	beq.n	80044d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044ca:	4b0a      	ldr	r3, [pc, #40]	; (80044f4 <HAL_Delay+0x44>)
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	461a      	mov	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	4413      	add	r3, r2
 80044d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80044d6:	bf00      	nop
 80044d8:	f7ff ffe0 	bl	800449c <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d8f7      	bhi.n	80044d8 <HAL_Delay+0x28>
  {
  }
}
 80044e8:	bf00      	nop
 80044ea:	bf00      	nop
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	20000014 	.word	0x20000014

080044f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f003 0307 	and.w	r3, r3, #7
 8004506:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004508:	4b0c      	ldr	r3, [pc, #48]	; (800453c <__NVIC_SetPriorityGrouping+0x44>)
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004514:	4013      	ands	r3, r2
 8004516:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004520:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004528:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800452a:	4a04      	ldr	r2, [pc, #16]	; (800453c <__NVIC_SetPriorityGrouping+0x44>)
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	60d3      	str	r3, [r2, #12]
}
 8004530:	bf00      	nop
 8004532:	3714      	adds	r7, #20
 8004534:	46bd      	mov	sp, r7
 8004536:	bc80      	pop	{r7}
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	e000ed00 	.word	0xe000ed00

08004540 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004540:	b480      	push	{r7}
 8004542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004544:	4b04      	ldr	r3, [pc, #16]	; (8004558 <__NVIC_GetPriorityGrouping+0x18>)
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	0a1b      	lsrs	r3, r3, #8
 800454a:	f003 0307 	and.w	r3, r3, #7
}
 800454e:	4618      	mov	r0, r3
 8004550:	46bd      	mov	sp, r7
 8004552:	bc80      	pop	{r7}
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	e000ed00 	.word	0xe000ed00

0800455c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	4603      	mov	r3, r0
 8004564:	6039      	str	r1, [r7, #0]
 8004566:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800456c:	2b00      	cmp	r3, #0
 800456e:	db0a      	blt.n	8004586 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	b2da      	uxtb	r2, r3
 8004574:	490c      	ldr	r1, [pc, #48]	; (80045a8 <__NVIC_SetPriority+0x4c>)
 8004576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800457a:	0112      	lsls	r2, r2, #4
 800457c:	b2d2      	uxtb	r2, r2
 800457e:	440b      	add	r3, r1
 8004580:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004584:	e00a      	b.n	800459c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	b2da      	uxtb	r2, r3
 800458a:	4908      	ldr	r1, [pc, #32]	; (80045ac <__NVIC_SetPriority+0x50>)
 800458c:	79fb      	ldrb	r3, [r7, #7]
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	3b04      	subs	r3, #4
 8004594:	0112      	lsls	r2, r2, #4
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	440b      	add	r3, r1
 800459a:	761a      	strb	r2, [r3, #24]
}
 800459c:	bf00      	nop
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bc80      	pop	{r7}
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	e000e100 	.word	0xe000e100
 80045ac:	e000ed00 	.word	0xe000ed00

080045b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b089      	sub	sp, #36	; 0x24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	f1c3 0307 	rsb	r3, r3, #7
 80045ca:	2b04      	cmp	r3, #4
 80045cc:	bf28      	it	cs
 80045ce:	2304      	movcs	r3, #4
 80045d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	3304      	adds	r3, #4
 80045d6:	2b06      	cmp	r3, #6
 80045d8:	d902      	bls.n	80045e0 <NVIC_EncodePriority+0x30>
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	3b03      	subs	r3, #3
 80045de:	e000      	b.n	80045e2 <NVIC_EncodePriority+0x32>
 80045e0:	2300      	movs	r3, #0
 80045e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045e4:	f04f 32ff 	mov.w	r2, #4294967295
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	fa02 f303 	lsl.w	r3, r2, r3
 80045ee:	43da      	mvns	r2, r3
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	401a      	ands	r2, r3
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045f8:	f04f 31ff 	mov.w	r1, #4294967295
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004602:	43d9      	mvns	r1, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004608:	4313      	orrs	r3, r2
         );
}
 800460a:	4618      	mov	r0, r3
 800460c:	3724      	adds	r7, #36	; 0x24
 800460e:	46bd      	mov	sp, r7
 8004610:	bc80      	pop	{r7}
 8004612:	4770      	bx	lr

08004614 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	3b01      	subs	r3, #1
 8004620:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004624:	d301      	bcc.n	800462a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004626:	2301      	movs	r3, #1
 8004628:	e00f      	b.n	800464a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800462a:	4a0a      	ldr	r2, [pc, #40]	; (8004654 <SysTick_Config+0x40>)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	3b01      	subs	r3, #1
 8004630:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004632:	210f      	movs	r1, #15
 8004634:	f04f 30ff 	mov.w	r0, #4294967295
 8004638:	f7ff ff90 	bl	800455c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800463c:	4b05      	ldr	r3, [pc, #20]	; (8004654 <SysTick_Config+0x40>)
 800463e:	2200      	movs	r2, #0
 8004640:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004642:	4b04      	ldr	r3, [pc, #16]	; (8004654 <SysTick_Config+0x40>)
 8004644:	2207      	movs	r2, #7
 8004646:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	e000e010 	.word	0xe000e010

08004658 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f7ff ff49 	bl	80044f8 <__NVIC_SetPriorityGrouping>
}
 8004666:	bf00      	nop
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800466e:	b580      	push	{r7, lr}
 8004670:	b086      	sub	sp, #24
 8004672:	af00      	add	r7, sp, #0
 8004674:	4603      	mov	r3, r0
 8004676:	60b9      	str	r1, [r7, #8]
 8004678:	607a      	str	r2, [r7, #4]
 800467a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800467c:	2300      	movs	r3, #0
 800467e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004680:	f7ff ff5e 	bl	8004540 <__NVIC_GetPriorityGrouping>
 8004684:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	68b9      	ldr	r1, [r7, #8]
 800468a:	6978      	ldr	r0, [r7, #20]
 800468c:	f7ff ff90 	bl	80045b0 <NVIC_EncodePriority>
 8004690:	4602      	mov	r2, r0
 8004692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004696:	4611      	mov	r1, r2
 8004698:	4618      	mov	r0, r3
 800469a:	f7ff ff5f 	bl	800455c <__NVIC_SetPriority>
}
 800469e:	bf00      	nop
 80046a0:	3718      	adds	r7, #24
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b082      	sub	sp, #8
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7ff ffb0 	bl	8004614 <SysTick_Config>
 80046b4:	4603      	mov	r3, r0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
	...

080046c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b08b      	sub	sp, #44	; 0x2c
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046ca:	2300      	movs	r3, #0
 80046cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80046ce:	2300      	movs	r3, #0
 80046d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046d2:	e169      	b.n	80049a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80046d4:	2201      	movs	r2, #1
 80046d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d8:	fa02 f303 	lsl.w	r3, r2, r3
 80046dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	69fa      	ldr	r2, [r7, #28]
 80046e4:	4013      	ands	r3, r2
 80046e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	f040 8158 	bne.w	80049a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	4a9a      	ldr	r2, [pc, #616]	; (8004960 <HAL_GPIO_Init+0x2a0>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d05e      	beq.n	80047ba <HAL_GPIO_Init+0xfa>
 80046fc:	4a98      	ldr	r2, [pc, #608]	; (8004960 <HAL_GPIO_Init+0x2a0>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d875      	bhi.n	80047ee <HAL_GPIO_Init+0x12e>
 8004702:	4a98      	ldr	r2, [pc, #608]	; (8004964 <HAL_GPIO_Init+0x2a4>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d058      	beq.n	80047ba <HAL_GPIO_Init+0xfa>
 8004708:	4a96      	ldr	r2, [pc, #600]	; (8004964 <HAL_GPIO_Init+0x2a4>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d86f      	bhi.n	80047ee <HAL_GPIO_Init+0x12e>
 800470e:	4a96      	ldr	r2, [pc, #600]	; (8004968 <HAL_GPIO_Init+0x2a8>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d052      	beq.n	80047ba <HAL_GPIO_Init+0xfa>
 8004714:	4a94      	ldr	r2, [pc, #592]	; (8004968 <HAL_GPIO_Init+0x2a8>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d869      	bhi.n	80047ee <HAL_GPIO_Init+0x12e>
 800471a:	4a94      	ldr	r2, [pc, #592]	; (800496c <HAL_GPIO_Init+0x2ac>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d04c      	beq.n	80047ba <HAL_GPIO_Init+0xfa>
 8004720:	4a92      	ldr	r2, [pc, #584]	; (800496c <HAL_GPIO_Init+0x2ac>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d863      	bhi.n	80047ee <HAL_GPIO_Init+0x12e>
 8004726:	4a92      	ldr	r2, [pc, #584]	; (8004970 <HAL_GPIO_Init+0x2b0>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d046      	beq.n	80047ba <HAL_GPIO_Init+0xfa>
 800472c:	4a90      	ldr	r2, [pc, #576]	; (8004970 <HAL_GPIO_Init+0x2b0>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d85d      	bhi.n	80047ee <HAL_GPIO_Init+0x12e>
 8004732:	2b12      	cmp	r3, #18
 8004734:	d82a      	bhi.n	800478c <HAL_GPIO_Init+0xcc>
 8004736:	2b12      	cmp	r3, #18
 8004738:	d859      	bhi.n	80047ee <HAL_GPIO_Init+0x12e>
 800473a:	a201      	add	r2, pc, #4	; (adr r2, 8004740 <HAL_GPIO_Init+0x80>)
 800473c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004740:	080047bb 	.word	0x080047bb
 8004744:	08004795 	.word	0x08004795
 8004748:	080047a7 	.word	0x080047a7
 800474c:	080047e9 	.word	0x080047e9
 8004750:	080047ef 	.word	0x080047ef
 8004754:	080047ef 	.word	0x080047ef
 8004758:	080047ef 	.word	0x080047ef
 800475c:	080047ef 	.word	0x080047ef
 8004760:	080047ef 	.word	0x080047ef
 8004764:	080047ef 	.word	0x080047ef
 8004768:	080047ef 	.word	0x080047ef
 800476c:	080047ef 	.word	0x080047ef
 8004770:	080047ef 	.word	0x080047ef
 8004774:	080047ef 	.word	0x080047ef
 8004778:	080047ef 	.word	0x080047ef
 800477c:	080047ef 	.word	0x080047ef
 8004780:	080047ef 	.word	0x080047ef
 8004784:	0800479d 	.word	0x0800479d
 8004788:	080047b1 	.word	0x080047b1
 800478c:	4a79      	ldr	r2, [pc, #484]	; (8004974 <HAL_GPIO_Init+0x2b4>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d013      	beq.n	80047ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004792:	e02c      	b.n	80047ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	623b      	str	r3, [r7, #32]
          break;
 800479a:	e029      	b.n	80047f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	3304      	adds	r3, #4
 80047a2:	623b      	str	r3, [r7, #32]
          break;
 80047a4:	e024      	b.n	80047f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	3308      	adds	r3, #8
 80047ac:	623b      	str	r3, [r7, #32]
          break;
 80047ae:	e01f      	b.n	80047f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	330c      	adds	r3, #12
 80047b6:	623b      	str	r3, [r7, #32]
          break;
 80047b8:	e01a      	b.n	80047f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d102      	bne.n	80047c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80047c2:	2304      	movs	r3, #4
 80047c4:	623b      	str	r3, [r7, #32]
          break;
 80047c6:	e013      	b.n	80047f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d105      	bne.n	80047dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80047d0:	2308      	movs	r3, #8
 80047d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	69fa      	ldr	r2, [r7, #28]
 80047d8:	611a      	str	r2, [r3, #16]
          break;
 80047da:	e009      	b.n	80047f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80047dc:	2308      	movs	r3, #8
 80047de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	69fa      	ldr	r2, [r7, #28]
 80047e4:	615a      	str	r2, [r3, #20]
          break;
 80047e6:	e003      	b.n	80047f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80047e8:	2300      	movs	r3, #0
 80047ea:	623b      	str	r3, [r7, #32]
          break;
 80047ec:	e000      	b.n	80047f0 <HAL_GPIO_Init+0x130>
          break;
 80047ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	2bff      	cmp	r3, #255	; 0xff
 80047f4:	d801      	bhi.n	80047fa <HAL_GPIO_Init+0x13a>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	e001      	b.n	80047fe <HAL_GPIO_Init+0x13e>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	3304      	adds	r3, #4
 80047fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	2bff      	cmp	r3, #255	; 0xff
 8004804:	d802      	bhi.n	800480c <HAL_GPIO_Init+0x14c>
 8004806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	e002      	b.n	8004812 <HAL_GPIO_Init+0x152>
 800480c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480e:	3b08      	subs	r3, #8
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	210f      	movs	r1, #15
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	fa01 f303 	lsl.w	r3, r1, r3
 8004820:	43db      	mvns	r3, r3
 8004822:	401a      	ands	r2, r3
 8004824:	6a39      	ldr	r1, [r7, #32]
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	fa01 f303 	lsl.w	r3, r1, r3
 800482c:	431a      	orrs	r2, r3
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800483a:	2b00      	cmp	r3, #0
 800483c:	f000 80b1 	beq.w	80049a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004840:	4b4d      	ldr	r3, [pc, #308]	; (8004978 <HAL_GPIO_Init+0x2b8>)
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	4a4c      	ldr	r2, [pc, #304]	; (8004978 <HAL_GPIO_Init+0x2b8>)
 8004846:	f043 0301 	orr.w	r3, r3, #1
 800484a:	6193      	str	r3, [r2, #24]
 800484c:	4b4a      	ldr	r3, [pc, #296]	; (8004978 <HAL_GPIO_Init+0x2b8>)
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	f003 0301 	and.w	r3, r3, #1
 8004854:	60bb      	str	r3, [r7, #8]
 8004856:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004858:	4a48      	ldr	r2, [pc, #288]	; (800497c <HAL_GPIO_Init+0x2bc>)
 800485a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485c:	089b      	lsrs	r3, r3, #2
 800485e:	3302      	adds	r3, #2
 8004860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004864:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004868:	f003 0303 	and.w	r3, r3, #3
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	220f      	movs	r2, #15
 8004870:	fa02 f303 	lsl.w	r3, r2, r3
 8004874:	43db      	mvns	r3, r3
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	4013      	ands	r3, r2
 800487a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a40      	ldr	r2, [pc, #256]	; (8004980 <HAL_GPIO_Init+0x2c0>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d013      	beq.n	80048ac <HAL_GPIO_Init+0x1ec>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a3f      	ldr	r2, [pc, #252]	; (8004984 <HAL_GPIO_Init+0x2c4>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d00d      	beq.n	80048a8 <HAL_GPIO_Init+0x1e8>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a3e      	ldr	r2, [pc, #248]	; (8004988 <HAL_GPIO_Init+0x2c8>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d007      	beq.n	80048a4 <HAL_GPIO_Init+0x1e4>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a3d      	ldr	r2, [pc, #244]	; (800498c <HAL_GPIO_Init+0x2cc>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d101      	bne.n	80048a0 <HAL_GPIO_Init+0x1e0>
 800489c:	2303      	movs	r3, #3
 800489e:	e006      	b.n	80048ae <HAL_GPIO_Init+0x1ee>
 80048a0:	2304      	movs	r3, #4
 80048a2:	e004      	b.n	80048ae <HAL_GPIO_Init+0x1ee>
 80048a4:	2302      	movs	r3, #2
 80048a6:	e002      	b.n	80048ae <HAL_GPIO_Init+0x1ee>
 80048a8:	2301      	movs	r3, #1
 80048aa:	e000      	b.n	80048ae <HAL_GPIO_Init+0x1ee>
 80048ac:	2300      	movs	r3, #0
 80048ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048b0:	f002 0203 	and.w	r2, r2, #3
 80048b4:	0092      	lsls	r2, r2, #2
 80048b6:	4093      	lsls	r3, r2
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80048be:	492f      	ldr	r1, [pc, #188]	; (800497c <HAL_GPIO_Init+0x2bc>)
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c2:	089b      	lsrs	r3, r3, #2
 80048c4:	3302      	adds	r3, #2
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d006      	beq.n	80048e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80048d8:	4b2d      	ldr	r3, [pc, #180]	; (8004990 <HAL_GPIO_Init+0x2d0>)
 80048da:	689a      	ldr	r2, [r3, #8]
 80048dc:	492c      	ldr	r1, [pc, #176]	; (8004990 <HAL_GPIO_Init+0x2d0>)
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	608b      	str	r3, [r1, #8]
 80048e4:	e006      	b.n	80048f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80048e6:	4b2a      	ldr	r3, [pc, #168]	; (8004990 <HAL_GPIO_Init+0x2d0>)
 80048e8:	689a      	ldr	r2, [r3, #8]
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	43db      	mvns	r3, r3
 80048ee:	4928      	ldr	r1, [pc, #160]	; (8004990 <HAL_GPIO_Init+0x2d0>)
 80048f0:	4013      	ands	r3, r2
 80048f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d006      	beq.n	800490e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004900:	4b23      	ldr	r3, [pc, #140]	; (8004990 <HAL_GPIO_Init+0x2d0>)
 8004902:	68da      	ldr	r2, [r3, #12]
 8004904:	4922      	ldr	r1, [pc, #136]	; (8004990 <HAL_GPIO_Init+0x2d0>)
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	4313      	orrs	r3, r2
 800490a:	60cb      	str	r3, [r1, #12]
 800490c:	e006      	b.n	800491c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800490e:	4b20      	ldr	r3, [pc, #128]	; (8004990 <HAL_GPIO_Init+0x2d0>)
 8004910:	68da      	ldr	r2, [r3, #12]
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	43db      	mvns	r3, r3
 8004916:	491e      	ldr	r1, [pc, #120]	; (8004990 <HAL_GPIO_Init+0x2d0>)
 8004918:	4013      	ands	r3, r2
 800491a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d006      	beq.n	8004936 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004928:	4b19      	ldr	r3, [pc, #100]	; (8004990 <HAL_GPIO_Init+0x2d0>)
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	4918      	ldr	r1, [pc, #96]	; (8004990 <HAL_GPIO_Init+0x2d0>)
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	4313      	orrs	r3, r2
 8004932:	604b      	str	r3, [r1, #4]
 8004934:	e006      	b.n	8004944 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004936:	4b16      	ldr	r3, [pc, #88]	; (8004990 <HAL_GPIO_Init+0x2d0>)
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	43db      	mvns	r3, r3
 800493e:	4914      	ldr	r1, [pc, #80]	; (8004990 <HAL_GPIO_Init+0x2d0>)
 8004940:	4013      	ands	r3, r2
 8004942:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d021      	beq.n	8004994 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004950:	4b0f      	ldr	r3, [pc, #60]	; (8004990 <HAL_GPIO_Init+0x2d0>)
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	490e      	ldr	r1, [pc, #56]	; (8004990 <HAL_GPIO_Init+0x2d0>)
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	4313      	orrs	r3, r2
 800495a:	600b      	str	r3, [r1, #0]
 800495c:	e021      	b.n	80049a2 <HAL_GPIO_Init+0x2e2>
 800495e:	bf00      	nop
 8004960:	10320000 	.word	0x10320000
 8004964:	10310000 	.word	0x10310000
 8004968:	10220000 	.word	0x10220000
 800496c:	10210000 	.word	0x10210000
 8004970:	10120000 	.word	0x10120000
 8004974:	10110000 	.word	0x10110000
 8004978:	40021000 	.word	0x40021000
 800497c:	40010000 	.word	0x40010000
 8004980:	40010800 	.word	0x40010800
 8004984:	40010c00 	.word	0x40010c00
 8004988:	40011000 	.word	0x40011000
 800498c:	40011400 	.word	0x40011400
 8004990:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004994:	4b0b      	ldr	r3, [pc, #44]	; (80049c4 <HAL_GPIO_Init+0x304>)
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	43db      	mvns	r3, r3
 800499c:	4909      	ldr	r1, [pc, #36]	; (80049c4 <HAL_GPIO_Init+0x304>)
 800499e:	4013      	ands	r3, r2
 80049a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80049a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a4:	3301      	adds	r3, #1
 80049a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ae:	fa22 f303 	lsr.w	r3, r2, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f47f ae8e 	bne.w	80046d4 <HAL_GPIO_Init+0x14>
  }
}
 80049b8:	bf00      	nop
 80049ba:	bf00      	nop
 80049bc:	372c      	adds	r7, #44	; 0x2c
 80049be:	46bd      	mov	sp, r7
 80049c0:	bc80      	pop	{r7}
 80049c2:	4770      	bx	lr
 80049c4:	40010400 	.word	0x40010400

080049c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	460b      	mov	r3, r1
 80049d2:	807b      	strh	r3, [r7, #2]
 80049d4:	4613      	mov	r3, r2
 80049d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049d8:	787b      	ldrb	r3, [r7, #1]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d003      	beq.n	80049e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049de:	887a      	ldrh	r2, [r7, #2]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80049e4:	e003      	b.n	80049ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80049e6:	887b      	ldrh	r3, [r7, #2]
 80049e8:	041a      	lsls	r2, r3, #16
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	611a      	str	r2, [r3, #16]
}
 80049ee:	bf00      	nop
 80049f0:	370c      	adds	r7, #12
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bc80      	pop	{r7}
 80049f6:	4770      	bx	lr

080049f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e272      	b.n	8004ef0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f000 8087 	beq.w	8004b26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a18:	4b92      	ldr	r3, [pc, #584]	; (8004c64 <HAL_RCC_OscConfig+0x26c>)
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f003 030c 	and.w	r3, r3, #12
 8004a20:	2b04      	cmp	r3, #4
 8004a22:	d00c      	beq.n	8004a3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a24:	4b8f      	ldr	r3, [pc, #572]	; (8004c64 <HAL_RCC_OscConfig+0x26c>)
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f003 030c 	and.w	r3, r3, #12
 8004a2c:	2b08      	cmp	r3, #8
 8004a2e:	d112      	bne.n	8004a56 <HAL_RCC_OscConfig+0x5e>
 8004a30:	4b8c      	ldr	r3, [pc, #560]	; (8004c64 <HAL_RCC_OscConfig+0x26c>)
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a3c:	d10b      	bne.n	8004a56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a3e:	4b89      	ldr	r3, [pc, #548]	; (8004c64 <HAL_RCC_OscConfig+0x26c>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d06c      	beq.n	8004b24 <HAL_RCC_OscConfig+0x12c>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d168      	bne.n	8004b24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e24c      	b.n	8004ef0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a5e:	d106      	bne.n	8004a6e <HAL_RCC_OscConfig+0x76>
 8004a60:	4b80      	ldr	r3, [pc, #512]	; (8004c64 <HAL_RCC_OscConfig+0x26c>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a7f      	ldr	r2, [pc, #508]	; (8004c64 <HAL_RCC_OscConfig+0x26c>)
 8004a66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a6a:	6013      	str	r3, [r2, #0]
 8004a6c:	e02e      	b.n	8004acc <HAL_RCC_OscConfig+0xd4>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10c      	bne.n	8004a90 <HAL_RCC_OscConfig+0x98>
 8004a76:	4b7b      	ldr	r3, [pc, #492]	; (8004c64 <HAL_RCC_OscConfig+0x26c>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a7a      	ldr	r2, [pc, #488]	; (8004c64 <HAL_RCC_OscConfig+0x26c>)
 8004a7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a80:	6013      	str	r3, [r2, #0]
 8004a82:	4b78      	ldr	r3, [pc, #480]	; (8004c64 <HAL_RCC_OscConfig+0x26c>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a77      	ldr	r2, [pc, #476]	; (8004c64 <HAL_RCC_OscConfig+0x26c>)
 8004a88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	e01d      	b.n	8004acc <HAL_RCC_OscConfig+0xd4>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a98:	d10c      	bne.n	8004ab4 <HAL_RCC_OscConfig+0xbc>
 8004a9a:	4b72      	ldr	r3, [pc, #456]	; (8004c64 <HAL_RCC_OscConfig+0x26c>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a71      	ldr	r2, [pc, #452]	; (8004c64 <HAL_RCC_OscConfig+0x26c>)
 8004aa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004aa4:	6013      	str	r3, [r2, #0]
 8004aa6:	4b6f      	ldr	r3, [pc, #444]	; (8004c64 <HAL_RCC_OscConfig+0x26c>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a6e      	ldr	r2, [pc, #440]	; (8004c64 <HAL_RCC_OscConfig+0x26c>)
 8004aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ab0:	6013      	str	r3, [r2, #0]
 8004ab2:	e00b      	b.n	8004acc <HAL_RCC_OscConfig+0xd4>
 8004ab4:	4b6b      	ldr	r3, [pc, #428]	; (8004c64 <HAL_RCC_OscConfig+0x26c>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a6a      	ldr	r2, [pc, #424]	; (8004c64 <HAL_RCC_OscConfig+0x26c>)
 8004aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004abe:	6013      	str	r3, [r2, #0]
 8004ac0:	4b68      	ldr	r3, [pc, #416]	; (8004c64 <HAL_RCC_OscConfig+0x26c>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a67      	ldr	r2, [pc, #412]	; (8004c64 <HAL_RCC_OscConfig+0x26c>)
 8004ac6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d013      	beq.n	8004afc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad4:	f7ff fce2 	bl	800449c <HAL_GetTick>
 8004ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ada:	e008      	b.n	8004aee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004adc:	f7ff fcde 	bl	800449c <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b64      	cmp	r3, #100	; 0x64
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e200      	b.n	8004ef0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aee:	4b5d      	ldr	r3, [pc, #372]	; (8004c64 <HAL_RCC_OscConfig+0x26c>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d0f0      	beq.n	8004adc <HAL_RCC_OscConfig+0xe4>
 8004afa:	e014      	b.n	8004b26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004afc:	f7ff fcce 	bl	800449c <HAL_GetTick>
 8004b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b02:	e008      	b.n	8004b16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b04:	f7ff fcca 	bl	800449c <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b64      	cmp	r3, #100	; 0x64
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e1ec      	b.n	8004ef0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b16:	4b53      	ldr	r3, [pc, #332]	; (8004c64 <HAL_RCC_OscConfig+0x26c>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1f0      	bne.n	8004b04 <HAL_RCC_OscConfig+0x10c>
 8004b22:	e000      	b.n	8004b26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d063      	beq.n	8004bfa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b32:	4b4c      	ldr	r3, [pc, #304]	; (8004c64 <HAL_RCC_OscConfig+0x26c>)
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f003 030c 	and.w	r3, r3, #12
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00b      	beq.n	8004b56 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004b3e:	4b49      	ldr	r3, [pc, #292]	; (8004c64 <HAL_RCC_OscConfig+0x26c>)
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f003 030c 	and.w	r3, r3, #12
 8004b46:	2b08      	cmp	r3, #8
 8004b48:	d11c      	bne.n	8004b84 <HAL_RCC_OscConfig+0x18c>
 8004b4a:	4b46      	ldr	r3, [pc, #280]	; (8004c64 <HAL_RCC_OscConfig+0x26c>)
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d116      	bne.n	8004b84 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b56:	4b43      	ldr	r3, [pc, #268]	; (8004c64 <HAL_RCC_OscConfig+0x26c>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d005      	beq.n	8004b6e <HAL_RCC_OscConfig+0x176>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d001      	beq.n	8004b6e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e1c0      	b.n	8004ef0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b6e:	4b3d      	ldr	r3, [pc, #244]	; (8004c64 <HAL_RCC_OscConfig+0x26c>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	4939      	ldr	r1, [pc, #228]	; (8004c64 <HAL_RCC_OscConfig+0x26c>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b82:	e03a      	b.n	8004bfa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d020      	beq.n	8004bce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b8c:	4b36      	ldr	r3, [pc, #216]	; (8004c68 <HAL_RCC_OscConfig+0x270>)
 8004b8e:	2201      	movs	r2, #1
 8004b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b92:	f7ff fc83 	bl	800449c <HAL_GetTick>
 8004b96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b98:	e008      	b.n	8004bac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b9a:	f7ff fc7f 	bl	800449c <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d901      	bls.n	8004bac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e1a1      	b.n	8004ef0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bac:	4b2d      	ldr	r3, [pc, #180]	; (8004c64 <HAL_RCC_OscConfig+0x26c>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0302 	and.w	r3, r3, #2
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d0f0      	beq.n	8004b9a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bb8:	4b2a      	ldr	r3, [pc, #168]	; (8004c64 <HAL_RCC_OscConfig+0x26c>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	00db      	lsls	r3, r3, #3
 8004bc6:	4927      	ldr	r1, [pc, #156]	; (8004c64 <HAL_RCC_OscConfig+0x26c>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	600b      	str	r3, [r1, #0]
 8004bcc:	e015      	b.n	8004bfa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bce:	4b26      	ldr	r3, [pc, #152]	; (8004c68 <HAL_RCC_OscConfig+0x270>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd4:	f7ff fc62 	bl	800449c <HAL_GetTick>
 8004bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bda:	e008      	b.n	8004bee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bdc:	f7ff fc5e 	bl	800449c <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d901      	bls.n	8004bee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e180      	b.n	8004ef0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bee:	4b1d      	ldr	r3, [pc, #116]	; (8004c64 <HAL_RCC_OscConfig+0x26c>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1f0      	bne.n	8004bdc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0308 	and.w	r3, r3, #8
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d03a      	beq.n	8004c7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d019      	beq.n	8004c42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c0e:	4b17      	ldr	r3, [pc, #92]	; (8004c6c <HAL_RCC_OscConfig+0x274>)
 8004c10:	2201      	movs	r2, #1
 8004c12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c14:	f7ff fc42 	bl	800449c <HAL_GetTick>
 8004c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c1a:	e008      	b.n	8004c2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c1c:	f7ff fc3e 	bl	800449c <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e160      	b.n	8004ef0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c2e:	4b0d      	ldr	r3, [pc, #52]	; (8004c64 <HAL_RCC_OscConfig+0x26c>)
 8004c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d0f0      	beq.n	8004c1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004c3a:	2001      	movs	r0, #1
 8004c3c:	f000 fa9c 	bl	8005178 <RCC_Delay>
 8004c40:	e01c      	b.n	8004c7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c42:	4b0a      	ldr	r3, [pc, #40]	; (8004c6c <HAL_RCC_OscConfig+0x274>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c48:	f7ff fc28 	bl	800449c <HAL_GetTick>
 8004c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c4e:	e00f      	b.n	8004c70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c50:	f7ff fc24 	bl	800449c <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d908      	bls.n	8004c70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e146      	b.n	8004ef0 <HAL_RCC_OscConfig+0x4f8>
 8004c62:	bf00      	nop
 8004c64:	40021000 	.word	0x40021000
 8004c68:	42420000 	.word	0x42420000
 8004c6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c70:	4b92      	ldr	r3, [pc, #584]	; (8004ebc <HAL_RCC_OscConfig+0x4c4>)
 8004c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c74:	f003 0302 	and.w	r3, r3, #2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1e9      	bne.n	8004c50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0304 	and.w	r3, r3, #4
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f000 80a6 	beq.w	8004dd6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c8e:	4b8b      	ldr	r3, [pc, #556]	; (8004ebc <HAL_RCC_OscConfig+0x4c4>)
 8004c90:	69db      	ldr	r3, [r3, #28]
 8004c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10d      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c9a:	4b88      	ldr	r3, [pc, #544]	; (8004ebc <HAL_RCC_OscConfig+0x4c4>)
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	4a87      	ldr	r2, [pc, #540]	; (8004ebc <HAL_RCC_OscConfig+0x4c4>)
 8004ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ca4:	61d3      	str	r3, [r2, #28]
 8004ca6:	4b85      	ldr	r3, [pc, #532]	; (8004ebc <HAL_RCC_OscConfig+0x4c4>)
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cae:	60bb      	str	r3, [r7, #8]
 8004cb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb6:	4b82      	ldr	r3, [pc, #520]	; (8004ec0 <HAL_RCC_OscConfig+0x4c8>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d118      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cc2:	4b7f      	ldr	r3, [pc, #508]	; (8004ec0 <HAL_RCC_OscConfig+0x4c8>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a7e      	ldr	r2, [pc, #504]	; (8004ec0 <HAL_RCC_OscConfig+0x4c8>)
 8004cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ccc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cce:	f7ff fbe5 	bl	800449c <HAL_GetTick>
 8004cd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cd4:	e008      	b.n	8004ce8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cd6:	f7ff fbe1 	bl	800449c <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b64      	cmp	r3, #100	; 0x64
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e103      	b.n	8004ef0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ce8:	4b75      	ldr	r3, [pc, #468]	; (8004ec0 <HAL_RCC_OscConfig+0x4c8>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0f0      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d106      	bne.n	8004d0a <HAL_RCC_OscConfig+0x312>
 8004cfc:	4b6f      	ldr	r3, [pc, #444]	; (8004ebc <HAL_RCC_OscConfig+0x4c4>)
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	4a6e      	ldr	r2, [pc, #440]	; (8004ebc <HAL_RCC_OscConfig+0x4c4>)
 8004d02:	f043 0301 	orr.w	r3, r3, #1
 8004d06:	6213      	str	r3, [r2, #32]
 8004d08:	e02d      	b.n	8004d66 <HAL_RCC_OscConfig+0x36e>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10c      	bne.n	8004d2c <HAL_RCC_OscConfig+0x334>
 8004d12:	4b6a      	ldr	r3, [pc, #424]	; (8004ebc <HAL_RCC_OscConfig+0x4c4>)
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	4a69      	ldr	r2, [pc, #420]	; (8004ebc <HAL_RCC_OscConfig+0x4c4>)
 8004d18:	f023 0301 	bic.w	r3, r3, #1
 8004d1c:	6213      	str	r3, [r2, #32]
 8004d1e:	4b67      	ldr	r3, [pc, #412]	; (8004ebc <HAL_RCC_OscConfig+0x4c4>)
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	4a66      	ldr	r2, [pc, #408]	; (8004ebc <HAL_RCC_OscConfig+0x4c4>)
 8004d24:	f023 0304 	bic.w	r3, r3, #4
 8004d28:	6213      	str	r3, [r2, #32]
 8004d2a:	e01c      	b.n	8004d66 <HAL_RCC_OscConfig+0x36e>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	2b05      	cmp	r3, #5
 8004d32:	d10c      	bne.n	8004d4e <HAL_RCC_OscConfig+0x356>
 8004d34:	4b61      	ldr	r3, [pc, #388]	; (8004ebc <HAL_RCC_OscConfig+0x4c4>)
 8004d36:	6a1b      	ldr	r3, [r3, #32]
 8004d38:	4a60      	ldr	r2, [pc, #384]	; (8004ebc <HAL_RCC_OscConfig+0x4c4>)
 8004d3a:	f043 0304 	orr.w	r3, r3, #4
 8004d3e:	6213      	str	r3, [r2, #32]
 8004d40:	4b5e      	ldr	r3, [pc, #376]	; (8004ebc <HAL_RCC_OscConfig+0x4c4>)
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	4a5d      	ldr	r2, [pc, #372]	; (8004ebc <HAL_RCC_OscConfig+0x4c4>)
 8004d46:	f043 0301 	orr.w	r3, r3, #1
 8004d4a:	6213      	str	r3, [r2, #32]
 8004d4c:	e00b      	b.n	8004d66 <HAL_RCC_OscConfig+0x36e>
 8004d4e:	4b5b      	ldr	r3, [pc, #364]	; (8004ebc <HAL_RCC_OscConfig+0x4c4>)
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	4a5a      	ldr	r2, [pc, #360]	; (8004ebc <HAL_RCC_OscConfig+0x4c4>)
 8004d54:	f023 0301 	bic.w	r3, r3, #1
 8004d58:	6213      	str	r3, [r2, #32]
 8004d5a:	4b58      	ldr	r3, [pc, #352]	; (8004ebc <HAL_RCC_OscConfig+0x4c4>)
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	4a57      	ldr	r2, [pc, #348]	; (8004ebc <HAL_RCC_OscConfig+0x4c4>)
 8004d60:	f023 0304 	bic.w	r3, r3, #4
 8004d64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d015      	beq.n	8004d9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d6e:	f7ff fb95 	bl	800449c <HAL_GetTick>
 8004d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d74:	e00a      	b.n	8004d8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d76:	f7ff fb91 	bl	800449c <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d901      	bls.n	8004d8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e0b1      	b.n	8004ef0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d8c:	4b4b      	ldr	r3, [pc, #300]	; (8004ebc <HAL_RCC_OscConfig+0x4c4>)
 8004d8e:	6a1b      	ldr	r3, [r3, #32]
 8004d90:	f003 0302 	and.w	r3, r3, #2
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d0ee      	beq.n	8004d76 <HAL_RCC_OscConfig+0x37e>
 8004d98:	e014      	b.n	8004dc4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d9a:	f7ff fb7f 	bl	800449c <HAL_GetTick>
 8004d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004da0:	e00a      	b.n	8004db8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004da2:	f7ff fb7b 	bl	800449c <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d901      	bls.n	8004db8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e09b      	b.n	8004ef0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004db8:	4b40      	ldr	r3, [pc, #256]	; (8004ebc <HAL_RCC_OscConfig+0x4c4>)
 8004dba:	6a1b      	ldr	r3, [r3, #32]
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1ee      	bne.n	8004da2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004dc4:	7dfb      	ldrb	r3, [r7, #23]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d105      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dca:	4b3c      	ldr	r3, [pc, #240]	; (8004ebc <HAL_RCC_OscConfig+0x4c4>)
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	4a3b      	ldr	r2, [pc, #236]	; (8004ebc <HAL_RCC_OscConfig+0x4c4>)
 8004dd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dd4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	69db      	ldr	r3, [r3, #28]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	f000 8087 	beq.w	8004eee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004de0:	4b36      	ldr	r3, [pc, #216]	; (8004ebc <HAL_RCC_OscConfig+0x4c4>)
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f003 030c 	and.w	r3, r3, #12
 8004de8:	2b08      	cmp	r3, #8
 8004dea:	d061      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	69db      	ldr	r3, [r3, #28]
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d146      	bne.n	8004e82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004df4:	4b33      	ldr	r3, [pc, #204]	; (8004ec4 <HAL_RCC_OscConfig+0x4cc>)
 8004df6:	2200      	movs	r2, #0
 8004df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dfa:	f7ff fb4f 	bl	800449c <HAL_GetTick>
 8004dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e00:	e008      	b.n	8004e14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e02:	f7ff fb4b 	bl	800449c <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d901      	bls.n	8004e14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e06d      	b.n	8004ef0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e14:	4b29      	ldr	r3, [pc, #164]	; (8004ebc <HAL_RCC_OscConfig+0x4c4>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1f0      	bne.n	8004e02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e28:	d108      	bne.n	8004e3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004e2a:	4b24      	ldr	r3, [pc, #144]	; (8004ebc <HAL_RCC_OscConfig+0x4c4>)
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	4921      	ldr	r1, [pc, #132]	; (8004ebc <HAL_RCC_OscConfig+0x4c4>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e3c:	4b1f      	ldr	r3, [pc, #124]	; (8004ebc <HAL_RCC_OscConfig+0x4c4>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a19      	ldr	r1, [r3, #32]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4c:	430b      	orrs	r3, r1
 8004e4e:	491b      	ldr	r1, [pc, #108]	; (8004ebc <HAL_RCC_OscConfig+0x4c4>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e54:	4b1b      	ldr	r3, [pc, #108]	; (8004ec4 <HAL_RCC_OscConfig+0x4cc>)
 8004e56:	2201      	movs	r2, #1
 8004e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e5a:	f7ff fb1f 	bl	800449c <HAL_GetTick>
 8004e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e60:	e008      	b.n	8004e74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e62:	f7ff fb1b 	bl	800449c <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d901      	bls.n	8004e74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e03d      	b.n	8004ef0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e74:	4b11      	ldr	r3, [pc, #68]	; (8004ebc <HAL_RCC_OscConfig+0x4c4>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d0f0      	beq.n	8004e62 <HAL_RCC_OscConfig+0x46a>
 8004e80:	e035      	b.n	8004eee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e82:	4b10      	ldr	r3, [pc, #64]	; (8004ec4 <HAL_RCC_OscConfig+0x4cc>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e88:	f7ff fb08 	bl	800449c <HAL_GetTick>
 8004e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e8e:	e008      	b.n	8004ea2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e90:	f7ff fb04 	bl	800449c <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e026      	b.n	8004ef0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ea2:	4b06      	ldr	r3, [pc, #24]	; (8004ebc <HAL_RCC_OscConfig+0x4c4>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1f0      	bne.n	8004e90 <HAL_RCC_OscConfig+0x498>
 8004eae:	e01e      	b.n	8004eee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	69db      	ldr	r3, [r3, #28]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d107      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e019      	b.n	8004ef0 <HAL_RCC_OscConfig+0x4f8>
 8004ebc:	40021000 	.word	0x40021000
 8004ec0:	40007000 	.word	0x40007000
 8004ec4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ec8:	4b0b      	ldr	r3, [pc, #44]	; (8004ef8 <HAL_RCC_OscConfig+0x500>)
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d106      	bne.n	8004eea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d001      	beq.n	8004eee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e000      	b.n	8004ef0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3718      	adds	r7, #24
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	40021000 	.word	0x40021000

08004efc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d101      	bne.n	8004f10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e0d0      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f10:	4b6a      	ldr	r3, [pc, #424]	; (80050bc <HAL_RCC_ClockConfig+0x1c0>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0307 	and.w	r3, r3, #7
 8004f18:	683a      	ldr	r2, [r7, #0]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d910      	bls.n	8004f40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f1e:	4b67      	ldr	r3, [pc, #412]	; (80050bc <HAL_RCC_ClockConfig+0x1c0>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f023 0207 	bic.w	r2, r3, #7
 8004f26:	4965      	ldr	r1, [pc, #404]	; (80050bc <HAL_RCC_ClockConfig+0x1c0>)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f2e:	4b63      	ldr	r3, [pc, #396]	; (80050bc <HAL_RCC_ClockConfig+0x1c0>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0307 	and.w	r3, r3, #7
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d001      	beq.n	8004f40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e0b8      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0302 	and.w	r3, r3, #2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d020      	beq.n	8004f8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0304 	and.w	r3, r3, #4
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d005      	beq.n	8004f64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f58:	4b59      	ldr	r3, [pc, #356]	; (80050c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	4a58      	ldr	r2, [pc, #352]	; (80050c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0308 	and.w	r3, r3, #8
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d005      	beq.n	8004f7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f70:	4b53      	ldr	r3, [pc, #332]	; (80050c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	4a52      	ldr	r2, [pc, #328]	; (80050c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f76:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004f7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f7c:	4b50      	ldr	r3, [pc, #320]	; (80050c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	494d      	ldr	r1, [pc, #308]	; (80050c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d040      	beq.n	800501c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d107      	bne.n	8004fb2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fa2:	4b47      	ldr	r3, [pc, #284]	; (80050c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d115      	bne.n	8004fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e07f      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d107      	bne.n	8004fca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fba:	4b41      	ldr	r3, [pc, #260]	; (80050c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d109      	bne.n	8004fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e073      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fca:	4b3d      	ldr	r3, [pc, #244]	; (80050c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0302 	and.w	r3, r3, #2
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e06b      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fda:	4b39      	ldr	r3, [pc, #228]	; (80050c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	f023 0203 	bic.w	r2, r3, #3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	4936      	ldr	r1, [pc, #216]	; (80050c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fec:	f7ff fa56 	bl	800449c <HAL_GetTick>
 8004ff0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ff2:	e00a      	b.n	800500a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ff4:	f7ff fa52 	bl	800449c <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005002:	4293      	cmp	r3, r2
 8005004:	d901      	bls.n	800500a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e053      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800500a:	4b2d      	ldr	r3, [pc, #180]	; (80050c0 <HAL_RCC_ClockConfig+0x1c4>)
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f003 020c 	and.w	r2, r3, #12
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	429a      	cmp	r2, r3
 800501a:	d1eb      	bne.n	8004ff4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800501c:	4b27      	ldr	r3, [pc, #156]	; (80050bc <HAL_RCC_ClockConfig+0x1c0>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0307 	and.w	r3, r3, #7
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	429a      	cmp	r2, r3
 8005028:	d210      	bcs.n	800504c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800502a:	4b24      	ldr	r3, [pc, #144]	; (80050bc <HAL_RCC_ClockConfig+0x1c0>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f023 0207 	bic.w	r2, r3, #7
 8005032:	4922      	ldr	r1, [pc, #136]	; (80050bc <HAL_RCC_ClockConfig+0x1c0>)
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	4313      	orrs	r3, r2
 8005038:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800503a:	4b20      	ldr	r3, [pc, #128]	; (80050bc <HAL_RCC_ClockConfig+0x1c0>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0307 	and.w	r3, r3, #7
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	429a      	cmp	r2, r3
 8005046:	d001      	beq.n	800504c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e032      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0304 	and.w	r3, r3, #4
 8005054:	2b00      	cmp	r3, #0
 8005056:	d008      	beq.n	800506a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005058:	4b19      	ldr	r3, [pc, #100]	; (80050c0 <HAL_RCC_ClockConfig+0x1c4>)
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	4916      	ldr	r1, [pc, #88]	; (80050c0 <HAL_RCC_ClockConfig+0x1c4>)
 8005066:	4313      	orrs	r3, r2
 8005068:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0308 	and.w	r3, r3, #8
 8005072:	2b00      	cmp	r3, #0
 8005074:	d009      	beq.n	800508a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005076:	4b12      	ldr	r3, [pc, #72]	; (80050c0 <HAL_RCC_ClockConfig+0x1c4>)
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	00db      	lsls	r3, r3, #3
 8005084:	490e      	ldr	r1, [pc, #56]	; (80050c0 <HAL_RCC_ClockConfig+0x1c4>)
 8005086:	4313      	orrs	r3, r2
 8005088:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800508a:	f000 f821 	bl	80050d0 <HAL_RCC_GetSysClockFreq>
 800508e:	4602      	mov	r2, r0
 8005090:	4b0b      	ldr	r3, [pc, #44]	; (80050c0 <HAL_RCC_ClockConfig+0x1c4>)
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	091b      	lsrs	r3, r3, #4
 8005096:	f003 030f 	and.w	r3, r3, #15
 800509a:	490a      	ldr	r1, [pc, #40]	; (80050c4 <HAL_RCC_ClockConfig+0x1c8>)
 800509c:	5ccb      	ldrb	r3, [r1, r3]
 800509e:	fa22 f303 	lsr.w	r3, r2, r3
 80050a2:	4a09      	ldr	r2, [pc, #36]	; (80050c8 <HAL_RCC_ClockConfig+0x1cc>)
 80050a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80050a6:	4b09      	ldr	r3, [pc, #36]	; (80050cc <HAL_RCC_ClockConfig+0x1d0>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7ff f9b4 	bl	8004418 <HAL_InitTick>

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	40022000 	.word	0x40022000
 80050c0:	40021000 	.word	0x40021000
 80050c4:	0800616c 	.word	0x0800616c
 80050c8:	20000000 	.word	0x20000000
 80050cc:	20000010 	.word	0x20000010

080050d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b087      	sub	sp, #28
 80050d4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80050d6:	2300      	movs	r3, #0
 80050d8:	60fb      	str	r3, [r7, #12]
 80050da:	2300      	movs	r3, #0
 80050dc:	60bb      	str	r3, [r7, #8]
 80050de:	2300      	movs	r3, #0
 80050e0:	617b      	str	r3, [r7, #20]
 80050e2:	2300      	movs	r3, #0
 80050e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80050e6:	2300      	movs	r3, #0
 80050e8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80050ea:	4b1e      	ldr	r3, [pc, #120]	; (8005164 <HAL_RCC_GetSysClockFreq+0x94>)
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f003 030c 	and.w	r3, r3, #12
 80050f6:	2b04      	cmp	r3, #4
 80050f8:	d002      	beq.n	8005100 <HAL_RCC_GetSysClockFreq+0x30>
 80050fa:	2b08      	cmp	r3, #8
 80050fc:	d003      	beq.n	8005106 <HAL_RCC_GetSysClockFreq+0x36>
 80050fe:	e027      	b.n	8005150 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005100:	4b19      	ldr	r3, [pc, #100]	; (8005168 <HAL_RCC_GetSysClockFreq+0x98>)
 8005102:	613b      	str	r3, [r7, #16]
      break;
 8005104:	e027      	b.n	8005156 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	0c9b      	lsrs	r3, r3, #18
 800510a:	f003 030f 	and.w	r3, r3, #15
 800510e:	4a17      	ldr	r2, [pc, #92]	; (800516c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005110:	5cd3      	ldrb	r3, [r2, r3]
 8005112:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d010      	beq.n	8005140 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800511e:	4b11      	ldr	r3, [pc, #68]	; (8005164 <HAL_RCC_GetSysClockFreq+0x94>)
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	0c5b      	lsrs	r3, r3, #17
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	4a11      	ldr	r2, [pc, #68]	; (8005170 <HAL_RCC_GetSysClockFreq+0xa0>)
 800512a:	5cd3      	ldrb	r3, [r2, r3]
 800512c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a0d      	ldr	r2, [pc, #52]	; (8005168 <HAL_RCC_GetSysClockFreq+0x98>)
 8005132:	fb03 f202 	mul.w	r2, r3, r2
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	fbb2 f3f3 	udiv	r3, r2, r3
 800513c:	617b      	str	r3, [r7, #20]
 800513e:	e004      	b.n	800514a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a0c      	ldr	r2, [pc, #48]	; (8005174 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005144:	fb02 f303 	mul.w	r3, r2, r3
 8005148:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	613b      	str	r3, [r7, #16]
      break;
 800514e:	e002      	b.n	8005156 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005150:	4b05      	ldr	r3, [pc, #20]	; (8005168 <HAL_RCC_GetSysClockFreq+0x98>)
 8005152:	613b      	str	r3, [r7, #16]
      break;
 8005154:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005156:	693b      	ldr	r3, [r7, #16]
}
 8005158:	4618      	mov	r0, r3
 800515a:	371c      	adds	r7, #28
 800515c:	46bd      	mov	sp, r7
 800515e:	bc80      	pop	{r7}
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	40021000 	.word	0x40021000
 8005168:	007a1200 	.word	0x007a1200
 800516c:	080066f0 	.word	0x080066f0
 8005170:	08006700 	.word	0x08006700
 8005174:	003d0900 	.word	0x003d0900

08005178 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005178:	b480      	push	{r7}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005180:	4b0a      	ldr	r3, [pc, #40]	; (80051ac <RCC_Delay+0x34>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a0a      	ldr	r2, [pc, #40]	; (80051b0 <RCC_Delay+0x38>)
 8005186:	fba2 2303 	umull	r2, r3, r2, r3
 800518a:	0a5b      	lsrs	r3, r3, #9
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	fb02 f303 	mul.w	r3, r2, r3
 8005192:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005194:	bf00      	nop
  }
  while (Delay --);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	1e5a      	subs	r2, r3, #1
 800519a:	60fa      	str	r2, [r7, #12]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1f9      	bne.n	8005194 <RCC_Delay+0x1c>
}
 80051a0:	bf00      	nop
 80051a2:	bf00      	nop
 80051a4:	3714      	adds	r7, #20
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bc80      	pop	{r7}
 80051aa:	4770      	bx	lr
 80051ac:	20000000 	.word	0x20000000
 80051b0:	10624dd3 	.word	0x10624dd3

080051b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e041      	b.n	800524a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d106      	bne.n	80051e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7fb f94a 	bl	8000474 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	3304      	adds	r3, #4
 80051f0:	4619      	mov	r1, r3
 80051f2:	4610      	mov	r0, r2
 80051f4:	f000 f940 	bl	8005478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3708      	adds	r7, #8
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
	...

08005254 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b01      	cmp	r3, #1
 8005266:	d001      	beq.n	800526c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e032      	b.n	80052d2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2202      	movs	r2, #2
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a18      	ldr	r2, [pc, #96]	; (80052dc <HAL_TIM_Base_Start+0x88>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d00e      	beq.n	800529c <HAL_TIM_Base_Start+0x48>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005286:	d009      	beq.n	800529c <HAL_TIM_Base_Start+0x48>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a14      	ldr	r2, [pc, #80]	; (80052e0 <HAL_TIM_Base_Start+0x8c>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d004      	beq.n	800529c <HAL_TIM_Base_Start+0x48>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a13      	ldr	r2, [pc, #76]	; (80052e4 <HAL_TIM_Base_Start+0x90>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d111      	bne.n	80052c0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f003 0307 	and.w	r3, r3, #7
 80052a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2b06      	cmp	r3, #6
 80052ac:	d010      	beq.n	80052d0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f042 0201 	orr.w	r2, r2, #1
 80052bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052be:	e007      	b.n	80052d0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f042 0201 	orr.w	r2, r2, #1
 80052ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bc80      	pop	{r7}
 80052da:	4770      	bx	lr
 80052dc:	40012c00 	.word	0x40012c00
 80052e0:	40000400 	.word	0x40000400
 80052e4:	40000800 	.word	0x40000800

080052e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052f2:	2300      	movs	r3, #0
 80052f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d101      	bne.n	8005304 <HAL_TIM_ConfigClockSource+0x1c>
 8005300:	2302      	movs	r3, #2
 8005302:	e0b4      	b.n	800546e <HAL_TIM_ConfigClockSource+0x186>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2202      	movs	r2, #2
 8005310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005322:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800532a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68ba      	ldr	r2, [r7, #8]
 8005332:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800533c:	d03e      	beq.n	80053bc <HAL_TIM_ConfigClockSource+0xd4>
 800533e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005342:	f200 8087 	bhi.w	8005454 <HAL_TIM_ConfigClockSource+0x16c>
 8005346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800534a:	f000 8086 	beq.w	800545a <HAL_TIM_ConfigClockSource+0x172>
 800534e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005352:	d87f      	bhi.n	8005454 <HAL_TIM_ConfigClockSource+0x16c>
 8005354:	2b70      	cmp	r3, #112	; 0x70
 8005356:	d01a      	beq.n	800538e <HAL_TIM_ConfigClockSource+0xa6>
 8005358:	2b70      	cmp	r3, #112	; 0x70
 800535a:	d87b      	bhi.n	8005454 <HAL_TIM_ConfigClockSource+0x16c>
 800535c:	2b60      	cmp	r3, #96	; 0x60
 800535e:	d050      	beq.n	8005402 <HAL_TIM_ConfigClockSource+0x11a>
 8005360:	2b60      	cmp	r3, #96	; 0x60
 8005362:	d877      	bhi.n	8005454 <HAL_TIM_ConfigClockSource+0x16c>
 8005364:	2b50      	cmp	r3, #80	; 0x50
 8005366:	d03c      	beq.n	80053e2 <HAL_TIM_ConfigClockSource+0xfa>
 8005368:	2b50      	cmp	r3, #80	; 0x50
 800536a:	d873      	bhi.n	8005454 <HAL_TIM_ConfigClockSource+0x16c>
 800536c:	2b40      	cmp	r3, #64	; 0x40
 800536e:	d058      	beq.n	8005422 <HAL_TIM_ConfigClockSource+0x13a>
 8005370:	2b40      	cmp	r3, #64	; 0x40
 8005372:	d86f      	bhi.n	8005454 <HAL_TIM_ConfigClockSource+0x16c>
 8005374:	2b30      	cmp	r3, #48	; 0x30
 8005376:	d064      	beq.n	8005442 <HAL_TIM_ConfigClockSource+0x15a>
 8005378:	2b30      	cmp	r3, #48	; 0x30
 800537a:	d86b      	bhi.n	8005454 <HAL_TIM_ConfigClockSource+0x16c>
 800537c:	2b20      	cmp	r3, #32
 800537e:	d060      	beq.n	8005442 <HAL_TIM_ConfigClockSource+0x15a>
 8005380:	2b20      	cmp	r3, #32
 8005382:	d867      	bhi.n	8005454 <HAL_TIM_ConfigClockSource+0x16c>
 8005384:	2b00      	cmp	r3, #0
 8005386:	d05c      	beq.n	8005442 <HAL_TIM_ConfigClockSource+0x15a>
 8005388:	2b10      	cmp	r3, #16
 800538a:	d05a      	beq.n	8005442 <HAL_TIM_ConfigClockSource+0x15a>
 800538c:	e062      	b.n	8005454 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800539e:	f000 f944 	bl	800562a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68ba      	ldr	r2, [r7, #8]
 80053b8:	609a      	str	r2, [r3, #8]
      break;
 80053ba:	e04f      	b.n	800545c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053cc:	f000 f92d 	bl	800562a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689a      	ldr	r2, [r3, #8]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053de:	609a      	str	r2, [r3, #8]
      break;
 80053e0:	e03c      	b.n	800545c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053ee:	461a      	mov	r2, r3
 80053f0:	f000 f8a4 	bl	800553c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2150      	movs	r1, #80	; 0x50
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 f8fb 	bl	80055f6 <TIM_ITRx_SetConfig>
      break;
 8005400:	e02c      	b.n	800545c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800540e:	461a      	mov	r2, r3
 8005410:	f000 f8c2 	bl	8005598 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2160      	movs	r1, #96	; 0x60
 800541a:	4618      	mov	r0, r3
 800541c:	f000 f8eb 	bl	80055f6 <TIM_ITRx_SetConfig>
      break;
 8005420:	e01c      	b.n	800545c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800542e:	461a      	mov	r2, r3
 8005430:	f000 f884 	bl	800553c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2140      	movs	r1, #64	; 0x40
 800543a:	4618      	mov	r0, r3
 800543c:	f000 f8db 	bl	80055f6 <TIM_ITRx_SetConfig>
      break;
 8005440:	e00c      	b.n	800545c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4619      	mov	r1, r3
 800544c:	4610      	mov	r0, r2
 800544e:	f000 f8d2 	bl	80055f6 <TIM_ITRx_SetConfig>
      break;
 8005452:	e003      	b.n	800545c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	73fb      	strb	r3, [r7, #15]
      break;
 8005458:	e000      	b.n	800545c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800545a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800546c:	7bfb      	ldrb	r3, [r7, #15]
}
 800546e:	4618      	mov	r0, r3
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
	...

08005478 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a29      	ldr	r2, [pc, #164]	; (8005530 <TIM_Base_SetConfig+0xb8>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d00b      	beq.n	80054a8 <TIM_Base_SetConfig+0x30>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005496:	d007      	beq.n	80054a8 <TIM_Base_SetConfig+0x30>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a26      	ldr	r2, [pc, #152]	; (8005534 <TIM_Base_SetConfig+0xbc>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d003      	beq.n	80054a8 <TIM_Base_SetConfig+0x30>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a25      	ldr	r2, [pc, #148]	; (8005538 <TIM_Base_SetConfig+0xc0>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d108      	bne.n	80054ba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a1c      	ldr	r2, [pc, #112]	; (8005530 <TIM_Base_SetConfig+0xb8>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d00b      	beq.n	80054da <TIM_Base_SetConfig+0x62>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054c8:	d007      	beq.n	80054da <TIM_Base_SetConfig+0x62>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a19      	ldr	r2, [pc, #100]	; (8005534 <TIM_Base_SetConfig+0xbc>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d003      	beq.n	80054da <TIM_Base_SetConfig+0x62>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a18      	ldr	r2, [pc, #96]	; (8005538 <TIM_Base_SetConfig+0xc0>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d108      	bne.n	80054ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a07      	ldr	r2, [pc, #28]	; (8005530 <TIM_Base_SetConfig+0xb8>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d103      	bne.n	8005520 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	691a      	ldr	r2, [r3, #16]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	615a      	str	r2, [r3, #20]
}
 8005526:	bf00      	nop
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	bc80      	pop	{r7}
 800552e:	4770      	bx	lr
 8005530:	40012c00 	.word	0x40012c00
 8005534:	40000400 	.word	0x40000400
 8005538:	40000800 	.word	0x40000800

0800553c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800553c:	b480      	push	{r7}
 800553e:	b087      	sub	sp, #28
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	f023 0201 	bic.w	r2, r3, #1
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005566:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	011b      	lsls	r3, r3, #4
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	4313      	orrs	r3, r2
 8005570:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f023 030a 	bic.w	r3, r3, #10
 8005578:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	4313      	orrs	r3, r2
 8005580:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	621a      	str	r2, [r3, #32]
}
 800558e:	bf00      	nop
 8005590:	371c      	adds	r7, #28
 8005592:	46bd      	mov	sp, r7
 8005594:	bc80      	pop	{r7}
 8005596:	4770      	bx	lr

08005598 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005598:	b480      	push	{r7}
 800559a:	b087      	sub	sp, #28
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6a1b      	ldr	r3, [r3, #32]
 80055a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	f023 0210 	bic.w	r2, r3, #16
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	031b      	lsls	r3, r3, #12
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055d4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	011b      	lsls	r3, r3, #4
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	4313      	orrs	r3, r2
 80055de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	621a      	str	r2, [r3, #32]
}
 80055ec:	bf00      	nop
 80055ee:	371c      	adds	r7, #28
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bc80      	pop	{r7}
 80055f4:	4770      	bx	lr

080055f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b085      	sub	sp, #20
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
 80055fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800560c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800560e:	683a      	ldr	r2, [r7, #0]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	4313      	orrs	r3, r2
 8005614:	f043 0307 	orr.w	r3, r3, #7
 8005618:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	609a      	str	r2, [r3, #8]
}
 8005620:	bf00      	nop
 8005622:	3714      	adds	r7, #20
 8005624:	46bd      	mov	sp, r7
 8005626:	bc80      	pop	{r7}
 8005628:	4770      	bx	lr

0800562a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800562a:	b480      	push	{r7}
 800562c:	b087      	sub	sp, #28
 800562e:	af00      	add	r7, sp, #0
 8005630:	60f8      	str	r0, [r7, #12]
 8005632:	60b9      	str	r1, [r7, #8]
 8005634:	607a      	str	r2, [r7, #4]
 8005636:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005644:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	021a      	lsls	r2, r3, #8
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	431a      	orrs	r2, r3
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	4313      	orrs	r3, r2
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	4313      	orrs	r3, r2
 8005656:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	609a      	str	r2, [r3, #8]
}
 800565e:	bf00      	nop
 8005660:	371c      	adds	r7, #28
 8005662:	46bd      	mov	sp, r7
 8005664:	bc80      	pop	{r7}
 8005666:	4770      	bx	lr

08005668 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005678:	2b01      	cmp	r3, #1
 800567a:	d101      	bne.n	8005680 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800567c:	2302      	movs	r3, #2
 800567e:	e046      	b.n	800570e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2202      	movs	r2, #2
 800568c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a16      	ldr	r2, [pc, #88]	; (8005718 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d00e      	beq.n	80056e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056cc:	d009      	beq.n	80056e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a12      	ldr	r2, [pc, #72]	; (800571c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d004      	beq.n	80056e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a10      	ldr	r2, [pc, #64]	; (8005720 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d10c      	bne.n	80056fc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3714      	adds	r7, #20
 8005712:	46bd      	mov	sp, r7
 8005714:	bc80      	pop	{r7}
 8005716:	4770      	bx	lr
 8005718:	40012c00 	.word	0x40012c00
 800571c:	40000400 	.word	0x40000400
 8005720:	40000800 	.word	0x40000800

08005724 <memset>:
 8005724:	4603      	mov	r3, r0
 8005726:	4402      	add	r2, r0
 8005728:	4293      	cmp	r3, r2
 800572a:	d100      	bne.n	800572e <memset+0xa>
 800572c:	4770      	bx	lr
 800572e:	f803 1b01 	strb.w	r1, [r3], #1
 8005732:	e7f9      	b.n	8005728 <memset+0x4>

08005734 <__libc_init_array>:
 8005734:	b570      	push	{r4, r5, r6, lr}
 8005736:	2600      	movs	r6, #0
 8005738:	4d0c      	ldr	r5, [pc, #48]	; (800576c <__libc_init_array+0x38>)
 800573a:	4c0d      	ldr	r4, [pc, #52]	; (8005770 <__libc_init_array+0x3c>)
 800573c:	1b64      	subs	r4, r4, r5
 800573e:	10a4      	asrs	r4, r4, #2
 8005740:	42a6      	cmp	r6, r4
 8005742:	d109      	bne.n	8005758 <__libc_init_array+0x24>
 8005744:	f000 f81a 	bl	800577c <_init>
 8005748:	2600      	movs	r6, #0
 800574a:	4d0a      	ldr	r5, [pc, #40]	; (8005774 <__libc_init_array+0x40>)
 800574c:	4c0a      	ldr	r4, [pc, #40]	; (8005778 <__libc_init_array+0x44>)
 800574e:	1b64      	subs	r4, r4, r5
 8005750:	10a4      	asrs	r4, r4, #2
 8005752:	42a6      	cmp	r6, r4
 8005754:	d105      	bne.n	8005762 <__libc_init_array+0x2e>
 8005756:	bd70      	pop	{r4, r5, r6, pc}
 8005758:	f855 3b04 	ldr.w	r3, [r5], #4
 800575c:	4798      	blx	r3
 800575e:	3601      	adds	r6, #1
 8005760:	e7ee      	b.n	8005740 <__libc_init_array+0xc>
 8005762:	f855 3b04 	ldr.w	r3, [r5], #4
 8005766:	4798      	blx	r3
 8005768:	3601      	adds	r6, #1
 800576a:	e7f2      	b.n	8005752 <__libc_init_array+0x1e>
 800576c:	08006704 	.word	0x08006704
 8005770:	08006704 	.word	0x08006704
 8005774:	08006704 	.word	0x08006704
 8005778:	08006708 	.word	0x08006708

0800577c <_init>:
 800577c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800577e:	bf00      	nop
 8005780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005782:	bc08      	pop	{r3}
 8005784:	469e      	mov	lr, r3
 8005786:	4770      	bx	lr

08005788 <_fini>:
 8005788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800578a:	bf00      	nop
 800578c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800578e:	bc08      	pop	{r3}
 8005790:	469e      	mov	lr, r3
 8005792:	4770      	bx	lr
