/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#include "stm32f411xe.h"
#include "reg_util.h"


/* PLL Config for 100 Mhz
 *
 *	M = /12
 *	N = x96
 *	P = /2
 *
 * */

void SystemClock_Setup(void);

int main(void)
{
	SystemClock_Setup();
    /* Loop forever */
	for(;;);
}

void SystemClock_Setup(void){
	RCC_TypeDef *pRCC = RCC;
	FLASH_TypeDef *pFlash = FLASH;

	/* Set Flash Latency to WS = 3 */
	REG_SET_VAL(pFlash->ACR, 0x3U, 0xFU, FLASH_ACR_LATENCY_Pos);

	/* Setting up main PLL */
	/* PLL M */
	REG_SET_VAL(pRCC->PLLCFGR, 0xCU, 0x3FU, RCC_PLLCFGR_PLLM_Pos);

	/* PLL N */
	REG_SET_VAL(pRCC->PLLCFGR, 0x60U, 0x1FFU, RCC_PLLCFGR_PLLN_Pos);

	/* PLL P */
	REG_SET_VAL(pRCC->PLLCFGR, 0x00U, 0x3U, RCC_PLLCFGR_PLLP_Pos);

	/* Set PLL clk source to HSE*/
	REG_SET_BIT(pRCC->PLLCFGR, RCC_PLLCFGR_PLLSRC_Pos);

	/* Set AHB APB1 APB2 prescaler */

	/* AHB */
	REG_SET_VAL(pRCC->CFGR, 0x0U, 0xFU, RCC_CFGR_HPRE_Pos);

	/* APB1 */
	REG_SET_VAL(pRCC->CFGR, 0x4U, 0x7U, RCC_CFGR_PPRE1_Pos);

	/* APB2 */
	REG_SET_VAL(pRCC->CFGR, 0x0U, 0x7U, RCC_CFGR_PPRE2_Pos);


	/* Turn on PLL and wait for PLLRDY */
	REG_SET_BIT(pRCC->CR, RCC_CR_PLLON_Pos);
	while(!REG_READ_BIT(pRCC->CR, RCC_CR_PLLRDY_Pos));

	/* Switch PLLCLK as SYSCLK */
	REG_SET_VAL(pRCC->CFGR, 0x2U, 0x3U, RCC_CFGR_SW_Pos);
	while(!(REG_READ_VAL(pRCC->CFGR, 0x3U, RCC_CFGR_SWS_Pos) == 0x2U));

}
