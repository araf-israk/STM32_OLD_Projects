/*
 * bsp_lcd.c
 *
 *  Created on: Mar 1, 2025
 *      Author: arafi
 */

#include "bsp_lcd.h"

void LCD_Pin_Init(void);
void LCD_SPI_Init(void);
void LCD_Reset(void);
void LCD_Config(void);

#define GPIO_PIN_0		0U
#define GPIO_PIN_1		1U
#define GPIO_PIN_2		2U
#define GPIO_PIN_3		3U
#define GPIO_PIN_4		4U
#define GPIO_PIN_5		5U
#define GPIO_PIN_6		6U
#define GPIO_PIN_7		7U
#define GPIO_PIN_8		8U
#define GPIO_PIN_9		9U
#define GPIO_PIN_10		10U
#define GPIO_PIN_11		11U
#define GPIO_PIN_12		12U
#define GPIO_PIN_13		13U
#define GPIO_PIN_14		14U
#define GPIO_PIN_15		15U

#ifdef STM32F429

#define LCD_SCL_PIN
#define LCD_SCL_PORT

#define LCD_SDA_PIN
#define LCD_SDA_PORT

#define LCD_RESX_PIN
#define LCD_CSX_PIN
#define LCD_WRX_DCX_PIN


#endif

#ifdef STM32F411CEUx

#define SPI		SPI2

#define LCD_SCL_PIN		GPIO_PIN_13
#define LCD_SCL_PORT	GPIOB

#define LCD_SDI_PIN		GPIO_PIN_15
#define LCD_SDI_PORT	GPIOB

#define LCD_SDO_PIN		GPIO_PIN_2
#define LCD_SDO_PORT	GPIOC

#define LCD_RESX_PIN	GPIO_PIN_10
#define LCD_RESX_PORT	GPIOD

#define LCD_CSX_PIN		GPIO_PIN_11
#define LCD_CSX_PORT	GPIOD

#define LCD_DCX_PIN		GPIO_PIN_9
#define LCD_DCX_PORT	GPIOD


#endif

#define LCD_RESX_HIGH()		REG_SET_BIT(LCD_RESX_PORT->ODR, LCD_RESX_PIN);
#define LCD_RESX_LOW()		REG_CLR_BIT(LCD_RESX_PORT->ODR, LCD_RESX_PIN);


#define LCD_CSX_HIGH()		REG_SET_BIT(LCD_CSX_PORT->ODR, LCD_CSX_PIN);
#define LCD_CSX_LOW()		REG_CLR_BIT(LCD_CSX_PORT->ODR, LCD_CSX_PIN);

#define LCD_DCX_HIGH()		REG_SET_BIT(LCD_DCX_PORT->ODR, LCD_DCX_PIN);
#define LCD_DCX_LOW()		REG_CLR_BIT(LCD_DCX_PORT->ODR, LCD_DCX_PIN);

void BSP_LCD_Init(void){
	LCD_Pin_Init();
	LCD_SPI_Init();
	LCD_Reset();
	LCD_Config();
}


void LCD_Pin_Init(void){
	RCC_TypeDef *pRCC = RCC;
	GPIO_TypeDef *pGPIOB = GPIOB;
	GPIO_TypeDef *pGPIOC = GPIOC;
	GPIO_TypeDef *pGPIOD = GPIOD;

	/* Enable the clock for GPIO B, C, D */
	REG_SET_BIT(pRCC->AHB1ENR, RCC_AHB1ENR_GPIOBEN_Pos);
	REG_SET_BIT(pRCC->AHB1ENR, RCC_AHB1ENR_GPIOCEN_Pos);
	REG_SET_BIT(pRCC->AHB1ENR, RCC_AHB1ENR_GPIODEN_Pos);

	/* Set Pin Mode for PD10 */
	REG_SET_VAL(pGPIOD->MODER, 0x1U, 0x3U, (LCD_RESX_PIN * 2U));
	REG_CLR_BIT(pGPIOD->OTYPER, LCD_RESX_PIN);
	REG_SET_VAL(pGPIOD->OSPEEDR, 0x2U, 0x3U, (LCD_RESX_PIN * 2U));

	/* Set Pin Mode for PD11 */
	REG_SET_VAL(pGPIOD->MODER, 0x1U, 0x3U, (LCD_CSX_PIN * 2U));
	REG_CLR_BIT(pGPIOD->OTYPER, LCD_CSX_PIN);
	REG_SET_VAL(pGPIOD->OSPEEDR, 0x2U, 0x3U, (LCD_CSX_PIN * 2U));

	/* Set Pin Mode for PD9 */
	REG_SET_VAL(pGPIOD->MODER, 0x1U, 0x3U, (LCD_DCX_PIN * 2U));
	REG_CLR_BIT(pGPIOD->OTYPER, LCD_DCX_PIN);
	REG_SET_VAL(pGPIOD->OSPEEDR, 0x2U, 0x3U, (LCD_DCX_PIN * 2U));



	/* Set Pin Mode for PB13 */
	REG_SET_VAL(pGPIOB->MODER, 0x2U, 0x3U, (LCD_SCL_PIN * 2U));
	REG_CLR_BIT(pGPIOB->OTYPER, LCD_SCL_PIN);
	REG_SET_VAL(pGPIOB->OSPEEDR, 0x2U, 0x3U, ((LCD_SCL_PIN - 7U) * 2U));

	REG_SET_VAL(pGPIOB->AFR[1], 0x5U, 0xFU, ((LCD_SCL_PIN % 8U) * 4U));

	/* Set Pin Mode for PB15 */
	REG_SET_VAL(pGPIOB->MODER, 0x2U, 0x3U, (LCD_SDI_PIN * 2U));
	REG_CLR_BIT(pGPIOB->OTYPER, LCD_SDI_PIN);
	REG_SET_VAL(pGPIOB->OSPEEDR, 0x2U, 0x3U, (LCD_SDI_PIN * 2U));

	REG_SET_VAL(pGPIOB->AFR[1], 0x5U, 0xFU, ((LCD_SDI_PIN % 8U) * 4U));

	/* Set Pin Mode for PC2 */
	REG_SET_VAL(pGPIOC->MODER, 0x2U, 0x3U, (LCD_SDO_PIN * 2U));
	REG_CLR_BIT(pGPIOC->OTYPER, LCD_SDO_PIN);
	REG_SET_VAL(pGPIOC->OSPEEDR, 0x2U, 0x3U, (LCD_SDO_PIN * 2U));

	REG_SET_VAL(pGPIOC->AFR[0], 0x5U, 0xFU, (LCD_SDO_PIN * 4U));


	REG_SET_BIT(pGPIOD->ODR, LCD_RESX_PIN);
	REG_SET_BIT(pGPIOD->ODR, LCD_CSX_PIN);
	REG_SET_BIT(pGPIOD->ODR, LCD_DCX_PIN);




}

void LCD_SPI_Enable(void){
	SPI_TypeDef *pSPI = SPI;
	REG_SET_BIT(pSPI->CR1, SPI_CR1_SPE_Pos);
}

void LCD_SPI_Init(void){
	SPI_TypeDef *pSPI = SPI;
	RCC_TypeDef *pRCC = RCC;

	REG_SET_BIT(pRCC->APB1ENR, RCC_APB1ENR_SPI2EN_Pos);
	REG_SET_BIT(pSPI->CR1, SPI_CR1_MSTR_Pos);
	REG_CLR_BIT(pSPI->CR1, SPI_CR1_BIDIMODE_Pos);
	REG_CLR_BIT(pSPI->CR1, SPI_CR1_DFF_Pos);
	REG_SET_BIT(pSPI->CR1, SPI_CR1_SSM_Pos);
	REG_SET_BIT(pSPI->CR1, SPI_CR1_SSI_Pos);
	REG_CLR_BIT(pSPI->CR1, SPI_CR1_LSBFIRST_Pos);

	REG_SET_VAL(pSPI->CR1, 0x2FU,0x7U, SPI_CR1_BR_Pos);

	REG_CLR_BIT(pSPI->CR1, SPI_CR1_CPOL_Pos);
	REG_CLR_BIT(pSPI->CR1, SPI_CR1_CPHA_Pos);

	REG_CLR_BIT(pSPI->CR2, SPI_CR2_FRF_Pos);
}

void LCD_Reset(void){

}

void LCD_Config(void){

	uint8_t params[15];
	LCD_Write_Cmd(ILI9341_SWRESET);
	LCD_Write_Cmd(ILI9341_POWERB);
	params[0] = 0x00;
	params[1] = 0xD9;
	params[2] = 0x30;
	LCD_Write_Data(params, 3);
}


void LCD_Write_Cmd(uint8_t cmd){
	SPI_TypeDef *pSPI = SPI;
	LCD_CSX_LOW();
	LCD_DCX_LOW();
	while(!REG_READ_BIT(pSPI->SR, SPI_SR_TXE_Pos));
	REG_WRITE(pSPI->DR, cmd);
	while(REG_READ_BIT(pSPI->SR, SPI_SR_BSY_Pos))
}

void LCD_Write_Data(uint8_t *buffer, uint32_t len){
	SPI_TypeDef *pSPI = SPI;

	while(len--){
		while(!REG_READ_BIT(pSPI->SR, SPI_SR_TXE_Pos));
		REG_WRITE(pSPI->DR, buffer[i]);
	}

}
