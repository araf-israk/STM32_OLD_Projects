/*
 * bsp_lcd.c
 *
 *  Created on: Mar 1, 2025
 *      Author: arafi
 */

#include "bsp_lcd.h"

#define __disable_spi_ssm()           	REG_CLR_BIT(SPI->CR1,SPI_CR1_SSM_Pos)
#define __enable_spi_ssoe()				REG_SET_BIT(SPI->CR2,SPI_CR2_SSOE_Pos)
#define __spi_set_dff_8bit()  			REG_CLR_BIT(SPI->CR1,SPI_CR1_DFF_Pos)
#define __spi_set_dff_16bit()			REG_SET_BIT(SPI->CR1,SPI_CR1_DFF_Pos)
#define __enable_spi()					REG_SET_BIT(SPI->CR1,SPI_CR1_SPE_Pos)
#define __disable_spi()					do{while(REG_READ_BIT(SPI->SR,SPI_SR_BSY_Pos)); \
										   REG_CLR_BIT(SPI->CR1,SPI_CR1_SPE_Pos);}while(0)

#define HIGH_16(x)     					((((uint16_t)x) >> 8U) & 0xFFU)
#define LOW_16(x)      					((((uint16_t)x) >> 0U) & 0xFFU)

void LCD_Pin_Init(void);
void LCD_SPI_Init(void);
void LCD_Reset(void);
void LCD_Config(void);

void LCD_SPI_Enable(void);
void lcd_write_cmd(uint8_t cmd);
void lcd_write_data(uint8_t *buffer, uint32_t len);

#define GPIO_PIN_0		0U
#define GPIO_PIN_1		1U
#define GPIO_PIN_2		2U
#define GPIO_PIN_3		3U
#define GPIO_PIN_4		4U
#define GPIO_PIN_5		5U
#define GPIO_PIN_6		6U
#define GPIO_PIN_7		7U
#define GPIO_PIN_8		8U
#define GPIO_PIN_9		9U
#define GPIO_PIN_10		10U
#define GPIO_PIN_11		11U
#define GPIO_PIN_12		12U
#define GPIO_PIN_13		13U
#define GPIO_PIN_14		14U
#define GPIO_PIN_15		15U

#ifdef STM32F429

#define LCD_SCL_PIN
#define LCD_SCL_PORT

#define LCD_SDA_PIN
#define LCD_SDA_PORT

#define LCD_RESX_PIN
#define LCD_CSX_PIN
#define LCD_WRX_DCX_PIN


#endif

#ifdef STM32F411CEUx

#define SPI		SPI2

#define LCD_SCL_PIN		GPIO_PIN_13
#define LCD_SCL_PORT	GPIOB

#define LCD_SDI_PIN		GPIO_PIN_15
#define LCD_SDI_PORT	GPIOB

#define LCD_SDO_PIN		GPIO_PIN_14
#define LCD_SDO_PORT	GPIOB

#define LCD_RESX_PIN	GPIO_PIN_10
#define LCD_RESX_PORT	GPIOA

#define LCD_CSX_PIN		GPIO_PIN_11
#define LCD_CSX_PORT	GPIOA

#define LCD_DCX_PIN		GPIO_PIN_9
#define LCD_DCX_PORT	GPIOA


#endif

#define LCD_RESX_HIGH()		REG_SET_BIT(LCD_RESX_PORT->ODR, LCD_RESX_PIN);
#define LCD_RESX_LOW()		REG_CLR_BIT(LCD_RESX_PORT->ODR, LCD_RESX_PIN);


#define LCD_CSX_HIGH()		REG_SET_BIT(LCD_CSX_PORT->ODR, LCD_CSX_PIN);
#define LCD_CSX_LOW()		REG_CLR_BIT(LCD_CSX_PORT->ODR, LCD_CSX_PIN);

#define LCD_DCX_HIGH()		REG_SET_BIT(LCD_DCX_PORT->ODR, LCD_DCX_PIN);
#define LCD_DCX_LOW()		REG_CLR_BIT(LCD_DCX_PORT->ODR, LCD_DCX_PIN);

#define MADCTL_MY 0x80  ///< Bottom to top
#define MADCTL_MX 0x40  ///< Right to left
#define MADCTL_MV 0x20  ///< Reverse Mode
#define MADCTL_ML 0x10  ///< LCD refresh Bottom to top
#define MADCTL_RGB 0x00 ///< Red-Green-Blue pixel order
#define MADCTL_BGR 0x08 ///< Blue-Green-Red pixel order
#define MADCTL_MH 0x04  ///< LCD refresh right to left


void BSP_LCD_Init(void){
	LCD_Pin_Init();
	LCD_SPI_Init();
	LCD_SPI_Enable();
	LCD_Reset();
	LCD_Config();
}

static void delay_50ms(void){
	for(uint32_t i = 0 ; i<(0xFFFFU * 10U);i++);
}

void LCD_Pin_Init(void){
	RCC_TypeDef *pRCC = RCC;
	GPIO_TypeDef *pGPIOB = GPIOB;
	GPIO_TypeDef *pGPIOA = GPIOA;

	/* Enable the clock for GPIO B, A */
	REG_SET_BIT(pRCC->AHB1ENR, RCC_AHB1ENR_GPIOBEN_Pos);
	REG_SET_BIT(pRCC->AHB1ENR, RCC_AHB1ENR_GPIOAEN_Pos);

	/* Set Pin Mode for PA10 */
	REG_SET_VAL(pGPIOA->MODER, 0x1U, 0x3U, (LCD_RESX_PIN * 2U));
	REG_CLR_BIT(pGPIOA->OTYPER, LCD_RESX_PIN);
	REG_SET_VAL(pGPIOA->OSPEEDR, 0x2U, 0x3U, (LCD_RESX_PIN * 2U));

	/* Set Pin Mode for PA11 */
	REG_SET_VAL(pGPIOA->MODER, 0x1U, 0x3U, (LCD_CSX_PIN * 2U));
	REG_CLR_BIT(pGPIOA->OTYPER, LCD_CSX_PIN);
	REG_SET_VAL(pGPIOA->OSPEEDR, 0x2U, 0x3U, (LCD_CSX_PIN * 2U));

	/* Set Pin Mode for PA9 */
	REG_SET_VAL(pGPIOA->MODER, 0x1U, 0x3U, (LCD_DCX_PIN * 2U));
	REG_CLR_BIT(pGPIOA->OTYPER, LCD_DCX_PIN);
	REG_SET_VAL(pGPIOA->OSPEEDR, 0x2U, 0x3U, (LCD_DCX_PIN * 2U));



	/* Set Pin Mode for PB13 */
	REG_SET_VAL(pGPIOB->MODER, 0x2U, 0x3U, (LCD_SCL_PIN * 2U));
	REG_CLR_BIT(pGPIOB->OTYPER, LCD_SCL_PIN);
	REG_SET_VAL(pGPIOB->OSPEEDR, 0x2U, 0x3U, ((LCD_SCL_PIN - 7U) * 2U));

	REG_SET_VAL(pGPIOB->AFR[1], 0x5U, 0xFU, ((LCD_SCL_PIN % 8U) * 4U));

	/* Set Pin Mode for PB15 */
	REG_SET_VAL(pGPIOB->MODER, 0x2U, 0x3U, (LCD_SDI_PIN * 2U));
	REG_CLR_BIT(pGPIOB->OTYPER, LCD_SDI_PIN);
	REG_SET_VAL(pGPIOB->OSPEEDR, 0x2U, 0x3U, (LCD_SDI_PIN * 2U));

	REG_SET_VAL(pGPIOB->AFR[1], 0x5U, 0xFU, ((LCD_SDI_PIN % 8U) * 4U));

	/* Set Pin Mode for PB14 */
	REG_SET_VAL(pGPIOB->MODER, 0x2U, 0x3U, (LCD_SDO_PIN * 2U));
	REG_CLR_BIT(pGPIOB->OTYPER, LCD_SDO_PIN);
	REG_SET_VAL(pGPIOB->OSPEEDR, 0x2U, 0x3U, (LCD_SDO_PIN * 2U));

	REG_SET_VAL(pGPIOB->AFR[1], 0x5U, 0xFU, ((LCD_SDO_PIN % 8U) * 4U));


	REG_SET_BIT(pGPIOA->ODR, LCD_RESX_PIN);
	REG_SET_BIT(pGPIOA->ODR, LCD_CSX_PIN);
	REG_SET_BIT(pGPIOA->ODR, LCD_DCX_PIN);




}

void lcd_spi_enable(void){
	SPI_TypeDef *pSPI = SPI;
	REG_SET_BIT(pSPI->CR1, SPI_CR1_SPE_Pos);
}

void lcd_spi_disable(void){
	SPI_TypeDef *pSPI = SPI;
	REG_CLR_BIT(pSPI->CR1, SPI_CR1_SPE_Pos);
}


void LCD_SPI_Init(void){
	SPI_TypeDef *pSPI = SPI;
	RCC_TypeDef *pRCC = RCC;

	REG_SET_BIT(pRCC->APB1ENR, RCC_APB1ENR_SPI2EN_Pos);
	REG_SET_BIT(pSPI->CR1, SPI_CR1_MSTR_Pos);
	REG_CLR_BIT(pSPI->CR1, SPI_CR1_BIDIMODE_Pos);
	REG_CLR_BIT(pSPI->CR1, SPI_CR1_DFF_Pos);
	REG_SET_BIT(pSPI->CR1, SPI_CR1_SSM_Pos);
	REG_SET_BIT(pSPI->CR1, SPI_CR1_SSI_Pos);
	REG_CLR_BIT(pSPI->CR1, SPI_CR1_LSBFIRST_Pos);

	REG_SET_VAL(pSPI->CR1, 0b010,0x7U, SPI_CR1_BR_Pos);

	REG_CLR_BIT(pSPI->CR1, SPI_CR1_CPOL_Pos);
	REG_CLR_BIT(pSPI->CR1, SPI_CR1_CPHA_Pos);

	REG_CLR_BIT(pSPI->CR2, SPI_CR2_FRF_Pos);
}

void LCD_Reset(void){
	LCD_RESX_LOW();
	for(uint32_t i = 0; i<(0xFFFFU * 20U); i++);
	LCD_RESX_HIGH();
	for(uint32_t i = 0; i<(0xFFFFU * 20U); i++);
}

void LCD_Config(void){

	uint8_t params[15];
		lcd_write_cmd(ILI9341_SWRESET);
		lcd_write_cmd(ILI9341_POWERB);
		params[0] = 0x00;
		params[1] = 0xD9;
		params[2] = 0x30;
		lcd_write_data(params, 3);

		lcd_write_cmd(ILI9341_POWER_SEQ);
		params[0]= 0x64;
		params[1]= 0x03;
		params[2]= 0X12;
		params[3]= 0X81;
		lcd_write_data(params, 4);

		lcd_write_cmd(ILI9341_DTCA);
		params[0]= 0x85;
		params[1]= 0x10;
		params[2]= 0x7A;
		lcd_write_data(params, 3);

		lcd_write_cmd(ILI9341_POWERA);
		params[0]= 0x39;
		params[1]= 0x2C;
		params[2]= 0x00;
		params[3]= 0x34;
		params[4]= 0x02;
		lcd_write_data(params, 5);

		lcd_write_cmd(ILI9341_PRC);
		params[0]= 0x20;
		lcd_write_data(params, 1);

		lcd_write_cmd(ILI9341_DTCB);
		params[0]= 0x00;
		params[1]= 0x00;
		lcd_write_data(params, 2);

		lcd_write_cmd(ILI9341_POWER1);
		params[0]= 0x1B;
		lcd_write_data(params, 1);

		lcd_write_cmd(ILI9341_POWER2);
		params[0]= 0x12;
		lcd_write_data(params, 1);

		lcd_write_cmd(ILI9341_VCOM1);
		params[0]= 0x08;
		params[1]= 0x26;
		lcd_write_data(params, 2);

		lcd_write_cmd(ILI9341_VCOM2);
		params[0]= 0XB7;
		lcd_write_data(params, 1);

		uint8_t m;
		m = MADCTL_MV | MADCTL_MY| MADCTL_BGR;

		lcd_write_cmd(ILI9341_MAC);    // Memory Access Control <Landscape setting>
		params[0]= m;
		lcd_write_data(params, 1);


		lcd_write_cmd(ILI9341_PIXEL_FORMAT);
		params[0]= 0x55; //select RGB565
		lcd_write_data(params, 1);

		lcd_write_cmd(ILI9341_FRMCTR1);
		params[0]= 0x00;
		params[1]= 0x1B;//frame rate = 70
		lcd_write_data(params, 2);

		lcd_write_cmd(ILI9341_DFC);    // Display Function Control
		params[0]= 0x0A;
		params[1]= 0xA2;
		lcd_write_data(params, 2);

		lcd_write_cmd(ILI9341_3GAMMA_EN);    // 3Gamma Function Disable
		params[0]= 0x02; //LCD_WR_DATA(0x00);
		lcd_write_data(params, 1);

		lcd_write_cmd(ILI9341_GAMMA);
		params[0]= 0x01;
		lcd_write_data(params, 1);

		lcd_write_cmd(ILI9341_PGAMMA);    //Set Gamma
		params[0]= 0x0F;
		params[1]= 0x1D;
		params[2]= 0x1A;
		params[3]= 0x0A;
		params[4]= 0x0D;
		params[5]= 0x07;
		params[6]= 0x49;
		params[7]= 0X66;
		params[8]= 0x3B;
		params[9]= 0x07;
		params[10]= 0x11;
		params[11]= 0x01;
		params[12]= 0x09;
		params[13]= 0x05;
		params[14]= 0x04;
		lcd_write_data(params, 15);

		lcd_write_cmd(ILI9341_NGAMMA);
		params[0]= 0x00;
		params[1]= 0x18;
		params[2]= 0x1D;
		params[3]= 0x02;
		params[4]= 0x0F;
		params[5]= 0x04;
		params[6]= 0x36;
		params[7]= 0x13;
		params[8]= 0x4C;
		params[9]= 0x07;
		params[10]= 0x13;
		params[11]= 0x0F;
		params[12]= 0x2E;
		params[13]= 0x2F;
		params[14]= 0x05;
		lcd_write_data(params, 15);

		lcd_write_cmd(ILI9341_RASET); //page address set
		params[0]= 0x00;
		params[1]= 0x00;
		params[2]= 0x00;
		params[3]= 0xf0; //240 rows = 0xf0
		lcd_write_data(params, 4);

		lcd_write_cmd(ILI9341_CASET);
		params[0]= 0x00;
		params[1]= 0x00;
		params[2]= 0x01;
		params[3]= 0x40; //320 columns = 0x140
		lcd_write_data(params, 4);

		lcd_write_cmd(ILI9341_SLEEP_OUT); //Exit Sleep
		delay_50ms();
		delay_50ms();
		lcd_write_cmd(ILI9341_DISPLAY_ON); //display on

}

void bsp_lcd_set_display_area(uint16_t x1, uint16_t x2, uint16_t y1, uint16_t y2){
	 lcd_area_t area;
	 area.x1 = x1;
	 area.x2 = x2;
	 area.y1 = y1;
	 area.y2 = y2;
	 lcd_set_display_area(&area);
}

void lcd_set_display_area(lcd_area_t *area)
{
	uint8_t params[4];
	/*Column address set(2Ah) */
	params[0] = HIGH_16(area->x1);
	params[1] = LOW_16(area->x1);
	params[2] = HIGH_16(area->x2);
	params[3] = LOW_16(area->x2);
	lcd_write_cmd(ILI9341_CASET);
	lcd_write_data(params, 4);

	params[0] = HIGH_16(area->y1);
	params[1] = LOW_16(area->y1);
	params[2] = HIGH_16(area->y2);
	params[3] = LOW_16(area->y2);
	lcd_write_cmd(ILI9341_RASET);
	lcd_write_data(params, 4);

}

void bsp_lcd_write(uint8_t *buffer, uint32_t nbytes)
{
	uint16_t *buff_ptr;

	__disable_spi();
	__spi_set_dff_16bit();
	__enable_spi();

	LCD_CSX_LOW();

	buff_ptr = (uint16_t*)buffer;
	while(nbytes){
		while(!REG_READ_BIT(SPI->SR,SPI_SR_TXE_Pos));
		REG_WRITE(SPI->DR,*buff_ptr);
		++buff_ptr;
		nbytes -= 2;
	}

	__disable_spi();
	LCD_CSX_HIGH();
	__spi_set_dff_8bit();
	__enable_spi();

}



void lcd_write_cmd(uint8_t cmd){
	SPI_TypeDef *pSPI = SPI;
	LCD_CSX_LOW();
	LCD_DCX_LOW();
	while(!REG_READ_BIT(pSPI->SR, SPI_SR_TXE_Pos));
	REG_WRITE(pSPI->DR, cmd);
	while(!REG_READ_BIT(pSPI->SR, SPI_SR_TXE_Pos));
	while(REG_READ_BIT(pSPI->SR, SPI_SR_BSY_Pos));

	LCD_CSX_HIGH();
	LCD_DCX_HIGH();
}

void lcd_write_data(uint8_t *buffer, uint32_t len){
	SPI_TypeDef *pSPI = SPI;

	for(uint32_t i = 0; i < len; i++){
		LCD_CSX_LOW();
		while(!REG_READ_BIT(pSPI->SR, SPI_SR_TXE_Pos));
		REG_WRITE(pSPI->DR, buffer[i]);
		while(!REG_READ_BIT(pSPI->SR, SPI_SR_TXE_Pos));
		while(REG_READ_BIT(pSPI->SR, SPI_SR_BSY_Pos));
		LCD_CSX_HIGH();
	}

}
