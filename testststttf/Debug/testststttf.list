
testststttf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ac4  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08008d90  08008d90  00018d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008da8  08008da8  00018da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08008dac  08008dac  00018dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08008db0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000011c  24000010  08008dc0  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400012c  08008dc0  0002012c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000f85a  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001f9e  00000000  00000000  0002f8db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000c40  00000000  00000000  00031880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000941  00000000  00000000  000324c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032907  00000000  00000000  00032e01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000104a8  00000000  00000000  00065708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014e4a0  00000000  00000000  00075bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00003334  00000000  00000000  001c4050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000004b  00000000  00000000  001c7384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08008d78 	.word	0x08008d78

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08008d78 	.word	0x08008d78

0800030c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000310:	f000 fc78 	bl	8000c04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000314:	f000 f81c 	bl	8000350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000318:	f000 f9b6 	bl	8000688 <MX_GPIO_Init>
  MX_DMA_Init();
 800031c:	f000 f994 	bl	8000648 <MX_DMA_Init>
  MX_ADC1_Init();
 8000320:	f000 f884 	bl	800042c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1,(uint16_t*) line_sensor_front_values_dma, line_sensor_front_channel_number);
 8000324:	230a      	movs	r3, #10
 8000326:	461a      	mov	r2, r3
 8000328:	4906      	ldr	r1, [pc, #24]	; (8000344 <main+0x38>)
 800032a:	4807      	ldr	r0, [pc, #28]	; (8000348 <main+0x3c>)
 800032c:	f001 fa14 	bl	8001758 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_7);
 8000330:	2180      	movs	r1, #128	; 0x80
 8000332:	4806      	ldr	r0, [pc, #24]	; (800034c <main+0x40>)
 8000334:	f005 f969 	bl	800560a <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000338:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800033c:	f000 fcf4 	bl	8000d28 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_7);
 8000340:	e7f6      	b.n	8000330 <main+0x24>
 8000342:	bf00      	nop
 8000344:	24000114 	.word	0x24000114
 8000348:	2400002c 	.word	0x2400002c
 800034c:	58021800 	.word	0x58021800

08000350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b09c      	sub	sp, #112	; 0x70
 8000354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800035a:	224c      	movs	r2, #76	; 0x4c
 800035c:	2100      	movs	r1, #0
 800035e:	4618      	mov	r0, r3
 8000360:	f008 fcde 	bl	8008d20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000364:	1d3b      	adds	r3, r7, #4
 8000366:	2220      	movs	r2, #32
 8000368:	2100      	movs	r1, #0
 800036a:	4618      	mov	r0, r3
 800036c:	f008 fcd8 	bl	8008d20 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000370:	2002      	movs	r0, #2
 8000372:	f005 f965 	bl	8005640 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000376:	2300      	movs	r3, #0
 8000378:	603b      	str	r3, [r7, #0]
 800037a:	4b2b      	ldr	r3, [pc, #172]	; (8000428 <SystemClock_Config+0xd8>)
 800037c:	699b      	ldr	r3, [r3, #24]
 800037e:	4a2a      	ldr	r2, [pc, #168]	; (8000428 <SystemClock_Config+0xd8>)
 8000380:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000384:	6193      	str	r3, [r2, #24]
 8000386:	4b28      	ldr	r3, [pc, #160]	; (8000428 <SystemClock_Config+0xd8>)
 8000388:	699b      	ldr	r3, [r3, #24]
 800038a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800038e:	603b      	str	r3, [r7, #0]
 8000390:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000392:	bf00      	nop
 8000394:	4b24      	ldr	r3, [pc, #144]	; (8000428 <SystemClock_Config+0xd8>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800039c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003a0:	d1f8      	bne.n	8000394 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003a2:	2301      	movs	r3, #1
 80003a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ac:	2302      	movs	r3, #2
 80003ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003b0:	2302      	movs	r3, #2
 80003b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80003b4:	2302      	movs	r3, #2
 80003b6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 80003b8:	232c      	movs	r3, #44	; 0x2c
 80003ba:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80003bc:	2301      	movs	r3, #1
 80003be:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80003c0:	2302      	movs	r3, #2
 80003c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80003c4:	2302      	movs	r3, #2
 80003c6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80003c8:	230c      	movs	r3, #12
 80003ca:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80003cc:	2300      	movs	r3, #0
 80003ce:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80003d0:	2300      	movs	r3, #0
 80003d2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003d8:	4618      	mov	r0, r3
 80003da:	f005 f96b 	bl	80056b4 <HAL_RCC_OscConfig>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80003e4:	f000 f9fe 	bl	80007e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e8:	233f      	movs	r3, #63	; 0x3f
 80003ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ec:	2303      	movs	r3, #3
 80003ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003f0:	2300      	movs	r3, #0
 80003f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80003f4:	2308      	movs	r3, #8
 80003f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80003f8:	2340      	movs	r3, #64	; 0x40
 80003fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80003fc:	2340      	movs	r3, #64	; 0x40
 80003fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000400:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000404:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000406:	2340      	movs	r3, #64	; 0x40
 8000408:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800040a:	1d3b      	adds	r3, r7, #4
 800040c:	2103      	movs	r1, #3
 800040e:	4618      	mov	r0, r3
 8000410:	f005 fd2a 	bl	8005e68 <HAL_RCC_ClockConfig>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800041a:	f000 f9e3 	bl	80007e4 <Error_Handler>
  }
}
 800041e:	bf00      	nop
 8000420:	3770      	adds	r7, #112	; 0x70
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	58024800 	.word	0x58024800

0800042c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b08c      	sub	sp, #48	; 0x30
 8000430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	605a      	str	r2, [r3, #4]
 800043c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800043e:	463b      	mov	r3, r7
 8000440:	2224      	movs	r2, #36	; 0x24
 8000442:	2100      	movs	r1, #0
 8000444:	4618      	mov	r0, r3
 8000446:	f008 fc6b 	bl	8008d20 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800044a:	4b73      	ldr	r3, [pc, #460]	; (8000618 <MX_ADC1_Init+0x1ec>)
 800044c:	4a73      	ldr	r2, [pc, #460]	; (800061c <MX_ADC1_Init+0x1f0>)
 800044e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000450:	4b71      	ldr	r3, [pc, #452]	; (8000618 <MX_ADC1_Init+0x1ec>)
 8000452:	2200      	movs	r2, #0
 8000454:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000456:	4b70      	ldr	r3, [pc, #448]	; (8000618 <MX_ADC1_Init+0x1ec>)
 8000458:	2208      	movs	r2, #8
 800045a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800045c:	4b6e      	ldr	r3, [pc, #440]	; (8000618 <MX_ADC1_Init+0x1ec>)
 800045e:	2201      	movs	r2, #1
 8000460:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000462:	4b6d      	ldr	r3, [pc, #436]	; (8000618 <MX_ADC1_Init+0x1ec>)
 8000464:	2204      	movs	r2, #4
 8000466:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000468:	4b6b      	ldr	r3, [pc, #428]	; (8000618 <MX_ADC1_Init+0x1ec>)
 800046a:	2200      	movs	r2, #0
 800046c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800046e:	4b6a      	ldr	r3, [pc, #424]	; (8000618 <MX_ADC1_Init+0x1ec>)
 8000470:	2201      	movs	r2, #1
 8000472:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 10;
 8000474:	4b68      	ldr	r3, [pc, #416]	; (8000618 <MX_ADC1_Init+0x1ec>)
 8000476:	220a      	movs	r2, #10
 8000478:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800047a:	4b67      	ldr	r3, [pc, #412]	; (8000618 <MX_ADC1_Init+0x1ec>)
 800047c:	2200      	movs	r2, #0
 800047e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000482:	4b65      	ldr	r3, [pc, #404]	; (8000618 <MX_ADC1_Init+0x1ec>)
 8000484:	2200      	movs	r2, #0
 8000486:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000488:	4b63      	ldr	r3, [pc, #396]	; (8000618 <MX_ADC1_Init+0x1ec>)
 800048a:	2200      	movs	r2, #0
 800048c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800048e:	4b62      	ldr	r3, [pc, #392]	; (8000618 <MX_ADC1_Init+0x1ec>)
 8000490:	2203      	movs	r2, #3
 8000492:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000494:	4b60      	ldr	r3, [pc, #384]	; (8000618 <MX_ADC1_Init+0x1ec>)
 8000496:	2200      	movs	r2, #0
 8000498:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800049a:	4b5f      	ldr	r3, [pc, #380]	; (8000618 <MX_ADC1_Init+0x1ec>)
 800049c:	2200      	movs	r2, #0
 800049e:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 80004a0:	4b5d      	ldr	r3, [pc, #372]	; (8000618 <MX_ADC1_Init+0x1ec>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004a8:	485b      	ldr	r0, [pc, #364]	; (8000618 <MX_ADC1_Init+0x1ec>)
 80004aa:	f000 ff4d 	bl	8001348 <HAL_ADC_Init>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80004b4:	f000 f996 	bl	80007e4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80004b8:	2300      	movs	r3, #0
 80004ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80004bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004c0:	4619      	mov	r1, r3
 80004c2:	4855      	ldr	r0, [pc, #340]	; (8000618 <MX_ADC1_Init+0x1ec>)
 80004c4:	f002 fc1a 	bl	8002cfc <HAL_ADCEx_MultiModeConfigChannel>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80004ce:	f000 f989 	bl	80007e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80004d2:	4b53      	ldr	r3, [pc, #332]	; (8000620 <MX_ADC1_Init+0x1f4>)
 80004d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004d6:	2306      	movs	r3, #6
 80004d8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004da:	2300      	movs	r3, #0
 80004dc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004de:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80004e2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004e4:	2304      	movs	r3, #4
 80004e6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80004e8:	2300      	movs	r3, #0
 80004ea:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80004ec:	2300      	movs	r3, #0
 80004ee:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004f2:	463b      	mov	r3, r7
 80004f4:	4619      	mov	r1, r3
 80004f6:	4848      	ldr	r0, [pc, #288]	; (8000618 <MX_ADC1_Init+0x1ec>)
 80004f8:	f001 fc6c 	bl	8001dd4 <HAL_ADC_ConfigChannel>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000502:	f000 f96f 	bl	80007e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000506:	4b47      	ldr	r3, [pc, #284]	; (8000624 <MX_ADC1_Init+0x1f8>)
 8000508:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800050a:	230c      	movs	r3, #12
 800050c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800050e:	463b      	mov	r3, r7
 8000510:	4619      	mov	r1, r3
 8000512:	4841      	ldr	r0, [pc, #260]	; (8000618 <MX_ADC1_Init+0x1ec>)
 8000514:	f001 fc5e 	bl	8001dd4 <HAL_ADC_ConfigChannel>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 800051e:	f000 f961 	bl	80007e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000522:	4b41      	ldr	r3, [pc, #260]	; (8000628 <MX_ADC1_Init+0x1fc>)
 8000524:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000526:	2312      	movs	r3, #18
 8000528:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800052a:	463b      	mov	r3, r7
 800052c:	4619      	mov	r1, r3
 800052e:	483a      	ldr	r0, [pc, #232]	; (8000618 <MX_ADC1_Init+0x1ec>)
 8000530:	f001 fc50 	bl	8001dd4 <HAL_ADC_ConfigChannel>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 800053a:	f000 f953 	bl	80007e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800053e:	4b3b      	ldr	r3, [pc, #236]	; (800062c <MX_ADC1_Init+0x200>)
 8000540:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000542:	2318      	movs	r3, #24
 8000544:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000546:	463b      	mov	r3, r7
 8000548:	4619      	mov	r1, r3
 800054a:	4833      	ldr	r0, [pc, #204]	; (8000618 <MX_ADC1_Init+0x1ec>)
 800054c:	f001 fc42 	bl	8001dd4 <HAL_ADC_ConfigChannel>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <MX_ADC1_Init+0x12e>
  {
    Error_Handler();
 8000556:	f000 f945 	bl	80007e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800055a:	4b35      	ldr	r3, [pc, #212]	; (8000630 <MX_ADC1_Init+0x204>)
 800055c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800055e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000562:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000564:	463b      	mov	r3, r7
 8000566:	4619      	mov	r1, r3
 8000568:	482b      	ldr	r0, [pc, #172]	; (8000618 <MX_ADC1_Init+0x1ec>)
 800056a:	f001 fc33 	bl	8001dd4 <HAL_ADC_ConfigChannel>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_ADC1_Init+0x14c>
  {
    Error_Handler();
 8000574:	f000 f936 	bl	80007e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000578:	4b2e      	ldr	r3, [pc, #184]	; (8000634 <MX_ADC1_Init+0x208>)
 800057a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800057c:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000580:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000582:	463b      	mov	r3, r7
 8000584:	4619      	mov	r1, r3
 8000586:	4824      	ldr	r0, [pc, #144]	; (8000618 <MX_ADC1_Init+0x1ec>)
 8000588:	f001 fc24 	bl	8001dd4 <HAL_ADC_ConfigChannel>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <MX_ADC1_Init+0x16a>
  {
    Error_Handler();
 8000592:	f000 f927 	bl	80007e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000596:	4b28      	ldr	r3, [pc, #160]	; (8000638 <MX_ADC1_Init+0x20c>)
 8000598:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800059a:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800059e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005a0:	463b      	mov	r3, r7
 80005a2:	4619      	mov	r1, r3
 80005a4:	481c      	ldr	r0, [pc, #112]	; (8000618 <MX_ADC1_Init+0x1ec>)
 80005a6:	f001 fc15 	bl	8001dd4 <HAL_ADC_ConfigChannel>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_ADC1_Init+0x188>
  {
    Error_Handler();
 80005b0:	f000 f918 	bl	80007e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80005b4:	4b21      	ldr	r3, [pc, #132]	; (800063c <MX_ADC1_Init+0x210>)
 80005b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80005b8:	f44f 7389 	mov.w	r3, #274	; 0x112
 80005bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005be:	463b      	mov	r3, r7
 80005c0:	4619      	mov	r1, r3
 80005c2:	4815      	ldr	r0, [pc, #84]	; (8000618 <MX_ADC1_Init+0x1ec>)
 80005c4:	f001 fc06 	bl	8001dd4 <HAL_ADC_ConfigChannel>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_ADC1_Init+0x1a6>
  {
    Error_Handler();
 80005ce:	f000 f909 	bl	80007e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80005d2:	4b1b      	ldr	r3, [pc, #108]	; (8000640 <MX_ADC1_Init+0x214>)
 80005d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80005d6:	f44f 738c 	mov.w	r3, #280	; 0x118
 80005da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005dc:	463b      	mov	r3, r7
 80005de:	4619      	mov	r1, r3
 80005e0:	480d      	ldr	r0, [pc, #52]	; (8000618 <MX_ADC1_Init+0x1ec>)
 80005e2:	f001 fbf7 	bl	8001dd4 <HAL_ADC_ConfigChannel>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 80005ec:	f000 f8fa 	bl	80007e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80005f0:	4b14      	ldr	r3, [pc, #80]	; (8000644 <MX_ADC1_Init+0x218>)
 80005f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80005f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005f8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005fa:	463b      	mov	r3, r7
 80005fc:	4619      	mov	r1, r3
 80005fe:	4806      	ldr	r0, [pc, #24]	; (8000618 <MX_ADC1_Init+0x1ec>)
 8000600:	f001 fbe8 	bl	8001dd4 <HAL_ADC_ConfigChannel>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_ADC1_Init+0x1e2>
  {
    Error_Handler();
 800060a:	f000 f8eb 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800060e:	bf00      	nop
 8000610:	3730      	adds	r7, #48	; 0x30
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	2400002c 	.word	0x2400002c
 800061c:	40022000 	.word	0x40022000
 8000620:	08600004 	.word	0x08600004
 8000624:	0c900008 	.word	0x0c900008
 8000628:	10c00010 	.word	0x10c00010
 800062c:	14f00020 	.word	0x14f00020
 8000630:	19200040 	.word	0x19200040
 8000634:	1d500080 	.word	0x1d500080
 8000638:	21800100 	.word	0x21800100
 800063c:	25b00200 	.word	0x25b00200
 8000640:	2a000400 	.word	0x2a000400
 8000644:	2e300800 	.word	0x2e300800

08000648 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800064e:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <MX_DMA_Init+0x3c>)
 8000650:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000654:	4a0b      	ldr	r2, [pc, #44]	; (8000684 <MX_DMA_Init+0x3c>)
 8000656:	f043 0301 	orr.w	r3, r3, #1
 800065a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_DMA_Init+0x3c>)
 8000660:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000664:	f003 0301 	and.w	r3, r3, #1
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800066c:	2200      	movs	r2, #0
 800066e:	2100      	movs	r1, #0
 8000670:	200b      	movs	r0, #11
 8000672:	f002 fd00 	bl	8003076 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000676:	200b      	movs	r0, #11
 8000678:	f002 fd17 	bl	80030aa <HAL_NVIC_EnableIRQ>

}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	58024400 	.word	0x58024400

08000688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08c      	sub	sp, #48	; 0x30
 800068c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068e:	f107 031c 	add.w	r3, r7, #28
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800069e:	4b4d      	ldr	r3, [pc, #308]	; (80007d4 <MX_GPIO_Init+0x14c>)
 80006a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006a4:	4a4b      	ldr	r2, [pc, #300]	; (80007d4 <MX_GPIO_Init+0x14c>)
 80006a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006ae:	4b49      	ldr	r3, [pc, #292]	; (80007d4 <MX_GPIO_Init+0x14c>)
 80006b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006b8:	61bb      	str	r3, [r7, #24]
 80006ba:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006bc:	4b45      	ldr	r3, [pc, #276]	; (80007d4 <MX_GPIO_Init+0x14c>)
 80006be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c2:	4a44      	ldr	r2, [pc, #272]	; (80007d4 <MX_GPIO_Init+0x14c>)
 80006c4:	f043 0304 	orr.w	r3, r3, #4
 80006c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006cc:	4b41      	ldr	r3, [pc, #260]	; (80007d4 <MX_GPIO_Init+0x14c>)
 80006ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d2:	f003 0304 	and.w	r3, r3, #4
 80006d6:	617b      	str	r3, [r7, #20]
 80006d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006da:	4b3e      	ldr	r3, [pc, #248]	; (80007d4 <MX_GPIO_Init+0x14c>)
 80006dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e0:	4a3c      	ldr	r2, [pc, #240]	; (80007d4 <MX_GPIO_Init+0x14c>)
 80006e2:	f043 0301 	orr.w	r3, r3, #1
 80006e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006ea:	4b3a      	ldr	r3, [pc, #232]	; (80007d4 <MX_GPIO_Init+0x14c>)
 80006ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f0:	f003 0301 	and.w	r3, r3, #1
 80006f4:	613b      	str	r3, [r7, #16]
 80006f6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f8:	4b36      	ldr	r3, [pc, #216]	; (80007d4 <MX_GPIO_Init+0x14c>)
 80006fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006fe:	4a35      	ldr	r2, [pc, #212]	; (80007d4 <MX_GPIO_Init+0x14c>)
 8000700:	f043 0302 	orr.w	r3, r3, #2
 8000704:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000708:	4b32      	ldr	r3, [pc, #200]	; (80007d4 <MX_GPIO_Init+0x14c>)
 800070a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800070e:	f003 0302 	and.w	r3, r3, #2
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000716:	4b2f      	ldr	r3, [pc, #188]	; (80007d4 <MX_GPIO_Init+0x14c>)
 8000718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800071c:	4a2d      	ldr	r2, [pc, #180]	; (80007d4 <MX_GPIO_Init+0x14c>)
 800071e:	f043 0320 	orr.w	r3, r3, #32
 8000722:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000726:	4b2b      	ldr	r3, [pc, #172]	; (80007d4 <MX_GPIO_Init+0x14c>)
 8000728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800072c:	f003 0320 	and.w	r3, r3, #32
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000734:	4b27      	ldr	r3, [pc, #156]	; (80007d4 <MX_GPIO_Init+0x14c>)
 8000736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073a:	4a26      	ldr	r2, [pc, #152]	; (80007d4 <MX_GPIO_Init+0x14c>)
 800073c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000740:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000744:	4b23      	ldr	r3, [pc, #140]	; (80007d4 <MX_GPIO_Init+0x14c>)
 8000746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	2180      	movs	r1, #128	; 0x80
 8000756:	4820      	ldr	r0, [pc, #128]	; (80007d8 <MX_GPIO_Init+0x150>)
 8000758:	f004 ff3e 	bl	80055d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000762:	481e      	ldr	r0, [pc, #120]	; (80007dc <MX_GPIO_Init+0x154>)
 8000764:	f004 ff38 	bl	80055d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800076e:	481c      	ldr	r0, [pc, #112]	; (80007e0 <MX_GPIO_Init+0x158>)
 8000770:	f004 ff32 	bl	80055d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000774:	2380      	movs	r3, #128	; 0x80
 8000776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000778:	2301      	movs	r3, #1
 800077a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000784:	f107 031c 	add.w	r3, r7, #28
 8000788:	4619      	mov	r1, r3
 800078a:	4813      	ldr	r0, [pc, #76]	; (80007d8 <MX_GPIO_Init+0x150>)
 800078c:	f004 fd7c 	bl	8005288 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000790:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000796:	2301      	movs	r3, #1
 8000798:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	2300      	movs	r3, #0
 80007a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a2:	f107 031c 	add.w	r3, r7, #28
 80007a6:	4619      	mov	r1, r3
 80007a8:	480c      	ldr	r0, [pc, #48]	; (80007dc <MX_GPIO_Init+0x154>)
 80007aa:	f004 fd6d 	bl	8005288 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80007ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b4:	2301      	movs	r3, #1
 80007b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2300      	movs	r3, #0
 80007be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007c0:	f107 031c 	add.w	r3, r7, #28
 80007c4:	4619      	mov	r1, r3
 80007c6:	4806      	ldr	r0, [pc, #24]	; (80007e0 <MX_GPIO_Init+0x158>)
 80007c8:	f004 fd5e 	bl	8005288 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007cc:	bf00      	nop
 80007ce:	3730      	adds	r7, #48	; 0x30
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	58024400 	.word	0x58024400
 80007d8:	58021800 	.word	0x58021800
 80007dc:	58020000 	.word	0x58020000
 80007e0:	58020800 	.word	0x58020800

080007e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e8:	b672      	cpsid	i
}
 80007ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ec:	e7fe      	b.n	80007ec <Error_Handler+0x8>
	...

080007f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f6:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <HAL_MspInit+0x30>)
 80007f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007fc:	4a08      	ldr	r2, [pc, #32]	; (8000820 <HAL_MspInit+0x30>)
 80007fe:	f043 0302 	orr.w	r3, r3, #2
 8000802:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <HAL_MspInit+0x30>)
 8000808:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800080c:	f003 0302 	and.w	r3, r3, #2
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000814:	bf00      	nop
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	58024400 	.word	0x58024400

08000824 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b0bc      	sub	sp, #240	; 0xf0
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800083c:	f107 0320 	add.w	r3, r7, #32
 8000840:	22b8      	movs	r2, #184	; 0xb8
 8000842:	2100      	movs	r1, #0
 8000844:	4618      	mov	r0, r3
 8000846:	f008 fa6b 	bl	8008d20 <memset>
  if(hadc->Instance==ADC1)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a75      	ldr	r2, [pc, #468]	; (8000a24 <HAL_ADC_MspInit+0x200>)
 8000850:	4293      	cmp	r3, r2
 8000852:	f040 80e3 	bne.w	8000a1c <HAL_ADC_MspInit+0x1f8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000856:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800085a:	f04f 0300 	mov.w	r3, #0
 800085e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000862:	2302      	movs	r3, #2
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000866:	2310      	movs	r3, #16
 8000868:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800086a:	2302      	movs	r3, #2
 800086c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800086e:	2302      	movs	r3, #2
 8000870:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000872:	2302      	movs	r3, #2
 8000874:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000876:	23c0      	movs	r3, #192	; 0xc0
 8000878:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800087a:	2300      	movs	r3, #0
 800087c:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000882:	2300      	movs	r3, #0
 8000884:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000888:	f107 0320 	add.w	r3, r7, #32
 800088c:	4618      	mov	r0, r3
 800088e:	f005 fe61 	bl	8006554 <HAL_RCCEx_PeriphCLKConfig>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8000898:	f7ff ffa4 	bl	80007e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800089c:	4b62      	ldr	r3, [pc, #392]	; (8000a28 <HAL_ADC_MspInit+0x204>)
 800089e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008a2:	4a61      	ldr	r2, [pc, #388]	; (8000a28 <HAL_ADC_MspInit+0x204>)
 80008a4:	f043 0320 	orr.w	r3, r3, #32
 80008a8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80008ac:	4b5e      	ldr	r3, [pc, #376]	; (8000a28 <HAL_ADC_MspInit+0x204>)
 80008ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008b2:	f003 0320 	and.w	r3, r3, #32
 80008b6:	61fb      	str	r3, [r7, #28]
 80008b8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ba:	4b5b      	ldr	r3, [pc, #364]	; (8000a28 <HAL_ADC_MspInit+0x204>)
 80008bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c0:	4a59      	ldr	r2, [pc, #356]	; (8000a28 <HAL_ADC_MspInit+0x204>)
 80008c2:	f043 0304 	orr.w	r3, r3, #4
 80008c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008ca:	4b57      	ldr	r3, [pc, #348]	; (8000a28 <HAL_ADC_MspInit+0x204>)
 80008cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d0:	f003 0304 	and.w	r3, r3, #4
 80008d4:	61bb      	str	r3, [r7, #24]
 80008d6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d8:	4b53      	ldr	r3, [pc, #332]	; (8000a28 <HAL_ADC_MspInit+0x204>)
 80008da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008de:	4a52      	ldr	r2, [pc, #328]	; (8000a28 <HAL_ADC_MspInit+0x204>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008e8:	4b4f      	ldr	r3, [pc, #316]	; (8000a28 <HAL_ADC_MspInit+0x204>)
 80008ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	4b4c      	ldr	r3, [pc, #304]	; (8000a28 <HAL_ADC_MspInit+0x204>)
 80008f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008fc:	4a4a      	ldr	r2, [pc, #296]	; (8000a28 <HAL_ADC_MspInit+0x204>)
 80008fe:	f043 0302 	orr.w	r3, r3, #2
 8000902:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000906:	4b48      	ldr	r3, [pc, #288]	; (8000a28 <HAL_ADC_MspInit+0x204>)
 8000908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800090c:	f003 0302 	and.w	r3, r3, #2
 8000910:	613b      	str	r3, [r7, #16]
 8000912:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000914:	4b44      	ldr	r3, [pc, #272]	; (8000a28 <HAL_ADC_MspInit+0x204>)
 8000916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800091a:	4a43      	ldr	r2, [pc, #268]	; (8000a28 <HAL_ADC_MspInit+0x204>)
 800091c:	f043 0320 	orr.w	r3, r3, #32
 8000920:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000924:	4b40      	ldr	r3, [pc, #256]	; (8000a28 <HAL_ADC_MspInit+0x204>)
 8000926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800092a:	f003 0320 	and.w	r3, r3, #32
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000932:	2333      	movs	r3, #51	; 0x33
 8000934:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000938:	2303      	movs	r3, #3
 800093a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000944:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000948:	4619      	mov	r1, r3
 800094a:	4838      	ldr	r0, [pc, #224]	; (8000a2c <HAL_ADC_MspInit+0x208>)
 800094c:	f004 fc9c 	bl	8005288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000950:	23c0      	movs	r3, #192	; 0xc0
 8000952:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000956:	2303      	movs	r3, #3
 8000958:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000962:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000966:	4619      	mov	r1, r3
 8000968:	4831      	ldr	r0, [pc, #196]	; (8000a30 <HAL_ADC_MspInit+0x20c>)
 800096a:	f004 fc8d 	bl	8005288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800096e:	2303      	movs	r3, #3
 8000970:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000974:	2303      	movs	r3, #3
 8000976:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000980:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000984:	4619      	mov	r1, r3
 8000986:	482b      	ldr	r0, [pc, #172]	; (8000a34 <HAL_ADC_MspInit+0x210>)
 8000988:	f004 fc7e 	bl	8005288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800098c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000990:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000994:	2303      	movs	r3, #3
 8000996:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009a0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80009a4:	4619      	mov	r1, r3
 80009a6:	4824      	ldr	r0, [pc, #144]	; (8000a38 <HAL_ADC_MspInit+0x214>)
 80009a8:	f004 fc6e 	bl	8005288 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80009ac:	4b23      	ldr	r3, [pc, #140]	; (8000a3c <HAL_ADC_MspInit+0x218>)
 80009ae:	4a24      	ldr	r2, [pc, #144]	; (8000a40 <HAL_ADC_MspInit+0x21c>)
 80009b0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80009b2:	4b22      	ldr	r3, [pc, #136]	; (8000a3c <HAL_ADC_MspInit+0x218>)
 80009b4:	2209      	movs	r2, #9
 80009b6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009b8:	4b20      	ldr	r3, [pc, #128]	; (8000a3c <HAL_ADC_MspInit+0x218>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80009be:	4b1f      	ldr	r3, [pc, #124]	; (8000a3c <HAL_ADC_MspInit+0x218>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80009c4:	4b1d      	ldr	r3, [pc, #116]	; (8000a3c <HAL_ADC_MspInit+0x218>)
 80009c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009ca:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009cc:	4b1b      	ldr	r3, [pc, #108]	; (8000a3c <HAL_ADC_MspInit+0x218>)
 80009ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009d2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009d4:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <HAL_ADC_MspInit+0x218>)
 80009d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009da:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80009dc:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <HAL_ADC_MspInit+0x218>)
 80009de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009e2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80009e4:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <HAL_ADC_MspInit+0x218>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009ea:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <HAL_ADC_MspInit+0x218>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80009f0:	4812      	ldr	r0, [pc, #72]	; (8000a3c <HAL_ADC_MspInit+0x218>)
 80009f2:	f002 fb75 	bl	80030e0 <HAL_DMA_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <HAL_ADC_MspInit+0x1dc>
    {
      Error_Handler();
 80009fc:	f7ff fef2 	bl	80007e4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4a0e      	ldr	r2, [pc, #56]	; (8000a3c <HAL_ADC_MspInit+0x218>)
 8000a04:	659a      	str	r2, [r3, #88]	; 0x58
 8000a06:	4a0d      	ldr	r2, [pc, #52]	; (8000a3c <HAL_ADC_MspInit+0x218>)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2100      	movs	r1, #0
 8000a10:	2012      	movs	r0, #18
 8000a12:	f002 fb30 	bl	8003076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000a16:	2012      	movs	r0, #18
 8000a18:	f002 fb47 	bl	80030aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a1c:	bf00      	nop
 8000a1e:	37f0      	adds	r7, #240	; 0xf0
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40022000 	.word	0x40022000
 8000a28:	58024400 	.word	0x58024400
 8000a2c:	58020800 	.word	0x58020800
 8000a30:	58020000 	.word	0x58020000
 8000a34:	58020400 	.word	0x58020400
 8000a38:	58021400 	.word	0x58021400
 8000a3c:	2400009c 	.word	0x2400009c
 8000a40:	40020010 	.word	0x40020010

08000a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a48:	e7fe      	b.n	8000a48 <NMI_Handler+0x4>

08000a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <HardFault_Handler+0x4>

08000a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <MemManage_Handler+0x4>

08000a56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <BusFault_Handler+0x4>

08000a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <UsageFault_Handler+0x4>

08000a62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a90:	f000 f92a 	bl	8000ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000a9c:	4802      	ldr	r0, [pc, #8]	; (8000aa8 <DMA1_Stream0_IRQHandler+0x10>)
 8000a9e:	f003 f8e1 	bl	8003c64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	2400009c 	.word	0x2400009c

08000aac <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ab0:	4802      	ldr	r0, [pc, #8]	; (8000abc <ADC_IRQHandler+0x10>)
 8000ab2:	f000 ff2d 	bl	8001910 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	2400002c 	.word	0x2400002c

08000ac0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ac4:	4b32      	ldr	r3, [pc, #200]	; (8000b90 <SystemInit+0xd0>)
 8000ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aca:	4a31      	ldr	r2, [pc, #196]	; (8000b90 <SystemInit+0xd0>)
 8000acc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ad4:	4b2f      	ldr	r3, [pc, #188]	; (8000b94 <SystemInit+0xd4>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f003 030f 	and.w	r3, r3, #15
 8000adc:	2b06      	cmp	r3, #6
 8000ade:	d807      	bhi.n	8000af0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ae0:	4b2c      	ldr	r3, [pc, #176]	; (8000b94 <SystemInit+0xd4>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f023 030f 	bic.w	r3, r3, #15
 8000ae8:	4a2a      	ldr	r2, [pc, #168]	; (8000b94 <SystemInit+0xd4>)
 8000aea:	f043 0307 	orr.w	r3, r3, #7
 8000aee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000af0:	4b29      	ldr	r3, [pc, #164]	; (8000b98 <SystemInit+0xd8>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a28      	ldr	r2, [pc, #160]	; (8000b98 <SystemInit+0xd8>)
 8000af6:	f043 0301 	orr.w	r3, r3, #1
 8000afa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000afc:	4b26      	ldr	r3, [pc, #152]	; (8000b98 <SystemInit+0xd8>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b02:	4b25      	ldr	r3, [pc, #148]	; (8000b98 <SystemInit+0xd8>)
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	4924      	ldr	r1, [pc, #144]	; (8000b98 <SystemInit+0xd8>)
 8000b08:	4b24      	ldr	r3, [pc, #144]	; (8000b9c <SystemInit+0xdc>)
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b0e:	4b21      	ldr	r3, [pc, #132]	; (8000b94 <SystemInit+0xd4>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f003 0308 	and.w	r3, r3, #8
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d007      	beq.n	8000b2a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b1a:	4b1e      	ldr	r3, [pc, #120]	; (8000b94 <SystemInit+0xd4>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f023 030f 	bic.w	r3, r3, #15
 8000b22:	4a1c      	ldr	r2, [pc, #112]	; (8000b94 <SystemInit+0xd4>)
 8000b24:	f043 0307 	orr.w	r3, r3, #7
 8000b28:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b2a:	4b1b      	ldr	r3, [pc, #108]	; (8000b98 <SystemInit+0xd8>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000b30:	4b19      	ldr	r3, [pc, #100]	; (8000b98 <SystemInit+0xd8>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000b36:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <SystemInit+0xd8>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b3c:	4b16      	ldr	r3, [pc, #88]	; (8000b98 <SystemInit+0xd8>)
 8000b3e:	4a18      	ldr	r2, [pc, #96]	; (8000ba0 <SystemInit+0xe0>)
 8000b40:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b42:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <SystemInit+0xd8>)
 8000b44:	4a17      	ldr	r2, [pc, #92]	; (8000ba4 <SystemInit+0xe4>)
 8000b46:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b48:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <SystemInit+0xd8>)
 8000b4a:	4a17      	ldr	r2, [pc, #92]	; (8000ba8 <SystemInit+0xe8>)
 8000b4c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b4e:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <SystemInit+0xd8>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b54:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <SystemInit+0xd8>)
 8000b56:	4a14      	ldr	r2, [pc, #80]	; (8000ba8 <SystemInit+0xe8>)
 8000b58:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b5a:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <SystemInit+0xd8>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b60:	4b0d      	ldr	r3, [pc, #52]	; (8000b98 <SystemInit+0xd8>)
 8000b62:	4a11      	ldr	r2, [pc, #68]	; (8000ba8 <SystemInit+0xe8>)
 8000b64:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b66:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <SystemInit+0xd8>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b6c:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <SystemInit+0xd8>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a09      	ldr	r2, [pc, #36]	; (8000b98 <SystemInit+0xd8>)
 8000b72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b76:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b78:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <SystemInit+0xd8>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <SystemInit+0xec>)
 8000b80:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b84:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000ed00 	.word	0xe000ed00
 8000b94:	52002000 	.word	0x52002000
 8000b98:	58024400 	.word	0x58024400
 8000b9c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ba0:	02020200 	.word	0x02020200
 8000ba4:	01ff0000 	.word	0x01ff0000
 8000ba8:	01010280 	.word	0x01010280
 8000bac:	52004000 	.word	0x52004000

08000bb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000bb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bb4:	f7ff ff84 	bl	8000ac0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb8:	480c      	ldr	r0, [pc, #48]	; (8000bec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bba:	490d      	ldr	r1, [pc, #52]	; (8000bf0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bbc:	4a0d      	ldr	r2, [pc, #52]	; (8000bf4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc0:	e002      	b.n	8000bc8 <LoopCopyDataInit>

08000bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc6:	3304      	adds	r3, #4

08000bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bcc:	d3f9      	bcc.n	8000bc2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bce:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bd0:	4c0a      	ldr	r4, [pc, #40]	; (8000bfc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd4:	e001      	b.n	8000bda <LoopFillZerobss>

08000bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd8:	3204      	adds	r2, #4

08000bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bdc:	d3fb      	bcc.n	8000bd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bde:	f008 f8a7 	bl	8008d30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000be2:	f7ff fb93 	bl	800030c <main>
  bx  lr
 8000be6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000be8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000bec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000bf0:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000bf4:	08008db0 	.word	0x08008db0
  ldr r2, =_sbss
 8000bf8:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000bfc:	2400012c 	.word	0x2400012c

08000c00 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c00:	e7fe      	b.n	8000c00 <ADC3_IRQHandler>
	...

08000c04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c0a:	2003      	movs	r0, #3
 8000c0c:	f002 fa28 	bl	8003060 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000c10:	f005 fae0 	bl	80061d4 <HAL_RCC_GetSysClockFreq>
 8000c14:	4602      	mov	r2, r0
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <HAL_Init+0x68>)
 8000c18:	699b      	ldr	r3, [r3, #24]
 8000c1a:	0a1b      	lsrs	r3, r3, #8
 8000c1c:	f003 030f 	and.w	r3, r3, #15
 8000c20:	4913      	ldr	r1, [pc, #76]	; (8000c70 <HAL_Init+0x6c>)
 8000c22:	5ccb      	ldrb	r3, [r1, r3]
 8000c24:	f003 031f 	and.w	r3, r3, #31
 8000c28:	fa22 f303 	lsr.w	r3, r2, r3
 8000c2c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c2e:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <HAL_Init+0x68>)
 8000c30:	699b      	ldr	r3, [r3, #24]
 8000c32:	f003 030f 	and.w	r3, r3, #15
 8000c36:	4a0e      	ldr	r2, [pc, #56]	; (8000c70 <HAL_Init+0x6c>)
 8000c38:	5cd3      	ldrb	r3, [r2, r3]
 8000c3a:	f003 031f 	and.w	r3, r3, #31
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	fa22 f303 	lsr.w	r3, r2, r3
 8000c44:	4a0b      	ldr	r2, [pc, #44]	; (8000c74 <HAL_Init+0x70>)
 8000c46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c48:	4a0b      	ldr	r2, [pc, #44]	; (8000c78 <HAL_Init+0x74>)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c4e:	200f      	movs	r0, #15
 8000c50:	f000 f814 	bl	8000c7c <HAL_InitTick>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e002      	b.n	8000c64 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c5e:	f7ff fdc7 	bl	80007f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c62:	2300      	movs	r3, #0
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	58024400 	.word	0x58024400
 8000c70:	08008d90 	.word	0x08008d90
 8000c74:	24000004 	.word	0x24000004
 8000c78:	24000000 	.word	0x24000000

08000c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c84:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <HAL_InitTick+0x60>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d101      	bne.n	8000c90 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e021      	b.n	8000cd4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c90:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_InitTick+0x64>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <HAL_InitTick+0x60>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f002 fa0d 	bl	80030c6 <HAL_SYSTICK_Config>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e00e      	b.n	8000cd4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b0f      	cmp	r3, #15
 8000cba:	d80a      	bhi.n	8000cd2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc4:	f002 f9d7 	bl	8003076 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc8:	4a06      	ldr	r2, [pc, #24]	; (8000ce4 <HAL_InitTick+0x68>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	e000      	b.n	8000cd4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	2400000c 	.word	0x2400000c
 8000ce0:	24000000 	.word	0x24000000
 8000ce4:	24000008 	.word	0x24000008

08000ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <HAL_IncTick+0x20>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_IncTick+0x24>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	4a04      	ldr	r2, [pc, #16]	; (8000d0c <HAL_IncTick+0x24>)
 8000cfa:	6013      	str	r3, [r2, #0]
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	2400000c 	.word	0x2400000c
 8000d0c:	24000128 	.word	0x24000128

08000d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return uwTick;
 8000d14:	4b03      	ldr	r3, [pc, #12]	; (8000d24 <HAL_GetTick+0x14>)
 8000d16:	681b      	ldr	r3, [r3, #0]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	24000128 	.word	0x24000128

08000d28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d30:	f7ff ffee 	bl	8000d10 <HAL_GetTick>
 8000d34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d40:	d005      	beq.n	8000d4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d42:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <HAL_Delay+0x44>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	461a      	mov	r2, r3
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d4e:	bf00      	nop
 8000d50:	f7ff ffde 	bl	8000d10 <HAL_GetTick>
 8000d54:	4602      	mov	r2, r0
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d8f7      	bhi.n	8000d50 <HAL_Delay+0x28>
  {
  }
}
 8000d60:	bf00      	nop
 8000d62:	bf00      	nop
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	2400000c 	.word	0x2400000c

08000d70 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	431a      	orrs	r2, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	609a      	str	r2, [r3, #8]
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b083      	sub	sp, #12
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
 8000d9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	431a      	orrs	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	609a      	str	r2, [r3, #8]
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b087      	sub	sp, #28
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
 8000de4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	3360      	adds	r3, #96	; 0x60
 8000dea:	461a      	mov	r2, r3
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	4413      	add	r3, r2
 8000df2:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	4a10      	ldr	r2, [pc, #64]	; (8000e38 <LL_ADC_SetOffset+0x60>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d10b      	bne.n	8000e14 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8000e12:	e00b      	b.n	8000e2c <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	430b      	orrs	r3, r1
 8000e26:	431a      	orrs	r2, r3
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	601a      	str	r2, [r3, #0]
}
 8000e2c:	bf00      	nop
 8000e2e:	371c      	adds	r7, #28
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	58026000 	.word	0x58026000

08000e3c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	3360      	adds	r3, #96	; 0x60
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	4413      	add	r3, r2
 8000e52:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	691b      	ldr	r3, [r3, #16]
 8000e78:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	f003 031f 	and.w	r3, r3, #31
 8000e82:	6879      	ldr	r1, [r7, #4]
 8000e84:	fa01 f303 	lsl.w	r3, r1, r3
 8000e88:	431a      	orrs	r2, r3
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	611a      	str	r2, [r3, #16]
}
 8000e8e:	bf00      	nop
 8000e90:	3714      	adds	r7, #20
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
	...

08000e9c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b087      	sub	sp, #28
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	4a0c      	ldr	r2, [pc, #48]	; (8000edc <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d00e      	beq.n	8000ece <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	3360      	adds	r3, #96	; 0x60
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	4413      	add	r3, r2
 8000ebc:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	431a      	orrs	r2, r3
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	601a      	str	r2, [r3, #0]
  }
}
 8000ece:	bf00      	nop
 8000ed0:	371c      	adds	r7, #28
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	58026000 	.word	0x58026000

08000ee0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b087      	sub	sp, #28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4a0c      	ldr	r2, [pc, #48]	; (8000f20 <LL_ADC_SetOffsetSaturation+0x40>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d10e      	bne.n	8000f12 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	3360      	adds	r3, #96	; 0x60
 8000ef8:	461a      	mov	r2, r3
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	4413      	add	r3, r2
 8000f00:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	431a      	orrs	r2, r3
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8000f12:	bf00      	nop
 8000f14:	371c      	adds	r7, #28
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	58026000 	.word	0x58026000

08000f24 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b087      	sub	sp, #28
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	4a0c      	ldr	r2, [pc, #48]	; (8000f64 <LL_ADC_SetOffsetSign+0x40>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d10e      	bne.n	8000f56 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	3360      	adds	r3, #96	; 0x60
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	4413      	add	r3, r2
 8000f44:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	431a      	orrs	r2, r3
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8000f56:	bf00      	nop
 8000f58:	371c      	adds	r7, #28
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	58026000 	.word	0x58026000

08000f68 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b087      	sub	sp, #28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	3360      	adds	r3, #96	; 0x60
 8000f78:	461a      	mov	r2, r3
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	4413      	add	r3, r2
 8000f80:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	4a0c      	ldr	r2, [pc, #48]	; (8000fb8 <LL_ADC_SetOffsetState+0x50>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d108      	bne.n	8000f9c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	431a      	orrs	r2, r3
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8000f9a:	e007      	b.n	8000fac <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	431a      	orrs	r2, r3
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	601a      	str	r2, [r3, #0]
}
 8000fac:	bf00      	nop
 8000fae:	371c      	adds	r7, #28
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	58026000 	.word	0x58026000

08000fbc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d101      	bne.n	8000fd4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e000      	b.n	8000fd6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b087      	sub	sp, #28
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	60f8      	str	r0, [r7, #12]
 8000fea:	60b9      	str	r1, [r7, #8]
 8000fec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	3330      	adds	r3, #48	; 0x30
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	0a1b      	lsrs	r3, r3, #8
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	f003 030c 	and.w	r3, r3, #12
 8000ffe:	4413      	add	r3, r2
 8001000:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	f003 031f 	and.w	r3, r3, #31
 800100c:	211f      	movs	r1, #31
 800100e:	fa01 f303 	lsl.w	r3, r1, r3
 8001012:	43db      	mvns	r3, r3
 8001014:	401a      	ands	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	0e9b      	lsrs	r3, r3, #26
 800101a:	f003 011f 	and.w	r1, r3, #31
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	f003 031f 	and.w	r3, r3, #31
 8001024:	fa01 f303 	lsl.w	r3, r1, r3
 8001028:	431a      	orrs	r2, r3
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800102e:	bf00      	nop
 8001030:	371c      	adds	r7, #28
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800103a:	b480      	push	{r7}
 800103c:	b083      	sub	sp, #12
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
 8001042:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	f023 0203 	bic.w	r2, r3, #3
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	431a      	orrs	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	60da      	str	r2, [r3, #12]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	f043 0201 	orr.w	r2, r3, #1
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	60da      	str	r2, [r3, #12]
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a08      	ldr	r2, [pc, #32]	; (80010b0 <LL_ADC_REG_SetDMATransferMode+0x30>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d107      	bne.n	80010a2 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	f023 0203 	bic.w	r2, r3, #3
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	431a      	orrs	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	60da      	str	r2, [r3, #12]
  }
}
 80010a2:	bf00      	nop
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	58026000 	.word	0x58026000

080010b4 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c0:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d101      	bne.n	80010cc <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80010c8:	2301      	movs	r3, #1
 80010ca:	e000      	b.n	80010ce <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80010da:	b480      	push	{r7}
 80010dc:	b087      	sub	sp, #28
 80010de:	af00      	add	r7, sp, #0
 80010e0:	60f8      	str	r0, [r7, #12]
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	3314      	adds	r3, #20
 80010ea:	461a      	mov	r2, r3
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	0e5b      	lsrs	r3, r3, #25
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	f003 0304 	and.w	r3, r3, #4
 80010f6:	4413      	add	r3, r2
 80010f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	0d1b      	lsrs	r3, r3, #20
 8001102:	f003 031f 	and.w	r3, r3, #31
 8001106:	2107      	movs	r1, #7
 8001108:	fa01 f303 	lsl.w	r3, r1, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	401a      	ands	r2, r3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	0d1b      	lsrs	r3, r3, #20
 8001114:	f003 031f 	and.w	r3, r3, #31
 8001118:	6879      	ldr	r1, [r7, #4]
 800111a:	fa01 f303 	lsl.w	r3, r1, r3
 800111e:	431a      	orrs	r2, r3
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001124:	bf00      	nop
 8001126:	371c      	adds	r7, #28
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4a1a      	ldr	r2, [pc, #104]	; (80011a8 <LL_ADC_SetChannelSingleDiff+0x78>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d115      	bne.n	8001170 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001150:	43db      	mvns	r3, r3
 8001152:	401a      	ands	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f003 0318 	and.w	r3, r3, #24
 800115a:	4914      	ldr	r1, [pc, #80]	; (80011ac <LL_ADC_SetChannelSingleDiff+0x7c>)
 800115c:	40d9      	lsrs	r1, r3
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	400b      	ands	r3, r1
 8001162:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001166:	431a      	orrs	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800116e:	e014      	b.n	800119a <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800117c:	43db      	mvns	r3, r3
 800117e:	401a      	ands	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f003 0318 	and.w	r3, r3, #24
 8001186:	4909      	ldr	r1, [pc, #36]	; (80011ac <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001188:	40d9      	lsrs	r1, r3
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	400b      	ands	r3, r1
 800118e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001192:	431a      	orrs	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 800119a:	bf00      	nop
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	58026000 	.word	0x58026000
 80011ac:	000fffff 	.word	0x000fffff

080011b0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	f003 031f 	and.w	r3, r3, #31
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80011dc:	4618      	mov	r0, r3
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	4b04      	ldr	r3, [pc, #16]	; (8001208 <LL_ADC_DisableDeepPowerDown+0x20>)
 80011f6:	4013      	ands	r3, r2
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	6093      	str	r3, [r2, #8]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	5fffffc0 	.word	0x5fffffc0

0800120c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800121c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001220:	d101      	bne.n	8001226 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001222:	2301      	movs	r3, #1
 8001224:	e000      	b.n	8001228 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001226:	2300      	movs	r3, #0
}
 8001228:	4618      	mov	r0, r3
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <LL_ADC_EnableInternalRegulator+0x24>)
 8001242:	4013      	ands	r3, r2
 8001244:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	6fffffc0 	.word	0x6fffffc0

0800125c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001270:	d101      	bne.n	8001276 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001272:	2301      	movs	r3, #1
 8001274:	e000      	b.n	8001278 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001276:	2300      	movs	r3, #0
}
 8001278:	4618      	mov	r0, r3
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <LL_ADC_Enable+0x24>)
 8001292:	4013      	ands	r3, r2
 8001294:	f043 0201 	orr.w	r2, r3, #1
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	7fffffc0 	.word	0x7fffffc0

080012ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d101      	bne.n	80012c4 <LL_ADC_IsEnabled+0x18>
 80012c0:	2301      	movs	r3, #1
 80012c2:	e000      	b.n	80012c6 <LL_ADC_IsEnabled+0x1a>
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
	...

080012d4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689a      	ldr	r2, [r3, #8]
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <LL_ADC_REG_StartConversion+0x24>)
 80012e2:	4013      	ands	r3, r2
 80012e4:	f043 0204 	orr.w	r2, r3, #4
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	7fffffc0 	.word	0x7fffffc0

080012fc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f003 0304 	and.w	r3, r3, #4
 800130c:	2b04      	cmp	r3, #4
 800130e:	d101      	bne.n	8001314 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001310:	2301      	movs	r3, #1
 8001312:	e000      	b.n	8001316 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001322:	b480      	push	{r7}
 8001324:	b083      	sub	sp, #12
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f003 0308 	and.w	r3, r3, #8
 8001332:	2b08      	cmp	r3, #8
 8001334:	d101      	bne.n	800133a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001336:	2301      	movs	r3, #1
 8001338:	e000      	b.n	800133c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800133a:	2300      	movs	r3, #0
}
 800133c:	4618      	mov	r0, r3
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001348:	b590      	push	{r4, r7, lr}
 800134a:	b089      	sub	sp, #36	; 0x24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001350:	2300      	movs	r3, #0
 8001352:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001354:	2300      	movs	r3, #0
 8001356:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d101      	bne.n	8001362 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e1ee      	b.n	8001740 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800136c:	2b00      	cmp	r3, #0
 800136e:	d109      	bne.n	8001384 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff fa57 	bl	8000824 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ff3f 	bl	800120c <LL_ADC_IsDeepPowerDownEnabled>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d004      	beq.n	800139e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff25 	bl	80011e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff ff5a 	bl	800125c <LL_ADC_IsInternalRegulatorEnabled>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d114      	bne.n	80013d8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff ff3e 	bl	8001234 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80013b8:	4b8e      	ldr	r3, [pc, #568]	; (80015f4 <HAL_ADC_Init+0x2ac>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	099b      	lsrs	r3, r3, #6
 80013be:	4a8e      	ldr	r2, [pc, #568]	; (80015f8 <HAL_ADC_Init+0x2b0>)
 80013c0:	fba2 2303 	umull	r2, r3, r2, r3
 80013c4:	099b      	lsrs	r3, r3, #6
 80013c6:	3301      	adds	r3, #1
 80013c8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80013ca:	e002      	b.n	80013d2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d1f9      	bne.n	80013cc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff3d 	bl	800125c <LL_ADC_IsInternalRegulatorEnabled>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d10d      	bne.n	8001404 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ec:	f043 0210 	orr.w	r2, r3, #16
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80013f8:	f043 0201 	orr.w	r2, r3, #1
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff77 	bl	80012fc <LL_ADC_REG_IsConversionOngoing>
 800140e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001414:	f003 0310 	and.w	r3, r3, #16
 8001418:	2b00      	cmp	r3, #0
 800141a:	f040 8188 	bne.w	800172e <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	2b00      	cmp	r3, #0
 8001422:	f040 8184 	bne.w	800172e <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800142a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800142e:	f043 0202 	orr.w	r2, r3, #2
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff ff36 	bl	80012ac <LL_ADC_IsEnabled>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d136      	bne.n	80014b4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a6c      	ldr	r2, [pc, #432]	; (80015fc <HAL_ADC_Init+0x2b4>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d004      	beq.n	800145a <HAL_ADC_Init+0x112>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a6a      	ldr	r2, [pc, #424]	; (8001600 <HAL_ADC_Init+0x2b8>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d10e      	bne.n	8001478 <HAL_ADC_Init+0x130>
 800145a:	4868      	ldr	r0, [pc, #416]	; (80015fc <HAL_ADC_Init+0x2b4>)
 800145c:	f7ff ff26 	bl	80012ac <LL_ADC_IsEnabled>
 8001460:	4604      	mov	r4, r0
 8001462:	4867      	ldr	r0, [pc, #412]	; (8001600 <HAL_ADC_Init+0x2b8>)
 8001464:	f7ff ff22 	bl	80012ac <LL_ADC_IsEnabled>
 8001468:	4603      	mov	r3, r0
 800146a:	4323      	orrs	r3, r4
 800146c:	2b00      	cmp	r3, #0
 800146e:	bf0c      	ite	eq
 8001470:	2301      	moveq	r3, #1
 8001472:	2300      	movne	r3, #0
 8001474:	b2db      	uxtb	r3, r3
 8001476:	e008      	b.n	800148a <HAL_ADC_Init+0x142>
 8001478:	4862      	ldr	r0, [pc, #392]	; (8001604 <HAL_ADC_Init+0x2bc>)
 800147a:	f7ff ff17 	bl	80012ac <LL_ADC_IsEnabled>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	bf0c      	ite	eq
 8001484:	2301      	moveq	r3, #1
 8001486:	2300      	movne	r3, #0
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d012      	beq.n	80014b4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a5a      	ldr	r2, [pc, #360]	; (80015fc <HAL_ADC_Init+0x2b4>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d004      	beq.n	80014a2 <HAL_ADC_Init+0x15a>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a58      	ldr	r2, [pc, #352]	; (8001600 <HAL_ADC_Init+0x2b8>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d101      	bne.n	80014a6 <HAL_ADC_Init+0x15e>
 80014a2:	4a59      	ldr	r2, [pc, #356]	; (8001608 <HAL_ADC_Init+0x2c0>)
 80014a4:	e000      	b.n	80014a8 <HAL_ADC_Init+0x160>
 80014a6:	4a59      	ldr	r2, [pc, #356]	; (800160c <HAL_ADC_Init+0x2c4>)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	4619      	mov	r1, r3
 80014ae:	4610      	mov	r0, r2
 80014b0:	f7ff fc5e 	bl	8000d70 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a52      	ldr	r2, [pc, #328]	; (8001604 <HAL_ADC_Init+0x2bc>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d129      	bne.n	8001512 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	7e5b      	ldrb	r3, [r3, #25]
 80014c2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80014c8:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80014ce:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	2b08      	cmp	r3, #8
 80014d6:	d013      	beq.n	8001500 <HAL_ADC_Init+0x1b8>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	2b0c      	cmp	r3, #12
 80014de:	d00d      	beq.n	80014fc <HAL_ADC_Init+0x1b4>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	2b1c      	cmp	r3, #28
 80014e6:	d007      	beq.n	80014f8 <HAL_ADC_Init+0x1b0>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	2b18      	cmp	r3, #24
 80014ee:	d101      	bne.n	80014f4 <HAL_ADC_Init+0x1ac>
 80014f0:	2318      	movs	r3, #24
 80014f2:	e006      	b.n	8001502 <HAL_ADC_Init+0x1ba>
 80014f4:	2300      	movs	r3, #0
 80014f6:	e004      	b.n	8001502 <HAL_ADC_Init+0x1ba>
 80014f8:	2310      	movs	r3, #16
 80014fa:	e002      	b.n	8001502 <HAL_ADC_Init+0x1ba>
 80014fc:	2308      	movs	r3, #8
 80014fe:	e000      	b.n	8001502 <HAL_ADC_Init+0x1ba>
 8001500:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8001502:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f893 3020 	ldrb.w	r3, [r3, #32]
 800150a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800150c:	4313      	orrs	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
 8001510:	e00e      	b.n	8001530 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	7e5b      	ldrb	r3, [r3, #25]
 8001516:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800151c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001522:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f893 3020 	ldrb.w	r3, [r3, #32]
 800152a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800152c:	4313      	orrs	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d106      	bne.n	8001548 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153e:	3b01      	subs	r3, #1
 8001540:	045b      	lsls	r3, r3, #17
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4313      	orrs	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154c:	2b00      	cmp	r3, #0
 800154e:	d009      	beq.n	8001564 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001554:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4313      	orrs	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a26      	ldr	r2, [pc, #152]	; (8001604 <HAL_ADC_Init+0x2bc>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d115      	bne.n	800159a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68da      	ldr	r2, [r3, #12]
 8001574:	4b26      	ldr	r3, [pc, #152]	; (8001610 <HAL_ADC_Init+0x2c8>)
 8001576:	4013      	ands	r3, r2
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	6812      	ldr	r2, [r2, #0]
 800157c:	69b9      	ldr	r1, [r7, #24]
 800157e:	430b      	orrs	r3, r1
 8001580:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	691b      	ldr	r3, [r3, #16]
 8001588:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	430a      	orrs	r2, r1
 8001596:	611a      	str	r2, [r3, #16]
 8001598:	e009      	b.n	80015ae <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68da      	ldr	r2, [r3, #12]
 80015a0:	4b1c      	ldr	r3, [pc, #112]	; (8001614 <HAL_ADC_Init+0x2cc>)
 80015a2:	4013      	ands	r3, r2
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	6812      	ldr	r2, [r2, #0]
 80015a8:	69b9      	ldr	r1, [r7, #24]
 80015aa:	430b      	orrs	r3, r1
 80015ac:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fea2 	bl	80012fc <LL_ADC_REG_IsConversionOngoing>
 80015b8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff feaf 	bl	8001322 <LL_ADC_INJ_IsConversionOngoing>
 80015c4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f040 808e 	bne.w	80016ea <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f040 808a 	bne.w	80016ea <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a0a      	ldr	r2, [pc, #40]	; (8001604 <HAL_ADC_Init+0x2bc>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d11b      	bne.n	8001618 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	7e1b      	ldrb	r3, [r3, #24]
 80015e4:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015ec:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80015ee:	4313      	orrs	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
 80015f2:	e018      	b.n	8001626 <HAL_ADC_Init+0x2de>
 80015f4:	24000000 	.word	0x24000000
 80015f8:	053e2d63 	.word	0x053e2d63
 80015fc:	40022000 	.word	0x40022000
 8001600:	40022100 	.word	0x40022100
 8001604:	58026000 	.word	0x58026000
 8001608:	40022300 	.word	0x40022300
 800160c:	58026300 	.word	0x58026300
 8001610:	fff04007 	.word	0xfff04007
 8001614:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	7e1b      	ldrb	r3, [r3, #24]
 800161c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8001622:	4313      	orrs	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	68da      	ldr	r2, [r3, #12]
 800162c:	4b46      	ldr	r3, [pc, #280]	; (8001748 <HAL_ADC_Init+0x400>)
 800162e:	4013      	ands	r3, r2
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	6812      	ldr	r2, [r2, #0]
 8001634:	69b9      	ldr	r1, [r7, #24]
 8001636:	430b      	orrs	r3, r1
 8001638:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001640:	2b01      	cmp	r3, #1
 8001642:	d137      	bne.n	80016b4 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001648:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a3f      	ldr	r2, [pc, #252]	; (800174c <HAL_ADC_Init+0x404>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d116      	bne.n	8001682 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	691a      	ldr	r2, [r3, #16]
 800165a:	4b3d      	ldr	r3, [pc, #244]	; (8001750 <HAL_ADC_Init+0x408>)
 800165c:	4013      	ands	r3, r2
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001666:	4311      	orrs	r1, r2
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800166c:	4311      	orrs	r1, r2
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001672:	430a      	orrs	r2, r1
 8001674:	431a      	orrs	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f042 0201 	orr.w	r2, r2, #1
 800167e:	611a      	str	r2, [r3, #16]
 8001680:	e020      	b.n	80016c4 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	691a      	ldr	r2, [r3, #16]
 8001688:	4b32      	ldr	r3, [pc, #200]	; (8001754 <HAL_ADC_Init+0x40c>)
 800168a:	4013      	ands	r3, r2
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001690:	3a01      	subs	r2, #1
 8001692:	0411      	lsls	r1, r2, #16
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001698:	4311      	orrs	r1, r2
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800169e:	4311      	orrs	r1, r2
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80016a4:	430a      	orrs	r2, r1
 80016a6:	431a      	orrs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f042 0201 	orr.w	r2, r2, #1
 80016b0:	611a      	str	r2, [r3, #16]
 80016b2:	e007      	b.n	80016c4 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	691a      	ldr	r2, [r3, #16]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f022 0201 	bic.w	r2, r2, #1
 80016c2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	430a      	orrs	r2, r1
 80016d8:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a1b      	ldr	r2, [pc, #108]	; (800174c <HAL_ADC_Init+0x404>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d002      	beq.n	80016ea <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f001 f9c3 	bl	8002a70 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d10c      	bne.n	800170c <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f8:	f023 010f 	bic.w	r1, r3, #15
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	69db      	ldr	r3, [r3, #28]
 8001700:	1e5a      	subs	r2, r3, #1
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	430a      	orrs	r2, r1
 8001708:	631a      	str	r2, [r3, #48]	; 0x30
 800170a:	e007      	b.n	800171c <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 020f 	bic.w	r2, r2, #15
 800171a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001720:	f023 0303 	bic.w	r3, r3, #3
 8001724:	f043 0201 	orr.w	r2, r3, #1
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	661a      	str	r2, [r3, #96]	; 0x60
 800172c:	e007      	b.n	800173e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001732:	f043 0210 	orr.w	r2, r3, #16
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800173e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3724      	adds	r7, #36	; 0x24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd90      	pop	{r4, r7, pc}
 8001748:	ffffbffc 	.word	0xffffbffc
 800174c:	58026000 	.word	0x58026000
 8001750:	fc00f81f 	.word	0xfc00f81f
 8001754:	fc00f81e 	.word	0xfc00f81e

08001758 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a60      	ldr	r2, [pc, #384]	; (80018ec <HAL_ADC_Start_DMA+0x194>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d004      	beq.n	8001778 <HAL_ADC_Start_DMA+0x20>
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a5f      	ldr	r2, [pc, #380]	; (80018f0 <HAL_ADC_Start_DMA+0x198>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d101      	bne.n	800177c <HAL_ADC_Start_DMA+0x24>
 8001778:	4b5e      	ldr	r3, [pc, #376]	; (80018f4 <HAL_ADC_Start_DMA+0x19c>)
 800177a:	e000      	b.n	800177e <HAL_ADC_Start_DMA+0x26>
 800177c:	4b5e      	ldr	r3, [pc, #376]	; (80018f8 <HAL_ADC_Start_DMA+0x1a0>)
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff fd16 	bl	80011b0 <LL_ADC_GetMultimode>
 8001784:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff fdb6 	bl	80012fc <LL_ADC_REG_IsConversionOngoing>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	f040 80a2 	bne.w	80018dc <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d101      	bne.n	80017a6 <HAL_ADC_Start_DMA+0x4e>
 80017a2:	2302      	movs	r3, #2
 80017a4:	e09d      	b.n	80018e2 <HAL_ADC_Start_DMA+0x18a>
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2201      	movs	r2, #1
 80017aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d006      	beq.n	80017c2 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	2b05      	cmp	r3, #5
 80017b8:	d003      	beq.n	80017c2 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	2b09      	cmp	r3, #9
 80017be:	f040 8086 	bne.w	80018ce <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80017c2:	68f8      	ldr	r0, [r7, #12]
 80017c4:	f001 f836 	bl	8002834 <ADC_Enable>
 80017c8:	4603      	mov	r3, r0
 80017ca:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80017cc:	7dfb      	ldrb	r3, [r7, #23]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d178      	bne.n	80018c4 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017d6:	4b49      	ldr	r3, [pc, #292]	; (80018fc <HAL_ADC_Start_DMA+0x1a4>)
 80017d8:	4013      	ands	r3, r2
 80017da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a42      	ldr	r2, [pc, #264]	; (80018f0 <HAL_ADC_Start_DMA+0x198>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d002      	beq.n	80017f2 <HAL_ADC_Start_DMA+0x9a>
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	e000      	b.n	80017f4 <HAL_ADC_Start_DMA+0x9c>
 80017f2:	4b3e      	ldr	r3, [pc, #248]	; (80018ec <HAL_ADC_Start_DMA+0x194>)
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	6812      	ldr	r2, [r2, #0]
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d002      	beq.n	8001802 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d105      	bne.n	800180e <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001806:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001812:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d006      	beq.n	8001828 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800181e:	f023 0206 	bic.w	r2, r3, #6
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	665a      	str	r2, [r3, #100]	; 0x64
 8001826:	e002      	b.n	800182e <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2200      	movs	r2, #0
 800182c:	665a      	str	r2, [r3, #100]	; 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001832:	4a33      	ldr	r2, [pc, #204]	; (8001900 <HAL_ADC_Start_DMA+0x1a8>)
 8001834:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183a:	4a32      	ldr	r2, [pc, #200]	; (8001904 <HAL_ADC_Start_DMA+0x1ac>)
 800183c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001842:	4a31      	ldr	r2, [pc, #196]	; (8001908 <HAL_ADC_Start_DMA+0x1b0>)
 8001844:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	221c      	movs	r2, #28
 800184c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f042 0210 	orr.w	r2, r2, #16
 8001864:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a28      	ldr	r2, [pc, #160]	; (800190c <HAL_ADC_Start_DMA+0x1b4>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d10f      	bne.n	8001890 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	4619      	mov	r1, r3
 800187e:	4610      	mov	r0, r2
 8001880:	f7ff fbfe 	bl	8001080 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fbe9 	bl	8001060 <LL_ADC_EnableDMAReq>
 800188e:	e007      	b.n	80018a0 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001898:	4619      	mov	r1, r3
 800189a:	4610      	mov	r0, r2
 800189c:	f7ff fbcd 	bl	800103a <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	3340      	adds	r3, #64	; 0x40
 80018aa:	4619      	mov	r1, r3
 80018ac:	68ba      	ldr	r2, [r7, #8]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f001 ff6e 	bl	8003790 <HAL_DMA_Start_IT>
 80018b4:	4603      	mov	r3, r0
 80018b6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fd09 	bl	80012d4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80018c2:	e00d      	b.n	80018e0 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      if (tmp_hal_status == HAL_OK)
 80018cc:	e008      	b.n	80018e0 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80018da:	e001      	b.n	80018e0 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80018dc:	2302      	movs	r3, #2
 80018de:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80018e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40022000 	.word	0x40022000
 80018f0:	40022100 	.word	0x40022100
 80018f4:	40022300 	.word	0x40022300
 80018f8:	58026300 	.word	0x58026300
 80018fc:	fffff0fe 	.word	0xfffff0fe
 8001900:	08002949 	.word	0x08002949
 8001904:	08002a21 	.word	0x08002a21
 8001908:	08002a3d 	.word	0x08002a3d
 800190c:	58026000 	.word	0x58026000

08001910 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	; 0x28
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001918:	2300      	movs	r3, #0
 800191a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a87      	ldr	r2, [pc, #540]	; (8001b50 <HAL_ADC_IRQHandler+0x240>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d004      	beq.n	8001940 <HAL_ADC_IRQHandler+0x30>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a86      	ldr	r2, [pc, #536]	; (8001b54 <HAL_ADC_IRQHandler+0x244>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d101      	bne.n	8001944 <HAL_ADC_IRQHandler+0x34>
 8001940:	4b85      	ldr	r3, [pc, #532]	; (8001b58 <HAL_ADC_IRQHandler+0x248>)
 8001942:	e000      	b.n	8001946 <HAL_ADC_IRQHandler+0x36>
 8001944:	4b85      	ldr	r3, [pc, #532]	; (8001b5c <HAL_ADC_IRQHandler+0x24c>)
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff fc32 	bl	80011b0 <LL_ADC_GetMultimode>
 800194c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d017      	beq.n	8001988 <HAL_ADC_IRQHandler+0x78>
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d012      	beq.n	8001988 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001966:	f003 0310 	and.w	r3, r3, #16
 800196a:	2b00      	cmp	r3, #0
 800196c:	d105      	bne.n	800197a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001972:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f001 f9b4 	bl	8002ce8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2202      	movs	r2, #2
 8001986:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	2b00      	cmp	r3, #0
 8001990:	d004      	beq.n	800199c <HAL_ADC_IRQHandler+0x8c>
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	2b00      	cmp	r3, #0
 800199a:	d10a      	bne.n	80019b2 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 8083 	beq.w	8001aae <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	f003 0308 	and.w	r3, r3, #8
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d07d      	beq.n	8001aae <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019b6:	f003 0310 	and.w	r3, r3, #16
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d105      	bne.n	80019ca <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff faf4 	bl	8000fbc <LL_ADC_REG_IsTriggerSourceSWStart>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d062      	beq.n	8001aa0 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a5d      	ldr	r2, [pc, #372]	; (8001b54 <HAL_ADC_IRQHandler+0x244>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d002      	beq.n	80019ea <HAL_ADC_IRQHandler+0xda>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	e000      	b.n	80019ec <HAL_ADC_IRQHandler+0xdc>
 80019ea:	4b59      	ldr	r3, [pc, #356]	; (8001b50 <HAL_ADC_IRQHandler+0x240>)
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	6812      	ldr	r2, [r2, #0]
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d008      	beq.n	8001a06 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d005      	beq.n	8001a06 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	2b05      	cmp	r3, #5
 80019fe:	d002      	beq.n	8001a06 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	2b09      	cmp	r3, #9
 8001a04:	d104      	bne.n	8001a10 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	623b      	str	r3, [r7, #32]
 8001a0e:	e00c      	b.n	8001a2a <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a4f      	ldr	r2, [pc, #316]	; (8001b54 <HAL_ADC_IRQHandler+0x244>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d002      	beq.n	8001a20 <HAL_ADC_IRQHandler+0x110>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	e000      	b.n	8001a22 <HAL_ADC_IRQHandler+0x112>
 8001a20:	4b4b      	ldr	r3, [pc, #300]	; (8001b50 <HAL_ADC_IRQHandler+0x240>)
 8001a22:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001a2a:	6a3b      	ldr	r3, [r7, #32]
 8001a2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d135      	bne.n	8001aa0 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	2b08      	cmp	r3, #8
 8001a40:	d12e      	bne.n	8001aa0 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff fc58 	bl	80012fc <LL_ADC_REG_IsConversionOngoing>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d11a      	bne.n	8001a88 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	685a      	ldr	r2, [r3, #4]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 020c 	bic.w	r2, r2, #12
 8001a60:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d112      	bne.n	8001aa0 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a7e:	f043 0201 	orr.w	r2, r3, #1
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	661a      	str	r2, [r3, #96]	; 0x60
 8001a86:	e00b      	b.n	8001aa0 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a8c:	f043 0210 	orr.w	r2, r3, #16
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a98:	f043 0201 	orr.w	r2, r3, #1
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 f96f 	bl	8001d84 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	220c      	movs	r2, #12
 8001aac:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	f003 0320 	and.w	r3, r3, #32
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d004      	beq.n	8001ac2 <HAL_ADC_IRQHandler+0x1b2>
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	f003 0320 	and.w	r3, r3, #32
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10b      	bne.n	8001ada <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 80a0 	beq.w	8001c0e <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f000 809a 	beq.w	8001c0e <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ade:	f003 0310 	and.w	r3, r3, #16
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d105      	bne.n	8001af2 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aea:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff fadc 	bl	80010b4 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001afc:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff fa5a 	bl	8000fbc <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b08:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a11      	ldr	r2, [pc, #68]	; (8001b54 <HAL_ADC_IRQHandler+0x244>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d002      	beq.n	8001b1a <HAL_ADC_IRQHandler+0x20a>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	e000      	b.n	8001b1c <HAL_ADC_IRQHandler+0x20c>
 8001b1a:	4b0d      	ldr	r3, [pc, #52]	; (8001b50 <HAL_ADC_IRQHandler+0x240>)
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6812      	ldr	r2, [r2, #0]
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d008      	beq.n	8001b36 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d005      	beq.n	8001b36 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	2b06      	cmp	r3, #6
 8001b2e:	d002      	beq.n	8001b36 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	2b07      	cmp	r3, #7
 8001b34:	d104      	bne.n	8001b40 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	623b      	str	r3, [r7, #32]
 8001b3e:	e014      	b.n	8001b6a <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a03      	ldr	r2, [pc, #12]	; (8001b54 <HAL_ADC_IRQHandler+0x244>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d00a      	beq.n	8001b60 <HAL_ADC_IRQHandler+0x250>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	e008      	b.n	8001b62 <HAL_ADC_IRQHandler+0x252>
 8001b50:	40022000 	.word	0x40022000
 8001b54:	40022100 	.word	0x40022100
 8001b58:	40022300 	.word	0x40022300
 8001b5c:	58026300 	.word	0x58026300
 8001b60:	4b84      	ldr	r3, [pc, #528]	; (8001d74 <HAL_ADC_IRQHandler+0x464>)
 8001b62:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d047      	beq.n	8001c00 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001b70:	6a3b      	ldr	r3, [r7, #32]
 8001b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d007      	beq.n	8001b8a <HAL_ADC_IRQHandler+0x27a>
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d03f      	beq.n	8001c00 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001b80:	6a3b      	ldr	r3, [r7, #32]
 8001b82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d13a      	bne.n	8001c00 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b94:	2b40      	cmp	r3, #64	; 0x40
 8001b96:	d133      	bne.n	8001c00 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001b98:	6a3b      	ldr	r3, [r7, #32]
 8001b9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d12e      	bne.n	8001c00 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff fbbb 	bl	8001322 <LL_ADC_INJ_IsConversionOngoing>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d11a      	bne.n	8001be8 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001bc0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	661a      	str	r2, [r3, #96]	; 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d112      	bne.n	8001c00 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bde:	f043 0201 	orr.w	r2, r3, #1
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	661a      	str	r2, [r3, #96]	; 0x60
 8001be6:	e00b      	b.n	8001c00 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bec:	f043 0210 	orr.w	r2, r3, #16
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	661a      	str	r2, [r3, #96]	; 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001bf8:	f043 0201 	orr.w	r2, r3, #1
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f001 f849 	bl	8002c98 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2260      	movs	r2, #96	; 0x60
 8001c0c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d011      	beq.n	8001c3c <HAL_ADC_IRQHandler+0x32c>
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00c      	beq.n	8001c3c <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 f8bc 	bl	8001dac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2280      	movs	r2, #128	; 0x80
 8001c3a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d012      	beq.n	8001c6c <HAL_ADC_IRQHandler+0x35c>
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d00d      	beq.n	8001c6c <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c54:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f001 f82f 	bl	8002cc0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c6a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d012      	beq.n	8001c9c <HAL_ADC_IRQHandler+0x38c>
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d00d      	beq.n	8001c9c <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c84:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f001 f821 	bl	8002cd4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c9a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f003 0310 	and.w	r3, r3, #16
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d043      	beq.n	8001d2e <HAL_ADC_IRQHandler+0x41e>
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	f003 0310 	and.w	r3, r3, #16
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d03e      	beq.n	8001d2e <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d102      	bne.n	8001cbe <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24
 8001cbc:	e021      	b.n	8001d02 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d015      	beq.n	8001cf0 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a2a      	ldr	r2, [pc, #168]	; (8001d74 <HAL_ADC_IRQHandler+0x464>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d004      	beq.n	8001cd8 <HAL_ADC_IRQHandler+0x3c8>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a29      	ldr	r2, [pc, #164]	; (8001d78 <HAL_ADC_IRQHandler+0x468>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d101      	bne.n	8001cdc <HAL_ADC_IRQHandler+0x3cc>
 8001cd8:	4b28      	ldr	r3, [pc, #160]	; (8001d7c <HAL_ADC_IRQHandler+0x46c>)
 8001cda:	e000      	b.n	8001cde <HAL_ADC_IRQHandler+0x3ce>
 8001cdc:	4b28      	ldr	r3, [pc, #160]	; (8001d80 <HAL_ADC_IRQHandler+0x470>)
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff fa74 	bl	80011cc <LL_ADC_GetMultiDMATransfer>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00b      	beq.n	8001d02 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8001cea:	2301      	movs	r3, #1
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
 8001cee:	e008      	b.n	8001d02 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	f003 0303 	and.w	r3, r3, #3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d10e      	bne.n	8001d26 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d0c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d18:	f043 0202 	orr.w	r2, r3, #2
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f84d 	bl	8001dc0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2210      	movs	r2, #16
 8001d2c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d018      	beq.n	8001d6a <HAL_ADC_IRQHandler+0x45a>
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d013      	beq.n	8001d6a <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d46:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d52:	f043 0208 	orr.w	r2, r3, #8
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d62:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 ffa1 	bl	8002cac <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001d6a:	bf00      	nop
 8001d6c:	3728      	adds	r7, #40	; 0x28
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40022000 	.word	0x40022000
 8001d78:	40022100 	.word	0x40022100
 8001d7c:	40022300 	.word	0x40022300
 8001d80:	58026300 	.word	0x58026300

08001d84 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001dd4:	b590      	push	{r4, r7, lr}
 8001dd6:	b0b9      	sub	sp, #228	; 0xe4
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dde:	2300      	movs	r3, #0
 8001de0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001de4:	2300      	movs	r3, #0
 8001de6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001dee:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	4aab      	ldr	r2, [pc, #684]	; (80020a4 <HAL_ADC_ConfigChannel+0x2d0>)
 8001df6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d102      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x34>
 8001e02:	2302      	movs	r3, #2
 8001e04:	f000 bcfe 	b.w	8002804 <HAL_ADC_ConfigChannel+0xa30>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff fa71 	bl	80012fc <LL_ADC_REG_IsConversionOngoing>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f040 84e2 	bne.w	80027e6 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	db38      	blt.n	8001e9c <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a9e      	ldr	r2, [pc, #632]	; (80020a8 <HAL_ADC_ConfigChannel+0x2d4>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d033      	beq.n	8001e9c <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d108      	bne.n	8001e52 <HAL_ADC_ConfigChannel+0x7e>
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	0e9b      	lsrs	r3, r3, #26
 8001e46:	f003 031f 	and.w	r3, r3, #31
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	e01d      	b.n	8001e8e <HAL_ADC_ConfigChannel+0xba>
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e5e:	fa93 f3a3 	rbit	r3, r3
 8001e62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8001e76:	2320      	movs	r3, #32
 8001e78:	e004      	b.n	8001e84 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8001e7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001e7e:	fab3 f383 	clz	r3, r3
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	f003 031f 	and.w	r3, r3, #31
 8001e88:	2201      	movs	r2, #1
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	6812      	ldr	r2, [r2, #0]
 8001e92:	69d1      	ldr	r1, [r2, #28]
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6812      	ldr	r2, [r2, #0]
 8001e98:	430b      	orrs	r3, r1
 8001e9a:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6818      	ldr	r0, [r3, #0]
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	6859      	ldr	r1, [r3, #4]
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	f7ff f89a 	bl	8000fe2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff fa22 	bl	80012fc <LL_ADC_REG_IsConversionOngoing>
 8001eb8:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff fa2e 	bl	8001322 <LL_ADC_INJ_IsConversionOngoing>
 8001ec6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001eca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f040 8270 	bne.w	80023b4 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ed4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f040 826b 	bne.w	80023b4 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6818      	ldr	r0, [r3, #0]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	6819      	ldr	r1, [r3, #0]
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	461a      	mov	r2, r3
 8001eec:	f7ff f8f5 	bl	80010da <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a6c      	ldr	r2, [pc, #432]	; (80020a8 <HAL_ADC_ConfigChannel+0x2d4>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d10d      	bne.n	8001f16 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	695a      	ldr	r2, [r3, #20]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	08db      	lsrs	r3, r3, #3
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001f14:	e032      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001f16:	4b65      	ldr	r3, [pc, #404]	; (80020ac <HAL_ADC_ConfigChannel+0x2d8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001f1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f22:	d10b      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x168>
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	695a      	ldr	r2, [r3, #20]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	089b      	lsrs	r3, r3, #2
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	e01d      	b.n	8001f78 <HAL_ADC_ConfigChannel+0x1a4>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	f003 0310 	and.w	r3, r3, #16
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10b      	bne.n	8001f62 <HAL_ADC_ConfigChannel+0x18e>
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	695a      	ldr	r2, [r3, #20]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	089b      	lsrs	r3, r3, #2
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	e00a      	b.n	8001f78 <HAL_ADC_ConfigChannel+0x1a4>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	695a      	ldr	r2, [r3, #20]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	089b      	lsrs	r3, r3, #2
 8001f6e:	f003 0304 	and.w	r3, r3, #4
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	2b04      	cmp	r3, #4
 8001f82:	d048      	beq.n	8002016 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6818      	ldr	r0, [r3, #0]
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	6919      	ldr	r1, [r3, #16]
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001f94:	f7fe ff20 	bl	8000dd8 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a42      	ldr	r2, [pc, #264]	; (80020a8 <HAL_ADC_ConfigChannel+0x2d4>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d119      	bne.n	8001fd6 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6818      	ldr	r0, [r3, #0]
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	6919      	ldr	r1, [r3, #16]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	f7fe ffb8 	bl	8000f24 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6818      	ldr	r0, [r3, #0]
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	6919      	ldr	r1, [r3, #16]
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d102      	bne.n	8001fcc <HAL_ADC_ConfigChannel+0x1f8>
 8001fc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fca:	e000      	b.n	8001fce <HAL_ADC_ConfigChannel+0x1fa>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	461a      	mov	r2, r3
 8001fd0:	f7fe ff86 	bl	8000ee0 <LL_ADC_SetOffsetSaturation>
 8001fd4:	e1ee      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6818      	ldr	r0, [r3, #0]
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	6919      	ldr	r1, [r3, #16]
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d102      	bne.n	8001fee <HAL_ADC_ConfigChannel+0x21a>
 8001fe8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001fec:	e000      	b.n	8001ff0 <HAL_ADC_ConfigChannel+0x21c>
 8001fee:	2300      	movs	r3, #0
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	f7fe ff53 	bl	8000e9c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6818      	ldr	r0, [r3, #0]
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	6919      	ldr	r1, [r3, #16]
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	7e1b      	ldrb	r3, [r3, #24]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d102      	bne.n	800200c <HAL_ADC_ConfigChannel+0x238>
 8002006:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800200a:	e000      	b.n	800200e <HAL_ADC_ConfigChannel+0x23a>
 800200c:	2300      	movs	r3, #0
 800200e:	461a      	mov	r2, r3
 8002010:	f7fe ff2a 	bl	8000e68 <LL_ADC_SetDataRightShift>
 8002014:	e1ce      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a23      	ldr	r2, [pc, #140]	; (80020a8 <HAL_ADC_ConfigChannel+0x2d4>)
 800201c:	4293      	cmp	r3, r2
 800201e:	f040 8181 	bne.w	8002324 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2100      	movs	r1, #0
 8002028:	4618      	mov	r0, r3
 800202a:	f7fe ff07 	bl	8000e3c <LL_ADC_GetOffsetChannel>
 800202e:	4603      	mov	r3, r0
 8002030:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002034:	2b00      	cmp	r3, #0
 8002036:	d10a      	bne.n	800204e <HAL_ADC_ConfigChannel+0x27a>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2100      	movs	r1, #0
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe fefc 	bl	8000e3c <LL_ADC_GetOffsetChannel>
 8002044:	4603      	mov	r3, r0
 8002046:	0e9b      	lsrs	r3, r3, #26
 8002048:	f003 021f 	and.w	r2, r3, #31
 800204c:	e01e      	b.n	800208c <HAL_ADC_ConfigChannel+0x2b8>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2100      	movs	r1, #0
 8002054:	4618      	mov	r0, r3
 8002056:	f7fe fef1 	bl	8000e3c <LL_ADC_GetOffsetChannel>
 800205a:	4603      	mov	r3, r0
 800205c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002060:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002064:	fa93 f3a3 	rbit	r3, r3
 8002068:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 800206c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002070:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8002074:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 800207c:	2320      	movs	r3, #32
 800207e:	e004      	b.n	800208a <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8002080:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002084:	fab3 f383 	clz	r3, r3
 8002088:	b2db      	uxtb	r3, r3
 800208a:	461a      	mov	r2, r3
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002094:	2b00      	cmp	r3, #0
 8002096:	d10b      	bne.n	80020b0 <HAL_ADC_ConfigChannel+0x2dc>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	0e9b      	lsrs	r3, r3, #26
 800209e:	f003 031f 	and.w	r3, r3, #31
 80020a2:	e01e      	b.n	80020e2 <HAL_ADC_ConfigChannel+0x30e>
 80020a4:	47ff0000 	.word	0x47ff0000
 80020a8:	58026000 	.word	0x58026000
 80020ac:	5c001000 	.word	0x5c001000
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020bc:	fa93 f3a3 	rbit	r3, r3
 80020c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80020c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80020cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d101      	bne.n	80020d8 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 80020d4:	2320      	movs	r3, #32
 80020d6:	e004      	b.n	80020e2 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 80020d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80020dc:	fab3 f383 	clz	r3, r3
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d106      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2200      	movs	r2, #0
 80020ec:	2100      	movs	r1, #0
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7fe ff3a 	bl	8000f68 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2101      	movs	r1, #1
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7fe fe9e 	bl	8000e3c <LL_ADC_GetOffsetChannel>
 8002100:	4603      	mov	r3, r0
 8002102:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10a      	bne.n	8002120 <HAL_ADC_ConfigChannel+0x34c>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2101      	movs	r1, #1
 8002110:	4618      	mov	r0, r3
 8002112:	f7fe fe93 	bl	8000e3c <LL_ADC_GetOffsetChannel>
 8002116:	4603      	mov	r3, r0
 8002118:	0e9b      	lsrs	r3, r3, #26
 800211a:	f003 021f 	and.w	r2, r3, #31
 800211e:	e01e      	b.n	800215e <HAL_ADC_ConfigChannel+0x38a>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2101      	movs	r1, #1
 8002126:	4618      	mov	r0, r3
 8002128:	f7fe fe88 	bl	8000e3c <LL_ADC_GetOffsetChannel>
 800212c:	4603      	mov	r3, r0
 800212e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002132:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002136:	fa93 f3a3 	rbit	r3, r3
 800213a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800213e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002142:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002146:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 800214e:	2320      	movs	r3, #32
 8002150:	e004      	b.n	800215c <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8002152:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002156:	fab3 f383 	clz	r3, r3
 800215a:	b2db      	uxtb	r3, r3
 800215c:	461a      	mov	r2, r3
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002166:	2b00      	cmp	r3, #0
 8002168:	d105      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x3a2>
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	0e9b      	lsrs	r3, r3, #26
 8002170:	f003 031f 	and.w	r3, r3, #31
 8002174:	e018      	b.n	80021a8 <HAL_ADC_ConfigChannel+0x3d4>
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002182:	fa93 f3a3 	rbit	r3, r3
 8002186:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800218a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800218e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002192:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 800219a:	2320      	movs	r3, #32
 800219c:	e004      	b.n	80021a8 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 800219e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021a2:	fab3 f383 	clz	r3, r3
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d106      	bne.n	80021ba <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2200      	movs	r2, #0
 80021b2:	2101      	movs	r1, #1
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7fe fed7 	bl	8000f68 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2102      	movs	r1, #2
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7fe fe3b 	bl	8000e3c <LL_ADC_GetOffsetChannel>
 80021c6:	4603      	mov	r3, r0
 80021c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d10a      	bne.n	80021e6 <HAL_ADC_ConfigChannel+0x412>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2102      	movs	r1, #2
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7fe fe30 	bl	8000e3c <LL_ADC_GetOffsetChannel>
 80021dc:	4603      	mov	r3, r0
 80021de:	0e9b      	lsrs	r3, r3, #26
 80021e0:	f003 021f 	and.w	r2, r3, #31
 80021e4:	e01e      	b.n	8002224 <HAL_ADC_ConfigChannel+0x450>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2102      	movs	r1, #2
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7fe fe25 	bl	8000e3c <LL_ADC_GetOffsetChannel>
 80021f2:	4603      	mov	r3, r0
 80021f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021fc:	fa93 f3a3 	rbit	r3, r3
 8002200:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002204:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002208:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800220c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8002214:	2320      	movs	r3, #32
 8002216:	e004      	b.n	8002222 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8002218:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800221c:	fab3 f383 	clz	r3, r3
 8002220:	b2db      	uxtb	r3, r3
 8002222:	461a      	mov	r2, r3
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800222c:	2b00      	cmp	r3, #0
 800222e:	d105      	bne.n	800223c <HAL_ADC_ConfigChannel+0x468>
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	0e9b      	lsrs	r3, r3, #26
 8002236:	f003 031f 	and.w	r3, r3, #31
 800223a:	e014      	b.n	8002266 <HAL_ADC_ConfigChannel+0x492>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002244:	fa93 f3a3 	rbit	r3, r3
 8002248:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800224a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800224c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002250:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002258:	2320      	movs	r3, #32
 800225a:	e004      	b.n	8002266 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800225c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002260:	fab3 f383 	clz	r3, r3
 8002264:	b2db      	uxtb	r3, r3
 8002266:	429a      	cmp	r2, r3
 8002268:	d106      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2200      	movs	r2, #0
 8002270:	2102      	movs	r1, #2
 8002272:	4618      	mov	r0, r3
 8002274:	f7fe fe78 	bl	8000f68 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2103      	movs	r1, #3
 800227e:	4618      	mov	r0, r3
 8002280:	f7fe fddc 	bl	8000e3c <LL_ADC_GetOffsetChannel>
 8002284:	4603      	mov	r3, r0
 8002286:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10a      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x4d0>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2103      	movs	r1, #3
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe fdd1 	bl	8000e3c <LL_ADC_GetOffsetChannel>
 800229a:	4603      	mov	r3, r0
 800229c:	0e9b      	lsrs	r3, r3, #26
 800229e:	f003 021f 	and.w	r2, r3, #31
 80022a2:	e017      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x500>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2103      	movs	r1, #3
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7fe fdc6 	bl	8000e3c <LL_ADC_GetOffsetChannel>
 80022b0:	4603      	mov	r3, r0
 80022b2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022b6:	fa93 f3a3 	rbit	r3, r3
 80022ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80022bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022be:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80022c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 80022c6:	2320      	movs	r3, #32
 80022c8:	e003      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 80022ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022cc:	fab3 f383 	clz	r3, r3
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	461a      	mov	r2, r3
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d105      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x518>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	0e9b      	lsrs	r3, r3, #26
 80022e6:	f003 031f 	and.w	r3, r3, #31
 80022ea:	e011      	b.n	8002310 <HAL_ADC_ConfigChannel+0x53c>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022f4:	fa93 f3a3 	rbit	r3, r3
 80022f8:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80022fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022fc:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80022fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8002304:	2320      	movs	r3, #32
 8002306:	e003      	b.n	8002310 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8002308:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800230a:	fab3 f383 	clz	r3, r3
 800230e:	b2db      	uxtb	r3, r3
 8002310:	429a      	cmp	r2, r3
 8002312:	d14f      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2200      	movs	r2, #0
 800231a:	2103      	movs	r1, #3
 800231c:	4618      	mov	r0, r3
 800231e:	f7fe fe23 	bl	8000f68 <LL_ADC_SetOffsetState>
 8002322:	e047      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800232a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	069b      	lsls	r3, r3, #26
 8002334:	429a      	cmp	r2, r3
 8002336:	d107      	bne.n	8002348 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002346:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800234e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	069b      	lsls	r3, r3, #26
 8002358:	429a      	cmp	r2, r3
 800235a:	d107      	bne.n	800236c <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800236a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002372:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	069b      	lsls	r3, r3, #26
 800237c:	429a      	cmp	r2, r3
 800237e:	d107      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800238e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002396:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	069b      	lsls	r3, r3, #26
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d107      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023b2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7fe ff77 	bl	80012ac <LL_ADC_IsEnabled>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f040 8219 	bne.w	80027f8 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6818      	ldr	r0, [r3, #0]
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	6819      	ldr	r1, [r3, #0]
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	461a      	mov	r2, r3
 80023d4:	f7fe feac 	bl	8001130 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	4aa1      	ldr	r2, [pc, #644]	; (8002664 <HAL_ADC_ConfigChannel+0x890>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	f040 812e 	bne.w	8002640 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10b      	bne.n	800240c <HAL_ADC_ConfigChannel+0x638>
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	0e9b      	lsrs	r3, r3, #26
 80023fa:	3301      	adds	r3, #1
 80023fc:	f003 031f 	and.w	r3, r3, #31
 8002400:	2b09      	cmp	r3, #9
 8002402:	bf94      	ite	ls
 8002404:	2301      	movls	r3, #1
 8002406:	2300      	movhi	r3, #0
 8002408:	b2db      	uxtb	r3, r3
 800240a:	e019      	b.n	8002440 <HAL_ADC_ConfigChannel+0x66c>
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002412:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002414:	fa93 f3a3 	rbit	r3, r3
 8002418:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800241a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800241c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800241e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002420:	2b00      	cmp	r3, #0
 8002422:	d101      	bne.n	8002428 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002424:	2320      	movs	r3, #32
 8002426:	e003      	b.n	8002430 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002428:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800242a:	fab3 f383 	clz	r3, r3
 800242e:	b2db      	uxtb	r3, r3
 8002430:	3301      	adds	r3, #1
 8002432:	f003 031f 	and.w	r3, r3, #31
 8002436:	2b09      	cmp	r3, #9
 8002438:	bf94      	ite	ls
 800243a:	2301      	movls	r3, #1
 800243c:	2300      	movhi	r3, #0
 800243e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002440:	2b00      	cmp	r3, #0
 8002442:	d079      	beq.n	8002538 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800244c:	2b00      	cmp	r3, #0
 800244e:	d107      	bne.n	8002460 <HAL_ADC_ConfigChannel+0x68c>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	0e9b      	lsrs	r3, r3, #26
 8002456:	3301      	adds	r3, #1
 8002458:	069b      	lsls	r3, r3, #26
 800245a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800245e:	e015      	b.n	800248c <HAL_ADC_ConfigChannel+0x6b8>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002468:	fa93 f3a3 	rbit	r3, r3
 800246c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800246e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002470:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002472:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8002478:	2320      	movs	r3, #32
 800247a:	e003      	b.n	8002484 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 800247c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800247e:	fab3 f383 	clz	r3, r3
 8002482:	b2db      	uxtb	r3, r3
 8002484:	3301      	adds	r3, #1
 8002486:	069b      	lsls	r3, r3, #26
 8002488:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002494:	2b00      	cmp	r3, #0
 8002496:	d109      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x6d8>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	0e9b      	lsrs	r3, r3, #26
 800249e:	3301      	adds	r3, #1
 80024a0:	f003 031f 	and.w	r3, r3, #31
 80024a4:	2101      	movs	r1, #1
 80024a6:	fa01 f303 	lsl.w	r3, r1, r3
 80024aa:	e017      	b.n	80024dc <HAL_ADC_ConfigChannel+0x708>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024b4:	fa93 f3a3 	rbit	r3, r3
 80024b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80024ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024bc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80024be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 80024c4:	2320      	movs	r3, #32
 80024c6:	e003      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 80024c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024ca:	fab3 f383 	clz	r3, r3
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	3301      	adds	r3, #1
 80024d2:	f003 031f 	and.w	r3, r3, #31
 80024d6:	2101      	movs	r1, #1
 80024d8:	fa01 f303 	lsl.w	r3, r1, r3
 80024dc:	ea42 0103 	orr.w	r1, r2, r3
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d10a      	bne.n	8002502 <HAL_ADC_ConfigChannel+0x72e>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	0e9b      	lsrs	r3, r3, #26
 80024f2:	3301      	adds	r3, #1
 80024f4:	f003 021f 	and.w	r2, r3, #31
 80024f8:	4613      	mov	r3, r2
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	4413      	add	r3, r2
 80024fe:	051b      	lsls	r3, r3, #20
 8002500:	e018      	b.n	8002534 <HAL_ADC_ConfigChannel+0x760>
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800250a:	fa93 f3a3 	rbit	r3, r3
 800250e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002512:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 800251a:	2320      	movs	r3, #32
 800251c:	e003      	b.n	8002526 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 800251e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002520:	fab3 f383 	clz	r3, r3
 8002524:	b2db      	uxtb	r3, r3
 8002526:	3301      	adds	r3, #1
 8002528:	f003 021f 	and.w	r2, r3, #31
 800252c:	4613      	mov	r3, r2
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	4413      	add	r3, r2
 8002532:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002534:	430b      	orrs	r3, r1
 8002536:	e07e      	b.n	8002636 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002540:	2b00      	cmp	r3, #0
 8002542:	d107      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x780>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	0e9b      	lsrs	r3, r3, #26
 800254a:	3301      	adds	r3, #1
 800254c:	069b      	lsls	r3, r3, #26
 800254e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002552:	e015      	b.n	8002580 <HAL_ADC_ConfigChannel+0x7ac>
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255c:	fa93 f3a3 	rbit	r3, r3
 8002560:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 800256c:	2320      	movs	r3, #32
 800256e:	e003      	b.n	8002578 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8002570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002572:	fab3 f383 	clz	r3, r3
 8002576:	b2db      	uxtb	r3, r3
 8002578:	3301      	adds	r3, #1
 800257a:	069b      	lsls	r3, r3, #26
 800257c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002588:	2b00      	cmp	r3, #0
 800258a:	d109      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x7cc>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	0e9b      	lsrs	r3, r3, #26
 8002592:	3301      	adds	r3, #1
 8002594:	f003 031f 	and.w	r3, r3, #31
 8002598:	2101      	movs	r1, #1
 800259a:	fa01 f303 	lsl.w	r3, r1, r3
 800259e:	e017      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x7fc>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	fa93 f3a3 	rbit	r3, r3
 80025ac:	61bb      	str	r3, [r7, #24]
  return result;
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80025b2:	6a3b      	ldr	r3, [r7, #32]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 80025b8:	2320      	movs	r3, #32
 80025ba:	e003      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 80025bc:	6a3b      	ldr	r3, [r7, #32]
 80025be:	fab3 f383 	clz	r3, r3
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	3301      	adds	r3, #1
 80025c6:	f003 031f 	and.w	r3, r3, #31
 80025ca:	2101      	movs	r1, #1
 80025cc:	fa01 f303 	lsl.w	r3, r1, r3
 80025d0:	ea42 0103 	orr.w	r1, r2, r3
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10d      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x828>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	0e9b      	lsrs	r3, r3, #26
 80025e6:	3301      	adds	r3, #1
 80025e8:	f003 021f 	and.w	r2, r3, #31
 80025ec:	4613      	mov	r3, r2
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	4413      	add	r3, r2
 80025f2:	3b1e      	subs	r3, #30
 80025f4:	051b      	lsls	r3, r3, #20
 80025f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025fa:	e01b      	b.n	8002634 <HAL_ADC_ConfigChannel+0x860>
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	fa93 f3a3 	rbit	r3, r3
 8002608:	60fb      	str	r3, [r7, #12]
  return result;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d101      	bne.n	8002618 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8002614:	2320      	movs	r3, #32
 8002616:	e003      	b.n	8002620 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	fab3 f383 	clz	r3, r3
 800261e:	b2db      	uxtb	r3, r3
 8002620:	3301      	adds	r3, #1
 8002622:	f003 021f 	and.w	r2, r3, #31
 8002626:	4613      	mov	r3, r2
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	4413      	add	r3, r2
 800262c:	3b1e      	subs	r3, #30
 800262e:	051b      	lsls	r3, r3, #20
 8002630:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002634:	430b      	orrs	r3, r1
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	6892      	ldr	r2, [r2, #8]
 800263a:	4619      	mov	r1, r3
 800263c:	f7fe fd4d 	bl	80010da <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	f280 80d7 	bge.w	80027f8 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a06      	ldr	r2, [pc, #24]	; (8002668 <HAL_ADC_ConfigChannel+0x894>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d004      	beq.n	800265e <HAL_ADC_ConfigChannel+0x88a>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a04      	ldr	r2, [pc, #16]	; (800266c <HAL_ADC_ConfigChannel+0x898>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d10a      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x8a0>
 800265e:	4b04      	ldr	r3, [pc, #16]	; (8002670 <HAL_ADC_ConfigChannel+0x89c>)
 8002660:	e009      	b.n	8002676 <HAL_ADC_ConfigChannel+0x8a2>
 8002662:	bf00      	nop
 8002664:	47ff0000 	.word	0x47ff0000
 8002668:	40022000 	.word	0x40022000
 800266c:	40022100 	.word	0x40022100
 8002670:	40022300 	.word	0x40022300
 8002674:	4b65      	ldr	r3, [pc, #404]	; (800280c <HAL_ADC_ConfigChannel+0xa38>)
 8002676:	4618      	mov	r0, r3
 8002678:	f7fe fba0 	bl	8000dbc <LL_ADC_GetCommonPathInternalCh>
 800267c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a62      	ldr	r2, [pc, #392]	; (8002810 <HAL_ADC_ConfigChannel+0xa3c>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d004      	beq.n	8002694 <HAL_ADC_ConfigChannel+0x8c0>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a61      	ldr	r2, [pc, #388]	; (8002814 <HAL_ADC_ConfigChannel+0xa40>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d10e      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x8de>
 8002694:	485e      	ldr	r0, [pc, #376]	; (8002810 <HAL_ADC_ConfigChannel+0xa3c>)
 8002696:	f7fe fe09 	bl	80012ac <LL_ADC_IsEnabled>
 800269a:	4604      	mov	r4, r0
 800269c:	485d      	ldr	r0, [pc, #372]	; (8002814 <HAL_ADC_ConfigChannel+0xa40>)
 800269e:	f7fe fe05 	bl	80012ac <LL_ADC_IsEnabled>
 80026a2:	4603      	mov	r3, r0
 80026a4:	4323      	orrs	r3, r4
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	bf0c      	ite	eq
 80026aa:	2301      	moveq	r3, #1
 80026ac:	2300      	movne	r3, #0
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	e008      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x8f0>
 80026b2:	4859      	ldr	r0, [pc, #356]	; (8002818 <HAL_ADC_ConfigChannel+0xa44>)
 80026b4:	f7fe fdfa 	bl	80012ac <LL_ADC_IsEnabled>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	bf0c      	ite	eq
 80026be:	2301      	moveq	r3, #1
 80026c0:	2300      	movne	r3, #0
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 8084 	beq.w	80027d2 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a53      	ldr	r2, [pc, #332]	; (800281c <HAL_ADC_ConfigChannel+0xa48>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d132      	bne.n	800273a <HAL_ADC_ConfigChannel+0x966>
 80026d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80026d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d12c      	bne.n	800273a <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a4c      	ldr	r2, [pc, #304]	; (8002818 <HAL_ADC_ConfigChannel+0xa44>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	f040 8086 	bne.w	80027f8 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a47      	ldr	r2, [pc, #284]	; (8002810 <HAL_ADC_ConfigChannel+0xa3c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d004      	beq.n	8002700 <HAL_ADC_ConfigChannel+0x92c>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a46      	ldr	r2, [pc, #280]	; (8002814 <HAL_ADC_ConfigChannel+0xa40>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d101      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x930>
 8002700:	4a47      	ldr	r2, [pc, #284]	; (8002820 <HAL_ADC_ConfigChannel+0xa4c>)
 8002702:	e000      	b.n	8002706 <HAL_ADC_ConfigChannel+0x932>
 8002704:	4a41      	ldr	r2, [pc, #260]	; (800280c <HAL_ADC_ConfigChannel+0xa38>)
 8002706:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800270a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800270e:	4619      	mov	r1, r3
 8002710:	4610      	mov	r0, r2
 8002712:	f7fe fb40 	bl	8000d96 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002716:	4b43      	ldr	r3, [pc, #268]	; (8002824 <HAL_ADC_ConfigChannel+0xa50>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	099b      	lsrs	r3, r3, #6
 800271c:	4a42      	ldr	r2, [pc, #264]	; (8002828 <HAL_ADC_ConfigChannel+0xa54>)
 800271e:	fba2 2303 	umull	r2, r3, r2, r3
 8002722:	099b      	lsrs	r3, r3, #6
 8002724:	3301      	adds	r3, #1
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800272a:	e002      	b.n	8002732 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	3b01      	subs	r3, #1
 8002730:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1f9      	bne.n	800272c <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002738:	e05e      	b.n	80027f8 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a3b      	ldr	r2, [pc, #236]	; (800282c <HAL_ADC_ConfigChannel+0xa58>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d120      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x9b2>
 8002744:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002748:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d11a      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a30      	ldr	r2, [pc, #192]	; (8002818 <HAL_ADC_ConfigChannel+0xa44>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d14e      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a2c      	ldr	r2, [pc, #176]	; (8002810 <HAL_ADC_ConfigChannel+0xa3c>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d004      	beq.n	800276e <HAL_ADC_ConfigChannel+0x99a>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a2a      	ldr	r2, [pc, #168]	; (8002814 <HAL_ADC_ConfigChannel+0xa40>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d101      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x99e>
 800276e:	4a2c      	ldr	r2, [pc, #176]	; (8002820 <HAL_ADC_ConfigChannel+0xa4c>)
 8002770:	e000      	b.n	8002774 <HAL_ADC_ConfigChannel+0x9a0>
 8002772:	4a26      	ldr	r2, [pc, #152]	; (800280c <HAL_ADC_ConfigChannel+0xa38>)
 8002774:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002778:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800277c:	4619      	mov	r1, r3
 800277e:	4610      	mov	r0, r2
 8002780:	f7fe fb09 	bl	8000d96 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002784:	e038      	b.n	80027f8 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a29      	ldr	r2, [pc, #164]	; (8002830 <HAL_ADC_ConfigChannel+0xa5c>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d133      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0xa24>
 8002790:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002794:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d12d      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a1d      	ldr	r2, [pc, #116]	; (8002818 <HAL_ADC_ConfigChannel+0xa44>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d128      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a19      	ldr	r2, [pc, #100]	; (8002810 <HAL_ADC_ConfigChannel+0xa3c>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d004      	beq.n	80027ba <HAL_ADC_ConfigChannel+0x9e6>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a17      	ldr	r2, [pc, #92]	; (8002814 <HAL_ADC_ConfigChannel+0xa40>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d101      	bne.n	80027be <HAL_ADC_ConfigChannel+0x9ea>
 80027ba:	4a19      	ldr	r2, [pc, #100]	; (8002820 <HAL_ADC_ConfigChannel+0xa4c>)
 80027bc:	e000      	b.n	80027c0 <HAL_ADC_ConfigChannel+0x9ec>
 80027be:	4a13      	ldr	r2, [pc, #76]	; (800280c <HAL_ADC_ConfigChannel+0xa38>)
 80027c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80027c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027c8:	4619      	mov	r1, r3
 80027ca:	4610      	mov	r0, r2
 80027cc:	f7fe fae3 	bl	8000d96 <LL_ADC_SetCommonPathInternalCh>
 80027d0:	e012      	b.n	80027f8 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027d6:	f043 0220 	orr.w	r2, r3, #32
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80027e4:	e008      	b.n	80027f8 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ea:	f043 0220 	orr.w	r2, r3, #32
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8002800:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8002804:	4618      	mov	r0, r3
 8002806:	37e4      	adds	r7, #228	; 0xe4
 8002808:	46bd      	mov	sp, r7
 800280a:	bd90      	pop	{r4, r7, pc}
 800280c:	58026300 	.word	0x58026300
 8002810:	40022000 	.word	0x40022000
 8002814:	40022100 	.word	0x40022100
 8002818:	58026000 	.word	0x58026000
 800281c:	c7520000 	.word	0xc7520000
 8002820:	40022300 	.word	0x40022300
 8002824:	24000000 	.word	0x24000000
 8002828:	053e2d63 	.word	0x053e2d63
 800282c:	c3210000 	.word	0xc3210000
 8002830:	cb840000 	.word	0xcb840000

08002834 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f7fe fd33 	bl	80012ac <LL_ADC_IsEnabled>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d16e      	bne.n	800292a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689a      	ldr	r2, [r3, #8]
 8002852:	4b38      	ldr	r3, [pc, #224]	; (8002934 <ADC_Enable+0x100>)
 8002854:	4013      	ands	r3, r2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00d      	beq.n	8002876 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800285e:	f043 0210 	orr.w	r2, r3, #16
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800286a:	f043 0201 	orr.w	r2, r3, #1
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e05a      	b.n	800292c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f7fe fd02 	bl	8001284 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002880:	f7fe fa46 	bl	8000d10 <HAL_GetTick>
 8002884:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a2b      	ldr	r2, [pc, #172]	; (8002938 <ADC_Enable+0x104>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d004      	beq.n	800289a <ADC_Enable+0x66>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a29      	ldr	r2, [pc, #164]	; (800293c <ADC_Enable+0x108>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d101      	bne.n	800289e <ADC_Enable+0x6a>
 800289a:	4b29      	ldr	r3, [pc, #164]	; (8002940 <ADC_Enable+0x10c>)
 800289c:	e000      	b.n	80028a0 <ADC_Enable+0x6c>
 800289e:	4b29      	ldr	r3, [pc, #164]	; (8002944 <ADC_Enable+0x110>)
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7fe fc85 	bl	80011b0 <LL_ADC_GetMultimode>
 80028a6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a23      	ldr	r2, [pc, #140]	; (800293c <ADC_Enable+0x108>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d002      	beq.n	80028b8 <ADC_Enable+0x84>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	e000      	b.n	80028ba <ADC_Enable+0x86>
 80028b8:	4b1f      	ldr	r3, [pc, #124]	; (8002938 <ADC_Enable+0x104>)
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6812      	ldr	r2, [r2, #0]
 80028be:	4293      	cmp	r3, r2
 80028c0:	d02c      	beq.n	800291c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d130      	bne.n	800292a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028c8:	e028      	b.n	800291c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7fe fcec 	bl	80012ac <LL_ADC_IsEnabled>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d104      	bne.n	80028e4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7fe fcd0 	bl	8001284 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80028e4:	f7fe fa14 	bl	8000d10 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d914      	bls.n	800291c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d00d      	beq.n	800291c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002904:	f043 0210 	orr.w	r2, r3, #16
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002910:	f043 0201 	orr.w	r2, r3, #1
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e007      	b.n	800292c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b01      	cmp	r3, #1
 8002928:	d1cf      	bne.n	80028ca <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	8000003f 	.word	0x8000003f
 8002938:	40022000 	.word	0x40022000
 800293c:	40022100 	.word	0x40022100
 8002940:	40022300 	.word	0x40022300
 8002944:	58026300 	.word	0x58026300

08002948 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002954:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800295a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800295e:	2b00      	cmp	r3, #0
 8002960:	d14b      	bne.n	80029fa <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002966:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0308 	and.w	r3, r3, #8
 8002978:	2b00      	cmp	r3, #0
 800297a:	d021      	beq.n	80029c0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f7fe fb1b 	bl	8000fbc <LL_ADC_REG_IsTriggerSourceSWStart>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d032      	beq.n	80029f2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d12b      	bne.n	80029f2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800299e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	661a      	str	r2, [r3, #96]	; 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d11f      	bne.n	80029f2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029b6:	f043 0201 	orr.w	r2, r3, #1
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	661a      	str	r2, [r3, #96]	; 0x60
 80029be:	e018      	b.n	80029f2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d111      	bne.n	80029f2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	661a      	str	r2, [r3, #96]	; 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d105      	bne.n	80029f2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ea:	f043 0201 	orr.w	r2, r3, #1
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f7ff f9c6 	bl	8001d84 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80029f8:	e00e      	b.n	8002a18 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029fe:	f003 0310 	and.w	r3, r3, #16
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f7ff f9da 	bl	8001dc0 <HAL_ADC_ErrorCallback>
}
 8002a0c:	e004      	b.n	8002a18 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	4798      	blx	r3
}
 8002a18:	bf00      	nop
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f7ff f9b2 	bl	8001d98 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a34:	bf00      	nop
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a48:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a5a:	f043 0204 	orr.w	r2, r3, #4
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	665a      	str	r2, [r3, #100]	; 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f7ff f9ac 	bl	8001dc0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a68:	bf00      	nop
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a6c      	ldr	r2, [pc, #432]	; (8002c30 <ADC_ConfigureBoostMode+0x1c0>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d004      	beq.n	8002a8c <ADC_ConfigureBoostMode+0x1c>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a6b      	ldr	r2, [pc, #428]	; (8002c34 <ADC_ConfigureBoostMode+0x1c4>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d109      	bne.n	8002aa0 <ADC_ConfigureBoostMode+0x30>
 8002a8c:	4b6a      	ldr	r3, [pc, #424]	; (8002c38 <ADC_ConfigureBoostMode+0x1c8>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	bf14      	ite	ne
 8002a98:	2301      	movne	r3, #1
 8002a9a:	2300      	moveq	r3, #0
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	e008      	b.n	8002ab2 <ADC_ConfigureBoostMode+0x42>
 8002aa0:	4b66      	ldr	r3, [pc, #408]	; (8002c3c <ADC_ConfigureBoostMode+0x1cc>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	bf14      	ite	ne
 8002aac:	2301      	movne	r3, #1
 8002aae:	2300      	moveq	r3, #0
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d01c      	beq.n	8002af0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002ab6:	f003 fd07 	bl	80064c8 <HAL_RCC_GetHCLKFreq>
 8002aba:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ac4:	d010      	beq.n	8002ae8 <ADC_ConfigureBoostMode+0x78>
 8002ac6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002aca:	d873      	bhi.n	8002bb4 <ADC_ConfigureBoostMode+0x144>
 8002acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ad0:	d002      	beq.n	8002ad8 <ADC_ConfigureBoostMode+0x68>
 8002ad2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ad6:	d16d      	bne.n	8002bb4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	0c1b      	lsrs	r3, r3, #16
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae4:	60fb      	str	r3, [r7, #12]
        break;
 8002ae6:	e068      	b.n	8002bba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	089b      	lsrs	r3, r3, #2
 8002aec:	60fb      	str	r3, [r7, #12]
        break;
 8002aee:	e064      	b.n	8002bba <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002af0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002af4:	f04f 0100 	mov.w	r1, #0
 8002af8:	f004 fecc 	bl	8007894 <HAL_RCCEx_GetPeriphCLKFreq>
 8002afc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002b06:	d051      	beq.n	8002bac <ADC_ConfigureBoostMode+0x13c>
 8002b08:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002b0c:	d854      	bhi.n	8002bb8 <ADC_ConfigureBoostMode+0x148>
 8002b0e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002b12:	d047      	beq.n	8002ba4 <ADC_ConfigureBoostMode+0x134>
 8002b14:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002b18:	d84e      	bhi.n	8002bb8 <ADC_ConfigureBoostMode+0x148>
 8002b1a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002b1e:	d03d      	beq.n	8002b9c <ADC_ConfigureBoostMode+0x12c>
 8002b20:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002b24:	d848      	bhi.n	8002bb8 <ADC_ConfigureBoostMode+0x148>
 8002b26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b2a:	d033      	beq.n	8002b94 <ADC_ConfigureBoostMode+0x124>
 8002b2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b30:	d842      	bhi.n	8002bb8 <ADC_ConfigureBoostMode+0x148>
 8002b32:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002b36:	d029      	beq.n	8002b8c <ADC_ConfigureBoostMode+0x11c>
 8002b38:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002b3c:	d83c      	bhi.n	8002bb8 <ADC_ConfigureBoostMode+0x148>
 8002b3e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002b42:	d01a      	beq.n	8002b7a <ADC_ConfigureBoostMode+0x10a>
 8002b44:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002b48:	d836      	bhi.n	8002bb8 <ADC_ConfigureBoostMode+0x148>
 8002b4a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002b4e:	d014      	beq.n	8002b7a <ADC_ConfigureBoostMode+0x10a>
 8002b50:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002b54:	d830      	bhi.n	8002bb8 <ADC_ConfigureBoostMode+0x148>
 8002b56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b5a:	d00e      	beq.n	8002b7a <ADC_ConfigureBoostMode+0x10a>
 8002b5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b60:	d82a      	bhi.n	8002bb8 <ADC_ConfigureBoostMode+0x148>
 8002b62:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002b66:	d008      	beq.n	8002b7a <ADC_ConfigureBoostMode+0x10a>
 8002b68:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002b6c:	d824      	bhi.n	8002bb8 <ADC_ConfigureBoostMode+0x148>
 8002b6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b72:	d002      	beq.n	8002b7a <ADC_ConfigureBoostMode+0x10a>
 8002b74:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b78:	d11e      	bne.n	8002bb8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	0c9b      	lsrs	r3, r3, #18
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b88:	60fb      	str	r3, [r7, #12]
        break;
 8002b8a:	e016      	b.n	8002bba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	091b      	lsrs	r3, r3, #4
 8002b90:	60fb      	str	r3, [r7, #12]
        break;
 8002b92:	e012      	b.n	8002bba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	095b      	lsrs	r3, r3, #5
 8002b98:	60fb      	str	r3, [r7, #12]
        break;
 8002b9a:	e00e      	b.n	8002bba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	099b      	lsrs	r3, r3, #6
 8002ba0:	60fb      	str	r3, [r7, #12]
        break;
 8002ba2:	e00a      	b.n	8002bba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	09db      	lsrs	r3, r3, #7
 8002ba8:	60fb      	str	r3, [r7, #12]
        break;
 8002baa:	e006      	b.n	8002bba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	0a1b      	lsrs	r3, r3, #8
 8002bb0:	60fb      	str	r3, [r7, #12]
        break;
 8002bb2:	e002      	b.n	8002bba <ADC_ConfigureBoostMode+0x14a>
        break;
 8002bb4:	bf00      	nop
 8002bb6:	e000      	b.n	8002bba <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002bb8:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	085b      	lsrs	r3, r3, #1
 8002bbe:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	4a1f      	ldr	r2, [pc, #124]	; (8002c40 <ADC_ConfigureBoostMode+0x1d0>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d808      	bhi.n	8002bda <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002bd6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002bd8:	e025      	b.n	8002c26 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	4a19      	ldr	r2, [pc, #100]	; (8002c44 <ADC_ConfigureBoostMode+0x1d4>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d80a      	bhi.n	8002bf8 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bf4:	609a      	str	r2, [r3, #8]
}
 8002bf6:	e016      	b.n	8002c26 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	4a13      	ldr	r2, [pc, #76]	; (8002c48 <ADC_ConfigureBoostMode+0x1d8>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d80a      	bhi.n	8002c16 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c12:	609a      	str	r2, [r3, #8]
}
 8002c14:	e007      	b.n	8002c26 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002c24:	609a      	str	r2, [r3, #8]
}
 8002c26:	bf00      	nop
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	40022000 	.word	0x40022000
 8002c34:	40022100 	.word	0x40022100
 8002c38:	40022300 	.word	0x40022300
 8002c3c:	58026300 	.word	0x58026300
 8002c40:	005f5e10 	.word	0x005f5e10
 8002c44:	00bebc20 	.word	0x00bebc20
 8002c48:	017d7840 	.word	0x017d7840

08002c4c <LL_ADC_IsEnabled>:
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d101      	bne.n	8002c64 <LL_ADC_IsEnabled+0x18>
 8002c60:	2301      	movs	r3, #1
 8002c62:	e000      	b.n	8002c66 <LL_ADC_IsEnabled+0x1a>
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <LL_ADC_REG_IsConversionOngoing>:
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 0304 	and.w	r3, r3, #4
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	d101      	bne.n	8002c8a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c86:	2301      	movs	r3, #1
 8002c88:	e000      	b.n	8002c8c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002cfc:	b590      	push	{r4, r7, lr}
 8002cfe:	b0a3      	sub	sp, #140	; 0x8c
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d06:	2300      	movs	r3, #0
 8002d08:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d101      	bne.n	8002d1a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d16:	2302      	movs	r3, #2
 8002d18:	e0c1      	b.n	8002e9e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002d22:	2300      	movs	r3, #0
 8002d24:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002d26:	2300      	movs	r3, #0
 8002d28:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a5e      	ldr	r2, [pc, #376]	; (8002ea8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d102      	bne.n	8002d3a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002d34:	4b5d      	ldr	r3, [pc, #372]	; (8002eac <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	e001      	b.n	8002d3e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d10b      	bne.n	8002d5c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d48:	f043 0220 	orr.w	r2, r3, #32
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e0a0      	b.n	8002e9e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff ff87 	bl	8002c72 <LL_ADC_REG_IsConversionOngoing>
 8002d64:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff ff80 	bl	8002c72 <LL_ADC_REG_IsConversionOngoing>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f040 8081 	bne.w	8002e7c <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002d7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d17c      	bne.n	8002e7c <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a48      	ldr	r2, [pc, #288]	; (8002ea8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d004      	beq.n	8002d96 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a46      	ldr	r2, [pc, #280]	; (8002eac <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d101      	bne.n	8002d9a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8002d96:	4b46      	ldr	r3, [pc, #280]	; (8002eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002d98:	e000      	b.n	8002d9c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8002d9a:	4b46      	ldr	r3, [pc, #280]	; (8002eb4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002d9c:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d039      	beq.n	8002e1a <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002da6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	431a      	orrs	r2, r3
 8002db4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002db6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a3a      	ldr	r2, [pc, #232]	; (8002ea8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d004      	beq.n	8002dcc <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a39      	ldr	r2, [pc, #228]	; (8002eac <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d10e      	bne.n	8002dea <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8002dcc:	4836      	ldr	r0, [pc, #216]	; (8002ea8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002dce:	f7ff ff3d 	bl	8002c4c <LL_ADC_IsEnabled>
 8002dd2:	4604      	mov	r4, r0
 8002dd4:	4835      	ldr	r0, [pc, #212]	; (8002eac <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002dd6:	f7ff ff39 	bl	8002c4c <LL_ADC_IsEnabled>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	4323      	orrs	r3, r4
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	bf0c      	ite	eq
 8002de2:	2301      	moveq	r3, #1
 8002de4:	2300      	movne	r3, #0
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	e008      	b.n	8002dfc <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8002dea:	4833      	ldr	r0, [pc, #204]	; (8002eb8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8002dec:	f7ff ff2e 	bl	8002c4c <LL_ADC_IsEnabled>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	bf0c      	ite	eq
 8002df6:	2301      	moveq	r3, #1
 8002df8:	2300      	movne	r3, #0
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d047      	beq.n	8002e90 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	4b2d      	ldr	r3, [pc, #180]	; (8002ebc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002e06:	4013      	ands	r3, r2
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	6811      	ldr	r1, [r2, #0]
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	6892      	ldr	r2, [r2, #8]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	431a      	orrs	r2, r3
 8002e14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e16:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e18:	e03a      	b.n	8002e90 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002e1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e24:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a1f      	ldr	r2, [pc, #124]	; (8002ea8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d004      	beq.n	8002e3a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a1d      	ldr	r2, [pc, #116]	; (8002eac <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d10e      	bne.n	8002e58 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8002e3a:	481b      	ldr	r0, [pc, #108]	; (8002ea8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002e3c:	f7ff ff06 	bl	8002c4c <LL_ADC_IsEnabled>
 8002e40:	4604      	mov	r4, r0
 8002e42:	481a      	ldr	r0, [pc, #104]	; (8002eac <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002e44:	f7ff ff02 	bl	8002c4c <LL_ADC_IsEnabled>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	4323      	orrs	r3, r4
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	bf0c      	ite	eq
 8002e50:	2301      	moveq	r3, #1
 8002e52:	2300      	movne	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	e008      	b.n	8002e6a <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8002e58:	4817      	ldr	r0, [pc, #92]	; (8002eb8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8002e5a:	f7ff fef7 	bl	8002c4c <LL_ADC_IsEnabled>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	bf0c      	ite	eq
 8002e64:	2301      	moveq	r3, #1
 8002e66:	2300      	movne	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d010      	beq.n	8002e90 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002e6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e70:	689a      	ldr	r2, [r3, #8]
 8002e72:	4b12      	ldr	r3, [pc, #72]	; (8002ebc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002e74:	4013      	ands	r3, r2
 8002e76:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002e78:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e7a:	e009      	b.n	8002e90 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e80:	f043 0220 	orr.w	r2, r3, #32
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8002e8e:	e000      	b.n	8002e92 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e90:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8002e9a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	378c      	adds	r7, #140	; 0x8c
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd90      	pop	{r4, r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40022000 	.word	0x40022000
 8002eac:	40022100 	.word	0x40022100
 8002eb0:	40022300 	.word	0x40022300
 8002eb4:	58026300 	.word	0x58026300
 8002eb8:	58026000 	.word	0x58026000
 8002ebc:	fffff0e0 	.word	0xfffff0e0

08002ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ed0:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <__NVIC_SetPriorityGrouping+0x40>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002edc:	4013      	ands	r3, r2
 8002ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ee8:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <__NVIC_SetPriorityGrouping+0x44>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eee:	4a04      	ldr	r2, [pc, #16]	; (8002f00 <__NVIC_SetPriorityGrouping+0x40>)
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	60d3      	str	r3, [r2, #12]
}
 8002ef4:	bf00      	nop
 8002ef6:	3714      	adds	r7, #20
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	e000ed00 	.word	0xe000ed00
 8002f04:	05fa0000 	.word	0x05fa0000

08002f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f0c:	4b04      	ldr	r3, [pc, #16]	; (8002f20 <__NVIC_GetPriorityGrouping+0x18>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	0a1b      	lsrs	r3, r3, #8
 8002f12:	f003 0307 	and.w	r3, r3, #7
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	e000ed00 	.word	0xe000ed00

08002f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	db0b      	blt.n	8002f4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f36:	88fb      	ldrh	r3, [r7, #6]
 8002f38:	f003 021f 	and.w	r2, r3, #31
 8002f3c:	4907      	ldr	r1, [pc, #28]	; (8002f5c <__NVIC_EnableIRQ+0x38>)
 8002f3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f42:	095b      	lsrs	r3, r3, #5
 8002f44:	2001      	movs	r0, #1
 8002f46:	fa00 f202 	lsl.w	r2, r0, r2
 8002f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	e000e100 	.word	0xe000e100

08002f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	6039      	str	r1, [r7, #0]
 8002f6a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	db0a      	blt.n	8002f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	490c      	ldr	r1, [pc, #48]	; (8002fac <__NVIC_SetPriority+0x4c>)
 8002f7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f7e:	0112      	lsls	r2, r2, #4
 8002f80:	b2d2      	uxtb	r2, r2
 8002f82:	440b      	add	r3, r1
 8002f84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f88:	e00a      	b.n	8002fa0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	4908      	ldr	r1, [pc, #32]	; (8002fb0 <__NVIC_SetPriority+0x50>)
 8002f90:	88fb      	ldrh	r3, [r7, #6]
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	3b04      	subs	r3, #4
 8002f98:	0112      	lsls	r2, r2, #4
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	761a      	strb	r2, [r3, #24]
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	e000e100 	.word	0xe000e100
 8002fb0:	e000ed00 	.word	0xe000ed00

08002fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b089      	sub	sp, #36	; 0x24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	f1c3 0307 	rsb	r3, r3, #7
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	bf28      	it	cs
 8002fd2:	2304      	movcs	r3, #4
 8002fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	3304      	adds	r3, #4
 8002fda:	2b06      	cmp	r3, #6
 8002fdc:	d902      	bls.n	8002fe4 <NVIC_EncodePriority+0x30>
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	3b03      	subs	r3, #3
 8002fe2:	e000      	b.n	8002fe6 <NVIC_EncodePriority+0x32>
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	43da      	mvns	r2, r3
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	401a      	ands	r2, r3
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	fa01 f303 	lsl.w	r3, r1, r3
 8003006:	43d9      	mvns	r1, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800300c:	4313      	orrs	r3, r2
         );
}
 800300e:	4618      	mov	r0, r3
 8003010:	3724      	adds	r7, #36	; 0x24
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
	...

0800301c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3b01      	subs	r3, #1
 8003028:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800302c:	d301      	bcc.n	8003032 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800302e:	2301      	movs	r3, #1
 8003030:	e00f      	b.n	8003052 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003032:	4a0a      	ldr	r2, [pc, #40]	; (800305c <SysTick_Config+0x40>)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	3b01      	subs	r3, #1
 8003038:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800303a:	210f      	movs	r1, #15
 800303c:	f04f 30ff 	mov.w	r0, #4294967295
 8003040:	f7ff ff8e 	bl	8002f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003044:	4b05      	ldr	r3, [pc, #20]	; (800305c <SysTick_Config+0x40>)
 8003046:	2200      	movs	r2, #0
 8003048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800304a:	4b04      	ldr	r3, [pc, #16]	; (800305c <SysTick_Config+0x40>)
 800304c:	2207      	movs	r2, #7
 800304e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	e000e010 	.word	0xe000e010

08003060 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f7ff ff29 	bl	8002ec0 <__NVIC_SetPriorityGrouping>
}
 800306e:	bf00      	nop
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b086      	sub	sp, #24
 800307a:	af00      	add	r7, sp, #0
 800307c:	4603      	mov	r3, r0
 800307e:	60b9      	str	r1, [r7, #8]
 8003080:	607a      	str	r2, [r7, #4]
 8003082:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003084:	f7ff ff40 	bl	8002f08 <__NVIC_GetPriorityGrouping>
 8003088:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	68b9      	ldr	r1, [r7, #8]
 800308e:	6978      	ldr	r0, [r7, #20]
 8003090:	f7ff ff90 	bl	8002fb4 <NVIC_EncodePriority>
 8003094:	4602      	mov	r2, r0
 8003096:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800309a:	4611      	mov	r1, r2
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff ff5f 	bl	8002f60 <__NVIC_SetPriority>
}
 80030a2:	bf00      	nop
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b082      	sub	sp, #8
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	4603      	mov	r3, r0
 80030b2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff ff33 	bl	8002f24 <__NVIC_EnableIRQ>
}
 80030be:	bf00      	nop
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b082      	sub	sp, #8
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7ff ffa4 	bl	800301c <SysTick_Config>
 80030d4:	4603      	mov	r3, r0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
	...

080030e0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80030e8:	f7fd fe12 	bl	8000d10 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e312      	b.n	800371e <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a66      	ldr	r2, [pc, #408]	; (8003298 <HAL_DMA_Init+0x1b8>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d04a      	beq.n	8003198 <HAL_DMA_Init+0xb8>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a65      	ldr	r2, [pc, #404]	; (800329c <HAL_DMA_Init+0x1bc>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d045      	beq.n	8003198 <HAL_DMA_Init+0xb8>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a63      	ldr	r2, [pc, #396]	; (80032a0 <HAL_DMA_Init+0x1c0>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d040      	beq.n	8003198 <HAL_DMA_Init+0xb8>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a62      	ldr	r2, [pc, #392]	; (80032a4 <HAL_DMA_Init+0x1c4>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d03b      	beq.n	8003198 <HAL_DMA_Init+0xb8>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a60      	ldr	r2, [pc, #384]	; (80032a8 <HAL_DMA_Init+0x1c8>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d036      	beq.n	8003198 <HAL_DMA_Init+0xb8>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a5f      	ldr	r2, [pc, #380]	; (80032ac <HAL_DMA_Init+0x1cc>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d031      	beq.n	8003198 <HAL_DMA_Init+0xb8>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a5d      	ldr	r2, [pc, #372]	; (80032b0 <HAL_DMA_Init+0x1d0>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d02c      	beq.n	8003198 <HAL_DMA_Init+0xb8>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a5c      	ldr	r2, [pc, #368]	; (80032b4 <HAL_DMA_Init+0x1d4>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d027      	beq.n	8003198 <HAL_DMA_Init+0xb8>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a5a      	ldr	r2, [pc, #360]	; (80032b8 <HAL_DMA_Init+0x1d8>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d022      	beq.n	8003198 <HAL_DMA_Init+0xb8>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a59      	ldr	r2, [pc, #356]	; (80032bc <HAL_DMA_Init+0x1dc>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d01d      	beq.n	8003198 <HAL_DMA_Init+0xb8>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a57      	ldr	r2, [pc, #348]	; (80032c0 <HAL_DMA_Init+0x1e0>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d018      	beq.n	8003198 <HAL_DMA_Init+0xb8>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a56      	ldr	r2, [pc, #344]	; (80032c4 <HAL_DMA_Init+0x1e4>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d013      	beq.n	8003198 <HAL_DMA_Init+0xb8>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a54      	ldr	r2, [pc, #336]	; (80032c8 <HAL_DMA_Init+0x1e8>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d00e      	beq.n	8003198 <HAL_DMA_Init+0xb8>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a53      	ldr	r2, [pc, #332]	; (80032cc <HAL_DMA_Init+0x1ec>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d009      	beq.n	8003198 <HAL_DMA_Init+0xb8>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a51      	ldr	r2, [pc, #324]	; (80032d0 <HAL_DMA_Init+0x1f0>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d004      	beq.n	8003198 <HAL_DMA_Init+0xb8>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a50      	ldr	r2, [pc, #320]	; (80032d4 <HAL_DMA_Init+0x1f4>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d101      	bne.n	800319c <HAL_DMA_Init+0xbc>
 8003198:	2301      	movs	r3, #1
 800319a:	e000      	b.n	800319e <HAL_DMA_Init+0xbe>
 800319c:	2300      	movs	r3, #0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f000 813c 	beq.w	800341c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2202      	movs	r2, #2
 80031a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a37      	ldr	r2, [pc, #220]	; (8003298 <HAL_DMA_Init+0x1b8>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d04a      	beq.n	8003254 <HAL_DMA_Init+0x174>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a36      	ldr	r2, [pc, #216]	; (800329c <HAL_DMA_Init+0x1bc>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d045      	beq.n	8003254 <HAL_DMA_Init+0x174>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a34      	ldr	r2, [pc, #208]	; (80032a0 <HAL_DMA_Init+0x1c0>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d040      	beq.n	8003254 <HAL_DMA_Init+0x174>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a33      	ldr	r2, [pc, #204]	; (80032a4 <HAL_DMA_Init+0x1c4>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d03b      	beq.n	8003254 <HAL_DMA_Init+0x174>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a31      	ldr	r2, [pc, #196]	; (80032a8 <HAL_DMA_Init+0x1c8>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d036      	beq.n	8003254 <HAL_DMA_Init+0x174>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a30      	ldr	r2, [pc, #192]	; (80032ac <HAL_DMA_Init+0x1cc>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d031      	beq.n	8003254 <HAL_DMA_Init+0x174>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a2e      	ldr	r2, [pc, #184]	; (80032b0 <HAL_DMA_Init+0x1d0>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d02c      	beq.n	8003254 <HAL_DMA_Init+0x174>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a2d      	ldr	r2, [pc, #180]	; (80032b4 <HAL_DMA_Init+0x1d4>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d027      	beq.n	8003254 <HAL_DMA_Init+0x174>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a2b      	ldr	r2, [pc, #172]	; (80032b8 <HAL_DMA_Init+0x1d8>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d022      	beq.n	8003254 <HAL_DMA_Init+0x174>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a2a      	ldr	r2, [pc, #168]	; (80032bc <HAL_DMA_Init+0x1dc>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d01d      	beq.n	8003254 <HAL_DMA_Init+0x174>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a28      	ldr	r2, [pc, #160]	; (80032c0 <HAL_DMA_Init+0x1e0>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d018      	beq.n	8003254 <HAL_DMA_Init+0x174>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a27      	ldr	r2, [pc, #156]	; (80032c4 <HAL_DMA_Init+0x1e4>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d013      	beq.n	8003254 <HAL_DMA_Init+0x174>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a25      	ldr	r2, [pc, #148]	; (80032c8 <HAL_DMA_Init+0x1e8>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d00e      	beq.n	8003254 <HAL_DMA_Init+0x174>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a24      	ldr	r2, [pc, #144]	; (80032cc <HAL_DMA_Init+0x1ec>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d009      	beq.n	8003254 <HAL_DMA_Init+0x174>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a22      	ldr	r2, [pc, #136]	; (80032d0 <HAL_DMA_Init+0x1f0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d004      	beq.n	8003254 <HAL_DMA_Init+0x174>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a21      	ldr	r2, [pc, #132]	; (80032d4 <HAL_DMA_Init+0x1f4>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d108      	bne.n	8003266 <HAL_DMA_Init+0x186>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 0201 	bic.w	r2, r2, #1
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	e007      	b.n	8003276 <HAL_DMA_Init+0x196>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 0201 	bic.w	r2, r2, #1
 8003274:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003276:	e02f      	b.n	80032d8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003278:	f7fd fd4a 	bl	8000d10 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b05      	cmp	r3, #5
 8003284:	d928      	bls.n	80032d8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2220      	movs	r2, #32
 800328a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2203      	movs	r2, #3
 8003290:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e242      	b.n	800371e <HAL_DMA_Init+0x63e>
 8003298:	40020010 	.word	0x40020010
 800329c:	40020028 	.word	0x40020028
 80032a0:	40020040 	.word	0x40020040
 80032a4:	40020058 	.word	0x40020058
 80032a8:	40020070 	.word	0x40020070
 80032ac:	40020088 	.word	0x40020088
 80032b0:	400200a0 	.word	0x400200a0
 80032b4:	400200b8 	.word	0x400200b8
 80032b8:	40020410 	.word	0x40020410
 80032bc:	40020428 	.word	0x40020428
 80032c0:	40020440 	.word	0x40020440
 80032c4:	40020458 	.word	0x40020458
 80032c8:	40020470 	.word	0x40020470
 80032cc:	40020488 	.word	0x40020488
 80032d0:	400204a0 	.word	0x400204a0
 80032d4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1c8      	bne.n	8003278 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	4b83      	ldr	r3, [pc, #524]	; (8003500 <HAL_DMA_Init+0x420>)
 80032f2:	4013      	ands	r3, r2
 80032f4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80032fe:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800330a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003316:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	4313      	orrs	r3, r2
 8003322:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	2b04      	cmp	r3, #4
 800332a:	d107      	bne.n	800333c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003334:	4313      	orrs	r3, r2
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	4313      	orrs	r3, r2
 800333a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	2b28      	cmp	r3, #40	; 0x28
 8003342:	d903      	bls.n	800334c <HAL_DMA_Init+0x26c>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	2b2e      	cmp	r3, #46	; 0x2e
 800334a:	d91f      	bls.n	800338c <HAL_DMA_Init+0x2ac>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	2b3e      	cmp	r3, #62	; 0x3e
 8003352:	d903      	bls.n	800335c <HAL_DMA_Init+0x27c>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	2b42      	cmp	r3, #66	; 0x42
 800335a:	d917      	bls.n	800338c <HAL_DMA_Init+0x2ac>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	2b46      	cmp	r3, #70	; 0x46
 8003362:	d903      	bls.n	800336c <HAL_DMA_Init+0x28c>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	2b48      	cmp	r3, #72	; 0x48
 800336a:	d90f      	bls.n	800338c <HAL_DMA_Init+0x2ac>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	2b4e      	cmp	r3, #78	; 0x4e
 8003372:	d903      	bls.n	800337c <HAL_DMA_Init+0x29c>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b52      	cmp	r3, #82	; 0x52
 800337a:	d907      	bls.n	800338c <HAL_DMA_Init+0x2ac>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	2b73      	cmp	r3, #115	; 0x73
 8003382:	d905      	bls.n	8003390 <HAL_DMA_Init+0x2b0>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	2b77      	cmp	r3, #119	; 0x77
 800338a:	d801      	bhi.n	8003390 <HAL_DMA_Init+0x2b0>
 800338c:	2301      	movs	r3, #1
 800338e:	e000      	b.n	8003392 <HAL_DMA_Init+0x2b2>
 8003390:	2300      	movs	r3, #0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800339c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f023 0307 	bic.w	r3, r3, #7
 80033b4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	4313      	orrs	r3, r2
 80033be:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d117      	bne.n	80033f8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00e      	beq.n	80033f8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f001 fdca 	bl	8004f74 <DMA_CheckFifoParam>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d008      	beq.n	80033f8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2240      	movs	r2, #64	; 0x40
 80033ea:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e192      	b.n	800371e <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f001 fd05 	bl	8004e10 <DMA_CalcBaseAndBitshift>
 8003406:	4603      	mov	r3, r0
 8003408:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800340e:	f003 031f 	and.w	r3, r3, #31
 8003412:	223f      	movs	r2, #63	; 0x3f
 8003414:	409a      	lsls	r2, r3
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	609a      	str	r2, [r3, #8]
 800341a:	e0c8      	b.n	80035ae <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a38      	ldr	r2, [pc, #224]	; (8003504 <HAL_DMA_Init+0x424>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d022      	beq.n	800346c <HAL_DMA_Init+0x38c>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a37      	ldr	r2, [pc, #220]	; (8003508 <HAL_DMA_Init+0x428>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d01d      	beq.n	800346c <HAL_DMA_Init+0x38c>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a35      	ldr	r2, [pc, #212]	; (800350c <HAL_DMA_Init+0x42c>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d018      	beq.n	800346c <HAL_DMA_Init+0x38c>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a34      	ldr	r2, [pc, #208]	; (8003510 <HAL_DMA_Init+0x430>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d013      	beq.n	800346c <HAL_DMA_Init+0x38c>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a32      	ldr	r2, [pc, #200]	; (8003514 <HAL_DMA_Init+0x434>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d00e      	beq.n	800346c <HAL_DMA_Init+0x38c>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a31      	ldr	r2, [pc, #196]	; (8003518 <HAL_DMA_Init+0x438>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d009      	beq.n	800346c <HAL_DMA_Init+0x38c>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a2f      	ldr	r2, [pc, #188]	; (800351c <HAL_DMA_Init+0x43c>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d004      	beq.n	800346c <HAL_DMA_Init+0x38c>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a2e      	ldr	r2, [pc, #184]	; (8003520 <HAL_DMA_Init+0x440>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d101      	bne.n	8003470 <HAL_DMA_Init+0x390>
 800346c:	2301      	movs	r3, #1
 800346e:	e000      	b.n	8003472 <HAL_DMA_Init+0x392>
 8003470:	2300      	movs	r3, #0
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 8092 	beq.w	800359c <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a21      	ldr	r2, [pc, #132]	; (8003504 <HAL_DMA_Init+0x424>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d021      	beq.n	80034c6 <HAL_DMA_Init+0x3e6>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a20      	ldr	r2, [pc, #128]	; (8003508 <HAL_DMA_Init+0x428>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d01c      	beq.n	80034c6 <HAL_DMA_Init+0x3e6>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a1e      	ldr	r2, [pc, #120]	; (800350c <HAL_DMA_Init+0x42c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d017      	beq.n	80034c6 <HAL_DMA_Init+0x3e6>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a1d      	ldr	r2, [pc, #116]	; (8003510 <HAL_DMA_Init+0x430>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d012      	beq.n	80034c6 <HAL_DMA_Init+0x3e6>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a1b      	ldr	r2, [pc, #108]	; (8003514 <HAL_DMA_Init+0x434>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d00d      	beq.n	80034c6 <HAL_DMA_Init+0x3e6>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a1a      	ldr	r2, [pc, #104]	; (8003518 <HAL_DMA_Init+0x438>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d008      	beq.n	80034c6 <HAL_DMA_Init+0x3e6>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a18      	ldr	r2, [pc, #96]	; (800351c <HAL_DMA_Init+0x43c>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d003      	beq.n	80034c6 <HAL_DMA_Init+0x3e6>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a17      	ldr	r2, [pc, #92]	; (8003520 <HAL_DMA_Init+0x440>)
 80034c4:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2202      	movs	r2, #2
 80034ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	4b10      	ldr	r3, [pc, #64]	; (8003524 <HAL_DMA_Init+0x444>)
 80034e2:	4013      	ands	r3, r2
 80034e4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	2b40      	cmp	r3, #64	; 0x40
 80034ec:	d01c      	beq.n	8003528 <HAL_DMA_Init+0x448>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	2b80      	cmp	r3, #128	; 0x80
 80034f4:	d102      	bne.n	80034fc <HAL_DMA_Init+0x41c>
 80034f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80034fa:	e016      	b.n	800352a <HAL_DMA_Init+0x44a>
 80034fc:	2300      	movs	r3, #0
 80034fe:	e014      	b.n	800352a <HAL_DMA_Init+0x44a>
 8003500:	fe10803f 	.word	0xfe10803f
 8003504:	58025408 	.word	0x58025408
 8003508:	5802541c 	.word	0x5802541c
 800350c:	58025430 	.word	0x58025430
 8003510:	58025444 	.word	0x58025444
 8003514:	58025458 	.word	0x58025458
 8003518:	5802546c 	.word	0x5802546c
 800351c:	58025480 	.word	0x58025480
 8003520:	58025494 	.word	0x58025494
 8003524:	fffe000f 	.word	0xfffe000f
 8003528:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	68d2      	ldr	r2, [r2, #12]
 800352e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003530:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003538:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003540:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003548:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003550:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003558:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	4313      	orrs	r3, r2
 800355e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	461a      	mov	r2, r3
 800356e:	4b6e      	ldr	r3, [pc, #440]	; (8003728 <HAL_DMA_Init+0x648>)
 8003570:	4413      	add	r3, r2
 8003572:	4a6e      	ldr	r2, [pc, #440]	; (800372c <HAL_DMA_Init+0x64c>)
 8003574:	fba2 2303 	umull	r2, r3, r2, r3
 8003578:	091b      	lsrs	r3, r3, #4
 800357a:	009a      	lsls	r2, r3, #2
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f001 fc45 	bl	8004e10 <DMA_CalcBaseAndBitshift>
 8003586:	4603      	mov	r3, r0
 8003588:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800358e:	f003 031f 	and.w	r3, r3, #31
 8003592:	2201      	movs	r2, #1
 8003594:	409a      	lsls	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	605a      	str	r2, [r3, #4]
 800359a:	e008      	b.n	80035ae <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2240      	movs	r2, #64	; 0x40
 80035a0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2203      	movs	r2, #3
 80035a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e0b7      	b.n	800371e <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a5f      	ldr	r2, [pc, #380]	; (8003730 <HAL_DMA_Init+0x650>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d072      	beq.n	800369e <HAL_DMA_Init+0x5be>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a5d      	ldr	r2, [pc, #372]	; (8003734 <HAL_DMA_Init+0x654>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d06d      	beq.n	800369e <HAL_DMA_Init+0x5be>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a5c      	ldr	r2, [pc, #368]	; (8003738 <HAL_DMA_Init+0x658>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d068      	beq.n	800369e <HAL_DMA_Init+0x5be>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a5a      	ldr	r2, [pc, #360]	; (800373c <HAL_DMA_Init+0x65c>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d063      	beq.n	800369e <HAL_DMA_Init+0x5be>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a59      	ldr	r2, [pc, #356]	; (8003740 <HAL_DMA_Init+0x660>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d05e      	beq.n	800369e <HAL_DMA_Init+0x5be>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a57      	ldr	r2, [pc, #348]	; (8003744 <HAL_DMA_Init+0x664>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d059      	beq.n	800369e <HAL_DMA_Init+0x5be>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a56      	ldr	r2, [pc, #344]	; (8003748 <HAL_DMA_Init+0x668>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d054      	beq.n	800369e <HAL_DMA_Init+0x5be>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a54      	ldr	r2, [pc, #336]	; (800374c <HAL_DMA_Init+0x66c>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d04f      	beq.n	800369e <HAL_DMA_Init+0x5be>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a53      	ldr	r2, [pc, #332]	; (8003750 <HAL_DMA_Init+0x670>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d04a      	beq.n	800369e <HAL_DMA_Init+0x5be>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a51      	ldr	r2, [pc, #324]	; (8003754 <HAL_DMA_Init+0x674>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d045      	beq.n	800369e <HAL_DMA_Init+0x5be>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a50      	ldr	r2, [pc, #320]	; (8003758 <HAL_DMA_Init+0x678>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d040      	beq.n	800369e <HAL_DMA_Init+0x5be>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a4e      	ldr	r2, [pc, #312]	; (800375c <HAL_DMA_Init+0x67c>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d03b      	beq.n	800369e <HAL_DMA_Init+0x5be>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a4d      	ldr	r2, [pc, #308]	; (8003760 <HAL_DMA_Init+0x680>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d036      	beq.n	800369e <HAL_DMA_Init+0x5be>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a4b      	ldr	r2, [pc, #300]	; (8003764 <HAL_DMA_Init+0x684>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d031      	beq.n	800369e <HAL_DMA_Init+0x5be>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a4a      	ldr	r2, [pc, #296]	; (8003768 <HAL_DMA_Init+0x688>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d02c      	beq.n	800369e <HAL_DMA_Init+0x5be>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a48      	ldr	r2, [pc, #288]	; (800376c <HAL_DMA_Init+0x68c>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d027      	beq.n	800369e <HAL_DMA_Init+0x5be>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a47      	ldr	r2, [pc, #284]	; (8003770 <HAL_DMA_Init+0x690>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d022      	beq.n	800369e <HAL_DMA_Init+0x5be>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a45      	ldr	r2, [pc, #276]	; (8003774 <HAL_DMA_Init+0x694>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d01d      	beq.n	800369e <HAL_DMA_Init+0x5be>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a44      	ldr	r2, [pc, #272]	; (8003778 <HAL_DMA_Init+0x698>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d018      	beq.n	800369e <HAL_DMA_Init+0x5be>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a42      	ldr	r2, [pc, #264]	; (800377c <HAL_DMA_Init+0x69c>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d013      	beq.n	800369e <HAL_DMA_Init+0x5be>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a41      	ldr	r2, [pc, #260]	; (8003780 <HAL_DMA_Init+0x6a0>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d00e      	beq.n	800369e <HAL_DMA_Init+0x5be>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a3f      	ldr	r2, [pc, #252]	; (8003784 <HAL_DMA_Init+0x6a4>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d009      	beq.n	800369e <HAL_DMA_Init+0x5be>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a3e      	ldr	r2, [pc, #248]	; (8003788 <HAL_DMA_Init+0x6a8>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d004      	beq.n	800369e <HAL_DMA_Init+0x5be>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a3c      	ldr	r2, [pc, #240]	; (800378c <HAL_DMA_Init+0x6ac>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d101      	bne.n	80036a2 <HAL_DMA_Init+0x5c2>
 800369e:	2301      	movs	r3, #1
 80036a0:	e000      	b.n	80036a4 <HAL_DMA_Init+0x5c4>
 80036a2:	2300      	movs	r3, #0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d032      	beq.n	800370e <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f001 fcdf 	bl	800506c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	2b80      	cmp	r3, #128	; 0x80
 80036b4:	d102      	bne.n	80036bc <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036c4:	b2d2      	uxtb	r2, r2
 80036c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80036d0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d010      	beq.n	80036fc <HAL_DMA_Init+0x61c>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2b08      	cmp	r3, #8
 80036e0:	d80c      	bhi.n	80036fc <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f001 fd5c 	bl	80051a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80036f8:	605a      	str	r2, [r3, #4]
 80036fa:	e008      	b.n	800370e <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3718      	adds	r7, #24
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	a7fdabf8 	.word	0xa7fdabf8
 800372c:	cccccccd 	.word	0xcccccccd
 8003730:	40020010 	.word	0x40020010
 8003734:	40020028 	.word	0x40020028
 8003738:	40020040 	.word	0x40020040
 800373c:	40020058 	.word	0x40020058
 8003740:	40020070 	.word	0x40020070
 8003744:	40020088 	.word	0x40020088
 8003748:	400200a0 	.word	0x400200a0
 800374c:	400200b8 	.word	0x400200b8
 8003750:	40020410 	.word	0x40020410
 8003754:	40020428 	.word	0x40020428
 8003758:	40020440 	.word	0x40020440
 800375c:	40020458 	.word	0x40020458
 8003760:	40020470 	.word	0x40020470
 8003764:	40020488 	.word	0x40020488
 8003768:	400204a0 	.word	0x400204a0
 800376c:	400204b8 	.word	0x400204b8
 8003770:	58025408 	.word	0x58025408
 8003774:	5802541c 	.word	0x5802541c
 8003778:	58025430 	.word	0x58025430
 800377c:	58025444 	.word	0x58025444
 8003780:	58025458 	.word	0x58025458
 8003784:	5802546c 	.word	0x5802546c
 8003788:	58025480 	.word	0x58025480
 800378c:	58025494 	.word	0x58025494

08003790 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
 800379c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800379e:	2300      	movs	r3, #0
 80037a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e226      	b.n	8003bfa <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d101      	bne.n	80037ba <HAL_DMA_Start_IT+0x2a>
 80037b6:	2302      	movs	r3, #2
 80037b8:	e21f      	b.n	8003bfa <HAL_DMA_Start_IT+0x46a>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	f040 820a 	bne.w	8003be4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2202      	movs	r2, #2
 80037d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a68      	ldr	r2, [pc, #416]	; (8003984 <HAL_DMA_Start_IT+0x1f4>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d04a      	beq.n	800387e <HAL_DMA_Start_IT+0xee>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a66      	ldr	r2, [pc, #408]	; (8003988 <HAL_DMA_Start_IT+0x1f8>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d045      	beq.n	800387e <HAL_DMA_Start_IT+0xee>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a65      	ldr	r2, [pc, #404]	; (800398c <HAL_DMA_Start_IT+0x1fc>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d040      	beq.n	800387e <HAL_DMA_Start_IT+0xee>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a63      	ldr	r2, [pc, #396]	; (8003990 <HAL_DMA_Start_IT+0x200>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d03b      	beq.n	800387e <HAL_DMA_Start_IT+0xee>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a62      	ldr	r2, [pc, #392]	; (8003994 <HAL_DMA_Start_IT+0x204>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d036      	beq.n	800387e <HAL_DMA_Start_IT+0xee>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a60      	ldr	r2, [pc, #384]	; (8003998 <HAL_DMA_Start_IT+0x208>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d031      	beq.n	800387e <HAL_DMA_Start_IT+0xee>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a5f      	ldr	r2, [pc, #380]	; (800399c <HAL_DMA_Start_IT+0x20c>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d02c      	beq.n	800387e <HAL_DMA_Start_IT+0xee>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a5d      	ldr	r2, [pc, #372]	; (80039a0 <HAL_DMA_Start_IT+0x210>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d027      	beq.n	800387e <HAL_DMA_Start_IT+0xee>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a5c      	ldr	r2, [pc, #368]	; (80039a4 <HAL_DMA_Start_IT+0x214>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d022      	beq.n	800387e <HAL_DMA_Start_IT+0xee>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a5a      	ldr	r2, [pc, #360]	; (80039a8 <HAL_DMA_Start_IT+0x218>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d01d      	beq.n	800387e <HAL_DMA_Start_IT+0xee>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a59      	ldr	r2, [pc, #356]	; (80039ac <HAL_DMA_Start_IT+0x21c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d018      	beq.n	800387e <HAL_DMA_Start_IT+0xee>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a57      	ldr	r2, [pc, #348]	; (80039b0 <HAL_DMA_Start_IT+0x220>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d013      	beq.n	800387e <HAL_DMA_Start_IT+0xee>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a56      	ldr	r2, [pc, #344]	; (80039b4 <HAL_DMA_Start_IT+0x224>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d00e      	beq.n	800387e <HAL_DMA_Start_IT+0xee>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a54      	ldr	r2, [pc, #336]	; (80039b8 <HAL_DMA_Start_IT+0x228>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d009      	beq.n	800387e <HAL_DMA_Start_IT+0xee>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a53      	ldr	r2, [pc, #332]	; (80039bc <HAL_DMA_Start_IT+0x22c>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d004      	beq.n	800387e <HAL_DMA_Start_IT+0xee>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a51      	ldr	r2, [pc, #324]	; (80039c0 <HAL_DMA_Start_IT+0x230>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d108      	bne.n	8003890 <HAL_DMA_Start_IT+0x100>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0201 	bic.w	r2, r2, #1
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	e007      	b.n	80038a0 <HAL_DMA_Start_IT+0x110>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 0201 	bic.w	r2, r2, #1
 800389e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	68b9      	ldr	r1, [r7, #8]
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f001 f906 	bl	8004ab8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a34      	ldr	r2, [pc, #208]	; (8003984 <HAL_DMA_Start_IT+0x1f4>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d04a      	beq.n	800394c <HAL_DMA_Start_IT+0x1bc>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a33      	ldr	r2, [pc, #204]	; (8003988 <HAL_DMA_Start_IT+0x1f8>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d045      	beq.n	800394c <HAL_DMA_Start_IT+0x1bc>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a31      	ldr	r2, [pc, #196]	; (800398c <HAL_DMA_Start_IT+0x1fc>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d040      	beq.n	800394c <HAL_DMA_Start_IT+0x1bc>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a30      	ldr	r2, [pc, #192]	; (8003990 <HAL_DMA_Start_IT+0x200>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d03b      	beq.n	800394c <HAL_DMA_Start_IT+0x1bc>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a2e      	ldr	r2, [pc, #184]	; (8003994 <HAL_DMA_Start_IT+0x204>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d036      	beq.n	800394c <HAL_DMA_Start_IT+0x1bc>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a2d      	ldr	r2, [pc, #180]	; (8003998 <HAL_DMA_Start_IT+0x208>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d031      	beq.n	800394c <HAL_DMA_Start_IT+0x1bc>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a2b      	ldr	r2, [pc, #172]	; (800399c <HAL_DMA_Start_IT+0x20c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d02c      	beq.n	800394c <HAL_DMA_Start_IT+0x1bc>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a2a      	ldr	r2, [pc, #168]	; (80039a0 <HAL_DMA_Start_IT+0x210>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d027      	beq.n	800394c <HAL_DMA_Start_IT+0x1bc>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a28      	ldr	r2, [pc, #160]	; (80039a4 <HAL_DMA_Start_IT+0x214>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d022      	beq.n	800394c <HAL_DMA_Start_IT+0x1bc>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a27      	ldr	r2, [pc, #156]	; (80039a8 <HAL_DMA_Start_IT+0x218>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d01d      	beq.n	800394c <HAL_DMA_Start_IT+0x1bc>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a25      	ldr	r2, [pc, #148]	; (80039ac <HAL_DMA_Start_IT+0x21c>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d018      	beq.n	800394c <HAL_DMA_Start_IT+0x1bc>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a24      	ldr	r2, [pc, #144]	; (80039b0 <HAL_DMA_Start_IT+0x220>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d013      	beq.n	800394c <HAL_DMA_Start_IT+0x1bc>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a22      	ldr	r2, [pc, #136]	; (80039b4 <HAL_DMA_Start_IT+0x224>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d00e      	beq.n	800394c <HAL_DMA_Start_IT+0x1bc>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a21      	ldr	r2, [pc, #132]	; (80039b8 <HAL_DMA_Start_IT+0x228>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d009      	beq.n	800394c <HAL_DMA_Start_IT+0x1bc>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a1f      	ldr	r2, [pc, #124]	; (80039bc <HAL_DMA_Start_IT+0x22c>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d004      	beq.n	800394c <HAL_DMA_Start_IT+0x1bc>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a1e      	ldr	r2, [pc, #120]	; (80039c0 <HAL_DMA_Start_IT+0x230>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d101      	bne.n	8003950 <HAL_DMA_Start_IT+0x1c0>
 800394c:	2301      	movs	r3, #1
 800394e:	e000      	b.n	8003952 <HAL_DMA_Start_IT+0x1c2>
 8003950:	2300      	movs	r3, #0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d036      	beq.n	80039c4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f023 021e 	bic.w	r2, r3, #30
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f042 0216 	orr.w	r2, r2, #22
 8003968:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	2b00      	cmp	r3, #0
 8003970:	d03e      	beq.n	80039f0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f042 0208 	orr.w	r2, r2, #8
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	e035      	b.n	80039f0 <HAL_DMA_Start_IT+0x260>
 8003984:	40020010 	.word	0x40020010
 8003988:	40020028 	.word	0x40020028
 800398c:	40020040 	.word	0x40020040
 8003990:	40020058 	.word	0x40020058
 8003994:	40020070 	.word	0x40020070
 8003998:	40020088 	.word	0x40020088
 800399c:	400200a0 	.word	0x400200a0
 80039a0:	400200b8 	.word	0x400200b8
 80039a4:	40020410 	.word	0x40020410
 80039a8:	40020428 	.word	0x40020428
 80039ac:	40020440 	.word	0x40020440
 80039b0:	40020458 	.word	0x40020458
 80039b4:	40020470 	.word	0x40020470
 80039b8:	40020488 	.word	0x40020488
 80039bc:	400204a0 	.word	0x400204a0
 80039c0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f023 020e 	bic.w	r2, r3, #14
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 020a 	orr.w	r2, r2, #10
 80039d6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d007      	beq.n	80039f0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f042 0204 	orr.w	r2, r2, #4
 80039ee:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a83      	ldr	r2, [pc, #524]	; (8003c04 <HAL_DMA_Start_IT+0x474>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d072      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x350>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a82      	ldr	r2, [pc, #520]	; (8003c08 <HAL_DMA_Start_IT+0x478>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d06d      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x350>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a80      	ldr	r2, [pc, #512]	; (8003c0c <HAL_DMA_Start_IT+0x47c>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d068      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x350>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a7f      	ldr	r2, [pc, #508]	; (8003c10 <HAL_DMA_Start_IT+0x480>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d063      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x350>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a7d      	ldr	r2, [pc, #500]	; (8003c14 <HAL_DMA_Start_IT+0x484>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d05e      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x350>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a7c      	ldr	r2, [pc, #496]	; (8003c18 <HAL_DMA_Start_IT+0x488>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d059      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x350>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a7a      	ldr	r2, [pc, #488]	; (8003c1c <HAL_DMA_Start_IT+0x48c>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d054      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x350>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a79      	ldr	r2, [pc, #484]	; (8003c20 <HAL_DMA_Start_IT+0x490>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d04f      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x350>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a77      	ldr	r2, [pc, #476]	; (8003c24 <HAL_DMA_Start_IT+0x494>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d04a      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x350>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a76      	ldr	r2, [pc, #472]	; (8003c28 <HAL_DMA_Start_IT+0x498>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d045      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x350>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a74      	ldr	r2, [pc, #464]	; (8003c2c <HAL_DMA_Start_IT+0x49c>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d040      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x350>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a73      	ldr	r2, [pc, #460]	; (8003c30 <HAL_DMA_Start_IT+0x4a0>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d03b      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x350>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a71      	ldr	r2, [pc, #452]	; (8003c34 <HAL_DMA_Start_IT+0x4a4>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d036      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x350>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a70      	ldr	r2, [pc, #448]	; (8003c38 <HAL_DMA_Start_IT+0x4a8>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d031      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x350>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a6e      	ldr	r2, [pc, #440]	; (8003c3c <HAL_DMA_Start_IT+0x4ac>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d02c      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x350>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a6d      	ldr	r2, [pc, #436]	; (8003c40 <HAL_DMA_Start_IT+0x4b0>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d027      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x350>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a6b      	ldr	r2, [pc, #428]	; (8003c44 <HAL_DMA_Start_IT+0x4b4>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d022      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x350>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a6a      	ldr	r2, [pc, #424]	; (8003c48 <HAL_DMA_Start_IT+0x4b8>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d01d      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x350>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a68      	ldr	r2, [pc, #416]	; (8003c4c <HAL_DMA_Start_IT+0x4bc>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d018      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x350>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a67      	ldr	r2, [pc, #412]	; (8003c50 <HAL_DMA_Start_IT+0x4c0>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d013      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x350>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a65      	ldr	r2, [pc, #404]	; (8003c54 <HAL_DMA_Start_IT+0x4c4>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d00e      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x350>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a64      	ldr	r2, [pc, #400]	; (8003c58 <HAL_DMA_Start_IT+0x4c8>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d009      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x350>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a62      	ldr	r2, [pc, #392]	; (8003c5c <HAL_DMA_Start_IT+0x4cc>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d004      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x350>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a61      	ldr	r2, [pc, #388]	; (8003c60 <HAL_DMA_Start_IT+0x4d0>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d101      	bne.n	8003ae4 <HAL_DMA_Start_IT+0x354>
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e000      	b.n	8003ae6 <HAL_DMA_Start_IT+0x356>
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d01a      	beq.n	8003b20 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d007      	beq.n	8003b08 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b06:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d007      	beq.n	8003b20 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b1e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a37      	ldr	r2, [pc, #220]	; (8003c04 <HAL_DMA_Start_IT+0x474>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d04a      	beq.n	8003bc0 <HAL_DMA_Start_IT+0x430>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a36      	ldr	r2, [pc, #216]	; (8003c08 <HAL_DMA_Start_IT+0x478>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d045      	beq.n	8003bc0 <HAL_DMA_Start_IT+0x430>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a34      	ldr	r2, [pc, #208]	; (8003c0c <HAL_DMA_Start_IT+0x47c>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d040      	beq.n	8003bc0 <HAL_DMA_Start_IT+0x430>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a33      	ldr	r2, [pc, #204]	; (8003c10 <HAL_DMA_Start_IT+0x480>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d03b      	beq.n	8003bc0 <HAL_DMA_Start_IT+0x430>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a31      	ldr	r2, [pc, #196]	; (8003c14 <HAL_DMA_Start_IT+0x484>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d036      	beq.n	8003bc0 <HAL_DMA_Start_IT+0x430>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a30      	ldr	r2, [pc, #192]	; (8003c18 <HAL_DMA_Start_IT+0x488>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d031      	beq.n	8003bc0 <HAL_DMA_Start_IT+0x430>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a2e      	ldr	r2, [pc, #184]	; (8003c1c <HAL_DMA_Start_IT+0x48c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d02c      	beq.n	8003bc0 <HAL_DMA_Start_IT+0x430>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a2d      	ldr	r2, [pc, #180]	; (8003c20 <HAL_DMA_Start_IT+0x490>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d027      	beq.n	8003bc0 <HAL_DMA_Start_IT+0x430>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a2b      	ldr	r2, [pc, #172]	; (8003c24 <HAL_DMA_Start_IT+0x494>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d022      	beq.n	8003bc0 <HAL_DMA_Start_IT+0x430>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a2a      	ldr	r2, [pc, #168]	; (8003c28 <HAL_DMA_Start_IT+0x498>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d01d      	beq.n	8003bc0 <HAL_DMA_Start_IT+0x430>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a28      	ldr	r2, [pc, #160]	; (8003c2c <HAL_DMA_Start_IT+0x49c>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d018      	beq.n	8003bc0 <HAL_DMA_Start_IT+0x430>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a27      	ldr	r2, [pc, #156]	; (8003c30 <HAL_DMA_Start_IT+0x4a0>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d013      	beq.n	8003bc0 <HAL_DMA_Start_IT+0x430>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a25      	ldr	r2, [pc, #148]	; (8003c34 <HAL_DMA_Start_IT+0x4a4>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d00e      	beq.n	8003bc0 <HAL_DMA_Start_IT+0x430>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a24      	ldr	r2, [pc, #144]	; (8003c38 <HAL_DMA_Start_IT+0x4a8>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d009      	beq.n	8003bc0 <HAL_DMA_Start_IT+0x430>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a22      	ldr	r2, [pc, #136]	; (8003c3c <HAL_DMA_Start_IT+0x4ac>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d004      	beq.n	8003bc0 <HAL_DMA_Start_IT+0x430>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a21      	ldr	r2, [pc, #132]	; (8003c40 <HAL_DMA_Start_IT+0x4b0>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d108      	bne.n	8003bd2 <HAL_DMA_Start_IT+0x442>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0201 	orr.w	r2, r2, #1
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	e012      	b.n	8003bf8 <HAL_DMA_Start_IT+0x468>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f042 0201 	orr.w	r2, r2, #1
 8003be0:	601a      	str	r2, [r3, #0]
 8003be2:	e009      	b.n	8003bf8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3718      	adds	r7, #24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40020010 	.word	0x40020010
 8003c08:	40020028 	.word	0x40020028
 8003c0c:	40020040 	.word	0x40020040
 8003c10:	40020058 	.word	0x40020058
 8003c14:	40020070 	.word	0x40020070
 8003c18:	40020088 	.word	0x40020088
 8003c1c:	400200a0 	.word	0x400200a0
 8003c20:	400200b8 	.word	0x400200b8
 8003c24:	40020410 	.word	0x40020410
 8003c28:	40020428 	.word	0x40020428
 8003c2c:	40020440 	.word	0x40020440
 8003c30:	40020458 	.word	0x40020458
 8003c34:	40020470 	.word	0x40020470
 8003c38:	40020488 	.word	0x40020488
 8003c3c:	400204a0 	.word	0x400204a0
 8003c40:	400204b8 	.word	0x400204b8
 8003c44:	58025408 	.word	0x58025408
 8003c48:	5802541c 	.word	0x5802541c
 8003c4c:	58025430 	.word	0x58025430
 8003c50:	58025444 	.word	0x58025444
 8003c54:	58025458 	.word	0x58025458
 8003c58:	5802546c 	.word	0x5802546c
 8003c5c:	58025480 	.word	0x58025480
 8003c60:	58025494 	.word	0x58025494

08003c64 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b08a      	sub	sp, #40	; 0x28
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c70:	4b67      	ldr	r3, [pc, #412]	; (8003e10 <HAL_DMA_IRQHandler+0x1ac>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a67      	ldr	r2, [pc, #412]	; (8003e14 <HAL_DMA_IRQHandler+0x1b0>)
 8003c76:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7a:	0a9b      	lsrs	r3, r3, #10
 8003c7c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c82:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c88:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003c8a:	6a3b      	ldr	r3, [r7, #32]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a5f      	ldr	r2, [pc, #380]	; (8003e18 <HAL_DMA_IRQHandler+0x1b4>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d04a      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xd2>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a5d      	ldr	r2, [pc, #372]	; (8003e1c <HAL_DMA_IRQHandler+0x1b8>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d045      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xd2>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a5c      	ldr	r2, [pc, #368]	; (8003e20 <HAL_DMA_IRQHandler+0x1bc>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d040      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xd2>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a5a      	ldr	r2, [pc, #360]	; (8003e24 <HAL_DMA_IRQHandler+0x1c0>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d03b      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xd2>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a59      	ldr	r2, [pc, #356]	; (8003e28 <HAL_DMA_IRQHandler+0x1c4>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d036      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xd2>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a57      	ldr	r2, [pc, #348]	; (8003e2c <HAL_DMA_IRQHandler+0x1c8>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d031      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xd2>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a56      	ldr	r2, [pc, #344]	; (8003e30 <HAL_DMA_IRQHandler+0x1cc>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d02c      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xd2>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a54      	ldr	r2, [pc, #336]	; (8003e34 <HAL_DMA_IRQHandler+0x1d0>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d027      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xd2>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a53      	ldr	r2, [pc, #332]	; (8003e38 <HAL_DMA_IRQHandler+0x1d4>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d022      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xd2>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a51      	ldr	r2, [pc, #324]	; (8003e3c <HAL_DMA_IRQHandler+0x1d8>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d01d      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xd2>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a50      	ldr	r2, [pc, #320]	; (8003e40 <HAL_DMA_IRQHandler+0x1dc>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d018      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xd2>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a4e      	ldr	r2, [pc, #312]	; (8003e44 <HAL_DMA_IRQHandler+0x1e0>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d013      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xd2>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a4d      	ldr	r2, [pc, #308]	; (8003e48 <HAL_DMA_IRQHandler+0x1e4>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d00e      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xd2>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a4b      	ldr	r2, [pc, #300]	; (8003e4c <HAL_DMA_IRQHandler+0x1e8>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d009      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xd2>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a4a      	ldr	r2, [pc, #296]	; (8003e50 <HAL_DMA_IRQHandler+0x1ec>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d004      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xd2>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a48      	ldr	r2, [pc, #288]	; (8003e54 <HAL_DMA_IRQHandler+0x1f0>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d101      	bne.n	8003d3a <HAL_DMA_IRQHandler+0xd6>
 8003d36:	2301      	movs	r3, #1
 8003d38:	e000      	b.n	8003d3c <HAL_DMA_IRQHandler+0xd8>
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 842b 	beq.w	8004598 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d46:	f003 031f 	and.w	r3, r3, #31
 8003d4a:	2208      	movs	r2, #8
 8003d4c:	409a      	lsls	r2, r3
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	4013      	ands	r3, r2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f000 80a2 	beq.w	8003e9c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a2e      	ldr	r2, [pc, #184]	; (8003e18 <HAL_DMA_IRQHandler+0x1b4>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d04a      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x194>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a2d      	ldr	r2, [pc, #180]	; (8003e1c <HAL_DMA_IRQHandler+0x1b8>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d045      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x194>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a2b      	ldr	r2, [pc, #172]	; (8003e20 <HAL_DMA_IRQHandler+0x1bc>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d040      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x194>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a2a      	ldr	r2, [pc, #168]	; (8003e24 <HAL_DMA_IRQHandler+0x1c0>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d03b      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x194>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a28      	ldr	r2, [pc, #160]	; (8003e28 <HAL_DMA_IRQHandler+0x1c4>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d036      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x194>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a27      	ldr	r2, [pc, #156]	; (8003e2c <HAL_DMA_IRQHandler+0x1c8>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d031      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x194>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a25      	ldr	r2, [pc, #148]	; (8003e30 <HAL_DMA_IRQHandler+0x1cc>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d02c      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x194>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a24      	ldr	r2, [pc, #144]	; (8003e34 <HAL_DMA_IRQHandler+0x1d0>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d027      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x194>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a22      	ldr	r2, [pc, #136]	; (8003e38 <HAL_DMA_IRQHandler+0x1d4>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d022      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x194>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a21      	ldr	r2, [pc, #132]	; (8003e3c <HAL_DMA_IRQHandler+0x1d8>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d01d      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x194>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a1f      	ldr	r2, [pc, #124]	; (8003e40 <HAL_DMA_IRQHandler+0x1dc>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d018      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x194>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a1e      	ldr	r2, [pc, #120]	; (8003e44 <HAL_DMA_IRQHandler+0x1e0>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d013      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x194>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a1c      	ldr	r2, [pc, #112]	; (8003e48 <HAL_DMA_IRQHandler+0x1e4>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d00e      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x194>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a1b      	ldr	r2, [pc, #108]	; (8003e4c <HAL_DMA_IRQHandler+0x1e8>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d009      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x194>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a19      	ldr	r2, [pc, #100]	; (8003e50 <HAL_DMA_IRQHandler+0x1ec>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d004      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x194>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a18      	ldr	r2, [pc, #96]	; (8003e54 <HAL_DMA_IRQHandler+0x1f0>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d12f      	bne.n	8003e58 <HAL_DMA_IRQHandler+0x1f4>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0304 	and.w	r3, r3, #4
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	bf14      	ite	ne
 8003e06:	2301      	movne	r3, #1
 8003e08:	2300      	moveq	r3, #0
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	e02e      	b.n	8003e6c <HAL_DMA_IRQHandler+0x208>
 8003e0e:	bf00      	nop
 8003e10:	24000000 	.word	0x24000000
 8003e14:	1b4e81b5 	.word	0x1b4e81b5
 8003e18:	40020010 	.word	0x40020010
 8003e1c:	40020028 	.word	0x40020028
 8003e20:	40020040 	.word	0x40020040
 8003e24:	40020058 	.word	0x40020058
 8003e28:	40020070 	.word	0x40020070
 8003e2c:	40020088 	.word	0x40020088
 8003e30:	400200a0 	.word	0x400200a0
 8003e34:	400200b8 	.word	0x400200b8
 8003e38:	40020410 	.word	0x40020410
 8003e3c:	40020428 	.word	0x40020428
 8003e40:	40020440 	.word	0x40020440
 8003e44:	40020458 	.word	0x40020458
 8003e48:	40020470 	.word	0x40020470
 8003e4c:	40020488 	.word	0x40020488
 8003e50:	400204a0 	.word	0x400204a0
 8003e54:	400204b8 	.word	0x400204b8
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0308 	and.w	r3, r3, #8
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	bf14      	ite	ne
 8003e66:	2301      	movne	r3, #1
 8003e68:	2300      	moveq	r3, #0
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d015      	beq.n	8003e9c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 0204 	bic.w	r2, r2, #4
 8003e7e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e84:	f003 031f 	and.w	r3, r3, #31
 8003e88:	2208      	movs	r2, #8
 8003e8a:	409a      	lsls	r2, r3
 8003e8c:	6a3b      	ldr	r3, [r7, #32]
 8003e8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e94:	f043 0201 	orr.w	r2, r3, #1
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea0:	f003 031f 	and.w	r3, r3, #31
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d06e      	beq.n	8003f90 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a69      	ldr	r2, [pc, #420]	; (800405c <HAL_DMA_IRQHandler+0x3f8>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d04a      	beq.n	8003f52 <HAL_DMA_IRQHandler+0x2ee>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a67      	ldr	r2, [pc, #412]	; (8004060 <HAL_DMA_IRQHandler+0x3fc>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d045      	beq.n	8003f52 <HAL_DMA_IRQHandler+0x2ee>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a66      	ldr	r2, [pc, #408]	; (8004064 <HAL_DMA_IRQHandler+0x400>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d040      	beq.n	8003f52 <HAL_DMA_IRQHandler+0x2ee>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a64      	ldr	r2, [pc, #400]	; (8004068 <HAL_DMA_IRQHandler+0x404>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d03b      	beq.n	8003f52 <HAL_DMA_IRQHandler+0x2ee>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a63      	ldr	r2, [pc, #396]	; (800406c <HAL_DMA_IRQHandler+0x408>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d036      	beq.n	8003f52 <HAL_DMA_IRQHandler+0x2ee>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a61      	ldr	r2, [pc, #388]	; (8004070 <HAL_DMA_IRQHandler+0x40c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d031      	beq.n	8003f52 <HAL_DMA_IRQHandler+0x2ee>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a60      	ldr	r2, [pc, #384]	; (8004074 <HAL_DMA_IRQHandler+0x410>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d02c      	beq.n	8003f52 <HAL_DMA_IRQHandler+0x2ee>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a5e      	ldr	r2, [pc, #376]	; (8004078 <HAL_DMA_IRQHandler+0x414>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d027      	beq.n	8003f52 <HAL_DMA_IRQHandler+0x2ee>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a5d      	ldr	r2, [pc, #372]	; (800407c <HAL_DMA_IRQHandler+0x418>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d022      	beq.n	8003f52 <HAL_DMA_IRQHandler+0x2ee>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a5b      	ldr	r2, [pc, #364]	; (8004080 <HAL_DMA_IRQHandler+0x41c>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d01d      	beq.n	8003f52 <HAL_DMA_IRQHandler+0x2ee>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a5a      	ldr	r2, [pc, #360]	; (8004084 <HAL_DMA_IRQHandler+0x420>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d018      	beq.n	8003f52 <HAL_DMA_IRQHandler+0x2ee>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a58      	ldr	r2, [pc, #352]	; (8004088 <HAL_DMA_IRQHandler+0x424>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d013      	beq.n	8003f52 <HAL_DMA_IRQHandler+0x2ee>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a57      	ldr	r2, [pc, #348]	; (800408c <HAL_DMA_IRQHandler+0x428>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d00e      	beq.n	8003f52 <HAL_DMA_IRQHandler+0x2ee>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a55      	ldr	r2, [pc, #340]	; (8004090 <HAL_DMA_IRQHandler+0x42c>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d009      	beq.n	8003f52 <HAL_DMA_IRQHandler+0x2ee>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a54      	ldr	r2, [pc, #336]	; (8004094 <HAL_DMA_IRQHandler+0x430>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d004      	beq.n	8003f52 <HAL_DMA_IRQHandler+0x2ee>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a52      	ldr	r2, [pc, #328]	; (8004098 <HAL_DMA_IRQHandler+0x434>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d10a      	bne.n	8003f68 <HAL_DMA_IRQHandler+0x304>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	695b      	ldr	r3, [r3, #20]
 8003f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	bf14      	ite	ne
 8003f60:	2301      	movne	r3, #1
 8003f62:	2300      	moveq	r3, #0
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	e003      	b.n	8003f70 <HAL_DMA_IRQHandler+0x30c>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2300      	movs	r3, #0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00d      	beq.n	8003f90 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f78:	f003 031f 	and.w	r3, r3, #31
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	409a      	lsls	r2, r3
 8003f80:	6a3b      	ldr	r3, [r7, #32]
 8003f82:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f88:	f043 0202 	orr.w	r2, r3, #2
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f94:	f003 031f 	and.w	r3, r3, #31
 8003f98:	2204      	movs	r2, #4
 8003f9a:	409a      	lsls	r2, r3
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f000 808f 	beq.w	80040c4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a2c      	ldr	r2, [pc, #176]	; (800405c <HAL_DMA_IRQHandler+0x3f8>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d04a      	beq.n	8004046 <HAL_DMA_IRQHandler+0x3e2>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a2a      	ldr	r2, [pc, #168]	; (8004060 <HAL_DMA_IRQHandler+0x3fc>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d045      	beq.n	8004046 <HAL_DMA_IRQHandler+0x3e2>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a29      	ldr	r2, [pc, #164]	; (8004064 <HAL_DMA_IRQHandler+0x400>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d040      	beq.n	8004046 <HAL_DMA_IRQHandler+0x3e2>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a27      	ldr	r2, [pc, #156]	; (8004068 <HAL_DMA_IRQHandler+0x404>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d03b      	beq.n	8004046 <HAL_DMA_IRQHandler+0x3e2>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a26      	ldr	r2, [pc, #152]	; (800406c <HAL_DMA_IRQHandler+0x408>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d036      	beq.n	8004046 <HAL_DMA_IRQHandler+0x3e2>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a24      	ldr	r2, [pc, #144]	; (8004070 <HAL_DMA_IRQHandler+0x40c>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d031      	beq.n	8004046 <HAL_DMA_IRQHandler+0x3e2>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a23      	ldr	r2, [pc, #140]	; (8004074 <HAL_DMA_IRQHandler+0x410>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d02c      	beq.n	8004046 <HAL_DMA_IRQHandler+0x3e2>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a21      	ldr	r2, [pc, #132]	; (8004078 <HAL_DMA_IRQHandler+0x414>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d027      	beq.n	8004046 <HAL_DMA_IRQHandler+0x3e2>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a20      	ldr	r2, [pc, #128]	; (800407c <HAL_DMA_IRQHandler+0x418>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d022      	beq.n	8004046 <HAL_DMA_IRQHandler+0x3e2>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a1e      	ldr	r2, [pc, #120]	; (8004080 <HAL_DMA_IRQHandler+0x41c>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d01d      	beq.n	8004046 <HAL_DMA_IRQHandler+0x3e2>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a1d      	ldr	r2, [pc, #116]	; (8004084 <HAL_DMA_IRQHandler+0x420>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d018      	beq.n	8004046 <HAL_DMA_IRQHandler+0x3e2>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a1b      	ldr	r2, [pc, #108]	; (8004088 <HAL_DMA_IRQHandler+0x424>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d013      	beq.n	8004046 <HAL_DMA_IRQHandler+0x3e2>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a1a      	ldr	r2, [pc, #104]	; (800408c <HAL_DMA_IRQHandler+0x428>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d00e      	beq.n	8004046 <HAL_DMA_IRQHandler+0x3e2>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a18      	ldr	r2, [pc, #96]	; (8004090 <HAL_DMA_IRQHandler+0x42c>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d009      	beq.n	8004046 <HAL_DMA_IRQHandler+0x3e2>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a17      	ldr	r2, [pc, #92]	; (8004094 <HAL_DMA_IRQHandler+0x430>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d004      	beq.n	8004046 <HAL_DMA_IRQHandler+0x3e2>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a15      	ldr	r2, [pc, #84]	; (8004098 <HAL_DMA_IRQHandler+0x434>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d12a      	bne.n	800409c <HAL_DMA_IRQHandler+0x438>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b00      	cmp	r3, #0
 8004052:	bf14      	ite	ne
 8004054:	2301      	movne	r3, #1
 8004056:	2300      	moveq	r3, #0
 8004058:	b2db      	uxtb	r3, r3
 800405a:	e023      	b.n	80040a4 <HAL_DMA_IRQHandler+0x440>
 800405c:	40020010 	.word	0x40020010
 8004060:	40020028 	.word	0x40020028
 8004064:	40020040 	.word	0x40020040
 8004068:	40020058 	.word	0x40020058
 800406c:	40020070 	.word	0x40020070
 8004070:	40020088 	.word	0x40020088
 8004074:	400200a0 	.word	0x400200a0
 8004078:	400200b8 	.word	0x400200b8
 800407c:	40020410 	.word	0x40020410
 8004080:	40020428 	.word	0x40020428
 8004084:	40020440 	.word	0x40020440
 8004088:	40020458 	.word	0x40020458
 800408c:	40020470 	.word	0x40020470
 8004090:	40020488 	.word	0x40020488
 8004094:	400204a0 	.word	0x400204a0
 8004098:	400204b8 	.word	0x400204b8
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2300      	movs	r3, #0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00d      	beq.n	80040c4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ac:	f003 031f 	and.w	r3, r3, #31
 80040b0:	2204      	movs	r2, #4
 80040b2:	409a      	lsls	r2, r3
 80040b4:	6a3b      	ldr	r3, [r7, #32]
 80040b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040bc:	f043 0204 	orr.w	r2, r3, #4
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c8:	f003 031f 	and.w	r3, r3, #31
 80040cc:	2210      	movs	r2, #16
 80040ce:	409a      	lsls	r2, r3
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	4013      	ands	r3, r2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f000 80a6 	beq.w	8004226 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a85      	ldr	r2, [pc, #532]	; (80042f4 <HAL_DMA_IRQHandler+0x690>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d04a      	beq.n	800417a <HAL_DMA_IRQHandler+0x516>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a83      	ldr	r2, [pc, #524]	; (80042f8 <HAL_DMA_IRQHandler+0x694>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d045      	beq.n	800417a <HAL_DMA_IRQHandler+0x516>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a82      	ldr	r2, [pc, #520]	; (80042fc <HAL_DMA_IRQHandler+0x698>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d040      	beq.n	800417a <HAL_DMA_IRQHandler+0x516>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a80      	ldr	r2, [pc, #512]	; (8004300 <HAL_DMA_IRQHandler+0x69c>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d03b      	beq.n	800417a <HAL_DMA_IRQHandler+0x516>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a7f      	ldr	r2, [pc, #508]	; (8004304 <HAL_DMA_IRQHandler+0x6a0>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d036      	beq.n	800417a <HAL_DMA_IRQHandler+0x516>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a7d      	ldr	r2, [pc, #500]	; (8004308 <HAL_DMA_IRQHandler+0x6a4>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d031      	beq.n	800417a <HAL_DMA_IRQHandler+0x516>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a7c      	ldr	r2, [pc, #496]	; (800430c <HAL_DMA_IRQHandler+0x6a8>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d02c      	beq.n	800417a <HAL_DMA_IRQHandler+0x516>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a7a      	ldr	r2, [pc, #488]	; (8004310 <HAL_DMA_IRQHandler+0x6ac>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d027      	beq.n	800417a <HAL_DMA_IRQHandler+0x516>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a79      	ldr	r2, [pc, #484]	; (8004314 <HAL_DMA_IRQHandler+0x6b0>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d022      	beq.n	800417a <HAL_DMA_IRQHandler+0x516>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a77      	ldr	r2, [pc, #476]	; (8004318 <HAL_DMA_IRQHandler+0x6b4>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d01d      	beq.n	800417a <HAL_DMA_IRQHandler+0x516>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a76      	ldr	r2, [pc, #472]	; (800431c <HAL_DMA_IRQHandler+0x6b8>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d018      	beq.n	800417a <HAL_DMA_IRQHandler+0x516>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a74      	ldr	r2, [pc, #464]	; (8004320 <HAL_DMA_IRQHandler+0x6bc>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d013      	beq.n	800417a <HAL_DMA_IRQHandler+0x516>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a73      	ldr	r2, [pc, #460]	; (8004324 <HAL_DMA_IRQHandler+0x6c0>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d00e      	beq.n	800417a <HAL_DMA_IRQHandler+0x516>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a71      	ldr	r2, [pc, #452]	; (8004328 <HAL_DMA_IRQHandler+0x6c4>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d009      	beq.n	800417a <HAL_DMA_IRQHandler+0x516>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a70      	ldr	r2, [pc, #448]	; (800432c <HAL_DMA_IRQHandler+0x6c8>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d004      	beq.n	800417a <HAL_DMA_IRQHandler+0x516>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a6e      	ldr	r2, [pc, #440]	; (8004330 <HAL_DMA_IRQHandler+0x6cc>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d10a      	bne.n	8004190 <HAL_DMA_IRQHandler+0x52c>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0308 	and.w	r3, r3, #8
 8004184:	2b00      	cmp	r3, #0
 8004186:	bf14      	ite	ne
 8004188:	2301      	movne	r3, #1
 800418a:	2300      	moveq	r3, #0
 800418c:	b2db      	uxtb	r3, r3
 800418e:	e009      	b.n	80041a4 <HAL_DMA_IRQHandler+0x540>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0304 	and.w	r3, r3, #4
 800419a:	2b00      	cmp	r3, #0
 800419c:	bf14      	ite	ne
 800419e:	2301      	movne	r3, #1
 80041a0:	2300      	moveq	r3, #0
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d03e      	beq.n	8004226 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ac:	f003 031f 	and.w	r3, r3, #31
 80041b0:	2210      	movs	r2, #16
 80041b2:	409a      	lsls	r2, r3
 80041b4:	6a3b      	ldr	r3, [r7, #32]
 80041b6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d018      	beq.n	80041f8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d108      	bne.n	80041e6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d024      	beq.n	8004226 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	4798      	blx	r3
 80041e4:	e01f      	b.n	8004226 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d01b      	beq.n	8004226 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	4798      	blx	r3
 80041f6:	e016      	b.n	8004226 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004202:	2b00      	cmp	r3, #0
 8004204:	d107      	bne.n	8004216 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 0208 	bic.w	r2, r2, #8
 8004214:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800422a:	f003 031f 	and.w	r3, r3, #31
 800422e:	2220      	movs	r2, #32
 8004230:	409a      	lsls	r2, r3
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	4013      	ands	r3, r2
 8004236:	2b00      	cmp	r3, #0
 8004238:	f000 8110 	beq.w	800445c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a2c      	ldr	r2, [pc, #176]	; (80042f4 <HAL_DMA_IRQHandler+0x690>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d04a      	beq.n	80042dc <HAL_DMA_IRQHandler+0x678>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a2b      	ldr	r2, [pc, #172]	; (80042f8 <HAL_DMA_IRQHandler+0x694>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d045      	beq.n	80042dc <HAL_DMA_IRQHandler+0x678>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a29      	ldr	r2, [pc, #164]	; (80042fc <HAL_DMA_IRQHandler+0x698>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d040      	beq.n	80042dc <HAL_DMA_IRQHandler+0x678>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a28      	ldr	r2, [pc, #160]	; (8004300 <HAL_DMA_IRQHandler+0x69c>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d03b      	beq.n	80042dc <HAL_DMA_IRQHandler+0x678>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a26      	ldr	r2, [pc, #152]	; (8004304 <HAL_DMA_IRQHandler+0x6a0>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d036      	beq.n	80042dc <HAL_DMA_IRQHandler+0x678>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a25      	ldr	r2, [pc, #148]	; (8004308 <HAL_DMA_IRQHandler+0x6a4>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d031      	beq.n	80042dc <HAL_DMA_IRQHandler+0x678>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a23      	ldr	r2, [pc, #140]	; (800430c <HAL_DMA_IRQHandler+0x6a8>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d02c      	beq.n	80042dc <HAL_DMA_IRQHandler+0x678>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a22      	ldr	r2, [pc, #136]	; (8004310 <HAL_DMA_IRQHandler+0x6ac>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d027      	beq.n	80042dc <HAL_DMA_IRQHandler+0x678>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a20      	ldr	r2, [pc, #128]	; (8004314 <HAL_DMA_IRQHandler+0x6b0>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d022      	beq.n	80042dc <HAL_DMA_IRQHandler+0x678>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a1f      	ldr	r2, [pc, #124]	; (8004318 <HAL_DMA_IRQHandler+0x6b4>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d01d      	beq.n	80042dc <HAL_DMA_IRQHandler+0x678>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a1d      	ldr	r2, [pc, #116]	; (800431c <HAL_DMA_IRQHandler+0x6b8>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d018      	beq.n	80042dc <HAL_DMA_IRQHandler+0x678>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a1c      	ldr	r2, [pc, #112]	; (8004320 <HAL_DMA_IRQHandler+0x6bc>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d013      	beq.n	80042dc <HAL_DMA_IRQHandler+0x678>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a1a      	ldr	r2, [pc, #104]	; (8004324 <HAL_DMA_IRQHandler+0x6c0>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d00e      	beq.n	80042dc <HAL_DMA_IRQHandler+0x678>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a19      	ldr	r2, [pc, #100]	; (8004328 <HAL_DMA_IRQHandler+0x6c4>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d009      	beq.n	80042dc <HAL_DMA_IRQHandler+0x678>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a17      	ldr	r2, [pc, #92]	; (800432c <HAL_DMA_IRQHandler+0x6c8>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d004      	beq.n	80042dc <HAL_DMA_IRQHandler+0x678>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a16      	ldr	r2, [pc, #88]	; (8004330 <HAL_DMA_IRQHandler+0x6cc>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d12b      	bne.n	8004334 <HAL_DMA_IRQHandler+0x6d0>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0310 	and.w	r3, r3, #16
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	bf14      	ite	ne
 80042ea:	2301      	movne	r3, #1
 80042ec:	2300      	moveq	r3, #0
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	e02a      	b.n	8004348 <HAL_DMA_IRQHandler+0x6e4>
 80042f2:	bf00      	nop
 80042f4:	40020010 	.word	0x40020010
 80042f8:	40020028 	.word	0x40020028
 80042fc:	40020040 	.word	0x40020040
 8004300:	40020058 	.word	0x40020058
 8004304:	40020070 	.word	0x40020070
 8004308:	40020088 	.word	0x40020088
 800430c:	400200a0 	.word	0x400200a0
 8004310:	400200b8 	.word	0x400200b8
 8004314:	40020410 	.word	0x40020410
 8004318:	40020428 	.word	0x40020428
 800431c:	40020440 	.word	0x40020440
 8004320:	40020458 	.word	0x40020458
 8004324:	40020470 	.word	0x40020470
 8004328:	40020488 	.word	0x40020488
 800432c:	400204a0 	.word	0x400204a0
 8004330:	400204b8 	.word	0x400204b8
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	bf14      	ite	ne
 8004342:	2301      	movne	r3, #1
 8004344:	2300      	moveq	r3, #0
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 8087 	beq.w	800445c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004352:	f003 031f 	and.w	r3, r3, #31
 8004356:	2220      	movs	r2, #32
 8004358:	409a      	lsls	r2, r3
 800435a:	6a3b      	ldr	r3, [r7, #32]
 800435c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b04      	cmp	r3, #4
 8004368:	d139      	bne.n	80043de <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0216 	bic.w	r2, r2, #22
 8004378:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	695a      	ldr	r2, [r3, #20]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004388:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	2b00      	cmp	r3, #0
 8004390:	d103      	bne.n	800439a <HAL_DMA_IRQHandler+0x736>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004396:	2b00      	cmp	r3, #0
 8004398:	d007      	beq.n	80043aa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 0208 	bic.w	r2, r2, #8
 80043a8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ae:	f003 031f 	and.w	r3, r3, #31
 80043b2:	223f      	movs	r2, #63	; 0x3f
 80043b4:	409a      	lsls	r2, r3
 80043b6:	6a3b      	ldr	r3, [r7, #32]
 80043b8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 834a 	beq.w	8004a68 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	4798      	blx	r3
          }
          return;
 80043dc:	e344      	b.n	8004a68 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d018      	beq.n	800441e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d108      	bne.n	800440c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d02c      	beq.n	800445c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	4798      	blx	r3
 800440a:	e027      	b.n	800445c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004410:	2b00      	cmp	r3, #0
 8004412:	d023      	beq.n	800445c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	4798      	blx	r3
 800441c:	e01e      	b.n	800445c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10f      	bne.n	800444c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0210 	bic.w	r2, r2, #16
 800443a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004450:	2b00      	cmp	r3, #0
 8004452:	d003      	beq.n	800445c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 8306 	beq.w	8004a72 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 8088 	beq.w	8004584 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2204      	movs	r2, #4
 8004478:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a7a      	ldr	r2, [pc, #488]	; (800466c <HAL_DMA_IRQHandler+0xa08>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d04a      	beq.n	800451c <HAL_DMA_IRQHandler+0x8b8>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a79      	ldr	r2, [pc, #484]	; (8004670 <HAL_DMA_IRQHandler+0xa0c>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d045      	beq.n	800451c <HAL_DMA_IRQHandler+0x8b8>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a77      	ldr	r2, [pc, #476]	; (8004674 <HAL_DMA_IRQHandler+0xa10>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d040      	beq.n	800451c <HAL_DMA_IRQHandler+0x8b8>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a76      	ldr	r2, [pc, #472]	; (8004678 <HAL_DMA_IRQHandler+0xa14>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d03b      	beq.n	800451c <HAL_DMA_IRQHandler+0x8b8>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a74      	ldr	r2, [pc, #464]	; (800467c <HAL_DMA_IRQHandler+0xa18>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d036      	beq.n	800451c <HAL_DMA_IRQHandler+0x8b8>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a73      	ldr	r2, [pc, #460]	; (8004680 <HAL_DMA_IRQHandler+0xa1c>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d031      	beq.n	800451c <HAL_DMA_IRQHandler+0x8b8>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a71      	ldr	r2, [pc, #452]	; (8004684 <HAL_DMA_IRQHandler+0xa20>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d02c      	beq.n	800451c <HAL_DMA_IRQHandler+0x8b8>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a70      	ldr	r2, [pc, #448]	; (8004688 <HAL_DMA_IRQHandler+0xa24>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d027      	beq.n	800451c <HAL_DMA_IRQHandler+0x8b8>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a6e      	ldr	r2, [pc, #440]	; (800468c <HAL_DMA_IRQHandler+0xa28>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d022      	beq.n	800451c <HAL_DMA_IRQHandler+0x8b8>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a6d      	ldr	r2, [pc, #436]	; (8004690 <HAL_DMA_IRQHandler+0xa2c>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d01d      	beq.n	800451c <HAL_DMA_IRQHandler+0x8b8>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a6b      	ldr	r2, [pc, #428]	; (8004694 <HAL_DMA_IRQHandler+0xa30>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d018      	beq.n	800451c <HAL_DMA_IRQHandler+0x8b8>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a6a      	ldr	r2, [pc, #424]	; (8004698 <HAL_DMA_IRQHandler+0xa34>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d013      	beq.n	800451c <HAL_DMA_IRQHandler+0x8b8>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a68      	ldr	r2, [pc, #416]	; (800469c <HAL_DMA_IRQHandler+0xa38>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d00e      	beq.n	800451c <HAL_DMA_IRQHandler+0x8b8>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a67      	ldr	r2, [pc, #412]	; (80046a0 <HAL_DMA_IRQHandler+0xa3c>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d009      	beq.n	800451c <HAL_DMA_IRQHandler+0x8b8>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a65      	ldr	r2, [pc, #404]	; (80046a4 <HAL_DMA_IRQHandler+0xa40>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d004      	beq.n	800451c <HAL_DMA_IRQHandler+0x8b8>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a64      	ldr	r2, [pc, #400]	; (80046a8 <HAL_DMA_IRQHandler+0xa44>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d108      	bne.n	800452e <HAL_DMA_IRQHandler+0x8ca>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 0201 	bic.w	r2, r2, #1
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	e007      	b.n	800453e <HAL_DMA_IRQHandler+0x8da>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f022 0201 	bic.w	r2, r2, #1
 800453c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	3301      	adds	r3, #1
 8004542:	60fb      	str	r3, [r7, #12]
 8004544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004546:	429a      	cmp	r2, r3
 8004548:	d307      	bcc.n	800455a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1f2      	bne.n	800453e <HAL_DMA_IRQHandler+0x8da>
 8004558:	e000      	b.n	800455c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800455a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	d004      	beq.n	8004574 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2203      	movs	r2, #3
 800456e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004572:	e003      	b.n	800457c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 8272 	beq.w	8004a72 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	4798      	blx	r3
 8004596:	e26c      	b.n	8004a72 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a43      	ldr	r2, [pc, #268]	; (80046ac <HAL_DMA_IRQHandler+0xa48>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d022      	beq.n	80045e8 <HAL_DMA_IRQHandler+0x984>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a42      	ldr	r2, [pc, #264]	; (80046b0 <HAL_DMA_IRQHandler+0xa4c>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d01d      	beq.n	80045e8 <HAL_DMA_IRQHandler+0x984>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a40      	ldr	r2, [pc, #256]	; (80046b4 <HAL_DMA_IRQHandler+0xa50>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d018      	beq.n	80045e8 <HAL_DMA_IRQHandler+0x984>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a3f      	ldr	r2, [pc, #252]	; (80046b8 <HAL_DMA_IRQHandler+0xa54>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d013      	beq.n	80045e8 <HAL_DMA_IRQHandler+0x984>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a3d      	ldr	r2, [pc, #244]	; (80046bc <HAL_DMA_IRQHandler+0xa58>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d00e      	beq.n	80045e8 <HAL_DMA_IRQHandler+0x984>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a3c      	ldr	r2, [pc, #240]	; (80046c0 <HAL_DMA_IRQHandler+0xa5c>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d009      	beq.n	80045e8 <HAL_DMA_IRQHandler+0x984>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a3a      	ldr	r2, [pc, #232]	; (80046c4 <HAL_DMA_IRQHandler+0xa60>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d004      	beq.n	80045e8 <HAL_DMA_IRQHandler+0x984>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a39      	ldr	r2, [pc, #228]	; (80046c8 <HAL_DMA_IRQHandler+0xa64>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d101      	bne.n	80045ec <HAL_DMA_IRQHandler+0x988>
 80045e8:	2301      	movs	r3, #1
 80045ea:	e000      	b.n	80045ee <HAL_DMA_IRQHandler+0x98a>
 80045ec:	2300      	movs	r3, #0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f000 823f 	beq.w	8004a72 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004600:	f003 031f 	and.w	r3, r3, #31
 8004604:	2204      	movs	r2, #4
 8004606:	409a      	lsls	r2, r3
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	4013      	ands	r3, r2
 800460c:	2b00      	cmp	r3, #0
 800460e:	f000 80cd 	beq.w	80047ac <HAL_DMA_IRQHandler+0xb48>
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	f003 0304 	and.w	r3, r3, #4
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 80c7 	beq.w	80047ac <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004622:	f003 031f 	and.w	r3, r3, #31
 8004626:	2204      	movs	r2, #4
 8004628:	409a      	lsls	r2, r3
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d049      	beq.n	80046cc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d109      	bne.n	8004656 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 8210 	beq.w	8004a6c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004654:	e20a      	b.n	8004a6c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465a:	2b00      	cmp	r3, #0
 800465c:	f000 8206 	beq.w	8004a6c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004668:	e200      	b.n	8004a6c <HAL_DMA_IRQHandler+0xe08>
 800466a:	bf00      	nop
 800466c:	40020010 	.word	0x40020010
 8004670:	40020028 	.word	0x40020028
 8004674:	40020040 	.word	0x40020040
 8004678:	40020058 	.word	0x40020058
 800467c:	40020070 	.word	0x40020070
 8004680:	40020088 	.word	0x40020088
 8004684:	400200a0 	.word	0x400200a0
 8004688:	400200b8 	.word	0x400200b8
 800468c:	40020410 	.word	0x40020410
 8004690:	40020428 	.word	0x40020428
 8004694:	40020440 	.word	0x40020440
 8004698:	40020458 	.word	0x40020458
 800469c:	40020470 	.word	0x40020470
 80046a0:	40020488 	.word	0x40020488
 80046a4:	400204a0 	.word	0x400204a0
 80046a8:	400204b8 	.word	0x400204b8
 80046ac:	58025408 	.word	0x58025408
 80046b0:	5802541c 	.word	0x5802541c
 80046b4:	58025430 	.word	0x58025430
 80046b8:	58025444 	.word	0x58025444
 80046bc:	58025458 	.word	0x58025458
 80046c0:	5802546c 	.word	0x5802546c
 80046c4:	58025480 	.word	0x58025480
 80046c8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	f003 0320 	and.w	r3, r3, #32
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d160      	bne.n	8004798 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a7f      	ldr	r2, [pc, #508]	; (80048d8 <HAL_DMA_IRQHandler+0xc74>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d04a      	beq.n	8004776 <HAL_DMA_IRQHandler+0xb12>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a7d      	ldr	r2, [pc, #500]	; (80048dc <HAL_DMA_IRQHandler+0xc78>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d045      	beq.n	8004776 <HAL_DMA_IRQHandler+0xb12>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a7c      	ldr	r2, [pc, #496]	; (80048e0 <HAL_DMA_IRQHandler+0xc7c>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d040      	beq.n	8004776 <HAL_DMA_IRQHandler+0xb12>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a7a      	ldr	r2, [pc, #488]	; (80048e4 <HAL_DMA_IRQHandler+0xc80>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d03b      	beq.n	8004776 <HAL_DMA_IRQHandler+0xb12>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a79      	ldr	r2, [pc, #484]	; (80048e8 <HAL_DMA_IRQHandler+0xc84>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d036      	beq.n	8004776 <HAL_DMA_IRQHandler+0xb12>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a77      	ldr	r2, [pc, #476]	; (80048ec <HAL_DMA_IRQHandler+0xc88>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d031      	beq.n	8004776 <HAL_DMA_IRQHandler+0xb12>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a76      	ldr	r2, [pc, #472]	; (80048f0 <HAL_DMA_IRQHandler+0xc8c>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d02c      	beq.n	8004776 <HAL_DMA_IRQHandler+0xb12>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a74      	ldr	r2, [pc, #464]	; (80048f4 <HAL_DMA_IRQHandler+0xc90>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d027      	beq.n	8004776 <HAL_DMA_IRQHandler+0xb12>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a73      	ldr	r2, [pc, #460]	; (80048f8 <HAL_DMA_IRQHandler+0xc94>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d022      	beq.n	8004776 <HAL_DMA_IRQHandler+0xb12>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a71      	ldr	r2, [pc, #452]	; (80048fc <HAL_DMA_IRQHandler+0xc98>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d01d      	beq.n	8004776 <HAL_DMA_IRQHandler+0xb12>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a70      	ldr	r2, [pc, #448]	; (8004900 <HAL_DMA_IRQHandler+0xc9c>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d018      	beq.n	8004776 <HAL_DMA_IRQHandler+0xb12>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a6e      	ldr	r2, [pc, #440]	; (8004904 <HAL_DMA_IRQHandler+0xca0>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d013      	beq.n	8004776 <HAL_DMA_IRQHandler+0xb12>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a6d      	ldr	r2, [pc, #436]	; (8004908 <HAL_DMA_IRQHandler+0xca4>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d00e      	beq.n	8004776 <HAL_DMA_IRQHandler+0xb12>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a6b      	ldr	r2, [pc, #428]	; (800490c <HAL_DMA_IRQHandler+0xca8>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d009      	beq.n	8004776 <HAL_DMA_IRQHandler+0xb12>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a6a      	ldr	r2, [pc, #424]	; (8004910 <HAL_DMA_IRQHandler+0xcac>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d004      	beq.n	8004776 <HAL_DMA_IRQHandler+0xb12>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a68      	ldr	r2, [pc, #416]	; (8004914 <HAL_DMA_IRQHandler+0xcb0>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d108      	bne.n	8004788 <HAL_DMA_IRQHandler+0xb24>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f022 0208 	bic.w	r2, r2, #8
 8004784:	601a      	str	r2, [r3, #0]
 8004786:	e007      	b.n	8004798 <HAL_DMA_IRQHandler+0xb34>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0204 	bic.w	r2, r2, #4
 8004796:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479c:	2b00      	cmp	r3, #0
 800479e:	f000 8165 	beq.w	8004a6c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047aa:	e15f      	b.n	8004a6c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b0:	f003 031f 	and.w	r3, r3, #31
 80047b4:	2202      	movs	r2, #2
 80047b6:	409a      	lsls	r2, r3
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	4013      	ands	r3, r2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f000 80c5 	beq.w	800494c <HAL_DMA_IRQHandler+0xce8>
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 80bf 	beq.w	800494c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047d2:	f003 031f 	and.w	r3, r3, #31
 80047d6:	2202      	movs	r2, #2
 80047d8:	409a      	lsls	r2, r3
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d018      	beq.n	800481a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d109      	bne.n	8004806 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	f000 813a 	beq.w	8004a70 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004804:	e134      	b.n	8004a70 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 8130 	beq.w	8004a70 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004818:	e12a      	b.n	8004a70 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	f003 0320 	and.w	r3, r3, #32
 8004820:	2b00      	cmp	r3, #0
 8004822:	f040 8089 	bne.w	8004938 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a2b      	ldr	r2, [pc, #172]	; (80048d8 <HAL_DMA_IRQHandler+0xc74>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d04a      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xc62>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a29      	ldr	r2, [pc, #164]	; (80048dc <HAL_DMA_IRQHandler+0xc78>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d045      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xc62>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a28      	ldr	r2, [pc, #160]	; (80048e0 <HAL_DMA_IRQHandler+0xc7c>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d040      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xc62>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a26      	ldr	r2, [pc, #152]	; (80048e4 <HAL_DMA_IRQHandler+0xc80>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d03b      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xc62>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a25      	ldr	r2, [pc, #148]	; (80048e8 <HAL_DMA_IRQHandler+0xc84>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d036      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xc62>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a23      	ldr	r2, [pc, #140]	; (80048ec <HAL_DMA_IRQHandler+0xc88>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d031      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xc62>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a22      	ldr	r2, [pc, #136]	; (80048f0 <HAL_DMA_IRQHandler+0xc8c>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d02c      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xc62>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a20      	ldr	r2, [pc, #128]	; (80048f4 <HAL_DMA_IRQHandler+0xc90>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d027      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xc62>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a1f      	ldr	r2, [pc, #124]	; (80048f8 <HAL_DMA_IRQHandler+0xc94>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d022      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xc62>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a1d      	ldr	r2, [pc, #116]	; (80048fc <HAL_DMA_IRQHandler+0xc98>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d01d      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xc62>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a1c      	ldr	r2, [pc, #112]	; (8004900 <HAL_DMA_IRQHandler+0xc9c>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d018      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xc62>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a1a      	ldr	r2, [pc, #104]	; (8004904 <HAL_DMA_IRQHandler+0xca0>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d013      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xc62>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a19      	ldr	r2, [pc, #100]	; (8004908 <HAL_DMA_IRQHandler+0xca4>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d00e      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xc62>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a17      	ldr	r2, [pc, #92]	; (800490c <HAL_DMA_IRQHandler+0xca8>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d009      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xc62>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a16      	ldr	r2, [pc, #88]	; (8004910 <HAL_DMA_IRQHandler+0xcac>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d004      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xc62>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a14      	ldr	r2, [pc, #80]	; (8004914 <HAL_DMA_IRQHandler+0xcb0>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d128      	bne.n	8004918 <HAL_DMA_IRQHandler+0xcb4>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f022 0214 	bic.w	r2, r2, #20
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	e027      	b.n	8004928 <HAL_DMA_IRQHandler+0xcc4>
 80048d8:	40020010 	.word	0x40020010
 80048dc:	40020028 	.word	0x40020028
 80048e0:	40020040 	.word	0x40020040
 80048e4:	40020058 	.word	0x40020058
 80048e8:	40020070 	.word	0x40020070
 80048ec:	40020088 	.word	0x40020088
 80048f0:	400200a0 	.word	0x400200a0
 80048f4:	400200b8 	.word	0x400200b8
 80048f8:	40020410 	.word	0x40020410
 80048fc:	40020428 	.word	0x40020428
 8004900:	40020440 	.word	0x40020440
 8004904:	40020458 	.word	0x40020458
 8004908:	40020470 	.word	0x40020470
 800490c:	40020488 	.word	0x40020488
 8004910:	400204a0 	.word	0x400204a0
 8004914:	400204b8 	.word	0x400204b8
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f022 020a 	bic.w	r2, r2, #10
 8004926:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800493c:	2b00      	cmp	r3, #0
 800493e:	f000 8097 	beq.w	8004a70 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800494a:	e091      	b.n	8004a70 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004950:	f003 031f 	and.w	r3, r3, #31
 8004954:	2208      	movs	r2, #8
 8004956:	409a      	lsls	r2, r3
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	4013      	ands	r3, r2
 800495c:	2b00      	cmp	r3, #0
 800495e:	f000 8088 	beq.w	8004a72 <HAL_DMA_IRQHandler+0xe0e>
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	f003 0308 	and.w	r3, r3, #8
 8004968:	2b00      	cmp	r3, #0
 800496a:	f000 8082 	beq.w	8004a72 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a41      	ldr	r2, [pc, #260]	; (8004a78 <HAL_DMA_IRQHandler+0xe14>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d04a      	beq.n	8004a0e <HAL_DMA_IRQHandler+0xdaa>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a3f      	ldr	r2, [pc, #252]	; (8004a7c <HAL_DMA_IRQHandler+0xe18>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d045      	beq.n	8004a0e <HAL_DMA_IRQHandler+0xdaa>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a3e      	ldr	r2, [pc, #248]	; (8004a80 <HAL_DMA_IRQHandler+0xe1c>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d040      	beq.n	8004a0e <HAL_DMA_IRQHandler+0xdaa>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a3c      	ldr	r2, [pc, #240]	; (8004a84 <HAL_DMA_IRQHandler+0xe20>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d03b      	beq.n	8004a0e <HAL_DMA_IRQHandler+0xdaa>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a3b      	ldr	r2, [pc, #236]	; (8004a88 <HAL_DMA_IRQHandler+0xe24>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d036      	beq.n	8004a0e <HAL_DMA_IRQHandler+0xdaa>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a39      	ldr	r2, [pc, #228]	; (8004a8c <HAL_DMA_IRQHandler+0xe28>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d031      	beq.n	8004a0e <HAL_DMA_IRQHandler+0xdaa>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a38      	ldr	r2, [pc, #224]	; (8004a90 <HAL_DMA_IRQHandler+0xe2c>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d02c      	beq.n	8004a0e <HAL_DMA_IRQHandler+0xdaa>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a36      	ldr	r2, [pc, #216]	; (8004a94 <HAL_DMA_IRQHandler+0xe30>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d027      	beq.n	8004a0e <HAL_DMA_IRQHandler+0xdaa>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a35      	ldr	r2, [pc, #212]	; (8004a98 <HAL_DMA_IRQHandler+0xe34>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d022      	beq.n	8004a0e <HAL_DMA_IRQHandler+0xdaa>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a33      	ldr	r2, [pc, #204]	; (8004a9c <HAL_DMA_IRQHandler+0xe38>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d01d      	beq.n	8004a0e <HAL_DMA_IRQHandler+0xdaa>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a32      	ldr	r2, [pc, #200]	; (8004aa0 <HAL_DMA_IRQHandler+0xe3c>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d018      	beq.n	8004a0e <HAL_DMA_IRQHandler+0xdaa>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a30      	ldr	r2, [pc, #192]	; (8004aa4 <HAL_DMA_IRQHandler+0xe40>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d013      	beq.n	8004a0e <HAL_DMA_IRQHandler+0xdaa>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a2f      	ldr	r2, [pc, #188]	; (8004aa8 <HAL_DMA_IRQHandler+0xe44>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d00e      	beq.n	8004a0e <HAL_DMA_IRQHandler+0xdaa>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a2d      	ldr	r2, [pc, #180]	; (8004aac <HAL_DMA_IRQHandler+0xe48>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d009      	beq.n	8004a0e <HAL_DMA_IRQHandler+0xdaa>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a2c      	ldr	r2, [pc, #176]	; (8004ab0 <HAL_DMA_IRQHandler+0xe4c>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d004      	beq.n	8004a0e <HAL_DMA_IRQHandler+0xdaa>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a2a      	ldr	r2, [pc, #168]	; (8004ab4 <HAL_DMA_IRQHandler+0xe50>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d108      	bne.n	8004a20 <HAL_DMA_IRQHandler+0xdbc>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 021c 	bic.w	r2, r2, #28
 8004a1c:	601a      	str	r2, [r3, #0]
 8004a1e:	e007      	b.n	8004a30 <HAL_DMA_IRQHandler+0xdcc>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f022 020e 	bic.w	r2, r2, #14
 8004a2e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a34:	f003 031f 	and.w	r3, r3, #31
 8004a38:	2201      	movs	r2, #1
 8004a3a:	409a      	lsls	r2, r3
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d009      	beq.n	8004a72 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	4798      	blx	r3
 8004a66:	e004      	b.n	8004a72 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004a68:	bf00      	nop
 8004a6a:	e002      	b.n	8004a72 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a6c:	bf00      	nop
 8004a6e:	e000      	b.n	8004a72 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a70:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004a72:	3728      	adds	r7, #40	; 0x28
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	40020010 	.word	0x40020010
 8004a7c:	40020028 	.word	0x40020028
 8004a80:	40020040 	.word	0x40020040
 8004a84:	40020058 	.word	0x40020058
 8004a88:	40020070 	.word	0x40020070
 8004a8c:	40020088 	.word	0x40020088
 8004a90:	400200a0 	.word	0x400200a0
 8004a94:	400200b8 	.word	0x400200b8
 8004a98:	40020410 	.word	0x40020410
 8004a9c:	40020428 	.word	0x40020428
 8004aa0:	40020440 	.word	0x40020440
 8004aa4:	40020458 	.word	0x40020458
 8004aa8:	40020470 	.word	0x40020470
 8004aac:	40020488 	.word	0x40020488
 8004ab0:	400204a0 	.word	0x400204a0
 8004ab4:	400204b8 	.word	0x400204b8

08004ab8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b087      	sub	sp, #28
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
 8004ac4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aca:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a7f      	ldr	r2, [pc, #508]	; (8004cd4 <DMA_SetConfig+0x21c>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d072      	beq.n	8004bc2 <DMA_SetConfig+0x10a>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a7d      	ldr	r2, [pc, #500]	; (8004cd8 <DMA_SetConfig+0x220>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d06d      	beq.n	8004bc2 <DMA_SetConfig+0x10a>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a7c      	ldr	r2, [pc, #496]	; (8004cdc <DMA_SetConfig+0x224>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d068      	beq.n	8004bc2 <DMA_SetConfig+0x10a>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a7a      	ldr	r2, [pc, #488]	; (8004ce0 <DMA_SetConfig+0x228>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d063      	beq.n	8004bc2 <DMA_SetConfig+0x10a>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a79      	ldr	r2, [pc, #484]	; (8004ce4 <DMA_SetConfig+0x22c>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d05e      	beq.n	8004bc2 <DMA_SetConfig+0x10a>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a77      	ldr	r2, [pc, #476]	; (8004ce8 <DMA_SetConfig+0x230>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d059      	beq.n	8004bc2 <DMA_SetConfig+0x10a>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a76      	ldr	r2, [pc, #472]	; (8004cec <DMA_SetConfig+0x234>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d054      	beq.n	8004bc2 <DMA_SetConfig+0x10a>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a74      	ldr	r2, [pc, #464]	; (8004cf0 <DMA_SetConfig+0x238>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d04f      	beq.n	8004bc2 <DMA_SetConfig+0x10a>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a73      	ldr	r2, [pc, #460]	; (8004cf4 <DMA_SetConfig+0x23c>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d04a      	beq.n	8004bc2 <DMA_SetConfig+0x10a>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a71      	ldr	r2, [pc, #452]	; (8004cf8 <DMA_SetConfig+0x240>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d045      	beq.n	8004bc2 <DMA_SetConfig+0x10a>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a70      	ldr	r2, [pc, #448]	; (8004cfc <DMA_SetConfig+0x244>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d040      	beq.n	8004bc2 <DMA_SetConfig+0x10a>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a6e      	ldr	r2, [pc, #440]	; (8004d00 <DMA_SetConfig+0x248>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d03b      	beq.n	8004bc2 <DMA_SetConfig+0x10a>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a6d      	ldr	r2, [pc, #436]	; (8004d04 <DMA_SetConfig+0x24c>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d036      	beq.n	8004bc2 <DMA_SetConfig+0x10a>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a6b      	ldr	r2, [pc, #428]	; (8004d08 <DMA_SetConfig+0x250>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d031      	beq.n	8004bc2 <DMA_SetConfig+0x10a>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a6a      	ldr	r2, [pc, #424]	; (8004d0c <DMA_SetConfig+0x254>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d02c      	beq.n	8004bc2 <DMA_SetConfig+0x10a>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a68      	ldr	r2, [pc, #416]	; (8004d10 <DMA_SetConfig+0x258>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d027      	beq.n	8004bc2 <DMA_SetConfig+0x10a>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a67      	ldr	r2, [pc, #412]	; (8004d14 <DMA_SetConfig+0x25c>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d022      	beq.n	8004bc2 <DMA_SetConfig+0x10a>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a65      	ldr	r2, [pc, #404]	; (8004d18 <DMA_SetConfig+0x260>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d01d      	beq.n	8004bc2 <DMA_SetConfig+0x10a>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a64      	ldr	r2, [pc, #400]	; (8004d1c <DMA_SetConfig+0x264>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d018      	beq.n	8004bc2 <DMA_SetConfig+0x10a>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a62      	ldr	r2, [pc, #392]	; (8004d20 <DMA_SetConfig+0x268>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d013      	beq.n	8004bc2 <DMA_SetConfig+0x10a>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a61      	ldr	r2, [pc, #388]	; (8004d24 <DMA_SetConfig+0x26c>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d00e      	beq.n	8004bc2 <DMA_SetConfig+0x10a>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a5f      	ldr	r2, [pc, #380]	; (8004d28 <DMA_SetConfig+0x270>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d009      	beq.n	8004bc2 <DMA_SetConfig+0x10a>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a5e      	ldr	r2, [pc, #376]	; (8004d2c <DMA_SetConfig+0x274>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d004      	beq.n	8004bc2 <DMA_SetConfig+0x10a>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a5c      	ldr	r2, [pc, #368]	; (8004d30 <DMA_SetConfig+0x278>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d101      	bne.n	8004bc6 <DMA_SetConfig+0x10e>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e000      	b.n	8004bc8 <DMA_SetConfig+0x110>
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d00d      	beq.n	8004be8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004bd4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d004      	beq.n	8004be8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004be6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a39      	ldr	r2, [pc, #228]	; (8004cd4 <DMA_SetConfig+0x21c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d04a      	beq.n	8004c88 <DMA_SetConfig+0x1d0>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a38      	ldr	r2, [pc, #224]	; (8004cd8 <DMA_SetConfig+0x220>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d045      	beq.n	8004c88 <DMA_SetConfig+0x1d0>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a36      	ldr	r2, [pc, #216]	; (8004cdc <DMA_SetConfig+0x224>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d040      	beq.n	8004c88 <DMA_SetConfig+0x1d0>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a35      	ldr	r2, [pc, #212]	; (8004ce0 <DMA_SetConfig+0x228>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d03b      	beq.n	8004c88 <DMA_SetConfig+0x1d0>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a33      	ldr	r2, [pc, #204]	; (8004ce4 <DMA_SetConfig+0x22c>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d036      	beq.n	8004c88 <DMA_SetConfig+0x1d0>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a32      	ldr	r2, [pc, #200]	; (8004ce8 <DMA_SetConfig+0x230>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d031      	beq.n	8004c88 <DMA_SetConfig+0x1d0>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a30      	ldr	r2, [pc, #192]	; (8004cec <DMA_SetConfig+0x234>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d02c      	beq.n	8004c88 <DMA_SetConfig+0x1d0>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a2f      	ldr	r2, [pc, #188]	; (8004cf0 <DMA_SetConfig+0x238>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d027      	beq.n	8004c88 <DMA_SetConfig+0x1d0>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a2d      	ldr	r2, [pc, #180]	; (8004cf4 <DMA_SetConfig+0x23c>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d022      	beq.n	8004c88 <DMA_SetConfig+0x1d0>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a2c      	ldr	r2, [pc, #176]	; (8004cf8 <DMA_SetConfig+0x240>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d01d      	beq.n	8004c88 <DMA_SetConfig+0x1d0>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a2a      	ldr	r2, [pc, #168]	; (8004cfc <DMA_SetConfig+0x244>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d018      	beq.n	8004c88 <DMA_SetConfig+0x1d0>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a29      	ldr	r2, [pc, #164]	; (8004d00 <DMA_SetConfig+0x248>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d013      	beq.n	8004c88 <DMA_SetConfig+0x1d0>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a27      	ldr	r2, [pc, #156]	; (8004d04 <DMA_SetConfig+0x24c>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d00e      	beq.n	8004c88 <DMA_SetConfig+0x1d0>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a26      	ldr	r2, [pc, #152]	; (8004d08 <DMA_SetConfig+0x250>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d009      	beq.n	8004c88 <DMA_SetConfig+0x1d0>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a24      	ldr	r2, [pc, #144]	; (8004d0c <DMA_SetConfig+0x254>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d004      	beq.n	8004c88 <DMA_SetConfig+0x1d0>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a23      	ldr	r2, [pc, #140]	; (8004d10 <DMA_SetConfig+0x258>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d101      	bne.n	8004c8c <DMA_SetConfig+0x1d4>
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e000      	b.n	8004c8e <DMA_SetConfig+0x1d6>
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d059      	beq.n	8004d46 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c96:	f003 031f 	and.w	r3, r3, #31
 8004c9a:	223f      	movs	r2, #63	; 0x3f
 8004c9c:	409a      	lsls	r2, r3
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004cb0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	2b40      	cmp	r3, #64	; 0x40
 8004cc0:	d138      	bne.n	8004d34 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004cd2:	e086      	b.n	8004de2 <DMA_SetConfig+0x32a>
 8004cd4:	40020010 	.word	0x40020010
 8004cd8:	40020028 	.word	0x40020028
 8004cdc:	40020040 	.word	0x40020040
 8004ce0:	40020058 	.word	0x40020058
 8004ce4:	40020070 	.word	0x40020070
 8004ce8:	40020088 	.word	0x40020088
 8004cec:	400200a0 	.word	0x400200a0
 8004cf0:	400200b8 	.word	0x400200b8
 8004cf4:	40020410 	.word	0x40020410
 8004cf8:	40020428 	.word	0x40020428
 8004cfc:	40020440 	.word	0x40020440
 8004d00:	40020458 	.word	0x40020458
 8004d04:	40020470 	.word	0x40020470
 8004d08:	40020488 	.word	0x40020488
 8004d0c:	400204a0 	.word	0x400204a0
 8004d10:	400204b8 	.word	0x400204b8
 8004d14:	58025408 	.word	0x58025408
 8004d18:	5802541c 	.word	0x5802541c
 8004d1c:	58025430 	.word	0x58025430
 8004d20:	58025444 	.word	0x58025444
 8004d24:	58025458 	.word	0x58025458
 8004d28:	5802546c 	.word	0x5802546c
 8004d2c:	58025480 	.word	0x58025480
 8004d30:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	60da      	str	r2, [r3, #12]
}
 8004d44:	e04d      	b.n	8004de2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a29      	ldr	r2, [pc, #164]	; (8004df0 <DMA_SetConfig+0x338>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d022      	beq.n	8004d96 <DMA_SetConfig+0x2de>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a27      	ldr	r2, [pc, #156]	; (8004df4 <DMA_SetConfig+0x33c>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d01d      	beq.n	8004d96 <DMA_SetConfig+0x2de>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a26      	ldr	r2, [pc, #152]	; (8004df8 <DMA_SetConfig+0x340>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d018      	beq.n	8004d96 <DMA_SetConfig+0x2de>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a24      	ldr	r2, [pc, #144]	; (8004dfc <DMA_SetConfig+0x344>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d013      	beq.n	8004d96 <DMA_SetConfig+0x2de>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a23      	ldr	r2, [pc, #140]	; (8004e00 <DMA_SetConfig+0x348>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d00e      	beq.n	8004d96 <DMA_SetConfig+0x2de>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a21      	ldr	r2, [pc, #132]	; (8004e04 <DMA_SetConfig+0x34c>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d009      	beq.n	8004d96 <DMA_SetConfig+0x2de>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a20      	ldr	r2, [pc, #128]	; (8004e08 <DMA_SetConfig+0x350>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d004      	beq.n	8004d96 <DMA_SetConfig+0x2de>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a1e      	ldr	r2, [pc, #120]	; (8004e0c <DMA_SetConfig+0x354>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d101      	bne.n	8004d9a <DMA_SetConfig+0x2e2>
 8004d96:	2301      	movs	r3, #1
 8004d98:	e000      	b.n	8004d9c <DMA_SetConfig+0x2e4>
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d020      	beq.n	8004de2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da4:	f003 031f 	and.w	r3, r3, #31
 8004da8:	2201      	movs	r2, #1
 8004daa:	409a      	lsls	r2, r3
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	683a      	ldr	r2, [r7, #0]
 8004db6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	2b40      	cmp	r3, #64	; 0x40
 8004dbe:	d108      	bne.n	8004dd2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	60da      	str	r2, [r3, #12]
}
 8004dd0:	e007      	b.n	8004de2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	60da      	str	r2, [r3, #12]
}
 8004de2:	bf00      	nop
 8004de4:	371c      	adds	r7, #28
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	58025408 	.word	0x58025408
 8004df4:	5802541c 	.word	0x5802541c
 8004df8:	58025430 	.word	0x58025430
 8004dfc:	58025444 	.word	0x58025444
 8004e00:	58025458 	.word	0x58025458
 8004e04:	5802546c 	.word	0x5802546c
 8004e08:	58025480 	.word	0x58025480
 8004e0c:	58025494 	.word	0x58025494

08004e10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a42      	ldr	r2, [pc, #264]	; (8004f28 <DMA_CalcBaseAndBitshift+0x118>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d04a      	beq.n	8004eb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a41      	ldr	r2, [pc, #260]	; (8004f2c <DMA_CalcBaseAndBitshift+0x11c>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d045      	beq.n	8004eb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a3f      	ldr	r2, [pc, #252]	; (8004f30 <DMA_CalcBaseAndBitshift+0x120>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d040      	beq.n	8004eb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a3e      	ldr	r2, [pc, #248]	; (8004f34 <DMA_CalcBaseAndBitshift+0x124>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d03b      	beq.n	8004eb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a3c      	ldr	r2, [pc, #240]	; (8004f38 <DMA_CalcBaseAndBitshift+0x128>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d036      	beq.n	8004eb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a3b      	ldr	r2, [pc, #236]	; (8004f3c <DMA_CalcBaseAndBitshift+0x12c>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d031      	beq.n	8004eb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a39      	ldr	r2, [pc, #228]	; (8004f40 <DMA_CalcBaseAndBitshift+0x130>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d02c      	beq.n	8004eb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a38      	ldr	r2, [pc, #224]	; (8004f44 <DMA_CalcBaseAndBitshift+0x134>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d027      	beq.n	8004eb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a36      	ldr	r2, [pc, #216]	; (8004f48 <DMA_CalcBaseAndBitshift+0x138>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d022      	beq.n	8004eb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a35      	ldr	r2, [pc, #212]	; (8004f4c <DMA_CalcBaseAndBitshift+0x13c>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d01d      	beq.n	8004eb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a33      	ldr	r2, [pc, #204]	; (8004f50 <DMA_CalcBaseAndBitshift+0x140>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d018      	beq.n	8004eb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a32      	ldr	r2, [pc, #200]	; (8004f54 <DMA_CalcBaseAndBitshift+0x144>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d013      	beq.n	8004eb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a30      	ldr	r2, [pc, #192]	; (8004f58 <DMA_CalcBaseAndBitshift+0x148>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d00e      	beq.n	8004eb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a2f      	ldr	r2, [pc, #188]	; (8004f5c <DMA_CalcBaseAndBitshift+0x14c>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d009      	beq.n	8004eb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a2d      	ldr	r2, [pc, #180]	; (8004f60 <DMA_CalcBaseAndBitshift+0x150>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d004      	beq.n	8004eb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a2c      	ldr	r2, [pc, #176]	; (8004f64 <DMA_CalcBaseAndBitshift+0x154>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d101      	bne.n	8004ebc <DMA_CalcBaseAndBitshift+0xac>
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e000      	b.n	8004ebe <DMA_CalcBaseAndBitshift+0xae>
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d024      	beq.n	8004f0c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	3b10      	subs	r3, #16
 8004eca:	4a27      	ldr	r2, [pc, #156]	; (8004f68 <DMA_CalcBaseAndBitshift+0x158>)
 8004ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed0:	091b      	lsrs	r3, r3, #4
 8004ed2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f003 0307 	and.w	r3, r3, #7
 8004eda:	4a24      	ldr	r2, [pc, #144]	; (8004f6c <DMA_CalcBaseAndBitshift+0x15c>)
 8004edc:	5cd3      	ldrb	r3, [r2, r3]
 8004ede:	461a      	mov	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2b03      	cmp	r3, #3
 8004ee8:	d908      	bls.n	8004efc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	461a      	mov	r2, r3
 8004ef0:	4b1f      	ldr	r3, [pc, #124]	; (8004f70 <DMA_CalcBaseAndBitshift+0x160>)
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	1d1a      	adds	r2, r3, #4
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	659a      	str	r2, [r3, #88]	; 0x58
 8004efa:	e00d      	b.n	8004f18 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	461a      	mov	r2, r3
 8004f02:	4b1b      	ldr	r3, [pc, #108]	; (8004f70 <DMA_CalcBaseAndBitshift+0x160>)
 8004f04:	4013      	ands	r3, r2
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	6593      	str	r3, [r2, #88]	; 0x58
 8004f0a:	e005      	b.n	8004f18 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3714      	adds	r7, #20
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	40020010 	.word	0x40020010
 8004f2c:	40020028 	.word	0x40020028
 8004f30:	40020040 	.word	0x40020040
 8004f34:	40020058 	.word	0x40020058
 8004f38:	40020070 	.word	0x40020070
 8004f3c:	40020088 	.word	0x40020088
 8004f40:	400200a0 	.word	0x400200a0
 8004f44:	400200b8 	.word	0x400200b8
 8004f48:	40020410 	.word	0x40020410
 8004f4c:	40020428 	.word	0x40020428
 8004f50:	40020440 	.word	0x40020440
 8004f54:	40020458 	.word	0x40020458
 8004f58:	40020470 	.word	0x40020470
 8004f5c:	40020488 	.word	0x40020488
 8004f60:	400204a0 	.word	0x400204a0
 8004f64:	400204b8 	.word	0x400204b8
 8004f68:	aaaaaaab 	.word	0xaaaaaaab
 8004f6c:	08008da0 	.word	0x08008da0
 8004f70:	fffffc00 	.word	0xfffffc00

08004f74 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d120      	bne.n	8004fca <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8c:	2b03      	cmp	r3, #3
 8004f8e:	d858      	bhi.n	8005042 <DMA_CheckFifoParam+0xce>
 8004f90:	a201      	add	r2, pc, #4	; (adr r2, 8004f98 <DMA_CheckFifoParam+0x24>)
 8004f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f96:	bf00      	nop
 8004f98:	08004fa9 	.word	0x08004fa9
 8004f9c:	08004fbb 	.word	0x08004fbb
 8004fa0:	08004fa9 	.word	0x08004fa9
 8004fa4:	08005043 	.word	0x08005043
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d048      	beq.n	8005046 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004fb8:	e045      	b.n	8005046 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fbe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004fc2:	d142      	bne.n	800504a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004fc8:	e03f      	b.n	800504a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fd2:	d123      	bne.n	800501c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd8:	2b03      	cmp	r3, #3
 8004fda:	d838      	bhi.n	800504e <DMA_CheckFifoParam+0xda>
 8004fdc:	a201      	add	r2, pc, #4	; (adr r2, 8004fe4 <DMA_CheckFifoParam+0x70>)
 8004fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe2:	bf00      	nop
 8004fe4:	08004ff5 	.word	0x08004ff5
 8004fe8:	08004ffb 	.word	0x08004ffb
 8004fec:	08004ff5 	.word	0x08004ff5
 8004ff0:	0800500d 	.word	0x0800500d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	73fb      	strb	r3, [r7, #15]
        break;
 8004ff8:	e030      	b.n	800505c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d025      	beq.n	8005052 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800500a:	e022      	b.n	8005052 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005010:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005014:	d11f      	bne.n	8005056 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800501a:	e01c      	b.n	8005056 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005020:	2b02      	cmp	r3, #2
 8005022:	d902      	bls.n	800502a <DMA_CheckFifoParam+0xb6>
 8005024:	2b03      	cmp	r3, #3
 8005026:	d003      	beq.n	8005030 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005028:	e018      	b.n	800505c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	73fb      	strb	r3, [r7, #15]
        break;
 800502e:	e015      	b.n	800505c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005034:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00e      	beq.n	800505a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	73fb      	strb	r3, [r7, #15]
    break;
 8005040:	e00b      	b.n	800505a <DMA_CheckFifoParam+0xe6>
        break;
 8005042:	bf00      	nop
 8005044:	e00a      	b.n	800505c <DMA_CheckFifoParam+0xe8>
        break;
 8005046:	bf00      	nop
 8005048:	e008      	b.n	800505c <DMA_CheckFifoParam+0xe8>
        break;
 800504a:	bf00      	nop
 800504c:	e006      	b.n	800505c <DMA_CheckFifoParam+0xe8>
        break;
 800504e:	bf00      	nop
 8005050:	e004      	b.n	800505c <DMA_CheckFifoParam+0xe8>
        break;
 8005052:	bf00      	nop
 8005054:	e002      	b.n	800505c <DMA_CheckFifoParam+0xe8>
        break;
 8005056:	bf00      	nop
 8005058:	e000      	b.n	800505c <DMA_CheckFifoParam+0xe8>
    break;
 800505a:	bf00      	nop
    }
  }

  return status;
 800505c:	7bfb      	ldrb	r3, [r7, #15]
}
 800505e:	4618      	mov	r0, r3
 8005060:	3714      	adds	r7, #20
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop

0800506c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a38      	ldr	r2, [pc, #224]	; (8005160 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d022      	beq.n	80050ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a36      	ldr	r2, [pc, #216]	; (8005164 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d01d      	beq.n	80050ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a35      	ldr	r2, [pc, #212]	; (8005168 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d018      	beq.n	80050ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a33      	ldr	r2, [pc, #204]	; (800516c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d013      	beq.n	80050ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a32      	ldr	r2, [pc, #200]	; (8005170 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d00e      	beq.n	80050ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a30      	ldr	r2, [pc, #192]	; (8005174 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d009      	beq.n	80050ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a2f      	ldr	r2, [pc, #188]	; (8005178 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d004      	beq.n	80050ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a2d      	ldr	r2, [pc, #180]	; (800517c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d101      	bne.n	80050ce <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80050ca:	2301      	movs	r3, #1
 80050cc:	e000      	b.n	80050d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80050ce:	2300      	movs	r3, #0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d01a      	beq.n	800510a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	3b08      	subs	r3, #8
 80050dc:	4a28      	ldr	r2, [pc, #160]	; (8005180 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80050de:	fba2 2303 	umull	r2, r3, r2, r3
 80050e2:	091b      	lsrs	r3, r3, #4
 80050e4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	4b26      	ldr	r3, [pc, #152]	; (8005184 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80050ea:	4413      	add	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	461a      	mov	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a24      	ldr	r2, [pc, #144]	; (8005188 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80050f8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f003 031f 	and.w	r3, r3, #31
 8005100:	2201      	movs	r2, #1
 8005102:	409a      	lsls	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005108:	e024      	b.n	8005154 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	b2db      	uxtb	r3, r3
 8005110:	3b10      	subs	r3, #16
 8005112:	4a1e      	ldr	r2, [pc, #120]	; (800518c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005114:	fba2 2303 	umull	r2, r3, r2, r3
 8005118:	091b      	lsrs	r3, r3, #4
 800511a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	4a1c      	ldr	r2, [pc, #112]	; (8005190 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d806      	bhi.n	8005132 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	4a1b      	ldr	r2, [pc, #108]	; (8005194 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d902      	bls.n	8005132 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	3308      	adds	r3, #8
 8005130:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	4b18      	ldr	r3, [pc, #96]	; (8005198 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005136:	4413      	add	r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	461a      	mov	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a16      	ldr	r2, [pc, #88]	; (800519c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005144:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f003 031f 	and.w	r3, r3, #31
 800514c:	2201      	movs	r2, #1
 800514e:	409a      	lsls	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005154:	bf00      	nop
 8005156:	3714      	adds	r7, #20
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr
 8005160:	58025408 	.word	0x58025408
 8005164:	5802541c 	.word	0x5802541c
 8005168:	58025430 	.word	0x58025430
 800516c:	58025444 	.word	0x58025444
 8005170:	58025458 	.word	0x58025458
 8005174:	5802546c 	.word	0x5802546c
 8005178:	58025480 	.word	0x58025480
 800517c:	58025494 	.word	0x58025494
 8005180:	cccccccd 	.word	0xcccccccd
 8005184:	16009600 	.word	0x16009600
 8005188:	58025880 	.word	0x58025880
 800518c:	aaaaaaab 	.word	0xaaaaaaab
 8005190:	400204b8 	.word	0x400204b8
 8005194:	4002040f 	.word	0x4002040f
 8005198:	10008200 	.word	0x10008200
 800519c:	40020880 	.word	0x40020880

080051a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d04a      	beq.n	800524c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2b08      	cmp	r3, #8
 80051ba:	d847      	bhi.n	800524c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a25      	ldr	r2, [pc, #148]	; (8005258 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d022      	beq.n	800520c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a24      	ldr	r2, [pc, #144]	; (800525c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d01d      	beq.n	800520c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a22      	ldr	r2, [pc, #136]	; (8005260 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d018      	beq.n	800520c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a21      	ldr	r2, [pc, #132]	; (8005264 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d013      	beq.n	800520c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a1f      	ldr	r2, [pc, #124]	; (8005268 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d00e      	beq.n	800520c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a1e      	ldr	r2, [pc, #120]	; (800526c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d009      	beq.n	800520c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a1c      	ldr	r2, [pc, #112]	; (8005270 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d004      	beq.n	800520c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a1b      	ldr	r2, [pc, #108]	; (8005274 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d101      	bne.n	8005210 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800520c:	2301      	movs	r3, #1
 800520e:	e000      	b.n	8005212 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005210:	2300      	movs	r3, #0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00a      	beq.n	800522c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	4b17      	ldr	r3, [pc, #92]	; (8005278 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800521a:	4413      	add	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	461a      	mov	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a15      	ldr	r2, [pc, #84]	; (800527c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005228:	671a      	str	r2, [r3, #112]	; 0x70
 800522a:	e009      	b.n	8005240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	4b14      	ldr	r3, [pc, #80]	; (8005280 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005230:	4413      	add	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	461a      	mov	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a11      	ldr	r2, [pc, #68]	; (8005284 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800523e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	3b01      	subs	r3, #1
 8005244:	2201      	movs	r2, #1
 8005246:	409a      	lsls	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800524c:	bf00      	nop
 800524e:	3714      	adds	r7, #20
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	58025408 	.word	0x58025408
 800525c:	5802541c 	.word	0x5802541c
 8005260:	58025430 	.word	0x58025430
 8005264:	58025444 	.word	0x58025444
 8005268:	58025458 	.word	0x58025458
 800526c:	5802546c 	.word	0x5802546c
 8005270:	58025480 	.word	0x58025480
 8005274:	58025494 	.word	0x58025494
 8005278:	1600963f 	.word	0x1600963f
 800527c:	58025940 	.word	0x58025940
 8005280:	1000823f 	.word	0x1000823f
 8005284:	40020940 	.word	0x40020940

08005288 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005288:	b480      	push	{r7}
 800528a:	b089      	sub	sp, #36	; 0x24
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005292:	2300      	movs	r3, #0
 8005294:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005296:	4b86      	ldr	r3, [pc, #536]	; (80054b0 <HAL_GPIO_Init+0x228>)
 8005298:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800529a:	e18c      	b.n	80055b6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	2101      	movs	r1, #1
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	fa01 f303 	lsl.w	r3, r1, r3
 80052a8:	4013      	ands	r3, r2
 80052aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f000 817e 	beq.w	80055b0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f003 0303 	and.w	r3, r3, #3
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d005      	beq.n	80052cc <HAL_GPIO_Init+0x44>
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f003 0303 	and.w	r3, r3, #3
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d130      	bne.n	800532e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	2203      	movs	r2, #3
 80052d8:	fa02 f303 	lsl.w	r3, r2, r3
 80052dc:	43db      	mvns	r3, r3
 80052de:	69ba      	ldr	r2, [r7, #24]
 80052e0:	4013      	ands	r3, r2
 80052e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	68da      	ldr	r2, [r3, #12]
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	005b      	lsls	r3, r3, #1
 80052ec:	fa02 f303 	lsl.w	r3, r2, r3
 80052f0:	69ba      	ldr	r2, [r7, #24]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005302:	2201      	movs	r2, #1
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	fa02 f303 	lsl.w	r3, r2, r3
 800530a:	43db      	mvns	r3, r3
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	4013      	ands	r3, r2
 8005310:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	091b      	lsrs	r3, r3, #4
 8005318:	f003 0201 	and.w	r2, r3, #1
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	fa02 f303 	lsl.w	r3, r2, r3
 8005322:	69ba      	ldr	r2, [r7, #24]
 8005324:	4313      	orrs	r3, r2
 8005326:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f003 0303 	and.w	r3, r3, #3
 8005336:	2b03      	cmp	r3, #3
 8005338:	d017      	beq.n	800536a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	005b      	lsls	r3, r3, #1
 8005344:	2203      	movs	r2, #3
 8005346:	fa02 f303 	lsl.w	r3, r2, r3
 800534a:	43db      	mvns	r3, r3
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	4013      	ands	r3, r2
 8005350:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	689a      	ldr	r2, [r3, #8]
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	005b      	lsls	r3, r3, #1
 800535a:	fa02 f303 	lsl.w	r3, r2, r3
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	4313      	orrs	r3, r2
 8005362:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	69ba      	ldr	r2, [r7, #24]
 8005368:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f003 0303 	and.w	r3, r3, #3
 8005372:	2b02      	cmp	r3, #2
 8005374:	d123      	bne.n	80053be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	08da      	lsrs	r2, r3, #3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	3208      	adds	r2, #8
 800537e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005382:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	f003 0307 	and.w	r3, r3, #7
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	220f      	movs	r2, #15
 800538e:	fa02 f303 	lsl.w	r3, r2, r3
 8005392:	43db      	mvns	r3, r3
 8005394:	69ba      	ldr	r2, [r7, #24]
 8005396:	4013      	ands	r3, r2
 8005398:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	691a      	ldr	r2, [r3, #16]
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	f003 0307 	and.w	r3, r3, #7
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	fa02 f303 	lsl.w	r3, r2, r3
 80053aa:	69ba      	ldr	r2, [r7, #24]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	08da      	lsrs	r2, r3, #3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	3208      	adds	r2, #8
 80053b8:	69b9      	ldr	r1, [r7, #24]
 80053ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	005b      	lsls	r3, r3, #1
 80053c8:	2203      	movs	r2, #3
 80053ca:	fa02 f303 	lsl.w	r3, r2, r3
 80053ce:	43db      	mvns	r3, r3
 80053d0:	69ba      	ldr	r2, [r7, #24]
 80053d2:	4013      	ands	r3, r2
 80053d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f003 0203 	and.w	r2, r3, #3
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	005b      	lsls	r3, r3, #1
 80053e2:	fa02 f303 	lsl.w	r3, r2, r3
 80053e6:	69ba      	ldr	r2, [r7, #24]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	69ba      	ldr	r2, [r7, #24]
 80053f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	f000 80d8 	beq.w	80055b0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005400:	4b2c      	ldr	r3, [pc, #176]	; (80054b4 <HAL_GPIO_Init+0x22c>)
 8005402:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005406:	4a2b      	ldr	r2, [pc, #172]	; (80054b4 <HAL_GPIO_Init+0x22c>)
 8005408:	f043 0302 	orr.w	r3, r3, #2
 800540c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005410:	4b28      	ldr	r3, [pc, #160]	; (80054b4 <HAL_GPIO_Init+0x22c>)
 8005412:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	60fb      	str	r3, [r7, #12]
 800541c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800541e:	4a26      	ldr	r2, [pc, #152]	; (80054b8 <HAL_GPIO_Init+0x230>)
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	089b      	lsrs	r3, r3, #2
 8005424:	3302      	adds	r3, #2
 8005426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800542a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	f003 0303 	and.w	r3, r3, #3
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	220f      	movs	r2, #15
 8005436:	fa02 f303 	lsl.w	r3, r2, r3
 800543a:	43db      	mvns	r3, r3
 800543c:	69ba      	ldr	r2, [r7, #24]
 800543e:	4013      	ands	r3, r2
 8005440:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a1d      	ldr	r2, [pc, #116]	; (80054bc <HAL_GPIO_Init+0x234>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d04a      	beq.n	80054e0 <HAL_GPIO_Init+0x258>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a1c      	ldr	r2, [pc, #112]	; (80054c0 <HAL_GPIO_Init+0x238>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d02b      	beq.n	80054aa <HAL_GPIO_Init+0x222>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a1b      	ldr	r2, [pc, #108]	; (80054c4 <HAL_GPIO_Init+0x23c>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d025      	beq.n	80054a6 <HAL_GPIO_Init+0x21e>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a1a      	ldr	r2, [pc, #104]	; (80054c8 <HAL_GPIO_Init+0x240>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d01f      	beq.n	80054a2 <HAL_GPIO_Init+0x21a>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a19      	ldr	r2, [pc, #100]	; (80054cc <HAL_GPIO_Init+0x244>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d019      	beq.n	800549e <HAL_GPIO_Init+0x216>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a18      	ldr	r2, [pc, #96]	; (80054d0 <HAL_GPIO_Init+0x248>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d013      	beq.n	800549a <HAL_GPIO_Init+0x212>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a17      	ldr	r2, [pc, #92]	; (80054d4 <HAL_GPIO_Init+0x24c>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d00d      	beq.n	8005496 <HAL_GPIO_Init+0x20e>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a16      	ldr	r2, [pc, #88]	; (80054d8 <HAL_GPIO_Init+0x250>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d007      	beq.n	8005492 <HAL_GPIO_Init+0x20a>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a15      	ldr	r2, [pc, #84]	; (80054dc <HAL_GPIO_Init+0x254>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d101      	bne.n	800548e <HAL_GPIO_Init+0x206>
 800548a:	2309      	movs	r3, #9
 800548c:	e029      	b.n	80054e2 <HAL_GPIO_Init+0x25a>
 800548e:	230a      	movs	r3, #10
 8005490:	e027      	b.n	80054e2 <HAL_GPIO_Init+0x25a>
 8005492:	2307      	movs	r3, #7
 8005494:	e025      	b.n	80054e2 <HAL_GPIO_Init+0x25a>
 8005496:	2306      	movs	r3, #6
 8005498:	e023      	b.n	80054e2 <HAL_GPIO_Init+0x25a>
 800549a:	2305      	movs	r3, #5
 800549c:	e021      	b.n	80054e2 <HAL_GPIO_Init+0x25a>
 800549e:	2304      	movs	r3, #4
 80054a0:	e01f      	b.n	80054e2 <HAL_GPIO_Init+0x25a>
 80054a2:	2303      	movs	r3, #3
 80054a4:	e01d      	b.n	80054e2 <HAL_GPIO_Init+0x25a>
 80054a6:	2302      	movs	r3, #2
 80054a8:	e01b      	b.n	80054e2 <HAL_GPIO_Init+0x25a>
 80054aa:	2301      	movs	r3, #1
 80054ac:	e019      	b.n	80054e2 <HAL_GPIO_Init+0x25a>
 80054ae:	bf00      	nop
 80054b0:	58000080 	.word	0x58000080
 80054b4:	58024400 	.word	0x58024400
 80054b8:	58000400 	.word	0x58000400
 80054bc:	58020000 	.word	0x58020000
 80054c0:	58020400 	.word	0x58020400
 80054c4:	58020800 	.word	0x58020800
 80054c8:	58020c00 	.word	0x58020c00
 80054cc:	58021000 	.word	0x58021000
 80054d0:	58021400 	.word	0x58021400
 80054d4:	58021800 	.word	0x58021800
 80054d8:	58021c00 	.word	0x58021c00
 80054dc:	58022400 	.word	0x58022400
 80054e0:	2300      	movs	r3, #0
 80054e2:	69fa      	ldr	r2, [r7, #28]
 80054e4:	f002 0203 	and.w	r2, r2, #3
 80054e8:	0092      	lsls	r2, r2, #2
 80054ea:	4093      	lsls	r3, r2
 80054ec:	69ba      	ldr	r2, [r7, #24]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80054f2:	4938      	ldr	r1, [pc, #224]	; (80055d4 <HAL_GPIO_Init+0x34c>)
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	089b      	lsrs	r3, r3, #2
 80054f8:	3302      	adds	r3, #2
 80054fa:	69ba      	ldr	r2, [r7, #24]
 80054fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	43db      	mvns	r3, r3
 800550c:	69ba      	ldr	r2, [r7, #24]
 800550e:	4013      	ands	r3, r2
 8005510:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d003      	beq.n	8005526 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	4313      	orrs	r3, r2
 8005524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005526:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800552e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	43db      	mvns	r3, r3
 800553a:	69ba      	ldr	r2, [r7, #24]
 800553c:	4013      	ands	r3, r2
 800553e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d003      	beq.n	8005554 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800554c:	69ba      	ldr	r2, [r7, #24]
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	4313      	orrs	r3, r2
 8005552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005554:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	43db      	mvns	r3, r3
 8005566:	69ba      	ldr	r2, [r7, #24]
 8005568:	4013      	ands	r3, r2
 800556a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d003      	beq.n	8005580 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005578:	69ba      	ldr	r2, [r7, #24]
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	4313      	orrs	r3, r2
 800557e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	69ba      	ldr	r2, [r7, #24]
 8005584:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	43db      	mvns	r3, r3
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	4013      	ands	r3, r2
 8005594:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d003      	beq.n	80055aa <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	69ba      	ldr	r2, [r7, #24]
 80055ae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	3301      	adds	r3, #1
 80055b4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	fa22 f303 	lsr.w	r3, r2, r3
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f47f ae6b 	bne.w	800529c <HAL_GPIO_Init+0x14>
  }
}
 80055c6:	bf00      	nop
 80055c8:	bf00      	nop
 80055ca:	3724      	adds	r7, #36	; 0x24
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	58000400 	.word	0x58000400

080055d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	460b      	mov	r3, r1
 80055e2:	807b      	strh	r3, [r7, #2]
 80055e4:	4613      	mov	r3, r2
 80055e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80055e8:	787b      	ldrb	r3, [r7, #1]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80055ee:	887a      	ldrh	r2, [r7, #2]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80055f4:	e003      	b.n	80055fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80055f6:	887b      	ldrh	r3, [r7, #2]
 80055f8:	041a      	lsls	r2, r3, #16
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	619a      	str	r2, [r3, #24]
}
 80055fe:	bf00      	nop
 8005600:	370c      	adds	r7, #12
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800560a:	b480      	push	{r7}
 800560c:	b085      	sub	sp, #20
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
 8005612:	460b      	mov	r3, r1
 8005614:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800561c:	887a      	ldrh	r2, [r7, #2]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	4013      	ands	r3, r2
 8005622:	041a      	lsls	r2, r3, #16
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	43d9      	mvns	r1, r3
 8005628:	887b      	ldrh	r3, [r7, #2]
 800562a:	400b      	ands	r3, r1
 800562c:	431a      	orrs	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	619a      	str	r2, [r3, #24]
}
 8005632:	bf00      	nop
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
	...

08005640 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005648:	4b19      	ldr	r3, [pc, #100]	; (80056b0 <HAL_PWREx_ConfigSupply+0x70>)
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	f003 0304 	and.w	r3, r3, #4
 8005650:	2b04      	cmp	r3, #4
 8005652:	d00a      	beq.n	800566a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005654:	4b16      	ldr	r3, [pc, #88]	; (80056b0 <HAL_PWREx_ConfigSupply+0x70>)
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	f003 0307 	and.w	r3, r3, #7
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	429a      	cmp	r2, r3
 8005660:	d001      	beq.n	8005666 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e01f      	b.n	80056a6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005666:	2300      	movs	r3, #0
 8005668:	e01d      	b.n	80056a6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800566a:	4b11      	ldr	r3, [pc, #68]	; (80056b0 <HAL_PWREx_ConfigSupply+0x70>)
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	f023 0207 	bic.w	r2, r3, #7
 8005672:	490f      	ldr	r1, [pc, #60]	; (80056b0 <HAL_PWREx_ConfigSupply+0x70>)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4313      	orrs	r3, r2
 8005678:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800567a:	f7fb fb49 	bl	8000d10 <HAL_GetTick>
 800567e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005680:	e009      	b.n	8005696 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005682:	f7fb fb45 	bl	8000d10 <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005690:	d901      	bls.n	8005696 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e007      	b.n	80056a6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005696:	4b06      	ldr	r3, [pc, #24]	; (80056b0 <HAL_PWREx_ConfigSupply+0x70>)
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800569e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056a2:	d1ee      	bne.n	8005682 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	58024800 	.word	0x58024800

080056b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b08c      	sub	sp, #48	; 0x30
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d101      	bne.n	80056c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e3c8      	b.n	8005e58 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f000 8087 	beq.w	80057e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056d4:	4b88      	ldr	r3, [pc, #544]	; (80058f8 <HAL_RCC_OscConfig+0x244>)
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80056de:	4b86      	ldr	r3, [pc, #536]	; (80058f8 <HAL_RCC_OscConfig+0x244>)
 80056e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80056e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e6:	2b10      	cmp	r3, #16
 80056e8:	d007      	beq.n	80056fa <HAL_RCC_OscConfig+0x46>
 80056ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ec:	2b18      	cmp	r3, #24
 80056ee:	d110      	bne.n	8005712 <HAL_RCC_OscConfig+0x5e>
 80056f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f2:	f003 0303 	and.w	r3, r3, #3
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d10b      	bne.n	8005712 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056fa:	4b7f      	ldr	r3, [pc, #508]	; (80058f8 <HAL_RCC_OscConfig+0x244>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d06c      	beq.n	80057e0 <HAL_RCC_OscConfig+0x12c>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d168      	bne.n	80057e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e3a2      	b.n	8005e58 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800571a:	d106      	bne.n	800572a <HAL_RCC_OscConfig+0x76>
 800571c:	4b76      	ldr	r3, [pc, #472]	; (80058f8 <HAL_RCC_OscConfig+0x244>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a75      	ldr	r2, [pc, #468]	; (80058f8 <HAL_RCC_OscConfig+0x244>)
 8005722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005726:	6013      	str	r3, [r2, #0]
 8005728:	e02e      	b.n	8005788 <HAL_RCC_OscConfig+0xd4>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d10c      	bne.n	800574c <HAL_RCC_OscConfig+0x98>
 8005732:	4b71      	ldr	r3, [pc, #452]	; (80058f8 <HAL_RCC_OscConfig+0x244>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a70      	ldr	r2, [pc, #448]	; (80058f8 <HAL_RCC_OscConfig+0x244>)
 8005738:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800573c:	6013      	str	r3, [r2, #0]
 800573e:	4b6e      	ldr	r3, [pc, #440]	; (80058f8 <HAL_RCC_OscConfig+0x244>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a6d      	ldr	r2, [pc, #436]	; (80058f8 <HAL_RCC_OscConfig+0x244>)
 8005744:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005748:	6013      	str	r3, [r2, #0]
 800574a:	e01d      	b.n	8005788 <HAL_RCC_OscConfig+0xd4>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005754:	d10c      	bne.n	8005770 <HAL_RCC_OscConfig+0xbc>
 8005756:	4b68      	ldr	r3, [pc, #416]	; (80058f8 <HAL_RCC_OscConfig+0x244>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a67      	ldr	r2, [pc, #412]	; (80058f8 <HAL_RCC_OscConfig+0x244>)
 800575c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005760:	6013      	str	r3, [r2, #0]
 8005762:	4b65      	ldr	r3, [pc, #404]	; (80058f8 <HAL_RCC_OscConfig+0x244>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a64      	ldr	r2, [pc, #400]	; (80058f8 <HAL_RCC_OscConfig+0x244>)
 8005768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800576c:	6013      	str	r3, [r2, #0]
 800576e:	e00b      	b.n	8005788 <HAL_RCC_OscConfig+0xd4>
 8005770:	4b61      	ldr	r3, [pc, #388]	; (80058f8 <HAL_RCC_OscConfig+0x244>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a60      	ldr	r2, [pc, #384]	; (80058f8 <HAL_RCC_OscConfig+0x244>)
 8005776:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800577a:	6013      	str	r3, [r2, #0]
 800577c:	4b5e      	ldr	r3, [pc, #376]	; (80058f8 <HAL_RCC_OscConfig+0x244>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a5d      	ldr	r2, [pc, #372]	; (80058f8 <HAL_RCC_OscConfig+0x244>)
 8005782:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005786:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d013      	beq.n	80057b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005790:	f7fb fabe 	bl	8000d10 <HAL_GetTick>
 8005794:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005796:	e008      	b.n	80057aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005798:	f7fb faba 	bl	8000d10 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	2b64      	cmp	r3, #100	; 0x64
 80057a4:	d901      	bls.n	80057aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e356      	b.n	8005e58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80057aa:	4b53      	ldr	r3, [pc, #332]	; (80058f8 <HAL_RCC_OscConfig+0x244>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d0f0      	beq.n	8005798 <HAL_RCC_OscConfig+0xe4>
 80057b6:	e014      	b.n	80057e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b8:	f7fb faaa 	bl	8000d10 <HAL_GetTick>
 80057bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80057be:	e008      	b.n	80057d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057c0:	f7fb faa6 	bl	8000d10 <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	2b64      	cmp	r3, #100	; 0x64
 80057cc:	d901      	bls.n	80057d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e342      	b.n	8005e58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80057d2:	4b49      	ldr	r3, [pc, #292]	; (80058f8 <HAL_RCC_OscConfig+0x244>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1f0      	bne.n	80057c0 <HAL_RCC_OscConfig+0x10c>
 80057de:	e000      	b.n	80057e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0302 	and.w	r3, r3, #2
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	f000 808c 	beq.w	8005908 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057f0:	4b41      	ldr	r3, [pc, #260]	; (80058f8 <HAL_RCC_OscConfig+0x244>)
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057f8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80057fa:	4b3f      	ldr	r3, [pc, #252]	; (80058f8 <HAL_RCC_OscConfig+0x244>)
 80057fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005800:	6a3b      	ldr	r3, [r7, #32]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d007      	beq.n	8005816 <HAL_RCC_OscConfig+0x162>
 8005806:	6a3b      	ldr	r3, [r7, #32]
 8005808:	2b18      	cmp	r3, #24
 800580a:	d137      	bne.n	800587c <HAL_RCC_OscConfig+0x1c8>
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	f003 0303 	and.w	r3, r3, #3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d132      	bne.n	800587c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005816:	4b38      	ldr	r3, [pc, #224]	; (80058f8 <HAL_RCC_OscConfig+0x244>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 0304 	and.w	r3, r3, #4
 800581e:	2b00      	cmp	r3, #0
 8005820:	d005      	beq.n	800582e <HAL_RCC_OscConfig+0x17a>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e314      	b.n	8005e58 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800582e:	4b32      	ldr	r3, [pc, #200]	; (80058f8 <HAL_RCC_OscConfig+0x244>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f023 0219 	bic.w	r2, r3, #25
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	492f      	ldr	r1, [pc, #188]	; (80058f8 <HAL_RCC_OscConfig+0x244>)
 800583c:	4313      	orrs	r3, r2
 800583e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005840:	f7fb fa66 	bl	8000d10 <HAL_GetTick>
 8005844:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005846:	e008      	b.n	800585a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005848:	f7fb fa62 	bl	8000d10 <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	2b02      	cmp	r3, #2
 8005854:	d901      	bls.n	800585a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e2fe      	b.n	8005e58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800585a:	4b27      	ldr	r3, [pc, #156]	; (80058f8 <HAL_RCC_OscConfig+0x244>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0304 	and.w	r3, r3, #4
 8005862:	2b00      	cmp	r3, #0
 8005864:	d0f0      	beq.n	8005848 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005866:	4b24      	ldr	r3, [pc, #144]	; (80058f8 <HAL_RCC_OscConfig+0x244>)
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	061b      	lsls	r3, r3, #24
 8005874:	4920      	ldr	r1, [pc, #128]	; (80058f8 <HAL_RCC_OscConfig+0x244>)
 8005876:	4313      	orrs	r3, r2
 8005878:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800587a:	e045      	b.n	8005908 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d026      	beq.n	80058d2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005884:	4b1c      	ldr	r3, [pc, #112]	; (80058f8 <HAL_RCC_OscConfig+0x244>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f023 0219 	bic.w	r2, r3, #25
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	4919      	ldr	r1, [pc, #100]	; (80058f8 <HAL_RCC_OscConfig+0x244>)
 8005892:	4313      	orrs	r3, r2
 8005894:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005896:	f7fb fa3b 	bl	8000d10 <HAL_GetTick>
 800589a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800589c:	e008      	b.n	80058b0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800589e:	f7fb fa37 	bl	8000d10 <HAL_GetTick>
 80058a2:	4602      	mov	r2, r0
 80058a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d901      	bls.n	80058b0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e2d3      	b.n	8005e58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058b0:	4b11      	ldr	r3, [pc, #68]	; (80058f8 <HAL_RCC_OscConfig+0x244>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0304 	and.w	r3, r3, #4
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d0f0      	beq.n	800589e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058bc:	4b0e      	ldr	r3, [pc, #56]	; (80058f8 <HAL_RCC_OscConfig+0x244>)
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	061b      	lsls	r3, r3, #24
 80058ca:	490b      	ldr	r1, [pc, #44]	; (80058f8 <HAL_RCC_OscConfig+0x244>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	604b      	str	r3, [r1, #4]
 80058d0:	e01a      	b.n	8005908 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058d2:	4b09      	ldr	r3, [pc, #36]	; (80058f8 <HAL_RCC_OscConfig+0x244>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a08      	ldr	r2, [pc, #32]	; (80058f8 <HAL_RCC_OscConfig+0x244>)
 80058d8:	f023 0301 	bic.w	r3, r3, #1
 80058dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058de:	f7fb fa17 	bl	8000d10 <HAL_GetTick>
 80058e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80058e4:	e00a      	b.n	80058fc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058e6:	f7fb fa13 	bl	8000d10 <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d903      	bls.n	80058fc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e2af      	b.n	8005e58 <HAL_RCC_OscConfig+0x7a4>
 80058f8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80058fc:	4b96      	ldr	r3, [pc, #600]	; (8005b58 <HAL_RCC_OscConfig+0x4a4>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0304 	and.w	r3, r3, #4
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1ee      	bne.n	80058e6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0310 	and.w	r3, r3, #16
 8005910:	2b00      	cmp	r3, #0
 8005912:	d06a      	beq.n	80059ea <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005914:	4b90      	ldr	r3, [pc, #576]	; (8005b58 <HAL_RCC_OscConfig+0x4a4>)
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800591c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800591e:	4b8e      	ldr	r3, [pc, #568]	; (8005b58 <HAL_RCC_OscConfig+0x4a4>)
 8005920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005922:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	2b08      	cmp	r3, #8
 8005928:	d007      	beq.n	800593a <HAL_RCC_OscConfig+0x286>
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	2b18      	cmp	r3, #24
 800592e:	d11b      	bne.n	8005968 <HAL_RCC_OscConfig+0x2b4>
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	f003 0303 	and.w	r3, r3, #3
 8005936:	2b01      	cmp	r3, #1
 8005938:	d116      	bne.n	8005968 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800593a:	4b87      	ldr	r3, [pc, #540]	; (8005b58 <HAL_RCC_OscConfig+0x4a4>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005942:	2b00      	cmp	r3, #0
 8005944:	d005      	beq.n	8005952 <HAL_RCC_OscConfig+0x29e>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	69db      	ldr	r3, [r3, #28]
 800594a:	2b80      	cmp	r3, #128	; 0x80
 800594c:	d001      	beq.n	8005952 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e282      	b.n	8005e58 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005952:	4b81      	ldr	r3, [pc, #516]	; (8005b58 <HAL_RCC_OscConfig+0x4a4>)
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	061b      	lsls	r3, r3, #24
 8005960:	497d      	ldr	r1, [pc, #500]	; (8005b58 <HAL_RCC_OscConfig+0x4a4>)
 8005962:	4313      	orrs	r3, r2
 8005964:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005966:	e040      	b.n	80059ea <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	69db      	ldr	r3, [r3, #28]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d023      	beq.n	80059b8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005970:	4b79      	ldr	r3, [pc, #484]	; (8005b58 <HAL_RCC_OscConfig+0x4a4>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a78      	ldr	r2, [pc, #480]	; (8005b58 <HAL_RCC_OscConfig+0x4a4>)
 8005976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800597a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800597c:	f7fb f9c8 	bl	8000d10 <HAL_GetTick>
 8005980:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005982:	e008      	b.n	8005996 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005984:	f7fb f9c4 	bl	8000d10 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	2b02      	cmp	r3, #2
 8005990:	d901      	bls.n	8005996 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e260      	b.n	8005e58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005996:	4b70      	ldr	r3, [pc, #448]	; (8005b58 <HAL_RCC_OscConfig+0x4a4>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d0f0      	beq.n	8005984 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80059a2:	4b6d      	ldr	r3, [pc, #436]	; (8005b58 <HAL_RCC_OscConfig+0x4a4>)
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	061b      	lsls	r3, r3, #24
 80059b0:	4969      	ldr	r1, [pc, #420]	; (8005b58 <HAL_RCC_OscConfig+0x4a4>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	60cb      	str	r3, [r1, #12]
 80059b6:	e018      	b.n	80059ea <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80059b8:	4b67      	ldr	r3, [pc, #412]	; (8005b58 <HAL_RCC_OscConfig+0x4a4>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a66      	ldr	r2, [pc, #408]	; (8005b58 <HAL_RCC_OscConfig+0x4a4>)
 80059be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c4:	f7fb f9a4 	bl	8000d10 <HAL_GetTick>
 80059c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80059ca:	e008      	b.n	80059de <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80059cc:	f7fb f9a0 	bl	8000d10 <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d901      	bls.n	80059de <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e23c      	b.n	8005e58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80059de:	4b5e      	ldr	r3, [pc, #376]	; (8005b58 <HAL_RCC_OscConfig+0x4a4>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1f0      	bne.n	80059cc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0308 	and.w	r3, r3, #8
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d036      	beq.n	8005a64 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d019      	beq.n	8005a32 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059fe:	4b56      	ldr	r3, [pc, #344]	; (8005b58 <HAL_RCC_OscConfig+0x4a4>)
 8005a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a02:	4a55      	ldr	r2, [pc, #340]	; (8005b58 <HAL_RCC_OscConfig+0x4a4>)
 8005a04:	f043 0301 	orr.w	r3, r3, #1
 8005a08:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a0a:	f7fb f981 	bl	8000d10 <HAL_GetTick>
 8005a0e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005a10:	e008      	b.n	8005a24 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a12:	f7fb f97d 	bl	8000d10 <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d901      	bls.n	8005a24 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e219      	b.n	8005e58 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005a24:	4b4c      	ldr	r3, [pc, #304]	; (8005b58 <HAL_RCC_OscConfig+0x4a4>)
 8005a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a28:	f003 0302 	and.w	r3, r3, #2
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d0f0      	beq.n	8005a12 <HAL_RCC_OscConfig+0x35e>
 8005a30:	e018      	b.n	8005a64 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a32:	4b49      	ldr	r3, [pc, #292]	; (8005b58 <HAL_RCC_OscConfig+0x4a4>)
 8005a34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a36:	4a48      	ldr	r2, [pc, #288]	; (8005b58 <HAL_RCC_OscConfig+0x4a4>)
 8005a38:	f023 0301 	bic.w	r3, r3, #1
 8005a3c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a3e:	f7fb f967 	bl	8000d10 <HAL_GetTick>
 8005a42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005a44:	e008      	b.n	8005a58 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a46:	f7fb f963 	bl	8000d10 <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d901      	bls.n	8005a58 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e1ff      	b.n	8005e58 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005a58:	4b3f      	ldr	r3, [pc, #252]	; (8005b58 <HAL_RCC_OscConfig+0x4a4>)
 8005a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a5c:	f003 0302 	and.w	r3, r3, #2
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d1f0      	bne.n	8005a46 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0320 	and.w	r3, r3, #32
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d036      	beq.n	8005ade <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	699b      	ldr	r3, [r3, #24]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d019      	beq.n	8005aac <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005a78:	4b37      	ldr	r3, [pc, #220]	; (8005b58 <HAL_RCC_OscConfig+0x4a4>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a36      	ldr	r2, [pc, #216]	; (8005b58 <HAL_RCC_OscConfig+0x4a4>)
 8005a7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005a82:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005a84:	f7fb f944 	bl	8000d10 <HAL_GetTick>
 8005a88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005a8a:	e008      	b.n	8005a9e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a8c:	f7fb f940 	bl	8000d10 <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d901      	bls.n	8005a9e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e1dc      	b.n	8005e58 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005a9e:	4b2e      	ldr	r3, [pc, #184]	; (8005b58 <HAL_RCC_OscConfig+0x4a4>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d0f0      	beq.n	8005a8c <HAL_RCC_OscConfig+0x3d8>
 8005aaa:	e018      	b.n	8005ade <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005aac:	4b2a      	ldr	r3, [pc, #168]	; (8005b58 <HAL_RCC_OscConfig+0x4a4>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a29      	ldr	r2, [pc, #164]	; (8005b58 <HAL_RCC_OscConfig+0x4a4>)
 8005ab2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ab6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005ab8:	f7fb f92a 	bl	8000d10 <HAL_GetTick>
 8005abc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005abe:	e008      	b.n	8005ad2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ac0:	f7fb f926 	bl	8000d10 <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d901      	bls.n	8005ad2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e1c2      	b.n	8005e58 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005ad2:	4b21      	ldr	r3, [pc, #132]	; (8005b58 <HAL_RCC_OscConfig+0x4a4>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1f0      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 0304 	and.w	r3, r3, #4
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	f000 8086 	beq.w	8005bf8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005aec:	4b1b      	ldr	r3, [pc, #108]	; (8005b5c <HAL_RCC_OscConfig+0x4a8>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a1a      	ldr	r2, [pc, #104]	; (8005b5c <HAL_RCC_OscConfig+0x4a8>)
 8005af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005af6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005af8:	f7fb f90a 	bl	8000d10 <HAL_GetTick>
 8005afc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005afe:	e008      	b.n	8005b12 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b00:	f7fb f906 	bl	8000d10 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	2b64      	cmp	r3, #100	; 0x64
 8005b0c:	d901      	bls.n	8005b12 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e1a2      	b.n	8005e58 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b12:	4b12      	ldr	r3, [pc, #72]	; (8005b5c <HAL_RCC_OscConfig+0x4a8>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d0f0      	beq.n	8005b00 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d106      	bne.n	8005b34 <HAL_RCC_OscConfig+0x480>
 8005b26:	4b0c      	ldr	r3, [pc, #48]	; (8005b58 <HAL_RCC_OscConfig+0x4a4>)
 8005b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b2a:	4a0b      	ldr	r2, [pc, #44]	; (8005b58 <HAL_RCC_OscConfig+0x4a4>)
 8005b2c:	f043 0301 	orr.w	r3, r3, #1
 8005b30:	6713      	str	r3, [r2, #112]	; 0x70
 8005b32:	e032      	b.n	8005b9a <HAL_RCC_OscConfig+0x4e6>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d111      	bne.n	8005b60 <HAL_RCC_OscConfig+0x4ac>
 8005b3c:	4b06      	ldr	r3, [pc, #24]	; (8005b58 <HAL_RCC_OscConfig+0x4a4>)
 8005b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b40:	4a05      	ldr	r2, [pc, #20]	; (8005b58 <HAL_RCC_OscConfig+0x4a4>)
 8005b42:	f023 0301 	bic.w	r3, r3, #1
 8005b46:	6713      	str	r3, [r2, #112]	; 0x70
 8005b48:	4b03      	ldr	r3, [pc, #12]	; (8005b58 <HAL_RCC_OscConfig+0x4a4>)
 8005b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b4c:	4a02      	ldr	r2, [pc, #8]	; (8005b58 <HAL_RCC_OscConfig+0x4a4>)
 8005b4e:	f023 0304 	bic.w	r3, r3, #4
 8005b52:	6713      	str	r3, [r2, #112]	; 0x70
 8005b54:	e021      	b.n	8005b9a <HAL_RCC_OscConfig+0x4e6>
 8005b56:	bf00      	nop
 8005b58:	58024400 	.word	0x58024400
 8005b5c:	58024800 	.word	0x58024800
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	2b05      	cmp	r3, #5
 8005b66:	d10c      	bne.n	8005b82 <HAL_RCC_OscConfig+0x4ce>
 8005b68:	4b83      	ldr	r3, [pc, #524]	; (8005d78 <HAL_RCC_OscConfig+0x6c4>)
 8005b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b6c:	4a82      	ldr	r2, [pc, #520]	; (8005d78 <HAL_RCC_OscConfig+0x6c4>)
 8005b6e:	f043 0304 	orr.w	r3, r3, #4
 8005b72:	6713      	str	r3, [r2, #112]	; 0x70
 8005b74:	4b80      	ldr	r3, [pc, #512]	; (8005d78 <HAL_RCC_OscConfig+0x6c4>)
 8005b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b78:	4a7f      	ldr	r2, [pc, #508]	; (8005d78 <HAL_RCC_OscConfig+0x6c4>)
 8005b7a:	f043 0301 	orr.w	r3, r3, #1
 8005b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8005b80:	e00b      	b.n	8005b9a <HAL_RCC_OscConfig+0x4e6>
 8005b82:	4b7d      	ldr	r3, [pc, #500]	; (8005d78 <HAL_RCC_OscConfig+0x6c4>)
 8005b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b86:	4a7c      	ldr	r2, [pc, #496]	; (8005d78 <HAL_RCC_OscConfig+0x6c4>)
 8005b88:	f023 0301 	bic.w	r3, r3, #1
 8005b8c:	6713      	str	r3, [r2, #112]	; 0x70
 8005b8e:	4b7a      	ldr	r3, [pc, #488]	; (8005d78 <HAL_RCC_OscConfig+0x6c4>)
 8005b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b92:	4a79      	ldr	r2, [pc, #484]	; (8005d78 <HAL_RCC_OscConfig+0x6c4>)
 8005b94:	f023 0304 	bic.w	r3, r3, #4
 8005b98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d015      	beq.n	8005bce <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ba2:	f7fb f8b5 	bl	8000d10 <HAL_GetTick>
 8005ba6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ba8:	e00a      	b.n	8005bc0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005baa:	f7fb f8b1 	bl	8000d10 <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d901      	bls.n	8005bc0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e14b      	b.n	8005e58 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005bc0:	4b6d      	ldr	r3, [pc, #436]	; (8005d78 <HAL_RCC_OscConfig+0x6c4>)
 8005bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc4:	f003 0302 	and.w	r3, r3, #2
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d0ee      	beq.n	8005baa <HAL_RCC_OscConfig+0x4f6>
 8005bcc:	e014      	b.n	8005bf8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bce:	f7fb f89f 	bl	8000d10 <HAL_GetTick>
 8005bd2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005bd4:	e00a      	b.n	8005bec <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bd6:	f7fb f89b 	bl	8000d10 <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d901      	bls.n	8005bec <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005be8:	2303      	movs	r3, #3
 8005bea:	e135      	b.n	8005e58 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005bec:	4b62      	ldr	r3, [pc, #392]	; (8005d78 <HAL_RCC_OscConfig+0x6c4>)
 8005bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf0:	f003 0302 	and.w	r3, r3, #2
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d1ee      	bne.n	8005bd6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f000 812a 	beq.w	8005e56 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005c02:	4b5d      	ldr	r3, [pc, #372]	; (8005d78 <HAL_RCC_OscConfig+0x6c4>)
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c0a:	2b18      	cmp	r3, #24
 8005c0c:	f000 80ba 	beq.w	8005d84 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	f040 8095 	bne.w	8005d44 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c1a:	4b57      	ldr	r3, [pc, #348]	; (8005d78 <HAL_RCC_OscConfig+0x6c4>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a56      	ldr	r2, [pc, #344]	; (8005d78 <HAL_RCC_OscConfig+0x6c4>)
 8005c20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c26:	f7fb f873 	bl	8000d10 <HAL_GetTick>
 8005c2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c2c:	e008      	b.n	8005c40 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c2e:	f7fb f86f 	bl	8000d10 <HAL_GetTick>
 8005c32:	4602      	mov	r2, r0
 8005c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d901      	bls.n	8005c40 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e10b      	b.n	8005e58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c40:	4b4d      	ldr	r3, [pc, #308]	; (8005d78 <HAL_RCC_OscConfig+0x6c4>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d1f0      	bne.n	8005c2e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c4c:	4b4a      	ldr	r3, [pc, #296]	; (8005d78 <HAL_RCC_OscConfig+0x6c4>)
 8005c4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c50:	4b4a      	ldr	r3, [pc, #296]	; (8005d7c <HAL_RCC_OscConfig+0x6c8>)
 8005c52:	4013      	ands	r3, r2
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005c5c:	0112      	lsls	r2, r2, #4
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	4945      	ldr	r1, [pc, #276]	; (8005d78 <HAL_RCC_OscConfig+0x6c4>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	628b      	str	r3, [r1, #40]	; 0x28
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c74:	3b01      	subs	r3, #1
 8005c76:	025b      	lsls	r3, r3, #9
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	431a      	orrs	r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c80:	3b01      	subs	r3, #1
 8005c82:	041b      	lsls	r3, r3, #16
 8005c84:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005c88:	431a      	orrs	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	061b      	lsls	r3, r3, #24
 8005c92:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005c96:	4938      	ldr	r1, [pc, #224]	; (8005d78 <HAL_RCC_OscConfig+0x6c4>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005c9c:	4b36      	ldr	r3, [pc, #216]	; (8005d78 <HAL_RCC_OscConfig+0x6c4>)
 8005c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca0:	4a35      	ldr	r2, [pc, #212]	; (8005d78 <HAL_RCC_OscConfig+0x6c4>)
 8005ca2:	f023 0301 	bic.w	r3, r3, #1
 8005ca6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005ca8:	4b33      	ldr	r3, [pc, #204]	; (8005d78 <HAL_RCC_OscConfig+0x6c4>)
 8005caa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cac:	4b34      	ldr	r3, [pc, #208]	; (8005d80 <HAL_RCC_OscConfig+0x6cc>)
 8005cae:	4013      	ands	r3, r2
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005cb4:	00d2      	lsls	r2, r2, #3
 8005cb6:	4930      	ldr	r1, [pc, #192]	; (8005d78 <HAL_RCC_OscConfig+0x6c4>)
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005cbc:	4b2e      	ldr	r3, [pc, #184]	; (8005d78 <HAL_RCC_OscConfig+0x6c4>)
 8005cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc0:	f023 020c 	bic.w	r2, r3, #12
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc8:	492b      	ldr	r1, [pc, #172]	; (8005d78 <HAL_RCC_OscConfig+0x6c4>)
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005cce:	4b2a      	ldr	r3, [pc, #168]	; (8005d78 <HAL_RCC_OscConfig+0x6c4>)
 8005cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd2:	f023 0202 	bic.w	r2, r3, #2
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cda:	4927      	ldr	r1, [pc, #156]	; (8005d78 <HAL_RCC_OscConfig+0x6c4>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005ce0:	4b25      	ldr	r3, [pc, #148]	; (8005d78 <HAL_RCC_OscConfig+0x6c4>)
 8005ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce4:	4a24      	ldr	r2, [pc, #144]	; (8005d78 <HAL_RCC_OscConfig+0x6c4>)
 8005ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cec:	4b22      	ldr	r3, [pc, #136]	; (8005d78 <HAL_RCC_OscConfig+0x6c4>)
 8005cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf0:	4a21      	ldr	r2, [pc, #132]	; (8005d78 <HAL_RCC_OscConfig+0x6c4>)
 8005cf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cf6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005cf8:	4b1f      	ldr	r3, [pc, #124]	; (8005d78 <HAL_RCC_OscConfig+0x6c4>)
 8005cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfc:	4a1e      	ldr	r2, [pc, #120]	; (8005d78 <HAL_RCC_OscConfig+0x6c4>)
 8005cfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005d04:	4b1c      	ldr	r3, [pc, #112]	; (8005d78 <HAL_RCC_OscConfig+0x6c4>)
 8005d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d08:	4a1b      	ldr	r2, [pc, #108]	; (8005d78 <HAL_RCC_OscConfig+0x6c4>)
 8005d0a:	f043 0301 	orr.w	r3, r3, #1
 8005d0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d10:	4b19      	ldr	r3, [pc, #100]	; (8005d78 <HAL_RCC_OscConfig+0x6c4>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a18      	ldr	r2, [pc, #96]	; (8005d78 <HAL_RCC_OscConfig+0x6c4>)
 8005d16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d1c:	f7fa fff8 	bl	8000d10 <HAL_GetTick>
 8005d20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d22:	e008      	b.n	8005d36 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d24:	f7fa fff4 	bl	8000d10 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d901      	bls.n	8005d36 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e090      	b.n	8005e58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d36:	4b10      	ldr	r3, [pc, #64]	; (8005d78 <HAL_RCC_OscConfig+0x6c4>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d0f0      	beq.n	8005d24 <HAL_RCC_OscConfig+0x670>
 8005d42:	e088      	b.n	8005e56 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d44:	4b0c      	ldr	r3, [pc, #48]	; (8005d78 <HAL_RCC_OscConfig+0x6c4>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a0b      	ldr	r2, [pc, #44]	; (8005d78 <HAL_RCC_OscConfig+0x6c4>)
 8005d4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d50:	f7fa ffde 	bl	8000d10 <HAL_GetTick>
 8005d54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d56:	e008      	b.n	8005d6a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d58:	f7fa ffda 	bl	8000d10 <HAL_GetTick>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d901      	bls.n	8005d6a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e076      	b.n	8005e58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d6a:	4b03      	ldr	r3, [pc, #12]	; (8005d78 <HAL_RCC_OscConfig+0x6c4>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1f0      	bne.n	8005d58 <HAL_RCC_OscConfig+0x6a4>
 8005d76:	e06e      	b.n	8005e56 <HAL_RCC_OscConfig+0x7a2>
 8005d78:	58024400 	.word	0x58024400
 8005d7c:	fffffc0c 	.word	0xfffffc0c
 8005d80:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005d84:	4b36      	ldr	r3, [pc, #216]	; (8005e60 <HAL_RCC_OscConfig+0x7ac>)
 8005d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d88:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005d8a:	4b35      	ldr	r3, [pc, #212]	; (8005e60 <HAL_RCC_OscConfig+0x7ac>)
 8005d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d8e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d031      	beq.n	8005dfc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	f003 0203 	and.w	r2, r3, #3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d12a      	bne.n	8005dfc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	091b      	lsrs	r3, r3, #4
 8005daa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d122      	bne.n	8005dfc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d11a      	bne.n	8005dfc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	0a5b      	lsrs	r3, r3, #9
 8005dca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dd2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d111      	bne.n	8005dfc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	0c1b      	lsrs	r3, r3, #16
 8005ddc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d108      	bne.n	8005dfc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	0e1b      	lsrs	r3, r3, #24
 8005dee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d001      	beq.n	8005e00 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e02b      	b.n	8005e58 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005e00:	4b17      	ldr	r3, [pc, #92]	; (8005e60 <HAL_RCC_OscConfig+0x7ac>)
 8005e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e04:	08db      	lsrs	r3, r3, #3
 8005e06:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e0a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d01f      	beq.n	8005e56 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005e16:	4b12      	ldr	r3, [pc, #72]	; (8005e60 <HAL_RCC_OscConfig+0x7ac>)
 8005e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1a:	4a11      	ldr	r2, [pc, #68]	; (8005e60 <HAL_RCC_OscConfig+0x7ac>)
 8005e1c:	f023 0301 	bic.w	r3, r3, #1
 8005e20:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005e22:	f7fa ff75 	bl	8000d10 <HAL_GetTick>
 8005e26:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005e28:	bf00      	nop
 8005e2a:	f7fa ff71 	bl	8000d10 <HAL_GetTick>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d0f9      	beq.n	8005e2a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005e36:	4b0a      	ldr	r3, [pc, #40]	; (8005e60 <HAL_RCC_OscConfig+0x7ac>)
 8005e38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e3a:	4b0a      	ldr	r3, [pc, #40]	; (8005e64 <HAL_RCC_OscConfig+0x7b0>)
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005e42:	00d2      	lsls	r2, r2, #3
 8005e44:	4906      	ldr	r1, [pc, #24]	; (8005e60 <HAL_RCC_OscConfig+0x7ac>)
 8005e46:	4313      	orrs	r3, r2
 8005e48:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005e4a:	4b05      	ldr	r3, [pc, #20]	; (8005e60 <HAL_RCC_OscConfig+0x7ac>)
 8005e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4e:	4a04      	ldr	r2, [pc, #16]	; (8005e60 <HAL_RCC_OscConfig+0x7ac>)
 8005e50:	f043 0301 	orr.w	r3, r3, #1
 8005e54:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3730      	adds	r7, #48	; 0x30
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	58024400 	.word	0x58024400
 8005e64:	ffff0007 	.word	0xffff0007

08005e68 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b086      	sub	sp, #24
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d101      	bne.n	8005e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e19c      	b.n	80061b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e7c:	4b8a      	ldr	r3, [pc, #552]	; (80060a8 <HAL_RCC_ClockConfig+0x240>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 030f 	and.w	r3, r3, #15
 8005e84:	683a      	ldr	r2, [r7, #0]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d910      	bls.n	8005eac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e8a:	4b87      	ldr	r3, [pc, #540]	; (80060a8 <HAL_RCC_ClockConfig+0x240>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f023 020f 	bic.w	r2, r3, #15
 8005e92:	4985      	ldr	r1, [pc, #532]	; (80060a8 <HAL_RCC_ClockConfig+0x240>)
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e9a:	4b83      	ldr	r3, [pc, #524]	; (80060a8 <HAL_RCC_ClockConfig+0x240>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 030f 	and.w	r3, r3, #15
 8005ea2:	683a      	ldr	r2, [r7, #0]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d001      	beq.n	8005eac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e184      	b.n	80061b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0304 	and.w	r3, r3, #4
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d010      	beq.n	8005eda <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	691a      	ldr	r2, [r3, #16]
 8005ebc:	4b7b      	ldr	r3, [pc, #492]	; (80060ac <HAL_RCC_ClockConfig+0x244>)
 8005ebe:	699b      	ldr	r3, [r3, #24]
 8005ec0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d908      	bls.n	8005eda <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005ec8:	4b78      	ldr	r3, [pc, #480]	; (80060ac <HAL_RCC_ClockConfig+0x244>)
 8005eca:	699b      	ldr	r3, [r3, #24]
 8005ecc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	4975      	ldr	r1, [pc, #468]	; (80060ac <HAL_RCC_ClockConfig+0x244>)
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0308 	and.w	r3, r3, #8
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d010      	beq.n	8005f08 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	695a      	ldr	r2, [r3, #20]
 8005eea:	4b70      	ldr	r3, [pc, #448]	; (80060ac <HAL_RCC_ClockConfig+0x244>)
 8005eec:	69db      	ldr	r3, [r3, #28]
 8005eee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d908      	bls.n	8005f08 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005ef6:	4b6d      	ldr	r3, [pc, #436]	; (80060ac <HAL_RCC_ClockConfig+0x244>)
 8005ef8:	69db      	ldr	r3, [r3, #28]
 8005efa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	496a      	ldr	r1, [pc, #424]	; (80060ac <HAL_RCC_ClockConfig+0x244>)
 8005f04:	4313      	orrs	r3, r2
 8005f06:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0310 	and.w	r3, r3, #16
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d010      	beq.n	8005f36 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	699a      	ldr	r2, [r3, #24]
 8005f18:	4b64      	ldr	r3, [pc, #400]	; (80060ac <HAL_RCC_ClockConfig+0x244>)
 8005f1a:	69db      	ldr	r3, [r3, #28]
 8005f1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d908      	bls.n	8005f36 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005f24:	4b61      	ldr	r3, [pc, #388]	; (80060ac <HAL_RCC_ClockConfig+0x244>)
 8005f26:	69db      	ldr	r3, [r3, #28]
 8005f28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	699b      	ldr	r3, [r3, #24]
 8005f30:	495e      	ldr	r1, [pc, #376]	; (80060ac <HAL_RCC_ClockConfig+0x244>)
 8005f32:	4313      	orrs	r3, r2
 8005f34:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0320 	and.w	r3, r3, #32
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d010      	beq.n	8005f64 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	69da      	ldr	r2, [r3, #28]
 8005f46:	4b59      	ldr	r3, [pc, #356]	; (80060ac <HAL_RCC_ClockConfig+0x244>)
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d908      	bls.n	8005f64 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005f52:	4b56      	ldr	r3, [pc, #344]	; (80060ac <HAL_RCC_ClockConfig+0x244>)
 8005f54:	6a1b      	ldr	r3, [r3, #32]
 8005f56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	69db      	ldr	r3, [r3, #28]
 8005f5e:	4953      	ldr	r1, [pc, #332]	; (80060ac <HAL_RCC_ClockConfig+0x244>)
 8005f60:	4313      	orrs	r3, r2
 8005f62:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0302 	and.w	r3, r3, #2
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d010      	beq.n	8005f92 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	68da      	ldr	r2, [r3, #12]
 8005f74:	4b4d      	ldr	r3, [pc, #308]	; (80060ac <HAL_RCC_ClockConfig+0x244>)
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	f003 030f 	and.w	r3, r3, #15
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d908      	bls.n	8005f92 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f80:	4b4a      	ldr	r3, [pc, #296]	; (80060ac <HAL_RCC_ClockConfig+0x244>)
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	f023 020f 	bic.w	r2, r3, #15
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	4947      	ldr	r1, [pc, #284]	; (80060ac <HAL_RCC_ClockConfig+0x244>)
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 0301 	and.w	r3, r3, #1
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d055      	beq.n	800604a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005f9e:	4b43      	ldr	r3, [pc, #268]	; (80060ac <HAL_RCC_ClockConfig+0x244>)
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	4940      	ldr	r1, [pc, #256]	; (80060ac <HAL_RCC_ClockConfig+0x244>)
 8005fac:	4313      	orrs	r3, r2
 8005fae:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d107      	bne.n	8005fc8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005fb8:	4b3c      	ldr	r3, [pc, #240]	; (80060ac <HAL_RCC_ClockConfig+0x244>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d121      	bne.n	8006008 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e0f6      	b.n	80061b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	2b03      	cmp	r3, #3
 8005fce:	d107      	bne.n	8005fe0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005fd0:	4b36      	ldr	r3, [pc, #216]	; (80060ac <HAL_RCC_ClockConfig+0x244>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d115      	bne.n	8006008 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e0ea      	b.n	80061b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d107      	bne.n	8005ff8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005fe8:	4b30      	ldr	r3, [pc, #192]	; (80060ac <HAL_RCC_ClockConfig+0x244>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d109      	bne.n	8006008 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e0de      	b.n	80061b6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ff8:	4b2c      	ldr	r3, [pc, #176]	; (80060ac <HAL_RCC_ClockConfig+0x244>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0304 	and.w	r3, r3, #4
 8006000:	2b00      	cmp	r3, #0
 8006002:	d101      	bne.n	8006008 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e0d6      	b.n	80061b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006008:	4b28      	ldr	r3, [pc, #160]	; (80060ac <HAL_RCC_ClockConfig+0x244>)
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	f023 0207 	bic.w	r2, r3, #7
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	4925      	ldr	r1, [pc, #148]	; (80060ac <HAL_RCC_ClockConfig+0x244>)
 8006016:	4313      	orrs	r3, r2
 8006018:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800601a:	f7fa fe79 	bl	8000d10 <HAL_GetTick>
 800601e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006020:	e00a      	b.n	8006038 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006022:	f7fa fe75 	bl	8000d10 <HAL_GetTick>
 8006026:	4602      	mov	r2, r0
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006030:	4293      	cmp	r3, r2
 8006032:	d901      	bls.n	8006038 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006034:	2303      	movs	r3, #3
 8006036:	e0be      	b.n	80061b6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006038:	4b1c      	ldr	r3, [pc, #112]	; (80060ac <HAL_RCC_ClockConfig+0x244>)
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	00db      	lsls	r3, r3, #3
 8006046:	429a      	cmp	r2, r3
 8006048:	d1eb      	bne.n	8006022 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0302 	and.w	r3, r3, #2
 8006052:	2b00      	cmp	r3, #0
 8006054:	d010      	beq.n	8006078 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	68da      	ldr	r2, [r3, #12]
 800605a:	4b14      	ldr	r3, [pc, #80]	; (80060ac <HAL_RCC_ClockConfig+0x244>)
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	f003 030f 	and.w	r3, r3, #15
 8006062:	429a      	cmp	r2, r3
 8006064:	d208      	bcs.n	8006078 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006066:	4b11      	ldr	r3, [pc, #68]	; (80060ac <HAL_RCC_ClockConfig+0x244>)
 8006068:	699b      	ldr	r3, [r3, #24]
 800606a:	f023 020f 	bic.w	r2, r3, #15
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	490e      	ldr	r1, [pc, #56]	; (80060ac <HAL_RCC_ClockConfig+0x244>)
 8006074:	4313      	orrs	r3, r2
 8006076:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006078:	4b0b      	ldr	r3, [pc, #44]	; (80060a8 <HAL_RCC_ClockConfig+0x240>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 030f 	and.w	r3, r3, #15
 8006080:	683a      	ldr	r2, [r7, #0]
 8006082:	429a      	cmp	r2, r3
 8006084:	d214      	bcs.n	80060b0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006086:	4b08      	ldr	r3, [pc, #32]	; (80060a8 <HAL_RCC_ClockConfig+0x240>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f023 020f 	bic.w	r2, r3, #15
 800608e:	4906      	ldr	r1, [pc, #24]	; (80060a8 <HAL_RCC_ClockConfig+0x240>)
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	4313      	orrs	r3, r2
 8006094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006096:	4b04      	ldr	r3, [pc, #16]	; (80060a8 <HAL_RCC_ClockConfig+0x240>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 030f 	and.w	r3, r3, #15
 800609e:	683a      	ldr	r2, [r7, #0]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d005      	beq.n	80060b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e086      	b.n	80061b6 <HAL_RCC_ClockConfig+0x34e>
 80060a8:	52002000 	.word	0x52002000
 80060ac:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0304 	and.w	r3, r3, #4
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d010      	beq.n	80060de <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	691a      	ldr	r2, [r3, #16]
 80060c0:	4b3f      	ldr	r3, [pc, #252]	; (80061c0 <HAL_RCC_ClockConfig+0x358>)
 80060c2:	699b      	ldr	r3, [r3, #24]
 80060c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d208      	bcs.n	80060de <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80060cc:	4b3c      	ldr	r3, [pc, #240]	; (80061c0 <HAL_RCC_ClockConfig+0x358>)
 80060ce:	699b      	ldr	r3, [r3, #24]
 80060d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	4939      	ldr	r1, [pc, #228]	; (80061c0 <HAL_RCC_ClockConfig+0x358>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0308 	and.w	r3, r3, #8
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d010      	beq.n	800610c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	695a      	ldr	r2, [r3, #20]
 80060ee:	4b34      	ldr	r3, [pc, #208]	; (80061c0 <HAL_RCC_ClockConfig+0x358>)
 80060f0:	69db      	ldr	r3, [r3, #28]
 80060f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d208      	bcs.n	800610c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80060fa:	4b31      	ldr	r3, [pc, #196]	; (80061c0 <HAL_RCC_ClockConfig+0x358>)
 80060fc:	69db      	ldr	r3, [r3, #28]
 80060fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	492e      	ldr	r1, [pc, #184]	; (80061c0 <HAL_RCC_ClockConfig+0x358>)
 8006108:	4313      	orrs	r3, r2
 800610a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0310 	and.w	r3, r3, #16
 8006114:	2b00      	cmp	r3, #0
 8006116:	d010      	beq.n	800613a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	699a      	ldr	r2, [r3, #24]
 800611c:	4b28      	ldr	r3, [pc, #160]	; (80061c0 <HAL_RCC_ClockConfig+0x358>)
 800611e:	69db      	ldr	r3, [r3, #28]
 8006120:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006124:	429a      	cmp	r2, r3
 8006126:	d208      	bcs.n	800613a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006128:	4b25      	ldr	r3, [pc, #148]	; (80061c0 <HAL_RCC_ClockConfig+0x358>)
 800612a:	69db      	ldr	r3, [r3, #28]
 800612c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	699b      	ldr	r3, [r3, #24]
 8006134:	4922      	ldr	r1, [pc, #136]	; (80061c0 <HAL_RCC_ClockConfig+0x358>)
 8006136:	4313      	orrs	r3, r2
 8006138:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0320 	and.w	r3, r3, #32
 8006142:	2b00      	cmp	r3, #0
 8006144:	d010      	beq.n	8006168 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	69da      	ldr	r2, [r3, #28]
 800614a:	4b1d      	ldr	r3, [pc, #116]	; (80061c0 <HAL_RCC_ClockConfig+0x358>)
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006152:	429a      	cmp	r2, r3
 8006154:	d208      	bcs.n	8006168 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006156:	4b1a      	ldr	r3, [pc, #104]	; (80061c0 <HAL_RCC_ClockConfig+0x358>)
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	69db      	ldr	r3, [r3, #28]
 8006162:	4917      	ldr	r1, [pc, #92]	; (80061c0 <HAL_RCC_ClockConfig+0x358>)
 8006164:	4313      	orrs	r3, r2
 8006166:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006168:	f000 f834 	bl	80061d4 <HAL_RCC_GetSysClockFreq>
 800616c:	4602      	mov	r2, r0
 800616e:	4b14      	ldr	r3, [pc, #80]	; (80061c0 <HAL_RCC_ClockConfig+0x358>)
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	0a1b      	lsrs	r3, r3, #8
 8006174:	f003 030f 	and.w	r3, r3, #15
 8006178:	4912      	ldr	r1, [pc, #72]	; (80061c4 <HAL_RCC_ClockConfig+0x35c>)
 800617a:	5ccb      	ldrb	r3, [r1, r3]
 800617c:	f003 031f 	and.w	r3, r3, #31
 8006180:	fa22 f303 	lsr.w	r3, r2, r3
 8006184:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006186:	4b0e      	ldr	r3, [pc, #56]	; (80061c0 <HAL_RCC_ClockConfig+0x358>)
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	f003 030f 	and.w	r3, r3, #15
 800618e:	4a0d      	ldr	r2, [pc, #52]	; (80061c4 <HAL_RCC_ClockConfig+0x35c>)
 8006190:	5cd3      	ldrb	r3, [r2, r3]
 8006192:	f003 031f 	and.w	r3, r3, #31
 8006196:	693a      	ldr	r2, [r7, #16]
 8006198:	fa22 f303 	lsr.w	r3, r2, r3
 800619c:	4a0a      	ldr	r2, [pc, #40]	; (80061c8 <HAL_RCC_ClockConfig+0x360>)
 800619e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80061a0:	4a0a      	ldr	r2, [pc, #40]	; (80061cc <HAL_RCC_ClockConfig+0x364>)
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80061a6:	4b0a      	ldr	r3, [pc, #40]	; (80061d0 <HAL_RCC_ClockConfig+0x368>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7fa fd66 	bl	8000c7c <HAL_InitTick>
 80061b0:	4603      	mov	r3, r0
 80061b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80061b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3718      	adds	r7, #24
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	58024400 	.word	0x58024400
 80061c4:	08008d90 	.word	0x08008d90
 80061c8:	24000004 	.word	0x24000004
 80061cc:	24000000 	.word	0x24000000
 80061d0:	24000008 	.word	0x24000008

080061d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b089      	sub	sp, #36	; 0x24
 80061d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80061da:	4bb3      	ldr	r3, [pc, #716]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061e2:	2b18      	cmp	r3, #24
 80061e4:	f200 8155 	bhi.w	8006492 <HAL_RCC_GetSysClockFreq+0x2be>
 80061e8:	a201      	add	r2, pc, #4	; (adr r2, 80061f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80061ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ee:	bf00      	nop
 80061f0:	08006255 	.word	0x08006255
 80061f4:	08006493 	.word	0x08006493
 80061f8:	08006493 	.word	0x08006493
 80061fc:	08006493 	.word	0x08006493
 8006200:	08006493 	.word	0x08006493
 8006204:	08006493 	.word	0x08006493
 8006208:	08006493 	.word	0x08006493
 800620c:	08006493 	.word	0x08006493
 8006210:	0800627b 	.word	0x0800627b
 8006214:	08006493 	.word	0x08006493
 8006218:	08006493 	.word	0x08006493
 800621c:	08006493 	.word	0x08006493
 8006220:	08006493 	.word	0x08006493
 8006224:	08006493 	.word	0x08006493
 8006228:	08006493 	.word	0x08006493
 800622c:	08006493 	.word	0x08006493
 8006230:	08006281 	.word	0x08006281
 8006234:	08006493 	.word	0x08006493
 8006238:	08006493 	.word	0x08006493
 800623c:	08006493 	.word	0x08006493
 8006240:	08006493 	.word	0x08006493
 8006244:	08006493 	.word	0x08006493
 8006248:	08006493 	.word	0x08006493
 800624c:	08006493 	.word	0x08006493
 8006250:	08006287 	.word	0x08006287
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006254:	4b94      	ldr	r3, [pc, #592]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0320 	and.w	r3, r3, #32
 800625c:	2b00      	cmp	r3, #0
 800625e:	d009      	beq.n	8006274 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006260:	4b91      	ldr	r3, [pc, #580]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	08db      	lsrs	r3, r3, #3
 8006266:	f003 0303 	and.w	r3, r3, #3
 800626a:	4a90      	ldr	r2, [pc, #576]	; (80064ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800626c:	fa22 f303 	lsr.w	r3, r2, r3
 8006270:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006272:	e111      	b.n	8006498 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006274:	4b8d      	ldr	r3, [pc, #564]	; (80064ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006276:	61bb      	str	r3, [r7, #24]
      break;
 8006278:	e10e      	b.n	8006498 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800627a:	4b8d      	ldr	r3, [pc, #564]	; (80064b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800627c:	61bb      	str	r3, [r7, #24]
      break;
 800627e:	e10b      	b.n	8006498 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006280:	4b8c      	ldr	r3, [pc, #560]	; (80064b4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006282:	61bb      	str	r3, [r7, #24]
      break;
 8006284:	e108      	b.n	8006498 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006286:	4b88      	ldr	r3, [pc, #544]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800628a:	f003 0303 	and.w	r3, r3, #3
 800628e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006290:	4b85      	ldr	r3, [pc, #532]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006294:	091b      	lsrs	r3, r3, #4
 8006296:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800629a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800629c:	4b82      	ldr	r3, [pc, #520]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800629e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a0:	f003 0301 	and.w	r3, r3, #1
 80062a4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80062a6:	4b80      	ldr	r3, [pc, #512]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062aa:	08db      	lsrs	r3, r3, #3
 80062ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	fb02 f303 	mul.w	r3, r2, r3
 80062b6:	ee07 3a90 	vmov	s15, r3
 80062ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062be:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f000 80e1 	beq.w	800648c <HAL_RCC_GetSysClockFreq+0x2b8>
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	f000 8083 	beq.w	80063d8 <HAL_RCC_GetSysClockFreq+0x204>
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	2b02      	cmp	r3, #2
 80062d6:	f200 80a1 	bhi.w	800641c <HAL_RCC_GetSysClockFreq+0x248>
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d003      	beq.n	80062e8 <HAL_RCC_GetSysClockFreq+0x114>
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d056      	beq.n	8006394 <HAL_RCC_GetSysClockFreq+0x1c0>
 80062e6:	e099      	b.n	800641c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062e8:	4b6f      	ldr	r3, [pc, #444]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 0320 	and.w	r3, r3, #32
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d02d      	beq.n	8006350 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062f4:	4b6c      	ldr	r3, [pc, #432]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	08db      	lsrs	r3, r3, #3
 80062fa:	f003 0303 	and.w	r3, r3, #3
 80062fe:	4a6b      	ldr	r2, [pc, #428]	; (80064ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006300:	fa22 f303 	lsr.w	r3, r2, r3
 8006304:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	ee07 3a90 	vmov	s15, r3
 800630c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	ee07 3a90 	vmov	s15, r3
 8006316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800631a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800631e:	4b62      	ldr	r3, [pc, #392]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006326:	ee07 3a90 	vmov	s15, r3
 800632a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800632e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006332:	eddf 5a61 	vldr	s11, [pc, #388]	; 80064b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800633a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800633e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800634a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800634e:	e087      	b.n	8006460 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	ee07 3a90 	vmov	s15, r3
 8006356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800635a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80064bc <HAL_RCC_GetSysClockFreq+0x2e8>
 800635e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006362:	4b51      	ldr	r3, [pc, #324]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800636a:	ee07 3a90 	vmov	s15, r3
 800636e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006372:	ed97 6a02 	vldr	s12, [r7, #8]
 8006376:	eddf 5a50 	vldr	s11, [pc, #320]	; 80064b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800637a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800637e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006382:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800638a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800638e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006392:	e065      	b.n	8006460 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	ee07 3a90 	vmov	s15, r3
 800639a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800639e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80064c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80063a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063a6:	4b40      	ldr	r3, [pc, #256]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063ae:	ee07 3a90 	vmov	s15, r3
 80063b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80063ba:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80064b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80063be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80063d6:	e043      	b.n	8006460 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	ee07 3a90 	vmov	s15, r3
 80063de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063e2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80064c4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80063e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063ea:	4b2f      	ldr	r3, [pc, #188]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063f2:	ee07 3a90 	vmov	s15, r3
 80063f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80063fe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80064b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800640a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800640e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006416:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800641a:	e021      	b.n	8006460 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	ee07 3a90 	vmov	s15, r3
 8006422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006426:	eddf 6a26 	vldr	s13, [pc, #152]	; 80064c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800642a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800642e:	4b1e      	ldr	r3, [pc, #120]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006436:	ee07 3a90 	vmov	s15, r3
 800643a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800643e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006442:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80064b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800644a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800644e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800645a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800645e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006460:	4b11      	ldr	r3, [pc, #68]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006464:	0a5b      	lsrs	r3, r3, #9
 8006466:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800646a:	3301      	adds	r3, #1
 800646c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	ee07 3a90 	vmov	s15, r3
 8006474:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006478:	edd7 6a07 	vldr	s13, [r7, #28]
 800647c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006480:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006484:	ee17 3a90 	vmov	r3, s15
 8006488:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800648a:	e005      	b.n	8006498 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800648c:	2300      	movs	r3, #0
 800648e:	61bb      	str	r3, [r7, #24]
      break;
 8006490:	e002      	b.n	8006498 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006492:	4b07      	ldr	r3, [pc, #28]	; (80064b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006494:	61bb      	str	r3, [r7, #24]
      break;
 8006496:	bf00      	nop
  }

  return sysclockfreq;
 8006498:	69bb      	ldr	r3, [r7, #24]
}
 800649a:	4618      	mov	r0, r3
 800649c:	3724      	adds	r7, #36	; 0x24
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	58024400 	.word	0x58024400
 80064ac:	03d09000 	.word	0x03d09000
 80064b0:	003d0900 	.word	0x003d0900
 80064b4:	017d7840 	.word	0x017d7840
 80064b8:	46000000 	.word	0x46000000
 80064bc:	4c742400 	.word	0x4c742400
 80064c0:	4a742400 	.word	0x4a742400
 80064c4:	4bbebc20 	.word	0x4bbebc20

080064c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80064ce:	f7ff fe81 	bl	80061d4 <HAL_RCC_GetSysClockFreq>
 80064d2:	4602      	mov	r2, r0
 80064d4:	4b10      	ldr	r3, [pc, #64]	; (8006518 <HAL_RCC_GetHCLKFreq+0x50>)
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	0a1b      	lsrs	r3, r3, #8
 80064da:	f003 030f 	and.w	r3, r3, #15
 80064de:	490f      	ldr	r1, [pc, #60]	; (800651c <HAL_RCC_GetHCLKFreq+0x54>)
 80064e0:	5ccb      	ldrb	r3, [r1, r3]
 80064e2:	f003 031f 	and.w	r3, r3, #31
 80064e6:	fa22 f303 	lsr.w	r3, r2, r3
 80064ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80064ec:	4b0a      	ldr	r3, [pc, #40]	; (8006518 <HAL_RCC_GetHCLKFreq+0x50>)
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	f003 030f 	and.w	r3, r3, #15
 80064f4:	4a09      	ldr	r2, [pc, #36]	; (800651c <HAL_RCC_GetHCLKFreq+0x54>)
 80064f6:	5cd3      	ldrb	r3, [r2, r3]
 80064f8:	f003 031f 	and.w	r3, r3, #31
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006502:	4a07      	ldr	r2, [pc, #28]	; (8006520 <HAL_RCC_GetHCLKFreq+0x58>)
 8006504:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006506:	4a07      	ldr	r2, [pc, #28]	; (8006524 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800650c:	4b04      	ldr	r3, [pc, #16]	; (8006520 <HAL_RCC_GetHCLKFreq+0x58>)
 800650e:	681b      	ldr	r3, [r3, #0]
}
 8006510:	4618      	mov	r0, r3
 8006512:	3708      	adds	r7, #8
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}
 8006518:	58024400 	.word	0x58024400
 800651c:	08008d90 	.word	0x08008d90
 8006520:	24000004 	.word	0x24000004
 8006524:	24000000 	.word	0x24000000

08006528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800652c:	f7ff ffcc 	bl	80064c8 <HAL_RCC_GetHCLKFreq>
 8006530:	4602      	mov	r2, r0
 8006532:	4b06      	ldr	r3, [pc, #24]	; (800654c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006534:	69db      	ldr	r3, [r3, #28]
 8006536:	091b      	lsrs	r3, r3, #4
 8006538:	f003 0307 	and.w	r3, r3, #7
 800653c:	4904      	ldr	r1, [pc, #16]	; (8006550 <HAL_RCC_GetPCLK1Freq+0x28>)
 800653e:	5ccb      	ldrb	r3, [r1, r3]
 8006540:	f003 031f 	and.w	r3, r3, #31
 8006544:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006548:	4618      	mov	r0, r3
 800654a:	bd80      	pop	{r7, pc}
 800654c:	58024400 	.word	0x58024400
 8006550:	08008d90 	.word	0x08008d90

08006554 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006554:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006558:	b0c6      	sub	sp, #280	; 0x118
 800655a:	af00      	add	r7, sp, #0
 800655c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006560:	2300      	movs	r3, #0
 8006562:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006566:	2300      	movs	r3, #0
 8006568:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800656c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006574:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006578:	2500      	movs	r5, #0
 800657a:	ea54 0305 	orrs.w	r3, r4, r5
 800657e:	d049      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006580:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006584:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006586:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800658a:	d02f      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x98>
 800658c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006590:	d828      	bhi.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006592:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006596:	d01a      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006598:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800659c:	d822      	bhi.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d003      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80065a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065a6:	d007      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80065a8:	e01c      	b.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065aa:	4bab      	ldr	r3, [pc, #684]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80065ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ae:	4aaa      	ldr	r2, [pc, #680]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80065b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80065b6:	e01a      	b.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80065b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065bc:	3308      	adds	r3, #8
 80065be:	2102      	movs	r1, #2
 80065c0:	4618      	mov	r0, r3
 80065c2:	f002 fa49 	bl	8008a58 <RCCEx_PLL2_Config>
 80065c6:	4603      	mov	r3, r0
 80065c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80065cc:	e00f      	b.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80065ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065d2:	3328      	adds	r3, #40	; 0x28
 80065d4:	2102      	movs	r1, #2
 80065d6:	4618      	mov	r0, r3
 80065d8:	f002 faf0 	bl	8008bbc <RCCEx_PLL3_Config>
 80065dc:	4603      	mov	r3, r0
 80065de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80065e2:	e004      	b.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80065ea:	e000      	b.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80065ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065ee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d10a      	bne.n	800660c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80065f6:	4b98      	ldr	r3, [pc, #608]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80065f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065fa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80065fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006602:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006604:	4a94      	ldr	r2, [pc, #592]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006606:	430b      	orrs	r3, r1
 8006608:	6513      	str	r3, [r2, #80]	; 0x50
 800660a:	e003      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800660c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006610:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006614:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006620:	f04f 0900 	mov.w	r9, #0
 8006624:	ea58 0309 	orrs.w	r3, r8, r9
 8006628:	d047      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800662a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800662e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006630:	2b04      	cmp	r3, #4
 8006632:	d82a      	bhi.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006634:	a201      	add	r2, pc, #4	; (adr r2, 800663c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800663a:	bf00      	nop
 800663c:	08006651 	.word	0x08006651
 8006640:	0800665f 	.word	0x0800665f
 8006644:	08006675 	.word	0x08006675
 8006648:	08006693 	.word	0x08006693
 800664c:	08006693 	.word	0x08006693
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006650:	4b81      	ldr	r3, [pc, #516]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006654:	4a80      	ldr	r2, [pc, #512]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006656:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800665a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800665c:	e01a      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800665e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006662:	3308      	adds	r3, #8
 8006664:	2100      	movs	r1, #0
 8006666:	4618      	mov	r0, r3
 8006668:	f002 f9f6 	bl	8008a58 <RCCEx_PLL2_Config>
 800666c:	4603      	mov	r3, r0
 800666e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006672:	e00f      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006674:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006678:	3328      	adds	r3, #40	; 0x28
 800667a:	2100      	movs	r1, #0
 800667c:	4618      	mov	r0, r3
 800667e:	f002 fa9d 	bl	8008bbc <RCCEx_PLL3_Config>
 8006682:	4603      	mov	r3, r0
 8006684:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006688:	e004      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006690:	e000      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006692:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006694:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006698:	2b00      	cmp	r3, #0
 800669a:	d10a      	bne.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800669c:	4b6e      	ldr	r3, [pc, #440]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800669e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066a0:	f023 0107 	bic.w	r1, r3, #7
 80066a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066aa:	4a6b      	ldr	r2, [pc, #428]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80066ac:	430b      	orrs	r3, r1
 80066ae:	6513      	str	r3, [r2, #80]	; 0x50
 80066b0:	e003      	b.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066b2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80066b6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80066ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c2:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 80066c6:	f04f 0b00 	mov.w	fp, #0
 80066ca:	ea5a 030b 	orrs.w	r3, sl, fp
 80066ce:	d05b      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80066d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80066d8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80066dc:	d03b      	beq.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80066de:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80066e2:	d834      	bhi.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80066e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80066e8:	d037      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x206>
 80066ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80066ee:	d82e      	bhi.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80066f0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80066f4:	d033      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80066f6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80066fa:	d828      	bhi.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80066fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006700:	d01a      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006702:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006706:	d822      	bhi.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006708:	2b00      	cmp	r3, #0
 800670a:	d003      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800670c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006710:	d007      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8006712:	e01c      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006714:	4b50      	ldr	r3, [pc, #320]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006718:	4a4f      	ldr	r2, [pc, #316]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800671a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800671e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006720:	e01e      	b.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006722:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006726:	3308      	adds	r3, #8
 8006728:	2100      	movs	r1, #0
 800672a:	4618      	mov	r0, r3
 800672c:	f002 f994 	bl	8008a58 <RCCEx_PLL2_Config>
 8006730:	4603      	mov	r3, r0
 8006732:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006736:	e013      	b.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006738:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800673c:	3328      	adds	r3, #40	; 0x28
 800673e:	2100      	movs	r1, #0
 8006740:	4618      	mov	r0, r3
 8006742:	f002 fa3b 	bl	8008bbc <RCCEx_PLL3_Config>
 8006746:	4603      	mov	r3, r0
 8006748:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800674c:	e008      	b.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006754:	e004      	b.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006756:	bf00      	nop
 8006758:	e002      	b.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800675a:	bf00      	nop
 800675c:	e000      	b.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800675e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006760:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006764:	2b00      	cmp	r3, #0
 8006766:	d10b      	bne.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006768:	4b3b      	ldr	r3, [pc, #236]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800676a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800676c:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006770:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006774:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006778:	4a37      	ldr	r2, [pc, #220]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800677a:	430b      	orrs	r3, r1
 800677c:	6593      	str	r3, [r2, #88]	; 0x58
 800677e:	e003      	b.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006780:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006784:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006788:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800678c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006790:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006794:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006798:	2300      	movs	r3, #0
 800679a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800679e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80067a2:	460b      	mov	r3, r1
 80067a4:	4313      	orrs	r3, r2
 80067a6:	d05d      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80067a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80067b0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80067b4:	d03b      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80067b6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80067ba:	d834      	bhi.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80067bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80067c0:	d037      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80067c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80067c6:	d82e      	bhi.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80067c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80067cc:	d033      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80067ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80067d2:	d828      	bhi.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80067d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067d8:	d01a      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80067da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067de:	d822      	bhi.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d003      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x298>
 80067e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067e8:	d007      	beq.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80067ea:	e01c      	b.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067ec:	4b1a      	ldr	r3, [pc, #104]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80067ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f0:	4a19      	ldr	r2, [pc, #100]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80067f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80067f8:	e01e      	b.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067fe:	3308      	adds	r3, #8
 8006800:	2100      	movs	r1, #0
 8006802:	4618      	mov	r0, r3
 8006804:	f002 f928 	bl	8008a58 <RCCEx_PLL2_Config>
 8006808:	4603      	mov	r3, r0
 800680a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800680e:	e013      	b.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006810:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006814:	3328      	adds	r3, #40	; 0x28
 8006816:	2100      	movs	r1, #0
 8006818:	4618      	mov	r0, r3
 800681a:	f002 f9cf 	bl	8008bbc <RCCEx_PLL3_Config>
 800681e:	4603      	mov	r3, r0
 8006820:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006824:	e008      	b.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800682c:	e004      	b.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800682e:	bf00      	nop
 8006830:	e002      	b.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006832:	bf00      	nop
 8006834:	e000      	b.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006836:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006838:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800683c:	2b00      	cmp	r3, #0
 800683e:	d10d      	bne.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006840:	4b05      	ldr	r3, [pc, #20]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006844:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006848:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800684c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006850:	4a01      	ldr	r2, [pc, #4]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006852:	430b      	orrs	r3, r1
 8006854:	6593      	str	r3, [r2, #88]	; 0x58
 8006856:	e005      	b.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006858:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800685c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006860:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006864:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006870:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006874:	2300      	movs	r3, #0
 8006876:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800687a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800687e:	460b      	mov	r3, r1
 8006880:	4313      	orrs	r3, r2
 8006882:	d03a      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006884:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800688a:	2b30      	cmp	r3, #48	; 0x30
 800688c:	d01f      	beq.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800688e:	2b30      	cmp	r3, #48	; 0x30
 8006890:	d819      	bhi.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006892:	2b20      	cmp	r3, #32
 8006894:	d00c      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006896:	2b20      	cmp	r3, #32
 8006898:	d815      	bhi.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800689a:	2b00      	cmp	r3, #0
 800689c:	d019      	beq.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800689e:	2b10      	cmp	r3, #16
 80068a0:	d111      	bne.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068a2:	4baa      	ldr	r3, [pc, #680]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80068a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a6:	4aa9      	ldr	r2, [pc, #676]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80068a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80068ae:	e011      	b.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80068b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068b4:	3308      	adds	r3, #8
 80068b6:	2102      	movs	r1, #2
 80068b8:	4618      	mov	r0, r3
 80068ba:	f002 f8cd 	bl	8008a58 <RCCEx_PLL2_Config>
 80068be:	4603      	mov	r3, r0
 80068c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80068c4:	e006      	b.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80068cc:	e002      	b.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80068ce:	bf00      	nop
 80068d0:	e000      	b.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80068d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d10a      	bne.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80068dc:	4b9b      	ldr	r3, [pc, #620]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80068de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068e0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80068e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068ea:	4a98      	ldr	r2, [pc, #608]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80068ec:	430b      	orrs	r3, r1
 80068ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80068f0:	e003      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80068f6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80068fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006902:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006906:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800690a:	2300      	movs	r3, #0
 800690c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006910:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006914:	460b      	mov	r3, r1
 8006916:	4313      	orrs	r3, r2
 8006918:	d051      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800691a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800691e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006920:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006924:	d035      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8006926:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800692a:	d82e      	bhi.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800692c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006930:	d031      	beq.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006932:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006936:	d828      	bhi.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006938:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800693c:	d01a      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800693e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006942:	d822      	bhi.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006944:	2b00      	cmp	r3, #0
 8006946:	d003      	beq.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800694c:	d007      	beq.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800694e:	e01c      	b.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006950:	4b7e      	ldr	r3, [pc, #504]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006954:	4a7d      	ldr	r2, [pc, #500]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006956:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800695a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800695c:	e01c      	b.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800695e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006962:	3308      	adds	r3, #8
 8006964:	2100      	movs	r1, #0
 8006966:	4618      	mov	r0, r3
 8006968:	f002 f876 	bl	8008a58 <RCCEx_PLL2_Config>
 800696c:	4603      	mov	r3, r0
 800696e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006972:	e011      	b.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006974:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006978:	3328      	adds	r3, #40	; 0x28
 800697a:	2100      	movs	r1, #0
 800697c:	4618      	mov	r0, r3
 800697e:	f002 f91d 	bl	8008bbc <RCCEx_PLL3_Config>
 8006982:	4603      	mov	r3, r0
 8006984:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006988:	e006      	b.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006990:	e002      	b.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006992:	bf00      	nop
 8006994:	e000      	b.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006996:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006998:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800699c:	2b00      	cmp	r3, #0
 800699e:	d10a      	bne.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80069a0:	4b6a      	ldr	r3, [pc, #424]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80069a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069a4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80069a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069ae:	4a67      	ldr	r2, [pc, #412]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80069b0:	430b      	orrs	r3, r1
 80069b2:	6513      	str	r3, [r2, #80]	; 0x50
 80069b4:	e003      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069b6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80069ba:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80069be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80069ca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80069ce:	2300      	movs	r3, #0
 80069d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80069d4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80069d8:	460b      	mov	r3, r1
 80069da:	4313      	orrs	r3, r2
 80069dc:	d053      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80069de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069e8:	d033      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80069ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069ee:	d82c      	bhi.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80069f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069f4:	d02f      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80069f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069fa:	d826      	bhi.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80069fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a00:	d02b      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006a02:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a06:	d820      	bhi.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006a08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a0c:	d012      	beq.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006a0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a12:	d81a      	bhi.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d022      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a1c:	d115      	bne.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a22:	3308      	adds	r3, #8
 8006a24:	2101      	movs	r1, #1
 8006a26:	4618      	mov	r0, r3
 8006a28:	f002 f816 	bl	8008a58 <RCCEx_PLL2_Config>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006a32:	e015      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a38:	3328      	adds	r3, #40	; 0x28
 8006a3a:	2101      	movs	r1, #1
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f002 f8bd 	bl	8008bbc <RCCEx_PLL3_Config>
 8006a42:	4603      	mov	r3, r0
 8006a44:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006a48:	e00a      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006a50:	e006      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006a52:	bf00      	nop
 8006a54:	e004      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006a56:	bf00      	nop
 8006a58:	e002      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006a5a:	bf00      	nop
 8006a5c:	e000      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006a5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d10a      	bne.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006a68:	4b38      	ldr	r3, [pc, #224]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a6c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a76:	4a35      	ldr	r2, [pc, #212]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006a78:	430b      	orrs	r3, r1
 8006a7a:	6513      	str	r3, [r2, #80]	; 0x50
 8006a7c:	e003      	b.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a7e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a82:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006a92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006a96:	2300      	movs	r3, #0
 8006a98:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006a9c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	d058      	beq.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aaa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006aae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ab2:	d033      	beq.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006ab4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ab8:	d82c      	bhi.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006abe:	d02f      	beq.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ac4:	d826      	bhi.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006ac6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006aca:	d02b      	beq.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006acc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ad0:	d820      	bhi.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006ad2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ad6:	d012      	beq.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006ad8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006adc:	d81a      	bhi.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d022      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006ae2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ae6:	d115      	bne.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aec:	3308      	adds	r3, #8
 8006aee:	2101      	movs	r1, #1
 8006af0:	4618      	mov	r0, r3
 8006af2:	f001 ffb1 	bl	8008a58 <RCCEx_PLL2_Config>
 8006af6:	4603      	mov	r3, r0
 8006af8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006afc:	e015      	b.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b02:	3328      	adds	r3, #40	; 0x28
 8006b04:	2101      	movs	r1, #1
 8006b06:	4618      	mov	r0, r3
 8006b08:	f002 f858 	bl	8008bbc <RCCEx_PLL3_Config>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006b12:	e00a      	b.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006b1a:	e006      	b.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006b1c:	bf00      	nop
 8006b1e:	e004      	b.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006b20:	bf00      	nop
 8006b22:	e002      	b.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006b24:	bf00      	nop
 8006b26:	e000      	b.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006b28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b2a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d10e      	bne.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006b32:	4b06      	ldr	r3, [pc, #24]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b36:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b3e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006b42:	4a02      	ldr	r2, [pc, #8]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006b44:	430b      	orrs	r3, r1
 8006b46:	6593      	str	r3, [r2, #88]	; 0x58
 8006b48:	e006      	b.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006b4a:	bf00      	nop
 8006b4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b50:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b54:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006b58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b60:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006b64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b68:	2300      	movs	r3, #0
 8006b6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006b6e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006b72:	460b      	mov	r3, r1
 8006b74:	4313      	orrs	r3, r2
 8006b76:	d037      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b82:	d00e      	beq.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006b84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b88:	d816      	bhi.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d018      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006b8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b92:	d111      	bne.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b94:	4bc4      	ldr	r3, [pc, #784]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b98:	4ac3      	ldr	r2, [pc, #780]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006ba0:	e00f      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ba6:	3308      	adds	r3, #8
 8006ba8:	2101      	movs	r1, #1
 8006baa:	4618      	mov	r0, r3
 8006bac:	f001 ff54 	bl	8008a58 <RCCEx_PLL2_Config>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006bb6:	e004      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006bbe:	e000      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006bc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bc2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d10a      	bne.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006bca:	4bb7      	ldr	r3, [pc, #732]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bce:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bd8:	4ab3      	ldr	r2, [pc, #716]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006bda:	430b      	orrs	r3, r1
 8006bdc:	6513      	str	r3, [r2, #80]	; 0x50
 8006bde:	e003      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006be4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006bf4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006bfe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8006c02:	460b      	mov	r3, r1
 8006c04:	4313      	orrs	r3, r2
 8006c06:	d039      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c0e:	2b03      	cmp	r3, #3
 8006c10:	d81c      	bhi.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006c12:	a201      	add	r2, pc, #4	; (adr r2, 8006c18 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c18:	08006c55 	.word	0x08006c55
 8006c1c:	08006c29 	.word	0x08006c29
 8006c20:	08006c37 	.word	0x08006c37
 8006c24:	08006c55 	.word	0x08006c55
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c28:	4b9f      	ldr	r3, [pc, #636]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c2c:	4a9e      	ldr	r2, [pc, #632]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006c34:	e00f      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c3a:	3308      	adds	r3, #8
 8006c3c:	2102      	movs	r1, #2
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f001 ff0a 	bl	8008a58 <RCCEx_PLL2_Config>
 8006c44:	4603      	mov	r3, r0
 8006c46:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006c4a:	e004      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006c52:	e000      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006c54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c56:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d10a      	bne.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006c5e:	4b92      	ldr	r3, [pc, #584]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c62:	f023 0103 	bic.w	r1, r3, #3
 8006c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c6c:	4a8e      	ldr	r2, [pc, #568]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c6e:	430b      	orrs	r3, r1
 8006c70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c72:	e003      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c78:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c84:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006c88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c92:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006c96:	460b      	mov	r3, r1
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	f000 8099 	beq.w	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c9e:	4b83      	ldr	r3, [pc, #524]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a82      	ldr	r2, [pc, #520]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ca8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006caa:	f7fa f831 	bl	8000d10 <HAL_GetTick>
 8006cae:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006cb2:	e00b      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cb4:	f7fa f82c 	bl	8000d10 <HAL_GetTick>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	2b64      	cmp	r3, #100	; 0x64
 8006cc2:	d903      	bls.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006cca:	e005      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ccc:	4b77      	ldr	r3, [pc, #476]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d0ed      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006cd8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d173      	bne.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006ce0:	4b71      	ldr	r3, [pc, #452]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ce2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ce8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006cec:	4053      	eors	r3, r2
 8006cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d015      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006cf6:	4b6c      	ldr	r3, [pc, #432]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cfe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d02:	4b69      	ldr	r3, [pc, #420]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d06:	4a68      	ldr	r2, [pc, #416]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d0c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d0e:	4b66      	ldr	r3, [pc, #408]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d12:	4a65      	ldr	r2, [pc, #404]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d18:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006d1a:	4a63      	ldr	r2, [pc, #396]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d20:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d2e:	d118      	bne.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d30:	f7f9 ffee 	bl	8000d10 <HAL_GetTick>
 8006d34:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d38:	e00d      	b.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d3a:	f7f9 ffe9 	bl	8000d10 <HAL_GetTick>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006d44:	1ad2      	subs	r2, r2, r3
 8006d46:	f241 3388 	movw	r3, #5000	; 0x1388
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d903      	bls.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006d4e:	2303      	movs	r3, #3
 8006d50:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8006d54:	e005      	b.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d56:	4b54      	ldr	r3, [pc, #336]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d5a:	f003 0302 	and.w	r3, r3, #2
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d0eb      	beq.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006d62:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d129      	bne.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d7a:	d10e      	bne.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006d7c:	4b4a      	ldr	r3, [pc, #296]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d8c:	091a      	lsrs	r2, r3, #4
 8006d8e:	4b48      	ldr	r3, [pc, #288]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006d90:	4013      	ands	r3, r2
 8006d92:	4a45      	ldr	r2, [pc, #276]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d94:	430b      	orrs	r3, r1
 8006d96:	6113      	str	r3, [r2, #16]
 8006d98:	e005      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006d9a:	4b43      	ldr	r3, [pc, #268]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	4a42      	ldr	r2, [pc, #264]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006da0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006da4:	6113      	str	r3, [r2, #16]
 8006da6:	4b40      	ldr	r3, [pc, #256]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006da8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006db2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006db6:	4a3c      	ldr	r2, [pc, #240]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006db8:	430b      	orrs	r3, r1
 8006dba:	6713      	str	r3, [r2, #112]	; 0x70
 8006dbc:	e008      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006dbe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006dc2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8006dc6:	e003      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dc8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006dcc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd8:	f002 0301 	and.w	r3, r2, #1
 8006ddc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006de0:	2300      	movs	r3, #0
 8006de2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006de6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006dea:	460b      	mov	r3, r1
 8006dec:	4313      	orrs	r3, r2
 8006dee:	f000 808f 	beq.w	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006df6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006df8:	2b28      	cmp	r3, #40	; 0x28
 8006dfa:	d871      	bhi.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006dfc:	a201      	add	r2, pc, #4	; (adr r2, 8006e04 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e02:	bf00      	nop
 8006e04:	08006ee9 	.word	0x08006ee9
 8006e08:	08006ee1 	.word	0x08006ee1
 8006e0c:	08006ee1 	.word	0x08006ee1
 8006e10:	08006ee1 	.word	0x08006ee1
 8006e14:	08006ee1 	.word	0x08006ee1
 8006e18:	08006ee1 	.word	0x08006ee1
 8006e1c:	08006ee1 	.word	0x08006ee1
 8006e20:	08006ee1 	.word	0x08006ee1
 8006e24:	08006eb5 	.word	0x08006eb5
 8006e28:	08006ee1 	.word	0x08006ee1
 8006e2c:	08006ee1 	.word	0x08006ee1
 8006e30:	08006ee1 	.word	0x08006ee1
 8006e34:	08006ee1 	.word	0x08006ee1
 8006e38:	08006ee1 	.word	0x08006ee1
 8006e3c:	08006ee1 	.word	0x08006ee1
 8006e40:	08006ee1 	.word	0x08006ee1
 8006e44:	08006ecb 	.word	0x08006ecb
 8006e48:	08006ee1 	.word	0x08006ee1
 8006e4c:	08006ee1 	.word	0x08006ee1
 8006e50:	08006ee1 	.word	0x08006ee1
 8006e54:	08006ee1 	.word	0x08006ee1
 8006e58:	08006ee1 	.word	0x08006ee1
 8006e5c:	08006ee1 	.word	0x08006ee1
 8006e60:	08006ee1 	.word	0x08006ee1
 8006e64:	08006ee9 	.word	0x08006ee9
 8006e68:	08006ee1 	.word	0x08006ee1
 8006e6c:	08006ee1 	.word	0x08006ee1
 8006e70:	08006ee1 	.word	0x08006ee1
 8006e74:	08006ee1 	.word	0x08006ee1
 8006e78:	08006ee1 	.word	0x08006ee1
 8006e7c:	08006ee1 	.word	0x08006ee1
 8006e80:	08006ee1 	.word	0x08006ee1
 8006e84:	08006ee9 	.word	0x08006ee9
 8006e88:	08006ee1 	.word	0x08006ee1
 8006e8c:	08006ee1 	.word	0x08006ee1
 8006e90:	08006ee1 	.word	0x08006ee1
 8006e94:	08006ee1 	.word	0x08006ee1
 8006e98:	08006ee1 	.word	0x08006ee1
 8006e9c:	08006ee1 	.word	0x08006ee1
 8006ea0:	08006ee1 	.word	0x08006ee1
 8006ea4:	08006ee9 	.word	0x08006ee9
 8006ea8:	58024400 	.word	0x58024400
 8006eac:	58024800 	.word	0x58024800
 8006eb0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eb8:	3308      	adds	r3, #8
 8006eba:	2101      	movs	r1, #1
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f001 fdcb 	bl	8008a58 <RCCEx_PLL2_Config>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006ec8:	e00f      	b.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ece:	3328      	adds	r3, #40	; 0x28
 8006ed0:	2101      	movs	r1, #1
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f001 fe72 	bl	8008bbc <RCCEx_PLL3_Config>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006ede:	e004      	b.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006ee6:	e000      	b.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006ee8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006eea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10a      	bne.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006ef2:	4bbf      	ldr	r3, [pc, #764]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ef6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006efa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006efe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f00:	4abb      	ldr	r2, [pc, #748]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006f02:	430b      	orrs	r3, r1
 8006f04:	6553      	str	r3, [r2, #84]	; 0x54
 8006f06:	e003      	b.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f0c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f18:	f002 0302 	and.w	r3, r2, #2
 8006f1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f20:	2300      	movs	r3, #0
 8006f22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f26:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	d041      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f36:	2b05      	cmp	r3, #5
 8006f38:	d824      	bhi.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006f3a:	a201      	add	r2, pc, #4	; (adr r2, 8006f40 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f40:	08006f8d 	.word	0x08006f8d
 8006f44:	08006f59 	.word	0x08006f59
 8006f48:	08006f6f 	.word	0x08006f6f
 8006f4c:	08006f8d 	.word	0x08006f8d
 8006f50:	08006f8d 	.word	0x08006f8d
 8006f54:	08006f8d 	.word	0x08006f8d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f5c:	3308      	adds	r3, #8
 8006f5e:	2101      	movs	r1, #1
 8006f60:	4618      	mov	r0, r3
 8006f62:	f001 fd79 	bl	8008a58 <RCCEx_PLL2_Config>
 8006f66:	4603      	mov	r3, r0
 8006f68:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006f6c:	e00f      	b.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f72:	3328      	adds	r3, #40	; 0x28
 8006f74:	2101      	movs	r1, #1
 8006f76:	4618      	mov	r0, r3
 8006f78:	f001 fe20 	bl	8008bbc <RCCEx_PLL3_Config>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006f82:	e004      	b.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006f8a:	e000      	b.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006f8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f8e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d10a      	bne.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006f96:	4b96      	ldr	r3, [pc, #600]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f9a:	f023 0107 	bic.w	r1, r3, #7
 8006f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fa4:	4a92      	ldr	r2, [pc, #584]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006fa6:	430b      	orrs	r3, r1
 8006fa8:	6553      	str	r3, [r2, #84]	; 0x54
 8006faa:	e003      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006fb0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fbc:	f002 0304 	and.w	r3, r2, #4
 8006fc0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006fca:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006fce:	460b      	mov	r3, r1
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	d044      	beq.n	800705e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fdc:	2b05      	cmp	r3, #5
 8006fde:	d825      	bhi.n	800702c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006fe0:	a201      	add	r2, pc, #4	; (adr r2, 8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe6:	bf00      	nop
 8006fe8:	08007035 	.word	0x08007035
 8006fec:	08007001 	.word	0x08007001
 8006ff0:	08007017 	.word	0x08007017
 8006ff4:	08007035 	.word	0x08007035
 8006ff8:	08007035 	.word	0x08007035
 8006ffc:	08007035 	.word	0x08007035
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007000:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007004:	3308      	adds	r3, #8
 8007006:	2101      	movs	r1, #1
 8007008:	4618      	mov	r0, r3
 800700a:	f001 fd25 	bl	8008a58 <RCCEx_PLL2_Config>
 800700e:	4603      	mov	r3, r0
 8007010:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007014:	e00f      	b.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007016:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800701a:	3328      	adds	r3, #40	; 0x28
 800701c:	2101      	movs	r1, #1
 800701e:	4618      	mov	r0, r3
 8007020:	f001 fdcc 	bl	8008bbc <RCCEx_PLL3_Config>
 8007024:	4603      	mov	r3, r0
 8007026:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800702a:	e004      	b.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007032:	e000      	b.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8007034:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007036:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800703a:	2b00      	cmp	r3, #0
 800703c:	d10b      	bne.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800703e:	4b6c      	ldr	r3, [pc, #432]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007042:	f023 0107 	bic.w	r1, r3, #7
 8007046:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800704a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800704e:	4a68      	ldr	r2, [pc, #416]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007050:	430b      	orrs	r3, r1
 8007052:	6593      	str	r3, [r2, #88]	; 0x58
 8007054:	e003      	b.n	800705e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007056:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800705a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800705e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007066:	f002 0320 	and.w	r3, r2, #32
 800706a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800706e:	2300      	movs	r3, #0
 8007070:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007074:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007078:	460b      	mov	r3, r1
 800707a:	4313      	orrs	r3, r2
 800707c:	d055      	beq.n	800712a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800707e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007082:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007086:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800708a:	d033      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800708c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007090:	d82c      	bhi.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007096:	d02f      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800709c:	d826      	bhi.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800709e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80070a2:	d02b      	beq.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80070a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80070a8:	d820      	bhi.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80070aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070ae:	d012      	beq.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80070b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070b4:	d81a      	bhi.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d022      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80070ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070be:	d115      	bne.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80070c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070c4:	3308      	adds	r3, #8
 80070c6:	2100      	movs	r1, #0
 80070c8:	4618      	mov	r0, r3
 80070ca:	f001 fcc5 	bl	8008a58 <RCCEx_PLL2_Config>
 80070ce:	4603      	mov	r3, r0
 80070d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80070d4:	e015      	b.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80070d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070da:	3328      	adds	r3, #40	; 0x28
 80070dc:	2102      	movs	r1, #2
 80070de:	4618      	mov	r0, r3
 80070e0:	f001 fd6c 	bl	8008bbc <RCCEx_PLL3_Config>
 80070e4:	4603      	mov	r3, r0
 80070e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80070ea:	e00a      	b.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80070f2:	e006      	b.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80070f4:	bf00      	nop
 80070f6:	e004      	b.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80070f8:	bf00      	nop
 80070fa:	e002      	b.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80070fc:	bf00      	nop
 80070fe:	e000      	b.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007100:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007102:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007106:	2b00      	cmp	r3, #0
 8007108:	d10b      	bne.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800710a:	4b39      	ldr	r3, [pc, #228]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800710c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800710e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007112:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007116:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800711a:	4a35      	ldr	r2, [pc, #212]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800711c:	430b      	orrs	r3, r1
 800711e:	6553      	str	r3, [r2, #84]	; 0x54
 8007120:	e003      	b.n	800712a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007122:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007126:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800712a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800712e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007132:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007136:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800713a:	2300      	movs	r3, #0
 800713c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007140:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007144:	460b      	mov	r3, r1
 8007146:	4313      	orrs	r3, r2
 8007148:	d058      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800714a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800714e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007152:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007156:	d033      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8007158:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800715c:	d82c      	bhi.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800715e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007162:	d02f      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007168:	d826      	bhi.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800716a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800716e:	d02b      	beq.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007170:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007174:	d820      	bhi.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007176:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800717a:	d012      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800717c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007180:	d81a      	bhi.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007182:	2b00      	cmp	r3, #0
 8007184:	d022      	beq.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800718a:	d115      	bne.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800718c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007190:	3308      	adds	r3, #8
 8007192:	2100      	movs	r1, #0
 8007194:	4618      	mov	r0, r3
 8007196:	f001 fc5f 	bl	8008a58 <RCCEx_PLL2_Config>
 800719a:	4603      	mov	r3, r0
 800719c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80071a0:	e015      	b.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80071a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071a6:	3328      	adds	r3, #40	; 0x28
 80071a8:	2102      	movs	r1, #2
 80071aa:	4618      	mov	r0, r3
 80071ac:	f001 fd06 	bl	8008bbc <RCCEx_PLL3_Config>
 80071b0:	4603      	mov	r3, r0
 80071b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80071b6:	e00a      	b.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80071be:	e006      	b.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80071c0:	bf00      	nop
 80071c2:	e004      	b.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80071c4:	bf00      	nop
 80071c6:	e002      	b.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80071c8:	bf00      	nop
 80071ca:	e000      	b.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80071cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071ce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d10e      	bne.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80071d6:	4b06      	ldr	r3, [pc, #24]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80071d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071da:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80071de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071e6:	4a02      	ldr	r2, [pc, #8]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80071e8:	430b      	orrs	r3, r1
 80071ea:	6593      	str	r3, [r2, #88]	; 0x58
 80071ec:	e006      	b.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80071ee:	bf00      	nop
 80071f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80071f8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80071fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007204:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8007208:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800720c:	2300      	movs	r3, #0
 800720e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007212:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007216:	460b      	mov	r3, r1
 8007218:	4313      	orrs	r3, r2
 800721a:	d055      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800721c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007220:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007224:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007228:	d033      	beq.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800722a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800722e:	d82c      	bhi.n	800728a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007230:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007234:	d02f      	beq.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007236:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800723a:	d826      	bhi.n	800728a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800723c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007240:	d02b      	beq.n	800729a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007242:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007246:	d820      	bhi.n	800728a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007248:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800724c:	d012      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800724e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007252:	d81a      	bhi.n	800728a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007254:	2b00      	cmp	r3, #0
 8007256:	d022      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007258:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800725c:	d115      	bne.n	800728a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800725e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007262:	3308      	adds	r3, #8
 8007264:	2100      	movs	r1, #0
 8007266:	4618      	mov	r0, r3
 8007268:	f001 fbf6 	bl	8008a58 <RCCEx_PLL2_Config>
 800726c:	4603      	mov	r3, r0
 800726e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007272:	e015      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007274:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007278:	3328      	adds	r3, #40	; 0x28
 800727a:	2102      	movs	r1, #2
 800727c:	4618      	mov	r0, r3
 800727e:	f001 fc9d 	bl	8008bbc <RCCEx_PLL3_Config>
 8007282:	4603      	mov	r3, r0
 8007284:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007288:	e00a      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007290:	e006      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007292:	bf00      	nop
 8007294:	e004      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007296:	bf00      	nop
 8007298:	e002      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800729a:	bf00      	nop
 800729c:	e000      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800729e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d10b      	bne.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80072a8:	4ba0      	ldr	r3, [pc, #640]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80072aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ac:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80072b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80072b8:	4a9c      	ldr	r2, [pc, #624]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80072ba:	430b      	orrs	r3, r1
 80072bc:	6593      	str	r3, [r2, #88]	; 0x58
 80072be:	e003      	b.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80072c4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80072c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d0:	f002 0308 	and.w	r3, r2, #8
 80072d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80072d8:	2300      	movs	r3, #0
 80072da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80072de:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80072e2:	460b      	mov	r3, r1
 80072e4:	4313      	orrs	r3, r2
 80072e6:	d01e      	beq.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80072e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072f4:	d10c      	bne.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80072f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072fa:	3328      	adds	r3, #40	; 0x28
 80072fc:	2102      	movs	r1, #2
 80072fe:	4618      	mov	r0, r3
 8007300:	f001 fc5c 	bl	8008bbc <RCCEx_PLL3_Config>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d002      	beq.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007310:	4b86      	ldr	r3, [pc, #536]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007314:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007318:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800731c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007320:	4a82      	ldr	r2, [pc, #520]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007322:	430b      	orrs	r3, r1
 8007324:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007326:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800732a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800732e:	f002 0310 	and.w	r3, r2, #16
 8007332:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007336:	2300      	movs	r3, #0
 8007338:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800733c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007340:	460b      	mov	r3, r1
 8007342:	4313      	orrs	r3, r2
 8007344:	d01e      	beq.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007346:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800734a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800734e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007352:	d10c      	bne.n	800736e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007354:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007358:	3328      	adds	r3, #40	; 0x28
 800735a:	2102      	movs	r1, #2
 800735c:	4618      	mov	r0, r3
 800735e:	f001 fc2d 	bl	8008bbc <RCCEx_PLL3_Config>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d002      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800736e:	4b6f      	ldr	r3, [pc, #444]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007372:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007376:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800737a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800737e:	4a6b      	ldr	r2, [pc, #428]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007380:	430b      	orrs	r3, r1
 8007382:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007384:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007390:	67bb      	str	r3, [r7, #120]	; 0x78
 8007392:	2300      	movs	r3, #0
 8007394:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007396:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800739a:	460b      	mov	r3, r1
 800739c:	4313      	orrs	r3, r2
 800739e:	d03e      	beq.n	800741e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80073a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80073a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073ac:	d022      	beq.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80073ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073b2:	d81b      	bhi.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d003      	beq.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80073b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073bc:	d00b      	beq.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80073be:	e015      	b.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073c4:	3308      	adds	r3, #8
 80073c6:	2100      	movs	r1, #0
 80073c8:	4618      	mov	r0, r3
 80073ca:	f001 fb45 	bl	8008a58 <RCCEx_PLL2_Config>
 80073ce:	4603      	mov	r3, r0
 80073d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80073d4:	e00f      	b.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80073d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073da:	3328      	adds	r3, #40	; 0x28
 80073dc:	2102      	movs	r1, #2
 80073de:	4618      	mov	r0, r3
 80073e0:	f001 fbec 	bl	8008bbc <RCCEx_PLL3_Config>
 80073e4:	4603      	mov	r3, r0
 80073e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80073ea:	e004      	b.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80073f2:	e000      	b.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80073f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073f6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d10b      	bne.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80073fe:	4b4b      	ldr	r3, [pc, #300]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007402:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007406:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800740a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800740e:	4a47      	ldr	r2, [pc, #284]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007410:	430b      	orrs	r3, r1
 8007412:	6593      	str	r3, [r2, #88]	; 0x58
 8007414:	e003      	b.n	800741e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007416:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800741a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800741e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007426:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800742a:	673b      	str	r3, [r7, #112]	; 0x70
 800742c:	2300      	movs	r3, #0
 800742e:	677b      	str	r3, [r7, #116]	; 0x74
 8007430:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007434:	460b      	mov	r3, r1
 8007436:	4313      	orrs	r3, r2
 8007438:	d03b      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800743a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800743e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007442:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007446:	d01f      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007448:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800744c:	d818      	bhi.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800744e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007452:	d003      	beq.n	800745c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8007454:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007458:	d007      	beq.n	800746a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800745a:	e011      	b.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800745c:	4b33      	ldr	r3, [pc, #204]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800745e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007460:	4a32      	ldr	r2, [pc, #200]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007466:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007468:	e00f      	b.n	800748a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800746a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800746e:	3328      	adds	r3, #40	; 0x28
 8007470:	2101      	movs	r1, #1
 8007472:	4618      	mov	r0, r3
 8007474:	f001 fba2 	bl	8008bbc <RCCEx_PLL3_Config>
 8007478:	4603      	mov	r3, r0
 800747a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800747e:	e004      	b.n	800748a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007486:	e000      	b.n	800748a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007488:	bf00      	nop
    }

    if (ret == HAL_OK)
 800748a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800748e:	2b00      	cmp	r3, #0
 8007490:	d10b      	bne.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007492:	4b26      	ldr	r3, [pc, #152]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007496:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800749a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800749e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074a2:	4a22      	ldr	r2, [pc, #136]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80074a4:	430b      	orrs	r3, r1
 80074a6:	6553      	str	r3, [r2, #84]	; 0x54
 80074a8:	e003      	b.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074aa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80074ae:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80074b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ba:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80074be:	66bb      	str	r3, [r7, #104]	; 0x68
 80074c0:	2300      	movs	r3, #0
 80074c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80074c4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80074c8:	460b      	mov	r3, r1
 80074ca:	4313      	orrs	r3, r2
 80074cc:	d034      	beq.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80074ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d003      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80074d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074dc:	d007      	beq.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80074de:	e011      	b.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074e0:	4b12      	ldr	r3, [pc, #72]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80074e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e4:	4a11      	ldr	r2, [pc, #68]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80074e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80074ec:	e00e      	b.n	800750c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80074ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074f2:	3308      	adds	r3, #8
 80074f4:	2102      	movs	r1, #2
 80074f6:	4618      	mov	r0, r3
 80074f8:	f001 faae 	bl	8008a58 <RCCEx_PLL2_Config>
 80074fc:	4603      	mov	r3, r0
 80074fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007502:	e003      	b.n	800750c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800750a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800750c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007510:	2b00      	cmp	r3, #0
 8007512:	d10d      	bne.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007514:	4b05      	ldr	r3, [pc, #20]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007518:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800751c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007520:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007522:	4a02      	ldr	r2, [pc, #8]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007524:	430b      	orrs	r3, r1
 8007526:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007528:	e006      	b.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800752a:	bf00      	nop
 800752c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007530:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007534:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007538:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800753c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007540:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007544:	663b      	str	r3, [r7, #96]	; 0x60
 8007546:	2300      	movs	r3, #0
 8007548:	667b      	str	r3, [r7, #100]	; 0x64
 800754a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800754e:	460b      	mov	r3, r1
 8007550:	4313      	orrs	r3, r2
 8007552:	d00c      	beq.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007554:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007558:	3328      	adds	r3, #40	; 0x28
 800755a:	2102      	movs	r1, #2
 800755c:	4618      	mov	r0, r3
 800755e:	f001 fb2d 	bl	8008bbc <RCCEx_PLL3_Config>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d002      	beq.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800756e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007576:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800757a:	65bb      	str	r3, [r7, #88]	; 0x58
 800757c:	2300      	movs	r3, #0
 800757e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007580:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007584:	460b      	mov	r3, r1
 8007586:	4313      	orrs	r3, r2
 8007588:	d036      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800758a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800758e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007590:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007594:	d018      	beq.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8007596:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800759a:	d811      	bhi.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800759c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075a0:	d014      	beq.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80075a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075a6:	d80b      	bhi.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d011      	beq.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80075ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075b0:	d106      	bne.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075b2:	4bb7      	ldr	r3, [pc, #732]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80075b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b6:	4ab6      	ldr	r2, [pc, #728]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80075b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80075be:	e008      	b.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80075c6:	e004      	b.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80075c8:	bf00      	nop
 80075ca:	e002      	b.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80075cc:	bf00      	nop
 80075ce:	e000      	b.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80075d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075d2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d10a      	bne.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80075da:	4bad      	ldr	r3, [pc, #692]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80075dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80075e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075e8:	4aa9      	ldr	r2, [pc, #676]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80075ea:	430b      	orrs	r3, r1
 80075ec:	6553      	str	r3, [r2, #84]	; 0x54
 80075ee:	e003      	b.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80075f4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80075f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007600:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007604:	653b      	str	r3, [r7, #80]	; 0x50
 8007606:	2300      	movs	r3, #0
 8007608:	657b      	str	r3, [r7, #84]	; 0x54
 800760a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800760e:	460b      	mov	r3, r1
 8007610:	4313      	orrs	r3, r2
 8007612:	d009      	beq.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007614:	4b9e      	ldr	r3, [pc, #632]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007618:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800761c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007622:	4a9b      	ldr	r2, [pc, #620]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007624:	430b      	orrs	r3, r1
 8007626:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007628:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800762c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007630:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007634:	64bb      	str	r3, [r7, #72]	; 0x48
 8007636:	2300      	movs	r3, #0
 8007638:	64fb      	str	r3, [r7, #76]	; 0x4c
 800763a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800763e:	460b      	mov	r3, r1
 8007640:	4313      	orrs	r3, r2
 8007642:	d009      	beq.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007644:	4b92      	ldr	r3, [pc, #584]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007648:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800764c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007650:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007652:	4a8f      	ldr	r2, [pc, #572]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007654:	430b      	orrs	r3, r1
 8007656:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007658:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800765c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007660:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007664:	643b      	str	r3, [r7, #64]	; 0x40
 8007666:	2300      	movs	r3, #0
 8007668:	647b      	str	r3, [r7, #68]	; 0x44
 800766a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800766e:	460b      	mov	r3, r1
 8007670:	4313      	orrs	r3, r2
 8007672:	d00e      	beq.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007674:	4b86      	ldr	r3, [pc, #536]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007676:	691b      	ldr	r3, [r3, #16]
 8007678:	4a85      	ldr	r2, [pc, #532]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800767a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800767e:	6113      	str	r3, [r2, #16]
 8007680:	4b83      	ldr	r3, [pc, #524]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007682:	6919      	ldr	r1, [r3, #16]
 8007684:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007688:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800768c:	4a80      	ldr	r2, [pc, #512]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800768e:	430b      	orrs	r3, r1
 8007690:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007692:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800769e:	63bb      	str	r3, [r7, #56]	; 0x38
 80076a0:	2300      	movs	r3, #0
 80076a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076a4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80076a8:	460b      	mov	r3, r1
 80076aa:	4313      	orrs	r3, r2
 80076ac:	d009      	beq.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80076ae:	4b78      	ldr	r3, [pc, #480]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80076b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076b2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80076b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076bc:	4a74      	ldr	r2, [pc, #464]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80076be:	430b      	orrs	r3, r1
 80076c0:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80076c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ca:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80076ce:	633b      	str	r3, [r7, #48]	; 0x30
 80076d0:	2300      	movs	r3, #0
 80076d2:	637b      	str	r3, [r7, #52]	; 0x34
 80076d4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80076d8:	460b      	mov	r3, r1
 80076da:	4313      	orrs	r3, r2
 80076dc:	d00a      	beq.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80076de:	4b6c      	ldr	r3, [pc, #432]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80076e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076e2:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80076e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ee:	4a68      	ldr	r2, [pc, #416]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80076f0:	430b      	orrs	r3, r1
 80076f2:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80076f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fc:	2100      	movs	r1, #0
 80076fe:	62b9      	str	r1, [r7, #40]	; 0x28
 8007700:	f003 0301 	and.w	r3, r3, #1
 8007704:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007706:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800770a:	460b      	mov	r3, r1
 800770c:	4313      	orrs	r3, r2
 800770e:	d011      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007710:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007714:	3308      	adds	r3, #8
 8007716:	2100      	movs	r1, #0
 8007718:	4618      	mov	r0, r3
 800771a:	f001 f99d 	bl	8008a58 <RCCEx_PLL2_Config>
 800771e:	4603      	mov	r3, r0
 8007720:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007724:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007728:	2b00      	cmp	r3, #0
 800772a:	d003      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800772c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007730:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007734:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773c:	2100      	movs	r1, #0
 800773e:	6239      	str	r1, [r7, #32]
 8007740:	f003 0302 	and.w	r3, r3, #2
 8007744:	627b      	str	r3, [r7, #36]	; 0x24
 8007746:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800774a:	460b      	mov	r3, r1
 800774c:	4313      	orrs	r3, r2
 800774e:	d011      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007750:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007754:	3308      	adds	r3, #8
 8007756:	2101      	movs	r1, #1
 8007758:	4618      	mov	r0, r3
 800775a:	f001 f97d 	bl	8008a58 <RCCEx_PLL2_Config>
 800775e:	4603      	mov	r3, r0
 8007760:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007764:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007768:	2b00      	cmp	r3, #0
 800776a:	d003      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800776c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007770:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007774:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800777c:	2100      	movs	r1, #0
 800777e:	61b9      	str	r1, [r7, #24]
 8007780:	f003 0304 	and.w	r3, r3, #4
 8007784:	61fb      	str	r3, [r7, #28]
 8007786:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800778a:	460b      	mov	r3, r1
 800778c:	4313      	orrs	r3, r2
 800778e:	d011      	beq.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007790:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007794:	3308      	adds	r3, #8
 8007796:	2102      	movs	r1, #2
 8007798:	4618      	mov	r0, r3
 800779a:	f001 f95d 	bl	8008a58 <RCCEx_PLL2_Config>
 800779e:	4603      	mov	r3, r0
 80077a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80077a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d003      	beq.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80077b0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80077b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077bc:	2100      	movs	r1, #0
 80077be:	6139      	str	r1, [r7, #16]
 80077c0:	f003 0308 	and.w	r3, r3, #8
 80077c4:	617b      	str	r3, [r7, #20]
 80077c6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80077ca:	460b      	mov	r3, r1
 80077cc:	4313      	orrs	r3, r2
 80077ce:	d011      	beq.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80077d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077d4:	3328      	adds	r3, #40	; 0x28
 80077d6:	2100      	movs	r1, #0
 80077d8:	4618      	mov	r0, r3
 80077da:	f001 f9ef 	bl	8008bbc <RCCEx_PLL3_Config>
 80077de:	4603      	mov	r3, r0
 80077e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 80077e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d003      	beq.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80077f0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80077f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fc:	2100      	movs	r1, #0
 80077fe:	60b9      	str	r1, [r7, #8]
 8007800:	f003 0310 	and.w	r3, r3, #16
 8007804:	60fb      	str	r3, [r7, #12]
 8007806:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800780a:	460b      	mov	r3, r1
 800780c:	4313      	orrs	r3, r2
 800780e:	d011      	beq.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007810:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007814:	3328      	adds	r3, #40	; 0x28
 8007816:	2101      	movs	r1, #1
 8007818:	4618      	mov	r0, r3
 800781a:	f001 f9cf 	bl	8008bbc <RCCEx_PLL3_Config>
 800781e:	4603      	mov	r3, r0
 8007820:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007824:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007828:	2b00      	cmp	r3, #0
 800782a:	d003      	beq.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800782c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007830:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007834:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783c:	2100      	movs	r1, #0
 800783e:	6039      	str	r1, [r7, #0]
 8007840:	f003 0320 	and.w	r3, r3, #32
 8007844:	607b      	str	r3, [r7, #4]
 8007846:	e9d7 1200 	ldrd	r1, r2, [r7]
 800784a:	460b      	mov	r3, r1
 800784c:	4313      	orrs	r3, r2
 800784e:	d011      	beq.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007850:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007854:	3328      	adds	r3, #40	; 0x28
 8007856:	2102      	movs	r1, #2
 8007858:	4618      	mov	r0, r3
 800785a:	f001 f9af 	bl	8008bbc <RCCEx_PLL3_Config>
 800785e:	4603      	mov	r3, r0
 8007860:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007864:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007868:	2b00      	cmp	r3, #0
 800786a:	d003      	beq.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800786c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007870:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8007874:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8007878:	2b00      	cmp	r3, #0
 800787a:	d101      	bne.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800787c:	2300      	movs	r3, #0
 800787e:	e000      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8007880:	2301      	movs	r3, #1
}
 8007882:	4618      	mov	r0, r3
 8007884:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8007888:	46bd      	mov	sp, r7
 800788a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800788e:	bf00      	nop
 8007890:	58024400 	.word	0x58024400

08007894 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b090      	sub	sp, #64	; 0x40
 8007898:	af00      	add	r7, sp, #0
 800789a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800789e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078a2:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80078a6:	430b      	orrs	r3, r1
 80078a8:	f040 8094 	bne.w	80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80078ac:	4b9b      	ldr	r3, [pc, #620]	; (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80078ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078b0:	f003 0307 	and.w	r3, r3, #7
 80078b4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80078b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b8:	2b04      	cmp	r3, #4
 80078ba:	f200 8087 	bhi.w	80079cc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80078be:	a201      	add	r2, pc, #4	; (adr r2, 80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80078c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c4:	080078d9 	.word	0x080078d9
 80078c8:	08007901 	.word	0x08007901
 80078cc:	08007929 	.word	0x08007929
 80078d0:	080079c5 	.word	0x080079c5
 80078d4:	08007951 	.word	0x08007951
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80078d8:	4b90      	ldr	r3, [pc, #576]	; (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80078e4:	d108      	bne.n	80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078ea:	4618      	mov	r0, r3
 80078ec:	f000 ff62 	bl	80087b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80078f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078f4:	f000 bc93 	b.w	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80078f8:	2300      	movs	r3, #0
 80078fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078fc:	f000 bc8f 	b.w	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007900:	4b86      	ldr	r3, [pc, #536]	; (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007908:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800790c:	d108      	bne.n	8007920 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800790e:	f107 0318 	add.w	r3, r7, #24
 8007912:	4618      	mov	r0, r3
 8007914:	f000 fca6 	bl	8008264 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800791c:	f000 bc7f 	b.w	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007920:	2300      	movs	r3, #0
 8007922:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007924:	f000 bc7b 	b.w	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007928:	4b7c      	ldr	r3, [pc, #496]	; (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007930:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007934:	d108      	bne.n	8007948 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007936:	f107 030c 	add.w	r3, r7, #12
 800793a:	4618      	mov	r0, r3
 800793c:	f000 fde6 	bl	800850c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007944:	f000 bc6b 	b.w	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007948:	2300      	movs	r3, #0
 800794a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800794c:	f000 bc67 	b.w	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007950:	4b72      	ldr	r3, [pc, #456]	; (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007954:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007958:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800795a:	4b70      	ldr	r3, [pc, #448]	; (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f003 0304 	and.w	r3, r3, #4
 8007962:	2b04      	cmp	r3, #4
 8007964:	d10c      	bne.n	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007968:	2b00      	cmp	r3, #0
 800796a:	d109      	bne.n	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800796c:	4b6b      	ldr	r3, [pc, #428]	; (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	08db      	lsrs	r3, r3, #3
 8007972:	f003 0303 	and.w	r3, r3, #3
 8007976:	4a6a      	ldr	r2, [pc, #424]	; (8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8007978:	fa22 f303 	lsr.w	r3, r2, r3
 800797c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800797e:	e01f      	b.n	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007980:	4b66      	ldr	r3, [pc, #408]	; (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007988:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800798c:	d106      	bne.n	800799c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800798e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007990:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007994:	d102      	bne.n	800799c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007996:	4b63      	ldr	r3, [pc, #396]	; (8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007998:	63fb      	str	r3, [r7, #60]	; 0x3c
 800799a:	e011      	b.n	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800799c:	4b5f      	ldr	r3, [pc, #380]	; (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079a8:	d106      	bne.n	80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80079aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079b0:	d102      	bne.n	80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80079b2:	4b5d      	ldr	r3, [pc, #372]	; (8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80079b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079b6:	e003      	b.n	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80079b8:	2300      	movs	r3, #0
 80079ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80079bc:	f000 bc2f 	b.w	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80079c0:	f000 bc2d 	b.w	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80079c4:	4b59      	ldr	r3, [pc, #356]	; (8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80079c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079c8:	f000 bc29 	b.w	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80079cc:	2300      	movs	r3, #0
 80079ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079d0:	f000 bc25 	b.w	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80079d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079d8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80079dc:	430b      	orrs	r3, r1
 80079de:	f040 80a7 	bne.w	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80079e2:	4b4e      	ldr	r3, [pc, #312]	; (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80079e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079e6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80079ea:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80079ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80079f2:	d054      	beq.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 80079f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80079fa:	f200 808b 	bhi.w	8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80079fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a00:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007a04:	f000 8083 	beq.w	8007b0e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8007a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a0a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007a0e:	f200 8081 	bhi.w	8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a18:	d02f      	beq.n	8007a7a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a20:	d878      	bhi.n	8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d004      	beq.n	8007a32 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8007a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a2e:	d012      	beq.n	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8007a30:	e070      	b.n	8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007a32:	4b3a      	ldr	r3, [pc, #232]	; (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a3e:	d107      	bne.n	8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a44:	4618      	mov	r0, r3
 8007a46:	f000 feb5 	bl	80087b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a4e:	e3e6      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007a50:	2300      	movs	r3, #0
 8007a52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a54:	e3e3      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007a56:	4b31      	ldr	r3, [pc, #196]	; (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a62:	d107      	bne.n	8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a64:	f107 0318 	add.w	r3, r7, #24
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f000 fbfb 	bl	8008264 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a72:	e3d4      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007a74:	2300      	movs	r3, #0
 8007a76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a78:	e3d1      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007a7a:	4b28      	ldr	r3, [pc, #160]	; (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a86:	d107      	bne.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a88:	f107 030c 	add.w	r3, r7, #12
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f000 fd3d 	bl	800850c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a96:	e3c2      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a9c:	e3bf      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007a9e:	4b1f      	ldr	r3, [pc, #124]	; (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aa2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007aa6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007aa8:	4b1c      	ldr	r3, [pc, #112]	; (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 0304 	and.w	r3, r3, #4
 8007ab0:	2b04      	cmp	r3, #4
 8007ab2:	d10c      	bne.n	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8007ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d109      	bne.n	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007aba:	4b18      	ldr	r3, [pc, #96]	; (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	08db      	lsrs	r3, r3, #3
 8007ac0:	f003 0303 	and.w	r3, r3, #3
 8007ac4:	4a16      	ldr	r2, [pc, #88]	; (8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8007ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8007aca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007acc:	e01e      	b.n	8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ace:	4b13      	ldr	r3, [pc, #76]	; (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ad6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ada:	d106      	bne.n	8007aea <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8007adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ade:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ae2:	d102      	bne.n	8007aea <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007ae4:	4b0f      	ldr	r3, [pc, #60]	; (8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ae8:	e010      	b.n	8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007aea:	4b0c      	ldr	r3, [pc, #48]	; (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007af2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007af6:	d106      	bne.n	8007b06 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007afa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007afe:	d102      	bne.n	8007b06 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007b00:	4b09      	ldr	r3, [pc, #36]	; (8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007b02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b04:	e002      	b.n	8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007b06:	2300      	movs	r3, #0
 8007b08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007b0a:	e388      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007b0c:	e387      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007b0e:	4b07      	ldr	r3, [pc, #28]	; (8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007b10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b12:	e384      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007b14:	2300      	movs	r3, #0
 8007b16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b18:	e381      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007b1a:	bf00      	nop
 8007b1c:	58024400 	.word	0x58024400
 8007b20:	03d09000 	.word	0x03d09000
 8007b24:	003d0900 	.word	0x003d0900
 8007b28:	017d7840 	.word	0x017d7840
 8007b2c:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007b30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b34:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8007b38:	430b      	orrs	r3, r1
 8007b3a:	f040 809c 	bne.w	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007b3e:	4b9e      	ldr	r3, [pc, #632]	; (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b42:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007b46:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b4e:	d054      	beq.n	8007bfa <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8007b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b56:	f200 808b 	bhi.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007b60:	f000 8083 	beq.w	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8007b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b66:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007b6a:	f200 8081 	bhi.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b74:	d02f      	beq.n	8007bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8007b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b7c:	d878      	bhi.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d004      	beq.n	8007b8e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007b8a:	d012      	beq.n	8007bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8007b8c:	e070      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007b8e:	4b8a      	ldr	r3, [pc, #552]	; (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b9a:	d107      	bne.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f000 fe07 	bl	80087b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007baa:	e338      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007bac:	2300      	movs	r3, #0
 8007bae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bb0:	e335      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007bb2:	4b81      	ldr	r3, [pc, #516]	; (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007bbe:	d107      	bne.n	8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bc0:	f107 0318 	add.w	r3, r7, #24
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f000 fb4d 	bl	8008264 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007bca:	69bb      	ldr	r3, [r7, #24]
 8007bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bce:	e326      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bd4:	e323      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007bd6:	4b78      	ldr	r3, [pc, #480]	; (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007be2:	d107      	bne.n	8007bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007be4:	f107 030c 	add.w	r3, r7, #12
 8007be8:	4618      	mov	r0, r3
 8007bea:	f000 fc8f 	bl	800850c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bf2:	e314      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bf8:	e311      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007bfa:	4b6f      	ldr	r3, [pc, #444]	; (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bfe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c02:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c04:	4b6c      	ldr	r3, [pc, #432]	; (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f003 0304 	and.w	r3, r3, #4
 8007c0c:	2b04      	cmp	r3, #4
 8007c0e:	d10c      	bne.n	8007c2a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8007c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d109      	bne.n	8007c2a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c16:	4b68      	ldr	r3, [pc, #416]	; (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	08db      	lsrs	r3, r3, #3
 8007c1c:	f003 0303 	and.w	r3, r3, #3
 8007c20:	4a66      	ldr	r2, [pc, #408]	; (8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8007c22:	fa22 f303 	lsr.w	r3, r2, r3
 8007c26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c28:	e01e      	b.n	8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c2a:	4b63      	ldr	r3, [pc, #396]	; (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c36:	d106      	bne.n	8007c46 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c3e:	d102      	bne.n	8007c46 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007c40:	4b5f      	ldr	r3, [pc, #380]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8007c42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c44:	e010      	b.n	8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c46:	4b5c      	ldr	r3, [pc, #368]	; (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c52:	d106      	bne.n	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8007c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c5a:	d102      	bne.n	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007c5c:	4b59      	ldr	r3, [pc, #356]	; (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c60:	e002      	b.n	8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007c62:	2300      	movs	r3, #0
 8007c64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007c66:	e2da      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007c68:	e2d9      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007c6a:	4b57      	ldr	r3, [pc, #348]	; (8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c6e:	e2d6      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007c70:	2300      	movs	r3, #0
 8007c72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c74:	e2d3      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007c76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c7a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8007c7e:	430b      	orrs	r3, r1
 8007c80:	f040 80a7 	bne.w	8007dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007c84:	4b4c      	ldr	r3, [pc, #304]	; (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c88:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007c8c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c94:	d055      	beq.n	8007d42 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8007c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c9c:	f200 8096 	bhi.w	8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8007ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ca6:	f000 8084 	beq.w	8007db2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8007caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007cb0:	f200 808c 	bhi.w	8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8007cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cba:	d030      	beq.n	8007d1e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8007cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cc2:	f200 8083 	bhi.w	8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8007cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d004      	beq.n	8007cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8007ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cd2:	d012      	beq.n	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8007cd4:	e07a      	b.n	8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007cd6:	4b38      	ldr	r3, [pc, #224]	; (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ce2:	d107      	bne.n	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f000 fd63 	bl	80087b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cf2:	e294      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cf8:	e291      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007cfa:	4b2f      	ldr	r3, [pc, #188]	; (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d06:	d107      	bne.n	8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d08:	f107 0318 	add.w	r3, r7, #24
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f000 faa9 	bl	8008264 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d12:	69bb      	ldr	r3, [r7, #24]
 8007d14:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d16:	e282      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d1c:	e27f      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d1e:	4b26      	ldr	r3, [pc, #152]	; (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d2a:	d107      	bne.n	8007d3c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d2c:	f107 030c 	add.w	r3, r7, #12
 8007d30:	4618      	mov	r0, r3
 8007d32:	f000 fbeb 	bl	800850c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d3a:	e270      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d40:	e26d      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007d42:	4b1d      	ldr	r3, [pc, #116]	; (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d46:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d4a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d4c:	4b1a      	ldr	r3, [pc, #104]	; (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 0304 	and.w	r3, r3, #4
 8007d54:	2b04      	cmp	r3, #4
 8007d56:	d10c      	bne.n	8007d72 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8007d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d109      	bne.n	8007d72 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d5e:	4b16      	ldr	r3, [pc, #88]	; (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	08db      	lsrs	r3, r3, #3
 8007d64:	f003 0303 	and.w	r3, r3, #3
 8007d68:	4a14      	ldr	r2, [pc, #80]	; (8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8007d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d70:	e01e      	b.n	8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d72:	4b11      	ldr	r3, [pc, #68]	; (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d7e:	d106      	bne.n	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d86:	d102      	bne.n	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007d88:	4b0d      	ldr	r3, [pc, #52]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8007d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d8c:	e010      	b.n	8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d8e:	4b0a      	ldr	r3, [pc, #40]	; (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d9a:	d106      	bne.n	8007daa <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8007d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007da2:	d102      	bne.n	8007daa <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007da4:	4b07      	ldr	r3, [pc, #28]	; (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007da6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007da8:	e002      	b.n	8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007daa:	2300      	movs	r3, #0
 8007dac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007dae:	e236      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007db0:	e235      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007db2:	4b05      	ldr	r3, [pc, #20]	; (8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007db4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007db6:	e232      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007db8:	58024400 	.word	0x58024400
 8007dbc:	03d09000 	.word	0x03d09000
 8007dc0:	003d0900 	.word	0x003d0900
 8007dc4:	017d7840 	.word	0x017d7840
 8007dc8:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dd0:	e225      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007dd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dd6:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8007dda:	430b      	orrs	r3, r1
 8007ddc:	f040 8085 	bne.w	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007de0:	4b9c      	ldr	r3, [pc, #624]	; (8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007de4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007de8:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8007dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007df0:	d06b      	beq.n	8007eca <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8007df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007df8:	d874      	bhi.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e00:	d056      	beq.n	8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8007e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e08:	d86c      	bhi.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e0c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007e10:	d03b      	beq.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8007e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e14:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007e18:	d864      	bhi.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e20:	d021      	beq.n	8007e66 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8007e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e28:	d85c      	bhi.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d004      	beq.n	8007e3a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8007e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e36:	d004      	beq.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8007e38:	e054      	b.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007e3a:	f7fe fb75 	bl	8006528 <HAL_RCC_GetPCLK1Freq>
 8007e3e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007e40:	e1ed      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e42:	4b84      	ldr	r3, [pc, #528]	; (8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e4e:	d107      	bne.n	8007e60 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e50:	f107 0318 	add.w	r3, r7, #24
 8007e54:	4618      	mov	r0, r3
 8007e56:	f000 fa05 	bl	8008264 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007e5a:	69fb      	ldr	r3, [r7, #28]
 8007e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e5e:	e1de      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e60:	2300      	movs	r3, #0
 8007e62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e64:	e1db      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e66:	4b7b      	ldr	r3, [pc, #492]	; (8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e72:	d107      	bne.n	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e74:	f107 030c 	add.w	r3, r7, #12
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f000 fb47 	bl	800850c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e82:	e1cc      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e84:	2300      	movs	r3, #0
 8007e86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e88:	e1c9      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007e8a:	4b72      	ldr	r3, [pc, #456]	; (8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f003 0304 	and.w	r3, r3, #4
 8007e92:	2b04      	cmp	r3, #4
 8007e94:	d109      	bne.n	8007eaa <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e96:	4b6f      	ldr	r3, [pc, #444]	; (8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	08db      	lsrs	r3, r3, #3
 8007e9c:	f003 0303 	and.w	r3, r3, #3
 8007ea0:	4a6d      	ldr	r2, [pc, #436]	; (8008058 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8007ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ea8:	e1b9      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007eae:	e1b6      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007eb0:	4b68      	ldr	r3, [pc, #416]	; (8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ebc:	d102      	bne.n	8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8007ebe:	4b67      	ldr	r3, [pc, #412]	; (800805c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8007ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ec2:	e1ac      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ec8:	e1a9      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007eca:	4b62      	ldr	r3, [pc, #392]	; (8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ed2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ed6:	d102      	bne.n	8007ede <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8007ed8:	4b61      	ldr	r3, [pc, #388]	; (8008060 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8007eda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007edc:	e19f      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ee2:	e19c      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ee8:	e199      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007eea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007eee:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8007ef2:	430b      	orrs	r3, r1
 8007ef4:	d173      	bne.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007ef6:	4b57      	ldr	r3, [pc, #348]	; (8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007efa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007efe:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f06:	d02f      	beq.n	8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8007f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f0e:	d863      	bhi.n	8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8007f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d004      	beq.n	8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8007f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f1c:	d012      	beq.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8007f1e:	e05b      	b.n	8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f20:	4b4c      	ldr	r3, [pc, #304]	; (8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f2c:	d107      	bne.n	8007f3e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f2e:	f107 0318 	add.w	r3, r7, #24
 8007f32:	4618      	mov	r0, r3
 8007f34:	f000 f996 	bl	8008264 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f3c:	e16f      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f42:	e16c      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f44:	4b43      	ldr	r3, [pc, #268]	; (8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f50:	d107      	bne.n	8007f62 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f52:	f107 030c 	add.w	r3, r7, #12
 8007f56:	4618      	mov	r0, r3
 8007f58:	f000 fad8 	bl	800850c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f60:	e15d      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007f62:	2300      	movs	r3, #0
 8007f64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f66:	e15a      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007f68:	4b3a      	ldr	r3, [pc, #232]	; (8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007f70:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007f72:	4b38      	ldr	r3, [pc, #224]	; (8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f003 0304 	and.w	r3, r3, #4
 8007f7a:	2b04      	cmp	r3, #4
 8007f7c:	d10c      	bne.n	8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8007f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d109      	bne.n	8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f84:	4b33      	ldr	r3, [pc, #204]	; (8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	08db      	lsrs	r3, r3, #3
 8007f8a:	f003 0303 	and.w	r3, r3, #3
 8007f8e:	4a32      	ldr	r2, [pc, #200]	; (8008058 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8007f90:	fa22 f303 	lsr.w	r3, r2, r3
 8007f94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f96:	e01e      	b.n	8007fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007f98:	4b2e      	ldr	r3, [pc, #184]	; (8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fa4:	d106      	bne.n	8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8007fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fa8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fac:	d102      	bne.n	8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007fae:	4b2b      	ldr	r3, [pc, #172]	; (800805c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8007fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fb2:	e010      	b.n	8007fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007fb4:	4b27      	ldr	r3, [pc, #156]	; (8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fc0:	d106      	bne.n	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8007fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fc8:	d102      	bne.n	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007fca:	4b25      	ldr	r3, [pc, #148]	; (8008060 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8007fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fce:	e002      	b.n	8007fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007fd4:	e123      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007fd6:	e122      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fdc:	e11f      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007fde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fe2:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8007fe6:	430b      	orrs	r3, r1
 8007fe8:	d13c      	bne.n	8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007fea:	4b1a      	ldr	r3, [pc, #104]	; (8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ff2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d004      	beq.n	8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8007ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008000:	d012      	beq.n	8008028 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8008002:	e023      	b.n	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008004:	4b13      	ldr	r3, [pc, #76]	; (8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800800c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008010:	d107      	bne.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008012:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008016:	4618      	mov	r0, r3
 8008018:	f000 fbcc 	bl	80087b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800801c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800801e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008020:	e0fd      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008022:	2300      	movs	r3, #0
 8008024:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008026:	e0fa      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008028:	4b0a      	ldr	r3, [pc, #40]	; (8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008030:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008034:	d107      	bne.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008036:	f107 0318 	add.w	r3, r7, #24
 800803a:	4618      	mov	r0, r3
 800803c:	f000 f912 	bl	8008264 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008040:	6a3b      	ldr	r3, [r7, #32]
 8008042:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008044:	e0eb      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008046:	2300      	movs	r3, #0
 8008048:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800804a:	e0e8      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800804c:	2300      	movs	r3, #0
 800804e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008050:	e0e5      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008052:	bf00      	nop
 8008054:	58024400 	.word	0x58024400
 8008058:	03d09000 	.word	0x03d09000
 800805c:	003d0900 	.word	0x003d0900
 8008060:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008064:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008068:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800806c:	430b      	orrs	r3, r1
 800806e:	f040 8085 	bne.w	800817c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008072:	4b6d      	ldr	r3, [pc, #436]	; (8008228 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008076:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800807a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800807c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800807e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008082:	d06b      	beq.n	800815c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8008084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008086:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800808a:	d874      	bhi.n	8008176 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800808c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008092:	d056      	beq.n	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8008094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800809a:	d86c      	bhi.n	8008176 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800809c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80080a2:	d03b      	beq.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 80080a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80080aa:	d864      	bhi.n	8008176 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80080ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080b2:	d021      	beq.n	80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 80080b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080ba:	d85c      	bhi.n	8008176 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80080bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d004      	beq.n	80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 80080c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080c8:	d004      	beq.n	80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80080ca:	e054      	b.n	8008176 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80080cc:	f000 f8b4 	bl	8008238 <HAL_RCCEx_GetD3PCLK1Freq>
 80080d0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80080d2:	e0a4      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80080d4:	4b54      	ldr	r3, [pc, #336]	; (8008228 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080e0:	d107      	bne.n	80080f2 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080e2:	f107 0318 	add.w	r3, r7, #24
 80080e6:	4618      	mov	r0, r3
 80080e8:	f000 f8bc 	bl	8008264 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80080ec:	69fb      	ldr	r3, [r7, #28]
 80080ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080f0:	e095      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80080f2:	2300      	movs	r3, #0
 80080f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080f6:	e092      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80080f8:	4b4b      	ldr	r3, [pc, #300]	; (8008228 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008100:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008104:	d107      	bne.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008106:	f107 030c 	add.w	r3, r7, #12
 800810a:	4618      	mov	r0, r3
 800810c:	f000 f9fe 	bl	800850c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008114:	e083      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008116:	2300      	movs	r3, #0
 8008118:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800811a:	e080      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800811c:	4b42      	ldr	r3, [pc, #264]	; (8008228 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f003 0304 	and.w	r3, r3, #4
 8008124:	2b04      	cmp	r3, #4
 8008126:	d109      	bne.n	800813c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008128:	4b3f      	ldr	r3, [pc, #252]	; (8008228 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	08db      	lsrs	r3, r3, #3
 800812e:	f003 0303 	and.w	r3, r3, #3
 8008132:	4a3e      	ldr	r2, [pc, #248]	; (800822c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8008134:	fa22 f303 	lsr.w	r3, r2, r3
 8008138:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800813a:	e070      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800813c:	2300      	movs	r3, #0
 800813e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008140:	e06d      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008142:	4b39      	ldr	r3, [pc, #228]	; (8008228 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800814a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800814e:	d102      	bne.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8008150:	4b37      	ldr	r3, [pc, #220]	; (8008230 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008152:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008154:	e063      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008156:	2300      	movs	r3, #0
 8008158:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800815a:	e060      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800815c:	4b32      	ldr	r3, [pc, #200]	; (8008228 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008164:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008168:	d102      	bne.n	8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800816a:	4b32      	ldr	r3, [pc, #200]	; (8008234 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800816c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800816e:	e056      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008170:	2300      	movs	r3, #0
 8008172:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008174:	e053      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008176:	2300      	movs	r3, #0
 8008178:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800817a:	e050      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800817c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008180:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8008184:	430b      	orrs	r3, r1
 8008186:	d148      	bne.n	800821a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008188:	4b27      	ldr	r3, [pc, #156]	; (8008228 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800818a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800818c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008190:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008194:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008198:	d02a      	beq.n	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800819a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800819c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081a0:	d838      	bhi.n	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80081a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d004      	beq.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80081a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081ae:	d00d      	beq.n	80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 80081b0:	e030      	b.n	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80081b2:	4b1d      	ldr	r3, [pc, #116]	; (8008228 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081be:	d102      	bne.n	80081c6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 80081c0:	4b1c      	ldr	r3, [pc, #112]	; (8008234 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80081c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081c4:	e02b      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80081c6:	2300      	movs	r3, #0
 80081c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081ca:	e028      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80081cc:	4b16      	ldr	r3, [pc, #88]	; (8008228 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081d8:	d107      	bne.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80081da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081de:	4618      	mov	r0, r3
 80081e0:	f000 fae8 	bl	80087b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80081e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081e8:	e019      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80081ea:	2300      	movs	r3, #0
 80081ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081ee:	e016      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80081f0:	4b0d      	ldr	r3, [pc, #52]	; (8008228 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081fc:	d107      	bne.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081fe:	f107 0318 	add.w	r3, r7, #24
 8008202:	4618      	mov	r0, r3
 8008204:	f000 f82e 	bl	8008264 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800820c:	e007      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800820e:	2300      	movs	r3, #0
 8008210:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008212:	e004      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008214:	2300      	movs	r3, #0
 8008216:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008218:	e001      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800821a:	2300      	movs	r3, #0
 800821c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800821e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008220:	4618      	mov	r0, r3
 8008222:	3740      	adds	r7, #64	; 0x40
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	58024400 	.word	0x58024400
 800822c:	03d09000 	.word	0x03d09000
 8008230:	003d0900 	.word	0x003d0900
 8008234:	017d7840 	.word	0x017d7840

08008238 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800823c:	f7fe f944 	bl	80064c8 <HAL_RCC_GetHCLKFreq>
 8008240:	4602      	mov	r2, r0
 8008242:	4b06      	ldr	r3, [pc, #24]	; (800825c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008244:	6a1b      	ldr	r3, [r3, #32]
 8008246:	091b      	lsrs	r3, r3, #4
 8008248:	f003 0307 	and.w	r3, r3, #7
 800824c:	4904      	ldr	r1, [pc, #16]	; (8008260 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800824e:	5ccb      	ldrb	r3, [r1, r3]
 8008250:	f003 031f 	and.w	r3, r3, #31
 8008254:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008258:	4618      	mov	r0, r3
 800825a:	bd80      	pop	{r7, pc}
 800825c:	58024400 	.word	0x58024400
 8008260:	08008d90 	.word	0x08008d90

08008264 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008264:	b480      	push	{r7}
 8008266:	b089      	sub	sp, #36	; 0x24
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800826c:	4ba1      	ldr	r3, [pc, #644]	; (80084f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800826e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008270:	f003 0303 	and.w	r3, r3, #3
 8008274:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008276:	4b9f      	ldr	r3, [pc, #636]	; (80084f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800827a:	0b1b      	lsrs	r3, r3, #12
 800827c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008280:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008282:	4b9c      	ldr	r3, [pc, #624]	; (80084f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008286:	091b      	lsrs	r3, r3, #4
 8008288:	f003 0301 	and.w	r3, r3, #1
 800828c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800828e:	4b99      	ldr	r3, [pc, #612]	; (80084f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008292:	08db      	lsrs	r3, r3, #3
 8008294:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008298:	693a      	ldr	r2, [r7, #16]
 800829a:	fb02 f303 	mul.w	r3, r2, r3
 800829e:	ee07 3a90 	vmov	s15, r3
 80082a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	f000 8111 	beq.w	80084d4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	2b02      	cmp	r3, #2
 80082b6:	f000 8083 	beq.w	80083c0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	2b02      	cmp	r3, #2
 80082be:	f200 80a1 	bhi.w	8008404 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d003      	beq.n	80082d0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80082c8:	69bb      	ldr	r3, [r7, #24]
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d056      	beq.n	800837c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80082ce:	e099      	b.n	8008404 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082d0:	4b88      	ldr	r3, [pc, #544]	; (80084f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f003 0320 	and.w	r3, r3, #32
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d02d      	beq.n	8008338 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082dc:	4b85      	ldr	r3, [pc, #532]	; (80084f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	08db      	lsrs	r3, r3, #3
 80082e2:	f003 0303 	and.w	r3, r3, #3
 80082e6:	4a84      	ldr	r2, [pc, #528]	; (80084f8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80082e8:	fa22 f303 	lsr.w	r3, r2, r3
 80082ec:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	ee07 3a90 	vmov	s15, r3
 80082f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	ee07 3a90 	vmov	s15, r3
 80082fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008306:	4b7b      	ldr	r3, [pc, #492]	; (80084f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800830a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800830e:	ee07 3a90 	vmov	s15, r3
 8008312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008316:	ed97 6a03 	vldr	s12, [r7, #12]
 800831a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80084fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800831e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008326:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800832a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800832e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008332:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008336:	e087      	b.n	8008448 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	ee07 3a90 	vmov	s15, r3
 800833e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008342:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008500 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800834a:	4b6a      	ldr	r3, [pc, #424]	; (80084f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800834c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800834e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008352:	ee07 3a90 	vmov	s15, r3
 8008356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800835a:	ed97 6a03 	vldr	s12, [r7, #12]
 800835e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80084fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800836a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800836e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008376:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800837a:	e065      	b.n	8008448 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	ee07 3a90 	vmov	s15, r3
 8008382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008386:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008504 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800838a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800838e:	4b59      	ldr	r3, [pc, #356]	; (80084f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008396:	ee07 3a90 	vmov	s15, r3
 800839a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800839e:	ed97 6a03 	vldr	s12, [r7, #12]
 80083a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 80084fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80083a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083be:	e043      	b.n	8008448 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	ee07 3a90 	vmov	s15, r3
 80083c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80083ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083d2:	4b48      	ldr	r3, [pc, #288]	; (80084f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083da:	ee07 3a90 	vmov	s15, r3
 80083de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80083e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80084fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80083ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008402:	e021      	b.n	8008448 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	ee07 3a90 	vmov	s15, r3
 800840a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800840e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008504 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008416:	4b37      	ldr	r3, [pc, #220]	; (80084f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800841a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800841e:	ee07 3a90 	vmov	s15, r3
 8008422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008426:	ed97 6a03 	vldr	s12, [r7, #12]
 800842a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80084fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800842e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008436:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800843a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800843e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008442:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008446:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008448:	4b2a      	ldr	r3, [pc, #168]	; (80084f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800844a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844c:	0a5b      	lsrs	r3, r3, #9
 800844e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008452:	ee07 3a90 	vmov	s15, r3
 8008456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800845a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800845e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008462:	edd7 6a07 	vldr	s13, [r7, #28]
 8008466:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800846a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800846e:	ee17 2a90 	vmov	r2, s15
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008476:	4b1f      	ldr	r3, [pc, #124]	; (80084f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800847a:	0c1b      	lsrs	r3, r3, #16
 800847c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008480:	ee07 3a90 	vmov	s15, r3
 8008484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008488:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800848c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008490:	edd7 6a07 	vldr	s13, [r7, #28]
 8008494:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008498:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800849c:	ee17 2a90 	vmov	r2, s15
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80084a4:	4b13      	ldr	r3, [pc, #76]	; (80084f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a8:	0e1b      	lsrs	r3, r3, #24
 80084aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084ae:	ee07 3a90 	vmov	s15, r3
 80084b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084be:	edd7 6a07 	vldr	s13, [r7, #28]
 80084c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084ca:	ee17 2a90 	vmov	r2, s15
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80084d2:	e008      	b.n	80084e6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2200      	movs	r2, #0
 80084de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	609a      	str	r2, [r3, #8]
}
 80084e6:	bf00      	nop
 80084e8:	3724      	adds	r7, #36	; 0x24
 80084ea:	46bd      	mov	sp, r7
 80084ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f0:	4770      	bx	lr
 80084f2:	bf00      	nop
 80084f4:	58024400 	.word	0x58024400
 80084f8:	03d09000 	.word	0x03d09000
 80084fc:	46000000 	.word	0x46000000
 8008500:	4c742400 	.word	0x4c742400
 8008504:	4a742400 	.word	0x4a742400
 8008508:	4bbebc20 	.word	0x4bbebc20

0800850c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800850c:	b480      	push	{r7}
 800850e:	b089      	sub	sp, #36	; 0x24
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008514:	4ba1      	ldr	r3, [pc, #644]	; (800879c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008518:	f003 0303 	and.w	r3, r3, #3
 800851c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800851e:	4b9f      	ldr	r3, [pc, #636]	; (800879c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008522:	0d1b      	lsrs	r3, r3, #20
 8008524:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008528:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800852a:	4b9c      	ldr	r3, [pc, #624]	; (800879c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800852c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800852e:	0a1b      	lsrs	r3, r3, #8
 8008530:	f003 0301 	and.w	r3, r3, #1
 8008534:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008536:	4b99      	ldr	r3, [pc, #612]	; (800879c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800853a:	08db      	lsrs	r3, r3, #3
 800853c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008540:	693a      	ldr	r2, [r7, #16]
 8008542:	fb02 f303 	mul.w	r3, r2, r3
 8008546:	ee07 3a90 	vmov	s15, r3
 800854a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800854e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	2b00      	cmp	r3, #0
 8008556:	f000 8111 	beq.w	800877c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800855a:	69bb      	ldr	r3, [r7, #24]
 800855c:	2b02      	cmp	r3, #2
 800855e:	f000 8083 	beq.w	8008668 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008562:	69bb      	ldr	r3, [r7, #24]
 8008564:	2b02      	cmp	r3, #2
 8008566:	f200 80a1 	bhi.w	80086ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800856a:	69bb      	ldr	r3, [r7, #24]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d003      	beq.n	8008578 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008570:	69bb      	ldr	r3, [r7, #24]
 8008572:	2b01      	cmp	r3, #1
 8008574:	d056      	beq.n	8008624 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008576:	e099      	b.n	80086ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008578:	4b88      	ldr	r3, [pc, #544]	; (800879c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f003 0320 	and.w	r3, r3, #32
 8008580:	2b00      	cmp	r3, #0
 8008582:	d02d      	beq.n	80085e0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008584:	4b85      	ldr	r3, [pc, #532]	; (800879c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	08db      	lsrs	r3, r3, #3
 800858a:	f003 0303 	and.w	r3, r3, #3
 800858e:	4a84      	ldr	r2, [pc, #528]	; (80087a0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008590:	fa22 f303 	lsr.w	r3, r2, r3
 8008594:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	ee07 3a90 	vmov	s15, r3
 800859c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	ee07 3a90 	vmov	s15, r3
 80085a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085ae:	4b7b      	ldr	r3, [pc, #492]	; (800879c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085b6:	ee07 3a90 	vmov	s15, r3
 80085ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085be:	ed97 6a03 	vldr	s12, [r7, #12]
 80085c2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80087a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80085de:	e087      	b.n	80086f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	ee07 3a90 	vmov	s15, r3
 80085e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80087a8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80085ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085f2:	4b6a      	ldr	r3, [pc, #424]	; (800879c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085fa:	ee07 3a90 	vmov	s15, r3
 80085fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008602:	ed97 6a03 	vldr	s12, [r7, #12]
 8008606:	eddf 5a67 	vldr	s11, [pc, #412]	; 80087a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800860a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800860e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008612:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800861a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800861e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008622:	e065      	b.n	80086f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	ee07 3a90 	vmov	s15, r3
 800862a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800862e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80087ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008636:	4b59      	ldr	r3, [pc, #356]	; (800879c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800863e:	ee07 3a90 	vmov	s15, r3
 8008642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008646:	ed97 6a03 	vldr	s12, [r7, #12]
 800864a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80087a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800864e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008656:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800865a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800865e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008662:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008666:	e043      	b.n	80086f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	ee07 3a90 	vmov	s15, r3
 800866e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008672:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80087b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800867a:	4b48      	ldr	r3, [pc, #288]	; (800879c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800867c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800867e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008682:	ee07 3a90 	vmov	s15, r3
 8008686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800868a:	ed97 6a03 	vldr	s12, [r7, #12]
 800868e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80087a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800869a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800869e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086aa:	e021      	b.n	80086f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	ee07 3a90 	vmov	s15, r3
 80086b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086b6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80087ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80086ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086be:	4b37      	ldr	r3, [pc, #220]	; (800879c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086c6:	ee07 3a90 	vmov	s15, r3
 80086ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80086d2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80087a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80086d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086ee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80086f0:	4b2a      	ldr	r3, [pc, #168]	; (800879c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f4:	0a5b      	lsrs	r3, r3, #9
 80086f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086fa:	ee07 3a90 	vmov	s15, r3
 80086fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008702:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008706:	ee37 7a87 	vadd.f32	s14, s15, s14
 800870a:	edd7 6a07 	vldr	s13, [r7, #28]
 800870e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008712:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008716:	ee17 2a90 	vmov	r2, s15
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800871e:	4b1f      	ldr	r3, [pc, #124]	; (800879c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008722:	0c1b      	lsrs	r3, r3, #16
 8008724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008728:	ee07 3a90 	vmov	s15, r3
 800872c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008730:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008734:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008738:	edd7 6a07 	vldr	s13, [r7, #28]
 800873c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008740:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008744:	ee17 2a90 	vmov	r2, s15
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800874c:	4b13      	ldr	r3, [pc, #76]	; (800879c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800874e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008750:	0e1b      	lsrs	r3, r3, #24
 8008752:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008756:	ee07 3a90 	vmov	s15, r3
 800875a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800875e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008762:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008766:	edd7 6a07 	vldr	s13, [r7, #28]
 800876a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800876e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008772:	ee17 2a90 	vmov	r2, s15
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800877a:	e008      	b.n	800878e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2200      	movs	r2, #0
 8008780:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	609a      	str	r2, [r3, #8]
}
 800878e:	bf00      	nop
 8008790:	3724      	adds	r7, #36	; 0x24
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop
 800879c:	58024400 	.word	0x58024400
 80087a0:	03d09000 	.word	0x03d09000
 80087a4:	46000000 	.word	0x46000000
 80087a8:	4c742400 	.word	0x4c742400
 80087ac:	4a742400 	.word	0x4a742400
 80087b0:	4bbebc20 	.word	0x4bbebc20

080087b4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b089      	sub	sp, #36	; 0x24
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80087bc:	4ba0      	ldr	r3, [pc, #640]	; (8008a40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087c0:	f003 0303 	and.w	r3, r3, #3
 80087c4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80087c6:	4b9e      	ldr	r3, [pc, #632]	; (8008a40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ca:	091b      	lsrs	r3, r3, #4
 80087cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087d0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80087d2:	4b9b      	ldr	r3, [pc, #620]	; (8008a40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d6:	f003 0301 	and.w	r3, r3, #1
 80087da:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80087dc:	4b98      	ldr	r3, [pc, #608]	; (8008a40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087e0:	08db      	lsrs	r3, r3, #3
 80087e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087e6:	693a      	ldr	r2, [r7, #16]
 80087e8:	fb02 f303 	mul.w	r3, r2, r3
 80087ec:	ee07 3a90 	vmov	s15, r3
 80087f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087f4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	f000 8111 	beq.w	8008a22 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	2b02      	cmp	r3, #2
 8008804:	f000 8083 	beq.w	800890e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	2b02      	cmp	r3, #2
 800880c:	f200 80a1 	bhi.w	8008952 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008810:	69bb      	ldr	r3, [r7, #24]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d003      	beq.n	800881e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	2b01      	cmp	r3, #1
 800881a:	d056      	beq.n	80088ca <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800881c:	e099      	b.n	8008952 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800881e:	4b88      	ldr	r3, [pc, #544]	; (8008a40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f003 0320 	and.w	r3, r3, #32
 8008826:	2b00      	cmp	r3, #0
 8008828:	d02d      	beq.n	8008886 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800882a:	4b85      	ldr	r3, [pc, #532]	; (8008a40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	08db      	lsrs	r3, r3, #3
 8008830:	f003 0303 	and.w	r3, r3, #3
 8008834:	4a83      	ldr	r2, [pc, #524]	; (8008a44 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008836:	fa22 f303 	lsr.w	r3, r2, r3
 800883a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	ee07 3a90 	vmov	s15, r3
 8008842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	ee07 3a90 	vmov	s15, r3
 800884c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008850:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008854:	4b7a      	ldr	r3, [pc, #488]	; (8008a40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800885c:	ee07 3a90 	vmov	s15, r3
 8008860:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008864:	ed97 6a03 	vldr	s12, [r7, #12]
 8008868:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008a48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800886c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008870:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008874:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008878:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800887c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008880:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008884:	e087      	b.n	8008996 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	ee07 3a90 	vmov	s15, r3
 800888c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008890:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008a4c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008894:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008898:	4b69      	ldr	r3, [pc, #420]	; (8008a40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800889a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800889c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088a0:	ee07 3a90 	vmov	s15, r3
 80088a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80088ac:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008a48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80088b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088c8:	e065      	b.n	8008996 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	ee07 3a90 	vmov	s15, r3
 80088d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088d4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008a50 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80088d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088dc:	4b58      	ldr	r3, [pc, #352]	; (8008a40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088e4:	ee07 3a90 	vmov	s15, r3
 80088e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80088f0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008a48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80088f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008900:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008904:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008908:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800890c:	e043      	b.n	8008996 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	ee07 3a90 	vmov	s15, r3
 8008914:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008918:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008a54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800891c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008920:	4b47      	ldr	r3, [pc, #284]	; (8008a40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008928:	ee07 3a90 	vmov	s15, r3
 800892c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008930:	ed97 6a03 	vldr	s12, [r7, #12]
 8008934:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008a48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008938:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800893c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008940:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008944:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008948:	ee67 7a27 	vmul.f32	s15, s14, s15
 800894c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008950:	e021      	b.n	8008996 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	ee07 3a90 	vmov	s15, r3
 8008958:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800895c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008a4c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008960:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008964:	4b36      	ldr	r3, [pc, #216]	; (8008a40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800896c:	ee07 3a90 	vmov	s15, r3
 8008970:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008974:	ed97 6a03 	vldr	s12, [r7, #12]
 8008978:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008a48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800897c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008980:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008984:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008988:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800898c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008990:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008994:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008996:	4b2a      	ldr	r3, [pc, #168]	; (8008a40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800899a:	0a5b      	lsrs	r3, r3, #9
 800899c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089a0:	ee07 3a90 	vmov	s15, r3
 80089a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80089b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089bc:	ee17 2a90 	vmov	r2, s15
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80089c4:	4b1e      	ldr	r3, [pc, #120]	; (8008a40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80089c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089c8:	0c1b      	lsrs	r3, r3, #16
 80089ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089ce:	ee07 3a90 	vmov	s15, r3
 80089d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089de:	edd7 6a07 	vldr	s13, [r7, #28]
 80089e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089ea:	ee17 2a90 	vmov	r2, s15
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80089f2:	4b13      	ldr	r3, [pc, #76]	; (8008a40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80089f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089f6:	0e1b      	lsrs	r3, r3, #24
 80089f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089fc:	ee07 3a90 	vmov	s15, r3
 8008a00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a18:	ee17 2a90 	vmov	r2, s15
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008a20:	e008      	b.n	8008a34 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2200      	movs	r2, #0
 8008a26:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	609a      	str	r2, [r3, #8]
}
 8008a34:	bf00      	nop
 8008a36:	3724      	adds	r7, #36	; 0x24
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr
 8008a40:	58024400 	.word	0x58024400
 8008a44:	03d09000 	.word	0x03d09000
 8008a48:	46000000 	.word	0x46000000
 8008a4c:	4c742400 	.word	0x4c742400
 8008a50:	4a742400 	.word	0x4a742400
 8008a54:	4bbebc20 	.word	0x4bbebc20

08008a58 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b084      	sub	sp, #16
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008a62:	2300      	movs	r3, #0
 8008a64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008a66:	4b53      	ldr	r3, [pc, #332]	; (8008bb4 <RCCEx_PLL2_Config+0x15c>)
 8008a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a6a:	f003 0303 	and.w	r3, r3, #3
 8008a6e:	2b03      	cmp	r3, #3
 8008a70:	d101      	bne.n	8008a76 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	e099      	b.n	8008baa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008a76:	4b4f      	ldr	r3, [pc, #316]	; (8008bb4 <RCCEx_PLL2_Config+0x15c>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a4e      	ldr	r2, [pc, #312]	; (8008bb4 <RCCEx_PLL2_Config+0x15c>)
 8008a7c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008a80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a82:	f7f8 f945 	bl	8000d10 <HAL_GetTick>
 8008a86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008a88:	e008      	b.n	8008a9c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008a8a:	f7f8 f941 	bl	8000d10 <HAL_GetTick>
 8008a8e:	4602      	mov	r2, r0
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	1ad3      	subs	r3, r2, r3
 8008a94:	2b02      	cmp	r3, #2
 8008a96:	d901      	bls.n	8008a9c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008a98:	2303      	movs	r3, #3
 8008a9a:	e086      	b.n	8008baa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008a9c:	4b45      	ldr	r3, [pc, #276]	; (8008bb4 <RCCEx_PLL2_Config+0x15c>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d1f0      	bne.n	8008a8a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008aa8:	4b42      	ldr	r3, [pc, #264]	; (8008bb4 <RCCEx_PLL2_Config+0x15c>)
 8008aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	031b      	lsls	r3, r3, #12
 8008ab6:	493f      	ldr	r1, [pc, #252]	; (8008bb4 <RCCEx_PLL2_Config+0x15c>)
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	628b      	str	r3, [r1, #40]	; 0x28
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	3b01      	subs	r3, #1
 8008ac2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	689b      	ldr	r3, [r3, #8]
 8008aca:	3b01      	subs	r3, #1
 8008acc:	025b      	lsls	r3, r3, #9
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	431a      	orrs	r2, r3
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	68db      	ldr	r3, [r3, #12]
 8008ad6:	3b01      	subs	r3, #1
 8008ad8:	041b      	lsls	r3, r3, #16
 8008ada:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008ade:	431a      	orrs	r2, r3
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	691b      	ldr	r3, [r3, #16]
 8008ae4:	3b01      	subs	r3, #1
 8008ae6:	061b      	lsls	r3, r3, #24
 8008ae8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008aec:	4931      	ldr	r1, [pc, #196]	; (8008bb4 <RCCEx_PLL2_Config+0x15c>)
 8008aee:	4313      	orrs	r3, r2
 8008af0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008af2:	4b30      	ldr	r3, [pc, #192]	; (8008bb4 <RCCEx_PLL2_Config+0x15c>)
 8008af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	695b      	ldr	r3, [r3, #20]
 8008afe:	492d      	ldr	r1, [pc, #180]	; (8008bb4 <RCCEx_PLL2_Config+0x15c>)
 8008b00:	4313      	orrs	r3, r2
 8008b02:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008b04:	4b2b      	ldr	r3, [pc, #172]	; (8008bb4 <RCCEx_PLL2_Config+0x15c>)
 8008b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b08:	f023 0220 	bic.w	r2, r3, #32
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	699b      	ldr	r3, [r3, #24]
 8008b10:	4928      	ldr	r1, [pc, #160]	; (8008bb4 <RCCEx_PLL2_Config+0x15c>)
 8008b12:	4313      	orrs	r3, r2
 8008b14:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008b16:	4b27      	ldr	r3, [pc, #156]	; (8008bb4 <RCCEx_PLL2_Config+0x15c>)
 8008b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b1a:	4a26      	ldr	r2, [pc, #152]	; (8008bb4 <RCCEx_PLL2_Config+0x15c>)
 8008b1c:	f023 0310 	bic.w	r3, r3, #16
 8008b20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008b22:	4b24      	ldr	r3, [pc, #144]	; (8008bb4 <RCCEx_PLL2_Config+0x15c>)
 8008b24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b26:	4b24      	ldr	r3, [pc, #144]	; (8008bb8 <RCCEx_PLL2_Config+0x160>)
 8008b28:	4013      	ands	r3, r2
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	69d2      	ldr	r2, [r2, #28]
 8008b2e:	00d2      	lsls	r2, r2, #3
 8008b30:	4920      	ldr	r1, [pc, #128]	; (8008bb4 <RCCEx_PLL2_Config+0x15c>)
 8008b32:	4313      	orrs	r3, r2
 8008b34:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008b36:	4b1f      	ldr	r3, [pc, #124]	; (8008bb4 <RCCEx_PLL2_Config+0x15c>)
 8008b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b3a:	4a1e      	ldr	r2, [pc, #120]	; (8008bb4 <RCCEx_PLL2_Config+0x15c>)
 8008b3c:	f043 0310 	orr.w	r3, r3, #16
 8008b40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d106      	bne.n	8008b56 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008b48:	4b1a      	ldr	r3, [pc, #104]	; (8008bb4 <RCCEx_PLL2_Config+0x15c>)
 8008b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b4c:	4a19      	ldr	r2, [pc, #100]	; (8008bb4 <RCCEx_PLL2_Config+0x15c>)
 8008b4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008b54:	e00f      	b.n	8008b76 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d106      	bne.n	8008b6a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008b5c:	4b15      	ldr	r3, [pc, #84]	; (8008bb4 <RCCEx_PLL2_Config+0x15c>)
 8008b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b60:	4a14      	ldr	r2, [pc, #80]	; (8008bb4 <RCCEx_PLL2_Config+0x15c>)
 8008b62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008b68:	e005      	b.n	8008b76 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008b6a:	4b12      	ldr	r3, [pc, #72]	; (8008bb4 <RCCEx_PLL2_Config+0x15c>)
 8008b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b6e:	4a11      	ldr	r2, [pc, #68]	; (8008bb4 <RCCEx_PLL2_Config+0x15c>)
 8008b70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008b74:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008b76:	4b0f      	ldr	r3, [pc, #60]	; (8008bb4 <RCCEx_PLL2_Config+0x15c>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4a0e      	ldr	r2, [pc, #56]	; (8008bb4 <RCCEx_PLL2_Config+0x15c>)
 8008b7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008b80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b82:	f7f8 f8c5 	bl	8000d10 <HAL_GetTick>
 8008b86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008b88:	e008      	b.n	8008b9c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008b8a:	f7f8 f8c1 	bl	8000d10 <HAL_GetTick>
 8008b8e:	4602      	mov	r2, r0
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	1ad3      	subs	r3, r2, r3
 8008b94:	2b02      	cmp	r3, #2
 8008b96:	d901      	bls.n	8008b9c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008b98:	2303      	movs	r3, #3
 8008b9a:	e006      	b.n	8008baa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008b9c:	4b05      	ldr	r3, [pc, #20]	; (8008bb4 <RCCEx_PLL2_Config+0x15c>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d0f0      	beq.n	8008b8a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3710      	adds	r7, #16
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	58024400 	.word	0x58024400
 8008bb8:	ffff0007 	.word	0xffff0007

08008bbc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008bca:	4b53      	ldr	r3, [pc, #332]	; (8008d18 <RCCEx_PLL3_Config+0x15c>)
 8008bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bce:	f003 0303 	and.w	r3, r3, #3
 8008bd2:	2b03      	cmp	r3, #3
 8008bd4:	d101      	bne.n	8008bda <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e099      	b.n	8008d0e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008bda:	4b4f      	ldr	r3, [pc, #316]	; (8008d18 <RCCEx_PLL3_Config+0x15c>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a4e      	ldr	r2, [pc, #312]	; (8008d18 <RCCEx_PLL3_Config+0x15c>)
 8008be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008be4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008be6:	f7f8 f893 	bl	8000d10 <HAL_GetTick>
 8008bea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008bec:	e008      	b.n	8008c00 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008bee:	f7f8 f88f 	bl	8000d10 <HAL_GetTick>
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	1ad3      	subs	r3, r2, r3
 8008bf8:	2b02      	cmp	r3, #2
 8008bfa:	d901      	bls.n	8008c00 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008bfc:	2303      	movs	r3, #3
 8008bfe:	e086      	b.n	8008d0e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c00:	4b45      	ldr	r3, [pc, #276]	; (8008d18 <RCCEx_PLL3_Config+0x15c>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d1f0      	bne.n	8008bee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008c0c:	4b42      	ldr	r3, [pc, #264]	; (8008d18 <RCCEx_PLL3_Config+0x15c>)
 8008c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c10:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	051b      	lsls	r3, r3, #20
 8008c1a:	493f      	ldr	r1, [pc, #252]	; (8008d18 <RCCEx_PLL3_Config+0x15c>)
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	628b      	str	r3, [r1, #40]	; 0x28
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	3b01      	subs	r3, #1
 8008c26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	3b01      	subs	r3, #1
 8008c30:	025b      	lsls	r3, r3, #9
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	431a      	orrs	r2, r3
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	3b01      	subs	r3, #1
 8008c3c:	041b      	lsls	r3, r3, #16
 8008c3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008c42:	431a      	orrs	r2, r3
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	691b      	ldr	r3, [r3, #16]
 8008c48:	3b01      	subs	r3, #1
 8008c4a:	061b      	lsls	r3, r3, #24
 8008c4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008c50:	4931      	ldr	r1, [pc, #196]	; (8008d18 <RCCEx_PLL3_Config+0x15c>)
 8008c52:	4313      	orrs	r3, r2
 8008c54:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008c56:	4b30      	ldr	r3, [pc, #192]	; (8008d18 <RCCEx_PLL3_Config+0x15c>)
 8008c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	695b      	ldr	r3, [r3, #20]
 8008c62:	492d      	ldr	r1, [pc, #180]	; (8008d18 <RCCEx_PLL3_Config+0x15c>)
 8008c64:	4313      	orrs	r3, r2
 8008c66:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008c68:	4b2b      	ldr	r3, [pc, #172]	; (8008d18 <RCCEx_PLL3_Config+0x15c>)
 8008c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c6c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	699b      	ldr	r3, [r3, #24]
 8008c74:	4928      	ldr	r1, [pc, #160]	; (8008d18 <RCCEx_PLL3_Config+0x15c>)
 8008c76:	4313      	orrs	r3, r2
 8008c78:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008c7a:	4b27      	ldr	r3, [pc, #156]	; (8008d18 <RCCEx_PLL3_Config+0x15c>)
 8008c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c7e:	4a26      	ldr	r2, [pc, #152]	; (8008d18 <RCCEx_PLL3_Config+0x15c>)
 8008c80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008c86:	4b24      	ldr	r3, [pc, #144]	; (8008d18 <RCCEx_PLL3_Config+0x15c>)
 8008c88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c8a:	4b24      	ldr	r3, [pc, #144]	; (8008d1c <RCCEx_PLL3_Config+0x160>)
 8008c8c:	4013      	ands	r3, r2
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	69d2      	ldr	r2, [r2, #28]
 8008c92:	00d2      	lsls	r2, r2, #3
 8008c94:	4920      	ldr	r1, [pc, #128]	; (8008d18 <RCCEx_PLL3_Config+0x15c>)
 8008c96:	4313      	orrs	r3, r2
 8008c98:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008c9a:	4b1f      	ldr	r3, [pc, #124]	; (8008d18 <RCCEx_PLL3_Config+0x15c>)
 8008c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c9e:	4a1e      	ldr	r2, [pc, #120]	; (8008d18 <RCCEx_PLL3_Config+0x15c>)
 8008ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ca4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d106      	bne.n	8008cba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008cac:	4b1a      	ldr	r3, [pc, #104]	; (8008d18 <RCCEx_PLL3_Config+0x15c>)
 8008cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb0:	4a19      	ldr	r2, [pc, #100]	; (8008d18 <RCCEx_PLL3_Config+0x15c>)
 8008cb2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008cb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008cb8:	e00f      	b.n	8008cda <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d106      	bne.n	8008cce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008cc0:	4b15      	ldr	r3, [pc, #84]	; (8008d18 <RCCEx_PLL3_Config+0x15c>)
 8008cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc4:	4a14      	ldr	r2, [pc, #80]	; (8008d18 <RCCEx_PLL3_Config+0x15c>)
 8008cc6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008cca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008ccc:	e005      	b.n	8008cda <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008cce:	4b12      	ldr	r3, [pc, #72]	; (8008d18 <RCCEx_PLL3_Config+0x15c>)
 8008cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd2:	4a11      	ldr	r2, [pc, #68]	; (8008d18 <RCCEx_PLL3_Config+0x15c>)
 8008cd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008cd8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008cda:	4b0f      	ldr	r3, [pc, #60]	; (8008d18 <RCCEx_PLL3_Config+0x15c>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a0e      	ldr	r2, [pc, #56]	; (8008d18 <RCCEx_PLL3_Config+0x15c>)
 8008ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ce4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ce6:	f7f8 f813 	bl	8000d10 <HAL_GetTick>
 8008cea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008cec:	e008      	b.n	8008d00 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008cee:	f7f8 f80f 	bl	8000d10 <HAL_GetTick>
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	1ad3      	subs	r3, r2, r3
 8008cf8:	2b02      	cmp	r3, #2
 8008cfa:	d901      	bls.n	8008d00 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008cfc:	2303      	movs	r3, #3
 8008cfe:	e006      	b.n	8008d0e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d00:	4b05      	ldr	r3, [pc, #20]	; (8008d18 <RCCEx_PLL3_Config+0x15c>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d0f0      	beq.n	8008cee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3710      	adds	r7, #16
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	58024400 	.word	0x58024400
 8008d1c:	ffff0007 	.word	0xffff0007

08008d20 <memset>:
 8008d20:	4402      	add	r2, r0
 8008d22:	4603      	mov	r3, r0
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d100      	bne.n	8008d2a <memset+0xa>
 8008d28:	4770      	bx	lr
 8008d2a:	f803 1b01 	strb.w	r1, [r3], #1
 8008d2e:	e7f9      	b.n	8008d24 <memset+0x4>

08008d30 <__libc_init_array>:
 8008d30:	b570      	push	{r4, r5, r6, lr}
 8008d32:	4d0d      	ldr	r5, [pc, #52]	; (8008d68 <__libc_init_array+0x38>)
 8008d34:	4c0d      	ldr	r4, [pc, #52]	; (8008d6c <__libc_init_array+0x3c>)
 8008d36:	1b64      	subs	r4, r4, r5
 8008d38:	10a4      	asrs	r4, r4, #2
 8008d3a:	2600      	movs	r6, #0
 8008d3c:	42a6      	cmp	r6, r4
 8008d3e:	d109      	bne.n	8008d54 <__libc_init_array+0x24>
 8008d40:	4d0b      	ldr	r5, [pc, #44]	; (8008d70 <__libc_init_array+0x40>)
 8008d42:	4c0c      	ldr	r4, [pc, #48]	; (8008d74 <__libc_init_array+0x44>)
 8008d44:	f000 f818 	bl	8008d78 <_init>
 8008d48:	1b64      	subs	r4, r4, r5
 8008d4a:	10a4      	asrs	r4, r4, #2
 8008d4c:	2600      	movs	r6, #0
 8008d4e:	42a6      	cmp	r6, r4
 8008d50:	d105      	bne.n	8008d5e <__libc_init_array+0x2e>
 8008d52:	bd70      	pop	{r4, r5, r6, pc}
 8008d54:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d58:	4798      	blx	r3
 8008d5a:	3601      	adds	r6, #1
 8008d5c:	e7ee      	b.n	8008d3c <__libc_init_array+0xc>
 8008d5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d62:	4798      	blx	r3
 8008d64:	3601      	adds	r6, #1
 8008d66:	e7f2      	b.n	8008d4e <__libc_init_array+0x1e>
 8008d68:	08008da8 	.word	0x08008da8
 8008d6c:	08008da8 	.word	0x08008da8
 8008d70:	08008da8 	.word	0x08008da8
 8008d74:	08008dac 	.word	0x08008dac

08008d78 <_init>:
 8008d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d7a:	bf00      	nop
 8008d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d7e:	bc08      	pop	{r3}
 8008d80:	469e      	mov	lr, r3
 8008d82:	4770      	bx	lr

08008d84 <_fini>:
 8008d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d86:	bf00      	nop
 8008d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d8a:	bc08      	pop	{r3}
 8008d8c:	469e      	mov	lr, r3
 8008d8e:	4770      	bx	lr
