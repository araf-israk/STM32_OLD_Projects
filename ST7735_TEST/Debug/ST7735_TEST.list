
ST7735_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e5c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00008620  08002ff4  08002ff4  00012ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b614  0800b614  00020030  2**0
                  CONTENTS
  4 .ARM          00000008  0800b614  0800b614  0001b614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b61c  0800b61c  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b61c  0800b61c  0001b61c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b620  0800b620  0001b620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  0800b624  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000030  0800b654  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  0800b654  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000723e  00000000  00000000  000200a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000160b  00000000  00000000  000272e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000730  00000000  00000000  000288f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001550f  00000000  00000000  00029020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000086a7  00000000  00000000  0003e52f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008505d  00000000  00000000  00046bd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000555  00000000  00000000  000cbc33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001c28  00000000  00000000  000cc188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000cddb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000030 	.word	0x20000030
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002fdc 	.word	0x08002fdc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000034 	.word	0x20000034
 80001d4:	08002fdc 	.word	0x08002fdc

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <demoTFT>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t r = 0;
void demoTFT(void)
{
 80004d4:	b5b0      	push	{r4, r5, r7, lr}
 80004d6:	b08a      	sub	sp, #40	; 0x28
 80004d8:	af04      	add	r7, sp, #16
ST7735_SetRotation(r);
 80004da:	4b4a      	ldr	r3, [pc, #296]	; (8000604 <demoTFT+0x130>)
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	4618      	mov	r0, r3
 80004e0:	f001 f9d0 	bl	8001884 <ST7735_SetRotation>
ST7735_FillScreen(ST7735_BLACK);
 80004e4:	2000      	movs	r0, #0
 80004e6:	f000 fdd5 	bl	8001094 <ST7735_FillScreen>

for(int x = 0; x < ST7735_GetWidth(); x++)
 80004ea:	2300      	movs	r3, #0
 80004ec:	617b      	str	r3, [r7, #20]
 80004ee:	e018      	b.n	8000522 <demoTFT+0x4e>
{
ST7735_DrawPixel(x, 0, ST7735_WHITE);
 80004f0:	697b      	ldr	r3, [r7, #20]
 80004f2:	b29b      	uxth	r3, r3
 80004f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f000 fc92 	bl	8000e24 <ST7735_DrawPixel>
ST7735_DrawPixel(x, ST7735_GetHeight() - 1, ST7735_WHITE);
 8000500:	697b      	ldr	r3, [r7, #20]
 8000502:	b29c      	uxth	r4, r3
 8000504:	f001 fa6a 	bl	80019dc <ST7735_GetHeight>
 8000508:	4603      	mov	r3, r0
 800050a:	b29b      	uxth	r3, r3
 800050c:	3b01      	subs	r3, #1
 800050e:	b29b      	uxth	r3, r3
 8000510:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000514:	4619      	mov	r1, r3
 8000516:	4620      	mov	r0, r4
 8000518:	f000 fc84 	bl	8000e24 <ST7735_DrawPixel>
for(int x = 0; x < ST7735_GetWidth(); x++)
 800051c:	697b      	ldr	r3, [r7, #20]
 800051e:	3301      	adds	r3, #1
 8000520:	617b      	str	r3, [r7, #20]
 8000522:	f001 fa67 	bl	80019f4 <ST7735_GetWidth>
 8000526:	4603      	mov	r3, r0
 8000528:	461a      	mov	r2, r3
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	4293      	cmp	r3, r2
 800052e:	dbdf      	blt.n	80004f0 <demoTFT+0x1c>
}

for(int y = 0; y < ST7735_GetHeight(); y++)
 8000530:	2300      	movs	r3, #0
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	e017      	b.n	8000566 <demoTFT+0x92>
{
ST7735_DrawPixel(0, y, ST7735_WHITE);
 8000536:	693b      	ldr	r3, [r7, #16]
 8000538:	b29b      	uxth	r3, r3
 800053a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800053e:	4619      	mov	r1, r3
 8000540:	2000      	movs	r0, #0
 8000542:	f000 fc6f 	bl	8000e24 <ST7735_DrawPixel>
ST7735_DrawPixel(ST7735_GetWidth() - 1, y, ST7735_WHITE);
 8000546:	f001 fa55 	bl	80019f4 <ST7735_GetWidth>
 800054a:	4603      	mov	r3, r0
 800054c:	b29b      	uxth	r3, r3
 800054e:	3b01      	subs	r3, #1
 8000550:	b29b      	uxth	r3, r3
 8000552:	693a      	ldr	r2, [r7, #16]
 8000554:	b291      	uxth	r1, r2
 8000556:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800055a:	4618      	mov	r0, r3
 800055c:	f000 fc62 	bl	8000e24 <ST7735_DrawPixel>
for(int y = 0; y < ST7735_GetHeight(); y++)
 8000560:	693b      	ldr	r3, [r7, #16]
 8000562:	3301      	adds	r3, #1
 8000564:	613b      	str	r3, [r7, #16]
 8000566:	f001 fa39 	bl	80019dc <ST7735_GetHeight>
 800056a:	4603      	mov	r3, r0
 800056c:	461a      	mov	r2, r3
 800056e:	693b      	ldr	r3, [r7, #16]
 8000570:	4293      	cmp	r3, r2
 8000572:	dbe0      	blt.n	8000536 <demoTFT+0x62>
}

ST7735_DrawLine(0, 0, ST7735_GetWidth(), ST7735_GetHeight(),ST7735_WHITE);
 8000574:	f001 fa3e 	bl	80019f4 <ST7735_GetWidth>
 8000578:	4603      	mov	r3, r0
 800057a:	461c      	mov	r4, r3
 800057c:	f001 fa2e 	bl	80019dc <ST7735_GetHeight>
 8000580:	4603      	mov	r3, r0
 8000582:	461a      	mov	r2, r3
 8000584:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	4613      	mov	r3, r2
 800058c:	4622      	mov	r2, r4
 800058e:	2100      	movs	r1, #0
 8000590:	2000      	movs	r0, #0
 8000592:	f001 f844 	bl	800161e <ST7735_DrawLine>
ST7735_DrawLine(ST7735_GetWidth(), 0, 0, ST7735_GetHeight(),ST7735_WHITE);
 8000596:	f001 fa2d 	bl	80019f4 <ST7735_GetWidth>
 800059a:	4603      	mov	r3, r0
 800059c:	461c      	mov	r4, r3
 800059e:	f001 fa1d 	bl	80019dc <ST7735_GetHeight>
 80005a2:	4603      	mov	r3, r0
 80005a4:	461a      	mov	r2, r3
 80005a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	4613      	mov	r3, r2
 80005ae:	2200      	movs	r2, #0
 80005b0:	2100      	movs	r1, #0
 80005b2:	4620      	mov	r0, r4
 80005b4:	f001 f833 	bl	800161e <ST7735_DrawLine>
HAL_Delay(2000);
 80005b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005bc:	f001 fb6e 	bl	8001c9c <HAL_Delay>

ST7735_FillScreen(ST7735_BLACK);
 80005c0:	2000      	movs	r0, #0
 80005c2:	f000 fd67 	bl	8001094 <ST7735_FillScreen>
for (int i = 0; i < ST7735_GetHeight(); i += 4)
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
 80005ca:	e011      	b.n	80005f0 <demoTFT+0x11c>
{
ST7735_DrawFastHLine(0, i, ST7735_GetWidth() - 1, ST7735_WHITE);
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	b21c      	sxth	r4, r3
 80005d0:	f001 fa10 	bl	80019f4 <ST7735_GetWidth>
 80005d4:	4603      	mov	r3, r0
 80005d6:	b29b      	uxth	r3, r3
 80005d8:	3b01      	subs	r3, #1
 80005da:	b29b      	uxth	r3, r3
 80005dc:	b21a      	sxth	r2, r3
 80005de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005e2:	4621      	mov	r1, r4
 80005e4:	2000      	movs	r0, #0
 80005e6:	f001 f903 	bl	80017f0 <ST7735_DrawFastHLine>
for (int i = 0; i < ST7735_GetHeight(); i += 4)
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	3304      	adds	r3, #4
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	f001 f9f4 	bl	80019dc <ST7735_GetHeight>
 80005f4:	4603      	mov	r3, r0
 80005f6:	461a      	mov	r2, r3
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	4293      	cmp	r3, r2
 80005fc:	dbe6      	blt.n	80005cc <demoTFT+0xf8>
}

for (int i = 0; i < ST7735_GetWidth(); i += 4)
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	e013      	b.n	800062c <demoTFT+0x158>
 8000604:	200000a4 	.word	0x200000a4
{
ST7735_DrawFastVLine(i, 0, ST7735_GetHeight() - 1, ST7735_WHITE);
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	b21c      	sxth	r4, r3
 800060c:	f001 f9e6 	bl	80019dc <ST7735_GetHeight>
 8000610:	4603      	mov	r3, r0
 8000612:	b29b      	uxth	r3, r3
 8000614:	3b01      	subs	r3, #1
 8000616:	b29b      	uxth	r3, r3
 8000618:	b21a      	sxth	r2, r3
 800061a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800061e:	2100      	movs	r1, #0
 8000620:	4620      	mov	r0, r4
 8000622:	f001 f89b 	bl	800175c <ST7735_DrawFastVLine>
for (int i = 0; i < ST7735_GetWidth(); i += 4)
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	3304      	adds	r3, #4
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	f001 f9e2 	bl	80019f4 <ST7735_GetWidth>
 8000630:	4603      	mov	r3, r0
 8000632:	461a      	mov	r2, r3
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	4293      	cmp	r3, r2
 8000638:	dbe6      	blt.n	8000608 <demoTFT+0x134>
}
HAL_Delay(2000);
 800063a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800063e:	f001 fb2d 	bl	8001c9c <HAL_Delay>

 // Check fonts
ST7735_FillScreen(ST7735_BLACK);
 8000642:	2000      	movs	r0, #0
 8000644:	f000 fd26 	bl	8001094 <ST7735_FillScreen>
ST7735_DrawString(0, 0,"Font_7x10, red on black,ABCDEF",Font_7x10,ST7735_RED, ST7735_BLACK);
 8000648:	4ba1      	ldr	r3, [pc, #644]	; (80008d0 <demoTFT+0x3fc>)
 800064a:	2200      	movs	r2, #0
 800064c:	9202      	str	r2, [sp, #8]
 800064e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000652:	9201      	str	r2, [sp, #4]
 8000654:	685a      	ldr	r2, [r3, #4]
 8000656:	9200      	str	r2, [sp, #0]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a9e      	ldr	r2, [pc, #632]	; (80008d4 <demoTFT+0x400>)
 800065c:	2100      	movs	r1, #0
 800065e:	2000      	movs	r0, #0
 8000660:	f000 fc28 	bl	8000eb4 <ST7735_DrawString>
ST7735_DrawString(0, 3*10, "Font_11x18, green,ABCD",Font_11x18,ST7735_GREEN, ST7735_BLACK);
 8000664:	4b9c      	ldr	r3, [pc, #624]	; (80008d8 <demoTFT+0x404>)
 8000666:	2200      	movs	r2, #0
 8000668:	9202      	str	r2, [sp, #8]
 800066a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800066e:	9201      	str	r2, [sp, #4]
 8000670:	685a      	ldr	r2, [r3, #4]
 8000672:	9200      	str	r2, [sp, #0]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a99      	ldr	r2, [pc, #612]	; (80008dc <demoTFT+0x408>)
 8000678:	211e      	movs	r1, #30
 800067a:	2000      	movs	r0, #0
 800067c:	f000 fc1a 	bl	8000eb4 <ST7735_DrawString>
ST7735_DrawString(0, 3*10+3*18, "Font_16x26 ,AB", Font_16x26, ST7735_BLUE,
 8000680:	4b97      	ldr	r3, [pc, #604]	; (80008e0 <demoTFT+0x40c>)
 8000682:	2200      	movs	r2, #0
 8000684:	9202      	str	r2, [sp, #8]
 8000686:	221f      	movs	r2, #31
 8000688:	9201      	str	r2, [sp, #4]
 800068a:	685a      	ldr	r2, [r3, #4]
 800068c:	9200      	str	r2, [sp, #0]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a94      	ldr	r2, [pc, #592]	; (80008e4 <demoTFT+0x410>)
 8000692:	2154      	movs	r1, #84	; 0x54
 8000694:	2000      	movs	r0, #0
 8000696:	f000 fc0d 	bl	8000eb4 <ST7735_DrawString>
ST7735_BLACK);
HAL_Delay(2000);
 800069a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800069e:	f001 fafd 	bl	8001c9c <HAL_Delay>

 // Check colors
ST7735_FillScreen(ST7735_BLACK);
 80006a2:	2000      	movs	r0, #0
 80006a4:	f000 fcf6 	bl	8001094 <ST7735_FillScreen>
ST7735_DrawString(0, 0, "BLACK", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 80006a8:	4b8b      	ldr	r3, [pc, #556]	; (80008d8 <demoTFT+0x404>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	9202      	str	r2, [sp, #8]
 80006ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006b2:	9201      	str	r2, [sp, #4]
 80006b4:	685a      	ldr	r2, [r3, #4]
 80006b6:	9200      	str	r2, [sp, #0]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a8b      	ldr	r2, [pc, #556]	; (80008e8 <demoTFT+0x414>)
 80006bc:	2100      	movs	r1, #0
 80006be:	2000      	movs	r0, #0
 80006c0:	f000 fbf8 	bl	8000eb4 <ST7735_DrawString>
HAL_Delay(500);
 80006c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006c8:	f001 fae8 	bl	8001c9c <HAL_Delay>

ST7735_FillScreen(ST7735_BLUE);
 80006cc:	201f      	movs	r0, #31
 80006ce:	f000 fce1 	bl	8001094 <ST7735_FillScreen>
ST7735_DrawString(0, 0, "BLUE", Font_11x18, ST7735_BLACK, ST7735_BLUE);
 80006d2:	4b81      	ldr	r3, [pc, #516]	; (80008d8 <demoTFT+0x404>)
 80006d4:	221f      	movs	r2, #31
 80006d6:	9202      	str	r2, [sp, #8]
 80006d8:	2200      	movs	r2, #0
 80006da:	9201      	str	r2, [sp, #4]
 80006dc:	685a      	ldr	r2, [r3, #4]
 80006de:	9200      	str	r2, [sp, #0]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a82      	ldr	r2, [pc, #520]	; (80008ec <demoTFT+0x418>)
 80006e4:	2100      	movs	r1, #0
 80006e6:	2000      	movs	r0, #0
 80006e8:	f000 fbe4 	bl	8000eb4 <ST7735_DrawString>
HAL_Delay(500);
 80006ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006f0:	f001 fad4 	bl	8001c9c <HAL_Delay>

ST7735_FillScreen(ST7735_RED);
 80006f4:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80006f8:	f000 fccc 	bl	8001094 <ST7735_FillScreen>
ST7735_DrawString(0, 0, "RED", Font_11x18, ST7735_BLACK, ST7735_RED);
 80006fc:	4b76      	ldr	r3, [pc, #472]	; (80008d8 <demoTFT+0x404>)
 80006fe:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000702:	9202      	str	r2, [sp, #8]
 8000704:	2200      	movs	r2, #0
 8000706:	9201      	str	r2, [sp, #4]
 8000708:	685a      	ldr	r2, [r3, #4]
 800070a:	9200      	str	r2, [sp, #0]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a78      	ldr	r2, [pc, #480]	; (80008f0 <demoTFT+0x41c>)
 8000710:	2100      	movs	r1, #0
 8000712:	2000      	movs	r0, #0
 8000714:	f000 fbce 	bl	8000eb4 <ST7735_DrawString>
HAL_Delay(500);
 8000718:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800071c:	f001 fabe 	bl	8001c9c <HAL_Delay>

ST7735_FillScreen(ST7735_GREEN);
 8000720:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8000724:	f000 fcb6 	bl	8001094 <ST7735_FillScreen>
ST7735_DrawString(0, 0, "GREEN", Font_11x18, ST7735_BLACK, ST7735_GREEN);
 8000728:	4b6b      	ldr	r3, [pc, #428]	; (80008d8 <demoTFT+0x404>)
 800072a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800072e:	9202      	str	r2, [sp, #8]
 8000730:	2200      	movs	r2, #0
 8000732:	9201      	str	r2, [sp, #4]
 8000734:	685a      	ldr	r2, [r3, #4]
 8000736:	9200      	str	r2, [sp, #0]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a6e      	ldr	r2, [pc, #440]	; (80008f4 <demoTFT+0x420>)
 800073c:	2100      	movs	r1, #0
 800073e:	2000      	movs	r0, #0
 8000740:	f000 fbb8 	bl	8000eb4 <ST7735_DrawString>
HAL_Delay(500);
 8000744:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000748:	f001 faa8 	bl	8001c9c <HAL_Delay>

ST7735_FillScreen(ST7735_CYAN);
 800074c:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8000750:	f000 fca0 	bl	8001094 <ST7735_FillScreen>
ST7735_DrawString(0, 0, "CYAN", Font_11x18, ST7735_BLACK, ST7735_CYAN);
 8000754:	4b60      	ldr	r3, [pc, #384]	; (80008d8 <demoTFT+0x404>)
 8000756:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800075a:	9202      	str	r2, [sp, #8]
 800075c:	2200      	movs	r2, #0
 800075e:	9201      	str	r2, [sp, #4]
 8000760:	685a      	ldr	r2, [r3, #4]
 8000762:	9200      	str	r2, [sp, #0]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a64      	ldr	r2, [pc, #400]	; (80008f8 <demoTFT+0x424>)
 8000768:	2100      	movs	r1, #0
 800076a:	2000      	movs	r0, #0
 800076c:	f000 fba2 	bl	8000eb4 <ST7735_DrawString>
HAL_Delay(500);
 8000770:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000774:	f001 fa92 	bl	8001c9c <HAL_Delay>

ST7735_FillScreen(ST7735_MAGENTA);
 8000778:	f64f 001f 	movw	r0, #63519	; 0xf81f
 800077c:	f000 fc8a 	bl	8001094 <ST7735_FillScreen>
ST7735_DrawString(0, 0, "MAGENTA",Font_11x18, ST7735_BLACK, ST7735_MAGENTA);
 8000780:	4b55      	ldr	r3, [pc, #340]	; (80008d8 <demoTFT+0x404>)
 8000782:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000786:	9202      	str	r2, [sp, #8]
 8000788:	2200      	movs	r2, #0
 800078a:	9201      	str	r2, [sp, #4]
 800078c:	685a      	ldr	r2, [r3, #4]
 800078e:	9200      	str	r2, [sp, #0]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a5a      	ldr	r2, [pc, #360]	; (80008fc <demoTFT+0x428>)
 8000794:	2100      	movs	r1, #0
 8000796:	2000      	movs	r0, #0
 8000798:	f000 fb8c 	bl	8000eb4 <ST7735_DrawString>
HAL_Delay(500);
 800079c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007a0:	f001 fa7c 	bl	8001c9c <HAL_Delay>

ST7735_FillScreen(ST7735_YELLOW);
 80007a4:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80007a8:	f000 fc74 	bl	8001094 <ST7735_FillScreen>
ST7735_DrawString(0, 0, "YELLOW", Font_11x18, ST7735_BLACK, ST7735_YELLOW);
 80007ac:	4b4a      	ldr	r3, [pc, #296]	; (80008d8 <demoTFT+0x404>)
 80007ae:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80007b2:	9202      	str	r2, [sp, #8]
 80007b4:	2200      	movs	r2, #0
 80007b6:	9201      	str	r2, [sp, #4]
 80007b8:	685a      	ldr	r2, [r3, #4]
 80007ba:	9200      	str	r2, [sp, #0]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a50      	ldr	r2, [pc, #320]	; (8000900 <demoTFT+0x42c>)
 80007c0:	2100      	movs	r1, #0
 80007c2:	2000      	movs	r0, #0
 80007c4:	f000 fb76 	bl	8000eb4 <ST7735_DrawString>
HAL_Delay(500);
 80007c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007cc:	f001 fa66 	bl	8001c9c <HAL_Delay>

ST7735_FillScreen(ST7735_WHITE);
 80007d0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80007d4:	f000 fc5e 	bl	8001094 <ST7735_FillScreen>
ST7735_DrawString(0, 0, "WHITE", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 80007d8:	4b3f      	ldr	r3, [pc, #252]	; (80008d8 <demoTFT+0x404>)
 80007da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007de:	9202      	str	r2, [sp, #8]
 80007e0:	2200      	movs	r2, #0
 80007e2:	9201      	str	r2, [sp, #4]
 80007e4:	685a      	ldr	r2, [r3, #4]
 80007e6:	9200      	str	r2, [sp, #0]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a46      	ldr	r2, [pc, #280]	; (8000904 <demoTFT+0x430>)
 80007ec:	2100      	movs	r1, #0
 80007ee:	2000      	movs	r0, #0
 80007f0:	f000 fb60 	bl	8000eb4 <ST7735_DrawString>
HAL_Delay(500);
 80007f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007f8:	f001 fa50 	bl	8001c9c <HAL_Delay>

// Draw circles
ST7735_FillScreen(ST7735_BLACK);
 80007fc:	2000      	movs	r0, #0
 80007fe:	f000 fc49 	bl	8001094 <ST7735_FillScreen>
for (int i = 0; i < ST7735_GetHeight() / 2; i += 2)
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	e017      	b.n	8000838 <demoTFT+0x364>
{
ST7735_DrawCircle(ST7735_GetWidth()/2,ST7735_GetHeight()/2,i,ST7735_YELLOW);
 8000808:	f001 f8f4 	bl	80019f4 <ST7735_GetWidth>
 800080c:	4603      	mov	r3, r0
 800080e:	0fda      	lsrs	r2, r3, #31
 8000810:	4413      	add	r3, r2
 8000812:	105b      	asrs	r3, r3, #1
 8000814:	b21c      	sxth	r4, r3
 8000816:	f001 f8e1 	bl	80019dc <ST7735_GetHeight>
 800081a:	4603      	mov	r3, r0
 800081c:	0fda      	lsrs	r2, r3, #31
 800081e:	4413      	add	r3, r2
 8000820:	105b      	asrs	r3, r3, #1
 8000822:	b219      	sxth	r1, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	b21a      	sxth	r2, r3
 8000828:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800082c:	4620      	mov	r0, r4
 800082e:	f000 fcbf 	bl	80011b0 <ST7735_DrawCircle>
for (int i = 0; i < ST7735_GetHeight() / 2; i += 2)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	3302      	adds	r3, #2
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	f001 f8d0 	bl	80019dc <ST7735_GetHeight>
 800083c:	4603      	mov	r3, r0
 800083e:	0fda      	lsrs	r2, r3, #31
 8000840:	4413      	add	r3, r2
 8000842:	105b      	asrs	r3, r3, #1
 8000844:	b21b      	sxth	r3, r3
 8000846:	461a      	mov	r2, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4293      	cmp	r3, r2
 800084c:	dbdc      	blt.n	8000808 <demoTFT+0x334>
}
HAL_Delay(1000);
 800084e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000852:	f001 fa23 	bl	8001c9c <HAL_Delay>

ST7735_FillScreen(ST7735_BLACK);
 8000856:	2000      	movs	r0, #0
 8000858:	f000 fc1c 	bl	8001094 <ST7735_FillScreen>
ST7735_FillTriangle(0, 0, ST7735_GetWidth() / 2, ST7735_GetHeight(),
 800085c:	f001 f8ca 	bl	80019f4 <ST7735_GetWidth>
 8000860:	4603      	mov	r3, r0
 8000862:	0fda      	lsrs	r2, r3, #31
 8000864:	4413      	add	r3, r2
 8000866:	105b      	asrs	r3, r3, #1
 8000868:	b21c      	sxth	r4, r3
 800086a:	f001 f8b7 	bl	80019dc <ST7735_GetHeight>
 800086e:	4603      	mov	r3, r0
 8000870:	461d      	mov	r5, r3
 8000872:	f001 f8bf 	bl	80019f4 <ST7735_GetWidth>
 8000876:	4603      	mov	r3, r0
 8000878:	461a      	mov	r2, r3
 800087a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800087e:	9302      	str	r3, [sp, #8]
 8000880:	2300      	movs	r3, #0
 8000882:	9301      	str	r3, [sp, #4]
 8000884:	9200      	str	r2, [sp, #0]
 8000886:	462b      	mov	r3, r5
 8000888:	4622      	mov	r2, r4
 800088a:	2100      	movs	r1, #0
 800088c:	2000      	movs	r0, #0
 800088e:	f000 fd61 	bl	8001354 <ST7735_FillTriangle>
ST7735_GetWidth(), 0, ST7735_RED);
HAL_Delay(1000);
 8000892:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000896:	f001 fa01 	bl	8001c9c <HAL_Delay>

ST7735_DrawImage(0,0, 128, 90, (uint16_t*) test_img_128x128);
 800089a:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <demoTFT+0x434>)
 800089c:	9300      	str	r3, [sp, #0]
 800089e:	235a      	movs	r3, #90	; 0x5a
 80008a0:	2280      	movs	r2, #128	; 0x80
 80008a2:	2100      	movs	r1, #0
 80008a4:	2000      	movs	r0, #0
 80008a6:	f000 fc11 	bl	80010cc <ST7735_DrawImage>
HAL_Delay(3000);
 80008aa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80008ae:	f001 f9f5 	bl	8001c9c <HAL_Delay>
ST7735_FillScreen(ST7735_WHITE);
 80008b2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80008b6:	f000 fbed 	bl	8001094 <ST7735_FillScreen>
r++;
 80008ba:	4b14      	ldr	r3, [pc, #80]	; (800090c <demoTFT+0x438>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	3301      	adds	r3, #1
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	4b12      	ldr	r3, [pc, #72]	; (800090c <demoTFT+0x438>)
 80008c4:	701a      	strb	r2, [r3, #0]
}
 80008c6:	bf00      	nop
 80008c8:	3718      	adds	r7, #24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bdb0      	pop	{r4, r5, r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000000 	.word	0x20000000
 80008d4:	08002ff4 	.word	0x08002ff4
 80008d8:	20000008 	.word	0x20000008
 80008dc:	08003014 	.word	0x08003014
 80008e0:	20000010 	.word	0x20000010
 80008e4:	0800302c 	.word	0x0800302c
 80008e8:	0800303c 	.word	0x0800303c
 80008ec:	08003044 	.word	0x08003044
 80008f0:	0800304c 	.word	0x0800304c
 80008f4:	08003050 	.word	0x08003050
 80008f8:	08003058 	.word	0x08003058
 80008fc:	08003060 	.word	0x08003060
 8000900:	08003068 	.word	0x08003068
 8000904:	08003070 	.word	0x08003070
 8000908:	0800588c 	.word	0x0800588c
 800090c:	200000a4 	.word	0x200000a4

08000910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000914:	f001 f950 	bl	8001bb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000918:	f000 f80c 	bl	8000934 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800091c:	f000 f8a8 	bl	8000a70 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000920:	f000 f870 	bl	8000a04 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init();
 8000924:	f000 fa58 	bl	8000dd8 <ST7735_Init>
  ST7735_Backlight_On();
 8000928:	f000 fc36 	bl	8001198 <ST7735_Backlight_On>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  demoTFT();
 800092c:	f7ff fdd2 	bl	80004d4 <demoTFT>
 8000930:	e7fc      	b.n	800092c <main+0x1c>
	...

08000934 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b094      	sub	sp, #80	; 0x50
 8000938:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093a:	f107 0320 	add.w	r3, r7, #32
 800093e:	2230      	movs	r2, #48	; 0x30
 8000940:	2100      	movs	r1, #0
 8000942:	4618      	mov	r0, r3
 8000944:	f002 fb1e 	bl	8002f84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000958:	2300      	movs	r3, #0
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	4b27      	ldr	r3, [pc, #156]	; (80009fc <SystemClock_Config+0xc8>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000960:	4a26      	ldr	r2, [pc, #152]	; (80009fc <SystemClock_Config+0xc8>)
 8000962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000966:	6413      	str	r3, [r2, #64]	; 0x40
 8000968:	4b24      	ldr	r3, [pc, #144]	; (80009fc <SystemClock_Config+0xc8>)
 800096a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000974:	2300      	movs	r3, #0
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	4b21      	ldr	r3, [pc, #132]	; (8000a00 <SystemClock_Config+0xcc>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a20      	ldr	r2, [pc, #128]	; (8000a00 <SystemClock_Config+0xcc>)
 800097e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000982:	6013      	str	r3, [r2, #0]
 8000984:	4b1e      	ldr	r3, [pc, #120]	; (8000a00 <SystemClock_Config+0xcc>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000990:	2301      	movs	r3, #1
 8000992:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000994:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099a:	2302      	movs	r3, #2
 800099c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800099e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80009a4:	230c      	movs	r3, #12
 80009a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80009a8:	2360      	movs	r3, #96	; 0x60
 80009aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009ac:	2302      	movs	r3, #2
 80009ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009b0:	2304      	movs	r3, #4
 80009b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b4:	f107 0320 	add.w	r3, r7, #32
 80009b8:	4618      	mov	r0, r3
 80009ba:	f001 fc17 	bl	80021ec <HAL_RCC_OscConfig>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009c4:	f000 f8a6 	bl	8000b14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c8:	230f      	movs	r3, #15
 80009ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009cc:	2302      	movs	r3, #2
 80009ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009de:	f107 030c 	add.w	r3, r7, #12
 80009e2:	2103      	movs	r1, #3
 80009e4:	4618      	mov	r0, r3
 80009e6:	f001 fe79 	bl	80026dc <HAL_RCC_ClockConfig>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009f0:	f000 f890 	bl	8000b14 <Error_Handler>
  }
}
 80009f4:	bf00      	nop
 80009f6:	3750      	adds	r7, #80	; 0x50
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40007000 	.word	0x40007000

08000a04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a08:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <MX_SPI1_Init+0x64>)
 8000a0a:	4a18      	ldr	r2, [pc, #96]	; (8000a6c <MX_SPI1_Init+0x68>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a0e:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <MX_SPI1_Init+0x64>)
 8000a10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a16:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <MX_SPI1_Init+0x64>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <MX_SPI1_Init+0x64>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_SPI1_Init+0x64>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <MX_SPI1_Init+0x64>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <MX_SPI1_Init+0x64>)
 8000a30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a34:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <MX_SPI1_Init+0x64>)
 8000a38:	2220      	movs	r2, #32
 8000a3a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a3c:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <MX_SPI1_Init+0x64>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <MX_SPI1_Init+0x64>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a48:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <MX_SPI1_Init+0x64>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <MX_SPI1_Init+0x64>)
 8000a50:	220a      	movs	r2, #10
 8000a52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a54:	4804      	ldr	r0, [pc, #16]	; (8000a68 <MX_SPI1_Init+0x64>)
 8000a56:	f001 ffed 	bl	8002a34 <HAL_SPI_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a60:	f000 f858 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	2000004c 	.word	0x2000004c
 8000a6c:	40013000 	.word	0x40013000

08000a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a76:	f107 030c 	add.w	r3, r7, #12
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
 8000a84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	4b20      	ldr	r3, [pc, #128]	; (8000b0c <MX_GPIO_Init+0x9c>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a1f      	ldr	r2, [pc, #124]	; (8000b0c <MX_GPIO_Init+0x9c>)
 8000a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b1d      	ldr	r3, [pc, #116]	; (8000b0c <MX_GPIO_Init+0x9c>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <MX_GPIO_Init+0x9c>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a18      	ldr	r2, [pc, #96]	; (8000b0c <MX_GPIO_Init+0x9c>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b16      	ldr	r3, [pc, #88]	; (8000b0c <MX_GPIO_Init+0x9c>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	603b      	str	r3, [r7, #0]
 8000ac2:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <MX_GPIO_Init+0x9c>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a11      	ldr	r2, [pc, #68]	; (8000b0c <MX_GPIO_Init+0x9c>)
 8000ac8:	f043 0302 	orr.w	r3, r3, #2
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <MX_GPIO_Init+0x9c>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0302 	and.w	r3, r3, #2
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7735_RES_Pin|ST7735_DC_Pin|ST7735_CS_Pin|ST7735_BL_Pin, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000ae0:	480b      	ldr	r0, [pc, #44]	; (8000b10 <MX_GPIO_Init+0xa0>)
 8000ae2:	f001 fb69 	bl	80021b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST7735_RES_Pin ST7735_DC_Pin ST7735_CS_Pin ST7735_BL_Pin */
  GPIO_InitStruct.Pin = ST7735_RES_Pin|ST7735_DC_Pin|ST7735_CS_Pin|ST7735_BL_Pin;
 8000ae6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000aea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aec:	2301      	movs	r3, #1
 8000aee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af8:	f107 030c 	add.w	r3, r7, #12
 8000afc:	4619      	mov	r1, r3
 8000afe:	4804      	ldr	r0, [pc, #16]	; (8000b10 <MX_GPIO_Init+0xa0>)
 8000b00:	f001 f9d6 	bl	8001eb0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b04:	bf00      	nop
 8000b06:	3720      	adds	r7, #32
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40020400 	.word	0x40020400

08000b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b18:	b672      	cpsid	i
}
 8000b1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <Error_Handler+0x8>

08000b1e <ST7735_GPIO_Init>:
static void ST7735_ExecuteCommandList(const uint8_t *addr);
static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1);
static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor);

static void ST7735_GPIO_Init(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0
//  GPIO_InitStruct.Pin = ST7735_RES_Pin|ST7735_DC_Pin|ST7735_CS_Pin|ST7735_BL_Pin;
//  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//  GPIO_InitStruct.Pull = GPIO_NOPULL;
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <ST7735_Reset>:

static void ST7735_Reset()
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  TFT_RES_L();
 8000b30:	2200      	movs	r2, #0
 8000b32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b36:	4807      	ldr	r0, [pc, #28]	; (8000b54 <ST7735_Reset+0x28>)
 8000b38:	f001 fb3e 	bl	80021b8 <HAL_GPIO_WritePin>
  HAL_Delay(20);
 8000b3c:	2014      	movs	r0, #20
 8000b3e:	f001 f8ad 	bl	8001c9c <HAL_Delay>
  TFT_RES_H();
 8000b42:	2201      	movs	r2, #1
 8000b44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b48:	4802      	ldr	r0, [pc, #8]	; (8000b54 <ST7735_Reset+0x28>)
 8000b4a:	f001 fb35 	bl	80021b8 <HAL_GPIO_WritePin>
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40020400 	.word	0x40020400

08000b58 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	71fb      	strb	r3, [r7, #7]
  TFT_DC_C();
 8000b62:	2200      	movs	r2, #0
 8000b64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b68:	4806      	ldr	r0, [pc, #24]	; (8000b84 <ST7735_WriteCommand+0x2c>)
 8000b6a:	f001 fb25 	bl	80021b8 <HAL_GPIO_WritePin>
#ifdef USE_SPI_DMA
  HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, &cmd, sizeof(cmd));
  //while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
#else
  HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000b6e:	1df9      	adds	r1, r7, #7
 8000b70:	f04f 33ff 	mov.w	r3, #4294967295
 8000b74:	2201      	movs	r2, #1
 8000b76:	4804      	ldr	r0, [pc, #16]	; (8000b88 <ST7735_WriteCommand+0x30>)
 8000b78:	f001 ffe5 	bl	8002b46 <HAL_SPI_Transmit>
#endif
}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40020400 	.word	0x40020400
 8000b88:	2000004c 	.word	0x2000004c

08000b8c <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
  TFT_DC_D();
 8000b96:	2201      	movs	r2, #1
 8000b98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b9c:	4807      	ldr	r0, [pc, #28]	; (8000bbc <ST7735_WriteData+0x30>)
 8000b9e:	f001 fb0b 	bl	80021b8 <HAL_GPIO_WritePin>
#ifdef USE_SPI_DMA
  HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, buff, buff_size);
  while(hspi1.State == HAL_SPI_STATE_BUSY_TX);

#else
  HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8000baa:	6879      	ldr	r1, [r7, #4]
 8000bac:	4804      	ldr	r0, [pc, #16]	; (8000bc0 <ST7735_WriteData+0x34>)
 8000bae:	f001 ffca 	bl	8002b46 <HAL_SPI_Transmit>
#endif
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40020400 	.word	0x40020400
 8000bc0:	2000004c 	.word	0x2000004c

08000bc4 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	1c5a      	adds	r2, r3, #1
 8000bd0:	607a      	str	r2, [r7, #4]
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	73fb      	strb	r3, [r7, #15]
    while(numCommands--)
 8000bd6:	e034      	b.n	8000c42 <ST7735_ExecuteCommandList+0x7e>
    {
      uint8_t cmd = *addr++;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	1c5a      	adds	r2, r3, #1
 8000bdc:	607a      	str	r2, [r7, #4]
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000be2:	7afb      	ldrb	r3, [r7, #11]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff ffb7 	bl	8000b58 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	1c5a      	adds	r2, r3, #1
 8000bee:	607a      	str	r2, [r7, #4]
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000bf4:	7abb      	ldrb	r3, [r7, #10]
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bfc:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000bfe:	7abb      	ldrb	r3, [r7, #10]
 8000c00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c04:	72bb      	strb	r3, [r7, #10]
        if(numArgs)
 8000c06:	7abb      	ldrb	r3, [r7, #10]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d008      	beq.n	8000c1e <ST7735_ExecuteCommandList+0x5a>
        {
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000c0c:	7abb      	ldrb	r3, [r7, #10]
 8000c0e:	4619      	mov	r1, r3
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f7ff ffbb 	bl	8000b8c <ST7735_WriteData>
            addr += numArgs;
 8000c16:	7abb      	ldrb	r3, [r7, #10]
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	607b      	str	r3, [r7, #4]
        }

        if(ms)
 8000c1e:	89bb      	ldrh	r3, [r7, #12]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d00e      	beq.n	8000c42 <ST7735_ExecuteCommandList+0x7e>
        {
            ms = *addr++;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	1c5a      	adds	r2, r3, #1
 8000c28:	607a      	str	r2, [r7, #4]
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000c2e:	89bb      	ldrh	r3, [r7, #12]
 8000c30:	2bff      	cmp	r3, #255	; 0xff
 8000c32:	d102      	bne.n	8000c3a <ST7735_ExecuteCommandList+0x76>
 8000c34:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c38:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000c3a:	89bb      	ldrh	r3, [r7, #12]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f001 f82d 	bl	8001c9c <HAL_Delay>
    while(numCommands--)
 8000c42:	7bfb      	ldrb	r3, [r7, #15]
 8000c44:	1e5a      	subs	r2, r3, #1
 8000c46:	73fa      	strb	r2, [r7, #15]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d1c5      	bne.n	8000bd8 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8000c4c:	bf00      	nop
 8000c4e:	bf00      	nop
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8000c58:	b590      	push	{r4, r7, lr}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4604      	mov	r4, r0
 8000c60:	4608      	mov	r0, r1
 8000c62:	4611      	mov	r1, r2
 8000c64:	461a      	mov	r2, r3
 8000c66:	4623      	mov	r3, r4
 8000c68:	71fb      	strb	r3, [r7, #7]
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71bb      	strb	r3, [r7, #6]
 8000c6e:	460b      	mov	r3, r1
 8000c70:	717b      	strb	r3, [r7, #5]
 8000c72:	4613      	mov	r3, r2
 8000c74:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000c76:	202a      	movs	r0, #42	; 0x2a
 8000c78:	f7ff ff6e 	bl	8000b58 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	733b      	strb	r3, [r7, #12]
 8000c80:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <ST7735_SetAddressWindow+0x88>)
 8000c82:	781a      	ldrb	r2, [r3, #0]
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	4413      	add	r3, r2
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	737b      	strb	r3, [r7, #13]
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	73bb      	strb	r3, [r7, #14]
 8000c90:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <ST7735_SetAddressWindow+0x88>)
 8000c92:	781a      	ldrb	r2, [r3, #0]
 8000c94:	797b      	ldrb	r3, [r7, #5]
 8000c96:	4413      	add	r3, r2
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000c9c:	f107 030c 	add.w	r3, r7, #12
 8000ca0:	2104      	movs	r1, #4
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff ff72 	bl	8000b8c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000ca8:	202b      	movs	r0, #43	; 0x2b
 8000caa:	f7ff ff55 	bl	8000b58 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8000cae:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <ST7735_SetAddressWindow+0x8c>)
 8000cb0:	781a      	ldrb	r2, [r3, #0]
 8000cb2:	79bb      	ldrb	r3, [r7, #6]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8000cba:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <ST7735_SetAddressWindow+0x8c>)
 8000cbc:	781a      	ldrb	r2, [r3, #0]
 8000cbe:	793b      	ldrb	r3, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000cc6:	f107 030c 	add.w	r3, r7, #12
 8000cca:	2104      	movs	r1, #4
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff ff5d 	bl	8000b8c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000cd2:	202c      	movs	r0, #44	; 0x2c
 8000cd4:	f7ff ff40 	bl	8000b58 <ST7735_WriteCommand>
}
 8000cd8:	bf00      	nop
 8000cda:	3714      	adds	r7, #20
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd90      	pop	{r4, r7, pc}
 8000ce0:	20000020 	.word	0x20000020
 8000ce4:	20000021 	.word	0x20000021

08000ce8 <ST7735_WriteChar>:

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000ce8:	b082      	sub	sp, #8
 8000cea:	b590      	push	{r4, r7, lr}
 8000cec:	b089      	sub	sp, #36	; 0x24
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	637b      	str	r3, [r7, #52]	; 0x34
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	80fb      	strh	r3, [r7, #6]
 8000cf6:	460b      	mov	r3, r1
 8000cf8:	80bb      	strh	r3, [r7, #4]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000cfe:	88fb      	ldrh	r3, [r7, #6]
 8000d00:	b2d8      	uxtb	r0, r3
 8000d02:	88bb      	ldrh	r3, [r7, #4]
 8000d04:	b2d9      	uxtb	r1, r3
 8000d06:	88fb      	ldrh	r3, [r7, #6]
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000d0e:	4413      	add	r3, r2
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	3b01      	subs	r3, #1
 8000d14:	b2dc      	uxtb	r4, r3
 8000d16:	88bb      	ldrh	r3, [r7, #4]
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000d1e:	4413      	add	r3, r2
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	3b01      	subs	r3, #1
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	4622      	mov	r2, r4
 8000d28:	f7ff ff96 	bl	8000c58 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++)
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61fb      	str	r3, [r7, #28]
 8000d30:	e043      	b.n	8000dba <ST7735_WriteChar+0xd2>
    {
        b = font.data[(ch - 32) * font.height + i];
 8000d32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000d34:	78fb      	ldrb	r3, [r7, #3]
 8000d36:	3b20      	subs	r3, #32
 8000d38:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000d3c:	fb01 f303 	mul.w	r3, r1, r3
 8000d40:	4619      	mov	r1, r3
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	440b      	add	r3, r1
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	4413      	add	r3, r2
 8000d4a:	881b      	ldrh	r3, [r3, #0]
 8000d4c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++)
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61bb      	str	r3, [r7, #24]
 8000d52:	e029      	b.n	8000da8 <ST7735_WriteChar+0xc0>
        {
            if((b << j) & 0x8000)
 8000d54:	697a      	ldr	r2, [r7, #20]
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d00e      	beq.n	8000d82 <ST7735_WriteChar+0x9a>
            {
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000d64:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000d66:	0a1b      	lsrs	r3, r3, #8
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	743b      	strb	r3, [r7, #16]
 8000d6e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	2102      	movs	r1, #2
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff ff06 	bl	8000b8c <ST7735_WriteData>
 8000d80:	e00f      	b.n	8000da2 <ST7735_WriteChar+0xba>
            }
            else
            {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000d82:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000d86:	0a1b      	lsrs	r3, r3, #8
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	733b      	strb	r3, [r7, #12]
 8000d8e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000d96:	f107 030c 	add.w	r3, r7, #12
 8000d9a:	2102      	movs	r1, #2
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff fef5 	bl	8000b8c <ST7735_WriteData>
        for(j = 0; j < font.width; j++)
 8000da2:	69bb      	ldr	r3, [r7, #24]
 8000da4:	3301      	adds	r3, #1
 8000da6:	61bb      	str	r3, [r7, #24]
 8000da8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000dac:	461a      	mov	r2, r3
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d3cf      	bcc.n	8000d54 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++)
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	3301      	adds	r3, #1
 8000db8:	61fb      	str	r3, [r7, #28]
 8000dba:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d3b5      	bcc.n	8000d32 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000dc6:	bf00      	nop
 8000dc8:	bf00      	nop
 8000dca:	3724      	adds	r7, #36	; 0x24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000dd2:	b002      	add	sp, #8
 8000dd4:	4770      	bx	lr
	...

08000dd8 <ST7735_Init>:

void ST7735_Init()
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  ST7735_GPIO_Init();
 8000ddc:	f7ff fe9f 	bl	8000b1e <ST7735_GPIO_Init>
  TFT_CS_L();
 8000de0:	2200      	movs	r2, #0
 8000de2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000de6:	480b      	ldr	r0, [pc, #44]	; (8000e14 <ST7735_Init+0x3c>)
 8000de8:	f001 f9e6 	bl	80021b8 <HAL_GPIO_WritePin>
    ST7735_Reset();
 8000dec:	f7ff fe9e 	bl	8000b2c <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8000df0:	4809      	ldr	r0, [pc, #36]	; (8000e18 <ST7735_Init+0x40>)
 8000df2:	f7ff fee7 	bl	8000bc4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8000df6:	4809      	ldr	r0, [pc, #36]	; (8000e1c <ST7735_Init+0x44>)
 8000df8:	f7ff fee4 	bl	8000bc4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8000dfc:	4808      	ldr	r0, [pc, #32]	; (8000e20 <ST7735_Init+0x48>)
 8000dfe:	f7ff fee1 	bl	8000bc4 <ST7735_ExecuteCommandList>
    TFT_CS_H();
 8000e02:	2201      	movs	r2, #1
 8000e04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e08:	4802      	ldr	r0, [pc, #8]	; (8000e14 <ST7735_Init+0x3c>)
 8000e0a:	f001 f9d5 	bl	80021b8 <HAL_GPIO_WritePin>
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40020400 	.word	0x40020400
 8000e18:	0800b58c 	.word	0x0800b58c
 8000e1c:	0800b5c8 	.word	0x0800b5c8
 8000e20:	0800b5d8 	.word	0x0800b5d8

08000e24 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	80fb      	strh	r3, [r7, #6]
 8000e2e:	460b      	mov	r3, r1
 8000e30:	80bb      	strh	r3, [r7, #4]
 8000e32:	4613      	mov	r3, r2
 8000e34:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 8000e36:	88fb      	ldrh	r3, [r7, #6]
 8000e38:	4a1b      	ldr	r2, [pc, #108]	; (8000ea8 <ST7735_DrawPixel+0x84>)
 8000e3a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	da2e      	bge.n	8000ea0 <ST7735_DrawPixel+0x7c>
 8000e42:	88bb      	ldrh	r3, [r7, #4]
 8000e44:	4a19      	ldr	r2, [pc, #100]	; (8000eac <ST7735_DrawPixel+0x88>)
 8000e46:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	da28      	bge.n	8000ea0 <ST7735_DrawPixel+0x7c>
        return;

    TFT_CS_L();
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e54:	4816      	ldr	r0, [pc, #88]	; (8000eb0 <ST7735_DrawPixel+0x8c>)
 8000e56:	f001 f9af 	bl	80021b8 <HAL_GPIO_WritePin>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8000e5a:	88fb      	ldrh	r3, [r7, #6]
 8000e5c:	b2d8      	uxtb	r0, r3
 8000e5e:	88bb      	ldrh	r3, [r7, #4]
 8000e60:	b2d9      	uxtb	r1, r3
 8000e62:	88fb      	ldrh	r3, [r7, #6]
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	3301      	adds	r3, #1
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	88bb      	ldrh	r3, [r7, #4]
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	3301      	adds	r3, #1
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	f7ff fef1 	bl	8000c58 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8000e76:	887b      	ldrh	r3, [r7, #2]
 8000e78:	0a1b      	lsrs	r3, r3, #8
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	733b      	strb	r3, [r7, #12]
 8000e80:	887b      	ldrh	r3, [r7, #2]
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 8000e86:	f107 030c 	add.w	r3, r7, #12
 8000e8a:	2102      	movs	r1, #2
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fe7d 	bl	8000b8c <ST7735_WriteData>

    TFT_CS_H();
 8000e92:	2201      	movs	r2, #1
 8000e94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e98:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <ST7735_DrawPixel+0x8c>)
 8000e9a:	f001 f98d 	bl	80021b8 <HAL_GPIO_WritePin>
 8000e9e:	e000      	b.n	8000ea2 <ST7735_DrawPixel+0x7e>
        return;
 8000ea0:	bf00      	nop
}
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	2000001e 	.word	0x2000001e
 8000eac:	2000001c 	.word	0x2000001c
 8000eb0:	40020400 	.word	0x40020400

08000eb4 <ST7735_DrawString>:

void ST7735_DrawString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b086      	sub	sp, #24
 8000eba:	af04      	add	r7, sp, #16
 8000ebc:	603a      	str	r2, [r7, #0]
 8000ebe:	617b      	str	r3, [r7, #20]
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	80fb      	strh	r3, [r7, #6]
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	80bb      	strh	r3, [r7, #4]
  TFT_CS_L();
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ece:	4825      	ldr	r0, [pc, #148]	; (8000f64 <ST7735_DrawString+0xb0>)
 8000ed0:	f001 f972 	bl	80021b8 <HAL_GPIO_WritePin>

    while(*str)
 8000ed4:	e033      	b.n	8000f3e <ST7735_DrawString+0x8a>
    {
        if(x + font.width >= _width)
 8000ed6:	88fb      	ldrh	r3, [r7, #6]
 8000ed8:	7d3a      	ldrb	r2, [r7, #20]
 8000eda:	4413      	add	r3, r2
 8000edc:	4a22      	ldr	r2, [pc, #136]	; (8000f68 <ST7735_DrawString+0xb4>)
 8000ede:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	db16      	blt.n	8000f14 <ST7735_DrawString+0x60>
        {
            x = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000eea:	7d7b      	ldrb	r3, [r7, #21]
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	88bb      	ldrh	r3, [r7, #4]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height)
 8000ef4:	88bb      	ldrh	r3, [r7, #4]
 8000ef6:	7d7a      	ldrb	r2, [r7, #21]
 8000ef8:	4413      	add	r3, r2
 8000efa:	4a1c      	ldr	r2, [pc, #112]	; (8000f6c <ST7735_DrawString+0xb8>)
 8000efc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000f00:	4293      	cmp	r3, r2
 8000f02:	da21      	bge.n	8000f48 <ST7735_DrawString+0x94>
            {
                break;
            }

            if(*str == ' ')
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b20      	cmp	r3, #32
 8000f0a:	d103      	bne.n	8000f14 <ST7735_DrawString+0x60>
            {
                // skip spaces in the beginning of the new line
                str++;
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	603b      	str	r3, [r7, #0]
                continue;
 8000f12:	e014      	b.n	8000f3e <ST7735_DrawString+0x8a>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	781a      	ldrb	r2, [r3, #0]
 8000f18:	88b9      	ldrh	r1, [r7, #4]
 8000f1a:	88f8      	ldrh	r0, [r7, #6]
 8000f1c:	8c3b      	ldrh	r3, [r7, #32]
 8000f1e:	9302      	str	r3, [sp, #8]
 8000f20:	8bbb      	ldrh	r3, [r7, #28]
 8000f22:	9301      	str	r3, [sp, #4]
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	f7ff fedd 	bl	8000ce8 <ST7735_WriteChar>
        x += font.width;
 8000f2e:	7d3b      	ldrb	r3, [r7, #20]
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	88fb      	ldrh	r3, [r7, #6]
 8000f34:	4413      	add	r3, r2
 8000f36:	80fb      	strh	r3, [r7, #6]
        str++;
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	603b      	str	r3, [r7, #0]
    while(*str)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d1c7      	bne.n	8000ed6 <ST7735_DrawString+0x22>
 8000f46:	e000      	b.n	8000f4a <ST7735_DrawString+0x96>
                break;
 8000f48:	bf00      	nop
    }
    TFT_CS_H();
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f50:	4804      	ldr	r0, [pc, #16]	; (8000f64 <ST7735_DrawString+0xb0>)
 8000f52:	f001 f931 	bl	80021b8 <HAL_GPIO_WritePin>
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f60:	b002      	add	sp, #8
 8000f62:	4770      	bx	lr
 8000f64:	40020400 	.word	0x40020400
 8000f68:	2000001e 	.word	0x2000001e
 8000f6c:	2000001c 	.word	0x2000001c

08000f70 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000f70:	b590      	push	{r4, r7, lr}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4604      	mov	r4, r0
 8000f78:	4608      	mov	r0, r1
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4623      	mov	r3, r4
 8000f80:	80fb      	strh	r3, [r7, #6]
 8000f82:	4603      	mov	r3, r0
 8000f84:	80bb      	strh	r3, [r7, #4]
 8000f86:	460b      	mov	r3, r1
 8000f88:	807b      	strh	r3, [r7, #2]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= _width) || (y >= _height)) return;
 8000f8e:	88fb      	ldrh	r3, [r7, #6]
 8000f90:	4a3c      	ldr	r2, [pc, #240]	; (8001084 <ST7735_FillRectangle+0x114>)
 8000f92:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000f96:	4293      	cmp	r3, r2
 8000f98:	da6f      	bge.n	800107a <ST7735_FillRectangle+0x10a>
 8000f9a:	88bb      	ldrh	r3, [r7, #4]
 8000f9c:	4a3a      	ldr	r2, [pc, #232]	; (8001088 <ST7735_FillRectangle+0x118>)
 8000f9e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	da69      	bge.n	800107a <ST7735_FillRectangle+0x10a>
    if((x + w - 1) >= _width) w = _width - x;
 8000fa6:	88fa      	ldrh	r2, [r7, #6]
 8000fa8:	887b      	ldrh	r3, [r7, #2]
 8000faa:	4413      	add	r3, r2
 8000fac:	4a35      	ldr	r2, [pc, #212]	; (8001084 <ST7735_FillRectangle+0x114>)
 8000fae:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	dd06      	ble.n	8000fc4 <ST7735_FillRectangle+0x54>
 8000fb6:	4b33      	ldr	r3, [pc, #204]	; (8001084 <ST7735_FillRectangle+0x114>)
 8000fb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	88fb      	ldrh	r3, [r7, #6]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8000fc4:	88ba      	ldrh	r2, [r7, #4]
 8000fc6:	883b      	ldrh	r3, [r7, #0]
 8000fc8:	4413      	add	r3, r2
 8000fca:	4a2f      	ldr	r2, [pc, #188]	; (8001088 <ST7735_FillRectangle+0x118>)
 8000fcc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	dd06      	ble.n	8000fe2 <ST7735_FillRectangle+0x72>
 8000fd4:	4b2c      	ldr	r3, [pc, #176]	; (8001088 <ST7735_FillRectangle+0x118>)
 8000fd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fda:	b29a      	uxth	r2, r3
 8000fdc:	88bb      	ldrh	r3, [r7, #4]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	803b      	strh	r3, [r7, #0]

    TFT_CS_L();
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fe8:	4828      	ldr	r0, [pc, #160]	; (800108c <ST7735_FillRectangle+0x11c>)
 8000fea:	f001 f8e5 	bl	80021b8 <HAL_GPIO_WritePin>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	b2d8      	uxtb	r0, r3
 8000ff2:	88bb      	ldrh	r3, [r7, #4]
 8000ff4:	b2d9      	uxtb	r1, r3
 8000ff6:	88fb      	ldrh	r3, [r7, #6]
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	887b      	ldrh	r3, [r7, #2]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	4413      	add	r3, r2
 8001000:	b2db      	uxtb	r3, r3
 8001002:	3b01      	subs	r3, #1
 8001004:	b2dc      	uxtb	r4, r3
 8001006:	88bb      	ldrh	r3, [r7, #4]
 8001008:	b2da      	uxtb	r2, r3
 800100a:	883b      	ldrh	r3, [r7, #0]
 800100c:	b2db      	uxtb	r3, r3
 800100e:	4413      	add	r3, r2
 8001010:	b2db      	uxtb	r3, r3
 8001012:	3b01      	subs	r3, #1
 8001014:	b2db      	uxtb	r3, r3
 8001016:	4622      	mov	r2, r4
 8001018:	f7ff fe1e 	bl	8000c58 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 800101c:	8c3b      	ldrh	r3, [r7, #32]
 800101e:	0a1b      	lsrs	r3, r3, #8
 8001020:	b29b      	uxth	r3, r3
 8001022:	b2db      	uxtb	r3, r3
 8001024:	733b      	strb	r3, [r7, #12]
 8001026:	8c3b      	ldrh	r3, [r7, #32]
 8001028:	b2db      	uxtb	r3, r3
 800102a:	737b      	strb	r3, [r7, #13]
    TFT_DC_D();
 800102c:	2201      	movs	r2, #1
 800102e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001032:	4816      	ldr	r0, [pc, #88]	; (800108c <ST7735_FillRectangle+0x11c>)
 8001034:	f001 f8c0 	bl	80021b8 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 8001038:	883b      	ldrh	r3, [r7, #0]
 800103a:	80bb      	strh	r3, [r7, #4]
 800103c:	e013      	b.n	8001066 <ST7735_FillRectangle+0xf6>
    {
        for(x = w; x > 0; x--)
 800103e:	887b      	ldrh	r3, [r7, #2]
 8001040:	80fb      	strh	r3, [r7, #6]
 8001042:	e00a      	b.n	800105a <ST7735_FillRectangle+0xea>
        {
#ifdef USE_SPI_DMA
          HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, data, sizeof(data));
          //while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
#else
          HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001044:	f107 010c 	add.w	r1, r7, #12
 8001048:	f04f 33ff 	mov.w	r3, #4294967295
 800104c:	2202      	movs	r2, #2
 800104e:	4810      	ldr	r0, [pc, #64]	; (8001090 <ST7735_FillRectangle+0x120>)
 8001050:	f001 fd79 	bl	8002b46 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--)
 8001054:	88fb      	ldrh	r3, [r7, #6]
 8001056:	3b01      	subs	r3, #1
 8001058:	80fb      	strh	r3, [r7, #6]
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1f1      	bne.n	8001044 <ST7735_FillRectangle+0xd4>
    for(y = h; y > 0; y--)
 8001060:	88bb      	ldrh	r3, [r7, #4]
 8001062:	3b01      	subs	r3, #1
 8001064:	80bb      	strh	r3, [r7, #4]
 8001066:	88bb      	ldrh	r3, [r7, #4]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d1e8      	bne.n	800103e <ST7735_FillRectangle+0xce>
#endif
        }
    }
    TFT_CS_H();
 800106c:	2201      	movs	r2, #1
 800106e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001072:	4806      	ldr	r0, [pc, #24]	; (800108c <ST7735_FillRectangle+0x11c>)
 8001074:	f001 f8a0 	bl	80021b8 <HAL_GPIO_WritePin>
 8001078:	e000      	b.n	800107c <ST7735_FillRectangle+0x10c>
    if((x >= _width) || (y >= _height)) return;
 800107a:	bf00      	nop
}
 800107c:	3714      	adds	r7, #20
 800107e:	46bd      	mov	sp, r7
 8001080:	bd90      	pop	{r4, r7, pc}
 8001082:	bf00      	nop
 8001084:	2000001e 	.word	0x2000001e
 8001088:	2000001c 	.word	0x2000001c
 800108c:	40020400 	.word	0x40020400
 8001090:	2000004c 	.word	0x2000004c

08001094 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af02      	add	r7, sp, #8
 800109a:	4603      	mov	r3, r0
 800109c:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, _width, _height, color);
 800109e:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <ST7735_FillScreen+0x30>)
 80010a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <ST7735_FillScreen+0x34>)
 80010a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ac:	b299      	uxth	r1, r3
 80010ae:	88fb      	ldrh	r3, [r7, #6]
 80010b0:	9300      	str	r3, [sp, #0]
 80010b2:	460b      	mov	r3, r1
 80010b4:	2100      	movs	r1, #0
 80010b6:	2000      	movs	r0, #0
 80010b8:	f7ff ff5a 	bl	8000f70 <ST7735_FillRectangle>
}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	2000001e 	.word	0x2000001e
 80010c8:	2000001c 	.word	0x2000001c

080010cc <ST7735_DrawImage>:

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data)
{
 80010cc:	b590      	push	{r4, r7, lr}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4604      	mov	r4, r0
 80010d4:	4608      	mov	r0, r1
 80010d6:	4611      	mov	r1, r2
 80010d8:	461a      	mov	r2, r3
 80010da:	4623      	mov	r3, r4
 80010dc:	80fb      	strh	r3, [r7, #6]
 80010de:	4603      	mov	r3, r0
 80010e0:	80bb      	strh	r3, [r7, #4]
 80010e2:	460b      	mov	r3, r1
 80010e4:	807b      	strh	r3, [r7, #2]
 80010e6:	4613      	mov	r3, r2
 80010e8:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	4a27      	ldr	r2, [pc, #156]	; (800118c <ST7735_DrawImage+0xc0>)
 80010ee:	f9b2 2000 	ldrsh.w	r2, [r2]
 80010f2:	4293      	cmp	r3, r2
 80010f4:	da42      	bge.n	800117c <ST7735_DrawImage+0xb0>
 80010f6:	88bb      	ldrh	r3, [r7, #4]
 80010f8:	4a25      	ldr	r2, [pc, #148]	; (8001190 <ST7735_DrawImage+0xc4>)
 80010fa:	f9b2 2000 	ldrsh.w	r2, [r2]
 80010fe:	4293      	cmp	r3, r2
 8001100:	da3c      	bge.n	800117c <ST7735_DrawImage+0xb0>
    if((x + w - 1) >= _width) return;
 8001102:	88fa      	ldrh	r2, [r7, #6]
 8001104:	887b      	ldrh	r3, [r7, #2]
 8001106:	4413      	add	r3, r2
 8001108:	4a20      	ldr	r2, [pc, #128]	; (800118c <ST7735_DrawImage+0xc0>)
 800110a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800110e:	4293      	cmp	r3, r2
 8001110:	dc36      	bgt.n	8001180 <ST7735_DrawImage+0xb4>
    if((y + h - 1) >= _height) return;
 8001112:	88ba      	ldrh	r2, [r7, #4]
 8001114:	883b      	ldrh	r3, [r7, #0]
 8001116:	4413      	add	r3, r2
 8001118:	4a1d      	ldr	r2, [pc, #116]	; (8001190 <ST7735_DrawImage+0xc4>)
 800111a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800111e:	4293      	cmp	r3, r2
 8001120:	dc30      	bgt.n	8001184 <ST7735_DrawImage+0xb8>

    TFT_CS_L();
 8001122:	2200      	movs	r2, #0
 8001124:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001128:	481a      	ldr	r0, [pc, #104]	; (8001194 <ST7735_DrawImage+0xc8>)
 800112a:	f001 f845 	bl	80021b8 <HAL_GPIO_WritePin>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800112e:	88fb      	ldrh	r3, [r7, #6]
 8001130:	b2d8      	uxtb	r0, r3
 8001132:	88bb      	ldrh	r3, [r7, #4]
 8001134:	b2d9      	uxtb	r1, r3
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	b2da      	uxtb	r2, r3
 800113a:	887b      	ldrh	r3, [r7, #2]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	4413      	add	r3, r2
 8001140:	b2db      	uxtb	r3, r3
 8001142:	3b01      	subs	r3, #1
 8001144:	b2dc      	uxtb	r4, r3
 8001146:	88bb      	ldrh	r3, [r7, #4]
 8001148:	b2da      	uxtb	r2, r3
 800114a:	883b      	ldrh	r3, [r7, #0]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	4413      	add	r3, r2
 8001150:	b2db      	uxtb	r3, r3
 8001152:	3b01      	subs	r3, #1
 8001154:	b2db      	uxtb	r3, r3
 8001156:	4622      	mov	r2, r4
 8001158:	f7ff fd7e 	bl	8000c58 <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 800115c:	887b      	ldrh	r3, [r7, #2]
 800115e:	883a      	ldrh	r2, [r7, #0]
 8001160:	fb02 f303 	mul.w	r3, r2, r3
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	4619      	mov	r1, r3
 8001168:	69b8      	ldr	r0, [r7, #24]
 800116a:	f7ff fd0f 	bl	8000b8c <ST7735_WriteData>
    TFT_CS_H();
 800116e:	2201      	movs	r2, #1
 8001170:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001174:	4807      	ldr	r0, [pc, #28]	; (8001194 <ST7735_DrawImage+0xc8>)
 8001176:	f001 f81f 	bl	80021b8 <HAL_GPIO_WritePin>
 800117a:	e004      	b.n	8001186 <ST7735_DrawImage+0xba>
    if((x >= _width) || (y >= _height)) return;
 800117c:	bf00      	nop
 800117e:	e002      	b.n	8001186 <ST7735_DrawImage+0xba>
    if((x + w - 1) >= _width) return;
 8001180:	bf00      	nop
 8001182:	e000      	b.n	8001186 <ST7735_DrawImage+0xba>
    if((y + h - 1) >= _height) return;
 8001184:	bf00      	nop
}
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	bd90      	pop	{r4, r7, pc}
 800118c:	2000001e 	.word	0x2000001e
 8001190:	2000001c 	.word	0x2000001c
 8001194:	40020400 	.word	0x40020400

08001198 <ST7735_Backlight_On>:
    ST7735_WriteCommand(invert ? ST7735_INVON : ST7735_INVOFF);
    TFT_CS_H();
}

void ST7735_Backlight_On(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  TFT_BL_H();
 800119c:	2201      	movs	r2, #1
 800119e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011a2:	4802      	ldr	r0, [pc, #8]	; (80011ac <ST7735_Backlight_On+0x14>)
 80011a4:	f001 f808 	bl	80021b8 <HAL_GPIO_WritePin>
}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40020400 	.word	0x40020400

080011b0 <ST7735_DrawCircle>:
/***************************************************************************************
** Function name:           drawCircle
** Description:             Draw a circle outline
***************************************************************************************/
void ST7735_DrawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 80011b0:	b590      	push	{r4, r7, lr}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4604      	mov	r4, r0
 80011b8:	4608      	mov	r0, r1
 80011ba:	4611      	mov	r1, r2
 80011bc:	461a      	mov	r2, r3
 80011be:	4623      	mov	r3, r4
 80011c0:	80fb      	strh	r3, [r7, #6]
 80011c2:	4603      	mov	r3, r0
 80011c4:	80bb      	strh	r3, [r7, #4]
 80011c6:	460b      	mov	r3, r1
 80011c8:	807b      	strh	r3, [r7, #2]
 80011ca:	4613      	mov	r3, r2
 80011cc:	803b      	strh	r3, [r7, #0]
  int16_t f = 1 - r;
 80011ce:	887b      	ldrh	r3, [r7, #2]
 80011d0:	f1c3 0301 	rsb	r3, r3, #1
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	81fb      	strh	r3, [r7, #14]
  int16_t ddF_x = 1;
 80011d8:	2301      	movs	r3, #1
 80011da:	81bb      	strh	r3, [r7, #12]
  int16_t ddF_y = - r - r;
 80011dc:	887b      	ldrh	r3, [r7, #2]
 80011de:	425b      	negs	r3, r3
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	887b      	ldrh	r3, [r7, #2]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	817b      	strh	r3, [r7, #10]
  int16_t x = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	813b      	strh	r3, [r7, #8]

  ST7735_DrawPixel(x0 + r, y0  , color);
 80011ee:	88fa      	ldrh	r2, [r7, #6]
 80011f0:	887b      	ldrh	r3, [r7, #2]
 80011f2:	4413      	add	r3, r2
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	88b9      	ldrh	r1, [r7, #4]
 80011f8:	883a      	ldrh	r2, [r7, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff fe12 	bl	8000e24 <ST7735_DrawPixel>
  ST7735_DrawPixel(x0 - r, y0  , color);
 8001200:	88fa      	ldrh	r2, [r7, #6]
 8001202:	887b      	ldrh	r3, [r7, #2]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	b29b      	uxth	r3, r3
 8001208:	88b9      	ldrh	r1, [r7, #4]
 800120a:	883a      	ldrh	r2, [r7, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff fe09 	bl	8000e24 <ST7735_DrawPixel>
  ST7735_DrawPixel(x0  , y0 - r, color);
 8001212:	88f8      	ldrh	r0, [r7, #6]
 8001214:	88ba      	ldrh	r2, [r7, #4]
 8001216:	887b      	ldrh	r3, [r7, #2]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	b29b      	uxth	r3, r3
 800121c:	883a      	ldrh	r2, [r7, #0]
 800121e:	4619      	mov	r1, r3
 8001220:	f7ff fe00 	bl	8000e24 <ST7735_DrawPixel>
  ST7735_DrawPixel(x0  , y0 + r, color);
 8001224:	88f8      	ldrh	r0, [r7, #6]
 8001226:	88ba      	ldrh	r2, [r7, #4]
 8001228:	887b      	ldrh	r3, [r7, #2]
 800122a:	4413      	add	r3, r2
 800122c:	b29b      	uxth	r3, r3
 800122e:	883a      	ldrh	r2, [r7, #0]
 8001230:	4619      	mov	r1, r3
 8001232:	f7ff fdf7 	bl	8000e24 <ST7735_DrawPixel>

  while (x < r)
 8001236:	e081      	b.n	800133c <ST7735_DrawCircle+0x18c>
  {
    if (f >= 0)
 8001238:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800123c:	2b00      	cmp	r3, #0
 800123e:	db0e      	blt.n	800125e <ST7735_DrawCircle+0xae>
    {
      r--;
 8001240:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001244:	b29b      	uxth	r3, r3
 8001246:	3b01      	subs	r3, #1
 8001248:	b29b      	uxth	r3, r3
 800124a:	807b      	strh	r3, [r7, #2]
      ddF_y += 2;
 800124c:	897b      	ldrh	r3, [r7, #10]
 800124e:	3302      	adds	r3, #2
 8001250:	b29b      	uxth	r3, r3
 8001252:	817b      	strh	r3, [r7, #10]
      f += ddF_y;
 8001254:	89fa      	ldrh	r2, [r7, #14]
 8001256:	897b      	ldrh	r3, [r7, #10]
 8001258:	4413      	add	r3, r2
 800125a:	b29b      	uxth	r3, r3
 800125c:	81fb      	strh	r3, [r7, #14]
    }
    x++;
 800125e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001262:	b29b      	uxth	r3, r3
 8001264:	3301      	adds	r3, #1
 8001266:	b29b      	uxth	r3, r3
 8001268:	813b      	strh	r3, [r7, #8]
    ddF_x += 2;
 800126a:	89bb      	ldrh	r3, [r7, #12]
 800126c:	3302      	adds	r3, #2
 800126e:	b29b      	uxth	r3, r3
 8001270:	81bb      	strh	r3, [r7, #12]
    f += ddF_x;
 8001272:	89fa      	ldrh	r2, [r7, #14]
 8001274:	89bb      	ldrh	r3, [r7, #12]
 8001276:	4413      	add	r3, r2
 8001278:	b29b      	uxth	r3, r3
 800127a:	81fb      	strh	r3, [r7, #14]

    ST7735_DrawPixel(x0 + x, y0 + r, color);
 800127c:	88fa      	ldrh	r2, [r7, #6]
 800127e:	893b      	ldrh	r3, [r7, #8]
 8001280:	4413      	add	r3, r2
 8001282:	b298      	uxth	r0, r3
 8001284:	88ba      	ldrh	r2, [r7, #4]
 8001286:	887b      	ldrh	r3, [r7, #2]
 8001288:	4413      	add	r3, r2
 800128a:	b29b      	uxth	r3, r3
 800128c:	883a      	ldrh	r2, [r7, #0]
 800128e:	4619      	mov	r1, r3
 8001290:	f7ff fdc8 	bl	8000e24 <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 - x, y0 + r, color);
 8001294:	88fa      	ldrh	r2, [r7, #6]
 8001296:	893b      	ldrh	r3, [r7, #8]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	b298      	uxth	r0, r3
 800129c:	88ba      	ldrh	r2, [r7, #4]
 800129e:	887b      	ldrh	r3, [r7, #2]
 80012a0:	4413      	add	r3, r2
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	883a      	ldrh	r2, [r7, #0]
 80012a6:	4619      	mov	r1, r3
 80012a8:	f7ff fdbc 	bl	8000e24 <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 - x, y0 - r, color);
 80012ac:	88fa      	ldrh	r2, [r7, #6]
 80012ae:	893b      	ldrh	r3, [r7, #8]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	b298      	uxth	r0, r3
 80012b4:	88ba      	ldrh	r2, [r7, #4]
 80012b6:	887b      	ldrh	r3, [r7, #2]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	883a      	ldrh	r2, [r7, #0]
 80012be:	4619      	mov	r1, r3
 80012c0:	f7ff fdb0 	bl	8000e24 <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 + x, y0 - r, color);
 80012c4:	88fa      	ldrh	r2, [r7, #6]
 80012c6:	893b      	ldrh	r3, [r7, #8]
 80012c8:	4413      	add	r3, r2
 80012ca:	b298      	uxth	r0, r3
 80012cc:	88ba      	ldrh	r2, [r7, #4]
 80012ce:	887b      	ldrh	r3, [r7, #2]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	883a      	ldrh	r2, [r7, #0]
 80012d6:	4619      	mov	r1, r3
 80012d8:	f7ff fda4 	bl	8000e24 <ST7735_DrawPixel>

    ST7735_DrawPixel(x0 + r, y0 + x, color);
 80012dc:	88fa      	ldrh	r2, [r7, #6]
 80012de:	887b      	ldrh	r3, [r7, #2]
 80012e0:	4413      	add	r3, r2
 80012e2:	b298      	uxth	r0, r3
 80012e4:	88ba      	ldrh	r2, [r7, #4]
 80012e6:	893b      	ldrh	r3, [r7, #8]
 80012e8:	4413      	add	r3, r2
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	883a      	ldrh	r2, [r7, #0]
 80012ee:	4619      	mov	r1, r3
 80012f0:	f7ff fd98 	bl	8000e24 <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 - r, y0 + x, color);
 80012f4:	88fa      	ldrh	r2, [r7, #6]
 80012f6:	887b      	ldrh	r3, [r7, #2]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	b298      	uxth	r0, r3
 80012fc:	88ba      	ldrh	r2, [r7, #4]
 80012fe:	893b      	ldrh	r3, [r7, #8]
 8001300:	4413      	add	r3, r2
 8001302:	b29b      	uxth	r3, r3
 8001304:	883a      	ldrh	r2, [r7, #0]
 8001306:	4619      	mov	r1, r3
 8001308:	f7ff fd8c 	bl	8000e24 <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 - r, y0 - x, color);
 800130c:	88fa      	ldrh	r2, [r7, #6]
 800130e:	887b      	ldrh	r3, [r7, #2]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	b298      	uxth	r0, r3
 8001314:	88ba      	ldrh	r2, [r7, #4]
 8001316:	893b      	ldrh	r3, [r7, #8]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	b29b      	uxth	r3, r3
 800131c:	883a      	ldrh	r2, [r7, #0]
 800131e:	4619      	mov	r1, r3
 8001320:	f7ff fd80 	bl	8000e24 <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 + r, y0 - x, color);
 8001324:	88fa      	ldrh	r2, [r7, #6]
 8001326:	887b      	ldrh	r3, [r7, #2]
 8001328:	4413      	add	r3, r2
 800132a:	b298      	uxth	r0, r3
 800132c:	88ba      	ldrh	r2, [r7, #4]
 800132e:	893b      	ldrh	r3, [r7, #8]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	b29b      	uxth	r3, r3
 8001334:	883a      	ldrh	r2, [r7, #0]
 8001336:	4619      	mov	r1, r3
 8001338:	f7ff fd74 	bl	8000e24 <ST7735_DrawPixel>
  while (x < r)
 800133c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001340:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001344:	429a      	cmp	r2, r3
 8001346:	f6ff af77 	blt.w	8001238 <ST7735_DrawCircle+0x88>
  }
}
 800134a:	bf00      	nop
 800134c:	bf00      	nop
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	bd90      	pop	{r4, r7, pc}

08001354 <ST7735_FillTriangle>:
** Function name:           fillTriangle
** Description:             Draw a filled triangle using 3 arbitrary points
***************************************************************************************/
// Fill a triangle - original Adafruit function works well and code footprint is small
void ST7735_FillTriangle( int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8001354:	b590      	push	{r4, r7, lr}
 8001356:	b08d      	sub	sp, #52	; 0x34
 8001358:	af00      	add	r7, sp, #0
 800135a:	4604      	mov	r4, r0
 800135c:	4608      	mov	r0, r1
 800135e:	4611      	mov	r1, r2
 8001360:	461a      	mov	r2, r3
 8001362:	4623      	mov	r3, r4
 8001364:	80fb      	strh	r3, [r7, #6]
 8001366:	4603      	mov	r3, r0
 8001368:	80bb      	strh	r3, [r7, #4]
 800136a:	460b      	mov	r3, r1
 800136c:	807b      	strh	r3, [r7, #2]
 800136e:	4613      	mov	r3, r2
 8001370:	803b      	strh	r3, [r7, #0]
  int16_t a, b, y, last;

  // Sort coordinates by Y order (y2 >= y1 >= y0)
  if (y0 > y1)
 8001372:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001376:	f9b7 3000 	ldrsh.w	r3, [r7]
 800137a:	429a      	cmp	r2, r3
 800137c:	dd0b      	ble.n	8001396 <ST7735_FillTriangle+0x42>
  {
    SWAP_INT16_T(y0, y1); SWAP_INT16_T(x0, x1);
 800137e:	88bb      	ldrh	r3, [r7, #4]
 8001380:	847b      	strh	r3, [r7, #34]	; 0x22
 8001382:	883b      	ldrh	r3, [r7, #0]
 8001384:	80bb      	strh	r3, [r7, #4]
 8001386:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001388:	803b      	strh	r3, [r7, #0]
 800138a:	88fb      	ldrh	r3, [r7, #6]
 800138c:	843b      	strh	r3, [r7, #32]
 800138e:	887b      	ldrh	r3, [r7, #2]
 8001390:	80fb      	strh	r3, [r7, #6]
 8001392:	8c3b      	ldrh	r3, [r7, #32]
 8001394:	807b      	strh	r3, [r7, #2]
  }

  if (y1 > y2)
 8001396:	f9b7 2000 	ldrsh.w	r2, [r7]
 800139a:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800139e:	429a      	cmp	r2, r3
 80013a0:	dd0f      	ble.n	80013c2 <ST7735_FillTriangle+0x6e>
  {
    SWAP_INT16_T(y2, y1); SWAP_INT16_T(x2, x1);
 80013a2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80013a6:	83fb      	strh	r3, [r7, #30]
 80013a8:	883b      	ldrh	r3, [r7, #0]
 80013aa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80013ae:	8bfb      	ldrh	r3, [r7, #30]
 80013b0:	803b      	strh	r3, [r7, #0]
 80013b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013b6:	83bb      	strh	r3, [r7, #28]
 80013b8:	887b      	ldrh	r3, [r7, #2]
 80013ba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80013be:	8bbb      	ldrh	r3, [r7, #28]
 80013c0:	807b      	strh	r3, [r7, #2]
  }

  if (y0 > y1)
 80013c2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80013c6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	dd0b      	ble.n	80013e6 <ST7735_FillTriangle+0x92>
  {
    SWAP_INT16_T(y0, y1); SWAP_INT16_T(x0, x1);
 80013ce:	88bb      	ldrh	r3, [r7, #4]
 80013d0:	837b      	strh	r3, [r7, #26]
 80013d2:	883b      	ldrh	r3, [r7, #0]
 80013d4:	80bb      	strh	r3, [r7, #4]
 80013d6:	8b7b      	ldrh	r3, [r7, #26]
 80013d8:	803b      	strh	r3, [r7, #0]
 80013da:	88fb      	ldrh	r3, [r7, #6]
 80013dc:	833b      	strh	r3, [r7, #24]
 80013de:	887b      	ldrh	r3, [r7, #2]
 80013e0:	80fb      	strh	r3, [r7, #6]
 80013e2:	8b3b      	ldrh	r3, [r7, #24]
 80013e4:	807b      	strh	r3, [r7, #2]
  }

  if (y0 == y2)
 80013e6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80013ea:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d137      	bne.n	8001462 <ST7735_FillTriangle+0x10e>
  { // Handle awkward all-on-same-line case as its own thing
    a = b = x0;
 80013f2:	88fb      	ldrh	r3, [r7, #6]
 80013f4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80013f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80013f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if (x1 < a)      a = x1;
 80013fa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80013fe:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001402:	429a      	cmp	r2, r3
 8001404:	da02      	bge.n	800140c <ST7735_FillTriangle+0xb8>
 8001406:	887b      	ldrh	r3, [r7, #2]
 8001408:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800140a:	e007      	b.n	800141c <ST7735_FillTriangle+0xc8>
    else if (x1 > b) b = x1;
 800140c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001410:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001414:	429a      	cmp	r2, r3
 8001416:	dd01      	ble.n	800141c <ST7735_FillTriangle+0xc8>
 8001418:	887b      	ldrh	r3, [r7, #2]
 800141a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if (x2 < a)      a = x2;
 800141c:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 8001420:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001424:	429a      	cmp	r2, r3
 8001426:	da03      	bge.n	8001430 <ST7735_FillTriangle+0xdc>
 8001428:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800142c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800142e:	e008      	b.n	8001442 <ST7735_FillTriangle+0xee>
    else if (x2 > b) b = x2;
 8001430:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 8001434:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001438:	429a      	cmp	r2, r3
 800143a:	dd02      	ble.n	8001442 <ST7735_FillTriangle+0xee>
 800143c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001440:	85bb      	strh	r3, [r7, #44]	; 0x2c
    ST7735_DrawFastHLine(a, y0, b - a + 1, color);
 8001442:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001444:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	b29b      	uxth	r3, r3
 800144a:	3301      	adds	r3, #1
 800144c:	b29b      	uxth	r3, r3
 800144e:	b21a      	sxth	r2, r3
 8001450:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001454:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001458:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 800145c:	f000 f9c8 	bl	80017f0 <ST7735_DrawFastHLine>
    return;
 8001460:	e0da      	b.n	8001618 <ST7735_FillTriangle+0x2c4>
  }

  int16_t
  dx01 = x1 - x0,
 8001462:	887a      	ldrh	r2, [r7, #2]
 8001464:	88fb      	ldrh	r3, [r7, #6]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	b29b      	uxth	r3, r3
 800146a:	82fb      	strh	r3, [r7, #22]
  dy01 = y1 - y0,
 800146c:	883a      	ldrh	r2, [r7, #0]
 800146e:	88bb      	ldrh	r3, [r7, #4]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	b29b      	uxth	r3, r3
 8001474:	82bb      	strh	r3, [r7, #20]
  dx02 = x2 - x0,
 8001476:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800147a:	88fb      	ldrh	r3, [r7, #6]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	b29b      	uxth	r3, r3
 8001480:	827b      	strh	r3, [r7, #18]
  dy02 = y2 - y0,
 8001482:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8001486:	88bb      	ldrh	r3, [r7, #4]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	b29b      	uxth	r3, r3
 800148c:	823b      	strh	r3, [r7, #16]
  dx12 = x2 - x1,
 800148e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001492:	887b      	ldrh	r3, [r7, #2]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	b29b      	uxth	r3, r3
 8001498:	81fb      	strh	r3, [r7, #14]
  dy12 = y2 - y1,
 800149a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800149e:	883b      	ldrh	r3, [r7, #0]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	81bb      	strh	r3, [r7, #12]
  sa   = 0,
 80014a6:	2300      	movs	r3, #0
 80014a8:	84fb      	strh	r3, [r7, #38]	; 0x26
  sb   = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	84bb      	strh	r3, [r7, #36]	; 0x24
  // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
  // is included here (and second loop will be skipped, avoiding a /0
  // error there), otherwise scanline y1 is skipped here and handled
  // in the second loop...which also avoids a /0 error here if y0=y1
  // (flat-topped triangle).
  if (y1 == y2) last = y1;  // Include y1 scanline
 80014ae:	f9b7 2000 	ldrsh.w	r2, [r7]
 80014b2:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d102      	bne.n	80014c0 <ST7735_FillTriangle+0x16c>
 80014ba:	883b      	ldrh	r3, [r7, #0]
 80014bc:	853b      	strh	r3, [r7, #40]	; 0x28
 80014be:	e003      	b.n	80014c8 <ST7735_FillTriangle+0x174>
  else         last = y1 - 1; // Skip it
 80014c0:	883b      	ldrh	r3, [r7, #0]
 80014c2:	3b01      	subs	r3, #1
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	853b      	strh	r3, [r7, #40]	; 0x28

  for (y = y0; y <= last; y++)
 80014c8:	88bb      	ldrh	r3, [r7, #4]
 80014ca:	857b      	strh	r3, [r7, #42]	; 0x2a
 80014cc:	e040      	b.n	8001550 <ST7735_FillTriangle+0x1fc>
  {
    a   = x0 + sa / dy01;
 80014ce:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80014d2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80014d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80014da:	b29a      	uxth	r2, r3
 80014dc:	88fb      	ldrh	r3, [r7, #6]
 80014de:	4413      	add	r3, r2
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
    b   = x0 + sb / dy02;
 80014e4:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80014e8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80014ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	88fb      	ldrh	r3, [r7, #6]
 80014f4:	4413      	add	r3, r2
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	85bb      	strh	r3, [r7, #44]	; 0x2c
    sa += dx01;
 80014fa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80014fc:	8afb      	ldrh	r3, [r7, #22]
 80014fe:	4413      	add	r3, r2
 8001500:	b29b      	uxth	r3, r3
 8001502:	84fb      	strh	r3, [r7, #38]	; 0x26
    sb += dx02;
 8001504:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001506:	8a7b      	ldrh	r3, [r7, #18]
 8001508:	4413      	add	r3, r2
 800150a:	b29b      	uxth	r3, r3
 800150c:	84bb      	strh	r3, [r7, #36]	; 0x24

    if (a > b) SWAP_INT16_T(a, b);
 800150e:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8001512:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001516:	429a      	cmp	r2, r3
 8001518:	dd05      	ble.n	8001526 <ST7735_FillTriangle+0x1d2>
 800151a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800151c:	813b      	strh	r3, [r7, #8]
 800151e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001520:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001522:	893b      	ldrh	r3, [r7, #8]
 8001524:	85bb      	strh	r3, [r7, #44]	; 0x2c
    ST7735_DrawFastHLine(a, y, b - a + 1, color);
 8001526:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001528:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	b29b      	uxth	r3, r3
 800152e:	3301      	adds	r3, #1
 8001530:	b29b      	uxth	r3, r3
 8001532:	b21a      	sxth	r2, r3
 8001534:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001538:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 800153c:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8001540:	f000 f956 	bl	80017f0 <ST7735_DrawFastHLine>
  for (y = y0; y <= last; y++)
 8001544:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001548:	b29b      	uxth	r3, r3
 800154a:	3301      	adds	r3, #1
 800154c:	b29b      	uxth	r3, r3
 800154e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001550:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8001554:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001558:	429a      	cmp	r2, r3
 800155a:	ddb8      	ble.n	80014ce <ST7735_FillTriangle+0x17a>
  }

  // For lower part of triangle, find scanline crossings for segments
  // 0-2 and 1-2.  This loop is skipped if y1=y2.
  sa = dx12 * (y - y1);
 800155c:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8001560:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	b29a      	uxth	r2, r3
 8001568:	89fb      	ldrh	r3, [r7, #14]
 800156a:	fb12 f303 	smulbb	r3, r2, r3
 800156e:	b29b      	uxth	r3, r3
 8001570:	84fb      	strh	r3, [r7, #38]	; 0x26
  sb = dx02 * (y - y0);
 8001572:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8001576:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	b29a      	uxth	r2, r3
 800157e:	8a7b      	ldrh	r3, [r7, #18]
 8001580:	fb12 f303 	smulbb	r3, r2, r3
 8001584:	b29b      	uxth	r3, r3
 8001586:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (; y <= y2; y++)
 8001588:	e040      	b.n	800160c <ST7735_FillTriangle+0x2b8>
  {
    a   = x1 + sa / dy12;
 800158a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800158e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001592:	fb92 f3f3 	sdiv	r3, r2, r3
 8001596:	b29a      	uxth	r2, r3
 8001598:	887b      	ldrh	r3, [r7, #2]
 800159a:	4413      	add	r3, r2
 800159c:	b29b      	uxth	r3, r3
 800159e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    b   = x0 + sb / dy02;
 80015a0:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80015a4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80015a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	88fb      	ldrh	r3, [r7, #6]
 80015b0:	4413      	add	r3, r2
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	85bb      	strh	r3, [r7, #44]	; 0x2c
    sa += dx12;
 80015b6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80015b8:	89fb      	ldrh	r3, [r7, #14]
 80015ba:	4413      	add	r3, r2
 80015bc:	b29b      	uxth	r3, r3
 80015be:	84fb      	strh	r3, [r7, #38]	; 0x26
    sb += dx02;
 80015c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80015c2:	8a7b      	ldrh	r3, [r7, #18]
 80015c4:	4413      	add	r3, r2
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	84bb      	strh	r3, [r7, #36]	; 0x24

    if (a > b) SWAP_INT16_T(a, b);
 80015ca:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80015ce:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80015d2:	429a      	cmp	r2, r3
 80015d4:	dd05      	ble.n	80015e2 <ST7735_FillTriangle+0x28e>
 80015d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015d8:	817b      	strh	r3, [r7, #10]
 80015da:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80015dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80015de:	897b      	ldrh	r3, [r7, #10]
 80015e0:	85bb      	strh	r3, [r7, #44]	; 0x2c
    ST7735_DrawFastHLine(a, y, b - a + 1, color);
 80015e2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80015e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	3301      	adds	r3, #1
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	b21a      	sxth	r2, r3
 80015f0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80015f4:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 80015f8:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80015fc:	f000 f8f8 	bl	80017f0 <ST7735_DrawFastHLine>
  for (; y <= y2; y++)
 8001600:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001604:	b29b      	uxth	r3, r3
 8001606:	3301      	adds	r3, #1
 8001608:	b29b      	uxth	r3, r3
 800160a:	857b      	strh	r3, [r7, #42]	; 0x2a
 800160c:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8001610:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001614:	429a      	cmp	r2, r3
 8001616:	ddb8      	ble.n	800158a <ST7735_FillTriangle+0x236>
  }
}
 8001618:	3734      	adds	r7, #52	; 0x34
 800161a:	46bd      	mov	sp, r7
 800161c:	bd90      	pop	{r4, r7, pc}

0800161e <ST7735_DrawLine>:
** Description:             draw a line between 2 arbitrary points
***************************************************************************************/

// Slower but more compact line drawing function
void ST7735_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 800161e:	b590      	push	{r4, r7, lr}
 8001620:	b089      	sub	sp, #36	; 0x24
 8001622:	af00      	add	r7, sp, #0
 8001624:	4604      	mov	r4, r0
 8001626:	4608      	mov	r0, r1
 8001628:	4611      	mov	r1, r2
 800162a:	461a      	mov	r2, r3
 800162c:	4623      	mov	r3, r4
 800162e:	80fb      	strh	r3, [r7, #6]
 8001630:	4603      	mov	r3, r0
 8001632:	80bb      	strh	r3, [r7, #4]
 8001634:	460b      	mov	r3, r1
 8001636:	807b      	strh	r3, [r7, #2]
 8001638:	4613      	mov	r3, r2
 800163a:	803b      	strh	r3, [r7, #0]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 800163c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001640:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800164a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800164e:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8001652:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001656:	1acb      	subs	r3, r1, r3
 8001658:	2b00      	cmp	r3, #0
 800165a:	bfb8      	it	lt
 800165c:	425b      	neglt	r3, r3
 800165e:	429a      	cmp	r2, r3
 8001660:	bfcc      	ite	gt
 8001662:	2301      	movgt	r3, #1
 8001664:	2300      	movle	r3, #0
 8001666:	b2db      	uxtb	r3, r3
 8001668:	837b      	strh	r3, [r7, #26]
  if (steep)
 800166a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d00b      	beq.n	800168a <ST7735_DrawLine+0x6c>
  {
    SWAP_INT16_T(x0, y0);
 8001672:	88fb      	ldrh	r3, [r7, #6]
 8001674:	833b      	strh	r3, [r7, #24]
 8001676:	88bb      	ldrh	r3, [r7, #4]
 8001678:	80fb      	strh	r3, [r7, #6]
 800167a:	8b3b      	ldrh	r3, [r7, #24]
 800167c:	80bb      	strh	r3, [r7, #4]
    SWAP_INT16_T(x1, y1);
 800167e:	887b      	ldrh	r3, [r7, #2]
 8001680:	82fb      	strh	r3, [r7, #22]
 8001682:	883b      	ldrh	r3, [r7, #0]
 8001684:	807b      	strh	r3, [r7, #2]
 8001686:	8afb      	ldrh	r3, [r7, #22]
 8001688:	803b      	strh	r3, [r7, #0]
  }

  if (x0 > x1)
 800168a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800168e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001692:	429a      	cmp	r2, r3
 8001694:	dd0b      	ble.n	80016ae <ST7735_DrawLine+0x90>
  {
    SWAP_INT16_T(x0, x1);
 8001696:	88fb      	ldrh	r3, [r7, #6]
 8001698:	82bb      	strh	r3, [r7, #20]
 800169a:	887b      	ldrh	r3, [r7, #2]
 800169c:	80fb      	strh	r3, [r7, #6]
 800169e:	8abb      	ldrh	r3, [r7, #20]
 80016a0:	807b      	strh	r3, [r7, #2]
    SWAP_INT16_T(y0, y1);
 80016a2:	88bb      	ldrh	r3, [r7, #4]
 80016a4:	827b      	strh	r3, [r7, #18]
 80016a6:	883b      	ldrh	r3, [r7, #0]
 80016a8:	80bb      	strh	r3, [r7, #4]
 80016aa:	8a7b      	ldrh	r3, [r7, #18]
 80016ac:	803b      	strh	r3, [r7, #0]
  }

  int16_t dx, dy;
  dx = x1 - x0;
 80016ae:	887a      	ldrh	r2, [r7, #2]
 80016b0:	88fb      	ldrh	r3, [r7, #6]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 80016b8:	f9b7 2000 	ldrsh.w	r2, [r7]
 80016bc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	bfb8      	it	lt
 80016c6:	425b      	neglt	r3, r3
 80016c8:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx / 2;
 80016ca:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80016ce:	0fda      	lsrs	r2, r3, #31
 80016d0:	4413      	add	r3, r2
 80016d2:	105b      	asrs	r3, r3, #1
 80016d4:	83fb      	strh	r3, [r7, #30]
  int16_t ystep;

  if (y0 < y1)
 80016d6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80016da:	f9b7 3000 	ldrsh.w	r3, [r7]
 80016de:	429a      	cmp	r2, r3
 80016e0:	da02      	bge.n	80016e8 <ST7735_DrawLine+0xca>
  {
    ystep = 1;
 80016e2:	2301      	movs	r3, #1
 80016e4:	83bb      	strh	r3, [r7, #28]
 80016e6:	e02d      	b.n	8001744 <ST7735_DrawLine+0x126>
  }
  else
  {
    ystep = -1;
 80016e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016ec:	83bb      	strh	r3, [r7, #28]
  }

  for (; x0<=x1; x0++)
 80016ee:	e029      	b.n	8001744 <ST7735_DrawLine+0x126>
  {
    if (steep)
 80016f0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d006      	beq.n	8001706 <ST7735_DrawLine+0xe8>
    {
      ST7735_DrawPixel(y0, x0, color);
 80016f8:	88bb      	ldrh	r3, [r7, #4]
 80016fa:	88f9      	ldrh	r1, [r7, #6]
 80016fc:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff fb90 	bl	8000e24 <ST7735_DrawPixel>
 8001704:	e005      	b.n	8001712 <ST7735_DrawLine+0xf4>
    }
    else
    {
      ST7735_DrawPixel(x0, y0, color);
 8001706:	88fb      	ldrh	r3, [r7, #6]
 8001708:	88b9      	ldrh	r1, [r7, #4]
 800170a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff fb89 	bl	8000e24 <ST7735_DrawPixel>
    }
    err -= dy;
 8001712:	8bfa      	ldrh	r2, [r7, #30]
 8001714:	89fb      	ldrh	r3, [r7, #14]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	b29b      	uxth	r3, r3
 800171a:	83fb      	strh	r3, [r7, #30]
    if (err < 0)
 800171c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001720:	2b00      	cmp	r3, #0
 8001722:	da09      	bge.n	8001738 <ST7735_DrawLine+0x11a>
    {
      y0 += ystep;
 8001724:	88ba      	ldrh	r2, [r7, #4]
 8001726:	8bbb      	ldrh	r3, [r7, #28]
 8001728:	4413      	add	r3, r2
 800172a:	b29b      	uxth	r3, r3
 800172c:	80bb      	strh	r3, [r7, #4]
      err += dx;
 800172e:	8bfa      	ldrh	r2, [r7, #30]
 8001730:	8a3b      	ldrh	r3, [r7, #16]
 8001732:	4413      	add	r3, r2
 8001734:	b29b      	uxth	r3, r3
 8001736:	83fb      	strh	r3, [r7, #30]
  for (; x0<=x1; x0++)
 8001738:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800173c:	b29b      	uxth	r3, r3
 800173e:	3301      	adds	r3, #1
 8001740:	b29b      	uxth	r3, r3
 8001742:	80fb      	strh	r3, [r7, #6]
 8001744:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001748:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800174c:	429a      	cmp	r2, r3
 800174e:	ddcf      	ble.n	80016f0 <ST7735_DrawLine+0xd2>
    }
  }
}
 8001750:	bf00      	nop
 8001752:	bf00      	nop
 8001754:	3724      	adds	r7, #36	; 0x24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd90      	pop	{r4, r7, pc}
	...

0800175c <ST7735_DrawFastVLine>:
/***************************************************************************************
** Function name:           drawFastVLine
** Description:             draw a vertical line
***************************************************************************************/
void ST7735_DrawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 800175c:	b590      	push	{r4, r7, lr}
 800175e:	b085      	sub	sp, #20
 8001760:	af02      	add	r7, sp, #8
 8001762:	4604      	mov	r4, r0
 8001764:	4608      	mov	r0, r1
 8001766:	4611      	mov	r1, r2
 8001768:	461a      	mov	r2, r3
 800176a:	4623      	mov	r3, r4
 800176c:	80fb      	strh	r3, [r7, #6]
 800176e:	4603      	mov	r3, r0
 8001770:	80bb      	strh	r3, [r7, #4]
 8001772:	460b      	mov	r3, r1
 8001774:	807b      	strh	r3, [r7, #2]
 8001776:	4613      	mov	r3, r2
 8001778:	803b      	strh	r3, [r7, #0]
  // Rudimentary clipping
  if ((x >= _width) || (y >= _height)) return;
 800177a:	4b1b      	ldr	r3, [pc, #108]	; (80017e8 <ST7735_DrawFastVLine+0x8c>)
 800177c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001780:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001784:	429a      	cmp	r2, r3
 8001786:	da2b      	bge.n	80017e0 <ST7735_DrawFastVLine+0x84>
 8001788:	4b18      	ldr	r3, [pc, #96]	; (80017ec <ST7735_DrawFastVLine+0x90>)
 800178a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800178e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001792:	429a      	cmp	r2, r3
 8001794:	da24      	bge.n	80017e0 <ST7735_DrawFastVLine+0x84>
  if ((y + h - 1) >= _height) h = _height - y;
 8001796:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800179a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800179e:	4413      	add	r3, r2
 80017a0:	4a12      	ldr	r2, [pc, #72]	; (80017ec <ST7735_DrawFastVLine+0x90>)
 80017a2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80017a6:	4293      	cmp	r3, r2
 80017a8:	dd07      	ble.n	80017ba <ST7735_DrawFastVLine+0x5e>
 80017aa:	4b10      	ldr	r3, [pc, #64]	; (80017ec <ST7735_DrawFastVLine+0x90>)
 80017ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	88bb      	ldrh	r3, [r7, #4]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	807b      	strh	r3, [r7, #2]

  ST7735_DrawLine(x, y, x, y + h - 1, color);
 80017ba:	88ba      	ldrh	r2, [r7, #4]
 80017bc:	887b      	ldrh	r3, [r7, #2]
 80017be:	4413      	add	r3, r2
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	3b01      	subs	r3, #1
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	b21c      	sxth	r4, r3
 80017c8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80017cc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80017d0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80017d4:	883b      	ldrh	r3, [r7, #0]
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	4623      	mov	r3, r4
 80017da:	f7ff ff20 	bl	800161e <ST7735_DrawLine>
 80017de:	e000      	b.n	80017e2 <ST7735_DrawFastVLine+0x86>
  if ((x >= _width) || (y >= _height)) return;
 80017e0:	bf00      	nop
}
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd90      	pop	{r4, r7, pc}
 80017e8:	2000001e 	.word	0x2000001e
 80017ec:	2000001c 	.word	0x2000001c

080017f0 <ST7735_DrawFastHLine>:
/***************************************************************************************
** Function name:           drawFastHLine
** Description:             draw a horizontal line
***************************************************************************************/
void ST7735_DrawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 80017f0:	b590      	push	{r4, r7, lr}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af02      	add	r7, sp, #8
 80017f6:	4604      	mov	r4, r0
 80017f8:	4608      	mov	r0, r1
 80017fa:	4611      	mov	r1, r2
 80017fc:	461a      	mov	r2, r3
 80017fe:	4623      	mov	r3, r4
 8001800:	80fb      	strh	r3, [r7, #6]
 8001802:	4603      	mov	r3, r0
 8001804:	80bb      	strh	r3, [r7, #4]
 8001806:	460b      	mov	r3, r1
 8001808:	807b      	strh	r3, [r7, #2]
 800180a:	4613      	mov	r3, r2
 800180c:	803b      	strh	r3, [r7, #0]
  // Rudimentary clipping
  if ((x >= _width) || (y >= _height)) return;
 800180e:	4b1b      	ldr	r3, [pc, #108]	; (800187c <ST7735_DrawFastHLine+0x8c>)
 8001810:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001814:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001818:	429a      	cmp	r2, r3
 800181a:	da2b      	bge.n	8001874 <ST7735_DrawFastHLine+0x84>
 800181c:	4b18      	ldr	r3, [pc, #96]	; (8001880 <ST7735_DrawFastHLine+0x90>)
 800181e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001822:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001826:	429a      	cmp	r2, r3
 8001828:	da24      	bge.n	8001874 <ST7735_DrawFastHLine+0x84>
  if ((x + w - 1) >= _width)  w = _width - x;
 800182a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800182e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001832:	4413      	add	r3, r2
 8001834:	4a11      	ldr	r2, [pc, #68]	; (800187c <ST7735_DrawFastHLine+0x8c>)
 8001836:	f9b2 2000 	ldrsh.w	r2, [r2]
 800183a:	4293      	cmp	r3, r2
 800183c:	dd07      	ble.n	800184e <ST7735_DrawFastHLine+0x5e>
 800183e:	4b0f      	ldr	r3, [pc, #60]	; (800187c <ST7735_DrawFastHLine+0x8c>)
 8001840:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001844:	b29a      	uxth	r2, r3
 8001846:	88fb      	ldrh	r3, [r7, #6]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	b29b      	uxth	r3, r3
 800184c:	807b      	strh	r3, [r7, #2]

  ST7735_DrawLine(x, y, x + w - 1, y, color);
 800184e:	88fa      	ldrh	r2, [r7, #6]
 8001850:	887b      	ldrh	r3, [r7, #2]
 8001852:	4413      	add	r3, r2
 8001854:	b29b      	uxth	r3, r3
 8001856:	3b01      	subs	r3, #1
 8001858:	b29b      	uxth	r3, r3
 800185a:	b21a      	sxth	r2, r3
 800185c:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8001860:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001864:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001868:	883b      	ldrh	r3, [r7, #0]
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	4623      	mov	r3, r4
 800186e:	f7ff fed6 	bl	800161e <ST7735_DrawLine>
 8001872:	e000      	b.n	8001876 <ST7735_DrawFastHLine+0x86>
  if ((x >= _width) || (y >= _height)) return;
 8001874:	bf00      	nop
}
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	bd90      	pop	{r4, r7, pc}
 800187c:	2000001e 	.word	0x2000001e
 8001880:	2000001c 	.word	0x2000001c

08001884 <ST7735_SetRotation>:
/***************************************************************************************
** Function name:           setRotation
** Description:             rotate the screen orientation m = 0-3
***************************************************************************************/
void ST7735_SetRotation(uint8_t m)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
  _value_rotation = m % 4;
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	f003 0303 	and.w	r3, r3, #3
 8001894:	b2da      	uxtb	r2, r3
 8001896:	4b4a      	ldr	r3, [pc, #296]	; (80019c0 <ST7735_SetRotation+0x13c>)
 8001898:	701a      	strb	r2, [r3, #0]

  TFT_CS_L();
 800189a:	2200      	movs	r2, #0
 800189c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018a0:	4848      	ldr	r0, [pc, #288]	; (80019c4 <ST7735_SetRotation+0x140>)
 80018a2:	f000 fc89 	bl	80021b8 <HAL_GPIO_WritePin>

  ST7735_WriteCommand(ST7735_MADCTL);
 80018a6:	2036      	movs	r0, #54	; 0x36
 80018a8:	f7ff f956 	bl	8000b58 <ST7735_WriteCommand>

  switch (_value_rotation)
 80018ac:	4b44      	ldr	r3, [pc, #272]	; (80019c0 <ST7735_SetRotation+0x13c>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b03      	cmp	r3, #3
 80018b2:	d87b      	bhi.n	80019ac <ST7735_SetRotation+0x128>
 80018b4:	a201      	add	r2, pc, #4	; (adr r2, 80018bc <ST7735_SetRotation+0x38>)
 80018b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ba:	bf00      	nop
 80018bc:	080018cd 	.word	0x080018cd
 80018c0:	08001909 	.word	0x08001909
 80018c4:	08001945 	.word	0x08001945
 80018c8:	08001971 	.word	0x08001971
  {
    case 0:
    {
      uint8_t d_r = (_data_rotation[0] | _data_rotation[1] | _data_rotation[3]);
 80018cc:	4b3e      	ldr	r3, [pc, #248]	; (80019c8 <ST7735_SetRotation+0x144>)
 80018ce:	781a      	ldrb	r2, [r3, #0]
 80018d0:	4b3d      	ldr	r3, [pc, #244]	; (80019c8 <ST7735_SetRotation+0x144>)
 80018d2:	785b      	ldrb	r3, [r3, #1]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	4b3b      	ldr	r3, [pc, #236]	; (80019c8 <ST7735_SetRotation+0x144>)
 80018da:	78db      	ldrb	r3, [r3, #3]
 80018dc:	4313      	orrs	r3, r2
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	73fb      	strb	r3, [r7, #15]
      ST7735_WriteData(&d_r, sizeof(d_r));
 80018e2:	f107 030f 	add.w	r3, r7, #15
 80018e6:	2101      	movs	r1, #1
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff f94f 	bl	8000b8c <ST7735_WriteData>
        _width  = ST7735_WIDTH;
 80018ee:	4b37      	ldr	r3, [pc, #220]	; (80019cc <ST7735_SetRotation+0x148>)
 80018f0:	2280      	movs	r2, #128	; 0x80
 80018f2:	801a      	strh	r2, [r3, #0]
        _height = ST7735_HEIGHT;
 80018f4:	4b36      	ldr	r3, [pc, #216]	; (80019d0 <ST7735_SetRotation+0x14c>)
 80018f6:	22a0      	movs	r2, #160	; 0xa0
 80018f8:	801a      	strh	r2, [r3, #0]
        _xstart = ST7735_XSTART;
 80018fa:	4b36      	ldr	r3, [pc, #216]	; (80019d4 <ST7735_SetRotation+0x150>)
 80018fc:	2202      	movs	r2, #2
 80018fe:	701a      	strb	r2, [r3, #0]
    _ystart = ST7735_YSTART;
 8001900:	4b35      	ldr	r3, [pc, #212]	; (80019d8 <ST7735_SetRotation+0x154>)
 8001902:	2201      	movs	r2, #1
 8001904:	701a      	strb	r2, [r3, #0]
    }
     break;
 8001906:	e051      	b.n	80019ac <ST7735_SetRotation+0x128>
    case 1:
    {
      uint8_t d_r = (_data_rotation[1] | _data_rotation[2] | _data_rotation[3]);
 8001908:	4b2f      	ldr	r3, [pc, #188]	; (80019c8 <ST7735_SetRotation+0x144>)
 800190a:	785a      	ldrb	r2, [r3, #1]
 800190c:	4b2e      	ldr	r3, [pc, #184]	; (80019c8 <ST7735_SetRotation+0x144>)
 800190e:	789b      	ldrb	r3, [r3, #2]
 8001910:	4313      	orrs	r3, r2
 8001912:	b2da      	uxtb	r2, r3
 8001914:	4b2c      	ldr	r3, [pc, #176]	; (80019c8 <ST7735_SetRotation+0x144>)
 8001916:	78db      	ldrb	r3, [r3, #3]
 8001918:	4313      	orrs	r3, r2
 800191a:	b2db      	uxtb	r3, r3
 800191c:	73bb      	strb	r3, [r7, #14]
      ST7735_WriteData(&d_r, sizeof(d_r));
 800191e:	f107 030e 	add.w	r3, r7, #14
 8001922:	2101      	movs	r1, #1
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff f931 	bl	8000b8c <ST7735_WriteData>
      _width  = ST7735_HEIGHT;
 800192a:	4b28      	ldr	r3, [pc, #160]	; (80019cc <ST7735_SetRotation+0x148>)
 800192c:	22a0      	movs	r2, #160	; 0xa0
 800192e:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8001930:	4b27      	ldr	r3, [pc, #156]	; (80019d0 <ST7735_SetRotation+0x14c>)
 8001932:	2280      	movs	r2, #128	; 0x80
 8001934:	801a      	strh	r2, [r3, #0]
      _xstart = ST7735_YSTART;
 8001936:	4b27      	ldr	r3, [pc, #156]	; (80019d4 <ST7735_SetRotation+0x150>)
 8001938:	2201      	movs	r2, #1
 800193a:	701a      	strb	r2, [r3, #0]
      _ystart = ST7735_XSTART;
 800193c:	4b26      	ldr	r3, [pc, #152]	; (80019d8 <ST7735_SetRotation+0x154>)
 800193e:	2202      	movs	r2, #2
 8001940:	701a      	strb	r2, [r3, #0]
    }
      break;
 8001942:	e033      	b.n	80019ac <ST7735_SetRotation+0x128>
    case 2:
    {
      uint8_t d_r = _data_rotation[3];
 8001944:	4b20      	ldr	r3, [pc, #128]	; (80019c8 <ST7735_SetRotation+0x144>)
 8001946:	78db      	ldrb	r3, [r3, #3]
 8001948:	737b      	strb	r3, [r7, #13]
      ST7735_WriteData(&d_r, sizeof(d_r));
 800194a:	f107 030d 	add.w	r3, r7, #13
 800194e:	2101      	movs	r1, #1
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff f91b 	bl	8000b8c <ST7735_WriteData>
      _width  = ST7735_WIDTH;
 8001956:	4b1d      	ldr	r3, [pc, #116]	; (80019cc <ST7735_SetRotation+0x148>)
 8001958:	2280      	movs	r2, #128	; 0x80
 800195a:	801a      	strh	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 800195c:	4b1c      	ldr	r3, [pc, #112]	; (80019d0 <ST7735_SetRotation+0x14c>)
 800195e:	22a0      	movs	r2, #160	; 0xa0
 8001960:	801a      	strh	r2, [r3, #0]
      _xstart = ST7735_XSTART;
 8001962:	4b1c      	ldr	r3, [pc, #112]	; (80019d4 <ST7735_SetRotation+0x150>)
 8001964:	2202      	movs	r2, #2
 8001966:	701a      	strb	r2, [r3, #0]
      _ystart = ST7735_YSTART;
 8001968:	4b1b      	ldr	r3, [pc, #108]	; (80019d8 <ST7735_SetRotation+0x154>)
 800196a:	2201      	movs	r2, #1
 800196c:	701a      	strb	r2, [r3, #0]
    }
      break;
 800196e:	e01d      	b.n	80019ac <ST7735_SetRotation+0x128>
    case 3:
    {
      uint8_t d_r = (_data_rotation[0] | _data_rotation[2] | _data_rotation[3]);
 8001970:	4b15      	ldr	r3, [pc, #84]	; (80019c8 <ST7735_SetRotation+0x144>)
 8001972:	781a      	ldrb	r2, [r3, #0]
 8001974:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <ST7735_SetRotation+0x144>)
 8001976:	789b      	ldrb	r3, [r3, #2]
 8001978:	4313      	orrs	r3, r2
 800197a:	b2da      	uxtb	r2, r3
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <ST7735_SetRotation+0x144>)
 800197e:	78db      	ldrb	r3, [r3, #3]
 8001980:	4313      	orrs	r3, r2
 8001982:	b2db      	uxtb	r3, r3
 8001984:	733b      	strb	r3, [r7, #12]
      ST7735_WriteData(&d_r, sizeof(d_r));
 8001986:	f107 030c 	add.w	r3, r7, #12
 800198a:	2101      	movs	r1, #1
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff f8fd 	bl	8000b8c <ST7735_WriteData>
      _width  = ST7735_HEIGHT;
 8001992:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <ST7735_SetRotation+0x148>)
 8001994:	22a0      	movs	r2, #160	; 0xa0
 8001996:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8001998:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <ST7735_SetRotation+0x14c>)
 800199a:	2280      	movs	r2, #128	; 0x80
 800199c:	801a      	strh	r2, [r3, #0]
      _xstart = ST7735_YSTART;
 800199e:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <ST7735_SetRotation+0x150>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	701a      	strb	r2, [r3, #0]
      _ystart = ST7735_XSTART;
 80019a4:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <ST7735_SetRotation+0x154>)
 80019a6:	2202      	movs	r2, #2
 80019a8:	701a      	strb	r2, [r3, #0]
    }
      break;
 80019aa:	bf00      	nop
  }
  TFT_CS_H();
 80019ac:	2201      	movs	r2, #1
 80019ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019b2:	4804      	ldr	r0, [pc, #16]	; (80019c4 <ST7735_SetRotation+0x140>)
 80019b4:	f000 fc00 	bl	80021b8 <HAL_GPIO_WritePin>
}
 80019b8:	bf00      	nop
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	200000a5 	.word	0x200000a5
 80019c4:	40020400 	.word	0x40020400
 80019c8:	20000018 	.word	0x20000018
 80019cc:	2000001e 	.word	0x2000001e
 80019d0:	2000001c 	.word	0x2000001c
 80019d4:	20000020 	.word	0x20000020
 80019d8:	20000021 	.word	0x20000021

080019dc <ST7735_GetHeight>:
{
  return _value_rotation;
}

int16_t ST7735_GetHeight(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return _height;
 80019e0:	4b03      	ldr	r3, [pc, #12]	; (80019f0 <ST7735_GetHeight+0x14>)
 80019e2:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	2000001c 	.word	0x2000001c

080019f4 <ST7735_GetWidth>:

int16_t ST7735_GetWidth(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return _width;
 80019f8:	4b03      	ldr	r3, [pc, #12]	; (8001a08 <ST7735_GetWidth+0x14>)
 80019fa:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	2000001e 	.word	0x2000001e

08001a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	607b      	str	r3, [r7, #4]
 8001a16:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <HAL_MspInit+0x4c>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	4a0f      	ldr	r2, [pc, #60]	; (8001a58 <HAL_MspInit+0x4c>)
 8001a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a20:	6453      	str	r3, [r2, #68]	; 0x44
 8001a22:	4b0d      	ldr	r3, [pc, #52]	; (8001a58 <HAL_MspInit+0x4c>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	603b      	str	r3, [r7, #0]
 8001a32:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <HAL_MspInit+0x4c>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	4a08      	ldr	r2, [pc, #32]	; (8001a58 <HAL_MspInit+0x4c>)
 8001a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3e:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <HAL_MspInit+0x4c>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a46:	603b      	str	r3, [r7, #0]
 8001a48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	40023800 	.word	0x40023800

08001a5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08a      	sub	sp, #40	; 0x28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a64:	f107 0314 	add.w	r3, r7, #20
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a19      	ldr	r2, [pc, #100]	; (8001ae0 <HAL_SPI_MspInit+0x84>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d12b      	bne.n	8001ad6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <HAL_SPI_MspInit+0x88>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a86:	4a17      	ldr	r2, [pc, #92]	; (8001ae4 <HAL_SPI_MspInit+0x88>)
 8001a88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a8e:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <HAL_SPI_MspInit+0x88>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <HAL_SPI_MspInit+0x88>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	4a10      	ldr	r2, [pc, #64]	; (8001ae4 <HAL_SPI_MspInit+0x88>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <HAL_SPI_MspInit+0x88>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001ab6:	23a0      	movs	r3, #160	; 0xa0
 8001ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aba:	2302      	movs	r3, #2
 8001abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ac6:	2305      	movs	r3, #5
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aca:	f107 0314 	add.w	r3, r7, #20
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4805      	ldr	r0, [pc, #20]	; (8001ae8 <HAL_SPI_MspInit+0x8c>)
 8001ad2:	f000 f9ed 	bl	8001eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ad6:	bf00      	nop
 8001ad8:	3728      	adds	r7, #40	; 0x28
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40013000 	.word	0x40013000
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40020000 	.word	0x40020000

08001aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001af0:	e7fe      	b.n	8001af0 <NMI_Handler+0x4>

08001af2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af6:	e7fe      	b.n	8001af6 <HardFault_Handler+0x4>

08001af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001afc:	e7fe      	b.n	8001afc <MemManage_Handler+0x4>

08001afe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b02:	e7fe      	b.n	8001b02 <BusFault_Handler+0x4>

08001b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b08:	e7fe      	b.n	8001b08 <UsageFault_Handler+0x4>

08001b0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b38:	f000 f890 	bl	8001c5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b3c:	bf00      	nop
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b44:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <SystemInit+0x20>)
 8001b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b4a:	4a05      	ldr	r2, [pc, #20]	; (8001b60 <SystemInit+0x20>)
 8001b4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b9c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b68:	f7ff ffea 	bl	8001b40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b6c:	480c      	ldr	r0, [pc, #48]	; (8001ba0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b6e:	490d      	ldr	r1, [pc, #52]	; (8001ba4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b70:	4a0d      	ldr	r2, [pc, #52]	; (8001ba8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b74:	e002      	b.n	8001b7c <LoopCopyDataInit>

08001b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b7a:	3304      	adds	r3, #4

08001b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b80:	d3f9      	bcc.n	8001b76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b82:	4a0a      	ldr	r2, [pc, #40]	; (8001bac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b84:	4c0a      	ldr	r4, [pc, #40]	; (8001bb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b88:	e001      	b.n	8001b8e <LoopFillZerobss>

08001b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b8c:	3204      	adds	r2, #4

08001b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b90:	d3fb      	bcc.n	8001b8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b92:	f001 f9ff 	bl	8002f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b96:	f7fe febb 	bl	8000910 <main>
  bx  lr    
 8001b9a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ba4:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001ba8:	0800b624 	.word	0x0800b624
  ldr r2, =_sbss
 8001bac:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001bb0:	200000ac 	.word	0x200000ac

08001bb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bb4:	e7fe      	b.n	8001bb4 <ADC_IRQHandler>
	...

08001bb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bbc:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <HAL_Init+0x40>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a0d      	ldr	r2, [pc, #52]	; (8001bf8 <HAL_Init+0x40>)
 8001bc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <HAL_Init+0x40>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <HAL_Init+0x40>)
 8001bce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bd4:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <HAL_Init+0x40>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a07      	ldr	r2, [pc, #28]	; (8001bf8 <HAL_Init+0x40>)
 8001bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be0:	2003      	movs	r0, #3
 8001be2:	f000 f931 	bl	8001e48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001be6:	200f      	movs	r0, #15
 8001be8:	f000 f808 	bl	8001bfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bec:	f7ff ff0e 	bl	8001a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40023c00 	.word	0x40023c00

08001bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c04:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <HAL_InitTick+0x54>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <HAL_InitTick+0x58>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f000 f93b 	bl	8001e96 <HAL_SYSTICK_Config>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e00e      	b.n	8001c48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b0f      	cmp	r3, #15
 8001c2e:	d80a      	bhi.n	8001c46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c30:	2200      	movs	r2, #0
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	f04f 30ff 	mov.w	r0, #4294967295
 8001c38:	f000 f911 	bl	8001e5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c3c:	4a06      	ldr	r2, [pc, #24]	; (8001c58 <HAL_InitTick+0x5c>)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
 8001c44:	e000      	b.n	8001c48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20000024 	.word	0x20000024
 8001c54:	2000002c 	.word	0x2000002c
 8001c58:	20000028 	.word	0x20000028

08001c5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <HAL_IncTick+0x20>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	461a      	mov	r2, r3
 8001c66:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <HAL_IncTick+0x24>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	4a04      	ldr	r2, [pc, #16]	; (8001c80 <HAL_IncTick+0x24>)
 8001c6e:	6013      	str	r3, [r2, #0]
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	2000002c 	.word	0x2000002c
 8001c80:	200000a8 	.word	0x200000a8

08001c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return uwTick;
 8001c88:	4b03      	ldr	r3, [pc, #12]	; (8001c98 <HAL_GetTick+0x14>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	200000a8 	.word	0x200000a8

08001c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ca4:	f7ff ffee 	bl	8001c84 <HAL_GetTick>
 8001ca8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb4:	d005      	beq.n	8001cc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <HAL_Delay+0x44>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cc2:	bf00      	nop
 8001cc4:	f7ff ffde 	bl	8001c84 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d8f7      	bhi.n	8001cc4 <HAL_Delay+0x28>
  {
  }
}
 8001cd4:	bf00      	nop
 8001cd6:	bf00      	nop
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	2000002c 	.word	0x2000002c

08001ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d00:	4013      	ands	r3, r2
 8001d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d16:	4a04      	ldr	r2, [pc, #16]	; (8001d28 <__NVIC_SetPriorityGrouping+0x44>)
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	60d3      	str	r3, [r2, #12]
}
 8001d1c:	bf00      	nop
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d30:	4b04      	ldr	r3, [pc, #16]	; (8001d44 <__NVIC_GetPriorityGrouping+0x18>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	0a1b      	lsrs	r3, r3, #8
 8001d36:	f003 0307 	and.w	r3, r3, #7
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	6039      	str	r1, [r7, #0]
 8001d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	db0a      	blt.n	8001d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	490c      	ldr	r1, [pc, #48]	; (8001d94 <__NVIC_SetPriority+0x4c>)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	0112      	lsls	r2, r2, #4
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d70:	e00a      	b.n	8001d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	4908      	ldr	r1, [pc, #32]	; (8001d98 <__NVIC_SetPriority+0x50>)
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	3b04      	subs	r3, #4
 8001d80:	0112      	lsls	r2, r2, #4
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	440b      	add	r3, r1
 8001d86:	761a      	strb	r2, [r3, #24]
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	e000e100 	.word	0xe000e100
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b089      	sub	sp, #36	; 0x24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f1c3 0307 	rsb	r3, r3, #7
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	bf28      	it	cs
 8001dba:	2304      	movcs	r3, #4
 8001dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	2b06      	cmp	r3, #6
 8001dc4:	d902      	bls.n	8001dcc <NVIC_EncodePriority+0x30>
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3b03      	subs	r3, #3
 8001dca:	e000      	b.n	8001dce <NVIC_EncodePriority+0x32>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43da      	mvns	r2, r3
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	401a      	ands	r2, r3
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de4:	f04f 31ff 	mov.w	r1, #4294967295
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	fa01 f303 	lsl.w	r3, r1, r3
 8001dee:	43d9      	mvns	r1, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df4:	4313      	orrs	r3, r2
         );
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3724      	adds	r7, #36	; 0x24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
	...

08001e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e14:	d301      	bcc.n	8001e1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e16:	2301      	movs	r3, #1
 8001e18:	e00f      	b.n	8001e3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e1a:	4a0a      	ldr	r2, [pc, #40]	; (8001e44 <SysTick_Config+0x40>)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e22:	210f      	movs	r1, #15
 8001e24:	f04f 30ff 	mov.w	r0, #4294967295
 8001e28:	f7ff ff8e 	bl	8001d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e2c:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <SysTick_Config+0x40>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e32:	4b04      	ldr	r3, [pc, #16]	; (8001e44 <SysTick_Config+0x40>)
 8001e34:	2207      	movs	r2, #7
 8001e36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	e000e010 	.word	0xe000e010

08001e48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff ff47 	bl	8001ce4 <__NVIC_SetPriorityGrouping>
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b086      	sub	sp, #24
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	4603      	mov	r3, r0
 8001e66:	60b9      	str	r1, [r7, #8]
 8001e68:	607a      	str	r2, [r7, #4]
 8001e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e70:	f7ff ff5c 	bl	8001d2c <__NVIC_GetPriorityGrouping>
 8001e74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	68b9      	ldr	r1, [r7, #8]
 8001e7a:	6978      	ldr	r0, [r7, #20]
 8001e7c:	f7ff ff8e 	bl	8001d9c <NVIC_EncodePriority>
 8001e80:	4602      	mov	r2, r0
 8001e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e86:	4611      	mov	r1, r2
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff ff5d 	bl	8001d48 <__NVIC_SetPriority>
}
 8001e8e:	bf00      	nop
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7ff ffb0 	bl	8001e04 <SysTick_Config>
 8001ea4:	4603      	mov	r3, r0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
	...

08001eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b089      	sub	sp, #36	; 0x24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]
 8001eca:	e159      	b.n	8002180 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ecc:	2201      	movs	r2, #1
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	4013      	ands	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	f040 8148 	bne.w	800217a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d005      	beq.n	8001f02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d130      	bne.n	8001f64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	2203      	movs	r2, #3
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43db      	mvns	r3, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4013      	ands	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	68da      	ldr	r2, [r3, #12]
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f38:	2201      	movs	r2, #1
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	091b      	lsrs	r3, r3, #4
 8001f4e:	f003 0201 	and.w	r2, r3, #1
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 0303 	and.w	r3, r3, #3
 8001f6c:	2b03      	cmp	r3, #3
 8001f6e:	d017      	beq.n	8001fa0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	2203      	movs	r2, #3
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 0303 	and.w	r3, r3, #3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d123      	bne.n	8001ff4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	08da      	lsrs	r2, r3, #3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3208      	adds	r2, #8
 8001fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	f003 0307 	and.w	r3, r3, #7
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	220f      	movs	r2, #15
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	691a      	ldr	r2, [r3, #16]
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	08da      	lsrs	r2, r3, #3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	3208      	adds	r2, #8
 8001fee:	69b9      	ldr	r1, [r7, #24]
 8001ff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	2203      	movs	r2, #3
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4013      	ands	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f003 0203 	and.w	r2, r3, #3
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4313      	orrs	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002030:	2b00      	cmp	r3, #0
 8002032:	f000 80a2 	beq.w	800217a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	4b57      	ldr	r3, [pc, #348]	; (8002198 <HAL_GPIO_Init+0x2e8>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	4a56      	ldr	r2, [pc, #344]	; (8002198 <HAL_GPIO_Init+0x2e8>)
 8002040:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002044:	6453      	str	r3, [r2, #68]	; 0x44
 8002046:	4b54      	ldr	r3, [pc, #336]	; (8002198 <HAL_GPIO_Init+0x2e8>)
 8002048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002052:	4a52      	ldr	r2, [pc, #328]	; (800219c <HAL_GPIO_Init+0x2ec>)
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	089b      	lsrs	r3, r3, #2
 8002058:	3302      	adds	r3, #2
 800205a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800205e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	220f      	movs	r2, #15
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4013      	ands	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a49      	ldr	r2, [pc, #292]	; (80021a0 <HAL_GPIO_Init+0x2f0>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d019      	beq.n	80020b2 <HAL_GPIO_Init+0x202>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a48      	ldr	r2, [pc, #288]	; (80021a4 <HAL_GPIO_Init+0x2f4>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d013      	beq.n	80020ae <HAL_GPIO_Init+0x1fe>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a47      	ldr	r2, [pc, #284]	; (80021a8 <HAL_GPIO_Init+0x2f8>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d00d      	beq.n	80020aa <HAL_GPIO_Init+0x1fa>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a46      	ldr	r2, [pc, #280]	; (80021ac <HAL_GPIO_Init+0x2fc>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d007      	beq.n	80020a6 <HAL_GPIO_Init+0x1f6>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a45      	ldr	r2, [pc, #276]	; (80021b0 <HAL_GPIO_Init+0x300>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d101      	bne.n	80020a2 <HAL_GPIO_Init+0x1f2>
 800209e:	2304      	movs	r3, #4
 80020a0:	e008      	b.n	80020b4 <HAL_GPIO_Init+0x204>
 80020a2:	2307      	movs	r3, #7
 80020a4:	e006      	b.n	80020b4 <HAL_GPIO_Init+0x204>
 80020a6:	2303      	movs	r3, #3
 80020a8:	e004      	b.n	80020b4 <HAL_GPIO_Init+0x204>
 80020aa:	2302      	movs	r3, #2
 80020ac:	e002      	b.n	80020b4 <HAL_GPIO_Init+0x204>
 80020ae:	2301      	movs	r3, #1
 80020b0:	e000      	b.n	80020b4 <HAL_GPIO_Init+0x204>
 80020b2:	2300      	movs	r3, #0
 80020b4:	69fa      	ldr	r2, [r7, #28]
 80020b6:	f002 0203 	and.w	r2, r2, #3
 80020ba:	0092      	lsls	r2, r2, #2
 80020bc:	4093      	lsls	r3, r2
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020c4:	4935      	ldr	r1, [pc, #212]	; (800219c <HAL_GPIO_Init+0x2ec>)
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	089b      	lsrs	r3, r3, #2
 80020ca:	3302      	adds	r3, #2
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020d2:	4b38      	ldr	r3, [pc, #224]	; (80021b4 <HAL_GPIO_Init+0x304>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	43db      	mvns	r3, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4013      	ands	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020f6:	4a2f      	ldr	r2, [pc, #188]	; (80021b4 <HAL_GPIO_Init+0x304>)
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020fc:	4b2d      	ldr	r3, [pc, #180]	; (80021b4 <HAL_GPIO_Init+0x304>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002120:	4a24      	ldr	r2, [pc, #144]	; (80021b4 <HAL_GPIO_Init+0x304>)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002126:	4b23      	ldr	r3, [pc, #140]	; (80021b4 <HAL_GPIO_Init+0x304>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	43db      	mvns	r3, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4013      	ands	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800214a:	4a1a      	ldr	r2, [pc, #104]	; (80021b4 <HAL_GPIO_Init+0x304>)
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002150:	4b18      	ldr	r3, [pc, #96]	; (80021b4 <HAL_GPIO_Init+0x304>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d003      	beq.n	8002174 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002174:	4a0f      	ldr	r2, [pc, #60]	; (80021b4 <HAL_GPIO_Init+0x304>)
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	3301      	adds	r3, #1
 800217e:	61fb      	str	r3, [r7, #28]
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	2b0f      	cmp	r3, #15
 8002184:	f67f aea2 	bls.w	8001ecc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002188:	bf00      	nop
 800218a:	bf00      	nop
 800218c:	3724      	adds	r7, #36	; 0x24
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	40023800 	.word	0x40023800
 800219c:	40013800 	.word	0x40013800
 80021a0:	40020000 	.word	0x40020000
 80021a4:	40020400 	.word	0x40020400
 80021a8:	40020800 	.word	0x40020800
 80021ac:	40020c00 	.word	0x40020c00
 80021b0:	40021000 	.word	0x40021000
 80021b4:	40013c00 	.word	0x40013c00

080021b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	807b      	strh	r3, [r7, #2]
 80021c4:	4613      	mov	r3, r2
 80021c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021c8:	787b      	ldrb	r3, [r7, #1]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ce:	887a      	ldrh	r2, [r7, #2]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021d4:	e003      	b.n	80021de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021d6:	887b      	ldrh	r3, [r7, #2]
 80021d8:	041a      	lsls	r2, r3, #16
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	619a      	str	r2, [r3, #24]
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
	...

080021ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e267      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d075      	beq.n	80022f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800220a:	4b88      	ldr	r3, [pc, #544]	; (800242c <HAL_RCC_OscConfig+0x240>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 030c 	and.w	r3, r3, #12
 8002212:	2b04      	cmp	r3, #4
 8002214:	d00c      	beq.n	8002230 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002216:	4b85      	ldr	r3, [pc, #532]	; (800242c <HAL_RCC_OscConfig+0x240>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800221e:	2b08      	cmp	r3, #8
 8002220:	d112      	bne.n	8002248 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002222:	4b82      	ldr	r3, [pc, #520]	; (800242c <HAL_RCC_OscConfig+0x240>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800222a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800222e:	d10b      	bne.n	8002248 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002230:	4b7e      	ldr	r3, [pc, #504]	; (800242c <HAL_RCC_OscConfig+0x240>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d05b      	beq.n	80022f4 <HAL_RCC_OscConfig+0x108>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d157      	bne.n	80022f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e242      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002250:	d106      	bne.n	8002260 <HAL_RCC_OscConfig+0x74>
 8002252:	4b76      	ldr	r3, [pc, #472]	; (800242c <HAL_RCC_OscConfig+0x240>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a75      	ldr	r2, [pc, #468]	; (800242c <HAL_RCC_OscConfig+0x240>)
 8002258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800225c:	6013      	str	r3, [r2, #0]
 800225e:	e01d      	b.n	800229c <HAL_RCC_OscConfig+0xb0>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002268:	d10c      	bne.n	8002284 <HAL_RCC_OscConfig+0x98>
 800226a:	4b70      	ldr	r3, [pc, #448]	; (800242c <HAL_RCC_OscConfig+0x240>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a6f      	ldr	r2, [pc, #444]	; (800242c <HAL_RCC_OscConfig+0x240>)
 8002270:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	4b6d      	ldr	r3, [pc, #436]	; (800242c <HAL_RCC_OscConfig+0x240>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a6c      	ldr	r2, [pc, #432]	; (800242c <HAL_RCC_OscConfig+0x240>)
 800227c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002280:	6013      	str	r3, [r2, #0]
 8002282:	e00b      	b.n	800229c <HAL_RCC_OscConfig+0xb0>
 8002284:	4b69      	ldr	r3, [pc, #420]	; (800242c <HAL_RCC_OscConfig+0x240>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a68      	ldr	r2, [pc, #416]	; (800242c <HAL_RCC_OscConfig+0x240>)
 800228a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800228e:	6013      	str	r3, [r2, #0]
 8002290:	4b66      	ldr	r3, [pc, #408]	; (800242c <HAL_RCC_OscConfig+0x240>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a65      	ldr	r2, [pc, #404]	; (800242c <HAL_RCC_OscConfig+0x240>)
 8002296:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800229a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d013      	beq.n	80022cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a4:	f7ff fcee 	bl	8001c84 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022ac:	f7ff fcea 	bl	8001c84 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b64      	cmp	r3, #100	; 0x64
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e207      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022be:	4b5b      	ldr	r3, [pc, #364]	; (800242c <HAL_RCC_OscConfig+0x240>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0f0      	beq.n	80022ac <HAL_RCC_OscConfig+0xc0>
 80022ca:	e014      	b.n	80022f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022cc:	f7ff fcda 	bl	8001c84 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022d4:	f7ff fcd6 	bl	8001c84 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b64      	cmp	r3, #100	; 0x64
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e1f3      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022e6:	4b51      	ldr	r3, [pc, #324]	; (800242c <HAL_RCC_OscConfig+0x240>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1f0      	bne.n	80022d4 <HAL_RCC_OscConfig+0xe8>
 80022f2:	e000      	b.n	80022f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d063      	beq.n	80023ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002302:	4b4a      	ldr	r3, [pc, #296]	; (800242c <HAL_RCC_OscConfig+0x240>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 030c 	and.w	r3, r3, #12
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00b      	beq.n	8002326 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800230e:	4b47      	ldr	r3, [pc, #284]	; (800242c <HAL_RCC_OscConfig+0x240>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002316:	2b08      	cmp	r3, #8
 8002318:	d11c      	bne.n	8002354 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800231a:	4b44      	ldr	r3, [pc, #272]	; (800242c <HAL_RCC_OscConfig+0x240>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d116      	bne.n	8002354 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002326:	4b41      	ldr	r3, [pc, #260]	; (800242c <HAL_RCC_OscConfig+0x240>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d005      	beq.n	800233e <HAL_RCC_OscConfig+0x152>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d001      	beq.n	800233e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e1c7      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800233e:	4b3b      	ldr	r3, [pc, #236]	; (800242c <HAL_RCC_OscConfig+0x240>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	4937      	ldr	r1, [pc, #220]	; (800242c <HAL_RCC_OscConfig+0x240>)
 800234e:	4313      	orrs	r3, r2
 8002350:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002352:	e03a      	b.n	80023ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d020      	beq.n	800239e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800235c:	4b34      	ldr	r3, [pc, #208]	; (8002430 <HAL_RCC_OscConfig+0x244>)
 800235e:	2201      	movs	r2, #1
 8002360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002362:	f7ff fc8f 	bl	8001c84 <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002368:	e008      	b.n	800237c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800236a:	f7ff fc8b 	bl	8001c84 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e1a8      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800237c:	4b2b      	ldr	r3, [pc, #172]	; (800242c <HAL_RCC_OscConfig+0x240>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0f0      	beq.n	800236a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002388:	4b28      	ldr	r3, [pc, #160]	; (800242c <HAL_RCC_OscConfig+0x240>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4925      	ldr	r1, [pc, #148]	; (800242c <HAL_RCC_OscConfig+0x240>)
 8002398:	4313      	orrs	r3, r2
 800239a:	600b      	str	r3, [r1, #0]
 800239c:	e015      	b.n	80023ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800239e:	4b24      	ldr	r3, [pc, #144]	; (8002430 <HAL_RCC_OscConfig+0x244>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a4:	f7ff fc6e 	bl	8001c84 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023ac:	f7ff fc6a 	bl	8001c84 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e187      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023be:	4b1b      	ldr	r3, [pc, #108]	; (800242c <HAL_RCC_OscConfig+0x240>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f0      	bne.n	80023ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0308 	and.w	r3, r3, #8
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d036      	beq.n	8002444 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d016      	beq.n	800240c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023de:	4b15      	ldr	r3, [pc, #84]	; (8002434 <HAL_RCC_OscConfig+0x248>)
 80023e0:	2201      	movs	r2, #1
 80023e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e4:	f7ff fc4e 	bl	8001c84 <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023ec:	f7ff fc4a 	bl	8001c84 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e167      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023fe:	4b0b      	ldr	r3, [pc, #44]	; (800242c <HAL_RCC_OscConfig+0x240>)
 8002400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d0f0      	beq.n	80023ec <HAL_RCC_OscConfig+0x200>
 800240a:	e01b      	b.n	8002444 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800240c:	4b09      	ldr	r3, [pc, #36]	; (8002434 <HAL_RCC_OscConfig+0x248>)
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002412:	f7ff fc37 	bl	8001c84 <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002418:	e00e      	b.n	8002438 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800241a:	f7ff fc33 	bl	8001c84 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d907      	bls.n	8002438 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e150      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
 800242c:	40023800 	.word	0x40023800
 8002430:	42470000 	.word	0x42470000
 8002434:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002438:	4b88      	ldr	r3, [pc, #544]	; (800265c <HAL_RCC_OscConfig+0x470>)
 800243a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1ea      	bne.n	800241a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b00      	cmp	r3, #0
 800244e:	f000 8097 	beq.w	8002580 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002452:	2300      	movs	r3, #0
 8002454:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002456:	4b81      	ldr	r3, [pc, #516]	; (800265c <HAL_RCC_OscConfig+0x470>)
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10f      	bne.n	8002482 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	60bb      	str	r3, [r7, #8]
 8002466:	4b7d      	ldr	r3, [pc, #500]	; (800265c <HAL_RCC_OscConfig+0x470>)
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	4a7c      	ldr	r2, [pc, #496]	; (800265c <HAL_RCC_OscConfig+0x470>)
 800246c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002470:	6413      	str	r3, [r2, #64]	; 0x40
 8002472:	4b7a      	ldr	r3, [pc, #488]	; (800265c <HAL_RCC_OscConfig+0x470>)
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247a:	60bb      	str	r3, [r7, #8]
 800247c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800247e:	2301      	movs	r3, #1
 8002480:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002482:	4b77      	ldr	r3, [pc, #476]	; (8002660 <HAL_RCC_OscConfig+0x474>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248a:	2b00      	cmp	r3, #0
 800248c:	d118      	bne.n	80024c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800248e:	4b74      	ldr	r3, [pc, #464]	; (8002660 <HAL_RCC_OscConfig+0x474>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a73      	ldr	r2, [pc, #460]	; (8002660 <HAL_RCC_OscConfig+0x474>)
 8002494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002498:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800249a:	f7ff fbf3 	bl	8001c84 <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a2:	f7ff fbef 	bl	8001c84 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e10c      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b4:	4b6a      	ldr	r3, [pc, #424]	; (8002660 <HAL_RCC_OscConfig+0x474>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0f0      	beq.n	80024a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d106      	bne.n	80024d6 <HAL_RCC_OscConfig+0x2ea>
 80024c8:	4b64      	ldr	r3, [pc, #400]	; (800265c <HAL_RCC_OscConfig+0x470>)
 80024ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024cc:	4a63      	ldr	r2, [pc, #396]	; (800265c <HAL_RCC_OscConfig+0x470>)
 80024ce:	f043 0301 	orr.w	r3, r3, #1
 80024d2:	6713      	str	r3, [r2, #112]	; 0x70
 80024d4:	e01c      	b.n	8002510 <HAL_RCC_OscConfig+0x324>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	2b05      	cmp	r3, #5
 80024dc:	d10c      	bne.n	80024f8 <HAL_RCC_OscConfig+0x30c>
 80024de:	4b5f      	ldr	r3, [pc, #380]	; (800265c <HAL_RCC_OscConfig+0x470>)
 80024e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e2:	4a5e      	ldr	r2, [pc, #376]	; (800265c <HAL_RCC_OscConfig+0x470>)
 80024e4:	f043 0304 	orr.w	r3, r3, #4
 80024e8:	6713      	str	r3, [r2, #112]	; 0x70
 80024ea:	4b5c      	ldr	r3, [pc, #368]	; (800265c <HAL_RCC_OscConfig+0x470>)
 80024ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ee:	4a5b      	ldr	r2, [pc, #364]	; (800265c <HAL_RCC_OscConfig+0x470>)
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	6713      	str	r3, [r2, #112]	; 0x70
 80024f6:	e00b      	b.n	8002510 <HAL_RCC_OscConfig+0x324>
 80024f8:	4b58      	ldr	r3, [pc, #352]	; (800265c <HAL_RCC_OscConfig+0x470>)
 80024fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fc:	4a57      	ldr	r2, [pc, #348]	; (800265c <HAL_RCC_OscConfig+0x470>)
 80024fe:	f023 0301 	bic.w	r3, r3, #1
 8002502:	6713      	str	r3, [r2, #112]	; 0x70
 8002504:	4b55      	ldr	r3, [pc, #340]	; (800265c <HAL_RCC_OscConfig+0x470>)
 8002506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002508:	4a54      	ldr	r2, [pc, #336]	; (800265c <HAL_RCC_OscConfig+0x470>)
 800250a:	f023 0304 	bic.w	r3, r3, #4
 800250e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d015      	beq.n	8002544 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002518:	f7ff fbb4 	bl	8001c84 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800251e:	e00a      	b.n	8002536 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002520:	f7ff fbb0 	bl	8001c84 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	f241 3288 	movw	r2, #5000	; 0x1388
 800252e:	4293      	cmp	r3, r2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e0cb      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002536:	4b49      	ldr	r3, [pc, #292]	; (800265c <HAL_RCC_OscConfig+0x470>)
 8002538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0ee      	beq.n	8002520 <HAL_RCC_OscConfig+0x334>
 8002542:	e014      	b.n	800256e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002544:	f7ff fb9e 	bl	8001c84 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800254a:	e00a      	b.n	8002562 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800254c:	f7ff fb9a 	bl	8001c84 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	f241 3288 	movw	r2, #5000	; 0x1388
 800255a:	4293      	cmp	r3, r2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e0b5      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002562:	4b3e      	ldr	r3, [pc, #248]	; (800265c <HAL_RCC_OscConfig+0x470>)
 8002564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1ee      	bne.n	800254c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800256e:	7dfb      	ldrb	r3, [r7, #23]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d105      	bne.n	8002580 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002574:	4b39      	ldr	r3, [pc, #228]	; (800265c <HAL_RCC_OscConfig+0x470>)
 8002576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002578:	4a38      	ldr	r2, [pc, #224]	; (800265c <HAL_RCC_OscConfig+0x470>)
 800257a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800257e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 80a1 	beq.w	80026cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800258a:	4b34      	ldr	r3, [pc, #208]	; (800265c <HAL_RCC_OscConfig+0x470>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 030c 	and.w	r3, r3, #12
 8002592:	2b08      	cmp	r3, #8
 8002594:	d05c      	beq.n	8002650 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	2b02      	cmp	r3, #2
 800259c:	d141      	bne.n	8002622 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800259e:	4b31      	ldr	r3, [pc, #196]	; (8002664 <HAL_RCC_OscConfig+0x478>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a4:	f7ff fb6e 	bl	8001c84 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ac:	f7ff fb6a 	bl	8001c84 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e087      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025be:	4b27      	ldr	r3, [pc, #156]	; (800265c <HAL_RCC_OscConfig+0x470>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1f0      	bne.n	80025ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69da      	ldr	r2, [r3, #28]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	019b      	lsls	r3, r3, #6
 80025da:	431a      	orrs	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e0:	085b      	lsrs	r3, r3, #1
 80025e2:	3b01      	subs	r3, #1
 80025e4:	041b      	lsls	r3, r3, #16
 80025e6:	431a      	orrs	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ec:	061b      	lsls	r3, r3, #24
 80025ee:	491b      	ldr	r1, [pc, #108]	; (800265c <HAL_RCC_OscConfig+0x470>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025f4:	4b1b      	ldr	r3, [pc, #108]	; (8002664 <HAL_RCC_OscConfig+0x478>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fa:	f7ff fb43 	bl	8001c84 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002602:	f7ff fb3f 	bl	8001c84 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e05c      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002614:	4b11      	ldr	r3, [pc, #68]	; (800265c <HAL_RCC_OscConfig+0x470>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0f0      	beq.n	8002602 <HAL_RCC_OscConfig+0x416>
 8002620:	e054      	b.n	80026cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002622:	4b10      	ldr	r3, [pc, #64]	; (8002664 <HAL_RCC_OscConfig+0x478>)
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002628:	f7ff fb2c 	bl	8001c84 <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002630:	f7ff fb28 	bl	8001c84 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e045      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002642:	4b06      	ldr	r3, [pc, #24]	; (800265c <HAL_RCC_OscConfig+0x470>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1f0      	bne.n	8002630 <HAL_RCC_OscConfig+0x444>
 800264e:	e03d      	b.n	80026cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d107      	bne.n	8002668 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e038      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
 800265c:	40023800 	.word	0x40023800
 8002660:	40007000 	.word	0x40007000
 8002664:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002668:	4b1b      	ldr	r3, [pc, #108]	; (80026d8 <HAL_RCC_OscConfig+0x4ec>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d028      	beq.n	80026c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002680:	429a      	cmp	r2, r3
 8002682:	d121      	bne.n	80026c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800268e:	429a      	cmp	r2, r3
 8002690:	d11a      	bne.n	80026c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002698:	4013      	ands	r3, r2
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800269e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d111      	bne.n	80026c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ae:	085b      	lsrs	r3, r3, #1
 80026b0:	3b01      	subs	r3, #1
 80026b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d107      	bne.n	80026c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d001      	beq.n	80026cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e000      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3718      	adds	r7, #24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40023800 	.word	0x40023800

080026dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e0cc      	b.n	800288a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026f0:	4b68      	ldr	r3, [pc, #416]	; (8002894 <HAL_RCC_ClockConfig+0x1b8>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0307 	and.w	r3, r3, #7
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d90c      	bls.n	8002718 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fe:	4b65      	ldr	r3, [pc, #404]	; (8002894 <HAL_RCC_ClockConfig+0x1b8>)
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002706:	4b63      	ldr	r3, [pc, #396]	; (8002894 <HAL_RCC_ClockConfig+0x1b8>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	429a      	cmp	r2, r3
 8002712:	d001      	beq.n	8002718 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e0b8      	b.n	800288a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d020      	beq.n	8002766 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002730:	4b59      	ldr	r3, [pc, #356]	; (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	4a58      	ldr	r2, [pc, #352]	; (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 8002736:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800273a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0308 	and.w	r3, r3, #8
 8002744:	2b00      	cmp	r3, #0
 8002746:	d005      	beq.n	8002754 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002748:	4b53      	ldr	r3, [pc, #332]	; (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	4a52      	ldr	r2, [pc, #328]	; (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 800274e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002752:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002754:	4b50      	ldr	r3, [pc, #320]	; (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	494d      	ldr	r1, [pc, #308]	; (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 8002762:	4313      	orrs	r3, r2
 8002764:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d044      	beq.n	80027fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d107      	bne.n	800278a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277a:	4b47      	ldr	r3, [pc, #284]	; (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d119      	bne.n	80027ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e07f      	b.n	800288a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b02      	cmp	r3, #2
 8002790:	d003      	beq.n	800279a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002796:	2b03      	cmp	r3, #3
 8002798:	d107      	bne.n	80027aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800279a:	4b3f      	ldr	r3, [pc, #252]	; (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d109      	bne.n	80027ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e06f      	b.n	800288a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027aa:	4b3b      	ldr	r3, [pc, #236]	; (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e067      	b.n	800288a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ba:	4b37      	ldr	r3, [pc, #220]	; (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f023 0203 	bic.w	r2, r3, #3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	4934      	ldr	r1, [pc, #208]	; (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027cc:	f7ff fa5a 	bl	8001c84 <HAL_GetTick>
 80027d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d2:	e00a      	b.n	80027ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d4:	f7ff fa56 	bl	8001c84 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e04f      	b.n	800288a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ea:	4b2b      	ldr	r3, [pc, #172]	; (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 020c 	and.w	r2, r3, #12
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d1eb      	bne.n	80027d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027fc:	4b25      	ldr	r3, [pc, #148]	; (8002894 <HAL_RCC_ClockConfig+0x1b8>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0307 	and.w	r3, r3, #7
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d20c      	bcs.n	8002824 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280a:	4b22      	ldr	r3, [pc, #136]	; (8002894 <HAL_RCC_ClockConfig+0x1b8>)
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002812:	4b20      	ldr	r3, [pc, #128]	; (8002894 <HAL_RCC_ClockConfig+0x1b8>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	429a      	cmp	r2, r3
 800281e:	d001      	beq.n	8002824 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e032      	b.n	800288a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b00      	cmp	r3, #0
 800282e:	d008      	beq.n	8002842 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002830:	4b19      	ldr	r3, [pc, #100]	; (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	4916      	ldr	r1, [pc, #88]	; (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 800283e:	4313      	orrs	r3, r2
 8002840:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	2b00      	cmp	r3, #0
 800284c:	d009      	beq.n	8002862 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800284e:	4b12      	ldr	r3, [pc, #72]	; (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	490e      	ldr	r1, [pc, #56]	; (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 800285e:	4313      	orrs	r3, r2
 8002860:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002862:	f000 f821 	bl	80028a8 <HAL_RCC_GetSysClockFreq>
 8002866:	4602      	mov	r2, r0
 8002868:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	091b      	lsrs	r3, r3, #4
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	490a      	ldr	r1, [pc, #40]	; (800289c <HAL_RCC_ClockConfig+0x1c0>)
 8002874:	5ccb      	ldrb	r3, [r1, r3]
 8002876:	fa22 f303 	lsr.w	r3, r2, r3
 800287a:	4a09      	ldr	r2, [pc, #36]	; (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 800287c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800287e:	4b09      	ldr	r3, [pc, #36]	; (80028a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff f9ba 	bl	8001bfc <HAL_InitTick>

  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40023c00 	.word	0x40023c00
 8002898:	40023800 	.word	0x40023800
 800289c:	0800b604 	.word	0x0800b604
 80028a0:	20000024 	.word	0x20000024
 80028a4:	20000028 	.word	0x20000028

080028a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028ac:	b090      	sub	sp, #64	; 0x40
 80028ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	637b      	str	r3, [r7, #52]	; 0x34
 80028b4:	2300      	movs	r3, #0
 80028b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028b8:	2300      	movs	r3, #0
 80028ba:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80028bc:	2300      	movs	r3, #0
 80028be:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028c0:	4b59      	ldr	r3, [pc, #356]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x180>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 030c 	and.w	r3, r3, #12
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d00d      	beq.n	80028e8 <HAL_RCC_GetSysClockFreq+0x40>
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	f200 80a1 	bhi.w	8002a14 <HAL_RCC_GetSysClockFreq+0x16c>
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d002      	beq.n	80028dc <HAL_RCC_GetSysClockFreq+0x34>
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	d003      	beq.n	80028e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80028da:	e09b      	b.n	8002a14 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028dc:	4b53      	ldr	r3, [pc, #332]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x184>)
 80028de:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80028e0:	e09b      	b.n	8002a1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028e2:	4b53      	ldr	r3, [pc, #332]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x188>)
 80028e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028e6:	e098      	b.n	8002a1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028e8:	4b4f      	ldr	r3, [pc, #316]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x180>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028f0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028f2:	4b4d      	ldr	r3, [pc, #308]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x180>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d028      	beq.n	8002950 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028fe:	4b4a      	ldr	r3, [pc, #296]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x180>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	099b      	lsrs	r3, r3, #6
 8002904:	2200      	movs	r2, #0
 8002906:	623b      	str	r3, [r7, #32]
 8002908:	627a      	str	r2, [r7, #36]	; 0x24
 800290a:	6a3b      	ldr	r3, [r7, #32]
 800290c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002910:	2100      	movs	r1, #0
 8002912:	4b47      	ldr	r3, [pc, #284]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x188>)
 8002914:	fb03 f201 	mul.w	r2, r3, r1
 8002918:	2300      	movs	r3, #0
 800291a:	fb00 f303 	mul.w	r3, r0, r3
 800291e:	4413      	add	r3, r2
 8002920:	4a43      	ldr	r2, [pc, #268]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x188>)
 8002922:	fba0 1202 	umull	r1, r2, r0, r2
 8002926:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002928:	460a      	mov	r2, r1
 800292a:	62ba      	str	r2, [r7, #40]	; 0x28
 800292c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800292e:	4413      	add	r3, r2
 8002930:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002934:	2200      	movs	r2, #0
 8002936:	61bb      	str	r3, [r7, #24]
 8002938:	61fa      	str	r2, [r7, #28]
 800293a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800293e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002942:	f7fd fc49 	bl	80001d8 <__aeabi_uldivmod>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	4613      	mov	r3, r2
 800294c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800294e:	e053      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002950:	4b35      	ldr	r3, [pc, #212]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x180>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	099b      	lsrs	r3, r3, #6
 8002956:	2200      	movs	r2, #0
 8002958:	613b      	str	r3, [r7, #16]
 800295a:	617a      	str	r2, [r7, #20]
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002962:	f04f 0b00 	mov.w	fp, #0
 8002966:	4652      	mov	r2, sl
 8002968:	465b      	mov	r3, fp
 800296a:	f04f 0000 	mov.w	r0, #0
 800296e:	f04f 0100 	mov.w	r1, #0
 8002972:	0159      	lsls	r1, r3, #5
 8002974:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002978:	0150      	lsls	r0, r2, #5
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	ebb2 080a 	subs.w	r8, r2, sl
 8002982:	eb63 090b 	sbc.w	r9, r3, fp
 8002986:	f04f 0200 	mov.w	r2, #0
 800298a:	f04f 0300 	mov.w	r3, #0
 800298e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002992:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002996:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800299a:	ebb2 0408 	subs.w	r4, r2, r8
 800299e:	eb63 0509 	sbc.w	r5, r3, r9
 80029a2:	f04f 0200 	mov.w	r2, #0
 80029a6:	f04f 0300 	mov.w	r3, #0
 80029aa:	00eb      	lsls	r3, r5, #3
 80029ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029b0:	00e2      	lsls	r2, r4, #3
 80029b2:	4614      	mov	r4, r2
 80029b4:	461d      	mov	r5, r3
 80029b6:	eb14 030a 	adds.w	r3, r4, sl
 80029ba:	603b      	str	r3, [r7, #0]
 80029bc:	eb45 030b 	adc.w	r3, r5, fp
 80029c0:	607b      	str	r3, [r7, #4]
 80029c2:	f04f 0200 	mov.w	r2, #0
 80029c6:	f04f 0300 	mov.w	r3, #0
 80029ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029ce:	4629      	mov	r1, r5
 80029d0:	028b      	lsls	r3, r1, #10
 80029d2:	4621      	mov	r1, r4
 80029d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029d8:	4621      	mov	r1, r4
 80029da:	028a      	lsls	r2, r1, #10
 80029dc:	4610      	mov	r0, r2
 80029de:	4619      	mov	r1, r3
 80029e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029e2:	2200      	movs	r2, #0
 80029e4:	60bb      	str	r3, [r7, #8]
 80029e6:	60fa      	str	r2, [r7, #12]
 80029e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029ec:	f7fd fbf4 	bl	80001d8 <__aeabi_uldivmod>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	4613      	mov	r3, r2
 80029f6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029f8:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x180>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	0c1b      	lsrs	r3, r3, #16
 80029fe:	f003 0303 	and.w	r3, r3, #3
 8002a02:	3301      	adds	r3, #1
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002a08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a10:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a12:	e002      	b.n	8002a1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a14:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x184>)
 8002a16:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3740      	adds	r7, #64	; 0x40
 8002a20:	46bd      	mov	sp, r7
 8002a22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a26:	bf00      	nop
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	00f42400 	.word	0x00f42400
 8002a30:	017d7840 	.word	0x017d7840

08002a34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e07b      	b.n	8002b3e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d108      	bne.n	8002a60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a56:	d009      	beq.n	8002a6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	61da      	str	r2, [r3, #28]
 8002a5e:	e005      	b.n	8002a6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d106      	bne.n	8002a8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f7fe ffe8 	bl	8001a5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2202      	movs	r2, #2
 8002a90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002aa2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002adc:	431a      	orrs	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af0:	ea42 0103 	orr.w	r1, r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	0c1b      	lsrs	r3, r3, #16
 8002b0a:	f003 0104 	and.w	r1, r3, #4
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	f003 0210 	and.w	r2, r3, #16
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	69da      	ldr	r2, [r3, #28]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b088      	sub	sp, #32
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	60f8      	str	r0, [r7, #12]
 8002b4e:	60b9      	str	r1, [r7, #8]
 8002b50:	603b      	str	r3, [r7, #0]
 8002b52:	4613      	mov	r3, r2
 8002b54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b56:	2300      	movs	r3, #0
 8002b58:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d101      	bne.n	8002b68 <HAL_SPI_Transmit+0x22>
 8002b64:	2302      	movs	r3, #2
 8002b66:	e12d      	b.n	8002dc4 <HAL_SPI_Transmit+0x27e>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b70:	f7ff f888 	bl	8001c84 <HAL_GetTick>
 8002b74:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002b76:	88fb      	ldrh	r3, [r7, #6]
 8002b78:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d002      	beq.n	8002b8c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002b86:	2302      	movs	r3, #2
 8002b88:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b8a:	e116      	b.n	8002dba <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d002      	beq.n	8002b98 <HAL_SPI_Transmit+0x52>
 8002b92:	88fb      	ldrh	r3, [r7, #6]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d102      	bne.n	8002b9e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b9c:	e10d      	b.n	8002dba <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2203      	movs	r2, #3
 8002ba2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	88fa      	ldrh	r2, [r7, #6]
 8002bb6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	88fa      	ldrh	r2, [r7, #6]
 8002bbc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002be4:	d10f      	bne.n	8002c06 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bf4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c04:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c10:	2b40      	cmp	r3, #64	; 0x40
 8002c12:	d007      	beq.n	8002c24 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c22:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c2c:	d14f      	bne.n	8002cce <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d002      	beq.n	8002c3c <HAL_SPI_Transmit+0xf6>
 8002c36:	8afb      	ldrh	r3, [r7, #22]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d142      	bne.n	8002cc2 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c40:	881a      	ldrh	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4c:	1c9a      	adds	r2, r3, #2
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c60:	e02f      	b.n	8002cc2 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d112      	bne.n	8002c96 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c74:	881a      	ldrh	r2, [r3, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c80:	1c9a      	adds	r2, r3, #2
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c94:	e015      	b.n	8002cc2 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c96:	f7fe fff5 	bl	8001c84 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d803      	bhi.n	8002cae <HAL_SPI_Transmit+0x168>
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cac:	d102      	bne.n	8002cb4 <HAL_SPI_Transmit+0x16e>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d106      	bne.n	8002cc2 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002cc0:	e07b      	b.n	8002dba <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1ca      	bne.n	8002c62 <HAL_SPI_Transmit+0x11c>
 8002ccc:	e050      	b.n	8002d70 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d002      	beq.n	8002cdc <HAL_SPI_Transmit+0x196>
 8002cd6:	8afb      	ldrh	r3, [r7, #22]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d144      	bne.n	8002d66 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	330c      	adds	r3, #12
 8002ce6:	7812      	ldrb	r2, [r2, #0]
 8002ce8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	1c5a      	adds	r2, r3, #1
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002d02:	e030      	b.n	8002d66 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d113      	bne.n	8002d3a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	330c      	adds	r3, #12
 8002d1c:	7812      	ldrb	r2, [r2, #0]
 8002d1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d24:	1c5a      	adds	r2, r3, #1
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d38:	e015      	b.n	8002d66 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d3a:	f7fe ffa3 	bl	8001c84 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d803      	bhi.n	8002d52 <HAL_SPI_Transmit+0x20c>
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d50:	d102      	bne.n	8002d58 <HAL_SPI_Transmit+0x212>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d106      	bne.n	8002d66 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002d64:	e029      	b.n	8002dba <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1c9      	bne.n	8002d04 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	6839      	ldr	r1, [r7, #0]
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 f8b1 	bl	8002edc <SPI_EndRxTxTransaction>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d002      	beq.n	8002d86 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2220      	movs	r2, #32
 8002d84:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10a      	bne.n	8002da4 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d8e:	2300      	movs	r3, #0
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	613b      	str	r3, [r7, #16]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	613b      	str	r3, [r7, #16]
 8002da2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d002      	beq.n	8002db2 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	77fb      	strb	r3, [r7, #31]
 8002db0:	e003      	b.n	8002dba <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002dc2:	7ffb      	ldrb	r3, [r7, #31]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3720      	adds	r7, #32
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b088      	sub	sp, #32
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ddc:	f7fe ff52 	bl	8001c84 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de4:	1a9b      	subs	r3, r3, r2
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	4413      	add	r3, r2
 8002dea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002dec:	f7fe ff4a 	bl	8001c84 <HAL_GetTick>
 8002df0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002df2:	4b39      	ldr	r3, [pc, #228]	; (8002ed8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	015b      	lsls	r3, r3, #5
 8002df8:	0d1b      	lsrs	r3, r3, #20
 8002dfa:	69fa      	ldr	r2, [r7, #28]
 8002dfc:	fb02 f303 	mul.w	r3, r2, r3
 8002e00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e02:	e054      	b.n	8002eae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e0a:	d050      	beq.n	8002eae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e0c:	f7fe ff3a 	bl	8001c84 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	69fa      	ldr	r2, [r7, #28]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d902      	bls.n	8002e22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d13d      	bne.n	8002e9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e3a:	d111      	bne.n	8002e60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e44:	d004      	beq.n	8002e50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e4e:	d107      	bne.n	8002e60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e68:	d10f      	bne.n	8002e8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e78:	601a      	str	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e017      	b.n	8002ece <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	68ba      	ldr	r2, [r7, #8]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	bf0c      	ite	eq
 8002ebe:	2301      	moveq	r3, #1
 8002ec0:	2300      	movne	r3, #0
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	79fb      	ldrb	r3, [r7, #7]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d19b      	bne.n	8002e04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3720      	adds	r7, #32
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20000024 	.word	0x20000024

08002edc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b088      	sub	sp, #32
 8002ee0:	af02      	add	r7, sp, #8
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	2102      	movs	r1, #2
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f7ff ff6a 	bl	8002dcc <SPI_WaitFlagStateUntilTimeout>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d007      	beq.n	8002f0e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f02:	f043 0220 	orr.w	r2, r3, #32
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e032      	b.n	8002f74 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002f0e:	4b1b      	ldr	r3, [pc, #108]	; (8002f7c <SPI_EndRxTxTransaction+0xa0>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a1b      	ldr	r2, [pc, #108]	; (8002f80 <SPI_EndRxTxTransaction+0xa4>)
 8002f14:	fba2 2303 	umull	r2, r3, r2, r3
 8002f18:	0d5b      	lsrs	r3, r3, #21
 8002f1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f1e:	fb02 f303 	mul.w	r3, r2, r3
 8002f22:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f2c:	d112      	bne.n	8002f54 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2200      	movs	r2, #0
 8002f36:	2180      	movs	r1, #128	; 0x80
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f7ff ff47 	bl	8002dcc <SPI_WaitFlagStateUntilTimeout>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d016      	beq.n	8002f72 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f48:	f043 0220 	orr.w	r2, r3, #32
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e00f      	b.n	8002f74 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00a      	beq.n	8002f70 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f6a:	2b80      	cmp	r3, #128	; 0x80
 8002f6c:	d0f2      	beq.n	8002f54 <SPI_EndRxTxTransaction+0x78>
 8002f6e:	e000      	b.n	8002f72 <SPI_EndRxTxTransaction+0x96>
        break;
 8002f70:	bf00      	nop
  }

  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3718      	adds	r7, #24
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	20000024 	.word	0x20000024
 8002f80:	165e9f81 	.word	0x165e9f81

08002f84 <memset>:
 8002f84:	4402      	add	r2, r0
 8002f86:	4603      	mov	r3, r0
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d100      	bne.n	8002f8e <memset+0xa>
 8002f8c:	4770      	bx	lr
 8002f8e:	f803 1b01 	strb.w	r1, [r3], #1
 8002f92:	e7f9      	b.n	8002f88 <memset+0x4>

08002f94 <__libc_init_array>:
 8002f94:	b570      	push	{r4, r5, r6, lr}
 8002f96:	4d0d      	ldr	r5, [pc, #52]	; (8002fcc <__libc_init_array+0x38>)
 8002f98:	4c0d      	ldr	r4, [pc, #52]	; (8002fd0 <__libc_init_array+0x3c>)
 8002f9a:	1b64      	subs	r4, r4, r5
 8002f9c:	10a4      	asrs	r4, r4, #2
 8002f9e:	2600      	movs	r6, #0
 8002fa0:	42a6      	cmp	r6, r4
 8002fa2:	d109      	bne.n	8002fb8 <__libc_init_array+0x24>
 8002fa4:	4d0b      	ldr	r5, [pc, #44]	; (8002fd4 <__libc_init_array+0x40>)
 8002fa6:	4c0c      	ldr	r4, [pc, #48]	; (8002fd8 <__libc_init_array+0x44>)
 8002fa8:	f000 f818 	bl	8002fdc <_init>
 8002fac:	1b64      	subs	r4, r4, r5
 8002fae:	10a4      	asrs	r4, r4, #2
 8002fb0:	2600      	movs	r6, #0
 8002fb2:	42a6      	cmp	r6, r4
 8002fb4:	d105      	bne.n	8002fc2 <__libc_init_array+0x2e>
 8002fb6:	bd70      	pop	{r4, r5, r6, pc}
 8002fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fbc:	4798      	blx	r3
 8002fbe:	3601      	adds	r6, #1
 8002fc0:	e7ee      	b.n	8002fa0 <__libc_init_array+0xc>
 8002fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fc6:	4798      	blx	r3
 8002fc8:	3601      	adds	r6, #1
 8002fca:	e7f2      	b.n	8002fb2 <__libc_init_array+0x1e>
 8002fcc:	0800b61c 	.word	0x0800b61c
 8002fd0:	0800b61c 	.word	0x0800b61c
 8002fd4:	0800b61c 	.word	0x0800b61c
 8002fd8:	0800b620 	.word	0x0800b620

08002fdc <_init>:
 8002fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fde:	bf00      	nop
 8002fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fe2:	bc08      	pop	{r3}
 8002fe4:	469e      	mov	lr, r3
 8002fe6:	4770      	bx	lr

08002fe8 <_fini>:
 8002fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fea:	bf00      	nop
 8002fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fee:	bc08      	pop	{r3}
 8002ff0:	469e      	mov	lr, r3
 8002ff2:	4770      	bx	lr
