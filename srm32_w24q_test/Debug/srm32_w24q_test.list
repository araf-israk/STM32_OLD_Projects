
srm32_w24q_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003008  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080031a8  080031a8  000131a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003210  08003210  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003210  08003210  00013210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003218  08003218  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003218  08003218  00013218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800321c  0800321c  0001321c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003220  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  20000070  08003290  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08003290  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000065d2  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001588  00000000  00000000  000266b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006d8  00000000  00000000  00027c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000050d  00000000  00000000  00028318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015648  00000000  00000000  00028825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007e49  00000000  00000000  0003de6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084a52  00000000  00000000  00045cb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001f98  00000000  00000000  000ca708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000cc6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003190 	.word	0x08003190

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003190 	.word	0x08003190

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800057e:	b08b      	sub	sp, #44	; 0x2c
 8000580:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000582:	f000 fc63 	bl	8000e4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000586:	f000 f849 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058a:	f000 f8e5 	bl	8000758 <MX_GPIO_Init>
  MX_SPI1_Init();
 800058e:	f000 f8ad 	bl	80006ec <MX_SPI1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  if(!Flash_Init()){
 8000592:	f000 fbf3 	bl	8000d7c <Flash_Init>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d100      	bne.n	800059e <main+0x22>
	  while(1){}
 800059c:	e7fe      	b.n	800059c <main+0x20>

  //Flash_ChipErase();

  while (1)
  {
    sprintf(mess, "min %d %d %d %d %d %d %d %d %d %d", sensor_data[0],sensor_data[1],sensor_data[2],sensor_data[3],sensor_data[4],sensor_data[5],sensor_data[6],sensor_data[7], sensor_data[8], sensor_data[9]);
 800059e:	4b1b      	ldr	r3, [pc, #108]	; (800060c <main+0x90>)
 80005a0:	881b      	ldrh	r3, [r3, #0]
 80005a2:	469c      	mov	ip, r3
 80005a4:	4b19      	ldr	r3, [pc, #100]	; (800060c <main+0x90>)
 80005a6:	885b      	ldrh	r3, [r3, #2]
 80005a8:	469e      	mov	lr, r3
 80005aa:	4b18      	ldr	r3, [pc, #96]	; (800060c <main+0x90>)
 80005ac:	889b      	ldrh	r3, [r3, #4]
 80005ae:	461a      	mov	r2, r3
 80005b0:	4b16      	ldr	r3, [pc, #88]	; (800060c <main+0x90>)
 80005b2:	88db      	ldrh	r3, [r3, #6]
 80005b4:	4619      	mov	r1, r3
 80005b6:	4b15      	ldr	r3, [pc, #84]	; (800060c <main+0x90>)
 80005b8:	891b      	ldrh	r3, [r3, #8]
 80005ba:	4618      	mov	r0, r3
 80005bc:	4b13      	ldr	r3, [pc, #76]	; (800060c <main+0x90>)
 80005be:	895b      	ldrh	r3, [r3, #10]
 80005c0:	461c      	mov	r4, r3
 80005c2:	4b12      	ldr	r3, [pc, #72]	; (800060c <main+0x90>)
 80005c4:	899b      	ldrh	r3, [r3, #12]
 80005c6:	461d      	mov	r5, r3
 80005c8:	4b10      	ldr	r3, [pc, #64]	; (800060c <main+0x90>)
 80005ca:	89db      	ldrh	r3, [r3, #14]
 80005cc:	461e      	mov	r6, r3
 80005ce:	4b0f      	ldr	r3, [pc, #60]	; (800060c <main+0x90>)
 80005d0:	8a1b      	ldrh	r3, [r3, #16]
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	4b0d      	ldr	r3, [pc, #52]	; (800060c <main+0x90>)
 80005d6:	8a5b      	ldrh	r3, [r3, #18]
 80005d8:	9307      	str	r3, [sp, #28]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	9306      	str	r3, [sp, #24]
 80005de:	9605      	str	r6, [sp, #20]
 80005e0:	9504      	str	r5, [sp, #16]
 80005e2:	9403      	str	r4, [sp, #12]
 80005e4:	9002      	str	r0, [sp, #8]
 80005e6:	9101      	str	r1, [sp, #4]
 80005e8:	9200      	str	r2, [sp, #0]
 80005ea:	4673      	mov	r3, lr
 80005ec:	4662      	mov	r2, ip
 80005ee:	4908      	ldr	r1, [pc, #32]	; (8000610 <main+0x94>)
 80005f0:	4808      	ldr	r0, [pc, #32]	; (8000614 <main+0x98>)
 80005f2:	f002 f929 	bl	8002848 <siprintf>
	Flash_Write(0, mess, 130);
 80005f6:	2282      	movs	r2, #130	; 0x82
 80005f8:	4906      	ldr	r1, [pc, #24]	; (8000614 <main+0x98>)
 80005fa:	2000      	movs	r0, #0
 80005fc:	f000 fac5 	bl	8000b8a <Flash_Write>

	Flash_Read(0, readmess, 130);
 8000600:	2282      	movs	r2, #130	; 0x82
 8000602:	4905      	ldr	r1, [pc, #20]	; (8000618 <main+0x9c>)
 8000604:	2000      	movs	r0, #0
 8000606:	f000 fa5b 	bl	8000ac0 <Flash_Read>
  {
 800060a:	e7c8      	b.n	800059e <main+0x22>
 800060c:	20000000 	.word	0x20000000
 8000610:	080031a8 	.word	0x080031a8
 8000614:	200000e4 	.word	0x200000e4
 8000618:	20000168 	.word	0x20000168

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	; 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f002 f92c 	bl	8002888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b27      	ldr	r3, [pc, #156]	; (80006e4 <SystemClock_Config+0xc8>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a26      	ldr	r2, [pc, #152]	; (80006e4 <SystemClock_Config+0xc8>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b24      	ldr	r3, [pc, #144]	; (80006e4 <SystemClock_Config+0xc8>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <SystemClock_Config+0xcc>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemClock_Config+0xcc>)
 8000666:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <SystemClock_Config+0xcc>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000678:	2301      	movs	r3, #1
 800067a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800067c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000680:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000682:	2302      	movs	r3, #2
 8000684:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000686:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800068a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800068c:	230c      	movs	r3, #12
 800068e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000690:	2360      	movs	r3, #96	; 0x60
 8000692:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000694:	2302      	movs	r3, #2
 8000696:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000698:	2304      	movs	r3, #4
 800069a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 0320 	add.w	r3, r7, #32
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 ff05 	bl	80014b0 <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006ac:	f000 f8bc 	bl	8000828 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	230f      	movs	r3, #15
 80006b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b4:	2302      	movs	r3, #2
 80006b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006c6:	f107 030c 	add.w	r3, r7, #12
 80006ca:	2103      	movs	r1, #3
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 f967 	bl	80019a0 <HAL_RCC_ClockConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006d8:	f000 f8a6 	bl	8000828 <Error_Handler>
  }
}
 80006dc:	bf00      	nop
 80006de:	3750      	adds	r7, #80	; 0x50
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006f0:	4b17      	ldr	r3, [pc, #92]	; (8000750 <MX_SPI1_Init+0x64>)
 80006f2:	4a18      	ldr	r2, [pc, #96]	; (8000754 <MX_SPI1_Init+0x68>)
 80006f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006f6:	4b16      	ldr	r3, [pc, #88]	; (8000750 <MX_SPI1_Init+0x64>)
 80006f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006fe:	4b14      	ldr	r3, [pc, #80]	; (8000750 <MX_SPI1_Init+0x64>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000704:	4b12      	ldr	r3, [pc, #72]	; (8000750 <MX_SPI1_Init+0x64>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_SPI1_Init+0x64>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_SPI1_Init+0x64>)
 8000712:	2200      	movs	r2, #0
 8000714:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_SPI1_Init+0x64>)
 8000718:	f44f 7200 	mov.w	r2, #512	; 0x200
 800071c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800071e:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_SPI1_Init+0x64>)
 8000720:	2200      	movs	r2, #0
 8000722:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000724:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <MX_SPI1_Init+0x64>)
 8000726:	2200      	movs	r2, #0
 8000728:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_SPI1_Init+0x64>)
 800072c:	2200      	movs	r2, #0
 800072e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000730:	4b07      	ldr	r3, [pc, #28]	; (8000750 <MX_SPI1_Init+0x64>)
 8000732:	2200      	movs	r2, #0
 8000734:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_SPI1_Init+0x64>)
 8000738:	220a      	movs	r2, #10
 800073a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800073c:	4804      	ldr	r0, [pc, #16]	; (8000750 <MX_SPI1_Init+0x64>)
 800073e:	f001 fadb 	bl	8001cf8 <HAL_SPI_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000748:	f000 f86e 	bl	8000828 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	2000008c 	.word	0x2000008c
 8000754:	40013000 	.word	0x40013000

08000758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 030c 	add.w	r3, r7, #12
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	4b2a      	ldr	r3, [pc, #168]	; (800081c <MX_GPIO_Init+0xc4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a29      	ldr	r2, [pc, #164]	; (800081c <MX_GPIO_Init+0xc4>)
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b27      	ldr	r3, [pc, #156]	; (800081c <MX_GPIO_Init+0xc4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b23      	ldr	r3, [pc, #140]	; (800081c <MX_GPIO_Init+0xc4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a22      	ldr	r2, [pc, #136]	; (800081c <MX_GPIO_Init+0xc4>)
 8000794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b20      	ldr	r3, [pc, #128]	; (800081c <MX_GPIO_Init+0xc4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	603b      	str	r3, [r7, #0]
 80007aa:	4b1c      	ldr	r3, [pc, #112]	; (800081c <MX_GPIO_Init+0xc4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a1b      	ldr	r2, [pc, #108]	; (800081c <MX_GPIO_Init+0xc4>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b19      	ldr	r3, [pc, #100]	; (800081c <MX_GPIO_Init+0xc4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007c8:	4815      	ldr	r0, [pc, #84]	; (8000820 <MX_GPIO_Init+0xc8>)
 80007ca:	f000 fe57 	bl	800147c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 80007ce:	2201      	movs	r2, #1
 80007d0:	2110      	movs	r1, #16
 80007d2:	4814      	ldr	r0, [pc, #80]	; (8000824 <MX_GPIO_Init+0xcc>)
 80007d4:	f000 fe52 	bl	800147c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	2301      	movs	r3, #1
 80007e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ea:	f107 030c 	add.w	r3, r7, #12
 80007ee:	4619      	mov	r1, r3
 80007f0:	480b      	ldr	r0, [pc, #44]	; (8000820 <MX_GPIO_Init+0xc8>)
 80007f2:	f000 fca7 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 80007f6:	2310      	movs	r3, #16
 80007f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000802:	2302      	movs	r3, #2
 8000804:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 030c 	add.w	r3, r7, #12
 800080a:	4619      	mov	r1, r3
 800080c:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_GPIO_Init+0xcc>)
 800080e:	f000 fc99 	bl	8001144 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000812:	bf00      	nop
 8000814:	3720      	adds	r7, #32
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40023800 	.word	0x40023800
 8000820:	40020800 	.word	0x40020800
 8000824:	40020000 	.word	0x40020000

08000828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800082c:	b672      	cpsid	i
}
 800082e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000830:	e7fe      	b.n	8000830 <Error_Handler+0x8>
	...

08000834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b10      	ldr	r3, [pc, #64]	; (8000880 <HAL_MspInit+0x4c>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000842:	4a0f      	ldr	r2, [pc, #60]	; (8000880 <HAL_MspInit+0x4c>)
 8000844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000848:	6453      	str	r3, [r2, #68]	; 0x44
 800084a:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <HAL_MspInit+0x4c>)
 800084c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <HAL_MspInit+0x4c>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	4a08      	ldr	r2, [pc, #32]	; (8000880 <HAL_MspInit+0x4c>)
 8000860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000864:	6413      	str	r3, [r2, #64]	; 0x40
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <HAL_MspInit+0x4c>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800

08000884 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08a      	sub	sp, #40	; 0x28
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a19      	ldr	r2, [pc, #100]	; (8000908 <HAL_SPI_MspInit+0x84>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d12b      	bne.n	80008fe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
 80008aa:	4b18      	ldr	r3, [pc, #96]	; (800090c <HAL_SPI_MspInit+0x88>)
 80008ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ae:	4a17      	ldr	r2, [pc, #92]	; (800090c <HAL_SPI_MspInit+0x88>)
 80008b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008b4:	6453      	str	r3, [r2, #68]	; 0x44
 80008b6:	4b15      	ldr	r3, [pc, #84]	; (800090c <HAL_SPI_MspInit+0x88>)
 80008b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008be:	613b      	str	r3, [r7, #16]
 80008c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <HAL_SPI_MspInit+0x88>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a10      	ldr	r2, [pc, #64]	; (800090c <HAL_SPI_MspInit+0x88>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <HAL_SPI_MspInit+0x88>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = FLASH_SCK_Pin|FLASH_MISO_Pin|FLASH_MOSI_Pin;
 80008de:	23e0      	movs	r3, #224	; 0xe0
 80008e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e2:	2302      	movs	r3, #2
 80008e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ea:	2303      	movs	r3, #3
 80008ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008ee:	2305      	movs	r3, #5
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	4805      	ldr	r0, [pc, #20]	; (8000910 <HAL_SPI_MspInit+0x8c>)
 80008fa:	f000 fc23 	bl	8001144 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80008fe:	bf00      	nop
 8000900:	3728      	adds	r7, #40	; 0x28
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40013000 	.word	0x40013000
 800090c:	40023800 	.word	0x40023800
 8000910:	40020000 	.word	0x40020000

08000914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <NMI_Handler+0x4>

0800091a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <HardFault_Handler+0x4>

08000920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <MemManage_Handler+0x4>

08000926 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800092a:	e7fe      	b.n	800092a <BusFault_Handler+0x4>

0800092c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <UsageFault_Handler+0x4>

08000932 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr

0800094e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000960:	f000 fac6 	bl	8000ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}

08000968 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000970:	4a14      	ldr	r2, [pc, #80]	; (80009c4 <_sbrk+0x5c>)
 8000972:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <_sbrk+0x60>)
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800097c:	4b13      	ldr	r3, [pc, #76]	; (80009cc <_sbrk+0x64>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d102      	bne.n	800098a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000984:	4b11      	ldr	r3, [pc, #68]	; (80009cc <_sbrk+0x64>)
 8000986:	4a12      	ldr	r2, [pc, #72]	; (80009d0 <_sbrk+0x68>)
 8000988:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <_sbrk+0x64>)
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4413      	add	r3, r2
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	429a      	cmp	r2, r3
 8000996:	d207      	bcs.n	80009a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000998:	f001 ff7e 	bl	8002898 <__errno>
 800099c:	4603      	mov	r3, r0
 800099e:	220c      	movs	r2, #12
 80009a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009a2:	f04f 33ff 	mov.w	r3, #4294967295
 80009a6:	e009      	b.n	80009bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009a8:	4b08      	ldr	r3, [pc, #32]	; (80009cc <_sbrk+0x64>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ae:	4b07      	ldr	r3, [pc, #28]	; (80009cc <_sbrk+0x64>)
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4413      	add	r3, r2
 80009b6:	4a05      	ldr	r2, [pc, #20]	; (80009cc <_sbrk+0x64>)
 80009b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ba:	68fb      	ldr	r3, [r7, #12]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3718      	adds	r7, #24
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20020000 	.word	0x20020000
 80009c8:	00000400 	.word	0x00000400
 80009cc:	200001ec 	.word	0x200001ec
 80009d0:	20000340 	.word	0x20000340

080009d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <SystemInit+0x20>)
 80009da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009de:	4a05      	ldr	r2, [pc, #20]	; (80009f4 <SystemInit+0x20>)
 80009e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <Flash_Select>:
 * 			So testing CS pin let understand if a
 * 			transmission is still running:
 * 			before selecting chip a test over the same CS let
 * 			understand if previous transmission terminated
 ******************************************/
void Flash_Select(void) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
		while (SPI_IS_BUSY) {}
 80009fc:	bf00      	nop
 80009fe:	2110      	movs	r1, #16
 8000a00:	4806      	ldr	r0, [pc, #24]	; (8000a1c <Flash_Select+0x24>)
 8000a02:	f000 fd23 	bl	800144c <HAL_GPIO_ReadPin>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d0f8      	beq.n	80009fe <Flash_Select+0x6>
		HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2110      	movs	r1, #16
 8000a10:	4802      	ldr	r0, [pc, #8]	; (8000a1c <Flash_Select+0x24>)
 8000a12:	f000 fd33 	bl	800147c <HAL_GPIO_WritePin>
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40020000 	.word	0x40020000

08000a20 <Flash_UnSelect>:

/******************************************
 * @brief	disable Flash SPI
 * 			verifying that there is no a running data transfer
 ******************************************/
void Flash_UnSelect(void) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	// CS pin must be low (selected flash) until previous transmission is completed
#ifdef	EXT_FLASH_SPI_POLLING_MODE
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);	//unselect
 8000a24:	2201      	movs	r2, #1
 8000a26:	2110      	movs	r1, #16
 8000a28:	4802      	ldr	r0, [pc, #8]	; (8000a34 <Flash_UnSelect+0x14>)
 8000a2a:	f000 fd27 	bl	800147c <HAL_GPIO_WritePin>
#endif  // FLASH_SPI_POLLING_MODE
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40020000 	.word	0x40020000

08000a38 <Flash_Receive>:




void Flash_Receive(uint8_t* data, uint16_t dataSize){
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	460b      	mov	r3, r1
 8000a42:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive (&FLASH_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
 8000a44:	887a      	ldrh	r2, [r7, #2]
 8000a46:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4a:	6879      	ldr	r1, [r7, #4]
 8000a4c:	4803      	ldr	r0, [pc, #12]	; (8000a5c <Flash_Receive+0x24>)
 8000a4e:	f001 fb18 	bl	8002082 <HAL_SPI_Receive>
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	2000008c 	.word	0x2000008c

08000a60 <Flash_Transmit>:
 * 			you need to set this macro even using TouchGFX (having its own configuration parameter:
 * 			set DISPL_DMA_CUTOFF and CubeMX parameter to the same value)
 * @PARAM	data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 **************************/
void Flash_Transmit(uint8_t* data, uint16_t dataSize){
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	460b      	mov	r3, r1
 8000a6a:	807b      	strh	r3, [r7, #2]
#ifndef	EXT_FLASH_SPI_POLLING_MODE
	if (dataSize<EXT_FLASH_DMA_CUTOFF) {
#endif //FLASH_SPI_POLLING_MODE
		HAL_SPI_Transmit(&FLASH_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
 8000a6c:	887a      	ldrh	r2, [r7, #2]
 8000a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a72:	6879      	ldr	r1, [r7, #4]
 8000a74:	4803      	ldr	r0, [pc, #12]	; (8000a84 <Flash_Transmit+0x24>)
 8000a76:	f001 f9c8 	bl	8001e0a <HAL_SPI_Transmit>
#ifndef	EXT_FLASH_SPI_POLLING_MODE
	} else {
		HAL_SPI_Transmit_DMA(&EXT_FLASH_SPI_PORT , data, dataSize);
	}
#endif  //FLASH_SPI_POLLING_MODE
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	2000008c 	.word	0x2000008c

08000a88 <Flash_WaitForWritingComplete>:
/**************************
 * @BRIEF	keeps looping inside this function until "BUSY" bit in SR1 register
 * 			becomes 0, meaning that the runnin data operation (writing or erasing)
 * 			on the chip, ended
 **************************/
void Flash_WaitForWritingComplete(){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
uint8_t buffer[1];
	Flash_Select();
 8000a8e:	f7ff ffb3 	bl	80009f8 <Flash_Select>
	buffer[0] = W25_R_SR1;
 8000a92:	2305      	movs	r3, #5
 8000a94:	713b      	strb	r3, [r7, #4]
	Flash_Transmit(buffer, 1);
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	2101      	movs	r1, #1
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff ffe0 	bl	8000a60 <Flash_Transmit>
	do {
		Flash_Receive(buffer, 1);  //SR1 is repeteadly sent until Flash is selected
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff ffc7 	bl	8000a38 <Flash_Receive>
	} while (buffer[0] & SR1_BIT_BUSY);
 8000aaa:	793b      	ldrb	r3, [r7, #4]
 8000aac:	f003 0301 	and.w	r3, r3, #1
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d1f5      	bne.n	8000aa0 <Flash_WaitForWritingComplete+0x18>
	Flash_UnSelect();
 8000ab4:	f7ff ffb4 	bl	8000a20 <Flash_UnSelect>
}
 8000ab8:	bf00      	nop
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <Flash_Read>:
 * 			current version of library doesn't need it
 * @PARAM	addr		EEPROM address to start reading
 *  		data		buffer to fill with read data
 * 			dataSize	number of bytes to read
 **************************/
void Flash_Read(uint32_t addr, uint8_t* data, uint32_t dataSize){
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
uint16_t data_to_transfer;
uint8_t buffer[5];

	buffer[0] = FLASH_READ_COMMAND;
 8000acc:	2303      	movs	r3, #3
 8000ace:	743b      	strb	r3, [r7, #16]
	buffer[1] = (addr >> 16) & 0xFF;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	0c1b      	lsrs	r3, r3, #16
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	747b      	strb	r3, [r7, #17]
	buffer[2] = (addr >> 8) & 0xFF;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	0a1b      	lsrs	r3, r3, #8
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	74bb      	strb	r3, [r7, #18]
	buffer[3] = addr & 0xFF;
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	74fb      	strb	r3, [r7, #19]
	buffer[4] = W25_DUMMY;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	753b      	strb	r3, [r7, #20]
	Flash_Select();
 8000aea:	f7ff ff85 	bl	80009f8 <Flash_Select>
	Flash_Transmit(buffer, (FLASH_READ_COMMAND == W25_READ ? 4 : 5));  // "normal/slow" read command doesn't need sending dummy byte
 8000aee:	f107 0310 	add.w	r3, r7, #16
 8000af2:	2104      	movs	r1, #4
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff ffb3 	bl	8000a60 <Flash_Transmit>

	// dataSize is 32 bit, spi_receive handles 16bit transfers, so I have to loop...
	while (dataSize) {
 8000afa:	e016      	b.n	8000b2a <Flash_Read+0x6a>
		data_to_transfer = ((dataSize>0xFFFF) ? 0xFFFF : (uint16_t)dataSize);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b02:	d202      	bcs.n	8000b0a <Flash_Read+0x4a>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	e001      	b.n	8000b0e <Flash_Read+0x4e>
 8000b0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b0e:	82fb      	strh	r3, [r7, #22]
		Flash_Receive(data, data_to_transfer);
 8000b10:	8afb      	ldrh	r3, [r7, #22]
 8000b12:	4619      	mov	r1, r3
 8000b14:	68b8      	ldr	r0, [r7, #8]
 8000b16:	f7ff ff8f 	bl	8000a38 <Flash_Receive>
		data+=data_to_transfer;
 8000b1a:	8afb      	ldrh	r3, [r7, #22]
 8000b1c:	68ba      	ldr	r2, [r7, #8]
 8000b1e:	4413      	add	r3, r2
 8000b20:	60bb      	str	r3, [r7, #8]
		dataSize-=data_to_transfer;
 8000b22:	8afb      	ldrh	r3, [r7, #22]
 8000b24:	687a      	ldr	r2, [r7, #4]
 8000b26:	1ad3      	subs	r3, r2, r3
 8000b28:	607b      	str	r3, [r7, #4]
	while (dataSize) {
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d1e5      	bne.n	8000afc <Flash_Read+0x3c>
	}
	Flash_UnSelect();
 8000b30:	f7ff ff76 	bl	8000a20 <Flash_UnSelect>
}
 8000b34:	bf00      	nop
 8000b36:	3718      	adds	r7, #24
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <Flash_SimpleWriteAPage>:
 * 			function doesn't check for the EEPROM page boundary override
 * @PARAM	addr		EEPROM address to start writing
 *  		data		buffer containing data to write into EEPROM
 * 			dataSize	number of bytes to write
 ***********************************************************************/
void Flash_SimpleWriteAPage(uint32_t addr, uint8_t* data, uint16_t dataSize){
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	4613      	mov	r3, r2
 8000b48:	80fb      	strh	r3, [r7, #6]
uint8_t buffer[4];
	buffer[0] = W25_PAGE_P;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	753b      	strb	r3, [r7, #20]
	buffer[1] = (addr >> 16) & 0xFF;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	0c1b      	lsrs	r3, r3, #16
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	757b      	strb	r3, [r7, #21]
	buffer[2] = (addr >> 8) & 0xFF;
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	0a1b      	lsrs	r3, r3, #8
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	75bb      	strb	r3, [r7, #22]
	buffer[3] = addr & 0xFF;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	75fb      	strb	r3, [r7, #23]
	Flash_Select();
 8000b64:	f7ff ff48 	bl	80009f8 <Flash_Select>
	Flash_Transmit(buffer, 4);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	2104      	movs	r1, #4
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff ff76 	bl	8000a60 <Flash_Transmit>
	Flash_Transmit(data, dataSize);
 8000b74:	88fb      	ldrh	r3, [r7, #6]
 8000b76:	4619      	mov	r1, r3
 8000b78:	68b8      	ldr	r0, [r7, #8]
 8000b7a:	f7ff ff71 	bl	8000a60 <Flash_Transmit>
	Flash_UnSelect();
 8000b7e:	f7ff ff4f 	bl	8000a20 <Flash_UnSelect>
}
 8000b82:	bf00      	nop
 8000b84:	3718      	adds	r7, #24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <Flash_Write>:
 * 			and waiting the writing complete each time
 * @PARAM	addr		EEPROM address to start writing
 *  		data		buffer containing data to write into EEPROM
 * 			dataSize	number of bytes to write
 ***********************************************************************/
void Flash_Write(uint32_t addr, uint8_t* data, uint32_t dataSize){
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b088      	sub	sp, #32
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	60f8      	str	r0, [r7, #12]
 8000b92:	60b9      	str	r1, [r7, #8]
 8000b94:	607a      	str	r2, [r7, #4]
uint8_t buffer[4];
uint16_t quota;
uint32_t inpage_addr;

	if (dataSize==0)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d054      	beq.n	8000c46 <Flash_Write+0xbc>
		return;

	// quota is the data size trasferred until now
	quota=0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	83fb      	strh	r3, [r7, #30]

	// define the starting write position inside the first Flash page to write...
	inpage_addr=addr & (EXT_FLASH_PAGE_SIZE-1);
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	61bb      	str	r3, [r7, #24]

	// ... so I can detect if more than 1 Flash page has still to be written
	while ((dataSize-quota+inpage_addr)>EXT_FLASH_PAGE_SIZE){
 8000ba6:	e025      	b.n	8000bf4 <Flash_Write+0x6a>
	//loop here inside, until more than 1 Flash page...

		Flash_Select();
 8000ba8:	f7ff ff26 	bl	80009f8 <Flash_Select>
		buffer[0] = W25_W_ENABLE;
 8000bac:	2306      	movs	r3, #6
 8000bae:	753b      	strb	r3, [r7, #20]
		Flash_Transmit(buffer, 1);
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff ff52 	bl	8000a60 <Flash_Transmit>
		Flash_UnSelect();
 8000bbc:	f7ff ff30 	bl	8000a20 <Flash_UnSelect>
		Flash_SimpleWriteAPage(addr+quota,data+quota,(EXT_FLASH_PAGE_SIZE-inpage_addr));
 8000bc0:	8bfa      	ldrh	r2, [r7, #30]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	18d0      	adds	r0, r2, r3
 8000bc6:	8bfb      	ldrh	r3, [r7, #30]
 8000bc8:	68ba      	ldr	r2, [r7, #8]
 8000bca:	18d1      	adds	r1, r2, r3
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	f7ff ffb0 	bl	8000b3c <Flash_SimpleWriteAPage>
		quota+=(EXT_FLASH_PAGE_SIZE-inpage_addr);
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	8bfa      	ldrh	r2, [r7, #30]
 8000be2:	1ad3      	subs	r3, r2, r3
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000bea:	83fb      	strh	r3, [r7, #30]
		// having aligned data to page border on the first writing
		// next writings start from 0 position inside a page
		inpage_addr=0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61bb      	str	r3, [r7, #24]
		Flash_WaitForWritingComplete();
 8000bf0:	f7ff ff4a 	bl	8000a88 <Flash_WaitForWritingComplete>
	while ((dataSize-quota+inpage_addr)>EXT_FLASH_PAGE_SIZE){
 8000bf4:	8bfb      	ldrh	r3, [r7, #30]
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	1ad2      	subs	r2, r2, r3
 8000bfa:	69bb      	ldr	r3, [r7, #24]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c02:	d8d1      	bhi.n	8000ba8 <Flash_Write+0x1e>
	}
	// now just the final Flash page...
	if (dataSize-quota) {
 8000c04:	8bfb      	ldrh	r3, [r7, #30]
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d01d      	beq.n	8000c48 <Flash_Write+0xbe>
		Flash_Select();
 8000c0c:	f7ff fef4 	bl	80009f8 <Flash_Select>
		buffer[0] = W25_W_ENABLE;
 8000c10:	2306      	movs	r3, #6
 8000c12:	753b      	strb	r3, [r7, #20]
		Flash_Transmit(buffer, 1);
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	2101      	movs	r1, #1
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff ff20 	bl	8000a60 <Flash_Transmit>
		Flash_UnSelect();
 8000c20:	f7ff fefe 	bl	8000a20 <Flash_UnSelect>
		Flash_SimpleWriteAPage(addr+quota,data+quota,dataSize-quota);
 8000c24:	8bfa      	ldrh	r2, [r7, #30]
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	18d0      	adds	r0, r2, r3
 8000c2a:	8bfb      	ldrh	r3, [r7, #30]
 8000c2c:	68ba      	ldr	r2, [r7, #8]
 8000c2e:	18d1      	adds	r1, r2, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	b29a      	uxth	r2, r3
 8000c34:	8bfb      	ldrh	r3, [r7, #30]
 8000c36:	1ad3      	subs	r3, r2, r3
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	f7ff ff7e 	bl	8000b3c <Flash_SimpleWriteAPage>
		Flash_WaitForWritingComplete();
 8000c40:	f7ff ff22 	bl	8000a88 <Flash_WaitForWritingComplete>
 8000c44:	e000      	b.n	8000c48 <Flash_Write+0xbe>
		return;
 8000c46:	bf00      	nop
	}
}
 8000c48:	3720      	adds	r7, #32
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <Flash_ReadJedecID>:
 * 			10H ->	 5Mb		11H ->  10Mb		12H ->  20Mb
 * 			13H ->  40Mb		14H ->  80Mb		15H ->  16Mb
 * 			16H ->  32Mb		17H ->  64Mb		18H -> 128Mb
 * 			19H -> 256Mb		20H -> 512Mb		21H ->   1Gb
 ******************************************************************/
uint32_t Flash_ReadJedecID() {
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b084      	sub	sp, #16
 8000c52:	af00      	add	r7, sp, #0
uint8_t buffer[4];
uint8_t data[3];
uint32_t result;

	buffer[0] = W25_JEDEC_ID;
 8000c54:	239f      	movs	r3, #159	; 0x9f
 8000c56:	723b      	strb	r3, [r7, #8]
	Flash_Select();
 8000c58:	f7ff fece 	bl	80009f8 <Flash_Select>
	Flash_Transmit(buffer, 1);
 8000c5c:	f107 0308 	add.w	r3, r7, #8
 8000c60:	2101      	movs	r1, #1
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff fefc 	bl	8000a60 <Flash_Transmit>
	Flash_Receive(data, 3);
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	2103      	movs	r1, #3
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff fee3 	bl	8000a38 <Flash_Receive>
	Flash_UnSelect();
 8000c72:	f7ff fed5 	bl	8000a20 <Flash_UnSelect>
	result=((data[0]<<16) | (data[1] <<8) | data[2]);
 8000c76:	793b      	ldrb	r3, [r7, #4]
 8000c78:	041a      	lsls	r2, r3, #16
 8000c7a:	797b      	ldrb	r3, [r7, #5]
 8000c7c:	021b      	lsls	r3, r3, #8
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	79ba      	ldrb	r2, [r7, #6]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	60fb      	str	r3, [r7, #12]
	return result;
 8000c86:	68fb      	ldr	r3, [r7, #12]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3710      	adds	r7, #16
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <Flash_ReadSFDP>:


/*********************************
 * @RETURN	256byte SFDP register content:
 *********************************/
void Flash_ReadSFDP(uint8_t* data) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
uint8_t buffer[5];
	buffer[0] = W25_R_SFPD_REG;
 8000c98:	235a      	movs	r3, #90	; 0x5a
 8000c9a:	723b      	strb	r3, [r7, #8]
	for (uint8_t k=1;k<5;k++)
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	73fb      	strb	r3, [r7, #15]
 8000ca0:	e008      	b.n	8000cb4 <Flash_ReadSFDP+0x24>
		buffer[k]=0;
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
 8000ca4:	3310      	adds	r3, #16
 8000ca6:	443b      	add	r3, r7
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f803 2c08 	strb.w	r2, [r3, #-8]
	for (uint8_t k=1;k<5;k++)
 8000cae:	7bfb      	ldrb	r3, [r7, #15]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	73fb      	strb	r3, [r7, #15]
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
 8000cb6:	2b04      	cmp	r3, #4
 8000cb8:	d9f3      	bls.n	8000ca2 <Flash_ReadSFDP+0x12>
	Flash_Select();
 8000cba:	f7ff fe9d 	bl	80009f8 <Flash_Select>
	Flash_Transmit(buffer, 5);
 8000cbe:	f107 0308 	add.w	r3, r7, #8
 8000cc2:	2105      	movs	r1, #5
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fecb 	bl	8000a60 <Flash_Transmit>
	Flash_Receive(data, 256);
 8000cca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f7ff feb2 	bl	8000a38 <Flash_Receive>
	Flash_UnSelect();
 8000cd4:	f7ff fea4 	bl	8000a20 <Flash_UnSelect>
}
 8000cd8:	bf00      	nop
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <Flash_TestAvailability>:
 * 			reading SFDP record, it must return
 * 			a string beginning with "SFDP"
 * @RETURN	1 	test passed
 * 			0	no
 *********************************/
uint8_t Flash_TestAvailability() {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b0c2      	sub	sp, #264	; 0x108
 8000ce4:	af00      	add	r7, sp, #0
uint8_t data[256];
uint8_t test=1;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

	for (uint8_t k=0;k!=254;k++)
 8000cec:	2300      	movs	r3, #0
 8000cee:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
 8000cf2:	e00c      	b.n	8000d0e <Flash_TestAvailability+0x2e>
		  data[k]=0xFF;
 8000cf4:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8000cf8:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8000cfc:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000d00:	21ff      	movs	r1, #255	; 0xff
 8000d02:	54d1      	strb	r1, [r2, r3]
	for (uint8_t k=0;k!=254;k++)
 8000d04:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8000d08:	3301      	adds	r3, #1
 8000d0a:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
 8000d0e:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8000d12:	2bfe      	cmp	r3, #254	; 0xfe
 8000d14:	d1ee      	bne.n	8000cf4 <Flash_TestAvailability+0x14>
	Flash_ReadSFDP(data);
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff ffb9 	bl	8000c90 <Flash_ReadSFDP>
	if (data[0]!='S')
 8000d1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000d22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b53      	cmp	r3, #83	; 0x53
 8000d2a:	d002      	beq.n	8000d32 <Flash_TestAvailability+0x52>
		test=0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	if (data[1]!='F')
 8000d32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000d36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000d3a:	785b      	ldrb	r3, [r3, #1]
 8000d3c:	2b46      	cmp	r3, #70	; 0x46
 8000d3e:	d002      	beq.n	8000d46 <Flash_TestAvailability+0x66>
		test=0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	if (data[2]!='D')
 8000d46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000d4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000d4e:	789b      	ldrb	r3, [r3, #2]
 8000d50:	2b44      	cmp	r3, #68	; 0x44
 8000d52:	d002      	beq.n	8000d5a <Flash_TestAvailability+0x7a>
		test=0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	if (data[3]!='P')
 8000d5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000d5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000d62:	78db      	ldrb	r3, [r3, #3]
 8000d64:	2b50      	cmp	r3, #80	; 0x50
 8000d66:	d002      	beq.n	8000d6e <Flash_TestAvailability+0x8e>
		test=0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	return test;
 8000d6e:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <Flash_Init>:

/******************************************************************
 * @BRIEF	reading manufacutrer and device ID
 * 			checking if connected device is a Winbond Flash
 ******************************************************************/
uint8_t Flash_Init(){
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
uint32_t JedecID;
	HAL_Delay(6);	// supposing init is called on system startup: 5 ms (tPUW) required after power-up to be fully available
 8000d82:	2006      	movs	r0, #6
 8000d84:	f000 f8d4 	bl	8000f30 <HAL_Delay>
	Flash_Reset();
 8000d88:	f000 f816 	bl	8000db8 <Flash_Reset>
	if (!Flash_TestAvailability())
 8000d8c:	f7ff ffa8 	bl	8000ce0 <Flash_TestAvailability>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d101      	bne.n	8000d9a <Flash_Init+0x1e>
		return 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	e00a      	b.n	8000db0 <Flash_Init+0x34>
	JedecID=Flash_ReadJedecID() ;	//select the memSize byte
 8000d9a:	f7ff ff58 	bl	8000c4e <Flash_ReadJedecID>
 8000d9e:	6078      	str	r0, [r7, #4]
	if (((JedecID >> 16) & 0XFF) != 0xEF)  // if ManufacturerID is not Winbond (0xEF)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	0c1b      	lsrs	r3, r3, #16
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	2bef      	cmp	r3, #239	; 0xef
 8000da8:	d001      	beq.n	8000dae <Flash_Init+0x32>
		return 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	e000      	b.n	8000db0 <Flash_Init+0x34>
	return 1;  //return memSize as per table in Flash_ReadJedecID() definition
 8000dae:	2301      	movs	r3, #1
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <Flash_Reset>:





void Flash_Reset(){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
uint8_t command;
	command = W25_RESET_EN;
 8000dbe:	2366      	movs	r3, #102	; 0x66
 8000dc0:	71fb      	strb	r3, [r7, #7]
	Flash_Select();
 8000dc2:	f7ff fe19 	bl	80009f8 <Flash_Select>
	Flash_Transmit(&command, 1);
 8000dc6:	1dfb      	adds	r3, r7, #7
 8000dc8:	2101      	movs	r1, #1
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff fe48 	bl	8000a60 <Flash_Transmit>
	Flash_UnSelect();
 8000dd0:	f7ff fe26 	bl	8000a20 <Flash_UnSelect>
	command = W25_RESET;
 8000dd4:	2399      	movs	r3, #153	; 0x99
 8000dd6:	71fb      	strb	r3, [r7, #7]
	Flash_Select();
 8000dd8:	f7ff fe0e 	bl	80009f8 <Flash_Select>
	Flash_Transmit(&command, 1);
 8000ddc:	1dfb      	adds	r3, r7, #7
 8000dde:	2101      	movs	r1, #1
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff fe3d 	bl	8000a60 <Flash_Transmit>
	Flash_UnSelect();
 8000de6:	f7ff fe1b 	bl	8000a20 <Flash_UnSelect>
	HAL_Delay(1);	// 30us needed by resetting
 8000dea:	2001      	movs	r0, #1
 8000dec:	f000 f8a0 	bl	8000f30 <HAL_Delay>
}
 8000df0:	bf00      	nop
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000df8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dfc:	480d      	ldr	r0, [pc, #52]	; (8000e34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dfe:	490e      	ldr	r1, [pc, #56]	; (8000e38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e00:	4a0e      	ldr	r2, [pc, #56]	; (8000e3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e04:	e002      	b.n	8000e0c <LoopCopyDataInit>

08000e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0a:	3304      	adds	r3, #4

08000e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e10:	d3f9      	bcc.n	8000e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e12:	4a0b      	ldr	r2, [pc, #44]	; (8000e40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e14:	4c0b      	ldr	r4, [pc, #44]	; (8000e44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e18:	e001      	b.n	8000e1e <LoopFillZerobss>

08000e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e1c:	3204      	adds	r2, #4

08000e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e20:	d3fb      	bcc.n	8000e1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e22:	f7ff fdd7 	bl	80009d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e26:	f001 fd3d 	bl	80028a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e2a:	f7ff fba7 	bl	800057c <main>
  bx  lr    
 8000e2e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e38:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e3c:	08003220 	.word	0x08003220
  ldr r2, =_sbss
 8000e40:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e44:	2000033c 	.word	0x2000033c

08000e48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e48:	e7fe      	b.n	8000e48 <ADC_IRQHandler>
	...

08000e4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e50:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <HAL_Init+0x40>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a0d      	ldr	r2, [pc, #52]	; (8000e8c <HAL_Init+0x40>)
 8000e56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <HAL_Init+0x40>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <HAL_Init+0x40>)
 8000e62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <HAL_Init+0x40>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a07      	ldr	r2, [pc, #28]	; (8000e8c <HAL_Init+0x40>)
 8000e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e74:	2003      	movs	r0, #3
 8000e76:	f000 f931 	bl	80010dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e7a:	200f      	movs	r0, #15
 8000e7c:	f000 f808 	bl	8000e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e80:	f7ff fcd8 	bl	8000834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40023c00 	.word	0x40023c00

08000e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <HAL_InitTick+0x54>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <HAL_InitTick+0x58>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 f93b 	bl	800112a <HAL_SYSTICK_Config>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e00e      	b.n	8000edc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b0f      	cmp	r3, #15
 8000ec2:	d80a      	bhi.n	8000eda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ecc:	f000 f911 	bl	80010f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed0:	4a06      	ldr	r2, [pc, #24]	; (8000eec <HAL_InitTick+0x5c>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	e000      	b.n	8000edc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000014 	.word	0x20000014
 8000ee8:	2000001c 	.word	0x2000001c
 8000eec:	20000018 	.word	0x20000018

08000ef0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_IncTick+0x20>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_IncTick+0x24>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4413      	add	r3, r2
 8000f00:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <HAL_IncTick+0x24>)
 8000f02:	6013      	str	r3, [r2, #0]
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	2000001c 	.word	0x2000001c
 8000f14:	200001f0 	.word	0x200001f0

08000f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f1c:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <HAL_GetTick+0x14>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	200001f0 	.word	0x200001f0

08000f30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f38:	f7ff ffee 	bl	8000f18 <HAL_GetTick>
 8000f3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f48:	d005      	beq.n	8000f56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <HAL_Delay+0x44>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4413      	add	r3, r2
 8000f54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f56:	bf00      	nop
 8000f58:	f7ff ffde 	bl	8000f18 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d8f7      	bhi.n	8000f58 <HAL_Delay+0x28>
  {
  }
}
 8000f68:	bf00      	nop
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	2000001c 	.word	0x2000001c

08000f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <__NVIC_SetPriorityGrouping+0x44>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8e:	68ba      	ldr	r2, [r7, #8]
 8000f90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f94:	4013      	ands	r3, r2
 8000f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000faa:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <__NVIC_SetPriorityGrouping+0x44>)
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	60d3      	str	r3, [r2, #12]
}
 8000fb0:	bf00      	nop
 8000fb2:	3714      	adds	r7, #20
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc4:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	0a1b      	lsrs	r3, r3, #8
 8000fca:	f003 0307 	and.w	r3, r3, #7
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	6039      	str	r1, [r7, #0]
 8000fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	db0a      	blt.n	8001006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	490c      	ldr	r1, [pc, #48]	; (8001028 <__NVIC_SetPriority+0x4c>)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	0112      	lsls	r2, r2, #4
 8000ffc:	b2d2      	uxtb	r2, r2
 8000ffe:	440b      	add	r3, r1
 8001000:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001004:	e00a      	b.n	800101c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4908      	ldr	r1, [pc, #32]	; (800102c <__NVIC_SetPriority+0x50>)
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	f003 030f 	and.w	r3, r3, #15
 8001012:	3b04      	subs	r3, #4
 8001014:	0112      	lsls	r2, r2, #4
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	440b      	add	r3, r1
 800101a:	761a      	strb	r2, [r3, #24]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000e100 	.word	0xe000e100
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	; 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f1c3 0307 	rsb	r3, r3, #7
 800104a:	2b04      	cmp	r3, #4
 800104c:	bf28      	it	cs
 800104e:	2304      	movcs	r3, #4
 8001050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3304      	adds	r3, #4
 8001056:	2b06      	cmp	r3, #6
 8001058:	d902      	bls.n	8001060 <NVIC_EncodePriority+0x30>
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3b03      	subs	r3, #3
 800105e:	e000      	b.n	8001062 <NVIC_EncodePriority+0x32>
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	f04f 32ff 	mov.w	r2, #4294967295
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43da      	mvns	r2, r3
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	401a      	ands	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001078:	f04f 31ff 	mov.w	r1, #4294967295
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	fa01 f303 	lsl.w	r3, r1, r3
 8001082:	43d9      	mvns	r1, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	4313      	orrs	r3, r2
         );
}
 800108a:	4618      	mov	r0, r3
 800108c:	3724      	adds	r7, #36	; 0x24
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010a8:	d301      	bcc.n	80010ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00f      	b.n	80010ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ae:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <SysTick_Config+0x40>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010b6:	210f      	movs	r1, #15
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295
 80010bc:	f7ff ff8e 	bl	8000fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <SysTick_Config+0x40>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c6:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <SysTick_Config+0x40>)
 80010c8:	2207      	movs	r2, #7
 80010ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	e000e010 	.word	0xe000e010

080010dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff47 	bl	8000f78 <__NVIC_SetPriorityGrouping>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b086      	sub	sp, #24
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
 80010fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001104:	f7ff ff5c 	bl	8000fc0 <__NVIC_GetPriorityGrouping>
 8001108:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	68b9      	ldr	r1, [r7, #8]
 800110e:	6978      	ldr	r0, [r7, #20]
 8001110:	f7ff ff8e 	bl	8001030 <NVIC_EncodePriority>
 8001114:	4602      	mov	r2, r0
 8001116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff5d 	bl	8000fdc <__NVIC_SetPriority>
}
 8001122:	bf00      	nop
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff ffb0 	bl	8001098 <SysTick_Config>
 8001138:	4603      	mov	r3, r0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
	...

08001144 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001144:	b480      	push	{r7}
 8001146:	b089      	sub	sp, #36	; 0x24
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001156:	2300      	movs	r3, #0
 8001158:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
 800115e:	e159      	b.n	8001414 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001160:	2201      	movs	r2, #1
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	4013      	ands	r3, r2
 8001172:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	429a      	cmp	r2, r3
 800117a:	f040 8148 	bne.w	800140e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f003 0303 	and.w	r3, r3, #3
 8001186:	2b01      	cmp	r3, #1
 8001188:	d005      	beq.n	8001196 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001192:	2b02      	cmp	r3, #2
 8001194:	d130      	bne.n	80011f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	2203      	movs	r2, #3
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43db      	mvns	r3, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4013      	ands	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	68da      	ldr	r2, [r3, #12]
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4313      	orrs	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011cc:	2201      	movs	r2, #1
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	091b      	lsrs	r3, r3, #4
 80011e2:	f003 0201 	and.w	r2, r3, #1
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 0303 	and.w	r3, r3, #3
 8001200:	2b03      	cmp	r3, #3
 8001202:	d017      	beq.n	8001234 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	2203      	movs	r2, #3
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4013      	ands	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	689a      	ldr	r2, [r3, #8]
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 0303 	and.w	r3, r3, #3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d123      	bne.n	8001288 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	08da      	lsrs	r2, r3, #3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3208      	adds	r2, #8
 8001248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800124c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	f003 0307 	and.w	r3, r3, #7
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	220f      	movs	r2, #15
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	691a      	ldr	r2, [r3, #16]
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	08da      	lsrs	r2, r3, #3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	3208      	adds	r2, #8
 8001282:	69b9      	ldr	r1, [r7, #24]
 8001284:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	2203      	movs	r2, #3
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f003 0203 	and.w	r2, r3, #3
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f000 80a2 	beq.w	800140e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	4b57      	ldr	r3, [pc, #348]	; (800142c <HAL_GPIO_Init+0x2e8>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	4a56      	ldr	r2, [pc, #344]	; (800142c <HAL_GPIO_Init+0x2e8>)
 80012d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d8:	6453      	str	r3, [r2, #68]	; 0x44
 80012da:	4b54      	ldr	r3, [pc, #336]	; (800142c <HAL_GPIO_Init+0x2e8>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012e6:	4a52      	ldr	r2, [pc, #328]	; (8001430 <HAL_GPIO_Init+0x2ec>)
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	089b      	lsrs	r3, r3, #2
 80012ec:	3302      	adds	r3, #2
 80012ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	f003 0303 	and.w	r3, r3, #3
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	220f      	movs	r2, #15
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43db      	mvns	r3, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4013      	ands	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a49      	ldr	r2, [pc, #292]	; (8001434 <HAL_GPIO_Init+0x2f0>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d019      	beq.n	8001346 <HAL_GPIO_Init+0x202>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a48      	ldr	r2, [pc, #288]	; (8001438 <HAL_GPIO_Init+0x2f4>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d013      	beq.n	8001342 <HAL_GPIO_Init+0x1fe>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a47      	ldr	r2, [pc, #284]	; (800143c <HAL_GPIO_Init+0x2f8>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d00d      	beq.n	800133e <HAL_GPIO_Init+0x1fa>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a46      	ldr	r2, [pc, #280]	; (8001440 <HAL_GPIO_Init+0x2fc>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d007      	beq.n	800133a <HAL_GPIO_Init+0x1f6>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a45      	ldr	r2, [pc, #276]	; (8001444 <HAL_GPIO_Init+0x300>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d101      	bne.n	8001336 <HAL_GPIO_Init+0x1f2>
 8001332:	2304      	movs	r3, #4
 8001334:	e008      	b.n	8001348 <HAL_GPIO_Init+0x204>
 8001336:	2307      	movs	r3, #7
 8001338:	e006      	b.n	8001348 <HAL_GPIO_Init+0x204>
 800133a:	2303      	movs	r3, #3
 800133c:	e004      	b.n	8001348 <HAL_GPIO_Init+0x204>
 800133e:	2302      	movs	r3, #2
 8001340:	e002      	b.n	8001348 <HAL_GPIO_Init+0x204>
 8001342:	2301      	movs	r3, #1
 8001344:	e000      	b.n	8001348 <HAL_GPIO_Init+0x204>
 8001346:	2300      	movs	r3, #0
 8001348:	69fa      	ldr	r2, [r7, #28]
 800134a:	f002 0203 	and.w	r2, r2, #3
 800134e:	0092      	lsls	r2, r2, #2
 8001350:	4093      	lsls	r3, r2
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4313      	orrs	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001358:	4935      	ldr	r1, [pc, #212]	; (8001430 <HAL_GPIO_Init+0x2ec>)
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	089b      	lsrs	r3, r3, #2
 800135e:	3302      	adds	r3, #2
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001366:	4b38      	ldr	r3, [pc, #224]	; (8001448 <HAL_GPIO_Init+0x304>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	43db      	mvns	r3, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4013      	ands	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	4313      	orrs	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800138a:	4a2f      	ldr	r2, [pc, #188]	; (8001448 <HAL_GPIO_Init+0x304>)
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001390:	4b2d      	ldr	r3, [pc, #180]	; (8001448 <HAL_GPIO_Init+0x304>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	43db      	mvns	r3, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4013      	ands	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013b4:	4a24      	ldr	r2, [pc, #144]	; (8001448 <HAL_GPIO_Init+0x304>)
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013ba:	4b23      	ldr	r3, [pc, #140]	; (8001448 <HAL_GPIO_Init+0x304>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	43db      	mvns	r3, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4013      	ands	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013de:	4a1a      	ldr	r2, [pc, #104]	; (8001448 <HAL_GPIO_Init+0x304>)
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013e4:	4b18      	ldr	r3, [pc, #96]	; (8001448 <HAL_GPIO_Init+0x304>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001408:	4a0f      	ldr	r2, [pc, #60]	; (8001448 <HAL_GPIO_Init+0x304>)
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3301      	adds	r3, #1
 8001412:	61fb      	str	r3, [r7, #28]
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	2b0f      	cmp	r3, #15
 8001418:	f67f aea2 	bls.w	8001160 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	3724      	adds	r7, #36	; 0x24
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	40023800 	.word	0x40023800
 8001430:	40013800 	.word	0x40013800
 8001434:	40020000 	.word	0x40020000
 8001438:	40020400 	.word	0x40020400
 800143c:	40020800 	.word	0x40020800
 8001440:	40020c00 	.word	0x40020c00
 8001444:	40021000 	.word	0x40021000
 8001448:	40013c00 	.word	0x40013c00

0800144c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	691a      	ldr	r2, [r3, #16]
 800145c:	887b      	ldrh	r3, [r7, #2]
 800145e:	4013      	ands	r3, r2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d002      	beq.n	800146a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001464:	2301      	movs	r3, #1
 8001466:	73fb      	strb	r3, [r7, #15]
 8001468:	e001      	b.n	800146e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800146a:	2300      	movs	r3, #0
 800146c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800146e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	807b      	strh	r3, [r7, #2]
 8001488:	4613      	mov	r3, r2
 800148a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800148c:	787b      	ldrb	r3, [r7, #1]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001492:	887a      	ldrh	r2, [r7, #2]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001498:	e003      	b.n	80014a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800149a:	887b      	ldrh	r3, [r7, #2]
 800149c:	041a      	lsls	r2, r3, #16
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	619a      	str	r2, [r3, #24]
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
	...

080014b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e267      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d075      	beq.n	80015ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014ce:	4b88      	ldr	r3, [pc, #544]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f003 030c 	and.w	r3, r3, #12
 80014d6:	2b04      	cmp	r3, #4
 80014d8:	d00c      	beq.n	80014f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014da:	4b85      	ldr	r3, [pc, #532]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014e2:	2b08      	cmp	r3, #8
 80014e4:	d112      	bne.n	800150c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014e6:	4b82      	ldr	r3, [pc, #520]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014f2:	d10b      	bne.n	800150c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f4:	4b7e      	ldr	r3, [pc, #504]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d05b      	beq.n	80015b8 <HAL_RCC_OscConfig+0x108>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d157      	bne.n	80015b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e242      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001514:	d106      	bne.n	8001524 <HAL_RCC_OscConfig+0x74>
 8001516:	4b76      	ldr	r3, [pc, #472]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a75      	ldr	r2, [pc, #468]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 800151c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	e01d      	b.n	8001560 <HAL_RCC_OscConfig+0xb0>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800152c:	d10c      	bne.n	8001548 <HAL_RCC_OscConfig+0x98>
 800152e:	4b70      	ldr	r3, [pc, #448]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a6f      	ldr	r2, [pc, #444]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 8001534:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	4b6d      	ldr	r3, [pc, #436]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a6c      	ldr	r2, [pc, #432]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 8001540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	e00b      	b.n	8001560 <HAL_RCC_OscConfig+0xb0>
 8001548:	4b69      	ldr	r3, [pc, #420]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a68      	ldr	r2, [pc, #416]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 800154e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	4b66      	ldr	r3, [pc, #408]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a65      	ldr	r2, [pc, #404]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 800155a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800155e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d013      	beq.n	8001590 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001568:	f7ff fcd6 	bl	8000f18 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001570:	f7ff fcd2 	bl	8000f18 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b64      	cmp	r3, #100	; 0x64
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e207      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001582:	4b5b      	ldr	r3, [pc, #364]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d0f0      	beq.n	8001570 <HAL_RCC_OscConfig+0xc0>
 800158e:	e014      	b.n	80015ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001590:	f7ff fcc2 	bl	8000f18 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001598:	f7ff fcbe 	bl	8000f18 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b64      	cmp	r3, #100	; 0x64
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e1f3      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015aa:	4b51      	ldr	r3, [pc, #324]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f0      	bne.n	8001598 <HAL_RCC_OscConfig+0xe8>
 80015b6:	e000      	b.n	80015ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d063      	beq.n	800168e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015c6:	4b4a      	ldr	r3, [pc, #296]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f003 030c 	and.w	r3, r3, #12
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d00b      	beq.n	80015ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015d2:	4b47      	ldr	r3, [pc, #284]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015da:	2b08      	cmp	r3, #8
 80015dc:	d11c      	bne.n	8001618 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015de:	4b44      	ldr	r3, [pc, #272]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d116      	bne.n	8001618 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ea:	4b41      	ldr	r3, [pc, #260]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d005      	beq.n	8001602 <HAL_RCC_OscConfig+0x152>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d001      	beq.n	8001602 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e1c7      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001602:	4b3b      	ldr	r3, [pc, #236]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	4937      	ldr	r1, [pc, #220]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 8001612:	4313      	orrs	r3, r2
 8001614:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001616:	e03a      	b.n	800168e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d020      	beq.n	8001662 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001620:	4b34      	ldr	r3, [pc, #208]	; (80016f4 <HAL_RCC_OscConfig+0x244>)
 8001622:	2201      	movs	r2, #1
 8001624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001626:	f7ff fc77 	bl	8000f18 <HAL_GetTick>
 800162a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800162e:	f7ff fc73 	bl	8000f18 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e1a8      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001640:	4b2b      	ldr	r3, [pc, #172]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d0f0      	beq.n	800162e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800164c:	4b28      	ldr	r3, [pc, #160]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	4925      	ldr	r1, [pc, #148]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 800165c:	4313      	orrs	r3, r2
 800165e:	600b      	str	r3, [r1, #0]
 8001660:	e015      	b.n	800168e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001662:	4b24      	ldr	r3, [pc, #144]	; (80016f4 <HAL_RCC_OscConfig+0x244>)
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001668:	f7ff fc56 	bl	8000f18 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001670:	f7ff fc52 	bl	8000f18 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e187      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001682:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1f0      	bne.n	8001670 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0308 	and.w	r3, r3, #8
 8001696:	2b00      	cmp	r3, #0
 8001698:	d036      	beq.n	8001708 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d016      	beq.n	80016d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <HAL_RCC_OscConfig+0x248>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a8:	f7ff fc36 	bl	8000f18 <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016b0:	f7ff fc32 	bl	8000f18 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e167      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c2:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 80016c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d0f0      	beq.n	80016b0 <HAL_RCC_OscConfig+0x200>
 80016ce:	e01b      	b.n	8001708 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016d0:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <HAL_RCC_OscConfig+0x248>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d6:	f7ff fc1f 	bl	8000f18 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016dc:	e00e      	b.n	80016fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016de:	f7ff fc1b 	bl	8000f18 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d907      	bls.n	80016fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e150      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
 80016f0:	40023800 	.word	0x40023800
 80016f4:	42470000 	.word	0x42470000
 80016f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016fc:	4b88      	ldr	r3, [pc, #544]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80016fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1ea      	bne.n	80016de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	2b00      	cmp	r3, #0
 8001712:	f000 8097 	beq.w	8001844 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001716:	2300      	movs	r3, #0
 8001718:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800171a:	4b81      	ldr	r3, [pc, #516]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d10f      	bne.n	8001746 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	4b7d      	ldr	r3, [pc, #500]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	4a7c      	ldr	r2, [pc, #496]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 8001730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001734:	6413      	str	r3, [r2, #64]	; 0x40
 8001736:	4b7a      	ldr	r3, [pc, #488]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173e:	60bb      	str	r3, [r7, #8]
 8001740:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001742:	2301      	movs	r3, #1
 8001744:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001746:	4b77      	ldr	r3, [pc, #476]	; (8001924 <HAL_RCC_OscConfig+0x474>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800174e:	2b00      	cmp	r3, #0
 8001750:	d118      	bne.n	8001784 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001752:	4b74      	ldr	r3, [pc, #464]	; (8001924 <HAL_RCC_OscConfig+0x474>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a73      	ldr	r2, [pc, #460]	; (8001924 <HAL_RCC_OscConfig+0x474>)
 8001758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800175c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800175e:	f7ff fbdb 	bl	8000f18 <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001764:	e008      	b.n	8001778 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001766:	f7ff fbd7 	bl	8000f18 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e10c      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001778:	4b6a      	ldr	r3, [pc, #424]	; (8001924 <HAL_RCC_OscConfig+0x474>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0f0      	beq.n	8001766 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d106      	bne.n	800179a <HAL_RCC_OscConfig+0x2ea>
 800178c:	4b64      	ldr	r3, [pc, #400]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 800178e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001790:	4a63      	ldr	r2, [pc, #396]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	6713      	str	r3, [r2, #112]	; 0x70
 8001798:	e01c      	b.n	80017d4 <HAL_RCC_OscConfig+0x324>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	2b05      	cmp	r3, #5
 80017a0:	d10c      	bne.n	80017bc <HAL_RCC_OscConfig+0x30c>
 80017a2:	4b5f      	ldr	r3, [pc, #380]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80017a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a6:	4a5e      	ldr	r2, [pc, #376]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80017a8:	f043 0304 	orr.w	r3, r3, #4
 80017ac:	6713      	str	r3, [r2, #112]	; 0x70
 80017ae:	4b5c      	ldr	r3, [pc, #368]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80017b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b2:	4a5b      	ldr	r2, [pc, #364]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	6713      	str	r3, [r2, #112]	; 0x70
 80017ba:	e00b      	b.n	80017d4 <HAL_RCC_OscConfig+0x324>
 80017bc:	4b58      	ldr	r3, [pc, #352]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80017be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c0:	4a57      	ldr	r2, [pc, #348]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80017c2:	f023 0301 	bic.w	r3, r3, #1
 80017c6:	6713      	str	r3, [r2, #112]	; 0x70
 80017c8:	4b55      	ldr	r3, [pc, #340]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80017ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017cc:	4a54      	ldr	r2, [pc, #336]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80017ce:	f023 0304 	bic.w	r3, r3, #4
 80017d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d015      	beq.n	8001808 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017dc:	f7ff fb9c 	bl	8000f18 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e2:	e00a      	b.n	80017fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017e4:	f7ff fb98 	bl	8000f18 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e0cb      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017fa:	4b49      	ldr	r3, [pc, #292]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80017fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0ee      	beq.n	80017e4 <HAL_RCC_OscConfig+0x334>
 8001806:	e014      	b.n	8001832 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001808:	f7ff fb86 	bl	8000f18 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800180e:	e00a      	b.n	8001826 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001810:	f7ff fb82 	bl	8000f18 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	f241 3288 	movw	r2, #5000	; 0x1388
 800181e:	4293      	cmp	r3, r2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e0b5      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001826:	4b3e      	ldr	r3, [pc, #248]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 8001828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1ee      	bne.n	8001810 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001832:	7dfb      	ldrb	r3, [r7, #23]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d105      	bne.n	8001844 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001838:	4b39      	ldr	r3, [pc, #228]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 800183a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183c:	4a38      	ldr	r2, [pc, #224]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 800183e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001842:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 80a1 	beq.w	8001990 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800184e:	4b34      	ldr	r3, [pc, #208]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 030c 	and.w	r3, r3, #12
 8001856:	2b08      	cmp	r3, #8
 8001858:	d05c      	beq.n	8001914 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	2b02      	cmp	r3, #2
 8001860:	d141      	bne.n	80018e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001862:	4b31      	ldr	r3, [pc, #196]	; (8001928 <HAL_RCC_OscConfig+0x478>)
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001868:	f7ff fb56 	bl	8000f18 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001870:	f7ff fb52 	bl	8000f18 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e087      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001882:	4b27      	ldr	r3, [pc, #156]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1f0      	bne.n	8001870 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69da      	ldr	r2, [r3, #28]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a1b      	ldr	r3, [r3, #32]
 8001896:	431a      	orrs	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189c:	019b      	lsls	r3, r3, #6
 800189e:	431a      	orrs	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a4:	085b      	lsrs	r3, r3, #1
 80018a6:	3b01      	subs	r3, #1
 80018a8:	041b      	lsls	r3, r3, #16
 80018aa:	431a      	orrs	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b0:	061b      	lsls	r3, r3, #24
 80018b2:	491b      	ldr	r1, [pc, #108]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018b8:	4b1b      	ldr	r3, [pc, #108]	; (8001928 <HAL_RCC_OscConfig+0x478>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018be:	f7ff fb2b 	bl	8000f18 <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c6:	f7ff fb27 	bl	8000f18 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e05c      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0f0      	beq.n	80018c6 <HAL_RCC_OscConfig+0x416>
 80018e4:	e054      	b.n	8001990 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018e6:	4b10      	ldr	r3, [pc, #64]	; (8001928 <HAL_RCC_OscConfig+0x478>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ec:	f7ff fb14 	bl	8000f18 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018f4:	f7ff fb10 	bl	8000f18 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e045      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001906:	4b06      	ldr	r3, [pc, #24]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1f0      	bne.n	80018f4 <HAL_RCC_OscConfig+0x444>
 8001912:	e03d      	b.n	8001990 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d107      	bne.n	800192c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e038      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
 8001920:	40023800 	.word	0x40023800
 8001924:	40007000 	.word	0x40007000
 8001928:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800192c:	4b1b      	ldr	r3, [pc, #108]	; (800199c <HAL_RCC_OscConfig+0x4ec>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d028      	beq.n	800198c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001944:	429a      	cmp	r2, r3
 8001946:	d121      	bne.n	800198c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001952:	429a      	cmp	r2, r3
 8001954:	d11a      	bne.n	800198c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800195c:	4013      	ands	r3, r2
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001962:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001964:	4293      	cmp	r3, r2
 8001966:	d111      	bne.n	800198c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001972:	085b      	lsrs	r3, r3, #1
 8001974:	3b01      	subs	r3, #1
 8001976:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001978:	429a      	cmp	r2, r3
 800197a:	d107      	bne.n	800198c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001986:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001988:	429a      	cmp	r2, r3
 800198a:	d001      	beq.n	8001990 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e000      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40023800 	.word	0x40023800

080019a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d101      	bne.n	80019b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e0cc      	b.n	8001b4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019b4:	4b68      	ldr	r3, [pc, #416]	; (8001b58 <HAL_RCC_ClockConfig+0x1b8>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d90c      	bls.n	80019dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c2:	4b65      	ldr	r3, [pc, #404]	; (8001b58 <HAL_RCC_ClockConfig+0x1b8>)
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ca:	4b63      	ldr	r3, [pc, #396]	; (8001b58 <HAL_RCC_ClockConfig+0x1b8>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d001      	beq.n	80019dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e0b8      	b.n	8001b4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d020      	beq.n	8001a2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0304 	and.w	r3, r3, #4
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d005      	beq.n	8001a00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019f4:	4b59      	ldr	r3, [pc, #356]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	4a58      	ldr	r2, [pc, #352]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 80019fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0308 	and.w	r3, r3, #8
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d005      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a0c:	4b53      	ldr	r3, [pc, #332]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	4a52      	ldr	r2, [pc, #328]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a18:	4b50      	ldr	r3, [pc, #320]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	494d      	ldr	r1, [pc, #308]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d044      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d107      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3e:	4b47      	ldr	r3, [pc, #284]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d119      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e07f      	b.n	8001b4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d003      	beq.n	8001a5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a5a:	2b03      	cmp	r3, #3
 8001a5c:	d107      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a5e:	4b3f      	ldr	r3, [pc, #252]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d109      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e06f      	b.n	8001b4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a6e:	4b3b      	ldr	r3, [pc, #236]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e067      	b.n	8001b4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a7e:	4b37      	ldr	r3, [pc, #220]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f023 0203 	bic.w	r2, r3, #3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	4934      	ldr	r1, [pc, #208]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a90:	f7ff fa42 	bl	8000f18 <HAL_GetTick>
 8001a94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a96:	e00a      	b.n	8001aae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a98:	f7ff fa3e 	bl	8000f18 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e04f      	b.n	8001b4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aae:	4b2b      	ldr	r3, [pc, #172]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 020c 	and.w	r2, r3, #12
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d1eb      	bne.n	8001a98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac0:	4b25      	ldr	r3, [pc, #148]	; (8001b58 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d20c      	bcs.n	8001ae8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ace:	4b22      	ldr	r3, [pc, #136]	; (8001b58 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad6:	4b20      	ldr	r3, [pc, #128]	; (8001b58 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d001      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e032      	b.n	8001b4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d008      	beq.n	8001b06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001af4:	4b19      	ldr	r3, [pc, #100]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	4916      	ldr	r1, [pc, #88]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d009      	beq.n	8001b26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b12:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	490e      	ldr	r1, [pc, #56]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b26:	f000 f821 	bl	8001b6c <HAL_RCC_GetSysClockFreq>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	091b      	lsrs	r3, r3, #4
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	490a      	ldr	r1, [pc, #40]	; (8001b60 <HAL_RCC_ClockConfig+0x1c0>)
 8001b38:	5ccb      	ldrb	r3, [r1, r3]
 8001b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b3e:	4a09      	ldr	r2, [pc, #36]	; (8001b64 <HAL_RCC_ClockConfig+0x1c4>)
 8001b40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b42:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <HAL_RCC_ClockConfig+0x1c8>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff f9a2 	bl	8000e90 <HAL_InitTick>

  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40023c00 	.word	0x40023c00
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	080031cc 	.word	0x080031cc
 8001b64:	20000014 	.word	0x20000014
 8001b68:	20000018 	.word	0x20000018

08001b6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b70:	b090      	sub	sp, #64	; 0x40
 8001b72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b74:	2300      	movs	r3, #0
 8001b76:	637b      	str	r3, [r7, #52]	; 0x34
 8001b78:	2300      	movs	r3, #0
 8001b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001b80:	2300      	movs	r3, #0
 8001b82:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b84:	4b59      	ldr	r3, [pc, #356]	; (8001cec <HAL_RCC_GetSysClockFreq+0x180>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 030c 	and.w	r3, r3, #12
 8001b8c:	2b08      	cmp	r3, #8
 8001b8e:	d00d      	beq.n	8001bac <HAL_RCC_GetSysClockFreq+0x40>
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	f200 80a1 	bhi.w	8001cd8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d002      	beq.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x34>
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	d003      	beq.n	8001ba6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b9e:	e09b      	b.n	8001cd8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ba0:	4b53      	ldr	r3, [pc, #332]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001ba2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001ba4:	e09b      	b.n	8001cde <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ba6:	4b53      	ldr	r3, [pc, #332]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ba8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001baa:	e098      	b.n	8001cde <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bac:	4b4f      	ldr	r3, [pc, #316]	; (8001cec <HAL_RCC_GetSysClockFreq+0x180>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bb4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bb6:	4b4d      	ldr	r3, [pc, #308]	; (8001cec <HAL_RCC_GetSysClockFreq+0x180>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d028      	beq.n	8001c14 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bc2:	4b4a      	ldr	r3, [pc, #296]	; (8001cec <HAL_RCC_GetSysClockFreq+0x180>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	099b      	lsrs	r3, r3, #6
 8001bc8:	2200      	movs	r2, #0
 8001bca:	623b      	str	r3, [r7, #32]
 8001bcc:	627a      	str	r2, [r7, #36]	; 0x24
 8001bce:	6a3b      	ldr	r3, [r7, #32]
 8001bd0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	4b47      	ldr	r3, [pc, #284]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bd8:	fb03 f201 	mul.w	r2, r3, r1
 8001bdc:	2300      	movs	r3, #0
 8001bde:	fb00 f303 	mul.w	r3, r0, r3
 8001be2:	4413      	add	r3, r2
 8001be4:	4a43      	ldr	r2, [pc, #268]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001be6:	fba0 1202 	umull	r1, r2, r0, r2
 8001bea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bec:	460a      	mov	r2, r1
 8001bee:	62ba      	str	r2, [r7, #40]	; 0x28
 8001bf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bf2:	4413      	add	r3, r2
 8001bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	61bb      	str	r3, [r7, #24]
 8001bfc:	61fa      	str	r2, [r7, #28]
 8001bfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c02:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c06:	f7fe fb3b 	bl	8000280 <__aeabi_uldivmod>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4613      	mov	r3, r2
 8001c10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c12:	e053      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c14:	4b35      	ldr	r3, [pc, #212]	; (8001cec <HAL_RCC_GetSysClockFreq+0x180>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	099b      	lsrs	r3, r3, #6
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	617a      	str	r2, [r7, #20]
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001c26:	f04f 0b00 	mov.w	fp, #0
 8001c2a:	4652      	mov	r2, sl
 8001c2c:	465b      	mov	r3, fp
 8001c2e:	f04f 0000 	mov.w	r0, #0
 8001c32:	f04f 0100 	mov.w	r1, #0
 8001c36:	0159      	lsls	r1, r3, #5
 8001c38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c3c:	0150      	lsls	r0, r2, #5
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	ebb2 080a 	subs.w	r8, r2, sl
 8001c46:	eb63 090b 	sbc.w	r9, r3, fp
 8001c4a:	f04f 0200 	mov.w	r2, #0
 8001c4e:	f04f 0300 	mov.w	r3, #0
 8001c52:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c56:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c5a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c5e:	ebb2 0408 	subs.w	r4, r2, r8
 8001c62:	eb63 0509 	sbc.w	r5, r3, r9
 8001c66:	f04f 0200 	mov.w	r2, #0
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	00eb      	lsls	r3, r5, #3
 8001c70:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c74:	00e2      	lsls	r2, r4, #3
 8001c76:	4614      	mov	r4, r2
 8001c78:	461d      	mov	r5, r3
 8001c7a:	eb14 030a 	adds.w	r3, r4, sl
 8001c7e:	603b      	str	r3, [r7, #0]
 8001c80:	eb45 030b 	adc.w	r3, r5, fp
 8001c84:	607b      	str	r3, [r7, #4]
 8001c86:	f04f 0200 	mov.w	r2, #0
 8001c8a:	f04f 0300 	mov.w	r3, #0
 8001c8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c92:	4629      	mov	r1, r5
 8001c94:	028b      	lsls	r3, r1, #10
 8001c96:	4621      	mov	r1, r4
 8001c98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c9c:	4621      	mov	r1, r4
 8001c9e:	028a      	lsls	r2, r1, #10
 8001ca0:	4610      	mov	r0, r2
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	60fa      	str	r2, [r7, #12]
 8001cac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001cb0:	f7fe fae6 	bl	8000280 <__aeabi_uldivmod>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4613      	mov	r3, r2
 8001cba:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <HAL_RCC_GetSysClockFreq+0x180>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	0c1b      	lsrs	r3, r3, #16
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001ccc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cd6:	e002      	b.n	8001cde <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cd8:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001cda:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3740      	adds	r7, #64	; 0x40
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cea:	bf00      	nop
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	00f42400 	.word	0x00f42400
 8001cf4:	017d7840 	.word	0x017d7840

08001cf8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e07b      	b.n	8001e02 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d108      	bne.n	8001d24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d1a:	d009      	beq.n	8001d30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	61da      	str	r2, [r3, #28]
 8001d22:	e005      	b.n	8001d30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d106      	bne.n	8001d50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7fe fd9a 	bl	8000884 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2202      	movs	r2, #2
 8001d54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d66:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d82:	431a      	orrs	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001da0:	431a      	orrs	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001daa:	431a      	orrs	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db4:	ea42 0103 	orr.w	r1, r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	0c1b      	lsrs	r3, r3, #16
 8001dce:	f003 0104 	and.w	r1, r3, #4
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd6:	f003 0210 	and.w	r2, r3, #16
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	430a      	orrs	r2, r1
 8001de0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	69da      	ldr	r2, [r3, #28]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001df0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b088      	sub	sp, #32
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	60f8      	str	r0, [r7, #12]
 8001e12:	60b9      	str	r1, [r7, #8]
 8001e14:	603b      	str	r3, [r7, #0]
 8001e16:	4613      	mov	r3, r2
 8001e18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d101      	bne.n	8001e2c <HAL_SPI_Transmit+0x22>
 8001e28:	2302      	movs	r3, #2
 8001e2a:	e126      	b.n	800207a <HAL_SPI_Transmit+0x270>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e34:	f7ff f870 	bl	8000f18 <HAL_GetTick>
 8001e38:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001e3a:	88fb      	ldrh	r3, [r7, #6]
 8001e3c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d002      	beq.n	8001e50 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e4e:	e10b      	b.n	8002068 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d002      	beq.n	8001e5c <HAL_SPI_Transmit+0x52>
 8001e56:	88fb      	ldrh	r3, [r7, #6]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d102      	bne.n	8001e62 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e60:	e102      	b.n	8002068 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2203      	movs	r2, #3
 8001e66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	68ba      	ldr	r2, [r7, #8]
 8001e74:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	88fa      	ldrh	r2, [r7, #6]
 8001e7a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	88fa      	ldrh	r2, [r7, #6]
 8001e80:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2200      	movs	r2, #0
 8001e86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2200      	movs	r2, #0
 8001e98:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ea8:	d10f      	bne.n	8001eca <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001eb8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ec8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed4:	2b40      	cmp	r3, #64	; 0x40
 8001ed6:	d007      	beq.n	8001ee8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ee6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ef0:	d14b      	bne.n	8001f8a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d002      	beq.n	8001f00 <HAL_SPI_Transmit+0xf6>
 8001efa:	8afb      	ldrh	r3, [r7, #22]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d13e      	bne.n	8001f7e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f04:	881a      	ldrh	r2, [r3, #0]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f10:	1c9a      	adds	r2, r3, #2
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001f24:	e02b      	b.n	8001f7e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d112      	bne.n	8001f5a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f38:	881a      	ldrh	r2, [r3, #0]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f44:	1c9a      	adds	r2, r3, #2
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	3b01      	subs	r3, #1
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	86da      	strh	r2, [r3, #54]	; 0x36
 8001f58:	e011      	b.n	8001f7e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f5a:	f7fe ffdd 	bl	8000f18 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d803      	bhi.n	8001f72 <HAL_SPI_Transmit+0x168>
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f70:	d102      	bne.n	8001f78 <HAL_SPI_Transmit+0x16e>
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d102      	bne.n	8001f7e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001f7c:	e074      	b.n	8002068 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1ce      	bne.n	8001f26 <HAL_SPI_Transmit+0x11c>
 8001f88:	e04c      	b.n	8002024 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d002      	beq.n	8001f98 <HAL_SPI_Transmit+0x18e>
 8001f92:	8afb      	ldrh	r3, [r7, #22]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d140      	bne.n	800201a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	330c      	adds	r3, #12
 8001fa2:	7812      	ldrb	r2, [r2, #0]
 8001fa4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	1c5a      	adds	r2, r3, #1
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001fbe:	e02c      	b.n	800201a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d113      	bne.n	8001ff6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	330c      	adds	r3, #12
 8001fd8:	7812      	ldrb	r2, [r2, #0]
 8001fda:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe0:	1c5a      	adds	r2, r3, #1
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	3b01      	subs	r3, #1
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	86da      	strh	r2, [r3, #54]	; 0x36
 8001ff4:	e011      	b.n	800201a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ff6:	f7fe ff8f 	bl	8000f18 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	429a      	cmp	r2, r3
 8002004:	d803      	bhi.n	800200e <HAL_SPI_Transmit+0x204>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800200c:	d102      	bne.n	8002014 <HAL_SPI_Transmit+0x20a>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d102      	bne.n	800201a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002018:	e026      	b.n	8002068 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800201e:	b29b      	uxth	r3, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1cd      	bne.n	8001fc0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	6839      	ldr	r1, [r7, #0]
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f000 fbcb 	bl	80027c4 <SPI_EndRxTxTransaction>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d002      	beq.n	800203a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2220      	movs	r2, #32
 8002038:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10a      	bne.n	8002058 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002042:	2300      	movs	r3, #0
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	613b      	str	r3, [r7, #16]
 8002056:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800205c:	2b00      	cmp	r3, #0
 800205e:	d002      	beq.n	8002066 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	77fb      	strb	r3, [r7, #31]
 8002064:	e000      	b.n	8002068 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002066:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002078:	7ffb      	ldrb	r3, [r7, #31]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3720      	adds	r7, #32
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b088      	sub	sp, #32
 8002086:	af02      	add	r7, sp, #8
 8002088:	60f8      	str	r0, [r7, #12]
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	603b      	str	r3, [r7, #0]
 800208e:	4613      	mov	r3, r2
 8002090:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002092:	2300      	movs	r3, #0
 8002094:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800209e:	d112      	bne.n	80020c6 <HAL_SPI_Receive+0x44>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d10e      	bne.n	80020c6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2204      	movs	r2, #4
 80020ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80020b0:	88fa      	ldrh	r2, [r7, #6]
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	4613      	mov	r3, r2
 80020b8:	68ba      	ldr	r2, [r7, #8]
 80020ba:	68b9      	ldr	r1, [r7, #8]
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f000 f8f1 	bl	80022a4 <HAL_SPI_TransmitReceive>
 80020c2:	4603      	mov	r3, r0
 80020c4:	e0ea      	b.n	800229c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d101      	bne.n	80020d4 <HAL_SPI_Receive+0x52>
 80020d0:	2302      	movs	r3, #2
 80020d2:	e0e3      	b.n	800229c <HAL_SPI_Receive+0x21a>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020dc:	f7fe ff1c 	bl	8000f18 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d002      	beq.n	80020f4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80020ee:	2302      	movs	r3, #2
 80020f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80020f2:	e0ca      	b.n	800228a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d002      	beq.n	8002100 <HAL_SPI_Receive+0x7e>
 80020fa:	88fb      	ldrh	r3, [r7, #6]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d102      	bne.n	8002106 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002104:	e0c1      	b.n	800228a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2204      	movs	r2, #4
 800210a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2200      	movs	r2, #0
 8002112:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	88fa      	ldrh	r2, [r7, #6]
 800211e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	88fa      	ldrh	r2, [r7, #6]
 8002124:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2200      	movs	r2, #0
 8002136:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800214c:	d10f      	bne.n	800216e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800215c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800216c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002178:	2b40      	cmp	r3, #64	; 0x40
 800217a:	d007      	beq.n	800218c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800218a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d162      	bne.n	800225a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002194:	e02e      	b.n	80021f4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d115      	bne.n	80021d0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f103 020c 	add.w	r2, r3, #12
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b0:	7812      	ldrb	r2, [r2, #0]
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	3b01      	subs	r3, #1
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80021ce:	e011      	b.n	80021f4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021d0:	f7fe fea2 	bl	8000f18 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d803      	bhi.n	80021e8 <HAL_SPI_Receive+0x166>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e6:	d102      	bne.n	80021ee <HAL_SPI_Receive+0x16c>
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d102      	bne.n	80021f4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80021f2:	e04a      	b.n	800228a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1cb      	bne.n	8002196 <HAL_SPI_Receive+0x114>
 80021fe:	e031      	b.n	8002264 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b01      	cmp	r3, #1
 800220c:	d113      	bne.n	8002236 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002218:	b292      	uxth	r2, r2
 800221a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002220:	1c9a      	adds	r2, r3, #2
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800222a:	b29b      	uxth	r3, r3
 800222c:	3b01      	subs	r3, #1
 800222e:	b29a      	uxth	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002234:	e011      	b.n	800225a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002236:	f7fe fe6f 	bl	8000f18 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	d803      	bhi.n	800224e <HAL_SPI_Receive+0x1cc>
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800224c:	d102      	bne.n	8002254 <HAL_SPI_Receive+0x1d2>
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d102      	bne.n	800225a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002258:	e017      	b.n	800228a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800225e:	b29b      	uxth	r3, r3
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1cd      	bne.n	8002200 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	6839      	ldr	r1, [r7, #0]
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f000 fa45 	bl	80026f8 <SPI_EndRxTransaction>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d002      	beq.n	800227a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2220      	movs	r2, #32
 8002278:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800227e:	2b00      	cmp	r3, #0
 8002280:	d002      	beq.n	8002288 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	75fb      	strb	r3, [r7, #23]
 8002286:	e000      	b.n	800228a <HAL_SPI_Receive+0x208>
  }

error :
 8002288:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800229a:	7dfb      	ldrb	r3, [r7, #23]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08c      	sub	sp, #48	; 0x30
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
 80022b0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80022b2:	2301      	movs	r3, #1
 80022b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80022b6:	2300      	movs	r3, #0
 80022b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d101      	bne.n	80022ca <HAL_SPI_TransmitReceive+0x26>
 80022c6:	2302      	movs	r3, #2
 80022c8:	e18a      	b.n	80025e0 <HAL_SPI_TransmitReceive+0x33c>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022d2:	f7fe fe21 	bl	8000f18 <HAL_GetTick>
 80022d6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80022e8:	887b      	ldrh	r3, [r7, #2]
 80022ea:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80022ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d00f      	beq.n	8002314 <HAL_SPI_TransmitReceive+0x70>
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022fa:	d107      	bne.n	800230c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d103      	bne.n	800230c <HAL_SPI_TransmitReceive+0x68>
 8002304:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002308:	2b04      	cmp	r3, #4
 800230a:	d003      	beq.n	8002314 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800230c:	2302      	movs	r3, #2
 800230e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002312:	e15b      	b.n	80025cc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d005      	beq.n	8002326 <HAL_SPI_TransmitReceive+0x82>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d002      	beq.n	8002326 <HAL_SPI_TransmitReceive+0x82>
 8002320:	887b      	ldrh	r3, [r7, #2]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d103      	bne.n	800232e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800232c:	e14e      	b.n	80025cc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b04      	cmp	r3, #4
 8002338:	d003      	beq.n	8002342 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2205      	movs	r2, #5
 800233e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	887a      	ldrh	r2, [r7, #2]
 8002352:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	887a      	ldrh	r2, [r7, #2]
 8002358:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	887a      	ldrh	r2, [r7, #2]
 8002364:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	887a      	ldrh	r2, [r7, #2]
 800236a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2200      	movs	r2, #0
 8002376:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002382:	2b40      	cmp	r3, #64	; 0x40
 8002384:	d007      	beq.n	8002396 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002394:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800239e:	d178      	bne.n	8002492 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d002      	beq.n	80023ae <HAL_SPI_TransmitReceive+0x10a>
 80023a8:	8b7b      	ldrh	r3, [r7, #26]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d166      	bne.n	800247c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	881a      	ldrh	r2, [r3, #0]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	1c9a      	adds	r2, r3, #2
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	3b01      	subs	r3, #1
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023d2:	e053      	b.n	800247c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d11b      	bne.n	800241a <HAL_SPI_TransmitReceive+0x176>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d016      	beq.n	800241a <HAL_SPI_TransmitReceive+0x176>
 80023ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d113      	bne.n	800241a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	881a      	ldrh	r2, [r3, #0]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	1c9a      	adds	r2, r3, #2
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800240c:	b29b      	uxth	r3, r3
 800240e:	3b01      	subs	r3, #1
 8002410:	b29a      	uxth	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002416:	2300      	movs	r3, #0
 8002418:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	2b01      	cmp	r3, #1
 8002426:	d119      	bne.n	800245c <HAL_SPI_TransmitReceive+0x1b8>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800242c:	b29b      	uxth	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d014      	beq.n	800245c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68da      	ldr	r2, [r3, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243c:	b292      	uxth	r2, r2
 800243e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002444:	1c9a      	adds	r2, r3, #2
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800244e:	b29b      	uxth	r3, r3
 8002450:	3b01      	subs	r3, #1
 8002452:	b29a      	uxth	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002458:	2301      	movs	r3, #1
 800245a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800245c:	f7fe fd5c 	bl	8000f18 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002468:	429a      	cmp	r2, r3
 800246a:	d807      	bhi.n	800247c <HAL_SPI_TransmitReceive+0x1d8>
 800246c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800246e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002472:	d003      	beq.n	800247c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800247a:	e0a7      	b.n	80025cc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002480:	b29b      	uxth	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1a6      	bne.n	80023d4 <HAL_SPI_TransmitReceive+0x130>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800248a:	b29b      	uxth	r3, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1a1      	bne.n	80023d4 <HAL_SPI_TransmitReceive+0x130>
 8002490:	e07c      	b.n	800258c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d002      	beq.n	80024a0 <HAL_SPI_TransmitReceive+0x1fc>
 800249a:	8b7b      	ldrh	r3, [r7, #26]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d16b      	bne.n	8002578 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	330c      	adds	r3, #12
 80024aa:	7812      	ldrb	r2, [r2, #0]
 80024ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	1c5a      	adds	r2, r3, #1
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024bc:	b29b      	uxth	r3, r3
 80024be:	3b01      	subs	r3, #1
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024c6:	e057      	b.n	8002578 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d11c      	bne.n	8002510 <HAL_SPI_TransmitReceive+0x26c>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024da:	b29b      	uxth	r3, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d017      	beq.n	8002510 <HAL_SPI_TransmitReceive+0x26c>
 80024e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d114      	bne.n	8002510 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	330c      	adds	r3, #12
 80024f0:	7812      	ldrb	r2, [r2, #0]
 80024f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f8:	1c5a      	adds	r2, r3, #1
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002502:	b29b      	uxth	r3, r3
 8002504:	3b01      	subs	r3, #1
 8002506:	b29a      	uxth	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800250c:	2300      	movs	r3, #0
 800250e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b01      	cmp	r3, #1
 800251c:	d119      	bne.n	8002552 <HAL_SPI_TransmitReceive+0x2ae>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002522:	b29b      	uxth	r3, r3
 8002524:	2b00      	cmp	r3, #0
 8002526:	d014      	beq.n	8002552 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253a:	1c5a      	adds	r2, r3, #1
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002544:	b29b      	uxth	r3, r3
 8002546:	3b01      	subs	r3, #1
 8002548:	b29a      	uxth	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800254e:	2301      	movs	r3, #1
 8002550:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002552:	f7fe fce1 	bl	8000f18 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800255e:	429a      	cmp	r2, r3
 8002560:	d803      	bhi.n	800256a <HAL_SPI_TransmitReceive+0x2c6>
 8002562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002568:	d102      	bne.n	8002570 <HAL_SPI_TransmitReceive+0x2cc>
 800256a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800256c:	2b00      	cmp	r3, #0
 800256e:	d103      	bne.n	8002578 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002576:	e029      	b.n	80025cc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800257c:	b29b      	uxth	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1a2      	bne.n	80024c8 <HAL_SPI_TransmitReceive+0x224>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002586:	b29b      	uxth	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d19d      	bne.n	80024c8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800258c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800258e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f000 f917 	bl	80027c4 <SPI_EndRxTxTransaction>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d006      	beq.n	80025aa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2220      	movs	r2, #32
 80025a6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80025a8:	e010      	b.n	80025cc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10b      	bne.n	80025ca <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025b2:	2300      	movs	r3, #0
 80025b4:	617b      	str	r3, [r7, #20]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	617b      	str	r3, [r7, #20]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	617b      	str	r3, [r7, #20]
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	e000      	b.n	80025cc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80025ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80025dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3730      	adds	r7, #48	; 0x30
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b088      	sub	sp, #32
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	603b      	str	r3, [r7, #0]
 80025f4:	4613      	mov	r3, r2
 80025f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80025f8:	f7fe fc8e 	bl	8000f18 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002600:	1a9b      	subs	r3, r3, r2
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	4413      	add	r3, r2
 8002606:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002608:	f7fe fc86 	bl	8000f18 <HAL_GetTick>
 800260c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800260e:	4b39      	ldr	r3, [pc, #228]	; (80026f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	015b      	lsls	r3, r3, #5
 8002614:	0d1b      	lsrs	r3, r3, #20
 8002616:	69fa      	ldr	r2, [r7, #28]
 8002618:	fb02 f303 	mul.w	r3, r2, r3
 800261c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800261e:	e054      	b.n	80026ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002626:	d050      	beq.n	80026ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002628:	f7fe fc76 	bl	8000f18 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	69fa      	ldr	r2, [r7, #28]
 8002634:	429a      	cmp	r2, r3
 8002636:	d902      	bls.n	800263e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d13d      	bne.n	80026ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800264c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002656:	d111      	bne.n	800267c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002660:	d004      	beq.n	800266c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800266a:	d107      	bne.n	800267c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800267a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002680:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002684:	d10f      	bne.n	80026a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e017      	b.n	80026ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80026c0:	2300      	movs	r3, #0
 80026c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	4013      	ands	r3, r2
 80026d4:	68ba      	ldr	r2, [r7, #8]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	bf0c      	ite	eq
 80026da:	2301      	moveq	r3, #1
 80026dc:	2300      	movne	r3, #0
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	461a      	mov	r2, r3
 80026e2:	79fb      	ldrb	r3, [r7, #7]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d19b      	bne.n	8002620 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3720      	adds	r7, #32
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20000014 	.word	0x20000014

080026f8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af02      	add	r7, sp, #8
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800270c:	d111      	bne.n	8002732 <SPI_EndRxTransaction+0x3a>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002716:	d004      	beq.n	8002722 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002720:	d107      	bne.n	8002732 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002730:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800273a:	d12a      	bne.n	8002792 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002744:	d012      	beq.n	800276c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	2200      	movs	r2, #0
 800274e:	2180      	movs	r1, #128	; 0x80
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f7ff ff49 	bl	80025e8 <SPI_WaitFlagStateUntilTimeout>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d02d      	beq.n	80027b8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002760:	f043 0220 	orr.w	r2, r3, #32
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e026      	b.n	80027ba <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	2200      	movs	r2, #0
 8002774:	2101      	movs	r1, #1
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f7ff ff36 	bl	80025e8 <SPI_WaitFlagStateUntilTimeout>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d01a      	beq.n	80027b8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002786:	f043 0220 	orr.w	r2, r3, #32
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e013      	b.n	80027ba <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	2200      	movs	r2, #0
 800279a:	2101      	movs	r1, #1
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f7ff ff23 	bl	80025e8 <SPI_WaitFlagStateUntilTimeout>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d007      	beq.n	80027b8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ac:	f043 0220 	orr.w	r2, r3, #32
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e000      	b.n	80027ba <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
	...

080027c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b088      	sub	sp, #32
 80027c8:	af02      	add	r7, sp, #8
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80027d0:	4b1b      	ldr	r3, [pc, #108]	; (8002840 <SPI_EndRxTxTransaction+0x7c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a1b      	ldr	r2, [pc, #108]	; (8002844 <SPI_EndRxTxTransaction+0x80>)
 80027d6:	fba2 2303 	umull	r2, r3, r2, r3
 80027da:	0d5b      	lsrs	r3, r3, #21
 80027dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027e0:	fb02 f303 	mul.w	r3, r2, r3
 80027e4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027ee:	d112      	bne.n	8002816 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2200      	movs	r2, #0
 80027f8:	2180      	movs	r1, #128	; 0x80
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f7ff fef4 	bl	80025e8 <SPI_WaitFlagStateUntilTimeout>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d016      	beq.n	8002834 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280a:	f043 0220 	orr.w	r2, r3, #32
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e00f      	b.n	8002836 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00a      	beq.n	8002832 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	3b01      	subs	r3, #1
 8002820:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800282c:	2b80      	cmp	r3, #128	; 0x80
 800282e:	d0f2      	beq.n	8002816 <SPI_EndRxTxTransaction+0x52>
 8002830:	e000      	b.n	8002834 <SPI_EndRxTxTransaction+0x70>
        break;
 8002832:	bf00      	nop
  }

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	20000014 	.word	0x20000014
 8002844:	165e9f81 	.word	0x165e9f81

08002848 <siprintf>:
 8002848:	b40e      	push	{r1, r2, r3}
 800284a:	b500      	push	{lr}
 800284c:	b09c      	sub	sp, #112	; 0x70
 800284e:	ab1d      	add	r3, sp, #116	; 0x74
 8002850:	9002      	str	r0, [sp, #8]
 8002852:	9006      	str	r0, [sp, #24]
 8002854:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002858:	4809      	ldr	r0, [pc, #36]	; (8002880 <siprintf+0x38>)
 800285a:	9107      	str	r1, [sp, #28]
 800285c:	9104      	str	r1, [sp, #16]
 800285e:	4909      	ldr	r1, [pc, #36]	; (8002884 <siprintf+0x3c>)
 8002860:	f853 2b04 	ldr.w	r2, [r3], #4
 8002864:	9105      	str	r1, [sp, #20]
 8002866:	6800      	ldr	r0, [r0, #0]
 8002868:	9301      	str	r3, [sp, #4]
 800286a:	a902      	add	r1, sp, #8
 800286c:	f000 f992 	bl	8002b94 <_svfiprintf_r>
 8002870:	9b02      	ldr	r3, [sp, #8]
 8002872:	2200      	movs	r2, #0
 8002874:	701a      	strb	r2, [r3, #0]
 8002876:	b01c      	add	sp, #112	; 0x70
 8002878:	f85d eb04 	ldr.w	lr, [sp], #4
 800287c:	b003      	add	sp, #12
 800287e:	4770      	bx	lr
 8002880:	2000006c 	.word	0x2000006c
 8002884:	ffff0208 	.word	0xffff0208

08002888 <memset>:
 8002888:	4402      	add	r2, r0
 800288a:	4603      	mov	r3, r0
 800288c:	4293      	cmp	r3, r2
 800288e:	d100      	bne.n	8002892 <memset+0xa>
 8002890:	4770      	bx	lr
 8002892:	f803 1b01 	strb.w	r1, [r3], #1
 8002896:	e7f9      	b.n	800288c <memset+0x4>

08002898 <__errno>:
 8002898:	4b01      	ldr	r3, [pc, #4]	; (80028a0 <__errno+0x8>)
 800289a:	6818      	ldr	r0, [r3, #0]
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	2000006c 	.word	0x2000006c

080028a4 <__libc_init_array>:
 80028a4:	b570      	push	{r4, r5, r6, lr}
 80028a6:	4d0d      	ldr	r5, [pc, #52]	; (80028dc <__libc_init_array+0x38>)
 80028a8:	4c0d      	ldr	r4, [pc, #52]	; (80028e0 <__libc_init_array+0x3c>)
 80028aa:	1b64      	subs	r4, r4, r5
 80028ac:	10a4      	asrs	r4, r4, #2
 80028ae:	2600      	movs	r6, #0
 80028b0:	42a6      	cmp	r6, r4
 80028b2:	d109      	bne.n	80028c8 <__libc_init_array+0x24>
 80028b4:	4d0b      	ldr	r5, [pc, #44]	; (80028e4 <__libc_init_array+0x40>)
 80028b6:	4c0c      	ldr	r4, [pc, #48]	; (80028e8 <__libc_init_array+0x44>)
 80028b8:	f000 fc6a 	bl	8003190 <_init>
 80028bc:	1b64      	subs	r4, r4, r5
 80028be:	10a4      	asrs	r4, r4, #2
 80028c0:	2600      	movs	r6, #0
 80028c2:	42a6      	cmp	r6, r4
 80028c4:	d105      	bne.n	80028d2 <__libc_init_array+0x2e>
 80028c6:	bd70      	pop	{r4, r5, r6, pc}
 80028c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80028cc:	4798      	blx	r3
 80028ce:	3601      	adds	r6, #1
 80028d0:	e7ee      	b.n	80028b0 <__libc_init_array+0xc>
 80028d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80028d6:	4798      	blx	r3
 80028d8:	3601      	adds	r6, #1
 80028da:	e7f2      	b.n	80028c2 <__libc_init_array+0x1e>
 80028dc:	08003218 	.word	0x08003218
 80028e0:	08003218 	.word	0x08003218
 80028e4:	08003218 	.word	0x08003218
 80028e8:	0800321c 	.word	0x0800321c

080028ec <__retarget_lock_acquire_recursive>:
 80028ec:	4770      	bx	lr

080028ee <__retarget_lock_release_recursive>:
 80028ee:	4770      	bx	lr

080028f0 <_free_r>:
 80028f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80028f2:	2900      	cmp	r1, #0
 80028f4:	d044      	beq.n	8002980 <_free_r+0x90>
 80028f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80028fa:	9001      	str	r0, [sp, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f1a1 0404 	sub.w	r4, r1, #4
 8002902:	bfb8      	it	lt
 8002904:	18e4      	addlt	r4, r4, r3
 8002906:	f000 f8df 	bl	8002ac8 <__malloc_lock>
 800290a:	4a1e      	ldr	r2, [pc, #120]	; (8002984 <_free_r+0x94>)
 800290c:	9801      	ldr	r0, [sp, #4]
 800290e:	6813      	ldr	r3, [r2, #0]
 8002910:	b933      	cbnz	r3, 8002920 <_free_r+0x30>
 8002912:	6063      	str	r3, [r4, #4]
 8002914:	6014      	str	r4, [r2, #0]
 8002916:	b003      	add	sp, #12
 8002918:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800291c:	f000 b8da 	b.w	8002ad4 <__malloc_unlock>
 8002920:	42a3      	cmp	r3, r4
 8002922:	d908      	bls.n	8002936 <_free_r+0x46>
 8002924:	6825      	ldr	r5, [r4, #0]
 8002926:	1961      	adds	r1, r4, r5
 8002928:	428b      	cmp	r3, r1
 800292a:	bf01      	itttt	eq
 800292c:	6819      	ldreq	r1, [r3, #0]
 800292e:	685b      	ldreq	r3, [r3, #4]
 8002930:	1949      	addeq	r1, r1, r5
 8002932:	6021      	streq	r1, [r4, #0]
 8002934:	e7ed      	b.n	8002912 <_free_r+0x22>
 8002936:	461a      	mov	r2, r3
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	b10b      	cbz	r3, 8002940 <_free_r+0x50>
 800293c:	42a3      	cmp	r3, r4
 800293e:	d9fa      	bls.n	8002936 <_free_r+0x46>
 8002940:	6811      	ldr	r1, [r2, #0]
 8002942:	1855      	adds	r5, r2, r1
 8002944:	42a5      	cmp	r5, r4
 8002946:	d10b      	bne.n	8002960 <_free_r+0x70>
 8002948:	6824      	ldr	r4, [r4, #0]
 800294a:	4421      	add	r1, r4
 800294c:	1854      	adds	r4, r2, r1
 800294e:	42a3      	cmp	r3, r4
 8002950:	6011      	str	r1, [r2, #0]
 8002952:	d1e0      	bne.n	8002916 <_free_r+0x26>
 8002954:	681c      	ldr	r4, [r3, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	6053      	str	r3, [r2, #4]
 800295a:	440c      	add	r4, r1
 800295c:	6014      	str	r4, [r2, #0]
 800295e:	e7da      	b.n	8002916 <_free_r+0x26>
 8002960:	d902      	bls.n	8002968 <_free_r+0x78>
 8002962:	230c      	movs	r3, #12
 8002964:	6003      	str	r3, [r0, #0]
 8002966:	e7d6      	b.n	8002916 <_free_r+0x26>
 8002968:	6825      	ldr	r5, [r4, #0]
 800296a:	1961      	adds	r1, r4, r5
 800296c:	428b      	cmp	r3, r1
 800296e:	bf04      	itt	eq
 8002970:	6819      	ldreq	r1, [r3, #0]
 8002972:	685b      	ldreq	r3, [r3, #4]
 8002974:	6063      	str	r3, [r4, #4]
 8002976:	bf04      	itt	eq
 8002978:	1949      	addeq	r1, r1, r5
 800297a:	6021      	streq	r1, [r4, #0]
 800297c:	6054      	str	r4, [r2, #4]
 800297e:	e7ca      	b.n	8002916 <_free_r+0x26>
 8002980:	b003      	add	sp, #12
 8002982:	bd30      	pop	{r4, r5, pc}
 8002984:	20000334 	.word	0x20000334

08002988 <sbrk_aligned>:
 8002988:	b570      	push	{r4, r5, r6, lr}
 800298a:	4e0e      	ldr	r6, [pc, #56]	; (80029c4 <sbrk_aligned+0x3c>)
 800298c:	460c      	mov	r4, r1
 800298e:	6831      	ldr	r1, [r6, #0]
 8002990:	4605      	mov	r5, r0
 8002992:	b911      	cbnz	r1, 800299a <sbrk_aligned+0x12>
 8002994:	f000 fba6 	bl	80030e4 <_sbrk_r>
 8002998:	6030      	str	r0, [r6, #0]
 800299a:	4621      	mov	r1, r4
 800299c:	4628      	mov	r0, r5
 800299e:	f000 fba1 	bl	80030e4 <_sbrk_r>
 80029a2:	1c43      	adds	r3, r0, #1
 80029a4:	d00a      	beq.n	80029bc <sbrk_aligned+0x34>
 80029a6:	1cc4      	adds	r4, r0, #3
 80029a8:	f024 0403 	bic.w	r4, r4, #3
 80029ac:	42a0      	cmp	r0, r4
 80029ae:	d007      	beq.n	80029c0 <sbrk_aligned+0x38>
 80029b0:	1a21      	subs	r1, r4, r0
 80029b2:	4628      	mov	r0, r5
 80029b4:	f000 fb96 	bl	80030e4 <_sbrk_r>
 80029b8:	3001      	adds	r0, #1
 80029ba:	d101      	bne.n	80029c0 <sbrk_aligned+0x38>
 80029bc:	f04f 34ff 	mov.w	r4, #4294967295
 80029c0:	4620      	mov	r0, r4
 80029c2:	bd70      	pop	{r4, r5, r6, pc}
 80029c4:	20000338 	.word	0x20000338

080029c8 <_malloc_r>:
 80029c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029cc:	1ccd      	adds	r5, r1, #3
 80029ce:	f025 0503 	bic.w	r5, r5, #3
 80029d2:	3508      	adds	r5, #8
 80029d4:	2d0c      	cmp	r5, #12
 80029d6:	bf38      	it	cc
 80029d8:	250c      	movcc	r5, #12
 80029da:	2d00      	cmp	r5, #0
 80029dc:	4607      	mov	r7, r0
 80029de:	db01      	blt.n	80029e4 <_malloc_r+0x1c>
 80029e0:	42a9      	cmp	r1, r5
 80029e2:	d905      	bls.n	80029f0 <_malloc_r+0x28>
 80029e4:	230c      	movs	r3, #12
 80029e6:	603b      	str	r3, [r7, #0]
 80029e8:	2600      	movs	r6, #0
 80029ea:	4630      	mov	r0, r6
 80029ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80029f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002ac4 <_malloc_r+0xfc>
 80029f4:	f000 f868 	bl	8002ac8 <__malloc_lock>
 80029f8:	f8d8 3000 	ldr.w	r3, [r8]
 80029fc:	461c      	mov	r4, r3
 80029fe:	bb5c      	cbnz	r4, 8002a58 <_malloc_r+0x90>
 8002a00:	4629      	mov	r1, r5
 8002a02:	4638      	mov	r0, r7
 8002a04:	f7ff ffc0 	bl	8002988 <sbrk_aligned>
 8002a08:	1c43      	adds	r3, r0, #1
 8002a0a:	4604      	mov	r4, r0
 8002a0c:	d155      	bne.n	8002aba <_malloc_r+0xf2>
 8002a0e:	f8d8 4000 	ldr.w	r4, [r8]
 8002a12:	4626      	mov	r6, r4
 8002a14:	2e00      	cmp	r6, #0
 8002a16:	d145      	bne.n	8002aa4 <_malloc_r+0xdc>
 8002a18:	2c00      	cmp	r4, #0
 8002a1a:	d048      	beq.n	8002aae <_malloc_r+0xe6>
 8002a1c:	6823      	ldr	r3, [r4, #0]
 8002a1e:	4631      	mov	r1, r6
 8002a20:	4638      	mov	r0, r7
 8002a22:	eb04 0903 	add.w	r9, r4, r3
 8002a26:	f000 fb5d 	bl	80030e4 <_sbrk_r>
 8002a2a:	4581      	cmp	r9, r0
 8002a2c:	d13f      	bne.n	8002aae <_malloc_r+0xe6>
 8002a2e:	6821      	ldr	r1, [r4, #0]
 8002a30:	1a6d      	subs	r5, r5, r1
 8002a32:	4629      	mov	r1, r5
 8002a34:	4638      	mov	r0, r7
 8002a36:	f7ff ffa7 	bl	8002988 <sbrk_aligned>
 8002a3a:	3001      	adds	r0, #1
 8002a3c:	d037      	beq.n	8002aae <_malloc_r+0xe6>
 8002a3e:	6823      	ldr	r3, [r4, #0]
 8002a40:	442b      	add	r3, r5
 8002a42:	6023      	str	r3, [r4, #0]
 8002a44:	f8d8 3000 	ldr.w	r3, [r8]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d038      	beq.n	8002abe <_malloc_r+0xf6>
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	42a2      	cmp	r2, r4
 8002a50:	d12b      	bne.n	8002aaa <_malloc_r+0xe2>
 8002a52:	2200      	movs	r2, #0
 8002a54:	605a      	str	r2, [r3, #4]
 8002a56:	e00f      	b.n	8002a78 <_malloc_r+0xb0>
 8002a58:	6822      	ldr	r2, [r4, #0]
 8002a5a:	1b52      	subs	r2, r2, r5
 8002a5c:	d41f      	bmi.n	8002a9e <_malloc_r+0xd6>
 8002a5e:	2a0b      	cmp	r2, #11
 8002a60:	d917      	bls.n	8002a92 <_malloc_r+0xca>
 8002a62:	1961      	adds	r1, r4, r5
 8002a64:	42a3      	cmp	r3, r4
 8002a66:	6025      	str	r5, [r4, #0]
 8002a68:	bf18      	it	ne
 8002a6a:	6059      	strne	r1, [r3, #4]
 8002a6c:	6863      	ldr	r3, [r4, #4]
 8002a6e:	bf08      	it	eq
 8002a70:	f8c8 1000 	streq.w	r1, [r8]
 8002a74:	5162      	str	r2, [r4, r5]
 8002a76:	604b      	str	r3, [r1, #4]
 8002a78:	4638      	mov	r0, r7
 8002a7a:	f104 060b 	add.w	r6, r4, #11
 8002a7e:	f000 f829 	bl	8002ad4 <__malloc_unlock>
 8002a82:	f026 0607 	bic.w	r6, r6, #7
 8002a86:	1d23      	adds	r3, r4, #4
 8002a88:	1af2      	subs	r2, r6, r3
 8002a8a:	d0ae      	beq.n	80029ea <_malloc_r+0x22>
 8002a8c:	1b9b      	subs	r3, r3, r6
 8002a8e:	50a3      	str	r3, [r4, r2]
 8002a90:	e7ab      	b.n	80029ea <_malloc_r+0x22>
 8002a92:	42a3      	cmp	r3, r4
 8002a94:	6862      	ldr	r2, [r4, #4]
 8002a96:	d1dd      	bne.n	8002a54 <_malloc_r+0x8c>
 8002a98:	f8c8 2000 	str.w	r2, [r8]
 8002a9c:	e7ec      	b.n	8002a78 <_malloc_r+0xb0>
 8002a9e:	4623      	mov	r3, r4
 8002aa0:	6864      	ldr	r4, [r4, #4]
 8002aa2:	e7ac      	b.n	80029fe <_malloc_r+0x36>
 8002aa4:	4634      	mov	r4, r6
 8002aa6:	6876      	ldr	r6, [r6, #4]
 8002aa8:	e7b4      	b.n	8002a14 <_malloc_r+0x4c>
 8002aaa:	4613      	mov	r3, r2
 8002aac:	e7cc      	b.n	8002a48 <_malloc_r+0x80>
 8002aae:	230c      	movs	r3, #12
 8002ab0:	603b      	str	r3, [r7, #0]
 8002ab2:	4638      	mov	r0, r7
 8002ab4:	f000 f80e 	bl	8002ad4 <__malloc_unlock>
 8002ab8:	e797      	b.n	80029ea <_malloc_r+0x22>
 8002aba:	6025      	str	r5, [r4, #0]
 8002abc:	e7dc      	b.n	8002a78 <_malloc_r+0xb0>
 8002abe:	605b      	str	r3, [r3, #4]
 8002ac0:	deff      	udf	#255	; 0xff
 8002ac2:	bf00      	nop
 8002ac4:	20000334 	.word	0x20000334

08002ac8 <__malloc_lock>:
 8002ac8:	4801      	ldr	r0, [pc, #4]	; (8002ad0 <__malloc_lock+0x8>)
 8002aca:	f7ff bf0f 	b.w	80028ec <__retarget_lock_acquire_recursive>
 8002ace:	bf00      	nop
 8002ad0:	20000330 	.word	0x20000330

08002ad4 <__malloc_unlock>:
 8002ad4:	4801      	ldr	r0, [pc, #4]	; (8002adc <__malloc_unlock+0x8>)
 8002ad6:	f7ff bf0a 	b.w	80028ee <__retarget_lock_release_recursive>
 8002ada:	bf00      	nop
 8002adc:	20000330 	.word	0x20000330

08002ae0 <__ssputs_r>:
 8002ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ae4:	688e      	ldr	r6, [r1, #8]
 8002ae6:	461f      	mov	r7, r3
 8002ae8:	42be      	cmp	r6, r7
 8002aea:	680b      	ldr	r3, [r1, #0]
 8002aec:	4682      	mov	sl, r0
 8002aee:	460c      	mov	r4, r1
 8002af0:	4690      	mov	r8, r2
 8002af2:	d82c      	bhi.n	8002b4e <__ssputs_r+0x6e>
 8002af4:	898a      	ldrh	r2, [r1, #12]
 8002af6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002afa:	d026      	beq.n	8002b4a <__ssputs_r+0x6a>
 8002afc:	6965      	ldr	r5, [r4, #20]
 8002afe:	6909      	ldr	r1, [r1, #16]
 8002b00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002b04:	eba3 0901 	sub.w	r9, r3, r1
 8002b08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002b0c:	1c7b      	adds	r3, r7, #1
 8002b0e:	444b      	add	r3, r9
 8002b10:	106d      	asrs	r5, r5, #1
 8002b12:	429d      	cmp	r5, r3
 8002b14:	bf38      	it	cc
 8002b16:	461d      	movcc	r5, r3
 8002b18:	0553      	lsls	r3, r2, #21
 8002b1a:	d527      	bpl.n	8002b6c <__ssputs_r+0x8c>
 8002b1c:	4629      	mov	r1, r5
 8002b1e:	f7ff ff53 	bl	80029c8 <_malloc_r>
 8002b22:	4606      	mov	r6, r0
 8002b24:	b360      	cbz	r0, 8002b80 <__ssputs_r+0xa0>
 8002b26:	6921      	ldr	r1, [r4, #16]
 8002b28:	464a      	mov	r2, r9
 8002b2a:	f000 faeb 	bl	8003104 <memcpy>
 8002b2e:	89a3      	ldrh	r3, [r4, #12]
 8002b30:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b38:	81a3      	strh	r3, [r4, #12]
 8002b3a:	6126      	str	r6, [r4, #16]
 8002b3c:	6165      	str	r5, [r4, #20]
 8002b3e:	444e      	add	r6, r9
 8002b40:	eba5 0509 	sub.w	r5, r5, r9
 8002b44:	6026      	str	r6, [r4, #0]
 8002b46:	60a5      	str	r5, [r4, #8]
 8002b48:	463e      	mov	r6, r7
 8002b4a:	42be      	cmp	r6, r7
 8002b4c:	d900      	bls.n	8002b50 <__ssputs_r+0x70>
 8002b4e:	463e      	mov	r6, r7
 8002b50:	6820      	ldr	r0, [r4, #0]
 8002b52:	4632      	mov	r2, r6
 8002b54:	4641      	mov	r1, r8
 8002b56:	f000 faab 	bl	80030b0 <memmove>
 8002b5a:	68a3      	ldr	r3, [r4, #8]
 8002b5c:	1b9b      	subs	r3, r3, r6
 8002b5e:	60a3      	str	r3, [r4, #8]
 8002b60:	6823      	ldr	r3, [r4, #0]
 8002b62:	4433      	add	r3, r6
 8002b64:	6023      	str	r3, [r4, #0]
 8002b66:	2000      	movs	r0, #0
 8002b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b6c:	462a      	mov	r2, r5
 8002b6e:	f000 fad7 	bl	8003120 <_realloc_r>
 8002b72:	4606      	mov	r6, r0
 8002b74:	2800      	cmp	r0, #0
 8002b76:	d1e0      	bne.n	8002b3a <__ssputs_r+0x5a>
 8002b78:	6921      	ldr	r1, [r4, #16]
 8002b7a:	4650      	mov	r0, sl
 8002b7c:	f7ff feb8 	bl	80028f0 <_free_r>
 8002b80:	230c      	movs	r3, #12
 8002b82:	f8ca 3000 	str.w	r3, [sl]
 8002b86:	89a3      	ldrh	r3, [r4, #12]
 8002b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b8c:	81a3      	strh	r3, [r4, #12]
 8002b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8002b92:	e7e9      	b.n	8002b68 <__ssputs_r+0x88>

08002b94 <_svfiprintf_r>:
 8002b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b98:	4698      	mov	r8, r3
 8002b9a:	898b      	ldrh	r3, [r1, #12]
 8002b9c:	061b      	lsls	r3, r3, #24
 8002b9e:	b09d      	sub	sp, #116	; 0x74
 8002ba0:	4607      	mov	r7, r0
 8002ba2:	460d      	mov	r5, r1
 8002ba4:	4614      	mov	r4, r2
 8002ba6:	d50e      	bpl.n	8002bc6 <_svfiprintf_r+0x32>
 8002ba8:	690b      	ldr	r3, [r1, #16]
 8002baa:	b963      	cbnz	r3, 8002bc6 <_svfiprintf_r+0x32>
 8002bac:	2140      	movs	r1, #64	; 0x40
 8002bae:	f7ff ff0b 	bl	80029c8 <_malloc_r>
 8002bb2:	6028      	str	r0, [r5, #0]
 8002bb4:	6128      	str	r0, [r5, #16]
 8002bb6:	b920      	cbnz	r0, 8002bc2 <_svfiprintf_r+0x2e>
 8002bb8:	230c      	movs	r3, #12
 8002bba:	603b      	str	r3, [r7, #0]
 8002bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc0:	e0d0      	b.n	8002d64 <_svfiprintf_r+0x1d0>
 8002bc2:	2340      	movs	r3, #64	; 0x40
 8002bc4:	616b      	str	r3, [r5, #20]
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	9309      	str	r3, [sp, #36]	; 0x24
 8002bca:	2320      	movs	r3, #32
 8002bcc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002bd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8002bd4:	2330      	movs	r3, #48	; 0x30
 8002bd6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002d7c <_svfiprintf_r+0x1e8>
 8002bda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002bde:	f04f 0901 	mov.w	r9, #1
 8002be2:	4623      	mov	r3, r4
 8002be4:	469a      	mov	sl, r3
 8002be6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002bea:	b10a      	cbz	r2, 8002bf0 <_svfiprintf_r+0x5c>
 8002bec:	2a25      	cmp	r2, #37	; 0x25
 8002bee:	d1f9      	bne.n	8002be4 <_svfiprintf_r+0x50>
 8002bf0:	ebba 0b04 	subs.w	fp, sl, r4
 8002bf4:	d00b      	beq.n	8002c0e <_svfiprintf_r+0x7a>
 8002bf6:	465b      	mov	r3, fp
 8002bf8:	4622      	mov	r2, r4
 8002bfa:	4629      	mov	r1, r5
 8002bfc:	4638      	mov	r0, r7
 8002bfe:	f7ff ff6f 	bl	8002ae0 <__ssputs_r>
 8002c02:	3001      	adds	r0, #1
 8002c04:	f000 80a9 	beq.w	8002d5a <_svfiprintf_r+0x1c6>
 8002c08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002c0a:	445a      	add	r2, fp
 8002c0c:	9209      	str	r2, [sp, #36]	; 0x24
 8002c0e:	f89a 3000 	ldrb.w	r3, [sl]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 80a1 	beq.w	8002d5a <_svfiprintf_r+0x1c6>
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8002c1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002c22:	f10a 0a01 	add.w	sl, sl, #1
 8002c26:	9304      	str	r3, [sp, #16]
 8002c28:	9307      	str	r3, [sp, #28]
 8002c2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002c2e:	931a      	str	r3, [sp, #104]	; 0x68
 8002c30:	4654      	mov	r4, sl
 8002c32:	2205      	movs	r2, #5
 8002c34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c38:	4850      	ldr	r0, [pc, #320]	; (8002d7c <_svfiprintf_r+0x1e8>)
 8002c3a:	f7fd fad1 	bl	80001e0 <memchr>
 8002c3e:	9a04      	ldr	r2, [sp, #16]
 8002c40:	b9d8      	cbnz	r0, 8002c7a <_svfiprintf_r+0xe6>
 8002c42:	06d0      	lsls	r0, r2, #27
 8002c44:	bf44      	itt	mi
 8002c46:	2320      	movmi	r3, #32
 8002c48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c4c:	0711      	lsls	r1, r2, #28
 8002c4e:	bf44      	itt	mi
 8002c50:	232b      	movmi	r3, #43	; 0x2b
 8002c52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c56:	f89a 3000 	ldrb.w	r3, [sl]
 8002c5a:	2b2a      	cmp	r3, #42	; 0x2a
 8002c5c:	d015      	beq.n	8002c8a <_svfiprintf_r+0xf6>
 8002c5e:	9a07      	ldr	r2, [sp, #28]
 8002c60:	4654      	mov	r4, sl
 8002c62:	2000      	movs	r0, #0
 8002c64:	f04f 0c0a 	mov.w	ip, #10
 8002c68:	4621      	mov	r1, r4
 8002c6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002c6e:	3b30      	subs	r3, #48	; 0x30
 8002c70:	2b09      	cmp	r3, #9
 8002c72:	d94d      	bls.n	8002d10 <_svfiprintf_r+0x17c>
 8002c74:	b1b0      	cbz	r0, 8002ca4 <_svfiprintf_r+0x110>
 8002c76:	9207      	str	r2, [sp, #28]
 8002c78:	e014      	b.n	8002ca4 <_svfiprintf_r+0x110>
 8002c7a:	eba0 0308 	sub.w	r3, r0, r8
 8002c7e:	fa09 f303 	lsl.w	r3, r9, r3
 8002c82:	4313      	orrs	r3, r2
 8002c84:	9304      	str	r3, [sp, #16]
 8002c86:	46a2      	mov	sl, r4
 8002c88:	e7d2      	b.n	8002c30 <_svfiprintf_r+0x9c>
 8002c8a:	9b03      	ldr	r3, [sp, #12]
 8002c8c:	1d19      	adds	r1, r3, #4
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	9103      	str	r1, [sp, #12]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	bfbb      	ittet	lt
 8002c96:	425b      	neglt	r3, r3
 8002c98:	f042 0202 	orrlt.w	r2, r2, #2
 8002c9c:	9307      	strge	r3, [sp, #28]
 8002c9e:	9307      	strlt	r3, [sp, #28]
 8002ca0:	bfb8      	it	lt
 8002ca2:	9204      	strlt	r2, [sp, #16]
 8002ca4:	7823      	ldrb	r3, [r4, #0]
 8002ca6:	2b2e      	cmp	r3, #46	; 0x2e
 8002ca8:	d10c      	bne.n	8002cc4 <_svfiprintf_r+0x130>
 8002caa:	7863      	ldrb	r3, [r4, #1]
 8002cac:	2b2a      	cmp	r3, #42	; 0x2a
 8002cae:	d134      	bne.n	8002d1a <_svfiprintf_r+0x186>
 8002cb0:	9b03      	ldr	r3, [sp, #12]
 8002cb2:	1d1a      	adds	r2, r3, #4
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	9203      	str	r2, [sp, #12]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	bfb8      	it	lt
 8002cbc:	f04f 33ff 	movlt.w	r3, #4294967295
 8002cc0:	3402      	adds	r4, #2
 8002cc2:	9305      	str	r3, [sp, #20]
 8002cc4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8002d8c <_svfiprintf_r+0x1f8>
 8002cc8:	7821      	ldrb	r1, [r4, #0]
 8002cca:	2203      	movs	r2, #3
 8002ccc:	4650      	mov	r0, sl
 8002cce:	f7fd fa87 	bl	80001e0 <memchr>
 8002cd2:	b138      	cbz	r0, 8002ce4 <_svfiprintf_r+0x150>
 8002cd4:	9b04      	ldr	r3, [sp, #16]
 8002cd6:	eba0 000a 	sub.w	r0, r0, sl
 8002cda:	2240      	movs	r2, #64	; 0x40
 8002cdc:	4082      	lsls	r2, r0
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	3401      	adds	r4, #1
 8002ce2:	9304      	str	r3, [sp, #16]
 8002ce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ce8:	4825      	ldr	r0, [pc, #148]	; (8002d80 <_svfiprintf_r+0x1ec>)
 8002cea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002cee:	2206      	movs	r2, #6
 8002cf0:	f7fd fa76 	bl	80001e0 <memchr>
 8002cf4:	2800      	cmp	r0, #0
 8002cf6:	d038      	beq.n	8002d6a <_svfiprintf_r+0x1d6>
 8002cf8:	4b22      	ldr	r3, [pc, #136]	; (8002d84 <_svfiprintf_r+0x1f0>)
 8002cfa:	bb1b      	cbnz	r3, 8002d44 <_svfiprintf_r+0x1b0>
 8002cfc:	9b03      	ldr	r3, [sp, #12]
 8002cfe:	3307      	adds	r3, #7
 8002d00:	f023 0307 	bic.w	r3, r3, #7
 8002d04:	3308      	adds	r3, #8
 8002d06:	9303      	str	r3, [sp, #12]
 8002d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d0a:	4433      	add	r3, r6
 8002d0c:	9309      	str	r3, [sp, #36]	; 0x24
 8002d0e:	e768      	b.n	8002be2 <_svfiprintf_r+0x4e>
 8002d10:	fb0c 3202 	mla	r2, ip, r2, r3
 8002d14:	460c      	mov	r4, r1
 8002d16:	2001      	movs	r0, #1
 8002d18:	e7a6      	b.n	8002c68 <_svfiprintf_r+0xd4>
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	3401      	adds	r4, #1
 8002d1e:	9305      	str	r3, [sp, #20]
 8002d20:	4619      	mov	r1, r3
 8002d22:	f04f 0c0a 	mov.w	ip, #10
 8002d26:	4620      	mov	r0, r4
 8002d28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d2c:	3a30      	subs	r2, #48	; 0x30
 8002d2e:	2a09      	cmp	r2, #9
 8002d30:	d903      	bls.n	8002d3a <_svfiprintf_r+0x1a6>
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0c6      	beq.n	8002cc4 <_svfiprintf_r+0x130>
 8002d36:	9105      	str	r1, [sp, #20]
 8002d38:	e7c4      	b.n	8002cc4 <_svfiprintf_r+0x130>
 8002d3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8002d3e:	4604      	mov	r4, r0
 8002d40:	2301      	movs	r3, #1
 8002d42:	e7f0      	b.n	8002d26 <_svfiprintf_r+0x192>
 8002d44:	ab03      	add	r3, sp, #12
 8002d46:	9300      	str	r3, [sp, #0]
 8002d48:	462a      	mov	r2, r5
 8002d4a:	4b0f      	ldr	r3, [pc, #60]	; (8002d88 <_svfiprintf_r+0x1f4>)
 8002d4c:	a904      	add	r1, sp, #16
 8002d4e:	4638      	mov	r0, r7
 8002d50:	f3af 8000 	nop.w
 8002d54:	1c42      	adds	r2, r0, #1
 8002d56:	4606      	mov	r6, r0
 8002d58:	d1d6      	bne.n	8002d08 <_svfiprintf_r+0x174>
 8002d5a:	89ab      	ldrh	r3, [r5, #12]
 8002d5c:	065b      	lsls	r3, r3, #25
 8002d5e:	f53f af2d 	bmi.w	8002bbc <_svfiprintf_r+0x28>
 8002d62:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002d64:	b01d      	add	sp, #116	; 0x74
 8002d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d6a:	ab03      	add	r3, sp, #12
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	462a      	mov	r2, r5
 8002d70:	4b05      	ldr	r3, [pc, #20]	; (8002d88 <_svfiprintf_r+0x1f4>)
 8002d72:	a904      	add	r1, sp, #16
 8002d74:	4638      	mov	r0, r7
 8002d76:	f000 f879 	bl	8002e6c <_printf_i>
 8002d7a:	e7eb      	b.n	8002d54 <_svfiprintf_r+0x1c0>
 8002d7c:	080031dc 	.word	0x080031dc
 8002d80:	080031e6 	.word	0x080031e6
 8002d84:	00000000 	.word	0x00000000
 8002d88:	08002ae1 	.word	0x08002ae1
 8002d8c:	080031e2 	.word	0x080031e2

08002d90 <_printf_common>:
 8002d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d94:	4616      	mov	r6, r2
 8002d96:	4699      	mov	r9, r3
 8002d98:	688a      	ldr	r2, [r1, #8]
 8002d9a:	690b      	ldr	r3, [r1, #16]
 8002d9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002da0:	4293      	cmp	r3, r2
 8002da2:	bfb8      	it	lt
 8002da4:	4613      	movlt	r3, r2
 8002da6:	6033      	str	r3, [r6, #0]
 8002da8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002dac:	4607      	mov	r7, r0
 8002dae:	460c      	mov	r4, r1
 8002db0:	b10a      	cbz	r2, 8002db6 <_printf_common+0x26>
 8002db2:	3301      	adds	r3, #1
 8002db4:	6033      	str	r3, [r6, #0]
 8002db6:	6823      	ldr	r3, [r4, #0]
 8002db8:	0699      	lsls	r1, r3, #26
 8002dba:	bf42      	ittt	mi
 8002dbc:	6833      	ldrmi	r3, [r6, #0]
 8002dbe:	3302      	addmi	r3, #2
 8002dc0:	6033      	strmi	r3, [r6, #0]
 8002dc2:	6825      	ldr	r5, [r4, #0]
 8002dc4:	f015 0506 	ands.w	r5, r5, #6
 8002dc8:	d106      	bne.n	8002dd8 <_printf_common+0x48>
 8002dca:	f104 0a19 	add.w	sl, r4, #25
 8002dce:	68e3      	ldr	r3, [r4, #12]
 8002dd0:	6832      	ldr	r2, [r6, #0]
 8002dd2:	1a9b      	subs	r3, r3, r2
 8002dd4:	42ab      	cmp	r3, r5
 8002dd6:	dc26      	bgt.n	8002e26 <_printf_common+0x96>
 8002dd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ddc:	1e13      	subs	r3, r2, #0
 8002dde:	6822      	ldr	r2, [r4, #0]
 8002de0:	bf18      	it	ne
 8002de2:	2301      	movne	r3, #1
 8002de4:	0692      	lsls	r2, r2, #26
 8002de6:	d42b      	bmi.n	8002e40 <_printf_common+0xb0>
 8002de8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002dec:	4649      	mov	r1, r9
 8002dee:	4638      	mov	r0, r7
 8002df0:	47c0      	blx	r8
 8002df2:	3001      	adds	r0, #1
 8002df4:	d01e      	beq.n	8002e34 <_printf_common+0xa4>
 8002df6:	6823      	ldr	r3, [r4, #0]
 8002df8:	6922      	ldr	r2, [r4, #16]
 8002dfa:	f003 0306 	and.w	r3, r3, #6
 8002dfe:	2b04      	cmp	r3, #4
 8002e00:	bf02      	ittt	eq
 8002e02:	68e5      	ldreq	r5, [r4, #12]
 8002e04:	6833      	ldreq	r3, [r6, #0]
 8002e06:	1aed      	subeq	r5, r5, r3
 8002e08:	68a3      	ldr	r3, [r4, #8]
 8002e0a:	bf0c      	ite	eq
 8002e0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e10:	2500      	movne	r5, #0
 8002e12:	4293      	cmp	r3, r2
 8002e14:	bfc4      	itt	gt
 8002e16:	1a9b      	subgt	r3, r3, r2
 8002e18:	18ed      	addgt	r5, r5, r3
 8002e1a:	2600      	movs	r6, #0
 8002e1c:	341a      	adds	r4, #26
 8002e1e:	42b5      	cmp	r5, r6
 8002e20:	d11a      	bne.n	8002e58 <_printf_common+0xc8>
 8002e22:	2000      	movs	r0, #0
 8002e24:	e008      	b.n	8002e38 <_printf_common+0xa8>
 8002e26:	2301      	movs	r3, #1
 8002e28:	4652      	mov	r2, sl
 8002e2a:	4649      	mov	r1, r9
 8002e2c:	4638      	mov	r0, r7
 8002e2e:	47c0      	blx	r8
 8002e30:	3001      	adds	r0, #1
 8002e32:	d103      	bne.n	8002e3c <_printf_common+0xac>
 8002e34:	f04f 30ff 	mov.w	r0, #4294967295
 8002e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e3c:	3501      	adds	r5, #1
 8002e3e:	e7c6      	b.n	8002dce <_printf_common+0x3e>
 8002e40:	18e1      	adds	r1, r4, r3
 8002e42:	1c5a      	adds	r2, r3, #1
 8002e44:	2030      	movs	r0, #48	; 0x30
 8002e46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002e4a:	4422      	add	r2, r4
 8002e4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002e50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002e54:	3302      	adds	r3, #2
 8002e56:	e7c7      	b.n	8002de8 <_printf_common+0x58>
 8002e58:	2301      	movs	r3, #1
 8002e5a:	4622      	mov	r2, r4
 8002e5c:	4649      	mov	r1, r9
 8002e5e:	4638      	mov	r0, r7
 8002e60:	47c0      	blx	r8
 8002e62:	3001      	adds	r0, #1
 8002e64:	d0e6      	beq.n	8002e34 <_printf_common+0xa4>
 8002e66:	3601      	adds	r6, #1
 8002e68:	e7d9      	b.n	8002e1e <_printf_common+0x8e>
	...

08002e6c <_printf_i>:
 8002e6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e70:	7e0f      	ldrb	r7, [r1, #24]
 8002e72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002e74:	2f78      	cmp	r7, #120	; 0x78
 8002e76:	4691      	mov	r9, r2
 8002e78:	4680      	mov	r8, r0
 8002e7a:	460c      	mov	r4, r1
 8002e7c:	469a      	mov	sl, r3
 8002e7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002e82:	d807      	bhi.n	8002e94 <_printf_i+0x28>
 8002e84:	2f62      	cmp	r7, #98	; 0x62
 8002e86:	d80a      	bhi.n	8002e9e <_printf_i+0x32>
 8002e88:	2f00      	cmp	r7, #0
 8002e8a:	f000 80d4 	beq.w	8003036 <_printf_i+0x1ca>
 8002e8e:	2f58      	cmp	r7, #88	; 0x58
 8002e90:	f000 80c0 	beq.w	8003014 <_printf_i+0x1a8>
 8002e94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002e9c:	e03a      	b.n	8002f14 <_printf_i+0xa8>
 8002e9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002ea2:	2b15      	cmp	r3, #21
 8002ea4:	d8f6      	bhi.n	8002e94 <_printf_i+0x28>
 8002ea6:	a101      	add	r1, pc, #4	; (adr r1, 8002eac <_printf_i+0x40>)
 8002ea8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002eac:	08002f05 	.word	0x08002f05
 8002eb0:	08002f19 	.word	0x08002f19
 8002eb4:	08002e95 	.word	0x08002e95
 8002eb8:	08002e95 	.word	0x08002e95
 8002ebc:	08002e95 	.word	0x08002e95
 8002ec0:	08002e95 	.word	0x08002e95
 8002ec4:	08002f19 	.word	0x08002f19
 8002ec8:	08002e95 	.word	0x08002e95
 8002ecc:	08002e95 	.word	0x08002e95
 8002ed0:	08002e95 	.word	0x08002e95
 8002ed4:	08002e95 	.word	0x08002e95
 8002ed8:	0800301d 	.word	0x0800301d
 8002edc:	08002f45 	.word	0x08002f45
 8002ee0:	08002fd7 	.word	0x08002fd7
 8002ee4:	08002e95 	.word	0x08002e95
 8002ee8:	08002e95 	.word	0x08002e95
 8002eec:	0800303f 	.word	0x0800303f
 8002ef0:	08002e95 	.word	0x08002e95
 8002ef4:	08002f45 	.word	0x08002f45
 8002ef8:	08002e95 	.word	0x08002e95
 8002efc:	08002e95 	.word	0x08002e95
 8002f00:	08002fdf 	.word	0x08002fdf
 8002f04:	682b      	ldr	r3, [r5, #0]
 8002f06:	1d1a      	adds	r2, r3, #4
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	602a      	str	r2, [r5, #0]
 8002f0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f14:	2301      	movs	r3, #1
 8002f16:	e09f      	b.n	8003058 <_printf_i+0x1ec>
 8002f18:	6820      	ldr	r0, [r4, #0]
 8002f1a:	682b      	ldr	r3, [r5, #0]
 8002f1c:	0607      	lsls	r7, r0, #24
 8002f1e:	f103 0104 	add.w	r1, r3, #4
 8002f22:	6029      	str	r1, [r5, #0]
 8002f24:	d501      	bpl.n	8002f2a <_printf_i+0xbe>
 8002f26:	681e      	ldr	r6, [r3, #0]
 8002f28:	e003      	b.n	8002f32 <_printf_i+0xc6>
 8002f2a:	0646      	lsls	r6, r0, #25
 8002f2c:	d5fb      	bpl.n	8002f26 <_printf_i+0xba>
 8002f2e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002f32:	2e00      	cmp	r6, #0
 8002f34:	da03      	bge.n	8002f3e <_printf_i+0xd2>
 8002f36:	232d      	movs	r3, #45	; 0x2d
 8002f38:	4276      	negs	r6, r6
 8002f3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f3e:	485a      	ldr	r0, [pc, #360]	; (80030a8 <_printf_i+0x23c>)
 8002f40:	230a      	movs	r3, #10
 8002f42:	e012      	b.n	8002f6a <_printf_i+0xfe>
 8002f44:	682b      	ldr	r3, [r5, #0]
 8002f46:	6820      	ldr	r0, [r4, #0]
 8002f48:	1d19      	adds	r1, r3, #4
 8002f4a:	6029      	str	r1, [r5, #0]
 8002f4c:	0605      	lsls	r5, r0, #24
 8002f4e:	d501      	bpl.n	8002f54 <_printf_i+0xe8>
 8002f50:	681e      	ldr	r6, [r3, #0]
 8002f52:	e002      	b.n	8002f5a <_printf_i+0xee>
 8002f54:	0641      	lsls	r1, r0, #25
 8002f56:	d5fb      	bpl.n	8002f50 <_printf_i+0xe4>
 8002f58:	881e      	ldrh	r6, [r3, #0]
 8002f5a:	4853      	ldr	r0, [pc, #332]	; (80030a8 <_printf_i+0x23c>)
 8002f5c:	2f6f      	cmp	r7, #111	; 0x6f
 8002f5e:	bf0c      	ite	eq
 8002f60:	2308      	moveq	r3, #8
 8002f62:	230a      	movne	r3, #10
 8002f64:	2100      	movs	r1, #0
 8002f66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002f6a:	6865      	ldr	r5, [r4, #4]
 8002f6c:	60a5      	str	r5, [r4, #8]
 8002f6e:	2d00      	cmp	r5, #0
 8002f70:	bfa2      	ittt	ge
 8002f72:	6821      	ldrge	r1, [r4, #0]
 8002f74:	f021 0104 	bicge.w	r1, r1, #4
 8002f78:	6021      	strge	r1, [r4, #0]
 8002f7a:	b90e      	cbnz	r6, 8002f80 <_printf_i+0x114>
 8002f7c:	2d00      	cmp	r5, #0
 8002f7e:	d04b      	beq.n	8003018 <_printf_i+0x1ac>
 8002f80:	4615      	mov	r5, r2
 8002f82:	fbb6 f1f3 	udiv	r1, r6, r3
 8002f86:	fb03 6711 	mls	r7, r3, r1, r6
 8002f8a:	5dc7      	ldrb	r7, [r0, r7]
 8002f8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002f90:	4637      	mov	r7, r6
 8002f92:	42bb      	cmp	r3, r7
 8002f94:	460e      	mov	r6, r1
 8002f96:	d9f4      	bls.n	8002f82 <_printf_i+0x116>
 8002f98:	2b08      	cmp	r3, #8
 8002f9a:	d10b      	bne.n	8002fb4 <_printf_i+0x148>
 8002f9c:	6823      	ldr	r3, [r4, #0]
 8002f9e:	07de      	lsls	r6, r3, #31
 8002fa0:	d508      	bpl.n	8002fb4 <_printf_i+0x148>
 8002fa2:	6923      	ldr	r3, [r4, #16]
 8002fa4:	6861      	ldr	r1, [r4, #4]
 8002fa6:	4299      	cmp	r1, r3
 8002fa8:	bfde      	ittt	le
 8002faa:	2330      	movle	r3, #48	; 0x30
 8002fac:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002fb0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002fb4:	1b52      	subs	r2, r2, r5
 8002fb6:	6122      	str	r2, [r4, #16]
 8002fb8:	f8cd a000 	str.w	sl, [sp]
 8002fbc:	464b      	mov	r3, r9
 8002fbe:	aa03      	add	r2, sp, #12
 8002fc0:	4621      	mov	r1, r4
 8002fc2:	4640      	mov	r0, r8
 8002fc4:	f7ff fee4 	bl	8002d90 <_printf_common>
 8002fc8:	3001      	adds	r0, #1
 8002fca:	d14a      	bne.n	8003062 <_printf_i+0x1f6>
 8002fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8002fd0:	b004      	add	sp, #16
 8002fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fd6:	6823      	ldr	r3, [r4, #0]
 8002fd8:	f043 0320 	orr.w	r3, r3, #32
 8002fdc:	6023      	str	r3, [r4, #0]
 8002fde:	4833      	ldr	r0, [pc, #204]	; (80030ac <_printf_i+0x240>)
 8002fe0:	2778      	movs	r7, #120	; 0x78
 8002fe2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002fe6:	6823      	ldr	r3, [r4, #0]
 8002fe8:	6829      	ldr	r1, [r5, #0]
 8002fea:	061f      	lsls	r7, r3, #24
 8002fec:	f851 6b04 	ldr.w	r6, [r1], #4
 8002ff0:	d402      	bmi.n	8002ff8 <_printf_i+0x18c>
 8002ff2:	065f      	lsls	r7, r3, #25
 8002ff4:	bf48      	it	mi
 8002ff6:	b2b6      	uxthmi	r6, r6
 8002ff8:	07df      	lsls	r7, r3, #31
 8002ffa:	bf48      	it	mi
 8002ffc:	f043 0320 	orrmi.w	r3, r3, #32
 8003000:	6029      	str	r1, [r5, #0]
 8003002:	bf48      	it	mi
 8003004:	6023      	strmi	r3, [r4, #0]
 8003006:	b91e      	cbnz	r6, 8003010 <_printf_i+0x1a4>
 8003008:	6823      	ldr	r3, [r4, #0]
 800300a:	f023 0320 	bic.w	r3, r3, #32
 800300e:	6023      	str	r3, [r4, #0]
 8003010:	2310      	movs	r3, #16
 8003012:	e7a7      	b.n	8002f64 <_printf_i+0xf8>
 8003014:	4824      	ldr	r0, [pc, #144]	; (80030a8 <_printf_i+0x23c>)
 8003016:	e7e4      	b.n	8002fe2 <_printf_i+0x176>
 8003018:	4615      	mov	r5, r2
 800301a:	e7bd      	b.n	8002f98 <_printf_i+0x12c>
 800301c:	682b      	ldr	r3, [r5, #0]
 800301e:	6826      	ldr	r6, [r4, #0]
 8003020:	6961      	ldr	r1, [r4, #20]
 8003022:	1d18      	adds	r0, r3, #4
 8003024:	6028      	str	r0, [r5, #0]
 8003026:	0635      	lsls	r5, r6, #24
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	d501      	bpl.n	8003030 <_printf_i+0x1c4>
 800302c:	6019      	str	r1, [r3, #0]
 800302e:	e002      	b.n	8003036 <_printf_i+0x1ca>
 8003030:	0670      	lsls	r0, r6, #25
 8003032:	d5fb      	bpl.n	800302c <_printf_i+0x1c0>
 8003034:	8019      	strh	r1, [r3, #0]
 8003036:	2300      	movs	r3, #0
 8003038:	6123      	str	r3, [r4, #16]
 800303a:	4615      	mov	r5, r2
 800303c:	e7bc      	b.n	8002fb8 <_printf_i+0x14c>
 800303e:	682b      	ldr	r3, [r5, #0]
 8003040:	1d1a      	adds	r2, r3, #4
 8003042:	602a      	str	r2, [r5, #0]
 8003044:	681d      	ldr	r5, [r3, #0]
 8003046:	6862      	ldr	r2, [r4, #4]
 8003048:	2100      	movs	r1, #0
 800304a:	4628      	mov	r0, r5
 800304c:	f7fd f8c8 	bl	80001e0 <memchr>
 8003050:	b108      	cbz	r0, 8003056 <_printf_i+0x1ea>
 8003052:	1b40      	subs	r0, r0, r5
 8003054:	6060      	str	r0, [r4, #4]
 8003056:	6863      	ldr	r3, [r4, #4]
 8003058:	6123      	str	r3, [r4, #16]
 800305a:	2300      	movs	r3, #0
 800305c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003060:	e7aa      	b.n	8002fb8 <_printf_i+0x14c>
 8003062:	6923      	ldr	r3, [r4, #16]
 8003064:	462a      	mov	r2, r5
 8003066:	4649      	mov	r1, r9
 8003068:	4640      	mov	r0, r8
 800306a:	47d0      	blx	sl
 800306c:	3001      	adds	r0, #1
 800306e:	d0ad      	beq.n	8002fcc <_printf_i+0x160>
 8003070:	6823      	ldr	r3, [r4, #0]
 8003072:	079b      	lsls	r3, r3, #30
 8003074:	d413      	bmi.n	800309e <_printf_i+0x232>
 8003076:	68e0      	ldr	r0, [r4, #12]
 8003078:	9b03      	ldr	r3, [sp, #12]
 800307a:	4298      	cmp	r0, r3
 800307c:	bfb8      	it	lt
 800307e:	4618      	movlt	r0, r3
 8003080:	e7a6      	b.n	8002fd0 <_printf_i+0x164>
 8003082:	2301      	movs	r3, #1
 8003084:	4632      	mov	r2, r6
 8003086:	4649      	mov	r1, r9
 8003088:	4640      	mov	r0, r8
 800308a:	47d0      	blx	sl
 800308c:	3001      	adds	r0, #1
 800308e:	d09d      	beq.n	8002fcc <_printf_i+0x160>
 8003090:	3501      	adds	r5, #1
 8003092:	68e3      	ldr	r3, [r4, #12]
 8003094:	9903      	ldr	r1, [sp, #12]
 8003096:	1a5b      	subs	r3, r3, r1
 8003098:	42ab      	cmp	r3, r5
 800309a:	dcf2      	bgt.n	8003082 <_printf_i+0x216>
 800309c:	e7eb      	b.n	8003076 <_printf_i+0x20a>
 800309e:	2500      	movs	r5, #0
 80030a0:	f104 0619 	add.w	r6, r4, #25
 80030a4:	e7f5      	b.n	8003092 <_printf_i+0x226>
 80030a6:	bf00      	nop
 80030a8:	080031ed 	.word	0x080031ed
 80030ac:	080031fe 	.word	0x080031fe

080030b0 <memmove>:
 80030b0:	4288      	cmp	r0, r1
 80030b2:	b510      	push	{r4, lr}
 80030b4:	eb01 0402 	add.w	r4, r1, r2
 80030b8:	d902      	bls.n	80030c0 <memmove+0x10>
 80030ba:	4284      	cmp	r4, r0
 80030bc:	4623      	mov	r3, r4
 80030be:	d807      	bhi.n	80030d0 <memmove+0x20>
 80030c0:	1e43      	subs	r3, r0, #1
 80030c2:	42a1      	cmp	r1, r4
 80030c4:	d008      	beq.n	80030d8 <memmove+0x28>
 80030c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80030ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80030ce:	e7f8      	b.n	80030c2 <memmove+0x12>
 80030d0:	4402      	add	r2, r0
 80030d2:	4601      	mov	r1, r0
 80030d4:	428a      	cmp	r2, r1
 80030d6:	d100      	bne.n	80030da <memmove+0x2a>
 80030d8:	bd10      	pop	{r4, pc}
 80030da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80030de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80030e2:	e7f7      	b.n	80030d4 <memmove+0x24>

080030e4 <_sbrk_r>:
 80030e4:	b538      	push	{r3, r4, r5, lr}
 80030e6:	4d06      	ldr	r5, [pc, #24]	; (8003100 <_sbrk_r+0x1c>)
 80030e8:	2300      	movs	r3, #0
 80030ea:	4604      	mov	r4, r0
 80030ec:	4608      	mov	r0, r1
 80030ee:	602b      	str	r3, [r5, #0]
 80030f0:	f7fd fc3a 	bl	8000968 <_sbrk>
 80030f4:	1c43      	adds	r3, r0, #1
 80030f6:	d102      	bne.n	80030fe <_sbrk_r+0x1a>
 80030f8:	682b      	ldr	r3, [r5, #0]
 80030fa:	b103      	cbz	r3, 80030fe <_sbrk_r+0x1a>
 80030fc:	6023      	str	r3, [r4, #0]
 80030fe:	bd38      	pop	{r3, r4, r5, pc}
 8003100:	2000032c 	.word	0x2000032c

08003104 <memcpy>:
 8003104:	440a      	add	r2, r1
 8003106:	4291      	cmp	r1, r2
 8003108:	f100 33ff 	add.w	r3, r0, #4294967295
 800310c:	d100      	bne.n	8003110 <memcpy+0xc>
 800310e:	4770      	bx	lr
 8003110:	b510      	push	{r4, lr}
 8003112:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003116:	f803 4f01 	strb.w	r4, [r3, #1]!
 800311a:	4291      	cmp	r1, r2
 800311c:	d1f9      	bne.n	8003112 <memcpy+0xe>
 800311e:	bd10      	pop	{r4, pc}

08003120 <_realloc_r>:
 8003120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003124:	4680      	mov	r8, r0
 8003126:	4614      	mov	r4, r2
 8003128:	460e      	mov	r6, r1
 800312a:	b921      	cbnz	r1, 8003136 <_realloc_r+0x16>
 800312c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003130:	4611      	mov	r1, r2
 8003132:	f7ff bc49 	b.w	80029c8 <_malloc_r>
 8003136:	b92a      	cbnz	r2, 8003144 <_realloc_r+0x24>
 8003138:	f7ff fbda 	bl	80028f0 <_free_r>
 800313c:	4625      	mov	r5, r4
 800313e:	4628      	mov	r0, r5
 8003140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003144:	f000 f81b 	bl	800317e <_malloc_usable_size_r>
 8003148:	4284      	cmp	r4, r0
 800314a:	4607      	mov	r7, r0
 800314c:	d802      	bhi.n	8003154 <_realloc_r+0x34>
 800314e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003152:	d812      	bhi.n	800317a <_realloc_r+0x5a>
 8003154:	4621      	mov	r1, r4
 8003156:	4640      	mov	r0, r8
 8003158:	f7ff fc36 	bl	80029c8 <_malloc_r>
 800315c:	4605      	mov	r5, r0
 800315e:	2800      	cmp	r0, #0
 8003160:	d0ed      	beq.n	800313e <_realloc_r+0x1e>
 8003162:	42bc      	cmp	r4, r7
 8003164:	4622      	mov	r2, r4
 8003166:	4631      	mov	r1, r6
 8003168:	bf28      	it	cs
 800316a:	463a      	movcs	r2, r7
 800316c:	f7ff ffca 	bl	8003104 <memcpy>
 8003170:	4631      	mov	r1, r6
 8003172:	4640      	mov	r0, r8
 8003174:	f7ff fbbc 	bl	80028f0 <_free_r>
 8003178:	e7e1      	b.n	800313e <_realloc_r+0x1e>
 800317a:	4635      	mov	r5, r6
 800317c:	e7df      	b.n	800313e <_realloc_r+0x1e>

0800317e <_malloc_usable_size_r>:
 800317e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003182:	1f18      	subs	r0, r3, #4
 8003184:	2b00      	cmp	r3, #0
 8003186:	bfbc      	itt	lt
 8003188:	580b      	ldrlt	r3, [r1, r0]
 800318a:	18c0      	addlt	r0, r0, r3
 800318c:	4770      	bx	lr
	...

08003190 <_init>:
 8003190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003192:	bf00      	nop
 8003194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003196:	bc08      	pop	{r3}
 8003198:	469e      	mov	lr, r3
 800319a:	4770      	bx	lr

0800319c <_fini>:
 800319c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800319e:	bf00      	nop
 80031a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031a2:	bc08      	pop	{r3}
 80031a4:	469e      	mov	lr, r3
 80031a6:	4770      	bx	lr
