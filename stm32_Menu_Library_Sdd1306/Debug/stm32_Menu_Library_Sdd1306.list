
stm32_Menu_Library_Sdd1306.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000241c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007cc  08002600  08002600  00012600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dcc  08002dcc  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08002dcc  08002dcc  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002dcc  08002dcc  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dcc  08002dcc  00012dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002dd0  08002dd0  00012dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002dd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000480  20000014  08002de8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  08002de8  00020494  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006e16  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001654  00000000  00000000  00026e96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007a8  00000000  00000000  000284f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005dd  00000000  00000000  00028c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018c82  00000000  00000000  00029275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009f98  00000000  00000000  00041ef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009003e  00000000  00000000  0004be8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001e64  00000000  00000000  000dbed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000ddd34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000014 	.word	0x20000014
 8000200:	00000000 	.word	0x00000000
 8000204:	080025e8 	.word	0x080025e8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000018 	.word	0x20000018
 8000220:	080025e8 	.word	0x080025e8

08000224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
int main(void)
 800022a:	f107 0310 	add.w	r3, r7, #16
 800022e:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000230:	f000 fcc6 	bl	8000bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000234:	f000 f882 	bl	800033c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000238:	f000 f8f4 	bl	8000424 <MX_GPIO_Init>
  MX_I2C1_Init();
 800023c:	f000 f8c4 	bl	80003c8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init ();
 8000240:	f000 f94e 	bl	80004e0 <SSD1306_Init>
//		  SSD1306_GotoXY (0, i); // goto 10, 10
//		  SSD1306_Puts ("HELLO", &Font_7x10, 1); // print Hello
//		  SSD1306_UpdateScreen(); // update screen
//	  }

	  if(HAL_GPIO_ReadPin(DOWN_GPIO_Port, DOWN_Pin) == 1){
 8000244:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000248:	4832      	ldr	r0, [pc, #200]	; (8000314 <main+0xf0>)
 800024a:	f000 ff93 	bl	8001174 <HAL_GPIO_ReadPin>
 800024e:	4603      	mov	r3, r0
 8000250:	2b01      	cmp	r3, #1
 8000252:	d103      	bne.n	800025c <main+0x38>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8000254:	2180      	movs	r1, #128	; 0x80
 8000256:	4830      	ldr	r0, [pc, #192]	; (8000318 <main+0xf4>)
 8000258:	f000 ffbb 	bl	80011d2 <HAL_GPIO_TogglePin>
	  }
	  if(HAL_GPIO_ReadPin(UP_GPIO_Port, UP_Pin) == 1){
 800025c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000260:	482c      	ldr	r0, [pc, #176]	; (8000314 <main+0xf0>)
 8000262:	f000 ff87 	bl	8001174 <HAL_GPIO_ReadPin>
 8000266:	4603      	mov	r3, r0
 8000268:	2b01      	cmp	r3, #1
 800026a:	d103      	bne.n	8000274 <main+0x50>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 800026c:	2140      	movs	r1, #64	; 0x40
 800026e:	482a      	ldr	r0, [pc, #168]	; (8000318 <main+0xf4>)
 8000270:	f000 ffaf 	bl	80011d2 <HAL_GPIO_TogglePin>
	  }
	  if(HAL_GPIO_ReadPin(OK_GPIO_Port, OK_Pin) == 1){
 8000274:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000278:	4826      	ldr	r0, [pc, #152]	; (8000314 <main+0xf0>)
 800027a:	f000 ff7b 	bl	8001174 <HAL_GPIO_ReadPin>
 800027e:	4603      	mov	r3, r0
 8000280:	2b01      	cmp	r3, #1
 8000282:	d103      	bne.n	800028c <main+0x68>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000284:	2120      	movs	r1, #32
 8000286:	4824      	ldr	r0, [pc, #144]	; (8000318 <main+0xf4>)
 8000288:	f000 ffa3 	bl	80011d2 <HAL_GPIO_TogglePin>
	  }

	  if(okState == 1){
 800028c:	4b23      	ldr	r3, [pc, #140]	; (800031c <main+0xf8>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	2b01      	cmp	r3, #1
 8000292:	d1d7      	bne.n	8000244 <main+0x20>
		  SSD1306_Fill(0);
 8000294:	2000      	movs	r0, #0
 8000296:	f000 fa15 	bl	80006c4 <SSD1306_Fill>
		  if(cursor == 1){
 800029a:	4b21      	ldr	r3, [pc, #132]	; (8000320 <main+0xfc>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	2b01      	cmp	r3, #1
 80002a0:	d108      	bne.n	80002b4 <main+0x90>
			  SSD1306_GotoXY (0, 4);
 80002a2:	2104      	movs	r1, #4
 80002a4:	2000      	movs	r0, #0
 80002a6:	f000 fa83 	bl	80007b0 <SSD1306_GotoXY>
			  SSD1306_Puts ("RL: test", &Font_7x10, 1);
 80002aa:	2201      	movs	r2, #1
 80002ac:	491d      	ldr	r1, [pc, #116]	; (8000324 <main+0x100>)
 80002ae:	481e      	ldr	r0, [pc, #120]	; (8000328 <main+0x104>)
 80002b0:	f000 fb14 	bl	80008dc <SSD1306_Puts>
		  }

		  if(cursor == 2){
 80002b4:	4b1a      	ldr	r3, [pc, #104]	; (8000320 <main+0xfc>)
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	2b02      	cmp	r3, #2
 80002ba:	d11a      	bne.n	80002f2 <main+0xce>
			  SSD1306_GotoXY (0, 4);
 80002bc:	2104      	movs	r1, #4
 80002be:	2000      	movs	r0, #0
 80002c0:	f000 fa76 	bl	80007b0 <SSD1306_GotoXY>
			  SSD1306_Puts ("Kp: 0.06", &Font_7x10, 1);
 80002c4:	2201      	movs	r2, #1
 80002c6:	4917      	ldr	r1, [pc, #92]	; (8000324 <main+0x100>)
 80002c8:	4818      	ldr	r0, [pc, #96]	; (800032c <main+0x108>)
 80002ca:	f000 fb07 	bl	80008dc <SSD1306_Puts>
			  SSD1306_GotoXY (0, 16);
 80002ce:	2110      	movs	r1, #16
 80002d0:	2000      	movs	r0, #0
 80002d2:	f000 fa6d 	bl	80007b0 <SSD1306_GotoXY>
			  SSD1306_Puts ("Ki: 0.6", &Font_7x10, 1);
 80002d6:	2201      	movs	r2, #1
 80002d8:	4912      	ldr	r1, [pc, #72]	; (8000324 <main+0x100>)
 80002da:	4815      	ldr	r0, [pc, #84]	; (8000330 <main+0x10c>)
 80002dc:	f000 fafe 	bl	80008dc <SSD1306_Puts>
			  SSD1306_GotoXY (0, 28);
 80002e0:	211c      	movs	r1, #28
 80002e2:	2000      	movs	r0, #0
 80002e4:	f000 fa64 	bl	80007b0 <SSD1306_GotoXY>
			  SSD1306_Puts ("Ki: 0.08", &Font_7x10, 1);
 80002e8:	2201      	movs	r2, #1
 80002ea:	490e      	ldr	r1, [pc, #56]	; (8000324 <main+0x100>)
 80002ec:	4811      	ldr	r0, [pc, #68]	; (8000334 <main+0x110>)
 80002ee:	f000 faf5 	bl	80008dc <SSD1306_Puts>
		  }
		  if(cursor == 3){
 80002f2:	4b0b      	ldr	r3, [pc, #44]	; (8000320 <main+0xfc>)
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b03      	cmp	r3, #3
 80002f8:	d108      	bne.n	800030c <main+0xe8>
			  SSD1306_GotoXY (0, 4);
 80002fa:	2104      	movs	r1, #4
 80002fc:	2000      	movs	r0, #0
 80002fe:	f000 fa57 	bl	80007b0 <SSD1306_GotoXY>
			  SSD1306_Puts ("Calib-1", &Font_7x10, 1);
 8000302:	2201      	movs	r2, #1
 8000304:	4907      	ldr	r1, [pc, #28]	; (8000324 <main+0x100>)
 8000306:	480c      	ldr	r0, [pc, #48]	; (8000338 <main+0x114>)
 8000308:	f000 fae8 	bl	80008dc <SSD1306_Puts>
		  }
		  SSD1306_UpdateScreen();
 800030c:	f000 f9ac 	bl	8000668 <SSD1306_UpdateScreen>
	  if(HAL_GPIO_ReadPin(DOWN_GPIO_Port, DOWN_Pin) == 1){
 8000310:	e798      	b.n	8000244 <main+0x20>
 8000312:	bf00      	nop
 8000314:	40011c00 	.word	0x40011c00
 8000318:	40010800 	.word	0x40010800
 800031c:	20000084 	.word	0x20000084
 8000320:	20000085 	.word	0x20000085
 8000324:	20000000 	.word	0x20000000
 8000328:	08002600 	.word	0x08002600
 800032c:	0800260c 	.word	0x0800260c
 8000330:	08002618 	.word	0x08002618
 8000334:	08002620 	.word	0x08002620
 8000338:	0800262c 	.word	0x0800262c

0800033c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b090      	sub	sp, #64	; 0x40
 8000340:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000342:	f107 0318 	add.w	r3, r7, #24
 8000346:	2228      	movs	r2, #40	; 0x28
 8000348:	2100      	movs	r1, #0
 800034a:	4618      	mov	r0, r3
 800034c:	f002 f920 	bl	8002590 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000350:	1d3b      	adds	r3, r7, #4
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
 8000356:	605a      	str	r2, [r3, #4]
 8000358:	609a      	str	r2, [r3, #8]
 800035a:	60da      	str	r2, [r3, #12]
 800035c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800035e:	2301      	movs	r3, #1
 8000360:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000362:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000366:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000368:	2300      	movs	r3, #0
 800036a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800036c:	2301      	movs	r3, #1
 800036e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000370:	2302      	movs	r3, #2
 8000372:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000374:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000378:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800037a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800037e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000380:	f107 0318 	add.w	r3, r7, #24
 8000384:	4618      	mov	r0, r3
 8000386:	f001 fd07 	bl	8001d98 <HAL_RCC_OscConfig>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000390:	f000 f8a0 	bl	80004d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000394:	230f      	movs	r3, #15
 8000396:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000398:	2302      	movs	r3, #2
 800039a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800039c:	2300      	movs	r3, #0
 800039e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a6:	2300      	movs	r3, #0
 80003a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	2102      	movs	r1, #2
 80003ae:	4618      	mov	r0, r3
 80003b0:	f001 ff74 	bl	800229c <HAL_RCC_ClockConfig>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003ba:	f000 f88b 	bl	80004d4 <Error_Handler>
  }
}
 80003be:	bf00      	nop
 80003c0:	3740      	adds	r7, #64	; 0x40
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
	...

080003c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003cc:	4b12      	ldr	r3, [pc, #72]	; (8000418 <MX_I2C1_Init+0x50>)
 80003ce:	4a13      	ldr	r2, [pc, #76]	; (800041c <MX_I2C1_Init+0x54>)
 80003d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80003d2:	4b11      	ldr	r3, [pc, #68]	; (8000418 <MX_I2C1_Init+0x50>)
 80003d4:	4a12      	ldr	r2, [pc, #72]	; (8000420 <MX_I2C1_Init+0x58>)
 80003d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003d8:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <MX_I2C1_Init+0x50>)
 80003da:	2200      	movs	r2, #0
 80003dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003de:	4b0e      	ldr	r3, [pc, #56]	; (8000418 <MX_I2C1_Init+0x50>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003e4:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <MX_I2C1_Init+0x50>)
 80003e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003ec:	4b0a      	ldr	r3, [pc, #40]	; (8000418 <MX_I2C1_Init+0x50>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003f2:	4b09      	ldr	r3, [pc, #36]	; (8000418 <MX_I2C1_Init+0x50>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003f8:	4b07      	ldr	r3, [pc, #28]	; (8000418 <MX_I2C1_Init+0x50>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003fe:	4b06      	ldr	r3, [pc, #24]	; (8000418 <MX_I2C1_Init+0x50>)
 8000400:	2200      	movs	r2, #0
 8000402:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000404:	4804      	ldr	r0, [pc, #16]	; (8000418 <MX_I2C1_Init+0x50>)
 8000406:	f000 fefd 	bl	8001204 <HAL_I2C_Init>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000410:	f000 f860 	bl	80004d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000414:	bf00      	nop
 8000416:	bd80      	pop	{r7, pc}
 8000418:	20000030 	.word	0x20000030
 800041c:	40005400 	.word	0x40005400
 8000420:	00061a80 	.word	0x00061a80

08000424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b088      	sub	sp, #32
 8000428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042a:	f107 0310 	add.w	r3, r7, #16
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
 8000432:	605a      	str	r2, [r3, #4]
 8000434:	609a      	str	r2, [r3, #8]
 8000436:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000438:	4b23      	ldr	r3, [pc, #140]	; (80004c8 <MX_GPIO_Init+0xa4>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	4a22      	ldr	r2, [pc, #136]	; (80004c8 <MX_GPIO_Init+0xa4>)
 800043e:	f043 0304 	orr.w	r3, r3, #4
 8000442:	6193      	str	r3, [r2, #24]
 8000444:	4b20      	ldr	r3, [pc, #128]	; (80004c8 <MX_GPIO_Init+0xa4>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	f003 0304 	and.w	r3, r3, #4
 800044c:	60fb      	str	r3, [r7, #12]
 800044e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000450:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <MX_GPIO_Init+0xa4>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	4a1c      	ldr	r2, [pc, #112]	; (80004c8 <MX_GPIO_Init+0xa4>)
 8000456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800045a:	6193      	str	r3, [r2, #24]
 800045c:	4b1a      	ldr	r3, [pc, #104]	; (80004c8 <MX_GPIO_Init+0xa4>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000464:	60bb      	str	r3, [r7, #8]
 8000466:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000468:	4b17      	ldr	r3, [pc, #92]	; (80004c8 <MX_GPIO_Init+0xa4>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	4a16      	ldr	r2, [pc, #88]	; (80004c8 <MX_GPIO_Init+0xa4>)
 800046e:	f043 0308 	orr.w	r3, r3, #8
 8000472:	6193      	str	r3, [r2, #24]
 8000474:	4b14      	ldr	r3, [pc, #80]	; (80004c8 <MX_GPIO_Init+0xa4>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	f003 0308 	and.w	r3, r3, #8
 800047c:	607b      	str	r3, [r7, #4]
 800047e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000480:	2200      	movs	r2, #0
 8000482:	21e0      	movs	r1, #224	; 0xe0
 8000484:	4811      	ldr	r0, [pc, #68]	; (80004cc <MX_GPIO_Init+0xa8>)
 8000486:	f000 fe8c 	bl	80011a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800048a:	23e0      	movs	r3, #224	; 0xe0
 800048c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800048e:	2301      	movs	r3, #1
 8000490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000492:	2300      	movs	r3, #0
 8000494:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000496:	2302      	movs	r3, #2
 8000498:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800049a:	f107 0310 	add.w	r3, r7, #16
 800049e:	4619      	mov	r1, r3
 80004a0:	480a      	ldr	r0, [pc, #40]	; (80004cc <MX_GPIO_Init+0xa8>)
 80004a2:	f000 fcd3 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : OK_Pin UP_Pin DOWN_Pin */
  GPIO_InitStruct.Pin = OK_Pin|UP_Pin|DOWN_Pin;
 80004a6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80004aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004ac:	2300      	movs	r3, #0
 80004ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004b0:	2302      	movs	r3, #2
 80004b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80004b4:	f107 0310 	add.w	r3, r7, #16
 80004b8:	4619      	mov	r1, r3
 80004ba:	4805      	ldr	r0, [pc, #20]	; (80004d0 <MX_GPIO_Init+0xac>)
 80004bc:	f000 fcc6 	bl	8000e4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004c0:	bf00      	nop
 80004c2:	3720      	adds	r7, #32
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	40021000 	.word	0x40021000
 80004cc:	40010800 	.word	0x40010800
 80004d0:	40011c00 	.word	0x40011c00

080004d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004d8:	b672      	cpsid	i
}
 80004da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004dc:	e7fe      	b.n	80004dc <Error_Handler+0x8>
	...

080004e0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80004e6:	f000 fa1f 	bl	8000928 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80004ea:	f644 6320 	movw	r3, #20000	; 0x4e20
 80004ee:	2201      	movs	r2, #1
 80004f0:	2178      	movs	r1, #120	; 0x78
 80004f2:	485b      	ldr	r0, [pc, #364]	; (8000660 <SSD1306_Init+0x180>)
 80004f4:	f001 f8c8 	bl	8001688 <HAL_I2C_IsDeviceReady>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80004fe:	2300      	movs	r3, #0
 8000500:	e0a9      	b.n	8000656 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000502:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000506:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000508:	e002      	b.n	8000510 <SSD1306_Init+0x30>
		p--;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	3b01      	subs	r3, #1
 800050e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d1f9      	bne.n	800050a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000516:	22ae      	movs	r2, #174	; 0xae
 8000518:	2100      	movs	r1, #0
 800051a:	2078      	movs	r0, #120	; 0x78
 800051c:	f000 fa7e 	bl	8000a1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000520:	2220      	movs	r2, #32
 8000522:	2100      	movs	r1, #0
 8000524:	2078      	movs	r0, #120	; 0x78
 8000526:	f000 fa79 	bl	8000a1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800052a:	2210      	movs	r2, #16
 800052c:	2100      	movs	r1, #0
 800052e:	2078      	movs	r0, #120	; 0x78
 8000530:	f000 fa74 	bl	8000a1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000534:	22b0      	movs	r2, #176	; 0xb0
 8000536:	2100      	movs	r1, #0
 8000538:	2078      	movs	r0, #120	; 0x78
 800053a:	f000 fa6f 	bl	8000a1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800053e:	22c8      	movs	r2, #200	; 0xc8
 8000540:	2100      	movs	r1, #0
 8000542:	2078      	movs	r0, #120	; 0x78
 8000544:	f000 fa6a 	bl	8000a1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000548:	2200      	movs	r2, #0
 800054a:	2100      	movs	r1, #0
 800054c:	2078      	movs	r0, #120	; 0x78
 800054e:	f000 fa65 	bl	8000a1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000552:	2210      	movs	r2, #16
 8000554:	2100      	movs	r1, #0
 8000556:	2078      	movs	r0, #120	; 0x78
 8000558:	f000 fa60 	bl	8000a1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800055c:	2240      	movs	r2, #64	; 0x40
 800055e:	2100      	movs	r1, #0
 8000560:	2078      	movs	r0, #120	; 0x78
 8000562:	f000 fa5b 	bl	8000a1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000566:	2281      	movs	r2, #129	; 0x81
 8000568:	2100      	movs	r1, #0
 800056a:	2078      	movs	r0, #120	; 0x78
 800056c:	f000 fa56 	bl	8000a1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000570:	22ff      	movs	r2, #255	; 0xff
 8000572:	2100      	movs	r1, #0
 8000574:	2078      	movs	r0, #120	; 0x78
 8000576:	f000 fa51 	bl	8000a1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800057a:	22a1      	movs	r2, #161	; 0xa1
 800057c:	2100      	movs	r1, #0
 800057e:	2078      	movs	r0, #120	; 0x78
 8000580:	f000 fa4c 	bl	8000a1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000584:	22a6      	movs	r2, #166	; 0xa6
 8000586:	2100      	movs	r1, #0
 8000588:	2078      	movs	r0, #120	; 0x78
 800058a:	f000 fa47 	bl	8000a1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800058e:	22a8      	movs	r2, #168	; 0xa8
 8000590:	2100      	movs	r1, #0
 8000592:	2078      	movs	r0, #120	; 0x78
 8000594:	f000 fa42 	bl	8000a1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000598:	223f      	movs	r2, #63	; 0x3f
 800059a:	2100      	movs	r1, #0
 800059c:	2078      	movs	r0, #120	; 0x78
 800059e:	f000 fa3d 	bl	8000a1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80005a2:	22a4      	movs	r2, #164	; 0xa4
 80005a4:	2100      	movs	r1, #0
 80005a6:	2078      	movs	r0, #120	; 0x78
 80005a8:	f000 fa38 	bl	8000a1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80005ac:	22d3      	movs	r2, #211	; 0xd3
 80005ae:	2100      	movs	r1, #0
 80005b0:	2078      	movs	r0, #120	; 0x78
 80005b2:	f000 fa33 	bl	8000a1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80005b6:	2200      	movs	r2, #0
 80005b8:	2100      	movs	r1, #0
 80005ba:	2078      	movs	r0, #120	; 0x78
 80005bc:	f000 fa2e 	bl	8000a1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80005c0:	22d5      	movs	r2, #213	; 0xd5
 80005c2:	2100      	movs	r1, #0
 80005c4:	2078      	movs	r0, #120	; 0x78
 80005c6:	f000 fa29 	bl	8000a1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80005ca:	22f0      	movs	r2, #240	; 0xf0
 80005cc:	2100      	movs	r1, #0
 80005ce:	2078      	movs	r0, #120	; 0x78
 80005d0:	f000 fa24 	bl	8000a1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80005d4:	22d9      	movs	r2, #217	; 0xd9
 80005d6:	2100      	movs	r1, #0
 80005d8:	2078      	movs	r0, #120	; 0x78
 80005da:	f000 fa1f 	bl	8000a1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80005de:	2222      	movs	r2, #34	; 0x22
 80005e0:	2100      	movs	r1, #0
 80005e2:	2078      	movs	r0, #120	; 0x78
 80005e4:	f000 fa1a 	bl	8000a1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80005e8:	22da      	movs	r2, #218	; 0xda
 80005ea:	2100      	movs	r1, #0
 80005ec:	2078      	movs	r0, #120	; 0x78
 80005ee:	f000 fa15 	bl	8000a1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80005f2:	2212      	movs	r2, #18
 80005f4:	2100      	movs	r1, #0
 80005f6:	2078      	movs	r0, #120	; 0x78
 80005f8:	f000 fa10 	bl	8000a1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80005fc:	22db      	movs	r2, #219	; 0xdb
 80005fe:	2100      	movs	r1, #0
 8000600:	2078      	movs	r0, #120	; 0x78
 8000602:	f000 fa0b 	bl	8000a1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000606:	2220      	movs	r2, #32
 8000608:	2100      	movs	r1, #0
 800060a:	2078      	movs	r0, #120	; 0x78
 800060c:	f000 fa06 	bl	8000a1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000610:	228d      	movs	r2, #141	; 0x8d
 8000612:	2100      	movs	r1, #0
 8000614:	2078      	movs	r0, #120	; 0x78
 8000616:	f000 fa01 	bl	8000a1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800061a:	2214      	movs	r2, #20
 800061c:	2100      	movs	r1, #0
 800061e:	2078      	movs	r0, #120	; 0x78
 8000620:	f000 f9fc 	bl	8000a1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000624:	22af      	movs	r2, #175	; 0xaf
 8000626:	2100      	movs	r1, #0
 8000628:	2078      	movs	r0, #120	; 0x78
 800062a:	f000 f9f7 	bl	8000a1c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800062e:	222e      	movs	r2, #46	; 0x2e
 8000630:	2100      	movs	r1, #0
 8000632:	2078      	movs	r0, #120	; 0x78
 8000634:	f000 f9f2 	bl	8000a1c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000638:	2000      	movs	r0, #0
 800063a:	f000 f843 	bl	80006c4 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800063e:	f000 f813 	bl	8000668 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000642:	4b08      	ldr	r3, [pc, #32]	; (8000664 <SSD1306_Init+0x184>)
 8000644:	2200      	movs	r2, #0
 8000646:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <SSD1306_Init+0x184>)
 800064a:	2200      	movs	r2, #0
 800064c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800064e:	4b05      	ldr	r3, [pc, #20]	; (8000664 <SSD1306_Init+0x184>)
 8000650:	2201      	movs	r2, #1
 8000652:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000654:	2301      	movs	r3, #1
}
 8000656:	4618      	mov	r0, r3
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000030 	.word	0x20000030
 8000664:	20000488 	.word	0x20000488

08000668 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800066e:	2300      	movs	r3, #0
 8000670:	71fb      	strb	r3, [r7, #7]
 8000672:	e01d      	b.n	80006b0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	3b50      	subs	r3, #80	; 0x50
 8000678:	b2db      	uxtb	r3, r3
 800067a:	461a      	mov	r2, r3
 800067c:	2100      	movs	r1, #0
 800067e:	2078      	movs	r0, #120	; 0x78
 8000680:	f000 f9cc 	bl	8000a1c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000684:	2200      	movs	r2, #0
 8000686:	2100      	movs	r1, #0
 8000688:	2078      	movs	r0, #120	; 0x78
 800068a:	f000 f9c7 	bl	8000a1c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800068e:	2210      	movs	r2, #16
 8000690:	2100      	movs	r1, #0
 8000692:	2078      	movs	r0, #120	; 0x78
 8000694:	f000 f9c2 	bl	8000a1c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	01db      	lsls	r3, r3, #7
 800069c:	4a08      	ldr	r2, [pc, #32]	; (80006c0 <SSD1306_UpdateScreen+0x58>)
 800069e:	441a      	add	r2, r3
 80006a0:	2380      	movs	r3, #128	; 0x80
 80006a2:	2140      	movs	r1, #64	; 0x40
 80006a4:	2078      	movs	r0, #120	; 0x78
 80006a6:	f000 f953 	bl	8000950 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	3301      	adds	r3, #1
 80006ae:	71fb      	strb	r3, [r7, #7]
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	2b07      	cmp	r3, #7
 80006b4:	d9de      	bls.n	8000674 <SSD1306_UpdateScreen+0xc>
	}
}
 80006b6:	bf00      	nop
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000088 	.word	0x20000088

080006c4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d101      	bne.n	80006d8 <SSD1306_Fill+0x14>
 80006d4:	2300      	movs	r3, #0
 80006d6:	e000      	b.n	80006da <SSD1306_Fill+0x16>
 80006d8:	23ff      	movs	r3, #255	; 0xff
 80006da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006de:	4619      	mov	r1, r3
 80006e0:	4803      	ldr	r0, [pc, #12]	; (80006f0 <SSD1306_Fill+0x2c>)
 80006e2:	f001 ff55 	bl	8002590 <memset>
}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000088 	.word	0x20000088

080006f4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	80fb      	strh	r3, [r7, #6]
 80006fe:	460b      	mov	r3, r1
 8000700:	80bb      	strh	r3, [r7, #4]
 8000702:	4613      	mov	r3, r2
 8000704:	70fb      	strb	r3, [r7, #3]
	if (
 8000706:	88fb      	ldrh	r3, [r7, #6]
 8000708:	2b7f      	cmp	r3, #127	; 0x7f
 800070a:	d848      	bhi.n	800079e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800070c:	88bb      	ldrh	r3, [r7, #4]
 800070e:	2b3f      	cmp	r3, #63	; 0x3f
 8000710:	d845      	bhi.n	800079e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000712:	4b25      	ldr	r3, [pc, #148]	; (80007a8 <SSD1306_DrawPixel+0xb4>)
 8000714:	791b      	ldrb	r3, [r3, #4]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d006      	beq.n	8000728 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800071a:	78fb      	ldrb	r3, [r7, #3]
 800071c:	2b00      	cmp	r3, #0
 800071e:	bf0c      	ite	eq
 8000720:	2301      	moveq	r3, #1
 8000722:	2300      	movne	r3, #0
 8000724:	b2db      	uxtb	r3, r3
 8000726:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000728:	78fb      	ldrb	r3, [r7, #3]
 800072a:	2b01      	cmp	r3, #1
 800072c:	d11a      	bne.n	8000764 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800072e:	88fa      	ldrh	r2, [r7, #6]
 8000730:	88bb      	ldrh	r3, [r7, #4]
 8000732:	08db      	lsrs	r3, r3, #3
 8000734:	b298      	uxth	r0, r3
 8000736:	4603      	mov	r3, r0
 8000738:	01db      	lsls	r3, r3, #7
 800073a:	4413      	add	r3, r2
 800073c:	4a1b      	ldr	r2, [pc, #108]	; (80007ac <SSD1306_DrawPixel+0xb8>)
 800073e:	5cd3      	ldrb	r3, [r2, r3]
 8000740:	b25a      	sxtb	r2, r3
 8000742:	88bb      	ldrh	r3, [r7, #4]
 8000744:	f003 0307 	and.w	r3, r3, #7
 8000748:	2101      	movs	r1, #1
 800074a:	fa01 f303 	lsl.w	r3, r1, r3
 800074e:	b25b      	sxtb	r3, r3
 8000750:	4313      	orrs	r3, r2
 8000752:	b259      	sxtb	r1, r3
 8000754:	88fa      	ldrh	r2, [r7, #6]
 8000756:	4603      	mov	r3, r0
 8000758:	01db      	lsls	r3, r3, #7
 800075a:	4413      	add	r3, r2
 800075c:	b2c9      	uxtb	r1, r1
 800075e:	4a13      	ldr	r2, [pc, #76]	; (80007ac <SSD1306_DrawPixel+0xb8>)
 8000760:	54d1      	strb	r1, [r2, r3]
 8000762:	e01d      	b.n	80007a0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000764:	88fa      	ldrh	r2, [r7, #6]
 8000766:	88bb      	ldrh	r3, [r7, #4]
 8000768:	08db      	lsrs	r3, r3, #3
 800076a:	b298      	uxth	r0, r3
 800076c:	4603      	mov	r3, r0
 800076e:	01db      	lsls	r3, r3, #7
 8000770:	4413      	add	r3, r2
 8000772:	4a0e      	ldr	r2, [pc, #56]	; (80007ac <SSD1306_DrawPixel+0xb8>)
 8000774:	5cd3      	ldrb	r3, [r2, r3]
 8000776:	b25a      	sxtb	r2, r3
 8000778:	88bb      	ldrh	r3, [r7, #4]
 800077a:	f003 0307 	and.w	r3, r3, #7
 800077e:	2101      	movs	r1, #1
 8000780:	fa01 f303 	lsl.w	r3, r1, r3
 8000784:	b25b      	sxtb	r3, r3
 8000786:	43db      	mvns	r3, r3
 8000788:	b25b      	sxtb	r3, r3
 800078a:	4013      	ands	r3, r2
 800078c:	b259      	sxtb	r1, r3
 800078e:	88fa      	ldrh	r2, [r7, #6]
 8000790:	4603      	mov	r3, r0
 8000792:	01db      	lsls	r3, r3, #7
 8000794:	4413      	add	r3, r2
 8000796:	b2c9      	uxtb	r1, r1
 8000798:	4a04      	ldr	r2, [pc, #16]	; (80007ac <SSD1306_DrawPixel+0xb8>)
 800079a:	54d1      	strb	r1, [r2, r3]
 800079c:	e000      	b.n	80007a0 <SSD1306_DrawPixel+0xac>
		return;
 800079e:	bf00      	nop
	}
}
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr
 80007a8:	20000488 	.word	0x20000488
 80007ac:	20000088 	.word	0x20000088

080007b0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	460a      	mov	r2, r1
 80007ba:	80fb      	strh	r3, [r7, #6]
 80007bc:	4613      	mov	r3, r2
 80007be:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80007c0:	4a05      	ldr	r2, [pc, #20]	; (80007d8 <SSD1306_GotoXY+0x28>)
 80007c2:	88fb      	ldrh	r3, [r7, #6]
 80007c4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80007c6:	4a04      	ldr	r2, [pc, #16]	; (80007d8 <SSD1306_GotoXY+0x28>)
 80007c8:	88bb      	ldrh	r3, [r7, #4]
 80007ca:	8053      	strh	r3, [r2, #2]
}
 80007cc:	bf00      	nop
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	20000488 	.word	0x20000488

080007dc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	6039      	str	r1, [r7, #0]
 80007e6:	71fb      	strb	r3, [r7, #7]
 80007e8:	4613      	mov	r3, r2
 80007ea:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80007ec:	4b3a      	ldr	r3, [pc, #232]	; (80008d8 <SSD1306_Putc+0xfc>)
 80007ee:	881b      	ldrh	r3, [r3, #0]
 80007f0:	461a      	mov	r2, r3
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	4413      	add	r3, r2
	if (
 80007f8:	2b7f      	cmp	r3, #127	; 0x7f
 80007fa:	dc07      	bgt.n	800080c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80007fc:	4b36      	ldr	r3, [pc, #216]	; (80008d8 <SSD1306_Putc+0xfc>)
 80007fe:	885b      	ldrh	r3, [r3, #2]
 8000800:	461a      	mov	r2, r3
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	785b      	ldrb	r3, [r3, #1]
 8000806:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000808:	2b3f      	cmp	r3, #63	; 0x3f
 800080a:	dd01      	ble.n	8000810 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800080c:	2300      	movs	r3, #0
 800080e:	e05e      	b.n	80008ce <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	e04b      	b.n	80008ae <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	685a      	ldr	r2, [r3, #4]
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	3b20      	subs	r3, #32
 800081e:	6839      	ldr	r1, [r7, #0]
 8000820:	7849      	ldrb	r1, [r1, #1]
 8000822:	fb01 f303 	mul.w	r3, r1, r3
 8000826:	4619      	mov	r1, r3
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	440b      	add	r3, r1
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	4413      	add	r3, r2
 8000830:	881b      	ldrh	r3, [r3, #0]
 8000832:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000834:	2300      	movs	r3, #0
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	e030      	b.n	800089c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800083a:	68fa      	ldr	r2, [r7, #12]
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	fa02 f303 	lsl.w	r3, r2, r3
 8000842:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000846:	2b00      	cmp	r3, #0
 8000848:	d010      	beq.n	800086c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800084a:	4b23      	ldr	r3, [pc, #140]	; (80008d8 <SSD1306_Putc+0xfc>)
 800084c:	881a      	ldrh	r2, [r3, #0]
 800084e:	693b      	ldr	r3, [r7, #16]
 8000850:	b29b      	uxth	r3, r3
 8000852:	4413      	add	r3, r2
 8000854:	b298      	uxth	r0, r3
 8000856:	4b20      	ldr	r3, [pc, #128]	; (80008d8 <SSD1306_Putc+0xfc>)
 8000858:	885a      	ldrh	r2, [r3, #2]
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	b29b      	uxth	r3, r3
 800085e:	4413      	add	r3, r2
 8000860:	b29b      	uxth	r3, r3
 8000862:	79ba      	ldrb	r2, [r7, #6]
 8000864:	4619      	mov	r1, r3
 8000866:	f7ff ff45 	bl	80006f4 <SSD1306_DrawPixel>
 800086a:	e014      	b.n	8000896 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800086c:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <SSD1306_Putc+0xfc>)
 800086e:	881a      	ldrh	r2, [r3, #0]
 8000870:	693b      	ldr	r3, [r7, #16]
 8000872:	b29b      	uxth	r3, r3
 8000874:	4413      	add	r3, r2
 8000876:	b298      	uxth	r0, r3
 8000878:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <SSD1306_Putc+0xfc>)
 800087a:	885a      	ldrh	r2, [r3, #2]
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	b29b      	uxth	r3, r3
 8000880:	4413      	add	r3, r2
 8000882:	b299      	uxth	r1, r3
 8000884:	79bb      	ldrb	r3, [r7, #6]
 8000886:	2b00      	cmp	r3, #0
 8000888:	bf0c      	ite	eq
 800088a:	2301      	moveq	r3, #1
 800088c:	2300      	movne	r3, #0
 800088e:	b2db      	uxtb	r3, r3
 8000890:	461a      	mov	r2, r3
 8000892:	f7ff ff2f 	bl	80006f4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000896:	693b      	ldr	r3, [r7, #16]
 8000898:	3301      	adds	r3, #1
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	461a      	mov	r2, r3
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d3c8      	bcc.n	800083a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	3301      	adds	r3, #1
 80008ac:	617b      	str	r3, [r7, #20]
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	785b      	ldrb	r3, [r3, #1]
 80008b2:	461a      	mov	r2, r3
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d3ad      	bcc.n	8000816 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80008ba:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <SSD1306_Putc+0xfc>)
 80008bc:	881a      	ldrh	r2, [r3, #0]
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	4413      	add	r3, r2
 80008c6:	b29a      	uxth	r2, r3
 80008c8:	4b03      	ldr	r3, [pc, #12]	; (80008d8 <SSD1306_Putc+0xfc>)
 80008ca:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80008cc:	79fb      	ldrb	r3, [r7, #7]
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3718      	adds	r7, #24
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000488 	.word	0x20000488

080008dc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	4613      	mov	r3, r2
 80008e8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80008ea:	e012      	b.n	8000912 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	79fa      	ldrb	r2, [r7, #7]
 80008f2:	68b9      	ldr	r1, [r7, #8]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff ff71 	bl	80007dc <SSD1306_Putc>
 80008fa:	4603      	mov	r3, r0
 80008fc:	461a      	mov	r2, r3
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	429a      	cmp	r2, r3
 8000904:	d002      	beq.n	800090c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	e008      	b.n	800091e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	3301      	adds	r3, #1
 8000910:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d1e8      	bne.n	80008ec <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	781b      	ldrb	r3, [r3, #0]
}
 800091e:	4618      	mov	r0, r3
 8000920:	3710      	adds	r7, #16
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
	...

08000928 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800092e:	4b07      	ldr	r3, [pc, #28]	; (800094c <ssd1306_I2C_Init+0x24>)
 8000930:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000932:	e002      	b.n	800093a <ssd1306_I2C_Init+0x12>
		p--;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	3b01      	subs	r3, #1
 8000938:	607b      	str	r3, [r7, #4]
	while(p>0)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d1f9      	bne.n	8000934 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000940:	bf00      	nop
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr
 800094c:	0003d090 	.word	0x0003d090

08000950 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000950:	b590      	push	{r4, r7, lr}
 8000952:	b0c7      	sub	sp, #284	; 0x11c
 8000954:	af02      	add	r7, sp, #8
 8000956:	4604      	mov	r4, r0
 8000958:	4608      	mov	r0, r1
 800095a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800095e:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000962:	600a      	str	r2, [r1, #0]
 8000964:	4619      	mov	r1, r3
 8000966:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800096a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800096e:	4622      	mov	r2, r4
 8000970:	701a      	strb	r2, [r3, #0]
 8000972:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000976:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800097a:	4602      	mov	r2, r0
 800097c:	701a      	strb	r2, [r3, #0]
 800097e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000982:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000986:	460a      	mov	r2, r1
 8000988:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800098a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800098e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000992:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000996:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800099a:	7812      	ldrb	r2, [r2, #0]
 800099c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800099e:	2300      	movs	r3, #0
 80009a0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80009a4:	e015      	b.n	80009d2 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80009a6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80009aa:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80009ae:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80009b2:	6812      	ldr	r2, [r2, #0]
 80009b4:	441a      	add	r2, r3
 80009b6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80009ba:	3301      	adds	r3, #1
 80009bc:	7811      	ldrb	r1, [r2, #0]
 80009be:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80009c2:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80009c6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80009c8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80009cc:	3301      	adds	r3, #1
 80009ce:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80009d2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80009dc:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80009e0:	8812      	ldrh	r2, [r2, #0]
 80009e2:	429a      	cmp	r2, r3
 80009e4:	d8df      	bhi.n	80009a6 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80009e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009ea:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	b299      	uxth	r1, r3
 80009f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80009fa:	881b      	ldrh	r3, [r3, #0]
 80009fc:	3301      	adds	r3, #1
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	f107 020c 	add.w	r2, r7, #12
 8000a04:	200a      	movs	r0, #10
 8000a06:	9000      	str	r0, [sp, #0]
 8000a08:	4803      	ldr	r0, [pc, #12]	; (8000a18 <ssd1306_I2C_WriteMulti+0xc8>)
 8000a0a:	f000 fd3f 	bl	800148c <HAL_I2C_Master_Transmit>
}
 8000a0e:	bf00      	nop
 8000a10:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd90      	pop	{r4, r7, pc}
 8000a18:	20000030 	.word	0x20000030

08000a1c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af02      	add	r7, sp, #8
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
 8000a26:	460b      	mov	r3, r1
 8000a28:	71bb      	strb	r3, [r7, #6]
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000a2e:	79bb      	ldrb	r3, [r7, #6]
 8000a30:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000a32:	797b      	ldrb	r3, [r7, #5]
 8000a34:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	b299      	uxth	r1, r3
 8000a3a:	f107 020c 	add.w	r2, r7, #12
 8000a3e:	230a      	movs	r3, #10
 8000a40:	9300      	str	r3, [sp, #0]
 8000a42:	2302      	movs	r3, #2
 8000a44:	4803      	ldr	r0, [pc, #12]	; (8000a54 <ssd1306_I2C_Write+0x38>)
 8000a46:	f000 fd21 	bl	800148c <HAL_I2C_Master_Transmit>
}
 8000a4a:	bf00      	nop
 8000a4c:	3710      	adds	r7, #16
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000030 	.word	0x20000030

08000a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <HAL_MspInit+0x40>)
 8000a60:	699b      	ldr	r3, [r3, #24]
 8000a62:	4a0d      	ldr	r2, [pc, #52]	; (8000a98 <HAL_MspInit+0x40>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6193      	str	r3, [r2, #24]
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <HAL_MspInit+0x40>)
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <HAL_MspInit+0x40>)
 8000a78:	69db      	ldr	r3, [r3, #28]
 8000a7a:	4a07      	ldr	r2, [pc, #28]	; (8000a98 <HAL_MspInit+0x40>)
 8000a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a80:	61d3      	str	r3, [r2, #28]
 8000a82:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <HAL_MspInit+0x40>)
 8000a84:	69db      	ldr	r3, [r3, #28]
 8000a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr
 8000a98:	40021000 	.word	0x40021000

08000a9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b088      	sub	sp, #32
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 0310 	add.w	r3, r7, #16
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a15      	ldr	r2, [pc, #84]	; (8000b0c <HAL_I2C_MspInit+0x70>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d123      	bne.n	8000b04 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <HAL_I2C_MspInit+0x74>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	4a13      	ldr	r2, [pc, #76]	; (8000b10 <HAL_I2C_MspInit+0x74>)
 8000ac2:	f043 0308 	orr.w	r3, r3, #8
 8000ac6:	6193      	str	r3, [r2, #24]
 8000ac8:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <HAL_I2C_MspInit+0x74>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	f003 0308 	and.w	r3, r3, #8
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ad4:	23c0      	movs	r3, #192	; 0xc0
 8000ad6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ad8:	2312      	movs	r3, #18
 8000ada:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000adc:	2303      	movs	r3, #3
 8000ade:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae0:	f107 0310 	add.w	r3, r7, #16
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	480b      	ldr	r0, [pc, #44]	; (8000b14 <HAL_I2C_MspInit+0x78>)
 8000ae8:	f000 f9b0 	bl	8000e4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aec:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <HAL_I2C_MspInit+0x74>)
 8000aee:	69db      	ldr	r3, [r3, #28]
 8000af0:	4a07      	ldr	r2, [pc, #28]	; (8000b10 <HAL_I2C_MspInit+0x74>)
 8000af2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000af6:	61d3      	str	r3, [r2, #28]
 8000af8:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <HAL_I2C_MspInit+0x74>)
 8000afa:	69db      	ldr	r3, [r3, #28]
 8000afc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b04:	bf00      	nop
 8000b06:	3720      	adds	r7, #32
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40005400 	.word	0x40005400
 8000b10:	40021000 	.word	0x40021000
 8000b14:	40010c00 	.word	0x40010c00

08000b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <NMI_Handler+0x4>

08000b1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b22:	e7fe      	b.n	8000b22 <HardFault_Handler+0x4>

08000b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <MemManage_Handler+0x4>

08000b2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <BusFault_Handler+0x4>

08000b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <UsageFault_Handler+0x4>

08000b36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr

08000b42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr

08000b4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc80      	pop	{r7}
 8000b58:	4770      	bx	lr

08000b5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b5e:	f000 f875 	bl	8000c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr
	...

08000b74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b74:	f7ff fff7 	bl	8000b66 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b78:	480b      	ldr	r0, [pc, #44]	; (8000ba8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b7a:	490c      	ldr	r1, [pc, #48]	; (8000bac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b7c:	4a0c      	ldr	r2, [pc, #48]	; (8000bb0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b80:	e002      	b.n	8000b88 <LoopCopyDataInit>

08000b82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b86:	3304      	adds	r3, #4

08000b88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b8c:	d3f9      	bcc.n	8000b82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b8e:	4a09      	ldr	r2, [pc, #36]	; (8000bb4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b90:	4c09      	ldr	r4, [pc, #36]	; (8000bb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b94:	e001      	b.n	8000b9a <LoopFillZerobss>

08000b96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b98:	3204      	adds	r2, #4

08000b9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b9c:	d3fb      	bcc.n	8000b96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b9e:	f001 fcff 	bl	80025a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ba2:	f7ff fb3f 	bl	8000224 <main>
  bx lr
 8000ba6:	4770      	bx	lr
  ldr r0, =_sdata
 8000ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bac:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000bb0:	08002dd4 	.word	0x08002dd4
  ldr r2, =_sbss
 8000bb4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000bb8:	20000494 	.word	0x20000494

08000bbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bbc:	e7fe      	b.n	8000bbc <ADC1_2_IRQHandler>
	...

08000bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <HAL_Init+0x28>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a07      	ldr	r2, [pc, #28]	; (8000be8 <HAL_Init+0x28>)
 8000bca:	f043 0310 	orr.w	r3, r3, #16
 8000bce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd0:	2003      	movs	r0, #3
 8000bd2:	f000 f907 	bl	8000de4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd6:	200f      	movs	r0, #15
 8000bd8:	f000 f808 	bl	8000bec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bdc:	f7ff ff3c 	bl	8000a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40022000 	.word	0x40022000

08000bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <HAL_InitTick+0x54>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <HAL_InitTick+0x58>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 f911 	bl	8000e32 <HAL_SYSTICK_Config>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e00e      	b.n	8000c38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2b0f      	cmp	r3, #15
 8000c1e:	d80a      	bhi.n	8000c36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c20:	2200      	movs	r2, #0
 8000c22:	6879      	ldr	r1, [r7, #4]
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	f000 f8e7 	bl	8000dfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c2c:	4a06      	ldr	r2, [pc, #24]	; (8000c48 <HAL_InitTick+0x5c>)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c32:	2300      	movs	r3, #0
 8000c34:	e000      	b.n	8000c38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000008 	.word	0x20000008
 8000c44:	20000010 	.word	0x20000010
 8000c48:	2000000c 	.word	0x2000000c

08000c4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <HAL_IncTick+0x1c>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	461a      	mov	r2, r3
 8000c56:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <HAL_IncTick+0x20>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	4a03      	ldr	r2, [pc, #12]	; (8000c6c <HAL_IncTick+0x20>)
 8000c5e:	6013      	str	r3, [r2, #0]
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr
 8000c68:	20000010 	.word	0x20000010
 8000c6c:	20000490 	.word	0x20000490

08000c70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return uwTick;
 8000c74:	4b02      	ldr	r3, [pc, #8]	; (8000c80 <HAL_GetTick+0x10>)
 8000c76:	681b      	ldr	r3, [r3, #0]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr
 8000c80:	20000490 	.word	0x20000490

08000c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cb6:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	60d3      	str	r3, [r2, #12]
}
 8000cbc:	bf00      	nop
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	0a1b      	lsrs	r3, r3, #8
 8000cd6:	f003 0307 	and.w	r3, r3, #7
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bc80      	pop	{r7}
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	6039      	str	r1, [r7, #0]
 8000cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	db0a      	blt.n	8000d12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	b2da      	uxtb	r2, r3
 8000d00:	490c      	ldr	r1, [pc, #48]	; (8000d34 <__NVIC_SetPriority+0x4c>)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	0112      	lsls	r2, r2, #4
 8000d08:	b2d2      	uxtb	r2, r2
 8000d0a:	440b      	add	r3, r1
 8000d0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d10:	e00a      	b.n	8000d28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	4908      	ldr	r1, [pc, #32]	; (8000d38 <__NVIC_SetPriority+0x50>)
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	f003 030f 	and.w	r3, r3, #15
 8000d1e:	3b04      	subs	r3, #4
 8000d20:	0112      	lsls	r2, r2, #4
 8000d22:	b2d2      	uxtb	r2, r2
 8000d24:	440b      	add	r3, r1
 8000d26:	761a      	strb	r2, [r3, #24]
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bc80      	pop	{r7}
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000e100 	.word	0xe000e100
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b089      	sub	sp, #36	; 0x24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	f1c3 0307 	rsb	r3, r3, #7
 8000d56:	2b04      	cmp	r3, #4
 8000d58:	bf28      	it	cs
 8000d5a:	2304      	movcs	r3, #4
 8000d5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	3304      	adds	r3, #4
 8000d62:	2b06      	cmp	r3, #6
 8000d64:	d902      	bls.n	8000d6c <NVIC_EncodePriority+0x30>
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3b03      	subs	r3, #3
 8000d6a:	e000      	b.n	8000d6e <NVIC_EncodePriority+0x32>
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d70:	f04f 32ff 	mov.w	r2, #4294967295
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43da      	mvns	r2, r3
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	401a      	ands	r2, r3
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d84:	f04f 31ff 	mov.w	r1, #4294967295
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8e:	43d9      	mvns	r1, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d94:	4313      	orrs	r3, r2
         );
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3724      	adds	r7, #36	; 0x24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr

08000da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000db0:	d301      	bcc.n	8000db6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000db2:	2301      	movs	r3, #1
 8000db4:	e00f      	b.n	8000dd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000db6:	4a0a      	ldr	r2, [pc, #40]	; (8000de0 <SysTick_Config+0x40>)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dbe:	210f      	movs	r1, #15
 8000dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc4:	f7ff ff90 	bl	8000ce8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <SysTick_Config+0x40>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dce:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <SysTick_Config+0x40>)
 8000dd0:	2207      	movs	r2, #7
 8000dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	e000e010 	.word	0xe000e010

08000de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f7ff ff49 	bl	8000c84 <__NVIC_SetPriorityGrouping>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b086      	sub	sp, #24
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	4603      	mov	r3, r0
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
 8000e06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e0c:	f7ff ff5e 	bl	8000ccc <__NVIC_GetPriorityGrouping>
 8000e10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	68b9      	ldr	r1, [r7, #8]
 8000e16:	6978      	ldr	r0, [r7, #20]
 8000e18:	f7ff ff90 	bl	8000d3c <NVIC_EncodePriority>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e22:	4611      	mov	r1, r2
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff ff5f 	bl	8000ce8 <__NVIC_SetPriority>
}
 8000e2a:	bf00      	nop
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff ffb0 	bl	8000da0 <SysTick_Config>
 8000e40:	4603      	mov	r3, r0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
	...

08000e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b08b      	sub	sp, #44	; 0x2c
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e56:	2300      	movs	r3, #0
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e5e:	e179      	b.n	8001154 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e60:	2201      	movs	r2, #1
 8000e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	69fa      	ldr	r2, [r7, #28]
 8000e70:	4013      	ands	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	f040 8168 	bne.w	800114e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	4a96      	ldr	r2, [pc, #600]	; (80010dc <HAL_GPIO_Init+0x290>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d05e      	beq.n	8000f46 <HAL_GPIO_Init+0xfa>
 8000e88:	4a94      	ldr	r2, [pc, #592]	; (80010dc <HAL_GPIO_Init+0x290>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d875      	bhi.n	8000f7a <HAL_GPIO_Init+0x12e>
 8000e8e:	4a94      	ldr	r2, [pc, #592]	; (80010e0 <HAL_GPIO_Init+0x294>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d058      	beq.n	8000f46 <HAL_GPIO_Init+0xfa>
 8000e94:	4a92      	ldr	r2, [pc, #584]	; (80010e0 <HAL_GPIO_Init+0x294>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d86f      	bhi.n	8000f7a <HAL_GPIO_Init+0x12e>
 8000e9a:	4a92      	ldr	r2, [pc, #584]	; (80010e4 <HAL_GPIO_Init+0x298>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d052      	beq.n	8000f46 <HAL_GPIO_Init+0xfa>
 8000ea0:	4a90      	ldr	r2, [pc, #576]	; (80010e4 <HAL_GPIO_Init+0x298>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d869      	bhi.n	8000f7a <HAL_GPIO_Init+0x12e>
 8000ea6:	4a90      	ldr	r2, [pc, #576]	; (80010e8 <HAL_GPIO_Init+0x29c>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d04c      	beq.n	8000f46 <HAL_GPIO_Init+0xfa>
 8000eac:	4a8e      	ldr	r2, [pc, #568]	; (80010e8 <HAL_GPIO_Init+0x29c>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d863      	bhi.n	8000f7a <HAL_GPIO_Init+0x12e>
 8000eb2:	4a8e      	ldr	r2, [pc, #568]	; (80010ec <HAL_GPIO_Init+0x2a0>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d046      	beq.n	8000f46 <HAL_GPIO_Init+0xfa>
 8000eb8:	4a8c      	ldr	r2, [pc, #560]	; (80010ec <HAL_GPIO_Init+0x2a0>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d85d      	bhi.n	8000f7a <HAL_GPIO_Init+0x12e>
 8000ebe:	2b12      	cmp	r3, #18
 8000ec0:	d82a      	bhi.n	8000f18 <HAL_GPIO_Init+0xcc>
 8000ec2:	2b12      	cmp	r3, #18
 8000ec4:	d859      	bhi.n	8000f7a <HAL_GPIO_Init+0x12e>
 8000ec6:	a201      	add	r2, pc, #4	; (adr r2, 8000ecc <HAL_GPIO_Init+0x80>)
 8000ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ecc:	08000f47 	.word	0x08000f47
 8000ed0:	08000f21 	.word	0x08000f21
 8000ed4:	08000f33 	.word	0x08000f33
 8000ed8:	08000f75 	.word	0x08000f75
 8000edc:	08000f7b 	.word	0x08000f7b
 8000ee0:	08000f7b 	.word	0x08000f7b
 8000ee4:	08000f7b 	.word	0x08000f7b
 8000ee8:	08000f7b 	.word	0x08000f7b
 8000eec:	08000f7b 	.word	0x08000f7b
 8000ef0:	08000f7b 	.word	0x08000f7b
 8000ef4:	08000f7b 	.word	0x08000f7b
 8000ef8:	08000f7b 	.word	0x08000f7b
 8000efc:	08000f7b 	.word	0x08000f7b
 8000f00:	08000f7b 	.word	0x08000f7b
 8000f04:	08000f7b 	.word	0x08000f7b
 8000f08:	08000f7b 	.word	0x08000f7b
 8000f0c:	08000f7b 	.word	0x08000f7b
 8000f10:	08000f29 	.word	0x08000f29
 8000f14:	08000f3d 	.word	0x08000f3d
 8000f18:	4a75      	ldr	r2, [pc, #468]	; (80010f0 <HAL_GPIO_Init+0x2a4>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d013      	beq.n	8000f46 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f1e:	e02c      	b.n	8000f7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	623b      	str	r3, [r7, #32]
          break;
 8000f26:	e029      	b.n	8000f7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	623b      	str	r3, [r7, #32]
          break;
 8000f30:	e024      	b.n	8000f7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	3308      	adds	r3, #8
 8000f38:	623b      	str	r3, [r7, #32]
          break;
 8000f3a:	e01f      	b.n	8000f7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	330c      	adds	r3, #12
 8000f42:	623b      	str	r3, [r7, #32]
          break;
 8000f44:	e01a      	b.n	8000f7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d102      	bne.n	8000f54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f4e:	2304      	movs	r3, #4
 8000f50:	623b      	str	r3, [r7, #32]
          break;
 8000f52:	e013      	b.n	8000f7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d105      	bne.n	8000f68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f5c:	2308      	movs	r3, #8
 8000f5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	69fa      	ldr	r2, [r7, #28]
 8000f64:	611a      	str	r2, [r3, #16]
          break;
 8000f66:	e009      	b.n	8000f7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f68:	2308      	movs	r3, #8
 8000f6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	69fa      	ldr	r2, [r7, #28]
 8000f70:	615a      	str	r2, [r3, #20]
          break;
 8000f72:	e003      	b.n	8000f7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f74:	2300      	movs	r3, #0
 8000f76:	623b      	str	r3, [r7, #32]
          break;
 8000f78:	e000      	b.n	8000f7c <HAL_GPIO_Init+0x130>
          break;
 8000f7a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	2bff      	cmp	r3, #255	; 0xff
 8000f80:	d801      	bhi.n	8000f86 <HAL_GPIO_Init+0x13a>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	e001      	b.n	8000f8a <HAL_GPIO_Init+0x13e>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	3304      	adds	r3, #4
 8000f8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	2bff      	cmp	r3, #255	; 0xff
 8000f90:	d802      	bhi.n	8000f98 <HAL_GPIO_Init+0x14c>
 8000f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	e002      	b.n	8000f9e <HAL_GPIO_Init+0x152>
 8000f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9a:	3b08      	subs	r3, #8
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	210f      	movs	r1, #15
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	401a      	ands	r2, r3
 8000fb0:	6a39      	ldr	r1, [r7, #32]
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb8:	431a      	orrs	r2, r3
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	f000 80c1 	beq.w	800114e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fcc:	4b49      	ldr	r3, [pc, #292]	; (80010f4 <HAL_GPIO_Init+0x2a8>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	4a48      	ldr	r2, [pc, #288]	; (80010f4 <HAL_GPIO_Init+0x2a8>)
 8000fd2:	f043 0301 	orr.w	r3, r3, #1
 8000fd6:	6193      	str	r3, [r2, #24]
 8000fd8:	4b46      	ldr	r3, [pc, #280]	; (80010f4 <HAL_GPIO_Init+0x2a8>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fe4:	4a44      	ldr	r2, [pc, #272]	; (80010f8 <HAL_GPIO_Init+0x2ac>)
 8000fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe8:	089b      	lsrs	r3, r3, #2
 8000fea:	3302      	adds	r3, #2
 8000fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff4:	f003 0303 	and.w	r3, r3, #3
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	220f      	movs	r2, #15
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	4013      	ands	r3, r2
 8001006:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a3c      	ldr	r2, [pc, #240]	; (80010fc <HAL_GPIO_Init+0x2b0>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d01f      	beq.n	8001050 <HAL_GPIO_Init+0x204>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4a3b      	ldr	r2, [pc, #236]	; (8001100 <HAL_GPIO_Init+0x2b4>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d019      	beq.n	800104c <HAL_GPIO_Init+0x200>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a3a      	ldr	r2, [pc, #232]	; (8001104 <HAL_GPIO_Init+0x2b8>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d013      	beq.n	8001048 <HAL_GPIO_Init+0x1fc>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a39      	ldr	r2, [pc, #228]	; (8001108 <HAL_GPIO_Init+0x2bc>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d00d      	beq.n	8001044 <HAL_GPIO_Init+0x1f8>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a38      	ldr	r2, [pc, #224]	; (800110c <HAL_GPIO_Init+0x2c0>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d007      	beq.n	8001040 <HAL_GPIO_Init+0x1f4>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a37      	ldr	r2, [pc, #220]	; (8001110 <HAL_GPIO_Init+0x2c4>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d101      	bne.n	800103c <HAL_GPIO_Init+0x1f0>
 8001038:	2305      	movs	r3, #5
 800103a:	e00a      	b.n	8001052 <HAL_GPIO_Init+0x206>
 800103c:	2306      	movs	r3, #6
 800103e:	e008      	b.n	8001052 <HAL_GPIO_Init+0x206>
 8001040:	2304      	movs	r3, #4
 8001042:	e006      	b.n	8001052 <HAL_GPIO_Init+0x206>
 8001044:	2303      	movs	r3, #3
 8001046:	e004      	b.n	8001052 <HAL_GPIO_Init+0x206>
 8001048:	2302      	movs	r3, #2
 800104a:	e002      	b.n	8001052 <HAL_GPIO_Init+0x206>
 800104c:	2301      	movs	r3, #1
 800104e:	e000      	b.n	8001052 <HAL_GPIO_Init+0x206>
 8001050:	2300      	movs	r3, #0
 8001052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001054:	f002 0203 	and.w	r2, r2, #3
 8001058:	0092      	lsls	r2, r2, #2
 800105a:	4093      	lsls	r3, r2
 800105c:	68fa      	ldr	r2, [r7, #12]
 800105e:	4313      	orrs	r3, r2
 8001060:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001062:	4925      	ldr	r1, [pc, #148]	; (80010f8 <HAL_GPIO_Init+0x2ac>)
 8001064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001066:	089b      	lsrs	r3, r3, #2
 8001068:	3302      	adds	r3, #2
 800106a:	68fa      	ldr	r2, [r7, #12]
 800106c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d006      	beq.n	800108a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800107c:	4b25      	ldr	r3, [pc, #148]	; (8001114 <HAL_GPIO_Init+0x2c8>)
 800107e:	689a      	ldr	r2, [r3, #8]
 8001080:	4924      	ldr	r1, [pc, #144]	; (8001114 <HAL_GPIO_Init+0x2c8>)
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	4313      	orrs	r3, r2
 8001086:	608b      	str	r3, [r1, #8]
 8001088:	e006      	b.n	8001098 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800108a:	4b22      	ldr	r3, [pc, #136]	; (8001114 <HAL_GPIO_Init+0x2c8>)
 800108c:	689a      	ldr	r2, [r3, #8]
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	43db      	mvns	r3, r3
 8001092:	4920      	ldr	r1, [pc, #128]	; (8001114 <HAL_GPIO_Init+0x2c8>)
 8001094:	4013      	ands	r3, r2
 8001096:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d006      	beq.n	80010b2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010a4:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <HAL_GPIO_Init+0x2c8>)
 80010a6:	68da      	ldr	r2, [r3, #12]
 80010a8:	491a      	ldr	r1, [pc, #104]	; (8001114 <HAL_GPIO_Init+0x2c8>)
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	60cb      	str	r3, [r1, #12]
 80010b0:	e006      	b.n	80010c0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010b2:	4b18      	ldr	r3, [pc, #96]	; (8001114 <HAL_GPIO_Init+0x2c8>)
 80010b4:	68da      	ldr	r2, [r3, #12]
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	43db      	mvns	r3, r3
 80010ba:	4916      	ldr	r1, [pc, #88]	; (8001114 <HAL_GPIO_Init+0x2c8>)
 80010bc:	4013      	ands	r3, r2
 80010be:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d025      	beq.n	8001118 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <HAL_GPIO_Init+0x2c8>)
 80010ce:	685a      	ldr	r2, [r3, #4]
 80010d0:	4910      	ldr	r1, [pc, #64]	; (8001114 <HAL_GPIO_Init+0x2c8>)
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	604b      	str	r3, [r1, #4]
 80010d8:	e025      	b.n	8001126 <HAL_GPIO_Init+0x2da>
 80010da:	bf00      	nop
 80010dc:	10320000 	.word	0x10320000
 80010e0:	10310000 	.word	0x10310000
 80010e4:	10220000 	.word	0x10220000
 80010e8:	10210000 	.word	0x10210000
 80010ec:	10120000 	.word	0x10120000
 80010f0:	10110000 	.word	0x10110000
 80010f4:	40021000 	.word	0x40021000
 80010f8:	40010000 	.word	0x40010000
 80010fc:	40010800 	.word	0x40010800
 8001100:	40010c00 	.word	0x40010c00
 8001104:	40011000 	.word	0x40011000
 8001108:	40011400 	.word	0x40011400
 800110c:	40011800 	.word	0x40011800
 8001110:	40011c00 	.word	0x40011c00
 8001114:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001118:	4b15      	ldr	r3, [pc, #84]	; (8001170 <HAL_GPIO_Init+0x324>)
 800111a:	685a      	ldr	r2, [r3, #4]
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	43db      	mvns	r3, r3
 8001120:	4913      	ldr	r1, [pc, #76]	; (8001170 <HAL_GPIO_Init+0x324>)
 8001122:	4013      	ands	r3, r2
 8001124:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d006      	beq.n	8001140 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001132:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <HAL_GPIO_Init+0x324>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	490e      	ldr	r1, [pc, #56]	; (8001170 <HAL_GPIO_Init+0x324>)
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	4313      	orrs	r3, r2
 800113c:	600b      	str	r3, [r1, #0]
 800113e:	e006      	b.n	800114e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001140:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <HAL_GPIO_Init+0x324>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	43db      	mvns	r3, r3
 8001148:	4909      	ldr	r1, [pc, #36]	; (8001170 <HAL_GPIO_Init+0x324>)
 800114a:	4013      	ands	r3, r2
 800114c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800114e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001150:	3301      	adds	r3, #1
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115a:	fa22 f303 	lsr.w	r3, r2, r3
 800115e:	2b00      	cmp	r3, #0
 8001160:	f47f ae7e 	bne.w	8000e60 <HAL_GPIO_Init+0x14>
  }
}
 8001164:	bf00      	nop
 8001166:	bf00      	nop
 8001168:	372c      	adds	r7, #44	; 0x2c
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr
 8001170:	40010400 	.word	0x40010400

08001174 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	460b      	mov	r3, r1
 800117e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	887b      	ldrh	r3, [r7, #2]
 8001186:	4013      	ands	r3, r2
 8001188:	2b00      	cmp	r3, #0
 800118a:	d002      	beq.n	8001192 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800118c:	2301      	movs	r3, #1
 800118e:	73fb      	strb	r3, [r7, #15]
 8001190:	e001      	b.n	8001196 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001192:	2300      	movs	r3, #0
 8001194:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001196:	7bfb      	ldrb	r3, [r7, #15]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr

080011a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a2:	b480      	push	{r7}
 80011a4:	b083      	sub	sp, #12
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
 80011aa:	460b      	mov	r3, r1
 80011ac:	807b      	strh	r3, [r7, #2]
 80011ae:	4613      	mov	r3, r2
 80011b0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011b2:	787b      	ldrb	r3, [r7, #1]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d003      	beq.n	80011c0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011b8:	887a      	ldrh	r2, [r7, #2]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011be:	e003      	b.n	80011c8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011c0:	887b      	ldrh	r3, [r7, #2]
 80011c2:	041a      	lsls	r2, r3, #16
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	611a      	str	r2, [r3, #16]
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr

080011d2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011d2:	b480      	push	{r7}
 80011d4:	b085      	sub	sp, #20
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
 80011da:	460b      	mov	r3, r1
 80011dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011e4:	887a      	ldrh	r2, [r7, #2]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	4013      	ands	r3, r2
 80011ea:	041a      	lsls	r2, r3, #16
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	43d9      	mvns	r1, r3
 80011f0:	887b      	ldrh	r3, [r7, #2]
 80011f2:	400b      	ands	r3, r1
 80011f4:	431a      	orrs	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	611a      	str	r2, [r3, #16]
}
 80011fa:	bf00      	nop
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr

08001204 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e12b      	b.n	800146e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b00      	cmp	r3, #0
 8001220:	d106      	bne.n	8001230 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff fc36 	bl	8000a9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2224      	movs	r2, #36	; 0x24
 8001234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f022 0201 	bic.w	r2, r2, #1
 8001246:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001256:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001266:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001268:	f001 f960 	bl	800252c <HAL_RCC_GetPCLK1Freq>
 800126c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	4a81      	ldr	r2, [pc, #516]	; (8001478 <HAL_I2C_Init+0x274>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d807      	bhi.n	8001288 <HAL_I2C_Init+0x84>
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4a80      	ldr	r2, [pc, #512]	; (800147c <HAL_I2C_Init+0x278>)
 800127c:	4293      	cmp	r3, r2
 800127e:	bf94      	ite	ls
 8001280:	2301      	movls	r3, #1
 8001282:	2300      	movhi	r3, #0
 8001284:	b2db      	uxtb	r3, r3
 8001286:	e006      	b.n	8001296 <HAL_I2C_Init+0x92>
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	4a7d      	ldr	r2, [pc, #500]	; (8001480 <HAL_I2C_Init+0x27c>)
 800128c:	4293      	cmp	r3, r2
 800128e:	bf94      	ite	ls
 8001290:	2301      	movls	r3, #1
 8001292:	2300      	movhi	r3, #0
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e0e7      	b.n	800146e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	4a78      	ldr	r2, [pc, #480]	; (8001484 <HAL_I2C_Init+0x280>)
 80012a2:	fba2 2303 	umull	r2, r3, r2, r3
 80012a6:	0c9b      	lsrs	r3, r3, #18
 80012a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	68ba      	ldr	r2, [r7, #8]
 80012ba:	430a      	orrs	r2, r1
 80012bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	6a1b      	ldr	r3, [r3, #32]
 80012c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	4a6a      	ldr	r2, [pc, #424]	; (8001478 <HAL_I2C_Init+0x274>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d802      	bhi.n	80012d8 <HAL_I2C_Init+0xd4>
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	3301      	adds	r3, #1
 80012d6:	e009      	b.n	80012ec <HAL_I2C_Init+0xe8>
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80012de:	fb02 f303 	mul.w	r3, r2, r3
 80012e2:	4a69      	ldr	r2, [pc, #420]	; (8001488 <HAL_I2C_Init+0x284>)
 80012e4:	fba2 2303 	umull	r2, r3, r2, r3
 80012e8:	099b      	lsrs	r3, r3, #6
 80012ea:	3301      	adds	r3, #1
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	6812      	ldr	r2, [r2, #0]
 80012f0:	430b      	orrs	r3, r1
 80012f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80012fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	495c      	ldr	r1, [pc, #368]	; (8001478 <HAL_I2C_Init+0x274>)
 8001308:	428b      	cmp	r3, r1
 800130a:	d819      	bhi.n	8001340 <HAL_I2C_Init+0x13c>
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	1e59      	subs	r1, r3, #1
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	fbb1 f3f3 	udiv	r3, r1, r3
 800131a:	1c59      	adds	r1, r3, #1
 800131c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001320:	400b      	ands	r3, r1
 8001322:	2b00      	cmp	r3, #0
 8001324:	d00a      	beq.n	800133c <HAL_I2C_Init+0x138>
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	1e59      	subs	r1, r3, #1
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	fbb1 f3f3 	udiv	r3, r1, r3
 8001334:	3301      	adds	r3, #1
 8001336:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800133a:	e051      	b.n	80013e0 <HAL_I2C_Init+0x1dc>
 800133c:	2304      	movs	r3, #4
 800133e:	e04f      	b.n	80013e0 <HAL_I2C_Init+0x1dc>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d111      	bne.n	800136c <HAL_I2C_Init+0x168>
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	1e58      	subs	r0, r3, #1
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6859      	ldr	r1, [r3, #4]
 8001350:	460b      	mov	r3, r1
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	440b      	add	r3, r1
 8001356:	fbb0 f3f3 	udiv	r3, r0, r3
 800135a:	3301      	adds	r3, #1
 800135c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001360:	2b00      	cmp	r3, #0
 8001362:	bf0c      	ite	eq
 8001364:	2301      	moveq	r3, #1
 8001366:	2300      	movne	r3, #0
 8001368:	b2db      	uxtb	r3, r3
 800136a:	e012      	b.n	8001392 <HAL_I2C_Init+0x18e>
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	1e58      	subs	r0, r3, #1
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6859      	ldr	r1, [r3, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	440b      	add	r3, r1
 800137a:	0099      	lsls	r1, r3, #2
 800137c:	440b      	add	r3, r1
 800137e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001382:	3301      	adds	r3, #1
 8001384:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001388:	2b00      	cmp	r3, #0
 800138a:	bf0c      	ite	eq
 800138c:	2301      	moveq	r3, #1
 800138e:	2300      	movne	r3, #0
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <HAL_I2C_Init+0x196>
 8001396:	2301      	movs	r3, #1
 8001398:	e022      	b.n	80013e0 <HAL_I2C_Init+0x1dc>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d10e      	bne.n	80013c0 <HAL_I2C_Init+0x1bc>
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	1e58      	subs	r0, r3, #1
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6859      	ldr	r1, [r3, #4]
 80013aa:	460b      	mov	r3, r1
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	440b      	add	r3, r1
 80013b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80013b4:	3301      	adds	r3, #1
 80013b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013be:	e00f      	b.n	80013e0 <HAL_I2C_Init+0x1dc>
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	1e58      	subs	r0, r3, #1
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6859      	ldr	r1, [r3, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	440b      	add	r3, r1
 80013ce:	0099      	lsls	r1, r3, #2
 80013d0:	440b      	add	r3, r1
 80013d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80013d6:	3301      	adds	r3, #1
 80013d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013e0:	6879      	ldr	r1, [r7, #4]
 80013e2:	6809      	ldr	r1, [r1, #0]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69da      	ldr	r2, [r3, #28]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a1b      	ldr	r3, [r3, #32]
 80013fa:	431a      	orrs	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	430a      	orrs	r2, r1
 8001402:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800140e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	6911      	ldr	r1, [r2, #16]
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	68d2      	ldr	r2, [r2, #12]
 800141a:	4311      	orrs	r1, r2
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	6812      	ldr	r2, [r2, #0]
 8001420:	430b      	orrs	r3, r1
 8001422:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	695a      	ldr	r2, [r3, #20]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	431a      	orrs	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	430a      	orrs	r2, r1
 800143e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f042 0201 	orr.w	r2, r2, #1
 800144e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2220      	movs	r2, #32
 800145a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	000186a0 	.word	0x000186a0
 800147c:	001e847f 	.word	0x001e847f
 8001480:	003d08ff 	.word	0x003d08ff
 8001484:	431bde83 	.word	0x431bde83
 8001488:	10624dd3 	.word	0x10624dd3

0800148c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b088      	sub	sp, #32
 8001490:	af02      	add	r7, sp, #8
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	607a      	str	r2, [r7, #4]
 8001496:	461a      	mov	r2, r3
 8001498:	460b      	mov	r3, r1
 800149a:	817b      	strh	r3, [r7, #10]
 800149c:	4613      	mov	r3, r2
 800149e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80014a0:	f7ff fbe6 	bl	8000c70 <HAL_GetTick>
 80014a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b20      	cmp	r3, #32
 80014b0:	f040 80e0 	bne.w	8001674 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	2319      	movs	r3, #25
 80014ba:	2201      	movs	r2, #1
 80014bc:	4970      	ldr	r1, [pc, #448]	; (8001680 <HAL_I2C_Master_Transmit+0x1f4>)
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	f000 fa92 	bl	80019e8 <I2C_WaitOnFlagUntilTimeout>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80014ca:	2302      	movs	r3, #2
 80014cc:	e0d3      	b.n	8001676 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d101      	bne.n	80014dc <HAL_I2C_Master_Transmit+0x50>
 80014d8:	2302      	movs	r3, #2
 80014da:	e0cc      	b.n	8001676 <HAL_I2C_Master_Transmit+0x1ea>
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2201      	movs	r2, #1
 80014e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d007      	beq.n	8001502 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f042 0201 	orr.w	r2, r2, #1
 8001500:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001510:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2221      	movs	r2, #33	; 0x21
 8001516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2210      	movs	r2, #16
 800151e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2200      	movs	r2, #0
 8001526:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	893a      	ldrh	r2, [r7, #8]
 8001532:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001538:	b29a      	uxth	r2, r3
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	4a50      	ldr	r2, [pc, #320]	; (8001684 <HAL_I2C_Master_Transmit+0x1f8>)
 8001542:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001544:	8979      	ldrh	r1, [r7, #10]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	6a3a      	ldr	r2, [r7, #32]
 800154a:	68f8      	ldr	r0, [r7, #12]
 800154c:	f000 f9ca 	bl	80018e4 <I2C_MasterRequestWrite>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e08d      	b.n	8001676 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	695b      	ldr	r3, [r3, #20]
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001570:	e066      	b.n	8001640 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	6a39      	ldr	r1, [r7, #32]
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	f000 fb50 	bl	8001c1c <I2C_WaitOnTXEFlagUntilTimeout>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00d      	beq.n	800159e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	2b04      	cmp	r3, #4
 8001588:	d107      	bne.n	800159a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001598:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e06b      	b.n	8001676 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a2:	781a      	ldrb	r2, [r3, #0]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ae:	1c5a      	adds	r2, r3, #1
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	3b01      	subs	r3, #1
 80015bc:	b29a      	uxth	r2, r3
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015c6:	3b01      	subs	r3, #1
 80015c8:	b29a      	uxth	r2, r3
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	695b      	ldr	r3, [r3, #20]
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	2b04      	cmp	r3, #4
 80015da:	d11b      	bne.n	8001614 <HAL_I2C_Master_Transmit+0x188>
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d017      	beq.n	8001614 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e8:	781a      	ldrb	r2, [r3, #0]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f4:	1c5a      	adds	r2, r3, #1
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015fe:	b29b      	uxth	r3, r3
 8001600:	3b01      	subs	r3, #1
 8001602:	b29a      	uxth	r2, r3
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800160c:	3b01      	subs	r3, #1
 800160e:	b29a      	uxth	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001614:	697a      	ldr	r2, [r7, #20]
 8001616:	6a39      	ldr	r1, [r7, #32]
 8001618:	68f8      	ldr	r0, [r7, #12]
 800161a:	f000 fb47 	bl	8001cac <I2C_WaitOnBTFFlagUntilTimeout>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d00d      	beq.n	8001640 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001628:	2b04      	cmp	r3, #4
 800162a:	d107      	bne.n	800163c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800163a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e01a      	b.n	8001676 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001644:	2b00      	cmp	r3, #0
 8001646:	d194      	bne.n	8001572 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001656:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2220      	movs	r2, #32
 800165c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2200      	movs	r2, #0
 800166c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001670:	2300      	movs	r3, #0
 8001672:	e000      	b.n	8001676 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001674:	2302      	movs	r3, #2
  }
}
 8001676:	4618      	mov	r0, r3
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	00100002 	.word	0x00100002
 8001684:	ffff0000 	.word	0xffff0000

08001688 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08a      	sub	sp, #40	; 0x28
 800168c:	af02      	add	r7, sp, #8
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	607a      	str	r2, [r7, #4]
 8001692:	603b      	str	r3, [r7, #0]
 8001694:	460b      	mov	r3, r1
 8001696:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001698:	f7ff faea 	bl	8000c70 <HAL_GetTick>
 800169c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800169e:	2300      	movs	r3, #0
 80016a0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b20      	cmp	r3, #32
 80016ac:	f040 8111 	bne.w	80018d2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	2319      	movs	r3, #25
 80016b6:	2201      	movs	r2, #1
 80016b8:	4988      	ldr	r1, [pc, #544]	; (80018dc <HAL_I2C_IsDeviceReady+0x254>)
 80016ba:	68f8      	ldr	r0, [r7, #12]
 80016bc:	f000 f994 	bl	80019e8 <I2C_WaitOnFlagUntilTimeout>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80016c6:	2302      	movs	r3, #2
 80016c8:	e104      	b.n	80018d4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d101      	bne.n	80016d8 <HAL_I2C_IsDeviceReady+0x50>
 80016d4:	2302      	movs	r3, #2
 80016d6:	e0fd      	b.n	80018d4 <HAL_I2C_IsDeviceReady+0x24c>
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d007      	beq.n	80016fe <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f042 0201 	orr.w	r2, r2, #1
 80016fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800170c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2224      	movs	r2, #36	; 0x24
 8001712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2200      	movs	r2, #0
 800171a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4a70      	ldr	r2, [pc, #448]	; (80018e0 <HAL_I2C_IsDeviceReady+0x258>)
 8001720:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001730:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	2200      	movs	r2, #0
 800173a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800173e:	68f8      	ldr	r0, [r7, #12]
 8001740:	f000 f952 	bl	80019e8 <I2C_WaitOnFlagUntilTimeout>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d00d      	beq.n	8001766 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001754:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001758:	d103      	bne.n	8001762 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001760:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e0b6      	b.n	80018d4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001766:	897b      	ldrh	r3, [r7, #10]
 8001768:	b2db      	uxtb	r3, r3
 800176a:	461a      	mov	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001774:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001776:	f7ff fa7b 	bl	8000c70 <HAL_GetTick>
 800177a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b02      	cmp	r3, #2
 8001788:	bf0c      	ite	eq
 800178a:	2301      	moveq	r3, #1
 800178c:	2300      	movne	r3, #0
 800178e:	b2db      	uxtb	r3, r3
 8001790:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	695b      	ldr	r3, [r3, #20]
 8001798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800179c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017a0:	bf0c      	ite	eq
 80017a2:	2301      	moveq	r3, #1
 80017a4:	2300      	movne	r3, #0
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80017aa:	e025      	b.n	80017f8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80017ac:	f7ff fa60 	bl	8000c70 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d302      	bcc.n	80017c2 <HAL_I2C_IsDeviceReady+0x13a>
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d103      	bne.n	80017ca <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	22a0      	movs	r2, #160	; 0xa0
 80017c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	695b      	ldr	r3, [r3, #20]
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	bf0c      	ite	eq
 80017d8:	2301      	moveq	r3, #1
 80017da:	2300      	movne	r3, #0
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017ee:	bf0c      	ite	eq
 80017f0:	2301      	moveq	r3, #1
 80017f2:	2300      	movne	r3, #0
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2ba0      	cmp	r3, #160	; 0xa0
 8001802:	d005      	beq.n	8001810 <HAL_I2C_IsDeviceReady+0x188>
 8001804:	7dfb      	ldrb	r3, [r7, #23]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d102      	bne.n	8001810 <HAL_I2C_IsDeviceReady+0x188>
 800180a:	7dbb      	ldrb	r3, [r7, #22]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0cd      	beq.n	80017ac <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2220      	movs	r2, #32
 8001814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b02      	cmp	r3, #2
 8001824:	d129      	bne.n	800187a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001834:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001836:	2300      	movs	r3, #0
 8001838:	613b      	str	r3, [r7, #16]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	695b      	ldr	r3, [r3, #20]
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	2319      	movs	r3, #25
 8001852:	2201      	movs	r2, #1
 8001854:	4921      	ldr	r1, [pc, #132]	; (80018dc <HAL_I2C_IsDeviceReady+0x254>)
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	f000 f8c6 	bl	80019e8 <I2C_WaitOnFlagUntilTimeout>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e036      	b.n	80018d4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2220      	movs	r2, #32
 800186a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001876:	2300      	movs	r3, #0
 8001878:	e02c      	b.n	80018d4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001888:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001892:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	2319      	movs	r3, #25
 800189a:	2201      	movs	r2, #1
 800189c:	490f      	ldr	r1, [pc, #60]	; (80018dc <HAL_I2C_IsDeviceReady+0x254>)
 800189e:	68f8      	ldr	r0, [r7, #12]
 80018a0:	f000 f8a2 	bl	80019e8 <I2C_WaitOnFlagUntilTimeout>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e012      	b.n	80018d4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	3301      	adds	r3, #1
 80018b2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	f4ff af32 	bcc.w	8001722 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2220      	movs	r2, #32
 80018c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e000      	b.n	80018d4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80018d2:	2302      	movs	r3, #2
  }
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3720      	adds	r7, #32
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	00100002 	.word	0x00100002
 80018e0:	ffff0000 	.word	0xffff0000

080018e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b088      	sub	sp, #32
 80018e8:	af02      	add	r7, sp, #8
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	607a      	str	r2, [r7, #4]
 80018ee:	603b      	str	r3, [r7, #0]
 80018f0:	460b      	mov	r3, r1
 80018f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	2b08      	cmp	r3, #8
 80018fe:	d006      	beq.n	800190e <I2C_MasterRequestWrite+0x2a>
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d003      	beq.n	800190e <I2C_MasterRequestWrite+0x2a>
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800190c:	d108      	bne.n	8001920 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	e00b      	b.n	8001938 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001924:	2b12      	cmp	r3, #18
 8001926:	d107      	bne.n	8001938 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001936:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001944:	68f8      	ldr	r0, [r7, #12]
 8001946:	f000 f84f 	bl	80019e8 <I2C_WaitOnFlagUntilTimeout>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d00d      	beq.n	800196c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800195e:	d103      	bne.n	8001968 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001966:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e035      	b.n	80019d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001974:	d108      	bne.n	8001988 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001976:	897b      	ldrh	r3, [r7, #10]
 8001978:	b2db      	uxtb	r3, r3
 800197a:	461a      	mov	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001984:	611a      	str	r2, [r3, #16]
 8001986:	e01b      	b.n	80019c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001988:	897b      	ldrh	r3, [r7, #10]
 800198a:	11db      	asrs	r3, r3, #7
 800198c:	b2db      	uxtb	r3, r3
 800198e:	f003 0306 	and.w	r3, r3, #6
 8001992:	b2db      	uxtb	r3, r3
 8001994:	f063 030f 	orn	r3, r3, #15
 8001998:	b2da      	uxtb	r2, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	490e      	ldr	r1, [pc, #56]	; (80019e0 <I2C_MasterRequestWrite+0xfc>)
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	f000 f898 	bl	8001adc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e010      	b.n	80019d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80019b6:	897b      	ldrh	r3, [r7, #10]
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	4907      	ldr	r1, [pc, #28]	; (80019e4 <I2C_MasterRequestWrite+0x100>)
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	f000 f888 	bl	8001adc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e000      	b.n	80019d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	00010008 	.word	0x00010008
 80019e4:	00010002 	.word	0x00010002

080019e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	603b      	str	r3, [r7, #0]
 80019f4:	4613      	mov	r3, r2
 80019f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019f8:	e048      	b.n	8001a8c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a00:	d044      	beq.n	8001a8c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a02:	f7ff f935 	bl	8000c70 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d302      	bcc.n	8001a18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d139      	bne.n	8001a8c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	0c1b      	lsrs	r3, r3, #16
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d10d      	bne.n	8001a3e <I2C_WaitOnFlagUntilTimeout+0x56>
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	695b      	ldr	r3, [r3, #20]
 8001a28:	43da      	mvns	r2, r3
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	bf0c      	ite	eq
 8001a34:	2301      	moveq	r3, #1
 8001a36:	2300      	movne	r3, #0
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	e00c      	b.n	8001a58 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	43da      	mvns	r2, r3
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	bf0c      	ite	eq
 8001a50:	2301      	moveq	r3, #1
 8001a52:	2300      	movne	r3, #0
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	461a      	mov	r2, r3
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d116      	bne.n	8001a8c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2200      	movs	r2, #0
 8001a62:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2220      	movs	r2, #32
 8001a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a78:	f043 0220 	orr.w	r2, r3, #32
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e023      	b.n	8001ad4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	0c1b      	lsrs	r3, r3, #16
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d10d      	bne.n	8001ab2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	43da      	mvns	r2, r3
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	bf0c      	ite	eq
 8001aa8:	2301      	moveq	r3, #1
 8001aaa:	2300      	movne	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	461a      	mov	r2, r3
 8001ab0:	e00c      	b.n	8001acc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	43da      	mvns	r2, r3
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	4013      	ands	r3, r2
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	bf0c      	ite	eq
 8001ac4:	2301      	moveq	r3, #1
 8001ac6:	2300      	movne	r3, #0
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	461a      	mov	r2, r3
 8001acc:	79fb      	ldrb	r3, [r7, #7]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d093      	beq.n	80019fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
 8001ae8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001aea:	e071      	b.n	8001bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001af6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001afa:	d123      	bne.n	8001b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b0a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2220      	movs	r2, #32
 8001b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b30:	f043 0204 	orr.w	r2, r3, #4
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e067      	b.n	8001c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b4a:	d041      	beq.n	8001bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b4c:	f7ff f890 	bl	8000c70 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d302      	bcc.n	8001b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d136      	bne.n	8001bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	0c1b      	lsrs	r3, r3, #16
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d10c      	bne.n	8001b86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	43da      	mvns	r2, r3
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	4013      	ands	r3, r2
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	bf14      	ite	ne
 8001b7e:	2301      	movne	r3, #1
 8001b80:	2300      	moveq	r3, #0
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	e00b      	b.n	8001b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	43da      	mvns	r2, r3
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	4013      	ands	r3, r2
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	bf14      	ite	ne
 8001b98:	2301      	movne	r3, #1
 8001b9a:	2300      	moveq	r3, #0
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d016      	beq.n	8001bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2220      	movs	r2, #32
 8001bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbc:	f043 0220 	orr.w	r2, r3, #32
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e021      	b.n	8001c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	0c1b      	lsrs	r3, r3, #16
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d10c      	bne.n	8001bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	43da      	mvns	r2, r3
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	4013      	ands	r3, r2
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	bf14      	ite	ne
 8001bec:	2301      	movne	r3, #1
 8001bee:	2300      	moveq	r3, #0
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	e00b      	b.n	8001c0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	43da      	mvns	r2, r3
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	bf14      	ite	ne
 8001c06:	2301      	movne	r3, #1
 8001c08:	2300      	moveq	r3, #0
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f47f af6d 	bne.w	8001aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3710      	adds	r7, #16
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c28:	e034      	b.n	8001c94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	f000 f886 	bl	8001d3c <I2C_IsAcknowledgeFailed>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e034      	b.n	8001ca4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c40:	d028      	beq.n	8001c94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c42:	f7ff f815 	bl	8000c70 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	68ba      	ldr	r2, [r7, #8]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d302      	bcc.n	8001c58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d11d      	bne.n	8001c94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c62:	2b80      	cmp	r3, #128	; 0x80
 8001c64:	d016      	beq.n	8001c94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2220      	movs	r2, #32
 8001c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c80:	f043 0220 	orr.w	r2, r3, #32
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e007      	b.n	8001ca4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c9e:	2b80      	cmp	r3, #128	; 0x80
 8001ca0:	d1c3      	bne.n	8001c2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001cb8:	e034      	b.n	8001d24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001cba:	68f8      	ldr	r0, [r7, #12]
 8001cbc:	f000 f83e 	bl	8001d3c <I2C_IsAcknowledgeFailed>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e034      	b.n	8001d34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd0:	d028      	beq.n	8001d24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cd2:	f7fe ffcd 	bl	8000c70 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	68ba      	ldr	r2, [r7, #8]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d302      	bcc.n	8001ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d11d      	bne.n	8001d24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d016      	beq.n	8001d24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2220      	movs	r2, #32
 8001d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d10:	f043 0220 	orr.w	r2, r3, #32
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e007      	b.n	8001d34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	f003 0304 	and.w	r3, r3, #4
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	d1c3      	bne.n	8001cba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d52:	d11b      	bne.n	8001d8c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d5c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2220      	movs	r2, #32
 8001d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d78:	f043 0204 	orr.w	r2, r3, #4
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e000      	b.n	8001d8e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr

08001d98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e272      	b.n	8002290 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 8087 	beq.w	8001ec6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001db8:	4b92      	ldr	r3, [pc, #584]	; (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 030c 	and.w	r3, r3, #12
 8001dc0:	2b04      	cmp	r3, #4
 8001dc2:	d00c      	beq.n	8001dde <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dc4:	4b8f      	ldr	r3, [pc, #572]	; (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 030c 	and.w	r3, r3, #12
 8001dcc:	2b08      	cmp	r3, #8
 8001dce:	d112      	bne.n	8001df6 <HAL_RCC_OscConfig+0x5e>
 8001dd0:	4b8c      	ldr	r3, [pc, #560]	; (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ddc:	d10b      	bne.n	8001df6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dde:	4b89      	ldr	r3, [pc, #548]	; (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d06c      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x12c>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d168      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e24c      	b.n	8002290 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dfe:	d106      	bne.n	8001e0e <HAL_RCC_OscConfig+0x76>
 8001e00:	4b80      	ldr	r3, [pc, #512]	; (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a7f      	ldr	r2, [pc, #508]	; (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001e06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e0a:	6013      	str	r3, [r2, #0]
 8001e0c:	e02e      	b.n	8001e6c <HAL_RCC_OscConfig+0xd4>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d10c      	bne.n	8001e30 <HAL_RCC_OscConfig+0x98>
 8001e16:	4b7b      	ldr	r3, [pc, #492]	; (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a7a      	ldr	r2, [pc, #488]	; (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e20:	6013      	str	r3, [r2, #0]
 8001e22:	4b78      	ldr	r3, [pc, #480]	; (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a77      	ldr	r2, [pc, #476]	; (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001e28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e2c:	6013      	str	r3, [r2, #0]
 8001e2e:	e01d      	b.n	8001e6c <HAL_RCC_OscConfig+0xd4>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e38:	d10c      	bne.n	8001e54 <HAL_RCC_OscConfig+0xbc>
 8001e3a:	4b72      	ldr	r3, [pc, #456]	; (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a71      	ldr	r2, [pc, #452]	; (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	4b6f      	ldr	r3, [pc, #444]	; (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a6e      	ldr	r2, [pc, #440]	; (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	e00b      	b.n	8001e6c <HAL_RCC_OscConfig+0xd4>
 8001e54:	4b6b      	ldr	r3, [pc, #428]	; (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a6a      	ldr	r2, [pc, #424]	; (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001e5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e5e:	6013      	str	r3, [r2, #0]
 8001e60:	4b68      	ldr	r3, [pc, #416]	; (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a67      	ldr	r2, [pc, #412]	; (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001e66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d013      	beq.n	8001e9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e74:	f7fe fefc 	bl	8000c70 <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e7c:	f7fe fef8 	bl	8000c70 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b64      	cmp	r3, #100	; 0x64
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e200      	b.n	8002290 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8e:	4b5d      	ldr	r3, [pc, #372]	; (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0f0      	beq.n	8001e7c <HAL_RCC_OscConfig+0xe4>
 8001e9a:	e014      	b.n	8001ec6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9c:	f7fe fee8 	bl	8000c70 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ea4:	f7fe fee4 	bl	8000c70 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b64      	cmp	r3, #100	; 0x64
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e1ec      	b.n	8002290 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eb6:	4b53      	ldr	r3, [pc, #332]	; (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f0      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x10c>
 8001ec2:	e000      	b.n	8001ec6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d063      	beq.n	8001f9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ed2:	4b4c      	ldr	r3, [pc, #304]	; (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00b      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ede:	4b49      	ldr	r3, [pc, #292]	; (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f003 030c 	and.w	r3, r3, #12
 8001ee6:	2b08      	cmp	r3, #8
 8001ee8:	d11c      	bne.n	8001f24 <HAL_RCC_OscConfig+0x18c>
 8001eea:	4b46      	ldr	r3, [pc, #280]	; (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d116      	bne.n	8001f24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ef6:	4b43      	ldr	r3, [pc, #268]	; (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d005      	beq.n	8001f0e <HAL_RCC_OscConfig+0x176>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d001      	beq.n	8001f0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e1c0      	b.n	8002290 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f0e:	4b3d      	ldr	r3, [pc, #244]	; (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	4939      	ldr	r1, [pc, #228]	; (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f22:	e03a      	b.n	8001f9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d020      	beq.n	8001f6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f2c:	4b36      	ldr	r3, [pc, #216]	; (8002008 <HAL_RCC_OscConfig+0x270>)
 8001f2e:	2201      	movs	r2, #1
 8001f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f32:	f7fe fe9d 	bl	8000c70 <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f3a:	f7fe fe99 	bl	8000c70 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e1a1      	b.n	8002290 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f4c:	4b2d      	ldr	r3, [pc, #180]	; (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0f0      	beq.n	8001f3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f58:	4b2a      	ldr	r3, [pc, #168]	; (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	695b      	ldr	r3, [r3, #20]
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	4927      	ldr	r1, [pc, #156]	; (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	600b      	str	r3, [r1, #0]
 8001f6c:	e015      	b.n	8001f9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f6e:	4b26      	ldr	r3, [pc, #152]	; (8002008 <HAL_RCC_OscConfig+0x270>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f74:	f7fe fe7c 	bl	8000c70 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f7c:	f7fe fe78 	bl	8000c70 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e180      	b.n	8002290 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f8e:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f0      	bne.n	8001f7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d03a      	beq.n	800201c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d019      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fae:	4b17      	ldr	r3, [pc, #92]	; (800200c <HAL_RCC_OscConfig+0x274>)
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb4:	f7fe fe5c 	bl	8000c70 <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fbc:	f7fe fe58 	bl	8000c70 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e160      	b.n	8002290 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fce:	4b0d      	ldr	r3, [pc, #52]	; (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d0f0      	beq.n	8001fbc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fda:	2001      	movs	r0, #1
 8001fdc:	f000 faba 	bl	8002554 <RCC_Delay>
 8001fe0:	e01c      	b.n	800201c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fe2:	4b0a      	ldr	r3, [pc, #40]	; (800200c <HAL_RCC_OscConfig+0x274>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe8:	f7fe fe42 	bl	8000c70 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fee:	e00f      	b.n	8002010 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ff0:	f7fe fe3e 	bl	8000c70 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d908      	bls.n	8002010 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e146      	b.n	8002290 <HAL_RCC_OscConfig+0x4f8>
 8002002:	bf00      	nop
 8002004:	40021000 	.word	0x40021000
 8002008:	42420000 	.word	0x42420000
 800200c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002010:	4b92      	ldr	r3, [pc, #584]	; (800225c <HAL_RCC_OscConfig+0x4c4>)
 8002012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1e9      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b00      	cmp	r3, #0
 8002026:	f000 80a6 	beq.w	8002176 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800202a:	2300      	movs	r3, #0
 800202c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800202e:	4b8b      	ldr	r3, [pc, #556]	; (800225c <HAL_RCC_OscConfig+0x4c4>)
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10d      	bne.n	8002056 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800203a:	4b88      	ldr	r3, [pc, #544]	; (800225c <HAL_RCC_OscConfig+0x4c4>)
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	4a87      	ldr	r2, [pc, #540]	; (800225c <HAL_RCC_OscConfig+0x4c4>)
 8002040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002044:	61d3      	str	r3, [r2, #28]
 8002046:	4b85      	ldr	r3, [pc, #532]	; (800225c <HAL_RCC_OscConfig+0x4c4>)
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204e:	60bb      	str	r3, [r7, #8]
 8002050:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002052:	2301      	movs	r3, #1
 8002054:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002056:	4b82      	ldr	r3, [pc, #520]	; (8002260 <HAL_RCC_OscConfig+0x4c8>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205e:	2b00      	cmp	r3, #0
 8002060:	d118      	bne.n	8002094 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002062:	4b7f      	ldr	r3, [pc, #508]	; (8002260 <HAL_RCC_OscConfig+0x4c8>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a7e      	ldr	r2, [pc, #504]	; (8002260 <HAL_RCC_OscConfig+0x4c8>)
 8002068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800206c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800206e:	f7fe fdff 	bl	8000c70 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002076:	f7fe fdfb 	bl	8000c70 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b64      	cmp	r3, #100	; 0x64
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e103      	b.n	8002290 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002088:	4b75      	ldr	r3, [pc, #468]	; (8002260 <HAL_RCC_OscConfig+0x4c8>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0f0      	beq.n	8002076 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d106      	bne.n	80020aa <HAL_RCC_OscConfig+0x312>
 800209c:	4b6f      	ldr	r3, [pc, #444]	; (800225c <HAL_RCC_OscConfig+0x4c4>)
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	4a6e      	ldr	r2, [pc, #440]	; (800225c <HAL_RCC_OscConfig+0x4c4>)
 80020a2:	f043 0301 	orr.w	r3, r3, #1
 80020a6:	6213      	str	r3, [r2, #32]
 80020a8:	e02d      	b.n	8002106 <HAL_RCC_OscConfig+0x36e>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10c      	bne.n	80020cc <HAL_RCC_OscConfig+0x334>
 80020b2:	4b6a      	ldr	r3, [pc, #424]	; (800225c <HAL_RCC_OscConfig+0x4c4>)
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	4a69      	ldr	r2, [pc, #420]	; (800225c <HAL_RCC_OscConfig+0x4c4>)
 80020b8:	f023 0301 	bic.w	r3, r3, #1
 80020bc:	6213      	str	r3, [r2, #32]
 80020be:	4b67      	ldr	r3, [pc, #412]	; (800225c <HAL_RCC_OscConfig+0x4c4>)
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	4a66      	ldr	r2, [pc, #408]	; (800225c <HAL_RCC_OscConfig+0x4c4>)
 80020c4:	f023 0304 	bic.w	r3, r3, #4
 80020c8:	6213      	str	r3, [r2, #32]
 80020ca:	e01c      	b.n	8002106 <HAL_RCC_OscConfig+0x36e>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	2b05      	cmp	r3, #5
 80020d2:	d10c      	bne.n	80020ee <HAL_RCC_OscConfig+0x356>
 80020d4:	4b61      	ldr	r3, [pc, #388]	; (800225c <HAL_RCC_OscConfig+0x4c4>)
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	4a60      	ldr	r2, [pc, #384]	; (800225c <HAL_RCC_OscConfig+0x4c4>)
 80020da:	f043 0304 	orr.w	r3, r3, #4
 80020de:	6213      	str	r3, [r2, #32]
 80020e0:	4b5e      	ldr	r3, [pc, #376]	; (800225c <HAL_RCC_OscConfig+0x4c4>)
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	4a5d      	ldr	r2, [pc, #372]	; (800225c <HAL_RCC_OscConfig+0x4c4>)
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	6213      	str	r3, [r2, #32]
 80020ec:	e00b      	b.n	8002106 <HAL_RCC_OscConfig+0x36e>
 80020ee:	4b5b      	ldr	r3, [pc, #364]	; (800225c <HAL_RCC_OscConfig+0x4c4>)
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	4a5a      	ldr	r2, [pc, #360]	; (800225c <HAL_RCC_OscConfig+0x4c4>)
 80020f4:	f023 0301 	bic.w	r3, r3, #1
 80020f8:	6213      	str	r3, [r2, #32]
 80020fa:	4b58      	ldr	r3, [pc, #352]	; (800225c <HAL_RCC_OscConfig+0x4c4>)
 80020fc:	6a1b      	ldr	r3, [r3, #32]
 80020fe:	4a57      	ldr	r2, [pc, #348]	; (800225c <HAL_RCC_OscConfig+0x4c4>)
 8002100:	f023 0304 	bic.w	r3, r3, #4
 8002104:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d015      	beq.n	800213a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800210e:	f7fe fdaf 	bl	8000c70 <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002114:	e00a      	b.n	800212c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002116:	f7fe fdab 	bl	8000c70 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	f241 3288 	movw	r2, #5000	; 0x1388
 8002124:	4293      	cmp	r3, r2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e0b1      	b.n	8002290 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800212c:	4b4b      	ldr	r3, [pc, #300]	; (800225c <HAL_RCC_OscConfig+0x4c4>)
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0ee      	beq.n	8002116 <HAL_RCC_OscConfig+0x37e>
 8002138:	e014      	b.n	8002164 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213a:	f7fe fd99 	bl	8000c70 <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002140:	e00a      	b.n	8002158 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002142:	f7fe fd95 	bl	8000c70 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002150:	4293      	cmp	r3, r2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e09b      	b.n	8002290 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002158:	4b40      	ldr	r3, [pc, #256]	; (800225c <HAL_RCC_OscConfig+0x4c4>)
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1ee      	bne.n	8002142 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002164:	7dfb      	ldrb	r3, [r7, #23]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d105      	bne.n	8002176 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800216a:	4b3c      	ldr	r3, [pc, #240]	; (800225c <HAL_RCC_OscConfig+0x4c4>)
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	4a3b      	ldr	r2, [pc, #236]	; (800225c <HAL_RCC_OscConfig+0x4c4>)
 8002170:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002174:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 8087 	beq.w	800228e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002180:	4b36      	ldr	r3, [pc, #216]	; (800225c <HAL_RCC_OscConfig+0x4c4>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 030c 	and.w	r3, r3, #12
 8002188:	2b08      	cmp	r3, #8
 800218a:	d061      	beq.n	8002250 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	69db      	ldr	r3, [r3, #28]
 8002190:	2b02      	cmp	r3, #2
 8002192:	d146      	bne.n	8002222 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002194:	4b33      	ldr	r3, [pc, #204]	; (8002264 <HAL_RCC_OscConfig+0x4cc>)
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219a:	f7fe fd69 	bl	8000c70 <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021a0:	e008      	b.n	80021b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a2:	f7fe fd65 	bl	8000c70 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e06d      	b.n	8002290 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021b4:	4b29      	ldr	r3, [pc, #164]	; (800225c <HAL_RCC_OscConfig+0x4c4>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1f0      	bne.n	80021a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021c8:	d108      	bne.n	80021dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021ca:	4b24      	ldr	r3, [pc, #144]	; (800225c <HAL_RCC_OscConfig+0x4c4>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	4921      	ldr	r1, [pc, #132]	; (800225c <HAL_RCC_OscConfig+0x4c4>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021dc:	4b1f      	ldr	r3, [pc, #124]	; (800225c <HAL_RCC_OscConfig+0x4c4>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a19      	ldr	r1, [r3, #32]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ec:	430b      	orrs	r3, r1
 80021ee:	491b      	ldr	r1, [pc, #108]	; (800225c <HAL_RCC_OscConfig+0x4c4>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021f4:	4b1b      	ldr	r3, [pc, #108]	; (8002264 <HAL_RCC_OscConfig+0x4cc>)
 80021f6:	2201      	movs	r2, #1
 80021f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fa:	f7fe fd39 	bl	8000c70 <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002202:	f7fe fd35 	bl	8000c70 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e03d      	b.n	8002290 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002214:	4b11      	ldr	r3, [pc, #68]	; (800225c <HAL_RCC_OscConfig+0x4c4>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0f0      	beq.n	8002202 <HAL_RCC_OscConfig+0x46a>
 8002220:	e035      	b.n	800228e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002222:	4b10      	ldr	r3, [pc, #64]	; (8002264 <HAL_RCC_OscConfig+0x4cc>)
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002228:	f7fe fd22 	bl	8000c70 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002230:	f7fe fd1e 	bl	8000c70 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e026      	b.n	8002290 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002242:	4b06      	ldr	r3, [pc, #24]	; (800225c <HAL_RCC_OscConfig+0x4c4>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1f0      	bne.n	8002230 <HAL_RCC_OscConfig+0x498>
 800224e:	e01e      	b.n	800228e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69db      	ldr	r3, [r3, #28]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d107      	bne.n	8002268 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e019      	b.n	8002290 <HAL_RCC_OscConfig+0x4f8>
 800225c:	40021000 	.word	0x40021000
 8002260:	40007000 	.word	0x40007000
 8002264:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002268:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <HAL_RCC_OscConfig+0x500>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	429a      	cmp	r2, r3
 800227a:	d106      	bne.n	800228a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002286:	429a      	cmp	r2, r3
 8002288:	d001      	beq.n	800228e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e000      	b.n	8002290 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3718      	adds	r7, #24
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40021000 	.word	0x40021000

0800229c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d101      	bne.n	80022b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e0d0      	b.n	8002452 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022b0:	4b6a      	ldr	r3, [pc, #424]	; (800245c <HAL_RCC_ClockConfig+0x1c0>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d910      	bls.n	80022e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022be:	4b67      	ldr	r3, [pc, #412]	; (800245c <HAL_RCC_ClockConfig+0x1c0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f023 0207 	bic.w	r2, r3, #7
 80022c6:	4965      	ldr	r1, [pc, #404]	; (800245c <HAL_RCC_ClockConfig+0x1c0>)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ce:	4b63      	ldr	r3, [pc, #396]	; (800245c <HAL_RCC_ClockConfig+0x1c0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d001      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e0b8      	b.n	8002452 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d020      	beq.n	800232e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d005      	beq.n	8002304 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022f8:	4b59      	ldr	r3, [pc, #356]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	4a58      	ldr	r2, [pc, #352]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 80022fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002302:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0308 	and.w	r3, r3, #8
 800230c:	2b00      	cmp	r3, #0
 800230e:	d005      	beq.n	800231c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002310:	4b53      	ldr	r3, [pc, #332]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	4a52      	ldr	r2, [pc, #328]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 8002316:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800231a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800231c:	4b50      	ldr	r3, [pc, #320]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	494d      	ldr	r1, [pc, #308]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 800232a:	4313      	orrs	r3, r2
 800232c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d040      	beq.n	80023bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d107      	bne.n	8002352 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002342:	4b47      	ldr	r3, [pc, #284]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d115      	bne.n	800237a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e07f      	b.n	8002452 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b02      	cmp	r3, #2
 8002358:	d107      	bne.n	800236a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800235a:	4b41      	ldr	r3, [pc, #260]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d109      	bne.n	800237a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e073      	b.n	8002452 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800236a:	4b3d      	ldr	r3, [pc, #244]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e06b      	b.n	8002452 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800237a:	4b39      	ldr	r3, [pc, #228]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f023 0203 	bic.w	r2, r3, #3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	4936      	ldr	r1, [pc, #216]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 8002388:	4313      	orrs	r3, r2
 800238a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800238c:	f7fe fc70 	bl	8000c70 <HAL_GetTick>
 8002390:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002392:	e00a      	b.n	80023aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002394:	f7fe fc6c 	bl	8000c70 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e053      	b.n	8002452 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023aa:	4b2d      	ldr	r3, [pc, #180]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f003 020c 	and.w	r2, r3, #12
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d1eb      	bne.n	8002394 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023bc:	4b27      	ldr	r3, [pc, #156]	; (800245c <HAL_RCC_ClockConfig+0x1c0>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d210      	bcs.n	80023ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ca:	4b24      	ldr	r3, [pc, #144]	; (800245c <HAL_RCC_ClockConfig+0x1c0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f023 0207 	bic.w	r2, r3, #7
 80023d2:	4922      	ldr	r1, [pc, #136]	; (800245c <HAL_RCC_ClockConfig+0x1c0>)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023da:	4b20      	ldr	r3, [pc, #128]	; (800245c <HAL_RCC_ClockConfig+0x1c0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d001      	beq.n	80023ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e032      	b.n	8002452 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0304 	and.w	r3, r3, #4
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d008      	beq.n	800240a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023f8:	4b19      	ldr	r3, [pc, #100]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	4916      	ldr	r1, [pc, #88]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 8002406:	4313      	orrs	r3, r2
 8002408:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0308 	and.w	r3, r3, #8
 8002412:	2b00      	cmp	r3, #0
 8002414:	d009      	beq.n	800242a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002416:	4b12      	ldr	r3, [pc, #72]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	490e      	ldr	r1, [pc, #56]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 8002426:	4313      	orrs	r3, r2
 8002428:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800242a:	f000 f821 	bl	8002470 <HAL_RCC_GetSysClockFreq>
 800242e:	4602      	mov	r2, r0
 8002430:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	091b      	lsrs	r3, r3, #4
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	490a      	ldr	r1, [pc, #40]	; (8002464 <HAL_RCC_ClockConfig+0x1c8>)
 800243c:	5ccb      	ldrb	r3, [r1, r3]
 800243e:	fa22 f303 	lsr.w	r3, r2, r3
 8002442:	4a09      	ldr	r2, [pc, #36]	; (8002468 <HAL_RCC_ClockConfig+0x1cc>)
 8002444:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002446:	4b09      	ldr	r3, [pc, #36]	; (800246c <HAL_RCC_ClockConfig+0x1d0>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f7fe fbce 	bl	8000bec <HAL_InitTick>

  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40022000 	.word	0x40022000
 8002460:	40021000 	.word	0x40021000
 8002464:	08002da0 	.word	0x08002da0
 8002468:	20000008 	.word	0x20000008
 800246c:	2000000c 	.word	0x2000000c

08002470 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002470:	b480      	push	{r7}
 8002472:	b087      	sub	sp, #28
 8002474:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	2300      	movs	r3, #0
 800247c:	60bb      	str	r3, [r7, #8]
 800247e:	2300      	movs	r3, #0
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	2300      	movs	r3, #0
 8002484:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002486:	2300      	movs	r3, #0
 8002488:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800248a:	4b1e      	ldr	r3, [pc, #120]	; (8002504 <HAL_RCC_GetSysClockFreq+0x94>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f003 030c 	and.w	r3, r3, #12
 8002496:	2b04      	cmp	r3, #4
 8002498:	d002      	beq.n	80024a0 <HAL_RCC_GetSysClockFreq+0x30>
 800249a:	2b08      	cmp	r3, #8
 800249c:	d003      	beq.n	80024a6 <HAL_RCC_GetSysClockFreq+0x36>
 800249e:	e027      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024a0:	4b19      	ldr	r3, [pc, #100]	; (8002508 <HAL_RCC_GetSysClockFreq+0x98>)
 80024a2:	613b      	str	r3, [r7, #16]
      break;
 80024a4:	e027      	b.n	80024f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	0c9b      	lsrs	r3, r3, #18
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	4a17      	ldr	r2, [pc, #92]	; (800250c <HAL_RCC_GetSysClockFreq+0x9c>)
 80024b0:	5cd3      	ldrb	r3, [r2, r3]
 80024b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d010      	beq.n	80024e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024be:	4b11      	ldr	r3, [pc, #68]	; (8002504 <HAL_RCC_GetSysClockFreq+0x94>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	0c5b      	lsrs	r3, r3, #17
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	4a11      	ldr	r2, [pc, #68]	; (8002510 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024ca:	5cd3      	ldrb	r3, [r2, r3]
 80024cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a0d      	ldr	r2, [pc, #52]	; (8002508 <HAL_RCC_GetSysClockFreq+0x98>)
 80024d2:	fb03 f202 	mul.w	r2, r3, r2
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024dc:	617b      	str	r3, [r7, #20]
 80024de:	e004      	b.n	80024ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a0c      	ldr	r2, [pc, #48]	; (8002514 <HAL_RCC_GetSysClockFreq+0xa4>)
 80024e4:	fb02 f303 	mul.w	r3, r2, r3
 80024e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	613b      	str	r3, [r7, #16]
      break;
 80024ee:	e002      	b.n	80024f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024f0:	4b05      	ldr	r3, [pc, #20]	; (8002508 <HAL_RCC_GetSysClockFreq+0x98>)
 80024f2:	613b      	str	r3, [r7, #16]
      break;
 80024f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024f6:	693b      	ldr	r3, [r7, #16]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	371c      	adds	r7, #28
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc80      	pop	{r7}
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40021000 	.word	0x40021000
 8002508:	007a1200 	.word	0x007a1200
 800250c:	08002db8 	.word	0x08002db8
 8002510:	08002dc8 	.word	0x08002dc8
 8002514:	003d0900 	.word	0x003d0900

08002518 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800251c:	4b02      	ldr	r3, [pc, #8]	; (8002528 <HAL_RCC_GetHCLKFreq+0x10>)
 800251e:	681b      	ldr	r3, [r3, #0]
}
 8002520:	4618      	mov	r0, r3
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr
 8002528:	20000008 	.word	0x20000008

0800252c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002530:	f7ff fff2 	bl	8002518 <HAL_RCC_GetHCLKFreq>
 8002534:	4602      	mov	r2, r0
 8002536:	4b05      	ldr	r3, [pc, #20]	; (800254c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	0a1b      	lsrs	r3, r3, #8
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	4903      	ldr	r1, [pc, #12]	; (8002550 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002542:	5ccb      	ldrb	r3, [r1, r3]
 8002544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002548:	4618      	mov	r0, r3
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40021000 	.word	0x40021000
 8002550:	08002db0 	.word	0x08002db0

08002554 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800255c:	4b0a      	ldr	r3, [pc, #40]	; (8002588 <RCC_Delay+0x34>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a0a      	ldr	r2, [pc, #40]	; (800258c <RCC_Delay+0x38>)
 8002562:	fba2 2303 	umull	r2, r3, r2, r3
 8002566:	0a5b      	lsrs	r3, r3, #9
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	fb02 f303 	mul.w	r3, r2, r3
 800256e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002570:	bf00      	nop
  }
  while (Delay --);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	1e5a      	subs	r2, r3, #1
 8002576:	60fa      	str	r2, [r7, #12]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1f9      	bne.n	8002570 <RCC_Delay+0x1c>
}
 800257c:	bf00      	nop
 800257e:	bf00      	nop
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr
 8002588:	20000008 	.word	0x20000008
 800258c:	10624dd3 	.word	0x10624dd3

08002590 <memset>:
 8002590:	4603      	mov	r3, r0
 8002592:	4402      	add	r2, r0
 8002594:	4293      	cmp	r3, r2
 8002596:	d100      	bne.n	800259a <memset+0xa>
 8002598:	4770      	bx	lr
 800259a:	f803 1b01 	strb.w	r1, [r3], #1
 800259e:	e7f9      	b.n	8002594 <memset+0x4>

080025a0 <__libc_init_array>:
 80025a0:	b570      	push	{r4, r5, r6, lr}
 80025a2:	2600      	movs	r6, #0
 80025a4:	4d0c      	ldr	r5, [pc, #48]	; (80025d8 <__libc_init_array+0x38>)
 80025a6:	4c0d      	ldr	r4, [pc, #52]	; (80025dc <__libc_init_array+0x3c>)
 80025a8:	1b64      	subs	r4, r4, r5
 80025aa:	10a4      	asrs	r4, r4, #2
 80025ac:	42a6      	cmp	r6, r4
 80025ae:	d109      	bne.n	80025c4 <__libc_init_array+0x24>
 80025b0:	f000 f81a 	bl	80025e8 <_init>
 80025b4:	2600      	movs	r6, #0
 80025b6:	4d0a      	ldr	r5, [pc, #40]	; (80025e0 <__libc_init_array+0x40>)
 80025b8:	4c0a      	ldr	r4, [pc, #40]	; (80025e4 <__libc_init_array+0x44>)
 80025ba:	1b64      	subs	r4, r4, r5
 80025bc:	10a4      	asrs	r4, r4, #2
 80025be:	42a6      	cmp	r6, r4
 80025c0:	d105      	bne.n	80025ce <__libc_init_array+0x2e>
 80025c2:	bd70      	pop	{r4, r5, r6, pc}
 80025c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80025c8:	4798      	blx	r3
 80025ca:	3601      	adds	r6, #1
 80025cc:	e7ee      	b.n	80025ac <__libc_init_array+0xc>
 80025ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80025d2:	4798      	blx	r3
 80025d4:	3601      	adds	r6, #1
 80025d6:	e7f2      	b.n	80025be <__libc_init_array+0x1e>
 80025d8:	08002dcc 	.word	0x08002dcc
 80025dc:	08002dcc 	.word	0x08002dcc
 80025e0:	08002dcc 	.word	0x08002dcc
 80025e4:	08002dd0 	.word	0x08002dd0

080025e8 <_init>:
 80025e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ea:	bf00      	nop
 80025ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ee:	bc08      	pop	{r3}
 80025f0:	469e      	mov	lr, r3
 80025f2:	4770      	bx	lr

080025f4 <_fini>:
 80025f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025f6:	bf00      	nop
 80025f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025fa:	bc08      	pop	{r3}
 80025fc:	469e      	mov	lr, r3
 80025fe:	4770      	bx	lr
