
ILI9486_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002244  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00011358  080023e0  080023e0  000033e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013738  08013738  0001505c  2**0
                  CONTENTS
  4 .ARM          00000008  08013738  08013738  00014738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013740  08013740  0001505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013740  08013740  00014740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013744  08013744  00014744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08013748  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  2000005c  080137a4  0001505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  080137a4  0001509c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000054a9  00000000  00000000  0001508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001433  00000000  00000000  0001a535  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000668  00000000  00000000  0001b968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000018bd  00000000  00000000  0001bfd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000711b  00000000  00000000  0001d88d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000846fc  00000000  00000000  000249a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000a90a4  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 0000049f  00000000  00000000  000a90e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000017a0  00000000  00000000  000a9588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000aad28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000005c 	.word	0x2000005c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080023c4 	.word	0x080023c4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000060 	.word	0x20000060
 80001d4:	080023c4 	.word	0x080023c4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <ili9486_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9486_DisplayOn(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_SLPOUT);    // Exit Sleep
 80004cc:	2011      	movs	r0, #17
 80004ce:	f000 fcfd 	bl	8000ecc <LCD_IO_WriteCmd8>
  ILI9486_LCDMUTEX_POP();
  LCD_IO_Bl_OnOff(1);
 80004d2:	2001      	movs	r0, #1
 80004d4:	f000 fc3c 	bl	8000d50 <LCD_IO_Bl_OnOff>
}
 80004d8:	bf00      	nop
 80004da:	bd80      	pop	{r7, pc}

080004dc <ili9486_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9486_DisplayOff(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  LCD_IO_Bl_OnOff(0);
 80004e0:	2000      	movs	r0, #0
 80004e2:	f000 fc35 	bl	8000d50 <LCD_IO_Bl_OnOff>
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_SLPIN);    // Sleep
 80004e6:	2010      	movs	r0, #16
 80004e8:	f000 fcf0 	bl	8000ecc <LCD_IO_WriteCmd8>
  ILI9486_LCDMUTEX_POP();
}
 80004ec:	bf00      	nop
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <ili9486_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9486_GetLcdPixelWidth(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  return ILI9486_SIZE_X;
 80004f4:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr

08000502 <ili9486_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9486_GetLcdPixelHeight(void)
{
 8000502:	b480      	push	{r7}
 8000504:	af00      	add	r7, sp, #0
  return ILI9486_SIZE_Y;
 8000506:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
}
 800050a:	4618      	mov	r0, r3
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <ili9486_ReadID>:
  * @brief  Get the ILI9486 ID.
  * @param  None
  * @retval The ILI9486 ID
  */
uint16_t ili9486_ReadID(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
  uint32_t id = 0;
 800051a:	2300      	movs	r3, #0
 800051c:	607b      	str	r3, [r7, #4]
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_ReadCmd8MultipleData8(0xD3, (uint8_t *)&id, 3, 1);
 800051e:	1d39      	adds	r1, r7, #4
 8000520:	2301      	movs	r3, #1
 8000522:	2203      	movs	r2, #3
 8000524:	20d3      	movs	r0, #211	@ 0xd3
 8000526:	f000 fe85 	bl	8001234 <LCD_IO_ReadCmd8MultipleData8>
  ILI9486_LCDMUTEX_POP();
  if(id == 0x869400)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4a05      	ldr	r2, [pc, #20]	@ (8000544 <ili9486_ReadID+0x30>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d102      	bne.n	8000538 <ili9486_ReadID+0x24>
    return 0x9486;
 8000532:	f249 4386 	movw	r3, #38022	@ 0x9486
 8000536:	e000      	b.n	800053a <ili9486_ReadID+0x26>
  else
    return 0;
 8000538:	2300      	movs	r3, #0
}
 800053a:	4618      	mov	r0, r3
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	00869400 	.word	0x00869400

08000548 <ili9486_Init>:
  * @brief  ILI9486 initialization
  * @param  None
  * @retval None
  */
void ili9486_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  if((Is_ili9486_Initialized & ILI9486_LCD_INITIALIZED) == 0)
 800054c:	4b33      	ldr	r3, [pc, #204]	@ (800061c <ili9486_Init+0xd4>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	f003 0301 	and.w	r3, r3, #1
 8000554:	2b00      	cmp	r3, #0
 8000556:	d115      	bne.n	8000584 <ili9486_Init+0x3c>
  {
    Is_ili9486_Initialized |= ILI9486_LCD_INITIALIZED;
 8000558:	4b30      	ldr	r3, [pc, #192]	@ (800061c <ili9486_Init+0xd4>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	b2da      	uxtb	r2, r3
 8000562:	4b2e      	ldr	r3, [pc, #184]	@ (800061c <ili9486_Init+0xd4>)
 8000564:	701a      	strb	r2, [r3, #0]
    if((Is_ili9486_Initialized & ILI9486_IO_INITIALIZED) == 0)
 8000566:	4b2d      	ldr	r3, [pc, #180]	@ (800061c <ili9486_Init+0xd4>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	f003 0302 	and.w	r3, r3, #2
 800056e:	2b00      	cmp	r3, #0
 8000570:	d101      	bne.n	8000576 <ili9486_Init+0x2e>
      LCD_IO_Init();
 8000572:	f000 fbf9 	bl	8000d68 <LCD_IO_Init>
    Is_ili9486_Initialized |= ILI9486_IO_INITIALIZED;
 8000576:	4b29      	ldr	r3, [pc, #164]	@ (800061c <ili9486_Init+0xd4>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	f043 0302 	orr.w	r3, r3, #2
 800057e:	b2da      	uxtb	r2, r3
 8000580:	4b26      	ldr	r3, [pc, #152]	@ (800061c <ili9486_Init+0xd4>)
 8000582:	701a      	strb	r2, [r3, #0]
  }
  LCD_Delay(10);
 8000584:	200a      	movs	r0, #10
 8000586:	f000 fbd8 	bl	8000d3a <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9486_SWRESET);
 800058a:	2001      	movs	r0, #1
 800058c:	f000 fc9e 	bl	8000ecc <LCD_IO_WriteCmd8>
  LCD_Delay(100);
 8000590:	2064      	movs	r0, #100	@ 0x64
 8000592:	f000 fbd2 	bl	8000d3a <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(ILI9486_RGB_INTERFACE, (uint8_t *)"\x00", 1); // RGB mode off (0xB0)
 8000596:	2201      	movs	r2, #1
 8000598:	4921      	ldr	r1, [pc, #132]	@ (8000620 <ili9486_Init+0xd8>)
 800059a:	20b0      	movs	r0, #176	@ 0xb0
 800059c:	f000 fd94 	bl	80010c8 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8(ILI9486_SLPOUT);    // Exit Sleep (0x11)
 80005a0:	2011      	movs	r0, #17
 80005a2:	f000 fc93 	bl	8000ecc <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 80005a6:	200a      	movs	r0, #10
 80005a8:	f000 fbc7 	bl	8000d3a <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(ILI9486_PIXFMT, (uint8_t *)"\x55", 1); // interface format (0x3A)
 80005ac:	2201      	movs	r2, #1
 80005ae:	491d      	ldr	r1, [pc, #116]	@ (8000624 <ili9486_Init+0xdc>)
 80005b0:	203a      	movs	r0, #58	@ 0x3a
 80005b2:	f000 fd89 	bl	80010c8 <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9486_MADCTL); LCD_IO_WriteData8(ILI9486_MAD_DATA_RIGHT_THEN_DOWN);
 80005b6:	2036      	movs	r0, #54	@ 0x36
 80005b8:	f000 fc88 	bl	8000ecc <LCD_IO_WriteCmd8>
 80005bc:	2048      	movs	r0, #72	@ 0x48
 80005be:	f000 fcb7 	bl	8000f30 <LCD_IO_WriteData8>

  LCD_IO_WriteCmd8MultipleData8(ILI9486_PWCTR3, (uint8_t *)"\x44", 1); // 0xC2
 80005c2:	2201      	movs	r2, #1
 80005c4:	4918      	ldr	r1, [pc, #96]	@ (8000628 <ili9486_Init+0xe0>)
 80005c6:	20c2      	movs	r0, #194	@ 0xc2
 80005c8:	f000 fd7e 	bl	80010c8 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9486_VMCTR1, (uint8_t *)"\x00\x00\x00\x00", 4); // 0xC5
 80005cc:	2204      	movs	r2, #4
 80005ce:	4917      	ldr	r1, [pc, #92]	@ (800062c <ili9486_Init+0xe4>)
 80005d0:	20c5      	movs	r0, #197	@ 0xc5
 80005d2:	f000 fd79 	bl	80010c8 <LCD_IO_WriteCmd8MultipleData8>

  // positive gamma control (0xE0)
  LCD_IO_WriteCmd8MultipleData8(ILI9486_GMCTRP1, (uint8_t *)"\x0F\x1F\x1C\x0C\x0F\x08\x48\x98\x37\x0A\x13\x04\x11\x0D\x00", 15);
 80005d6:	220f      	movs	r2, #15
 80005d8:	4915      	ldr	r1, [pc, #84]	@ (8000630 <ili9486_Init+0xe8>)
 80005da:	20e0      	movs	r0, #224	@ 0xe0
 80005dc:	f000 fd74 	bl	80010c8 <LCD_IO_WriteCmd8MultipleData8>

  // negative gamma control (0xE1)
  LCD_IO_WriteCmd8MultipleData8(ILI9486_GMCTRN1, (uint8_t *)"\x0F\x32\x2E\x0B\x0D\x05\x47\x75\x37\x06\x10\x03\x24\x20\x00", 15);
 80005e0:	220f      	movs	r2, #15
 80005e2:	4914      	ldr	r1, [pc, #80]	@ (8000634 <ili9486_Init+0xec>)
 80005e4:	20e1      	movs	r0, #225	@ 0xe1
 80005e6:	f000 fd6f 	bl	80010c8 <LCD_IO_WriteCmd8MultipleData8>

  // Digital gamma control1 (0xE2)
  LCD_IO_WriteCmd8MultipleData8(ILI9486_DGCTR1, (uint8_t *)"\x0F\x32\x2E\x0B\x0D\x05\x47\x75\x37\x06\x10\x03\x24\x20\x00", 15);
 80005ea:	220f      	movs	r2, #15
 80005ec:	4911      	ldr	r1, [pc, #68]	@ (8000634 <ili9486_Init+0xec>)
 80005ee:	20e2      	movs	r0, #226	@ 0xe2
 80005f0:	f000 fd6a 	bl	80010c8 <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9486_NORON);     // Normal display on (0x13)
 80005f4:	2013      	movs	r0, #19
 80005f6:	f000 fc69 	bl	8000ecc <LCD_IO_WriteCmd8>
  LCD_IO_WriteCmd8(ILI9486_INVOFF);    // Display inversion off (0x20)
 80005fa:	2020      	movs	r0, #32
 80005fc:	f000 fc66 	bl	8000ecc <LCD_IO_WriteCmd8>
  LCD_IO_WriteCmd8(ILI9486_SLPOUT);    // Exit Sleep (0x11)
 8000600:	2011      	movs	r0, #17
 8000602:	f000 fc63 	bl	8000ecc <LCD_IO_WriteCmd8>
  LCD_Delay(200);
 8000606:	20c8      	movs	r0, #200	@ 0xc8
 8000608:	f000 fb97 	bl	8000d3a <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9486_DISPON);    // Display on (0x29)
 800060c:	2029      	movs	r0, #41	@ 0x29
 800060e:	f000 fc5d 	bl	8000ecc <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8000612:	200a      	movs	r0, #10
 8000614:	f000 fb91 	bl	8000d3a <LCD_Delay>
}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000078 	.word	0x20000078
 8000620:	080023e0 	.word	0x080023e0
 8000624:	080023e4 	.word	0x080023e4
 8000628:	080023e8 	.word	0x080023e8
 800062c:	080023ec 	.word	0x080023ec
 8000630:	080023f4 	.word	0x080023f4
 8000634:	08002404 	.word	0x08002404

08000638 <ili9486_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9486_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	460a      	mov	r2, r1
 8000642:	80fb      	strh	r3, [r7, #6]
 8000644:	4613      	mov	r3, r2
 8000646:	80bb      	strh	r3, [r7, #4]
  ILI9486_LCDMUTEX_PUSH();
  ILI9486_SETCURSOR(Xpos, Ypos);
 8000648:	202a      	movs	r0, #42	@ 0x2a
 800064a:	f000 fc3f 	bl	8000ecc <LCD_IO_WriteCmd8>
 800064e:	88fb      	ldrh	r3, [r7, #6]
 8000650:	0a1b      	lsrs	r3, r3, #8
 8000652:	b29b      	uxth	r3, r3
 8000654:	b2db      	uxtb	r3, r3
 8000656:	4618      	mov	r0, r3
 8000658:	f000 fc6a 	bl	8000f30 <LCD_IO_WriteData8>
 800065c:	88fb      	ldrh	r3, [r7, #6]
 800065e:	b2db      	uxtb	r3, r3
 8000660:	4618      	mov	r0, r3
 8000662:	f000 fc65 	bl	8000f30 <LCD_IO_WriteData8>
 8000666:	88fb      	ldrh	r3, [r7, #6]
 8000668:	0a1b      	lsrs	r3, r3, #8
 800066a:	b29b      	uxth	r3, r3
 800066c:	b2db      	uxtb	r3, r3
 800066e:	4618      	mov	r0, r3
 8000670:	f000 fc5e 	bl	8000f30 <LCD_IO_WriteData8>
 8000674:	88fb      	ldrh	r3, [r7, #6]
 8000676:	b2db      	uxtb	r3, r3
 8000678:	4618      	mov	r0, r3
 800067a:	f000 fc59 	bl	8000f30 <LCD_IO_WriteData8>
 800067e:	202b      	movs	r0, #43	@ 0x2b
 8000680:	f000 fc24 	bl	8000ecc <LCD_IO_WriteCmd8>
 8000684:	88bb      	ldrh	r3, [r7, #4]
 8000686:	0a1b      	lsrs	r3, r3, #8
 8000688:	b29b      	uxth	r3, r3
 800068a:	b2db      	uxtb	r3, r3
 800068c:	4618      	mov	r0, r3
 800068e:	f000 fc4f 	bl	8000f30 <LCD_IO_WriteData8>
 8000692:	88bb      	ldrh	r3, [r7, #4]
 8000694:	b2db      	uxtb	r3, r3
 8000696:	4618      	mov	r0, r3
 8000698:	f000 fc4a 	bl	8000f30 <LCD_IO_WriteData8>
 800069c:	88bb      	ldrh	r3, [r7, #4]
 800069e:	0a1b      	lsrs	r3, r3, #8
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 fc43 	bl	8000f30 <LCD_IO_WriteData8>
 80006aa:	88bb      	ldrh	r3, [r7, #4]
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 fc3e 	bl	8000f30 <LCD_IO_WriteData8>
  ILI9486_LCDMUTEX_POP();
}
 80006b4:	bf00      	nop
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <ili9486_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9486_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	80fb      	strh	r3, [r7, #6]
 80006c6:	460b      	mov	r3, r1
 80006c8:	80bb      	strh	r3, [r7, #4]
 80006ca:	4613      	mov	r3, r2
 80006cc:	807b      	strh	r3, [r7, #2]
  ILI9486_LCDMUTEX_PUSH();
  ILI9486_SETCURSOR(Xpos, Ypos);
 80006ce:	202a      	movs	r0, #42	@ 0x2a
 80006d0:	f000 fbfc 	bl	8000ecc <LCD_IO_WriteCmd8>
 80006d4:	88fb      	ldrh	r3, [r7, #6]
 80006d6:	0a1b      	lsrs	r3, r3, #8
 80006d8:	b29b      	uxth	r3, r3
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 fc27 	bl	8000f30 <LCD_IO_WriteData8>
 80006e2:	88fb      	ldrh	r3, [r7, #6]
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 fc22 	bl	8000f30 <LCD_IO_WriteData8>
 80006ec:	88fb      	ldrh	r3, [r7, #6]
 80006ee:	0a1b      	lsrs	r3, r3, #8
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 fc1b 	bl	8000f30 <LCD_IO_WriteData8>
 80006fa:	88fb      	ldrh	r3, [r7, #6]
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 fc16 	bl	8000f30 <LCD_IO_WriteData8>
 8000704:	202b      	movs	r0, #43	@ 0x2b
 8000706:	f000 fbe1 	bl	8000ecc <LCD_IO_WriteCmd8>
 800070a:	88bb      	ldrh	r3, [r7, #4]
 800070c:	0a1b      	lsrs	r3, r3, #8
 800070e:	b29b      	uxth	r3, r3
 8000710:	b2db      	uxtb	r3, r3
 8000712:	4618      	mov	r0, r3
 8000714:	f000 fc0c 	bl	8000f30 <LCD_IO_WriteData8>
 8000718:	88bb      	ldrh	r3, [r7, #4]
 800071a:	b2db      	uxtb	r3, r3
 800071c:	4618      	mov	r0, r3
 800071e:	f000 fc07 	bl	8000f30 <LCD_IO_WriteData8>
 8000722:	88bb      	ldrh	r3, [r7, #4]
 8000724:	0a1b      	lsrs	r3, r3, #8
 8000726:	b29b      	uxth	r3, r3
 8000728:	b2db      	uxtb	r3, r3
 800072a:	4618      	mov	r0, r3
 800072c:	f000 fc00 	bl	8000f30 <LCD_IO_WriteData8>
 8000730:	88bb      	ldrh	r3, [r7, #4]
 8000732:	b2db      	uxtb	r3, r3
 8000734:	4618      	mov	r0, r3
 8000736:	f000 fbfb 	bl	8000f30 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_RAMWR); LCD_IO_WriteData16(RGBCode);
 800073a:	202c      	movs	r0, #44	@ 0x2c
 800073c:	f000 fbc6 	bl	8000ecc <LCD_IO_WriteCmd8>
 8000740:	887b      	ldrh	r3, [r7, #2]
 8000742:	4618      	mov	r0, r3
 8000744:	f000 fc1e 	bl	8000f84 <LCD_IO_WriteData16>
  ILI9486_LCDMUTEX_POP();
}
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <ili9486_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval the RGB pixel color
  */
uint16_t ili9486_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	460a      	mov	r2, r1
 800075a:	80fb      	strh	r3, [r7, #6]
 800075c:	4613      	mov	r3, r2
 800075e:	80bb      	strh	r3, [r7, #4]
  uint16_t ret;
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData8(ILI9486_PIXFMT, (uint8_t *)"\x66", 1); // Read: only 24bit pixel mode
 8000760:	2201      	movs	r2, #1
 8000762:	4925      	ldr	r1, [pc, #148]	@ (80007f8 <ili9486_ReadPixel+0xa8>)
 8000764:	203a      	movs	r0, #58	@ 0x3a
 8000766:	f000 fcaf 	bl	80010c8 <LCD_IO_WriteCmd8MultipleData8>
  ILI9486_SETCURSOR(Xpos, Ypos);
 800076a:	202a      	movs	r0, #42	@ 0x2a
 800076c:	f000 fbae 	bl	8000ecc <LCD_IO_WriteCmd8>
 8000770:	88fb      	ldrh	r3, [r7, #6]
 8000772:	0a1b      	lsrs	r3, r3, #8
 8000774:	b29b      	uxth	r3, r3
 8000776:	b2db      	uxtb	r3, r3
 8000778:	4618      	mov	r0, r3
 800077a:	f000 fbd9 	bl	8000f30 <LCD_IO_WriteData8>
 800077e:	88fb      	ldrh	r3, [r7, #6]
 8000780:	b2db      	uxtb	r3, r3
 8000782:	4618      	mov	r0, r3
 8000784:	f000 fbd4 	bl	8000f30 <LCD_IO_WriteData8>
 8000788:	88fb      	ldrh	r3, [r7, #6]
 800078a:	0a1b      	lsrs	r3, r3, #8
 800078c:	b29b      	uxth	r3, r3
 800078e:	b2db      	uxtb	r3, r3
 8000790:	4618      	mov	r0, r3
 8000792:	f000 fbcd 	bl	8000f30 <LCD_IO_WriteData8>
 8000796:	88fb      	ldrh	r3, [r7, #6]
 8000798:	b2db      	uxtb	r3, r3
 800079a:	4618      	mov	r0, r3
 800079c:	f000 fbc8 	bl	8000f30 <LCD_IO_WriteData8>
 80007a0:	202b      	movs	r0, #43	@ 0x2b
 80007a2:	f000 fb93 	bl	8000ecc <LCD_IO_WriteCmd8>
 80007a6:	88bb      	ldrh	r3, [r7, #4]
 80007a8:	0a1b      	lsrs	r3, r3, #8
 80007aa:	b29b      	uxth	r3, r3
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 fbbe 	bl	8000f30 <LCD_IO_WriteData8>
 80007b4:	88bb      	ldrh	r3, [r7, #4]
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	4618      	mov	r0, r3
 80007ba:	f000 fbb9 	bl	8000f30 <LCD_IO_WriteData8>
 80007be:	88bb      	ldrh	r3, [r7, #4]
 80007c0:	0a1b      	lsrs	r3, r3, #8
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 fbb2 	bl	8000f30 <LCD_IO_WriteData8>
 80007cc:	88bb      	ldrh	r3, [r7, #4]
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	4618      	mov	r0, r3
 80007d2:	f000 fbad 	bl	8000f30 <LCD_IO_WriteData8>
  LCD_IO_ReadCmd8MultipleData24to16(ILI9486_RAMRD, (uint16_t *)&ret, 1, 1);
 80007d6:	f107 010e 	add.w	r1, r7, #14
 80007da:	2301      	movs	r3, #1
 80007dc:	2201      	movs	r2, #1
 80007de:	202e      	movs	r0, #46	@ 0x2e
 80007e0:	f000 fd96 	bl	8001310 <LCD_IO_ReadCmd8MultipleData24to16>
  LCD_IO_WriteCmd8MultipleData8(ILI9486_PIXFMT, (uint8_t *)"\x55", 1); // Return to 16bit pixel mode
 80007e4:	2201      	movs	r2, #1
 80007e6:	4905      	ldr	r1, [pc, #20]	@ (80007fc <ili9486_ReadPixel+0xac>)
 80007e8:	203a      	movs	r0, #58	@ 0x3a
 80007ea:	f000 fc6d 	bl	80010c8 <LCD_IO_WriteCmd8MultipleData8>
  ILI9486_LCDMUTEX_POP();
  return(ret);
 80007ee:	89fb      	ldrh	r3, [r7, #14]
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3710      	adds	r7, #16
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	08002414 	.word	0x08002414
 80007fc:	080023e4 	.word	0x080023e4

08000800 <ili9486_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9486_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8000800:	b590      	push	{r4, r7, lr}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	4604      	mov	r4, r0
 8000808:	4608      	mov	r0, r1
 800080a:	4611      	mov	r1, r2
 800080c:	461a      	mov	r2, r3
 800080e:	4623      	mov	r3, r4
 8000810:	80fb      	strh	r3, [r7, #6]
 8000812:	4603      	mov	r3, r0
 8000814:	80bb      	strh	r3, [r7, #4]
 8000816:	460b      	mov	r3, r1
 8000818:	807b      	strh	r3, [r7, #2]
 800081a:	4613      	mov	r3, r2
 800081c:	803b      	strh	r3, [r7, #0]
  yStart = Ypos; yEnd = Ypos + Height - 1;
 800081e:	4a2a      	ldr	r2, [pc, #168]	@ (80008c8 <ili9486_SetDisplayWindow+0xc8>)
 8000820:	88bb      	ldrh	r3, [r7, #4]
 8000822:	8013      	strh	r3, [r2, #0]
 8000824:	88ba      	ldrh	r2, [r7, #4]
 8000826:	883b      	ldrh	r3, [r7, #0]
 8000828:	4413      	add	r3, r2
 800082a:	b29b      	uxth	r3, r3
 800082c:	3b01      	subs	r3, #1
 800082e:	b29a      	uxth	r2, r3
 8000830:	4b26      	ldr	r3, [pc, #152]	@ (80008cc <ili9486_SetDisplayWindow+0xcc>)
 8000832:	801a      	strh	r2, [r3, #0]
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Width - 1);
 8000834:	202a      	movs	r0, #42	@ 0x2a
 8000836:	f000 fb49 	bl	8000ecc <LCD_IO_WriteCmd8>
 800083a:	88fb      	ldrh	r3, [r7, #6]
 800083c:	0a1b      	lsrs	r3, r3, #8
 800083e:	b29b      	uxth	r3, r3
 8000840:	b2db      	uxtb	r3, r3
 8000842:	4618      	mov	r0, r3
 8000844:	f000 fb74 	bl	8000f30 <LCD_IO_WriteData8>
 8000848:	88fb      	ldrh	r3, [r7, #6]
 800084a:	b2db      	uxtb	r3, r3
 800084c:	4618      	mov	r0, r3
 800084e:	f000 fb6f 	bl	8000f30 <LCD_IO_WriteData8>
 8000852:	88fa      	ldrh	r2, [r7, #6]
 8000854:	887b      	ldrh	r3, [r7, #2]
 8000856:	4413      	add	r3, r2
 8000858:	3b01      	subs	r3, #1
 800085a:	121b      	asrs	r3, r3, #8
 800085c:	b2db      	uxtb	r3, r3
 800085e:	4618      	mov	r0, r3
 8000860:	f000 fb66 	bl	8000f30 <LCD_IO_WriteData8>
 8000864:	88fb      	ldrh	r3, [r7, #6]
 8000866:	b2da      	uxtb	r2, r3
 8000868:	887b      	ldrh	r3, [r7, #2]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	4413      	add	r3, r2
 800086e:	b2db      	uxtb	r3, r3
 8000870:	3b01      	subs	r3, #1
 8000872:	b2db      	uxtb	r3, r3
 8000874:	4618      	mov	r0, r3
 8000876:	f000 fb5b 	bl	8000f30 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
 800087a:	202b      	movs	r0, #43	@ 0x2b
 800087c:	f000 fb26 	bl	8000ecc <LCD_IO_WriteCmd8>
 8000880:	88bb      	ldrh	r3, [r7, #4]
 8000882:	0a1b      	lsrs	r3, r3, #8
 8000884:	b29b      	uxth	r3, r3
 8000886:	b2db      	uxtb	r3, r3
 8000888:	4618      	mov	r0, r3
 800088a:	f000 fb51 	bl	8000f30 <LCD_IO_WriteData8>
 800088e:	88bb      	ldrh	r3, [r7, #4]
 8000890:	b2db      	uxtb	r3, r3
 8000892:	4618      	mov	r0, r3
 8000894:	f000 fb4c 	bl	8000f30 <LCD_IO_WriteData8>
 8000898:	88ba      	ldrh	r2, [r7, #4]
 800089a:	883b      	ldrh	r3, [r7, #0]
 800089c:	4413      	add	r3, r2
 800089e:	3b01      	subs	r3, #1
 80008a0:	121b      	asrs	r3, r3, #8
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	4618      	mov	r0, r3
 80008a6:	f000 fb43 	bl	8000f30 <LCD_IO_WriteData8>
 80008aa:	88bb      	ldrh	r3, [r7, #4]
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	883b      	ldrh	r3, [r7, #0]
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	4413      	add	r3, r2
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	3b01      	subs	r3, #1
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 fb38 	bl	8000f30 <LCD_IO_WriteData8>
  ILI9486_LCDMUTEX_POP();
}
 80008c0:	bf00      	nop
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd90      	pop	{r4, r7, pc}
 80008c8:	2000007a 	.word	0x2000007a
 80008cc:	2000007c 	.word	0x2000007c

080008d0 <ili9486_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9486_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80008d0:	b590      	push	{r4, r7, lr}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4604      	mov	r4, r0
 80008d8:	4608      	mov	r0, r1
 80008da:	4611      	mov	r1, r2
 80008dc:	461a      	mov	r2, r3
 80008de:	4623      	mov	r3, r4
 80008e0:	80fb      	strh	r3, [r7, #6]
 80008e2:	4603      	mov	r3, r0
 80008e4:	80bb      	strh	r3, [r7, #4]
 80008e6:	460b      	mov	r3, r1
 80008e8:	807b      	strh	r3, [r7, #2]
 80008ea:	4613      	mov	r3, r2
 80008ec:	803b      	strh	r3, [r7, #0]
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Length - 1);
 80008ee:	202a      	movs	r0, #42	@ 0x2a
 80008f0:	f000 faec 	bl	8000ecc <LCD_IO_WriteCmd8>
 80008f4:	88bb      	ldrh	r3, [r7, #4]
 80008f6:	0a1b      	lsrs	r3, r3, #8
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	4618      	mov	r0, r3
 80008fe:	f000 fb17 	bl	8000f30 <LCD_IO_WriteData8>
 8000902:	88bb      	ldrh	r3, [r7, #4]
 8000904:	b2db      	uxtb	r3, r3
 8000906:	4618      	mov	r0, r3
 8000908:	f000 fb12 	bl	8000f30 <LCD_IO_WriteData8>
 800090c:	88ba      	ldrh	r2, [r7, #4]
 800090e:	883b      	ldrh	r3, [r7, #0]
 8000910:	4413      	add	r3, r2
 8000912:	3b01      	subs	r3, #1
 8000914:	121b      	asrs	r3, r3, #8
 8000916:	b2db      	uxtb	r3, r3
 8000918:	4618      	mov	r0, r3
 800091a:	f000 fb09 	bl	8000f30 <LCD_IO_WriteData8>
 800091e:	88bb      	ldrh	r3, [r7, #4]
 8000920:	b2da      	uxtb	r2, r3
 8000922:	883b      	ldrh	r3, [r7, #0]
 8000924:	b2db      	uxtb	r3, r3
 8000926:	4413      	add	r3, r2
 8000928:	b2db      	uxtb	r3, r3
 800092a:	3b01      	subs	r3, #1
 800092c:	b2db      	uxtb	r3, r3
 800092e:	4618      	mov	r0, r3
 8000930:	f000 fafe 	bl	8000f30 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos);
 8000934:	202b      	movs	r0, #43	@ 0x2b
 8000936:	f000 fac9 	bl	8000ecc <LCD_IO_WriteCmd8>
 800093a:	887b      	ldrh	r3, [r7, #2]
 800093c:	0a1b      	lsrs	r3, r3, #8
 800093e:	b29b      	uxth	r3, r3
 8000940:	b2db      	uxtb	r3, r3
 8000942:	4618      	mov	r0, r3
 8000944:	f000 faf4 	bl	8000f30 <LCD_IO_WriteData8>
 8000948:	887b      	ldrh	r3, [r7, #2]
 800094a:	b2db      	uxtb	r3, r3
 800094c:	4618      	mov	r0, r3
 800094e:	f000 faef 	bl	8000f30 <LCD_IO_WriteData8>
 8000952:	887b      	ldrh	r3, [r7, #2]
 8000954:	0a1b      	lsrs	r3, r3, #8
 8000956:	b29b      	uxth	r3, r3
 8000958:	b2db      	uxtb	r3, r3
 800095a:	4618      	mov	r0, r3
 800095c:	f000 fae8 	bl	8000f30 <LCD_IO_WriteData8>
 8000960:	887b      	ldrh	r3, [r7, #2]
 8000962:	b2db      	uxtb	r3, r3
 8000964:	4618      	mov	r0, r3
 8000966:	f000 fae3 	bl	8000f30 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9486_RAMWR, RGBCode, Length);
 800096a:	883a      	ldrh	r2, [r7, #0]
 800096c:	88fb      	ldrh	r3, [r7, #6]
 800096e:	4619      	mov	r1, r3
 8000970:	202c      	movs	r0, #44	@ 0x2c
 8000972:	f000 fb47 	bl	8001004 <LCD_IO_WriteCmd8DataFill16>
  ILI9486_LCDMUTEX_POP();
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	bd90      	pop	{r4, r7, pc}

0800097e <ili9486_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9486_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800097e:	b590      	push	{r4, r7, lr}
 8000980:	b083      	sub	sp, #12
 8000982:	af00      	add	r7, sp, #0
 8000984:	4604      	mov	r4, r0
 8000986:	4608      	mov	r0, r1
 8000988:	4611      	mov	r1, r2
 800098a:	461a      	mov	r2, r3
 800098c:	4623      	mov	r3, r4
 800098e:	80fb      	strh	r3, [r7, #6]
 8000990:	4603      	mov	r3, r0
 8000992:	80bb      	strh	r3, [r7, #4]
 8000994:	460b      	mov	r3, r1
 8000996:	807b      	strh	r3, [r7, #2]
 8000998:	4613      	mov	r3, r2
 800099a:	803b      	strh	r3, [r7, #0]
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos);
 800099c:	202a      	movs	r0, #42	@ 0x2a
 800099e:	f000 fa95 	bl	8000ecc <LCD_IO_WriteCmd8>
 80009a2:	88bb      	ldrh	r3, [r7, #4]
 80009a4:	0a1b      	lsrs	r3, r3, #8
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 fac0 	bl	8000f30 <LCD_IO_WriteData8>
 80009b0:	88bb      	ldrh	r3, [r7, #4]
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 fabb 	bl	8000f30 <LCD_IO_WriteData8>
 80009ba:	88bb      	ldrh	r3, [r7, #4]
 80009bc:	0a1b      	lsrs	r3, r3, #8
 80009be:	b29b      	uxth	r3, r3
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 fab4 	bl	8000f30 <LCD_IO_WriteData8>
 80009c8:	88bb      	ldrh	r3, [r7, #4]
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 faaf 	bl	8000f30 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Length - 1);
 80009d2:	202b      	movs	r0, #43	@ 0x2b
 80009d4:	f000 fa7a 	bl	8000ecc <LCD_IO_WriteCmd8>
 80009d8:	887b      	ldrh	r3, [r7, #2]
 80009da:	0a1b      	lsrs	r3, r3, #8
 80009dc:	b29b      	uxth	r3, r3
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	4618      	mov	r0, r3
 80009e2:	f000 faa5 	bl	8000f30 <LCD_IO_WriteData8>
 80009e6:	887b      	ldrh	r3, [r7, #2]
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	4618      	mov	r0, r3
 80009ec:	f000 faa0 	bl	8000f30 <LCD_IO_WriteData8>
 80009f0:	887a      	ldrh	r2, [r7, #2]
 80009f2:	883b      	ldrh	r3, [r7, #0]
 80009f4:	4413      	add	r3, r2
 80009f6:	3b01      	subs	r3, #1
 80009f8:	121b      	asrs	r3, r3, #8
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	4618      	mov	r0, r3
 80009fe:	f000 fa97 	bl	8000f30 <LCD_IO_WriteData8>
 8000a02:	887b      	ldrh	r3, [r7, #2]
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	883b      	ldrh	r3, [r7, #0]
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	4413      	add	r3, r2
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	4618      	mov	r0, r3
 8000a14:	f000 fa8c 	bl	8000f30 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9486_RAMWR, RGBCode, Length);
 8000a18:	883a      	ldrh	r2, [r7, #0]
 8000a1a:	88fb      	ldrh	r3, [r7, #6]
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	202c      	movs	r0, #44	@ 0x2c
 8000a20:	f000 faf0 	bl	8001004 <LCD_IO_WriteCmd8DataFill16>
  ILI9486_LCDMUTEX_POP();
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd90      	pop	{r4, r7, pc}

08000a2c <ili9486_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9486_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 8000a2c:	b590      	push	{r4, r7, lr}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4604      	mov	r4, r0
 8000a34:	4608      	mov	r0, r1
 8000a36:	4611      	mov	r1, r2
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4623      	mov	r3, r4
 8000a3c:	80fb      	strh	r3, [r7, #6]
 8000a3e:	4603      	mov	r3, r0
 8000a40:	80bb      	strh	r3, [r7, #4]
 8000a42:	460b      	mov	r3, r1
 8000a44:	807b      	strh	r3, [r7, #2]
 8000a46:	4613      	mov	r3, r2
 8000a48:	803b      	strh	r3, [r7, #0]
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Xsize - 1);
 8000a4a:	202a      	movs	r0, #42	@ 0x2a
 8000a4c:	f000 fa3e 	bl	8000ecc <LCD_IO_WriteCmd8>
 8000a50:	88fb      	ldrh	r3, [r7, #6]
 8000a52:	0a1b      	lsrs	r3, r3, #8
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f000 fa69 	bl	8000f30 <LCD_IO_WriteData8>
 8000a5e:	88fb      	ldrh	r3, [r7, #6]
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	4618      	mov	r0, r3
 8000a64:	f000 fa64 	bl	8000f30 <LCD_IO_WriteData8>
 8000a68:	88fa      	ldrh	r2, [r7, #6]
 8000a6a:	887b      	ldrh	r3, [r7, #2]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	3b01      	subs	r3, #1
 8000a70:	121b      	asrs	r3, r3, #8
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	4618      	mov	r0, r3
 8000a76:	f000 fa5b 	bl	8000f30 <LCD_IO_WriteData8>
 8000a7a:	88fb      	ldrh	r3, [r7, #6]
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	887b      	ldrh	r3, [r7, #2]
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	4413      	add	r3, r2
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	3b01      	subs	r3, #1
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 fa50 	bl	8000f30 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Ysize - 1);
 8000a90:	202b      	movs	r0, #43	@ 0x2b
 8000a92:	f000 fa1b 	bl	8000ecc <LCD_IO_WriteCmd8>
 8000a96:	88bb      	ldrh	r3, [r7, #4]
 8000a98:	0a1b      	lsrs	r3, r3, #8
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f000 fa46 	bl	8000f30 <LCD_IO_WriteData8>
 8000aa4:	88bb      	ldrh	r3, [r7, #4]
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f000 fa41 	bl	8000f30 <LCD_IO_WriteData8>
 8000aae:	88ba      	ldrh	r2, [r7, #4]
 8000ab0:	883b      	ldrh	r3, [r7, #0]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	3b01      	subs	r3, #1
 8000ab6:	121b      	asrs	r3, r3, #8
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	4618      	mov	r0, r3
 8000abc:	f000 fa38 	bl	8000f30 <LCD_IO_WriteData8>
 8000ac0:	88bb      	ldrh	r3, [r7, #4]
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	883b      	ldrh	r3, [r7, #0]
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	4413      	add	r3, r2
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	3b01      	subs	r3, #1
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f000 fa2d 	bl	8000f30 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9486_RAMWR, RGBCode, Xsize * Ysize);
 8000ad6:	887b      	ldrh	r3, [r7, #2]
 8000ad8:	883a      	ldrh	r2, [r7, #0]
 8000ada:	fb02 f303 	mul.w	r3, r2, r3
 8000ade:	461a      	mov	r2, r3
 8000ae0:	8b3b      	ldrh	r3, [r7, #24]
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	202c      	movs	r0, #44	@ 0x2c
 8000ae6:	f000 fa8d 	bl	8001004 <LCD_IO_WriteCmd8DataFill16>
  ILI9486_LCDMUTEX_POP();
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd90      	pop	{r4, r7, pc}
	...

08000af4 <ili9486_DrawBitmap>:
  * @param  Ypos:  Bmp Y position in the LCD
  * @retval None
  * @brief  Draw direction: right then up
  */
void ili9486_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	603a      	str	r2, [r7, #0]
 8000afe:	80fb      	strh	r3, [r7, #6]
 8000b00:	460b      	mov	r3, r1
 8000b02:	80bb      	strh	r3, [r7, #4]
  uint32_t index, size;
  /* Read bitmap size */
  size = ((BITMAPSTRUCT *)pbmp)->fileHeader.bfSize;
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000b0a:	60fb      	str	r3, [r7, #12]
  /* Get bitmap data address offset */
  index = ((BITMAPSTRUCT *)pbmp)->fileHeader.bfOffBits;
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8000b12:	60bb      	str	r3, [r7, #8]
  size = (size - index) / 2;
 8000b14:	68fa      	ldr	r2, [r7, #12]
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	085b      	lsrs	r3, r3, #1
 8000b1c:	60fb      	str	r3, [r7, #12]
  pbmp += index;
 8000b1e:	683a      	ldr	r2, [r7, #0]
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	4413      	add	r3, r2
 8000b24:	603b      	str	r3, [r7, #0]

  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_MADCTL); LCD_IO_WriteData8(ILI9486_MAD_DATA_RIGHT_THEN_UP);
 8000b26:	2036      	movs	r0, #54	@ 0x36
 8000b28:	f000 f9d0 	bl	8000ecc <LCD_IO_WriteCmd8>
 8000b2c:	20c8      	movs	r0, #200	@ 0xc8
 8000b2e:	f000 f9ff 	bl	8000f30 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_PASET); LCD_IO_WriteData16_to_2x8(ILI9486_SIZE_Y - 1 - yEnd); LCD_IO_WriteData16_to_2x8(ILI9486_SIZE_Y - 1 - yStart);
 8000b32:	202b      	movs	r0, #43	@ 0x2b
 8000b34:	f000 f9ca 	bl	8000ecc <LCD_IO_WriteCmd8>
 8000b38:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba8 <ili9486_DrawBitmap+0xb4>)
 8000b3a:	881b      	ldrh	r3, [r3, #0]
 8000b3c:	f5c3 73ef 	rsb	r3, r3, #478	@ 0x1de
 8000b40:	3301      	adds	r3, #1
 8000b42:	121b      	asrs	r3, r3, #8
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 f9f2 	bl	8000f30 <LCD_IO_WriteData8>
 8000b4c:	4b16      	ldr	r3, [pc, #88]	@ (8000ba8 <ili9486_DrawBitmap+0xb4>)
 8000b4e:	881b      	ldrh	r3, [r3, #0]
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	f06f 0320 	mvn.w	r3, #32
 8000b56:	1a9b      	subs	r3, r3, r2
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 f9e8 	bl	8000f30 <LCD_IO_WriteData8>
 8000b60:	4b12      	ldr	r3, [pc, #72]	@ (8000bac <ili9486_DrawBitmap+0xb8>)
 8000b62:	881b      	ldrh	r3, [r3, #0]
 8000b64:	f5c3 73ef 	rsb	r3, r3, #478	@ 0x1de
 8000b68:	3301      	adds	r3, #1
 8000b6a:	121b      	asrs	r3, r3, #8
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 f9de 	bl	8000f30 <LCD_IO_WriteData8>
 8000b74:	4b0d      	ldr	r3, [pc, #52]	@ (8000bac <ili9486_DrawBitmap+0xb8>)
 8000b76:	881b      	ldrh	r3, [r3, #0]
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	f06f 0320 	mvn.w	r3, #32
 8000b7e:	1a9b      	subs	r3, r3, r2
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	4618      	mov	r0, r3
 8000b84:	f000 f9d4 	bl	8000f30 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData16(ILI9486_RAMWR, (uint16_t *)pbmp, size);
 8000b88:	68fa      	ldr	r2, [r7, #12]
 8000b8a:	6839      	ldr	r1, [r7, #0]
 8000b8c:	202c      	movs	r0, #44	@ 0x2c
 8000b8e:	f000 faeb 	bl	8001168 <LCD_IO_WriteCmd8MultipleData16>
  LCD_IO_WriteCmd8(ILI9486_MADCTL); LCD_IO_WriteData8(ILI9486_MAD_DATA_RIGHT_THEN_DOWN);
 8000b92:	2036      	movs	r0, #54	@ 0x36
 8000b94:	f000 f99a 	bl	8000ecc <LCD_IO_WriteCmd8>
 8000b98:	2048      	movs	r0, #72	@ 0x48
 8000b9a:	f000 f9c9 	bl	8000f30 <LCD_IO_WriteData8>
  ILI9486_LCDMUTEX_POP();
}
 8000b9e:	bf00      	nop
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	2000007c 	.word	0x2000007c
 8000bac:	2000007a 	.word	0x2000007a

08000bb0 <ili9486_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9486_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4604      	mov	r4, r0
 8000bb8:	4608      	mov	r0, r1
 8000bba:	4611      	mov	r1, r2
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4623      	mov	r3, r4
 8000bc0:	80fb      	strh	r3, [r7, #6]
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	80bb      	strh	r3, [r7, #4]
 8000bc6:	460b      	mov	r3, r1
 8000bc8:	807b      	strh	r3, [r7, #2]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	803b      	strh	r3, [r7, #0]
  ili9486_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8000bce:	883b      	ldrh	r3, [r7, #0]
 8000bd0:	887a      	ldrh	r2, [r7, #2]
 8000bd2:	88b9      	ldrh	r1, [r7, #4]
 8000bd4:	88f8      	ldrh	r0, [r7, #6]
 8000bd6:	f7ff fe13 	bl	8000800 <ili9486_SetDisplayWindow>
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData16(ILI9486_RAMWR, pData, Xsize * Ysize);
 8000bda:	887b      	ldrh	r3, [r7, #2]
 8000bdc:	883a      	ldrh	r2, [r7, #0]
 8000bde:	fb02 f303 	mul.w	r3, r2, r3
 8000be2:	461a      	mov	r2, r3
 8000be4:	69b9      	ldr	r1, [r7, #24]
 8000be6:	202c      	movs	r0, #44	@ 0x2c
 8000be8:	f000 fabe 	bl	8001168 <LCD_IO_WriteCmd8MultipleData16>
  ILI9486_LCDMUTEX_POP();
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd90      	pop	{r4, r7, pc}

08000bf4 <ili9486_ReadRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9486_ReadRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 8000bf4:	b590      	push	{r4, r7, lr}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4604      	mov	r4, r0
 8000bfc:	4608      	mov	r0, r1
 8000bfe:	4611      	mov	r1, r2
 8000c00:	461a      	mov	r2, r3
 8000c02:	4623      	mov	r3, r4
 8000c04:	80fb      	strh	r3, [r7, #6]
 8000c06:	4603      	mov	r3, r0
 8000c08:	80bb      	strh	r3, [r7, #4]
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	807b      	strh	r3, [r7, #2]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	803b      	strh	r3, [r7, #0]
  ili9486_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8000c12:	883b      	ldrh	r3, [r7, #0]
 8000c14:	887a      	ldrh	r2, [r7, #2]
 8000c16:	88b9      	ldrh	r1, [r7, #4]
 8000c18:	88f8      	ldrh	r0, [r7, #6]
 8000c1a:	f7ff fdf1 	bl	8000800 <ili9486_SetDisplayWindow>
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData8(ILI9486_PIXFMT, (uint8_t *)"\x66", 1); // Read: only 24bit pixel mode
 8000c1e:	2201      	movs	r2, #1
 8000c20:	490b      	ldr	r1, [pc, #44]	@ (8000c50 <ili9486_ReadRGBImage+0x5c>)
 8000c22:	203a      	movs	r0, #58	@ 0x3a
 8000c24:	f000 fa50 	bl	80010c8 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_ReadCmd8MultipleData24to16(ILI9486_RAMRD, pData, Xsize * Ysize, 1);
 8000c28:	887b      	ldrh	r3, [r7, #2]
 8000c2a:	883a      	ldrh	r2, [r7, #0]
 8000c2c:	fb02 f303 	mul.w	r3, r2, r3
 8000c30:	461a      	mov	r2, r3
 8000c32:	2301      	movs	r3, #1
 8000c34:	69b9      	ldr	r1, [r7, #24]
 8000c36:	202e      	movs	r0, #46	@ 0x2e
 8000c38:	f000 fb6a 	bl	8001310 <LCD_IO_ReadCmd8MultipleData24to16>
  LCD_IO_WriteCmd8MultipleData8(ILI9486_PIXFMT, (uint8_t *)"\x55", 1); // Return to 16bit pixel mode
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	4905      	ldr	r1, [pc, #20]	@ (8000c54 <ili9486_ReadRGBImage+0x60>)
 8000c40:	203a      	movs	r0, #58	@ 0x3a
 8000c42:	f000 fa41 	bl	80010c8 <LCD_IO_WriteCmd8MultipleData8>
  ILI9486_LCDMUTEX_POP();
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd90      	pop	{r4, r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	08002414 	.word	0x08002414
 8000c54:	080023e4 	.word	0x080023e4

08000c58 <ili9486_Scroll>:
  * @param  TopFix    : Top fix size [pixel]
  * @param  BottonFix : Botton fix size [pixel]
  * @retval None
  */
void ili9486_Scroll(int16_t Scroll, uint16_t TopFix, uint16_t BottonFix)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	80fb      	strh	r3, [r7, #6]
 8000c62:	460b      	mov	r3, r1
 8000c64:	80bb      	strh	r3, [r7, #4]
 8000c66:	4613      	mov	r3, r2
 8000c68:	807b      	strh	r3, [r7, #2]
  static uint16_t scrparam[4] = {0, 0, 0, 0};
  ILI9486_LCDMUTEX_PUSH();
  #if (ILI9486_ORIENTATION == 0)
  if((TopFix != scrparam[1]) || (BottonFix != scrparam[3]))
 8000c6a:	4b29      	ldr	r3, [pc, #164]	@ (8000d10 <ili9486_Scroll+0xb8>)
 8000c6c:	885b      	ldrh	r3, [r3, #2]
 8000c6e:	88ba      	ldrh	r2, [r7, #4]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d104      	bne.n	8000c7e <ili9486_Scroll+0x26>
 8000c74:	4b26      	ldr	r3, [pc, #152]	@ (8000d10 <ili9486_Scroll+0xb8>)
 8000c76:	88db      	ldrh	r3, [r3, #6]
 8000c78:	887a      	ldrh	r2, [r7, #2]
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	d013      	beq.n	8000ca6 <ili9486_Scroll+0x4e>
  {
    scrparam[1] = TopFix;
 8000c7e:	4a24      	ldr	r2, [pc, #144]	@ (8000d10 <ili9486_Scroll+0xb8>)
 8000c80:	88bb      	ldrh	r3, [r7, #4]
 8000c82:	8053      	strh	r3, [r2, #2]
    scrparam[3] = BottonFix;
 8000c84:	4a22      	ldr	r2, [pc, #136]	@ (8000d10 <ili9486_Scroll+0xb8>)
 8000c86:	887b      	ldrh	r3, [r7, #2]
 8000c88:	80d3      	strh	r3, [r2, #6]
    scrparam[2] = ILI9486_LCD_PIXEL_HEIGHT - TopFix - BottonFix;
 8000c8a:	88ba      	ldrh	r2, [r7, #4]
 8000c8c:	887b      	ldrh	r3, [r7, #2]
 8000c8e:	4413      	add	r3, r2
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	f5c3 73f0 	rsb	r3, r3, #480	@ 0x1e0
 8000c96:	b29a      	uxth	r2, r3
 8000c98:	4b1d      	ldr	r3, [pc, #116]	@ (8000d10 <ili9486_Scroll+0xb8>)
 8000c9a:	809a      	strh	r2, [r3, #4]
    LCD_IO_WriteCmd8MultipleData16(ILI9486_VSCRDEF, &scrparam[1], 3);
 8000c9c:	2203      	movs	r2, #3
 8000c9e:	491d      	ldr	r1, [pc, #116]	@ (8000d14 <ili9486_Scroll+0xbc>)
 8000ca0:	2033      	movs	r0, #51	@ 0x33
 8000ca2:	f000 fa61 	bl	8001168 <LCD_IO_WriteCmd8MultipleData16>
  }
  Scroll = (0 - Scroll) % scrparam[2];
 8000ca6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000caa:	425b      	negs	r3, r3
 8000cac:	4a18      	ldr	r2, [pc, #96]	@ (8000d10 <ili9486_Scroll+0xb8>)
 8000cae:	8892      	ldrh	r2, [r2, #4]
 8000cb0:	fb93 f1f2 	sdiv	r1, r3, r2
 8000cb4:	fb01 f202 	mul.w	r2, r1, r2
 8000cb8:	1a9b      	subs	r3, r3, r2
 8000cba:	80fb      	strh	r3, [r7, #6]
  if(Scroll < 0)
 8000cbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	da0a      	bge.n	8000cda <ili9486_Scroll+0x82>
    Scroll = scrparam[2] + Scroll + scrparam[1];
 8000cc4:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <ili9486_Scroll+0xb8>)
 8000cc6:	889a      	ldrh	r2, [r3, #4]
 8000cc8:	88fb      	ldrh	r3, [r7, #6]
 8000cca:	4413      	add	r3, r2
 8000ccc:	b29a      	uxth	r2, r3
 8000cce:	4b10      	ldr	r3, [pc, #64]	@ (8000d10 <ili9486_Scroll+0xb8>)
 8000cd0:	885b      	ldrh	r3, [r3, #2]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	80fb      	strh	r3, [r7, #6]
 8000cd8:	e005      	b.n	8000ce6 <ili9486_Scroll+0x8e>
  else
    Scroll = Scroll + scrparam[1];
 8000cda:	4b0d      	ldr	r3, [pc, #52]	@ (8000d10 <ili9486_Scroll+0xb8>)
 8000cdc:	885a      	ldrh	r2, [r3, #2]
 8000cde:	88fb      	ldrh	r3, [r7, #6]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	80fb      	strh	r3, [r7, #6]
  if(Scroll < 0)
    Scroll = scrparam[2] + Scroll + scrparam[1];
  else
    Scroll = Scroll + scrparam[1];
  #endif
  if(Scroll != scrparam[0])
 8000ce6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cea:	4a09      	ldr	r2, [pc, #36]	@ (8000d10 <ili9486_Scroll+0xb8>)
 8000cec:	8812      	ldrh	r2, [r2, #0]
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d009      	beq.n	8000d06 <ili9486_Scroll+0xae>
  {
    scrparam[0] = Scroll;
 8000cf2:	88fa      	ldrh	r2, [r7, #6]
 8000cf4:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <ili9486_Scroll+0xb8>)
 8000cf6:	801a      	strh	r2, [r3, #0]
    LCD_IO_WriteCmd8DataFill16(ILI9486_VSCRSADD, scrparam[0], 1);
 8000cf8:	4b05      	ldr	r3, [pc, #20]	@ (8000d10 <ili9486_Scroll+0xb8>)
 8000cfa:	881b      	ldrh	r3, [r3, #0]
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	4619      	mov	r1, r3
 8000d00:	2037      	movs	r0, #55	@ 0x37
 8000d02:	f000 f97f 	bl	8001004 <LCD_IO_WriteCmd8DataFill16>
  }
  ILI9486_LCDMUTEX_POP();
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000080 	.word	0x20000080
 8000d14:	20000082 	.word	0x20000082

08000d18 <LCD_IO_Delay>:
#elif   defined(__CC_ARM)
#pragma push
#pragma O0
#endif
void LCD_IO_Delay(uint32_t c)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  while(c--);
 8000d20:	bf00      	nop
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	1e5a      	subs	r2, r3, #1
 8000d26:	607a      	str	r2, [r7, #4]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d1fa      	bne.n	8000d22 <LCD_IO_Delay+0xa>
}
 8000d2c:	bf00      	nop
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <LCD_Delay>:
#pragma pop
#endif

//-----------------------------------------------------------------------------
void LCD_Delay(uint32_t Delay)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f000 fde4 	bl	8001910 <HAL_Delay>
}
 8000d48:	bf00      	nop
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
  if(Bl)
    GPIOX_ODR(LCD_BL) = LCD_BLON;
  else
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
  #endif
}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
	...

08000d68 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  #define GPIOX_CLOCK_LCD_RD    GPIOX_CLOCK(LCD_RD)
  #else
  #define GPIOX_CLOCK_LCD_RD    0
  #endif

  RCC->AHB1ENR |= (GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_WR) |
 8000d6c:	4b4f      	ldr	r3, [pc, #316]	@ (8000eac <LCD_IO_Init+0x144>)
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d70:	4a4e      	ldr	r2, [pc, #312]	@ (8000eac <LCD_IO_Init+0x144>)
 8000d72:	f043 0306 	orr.w	r3, r3, #6
 8000d76:	6313      	str	r3, [r2, #48]	@ 0x30
                   GPIOX_CLOCK(LCD_D0) | GPIOX_CLOCK(LCD_D1) | GPIOX_CLOCK(LCD_D2) | GPIOX_CLOCK(LCD_D3) |
                   GPIOX_CLOCK(LCD_D4) | GPIOX_CLOCK(LCD_D5) | GPIOX_CLOCK(LCD_D6) | GPIOX_CLOCK(LCD_D7) |
                   GPIOX_CLOCK_LCD_RST | GPIOX_CLOCK_LCD_BL  | GPIOX_CLOCK_LCD_RD);

  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  LCD_RST_OFF;                          // RST = 1
 8000d78:	4b4d      	ldr	r3, [pc, #308]	@ (8000eb0 <LCD_IO_Init+0x148>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	601a      	str	r2, [r3, #0]
  GPIOX_MODER(MODE_OUT, LCD_RST);
 8000d7e:	4b4d      	ldr	r3, [pc, #308]	@ (8000eb4 <LCD_IO_Init+0x14c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8000d86:	4a4b      	ldr	r2, [pc, #300]	@ (8000eb4 <LCD_IO_Init+0x14c>)
 8000d88:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000d8c:	6013      	str	r3, [r2, #0]
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  GPIOX_ODR(LCD_BL) = LCD_BLON;
  GPIOX_MODER(MODE_OUT, LCD_BL);
  #endif

  GPIOX_ODR(LCD_CS) = 1;                /* CS = 1 */
 8000d8e:	4b4a      	ldr	r3, [pc, #296]	@ (8000eb8 <LCD_IO_Init+0x150>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	601a      	str	r2, [r3, #0]
  LCD_RS_DATA;                          /* RS = 1 */
 8000d94:	4b49      	ldr	r3, [pc, #292]	@ (8000ebc <LCD_IO_Init+0x154>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_WR) = 1;                /* WR = 1 */
 8000d9a:	4b49      	ldr	r3, [pc, #292]	@ (8000ec0 <LCD_IO_Init+0x158>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	601a      	str	r2, [r3, #0]
  #if GPIOX_PORTNUM(LCD_RD) >= GPIOX_PORTNUM_A
  GPIOX_ODR(LCD_RD) = 1;                /* RD = 1 */
 8000da0:	4b48      	ldr	r3, [pc, #288]	@ (8000ec4 <LCD_IO_Init+0x15c>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	601a      	str	r2, [r3, #0]
  #endif

  GPIOX_MODER(MODE_OUT, LCD_CS);
 8000da6:	4b48      	ldr	r3, [pc, #288]	@ (8000ec8 <LCD_IO_Init+0x160>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000dae:	4a46      	ldr	r2, [pc, #280]	@ (8000ec8 <LCD_IO_Init+0x160>)
 8000db0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000db4:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_RS);
 8000db6:	4b44      	ldr	r3, [pc, #272]	@ (8000ec8 <LCD_IO_Init+0x160>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8000dbe:	4a42      	ldr	r2, [pc, #264]	@ (8000ec8 <LCD_IO_Init+0x160>)
 8000dc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dc4:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_WR);
 8000dc6:	4b40      	ldr	r3, [pc, #256]	@ (8000ec8 <LCD_IO_Init+0x160>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8000dce:	4a3e      	ldr	r2, [pc, #248]	@ (8000ec8 <LCD_IO_Init+0x160>)
 8000dd0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000dd4:	6013      	str	r3, [r2, #0]
  #if GPIOX_PORTNUM(LCD_RD) >= GPIOX_PORTNUM_A
  GPIOX_MODER(MODE_OUT, LCD_RD);
 8000dd6:	4b37      	ldr	r3, [pc, #220]	@ (8000eb4 <LCD_IO_Init+0x14c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8000dde:	4a35      	ldr	r2, [pc, #212]	@ (8000eb4 <LCD_IO_Init+0x14c>)
 8000de0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000de4:	6013      	str	r3, [r2, #0]
  #endif

  LCD_DIRWRITE;                         /* data pins set the output direction */
 8000de6:	4b33      	ldr	r3, [pc, #204]	@ (8000eb4 <LCD_IO_Init+0x14c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	0c1b      	lsrs	r3, r3, #16
 8000dec:	041b      	lsls	r3, r3, #16
 8000dee:	4a31      	ldr	r2, [pc, #196]	@ (8000eb4 <LCD_IO_Init+0x14c>)
 8000df0:	f443 43aa 	orr.w	r3, r3, #21760	@ 0x5500
 8000df4:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 8000df8:	6013      	str	r3, [r2, #0]

  /* GPIO speed */
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_CS);
 8000dfa:	4b33      	ldr	r3, [pc, #204]	@ (8000ec8 <LCD_IO_Init+0x160>)
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	4a32      	ldr	r2, [pc, #200]	@ (8000ec8 <LCD_IO_Init+0x160>)
 8000e00:	f043 6340 	orr.w	r3, r3, #201326592	@ 0xc000000
 8000e04:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RS);
 8000e06:	4b30      	ldr	r3, [pc, #192]	@ (8000ec8 <LCD_IO_Init+0x160>)
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	4a2f      	ldr	r2, [pc, #188]	@ (8000ec8 <LCD_IO_Init+0x160>)
 8000e0c:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 8000e10:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_WR);
 8000e12:	4b2d      	ldr	r3, [pc, #180]	@ (8000ec8 <LCD_IO_Init+0x160>)
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	4a2c      	ldr	r2, [pc, #176]	@ (8000ec8 <LCD_IO_Init+0x160>)
 8000e18:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8000e1c:	6093      	str	r3, [r2, #8]
  #if GPIOX_PORTNUM(LCD_RD) >= GPIOX_PORTNUM_A
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RD);
 8000e1e:	4b25      	ldr	r3, [pc, #148]	@ (8000eb4 <LCD_IO_Init+0x14c>)
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	4a24      	ldr	r2, [pc, #144]	@ (8000eb4 <LCD_IO_Init+0x14c>)
 8000e24:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8000e28:	6093      	str	r3, [r2, #8]
  #endif
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D0);
 8000e2a:	4b22      	ldr	r3, [pc, #136]	@ (8000eb4 <LCD_IO_Init+0x14c>)
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	4a21      	ldr	r2, [pc, #132]	@ (8000eb4 <LCD_IO_Init+0x14c>)
 8000e30:	f043 0303 	orr.w	r3, r3, #3
 8000e34:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D1);
 8000e36:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb4 <LCD_IO_Init+0x14c>)
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	4a1e      	ldr	r2, [pc, #120]	@ (8000eb4 <LCD_IO_Init+0x14c>)
 8000e3c:	f043 030c 	orr.w	r3, r3, #12
 8000e40:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D2);
 8000e42:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb4 <LCD_IO_Init+0x14c>)
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	4a1b      	ldr	r2, [pc, #108]	@ (8000eb4 <LCD_IO_Init+0x14c>)
 8000e48:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000e4c:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D3);
 8000e4e:	4b19      	ldr	r3, [pc, #100]	@ (8000eb4 <LCD_IO_Init+0x14c>)
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	4a18      	ldr	r2, [pc, #96]	@ (8000eb4 <LCD_IO_Init+0x14c>)
 8000e54:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000e58:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D4);
 8000e5a:	4b16      	ldr	r3, [pc, #88]	@ (8000eb4 <LCD_IO_Init+0x14c>)
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	4a15      	ldr	r2, [pc, #84]	@ (8000eb4 <LCD_IO_Init+0x14c>)
 8000e60:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000e64:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D5);
 8000e66:	4b13      	ldr	r3, [pc, #76]	@ (8000eb4 <LCD_IO_Init+0x14c>)
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	4a12      	ldr	r2, [pc, #72]	@ (8000eb4 <LCD_IO_Init+0x14c>)
 8000e6c:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000e70:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D6);
 8000e72:	4b10      	ldr	r3, [pc, #64]	@ (8000eb4 <LCD_IO_Init+0x14c>)
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	4a0f      	ldr	r2, [pc, #60]	@ (8000eb4 <LCD_IO_Init+0x14c>)
 8000e78:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8000e7c:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D7);
 8000e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb4 <LCD_IO_Init+0x14c>)
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	4a0c      	ldr	r2, [pc, #48]	@ (8000eb4 <LCD_IO_Init+0x14c>)
 8000e84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e88:	6093      	str	r3, [r2, #8]

  /* Reset the LCD */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  LCD_Delay(1);
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	f7ff ff55 	bl	8000d3a <LCD_Delay>
  LCD_RST_ON;                           /* RST = 0 */
 8000e90:	4b07      	ldr	r3, [pc, #28]	@ (8000eb0 <LCD_IO_Init+0x148>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
  LCD_Delay(1);
 8000e96:	2001      	movs	r0, #1
 8000e98:	f7ff ff4f 	bl	8000d3a <LCD_Delay>
  LCD_RST_OFF;                          /* RST = 1 */
 8000e9c:	4b04      	ldr	r3, [pc, #16]	@ (8000eb0 <LCD_IO_Init+0x148>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	601a      	str	r2, [r3, #0]
  #endif
  LCD_Delay(1);
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	f7ff ff49 	bl	8000d3a <LCD_Delay>
}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	424082b0 	.word	0x424082b0
 8000eb4:	40020400 	.word	0x40020400
 8000eb8:	424102b4 	.word	0x424102b4
 8000ebc:	424102b8 	.word	0x424102b8
 8000ec0:	424102bc 	.word	0x424102bc
 8000ec4:	424082a8 	.word	0x424082a8
 8000ec8:	40020800 	.word	0x40020800

08000ecc <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  LCD_CS_ON;
 8000ed6:	4b11      	ldr	r3, [pc, #68]	@ (8000f1c <LCD_IO_WriteCmd8+0x50>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
  LCD_CMD8_WRITE(Cmd);
 8000edc:	4b10      	ldr	r3, [pc, #64]	@ (8000f20 <LCD_IO_WriteCmd8+0x54>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	4a10      	ldr	r2, [pc, #64]	@ (8000f24 <LCD_IO_WriteCmd8+0x58>)
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	7013      	strb	r3, [r2, #0]
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8000f24 <LCD_IO_WriteCmd8+0x58>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8000ef0:	4b0d      	ldr	r3, [pc, #52]	@ (8000f28 <LCD_IO_WriteCmd8+0x5c>)
 8000ef2:	619a      	str	r2, [r3, #24]
 8000ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8000f2c <LCD_IO_WriteCmd8+0x60>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	2008      	movs	r0, #8
 8000efc:	f7ff ff0c 	bl	8000d18 <LCD_IO_Delay>
 8000f00:	4b0a      	ldr	r3, [pc, #40]	@ (8000f2c <LCD_IO_WriteCmd8+0x60>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <LCD_IO_WriteCmd8+0x54>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 8000f0c:	4b03      	ldr	r3, [pc, #12]	@ (8000f1c <LCD_IO_WriteCmd8+0x50>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	601a      	str	r2, [r3, #0]
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	424102b4 	.word	0x424102b4
 8000f20:	424102b8 	.word	0x424102b8
 8000f24:	20000088 	.word	0x20000088
 8000f28:	40020400 	.word	0x40020400
 8000f2c:	424102bc 	.word	0x424102bc

08000f30 <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
  LCD_CS_ON;
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f74 <LCD_IO_WriteData8+0x44>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
  LCD_DATA8_WRITE(Data);
 8000f40:	4a0d      	ldr	r2, [pc, #52]	@ (8000f78 <LCD_IO_WriteData8+0x48>)
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	7013      	strb	r3, [r2, #0]
 8000f46:	4b0c      	ldr	r3, [pc, #48]	@ (8000f78 <LCD_IO_WriteData8+0x48>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f7c <LCD_IO_WriteData8+0x4c>)
 8000f50:	619a      	str	r2, [r3, #24]
 8000f52:	4b0b      	ldr	r3, [pc, #44]	@ (8000f80 <LCD_IO_WriteData8+0x50>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	2008      	movs	r0, #8
 8000f5a:	f7ff fedd 	bl	8000d18 <LCD_IO_Delay>
 8000f5e:	4b08      	ldr	r3, [pc, #32]	@ (8000f80 <LCD_IO_WriteData8+0x50>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 8000f64:	4b03      	ldr	r3, [pc, #12]	@ (8000f74 <LCD_IO_WriteData8+0x44>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	601a      	str	r2, [r3, #0]
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	424102b4 	.word	0x424102b4
 8000f78:	20000088 	.word	0x20000088
 8000f7c:	40020400 	.word	0x40020400
 8000f80:	424102bc 	.word	0x424102bc

08000f84 <LCD_IO_WriteData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	80fb      	strh	r3, [r7, #6]
  LCD_CS_ON;
 8000f8e:	4b19      	ldr	r3, [pc, #100]	@ (8000ff4 <LCD_IO_WriteData16+0x70>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
  LCD_DATA16_WRITE(Data);
 8000f94:	88fb      	ldrh	r3, [r7, #6]
 8000f96:	0a1b      	lsrs	r3, r3, #8
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	4b16      	ldr	r3, [pc, #88]	@ (8000ff8 <LCD_IO_WriteData16+0x74>)
 8000f9e:	701a      	strb	r2, [r3, #0]
 8000fa0:	4b15      	ldr	r3, [pc, #84]	@ (8000ff8 <LCD_IO_WriteData16+0x74>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8000fa8:	4b14      	ldr	r3, [pc, #80]	@ (8000ffc <LCD_IO_WriteData16+0x78>)
 8000faa:	619a      	str	r2, [r3, #24]
 8000fac:	4b14      	ldr	r3, [pc, #80]	@ (8001000 <LCD_IO_WriteData16+0x7c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	2008      	movs	r0, #8
 8000fb4:	f7ff feb0 	bl	8000d18 <LCD_IO_Delay>
 8000fb8:	4b11      	ldr	r3, [pc, #68]	@ (8001000 <LCD_IO_WriteData16+0x7c>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	88fb      	ldrh	r3, [r7, #6]
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff8 <LCD_IO_WriteData16+0x74>)
 8000fc4:	701a      	strb	r2, [r3, #0]
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff8 <LCD_IO_WriteData16+0x74>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8000fce:	4b0b      	ldr	r3, [pc, #44]	@ (8000ffc <LCD_IO_WriteData16+0x78>)
 8000fd0:	619a      	str	r2, [r3, #24]
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001000 <LCD_IO_WriteData16+0x7c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	2008      	movs	r0, #8
 8000fda:	f7ff fe9d 	bl	8000d18 <LCD_IO_Delay>
 8000fde:	4b08      	ldr	r3, [pc, #32]	@ (8001000 <LCD_IO_WriteData16+0x7c>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 8000fe4:	4b03      	ldr	r3, [pc, #12]	@ (8000ff4 <LCD_IO_WriteData16+0x70>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	601a      	str	r2, [r3, #0]
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	424102b4 	.word	0x424102b4
 8000ff8:	20000088 	.word	0x20000088
 8000ffc:	40020400 	.word	0x40020400
 8001000:	424102bc 	.word	0x424102bc

08001004 <LCD_IO_WriteCmd8DataFill16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	603a      	str	r2, [r7, #0]
 800100e:	71fb      	strb	r3, [r7, #7]
 8001010:	460b      	mov	r3, r1
 8001012:	80bb      	strh	r3, [r7, #4]
  LCD_CS_ON;
 8001014:	4b27      	ldr	r3, [pc, #156]	@ (80010b4 <LCD_IO_WriteCmd8DataFill16+0xb0>)
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
  LCD_CMD8_WRITE(Cmd);
 800101a:	4b27      	ldr	r3, [pc, #156]	@ (80010b8 <LCD_IO_WriteCmd8DataFill16+0xb4>)
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	4a26      	ldr	r2, [pc, #152]	@ (80010bc <LCD_IO_WriteCmd8DataFill16+0xb8>)
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	7013      	strb	r3, [r2, #0]
 8001026:	4b25      	ldr	r3, [pc, #148]	@ (80010bc <LCD_IO_WriteCmd8DataFill16+0xb8>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 800102e:	4b24      	ldr	r3, [pc, #144]	@ (80010c0 <LCD_IO_WriteCmd8DataFill16+0xbc>)
 8001030:	619a      	str	r2, [r3, #24]
 8001032:	4b24      	ldr	r3, [pc, #144]	@ (80010c4 <LCD_IO_WriteCmd8DataFill16+0xc0>)
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	2008      	movs	r0, #8
 800103a:	f7ff fe6d 	bl	8000d18 <LCD_IO_Delay>
 800103e:	4b21      	ldr	r3, [pc, #132]	@ (80010c4 <LCD_IO_WriteCmd8DataFill16+0xc0>)
 8001040:	2201      	movs	r2, #1
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	4b1c      	ldr	r3, [pc, #112]	@ (80010b8 <LCD_IO_WriteCmd8DataFill16+0xb4>)
 8001046:	2201      	movs	r2, #1
 8001048:	601a      	str	r2, [r3, #0]
  while(Size--)
 800104a:	e027      	b.n	800109c <LCD_IO_WriteCmd8DataFill16+0x98>
  {
    LCD_DATA16_WRITE(Data);
 800104c:	88bb      	ldrh	r3, [r7, #4]
 800104e:	0a1b      	lsrs	r3, r3, #8
 8001050:	b29b      	uxth	r3, r3
 8001052:	b2da      	uxtb	r2, r3
 8001054:	4b19      	ldr	r3, [pc, #100]	@ (80010bc <LCD_IO_WriteCmd8DataFill16+0xb8>)
 8001056:	701a      	strb	r2, [r3, #0]
 8001058:	4b18      	ldr	r3, [pc, #96]	@ (80010bc <LCD_IO_WriteCmd8DataFill16+0xb8>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8001060:	4b17      	ldr	r3, [pc, #92]	@ (80010c0 <LCD_IO_WriteCmd8DataFill16+0xbc>)
 8001062:	619a      	str	r2, [r3, #24]
 8001064:	4b17      	ldr	r3, [pc, #92]	@ (80010c4 <LCD_IO_WriteCmd8DataFill16+0xc0>)
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	2008      	movs	r0, #8
 800106c:	f7ff fe54 	bl	8000d18 <LCD_IO_Delay>
 8001070:	4b14      	ldr	r3, [pc, #80]	@ (80010c4 <LCD_IO_WriteCmd8DataFill16+0xc0>)
 8001072:	2201      	movs	r2, #1
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	88bb      	ldrh	r3, [r7, #4]
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4b10      	ldr	r3, [pc, #64]	@ (80010bc <LCD_IO_WriteCmd8DataFill16+0xb8>)
 800107c:	701a      	strb	r2, [r3, #0]
 800107e:	4b0f      	ldr	r3, [pc, #60]	@ (80010bc <LCD_IO_WriteCmd8DataFill16+0xb8>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8001086:	4b0e      	ldr	r3, [pc, #56]	@ (80010c0 <LCD_IO_WriteCmd8DataFill16+0xbc>)
 8001088:	619a      	str	r2, [r3, #24]
 800108a:	4b0e      	ldr	r3, [pc, #56]	@ (80010c4 <LCD_IO_WriteCmd8DataFill16+0xc0>)
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	2008      	movs	r0, #8
 8001092:	f7ff fe41 	bl	8000d18 <LCD_IO_Delay>
 8001096:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <LCD_IO_WriteCmd8DataFill16+0xc0>)
 8001098:	2201      	movs	r2, #1
 800109a:	601a      	str	r2, [r3, #0]
  while(Size--)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	1e5a      	subs	r2, r3, #1
 80010a0:	603a      	str	r2, [r7, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d1d2      	bne.n	800104c <LCD_IO_WriteCmd8DataFill16+0x48>
  }
  LCD_CS_OFF;
 80010a6:	4b03      	ldr	r3, [pc, #12]	@ (80010b4 <LCD_IO_WriteCmd8DataFill16+0xb0>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	601a      	str	r2, [r3, #0]
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	424102b4 	.word	0x424102b4
 80010b8:	424102b8 	.word	0x424102b8
 80010bc:	20000088 	.word	0x20000088
 80010c0:	40020400 	.word	0x40020400
 80010c4:	424102bc 	.word	0x424102bc

080010c8 <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	73fb      	strb	r3, [r7, #15]
  LCD_CS_ON;
 80010d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001154 <LCD_IO_WriteCmd8MultipleData8+0x8c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
  LCD_CMD8_WRITE(Cmd);
 80010dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001158 <LCD_IO_WriteCmd8MultipleData8+0x90>)
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	4a1e      	ldr	r2, [pc, #120]	@ (800115c <LCD_IO_WriteCmd8MultipleData8+0x94>)
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	7013      	strb	r3, [r2, #0]
 80010e8:	4b1c      	ldr	r3, [pc, #112]	@ (800115c <LCD_IO_WriteCmd8MultipleData8+0x94>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 80010f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001160 <LCD_IO_WriteCmd8MultipleData8+0x98>)
 80010f2:	619a      	str	r2, [r3, #24]
 80010f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001164 <LCD_IO_WriteCmd8MultipleData8+0x9c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	2008      	movs	r0, #8
 80010fc:	f7ff fe0c 	bl	8000d18 <LCD_IO_Delay>
 8001100:	4b18      	ldr	r3, [pc, #96]	@ (8001164 <LCD_IO_WriteCmd8MultipleData8+0x9c>)
 8001102:	2201      	movs	r2, #1
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	4b14      	ldr	r3, [pc, #80]	@ (8001158 <LCD_IO_WriteCmd8MultipleData8+0x90>)
 8001108:	2201      	movs	r2, #1
 800110a:	601a      	str	r2, [r3, #0]

  while(Size--)
 800110c:	e015      	b.n	800113a <LCD_IO_WriteCmd8MultipleData8+0x72>
  {
    LCD_DATA8_WRITE(*pData);
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	781a      	ldrb	r2, [r3, #0]
 8001112:	4b12      	ldr	r3, [pc, #72]	@ (800115c <LCD_IO_WriteCmd8MultipleData8+0x94>)
 8001114:	701a      	strb	r2, [r3, #0]
 8001116:	4b11      	ldr	r3, [pc, #68]	@ (800115c <LCD_IO_WriteCmd8MultipleData8+0x94>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 800111e:	4b10      	ldr	r3, [pc, #64]	@ (8001160 <LCD_IO_WriteCmd8MultipleData8+0x98>)
 8001120:	619a      	str	r2, [r3, #24]
 8001122:	4b10      	ldr	r3, [pc, #64]	@ (8001164 <LCD_IO_WriteCmd8MultipleData8+0x9c>)
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	2008      	movs	r0, #8
 800112a:	f7ff fdf5 	bl	8000d18 <LCD_IO_Delay>
 800112e:	4b0d      	ldr	r3, [pc, #52]	@ (8001164 <LCD_IO_WriteCmd8MultipleData8+0x9c>)
 8001130:	2201      	movs	r2, #1
 8001132:	601a      	str	r2, [r3, #0]
    pData ++;
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	3301      	adds	r3, #1
 8001138:	60bb      	str	r3, [r7, #8]
  while(Size--)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	1e5a      	subs	r2, r3, #1
 800113e:	607a      	str	r2, [r7, #4]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1e4      	bne.n	800110e <LCD_IO_WriteCmd8MultipleData8+0x46>
  }
  LCD_CS_OFF;
 8001144:	4b03      	ldr	r3, [pc, #12]	@ (8001154 <LCD_IO_WriteCmd8MultipleData8+0x8c>)
 8001146:	2201      	movs	r2, #1
 8001148:	601a      	str	r2, [r3, #0]
}
 800114a:	bf00      	nop
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	424102b4 	.word	0x424102b4
 8001158:	424102b8 	.word	0x424102b8
 800115c:	20000088 	.word	0x20000088
 8001160:	40020400 	.word	0x40020400
 8001164:	424102bc 	.word	0x424102bc

08001168 <LCD_IO_WriteCmd8MultipleData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
 8001174:	73fb      	strb	r3, [r7, #15]
  LCD_CS_ON;
 8001176:	4b2a      	ldr	r3, [pc, #168]	@ (8001220 <LCD_IO_WriteCmd8MultipleData16+0xb8>)
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
  LCD_CMD8_WRITE(Cmd);
 800117c:	4b29      	ldr	r3, [pc, #164]	@ (8001224 <LCD_IO_WriteCmd8MultipleData16+0xbc>)
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	4a29      	ldr	r2, [pc, #164]	@ (8001228 <LCD_IO_WriteCmd8MultipleData16+0xc0>)
 8001184:	7bfb      	ldrb	r3, [r7, #15]
 8001186:	7013      	strb	r3, [r2, #0]
 8001188:	4b27      	ldr	r3, [pc, #156]	@ (8001228 <LCD_IO_WriteCmd8MultipleData16+0xc0>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8001190:	4b26      	ldr	r3, [pc, #152]	@ (800122c <LCD_IO_WriteCmd8MultipleData16+0xc4>)
 8001192:	619a      	str	r2, [r3, #24]
 8001194:	4b26      	ldr	r3, [pc, #152]	@ (8001230 <LCD_IO_WriteCmd8MultipleData16+0xc8>)
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	2008      	movs	r0, #8
 800119c:	f7ff fdbc 	bl	8000d18 <LCD_IO_Delay>
 80011a0:	4b23      	ldr	r3, [pc, #140]	@ (8001230 <LCD_IO_WriteCmd8MultipleData16+0xc8>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001224 <LCD_IO_WriteCmd8MultipleData16+0xbc>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	601a      	str	r2, [r3, #0]
  while(Size--)
 80011ac:	e02c      	b.n	8001208 <LCD_IO_WriteCmd8MultipleData16+0xa0>
  {
    LCD_DATA16_WRITE(*pData);
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	881b      	ldrh	r3, [r3, #0]
 80011b2:	0a1b      	lsrs	r3, r3, #8
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001228 <LCD_IO_WriteCmd8MultipleData16+0xc0>)
 80011ba:	701a      	strb	r2, [r3, #0]
 80011bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001228 <LCD_IO_WriteCmd8MultipleData16+0xc0>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 80011c4:	4b19      	ldr	r3, [pc, #100]	@ (800122c <LCD_IO_WriteCmd8MultipleData16+0xc4>)
 80011c6:	619a      	str	r2, [r3, #24]
 80011c8:	4b19      	ldr	r3, [pc, #100]	@ (8001230 <LCD_IO_WriteCmd8MultipleData16+0xc8>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	2008      	movs	r0, #8
 80011d0:	f7ff fda2 	bl	8000d18 <LCD_IO_Delay>
 80011d4:	4b16      	ldr	r3, [pc, #88]	@ (8001230 <LCD_IO_WriteCmd8MultipleData16+0xc8>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	881b      	ldrh	r3, [r3, #0]
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	4b11      	ldr	r3, [pc, #68]	@ (8001228 <LCD_IO_WriteCmd8MultipleData16+0xc0>)
 80011e2:	701a      	strb	r2, [r3, #0]
 80011e4:	4b10      	ldr	r3, [pc, #64]	@ (8001228 <LCD_IO_WriteCmd8MultipleData16+0xc0>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 80011ec:	4b0f      	ldr	r3, [pc, #60]	@ (800122c <LCD_IO_WriteCmd8MultipleData16+0xc4>)
 80011ee:	619a      	str	r2, [r3, #24]
 80011f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001230 <LCD_IO_WriteCmd8MultipleData16+0xc8>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	2008      	movs	r0, #8
 80011f8:	f7ff fd8e 	bl	8000d18 <LCD_IO_Delay>
 80011fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001230 <LCD_IO_WriteCmd8MultipleData16+0xc8>)
 80011fe:	2201      	movs	r2, #1
 8001200:	601a      	str	r2, [r3, #0]
    pData ++;
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	3302      	adds	r3, #2
 8001206:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	1e5a      	subs	r2, r3, #1
 800120c:	607a      	str	r2, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1cd      	bne.n	80011ae <LCD_IO_WriteCmd8MultipleData16+0x46>
  }
  LCD_CS_OFF;
 8001212:	4b03      	ldr	r3, [pc, #12]	@ (8001220 <LCD_IO_WriteCmd8MultipleData16+0xb8>)
 8001214:	2201      	movs	r2, #1
 8001216:	601a      	str	r2, [r3, #0]
}
 8001218:	bf00      	nop
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	424102b4 	.word	0x424102b4
 8001224:	424102b8 	.word	0x424102b8
 8001228:	20000088 	.word	0x20000088
 800122c:	40020400 	.word	0x40020400
 8001230:	424102bc 	.word	0x424102bc

08001234 <LCD_IO_ReadCmd8MultipleData8>:
}

//-----------------------------------------------------------------------------
#if GPIOX_PORTNUM(LCD_RD) >= GPIOX_PORTNUM_A
void LCD_IO_ReadCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size, uint32_t DummySize)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	60b9      	str	r1, [r7, #8]
 800123c:	607a      	str	r2, [r7, #4]
 800123e:	603b      	str	r3, [r7, #0]
 8001240:	4603      	mov	r3, r0
 8001242:	73fb      	strb	r3, [r7, #15]
  uint8_t  d;
  LCD_CS_ON;
 8001244:	4b2c      	ldr	r3, [pc, #176]	@ (80012f8 <LCD_IO_ReadCmd8MultipleData8+0xc4>)
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
  LCD_CMD8_WRITE(Cmd);
 800124a:	4b2c      	ldr	r3, [pc, #176]	@ (80012fc <LCD_IO_ReadCmd8MultipleData8+0xc8>)
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	4a2b      	ldr	r2, [pc, #172]	@ (8001300 <LCD_IO_ReadCmd8MultipleData8+0xcc>)
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	7013      	strb	r3, [r2, #0]
 8001256:	4b2a      	ldr	r3, [pc, #168]	@ (8001300 <LCD_IO_ReadCmd8MultipleData8+0xcc>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 800125e:	4b29      	ldr	r3, [pc, #164]	@ (8001304 <LCD_IO_ReadCmd8MultipleData8+0xd0>)
 8001260:	619a      	str	r2, [r3, #24]
 8001262:	4b29      	ldr	r3, [pc, #164]	@ (8001308 <LCD_IO_ReadCmd8MultipleData8+0xd4>)
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	2008      	movs	r0, #8
 800126a:	f7ff fd55 	bl	8000d18 <LCD_IO_Delay>
 800126e:	4b26      	ldr	r3, [pc, #152]	@ (8001308 <LCD_IO_ReadCmd8MultipleData8+0xd4>)
 8001270:	2201      	movs	r2, #1
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	4b21      	ldr	r3, [pc, #132]	@ (80012fc <LCD_IO_ReadCmd8MultipleData8+0xc8>)
 8001276:	2201      	movs	r2, #1
 8001278:	601a      	str	r2, [r3, #0]
  LCD_DIRREAD;
 800127a:	4b22      	ldr	r3, [pc, #136]	@ (8001304 <LCD_IO_ReadCmd8MultipleData8+0xd0>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a21      	ldr	r2, [pc, #132]	@ (8001304 <LCD_IO_ReadCmd8MultipleData8+0xd0>)
 8001280:	0c1b      	lsrs	r3, r3, #16
 8001282:	041b      	lsls	r3, r3, #16
 8001284:	6013      	str	r3, [r2, #0]
  while(DummySize--)
 8001286:	e008      	b.n	800129a <LCD_IO_ReadCmd8MultipleData8+0x66>
    LCD_DUMMY_READ;
 8001288:	4b20      	ldr	r3, [pc, #128]	@ (800130c <LCD_IO_ReadCmd8MultipleData8+0xd8>)
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	2012      	movs	r0, #18
 8001290:	f7ff fd42 	bl	8000d18 <LCD_IO_Delay>
 8001294:	4b1d      	ldr	r3, [pc, #116]	@ (800130c <LCD_IO_ReadCmd8MultipleData8+0xd8>)
 8001296:	2201      	movs	r2, #1
 8001298:	601a      	str	r2, [r3, #0]
  while(DummySize--)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	1e5a      	subs	r2, r3, #1
 800129e:	603a      	str	r2, [r7, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1f1      	bne.n	8001288 <LCD_IO_ReadCmd8MultipleData8+0x54>
  while(Size--)
 80012a4:	e011      	b.n	80012ca <LCD_IO_ReadCmd8MultipleData8+0x96>
  {
    LCD_DATA8_READ(d);
 80012a6:	4b19      	ldr	r3, [pc, #100]	@ (800130c <LCD_IO_ReadCmd8MultipleData8+0xd8>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	2012      	movs	r0, #18
 80012ae:	f7ff fd33 	bl	8000d18 <LCD_IO_Delay>
 80012b2:	4b14      	ldr	r3, [pc, #80]	@ (8001304 <LCD_IO_ReadCmd8MultipleData8+0xd0>)
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	75fb      	strb	r3, [r7, #23]
 80012b8:	4b14      	ldr	r3, [pc, #80]	@ (800130c <LCD_IO_ReadCmd8MultipleData8+0xd8>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	601a      	str	r2, [r3, #0]
    *pData = d;
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	7dfa      	ldrb	r2, [r7, #23]
 80012c2:	701a      	strb	r2, [r3, #0]
    pData++;
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	3301      	adds	r3, #1
 80012c8:	60bb      	str	r3, [r7, #8]
  while(Size--)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	1e5a      	subs	r2, r3, #1
 80012ce:	607a      	str	r2, [r7, #4]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1e8      	bne.n	80012a6 <LCD_IO_ReadCmd8MultipleData8+0x72>
  }
  LCD_CS_OFF;
 80012d4:	4b08      	ldr	r3, [pc, #32]	@ (80012f8 <LCD_IO_ReadCmd8MultipleData8+0xc4>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	601a      	str	r2, [r3, #0]
  LCD_DIRWRITE;
 80012da:	4b0a      	ldr	r3, [pc, #40]	@ (8001304 <LCD_IO_ReadCmd8MultipleData8+0xd0>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	0c1b      	lsrs	r3, r3, #16
 80012e0:	041b      	lsls	r3, r3, #16
 80012e2:	4a08      	ldr	r2, [pc, #32]	@ (8001304 <LCD_IO_ReadCmd8MultipleData8+0xd0>)
 80012e4:	f443 43aa 	orr.w	r3, r3, #21760	@ 0x5500
 80012e8:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 80012ec:	6013      	str	r3, [r2, #0]
}
 80012ee:	bf00      	nop
 80012f0:	3718      	adds	r7, #24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	424102b4 	.word	0x424102b4
 80012fc:	424102b8 	.word	0x424102b8
 8001300:	20000088 	.word	0x20000088
 8001304:	40020400 	.word	0x40020400
 8001308:	424102bc 	.word	0x424102bc
 800130c:	424082a8 	.word	0x424082a8

08001310 <LCD_IO_ReadCmd8MultipleData24to16>:
  LCD_DIRWRITE;
}

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd8MultipleData24to16(uint8_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
 800131a:	603b      	str	r3, [r7, #0]
 800131c:	4603      	mov	r3, r0
 800131e:	73fb      	strb	r3, [r7, #15]
  uint8_t  rgb888[3];
  LCD_CS_ON;
 8001320:	4b44      	ldr	r3, [pc, #272]	@ (8001434 <LCD_IO_ReadCmd8MultipleData24to16+0x124>)
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
  LCD_CMD8_WRITE(Cmd);
 8001326:	4b44      	ldr	r3, [pc, #272]	@ (8001438 <LCD_IO_ReadCmd8MultipleData24to16+0x128>)
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	4a43      	ldr	r2, [pc, #268]	@ (800143c <LCD_IO_ReadCmd8MultipleData24to16+0x12c>)
 800132e:	7bfb      	ldrb	r3, [r7, #15]
 8001330:	7013      	strb	r3, [r2, #0]
 8001332:	4b42      	ldr	r3, [pc, #264]	@ (800143c <LCD_IO_ReadCmd8MultipleData24to16+0x12c>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 800133a:	4b41      	ldr	r3, [pc, #260]	@ (8001440 <LCD_IO_ReadCmd8MultipleData24to16+0x130>)
 800133c:	619a      	str	r2, [r3, #24]
 800133e:	4b41      	ldr	r3, [pc, #260]	@ (8001444 <LCD_IO_ReadCmd8MultipleData24to16+0x134>)
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	2008      	movs	r0, #8
 8001346:	f7ff fce7 	bl	8000d18 <LCD_IO_Delay>
 800134a:	4b3e      	ldr	r3, [pc, #248]	@ (8001444 <LCD_IO_ReadCmd8MultipleData24to16+0x134>)
 800134c:	2201      	movs	r2, #1
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	4b39      	ldr	r3, [pc, #228]	@ (8001438 <LCD_IO_ReadCmd8MultipleData24to16+0x128>)
 8001352:	2201      	movs	r2, #1
 8001354:	601a      	str	r2, [r3, #0]
  LCD_DIRREAD;
 8001356:	4b3a      	ldr	r3, [pc, #232]	@ (8001440 <LCD_IO_ReadCmd8MultipleData24to16+0x130>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a39      	ldr	r2, [pc, #228]	@ (8001440 <LCD_IO_ReadCmd8MultipleData24to16+0x130>)
 800135c:	0c1b      	lsrs	r3, r3, #16
 800135e:	041b      	lsls	r3, r3, #16
 8001360:	6013      	str	r3, [r2, #0]
  while(DummySize--)
 8001362:	e008      	b.n	8001376 <LCD_IO_ReadCmd8MultipleData24to16+0x66>
    LCD_DUMMY_READ;
 8001364:	4b38      	ldr	r3, [pc, #224]	@ (8001448 <LCD_IO_ReadCmd8MultipleData24to16+0x138>)
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	2012      	movs	r0, #18
 800136c:	f7ff fcd4 	bl	8000d18 <LCD_IO_Delay>
 8001370:	4b35      	ldr	r3, [pc, #212]	@ (8001448 <LCD_IO_ReadCmd8MultipleData24to16+0x138>)
 8001372:	2201      	movs	r2, #1
 8001374:	601a      	str	r2, [r3, #0]
  while(DummySize--)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	1e5a      	subs	r2, r3, #1
 800137a:	603a      	str	r2, [r7, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1f1      	bne.n	8001364 <LCD_IO_ReadCmd8MultipleData24to16+0x54>
  while(Size--)
 8001380:	e042      	b.n	8001408 <LCD_IO_ReadCmd8MultipleData24to16+0xf8>
  {
    LCD_DATA8_READ(rgb888[0]);
 8001382:	4b31      	ldr	r3, [pc, #196]	@ (8001448 <LCD_IO_ReadCmd8MultipleData24to16+0x138>)
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	2012      	movs	r0, #18
 800138a:	f7ff fcc5 	bl	8000d18 <LCD_IO_Delay>
 800138e:	4b2c      	ldr	r3, [pc, #176]	@ (8001440 <LCD_IO_ReadCmd8MultipleData24to16+0x130>)
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	b2db      	uxtb	r3, r3
 8001394:	753b      	strb	r3, [r7, #20]
 8001396:	4b2c      	ldr	r3, [pc, #176]	@ (8001448 <LCD_IO_ReadCmd8MultipleData24to16+0x138>)
 8001398:	2201      	movs	r2, #1
 800139a:	601a      	str	r2, [r3, #0]
    LCD_DATA8_READ(rgb888[1]);
 800139c:	4b2a      	ldr	r3, [pc, #168]	@ (8001448 <LCD_IO_ReadCmd8MultipleData24to16+0x138>)
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	2012      	movs	r0, #18
 80013a4:	f7ff fcb8 	bl	8000d18 <LCD_IO_Delay>
 80013a8:	4b25      	ldr	r3, [pc, #148]	@ (8001440 <LCD_IO_ReadCmd8MultipleData24to16+0x130>)
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	757b      	strb	r3, [r7, #21]
 80013b0:	4b25      	ldr	r3, [pc, #148]	@ (8001448 <LCD_IO_ReadCmd8MultipleData24to16+0x138>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	601a      	str	r2, [r3, #0]
    LCD_DATA8_READ(rgb888[2]);
 80013b6:	4b24      	ldr	r3, [pc, #144]	@ (8001448 <LCD_IO_ReadCmd8MultipleData24to16+0x138>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	2012      	movs	r0, #18
 80013be:	f7ff fcab 	bl	8000d18 <LCD_IO_Delay>
 80013c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001440 <LCD_IO_ReadCmd8MultipleData24to16+0x130>)
 80013c4:	691b      	ldr	r3, [r3, #16]
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	75bb      	strb	r3, [r7, #22]
 80013ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001448 <LCD_IO_ReadCmd8MultipleData24to16+0x138>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	601a      	str	r2, [r3, #0]
    #if LCD_REVERSE16 == 0
    *pData = ((rgb888[0] & 0xF8) << 8 | (rgb888[1] & 0xFC) << 3 | rgb888[2] >> 3);
 80013d0:	7d3b      	ldrb	r3, [r7, #20]
 80013d2:	021b      	lsls	r3, r3, #8
 80013d4:	b21b      	sxth	r3, r3
 80013d6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80013da:	f023 0307 	bic.w	r3, r3, #7
 80013de:	b21a      	sxth	r2, r3
 80013e0:	7d7b      	ldrb	r3, [r7, #21]
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	b21b      	sxth	r3, r3
 80013e6:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80013ea:	b21b      	sxth	r3, r3
 80013ec:	4313      	orrs	r3, r2
 80013ee:	b21a      	sxth	r2, r3
 80013f0:	7dbb      	ldrb	r3, [r7, #22]
 80013f2:	08db      	lsrs	r3, r3, #3
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	b21b      	sxth	r3, r3
 80013f8:	4313      	orrs	r3, r2
 80013fa:	b21b      	sxth	r3, r3
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	801a      	strh	r2, [r3, #0]
    #else
    *pData = __REVSH((rgb888[0] & 0xF8) << 8 | (rgb888[1] & 0xFC) << 3 | rgb888[2] >> 3);
    #endif
    pData++;
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	3302      	adds	r3, #2
 8001406:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	1e5a      	subs	r2, r3, #1
 800140c:	607a      	str	r2, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1b7      	bne.n	8001382 <LCD_IO_ReadCmd8MultipleData24to16+0x72>
  }
  LCD_CS_OFF;
 8001412:	4b08      	ldr	r3, [pc, #32]	@ (8001434 <LCD_IO_ReadCmd8MultipleData24to16+0x124>)
 8001414:	2201      	movs	r2, #1
 8001416:	601a      	str	r2, [r3, #0]
  LCD_DIRWRITE;
 8001418:	4b09      	ldr	r3, [pc, #36]	@ (8001440 <LCD_IO_ReadCmd8MultipleData24to16+0x130>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	0c1b      	lsrs	r3, r3, #16
 800141e:	041b      	lsls	r3, r3, #16
 8001420:	4a07      	ldr	r2, [pc, #28]	@ (8001440 <LCD_IO_ReadCmd8MultipleData24to16+0x130>)
 8001422:	f443 43aa 	orr.w	r3, r3, #21760	@ 0x5500
 8001426:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 800142a:	6013      	str	r3, [r2, #0]
}
 800142c:	bf00      	nop
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	424102b4 	.word	0x424102b4
 8001438:	424102b8 	.word	0x424102b8
 800143c:	20000088 	.word	0x20000088
 8001440:	40020400 	.word	0x40020400
 8001444:	424102bc 	.word	0x424102bc
 8001448:	424082a8 	.word	0x424082a8

0800144c <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	71fb      	strb	r3, [r7, #7]

  /* LCD Init */   
  lcd_drv->Init();
 8001456:	4b0a      	ldr	r3, [pc, #40]	@ (8001480 <BSP_LCD_Init+0x34>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4798      	blx	r3
  
  /* Default value for draw propriety */
  DrawProp.BackColor = LCD_DEFAULT_BACKCOLOR;
 800145e:	4b09      	ldr	r3, [pc, #36]	@ (8001484 <BSP_LCD_Init+0x38>)
 8001460:	2200      	movs	r2, #0
 8001462:	605a      	str	r2, [r3, #4]
  DrawProp.TextColor = LCD_DEFAULT_TEXTCOLOR;
 8001464:	4b07      	ldr	r3, [pc, #28]	@ (8001484 <BSP_LCD_Init+0x38>)
 8001466:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800146a:	601a      	str	r2, [r3, #0]
  DrawProp.pFont     = &LCD_DEFAULT_FONT;
 800146c:	4b05      	ldr	r3, [pc, #20]	@ (8001484 <BSP_LCD_Init+0x38>)
 800146e:	4a06      	ldr	r2, [pc, #24]	@ (8001488 <BSP_LCD_Init+0x3c>)
 8001470:	609a      	str	r2, [r3, #8]
  /* Clear the LCD screen */
  #if LCD_INIT_CLEAR == 1
  BSP_LCD_Clear(LCD_DEFAULT_BACKCOLOR);
  #endif
  
  ret = LCD_OK;
 8001472:	2300      	movs	r3, #0
 8001474:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8001476:	79fb      	ldrb	r3, [r7, #7]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	2000004c 	.word	0x2000004c
 8001484:	2000008c 	.word	0x2000008c
 8001488:	20000000 	.word	0x20000000

0800148c <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None    
  * @retval Used LCD X size
  */
uint16_t BSP_LCD_GetXSize(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 8001490:	4b03      	ldr	r3, [pc, #12]	@ (80014a0 <BSP_LCD_GetXSize+0x14>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001496:	4798      	blx	r3
 8001498:	4603      	mov	r3, r0
}
 800149a:	4618      	mov	r0, r3
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	2000004c 	.word	0x2000004c

080014a4 <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None   
  * @retval Used LCD Y size
  */
uint16_t BSP_LCD_GetYSize(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 80014a8:	4b03      	ldr	r3, [pc, #12]	@ (80014b8 <BSP_LCD_GetYSize+0x14>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ae:	4798      	blx	r3
 80014b0:	4603      	mov	r3, r0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	2000004c 	.word	0x2000004c

080014bc <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pBmp: Pointer to Bmp picture address
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pBmp)
{
 80014bc:	b590      	push	{r4, r7, lr}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	603a      	str	r2, [r7, #0]
 80014c6:	80fb      	strh	r3, [r7, #6]
 80014c8:	460b      	mov	r3, r1
 80014ca:	80bb      	strh	r3, [r7, #4]
  uint32_t height = 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60fb      	str	r3, [r7, #12]
  uint32_t width  = 0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60bb      	str	r3, [r7, #8]
  
  /* Read bitmap width */
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	3312      	adds	r3, #18
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	461a      	mov	r2, r3
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	3313      	adds	r3, #19
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	021b      	lsls	r3, r3, #8
 80014e4:	441a      	add	r2, r3
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	3314      	adds	r3, #20
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	041b      	lsls	r3, r3, #16
 80014ee:	441a      	add	r2, r3
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	3315      	adds	r3, #21
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	061b      	lsls	r3, r3, #24
 80014f8:	4413      	add	r3, r2
 80014fa:	60bb      	str	r3, [r7, #8]

  /* Read bitmap height */
  height = pBmp[22] + (pBmp[23] << 8) + (pBmp[24] << 16)  + (pBmp[25] << 24);
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	3316      	adds	r3, #22
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	461a      	mov	r2, r3
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	3317      	adds	r3, #23
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	021b      	lsls	r3, r3, #8
 800150c:	441a      	add	r2, r3
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	3318      	adds	r3, #24
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	041b      	lsls	r3, r3, #16
 8001516:	441a      	add	r2, r3
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	3319      	adds	r3, #25
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	061b      	lsls	r3, r3, #24
 8001520:	4413      	add	r3, r2
 8001522:	60fb      	str	r3, [r7, #12]
  
  SetDisplayWindow(Xpos, Ypos, width, height);
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	b29a      	uxth	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	b29b      	uxth	r3, r3
 800152c:	88b9      	ldrh	r1, [r7, #4]
 800152e:	88f8      	ldrh	r0, [r7, #6]
 8001530:	f000 f81e 	bl	8001570 <SetDisplayWindow>
  
  if(lcd_drv->DrawBitmap != NULL)
 8001534:	4b0d      	ldr	r3, [pc, #52]	@ (800156c <BSP_LCD_DrawBitmap+0xb0>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	2b00      	cmp	r3, #0
 800153c:	d006      	beq.n	800154c <BSP_LCD_DrawBitmap+0x90>
  {
    lcd_drv->DrawBitmap(Xpos, Ypos, pBmp);
 800153e:	4b0b      	ldr	r3, [pc, #44]	@ (800156c <BSP_LCD_DrawBitmap+0xb0>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001544:	88b9      	ldrh	r1, [r7, #4]
 8001546:	88f8      	ldrh	r0, [r7, #6]
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	4798      	blx	r3
  } 
  SetDisplayWindow(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 800154c:	f7ff ff9e 	bl	800148c <BSP_LCD_GetXSize>
 8001550:	4603      	mov	r3, r0
 8001552:	461c      	mov	r4, r3
 8001554:	f7ff ffa6 	bl	80014a4 <BSP_LCD_GetYSize>
 8001558:	4603      	mov	r3, r0
 800155a:	4622      	mov	r2, r4
 800155c:	2100      	movs	r1, #0
 800155e:	2000      	movs	r0, #0
 8001560:	f000 f806 	bl	8001570 <SetDisplayWindow>
}
 8001564:	bf00      	nop
 8001566:	3714      	adds	r7, #20
 8001568:	46bd      	mov	sp, r7
 800156a:	bd90      	pop	{r4, r7, pc}
 800156c:	2000004c 	.word	0x2000004c

08001570 <SetDisplayWindow>:
  * @param  Width: LCD window width
  * @param  Height: LCD window height  
  * @retval None
  */
static void SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	4604      	mov	r4, r0
 8001578:	4608      	mov	r0, r1
 800157a:	4611      	mov	r1, r2
 800157c:	461a      	mov	r2, r3
 800157e:	4623      	mov	r3, r4
 8001580:	80fb      	strh	r3, [r7, #6]
 8001582:	4603      	mov	r3, r0
 8001584:	80bb      	strh	r3, [r7, #4]
 8001586:	460b      	mov	r3, r1
 8001588:	807b      	strh	r3, [r7, #2]
 800158a:	4613      	mov	r3, r2
 800158c:	803b      	strh	r3, [r7, #0]
  if(lcd_drv->SetDisplayWindow != NULL)
 800158e:	4b08      	ldr	r3, [pc, #32]	@ (80015b0 <SetDisplayWindow+0x40>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	69db      	ldr	r3, [r3, #28]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d007      	beq.n	80015a8 <SetDisplayWindow+0x38>
  {
    lcd_drv->SetDisplayWindow(Xpos, Ypos, Width, Height);
 8001598:	4b05      	ldr	r3, [pc, #20]	@ (80015b0 <SetDisplayWindow+0x40>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	69dc      	ldr	r4, [r3, #28]
 800159e:	883b      	ldrh	r3, [r7, #0]
 80015a0:	887a      	ldrh	r2, [r7, #2]
 80015a2:	88b9      	ldrh	r1, [r7, #4]
 80015a4:	88f8      	ldrh	r0, [r7, #6]
 80015a6:	47a0      	blx	r4
  }  
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd90      	pop	{r4, r7, pc}
 80015b0:	2000004c 	.word	0x2000004c

080015b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015b8:	f000 f938 	bl	800182c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015bc:	f000 f80c 	bl	80015d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015c0:	f000 f872 	bl	80016a8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  BSP_LCD_Init();
 80015c4:	f7ff ff42 	bl	800144c <BSP_LCD_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //mainApp();
  while (1)
  {
	  BSP_LCD_DrawBitmap(0, 0, (uint8_t *)&testbitmap);
 80015c8:	4a02      	ldr	r2, [pc, #8]	@ (80015d4 <main+0x20>)
 80015ca:	2100      	movs	r1, #0
 80015cc:	2000      	movs	r0, #0
 80015ce:	f7ff ff75 	bl	80014bc <BSP_LCD_DrawBitmap>
 80015d2:	e7f9      	b.n	80015c8 <main+0x14>
 80015d4:	08002418 	.word	0x08002418

080015d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b094      	sub	sp, #80	@ 0x50
 80015dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015de:	f107 0320 	add.w	r3, r7, #32
 80015e2:	2230      	movs	r2, #48	@ 0x30
 80015e4:	2100      	movs	r1, #0
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 fec0 	bl	800236c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015ec:	f107 030c 	add.w	r3, r7, #12
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015fc:	2300      	movs	r3, #0
 80015fe:	60bb      	str	r3, [r7, #8]
 8001600:	4b27      	ldr	r3, [pc, #156]	@ (80016a0 <SystemClock_Config+0xc8>)
 8001602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001604:	4a26      	ldr	r2, [pc, #152]	@ (80016a0 <SystemClock_Config+0xc8>)
 8001606:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800160a:	6413      	str	r3, [r2, #64]	@ 0x40
 800160c:	4b24      	ldr	r3, [pc, #144]	@ (80016a0 <SystemClock_Config+0xc8>)
 800160e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001610:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001618:	2300      	movs	r3, #0
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	4b21      	ldr	r3, [pc, #132]	@ (80016a4 <SystemClock_Config+0xcc>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a20      	ldr	r2, [pc, #128]	@ (80016a4 <SystemClock_Config+0xcc>)
 8001622:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001626:	6013      	str	r3, [r2, #0]
 8001628:	4b1e      	ldr	r3, [pc, #120]	@ (80016a4 <SystemClock_Config+0xcc>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001634:	2302      	movs	r3, #2
 8001636:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001638:	2301      	movs	r3, #1
 800163a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800163c:	2310      	movs	r3, #16
 800163e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001640:	2302      	movs	r3, #2
 8001642:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001644:	2300      	movs	r3, #0
 8001646:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001648:	2308      	movs	r3, #8
 800164a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800164c:	2364      	movs	r3, #100	@ 0x64
 800164e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001650:	2302      	movs	r3, #2
 8001652:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001654:	2304      	movs	r3, #4
 8001656:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001658:	f107 0320 	add.w	r3, r7, #32
 800165c:	4618      	mov	r0, r3
 800165e:	f000 fa61 	bl	8001b24 <HAL_RCC_OscConfig>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001668:	f000 f846 	bl	80016f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800166c:	230f      	movs	r3, #15
 800166e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001670:	2302      	movs	r3, #2
 8001672:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001678:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800167c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800167e:	2300      	movs	r3, #0
 8001680:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001682:	f107 030c 	add.w	r3, r7, #12
 8001686:	2103      	movs	r1, #3
 8001688:	4618      	mov	r0, r3
 800168a:	f000 fcc3 	bl	8002014 <HAL_RCC_ClockConfig>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001694:	f000 f830 	bl	80016f8 <Error_Handler>
  }
}
 8001698:	bf00      	nop
 800169a:	3750      	adds	r7, #80	@ 0x50
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40007000 	.word	0x40007000

080016a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	607b      	str	r3, [r7, #4]
 80016b2:	4b10      	ldr	r3, [pc, #64]	@ (80016f4 <MX_GPIO_Init+0x4c>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	4a0f      	ldr	r2, [pc, #60]	@ (80016f4 <MX_GPIO_Init+0x4c>)
 80016b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016be:	4b0d      	ldr	r3, [pc, #52]	@ (80016f4 <MX_GPIO_Init+0x4c>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	603b      	str	r3, [r7, #0]
 80016ce:	4b09      	ldr	r3, [pc, #36]	@ (80016f4 <MX_GPIO_Init+0x4c>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d2:	4a08      	ldr	r2, [pc, #32]	@ (80016f4 <MX_GPIO_Init+0x4c>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016da:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <MX_GPIO_Init+0x4c>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	603b      	str	r3, [r7, #0]
 80016e4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	40023800 	.word	0x40023800

080016f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016fc:	b672      	cpsid	i
}
 80016fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001700:	bf00      	nop
 8001702:	e7fd      	b.n	8001700 <Error_Handler+0x8>

08001704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	607b      	str	r3, [r7, #4]
 800170e:	4b10      	ldr	r3, [pc, #64]	@ (8001750 <HAL_MspInit+0x4c>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001712:	4a0f      	ldr	r2, [pc, #60]	@ (8001750 <HAL_MspInit+0x4c>)
 8001714:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001718:	6453      	str	r3, [r2, #68]	@ 0x44
 800171a:	4b0d      	ldr	r3, [pc, #52]	@ (8001750 <HAL_MspInit+0x4c>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800171e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	603b      	str	r3, [r7, #0]
 800172a:	4b09      	ldr	r3, [pc, #36]	@ (8001750 <HAL_MspInit+0x4c>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172e:	4a08      	ldr	r2, [pc, #32]	@ (8001750 <HAL_MspInit+0x4c>)
 8001730:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001734:	6413      	str	r3, [r2, #64]	@ 0x40
 8001736:	4b06      	ldr	r3, [pc, #24]	@ (8001750 <HAL_MspInit+0x4c>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800173e:	603b      	str	r3, [r7, #0]
 8001740:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40023800 	.word	0x40023800

08001754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001758:	bf00      	nop
 800175a:	e7fd      	b.n	8001758 <NMI_Handler+0x4>

0800175c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <HardFault_Handler+0x4>

08001764 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001768:	bf00      	nop
 800176a:	e7fd      	b.n	8001768 <MemManage_Handler+0x4>

0800176c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001770:	bf00      	nop
 8001772:	e7fd      	b.n	8001770 <BusFault_Handler+0x4>

08001774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <UsageFault_Handler+0x4>

0800177c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017aa:	f000 f891 	bl	80018d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017b8:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <SystemInit+0x20>)
 80017ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017be:	4a05      	ldr	r2, [pc, #20]	@ (80017d4 <SystemInit+0x20>)
 80017c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001810 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017dc:	f7ff ffea 	bl	80017b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017e0:	480c      	ldr	r0, [pc, #48]	@ (8001814 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017e2:	490d      	ldr	r1, [pc, #52]	@ (8001818 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017e4:	4a0d      	ldr	r2, [pc, #52]	@ (800181c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e8:	e002      	b.n	80017f0 <LoopCopyDataInit>

080017ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ee:	3304      	adds	r3, #4

080017f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f4:	d3f9      	bcc.n	80017ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001820 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001824 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017fc:	e001      	b.n	8001802 <LoopFillZerobss>

080017fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001800:	3204      	adds	r2, #4

08001802 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001802:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001804:	d3fb      	bcc.n	80017fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001806:	f000 fdb9 	bl	800237c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800180a:	f7ff fed3 	bl	80015b4 <main>
  bx  lr    
 800180e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001810:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001814:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001818:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800181c:	08013748 	.word	0x08013748
  ldr r2, =_sbss
 8001820:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001824:	2000009c 	.word	0x2000009c

08001828 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001828:	e7fe      	b.n	8001828 <ADC_IRQHandler>
	...

0800182c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001830:	4b0e      	ldr	r3, [pc, #56]	@ (800186c <HAL_Init+0x40>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a0d      	ldr	r2, [pc, #52]	@ (800186c <HAL_Init+0x40>)
 8001836:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800183a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800183c:	4b0b      	ldr	r3, [pc, #44]	@ (800186c <HAL_Init+0x40>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a0a      	ldr	r2, [pc, #40]	@ (800186c <HAL_Init+0x40>)
 8001842:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001846:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001848:	4b08      	ldr	r3, [pc, #32]	@ (800186c <HAL_Init+0x40>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a07      	ldr	r2, [pc, #28]	@ (800186c <HAL_Init+0x40>)
 800184e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001852:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001854:	2003      	movs	r0, #3
 8001856:	f000 f931 	bl	8001abc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800185a:	200f      	movs	r0, #15
 800185c:	f000 f808 	bl	8001870 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001860:	f7ff ff50 	bl	8001704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40023c00 	.word	0x40023c00

08001870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001878:	4b12      	ldr	r3, [pc, #72]	@ (80018c4 <HAL_InitTick+0x54>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	4b12      	ldr	r3, [pc, #72]	@ (80018c8 <HAL_InitTick+0x58>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	4619      	mov	r1, r3
 8001882:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001886:	fbb3 f3f1 	udiv	r3, r3, r1
 800188a:	fbb2 f3f3 	udiv	r3, r2, r3
 800188e:	4618      	mov	r0, r3
 8001890:	f000 f93b 	bl	8001b0a <HAL_SYSTICK_Config>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e00e      	b.n	80018bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b0f      	cmp	r3, #15
 80018a2:	d80a      	bhi.n	80018ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a4:	2200      	movs	r2, #0
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ac:	f000 f911 	bl	8001ad2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018b0:	4a06      	ldr	r2, [pc, #24]	@ (80018cc <HAL_InitTick+0x5c>)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
 80018b8:	e000      	b.n	80018bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000050 	.word	0x20000050
 80018c8:	20000058 	.word	0x20000058
 80018cc:	20000054 	.word	0x20000054

080018d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018d4:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <HAL_IncTick+0x20>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <HAL_IncTick+0x24>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4413      	add	r3, r2
 80018e0:	4a04      	ldr	r2, [pc, #16]	@ (80018f4 <HAL_IncTick+0x24>)
 80018e2:	6013      	str	r3, [r2, #0]
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	20000058 	.word	0x20000058
 80018f4:	20000098 	.word	0x20000098

080018f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return uwTick;
 80018fc:	4b03      	ldr	r3, [pc, #12]	@ (800190c <HAL_GetTick+0x14>)
 80018fe:	681b      	ldr	r3, [r3, #0]
}
 8001900:	4618      	mov	r0, r3
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	20000098 	.word	0x20000098

08001910 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001918:	f7ff ffee 	bl	80018f8 <HAL_GetTick>
 800191c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001928:	d005      	beq.n	8001936 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800192a:	4b0a      	ldr	r3, [pc, #40]	@ (8001954 <HAL_Delay+0x44>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	461a      	mov	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4413      	add	r3, r2
 8001934:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001936:	bf00      	nop
 8001938:	f7ff ffde 	bl	80018f8 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	429a      	cmp	r2, r3
 8001946:	d8f7      	bhi.n	8001938 <HAL_Delay+0x28>
  {
  }
}
 8001948:	bf00      	nop
 800194a:	bf00      	nop
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000058 	.word	0x20000058

08001958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001968:	4b0c      	ldr	r3, [pc, #48]	@ (800199c <__NVIC_SetPriorityGrouping+0x44>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001974:	4013      	ands	r3, r2
 8001976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001980:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001984:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800198a:	4a04      	ldr	r2, [pc, #16]	@ (800199c <__NVIC_SetPriorityGrouping+0x44>)
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	60d3      	str	r3, [r2, #12]
}
 8001990:	bf00      	nop
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a4:	4b04      	ldr	r3, [pc, #16]	@ (80019b8 <__NVIC_GetPriorityGrouping+0x18>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	0a1b      	lsrs	r3, r3, #8
 80019aa:	f003 0307 	and.w	r3, r3, #7
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	6039      	str	r1, [r7, #0]
 80019c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	db0a      	blt.n	80019e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	490c      	ldr	r1, [pc, #48]	@ (8001a08 <__NVIC_SetPriority+0x4c>)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	0112      	lsls	r2, r2, #4
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	440b      	add	r3, r1
 80019e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019e4:	e00a      	b.n	80019fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	4908      	ldr	r1, [pc, #32]	@ (8001a0c <__NVIC_SetPriority+0x50>)
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	3b04      	subs	r3, #4
 80019f4:	0112      	lsls	r2, r2, #4
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	440b      	add	r3, r1
 80019fa:	761a      	strb	r2, [r3, #24]
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	e000e100 	.word	0xe000e100
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b089      	sub	sp, #36	@ 0x24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f1c3 0307 	rsb	r3, r3, #7
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	bf28      	it	cs
 8001a2e:	2304      	movcs	r3, #4
 8001a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3304      	adds	r3, #4
 8001a36:	2b06      	cmp	r3, #6
 8001a38:	d902      	bls.n	8001a40 <NVIC_EncodePriority+0x30>
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	3b03      	subs	r3, #3
 8001a3e:	e000      	b.n	8001a42 <NVIC_EncodePriority+0x32>
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a44:	f04f 32ff 	mov.w	r2, #4294967295
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43da      	mvns	r2, r3
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	401a      	ands	r2, r3
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a58:	f04f 31ff 	mov.w	r1, #4294967295
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a62:	43d9      	mvns	r1, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a68:	4313      	orrs	r3, r2
         );
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3724      	adds	r7, #36	@ 0x24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a88:	d301      	bcc.n	8001a8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e00f      	b.n	8001aae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab8 <SysTick_Config+0x40>)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a96:	210f      	movs	r1, #15
 8001a98:	f04f 30ff 	mov.w	r0, #4294967295
 8001a9c:	f7ff ff8e 	bl	80019bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa0:	4b05      	ldr	r3, [pc, #20]	@ (8001ab8 <SysTick_Config+0x40>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aa6:	4b04      	ldr	r3, [pc, #16]	@ (8001ab8 <SysTick_Config+0x40>)
 8001aa8:	2207      	movs	r2, #7
 8001aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	e000e010 	.word	0xe000e010

08001abc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff ff47 	bl	8001958 <__NVIC_SetPriorityGrouping>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b086      	sub	sp, #24
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	4603      	mov	r3, r0
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	607a      	str	r2, [r7, #4]
 8001ade:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ae4:	f7ff ff5c 	bl	80019a0 <__NVIC_GetPriorityGrouping>
 8001ae8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	68b9      	ldr	r1, [r7, #8]
 8001aee:	6978      	ldr	r0, [r7, #20]
 8001af0:	f7ff ff8e 	bl	8001a10 <NVIC_EncodePriority>
 8001af4:	4602      	mov	r2, r0
 8001af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001afa:	4611      	mov	r1, r2
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff5d 	bl	80019bc <__NVIC_SetPriority>
}
 8001b02:	bf00      	nop
 8001b04:	3718      	adds	r7, #24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff ffb0 	bl	8001a78 <SysTick_Config>
 8001b18:	4603      	mov	r3, r0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e267      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d075      	beq.n	8001c2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b42:	4b88      	ldr	r3, [pc, #544]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 030c 	and.w	r3, r3, #12
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	d00c      	beq.n	8001b68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b4e:	4b85      	ldr	r3, [pc, #532]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b56:	2b08      	cmp	r3, #8
 8001b58:	d112      	bne.n	8001b80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b5a:	4b82      	ldr	r3, [pc, #520]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b66:	d10b      	bne.n	8001b80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b68:	4b7e      	ldr	r3, [pc, #504]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d05b      	beq.n	8001c2c <HAL_RCC_OscConfig+0x108>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d157      	bne.n	8001c2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e242      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b88:	d106      	bne.n	8001b98 <HAL_RCC_OscConfig+0x74>
 8001b8a:	4b76      	ldr	r3, [pc, #472]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a75      	ldr	r2, [pc, #468]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001b90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	e01d      	b.n	8001bd4 <HAL_RCC_OscConfig+0xb0>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ba0:	d10c      	bne.n	8001bbc <HAL_RCC_OscConfig+0x98>
 8001ba2:	4b70      	ldr	r3, [pc, #448]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a6f      	ldr	r2, [pc, #444]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001ba8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	4b6d      	ldr	r3, [pc, #436]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a6c      	ldr	r2, [pc, #432]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001bb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	e00b      	b.n	8001bd4 <HAL_RCC_OscConfig+0xb0>
 8001bbc:	4b69      	ldr	r3, [pc, #420]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a68      	ldr	r2, [pc, #416]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001bc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bc6:	6013      	str	r3, [r2, #0]
 8001bc8:	4b66      	ldr	r3, [pc, #408]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a65      	ldr	r2, [pc, #404]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001bce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d013      	beq.n	8001c04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bdc:	f7ff fe8c 	bl	80018f8 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001be4:	f7ff fe88 	bl	80018f8 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b64      	cmp	r3, #100	@ 0x64
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e207      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf6:	4b5b      	ldr	r3, [pc, #364]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d0f0      	beq.n	8001be4 <HAL_RCC_OscConfig+0xc0>
 8001c02:	e014      	b.n	8001c2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c04:	f7ff fe78 	bl	80018f8 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c0c:	f7ff fe74 	bl	80018f8 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b64      	cmp	r3, #100	@ 0x64
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e1f3      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c1e:	4b51      	ldr	r3, [pc, #324]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f0      	bne.n	8001c0c <HAL_RCC_OscConfig+0xe8>
 8001c2a:	e000      	b.n	8001c2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d063      	beq.n	8001d02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c3a:	4b4a      	ldr	r3, [pc, #296]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 030c 	and.w	r3, r3, #12
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00b      	beq.n	8001c5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c46:	4b47      	ldr	r3, [pc, #284]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c4e:	2b08      	cmp	r3, #8
 8001c50:	d11c      	bne.n	8001c8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c52:	4b44      	ldr	r3, [pc, #272]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d116      	bne.n	8001c8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c5e:	4b41      	ldr	r3, [pc, #260]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d005      	beq.n	8001c76 <HAL_RCC_OscConfig+0x152>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d001      	beq.n	8001c76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e1c7      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c76:	4b3b      	ldr	r3, [pc, #236]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	4937      	ldr	r1, [pc, #220]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c8a:	e03a      	b.n	8001d02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d020      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c94:	4b34      	ldr	r3, [pc, #208]	@ (8001d68 <HAL_RCC_OscConfig+0x244>)
 8001c96:	2201      	movs	r2, #1
 8001c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9a:	f7ff fe2d 	bl	80018f8 <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ca2:	f7ff fe29 	bl	80018f8 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e1a8      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb4:	4b2b      	ldr	r3, [pc, #172]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0f0      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc0:	4b28      	ldr	r3, [pc, #160]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	4925      	ldr	r1, [pc, #148]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	600b      	str	r3, [r1, #0]
 8001cd4:	e015      	b.n	8001d02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cd6:	4b24      	ldr	r3, [pc, #144]	@ (8001d68 <HAL_RCC_OscConfig+0x244>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cdc:	f7ff fe0c 	bl	80018f8 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ce4:	f7ff fe08 	bl	80018f8 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e187      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cf6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1f0      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0308 	and.w	r3, r3, #8
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d036      	beq.n	8001d7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d016      	beq.n	8001d44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d16:	4b15      	ldr	r3, [pc, #84]	@ (8001d6c <HAL_RCC_OscConfig+0x248>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d1c:	f7ff fdec 	bl	80018f8 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d24:	f7ff fde8 	bl	80018f8 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e167      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d36:	4b0b      	ldr	r3, [pc, #44]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001d38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0f0      	beq.n	8001d24 <HAL_RCC_OscConfig+0x200>
 8001d42:	e01b      	b.n	8001d7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d44:	4b09      	ldr	r3, [pc, #36]	@ (8001d6c <HAL_RCC_OscConfig+0x248>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d4a:	f7ff fdd5 	bl	80018f8 <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d50:	e00e      	b.n	8001d70 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d52:	f7ff fdd1 	bl	80018f8 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d907      	bls.n	8001d70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e150      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
 8001d64:	40023800 	.word	0x40023800
 8001d68:	42470000 	.word	0x42470000
 8001d6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d70:	4b88      	ldr	r3, [pc, #544]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001d72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1ea      	bne.n	8001d52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f000 8097 	beq.w	8001eb8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d8e:	4b81      	ldr	r3, [pc, #516]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d10f      	bne.n	8001dba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	4b7d      	ldr	r3, [pc, #500]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da2:	4a7c      	ldr	r2, [pc, #496]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001da4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001da8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001daa:	4b7a      	ldr	r3, [pc, #488]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001db2:	60bb      	str	r3, [r7, #8]
 8001db4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001db6:	2301      	movs	r3, #1
 8001db8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dba:	4b77      	ldr	r3, [pc, #476]	@ (8001f98 <HAL_RCC_OscConfig+0x474>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d118      	bne.n	8001df8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dc6:	4b74      	ldr	r3, [pc, #464]	@ (8001f98 <HAL_RCC_OscConfig+0x474>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a73      	ldr	r2, [pc, #460]	@ (8001f98 <HAL_RCC_OscConfig+0x474>)
 8001dcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dd2:	f7ff fd91 	bl	80018f8 <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dda:	f7ff fd8d 	bl	80018f8 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e10c      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dec:	4b6a      	ldr	r3, [pc, #424]	@ (8001f98 <HAL_RCC_OscConfig+0x474>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0f0      	beq.n	8001dda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d106      	bne.n	8001e0e <HAL_RCC_OscConfig+0x2ea>
 8001e00:	4b64      	ldr	r3, [pc, #400]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001e02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e04:	4a63      	ldr	r2, [pc, #396]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001e06:	f043 0301 	orr.w	r3, r3, #1
 8001e0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e0c:	e01c      	b.n	8001e48 <HAL_RCC_OscConfig+0x324>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	2b05      	cmp	r3, #5
 8001e14:	d10c      	bne.n	8001e30 <HAL_RCC_OscConfig+0x30c>
 8001e16:	4b5f      	ldr	r3, [pc, #380]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e1a:	4a5e      	ldr	r2, [pc, #376]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001e1c:	f043 0304 	orr.w	r3, r3, #4
 8001e20:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e22:	4b5c      	ldr	r3, [pc, #368]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e26:	4a5b      	ldr	r2, [pc, #364]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e2e:	e00b      	b.n	8001e48 <HAL_RCC_OscConfig+0x324>
 8001e30:	4b58      	ldr	r3, [pc, #352]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001e32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e34:	4a57      	ldr	r2, [pc, #348]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001e36:	f023 0301 	bic.w	r3, r3, #1
 8001e3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e3c:	4b55      	ldr	r3, [pc, #340]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001e3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e40:	4a54      	ldr	r2, [pc, #336]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001e42:	f023 0304 	bic.w	r3, r3, #4
 8001e46:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d015      	beq.n	8001e7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e50:	f7ff fd52 	bl	80018f8 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e56:	e00a      	b.n	8001e6e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e58:	f7ff fd4e 	bl	80018f8 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e0cb      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e6e:	4b49      	ldr	r3, [pc, #292]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001e70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0ee      	beq.n	8001e58 <HAL_RCC_OscConfig+0x334>
 8001e7a:	e014      	b.n	8001ea6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7c:	f7ff fd3c 	bl	80018f8 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e82:	e00a      	b.n	8001e9a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e84:	f7ff fd38 	bl	80018f8 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e0b5      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e9a:	4b3e      	ldr	r3, [pc, #248]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1ee      	bne.n	8001e84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ea6:	7dfb      	ldrb	r3, [r7, #23]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d105      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eac:	4b39      	ldr	r3, [pc, #228]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb0:	4a38      	ldr	r2, [pc, #224]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001eb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001eb6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f000 80a1 	beq.w	8002004 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ec2:	4b34      	ldr	r3, [pc, #208]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f003 030c 	and.w	r3, r3, #12
 8001eca:	2b08      	cmp	r3, #8
 8001ecc:	d05c      	beq.n	8001f88 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d141      	bne.n	8001f5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed6:	4b31      	ldr	r3, [pc, #196]	@ (8001f9c <HAL_RCC_OscConfig+0x478>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001edc:	f7ff fd0c 	bl	80018f8 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ee4:	f7ff fd08 	bl	80018f8 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e087      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ef6:	4b27      	ldr	r3, [pc, #156]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f0      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69da      	ldr	r2, [r3, #28]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f10:	019b      	lsls	r3, r3, #6
 8001f12:	431a      	orrs	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f18:	085b      	lsrs	r3, r3, #1
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	041b      	lsls	r3, r3, #16
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f24:	061b      	lsls	r3, r3, #24
 8001f26:	491b      	ldr	r1, [pc, #108]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001f9c <HAL_RCC_OscConfig+0x478>)
 8001f2e:	2201      	movs	r2, #1
 8001f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f32:	f7ff fce1 	bl	80018f8 <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f3a:	f7ff fcdd 	bl	80018f8 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e05c      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f4c:	4b11      	ldr	r3, [pc, #68]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0f0      	beq.n	8001f3a <HAL_RCC_OscConfig+0x416>
 8001f58:	e054      	b.n	8002004 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f5a:	4b10      	ldr	r3, [pc, #64]	@ (8001f9c <HAL_RCC_OscConfig+0x478>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f60:	f7ff fcca 	bl	80018f8 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f68:	f7ff fcc6 	bl	80018f8 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e045      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f7a:	4b06      	ldr	r3, [pc, #24]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f0      	bne.n	8001f68 <HAL_RCC_OscConfig+0x444>
 8001f86:	e03d      	b.n	8002004 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d107      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e038      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40007000 	.word	0x40007000
 8001f9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fa0:	4b1b      	ldr	r3, [pc, #108]	@ (8002010 <HAL_RCC_OscConfig+0x4ec>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d028      	beq.n	8002000 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d121      	bne.n	8002000 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d11a      	bne.n	8002000 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001fd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d111      	bne.n	8002000 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe6:	085b      	lsrs	r3, r3, #1
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d107      	bne.n	8002000 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ffa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d001      	beq.n	8002004 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e000      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3718      	adds	r7, #24
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40023800 	.word	0x40023800

08002014 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e0cc      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002028:	4b68      	ldr	r3, [pc, #416]	@ (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0307 	and.w	r3, r3, #7
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	429a      	cmp	r2, r3
 8002034:	d90c      	bls.n	8002050 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002036:	4b65      	ldr	r3, [pc, #404]	@ (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800203e:	4b63      	ldr	r3, [pc, #396]	@ (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	429a      	cmp	r2, r3
 800204a:	d001      	beq.n	8002050 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e0b8      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d020      	beq.n	800209e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	2b00      	cmp	r3, #0
 8002066:	d005      	beq.n	8002074 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002068:	4b59      	ldr	r3, [pc, #356]	@ (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	4a58      	ldr	r2, [pc, #352]	@ (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 800206e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002072:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0308 	and.w	r3, r3, #8
 800207c:	2b00      	cmp	r3, #0
 800207e:	d005      	beq.n	800208c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002080:	4b53      	ldr	r3, [pc, #332]	@ (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	4a52      	ldr	r2, [pc, #328]	@ (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002086:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800208a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800208c:	4b50      	ldr	r3, [pc, #320]	@ (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	494d      	ldr	r1, [pc, #308]	@ (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 800209a:	4313      	orrs	r3, r2
 800209c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d044      	beq.n	8002134 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d107      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b2:	4b47      	ldr	r3, [pc, #284]	@ (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d119      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e07f      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d003      	beq.n	80020d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ce:	2b03      	cmp	r3, #3
 80020d0:	d107      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020d2:	4b3f      	ldr	r3, [pc, #252]	@ (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d109      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e06f      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e2:	4b3b      	ldr	r3, [pc, #236]	@ (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e067      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020f2:	4b37      	ldr	r3, [pc, #220]	@ (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f023 0203 	bic.w	r2, r3, #3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	4934      	ldr	r1, [pc, #208]	@ (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002100:	4313      	orrs	r3, r2
 8002102:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002104:	f7ff fbf8 	bl	80018f8 <HAL_GetTick>
 8002108:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800210a:	e00a      	b.n	8002122 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800210c:	f7ff fbf4 	bl	80018f8 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	f241 3288 	movw	r2, #5000	@ 0x1388
 800211a:	4293      	cmp	r3, r2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e04f      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002122:	4b2b      	ldr	r3, [pc, #172]	@ (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 020c 	and.w	r2, r3, #12
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	429a      	cmp	r2, r3
 8002132:	d1eb      	bne.n	800210c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002134:	4b25      	ldr	r3, [pc, #148]	@ (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	429a      	cmp	r2, r3
 8002140:	d20c      	bcs.n	800215c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002142:	4b22      	ldr	r3, [pc, #136]	@ (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800214a:	4b20      	ldr	r3, [pc, #128]	@ (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	429a      	cmp	r2, r3
 8002156:	d001      	beq.n	800215c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e032      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	2b00      	cmp	r3, #0
 8002166:	d008      	beq.n	800217a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002168:	4b19      	ldr	r3, [pc, #100]	@ (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	4916      	ldr	r1, [pc, #88]	@ (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002176:	4313      	orrs	r3, r2
 8002178:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0308 	and.w	r3, r3, #8
 8002182:	2b00      	cmp	r3, #0
 8002184:	d009      	beq.n	800219a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002186:	4b12      	ldr	r3, [pc, #72]	@ (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	490e      	ldr	r1, [pc, #56]	@ (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002196:	4313      	orrs	r3, r2
 8002198:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800219a:	f000 f821 	bl	80021e0 <HAL_RCC_GetSysClockFreq>
 800219e:	4602      	mov	r2, r0
 80021a0:	4b0b      	ldr	r3, [pc, #44]	@ (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	091b      	lsrs	r3, r3, #4
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	490a      	ldr	r1, [pc, #40]	@ (80021d4 <HAL_RCC_ClockConfig+0x1c0>)
 80021ac:	5ccb      	ldrb	r3, [r1, r3]
 80021ae:	fa22 f303 	lsr.w	r3, r2, r3
 80021b2:	4a09      	ldr	r2, [pc, #36]	@ (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 80021b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021b6:	4b09      	ldr	r3, [pc, #36]	@ (80021dc <HAL_RCC_ClockConfig+0x1c8>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff fb58 	bl	8001870 <HAL_InitTick>

  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40023c00 	.word	0x40023c00
 80021d0:	40023800 	.word	0x40023800
 80021d4:	08013728 	.word	0x08013728
 80021d8:	20000050 	.word	0x20000050
 80021dc:	20000054 	.word	0x20000054

080021e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021e4:	b090      	sub	sp, #64	@ 0x40
 80021e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021e8:	2300      	movs	r3, #0
 80021ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80021ec:	2300      	movs	r3, #0
 80021ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80021f0:	2300      	movs	r3, #0
 80021f2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021f8:	4b59      	ldr	r3, [pc, #356]	@ (8002360 <HAL_RCC_GetSysClockFreq+0x180>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f003 030c 	and.w	r3, r3, #12
 8002200:	2b08      	cmp	r3, #8
 8002202:	d00d      	beq.n	8002220 <HAL_RCC_GetSysClockFreq+0x40>
 8002204:	2b08      	cmp	r3, #8
 8002206:	f200 80a1 	bhi.w	800234c <HAL_RCC_GetSysClockFreq+0x16c>
 800220a:	2b00      	cmp	r3, #0
 800220c:	d002      	beq.n	8002214 <HAL_RCC_GetSysClockFreq+0x34>
 800220e:	2b04      	cmp	r3, #4
 8002210:	d003      	beq.n	800221a <HAL_RCC_GetSysClockFreq+0x3a>
 8002212:	e09b      	b.n	800234c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002214:	4b53      	ldr	r3, [pc, #332]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x184>)
 8002216:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002218:	e09b      	b.n	8002352 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800221a:	4b53      	ldr	r3, [pc, #332]	@ (8002368 <HAL_RCC_GetSysClockFreq+0x188>)
 800221c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800221e:	e098      	b.n	8002352 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002220:	4b4f      	ldr	r3, [pc, #316]	@ (8002360 <HAL_RCC_GetSysClockFreq+0x180>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002228:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800222a:	4b4d      	ldr	r3, [pc, #308]	@ (8002360 <HAL_RCC_GetSysClockFreq+0x180>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d028      	beq.n	8002288 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002236:	4b4a      	ldr	r3, [pc, #296]	@ (8002360 <HAL_RCC_GetSysClockFreq+0x180>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	099b      	lsrs	r3, r3, #6
 800223c:	2200      	movs	r2, #0
 800223e:	623b      	str	r3, [r7, #32]
 8002240:	627a      	str	r2, [r7, #36]	@ 0x24
 8002242:	6a3b      	ldr	r3, [r7, #32]
 8002244:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002248:	2100      	movs	r1, #0
 800224a:	4b47      	ldr	r3, [pc, #284]	@ (8002368 <HAL_RCC_GetSysClockFreq+0x188>)
 800224c:	fb03 f201 	mul.w	r2, r3, r1
 8002250:	2300      	movs	r3, #0
 8002252:	fb00 f303 	mul.w	r3, r0, r3
 8002256:	4413      	add	r3, r2
 8002258:	4a43      	ldr	r2, [pc, #268]	@ (8002368 <HAL_RCC_GetSysClockFreq+0x188>)
 800225a:	fba0 1202 	umull	r1, r2, r0, r2
 800225e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002260:	460a      	mov	r2, r1
 8002262:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002264:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002266:	4413      	add	r3, r2
 8002268:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800226a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800226c:	2200      	movs	r2, #0
 800226e:	61bb      	str	r3, [r7, #24]
 8002270:	61fa      	str	r2, [r7, #28]
 8002272:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002276:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800227a:	f7fd ffad 	bl	80001d8 <__aeabi_uldivmod>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	4613      	mov	r3, r2
 8002284:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002286:	e053      	b.n	8002330 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002288:	4b35      	ldr	r3, [pc, #212]	@ (8002360 <HAL_RCC_GetSysClockFreq+0x180>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	099b      	lsrs	r3, r3, #6
 800228e:	2200      	movs	r2, #0
 8002290:	613b      	str	r3, [r7, #16]
 8002292:	617a      	str	r2, [r7, #20]
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800229a:	f04f 0b00 	mov.w	fp, #0
 800229e:	4652      	mov	r2, sl
 80022a0:	465b      	mov	r3, fp
 80022a2:	f04f 0000 	mov.w	r0, #0
 80022a6:	f04f 0100 	mov.w	r1, #0
 80022aa:	0159      	lsls	r1, r3, #5
 80022ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022b0:	0150      	lsls	r0, r2, #5
 80022b2:	4602      	mov	r2, r0
 80022b4:	460b      	mov	r3, r1
 80022b6:	ebb2 080a 	subs.w	r8, r2, sl
 80022ba:	eb63 090b 	sbc.w	r9, r3, fp
 80022be:	f04f 0200 	mov.w	r2, #0
 80022c2:	f04f 0300 	mov.w	r3, #0
 80022c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80022ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80022ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80022d2:	ebb2 0408 	subs.w	r4, r2, r8
 80022d6:	eb63 0509 	sbc.w	r5, r3, r9
 80022da:	f04f 0200 	mov.w	r2, #0
 80022de:	f04f 0300 	mov.w	r3, #0
 80022e2:	00eb      	lsls	r3, r5, #3
 80022e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022e8:	00e2      	lsls	r2, r4, #3
 80022ea:	4614      	mov	r4, r2
 80022ec:	461d      	mov	r5, r3
 80022ee:	eb14 030a 	adds.w	r3, r4, sl
 80022f2:	603b      	str	r3, [r7, #0]
 80022f4:	eb45 030b 	adc.w	r3, r5, fp
 80022f8:	607b      	str	r3, [r7, #4]
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	f04f 0300 	mov.w	r3, #0
 8002302:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002306:	4629      	mov	r1, r5
 8002308:	028b      	lsls	r3, r1, #10
 800230a:	4621      	mov	r1, r4
 800230c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002310:	4621      	mov	r1, r4
 8002312:	028a      	lsls	r2, r1, #10
 8002314:	4610      	mov	r0, r2
 8002316:	4619      	mov	r1, r3
 8002318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800231a:	2200      	movs	r2, #0
 800231c:	60bb      	str	r3, [r7, #8]
 800231e:	60fa      	str	r2, [r7, #12]
 8002320:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002324:	f7fd ff58 	bl	80001d8 <__aeabi_uldivmod>
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	4613      	mov	r3, r2
 800232e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002330:	4b0b      	ldr	r3, [pc, #44]	@ (8002360 <HAL_RCC_GetSysClockFreq+0x180>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	0c1b      	lsrs	r3, r3, #16
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	3301      	adds	r3, #1
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002340:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002344:	fbb2 f3f3 	udiv	r3, r2, r3
 8002348:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800234a:	e002      	b.n	8002352 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800234c:	4b05      	ldr	r3, [pc, #20]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x184>)
 800234e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002350:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002354:	4618      	mov	r0, r3
 8002356:	3740      	adds	r7, #64	@ 0x40
 8002358:	46bd      	mov	sp, r7
 800235a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800235e:	bf00      	nop
 8002360:	40023800 	.word	0x40023800
 8002364:	00f42400 	.word	0x00f42400
 8002368:	017d7840 	.word	0x017d7840

0800236c <memset>:
 800236c:	4402      	add	r2, r0
 800236e:	4603      	mov	r3, r0
 8002370:	4293      	cmp	r3, r2
 8002372:	d100      	bne.n	8002376 <memset+0xa>
 8002374:	4770      	bx	lr
 8002376:	f803 1b01 	strb.w	r1, [r3], #1
 800237a:	e7f9      	b.n	8002370 <memset+0x4>

0800237c <__libc_init_array>:
 800237c:	b570      	push	{r4, r5, r6, lr}
 800237e:	4d0d      	ldr	r5, [pc, #52]	@ (80023b4 <__libc_init_array+0x38>)
 8002380:	4c0d      	ldr	r4, [pc, #52]	@ (80023b8 <__libc_init_array+0x3c>)
 8002382:	1b64      	subs	r4, r4, r5
 8002384:	10a4      	asrs	r4, r4, #2
 8002386:	2600      	movs	r6, #0
 8002388:	42a6      	cmp	r6, r4
 800238a:	d109      	bne.n	80023a0 <__libc_init_array+0x24>
 800238c:	4d0b      	ldr	r5, [pc, #44]	@ (80023bc <__libc_init_array+0x40>)
 800238e:	4c0c      	ldr	r4, [pc, #48]	@ (80023c0 <__libc_init_array+0x44>)
 8002390:	f000 f818 	bl	80023c4 <_init>
 8002394:	1b64      	subs	r4, r4, r5
 8002396:	10a4      	asrs	r4, r4, #2
 8002398:	2600      	movs	r6, #0
 800239a:	42a6      	cmp	r6, r4
 800239c:	d105      	bne.n	80023aa <__libc_init_array+0x2e>
 800239e:	bd70      	pop	{r4, r5, r6, pc}
 80023a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80023a4:	4798      	blx	r3
 80023a6:	3601      	adds	r6, #1
 80023a8:	e7ee      	b.n	8002388 <__libc_init_array+0xc>
 80023aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80023ae:	4798      	blx	r3
 80023b0:	3601      	adds	r6, #1
 80023b2:	e7f2      	b.n	800239a <__libc_init_array+0x1e>
 80023b4:	08013740 	.word	0x08013740
 80023b8:	08013740 	.word	0x08013740
 80023bc:	08013740 	.word	0x08013740
 80023c0:	08013744 	.word	0x08013744

080023c4 <_init>:
 80023c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023c6:	bf00      	nop
 80023c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ca:	bc08      	pop	{r3}
 80023cc:	469e      	mov	lr, r3
 80023ce:	4770      	bx	lr

080023d0 <_fini>:
 80023d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023d2:	bf00      	nop
 80023d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023d6:	bc08      	pop	{r3}
 80023d8:	469e      	mov	lr, r3
 80023da:	4770      	bx	lr
