
NTC_100KThermistor_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006938  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  08006a48  08006a48  00007a48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e30  08006e30  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006e30  08006e30  00007e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e38  08006e38  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e38  08006e38  00007e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e3c  08006e3c  00007e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006e40  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c4  200001d4  08007014  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000598  08007014  00008598  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aeea  00000000  00000000  000081fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002137  00000000  00000000  000130e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be8  00000000  00000000  00015220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000091d  00000000  00000000  00015e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018500  00000000  00000000  00016725  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eab5  00000000  00000000  0002ec25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b958  00000000  00000000  0003d6da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9032  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004068  00000000  00000000  000c9078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000cd0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08006a30 	.word	0x08006a30

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08006a30 	.word	0x08006a30

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8000a88:	b4b0      	push	{r4, r5, r7}
 8000a8a:	b08f      	sub	sp, #60	@ 0x3c
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000a90:	f240 13b1 	movw	r3, #433	@ 0x1b1
 8000a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8000a96:	2307      	movs	r3, #7
 8000a98:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000a9c:	2307      	movs	r3, #7
 8000a9e:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 8000aa8:	23ff      	movs	r3, #255	@ 0xff
 8000aaa:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000aae:	2364      	movs	r3, #100	@ 0x64
 8000ab0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 8000ab4:	2308      	movs	r3, #8
 8000ab6:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	461d      	mov	r5, r3
 8000abc:	f107 040c 	add.w	r4, r7, #12
 8000ac0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ac2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ac4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ac6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ac8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000acc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	373c      	adds	r7, #60	@ 0x3c
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bcb0      	pop	{r4, r5, r7}
 8000ad8:	4770      	bx	lr

08000ada <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b084      	sub	sp, #16
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
 8000ae2:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f000 f9ff 	bl	8000eea <LoRa_read>
 8000aec:	4603      	mov	r3, r0
 8000aee:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000af0:	7bbb      	ldrb	r3, [r7, #14]
 8000af2:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d107      	bne.n	8000b0a <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8000afa:	7bbb      	ldrb	r3, [r7, #14]
 8000afc:	f023 0307 	bic.w	r3, r3, #7
 8000b00:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2200      	movs	r2, #0
 8000b06:	61da      	str	r2, [r3, #28]
 8000b08:	e03e      	b.n	8000b88 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d10c      	bne.n	8000b2a <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000b10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b14:	f023 0307 	bic.w	r3, r3, #7
 8000b18:	b25b      	sxtb	r3, r3
 8000b1a:	f043 0301 	orr.w	r3, r3, #1
 8000b1e:	b25b      	sxtb	r3, r3
 8000b20:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2201      	movs	r2, #1
 8000b26:	61da      	str	r2, [r3, #28]
 8000b28:	e02e      	b.n	8000b88 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	2b03      	cmp	r3, #3
 8000b2e:	d10c      	bne.n	8000b4a <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8000b30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b34:	f023 0307 	bic.w	r3, r3, #7
 8000b38:	b25b      	sxtb	r3, r3
 8000b3a:	f043 0303 	orr.w	r3, r3, #3
 8000b3e:	b25b      	sxtb	r3, r3
 8000b40:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2203      	movs	r2, #3
 8000b46:	61da      	str	r2, [r3, #28]
 8000b48:	e01e      	b.n	8000b88 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	2b05      	cmp	r3, #5
 8000b4e:	d10c      	bne.n	8000b6a <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8000b50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b54:	f023 0307 	bic.w	r3, r3, #7
 8000b58:	b25b      	sxtb	r3, r3
 8000b5a:	f043 0305 	orr.w	r3, r3, #5
 8000b5e:	b25b      	sxtb	r3, r3
 8000b60:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2205      	movs	r2, #5
 8000b66:	61da      	str	r2, [r3, #28]
 8000b68:	e00e      	b.n	8000b88 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	2b06      	cmp	r3, #6
 8000b6e:	d10b      	bne.n	8000b88 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8000b70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b74:	f023 0307 	bic.w	r3, r3, #7
 8000b78:	b25b      	sxtb	r3, r3
 8000b7a:	f043 0306 	orr.w	r3, r3, #6
 8000b7e:	b25b      	sxtb	r3, r3
 8000b80:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2206      	movs	r2, #6
 8000b86:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f000 f9c5 	bl	8000f1e <LoRa_write>
	//HAL_Delay(10);
}
 8000b94:	bf00      	nop
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	4613      	mov	r3, r2
 8000baa:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	6818      	ldr	r0, [r3, #0]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	889b      	ldrh	r3, [r3, #4]
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	f001 feda 	bl	8002970 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	6998      	ldr	r0, [r3, #24]
 8000bc0:	88fa      	ldrh	r2, [r7, #6]
 8000bc2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000bc6:	68b9      	ldr	r1, [r7, #8]
 8000bc8:	f002 fd96 	bl	80036f8 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000bcc:	bf00      	nop
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	699b      	ldr	r3, [r3, #24]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f003 f99b 	bl	8003f0e <HAL_SPI_GetState>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d1f7      	bne.n	8000bce <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	6998      	ldr	r0, [r3, #24]
 8000be2:	8b3a      	ldrh	r2, [r7, #24]
 8000be4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000be8:	6839      	ldr	r1, [r7, #0]
 8000bea:	f002 fec8 	bl	800397e <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000bee:	bf00      	nop
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f003 f98a 	bl	8003f0e <HAL_SPI_GetState>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d1f7      	bne.n	8000bf0 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	6818      	ldr	r0, [r3, #0]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	889b      	ldrh	r3, [r3, #4]
 8000c08:	2201      	movs	r2, #1
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	f001 feb0 	bl	8002970 <HAL_GPIO_WritePin>
}
 8000c10:	bf00      	nop
 8000c12:	3710      	adds	r7, #16
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	4613      	mov	r3, r2
 8000c26:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	6818      	ldr	r0, [r3, #0]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	889b      	ldrh	r3, [r3, #4]
 8000c30:	2200      	movs	r2, #0
 8000c32:	4619      	mov	r1, r3
 8000c34:	f001 fe9c 	bl	8002970 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	6998      	ldr	r0, [r3, #24]
 8000c3c:	88fa      	ldrh	r2, [r7, #6]
 8000c3e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000c42:	68b9      	ldr	r1, [r7, #8]
 8000c44:	f002 fd58 	bl	80036f8 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000c48:	bf00      	nop
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	699b      	ldr	r3, [r3, #24]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f003 f95d 	bl	8003f0e <HAL_SPI_GetState>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d1f7      	bne.n	8000c4a <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	6998      	ldr	r0, [r3, #24]
 8000c5e:	8b3a      	ldrh	r2, [r7, #24]
 8000c60:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000c64:	6839      	ldr	r1, [r7, #0]
 8000c66:	f002 fd47 	bl	80036f8 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000c6a:	bf00      	nop
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f003 f94c 	bl	8003f0e <HAL_SPI_GetState>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d1f7      	bne.n	8000c6c <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	6818      	ldr	r0, [r3, #0]
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	889b      	ldrh	r3, [r3, #4]
 8000c84:	2201      	movs	r2, #1
 8000c86:	4619      	mov	r1, r3
 8000c88:	f001 fe72 	bl	8002970 <HAL_GPIO_WritePin>
}
 8000c8c:	bf00      	nop
 8000c8e:	3710      	adds	r7, #16
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8000ca0:	2126      	movs	r1, #38	@ 0x26
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f000 f921 	bl	8000eea <LoRa_read>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 8000cac:	78fb      	ldrb	r3, [r7, #3]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d004      	beq.n	8000cbc <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 8000cb2:	7bbb      	ldrb	r3, [r7, #14]
 8000cb4:	f043 0308 	orr.w	r3, r3, #8
 8000cb8:	73fb      	strb	r3, [r7, #15]
 8000cba:	e003      	b.n	8000cc4 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8000cbc:	7bbb      	ldrb	r3, [r7, #14]
 8000cbe:	f023 0308 	bic.w	r3, r3, #8
 8000cc2:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	2126      	movs	r1, #38	@ 0x26
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f000 f927 	bl	8000f1e <LoRa_write>
	HAL_Delay(10);
 8000cd0:	200a      	movs	r0, #10
 8000cd2:	f001 f825 	bl	8001d20 <HAL_Delay>
}
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b096      	sub	sp, #88	@ 0x58
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8000ce8:	4a17      	ldr	r2, [pc, #92]	@ (8000d48 <LoRa_setAutoLDO+0x68>)
 8000cea:	f107 0308 	add.w	r3, r7, #8
 8000cee:	4611      	mov	r1, r2
 8000cf0:	2250      	movs	r2, #80	@ 0x50
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f003 ffff 	bl	8004cf6 <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000cfe:	461a      	mov	r2, r3
 8000d00:	2301      	movs	r3, #1
 8000d02:	4093      	lsls	r3, r2
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fb7d 	bl	8000404 <__aeabi_i2d>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000d10:	00db      	lsls	r3, r3, #3
 8000d12:	3358      	adds	r3, #88	@ 0x58
 8000d14:	443b      	add	r3, r7
 8000d16:	3b50      	subs	r3, #80	@ 0x50
 8000d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d1c:	f7ff fd06 	bl	800072c <__aeabi_ddiv>
 8000d20:	4602      	mov	r2, r0
 8000d22:	460b      	mov	r3, r1
 8000d24:	4610      	mov	r0, r2
 8000d26:	4619      	mov	r1, r3
 8000d28:	f7ff fe86 	bl	8000a38 <__aeabi_d2iz>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b10      	cmp	r3, #16
 8000d30:	bfcc      	ite	gt
 8000d32:	2301      	movgt	r3, #1
 8000d34:	2300      	movle	r3, #0
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	4619      	mov	r1, r3
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f7ff ffaa 	bl	8000c94 <LoRa_setLowDaraRateOptimization>
}
 8000d40:	bf00      	nop
 8000d42:	3758      	adds	r7, #88	@ 0x58
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	08006a48 	.word	0x08006a48

08000d4c <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	04db      	lsls	r3, r3, #19
 8000d5a:	115b      	asrs	r3, r3, #5
 8000d5c:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	0c1b      	lsrs	r3, r3, #16
 8000d62:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8000d64:	7afb      	ldrb	r3, [r7, #11]
 8000d66:	461a      	mov	r2, r3
 8000d68:	2106      	movs	r1, #6
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f000 f8d7 	bl	8000f1e <LoRa_write>
	HAL_Delay(5);
 8000d70:	2005      	movs	r0, #5
 8000d72:	f000 ffd5 	bl	8001d20 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	0a1b      	lsrs	r3, r3, #8
 8000d7a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8000d7c:	7afb      	ldrb	r3, [r7, #11]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	2107      	movs	r1, #7
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f000 f8cb 	bl	8000f1e <LoRa_write>
	HAL_Delay(5);
 8000d88:	2005      	movs	r0, #5
 8000d8a:	f000 ffc9 	bl	8001d20 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8000d92:	7afb      	ldrb	r3, [r7, #11]
 8000d94:	461a      	mov	r2, r3
 8000d96:	2108      	movs	r1, #8
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f000 f8c0 	bl	8000f1e <LoRa_write>
	HAL_Delay(5);
 8000d9e:	2005      	movs	r0, #5
 8000da0:	f000 ffbe 	bl	8001d20 <HAL_Delay>
}
 8000da4:	bf00      	nop
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	2b0c      	cmp	r3, #12
 8000dba:	dd01      	ble.n	8000dc0 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8000dbc:	230c      	movs	r3, #12
 8000dbe:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	2b06      	cmp	r3, #6
 8000dc4:	dc01      	bgt.n	8000dca <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8000dc6:	2307      	movs	r3, #7
 8000dc8:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000dca:	211e      	movs	r1, #30
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f000 f88c 	bl	8000eea <LoRa_read>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8000dd6:	200a      	movs	r0, #10
 8000dd8:	f000 ffa2 	bl	8001d20 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	011b      	lsls	r3, r3, #4
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
 8000de6:	f003 030f 	and.w	r3, r3, #15
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	4413      	add	r3, r2
 8000dee:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8000df0:	7bbb      	ldrb	r3, [r7, #14]
 8000df2:	461a      	mov	r2, r3
 8000df4:	211e      	movs	r1, #30
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f000 f891 	bl	8000f1e <LoRa_write>
	HAL_Delay(10);
 8000dfc:	200a      	movs	r0, #10
 8000dfe:	f000 ff8f 	bl	8001d20 <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f7ff ff6c 	bl	8000ce0 <LoRa_setAutoLDO>
}
 8000e08:	bf00      	nop
 8000e0a:	3710      	adds	r7, #16
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	460b      	mov	r3, r1
 8000e1a:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8000e1c:	78fb      	ldrb	r3, [r7, #3]
 8000e1e:	461a      	mov	r2, r3
 8000e20:	2109      	movs	r1, #9
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f000 f87b 	bl	8000f1e <LoRa_write>
	HAL_Delay(10);
 8000e28:	200a      	movs	r0, #10
 8000e2a:	f000 ff79 	bl	8001d20 <HAL_Delay>
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	460b      	mov	r3, r1
 8000e42:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8000e48:	78fb      	ldrb	r3, [r7, #3]
 8000e4a:	2b2c      	cmp	r3, #44	@ 0x2c
 8000e4c:	d801      	bhi.n	8000e52 <LoRa_setOCP+0x1a>
		current = 45;
 8000e4e:	232d      	movs	r3, #45	@ 0x2d
 8000e50:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8000e52:	78fb      	ldrb	r3, [r7, #3]
 8000e54:	2bf0      	cmp	r3, #240	@ 0xf0
 8000e56:	d901      	bls.n	8000e5c <LoRa_setOCP+0x24>
		current = 240;
 8000e58:	23f0      	movs	r3, #240	@ 0xf0
 8000e5a:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8000e5c:	78fb      	ldrb	r3, [r7, #3]
 8000e5e:	2b78      	cmp	r3, #120	@ 0x78
 8000e60:	d809      	bhi.n	8000e76 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8000e62:	78fb      	ldrb	r3, [r7, #3]
 8000e64:	3b2d      	subs	r3, #45	@ 0x2d
 8000e66:	4a12      	ldr	r2, [pc, #72]	@ (8000eb0 <LoRa_setOCP+0x78>)
 8000e68:	fb82 1203 	smull	r1, r2, r2, r3
 8000e6c:	1052      	asrs	r2, r2, #1
 8000e6e:	17db      	asrs	r3, r3, #31
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	73fb      	strb	r3, [r7, #15]
 8000e74:	e00b      	b.n	8000e8e <LoRa_setOCP+0x56>
	else if(current <= 240)
 8000e76:	78fb      	ldrb	r3, [r7, #3]
 8000e78:	2bf0      	cmp	r3, #240	@ 0xf0
 8000e7a:	d808      	bhi.n	8000e8e <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8000e7c:	78fb      	ldrb	r3, [r7, #3]
 8000e7e:	331e      	adds	r3, #30
 8000e80:	4a0b      	ldr	r2, [pc, #44]	@ (8000eb0 <LoRa_setOCP+0x78>)
 8000e82:	fb82 1203 	smull	r1, r2, r2, r3
 8000e86:	1092      	asrs	r2, r2, #2
 8000e88:	17db      	asrs	r3, r3, #31
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8000e8e:	7bfb      	ldrb	r3, [r7, #15]
 8000e90:	3320      	adds	r3, #32
 8000e92:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
 8000e96:	461a      	mov	r2, r3
 8000e98:	210b      	movs	r1, #11
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f000 f83f 	bl	8000f1e <LoRa_write>
	HAL_Delay(10);
 8000ea0:	200a      	movs	r0, #10
 8000ea2:	f000 ff3d 	bl	8001d20 <HAL_Delay>
}
 8000ea6:	bf00      	nop
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	66666667 	.word	0x66666667

08000eb4 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000ebc:	211e      	movs	r1, #30
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f000 f813 	bl	8000eea <LoRa_read>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
 8000eca:	f043 0307 	orr.w	r3, r3, #7
 8000ece:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8000ed0:	7bbb      	ldrb	r3, [r7, #14]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	211e      	movs	r1, #30
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f000 f821 	bl	8000f1e <LoRa_write>
	HAL_Delay(10);
 8000edc:	200a      	movs	r0, #10
 8000ede:	f000 ff1f 	bl	8001d20 <HAL_Delay>
}
 8000ee2:	bf00      	nop
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b086      	sub	sp, #24
 8000eee:	af02      	add	r7, sp, #8
 8000ef0:	6078      	str	r0, [r7, #4]
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8000ef6:	78fb      	ldrb	r3, [r7, #3]
 8000ef8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8000f00:	f107 030f 	add.w	r3, r7, #15
 8000f04:	f107 010e 	add.w	r1, r7, #14
 8000f08:	2201      	movs	r2, #1
 8000f0a:	9200      	str	r2, [sp, #0]
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff fe44 	bl	8000b9c <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b086      	sub	sp, #24
 8000f22:	af02      	add	r7, sp, #8
 8000f24:	6078      	str	r0, [r7, #4]
 8000f26:	460b      	mov	r3, r1
 8000f28:	70fb      	strb	r3, [r7, #3]
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8000f2e:	78fb      	ldrb	r3, [r7, #3]
 8000f30:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	73bb      	strb	r3, [r7, #14]
	data = value;
 8000f38:	78bb      	ldrb	r3, [r7, #2]
 8000f3a:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8000f3c:	f107 030f 	add.w	r3, r7, #15
 8000f40:	f107 010e 	add.w	r1, r7, #14
 8000f44:	2201      	movs	r2, #1
 8000f46:	9200      	str	r2, [sp, #0]
 8000f48:	2201      	movs	r2, #1
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f7ff fe64 	bl	8000c18 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8000f50:	bf00      	nop
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	607a      	str	r2, [r7, #4]
 8000f62:	461a      	mov	r2, r3
 8000f64:	460b      	mov	r3, r1
 8000f66:	72fb      	strb	r3, [r7, #11]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8000f6c:	7afb      	ldrb	r3, [r7, #11]
 8000f6e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	6818      	ldr	r0, [r3, #0]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	889b      	ldrh	r3, [r3, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	4619      	mov	r1, r3
 8000f82:	f001 fcf5 	bl	8002970 <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	6998      	ldr	r0, [r3, #24]
 8000f8a:	f107 0117 	add.w	r1, r7, #23
 8000f8e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000f92:	2201      	movs	r2, #1
 8000f94:	f002 fbb0 	bl	80036f8 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000f98:	bf00      	nop
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f002 ffb5 	bl	8003f0e <HAL_SPI_GetState>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d1f7      	bne.n	8000f9a <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	6998      	ldr	r0, [r3, #24]
 8000fae:	7abb      	ldrb	r3, [r7, #10]
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000fb6:	6879      	ldr	r1, [r7, #4]
 8000fb8:	f002 fb9e 	bl	80036f8 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000fbc:	bf00      	nop
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	699b      	ldr	r3, [r3, #24]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f002 ffa3 	bl	8003f0e <HAL_SPI_GetState>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d1f7      	bne.n	8000fbe <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	6818      	ldr	r0, [r3, #0]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	889b      	ldrh	r3, [r3, #4]
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f001 fcc9 	bl	8002970 <HAL_GPIO_WritePin>
}
 8000fde:	bf00      	nop
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]

	return 1;
 8000fee:	2301      	movs	r3, #1
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bc80      	pop	{r7}
 8000ff8:	4770      	bx	lr

08000ffa <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b086      	sub	sp, #24
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	60f8      	str	r0, [r7, #12]
 8001002:	60b9      	str	r1, [r7, #8]
 8001004:	4611      	mov	r1, r2
 8001006:	461a      	mov	r2, r3
 8001008:	460b      	mov	r3, r1
 800100a:	71fb      	strb	r3, [r7, #7]
 800100c:	4613      	mov	r3, r2
 800100e:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	69db      	ldr	r3, [r3, #28]
 8001014:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001016:	2101      	movs	r1, #1
 8001018:	68f8      	ldr	r0, [r7, #12]
 800101a:	f7ff fd5e 	bl	8000ada <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 800101e:	210e      	movs	r1, #14
 8001020:	68f8      	ldr	r0, [r7, #12]
 8001022:	f7ff ff62 	bl	8000eea <LoRa_read>
 8001026:	4603      	mov	r3, r0
 8001028:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 800102a:	7cfb      	ldrb	r3, [r7, #19]
 800102c:	461a      	mov	r2, r3
 800102e:	210d      	movs	r1, #13
 8001030:	68f8      	ldr	r0, [r7, #12]
 8001032:	f7ff ff74 	bl	8000f1e <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	461a      	mov	r2, r3
 800103a:	2122      	movs	r1, #34	@ 0x22
 800103c:	68f8      	ldr	r0, [r7, #12]
 800103e:	f7ff ff6e 	bl	8000f1e <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	68ba      	ldr	r2, [r7, #8]
 8001046:	2100      	movs	r1, #0
 8001048:	68f8      	ldr	r0, [r7, #12]
 800104a:	f7ff ff85 	bl	8000f58 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 800104e:	2103      	movs	r1, #3
 8001050:	68f8      	ldr	r0, [r7, #12]
 8001052:	f7ff fd42 	bl	8000ada <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001056:	2112      	movs	r1, #18
 8001058:	68f8      	ldr	r0, [r7, #12]
 800105a:	f7ff ff46 	bl	8000eea <LoRa_read>
 800105e:	4603      	mov	r3, r0
 8001060:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8001062:	7cfb      	ldrb	r3, [r7, #19]
 8001064:	f003 0308 	and.w	r3, r3, #8
 8001068:	2b00      	cmp	r3, #0
 800106a:	d00a      	beq.n	8001082 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 800106c:	22ff      	movs	r2, #255	@ 0xff
 800106e:	2112      	movs	r1, #18
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f7ff ff54 	bl	8000f1e <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8001076:	6979      	ldr	r1, [r7, #20]
 8001078:	68f8      	ldr	r0, [r7, #12]
 800107a:	f7ff fd2e 	bl	8000ada <LoRa_gotoMode>
			return 1;
 800107e:	2301      	movs	r3, #1
 8001080:	e00f      	b.n	80010a2 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8001082:	88bb      	ldrh	r3, [r7, #4]
 8001084:	3b01      	subs	r3, #1
 8001086:	80bb      	strh	r3, [r7, #4]
 8001088:	88bb      	ldrh	r3, [r7, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d105      	bne.n	800109a <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 800108e:	6979      	ldr	r1, [r7, #20]
 8001090:	68f8      	ldr	r0, [r7, #12]
 8001092:	f7ff fd22 	bl	8000ada <LoRa_gotoMode>
				return 0;
 8001096:	2300      	movs	r3, #0
 8001098:	e003      	b.n	80010a2 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 800109a:	2001      	movs	r0, #1
 800109c:	f000 fe40 	bl	8001d20 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 80010a0:	e7d9      	b.n	8001056 <LoRa_transmit+0x5c>
	}
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3718      	adds	r7, #24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 80010b2:	2105      	movs	r1, #5
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff fd10 	bl	8000ada <LoRa_gotoMode>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 80010c2:	b590      	push	{r4, r7, lr}
 80010c4:	b089      	sub	sp, #36	@ 0x24
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	60f8      	str	r0, [r7, #12]
 80010ca:	60b9      	str	r1, [r7, #8]
 80010cc:	4613      	mov	r3, r2
 80010ce:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 80010d4:	2300      	movs	r3, #0
 80010d6:	61bb      	str	r3, [r7, #24]
 80010d8:	e007      	b.n	80010ea <LoRa_receive+0x28>
		data[i]=0;
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	68ba      	ldr	r2, [r7, #8]
 80010de:	4413      	add	r3, r2
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	3301      	adds	r3, #1
 80010e8:	61bb      	str	r3, [r7, #24]
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	dbf3      	blt.n	80010da <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80010f2:	2101      	movs	r1, #1
 80010f4:	68f8      	ldr	r0, [r7, #12]
 80010f6:	f7ff fcf0 	bl	8000ada <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 80010fa:	2112      	movs	r1, #18
 80010fc:	68f8      	ldr	r0, [r7, #12]
 80010fe:	f7ff fef4 	bl	8000eea <LoRa_read>
 8001102:	4603      	mov	r3, r0
 8001104:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8001106:	7cfb      	ldrb	r3, [r7, #19]
 8001108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800110c:	2b00      	cmp	r3, #0
 800110e:	d02f      	beq.n	8001170 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001110:	22ff      	movs	r2, #255	@ 0xff
 8001112:	2112      	movs	r1, #18
 8001114:	68f8      	ldr	r0, [r7, #12]
 8001116:	f7ff ff02 	bl	8000f1e <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 800111a:	2113      	movs	r1, #19
 800111c:	68f8      	ldr	r0, [r7, #12]
 800111e:	f7ff fee4 	bl	8000eea <LoRa_read>
 8001122:	4603      	mov	r3, r0
 8001124:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8001126:	2110      	movs	r1, #16
 8001128:	68f8      	ldr	r0, [r7, #12]
 800112a:	f7ff fede 	bl	8000eea <LoRa_read>
 800112e:	4603      	mov	r3, r0
 8001130:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001132:	7cfb      	ldrb	r3, [r7, #19]
 8001134:	461a      	mov	r2, r3
 8001136:	210d      	movs	r1, #13
 8001138:	68f8      	ldr	r0, [r7, #12]
 800113a:	f7ff fef0 	bl	8000f1e <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 800113e:	7cba      	ldrb	r2, [r7, #18]
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	4293      	cmp	r3, r2
 8001144:	bf28      	it	cs
 8001146:	4613      	movcs	r3, r2
 8001148:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	e00b      	b.n	8001168 <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	68ba      	ldr	r2, [r7, #8]
 8001154:	18d4      	adds	r4, r2, r3
 8001156:	2100      	movs	r1, #0
 8001158:	68f8      	ldr	r0, [r7, #12]
 800115a:	f7ff fec6 	bl	8000eea <LoRa_read>
 800115e:	4603      	mov	r3, r0
 8001160:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	3301      	adds	r3, #1
 8001166:	617b      	str	r3, [r7, #20]
 8001168:	7ffb      	ldrb	r3, [r7, #31]
 800116a:	697a      	ldr	r2, [r7, #20]
 800116c:	429a      	cmp	r2, r3
 800116e:	dbef      	blt.n	8001150 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001170:	2105      	movs	r1, #5
 8001172:	68f8      	ldr	r0, [r7, #12]
 8001174:	f7ff fcb1 	bl	8000ada <LoRa_gotoMode>
    return min;
 8001178:	7ffb      	ldrb	r3, [r7, #31]
}
 800117a:	4618      	mov	r0, r3
 800117c:	3724      	adds	r7, #36	@ 0x24
 800117e:	46bd      	mov	sp, r7
 8001180:	bd90      	pop	{r4, r7, pc}

08001182 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8001182:	b580      	push	{r7, lr}
 8001184:	b084      	sub	sp, #16
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff ff2b 	bl	8000fe6 <LoRa_isvalid>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	f000 8096 	beq.w	80012c4 <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8001198:	2100      	movs	r1, #0
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff fc9d 	bl	8000ada <LoRa_gotoMode>
			HAL_Delay(10);
 80011a0:	200a      	movs	r0, #10
 80011a2:	f000 fdbd 	bl	8001d20 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 80011a6:	2101      	movs	r1, #1
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff fe9e 	bl	8000eea <LoRa_read>
 80011ae:	4603      	mov	r3, r0
 80011b0:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 80011b2:	200a      	movs	r0, #10
 80011b4:	f000 fdb4 	bl	8001d20 <HAL_Delay>
			data = read | 0x80;
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
 80011ba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011be:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 80011c0:	7bbb      	ldrb	r3, [r7, #14]
 80011c2:	461a      	mov	r2, r3
 80011c4:	2101      	movs	r1, #1
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff fea9 	bl	8000f1e <LoRa_write>
			HAL_Delay(100);
 80011cc:	2064      	movs	r0, #100	@ 0x64
 80011ce:	f000 fda7 	bl	8001d20 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a1b      	ldr	r3, [r3, #32]
 80011d6:	4619      	mov	r1, r3
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff fdb7 	bl	8000d4c <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80011e4:	4619      	mov	r1, r3
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff fe12 	bl	8000e10 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80011f2:	4619      	mov	r1, r3
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff fe1f 	bl	8000e38 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 80011fa:	2223      	movs	r2, #35	@ 0x23
 80011fc:	210c      	movs	r1, #12
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff fe8d 	bl	8000f1e <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f7ff fe55 	bl	8000eb4 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001210:	4619      	mov	r1, r3
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff fdca 	bl	8000dac <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8001218:	22ff      	movs	r2, #255	@ 0xff
 800121a:	211f      	movs	r1, #31
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff fe7e 	bl	8000f1e <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800122c:	011b      	lsls	r3, r3, #4
 800122e:	b2da      	uxtb	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	b2db      	uxtb	r3, r3
 800123a:	4413      	add	r3, r2
 800123c:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 800123e:	7bbb      	ldrb	r3, [r7, #14]
 8001240:	461a      	mov	r2, r3
 8001242:	211d      	movs	r1, #29
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff fe6a 	bl	8000f1e <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff fd48 	bl	8000ce0 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001254:	0a1b      	lsrs	r3, r3, #8
 8001256:	b29b      	uxth	r3, r3
 8001258:	b2db      	uxtb	r3, r3
 800125a:	461a      	mov	r2, r3
 800125c:	2120      	movs	r1, #32
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff fe5d 	bl	8000f1e <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001268:	b2db      	uxtb	r3, r3
 800126a:	461a      	mov	r2, r3
 800126c:	2121      	movs	r1, #33	@ 0x21
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff fe55 	bl	8000f1e <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8001274:	2140      	movs	r1, #64	@ 0x40
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff fe37 	bl	8000eea <LoRa_read>
 800127c:	4603      	mov	r3, r0
 800127e:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8001280:	7bfb      	ldrb	r3, [r7, #15]
 8001282:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8001286:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8001288:	7bbb      	ldrb	r3, [r7, #14]
 800128a:	461a      	mov	r2, r3
 800128c:	2140      	movs	r1, #64	@ 0x40
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff fe45 	bl	8000f1e <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001294:	2101      	movs	r1, #1
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff fc1f 	bl	8000ada <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2201      	movs	r2, #1
 80012a0:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 80012a2:	200a      	movs	r0, #10
 80012a4:	f000 fd3c 	bl	8001d20 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 80012a8:	2142      	movs	r1, #66	@ 0x42
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff fe1d 	bl	8000eea <LoRa_read>
 80012b0:	4603      	mov	r3, r0
 80012b2:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	2b12      	cmp	r3, #18
 80012b8:	d101      	bne.n	80012be <LoRa_init+0x13c>
				return LORA_OK;
 80012ba:	23c8      	movs	r3, #200	@ 0xc8
 80012bc:	e004      	b.n	80012c8 <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 80012be:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 80012c2:	e001      	b.n	80012c8 <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 80012c4:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <HAL_GPIO_EXTI_Callback>:
	/* Return filtered value */
	return (uint32_t) Output;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == myLoRa.DIO0_pin){
 80012da:	4b0a      	ldr	r3, [pc, #40]	@ (8001304 <HAL_GPIO_EXTI_Callback+0x34>)
 80012dc:	8a9b      	ldrh	r3, [r3, #20]
 80012de:	88fa      	ldrh	r2, [r7, #6]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d10b      	bne.n	80012fc <HAL_GPIO_EXTI_Callback+0x2c>
		LoRa_receive(&myLoRa, RxBuffer, 128);
 80012e4:	2280      	movs	r2, #128	@ 0x80
 80012e6:	4908      	ldr	r1, [pc, #32]	@ (8001308 <HAL_GPIO_EXTI_Callback+0x38>)
 80012e8:	4806      	ldr	r0, [pc, #24]	@ (8001304 <HAL_GPIO_EXTI_Callback+0x34>)
 80012ea:	f7ff feea 	bl	80010c2 <LoRa_receive>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 80012ee:	2104      	movs	r1, #4
 80012f0:	4806      	ldr	r0, [pc, #24]	@ (800130c <HAL_GPIO_EXTI_Callback+0x3c>)
 80012f2:	f001 fb55 	bl	80029a0 <HAL_GPIO_TogglePin>
		lora_receive_toggle = 255;
 80012f6:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <HAL_GPIO_EXTI_Callback+0x40>)
 80012f8:	22ff      	movs	r2, #255	@ 0xff
 80012fa:	701a      	strb	r2, [r3, #0]

	}
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000310 	.word	0x20000310
 8001308:	200003c0 	.word	0x200003c0
 800130c:	40010c00 	.word	0x40010c00
 8001310:	20000440 	.word	0x20000440

08001314 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001314:	b5b0      	push	{r4, r5, r7, lr}
 8001316:	b08c      	sub	sp, #48	@ 0x30
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800131a:	f000 fc9f 	bl	8001c5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800131e:	f000 f889 	bl	8001434 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001322:	f000 f9a3 	bl	800166c <MX_GPIO_Init>
  MX_DMA_Init();
 8001326:	f000 f983 	bl	8001630 <MX_DMA_Init>
  MX_ADC1_Init();
 800132a:	f000 f8df 	bl	80014ec <MX_ADC1_Init>
  MX_I2C1_Init();
 800132e:	f000 f91b 	bl	8001568 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001332:	f000 f947 	bl	80015c4 <MX_SPI1_Init>
  //HAL_ADC_Start_DMA(&hadc1, ADC_Raw, 1);

  /* timer 4 (f=10Hz, T=100ms start */
  //HAL_TIM_Base_Start_IT(&htim4);

  myLoRa = newLoRa();
 8001336:	4c38      	ldr	r4, [pc, #224]	@ (8001418 <main+0x104>)
 8001338:	463b      	mov	r3, r7
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff fba4 	bl	8000a88 <newLoRa>
 8001340:	4625      	mov	r5, r4
 8001342:	463c      	mov	r4, r7
 8001344:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001346:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001348:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800134a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800134c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001350:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  myLoRa.CS_port         = NSS_GPIO_Port;
 8001354:	4b30      	ldr	r3, [pc, #192]	@ (8001418 <main+0x104>)
 8001356:	4a31      	ldr	r2, [pc, #196]	@ (800141c <main+0x108>)
 8001358:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin          = NSS_Pin;
 800135a:	4b2f      	ldr	r3, [pc, #188]	@ (8001418 <main+0x104>)
 800135c:	2210      	movs	r2, #16
 800135e:	809a      	strh	r2, [r3, #4]
  myLoRa.reset_port      = RST_GPIO_Port;
 8001360:	4b2d      	ldr	r3, [pc, #180]	@ (8001418 <main+0x104>)
 8001362:	4a2e      	ldr	r2, [pc, #184]	@ (800141c <main+0x108>)
 8001364:	609a      	str	r2, [r3, #8]
  myLoRa.reset_pin       = RST_Pin;
 8001366:	4b2c      	ldr	r3, [pc, #176]	@ (8001418 <main+0x104>)
 8001368:	2208      	movs	r2, #8
 800136a:	819a      	strh	r2, [r3, #12]
  myLoRa.DIO0_port       = DIO0_GPIO_Port;
 800136c:	4b2a      	ldr	r3, [pc, #168]	@ (8001418 <main+0x104>)
 800136e:	4a2b      	ldr	r2, [pc, #172]	@ (800141c <main+0x108>)
 8001370:	611a      	str	r2, [r3, #16]
  myLoRa.DIO0_pin        = DIO0_Pin;
 8001372:	4b29      	ldr	r3, [pc, #164]	@ (8001418 <main+0x104>)
 8001374:	2204      	movs	r2, #4
 8001376:	829a      	strh	r2, [r3, #20]
  myLoRa.hSPIx           = &hspi1;
 8001378:	4b27      	ldr	r3, [pc, #156]	@ (8001418 <main+0x104>)
 800137a:	4a29      	ldr	r2, [pc, #164]	@ (8001420 <main+0x10c>)
 800137c:	619a      	str	r2, [r3, #24]

  myLoRa.frequency             = 433;             // default = 433 MHz
 800137e:	4b26      	ldr	r3, [pc, #152]	@ (8001418 <main+0x104>)
 8001380:	f240 12b1 	movw	r2, #433	@ 0x1b1
 8001384:	621a      	str	r2, [r3, #32]
  myLoRa.spredingFactor        = SF_7;            // default = SF_7
 8001386:	4b24      	ldr	r3, [pc, #144]	@ (8001418 <main+0x104>)
 8001388:	2207      	movs	r2, #7
 800138a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  myLoRa.bandWidth             = BW_125KHz;       // default = BW_125KHz
 800138e:	4b22      	ldr	r3, [pc, #136]	@ (8001418 <main+0x104>)
 8001390:	2207      	movs	r2, #7
 8001392:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  myLoRa.crcRate               = CR_4_5;          // default = CR_4_5
 8001396:	4b20      	ldr	r3, [pc, #128]	@ (8001418 <main+0x104>)
 8001398:	2201      	movs	r2, #1
 800139a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  myLoRa.power                 = POWER_20db;      // default = 20db
 800139e:	4b1e      	ldr	r3, [pc, #120]	@ (8001418 <main+0x104>)
 80013a0:	22ff      	movs	r2, #255	@ 0xff
 80013a2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  myLoRa.overCurrentProtection = 100;             // default = 100 mA
 80013a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001418 <main+0x104>)
 80013a8:	2264      	movs	r2, #100	@ 0x64
 80013aa:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  myLoRa.preamble              = 8;              // default = 8;
 80013ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001418 <main+0x104>)
 80013b0:	2208      	movs	r2, #8
 80013b2:	851a      	strh	r2, [r3, #40]	@ 0x28

  if(LoRa_init(&myLoRa) == LORA_OK){
 80013b4:	4818      	ldr	r0, [pc, #96]	@ (8001418 <main+0x104>)
 80013b6:	f7ff fee4 	bl	8001182 <LoRa_init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2bc8      	cmp	r3, #200	@ 0xc8
 80013be:	d102      	bne.n	80013c6 <main+0xb2>
	  LoRa_stat = 1;
 80013c0:	4b18      	ldr	r3, [pc, #96]	@ (8001424 <main+0x110>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	801a      	strh	r2, [r3, #0]
  }

  LoRa_startReceiving(&myLoRa);
 80013c6:	4814      	ldr	r0, [pc, #80]	@ (8001418 <main+0x104>)
 80013c8:	f7ff fe6f 	bl	80010aa <LoRa_startReceiving>

  TxBuffer[0] = 0xAA;
 80013cc:	4b16      	ldr	r3, [pc, #88]	@ (8001428 <main+0x114>)
 80013ce:	22aa      	movs	r2, #170	@ 0xaa
 80013d0:	701a      	strb	r2, [r3, #0]
  TxBuffer[1] = 0xBB;
 80013d2:	4b15      	ldr	r3, [pc, #84]	@ (8001428 <main+0x114>)
 80013d4:	22bb      	movs	r2, #187	@ 0xbb
 80013d6:	705a      	strb	r2, [r3, #1]
  TxBuffer[2] = 0xCC;
 80013d8:	4b13      	ldr	r3, [pc, #76]	@ (8001428 <main+0x114>)
 80013da:	22cc      	movs	r2, #204	@ 0xcc
 80013dc:	709a      	strb	r2, [r3, #2]

  LoRa_transmit(&myLoRa, TxBuffer, 3, 500);
 80013de:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80013e2:	2203      	movs	r2, #3
 80013e4:	4910      	ldr	r1, [pc, #64]	@ (8001428 <main+0x114>)
 80013e6:	480c      	ldr	r0, [pc, #48]	@ (8001418 <main+0x104>)
 80013e8:	f7ff fe07 	bl	8000ffa <LoRa_transmit>
//			  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
//			  //lora_receive_toggle = 0;
//		  }
//	  }

	  if(lora_receive_toggle == 255){
 80013ec:	4b0f      	ldr	r3, [pc, #60]	@ (800142c <main+0x118>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2bff      	cmp	r3, #255	@ 0xff
 80013f2:	d1fb      	bne.n	80013ec <main+0xd8>

		  if(LoRa_transmit(&myLoRa, TxBuffer, 3, 500) == 1){
 80013f4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80013f8:	2203      	movs	r2, #3
 80013fa:	490b      	ldr	r1, [pc, #44]	@ (8001428 <main+0x114>)
 80013fc:	4806      	ldr	r0, [pc, #24]	@ (8001418 <main+0x104>)
 80013fe:	f7ff fdfc 	bl	8000ffa <LoRa_transmit>
 8001402:	4603      	mov	r3, r0
 8001404:	2b01      	cmp	r3, #1
 8001406:	d103      	bne.n	8001410 <main+0xfc>
			  //lora_receive_toggle = 0;
			  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8001408:	2104      	movs	r1, #4
 800140a:	4809      	ldr	r0, [pc, #36]	@ (8001430 <main+0x11c>)
 800140c:	f001 fac8 	bl	80029a0 <HAL_GPIO_TogglePin>
		  }
		  lora_receive_toggle = 0;
 8001410:	4b06      	ldr	r3, [pc, #24]	@ (800142c <main+0x118>)
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]
	  if(lora_receive_toggle == 255){
 8001416:	e7e9      	b.n	80013ec <main+0xd8>
 8001418:	20000310 	.word	0x20000310
 800141c:	40010800 	.word	0x40010800
 8001420:	200002b8 	.word	0x200002b8
 8001424:	2000033c 	.word	0x2000033c
 8001428:	20000340 	.word	0x20000340
 800142c:	20000440 	.word	0x20000440
 8001430:	40011400 	.word	0x40011400

08001434 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b094      	sub	sp, #80	@ 0x50
 8001438:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800143a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800143e:	2228      	movs	r2, #40	@ 0x28
 8001440:	2100      	movs	r1, #0
 8001442:	4618      	mov	r0, r3
 8001444:	f003 fbc9 	bl	8004bda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001458:	1d3b      	adds	r3, r7, #4
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001464:	2301      	movs	r3, #1
 8001466:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001468:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800146c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800146e:	2300      	movs	r3, #0
 8001470:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001472:	2301      	movs	r3, #1
 8001474:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001476:	2302      	movs	r3, #2
 8001478:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800147a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800147e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001480:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001484:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001486:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800148a:	4618      	mov	r0, r3
 800148c:	f001 fbfe 	bl	8002c8c <HAL_RCC_OscConfig>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001496:	f000 f98d 	bl	80017b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800149a:	230f      	movs	r3, #15
 800149c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800149e:	2302      	movs	r3, #2
 80014a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014aa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ac:	2300      	movs	r3, #0
 80014ae:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	2102      	movs	r1, #2
 80014b6:	4618      	mov	r0, r3
 80014b8:	f001 fe6a 	bl	8003190 <HAL_RCC_ClockConfig>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80014c2:	f000 f977 	bl	80017b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014c6:	2302      	movs	r3, #2
 80014c8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80014ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014ce:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	4618      	mov	r0, r3
 80014d4:	f001 ffd6 	bl	8003484 <HAL_RCCEx_PeriphCLKConfig>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80014de:	f000 f969 	bl	80017b4 <Error_Handler>
  }
}
 80014e2:	bf00      	nop
 80014e4:	3750      	adds	r7, #80	@ 0x50
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
	...

080014ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80014fc:	4b18      	ldr	r3, [pc, #96]	@ (8001560 <MX_ADC1_Init+0x74>)
 80014fe:	4a19      	ldr	r2, [pc, #100]	@ (8001564 <MX_ADC1_Init+0x78>)
 8001500:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001502:	4b17      	ldr	r3, [pc, #92]	@ (8001560 <MX_ADC1_Init+0x74>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001508:	4b15      	ldr	r3, [pc, #84]	@ (8001560 <MX_ADC1_Init+0x74>)
 800150a:	2200      	movs	r2, #0
 800150c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800150e:	4b14      	ldr	r3, [pc, #80]	@ (8001560 <MX_ADC1_Init+0x74>)
 8001510:	2200      	movs	r2, #0
 8001512:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001514:	4b12      	ldr	r3, [pc, #72]	@ (8001560 <MX_ADC1_Init+0x74>)
 8001516:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800151a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800151c:	4b10      	ldr	r3, [pc, #64]	@ (8001560 <MX_ADC1_Init+0x74>)
 800151e:	2200      	movs	r2, #0
 8001520:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001522:	4b0f      	ldr	r3, [pc, #60]	@ (8001560 <MX_ADC1_Init+0x74>)
 8001524:	2201      	movs	r2, #1
 8001526:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001528:	480d      	ldr	r0, [pc, #52]	@ (8001560 <MX_ADC1_Init+0x74>)
 800152a:	f000 fc1d 	bl	8001d68 <HAL_ADC_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001534:	f000 f93e 	bl	80017b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001538:	2309      	movs	r3, #9
 800153a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800153c:	2301      	movs	r3, #1
 800153e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8001540:	2303      	movs	r3, #3
 8001542:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	4619      	mov	r1, r3
 8001548:	4805      	ldr	r0, [pc, #20]	@ (8001560 <MX_ADC1_Init+0x74>)
 800154a:	f000 fce5 	bl	8001f18 <HAL_ADC_ConfigChannel>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001554:	f000 f92e 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001558:	bf00      	nop
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	200001f0 	.word	0x200001f0
 8001564:	40012400 	.word	0x40012400

08001568 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800156c:	4b12      	ldr	r3, [pc, #72]	@ (80015b8 <MX_I2C1_Init+0x50>)
 800156e:	4a13      	ldr	r2, [pc, #76]	@ (80015bc <MX_I2C1_Init+0x54>)
 8001570:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001572:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <MX_I2C1_Init+0x50>)
 8001574:	4a12      	ldr	r2, [pc, #72]	@ (80015c0 <MX_I2C1_Init+0x58>)
 8001576:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001578:	4b0f      	ldr	r3, [pc, #60]	@ (80015b8 <MX_I2C1_Init+0x50>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800157e:	4b0e      	ldr	r3, [pc, #56]	@ (80015b8 <MX_I2C1_Init+0x50>)
 8001580:	2200      	movs	r2, #0
 8001582:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001584:	4b0c      	ldr	r3, [pc, #48]	@ (80015b8 <MX_I2C1_Init+0x50>)
 8001586:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800158a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800158c:	4b0a      	ldr	r3, [pc, #40]	@ (80015b8 <MX_I2C1_Init+0x50>)
 800158e:	2200      	movs	r2, #0
 8001590:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001592:	4b09      	ldr	r3, [pc, #36]	@ (80015b8 <MX_I2C1_Init+0x50>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001598:	4b07      	ldr	r3, [pc, #28]	@ (80015b8 <MX_I2C1_Init+0x50>)
 800159a:	2200      	movs	r2, #0
 800159c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800159e:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <MX_I2C1_Init+0x50>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015a4:	4804      	ldr	r0, [pc, #16]	@ (80015b8 <MX_I2C1_Init+0x50>)
 80015a6:	f001 fa2d 	bl	8002a04 <HAL_I2C_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015b0:	f000 f900 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000264 	.word	0x20000264
 80015bc:	40005400 	.word	0x40005400
 80015c0:	00061a80 	.word	0x00061a80

080015c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015c8:	4b17      	ldr	r3, [pc, #92]	@ (8001628 <MX_SPI1_Init+0x64>)
 80015ca:	4a18      	ldr	r2, [pc, #96]	@ (800162c <MX_SPI1_Init+0x68>)
 80015cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015ce:	4b16      	ldr	r3, [pc, #88]	@ (8001628 <MX_SPI1_Init+0x64>)
 80015d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015d6:	4b14      	ldr	r3, [pc, #80]	@ (8001628 <MX_SPI1_Init+0x64>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015dc:	4b12      	ldr	r3, [pc, #72]	@ (8001628 <MX_SPI1_Init+0x64>)
 80015de:	2200      	movs	r2, #0
 80015e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015e2:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <MX_SPI1_Init+0x64>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001628 <MX_SPI1_Init+0x64>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001628 <MX_SPI1_Init+0x64>)
 80015f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80015f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001628 <MX_SPI1_Init+0x64>)
 80015f8:	2220      	movs	r2, #32
 80015fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001628 <MX_SPI1_Init+0x64>)
 80015fe:	2200      	movs	r2, #0
 8001600:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001602:	4b09      	ldr	r3, [pc, #36]	@ (8001628 <MX_SPI1_Init+0x64>)
 8001604:	2200      	movs	r2, #0
 8001606:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001608:	4b07      	ldr	r3, [pc, #28]	@ (8001628 <MX_SPI1_Init+0x64>)
 800160a:	2200      	movs	r2, #0
 800160c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800160e:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <MX_SPI1_Init+0x64>)
 8001610:	220a      	movs	r2, #10
 8001612:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001614:	4804      	ldr	r0, [pc, #16]	@ (8001628 <MX_SPI1_Init+0x64>)
 8001616:	f001 ffeb 	bl	80035f0 <HAL_SPI_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001620:	f000 f8c8 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}
 8001628:	200002b8 	.word	0x200002b8
 800162c:	40013000 	.word	0x40013000

08001630 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001636:	4b0c      	ldr	r3, [pc, #48]	@ (8001668 <MX_DMA_Init+0x38>)
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	4a0b      	ldr	r2, [pc, #44]	@ (8001668 <MX_DMA_Init+0x38>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6153      	str	r3, [r2, #20]
 8001642:	4b09      	ldr	r3, [pc, #36]	@ (8001668 <MX_DMA_Init+0x38>)
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	2100      	movs	r1, #0
 8001652:	200b      	movs	r0, #11
 8001654:	f000 fe71 	bl	800233a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001658:	200b      	movs	r0, #11
 800165a:	f000 fe8a 	bl	8002372 <HAL_NVIC_EnableIRQ>

}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40021000 	.word	0x40021000

0800166c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001672:	f107 0310 	add.w	r3, r7, #16
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001680:	4b47      	ldr	r3, [pc, #284]	@ (80017a0 <MX_GPIO_Init+0x134>)
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	4a46      	ldr	r2, [pc, #280]	@ (80017a0 <MX_GPIO_Init+0x134>)
 8001686:	f043 0310 	orr.w	r3, r3, #16
 800168a:	6193      	str	r3, [r2, #24]
 800168c:	4b44      	ldr	r3, [pc, #272]	@ (80017a0 <MX_GPIO_Init+0x134>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	f003 0310 	and.w	r3, r3, #16
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001698:	4b41      	ldr	r3, [pc, #260]	@ (80017a0 <MX_GPIO_Init+0x134>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	4a40      	ldr	r2, [pc, #256]	@ (80017a0 <MX_GPIO_Init+0x134>)
 800169e:	f043 0320 	orr.w	r3, r3, #32
 80016a2:	6193      	str	r3, [r2, #24]
 80016a4:	4b3e      	ldr	r3, [pc, #248]	@ (80017a0 <MX_GPIO_Init+0x134>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	f003 0320 	and.w	r3, r3, #32
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b0:	4b3b      	ldr	r3, [pc, #236]	@ (80017a0 <MX_GPIO_Init+0x134>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	4a3a      	ldr	r2, [pc, #232]	@ (80017a0 <MX_GPIO_Init+0x134>)
 80016b6:	f043 0304 	orr.w	r3, r3, #4
 80016ba:	6193      	str	r3, [r2, #24]
 80016bc:	4b38      	ldr	r3, [pc, #224]	@ (80017a0 <MX_GPIO_Init+0x134>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	607b      	str	r3, [r7, #4]
 80016c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c8:	4b35      	ldr	r3, [pc, #212]	@ (80017a0 <MX_GPIO_Init+0x134>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	4a34      	ldr	r2, [pc, #208]	@ (80017a0 <MX_GPIO_Init+0x134>)
 80016ce:	f043 0308 	orr.w	r3, r3, #8
 80016d2:	6193      	str	r3, [r2, #24]
 80016d4:	4b32      	ldr	r3, [pc, #200]	@ (80017a0 <MX_GPIO_Init+0x134>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	f003 0308 	and.w	r3, r3, #8
 80016dc:	603b      	str	r3, [r7, #0]
 80016de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80016e0:	2200      	movs	r2, #0
 80016e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016e6:	482f      	ldr	r0, [pc, #188]	@ (80017a4 <MX_GPIO_Init+0x138>)
 80016e8:	f001 f942 	bl	8002970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|NSS_Pin, GPIO_PIN_SET);
 80016ec:	2201      	movs	r2, #1
 80016ee:	2118      	movs	r1, #24
 80016f0:	482d      	ldr	r0, [pc, #180]	@ (80017a8 <MX_GPIO_Init+0x13c>)
 80016f2:	f001 f93d 	bl	8002970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2104      	movs	r1, #4
 80016fa:	482c      	ldr	r0, [pc, #176]	@ (80017ac <MX_GPIO_Init+0x140>)
 80016fc:	f001 f938 	bl	8002970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001700:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001704:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001706:	2301      	movs	r3, #1
 8001708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170e:	2302      	movs	r3, #2
 8001710:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001712:	f107 0310 	add.w	r3, r7, #16
 8001716:	4619      	mov	r1, r3
 8001718:	4822      	ldr	r0, [pc, #136]	@ (80017a4 <MX_GPIO_Init+0x138>)
 800171a:	f000 ffa5 	bl	8002668 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 800171e:	2301      	movs	r3, #1
 8001720:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001726:	2302      	movs	r3, #2
 8001728:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 800172a:	f107 0310 	add.w	r3, r7, #16
 800172e:	4619      	mov	r1, r3
 8001730:	481d      	ldr	r0, [pc, #116]	@ (80017a8 <MX_GPIO_Init+0x13c>)
 8001732:	f000 ff99 	bl	8002668 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8001736:	2304      	movs	r3, #4
 8001738:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800173a:	4b1d      	ldr	r3, [pc, #116]	@ (80017b0 <MX_GPIO_Init+0x144>)
 800173c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8001742:	f107 0310 	add.w	r3, r7, #16
 8001746:	4619      	mov	r1, r3
 8001748:	4817      	ldr	r0, [pc, #92]	@ (80017a8 <MX_GPIO_Init+0x13c>)
 800174a:	f000 ff8d 	bl	8002668 <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_Pin NSS_Pin */
  GPIO_InitStruct.Pin = RST_Pin|NSS_Pin;
 800174e:	2318      	movs	r3, #24
 8001750:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001752:	2301      	movs	r3, #1
 8001754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	2302      	movs	r3, #2
 800175c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175e:	f107 0310 	add.w	r3, r7, #16
 8001762:	4619      	mov	r1, r3
 8001764:	4810      	ldr	r0, [pc, #64]	@ (80017a8 <MX_GPIO_Init+0x13c>)
 8001766:	f000 ff7f 	bl	8002668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800176a:	2304      	movs	r3, #4
 800176c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176e:	2301      	movs	r3, #1
 8001770:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001776:	2302      	movs	r3, #2
 8001778:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177a:	f107 0310 	add.w	r3, r7, #16
 800177e:	4619      	mov	r1, r3
 8001780:	480a      	ldr	r0, [pc, #40]	@ (80017ac <MX_GPIO_Init+0x140>)
 8001782:	f000 ff71 	bl	8002668 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001786:	2200      	movs	r2, #0
 8001788:	2100      	movs	r1, #0
 800178a:	2008      	movs	r0, #8
 800178c:	f000 fdd5 	bl	800233a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001790:	2008      	movs	r0, #8
 8001792:	f000 fdee 	bl	8002372 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001796:	bf00      	nop
 8001798:	3720      	adds	r7, #32
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40011000 	.word	0x40011000
 80017a8:	40010800 	.word	0x40010800
 80017ac:	40010c00 	.word	0x40010c00
 80017b0:	10110000 	.word	0x10110000

080017b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b8:	b672      	cpsid	i
}
 80017ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017bc:	bf00      	nop
 80017be:	e7fd      	b.n	80017bc <Error_Handler+0x8>

080017c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017c6:	4b15      	ldr	r3, [pc, #84]	@ (800181c <HAL_MspInit+0x5c>)
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	4a14      	ldr	r2, [pc, #80]	@ (800181c <HAL_MspInit+0x5c>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	6193      	str	r3, [r2, #24]
 80017d2:	4b12      	ldr	r3, [pc, #72]	@ (800181c <HAL_MspInit+0x5c>)
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017de:	4b0f      	ldr	r3, [pc, #60]	@ (800181c <HAL_MspInit+0x5c>)
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	4a0e      	ldr	r2, [pc, #56]	@ (800181c <HAL_MspInit+0x5c>)
 80017e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017e8:	61d3      	str	r3, [r2, #28]
 80017ea:	4b0c      	ldr	r3, [pc, #48]	@ (800181c <HAL_MspInit+0x5c>)
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001820 <HAL_MspInit+0x60>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	4a04      	ldr	r2, [pc, #16]	@ (8001820 <HAL_MspInit+0x60>)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001812:	bf00      	nop
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr
 800181c:	40021000 	.word	0x40021000
 8001820:	40010000 	.word	0x40010000

08001824 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b088      	sub	sp, #32
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	f107 0310 	add.w	r3, r7, #16
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a28      	ldr	r2, [pc, #160]	@ (80018e0 <HAL_ADC_MspInit+0xbc>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d149      	bne.n	80018d8 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001844:	4b27      	ldr	r3, [pc, #156]	@ (80018e4 <HAL_ADC_MspInit+0xc0>)
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	4a26      	ldr	r2, [pc, #152]	@ (80018e4 <HAL_ADC_MspInit+0xc0>)
 800184a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800184e:	6193      	str	r3, [r2, #24]
 8001850:	4b24      	ldr	r3, [pc, #144]	@ (80018e4 <HAL_ADC_MspInit+0xc0>)
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800185c:	4b21      	ldr	r3, [pc, #132]	@ (80018e4 <HAL_ADC_MspInit+0xc0>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	4a20      	ldr	r2, [pc, #128]	@ (80018e4 <HAL_ADC_MspInit+0xc0>)
 8001862:	f043 0308 	orr.w	r3, r3, #8
 8001866:	6193      	str	r3, [r2, #24]
 8001868:	4b1e      	ldr	r3, [pc, #120]	@ (80018e4 <HAL_ADC_MspInit+0xc0>)
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	f003 0308 	and.w	r3, r3, #8
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001874:	2302      	movs	r3, #2
 8001876:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001878:	2303      	movs	r3, #3
 800187a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187c:	f107 0310 	add.w	r3, r7, #16
 8001880:	4619      	mov	r1, r3
 8001882:	4819      	ldr	r0, [pc, #100]	@ (80018e8 <HAL_ADC_MspInit+0xc4>)
 8001884:	f000 fef0 	bl	8002668 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001888:	4b18      	ldr	r3, [pc, #96]	@ (80018ec <HAL_ADC_MspInit+0xc8>)
 800188a:	4a19      	ldr	r2, [pc, #100]	@ (80018f0 <HAL_ADC_MspInit+0xcc>)
 800188c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800188e:	4b17      	ldr	r3, [pc, #92]	@ (80018ec <HAL_ADC_MspInit+0xc8>)
 8001890:	2200      	movs	r2, #0
 8001892:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001894:	4b15      	ldr	r3, [pc, #84]	@ (80018ec <HAL_ADC_MspInit+0xc8>)
 8001896:	2200      	movs	r2, #0
 8001898:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800189a:	4b14      	ldr	r3, [pc, #80]	@ (80018ec <HAL_ADC_MspInit+0xc8>)
 800189c:	2280      	movs	r2, #128	@ 0x80
 800189e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018a0:	4b12      	ldr	r3, [pc, #72]	@ (80018ec <HAL_ADC_MspInit+0xc8>)
 80018a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018a6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80018a8:	4b10      	ldr	r3, [pc, #64]	@ (80018ec <HAL_ADC_MspInit+0xc8>)
 80018aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80018ae:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80018b0:	4b0e      	ldr	r3, [pc, #56]	@ (80018ec <HAL_ADC_MspInit+0xc8>)
 80018b2:	2220      	movs	r2, #32
 80018b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80018b6:	4b0d      	ldr	r3, [pc, #52]	@ (80018ec <HAL_ADC_MspInit+0xc8>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80018bc:	480b      	ldr	r0, [pc, #44]	@ (80018ec <HAL_ADC_MspInit+0xc8>)
 80018be:	f000 fd73 	bl	80023a8 <HAL_DMA_Init>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80018c8:	f7ff ff74 	bl	80017b4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a07      	ldr	r2, [pc, #28]	@ (80018ec <HAL_ADC_MspInit+0xc8>)
 80018d0:	621a      	str	r2, [r3, #32]
 80018d2:	4a06      	ldr	r2, [pc, #24]	@ (80018ec <HAL_ADC_MspInit+0xc8>)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80018d8:	bf00      	nop
 80018da:	3720      	adds	r7, #32
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40012400 	.word	0x40012400
 80018e4:	40021000 	.word	0x40021000
 80018e8:	40010c00 	.word	0x40010c00
 80018ec:	20000220 	.word	0x20000220
 80018f0:	40020008 	.word	0x40020008

080018f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 0310 	add.w	r3, r7, #16
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a15      	ldr	r2, [pc, #84]	@ (8001964 <HAL_I2C_MspInit+0x70>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d123      	bne.n	800195c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001914:	4b14      	ldr	r3, [pc, #80]	@ (8001968 <HAL_I2C_MspInit+0x74>)
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	4a13      	ldr	r2, [pc, #76]	@ (8001968 <HAL_I2C_MspInit+0x74>)
 800191a:	f043 0308 	orr.w	r3, r3, #8
 800191e:	6193      	str	r3, [r2, #24]
 8001920:	4b11      	ldr	r3, [pc, #68]	@ (8001968 <HAL_I2C_MspInit+0x74>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	f003 0308 	and.w	r3, r3, #8
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800192c:	23c0      	movs	r3, #192	@ 0xc0
 800192e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001930:	2312      	movs	r3, #18
 8001932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001934:	2303      	movs	r3, #3
 8001936:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001938:	f107 0310 	add.w	r3, r7, #16
 800193c:	4619      	mov	r1, r3
 800193e:	480b      	ldr	r0, [pc, #44]	@ (800196c <HAL_I2C_MspInit+0x78>)
 8001940:	f000 fe92 	bl	8002668 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001944:	4b08      	ldr	r3, [pc, #32]	@ (8001968 <HAL_I2C_MspInit+0x74>)
 8001946:	69db      	ldr	r3, [r3, #28]
 8001948:	4a07      	ldr	r2, [pc, #28]	@ (8001968 <HAL_I2C_MspInit+0x74>)
 800194a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800194e:	61d3      	str	r3, [r2, #28]
 8001950:	4b05      	ldr	r3, [pc, #20]	@ (8001968 <HAL_I2C_MspInit+0x74>)
 8001952:	69db      	ldr	r3, [r3, #28]
 8001954:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800195c:	bf00      	nop
 800195e:	3720      	adds	r7, #32
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40005400 	.word	0x40005400
 8001968:	40021000 	.word	0x40021000
 800196c:	40010c00 	.word	0x40010c00

08001970 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001978:	f107 0310 	add.w	r3, r7, #16
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a1b      	ldr	r2, [pc, #108]	@ (80019f8 <HAL_SPI_MspInit+0x88>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d12f      	bne.n	80019f0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001990:	4b1a      	ldr	r3, [pc, #104]	@ (80019fc <HAL_SPI_MspInit+0x8c>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	4a19      	ldr	r2, [pc, #100]	@ (80019fc <HAL_SPI_MspInit+0x8c>)
 8001996:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800199a:	6193      	str	r3, [r2, #24]
 800199c:	4b17      	ldr	r3, [pc, #92]	@ (80019fc <HAL_SPI_MspInit+0x8c>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a8:	4b14      	ldr	r3, [pc, #80]	@ (80019fc <HAL_SPI_MspInit+0x8c>)
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	4a13      	ldr	r2, [pc, #76]	@ (80019fc <HAL_SPI_MspInit+0x8c>)
 80019ae:	f043 0304 	orr.w	r3, r3, #4
 80019b2:	6193      	str	r3, [r2, #24]
 80019b4:	4b11      	ldr	r3, [pc, #68]	@ (80019fc <HAL_SPI_MspInit+0x8c>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80019c0:	23a0      	movs	r3, #160	@ 0xa0
 80019c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c4:	2302      	movs	r3, #2
 80019c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019c8:	2303      	movs	r3, #3
 80019ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019cc:	f107 0310 	add.w	r3, r7, #16
 80019d0:	4619      	mov	r1, r3
 80019d2:	480b      	ldr	r0, [pc, #44]	@ (8001a00 <HAL_SPI_MspInit+0x90>)
 80019d4:	f000 fe48 	bl	8002668 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019d8:	2340      	movs	r3, #64	@ 0x40
 80019da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e4:	f107 0310 	add.w	r3, r7, #16
 80019e8:	4619      	mov	r1, r3
 80019ea:	4805      	ldr	r0, [pc, #20]	@ (8001a00 <HAL_SPI_MspInit+0x90>)
 80019ec:	f000 fe3c 	bl	8002668 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80019f0:	bf00      	nop
 80019f2:	3720      	adds	r7, #32
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40013000 	.word	0x40013000
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40010800 	.word	0x40010800

08001a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a08:	bf00      	nop
 8001a0a:	e7fd      	b.n	8001a08 <NMI_Handler+0x4>

08001a0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a10:	bf00      	nop
 8001a12:	e7fd      	b.n	8001a10 <HardFault_Handler+0x4>

08001a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a18:	bf00      	nop
 8001a1a:	e7fd      	b.n	8001a18 <MemManage_Handler+0x4>

08001a1c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a20:	bf00      	nop
 8001a22:	e7fd      	b.n	8001a20 <BusFault_Handler+0x4>

08001a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a28:	bf00      	nop
 8001a2a:	e7fd      	b.n	8001a28 <UsageFault_Handler+0x4>

08001a2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr

08001a38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr

08001a44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr

08001a50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a54:	f000 f948 	bl	8001ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a58:	bf00      	nop
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8001a60:	2004      	movs	r0, #4
 8001a62:	f000 ffb7 	bl	80029d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
	...

08001a6c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a70:	4802      	ldr	r0, [pc, #8]	@ (8001a7c <DMA1_Channel1_IRQHandler+0x10>)
 8001a72:	f000 fcf3 	bl	800245c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000220 	.word	0x20000220

08001a80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return 1;
 8001a84:	2301      	movs	r3, #1
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr

08001a8e <_kill>:

int _kill(int pid, int sig)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b082      	sub	sp, #8
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
 8001a96:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a98:	f003 f8f2 	bl	8004c80 <__errno>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2216      	movs	r2, #22
 8001aa0:	601a      	str	r2, [r3, #0]
  return -1;
 8001aa2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <_exit>:

void _exit (int status)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b082      	sub	sp, #8
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ab6:	f04f 31ff 	mov.w	r1, #4294967295
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff ffe7 	bl	8001a8e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ac0:	bf00      	nop
 8001ac2:	e7fd      	b.n	8001ac0 <_exit+0x12>

08001ac4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]
 8001ad4:	e00a      	b.n	8001aec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ad6:	f3af 8000 	nop.w
 8001ada:	4601      	mov	r1, r0
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	1c5a      	adds	r2, r3, #1
 8001ae0:	60ba      	str	r2, [r7, #8]
 8001ae2:	b2ca      	uxtb	r2, r1
 8001ae4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	617b      	str	r3, [r7, #20]
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	dbf0      	blt.n	8001ad6 <_read+0x12>
  }

  return len;
 8001af4:	687b      	ldr	r3, [r7, #4]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b086      	sub	sp, #24
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	60f8      	str	r0, [r7, #12]
 8001b06:	60b9      	str	r1, [r7, #8]
 8001b08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	e009      	b.n	8001b24 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	1c5a      	adds	r2, r3, #1
 8001b14:	60ba      	str	r2, [r7, #8]
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	3301      	adds	r3, #1
 8001b22:	617b      	str	r3, [r7, #20]
 8001b24:	697a      	ldr	r2, [r7, #20]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	dbf1      	blt.n	8001b10 <_write+0x12>
  }
  return len;
 8001b2c:	687b      	ldr	r3, [r7, #4]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <_close>:

int _close(int file)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr

08001b4c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b5c:	605a      	str	r2, [r3, #4]
  return 0;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr

08001b6a <_isatty>:

int _isatty(int file)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b72:	2301      	movs	r3, #1
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr

08001b7e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b085      	sub	sp, #20
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	60f8      	str	r0, [r7, #12]
 8001b86:	60b9      	str	r1, [r7, #8]
 8001b88:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr
	...

08001b98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ba0:	4a14      	ldr	r2, [pc, #80]	@ (8001bf4 <_sbrk+0x5c>)
 8001ba2:	4b15      	ldr	r3, [pc, #84]	@ (8001bf8 <_sbrk+0x60>)
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bac:	4b13      	ldr	r3, [pc, #76]	@ (8001bfc <_sbrk+0x64>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d102      	bne.n	8001bba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bb4:	4b11      	ldr	r3, [pc, #68]	@ (8001bfc <_sbrk+0x64>)
 8001bb6:	4a12      	ldr	r2, [pc, #72]	@ (8001c00 <_sbrk+0x68>)
 8001bb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bba:	4b10      	ldr	r3, [pc, #64]	@ (8001bfc <_sbrk+0x64>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d207      	bcs.n	8001bd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bc8:	f003 f85a 	bl	8004c80 <__errno>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	220c      	movs	r2, #12
 8001bd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd6:	e009      	b.n	8001bec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bd8:	4b08      	ldr	r3, [pc, #32]	@ (8001bfc <_sbrk+0x64>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bde:	4b07      	ldr	r3, [pc, #28]	@ (8001bfc <_sbrk+0x64>)
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4413      	add	r3, r2
 8001be6:	4a05      	ldr	r2, [pc, #20]	@ (8001bfc <_sbrk+0x64>)
 8001be8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bea:	68fb      	ldr	r3, [r7, #12]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20005000 	.word	0x20005000
 8001bf8:	00000400 	.word	0x00000400
 8001bfc:	20000444 	.word	0x20000444
 8001c00:	20000598 	.word	0x20000598

08001c04 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr

08001c10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c10:	f7ff fff8 	bl	8001c04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c14:	480b      	ldr	r0, [pc, #44]	@ (8001c44 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c16:	490c      	ldr	r1, [pc, #48]	@ (8001c48 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c18:	4a0c      	ldr	r2, [pc, #48]	@ (8001c4c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c1c:	e002      	b.n	8001c24 <LoopCopyDataInit>

08001c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c22:	3304      	adds	r3, #4

08001c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c28:	d3f9      	bcc.n	8001c1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c2a:	4a09      	ldr	r2, [pc, #36]	@ (8001c50 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c2c:	4c09      	ldr	r4, [pc, #36]	@ (8001c54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c30:	e001      	b.n	8001c36 <LoopFillZerobss>

08001c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c34:	3204      	adds	r2, #4

08001c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c38:	d3fb      	bcc.n	8001c32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c3a:	f003 f827 	bl	8004c8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c3e:	f7ff fb69 	bl	8001314 <main>
  bx lr
 8001c42:	4770      	bx	lr
  ldr r0, =_sdata
 8001c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c48:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001c4c:	08006e40 	.word	0x08006e40
  ldr r2, =_sbss
 8001c50:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001c54:	20000598 	.word	0x20000598

08001c58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c58:	e7fe      	b.n	8001c58 <ADC1_2_IRQHandler>
	...

08001c5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c60:	4b08      	ldr	r3, [pc, #32]	@ (8001c84 <HAL_Init+0x28>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a07      	ldr	r2, [pc, #28]	@ (8001c84 <HAL_Init+0x28>)
 8001c66:	f043 0310 	orr.w	r3, r3, #16
 8001c6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c6c:	2003      	movs	r0, #3
 8001c6e:	f000 fb59 	bl	8002324 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c72:	200f      	movs	r0, #15
 8001c74:	f000 f808 	bl	8001c88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c78:	f7ff fda2 	bl	80017c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40022000 	.word	0x40022000

08001c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c90:	4b12      	ldr	r3, [pc, #72]	@ (8001cdc <HAL_InitTick+0x54>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	4b12      	ldr	r3, [pc, #72]	@ (8001ce0 <HAL_InitTick+0x58>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	4619      	mov	r1, r3
 8001c9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f000 fb71 	bl	800238e <HAL_SYSTICK_Config>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e00e      	b.n	8001cd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2b0f      	cmp	r3, #15
 8001cba:	d80a      	bhi.n	8001cd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc4:	f000 fb39 	bl	800233a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cc8:	4a06      	ldr	r2, [pc, #24]	@ (8001ce4 <HAL_InitTick+0x5c>)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	e000      	b.n	8001cd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	20000008 	.word	0x20000008
 8001ce4:	20000004 	.word	0x20000004

08001ce8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cec:	4b05      	ldr	r3, [pc, #20]	@ (8001d04 <HAL_IncTick+0x1c>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b05      	ldr	r3, [pc, #20]	@ (8001d08 <HAL_IncTick+0x20>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	4a03      	ldr	r2, [pc, #12]	@ (8001d08 <HAL_IncTick+0x20>)
 8001cfa:	6013      	str	r3, [r2, #0]
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr
 8001d04:	20000008 	.word	0x20000008
 8001d08:	20000448 	.word	0x20000448

08001d0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d10:	4b02      	ldr	r3, [pc, #8]	@ (8001d1c <HAL_GetTick+0x10>)
 8001d12:	681b      	ldr	r3, [r3, #0]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr
 8001d1c:	20000448 	.word	0x20000448

08001d20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d28:	f7ff fff0 	bl	8001d0c <HAL_GetTick>
 8001d2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d38:	d005      	beq.n	8001d46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d64 <HAL_Delay+0x44>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4413      	add	r3, r2
 8001d44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d46:	bf00      	nop
 8001d48:	f7ff ffe0 	bl	8001d0c <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d8f7      	bhi.n	8001d48 <HAL_Delay+0x28>
  {
  }
}
 8001d58:	bf00      	nop
 8001d5a:	bf00      	nop
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000008 	.word	0x20000008

08001d68 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d70:	2300      	movs	r3, #0
 8001d72:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e0be      	b.n	8001f08 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d109      	bne.n	8001dac <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff fd3c 	bl	8001824 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 f9ab 	bl	8002108 <ADC_ConversionStop_Disable>
 8001db2:	4603      	mov	r3, r0
 8001db4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dba:	f003 0310 	and.w	r3, r3, #16
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f040 8099 	bne.w	8001ef6 <HAL_ADC_Init+0x18e>
 8001dc4:	7dfb      	ldrb	r3, [r7, #23]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f040 8095 	bne.w	8001ef6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001dd4:	f023 0302 	bic.w	r3, r3, #2
 8001dd8:	f043 0202 	orr.w	r2, r3, #2
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001de8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	7b1b      	ldrb	r3, [r3, #12]
 8001dee:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001df0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001df2:	68ba      	ldr	r2, [r7, #8]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e00:	d003      	beq.n	8001e0a <HAL_ADC_Init+0xa2>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d102      	bne.n	8001e10 <HAL_ADC_Init+0xa8>
 8001e0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e0e:	e000      	b.n	8001e12 <HAL_ADC_Init+0xaa>
 8001e10:	2300      	movs	r3, #0
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	7d1b      	ldrb	r3, [r3, #20]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d119      	bne.n	8001e54 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	7b1b      	ldrb	r3, [r3, #12]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d109      	bne.n	8001e3c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	035a      	lsls	r2, r3, #13
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e38:	613b      	str	r3, [r7, #16]
 8001e3a:	e00b      	b.n	8001e54 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e40:	f043 0220 	orr.w	r2, r3, #32
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e4c:	f043 0201 	orr.w	r2, r3, #1
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689a      	ldr	r2, [r3, #8]
 8001e6e:	4b28      	ldr	r3, [pc, #160]	@ (8001f10 <HAL_ADC_Init+0x1a8>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6812      	ldr	r2, [r2, #0]
 8001e76:	68b9      	ldr	r1, [r7, #8]
 8001e78:	430b      	orrs	r3, r1
 8001e7a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e84:	d003      	beq.n	8001e8e <HAL_ADC_Init+0x126>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d104      	bne.n	8001e98 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	3b01      	subs	r3, #1
 8001e94:	051b      	lsls	r3, r3, #20
 8001e96:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e9e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	4b18      	ldr	r3, [pc, #96]	@ (8001f14 <HAL_ADC_Init+0x1ac>)
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	68ba      	ldr	r2, [r7, #8]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d10b      	bne.n	8001ed4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec6:	f023 0303 	bic.w	r3, r3, #3
 8001eca:	f043 0201 	orr.w	r2, r3, #1
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ed2:	e018      	b.n	8001f06 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed8:	f023 0312 	bic.w	r3, r3, #18
 8001edc:	f043 0210 	orr.w	r2, r3, #16
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee8:	f043 0201 	orr.w	r2, r3, #1
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ef4:	e007      	b.n	8001f06 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001efa:	f043 0210 	orr.w	r2, r3, #16
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3718      	adds	r7, #24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	ffe1f7fd 	.word	0xffe1f7fd
 8001f14:	ff1f0efe 	.word	0xff1f0efe

08001f18 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f22:	2300      	movs	r3, #0
 8001f24:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001f26:	2300      	movs	r3, #0
 8001f28:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d101      	bne.n	8001f38 <HAL_ADC_ConfigChannel+0x20>
 8001f34:	2302      	movs	r3, #2
 8001f36:	e0dc      	b.n	80020f2 <HAL_ADC_ConfigChannel+0x1da>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	2b06      	cmp	r3, #6
 8001f46:	d81c      	bhi.n	8001f82 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	4613      	mov	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	3b05      	subs	r3, #5
 8001f5a:	221f      	movs	r2, #31
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	4019      	ands	r1, r3
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	6818      	ldr	r0, [r3, #0]
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	3b05      	subs	r3, #5
 8001f74:	fa00 f203 	lsl.w	r2, r0, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f80:	e03c      	b.n	8001ffc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b0c      	cmp	r3, #12
 8001f88:	d81c      	bhi.n	8001fc4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	4613      	mov	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	3b23      	subs	r3, #35	@ 0x23
 8001f9c:	221f      	movs	r2, #31
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	4019      	ands	r1, r3
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	6818      	ldr	r0, [r3, #0]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4413      	add	r3, r2
 8001fb4:	3b23      	subs	r3, #35	@ 0x23
 8001fb6:	fa00 f203 	lsl.w	r2, r0, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	631a      	str	r2, [r3, #48]	@ 0x30
 8001fc2:	e01b      	b.n	8001ffc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4413      	add	r3, r2
 8001fd4:	3b41      	subs	r3, #65	@ 0x41
 8001fd6:	221f      	movs	r2, #31
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	4019      	ands	r1, r3
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	6818      	ldr	r0, [r3, #0]
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	3b41      	subs	r3, #65	@ 0x41
 8001ff0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2b09      	cmp	r3, #9
 8002002:	d91c      	bls.n	800203e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68d9      	ldr	r1, [r3, #12]
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	4613      	mov	r3, r2
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	4413      	add	r3, r2
 8002014:	3b1e      	subs	r3, #30
 8002016:	2207      	movs	r2, #7
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	4019      	ands	r1, r3
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	6898      	ldr	r0, [r3, #8]
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	4613      	mov	r3, r2
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	4413      	add	r3, r2
 800202e:	3b1e      	subs	r3, #30
 8002030:	fa00 f203 	lsl.w	r2, r0, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	430a      	orrs	r2, r1
 800203a:	60da      	str	r2, [r3, #12]
 800203c:	e019      	b.n	8002072 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6919      	ldr	r1, [r3, #16]
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	4613      	mov	r3, r2
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	4413      	add	r3, r2
 800204e:	2207      	movs	r2, #7
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	4019      	ands	r1, r3
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	6898      	ldr	r0, [r3, #8]
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	4613      	mov	r3, r2
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	4413      	add	r3, r2
 8002066:	fa00 f203 	lsl.w	r2, r0, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2b10      	cmp	r3, #16
 8002078:	d003      	beq.n	8002082 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800207e:	2b11      	cmp	r3, #17
 8002080:	d132      	bne.n	80020e8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a1d      	ldr	r2, [pc, #116]	@ (80020fc <HAL_ADC_ConfigChannel+0x1e4>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d125      	bne.n	80020d8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d126      	bne.n	80020e8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80020a8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2b10      	cmp	r3, #16
 80020b0:	d11a      	bne.n	80020e8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020b2:	4b13      	ldr	r3, [pc, #76]	@ (8002100 <HAL_ADC_ConfigChannel+0x1e8>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a13      	ldr	r2, [pc, #76]	@ (8002104 <HAL_ADC_ConfigChannel+0x1ec>)
 80020b8:	fba2 2303 	umull	r2, r3, r2, r3
 80020bc:	0c9a      	lsrs	r2, r3, #18
 80020be:	4613      	mov	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020c8:	e002      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	3b01      	subs	r3, #1
 80020ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f9      	bne.n	80020ca <HAL_ADC_ConfigChannel+0x1b2>
 80020d6:	e007      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020dc:	f043 0220 	orr.w	r2, r3, #32
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr
 80020fc:	40012400 	.word	0x40012400
 8002100:	20000000 	.word	0x20000000
 8002104:	431bde83 	.word	0x431bde83

08002108 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002110:	2300      	movs	r3, #0
 8002112:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b01      	cmp	r3, #1
 8002120:	d12e      	bne.n	8002180 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 0201 	bic.w	r2, r2, #1
 8002130:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002132:	f7ff fdeb 	bl	8001d0c <HAL_GetTick>
 8002136:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002138:	e01b      	b.n	8002172 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800213a:	f7ff fde7 	bl	8001d0c <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d914      	bls.n	8002172 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b01      	cmp	r3, #1
 8002154:	d10d      	bne.n	8002172 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800215a:	f043 0210 	orr.w	r2, r3, #16
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002166:	f043 0201 	orr.w	r2, r3, #1
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e007      	b.n	8002182 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	2b01      	cmp	r3, #1
 800217e:	d0dc      	beq.n	800213a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
	...

0800218c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800219c:	4b0c      	ldr	r3, [pc, #48]	@ (80021d0 <__NVIC_SetPriorityGrouping+0x44>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021a2:	68ba      	ldr	r2, [r7, #8]
 80021a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021a8:	4013      	ands	r3, r2
 80021aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021be:	4a04      	ldr	r2, [pc, #16]	@ (80021d0 <__NVIC_SetPriorityGrouping+0x44>)
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	60d3      	str	r3, [r2, #12]
}
 80021c4:	bf00      	nop
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bc80      	pop	{r7}
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021d8:	4b04      	ldr	r3, [pc, #16]	@ (80021ec <__NVIC_GetPriorityGrouping+0x18>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	0a1b      	lsrs	r3, r3, #8
 80021de:	f003 0307 	and.w	r3, r3, #7
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	db0b      	blt.n	800221a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002202:	79fb      	ldrb	r3, [r7, #7]
 8002204:	f003 021f 	and.w	r2, r3, #31
 8002208:	4906      	ldr	r1, [pc, #24]	@ (8002224 <__NVIC_EnableIRQ+0x34>)
 800220a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220e:	095b      	lsrs	r3, r3, #5
 8002210:	2001      	movs	r0, #1
 8002212:	fa00 f202 	lsl.w	r2, r0, r2
 8002216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr
 8002224:	e000e100 	.word	0xe000e100

08002228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	6039      	str	r1, [r7, #0]
 8002232:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002238:	2b00      	cmp	r3, #0
 800223a:	db0a      	blt.n	8002252 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	b2da      	uxtb	r2, r3
 8002240:	490c      	ldr	r1, [pc, #48]	@ (8002274 <__NVIC_SetPriority+0x4c>)
 8002242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002246:	0112      	lsls	r2, r2, #4
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	440b      	add	r3, r1
 800224c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002250:	e00a      	b.n	8002268 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	b2da      	uxtb	r2, r3
 8002256:	4908      	ldr	r1, [pc, #32]	@ (8002278 <__NVIC_SetPriority+0x50>)
 8002258:	79fb      	ldrb	r3, [r7, #7]
 800225a:	f003 030f 	and.w	r3, r3, #15
 800225e:	3b04      	subs	r3, #4
 8002260:	0112      	lsls	r2, r2, #4
 8002262:	b2d2      	uxtb	r2, r2
 8002264:	440b      	add	r3, r1
 8002266:	761a      	strb	r2, [r3, #24]
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	bc80      	pop	{r7}
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	e000e100 	.word	0xe000e100
 8002278:	e000ed00 	.word	0xe000ed00

0800227c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800227c:	b480      	push	{r7}
 800227e:	b089      	sub	sp, #36	@ 0x24
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	f1c3 0307 	rsb	r3, r3, #7
 8002296:	2b04      	cmp	r3, #4
 8002298:	bf28      	it	cs
 800229a:	2304      	movcs	r3, #4
 800229c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	3304      	adds	r3, #4
 80022a2:	2b06      	cmp	r3, #6
 80022a4:	d902      	bls.n	80022ac <NVIC_EncodePriority+0x30>
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	3b03      	subs	r3, #3
 80022aa:	e000      	b.n	80022ae <NVIC_EncodePriority+0x32>
 80022ac:	2300      	movs	r3, #0
 80022ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b0:	f04f 32ff 	mov.w	r2, #4294967295
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43da      	mvns	r2, r3
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	401a      	ands	r2, r3
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022c4:	f04f 31ff 	mov.w	r1, #4294967295
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	fa01 f303 	lsl.w	r3, r1, r3
 80022ce:	43d9      	mvns	r1, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d4:	4313      	orrs	r3, r2
         );
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3724      	adds	r7, #36	@ 0x24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr

080022e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3b01      	subs	r3, #1
 80022ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022f0:	d301      	bcc.n	80022f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022f2:	2301      	movs	r3, #1
 80022f4:	e00f      	b.n	8002316 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002320 <SysTick_Config+0x40>)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022fe:	210f      	movs	r1, #15
 8002300:	f04f 30ff 	mov.w	r0, #4294967295
 8002304:	f7ff ff90 	bl	8002228 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002308:	4b05      	ldr	r3, [pc, #20]	@ (8002320 <SysTick_Config+0x40>)
 800230a:	2200      	movs	r2, #0
 800230c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800230e:	4b04      	ldr	r3, [pc, #16]	@ (8002320 <SysTick_Config+0x40>)
 8002310:	2207      	movs	r2, #7
 8002312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	e000e010 	.word	0xe000e010

08002324 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f7ff ff2d 	bl	800218c <__NVIC_SetPriorityGrouping>
}
 8002332:	bf00      	nop
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800233a:	b580      	push	{r7, lr}
 800233c:	b086      	sub	sp, #24
 800233e:	af00      	add	r7, sp, #0
 8002340:	4603      	mov	r3, r0
 8002342:	60b9      	str	r1, [r7, #8]
 8002344:	607a      	str	r2, [r7, #4]
 8002346:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800234c:	f7ff ff42 	bl	80021d4 <__NVIC_GetPriorityGrouping>
 8002350:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	68b9      	ldr	r1, [r7, #8]
 8002356:	6978      	ldr	r0, [r7, #20]
 8002358:	f7ff ff90 	bl	800227c <NVIC_EncodePriority>
 800235c:	4602      	mov	r2, r0
 800235e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002362:	4611      	mov	r1, r2
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff ff5f 	bl	8002228 <__NVIC_SetPriority>
}
 800236a:	bf00      	nop
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0
 8002378:	4603      	mov	r3, r0
 800237a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800237c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff ff35 	bl	80021f0 <__NVIC_EnableIRQ>
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7ff ffa2 	bl	80022e0 <SysTick_Config>
 800239c:	4603      	mov	r3, r0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e043      	b.n	8002446 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	461a      	mov	r2, r3
 80023c4:	4b22      	ldr	r3, [pc, #136]	@ (8002450 <HAL_DMA_Init+0xa8>)
 80023c6:	4413      	add	r3, r2
 80023c8:	4a22      	ldr	r2, [pc, #136]	@ (8002454 <HAL_DMA_Init+0xac>)
 80023ca:	fba2 2303 	umull	r2, r3, r2, r3
 80023ce:	091b      	lsrs	r3, r3, #4
 80023d0:	009a      	lsls	r2, r3, #2
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a1f      	ldr	r2, [pc, #124]	@ (8002458 <HAL_DMA_Init+0xb0>)
 80023da:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2202      	movs	r2, #2
 80023e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80023f2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80023f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002400:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800240c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002418:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	4313      	orrs	r3, r2
 8002424:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3714      	adds	r7, #20
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr
 8002450:	bffdfff8 	.word	0xbffdfff8
 8002454:	cccccccd 	.word	0xcccccccd
 8002458:	40020000 	.word	0x40020000

0800245c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002478:	2204      	movs	r2, #4
 800247a:	409a      	lsls	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	4013      	ands	r3, r2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d04f      	beq.n	8002524 <HAL_DMA_IRQHandler+0xc8>
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	f003 0304 	and.w	r3, r3, #4
 800248a:	2b00      	cmp	r3, #0
 800248c:	d04a      	beq.n	8002524 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0320 	and.w	r3, r3, #32
 8002498:	2b00      	cmp	r3, #0
 800249a:	d107      	bne.n	80024ac <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 0204 	bic.w	r2, r2, #4
 80024aa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a66      	ldr	r2, [pc, #408]	@ (800264c <HAL_DMA_IRQHandler+0x1f0>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d029      	beq.n	800250a <HAL_DMA_IRQHandler+0xae>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a65      	ldr	r2, [pc, #404]	@ (8002650 <HAL_DMA_IRQHandler+0x1f4>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d022      	beq.n	8002506 <HAL_DMA_IRQHandler+0xaa>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a63      	ldr	r2, [pc, #396]	@ (8002654 <HAL_DMA_IRQHandler+0x1f8>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d01a      	beq.n	8002500 <HAL_DMA_IRQHandler+0xa4>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a62      	ldr	r2, [pc, #392]	@ (8002658 <HAL_DMA_IRQHandler+0x1fc>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d012      	beq.n	80024fa <HAL_DMA_IRQHandler+0x9e>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a60      	ldr	r2, [pc, #384]	@ (800265c <HAL_DMA_IRQHandler+0x200>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d00a      	beq.n	80024f4 <HAL_DMA_IRQHandler+0x98>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a5f      	ldr	r2, [pc, #380]	@ (8002660 <HAL_DMA_IRQHandler+0x204>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d102      	bne.n	80024ee <HAL_DMA_IRQHandler+0x92>
 80024e8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80024ec:	e00e      	b.n	800250c <HAL_DMA_IRQHandler+0xb0>
 80024ee:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80024f2:	e00b      	b.n	800250c <HAL_DMA_IRQHandler+0xb0>
 80024f4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80024f8:	e008      	b.n	800250c <HAL_DMA_IRQHandler+0xb0>
 80024fa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80024fe:	e005      	b.n	800250c <HAL_DMA_IRQHandler+0xb0>
 8002500:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002504:	e002      	b.n	800250c <HAL_DMA_IRQHandler+0xb0>
 8002506:	2340      	movs	r3, #64	@ 0x40
 8002508:	e000      	b.n	800250c <HAL_DMA_IRQHandler+0xb0>
 800250a:	2304      	movs	r3, #4
 800250c:	4a55      	ldr	r2, [pc, #340]	@ (8002664 <HAL_DMA_IRQHandler+0x208>)
 800250e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 8094 	beq.w	8002642 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002522:	e08e      	b.n	8002642 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002528:	2202      	movs	r2, #2
 800252a:	409a      	lsls	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4013      	ands	r3, r2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d056      	beq.n	80025e2 <HAL_DMA_IRQHandler+0x186>
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d051      	beq.n	80025e2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0320 	and.w	r3, r3, #32
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10b      	bne.n	8002564 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 020a 	bic.w	r2, r2, #10
 800255a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a38      	ldr	r2, [pc, #224]	@ (800264c <HAL_DMA_IRQHandler+0x1f0>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d029      	beq.n	80025c2 <HAL_DMA_IRQHandler+0x166>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a37      	ldr	r2, [pc, #220]	@ (8002650 <HAL_DMA_IRQHandler+0x1f4>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d022      	beq.n	80025be <HAL_DMA_IRQHandler+0x162>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a35      	ldr	r2, [pc, #212]	@ (8002654 <HAL_DMA_IRQHandler+0x1f8>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d01a      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x15c>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a34      	ldr	r2, [pc, #208]	@ (8002658 <HAL_DMA_IRQHandler+0x1fc>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d012      	beq.n	80025b2 <HAL_DMA_IRQHandler+0x156>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a32      	ldr	r2, [pc, #200]	@ (800265c <HAL_DMA_IRQHandler+0x200>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d00a      	beq.n	80025ac <HAL_DMA_IRQHandler+0x150>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a31      	ldr	r2, [pc, #196]	@ (8002660 <HAL_DMA_IRQHandler+0x204>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d102      	bne.n	80025a6 <HAL_DMA_IRQHandler+0x14a>
 80025a0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80025a4:	e00e      	b.n	80025c4 <HAL_DMA_IRQHandler+0x168>
 80025a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025aa:	e00b      	b.n	80025c4 <HAL_DMA_IRQHandler+0x168>
 80025ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025b0:	e008      	b.n	80025c4 <HAL_DMA_IRQHandler+0x168>
 80025b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025b6:	e005      	b.n	80025c4 <HAL_DMA_IRQHandler+0x168>
 80025b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025bc:	e002      	b.n	80025c4 <HAL_DMA_IRQHandler+0x168>
 80025be:	2320      	movs	r3, #32
 80025c0:	e000      	b.n	80025c4 <HAL_DMA_IRQHandler+0x168>
 80025c2:	2302      	movs	r3, #2
 80025c4:	4a27      	ldr	r2, [pc, #156]	@ (8002664 <HAL_DMA_IRQHandler+0x208>)
 80025c6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d034      	beq.n	8002642 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80025e0:	e02f      	b.n	8002642 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e6:	2208      	movs	r2, #8
 80025e8:	409a      	lsls	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	4013      	ands	r3, r2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d028      	beq.n	8002644 <HAL_DMA_IRQHandler+0x1e8>
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	f003 0308 	and.w	r3, r3, #8
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d023      	beq.n	8002644 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 020e 	bic.w	r2, r2, #14
 800260a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002614:	2101      	movs	r1, #1
 8002616:	fa01 f202 	lsl.w	r2, r1, r2
 800261a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002636:	2b00      	cmp	r3, #0
 8002638:	d004      	beq.n	8002644 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	4798      	blx	r3
    }
  }
  return;
 8002642:	bf00      	nop
 8002644:	bf00      	nop
}
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40020008 	.word	0x40020008
 8002650:	4002001c 	.word	0x4002001c
 8002654:	40020030 	.word	0x40020030
 8002658:	40020044 	.word	0x40020044
 800265c:	40020058 	.word	0x40020058
 8002660:	4002006c 	.word	0x4002006c
 8002664:	40020000 	.word	0x40020000

08002668 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002668:	b480      	push	{r7}
 800266a:	b08b      	sub	sp, #44	@ 0x2c
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002672:	2300      	movs	r3, #0
 8002674:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002676:	2300      	movs	r3, #0
 8002678:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800267a:	e169      	b.n	8002950 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800267c:	2201      	movs	r2, #1
 800267e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	69fa      	ldr	r2, [r7, #28]
 800268c:	4013      	ands	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	429a      	cmp	r2, r3
 8002696:	f040 8158 	bne.w	800294a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	4a9a      	ldr	r2, [pc, #616]	@ (8002908 <HAL_GPIO_Init+0x2a0>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d05e      	beq.n	8002762 <HAL_GPIO_Init+0xfa>
 80026a4:	4a98      	ldr	r2, [pc, #608]	@ (8002908 <HAL_GPIO_Init+0x2a0>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d875      	bhi.n	8002796 <HAL_GPIO_Init+0x12e>
 80026aa:	4a98      	ldr	r2, [pc, #608]	@ (800290c <HAL_GPIO_Init+0x2a4>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d058      	beq.n	8002762 <HAL_GPIO_Init+0xfa>
 80026b0:	4a96      	ldr	r2, [pc, #600]	@ (800290c <HAL_GPIO_Init+0x2a4>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d86f      	bhi.n	8002796 <HAL_GPIO_Init+0x12e>
 80026b6:	4a96      	ldr	r2, [pc, #600]	@ (8002910 <HAL_GPIO_Init+0x2a8>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d052      	beq.n	8002762 <HAL_GPIO_Init+0xfa>
 80026bc:	4a94      	ldr	r2, [pc, #592]	@ (8002910 <HAL_GPIO_Init+0x2a8>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d869      	bhi.n	8002796 <HAL_GPIO_Init+0x12e>
 80026c2:	4a94      	ldr	r2, [pc, #592]	@ (8002914 <HAL_GPIO_Init+0x2ac>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d04c      	beq.n	8002762 <HAL_GPIO_Init+0xfa>
 80026c8:	4a92      	ldr	r2, [pc, #584]	@ (8002914 <HAL_GPIO_Init+0x2ac>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d863      	bhi.n	8002796 <HAL_GPIO_Init+0x12e>
 80026ce:	4a92      	ldr	r2, [pc, #584]	@ (8002918 <HAL_GPIO_Init+0x2b0>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d046      	beq.n	8002762 <HAL_GPIO_Init+0xfa>
 80026d4:	4a90      	ldr	r2, [pc, #576]	@ (8002918 <HAL_GPIO_Init+0x2b0>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d85d      	bhi.n	8002796 <HAL_GPIO_Init+0x12e>
 80026da:	2b12      	cmp	r3, #18
 80026dc:	d82a      	bhi.n	8002734 <HAL_GPIO_Init+0xcc>
 80026de:	2b12      	cmp	r3, #18
 80026e0:	d859      	bhi.n	8002796 <HAL_GPIO_Init+0x12e>
 80026e2:	a201      	add	r2, pc, #4	@ (adr r2, 80026e8 <HAL_GPIO_Init+0x80>)
 80026e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e8:	08002763 	.word	0x08002763
 80026ec:	0800273d 	.word	0x0800273d
 80026f0:	0800274f 	.word	0x0800274f
 80026f4:	08002791 	.word	0x08002791
 80026f8:	08002797 	.word	0x08002797
 80026fc:	08002797 	.word	0x08002797
 8002700:	08002797 	.word	0x08002797
 8002704:	08002797 	.word	0x08002797
 8002708:	08002797 	.word	0x08002797
 800270c:	08002797 	.word	0x08002797
 8002710:	08002797 	.word	0x08002797
 8002714:	08002797 	.word	0x08002797
 8002718:	08002797 	.word	0x08002797
 800271c:	08002797 	.word	0x08002797
 8002720:	08002797 	.word	0x08002797
 8002724:	08002797 	.word	0x08002797
 8002728:	08002797 	.word	0x08002797
 800272c:	08002745 	.word	0x08002745
 8002730:	08002759 	.word	0x08002759
 8002734:	4a79      	ldr	r2, [pc, #484]	@ (800291c <HAL_GPIO_Init+0x2b4>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d013      	beq.n	8002762 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800273a:	e02c      	b.n	8002796 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	623b      	str	r3, [r7, #32]
          break;
 8002742:	e029      	b.n	8002798 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	3304      	adds	r3, #4
 800274a:	623b      	str	r3, [r7, #32]
          break;
 800274c:	e024      	b.n	8002798 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	3308      	adds	r3, #8
 8002754:	623b      	str	r3, [r7, #32]
          break;
 8002756:	e01f      	b.n	8002798 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	330c      	adds	r3, #12
 800275e:	623b      	str	r3, [r7, #32]
          break;
 8002760:	e01a      	b.n	8002798 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d102      	bne.n	8002770 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800276a:	2304      	movs	r3, #4
 800276c:	623b      	str	r3, [r7, #32]
          break;
 800276e:	e013      	b.n	8002798 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d105      	bne.n	8002784 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002778:	2308      	movs	r3, #8
 800277a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	69fa      	ldr	r2, [r7, #28]
 8002780:	611a      	str	r2, [r3, #16]
          break;
 8002782:	e009      	b.n	8002798 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002784:	2308      	movs	r3, #8
 8002786:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	69fa      	ldr	r2, [r7, #28]
 800278c:	615a      	str	r2, [r3, #20]
          break;
 800278e:	e003      	b.n	8002798 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002790:	2300      	movs	r3, #0
 8002792:	623b      	str	r3, [r7, #32]
          break;
 8002794:	e000      	b.n	8002798 <HAL_GPIO_Init+0x130>
          break;
 8002796:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	2bff      	cmp	r3, #255	@ 0xff
 800279c:	d801      	bhi.n	80027a2 <HAL_GPIO_Init+0x13a>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	e001      	b.n	80027a6 <HAL_GPIO_Init+0x13e>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	3304      	adds	r3, #4
 80027a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	2bff      	cmp	r3, #255	@ 0xff
 80027ac:	d802      	bhi.n	80027b4 <HAL_GPIO_Init+0x14c>
 80027ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	e002      	b.n	80027ba <HAL_GPIO_Init+0x152>
 80027b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b6:	3b08      	subs	r3, #8
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	210f      	movs	r1, #15
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	fa01 f303 	lsl.w	r3, r1, r3
 80027c8:	43db      	mvns	r3, r3
 80027ca:	401a      	ands	r2, r3
 80027cc:	6a39      	ldr	r1, [r7, #32]
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	fa01 f303 	lsl.w	r3, r1, r3
 80027d4:	431a      	orrs	r2, r3
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f000 80b1 	beq.w	800294a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027e8:	4b4d      	ldr	r3, [pc, #308]	@ (8002920 <HAL_GPIO_Init+0x2b8>)
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	4a4c      	ldr	r2, [pc, #304]	@ (8002920 <HAL_GPIO_Init+0x2b8>)
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	6193      	str	r3, [r2, #24]
 80027f4:	4b4a      	ldr	r3, [pc, #296]	@ (8002920 <HAL_GPIO_Init+0x2b8>)
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	60bb      	str	r3, [r7, #8]
 80027fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002800:	4a48      	ldr	r2, [pc, #288]	@ (8002924 <HAL_GPIO_Init+0x2bc>)
 8002802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002804:	089b      	lsrs	r3, r3, #2
 8002806:	3302      	adds	r3, #2
 8002808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800280c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800280e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002810:	f003 0303 	and.w	r3, r3, #3
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	220f      	movs	r2, #15
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	43db      	mvns	r3, r3
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	4013      	ands	r3, r2
 8002822:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a40      	ldr	r2, [pc, #256]	@ (8002928 <HAL_GPIO_Init+0x2c0>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d013      	beq.n	8002854 <HAL_GPIO_Init+0x1ec>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a3f      	ldr	r2, [pc, #252]	@ (800292c <HAL_GPIO_Init+0x2c4>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d00d      	beq.n	8002850 <HAL_GPIO_Init+0x1e8>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a3e      	ldr	r2, [pc, #248]	@ (8002930 <HAL_GPIO_Init+0x2c8>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d007      	beq.n	800284c <HAL_GPIO_Init+0x1e4>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a3d      	ldr	r2, [pc, #244]	@ (8002934 <HAL_GPIO_Init+0x2cc>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d101      	bne.n	8002848 <HAL_GPIO_Init+0x1e0>
 8002844:	2303      	movs	r3, #3
 8002846:	e006      	b.n	8002856 <HAL_GPIO_Init+0x1ee>
 8002848:	2304      	movs	r3, #4
 800284a:	e004      	b.n	8002856 <HAL_GPIO_Init+0x1ee>
 800284c:	2302      	movs	r3, #2
 800284e:	e002      	b.n	8002856 <HAL_GPIO_Init+0x1ee>
 8002850:	2301      	movs	r3, #1
 8002852:	e000      	b.n	8002856 <HAL_GPIO_Init+0x1ee>
 8002854:	2300      	movs	r3, #0
 8002856:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002858:	f002 0203 	and.w	r2, r2, #3
 800285c:	0092      	lsls	r2, r2, #2
 800285e:	4093      	lsls	r3, r2
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	4313      	orrs	r3, r2
 8002864:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002866:	492f      	ldr	r1, [pc, #188]	@ (8002924 <HAL_GPIO_Init+0x2bc>)
 8002868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286a:	089b      	lsrs	r3, r3, #2
 800286c:	3302      	adds	r3, #2
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d006      	beq.n	800288e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002880:	4b2d      	ldr	r3, [pc, #180]	@ (8002938 <HAL_GPIO_Init+0x2d0>)
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	492c      	ldr	r1, [pc, #176]	@ (8002938 <HAL_GPIO_Init+0x2d0>)
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	4313      	orrs	r3, r2
 800288a:	608b      	str	r3, [r1, #8]
 800288c:	e006      	b.n	800289c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800288e:	4b2a      	ldr	r3, [pc, #168]	@ (8002938 <HAL_GPIO_Init+0x2d0>)
 8002890:	689a      	ldr	r2, [r3, #8]
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	43db      	mvns	r3, r3
 8002896:	4928      	ldr	r1, [pc, #160]	@ (8002938 <HAL_GPIO_Init+0x2d0>)
 8002898:	4013      	ands	r3, r2
 800289a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d006      	beq.n	80028b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028a8:	4b23      	ldr	r3, [pc, #140]	@ (8002938 <HAL_GPIO_Init+0x2d0>)
 80028aa:	68da      	ldr	r2, [r3, #12]
 80028ac:	4922      	ldr	r1, [pc, #136]	@ (8002938 <HAL_GPIO_Init+0x2d0>)
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	60cb      	str	r3, [r1, #12]
 80028b4:	e006      	b.n	80028c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028b6:	4b20      	ldr	r3, [pc, #128]	@ (8002938 <HAL_GPIO_Init+0x2d0>)
 80028b8:	68da      	ldr	r2, [r3, #12]
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	43db      	mvns	r3, r3
 80028be:	491e      	ldr	r1, [pc, #120]	@ (8002938 <HAL_GPIO_Init+0x2d0>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d006      	beq.n	80028de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028d0:	4b19      	ldr	r3, [pc, #100]	@ (8002938 <HAL_GPIO_Init+0x2d0>)
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	4918      	ldr	r1, [pc, #96]	@ (8002938 <HAL_GPIO_Init+0x2d0>)
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	4313      	orrs	r3, r2
 80028da:	604b      	str	r3, [r1, #4]
 80028dc:	e006      	b.n	80028ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028de:	4b16      	ldr	r3, [pc, #88]	@ (8002938 <HAL_GPIO_Init+0x2d0>)
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	43db      	mvns	r3, r3
 80028e6:	4914      	ldr	r1, [pc, #80]	@ (8002938 <HAL_GPIO_Init+0x2d0>)
 80028e8:	4013      	ands	r3, r2
 80028ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d021      	beq.n	800293c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002938 <HAL_GPIO_Init+0x2d0>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	490e      	ldr	r1, [pc, #56]	@ (8002938 <HAL_GPIO_Init+0x2d0>)
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	4313      	orrs	r3, r2
 8002902:	600b      	str	r3, [r1, #0]
 8002904:	e021      	b.n	800294a <HAL_GPIO_Init+0x2e2>
 8002906:	bf00      	nop
 8002908:	10320000 	.word	0x10320000
 800290c:	10310000 	.word	0x10310000
 8002910:	10220000 	.word	0x10220000
 8002914:	10210000 	.word	0x10210000
 8002918:	10120000 	.word	0x10120000
 800291c:	10110000 	.word	0x10110000
 8002920:	40021000 	.word	0x40021000
 8002924:	40010000 	.word	0x40010000
 8002928:	40010800 	.word	0x40010800
 800292c:	40010c00 	.word	0x40010c00
 8002930:	40011000 	.word	0x40011000
 8002934:	40011400 	.word	0x40011400
 8002938:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800293c:	4b0b      	ldr	r3, [pc, #44]	@ (800296c <HAL_GPIO_Init+0x304>)
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	43db      	mvns	r3, r3
 8002944:	4909      	ldr	r1, [pc, #36]	@ (800296c <HAL_GPIO_Init+0x304>)
 8002946:	4013      	ands	r3, r2
 8002948:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800294a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294c:	3301      	adds	r3, #1
 800294e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002956:	fa22 f303 	lsr.w	r3, r2, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	f47f ae8e 	bne.w	800267c <HAL_GPIO_Init+0x14>
  }
}
 8002960:	bf00      	nop
 8002962:	bf00      	nop
 8002964:	372c      	adds	r7, #44	@ 0x2c
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr
 800296c:	40010400 	.word	0x40010400

08002970 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	460b      	mov	r3, r1
 800297a:	807b      	strh	r3, [r7, #2]
 800297c:	4613      	mov	r3, r2
 800297e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002980:	787b      	ldrb	r3, [r7, #1]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d003      	beq.n	800298e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002986:	887a      	ldrh	r2, [r7, #2]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800298c:	e003      	b.n	8002996 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800298e:	887b      	ldrh	r3, [r7, #2]
 8002990:	041a      	lsls	r2, r3, #16
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	611a      	str	r2, [r3, #16]
}
 8002996:	bf00      	nop
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	bc80      	pop	{r7}
 800299e:	4770      	bx	lr

080029a0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	460b      	mov	r3, r1
 80029aa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029b2:	887a      	ldrh	r2, [r7, #2]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4013      	ands	r3, r2
 80029b8:	041a      	lsls	r2, r3, #16
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	43d9      	mvns	r1, r3
 80029be:	887b      	ldrh	r3, [r7, #2]
 80029c0:	400b      	ands	r3, r1
 80029c2:	431a      	orrs	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	611a      	str	r2, [r3, #16]
}
 80029c8:	bf00      	nop
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr
	...

080029d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	4603      	mov	r3, r0
 80029dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80029de:	4b08      	ldr	r3, [pc, #32]	@ (8002a00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029e0:	695a      	ldr	r2, [r3, #20]
 80029e2:	88fb      	ldrh	r3, [r7, #6]
 80029e4:	4013      	ands	r3, r2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d006      	beq.n	80029f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029ea:	4a05      	ldr	r2, [pc, #20]	@ (8002a00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029ec:	88fb      	ldrh	r3, [r7, #6]
 80029ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029f0:	88fb      	ldrh	r3, [r7, #6]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fe fc6c 	bl	80012d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80029f8:	bf00      	nop
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40010400 	.word	0x40010400

08002a04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e12b      	b.n	8002c6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d106      	bne.n	8002a30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7fe ff62 	bl	80018f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2224      	movs	r2, #36	@ 0x24
 8002a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 0201 	bic.w	r2, r2, #1
 8002a46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a68:	f000 fcda 	bl	8003420 <HAL_RCC_GetPCLK1Freq>
 8002a6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	4a81      	ldr	r2, [pc, #516]	@ (8002c78 <HAL_I2C_Init+0x274>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d807      	bhi.n	8002a88 <HAL_I2C_Init+0x84>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4a80      	ldr	r2, [pc, #512]	@ (8002c7c <HAL_I2C_Init+0x278>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	bf94      	ite	ls
 8002a80:	2301      	movls	r3, #1
 8002a82:	2300      	movhi	r3, #0
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	e006      	b.n	8002a96 <HAL_I2C_Init+0x92>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	4a7d      	ldr	r2, [pc, #500]	@ (8002c80 <HAL_I2C_Init+0x27c>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	bf94      	ite	ls
 8002a90:	2301      	movls	r3, #1
 8002a92:	2300      	movhi	r3, #0
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e0e7      	b.n	8002c6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	4a78      	ldr	r2, [pc, #480]	@ (8002c84 <HAL_I2C_Init+0x280>)
 8002aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa6:	0c9b      	lsrs	r3, r3, #18
 8002aa8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68ba      	ldr	r2, [r7, #8]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	4a6a      	ldr	r2, [pc, #424]	@ (8002c78 <HAL_I2C_Init+0x274>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d802      	bhi.n	8002ad8 <HAL_I2C_Init+0xd4>
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	e009      	b.n	8002aec <HAL_I2C_Init+0xe8>
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002ade:	fb02 f303 	mul.w	r3, r2, r3
 8002ae2:	4a69      	ldr	r2, [pc, #420]	@ (8002c88 <HAL_I2C_Init+0x284>)
 8002ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae8:	099b      	lsrs	r3, r3, #6
 8002aea:	3301      	adds	r3, #1
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6812      	ldr	r2, [r2, #0]
 8002af0:	430b      	orrs	r3, r1
 8002af2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002afe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	495c      	ldr	r1, [pc, #368]	@ (8002c78 <HAL_I2C_Init+0x274>)
 8002b08:	428b      	cmp	r3, r1
 8002b0a:	d819      	bhi.n	8002b40 <HAL_I2C_Init+0x13c>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	1e59      	subs	r1, r3, #1
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b1a:	1c59      	adds	r1, r3, #1
 8002b1c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002b20:	400b      	ands	r3, r1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00a      	beq.n	8002b3c <HAL_I2C_Init+0x138>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	1e59      	subs	r1, r3, #1
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b34:	3301      	adds	r3, #1
 8002b36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b3a:	e051      	b.n	8002be0 <HAL_I2C_Init+0x1dc>
 8002b3c:	2304      	movs	r3, #4
 8002b3e:	e04f      	b.n	8002be0 <HAL_I2C_Init+0x1dc>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d111      	bne.n	8002b6c <HAL_I2C_Init+0x168>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	1e58      	subs	r0, r3, #1
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6859      	ldr	r1, [r3, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	440b      	add	r3, r1
 8002b56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	bf0c      	ite	eq
 8002b64:	2301      	moveq	r3, #1
 8002b66:	2300      	movne	r3, #0
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	e012      	b.n	8002b92 <HAL_I2C_Init+0x18e>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	1e58      	subs	r0, r3, #1
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6859      	ldr	r1, [r3, #4]
 8002b74:	460b      	mov	r3, r1
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	0099      	lsls	r1, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b82:	3301      	adds	r3, #1
 8002b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	bf0c      	ite	eq
 8002b8c:	2301      	moveq	r3, #1
 8002b8e:	2300      	movne	r3, #0
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <HAL_I2C_Init+0x196>
 8002b96:	2301      	movs	r3, #1
 8002b98:	e022      	b.n	8002be0 <HAL_I2C_Init+0x1dc>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10e      	bne.n	8002bc0 <HAL_I2C_Init+0x1bc>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	1e58      	subs	r0, r3, #1
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6859      	ldr	r1, [r3, #4]
 8002baa:	460b      	mov	r3, r1
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	440b      	add	r3, r1
 8002bb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bbe:	e00f      	b.n	8002be0 <HAL_I2C_Init+0x1dc>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	1e58      	subs	r0, r3, #1
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6859      	ldr	r1, [r3, #4]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	440b      	add	r3, r1
 8002bce:	0099      	lsls	r1, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bdc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002be0:	6879      	ldr	r1, [r7, #4]
 8002be2:	6809      	ldr	r1, [r1, #0]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69da      	ldr	r2, [r3, #28]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002c0e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6911      	ldr	r1, [r2, #16]
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	68d2      	ldr	r2, [r2, #12]
 8002c1a:	4311      	orrs	r1, r2
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6812      	ldr	r2, [r2, #0]
 8002c20:	430b      	orrs	r3, r1
 8002c22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	695a      	ldr	r2, [r3, #20]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 0201 	orr.w	r2, r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2220      	movs	r2, #32
 8002c5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	000186a0 	.word	0x000186a0
 8002c7c:	001e847f 	.word	0x001e847f
 8002c80:	003d08ff 	.word	0x003d08ff
 8002c84:	431bde83 	.word	0x431bde83
 8002c88:	10624dd3 	.word	0x10624dd3

08002c8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e272      	b.n	8003184 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f000 8087 	beq.w	8002dba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cac:	4b92      	ldr	r3, [pc, #584]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f003 030c 	and.w	r3, r3, #12
 8002cb4:	2b04      	cmp	r3, #4
 8002cb6:	d00c      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cb8:	4b8f      	ldr	r3, [pc, #572]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f003 030c 	and.w	r3, r3, #12
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	d112      	bne.n	8002cea <HAL_RCC_OscConfig+0x5e>
 8002cc4:	4b8c      	ldr	r3, [pc, #560]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ccc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cd0:	d10b      	bne.n	8002cea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd2:	4b89      	ldr	r3, [pc, #548]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d06c      	beq.n	8002db8 <HAL_RCC_OscConfig+0x12c>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d168      	bne.n	8002db8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e24c      	b.n	8003184 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cf2:	d106      	bne.n	8002d02 <HAL_RCC_OscConfig+0x76>
 8002cf4:	4b80      	ldr	r3, [pc, #512]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a7f      	ldr	r2, [pc, #508]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002cfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cfe:	6013      	str	r3, [r2, #0]
 8002d00:	e02e      	b.n	8002d60 <HAL_RCC_OscConfig+0xd4>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10c      	bne.n	8002d24 <HAL_RCC_OscConfig+0x98>
 8002d0a:	4b7b      	ldr	r3, [pc, #492]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a7a      	ldr	r2, [pc, #488]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002d10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	4b78      	ldr	r3, [pc, #480]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a77      	ldr	r2, [pc, #476]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002d1c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d20:	6013      	str	r3, [r2, #0]
 8002d22:	e01d      	b.n	8002d60 <HAL_RCC_OscConfig+0xd4>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d2c:	d10c      	bne.n	8002d48 <HAL_RCC_OscConfig+0xbc>
 8002d2e:	4b72      	ldr	r3, [pc, #456]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a71      	ldr	r2, [pc, #452]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002d34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	4b6f      	ldr	r3, [pc, #444]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a6e      	ldr	r2, [pc, #440]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002d40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	e00b      	b.n	8002d60 <HAL_RCC_OscConfig+0xd4>
 8002d48:	4b6b      	ldr	r3, [pc, #428]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a6a      	ldr	r2, [pc, #424]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002d4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d52:	6013      	str	r3, [r2, #0]
 8002d54:	4b68      	ldr	r3, [pc, #416]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a67      	ldr	r2, [pc, #412]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002d5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d013      	beq.n	8002d90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d68:	f7fe ffd0 	bl	8001d0c <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d70:	f7fe ffcc 	bl	8001d0c <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b64      	cmp	r3, #100	@ 0x64
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e200      	b.n	8003184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d82:	4b5d      	ldr	r3, [pc, #372]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0f0      	beq.n	8002d70 <HAL_RCC_OscConfig+0xe4>
 8002d8e:	e014      	b.n	8002dba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d90:	f7fe ffbc 	bl	8001d0c <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d98:	f7fe ffb8 	bl	8001d0c <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b64      	cmp	r3, #100	@ 0x64
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e1ec      	b.n	8003184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002daa:	4b53      	ldr	r3, [pc, #332]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1f0      	bne.n	8002d98 <HAL_RCC_OscConfig+0x10c>
 8002db6:	e000      	b.n	8002dba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d063      	beq.n	8002e8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dc6:	4b4c      	ldr	r3, [pc, #304]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f003 030c 	and.w	r3, r3, #12
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00b      	beq.n	8002dea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002dd2:	4b49      	ldr	r3, [pc, #292]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f003 030c 	and.w	r3, r3, #12
 8002dda:	2b08      	cmp	r3, #8
 8002ddc:	d11c      	bne.n	8002e18 <HAL_RCC_OscConfig+0x18c>
 8002dde:	4b46      	ldr	r3, [pc, #280]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d116      	bne.n	8002e18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dea:	4b43      	ldr	r3, [pc, #268]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d005      	beq.n	8002e02 <HAL_RCC_OscConfig+0x176>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d001      	beq.n	8002e02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e1c0      	b.n	8003184 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e02:	4b3d      	ldr	r3, [pc, #244]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	4939      	ldr	r1, [pc, #228]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e16:	e03a      	b.n	8002e8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d020      	beq.n	8002e62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e20:	4b36      	ldr	r3, [pc, #216]	@ (8002efc <HAL_RCC_OscConfig+0x270>)
 8002e22:	2201      	movs	r2, #1
 8002e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e26:	f7fe ff71 	bl	8001d0c <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e2c:	e008      	b.n	8002e40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e2e:	f7fe ff6d 	bl	8001d0c <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e1a1      	b.n	8003184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e40:	4b2d      	ldr	r3, [pc, #180]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0f0      	beq.n	8002e2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e4c:	4b2a      	ldr	r3, [pc, #168]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	4927      	ldr	r1, [pc, #156]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	600b      	str	r3, [r1, #0]
 8002e60:	e015      	b.n	8002e8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e62:	4b26      	ldr	r3, [pc, #152]	@ (8002efc <HAL_RCC_OscConfig+0x270>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e68:	f7fe ff50 	bl	8001d0c <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e70:	f7fe ff4c 	bl	8001d0c <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e180      	b.n	8003184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e82:	4b1d      	ldr	r3, [pc, #116]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1f0      	bne.n	8002e70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0308 	and.w	r3, r3, #8
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d03a      	beq.n	8002f10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d019      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ea2:	4b17      	ldr	r3, [pc, #92]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea8:	f7fe ff30 	bl	8001d0c <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eb0:	f7fe ff2c 	bl	8001d0c <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e160      	b.n	8003184 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ef8 <HAL_RCC_OscConfig+0x26c>)
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0f0      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ece:	2001      	movs	r0, #1
 8002ed0:	f000 faba 	bl	8003448 <RCC_Delay>
 8002ed4:	e01c      	b.n	8002f10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002edc:	f7fe ff16 	bl	8001d0c <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ee2:	e00f      	b.n	8002f04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ee4:	f7fe ff12 	bl	8001d0c <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d908      	bls.n	8002f04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e146      	b.n	8003184 <HAL_RCC_OscConfig+0x4f8>
 8002ef6:	bf00      	nop
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	42420000 	.word	0x42420000
 8002f00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f04:	4b92      	ldr	r3, [pc, #584]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8002f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1e9      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 80a6 	beq.w	800306a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f22:	4b8b      	ldr	r3, [pc, #556]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10d      	bne.n	8002f4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f2e:	4b88      	ldr	r3, [pc, #544]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	4a87      	ldr	r2, [pc, #540]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8002f34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f38:	61d3      	str	r3, [r2, #28]
 8002f3a:	4b85      	ldr	r3, [pc, #532]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f42:	60bb      	str	r3, [r7, #8]
 8002f44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f46:	2301      	movs	r3, #1
 8002f48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f4a:	4b82      	ldr	r3, [pc, #520]	@ (8003154 <HAL_RCC_OscConfig+0x4c8>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d118      	bne.n	8002f88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f56:	4b7f      	ldr	r3, [pc, #508]	@ (8003154 <HAL_RCC_OscConfig+0x4c8>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a7e      	ldr	r2, [pc, #504]	@ (8003154 <HAL_RCC_OscConfig+0x4c8>)
 8002f5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f62:	f7fe fed3 	bl	8001d0c <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f68:	e008      	b.n	8002f7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f6a:	f7fe fecf 	bl	8001d0c <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b64      	cmp	r3, #100	@ 0x64
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e103      	b.n	8003184 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f7c:	4b75      	ldr	r3, [pc, #468]	@ (8003154 <HAL_RCC_OscConfig+0x4c8>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0f0      	beq.n	8002f6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d106      	bne.n	8002f9e <HAL_RCC_OscConfig+0x312>
 8002f90:	4b6f      	ldr	r3, [pc, #444]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	4a6e      	ldr	r2, [pc, #440]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8002f96:	f043 0301 	orr.w	r3, r3, #1
 8002f9a:	6213      	str	r3, [r2, #32]
 8002f9c:	e02d      	b.n	8002ffa <HAL_RCC_OscConfig+0x36e>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10c      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x334>
 8002fa6:	4b6a      	ldr	r3, [pc, #424]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	4a69      	ldr	r2, [pc, #420]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8002fac:	f023 0301 	bic.w	r3, r3, #1
 8002fb0:	6213      	str	r3, [r2, #32]
 8002fb2:	4b67      	ldr	r3, [pc, #412]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	4a66      	ldr	r2, [pc, #408]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8002fb8:	f023 0304 	bic.w	r3, r3, #4
 8002fbc:	6213      	str	r3, [r2, #32]
 8002fbe:	e01c      	b.n	8002ffa <HAL_RCC_OscConfig+0x36e>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	2b05      	cmp	r3, #5
 8002fc6:	d10c      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x356>
 8002fc8:	4b61      	ldr	r3, [pc, #388]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	4a60      	ldr	r2, [pc, #384]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8002fce:	f043 0304 	orr.w	r3, r3, #4
 8002fd2:	6213      	str	r3, [r2, #32]
 8002fd4:	4b5e      	ldr	r3, [pc, #376]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	4a5d      	ldr	r2, [pc, #372]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8002fda:	f043 0301 	orr.w	r3, r3, #1
 8002fde:	6213      	str	r3, [r2, #32]
 8002fe0:	e00b      	b.n	8002ffa <HAL_RCC_OscConfig+0x36e>
 8002fe2:	4b5b      	ldr	r3, [pc, #364]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	4a5a      	ldr	r2, [pc, #360]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8002fe8:	f023 0301 	bic.w	r3, r3, #1
 8002fec:	6213      	str	r3, [r2, #32]
 8002fee:	4b58      	ldr	r3, [pc, #352]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	4a57      	ldr	r2, [pc, #348]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8002ff4:	f023 0304 	bic.w	r3, r3, #4
 8002ff8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d015      	beq.n	800302e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003002:	f7fe fe83 	bl	8001d0c <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003008:	e00a      	b.n	8003020 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800300a:	f7fe fe7f 	bl	8001d0c <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003018:	4293      	cmp	r3, r2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e0b1      	b.n	8003184 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003020:	4b4b      	ldr	r3, [pc, #300]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d0ee      	beq.n	800300a <HAL_RCC_OscConfig+0x37e>
 800302c:	e014      	b.n	8003058 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800302e:	f7fe fe6d 	bl	8001d0c <HAL_GetTick>
 8003032:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003034:	e00a      	b.n	800304c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003036:	f7fe fe69 	bl	8001d0c <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003044:	4293      	cmp	r3, r2
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e09b      	b.n	8003184 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800304c:	4b40      	ldr	r3, [pc, #256]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1ee      	bne.n	8003036 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003058:	7dfb      	ldrb	r3, [r7, #23]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d105      	bne.n	800306a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800305e:	4b3c      	ldr	r3, [pc, #240]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	4a3b      	ldr	r2, [pc, #236]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8003064:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003068:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 8087 	beq.w	8003182 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003074:	4b36      	ldr	r3, [pc, #216]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f003 030c 	and.w	r3, r3, #12
 800307c:	2b08      	cmp	r3, #8
 800307e:	d061      	beq.n	8003144 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	69db      	ldr	r3, [r3, #28]
 8003084:	2b02      	cmp	r3, #2
 8003086:	d146      	bne.n	8003116 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003088:	4b33      	ldr	r3, [pc, #204]	@ (8003158 <HAL_RCC_OscConfig+0x4cc>)
 800308a:	2200      	movs	r2, #0
 800308c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800308e:	f7fe fe3d 	bl	8001d0c <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003094:	e008      	b.n	80030a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003096:	f7fe fe39 	bl	8001d0c <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e06d      	b.n	8003184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030a8:	4b29      	ldr	r3, [pc, #164]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1f0      	bne.n	8003096 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030bc:	d108      	bne.n	80030d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030be:	4b24      	ldr	r3, [pc, #144]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	4921      	ldr	r1, [pc, #132]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030d0:	4b1f      	ldr	r3, [pc, #124]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a19      	ldr	r1, [r3, #32]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e0:	430b      	orrs	r3, r1
 80030e2:	491b      	ldr	r1, [pc, #108]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003158 <HAL_RCC_OscConfig+0x4cc>)
 80030ea:	2201      	movs	r2, #1
 80030ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ee:	f7fe fe0d 	bl	8001d0c <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f6:	f7fe fe09 	bl	8001d0c <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e03d      	b.n	8003184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003108:	4b11      	ldr	r3, [pc, #68]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0f0      	beq.n	80030f6 <HAL_RCC_OscConfig+0x46a>
 8003114:	e035      	b.n	8003182 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003116:	4b10      	ldr	r3, [pc, #64]	@ (8003158 <HAL_RCC_OscConfig+0x4cc>)
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311c:	f7fe fdf6 	bl	8001d0c <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003124:	f7fe fdf2 	bl	8001d0c <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e026      	b.n	8003184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003136:	4b06      	ldr	r3, [pc, #24]	@ (8003150 <HAL_RCC_OscConfig+0x4c4>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1f0      	bne.n	8003124 <HAL_RCC_OscConfig+0x498>
 8003142:	e01e      	b.n	8003182 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	69db      	ldr	r3, [r3, #28]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d107      	bne.n	800315c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e019      	b.n	8003184 <HAL_RCC_OscConfig+0x4f8>
 8003150:	40021000 	.word	0x40021000
 8003154:	40007000 	.word	0x40007000
 8003158:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800315c:	4b0b      	ldr	r3, [pc, #44]	@ (800318c <HAL_RCC_OscConfig+0x500>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	429a      	cmp	r2, r3
 800316e:	d106      	bne.n	800317e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800317a:	429a      	cmp	r2, r3
 800317c:	d001      	beq.n	8003182 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e000      	b.n	8003184 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40021000 	.word	0x40021000

08003190 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e0d0      	b.n	8003346 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031a4:	4b6a      	ldr	r3, [pc, #424]	@ (8003350 <HAL_RCC_ClockConfig+0x1c0>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d910      	bls.n	80031d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b2:	4b67      	ldr	r3, [pc, #412]	@ (8003350 <HAL_RCC_ClockConfig+0x1c0>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f023 0207 	bic.w	r2, r3, #7
 80031ba:	4965      	ldr	r1, [pc, #404]	@ (8003350 <HAL_RCC_ClockConfig+0x1c0>)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	4313      	orrs	r3, r2
 80031c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c2:	4b63      	ldr	r3, [pc, #396]	@ (8003350 <HAL_RCC_ClockConfig+0x1c0>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d001      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e0b8      	b.n	8003346 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d020      	beq.n	8003222 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0304 	and.w	r3, r3, #4
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d005      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031ec:	4b59      	ldr	r3, [pc, #356]	@ (8003354 <HAL_RCC_ClockConfig+0x1c4>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	4a58      	ldr	r2, [pc, #352]	@ (8003354 <HAL_RCC_ClockConfig+0x1c4>)
 80031f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80031f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0308 	and.w	r3, r3, #8
 8003200:	2b00      	cmp	r3, #0
 8003202:	d005      	beq.n	8003210 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003204:	4b53      	ldr	r3, [pc, #332]	@ (8003354 <HAL_RCC_ClockConfig+0x1c4>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	4a52      	ldr	r2, [pc, #328]	@ (8003354 <HAL_RCC_ClockConfig+0x1c4>)
 800320a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800320e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003210:	4b50      	ldr	r3, [pc, #320]	@ (8003354 <HAL_RCC_ClockConfig+0x1c4>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	494d      	ldr	r1, [pc, #308]	@ (8003354 <HAL_RCC_ClockConfig+0x1c4>)
 800321e:	4313      	orrs	r3, r2
 8003220:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d040      	beq.n	80032b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d107      	bne.n	8003246 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003236:	4b47      	ldr	r3, [pc, #284]	@ (8003354 <HAL_RCC_ClockConfig+0x1c4>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d115      	bne.n	800326e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e07f      	b.n	8003346 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b02      	cmp	r3, #2
 800324c:	d107      	bne.n	800325e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800324e:	4b41      	ldr	r3, [pc, #260]	@ (8003354 <HAL_RCC_ClockConfig+0x1c4>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d109      	bne.n	800326e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e073      	b.n	8003346 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800325e:	4b3d      	ldr	r3, [pc, #244]	@ (8003354 <HAL_RCC_ClockConfig+0x1c4>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e06b      	b.n	8003346 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800326e:	4b39      	ldr	r3, [pc, #228]	@ (8003354 <HAL_RCC_ClockConfig+0x1c4>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f023 0203 	bic.w	r2, r3, #3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	4936      	ldr	r1, [pc, #216]	@ (8003354 <HAL_RCC_ClockConfig+0x1c4>)
 800327c:	4313      	orrs	r3, r2
 800327e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003280:	f7fe fd44 	bl	8001d0c <HAL_GetTick>
 8003284:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003286:	e00a      	b.n	800329e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003288:	f7fe fd40 	bl	8001d0c <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003296:	4293      	cmp	r3, r2
 8003298:	d901      	bls.n	800329e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e053      	b.n	8003346 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800329e:	4b2d      	ldr	r3, [pc, #180]	@ (8003354 <HAL_RCC_ClockConfig+0x1c4>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f003 020c 	and.w	r2, r3, #12
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d1eb      	bne.n	8003288 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032b0:	4b27      	ldr	r3, [pc, #156]	@ (8003350 <HAL_RCC_ClockConfig+0x1c0>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d210      	bcs.n	80032e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032be:	4b24      	ldr	r3, [pc, #144]	@ (8003350 <HAL_RCC_ClockConfig+0x1c0>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f023 0207 	bic.w	r2, r3, #7
 80032c6:	4922      	ldr	r1, [pc, #136]	@ (8003350 <HAL_RCC_ClockConfig+0x1c0>)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ce:	4b20      	ldr	r3, [pc, #128]	@ (8003350 <HAL_RCC_ClockConfig+0x1c0>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0307 	and.w	r3, r3, #7
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d001      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e032      	b.n	8003346 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d008      	beq.n	80032fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032ec:	4b19      	ldr	r3, [pc, #100]	@ (8003354 <HAL_RCC_ClockConfig+0x1c4>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	4916      	ldr	r1, [pc, #88]	@ (8003354 <HAL_RCC_ClockConfig+0x1c4>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b00      	cmp	r3, #0
 8003308:	d009      	beq.n	800331e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800330a:	4b12      	ldr	r3, [pc, #72]	@ (8003354 <HAL_RCC_ClockConfig+0x1c4>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	490e      	ldr	r1, [pc, #56]	@ (8003354 <HAL_RCC_ClockConfig+0x1c4>)
 800331a:	4313      	orrs	r3, r2
 800331c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800331e:	f000 f821 	bl	8003364 <HAL_RCC_GetSysClockFreq>
 8003322:	4602      	mov	r2, r0
 8003324:	4b0b      	ldr	r3, [pc, #44]	@ (8003354 <HAL_RCC_ClockConfig+0x1c4>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	091b      	lsrs	r3, r3, #4
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	490a      	ldr	r1, [pc, #40]	@ (8003358 <HAL_RCC_ClockConfig+0x1c8>)
 8003330:	5ccb      	ldrb	r3, [r1, r3]
 8003332:	fa22 f303 	lsr.w	r3, r2, r3
 8003336:	4a09      	ldr	r2, [pc, #36]	@ (800335c <HAL_RCC_ClockConfig+0x1cc>)
 8003338:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800333a:	4b09      	ldr	r3, [pc, #36]	@ (8003360 <HAL_RCC_ClockConfig+0x1d0>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f7fe fca2 	bl	8001c88 <HAL_InitTick>

  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40022000 	.word	0x40022000
 8003354:	40021000 	.word	0x40021000
 8003358:	08006a98 	.word	0x08006a98
 800335c:	20000000 	.word	0x20000000
 8003360:	20000004 	.word	0x20000004

08003364 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003364:	b480      	push	{r7}
 8003366:	b087      	sub	sp, #28
 8003368:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800336a:	2300      	movs	r3, #0
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	2300      	movs	r3, #0
 8003370:	60bb      	str	r3, [r7, #8]
 8003372:	2300      	movs	r3, #0
 8003374:	617b      	str	r3, [r7, #20]
 8003376:	2300      	movs	r3, #0
 8003378:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800337a:	2300      	movs	r3, #0
 800337c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800337e:	4b1e      	ldr	r3, [pc, #120]	@ (80033f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f003 030c 	and.w	r3, r3, #12
 800338a:	2b04      	cmp	r3, #4
 800338c:	d002      	beq.n	8003394 <HAL_RCC_GetSysClockFreq+0x30>
 800338e:	2b08      	cmp	r3, #8
 8003390:	d003      	beq.n	800339a <HAL_RCC_GetSysClockFreq+0x36>
 8003392:	e027      	b.n	80033e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003394:	4b19      	ldr	r3, [pc, #100]	@ (80033fc <HAL_RCC_GetSysClockFreq+0x98>)
 8003396:	613b      	str	r3, [r7, #16]
      break;
 8003398:	e027      	b.n	80033ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	0c9b      	lsrs	r3, r3, #18
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	4a17      	ldr	r2, [pc, #92]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x9c>)
 80033a4:	5cd3      	ldrb	r3, [r2, r3]
 80033a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d010      	beq.n	80033d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033b2:	4b11      	ldr	r3, [pc, #68]	@ (80033f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	0c5b      	lsrs	r3, r3, #17
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	4a11      	ldr	r2, [pc, #68]	@ (8003404 <HAL_RCC_GetSysClockFreq+0xa0>)
 80033be:	5cd3      	ldrb	r3, [r2, r3]
 80033c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a0d      	ldr	r2, [pc, #52]	@ (80033fc <HAL_RCC_GetSysClockFreq+0x98>)
 80033c6:	fb03 f202 	mul.w	r2, r3, r2
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	e004      	b.n	80033de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a0c      	ldr	r2, [pc, #48]	@ (8003408 <HAL_RCC_GetSysClockFreq+0xa4>)
 80033d8:	fb02 f303 	mul.w	r3, r2, r3
 80033dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	613b      	str	r3, [r7, #16]
      break;
 80033e2:	e002      	b.n	80033ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033e4:	4b05      	ldr	r3, [pc, #20]	@ (80033fc <HAL_RCC_GetSysClockFreq+0x98>)
 80033e6:	613b      	str	r3, [r7, #16]
      break;
 80033e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033ea:	693b      	ldr	r3, [r7, #16]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	371c      	adds	r7, #28
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bc80      	pop	{r7}
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	40021000 	.word	0x40021000
 80033fc:	007a1200 	.word	0x007a1200
 8003400:	08006ab0 	.word	0x08006ab0
 8003404:	08006ac0 	.word	0x08006ac0
 8003408:	003d0900 	.word	0x003d0900

0800340c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003410:	4b02      	ldr	r3, [pc, #8]	@ (800341c <HAL_RCC_GetHCLKFreq+0x10>)
 8003412:	681b      	ldr	r3, [r3, #0]
}
 8003414:	4618      	mov	r0, r3
 8003416:	46bd      	mov	sp, r7
 8003418:	bc80      	pop	{r7}
 800341a:	4770      	bx	lr
 800341c:	20000000 	.word	0x20000000

08003420 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003424:	f7ff fff2 	bl	800340c <HAL_RCC_GetHCLKFreq>
 8003428:	4602      	mov	r2, r0
 800342a:	4b05      	ldr	r3, [pc, #20]	@ (8003440 <HAL_RCC_GetPCLK1Freq+0x20>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	0a1b      	lsrs	r3, r3, #8
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	4903      	ldr	r1, [pc, #12]	@ (8003444 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003436:	5ccb      	ldrb	r3, [r1, r3]
 8003438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800343c:	4618      	mov	r0, r3
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40021000 	.word	0x40021000
 8003444:	08006aa8 	.word	0x08006aa8

08003448 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003450:	4b0a      	ldr	r3, [pc, #40]	@ (800347c <RCC_Delay+0x34>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a0a      	ldr	r2, [pc, #40]	@ (8003480 <RCC_Delay+0x38>)
 8003456:	fba2 2303 	umull	r2, r3, r2, r3
 800345a:	0a5b      	lsrs	r3, r3, #9
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	fb02 f303 	mul.w	r3, r2, r3
 8003462:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003464:	bf00      	nop
  }
  while (Delay --);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	1e5a      	subs	r2, r3, #1
 800346a:	60fa      	str	r2, [r7, #12]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1f9      	bne.n	8003464 <RCC_Delay+0x1c>
}
 8003470:	bf00      	nop
 8003472:	bf00      	nop
 8003474:	3714      	adds	r7, #20
 8003476:	46bd      	mov	sp, r7
 8003478:	bc80      	pop	{r7}
 800347a:	4770      	bx	lr
 800347c:	20000000 	.word	0x20000000
 8003480:	10624dd3 	.word	0x10624dd3

08003484 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	613b      	str	r3, [r7, #16]
 8003490:	2300      	movs	r3, #0
 8003492:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b00      	cmp	r3, #0
 800349e:	d07d      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80034a0:	2300      	movs	r3, #0
 80034a2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034a4:	4b4f      	ldr	r3, [pc, #316]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a6:	69db      	ldr	r3, [r3, #28]
 80034a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d10d      	bne.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034b0:	4b4c      	ldr	r3, [pc, #304]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b2:	69db      	ldr	r3, [r3, #28]
 80034b4:	4a4b      	ldr	r2, [pc, #300]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034ba:	61d3      	str	r3, [r2, #28]
 80034bc:	4b49      	ldr	r3, [pc, #292]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034be:	69db      	ldr	r3, [r3, #28]
 80034c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034c4:	60bb      	str	r3, [r7, #8]
 80034c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034c8:	2301      	movs	r3, #1
 80034ca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034cc:	4b46      	ldr	r3, [pc, #280]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d118      	bne.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034d8:	4b43      	ldr	r3, [pc, #268]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a42      	ldr	r2, [pc, #264]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034e4:	f7fe fc12 	bl	8001d0c <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ea:	e008      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ec:	f7fe fc0e 	bl	8001d0c <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b64      	cmp	r3, #100	@ 0x64
 80034f8:	d901      	bls.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e06d      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034fe:	4b3a      	ldr	r3, [pc, #232]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0f0      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800350a:	4b36      	ldr	r3, [pc, #216]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003512:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d02e      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	429a      	cmp	r2, r3
 8003526:	d027      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003528:	4b2e      	ldr	r3, [pc, #184]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003530:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003532:	4b2e      	ldr	r3, [pc, #184]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003534:	2201      	movs	r2, #1
 8003536:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003538:	4b2c      	ldr	r3, [pc, #176]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800353a:	2200      	movs	r2, #0
 800353c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800353e:	4a29      	ldr	r2, [pc, #164]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d014      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800354e:	f7fe fbdd 	bl	8001d0c <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003554:	e00a      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003556:	f7fe fbd9 	bl	8001d0c <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003564:	4293      	cmp	r3, r2
 8003566:	d901      	bls.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e036      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800356c:	4b1d      	ldr	r3, [pc, #116]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0ee      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003578:	4b1a      	ldr	r3, [pc, #104]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	4917      	ldr	r1, [pc, #92]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003586:	4313      	orrs	r3, r2
 8003588:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800358a:	7dfb      	ldrb	r3, [r7, #23]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d105      	bne.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003590:	4b14      	ldr	r3, [pc, #80]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	4a13      	ldr	r2, [pc, #76]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003596:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800359a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d008      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035a8:	4b0e      	ldr	r3, [pc, #56]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	490b      	ldr	r1, [pc, #44]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0310 	and.w	r3, r3, #16
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d008      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035c6:	4b07      	ldr	r3, [pc, #28]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	4904      	ldr	r1, [pc, #16]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3718      	adds	r7, #24
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	40021000 	.word	0x40021000
 80035e8:	40007000 	.word	0x40007000
 80035ec:	42420440 	.word	0x42420440

080035f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e076      	b.n	80036f0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003606:	2b00      	cmp	r3, #0
 8003608:	d108      	bne.n	800361c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003612:	d009      	beq.n	8003628 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	61da      	str	r2, [r3, #28]
 800361a:	e005      	b.n	8003628 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d106      	bne.n	8003648 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7fe f994 	bl	8001970 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2202      	movs	r2, #2
 800364c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800365e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003670:	431a      	orrs	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	431a      	orrs	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	431a      	orrs	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003698:	431a      	orrs	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80036a2:	431a      	orrs	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036ac:	ea42 0103 	orr.w	r1, r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	0c1a      	lsrs	r2, r3, #16
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f002 0204 	and.w	r2, r2, #4
 80036ce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	69da      	ldr	r2, [r3, #28]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036de:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b088      	sub	sp, #32
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	603b      	str	r3, [r7, #0]
 8003704:	4613      	mov	r3, r2
 8003706:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003708:	2300      	movs	r3, #0
 800370a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003712:	2b01      	cmp	r3, #1
 8003714:	d101      	bne.n	800371a <HAL_SPI_Transmit+0x22>
 8003716:	2302      	movs	r3, #2
 8003718:	e12d      	b.n	8003976 <HAL_SPI_Transmit+0x27e>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003722:	f7fe faf3 	bl	8001d0c <HAL_GetTick>
 8003726:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003728:	88fb      	ldrh	r3, [r7, #6]
 800372a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b01      	cmp	r3, #1
 8003736:	d002      	beq.n	800373e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003738:	2302      	movs	r3, #2
 800373a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800373c:	e116      	b.n	800396c <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d002      	beq.n	800374a <HAL_SPI_Transmit+0x52>
 8003744:	88fb      	ldrh	r3, [r7, #6]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d102      	bne.n	8003750 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800374e:	e10d      	b.n	800396c <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2203      	movs	r2, #3
 8003754:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	88fa      	ldrh	r2, [r7, #6]
 8003768:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	88fa      	ldrh	r2, [r7, #6]
 800376e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003796:	d10f      	bne.n	80037b8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037a6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037b6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037c2:	2b40      	cmp	r3, #64	@ 0x40
 80037c4:	d007      	beq.n	80037d6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037de:	d14f      	bne.n	8003880 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d002      	beq.n	80037ee <HAL_SPI_Transmit+0xf6>
 80037e8:	8afb      	ldrh	r3, [r7, #22]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d142      	bne.n	8003874 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f2:	881a      	ldrh	r2, [r3, #0]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037fe:	1c9a      	adds	r2, r3, #2
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003808:	b29b      	uxth	r3, r3
 800380a:	3b01      	subs	r3, #1
 800380c:	b29a      	uxth	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003812:	e02f      	b.n	8003874 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b02      	cmp	r3, #2
 8003820:	d112      	bne.n	8003848 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003826:	881a      	ldrh	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003832:	1c9a      	adds	r2, r3, #2
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800383c:	b29b      	uxth	r3, r3
 800383e:	3b01      	subs	r3, #1
 8003840:	b29a      	uxth	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003846:	e015      	b.n	8003874 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003848:	f7fe fa60 	bl	8001d0c <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	429a      	cmp	r2, r3
 8003856:	d803      	bhi.n	8003860 <HAL_SPI_Transmit+0x168>
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800385e:	d102      	bne.n	8003866 <HAL_SPI_Transmit+0x16e>
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d106      	bne.n	8003874 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003872:	e07b      	b.n	800396c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003878:	b29b      	uxth	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1ca      	bne.n	8003814 <HAL_SPI_Transmit+0x11c>
 800387e:	e050      	b.n	8003922 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d002      	beq.n	800388e <HAL_SPI_Transmit+0x196>
 8003888:	8afb      	ldrh	r3, [r7, #22]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d144      	bne.n	8003918 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	330c      	adds	r3, #12
 8003898:	7812      	ldrb	r2, [r2, #0]
 800389a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a0:	1c5a      	adds	r2, r3, #1
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	3b01      	subs	r3, #1
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80038b4:	e030      	b.n	8003918 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d113      	bne.n	80038ec <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	330c      	adds	r3, #12
 80038ce:	7812      	ldrb	r2, [r2, #0]
 80038d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d6:	1c5a      	adds	r2, r3, #1
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	3b01      	subs	r3, #1
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80038ea:	e015      	b.n	8003918 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038ec:	f7fe fa0e 	bl	8001d0c <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d803      	bhi.n	8003904 <HAL_SPI_Transmit+0x20c>
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003902:	d102      	bne.n	800390a <HAL_SPI_Transmit+0x212>
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d106      	bne.n	8003918 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003916:	e029      	b.n	800396c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800391c:	b29b      	uxth	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1c9      	bne.n	80038b6 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	6839      	ldr	r1, [r7, #0]
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f000 fbd8 	bl	80040dc <SPI_EndRxTxTransaction>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d002      	beq.n	8003938 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2220      	movs	r2, #32
 8003936:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10a      	bne.n	8003956 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003940:	2300      	movs	r3, #0
 8003942:	613b      	str	r3, [r7, #16]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	613b      	str	r3, [r7, #16]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	613b      	str	r3, [r7, #16]
 8003954:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800395a:	2b00      	cmp	r3, #0
 800395c:	d002      	beq.n	8003964 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	77fb      	strb	r3, [r7, #31]
 8003962:	e003      	b.n	800396c <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003974:	7ffb      	ldrb	r3, [r7, #31]
}
 8003976:	4618      	mov	r0, r3
 8003978:	3720      	adds	r7, #32
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b088      	sub	sp, #32
 8003982:	af02      	add	r7, sp, #8
 8003984:	60f8      	str	r0, [r7, #12]
 8003986:	60b9      	str	r1, [r7, #8]
 8003988:	603b      	str	r3, [r7, #0]
 800398a:	4613      	mov	r3, r2
 800398c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800398e:	2300      	movs	r3, #0
 8003990:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b01      	cmp	r3, #1
 800399c:	d002      	beq.n	80039a4 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800399e:	2302      	movs	r3, #2
 80039a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80039a2:	e0fb      	b.n	8003b9c <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039ac:	d112      	bne.n	80039d4 <HAL_SPI_Receive+0x56>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10e      	bne.n	80039d4 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2204      	movs	r2, #4
 80039ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80039be:	88fa      	ldrh	r2, [r7, #6]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	4613      	mov	r3, r2
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	68b9      	ldr	r1, [r7, #8]
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f000 f8ef 	bl	8003bae <HAL_SPI_TransmitReceive>
 80039d0:	4603      	mov	r3, r0
 80039d2:	e0e8      	b.n	8003ba6 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d101      	bne.n	80039e2 <HAL_SPI_Receive+0x64>
 80039de:	2302      	movs	r3, #2
 80039e0:	e0e1      	b.n	8003ba6 <HAL_SPI_Receive+0x228>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039ea:	f7fe f98f 	bl	8001d0c <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d002      	beq.n	80039fc <HAL_SPI_Receive+0x7e>
 80039f6:	88fb      	ldrh	r3, [r7, #6]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d102      	bne.n	8003a02 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a00:	e0cc      	b.n	8003b9c <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2204      	movs	r2, #4
 8003a06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	88fa      	ldrh	r2, [r7, #6]
 8003a1a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	88fa      	ldrh	r2, [r7, #6]
 8003a20:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a48:	d10f      	bne.n	8003a6a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a58:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003a68:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a74:	2b40      	cmp	r3, #64	@ 0x40
 8003a76:	d007      	beq.n	8003a88 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a86:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d16a      	bne.n	8003b66 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003a90:	e032      	b.n	8003af8 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d115      	bne.n	8003acc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f103 020c 	add.w	r2, r3, #12
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aac:	7812      	ldrb	r2, [r2, #0]
 8003aae:	b2d2      	uxtb	r2, r2
 8003ab0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab6:	1c5a      	adds	r2, r3, #1
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003aca:	e015      	b.n	8003af8 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003acc:	f7fe f91e 	bl	8001d0c <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d803      	bhi.n	8003ae4 <HAL_SPI_Receive+0x166>
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae2:	d102      	bne.n	8003aea <HAL_SPI_Receive+0x16c>
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d106      	bne.n	8003af8 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003af6:	e051      	b.n	8003b9c <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1c7      	bne.n	8003a92 <HAL_SPI_Receive+0x114>
 8003b02:	e035      	b.n	8003b70 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d113      	bne.n	8003b3a <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68da      	ldr	r2, [r3, #12]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b1c:	b292      	uxth	r2, r2
 8003b1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b24:	1c9a      	adds	r2, r3, #2
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	3b01      	subs	r3, #1
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b38:	e015      	b.n	8003b66 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b3a:	f7fe f8e7 	bl	8001d0c <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d803      	bhi.n	8003b52 <HAL_SPI_Receive+0x1d4>
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b50:	d102      	bne.n	8003b58 <HAL_SPI_Receive+0x1da>
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d106      	bne.n	8003b66 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003b64:	e01a      	b.n	8003b9c <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1c9      	bne.n	8003b04 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	6839      	ldr	r1, [r7, #0]
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f000 fa5f 	bl	8004038 <SPI_EndRxTransaction>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d002      	beq.n	8003b86 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2220      	movs	r2, #32
 8003b84:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d002      	beq.n	8003b94 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	75fb      	strb	r3, [r7, #23]
 8003b92:	e003      	b.n	8003b9c <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3718      	adds	r7, #24
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b08c      	sub	sp, #48	@ 0x30
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	60f8      	str	r0, [r7, #12]
 8003bb6:	60b9      	str	r1, [r7, #8]
 8003bb8:	607a      	str	r2, [r7, #4]
 8003bba:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d101      	bne.n	8003bd4 <HAL_SPI_TransmitReceive+0x26>
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	e198      	b.n	8003f06 <HAL_SPI_TransmitReceive+0x358>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bdc:	f7fe f896 	bl	8001d0c <HAL_GetTick>
 8003be0:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003be8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003bf2:	887b      	ldrh	r3, [r7, #2]
 8003bf4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003bf6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d00f      	beq.n	8003c1e <HAL_SPI_TransmitReceive+0x70>
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c04:	d107      	bne.n	8003c16 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d103      	bne.n	8003c16 <HAL_SPI_TransmitReceive+0x68>
 8003c0e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	d003      	beq.n	8003c1e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003c16:	2302      	movs	r3, #2
 8003c18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003c1c:	e16d      	b.n	8003efa <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d005      	beq.n	8003c30 <HAL_SPI_TransmitReceive+0x82>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d002      	beq.n	8003c30 <HAL_SPI_TransmitReceive+0x82>
 8003c2a:	887b      	ldrh	r3, [r7, #2]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d103      	bne.n	8003c38 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003c36:	e160      	b.n	8003efa <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b04      	cmp	r3, #4
 8003c42:	d003      	beq.n	8003c4c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2205      	movs	r2, #5
 8003c48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	887a      	ldrh	r2, [r7, #2]
 8003c5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	887a      	ldrh	r2, [r7, #2]
 8003c62:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	68ba      	ldr	r2, [r7, #8]
 8003c68:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	887a      	ldrh	r2, [r7, #2]
 8003c6e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	887a      	ldrh	r2, [r7, #2]
 8003c74:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c8c:	2b40      	cmp	r3, #64	@ 0x40
 8003c8e:	d007      	beq.n	8003ca0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ca8:	d17c      	bne.n	8003da4 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d002      	beq.n	8003cb8 <HAL_SPI_TransmitReceive+0x10a>
 8003cb2:	8b7b      	ldrh	r3, [r7, #26]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d16a      	bne.n	8003d8e <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cbc:	881a      	ldrh	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc8:	1c9a      	adds	r2, r3, #2
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cdc:	e057      	b.n	8003d8e <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d11b      	bne.n	8003d24 <HAL_SPI_TransmitReceive+0x176>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d016      	beq.n	8003d24 <HAL_SPI_TransmitReceive+0x176>
 8003cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d113      	bne.n	8003d24 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d00:	881a      	ldrh	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d0c:	1c9a      	adds	r2, r3, #2
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d20:	2300      	movs	r3, #0
 8003d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d119      	bne.n	8003d66 <HAL_SPI_TransmitReceive+0x1b8>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d014      	beq.n	8003d66 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68da      	ldr	r2, [r3, #12]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d46:	b292      	uxth	r2, r2
 8003d48:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d4e:	1c9a      	adds	r2, r3, #2
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d62:	2301      	movs	r3, #1
 8003d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d66:	f7fd ffd1 	bl	8001d0c <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d80b      	bhi.n	8003d8e <HAL_SPI_TransmitReceive+0x1e0>
 8003d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d7c:	d007      	beq.n	8003d8e <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003d8c:	e0b5      	b.n	8003efa <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1a2      	bne.n	8003cde <HAL_SPI_TransmitReceive+0x130>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d19d      	bne.n	8003cde <HAL_SPI_TransmitReceive+0x130>
 8003da2:	e080      	b.n	8003ea6 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d002      	beq.n	8003db2 <HAL_SPI_TransmitReceive+0x204>
 8003dac:	8b7b      	ldrh	r3, [r7, #26]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d16f      	bne.n	8003e92 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	330c      	adds	r3, #12
 8003dbc:	7812      	ldrb	r2, [r2, #0]
 8003dbe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc4:	1c5a      	adds	r2, r3, #1
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dd8:	e05b      	b.n	8003e92 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d11c      	bne.n	8003e22 <HAL_SPI_TransmitReceive+0x274>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d017      	beq.n	8003e22 <HAL_SPI_TransmitReceive+0x274>
 8003df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d114      	bne.n	8003e22 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	330c      	adds	r3, #12
 8003e02:	7812      	ldrb	r2, [r2, #0]
 8003e04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e0a:	1c5a      	adds	r2, r3, #1
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	3b01      	subs	r3, #1
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d119      	bne.n	8003e64 <HAL_SPI_TransmitReceive+0x2b6>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d014      	beq.n	8003e64 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68da      	ldr	r2, [r3, #12]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e44:	b2d2      	uxtb	r2, r2
 8003e46:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e4c:	1c5a      	adds	r2, r3, #1
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e60:	2301      	movs	r3, #1
 8003e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e64:	f7fd ff52 	bl	8001d0c <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d803      	bhi.n	8003e7c <HAL_SPI_TransmitReceive+0x2ce>
 8003e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7a:	d102      	bne.n	8003e82 <HAL_SPI_TransmitReceive+0x2d4>
 8003e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d107      	bne.n	8003e92 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003e90:	e033      	b.n	8003efa <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d19e      	bne.n	8003dda <HAL_SPI_TransmitReceive+0x22c>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d199      	bne.n	8003dda <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ea6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ea8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 f916 	bl	80040dc <SPI_EndRxTxTransaction>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d006      	beq.n	8003ec4 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8003ec2:	e01a      	b.n	8003efa <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10a      	bne.n	8003ee2 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ecc:	2300      	movs	r3, #0
 8003ece:	617b      	str	r3, [r7, #20]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	617b      	str	r3, [r7, #20]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	617b      	str	r3, [r7, #20]
 8003ee0:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ef0:	e003      	b.n	8003efa <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003f02:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3730      	adds	r7, #48	@ 0x30
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b083      	sub	sp, #12
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f1c:	b2db      	uxtb	r3, r3
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bc80      	pop	{r7}
 8003f26:	4770      	bx	lr

08003f28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b088      	sub	sp, #32
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	603b      	str	r3, [r7, #0]
 8003f34:	4613      	mov	r3, r2
 8003f36:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f38:	f7fd fee8 	bl	8001d0c <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f40:	1a9b      	subs	r3, r3, r2
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	4413      	add	r3, r2
 8003f46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f48:	f7fd fee0 	bl	8001d0c <HAL_GetTick>
 8003f4c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f4e:	4b39      	ldr	r3, [pc, #228]	@ (8004034 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	015b      	lsls	r3, r3, #5
 8003f54:	0d1b      	lsrs	r3, r3, #20
 8003f56:	69fa      	ldr	r2, [r7, #28]
 8003f58:	fb02 f303 	mul.w	r3, r2, r3
 8003f5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f5e:	e054      	b.n	800400a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f66:	d050      	beq.n	800400a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f68:	f7fd fed0 	bl	8001d0c <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	69fa      	ldr	r2, [r7, #28]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d902      	bls.n	8003f7e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d13d      	bne.n	8003ffa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003f8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f96:	d111      	bne.n	8003fbc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fa0:	d004      	beq.n	8003fac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003faa:	d107      	bne.n	8003fbc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fc4:	d10f      	bne.n	8003fe6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003fe4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e017      	b.n	800402a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d101      	bne.n	8004004 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004000:	2300      	movs	r3, #0
 8004002:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	3b01      	subs	r3, #1
 8004008:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689a      	ldr	r2, [r3, #8]
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	4013      	ands	r3, r2
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	429a      	cmp	r2, r3
 8004018:	bf0c      	ite	eq
 800401a:	2301      	moveq	r3, #1
 800401c:	2300      	movne	r3, #0
 800401e:	b2db      	uxtb	r3, r3
 8004020:	461a      	mov	r2, r3
 8004022:	79fb      	ldrb	r3, [r7, #7]
 8004024:	429a      	cmp	r2, r3
 8004026:	d19b      	bne.n	8003f60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3720      	adds	r7, #32
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	20000000 	.word	0x20000000

08004038 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af02      	add	r7, sp, #8
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800404c:	d111      	bne.n	8004072 <SPI_EndRxTransaction+0x3a>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004056:	d004      	beq.n	8004062 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004060:	d107      	bne.n	8004072 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004070:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800407a:	d117      	bne.n	80040ac <SPI_EndRxTransaction+0x74>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004084:	d112      	bne.n	80040ac <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	2200      	movs	r2, #0
 800408e:	2101      	movs	r1, #1
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f7ff ff49 	bl	8003f28 <SPI_WaitFlagStateUntilTimeout>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d01a      	beq.n	80040d2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040a0:	f043 0220 	orr.w	r2, r3, #32
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e013      	b.n	80040d4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	9300      	str	r3, [sp, #0]
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	2200      	movs	r2, #0
 80040b4:	2180      	movs	r1, #128	@ 0x80
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f7ff ff36 	bl	8003f28 <SPI_WaitFlagStateUntilTimeout>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d007      	beq.n	80040d2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040c6:	f043 0220 	orr.w	r2, r3, #32
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e000      	b.n	80040d4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af02      	add	r7, sp, #8
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	2200      	movs	r2, #0
 80040f0:	2180      	movs	r1, #128	@ 0x80
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f7ff ff18 	bl	8003f28 <SPI_WaitFlagStateUntilTimeout>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d007      	beq.n	800410e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004102:	f043 0220 	orr.w	r2, r3, #32
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e000      	b.n	8004110 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <__cvt>:
 8004118:	2b00      	cmp	r3, #0
 800411a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800411e:	461d      	mov	r5, r3
 8004120:	bfbb      	ittet	lt
 8004122:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004126:	461d      	movlt	r5, r3
 8004128:	2300      	movge	r3, #0
 800412a:	232d      	movlt	r3, #45	@ 0x2d
 800412c:	b088      	sub	sp, #32
 800412e:	4614      	mov	r4, r2
 8004130:	bfb8      	it	lt
 8004132:	4614      	movlt	r4, r2
 8004134:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004136:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004138:	7013      	strb	r3, [r2, #0]
 800413a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800413c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004140:	f023 0820 	bic.w	r8, r3, #32
 8004144:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004148:	d005      	beq.n	8004156 <__cvt+0x3e>
 800414a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800414e:	d100      	bne.n	8004152 <__cvt+0x3a>
 8004150:	3601      	adds	r6, #1
 8004152:	2302      	movs	r3, #2
 8004154:	e000      	b.n	8004158 <__cvt+0x40>
 8004156:	2303      	movs	r3, #3
 8004158:	aa07      	add	r2, sp, #28
 800415a:	9204      	str	r2, [sp, #16]
 800415c:	aa06      	add	r2, sp, #24
 800415e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004162:	e9cd 3600 	strd	r3, r6, [sp]
 8004166:	4622      	mov	r2, r4
 8004168:	462b      	mov	r3, r5
 800416a:	f000 fe5d 	bl	8004e28 <_dtoa_r>
 800416e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004172:	4607      	mov	r7, r0
 8004174:	d119      	bne.n	80041aa <__cvt+0x92>
 8004176:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004178:	07db      	lsls	r3, r3, #31
 800417a:	d50e      	bpl.n	800419a <__cvt+0x82>
 800417c:	eb00 0906 	add.w	r9, r0, r6
 8004180:	2200      	movs	r2, #0
 8004182:	2300      	movs	r3, #0
 8004184:	4620      	mov	r0, r4
 8004186:	4629      	mov	r1, r5
 8004188:	f7fc fc0e 	bl	80009a8 <__aeabi_dcmpeq>
 800418c:	b108      	cbz	r0, 8004192 <__cvt+0x7a>
 800418e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004192:	2230      	movs	r2, #48	@ 0x30
 8004194:	9b07      	ldr	r3, [sp, #28]
 8004196:	454b      	cmp	r3, r9
 8004198:	d31e      	bcc.n	80041d8 <__cvt+0xc0>
 800419a:	4638      	mov	r0, r7
 800419c:	9b07      	ldr	r3, [sp, #28]
 800419e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80041a0:	1bdb      	subs	r3, r3, r7
 80041a2:	6013      	str	r3, [r2, #0]
 80041a4:	b008      	add	sp, #32
 80041a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041aa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80041ae:	eb00 0906 	add.w	r9, r0, r6
 80041b2:	d1e5      	bne.n	8004180 <__cvt+0x68>
 80041b4:	7803      	ldrb	r3, [r0, #0]
 80041b6:	2b30      	cmp	r3, #48	@ 0x30
 80041b8:	d10a      	bne.n	80041d0 <__cvt+0xb8>
 80041ba:	2200      	movs	r2, #0
 80041bc:	2300      	movs	r3, #0
 80041be:	4620      	mov	r0, r4
 80041c0:	4629      	mov	r1, r5
 80041c2:	f7fc fbf1 	bl	80009a8 <__aeabi_dcmpeq>
 80041c6:	b918      	cbnz	r0, 80041d0 <__cvt+0xb8>
 80041c8:	f1c6 0601 	rsb	r6, r6, #1
 80041cc:	f8ca 6000 	str.w	r6, [sl]
 80041d0:	f8da 3000 	ldr.w	r3, [sl]
 80041d4:	4499      	add	r9, r3
 80041d6:	e7d3      	b.n	8004180 <__cvt+0x68>
 80041d8:	1c59      	adds	r1, r3, #1
 80041da:	9107      	str	r1, [sp, #28]
 80041dc:	701a      	strb	r2, [r3, #0]
 80041de:	e7d9      	b.n	8004194 <__cvt+0x7c>

080041e0 <__exponent>:
 80041e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041e2:	2900      	cmp	r1, #0
 80041e4:	bfb6      	itet	lt
 80041e6:	232d      	movlt	r3, #45	@ 0x2d
 80041e8:	232b      	movge	r3, #43	@ 0x2b
 80041ea:	4249      	neglt	r1, r1
 80041ec:	2909      	cmp	r1, #9
 80041ee:	7002      	strb	r2, [r0, #0]
 80041f0:	7043      	strb	r3, [r0, #1]
 80041f2:	dd29      	ble.n	8004248 <__exponent+0x68>
 80041f4:	f10d 0307 	add.w	r3, sp, #7
 80041f8:	461d      	mov	r5, r3
 80041fa:	270a      	movs	r7, #10
 80041fc:	fbb1 f6f7 	udiv	r6, r1, r7
 8004200:	461a      	mov	r2, r3
 8004202:	fb07 1416 	mls	r4, r7, r6, r1
 8004206:	3430      	adds	r4, #48	@ 0x30
 8004208:	f802 4c01 	strb.w	r4, [r2, #-1]
 800420c:	460c      	mov	r4, r1
 800420e:	2c63      	cmp	r4, #99	@ 0x63
 8004210:	4631      	mov	r1, r6
 8004212:	f103 33ff 	add.w	r3, r3, #4294967295
 8004216:	dcf1      	bgt.n	80041fc <__exponent+0x1c>
 8004218:	3130      	adds	r1, #48	@ 0x30
 800421a:	1e94      	subs	r4, r2, #2
 800421c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004220:	4623      	mov	r3, r4
 8004222:	1c41      	adds	r1, r0, #1
 8004224:	42ab      	cmp	r3, r5
 8004226:	d30a      	bcc.n	800423e <__exponent+0x5e>
 8004228:	f10d 0309 	add.w	r3, sp, #9
 800422c:	1a9b      	subs	r3, r3, r2
 800422e:	42ac      	cmp	r4, r5
 8004230:	bf88      	it	hi
 8004232:	2300      	movhi	r3, #0
 8004234:	3302      	adds	r3, #2
 8004236:	4403      	add	r3, r0
 8004238:	1a18      	subs	r0, r3, r0
 800423a:	b003      	add	sp, #12
 800423c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800423e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004242:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004246:	e7ed      	b.n	8004224 <__exponent+0x44>
 8004248:	2330      	movs	r3, #48	@ 0x30
 800424a:	3130      	adds	r1, #48	@ 0x30
 800424c:	7083      	strb	r3, [r0, #2]
 800424e:	70c1      	strb	r1, [r0, #3]
 8004250:	1d03      	adds	r3, r0, #4
 8004252:	e7f1      	b.n	8004238 <__exponent+0x58>

08004254 <_printf_float>:
 8004254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004258:	b091      	sub	sp, #68	@ 0x44
 800425a:	460c      	mov	r4, r1
 800425c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004260:	4616      	mov	r6, r2
 8004262:	461f      	mov	r7, r3
 8004264:	4605      	mov	r5, r0
 8004266:	f000 fcc1 	bl	8004bec <_localeconv_r>
 800426a:	6803      	ldr	r3, [r0, #0]
 800426c:	4618      	mov	r0, r3
 800426e:	9308      	str	r3, [sp, #32]
 8004270:	f7fb ff6e 	bl	8000150 <strlen>
 8004274:	2300      	movs	r3, #0
 8004276:	930e      	str	r3, [sp, #56]	@ 0x38
 8004278:	f8d8 3000 	ldr.w	r3, [r8]
 800427c:	9009      	str	r0, [sp, #36]	@ 0x24
 800427e:	3307      	adds	r3, #7
 8004280:	f023 0307 	bic.w	r3, r3, #7
 8004284:	f103 0208 	add.w	r2, r3, #8
 8004288:	f894 a018 	ldrb.w	sl, [r4, #24]
 800428c:	f8d4 b000 	ldr.w	fp, [r4]
 8004290:	f8c8 2000 	str.w	r2, [r8]
 8004294:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004298:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800429c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800429e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80042a2:	f04f 32ff 	mov.w	r2, #4294967295
 80042a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80042aa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80042ae:	4b9c      	ldr	r3, [pc, #624]	@ (8004520 <_printf_float+0x2cc>)
 80042b0:	f7fc fbac 	bl	8000a0c <__aeabi_dcmpun>
 80042b4:	bb70      	cbnz	r0, 8004314 <_printf_float+0xc0>
 80042b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80042ba:	f04f 32ff 	mov.w	r2, #4294967295
 80042be:	4b98      	ldr	r3, [pc, #608]	@ (8004520 <_printf_float+0x2cc>)
 80042c0:	f7fc fb86 	bl	80009d0 <__aeabi_dcmple>
 80042c4:	bb30      	cbnz	r0, 8004314 <_printf_float+0xc0>
 80042c6:	2200      	movs	r2, #0
 80042c8:	2300      	movs	r3, #0
 80042ca:	4640      	mov	r0, r8
 80042cc:	4649      	mov	r1, r9
 80042ce:	f7fc fb75 	bl	80009bc <__aeabi_dcmplt>
 80042d2:	b110      	cbz	r0, 80042da <_printf_float+0x86>
 80042d4:	232d      	movs	r3, #45	@ 0x2d
 80042d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042da:	4a92      	ldr	r2, [pc, #584]	@ (8004524 <_printf_float+0x2d0>)
 80042dc:	4b92      	ldr	r3, [pc, #584]	@ (8004528 <_printf_float+0x2d4>)
 80042de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80042e2:	bf94      	ite	ls
 80042e4:	4690      	movls	r8, r2
 80042e6:	4698      	movhi	r8, r3
 80042e8:	2303      	movs	r3, #3
 80042ea:	f04f 0900 	mov.w	r9, #0
 80042ee:	6123      	str	r3, [r4, #16]
 80042f0:	f02b 0304 	bic.w	r3, fp, #4
 80042f4:	6023      	str	r3, [r4, #0]
 80042f6:	4633      	mov	r3, r6
 80042f8:	4621      	mov	r1, r4
 80042fa:	4628      	mov	r0, r5
 80042fc:	9700      	str	r7, [sp, #0]
 80042fe:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004300:	f000 f9d4 	bl	80046ac <_printf_common>
 8004304:	3001      	adds	r0, #1
 8004306:	f040 8090 	bne.w	800442a <_printf_float+0x1d6>
 800430a:	f04f 30ff 	mov.w	r0, #4294967295
 800430e:	b011      	add	sp, #68	@ 0x44
 8004310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004314:	4642      	mov	r2, r8
 8004316:	464b      	mov	r3, r9
 8004318:	4640      	mov	r0, r8
 800431a:	4649      	mov	r1, r9
 800431c:	f7fc fb76 	bl	8000a0c <__aeabi_dcmpun>
 8004320:	b148      	cbz	r0, 8004336 <_printf_float+0xe2>
 8004322:	464b      	mov	r3, r9
 8004324:	2b00      	cmp	r3, #0
 8004326:	bfb8      	it	lt
 8004328:	232d      	movlt	r3, #45	@ 0x2d
 800432a:	4a80      	ldr	r2, [pc, #512]	@ (800452c <_printf_float+0x2d8>)
 800432c:	bfb8      	it	lt
 800432e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004332:	4b7f      	ldr	r3, [pc, #508]	@ (8004530 <_printf_float+0x2dc>)
 8004334:	e7d3      	b.n	80042de <_printf_float+0x8a>
 8004336:	6863      	ldr	r3, [r4, #4]
 8004338:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800433c:	1c5a      	adds	r2, r3, #1
 800433e:	d13f      	bne.n	80043c0 <_printf_float+0x16c>
 8004340:	2306      	movs	r3, #6
 8004342:	6063      	str	r3, [r4, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800434a:	6023      	str	r3, [r4, #0]
 800434c:	9206      	str	r2, [sp, #24]
 800434e:	aa0e      	add	r2, sp, #56	@ 0x38
 8004350:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004354:	aa0d      	add	r2, sp, #52	@ 0x34
 8004356:	9203      	str	r2, [sp, #12]
 8004358:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800435c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004360:	6863      	ldr	r3, [r4, #4]
 8004362:	4642      	mov	r2, r8
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	4628      	mov	r0, r5
 8004368:	464b      	mov	r3, r9
 800436a:	910a      	str	r1, [sp, #40]	@ 0x28
 800436c:	f7ff fed4 	bl	8004118 <__cvt>
 8004370:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004372:	4680      	mov	r8, r0
 8004374:	2947      	cmp	r1, #71	@ 0x47
 8004376:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004378:	d128      	bne.n	80043cc <_printf_float+0x178>
 800437a:	1cc8      	adds	r0, r1, #3
 800437c:	db02      	blt.n	8004384 <_printf_float+0x130>
 800437e:	6863      	ldr	r3, [r4, #4]
 8004380:	4299      	cmp	r1, r3
 8004382:	dd40      	ble.n	8004406 <_printf_float+0x1b2>
 8004384:	f1aa 0a02 	sub.w	sl, sl, #2
 8004388:	fa5f fa8a 	uxtb.w	sl, sl
 800438c:	4652      	mov	r2, sl
 800438e:	3901      	subs	r1, #1
 8004390:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004394:	910d      	str	r1, [sp, #52]	@ 0x34
 8004396:	f7ff ff23 	bl	80041e0 <__exponent>
 800439a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800439c:	4681      	mov	r9, r0
 800439e:	1813      	adds	r3, r2, r0
 80043a0:	2a01      	cmp	r2, #1
 80043a2:	6123      	str	r3, [r4, #16]
 80043a4:	dc02      	bgt.n	80043ac <_printf_float+0x158>
 80043a6:	6822      	ldr	r2, [r4, #0]
 80043a8:	07d2      	lsls	r2, r2, #31
 80043aa:	d501      	bpl.n	80043b0 <_printf_float+0x15c>
 80043ac:	3301      	adds	r3, #1
 80043ae:	6123      	str	r3, [r4, #16]
 80043b0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d09e      	beq.n	80042f6 <_printf_float+0xa2>
 80043b8:	232d      	movs	r3, #45	@ 0x2d
 80043ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043be:	e79a      	b.n	80042f6 <_printf_float+0xa2>
 80043c0:	2947      	cmp	r1, #71	@ 0x47
 80043c2:	d1bf      	bne.n	8004344 <_printf_float+0xf0>
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1bd      	bne.n	8004344 <_printf_float+0xf0>
 80043c8:	2301      	movs	r3, #1
 80043ca:	e7ba      	b.n	8004342 <_printf_float+0xee>
 80043cc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80043d0:	d9dc      	bls.n	800438c <_printf_float+0x138>
 80043d2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80043d6:	d118      	bne.n	800440a <_printf_float+0x1b6>
 80043d8:	2900      	cmp	r1, #0
 80043da:	6863      	ldr	r3, [r4, #4]
 80043dc:	dd0b      	ble.n	80043f6 <_printf_float+0x1a2>
 80043de:	6121      	str	r1, [r4, #16]
 80043e0:	b913      	cbnz	r3, 80043e8 <_printf_float+0x194>
 80043e2:	6822      	ldr	r2, [r4, #0]
 80043e4:	07d0      	lsls	r0, r2, #31
 80043e6:	d502      	bpl.n	80043ee <_printf_float+0x19a>
 80043e8:	3301      	adds	r3, #1
 80043ea:	440b      	add	r3, r1
 80043ec:	6123      	str	r3, [r4, #16]
 80043ee:	f04f 0900 	mov.w	r9, #0
 80043f2:	65a1      	str	r1, [r4, #88]	@ 0x58
 80043f4:	e7dc      	b.n	80043b0 <_printf_float+0x15c>
 80043f6:	b913      	cbnz	r3, 80043fe <_printf_float+0x1aa>
 80043f8:	6822      	ldr	r2, [r4, #0]
 80043fa:	07d2      	lsls	r2, r2, #31
 80043fc:	d501      	bpl.n	8004402 <_printf_float+0x1ae>
 80043fe:	3302      	adds	r3, #2
 8004400:	e7f4      	b.n	80043ec <_printf_float+0x198>
 8004402:	2301      	movs	r3, #1
 8004404:	e7f2      	b.n	80043ec <_printf_float+0x198>
 8004406:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800440a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800440c:	4299      	cmp	r1, r3
 800440e:	db05      	blt.n	800441c <_printf_float+0x1c8>
 8004410:	6823      	ldr	r3, [r4, #0]
 8004412:	6121      	str	r1, [r4, #16]
 8004414:	07d8      	lsls	r0, r3, #31
 8004416:	d5ea      	bpl.n	80043ee <_printf_float+0x19a>
 8004418:	1c4b      	adds	r3, r1, #1
 800441a:	e7e7      	b.n	80043ec <_printf_float+0x198>
 800441c:	2900      	cmp	r1, #0
 800441e:	bfcc      	ite	gt
 8004420:	2201      	movgt	r2, #1
 8004422:	f1c1 0202 	rsble	r2, r1, #2
 8004426:	4413      	add	r3, r2
 8004428:	e7e0      	b.n	80043ec <_printf_float+0x198>
 800442a:	6823      	ldr	r3, [r4, #0]
 800442c:	055a      	lsls	r2, r3, #21
 800442e:	d407      	bmi.n	8004440 <_printf_float+0x1ec>
 8004430:	6923      	ldr	r3, [r4, #16]
 8004432:	4642      	mov	r2, r8
 8004434:	4631      	mov	r1, r6
 8004436:	4628      	mov	r0, r5
 8004438:	47b8      	blx	r7
 800443a:	3001      	adds	r0, #1
 800443c:	d12b      	bne.n	8004496 <_printf_float+0x242>
 800443e:	e764      	b.n	800430a <_printf_float+0xb6>
 8004440:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004444:	f240 80dc 	bls.w	8004600 <_printf_float+0x3ac>
 8004448:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800444c:	2200      	movs	r2, #0
 800444e:	2300      	movs	r3, #0
 8004450:	f7fc faaa 	bl	80009a8 <__aeabi_dcmpeq>
 8004454:	2800      	cmp	r0, #0
 8004456:	d033      	beq.n	80044c0 <_printf_float+0x26c>
 8004458:	2301      	movs	r3, #1
 800445a:	4631      	mov	r1, r6
 800445c:	4628      	mov	r0, r5
 800445e:	4a35      	ldr	r2, [pc, #212]	@ (8004534 <_printf_float+0x2e0>)
 8004460:	47b8      	blx	r7
 8004462:	3001      	adds	r0, #1
 8004464:	f43f af51 	beq.w	800430a <_printf_float+0xb6>
 8004468:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800446c:	4543      	cmp	r3, r8
 800446e:	db02      	blt.n	8004476 <_printf_float+0x222>
 8004470:	6823      	ldr	r3, [r4, #0]
 8004472:	07d8      	lsls	r0, r3, #31
 8004474:	d50f      	bpl.n	8004496 <_printf_float+0x242>
 8004476:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800447a:	4631      	mov	r1, r6
 800447c:	4628      	mov	r0, r5
 800447e:	47b8      	blx	r7
 8004480:	3001      	adds	r0, #1
 8004482:	f43f af42 	beq.w	800430a <_printf_float+0xb6>
 8004486:	f04f 0900 	mov.w	r9, #0
 800448a:	f108 38ff 	add.w	r8, r8, #4294967295
 800448e:	f104 0a1a 	add.w	sl, r4, #26
 8004492:	45c8      	cmp	r8, r9
 8004494:	dc09      	bgt.n	80044aa <_printf_float+0x256>
 8004496:	6823      	ldr	r3, [r4, #0]
 8004498:	079b      	lsls	r3, r3, #30
 800449a:	f100 8102 	bmi.w	80046a2 <_printf_float+0x44e>
 800449e:	68e0      	ldr	r0, [r4, #12]
 80044a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80044a2:	4298      	cmp	r0, r3
 80044a4:	bfb8      	it	lt
 80044a6:	4618      	movlt	r0, r3
 80044a8:	e731      	b.n	800430e <_printf_float+0xba>
 80044aa:	2301      	movs	r3, #1
 80044ac:	4652      	mov	r2, sl
 80044ae:	4631      	mov	r1, r6
 80044b0:	4628      	mov	r0, r5
 80044b2:	47b8      	blx	r7
 80044b4:	3001      	adds	r0, #1
 80044b6:	f43f af28 	beq.w	800430a <_printf_float+0xb6>
 80044ba:	f109 0901 	add.w	r9, r9, #1
 80044be:	e7e8      	b.n	8004492 <_printf_float+0x23e>
 80044c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	dc38      	bgt.n	8004538 <_printf_float+0x2e4>
 80044c6:	2301      	movs	r3, #1
 80044c8:	4631      	mov	r1, r6
 80044ca:	4628      	mov	r0, r5
 80044cc:	4a19      	ldr	r2, [pc, #100]	@ (8004534 <_printf_float+0x2e0>)
 80044ce:	47b8      	blx	r7
 80044d0:	3001      	adds	r0, #1
 80044d2:	f43f af1a 	beq.w	800430a <_printf_float+0xb6>
 80044d6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80044da:	ea59 0303 	orrs.w	r3, r9, r3
 80044de:	d102      	bne.n	80044e6 <_printf_float+0x292>
 80044e0:	6823      	ldr	r3, [r4, #0]
 80044e2:	07d9      	lsls	r1, r3, #31
 80044e4:	d5d7      	bpl.n	8004496 <_printf_float+0x242>
 80044e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80044ea:	4631      	mov	r1, r6
 80044ec:	4628      	mov	r0, r5
 80044ee:	47b8      	blx	r7
 80044f0:	3001      	adds	r0, #1
 80044f2:	f43f af0a 	beq.w	800430a <_printf_float+0xb6>
 80044f6:	f04f 0a00 	mov.w	sl, #0
 80044fa:	f104 0b1a 	add.w	fp, r4, #26
 80044fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004500:	425b      	negs	r3, r3
 8004502:	4553      	cmp	r3, sl
 8004504:	dc01      	bgt.n	800450a <_printf_float+0x2b6>
 8004506:	464b      	mov	r3, r9
 8004508:	e793      	b.n	8004432 <_printf_float+0x1de>
 800450a:	2301      	movs	r3, #1
 800450c:	465a      	mov	r2, fp
 800450e:	4631      	mov	r1, r6
 8004510:	4628      	mov	r0, r5
 8004512:	47b8      	blx	r7
 8004514:	3001      	adds	r0, #1
 8004516:	f43f aef8 	beq.w	800430a <_printf_float+0xb6>
 800451a:	f10a 0a01 	add.w	sl, sl, #1
 800451e:	e7ee      	b.n	80044fe <_printf_float+0x2aa>
 8004520:	7fefffff 	.word	0x7fefffff
 8004524:	08006ac2 	.word	0x08006ac2
 8004528:	08006ac6 	.word	0x08006ac6
 800452c:	08006aca 	.word	0x08006aca
 8004530:	08006ace 	.word	0x08006ace
 8004534:	08006ad2 	.word	0x08006ad2
 8004538:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800453a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800453e:	4553      	cmp	r3, sl
 8004540:	bfa8      	it	ge
 8004542:	4653      	movge	r3, sl
 8004544:	2b00      	cmp	r3, #0
 8004546:	4699      	mov	r9, r3
 8004548:	dc36      	bgt.n	80045b8 <_printf_float+0x364>
 800454a:	f04f 0b00 	mov.w	fp, #0
 800454e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004552:	f104 021a 	add.w	r2, r4, #26
 8004556:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004558:	930a      	str	r3, [sp, #40]	@ 0x28
 800455a:	eba3 0309 	sub.w	r3, r3, r9
 800455e:	455b      	cmp	r3, fp
 8004560:	dc31      	bgt.n	80045c6 <_printf_float+0x372>
 8004562:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004564:	459a      	cmp	sl, r3
 8004566:	dc3a      	bgt.n	80045de <_printf_float+0x38a>
 8004568:	6823      	ldr	r3, [r4, #0]
 800456a:	07da      	lsls	r2, r3, #31
 800456c:	d437      	bmi.n	80045de <_printf_float+0x38a>
 800456e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004570:	ebaa 0903 	sub.w	r9, sl, r3
 8004574:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004576:	ebaa 0303 	sub.w	r3, sl, r3
 800457a:	4599      	cmp	r9, r3
 800457c:	bfa8      	it	ge
 800457e:	4699      	movge	r9, r3
 8004580:	f1b9 0f00 	cmp.w	r9, #0
 8004584:	dc33      	bgt.n	80045ee <_printf_float+0x39a>
 8004586:	f04f 0800 	mov.w	r8, #0
 800458a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800458e:	f104 0b1a 	add.w	fp, r4, #26
 8004592:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004594:	ebaa 0303 	sub.w	r3, sl, r3
 8004598:	eba3 0309 	sub.w	r3, r3, r9
 800459c:	4543      	cmp	r3, r8
 800459e:	f77f af7a 	ble.w	8004496 <_printf_float+0x242>
 80045a2:	2301      	movs	r3, #1
 80045a4:	465a      	mov	r2, fp
 80045a6:	4631      	mov	r1, r6
 80045a8:	4628      	mov	r0, r5
 80045aa:	47b8      	blx	r7
 80045ac:	3001      	adds	r0, #1
 80045ae:	f43f aeac 	beq.w	800430a <_printf_float+0xb6>
 80045b2:	f108 0801 	add.w	r8, r8, #1
 80045b6:	e7ec      	b.n	8004592 <_printf_float+0x33e>
 80045b8:	4642      	mov	r2, r8
 80045ba:	4631      	mov	r1, r6
 80045bc:	4628      	mov	r0, r5
 80045be:	47b8      	blx	r7
 80045c0:	3001      	adds	r0, #1
 80045c2:	d1c2      	bne.n	800454a <_printf_float+0x2f6>
 80045c4:	e6a1      	b.n	800430a <_printf_float+0xb6>
 80045c6:	2301      	movs	r3, #1
 80045c8:	4631      	mov	r1, r6
 80045ca:	4628      	mov	r0, r5
 80045cc:	920a      	str	r2, [sp, #40]	@ 0x28
 80045ce:	47b8      	blx	r7
 80045d0:	3001      	adds	r0, #1
 80045d2:	f43f ae9a 	beq.w	800430a <_printf_float+0xb6>
 80045d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80045d8:	f10b 0b01 	add.w	fp, fp, #1
 80045dc:	e7bb      	b.n	8004556 <_printf_float+0x302>
 80045de:	4631      	mov	r1, r6
 80045e0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80045e4:	4628      	mov	r0, r5
 80045e6:	47b8      	blx	r7
 80045e8:	3001      	adds	r0, #1
 80045ea:	d1c0      	bne.n	800456e <_printf_float+0x31a>
 80045ec:	e68d      	b.n	800430a <_printf_float+0xb6>
 80045ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80045f0:	464b      	mov	r3, r9
 80045f2:	4631      	mov	r1, r6
 80045f4:	4628      	mov	r0, r5
 80045f6:	4442      	add	r2, r8
 80045f8:	47b8      	blx	r7
 80045fa:	3001      	adds	r0, #1
 80045fc:	d1c3      	bne.n	8004586 <_printf_float+0x332>
 80045fe:	e684      	b.n	800430a <_printf_float+0xb6>
 8004600:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004604:	f1ba 0f01 	cmp.w	sl, #1
 8004608:	dc01      	bgt.n	800460e <_printf_float+0x3ba>
 800460a:	07db      	lsls	r3, r3, #31
 800460c:	d536      	bpl.n	800467c <_printf_float+0x428>
 800460e:	2301      	movs	r3, #1
 8004610:	4642      	mov	r2, r8
 8004612:	4631      	mov	r1, r6
 8004614:	4628      	mov	r0, r5
 8004616:	47b8      	blx	r7
 8004618:	3001      	adds	r0, #1
 800461a:	f43f ae76 	beq.w	800430a <_printf_float+0xb6>
 800461e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004622:	4631      	mov	r1, r6
 8004624:	4628      	mov	r0, r5
 8004626:	47b8      	blx	r7
 8004628:	3001      	adds	r0, #1
 800462a:	f43f ae6e 	beq.w	800430a <_printf_float+0xb6>
 800462e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004632:	2200      	movs	r2, #0
 8004634:	2300      	movs	r3, #0
 8004636:	f10a 3aff 	add.w	sl, sl, #4294967295
 800463a:	f7fc f9b5 	bl	80009a8 <__aeabi_dcmpeq>
 800463e:	b9c0      	cbnz	r0, 8004672 <_printf_float+0x41e>
 8004640:	4653      	mov	r3, sl
 8004642:	f108 0201 	add.w	r2, r8, #1
 8004646:	4631      	mov	r1, r6
 8004648:	4628      	mov	r0, r5
 800464a:	47b8      	blx	r7
 800464c:	3001      	adds	r0, #1
 800464e:	d10c      	bne.n	800466a <_printf_float+0x416>
 8004650:	e65b      	b.n	800430a <_printf_float+0xb6>
 8004652:	2301      	movs	r3, #1
 8004654:	465a      	mov	r2, fp
 8004656:	4631      	mov	r1, r6
 8004658:	4628      	mov	r0, r5
 800465a:	47b8      	blx	r7
 800465c:	3001      	adds	r0, #1
 800465e:	f43f ae54 	beq.w	800430a <_printf_float+0xb6>
 8004662:	f108 0801 	add.w	r8, r8, #1
 8004666:	45d0      	cmp	r8, sl
 8004668:	dbf3      	blt.n	8004652 <_printf_float+0x3fe>
 800466a:	464b      	mov	r3, r9
 800466c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004670:	e6e0      	b.n	8004434 <_printf_float+0x1e0>
 8004672:	f04f 0800 	mov.w	r8, #0
 8004676:	f104 0b1a 	add.w	fp, r4, #26
 800467a:	e7f4      	b.n	8004666 <_printf_float+0x412>
 800467c:	2301      	movs	r3, #1
 800467e:	4642      	mov	r2, r8
 8004680:	e7e1      	b.n	8004646 <_printf_float+0x3f2>
 8004682:	2301      	movs	r3, #1
 8004684:	464a      	mov	r2, r9
 8004686:	4631      	mov	r1, r6
 8004688:	4628      	mov	r0, r5
 800468a:	47b8      	blx	r7
 800468c:	3001      	adds	r0, #1
 800468e:	f43f ae3c 	beq.w	800430a <_printf_float+0xb6>
 8004692:	f108 0801 	add.w	r8, r8, #1
 8004696:	68e3      	ldr	r3, [r4, #12]
 8004698:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800469a:	1a5b      	subs	r3, r3, r1
 800469c:	4543      	cmp	r3, r8
 800469e:	dcf0      	bgt.n	8004682 <_printf_float+0x42e>
 80046a0:	e6fd      	b.n	800449e <_printf_float+0x24a>
 80046a2:	f04f 0800 	mov.w	r8, #0
 80046a6:	f104 0919 	add.w	r9, r4, #25
 80046aa:	e7f4      	b.n	8004696 <_printf_float+0x442>

080046ac <_printf_common>:
 80046ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046b0:	4616      	mov	r6, r2
 80046b2:	4698      	mov	r8, r3
 80046b4:	688a      	ldr	r2, [r1, #8]
 80046b6:	690b      	ldr	r3, [r1, #16]
 80046b8:	4607      	mov	r7, r0
 80046ba:	4293      	cmp	r3, r2
 80046bc:	bfb8      	it	lt
 80046be:	4613      	movlt	r3, r2
 80046c0:	6033      	str	r3, [r6, #0]
 80046c2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80046c6:	460c      	mov	r4, r1
 80046c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80046cc:	b10a      	cbz	r2, 80046d2 <_printf_common+0x26>
 80046ce:	3301      	adds	r3, #1
 80046d0:	6033      	str	r3, [r6, #0]
 80046d2:	6823      	ldr	r3, [r4, #0]
 80046d4:	0699      	lsls	r1, r3, #26
 80046d6:	bf42      	ittt	mi
 80046d8:	6833      	ldrmi	r3, [r6, #0]
 80046da:	3302      	addmi	r3, #2
 80046dc:	6033      	strmi	r3, [r6, #0]
 80046de:	6825      	ldr	r5, [r4, #0]
 80046e0:	f015 0506 	ands.w	r5, r5, #6
 80046e4:	d106      	bne.n	80046f4 <_printf_common+0x48>
 80046e6:	f104 0a19 	add.w	sl, r4, #25
 80046ea:	68e3      	ldr	r3, [r4, #12]
 80046ec:	6832      	ldr	r2, [r6, #0]
 80046ee:	1a9b      	subs	r3, r3, r2
 80046f0:	42ab      	cmp	r3, r5
 80046f2:	dc2b      	bgt.n	800474c <_printf_common+0xa0>
 80046f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80046f8:	6822      	ldr	r2, [r4, #0]
 80046fa:	3b00      	subs	r3, #0
 80046fc:	bf18      	it	ne
 80046fe:	2301      	movne	r3, #1
 8004700:	0692      	lsls	r2, r2, #26
 8004702:	d430      	bmi.n	8004766 <_printf_common+0xba>
 8004704:	4641      	mov	r1, r8
 8004706:	4638      	mov	r0, r7
 8004708:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800470c:	47c8      	blx	r9
 800470e:	3001      	adds	r0, #1
 8004710:	d023      	beq.n	800475a <_printf_common+0xae>
 8004712:	6823      	ldr	r3, [r4, #0]
 8004714:	6922      	ldr	r2, [r4, #16]
 8004716:	f003 0306 	and.w	r3, r3, #6
 800471a:	2b04      	cmp	r3, #4
 800471c:	bf14      	ite	ne
 800471e:	2500      	movne	r5, #0
 8004720:	6833      	ldreq	r3, [r6, #0]
 8004722:	f04f 0600 	mov.w	r6, #0
 8004726:	bf08      	it	eq
 8004728:	68e5      	ldreq	r5, [r4, #12]
 800472a:	f104 041a 	add.w	r4, r4, #26
 800472e:	bf08      	it	eq
 8004730:	1aed      	subeq	r5, r5, r3
 8004732:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004736:	bf08      	it	eq
 8004738:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800473c:	4293      	cmp	r3, r2
 800473e:	bfc4      	itt	gt
 8004740:	1a9b      	subgt	r3, r3, r2
 8004742:	18ed      	addgt	r5, r5, r3
 8004744:	42b5      	cmp	r5, r6
 8004746:	d11a      	bne.n	800477e <_printf_common+0xd2>
 8004748:	2000      	movs	r0, #0
 800474a:	e008      	b.n	800475e <_printf_common+0xb2>
 800474c:	2301      	movs	r3, #1
 800474e:	4652      	mov	r2, sl
 8004750:	4641      	mov	r1, r8
 8004752:	4638      	mov	r0, r7
 8004754:	47c8      	blx	r9
 8004756:	3001      	adds	r0, #1
 8004758:	d103      	bne.n	8004762 <_printf_common+0xb6>
 800475a:	f04f 30ff 	mov.w	r0, #4294967295
 800475e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004762:	3501      	adds	r5, #1
 8004764:	e7c1      	b.n	80046ea <_printf_common+0x3e>
 8004766:	2030      	movs	r0, #48	@ 0x30
 8004768:	18e1      	adds	r1, r4, r3
 800476a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800476e:	1c5a      	adds	r2, r3, #1
 8004770:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004774:	4422      	add	r2, r4
 8004776:	3302      	adds	r3, #2
 8004778:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800477c:	e7c2      	b.n	8004704 <_printf_common+0x58>
 800477e:	2301      	movs	r3, #1
 8004780:	4622      	mov	r2, r4
 8004782:	4641      	mov	r1, r8
 8004784:	4638      	mov	r0, r7
 8004786:	47c8      	blx	r9
 8004788:	3001      	adds	r0, #1
 800478a:	d0e6      	beq.n	800475a <_printf_common+0xae>
 800478c:	3601      	adds	r6, #1
 800478e:	e7d9      	b.n	8004744 <_printf_common+0x98>

08004790 <_printf_i>:
 8004790:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004794:	7e0f      	ldrb	r7, [r1, #24]
 8004796:	4691      	mov	r9, r2
 8004798:	2f78      	cmp	r7, #120	@ 0x78
 800479a:	4680      	mov	r8, r0
 800479c:	460c      	mov	r4, r1
 800479e:	469a      	mov	sl, r3
 80047a0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80047a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80047a6:	d807      	bhi.n	80047b8 <_printf_i+0x28>
 80047a8:	2f62      	cmp	r7, #98	@ 0x62
 80047aa:	d80a      	bhi.n	80047c2 <_printf_i+0x32>
 80047ac:	2f00      	cmp	r7, #0
 80047ae:	f000 80d3 	beq.w	8004958 <_printf_i+0x1c8>
 80047b2:	2f58      	cmp	r7, #88	@ 0x58
 80047b4:	f000 80ba 	beq.w	800492c <_printf_i+0x19c>
 80047b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80047c0:	e03a      	b.n	8004838 <_printf_i+0xa8>
 80047c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80047c6:	2b15      	cmp	r3, #21
 80047c8:	d8f6      	bhi.n	80047b8 <_printf_i+0x28>
 80047ca:	a101      	add	r1, pc, #4	@ (adr r1, 80047d0 <_printf_i+0x40>)
 80047cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047d0:	08004829 	.word	0x08004829
 80047d4:	0800483d 	.word	0x0800483d
 80047d8:	080047b9 	.word	0x080047b9
 80047dc:	080047b9 	.word	0x080047b9
 80047e0:	080047b9 	.word	0x080047b9
 80047e4:	080047b9 	.word	0x080047b9
 80047e8:	0800483d 	.word	0x0800483d
 80047ec:	080047b9 	.word	0x080047b9
 80047f0:	080047b9 	.word	0x080047b9
 80047f4:	080047b9 	.word	0x080047b9
 80047f8:	080047b9 	.word	0x080047b9
 80047fc:	0800493f 	.word	0x0800493f
 8004800:	08004867 	.word	0x08004867
 8004804:	080048f9 	.word	0x080048f9
 8004808:	080047b9 	.word	0x080047b9
 800480c:	080047b9 	.word	0x080047b9
 8004810:	08004961 	.word	0x08004961
 8004814:	080047b9 	.word	0x080047b9
 8004818:	08004867 	.word	0x08004867
 800481c:	080047b9 	.word	0x080047b9
 8004820:	080047b9 	.word	0x080047b9
 8004824:	08004901 	.word	0x08004901
 8004828:	6833      	ldr	r3, [r6, #0]
 800482a:	1d1a      	adds	r2, r3, #4
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6032      	str	r2, [r6, #0]
 8004830:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004834:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004838:	2301      	movs	r3, #1
 800483a:	e09e      	b.n	800497a <_printf_i+0x1ea>
 800483c:	6833      	ldr	r3, [r6, #0]
 800483e:	6820      	ldr	r0, [r4, #0]
 8004840:	1d19      	adds	r1, r3, #4
 8004842:	6031      	str	r1, [r6, #0]
 8004844:	0606      	lsls	r6, r0, #24
 8004846:	d501      	bpl.n	800484c <_printf_i+0xbc>
 8004848:	681d      	ldr	r5, [r3, #0]
 800484a:	e003      	b.n	8004854 <_printf_i+0xc4>
 800484c:	0645      	lsls	r5, r0, #25
 800484e:	d5fb      	bpl.n	8004848 <_printf_i+0xb8>
 8004850:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004854:	2d00      	cmp	r5, #0
 8004856:	da03      	bge.n	8004860 <_printf_i+0xd0>
 8004858:	232d      	movs	r3, #45	@ 0x2d
 800485a:	426d      	negs	r5, r5
 800485c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004860:	230a      	movs	r3, #10
 8004862:	4859      	ldr	r0, [pc, #356]	@ (80049c8 <_printf_i+0x238>)
 8004864:	e011      	b.n	800488a <_printf_i+0xfa>
 8004866:	6821      	ldr	r1, [r4, #0]
 8004868:	6833      	ldr	r3, [r6, #0]
 800486a:	0608      	lsls	r0, r1, #24
 800486c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004870:	d402      	bmi.n	8004878 <_printf_i+0xe8>
 8004872:	0649      	lsls	r1, r1, #25
 8004874:	bf48      	it	mi
 8004876:	b2ad      	uxthmi	r5, r5
 8004878:	2f6f      	cmp	r7, #111	@ 0x6f
 800487a:	6033      	str	r3, [r6, #0]
 800487c:	bf14      	ite	ne
 800487e:	230a      	movne	r3, #10
 8004880:	2308      	moveq	r3, #8
 8004882:	4851      	ldr	r0, [pc, #324]	@ (80049c8 <_printf_i+0x238>)
 8004884:	2100      	movs	r1, #0
 8004886:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800488a:	6866      	ldr	r6, [r4, #4]
 800488c:	2e00      	cmp	r6, #0
 800488e:	bfa8      	it	ge
 8004890:	6821      	ldrge	r1, [r4, #0]
 8004892:	60a6      	str	r6, [r4, #8]
 8004894:	bfa4      	itt	ge
 8004896:	f021 0104 	bicge.w	r1, r1, #4
 800489a:	6021      	strge	r1, [r4, #0]
 800489c:	b90d      	cbnz	r5, 80048a2 <_printf_i+0x112>
 800489e:	2e00      	cmp	r6, #0
 80048a0:	d04b      	beq.n	800493a <_printf_i+0x1aa>
 80048a2:	4616      	mov	r6, r2
 80048a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80048a8:	fb03 5711 	mls	r7, r3, r1, r5
 80048ac:	5dc7      	ldrb	r7, [r0, r7]
 80048ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80048b2:	462f      	mov	r7, r5
 80048b4:	42bb      	cmp	r3, r7
 80048b6:	460d      	mov	r5, r1
 80048b8:	d9f4      	bls.n	80048a4 <_printf_i+0x114>
 80048ba:	2b08      	cmp	r3, #8
 80048bc:	d10b      	bne.n	80048d6 <_printf_i+0x146>
 80048be:	6823      	ldr	r3, [r4, #0]
 80048c0:	07df      	lsls	r7, r3, #31
 80048c2:	d508      	bpl.n	80048d6 <_printf_i+0x146>
 80048c4:	6923      	ldr	r3, [r4, #16]
 80048c6:	6861      	ldr	r1, [r4, #4]
 80048c8:	4299      	cmp	r1, r3
 80048ca:	bfde      	ittt	le
 80048cc:	2330      	movle	r3, #48	@ 0x30
 80048ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80048d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80048d6:	1b92      	subs	r2, r2, r6
 80048d8:	6122      	str	r2, [r4, #16]
 80048da:	464b      	mov	r3, r9
 80048dc:	4621      	mov	r1, r4
 80048de:	4640      	mov	r0, r8
 80048e0:	f8cd a000 	str.w	sl, [sp]
 80048e4:	aa03      	add	r2, sp, #12
 80048e6:	f7ff fee1 	bl	80046ac <_printf_common>
 80048ea:	3001      	adds	r0, #1
 80048ec:	d14a      	bne.n	8004984 <_printf_i+0x1f4>
 80048ee:	f04f 30ff 	mov.w	r0, #4294967295
 80048f2:	b004      	add	sp, #16
 80048f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048f8:	6823      	ldr	r3, [r4, #0]
 80048fa:	f043 0320 	orr.w	r3, r3, #32
 80048fe:	6023      	str	r3, [r4, #0]
 8004900:	2778      	movs	r7, #120	@ 0x78
 8004902:	4832      	ldr	r0, [pc, #200]	@ (80049cc <_printf_i+0x23c>)
 8004904:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004908:	6823      	ldr	r3, [r4, #0]
 800490a:	6831      	ldr	r1, [r6, #0]
 800490c:	061f      	lsls	r7, r3, #24
 800490e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004912:	d402      	bmi.n	800491a <_printf_i+0x18a>
 8004914:	065f      	lsls	r7, r3, #25
 8004916:	bf48      	it	mi
 8004918:	b2ad      	uxthmi	r5, r5
 800491a:	6031      	str	r1, [r6, #0]
 800491c:	07d9      	lsls	r1, r3, #31
 800491e:	bf44      	itt	mi
 8004920:	f043 0320 	orrmi.w	r3, r3, #32
 8004924:	6023      	strmi	r3, [r4, #0]
 8004926:	b11d      	cbz	r5, 8004930 <_printf_i+0x1a0>
 8004928:	2310      	movs	r3, #16
 800492a:	e7ab      	b.n	8004884 <_printf_i+0xf4>
 800492c:	4826      	ldr	r0, [pc, #152]	@ (80049c8 <_printf_i+0x238>)
 800492e:	e7e9      	b.n	8004904 <_printf_i+0x174>
 8004930:	6823      	ldr	r3, [r4, #0]
 8004932:	f023 0320 	bic.w	r3, r3, #32
 8004936:	6023      	str	r3, [r4, #0]
 8004938:	e7f6      	b.n	8004928 <_printf_i+0x198>
 800493a:	4616      	mov	r6, r2
 800493c:	e7bd      	b.n	80048ba <_printf_i+0x12a>
 800493e:	6833      	ldr	r3, [r6, #0]
 8004940:	6825      	ldr	r5, [r4, #0]
 8004942:	1d18      	adds	r0, r3, #4
 8004944:	6961      	ldr	r1, [r4, #20]
 8004946:	6030      	str	r0, [r6, #0]
 8004948:	062e      	lsls	r6, r5, #24
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	d501      	bpl.n	8004952 <_printf_i+0x1c2>
 800494e:	6019      	str	r1, [r3, #0]
 8004950:	e002      	b.n	8004958 <_printf_i+0x1c8>
 8004952:	0668      	lsls	r0, r5, #25
 8004954:	d5fb      	bpl.n	800494e <_printf_i+0x1be>
 8004956:	8019      	strh	r1, [r3, #0]
 8004958:	2300      	movs	r3, #0
 800495a:	4616      	mov	r6, r2
 800495c:	6123      	str	r3, [r4, #16]
 800495e:	e7bc      	b.n	80048da <_printf_i+0x14a>
 8004960:	6833      	ldr	r3, [r6, #0]
 8004962:	2100      	movs	r1, #0
 8004964:	1d1a      	adds	r2, r3, #4
 8004966:	6032      	str	r2, [r6, #0]
 8004968:	681e      	ldr	r6, [r3, #0]
 800496a:	6862      	ldr	r2, [r4, #4]
 800496c:	4630      	mov	r0, r6
 800496e:	f000 f9b4 	bl	8004cda <memchr>
 8004972:	b108      	cbz	r0, 8004978 <_printf_i+0x1e8>
 8004974:	1b80      	subs	r0, r0, r6
 8004976:	6060      	str	r0, [r4, #4]
 8004978:	6863      	ldr	r3, [r4, #4]
 800497a:	6123      	str	r3, [r4, #16]
 800497c:	2300      	movs	r3, #0
 800497e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004982:	e7aa      	b.n	80048da <_printf_i+0x14a>
 8004984:	4632      	mov	r2, r6
 8004986:	4649      	mov	r1, r9
 8004988:	4640      	mov	r0, r8
 800498a:	6923      	ldr	r3, [r4, #16]
 800498c:	47d0      	blx	sl
 800498e:	3001      	adds	r0, #1
 8004990:	d0ad      	beq.n	80048ee <_printf_i+0x15e>
 8004992:	6823      	ldr	r3, [r4, #0]
 8004994:	079b      	lsls	r3, r3, #30
 8004996:	d413      	bmi.n	80049c0 <_printf_i+0x230>
 8004998:	68e0      	ldr	r0, [r4, #12]
 800499a:	9b03      	ldr	r3, [sp, #12]
 800499c:	4298      	cmp	r0, r3
 800499e:	bfb8      	it	lt
 80049a0:	4618      	movlt	r0, r3
 80049a2:	e7a6      	b.n	80048f2 <_printf_i+0x162>
 80049a4:	2301      	movs	r3, #1
 80049a6:	4632      	mov	r2, r6
 80049a8:	4649      	mov	r1, r9
 80049aa:	4640      	mov	r0, r8
 80049ac:	47d0      	blx	sl
 80049ae:	3001      	adds	r0, #1
 80049b0:	d09d      	beq.n	80048ee <_printf_i+0x15e>
 80049b2:	3501      	adds	r5, #1
 80049b4:	68e3      	ldr	r3, [r4, #12]
 80049b6:	9903      	ldr	r1, [sp, #12]
 80049b8:	1a5b      	subs	r3, r3, r1
 80049ba:	42ab      	cmp	r3, r5
 80049bc:	dcf2      	bgt.n	80049a4 <_printf_i+0x214>
 80049be:	e7eb      	b.n	8004998 <_printf_i+0x208>
 80049c0:	2500      	movs	r5, #0
 80049c2:	f104 0619 	add.w	r6, r4, #25
 80049c6:	e7f5      	b.n	80049b4 <_printf_i+0x224>
 80049c8:	08006ad4 	.word	0x08006ad4
 80049cc:	08006ae5 	.word	0x08006ae5

080049d0 <std>:
 80049d0:	2300      	movs	r3, #0
 80049d2:	b510      	push	{r4, lr}
 80049d4:	4604      	mov	r4, r0
 80049d6:	e9c0 3300 	strd	r3, r3, [r0]
 80049da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80049de:	6083      	str	r3, [r0, #8]
 80049e0:	8181      	strh	r1, [r0, #12]
 80049e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80049e4:	81c2      	strh	r2, [r0, #14]
 80049e6:	6183      	str	r3, [r0, #24]
 80049e8:	4619      	mov	r1, r3
 80049ea:	2208      	movs	r2, #8
 80049ec:	305c      	adds	r0, #92	@ 0x5c
 80049ee:	f000 f8f4 	bl	8004bda <memset>
 80049f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004a28 <std+0x58>)
 80049f4:	6224      	str	r4, [r4, #32]
 80049f6:	6263      	str	r3, [r4, #36]	@ 0x24
 80049f8:	4b0c      	ldr	r3, [pc, #48]	@ (8004a2c <std+0x5c>)
 80049fa:	62a3      	str	r3, [r4, #40]	@ 0x28
 80049fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004a30 <std+0x60>)
 80049fe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004a00:	4b0c      	ldr	r3, [pc, #48]	@ (8004a34 <std+0x64>)
 8004a02:	6323      	str	r3, [r4, #48]	@ 0x30
 8004a04:	4b0c      	ldr	r3, [pc, #48]	@ (8004a38 <std+0x68>)
 8004a06:	429c      	cmp	r4, r3
 8004a08:	d006      	beq.n	8004a18 <std+0x48>
 8004a0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004a0e:	4294      	cmp	r4, r2
 8004a10:	d002      	beq.n	8004a18 <std+0x48>
 8004a12:	33d0      	adds	r3, #208	@ 0xd0
 8004a14:	429c      	cmp	r4, r3
 8004a16:	d105      	bne.n	8004a24 <std+0x54>
 8004a18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a20:	f000 b958 	b.w	8004cd4 <__retarget_lock_init_recursive>
 8004a24:	bd10      	pop	{r4, pc}
 8004a26:	bf00      	nop
 8004a28:	08004b55 	.word	0x08004b55
 8004a2c:	08004b77 	.word	0x08004b77
 8004a30:	08004baf 	.word	0x08004baf
 8004a34:	08004bd3 	.word	0x08004bd3
 8004a38:	2000044c 	.word	0x2000044c

08004a3c <stdio_exit_handler>:
 8004a3c:	4a02      	ldr	r2, [pc, #8]	@ (8004a48 <stdio_exit_handler+0xc>)
 8004a3e:	4903      	ldr	r1, [pc, #12]	@ (8004a4c <stdio_exit_handler+0x10>)
 8004a40:	4803      	ldr	r0, [pc, #12]	@ (8004a50 <stdio_exit_handler+0x14>)
 8004a42:	f000 b869 	b.w	8004b18 <_fwalk_sglue>
 8004a46:	bf00      	nop
 8004a48:	2000000c 	.word	0x2000000c
 8004a4c:	080063b5 	.word	0x080063b5
 8004a50:	2000001c 	.word	0x2000001c

08004a54 <cleanup_stdio>:
 8004a54:	6841      	ldr	r1, [r0, #4]
 8004a56:	4b0c      	ldr	r3, [pc, #48]	@ (8004a88 <cleanup_stdio+0x34>)
 8004a58:	b510      	push	{r4, lr}
 8004a5a:	4299      	cmp	r1, r3
 8004a5c:	4604      	mov	r4, r0
 8004a5e:	d001      	beq.n	8004a64 <cleanup_stdio+0x10>
 8004a60:	f001 fca8 	bl	80063b4 <_fflush_r>
 8004a64:	68a1      	ldr	r1, [r4, #8]
 8004a66:	4b09      	ldr	r3, [pc, #36]	@ (8004a8c <cleanup_stdio+0x38>)
 8004a68:	4299      	cmp	r1, r3
 8004a6a:	d002      	beq.n	8004a72 <cleanup_stdio+0x1e>
 8004a6c:	4620      	mov	r0, r4
 8004a6e:	f001 fca1 	bl	80063b4 <_fflush_r>
 8004a72:	68e1      	ldr	r1, [r4, #12]
 8004a74:	4b06      	ldr	r3, [pc, #24]	@ (8004a90 <cleanup_stdio+0x3c>)
 8004a76:	4299      	cmp	r1, r3
 8004a78:	d004      	beq.n	8004a84 <cleanup_stdio+0x30>
 8004a7a:	4620      	mov	r0, r4
 8004a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a80:	f001 bc98 	b.w	80063b4 <_fflush_r>
 8004a84:	bd10      	pop	{r4, pc}
 8004a86:	bf00      	nop
 8004a88:	2000044c 	.word	0x2000044c
 8004a8c:	200004b4 	.word	0x200004b4
 8004a90:	2000051c 	.word	0x2000051c

08004a94 <global_stdio_init.part.0>:
 8004a94:	b510      	push	{r4, lr}
 8004a96:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac4 <global_stdio_init.part.0+0x30>)
 8004a98:	4c0b      	ldr	r4, [pc, #44]	@ (8004ac8 <global_stdio_init.part.0+0x34>)
 8004a9a:	4a0c      	ldr	r2, [pc, #48]	@ (8004acc <global_stdio_init.part.0+0x38>)
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	2104      	movs	r1, #4
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f7ff ff94 	bl	80049d0 <std>
 8004aa8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004aac:	2201      	movs	r2, #1
 8004aae:	2109      	movs	r1, #9
 8004ab0:	f7ff ff8e 	bl	80049d0 <std>
 8004ab4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004ab8:	2202      	movs	r2, #2
 8004aba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004abe:	2112      	movs	r1, #18
 8004ac0:	f7ff bf86 	b.w	80049d0 <std>
 8004ac4:	20000584 	.word	0x20000584
 8004ac8:	2000044c 	.word	0x2000044c
 8004acc:	08004a3d 	.word	0x08004a3d

08004ad0 <__sfp_lock_acquire>:
 8004ad0:	4801      	ldr	r0, [pc, #4]	@ (8004ad8 <__sfp_lock_acquire+0x8>)
 8004ad2:	f000 b900 	b.w	8004cd6 <__retarget_lock_acquire_recursive>
 8004ad6:	bf00      	nop
 8004ad8:	2000058d 	.word	0x2000058d

08004adc <__sfp_lock_release>:
 8004adc:	4801      	ldr	r0, [pc, #4]	@ (8004ae4 <__sfp_lock_release+0x8>)
 8004ade:	f000 b8fb 	b.w	8004cd8 <__retarget_lock_release_recursive>
 8004ae2:	bf00      	nop
 8004ae4:	2000058d 	.word	0x2000058d

08004ae8 <__sinit>:
 8004ae8:	b510      	push	{r4, lr}
 8004aea:	4604      	mov	r4, r0
 8004aec:	f7ff fff0 	bl	8004ad0 <__sfp_lock_acquire>
 8004af0:	6a23      	ldr	r3, [r4, #32]
 8004af2:	b11b      	cbz	r3, 8004afc <__sinit+0x14>
 8004af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004af8:	f7ff bff0 	b.w	8004adc <__sfp_lock_release>
 8004afc:	4b04      	ldr	r3, [pc, #16]	@ (8004b10 <__sinit+0x28>)
 8004afe:	6223      	str	r3, [r4, #32]
 8004b00:	4b04      	ldr	r3, [pc, #16]	@ (8004b14 <__sinit+0x2c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1f5      	bne.n	8004af4 <__sinit+0xc>
 8004b08:	f7ff ffc4 	bl	8004a94 <global_stdio_init.part.0>
 8004b0c:	e7f2      	b.n	8004af4 <__sinit+0xc>
 8004b0e:	bf00      	nop
 8004b10:	08004a55 	.word	0x08004a55
 8004b14:	20000584 	.word	0x20000584

08004b18 <_fwalk_sglue>:
 8004b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b1c:	4607      	mov	r7, r0
 8004b1e:	4688      	mov	r8, r1
 8004b20:	4614      	mov	r4, r2
 8004b22:	2600      	movs	r6, #0
 8004b24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b28:	f1b9 0901 	subs.w	r9, r9, #1
 8004b2c:	d505      	bpl.n	8004b3a <_fwalk_sglue+0x22>
 8004b2e:	6824      	ldr	r4, [r4, #0]
 8004b30:	2c00      	cmp	r4, #0
 8004b32:	d1f7      	bne.n	8004b24 <_fwalk_sglue+0xc>
 8004b34:	4630      	mov	r0, r6
 8004b36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b3a:	89ab      	ldrh	r3, [r5, #12]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d907      	bls.n	8004b50 <_fwalk_sglue+0x38>
 8004b40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b44:	3301      	adds	r3, #1
 8004b46:	d003      	beq.n	8004b50 <_fwalk_sglue+0x38>
 8004b48:	4629      	mov	r1, r5
 8004b4a:	4638      	mov	r0, r7
 8004b4c:	47c0      	blx	r8
 8004b4e:	4306      	orrs	r6, r0
 8004b50:	3568      	adds	r5, #104	@ 0x68
 8004b52:	e7e9      	b.n	8004b28 <_fwalk_sglue+0x10>

08004b54 <__sread>:
 8004b54:	b510      	push	{r4, lr}
 8004b56:	460c      	mov	r4, r1
 8004b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b5c:	f000 f86c 	bl	8004c38 <_read_r>
 8004b60:	2800      	cmp	r0, #0
 8004b62:	bfab      	itete	ge
 8004b64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004b66:	89a3      	ldrhlt	r3, [r4, #12]
 8004b68:	181b      	addge	r3, r3, r0
 8004b6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004b6e:	bfac      	ite	ge
 8004b70:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004b72:	81a3      	strhlt	r3, [r4, #12]
 8004b74:	bd10      	pop	{r4, pc}

08004b76 <__swrite>:
 8004b76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b7a:	461f      	mov	r7, r3
 8004b7c:	898b      	ldrh	r3, [r1, #12]
 8004b7e:	4605      	mov	r5, r0
 8004b80:	05db      	lsls	r3, r3, #23
 8004b82:	460c      	mov	r4, r1
 8004b84:	4616      	mov	r6, r2
 8004b86:	d505      	bpl.n	8004b94 <__swrite+0x1e>
 8004b88:	2302      	movs	r3, #2
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b90:	f000 f840 	bl	8004c14 <_lseek_r>
 8004b94:	89a3      	ldrh	r3, [r4, #12]
 8004b96:	4632      	mov	r2, r6
 8004b98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b9c:	81a3      	strh	r3, [r4, #12]
 8004b9e:	4628      	mov	r0, r5
 8004ba0:	463b      	mov	r3, r7
 8004ba2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ba6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004baa:	f000 b857 	b.w	8004c5c <_write_r>

08004bae <__sseek>:
 8004bae:	b510      	push	{r4, lr}
 8004bb0:	460c      	mov	r4, r1
 8004bb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bb6:	f000 f82d 	bl	8004c14 <_lseek_r>
 8004bba:	1c43      	adds	r3, r0, #1
 8004bbc:	89a3      	ldrh	r3, [r4, #12]
 8004bbe:	bf15      	itete	ne
 8004bc0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004bc2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004bc6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004bca:	81a3      	strheq	r3, [r4, #12]
 8004bcc:	bf18      	it	ne
 8004bce:	81a3      	strhne	r3, [r4, #12]
 8004bd0:	bd10      	pop	{r4, pc}

08004bd2 <__sclose>:
 8004bd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bd6:	f000 b80d 	b.w	8004bf4 <_close_r>

08004bda <memset>:
 8004bda:	4603      	mov	r3, r0
 8004bdc:	4402      	add	r2, r0
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d100      	bne.n	8004be4 <memset+0xa>
 8004be2:	4770      	bx	lr
 8004be4:	f803 1b01 	strb.w	r1, [r3], #1
 8004be8:	e7f9      	b.n	8004bde <memset+0x4>
	...

08004bec <_localeconv_r>:
 8004bec:	4800      	ldr	r0, [pc, #0]	@ (8004bf0 <_localeconv_r+0x4>)
 8004bee:	4770      	bx	lr
 8004bf0:	20000158 	.word	0x20000158

08004bf4 <_close_r>:
 8004bf4:	b538      	push	{r3, r4, r5, lr}
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	4d05      	ldr	r5, [pc, #20]	@ (8004c10 <_close_r+0x1c>)
 8004bfa:	4604      	mov	r4, r0
 8004bfc:	4608      	mov	r0, r1
 8004bfe:	602b      	str	r3, [r5, #0]
 8004c00:	f7fc ff99 	bl	8001b36 <_close>
 8004c04:	1c43      	adds	r3, r0, #1
 8004c06:	d102      	bne.n	8004c0e <_close_r+0x1a>
 8004c08:	682b      	ldr	r3, [r5, #0]
 8004c0a:	b103      	cbz	r3, 8004c0e <_close_r+0x1a>
 8004c0c:	6023      	str	r3, [r4, #0]
 8004c0e:	bd38      	pop	{r3, r4, r5, pc}
 8004c10:	20000588 	.word	0x20000588

08004c14 <_lseek_r>:
 8004c14:	b538      	push	{r3, r4, r5, lr}
 8004c16:	4604      	mov	r4, r0
 8004c18:	4608      	mov	r0, r1
 8004c1a:	4611      	mov	r1, r2
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	4d05      	ldr	r5, [pc, #20]	@ (8004c34 <_lseek_r+0x20>)
 8004c20:	602a      	str	r2, [r5, #0]
 8004c22:	461a      	mov	r2, r3
 8004c24:	f7fc ffab 	bl	8001b7e <_lseek>
 8004c28:	1c43      	adds	r3, r0, #1
 8004c2a:	d102      	bne.n	8004c32 <_lseek_r+0x1e>
 8004c2c:	682b      	ldr	r3, [r5, #0]
 8004c2e:	b103      	cbz	r3, 8004c32 <_lseek_r+0x1e>
 8004c30:	6023      	str	r3, [r4, #0]
 8004c32:	bd38      	pop	{r3, r4, r5, pc}
 8004c34:	20000588 	.word	0x20000588

08004c38 <_read_r>:
 8004c38:	b538      	push	{r3, r4, r5, lr}
 8004c3a:	4604      	mov	r4, r0
 8004c3c:	4608      	mov	r0, r1
 8004c3e:	4611      	mov	r1, r2
 8004c40:	2200      	movs	r2, #0
 8004c42:	4d05      	ldr	r5, [pc, #20]	@ (8004c58 <_read_r+0x20>)
 8004c44:	602a      	str	r2, [r5, #0]
 8004c46:	461a      	mov	r2, r3
 8004c48:	f7fc ff3c 	bl	8001ac4 <_read>
 8004c4c:	1c43      	adds	r3, r0, #1
 8004c4e:	d102      	bne.n	8004c56 <_read_r+0x1e>
 8004c50:	682b      	ldr	r3, [r5, #0]
 8004c52:	b103      	cbz	r3, 8004c56 <_read_r+0x1e>
 8004c54:	6023      	str	r3, [r4, #0]
 8004c56:	bd38      	pop	{r3, r4, r5, pc}
 8004c58:	20000588 	.word	0x20000588

08004c5c <_write_r>:
 8004c5c:	b538      	push	{r3, r4, r5, lr}
 8004c5e:	4604      	mov	r4, r0
 8004c60:	4608      	mov	r0, r1
 8004c62:	4611      	mov	r1, r2
 8004c64:	2200      	movs	r2, #0
 8004c66:	4d05      	ldr	r5, [pc, #20]	@ (8004c7c <_write_r+0x20>)
 8004c68:	602a      	str	r2, [r5, #0]
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	f7fc ff47 	bl	8001afe <_write>
 8004c70:	1c43      	adds	r3, r0, #1
 8004c72:	d102      	bne.n	8004c7a <_write_r+0x1e>
 8004c74:	682b      	ldr	r3, [r5, #0]
 8004c76:	b103      	cbz	r3, 8004c7a <_write_r+0x1e>
 8004c78:	6023      	str	r3, [r4, #0]
 8004c7a:	bd38      	pop	{r3, r4, r5, pc}
 8004c7c:	20000588 	.word	0x20000588

08004c80 <__errno>:
 8004c80:	4b01      	ldr	r3, [pc, #4]	@ (8004c88 <__errno+0x8>)
 8004c82:	6818      	ldr	r0, [r3, #0]
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	20000018 	.word	0x20000018

08004c8c <__libc_init_array>:
 8004c8c:	b570      	push	{r4, r5, r6, lr}
 8004c8e:	2600      	movs	r6, #0
 8004c90:	4d0c      	ldr	r5, [pc, #48]	@ (8004cc4 <__libc_init_array+0x38>)
 8004c92:	4c0d      	ldr	r4, [pc, #52]	@ (8004cc8 <__libc_init_array+0x3c>)
 8004c94:	1b64      	subs	r4, r4, r5
 8004c96:	10a4      	asrs	r4, r4, #2
 8004c98:	42a6      	cmp	r6, r4
 8004c9a:	d109      	bne.n	8004cb0 <__libc_init_array+0x24>
 8004c9c:	f001 fec8 	bl	8006a30 <_init>
 8004ca0:	2600      	movs	r6, #0
 8004ca2:	4d0a      	ldr	r5, [pc, #40]	@ (8004ccc <__libc_init_array+0x40>)
 8004ca4:	4c0a      	ldr	r4, [pc, #40]	@ (8004cd0 <__libc_init_array+0x44>)
 8004ca6:	1b64      	subs	r4, r4, r5
 8004ca8:	10a4      	asrs	r4, r4, #2
 8004caa:	42a6      	cmp	r6, r4
 8004cac:	d105      	bne.n	8004cba <__libc_init_array+0x2e>
 8004cae:	bd70      	pop	{r4, r5, r6, pc}
 8004cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cb4:	4798      	blx	r3
 8004cb6:	3601      	adds	r6, #1
 8004cb8:	e7ee      	b.n	8004c98 <__libc_init_array+0xc>
 8004cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cbe:	4798      	blx	r3
 8004cc0:	3601      	adds	r6, #1
 8004cc2:	e7f2      	b.n	8004caa <__libc_init_array+0x1e>
 8004cc4:	08006e38 	.word	0x08006e38
 8004cc8:	08006e38 	.word	0x08006e38
 8004ccc:	08006e38 	.word	0x08006e38
 8004cd0:	08006e3c 	.word	0x08006e3c

08004cd4 <__retarget_lock_init_recursive>:
 8004cd4:	4770      	bx	lr

08004cd6 <__retarget_lock_acquire_recursive>:
 8004cd6:	4770      	bx	lr

08004cd8 <__retarget_lock_release_recursive>:
 8004cd8:	4770      	bx	lr

08004cda <memchr>:
 8004cda:	4603      	mov	r3, r0
 8004cdc:	b510      	push	{r4, lr}
 8004cde:	b2c9      	uxtb	r1, r1
 8004ce0:	4402      	add	r2, r0
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	d101      	bne.n	8004cec <memchr+0x12>
 8004ce8:	2000      	movs	r0, #0
 8004cea:	e003      	b.n	8004cf4 <memchr+0x1a>
 8004cec:	7804      	ldrb	r4, [r0, #0]
 8004cee:	3301      	adds	r3, #1
 8004cf0:	428c      	cmp	r4, r1
 8004cf2:	d1f6      	bne.n	8004ce2 <memchr+0x8>
 8004cf4:	bd10      	pop	{r4, pc}

08004cf6 <memcpy>:
 8004cf6:	440a      	add	r2, r1
 8004cf8:	4291      	cmp	r1, r2
 8004cfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cfe:	d100      	bne.n	8004d02 <memcpy+0xc>
 8004d00:	4770      	bx	lr
 8004d02:	b510      	push	{r4, lr}
 8004d04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d08:	4291      	cmp	r1, r2
 8004d0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d0e:	d1f9      	bne.n	8004d04 <memcpy+0xe>
 8004d10:	bd10      	pop	{r4, pc}

08004d12 <quorem>:
 8004d12:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d16:	6903      	ldr	r3, [r0, #16]
 8004d18:	690c      	ldr	r4, [r1, #16]
 8004d1a:	4607      	mov	r7, r0
 8004d1c:	42a3      	cmp	r3, r4
 8004d1e:	db7e      	blt.n	8004e1e <quorem+0x10c>
 8004d20:	3c01      	subs	r4, #1
 8004d22:	00a3      	lsls	r3, r4, #2
 8004d24:	f100 0514 	add.w	r5, r0, #20
 8004d28:	f101 0814 	add.w	r8, r1, #20
 8004d2c:	9300      	str	r3, [sp, #0]
 8004d2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d32:	9301      	str	r3, [sp, #4]
 8004d34:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004d38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	fbb2 f6f3 	udiv	r6, r2, r3
 8004d44:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004d48:	d32e      	bcc.n	8004da8 <quorem+0x96>
 8004d4a:	f04f 0a00 	mov.w	sl, #0
 8004d4e:	46c4      	mov	ip, r8
 8004d50:	46ae      	mov	lr, r5
 8004d52:	46d3      	mov	fp, sl
 8004d54:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004d58:	b298      	uxth	r0, r3
 8004d5a:	fb06 a000 	mla	r0, r6, r0, sl
 8004d5e:	0c1b      	lsrs	r3, r3, #16
 8004d60:	0c02      	lsrs	r2, r0, #16
 8004d62:	fb06 2303 	mla	r3, r6, r3, r2
 8004d66:	f8de 2000 	ldr.w	r2, [lr]
 8004d6a:	b280      	uxth	r0, r0
 8004d6c:	b292      	uxth	r2, r2
 8004d6e:	1a12      	subs	r2, r2, r0
 8004d70:	445a      	add	r2, fp
 8004d72:	f8de 0000 	ldr.w	r0, [lr]
 8004d76:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004d80:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004d84:	b292      	uxth	r2, r2
 8004d86:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004d8a:	45e1      	cmp	r9, ip
 8004d8c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004d90:	f84e 2b04 	str.w	r2, [lr], #4
 8004d94:	d2de      	bcs.n	8004d54 <quorem+0x42>
 8004d96:	9b00      	ldr	r3, [sp, #0]
 8004d98:	58eb      	ldr	r3, [r5, r3]
 8004d9a:	b92b      	cbnz	r3, 8004da8 <quorem+0x96>
 8004d9c:	9b01      	ldr	r3, [sp, #4]
 8004d9e:	3b04      	subs	r3, #4
 8004da0:	429d      	cmp	r5, r3
 8004da2:	461a      	mov	r2, r3
 8004da4:	d32f      	bcc.n	8004e06 <quorem+0xf4>
 8004da6:	613c      	str	r4, [r7, #16]
 8004da8:	4638      	mov	r0, r7
 8004daa:	f001 f97b 	bl	80060a4 <__mcmp>
 8004dae:	2800      	cmp	r0, #0
 8004db0:	db25      	blt.n	8004dfe <quorem+0xec>
 8004db2:	4629      	mov	r1, r5
 8004db4:	2000      	movs	r0, #0
 8004db6:	f858 2b04 	ldr.w	r2, [r8], #4
 8004dba:	f8d1 c000 	ldr.w	ip, [r1]
 8004dbe:	fa1f fe82 	uxth.w	lr, r2
 8004dc2:	fa1f f38c 	uxth.w	r3, ip
 8004dc6:	eba3 030e 	sub.w	r3, r3, lr
 8004dca:	4403      	add	r3, r0
 8004dcc:	0c12      	lsrs	r2, r2, #16
 8004dce:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004dd2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ddc:	45c1      	cmp	r9, r8
 8004dde:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004de2:	f841 3b04 	str.w	r3, [r1], #4
 8004de6:	d2e6      	bcs.n	8004db6 <quorem+0xa4>
 8004de8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004dec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004df0:	b922      	cbnz	r2, 8004dfc <quorem+0xea>
 8004df2:	3b04      	subs	r3, #4
 8004df4:	429d      	cmp	r5, r3
 8004df6:	461a      	mov	r2, r3
 8004df8:	d30b      	bcc.n	8004e12 <quorem+0x100>
 8004dfa:	613c      	str	r4, [r7, #16]
 8004dfc:	3601      	adds	r6, #1
 8004dfe:	4630      	mov	r0, r6
 8004e00:	b003      	add	sp, #12
 8004e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e06:	6812      	ldr	r2, [r2, #0]
 8004e08:	3b04      	subs	r3, #4
 8004e0a:	2a00      	cmp	r2, #0
 8004e0c:	d1cb      	bne.n	8004da6 <quorem+0x94>
 8004e0e:	3c01      	subs	r4, #1
 8004e10:	e7c6      	b.n	8004da0 <quorem+0x8e>
 8004e12:	6812      	ldr	r2, [r2, #0]
 8004e14:	3b04      	subs	r3, #4
 8004e16:	2a00      	cmp	r2, #0
 8004e18:	d1ef      	bne.n	8004dfa <quorem+0xe8>
 8004e1a:	3c01      	subs	r4, #1
 8004e1c:	e7ea      	b.n	8004df4 <quorem+0xe2>
 8004e1e:	2000      	movs	r0, #0
 8004e20:	e7ee      	b.n	8004e00 <quorem+0xee>
 8004e22:	0000      	movs	r0, r0
 8004e24:	0000      	movs	r0, r0
	...

08004e28 <_dtoa_r>:
 8004e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e2c:	4614      	mov	r4, r2
 8004e2e:	461d      	mov	r5, r3
 8004e30:	69c7      	ldr	r7, [r0, #28]
 8004e32:	b097      	sub	sp, #92	@ 0x5c
 8004e34:	4683      	mov	fp, r0
 8004e36:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004e3a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004e3c:	b97f      	cbnz	r7, 8004e5e <_dtoa_r+0x36>
 8004e3e:	2010      	movs	r0, #16
 8004e40:	f000 fe02 	bl	8005a48 <malloc>
 8004e44:	4602      	mov	r2, r0
 8004e46:	f8cb 001c 	str.w	r0, [fp, #28]
 8004e4a:	b920      	cbnz	r0, 8004e56 <_dtoa_r+0x2e>
 8004e4c:	21ef      	movs	r1, #239	@ 0xef
 8004e4e:	4ba8      	ldr	r3, [pc, #672]	@ (80050f0 <_dtoa_r+0x2c8>)
 8004e50:	48a8      	ldr	r0, [pc, #672]	@ (80050f4 <_dtoa_r+0x2cc>)
 8004e52:	f001 fae7 	bl	8006424 <__assert_func>
 8004e56:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004e5a:	6007      	str	r7, [r0, #0]
 8004e5c:	60c7      	str	r7, [r0, #12]
 8004e5e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004e62:	6819      	ldr	r1, [r3, #0]
 8004e64:	b159      	cbz	r1, 8004e7e <_dtoa_r+0x56>
 8004e66:	685a      	ldr	r2, [r3, #4]
 8004e68:	2301      	movs	r3, #1
 8004e6a:	4093      	lsls	r3, r2
 8004e6c:	604a      	str	r2, [r1, #4]
 8004e6e:	608b      	str	r3, [r1, #8]
 8004e70:	4658      	mov	r0, fp
 8004e72:	f000 fedf 	bl	8005c34 <_Bfree>
 8004e76:	2200      	movs	r2, #0
 8004e78:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004e7c:	601a      	str	r2, [r3, #0]
 8004e7e:	1e2b      	subs	r3, r5, #0
 8004e80:	bfaf      	iteee	ge
 8004e82:	2300      	movge	r3, #0
 8004e84:	2201      	movlt	r2, #1
 8004e86:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004e8a:	9303      	strlt	r3, [sp, #12]
 8004e8c:	bfa8      	it	ge
 8004e8e:	6033      	strge	r3, [r6, #0]
 8004e90:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004e94:	4b98      	ldr	r3, [pc, #608]	@ (80050f8 <_dtoa_r+0x2d0>)
 8004e96:	bfb8      	it	lt
 8004e98:	6032      	strlt	r2, [r6, #0]
 8004e9a:	ea33 0308 	bics.w	r3, r3, r8
 8004e9e:	d112      	bne.n	8004ec6 <_dtoa_r+0x9e>
 8004ea0:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004ea4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004ea6:	6013      	str	r3, [r2, #0]
 8004ea8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004eac:	4323      	orrs	r3, r4
 8004eae:	f000 8550 	beq.w	8005952 <_dtoa_r+0xb2a>
 8004eb2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004eb4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80050fc <_dtoa_r+0x2d4>
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f000 8552 	beq.w	8005962 <_dtoa_r+0xb3a>
 8004ebe:	f10a 0303 	add.w	r3, sl, #3
 8004ec2:	f000 bd4c 	b.w	800595e <_dtoa_r+0xb36>
 8004ec6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004eca:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004ece:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	f7fb fd67 	bl	80009a8 <__aeabi_dcmpeq>
 8004eda:	4607      	mov	r7, r0
 8004edc:	b158      	cbz	r0, 8004ef6 <_dtoa_r+0xce>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004ee2:	6013      	str	r3, [r2, #0]
 8004ee4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004ee6:	b113      	cbz	r3, 8004eee <_dtoa_r+0xc6>
 8004ee8:	4b85      	ldr	r3, [pc, #532]	@ (8005100 <_dtoa_r+0x2d8>)
 8004eea:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004eec:	6013      	str	r3, [r2, #0]
 8004eee:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8005104 <_dtoa_r+0x2dc>
 8004ef2:	f000 bd36 	b.w	8005962 <_dtoa_r+0xb3a>
 8004ef6:	ab14      	add	r3, sp, #80	@ 0x50
 8004ef8:	9301      	str	r3, [sp, #4]
 8004efa:	ab15      	add	r3, sp, #84	@ 0x54
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	4658      	mov	r0, fp
 8004f00:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004f04:	f001 f97e 	bl	8006204 <__d2b>
 8004f08:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004f0c:	4681      	mov	r9, r0
 8004f0e:	2e00      	cmp	r6, #0
 8004f10:	d077      	beq.n	8005002 <_dtoa_r+0x1da>
 8004f12:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004f16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f18:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004f1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f20:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004f24:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004f28:	9712      	str	r7, [sp, #72]	@ 0x48
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	4b76      	ldr	r3, [pc, #472]	@ (8005108 <_dtoa_r+0x2e0>)
 8004f30:	f7fb f91a 	bl	8000168 <__aeabi_dsub>
 8004f34:	a368      	add	r3, pc, #416	@ (adr r3, 80050d8 <_dtoa_r+0x2b0>)
 8004f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3a:	f7fb facd 	bl	80004d8 <__aeabi_dmul>
 8004f3e:	a368      	add	r3, pc, #416	@ (adr r3, 80050e0 <_dtoa_r+0x2b8>)
 8004f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f44:	f7fb f912 	bl	800016c <__adddf3>
 8004f48:	4604      	mov	r4, r0
 8004f4a:	4630      	mov	r0, r6
 8004f4c:	460d      	mov	r5, r1
 8004f4e:	f7fb fa59 	bl	8000404 <__aeabi_i2d>
 8004f52:	a365      	add	r3, pc, #404	@ (adr r3, 80050e8 <_dtoa_r+0x2c0>)
 8004f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f58:	f7fb fabe 	bl	80004d8 <__aeabi_dmul>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	460b      	mov	r3, r1
 8004f60:	4620      	mov	r0, r4
 8004f62:	4629      	mov	r1, r5
 8004f64:	f7fb f902 	bl	800016c <__adddf3>
 8004f68:	4604      	mov	r4, r0
 8004f6a:	460d      	mov	r5, r1
 8004f6c:	f7fb fd64 	bl	8000a38 <__aeabi_d2iz>
 8004f70:	2200      	movs	r2, #0
 8004f72:	4607      	mov	r7, r0
 8004f74:	2300      	movs	r3, #0
 8004f76:	4620      	mov	r0, r4
 8004f78:	4629      	mov	r1, r5
 8004f7a:	f7fb fd1f 	bl	80009bc <__aeabi_dcmplt>
 8004f7e:	b140      	cbz	r0, 8004f92 <_dtoa_r+0x16a>
 8004f80:	4638      	mov	r0, r7
 8004f82:	f7fb fa3f 	bl	8000404 <__aeabi_i2d>
 8004f86:	4622      	mov	r2, r4
 8004f88:	462b      	mov	r3, r5
 8004f8a:	f7fb fd0d 	bl	80009a8 <__aeabi_dcmpeq>
 8004f8e:	b900      	cbnz	r0, 8004f92 <_dtoa_r+0x16a>
 8004f90:	3f01      	subs	r7, #1
 8004f92:	2f16      	cmp	r7, #22
 8004f94:	d853      	bhi.n	800503e <_dtoa_r+0x216>
 8004f96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004f9a:	4b5c      	ldr	r3, [pc, #368]	@ (800510c <_dtoa_r+0x2e4>)
 8004f9c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa4:	f7fb fd0a 	bl	80009bc <__aeabi_dcmplt>
 8004fa8:	2800      	cmp	r0, #0
 8004faa:	d04a      	beq.n	8005042 <_dtoa_r+0x21a>
 8004fac:	2300      	movs	r3, #0
 8004fae:	3f01      	subs	r7, #1
 8004fb0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004fb2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004fb4:	1b9b      	subs	r3, r3, r6
 8004fb6:	1e5a      	subs	r2, r3, #1
 8004fb8:	bf46      	itte	mi
 8004fba:	f1c3 0801 	rsbmi	r8, r3, #1
 8004fbe:	2300      	movmi	r3, #0
 8004fc0:	f04f 0800 	movpl.w	r8, #0
 8004fc4:	9209      	str	r2, [sp, #36]	@ 0x24
 8004fc6:	bf48      	it	mi
 8004fc8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004fca:	2f00      	cmp	r7, #0
 8004fcc:	db3b      	blt.n	8005046 <_dtoa_r+0x21e>
 8004fce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fd0:	970e      	str	r7, [sp, #56]	@ 0x38
 8004fd2:	443b      	add	r3, r7
 8004fd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	930a      	str	r3, [sp, #40]	@ 0x28
 8004fda:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004fdc:	2b09      	cmp	r3, #9
 8004fde:	d866      	bhi.n	80050ae <_dtoa_r+0x286>
 8004fe0:	2b05      	cmp	r3, #5
 8004fe2:	bfc4      	itt	gt
 8004fe4:	3b04      	subgt	r3, #4
 8004fe6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004fe8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004fea:	bfc8      	it	gt
 8004fec:	2400      	movgt	r4, #0
 8004fee:	f1a3 0302 	sub.w	r3, r3, #2
 8004ff2:	bfd8      	it	le
 8004ff4:	2401      	movle	r4, #1
 8004ff6:	2b03      	cmp	r3, #3
 8004ff8:	d864      	bhi.n	80050c4 <_dtoa_r+0x29c>
 8004ffa:	e8df f003 	tbb	[pc, r3]
 8004ffe:	382b      	.short	0x382b
 8005000:	5636      	.short	0x5636
 8005002:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005006:	441e      	add	r6, r3
 8005008:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800500c:	2b20      	cmp	r3, #32
 800500e:	bfc1      	itttt	gt
 8005010:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005014:	fa08 f803 	lslgt.w	r8, r8, r3
 8005018:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800501c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005020:	bfd6      	itet	le
 8005022:	f1c3 0320 	rsble	r3, r3, #32
 8005026:	ea48 0003 	orrgt.w	r0, r8, r3
 800502a:	fa04 f003 	lslle.w	r0, r4, r3
 800502e:	f7fb f9d9 	bl	80003e4 <__aeabi_ui2d>
 8005032:	2201      	movs	r2, #1
 8005034:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005038:	3e01      	subs	r6, #1
 800503a:	9212      	str	r2, [sp, #72]	@ 0x48
 800503c:	e775      	b.n	8004f2a <_dtoa_r+0x102>
 800503e:	2301      	movs	r3, #1
 8005040:	e7b6      	b.n	8004fb0 <_dtoa_r+0x188>
 8005042:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005044:	e7b5      	b.n	8004fb2 <_dtoa_r+0x18a>
 8005046:	427b      	negs	r3, r7
 8005048:	930a      	str	r3, [sp, #40]	@ 0x28
 800504a:	2300      	movs	r3, #0
 800504c:	eba8 0807 	sub.w	r8, r8, r7
 8005050:	930e      	str	r3, [sp, #56]	@ 0x38
 8005052:	e7c2      	b.n	8004fda <_dtoa_r+0x1b2>
 8005054:	2300      	movs	r3, #0
 8005056:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005058:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800505a:	2b00      	cmp	r3, #0
 800505c:	dc35      	bgt.n	80050ca <_dtoa_r+0x2a2>
 800505e:	2301      	movs	r3, #1
 8005060:	461a      	mov	r2, r3
 8005062:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005066:	9221      	str	r2, [sp, #132]	@ 0x84
 8005068:	e00b      	b.n	8005082 <_dtoa_r+0x25a>
 800506a:	2301      	movs	r3, #1
 800506c:	e7f3      	b.n	8005056 <_dtoa_r+0x22e>
 800506e:	2300      	movs	r3, #0
 8005070:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005072:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005074:	18fb      	adds	r3, r7, r3
 8005076:	9308      	str	r3, [sp, #32]
 8005078:	3301      	adds	r3, #1
 800507a:	2b01      	cmp	r3, #1
 800507c:	9307      	str	r3, [sp, #28]
 800507e:	bfb8      	it	lt
 8005080:	2301      	movlt	r3, #1
 8005082:	2100      	movs	r1, #0
 8005084:	2204      	movs	r2, #4
 8005086:	f8db 001c 	ldr.w	r0, [fp, #28]
 800508a:	f102 0514 	add.w	r5, r2, #20
 800508e:	429d      	cmp	r5, r3
 8005090:	d91f      	bls.n	80050d2 <_dtoa_r+0x2aa>
 8005092:	6041      	str	r1, [r0, #4]
 8005094:	4658      	mov	r0, fp
 8005096:	f000 fd8d 	bl	8005bb4 <_Balloc>
 800509a:	4682      	mov	sl, r0
 800509c:	2800      	cmp	r0, #0
 800509e:	d139      	bne.n	8005114 <_dtoa_r+0x2ec>
 80050a0:	4602      	mov	r2, r0
 80050a2:	f240 11af 	movw	r1, #431	@ 0x1af
 80050a6:	4b1a      	ldr	r3, [pc, #104]	@ (8005110 <_dtoa_r+0x2e8>)
 80050a8:	e6d2      	b.n	8004e50 <_dtoa_r+0x28>
 80050aa:	2301      	movs	r3, #1
 80050ac:	e7e0      	b.n	8005070 <_dtoa_r+0x248>
 80050ae:	2401      	movs	r4, #1
 80050b0:	2300      	movs	r3, #0
 80050b2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80050b4:	9320      	str	r3, [sp, #128]	@ 0x80
 80050b6:	f04f 33ff 	mov.w	r3, #4294967295
 80050ba:	2200      	movs	r2, #0
 80050bc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80050c0:	2312      	movs	r3, #18
 80050c2:	e7d0      	b.n	8005066 <_dtoa_r+0x23e>
 80050c4:	2301      	movs	r3, #1
 80050c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80050c8:	e7f5      	b.n	80050b6 <_dtoa_r+0x28e>
 80050ca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80050cc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80050d0:	e7d7      	b.n	8005082 <_dtoa_r+0x25a>
 80050d2:	3101      	adds	r1, #1
 80050d4:	0052      	lsls	r2, r2, #1
 80050d6:	e7d8      	b.n	800508a <_dtoa_r+0x262>
 80050d8:	636f4361 	.word	0x636f4361
 80050dc:	3fd287a7 	.word	0x3fd287a7
 80050e0:	8b60c8b3 	.word	0x8b60c8b3
 80050e4:	3fc68a28 	.word	0x3fc68a28
 80050e8:	509f79fb 	.word	0x509f79fb
 80050ec:	3fd34413 	.word	0x3fd34413
 80050f0:	08006b03 	.word	0x08006b03
 80050f4:	08006b1a 	.word	0x08006b1a
 80050f8:	7ff00000 	.word	0x7ff00000
 80050fc:	08006aff 	.word	0x08006aff
 8005100:	08006ad3 	.word	0x08006ad3
 8005104:	08006ad2 	.word	0x08006ad2
 8005108:	3ff80000 	.word	0x3ff80000
 800510c:	08006c10 	.word	0x08006c10
 8005110:	08006b72 	.word	0x08006b72
 8005114:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005118:	6018      	str	r0, [r3, #0]
 800511a:	9b07      	ldr	r3, [sp, #28]
 800511c:	2b0e      	cmp	r3, #14
 800511e:	f200 80a4 	bhi.w	800526a <_dtoa_r+0x442>
 8005122:	2c00      	cmp	r4, #0
 8005124:	f000 80a1 	beq.w	800526a <_dtoa_r+0x442>
 8005128:	2f00      	cmp	r7, #0
 800512a:	dd33      	ble.n	8005194 <_dtoa_r+0x36c>
 800512c:	4b86      	ldr	r3, [pc, #536]	@ (8005348 <_dtoa_r+0x520>)
 800512e:	f007 020f 	and.w	r2, r7, #15
 8005132:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005136:	05f8      	lsls	r0, r7, #23
 8005138:	e9d3 3400 	ldrd	r3, r4, [r3]
 800513c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005140:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005144:	d516      	bpl.n	8005174 <_dtoa_r+0x34c>
 8005146:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800514a:	4b80      	ldr	r3, [pc, #512]	@ (800534c <_dtoa_r+0x524>)
 800514c:	2603      	movs	r6, #3
 800514e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005152:	f7fb faeb 	bl	800072c <__aeabi_ddiv>
 8005156:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800515a:	f004 040f 	and.w	r4, r4, #15
 800515e:	4d7b      	ldr	r5, [pc, #492]	@ (800534c <_dtoa_r+0x524>)
 8005160:	b954      	cbnz	r4, 8005178 <_dtoa_r+0x350>
 8005162:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005166:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800516a:	f7fb fadf 	bl	800072c <__aeabi_ddiv>
 800516e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005172:	e028      	b.n	80051c6 <_dtoa_r+0x39e>
 8005174:	2602      	movs	r6, #2
 8005176:	e7f2      	b.n	800515e <_dtoa_r+0x336>
 8005178:	07e1      	lsls	r1, r4, #31
 800517a:	d508      	bpl.n	800518e <_dtoa_r+0x366>
 800517c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005180:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005184:	f7fb f9a8 	bl	80004d8 <__aeabi_dmul>
 8005188:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800518c:	3601      	adds	r6, #1
 800518e:	1064      	asrs	r4, r4, #1
 8005190:	3508      	adds	r5, #8
 8005192:	e7e5      	b.n	8005160 <_dtoa_r+0x338>
 8005194:	f000 80d2 	beq.w	800533c <_dtoa_r+0x514>
 8005198:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800519c:	427c      	negs	r4, r7
 800519e:	4b6a      	ldr	r3, [pc, #424]	@ (8005348 <_dtoa_r+0x520>)
 80051a0:	f004 020f 	and.w	r2, r4, #15
 80051a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ac:	f7fb f994 	bl	80004d8 <__aeabi_dmul>
 80051b0:	2602      	movs	r6, #2
 80051b2:	2300      	movs	r3, #0
 80051b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051b8:	4d64      	ldr	r5, [pc, #400]	@ (800534c <_dtoa_r+0x524>)
 80051ba:	1124      	asrs	r4, r4, #4
 80051bc:	2c00      	cmp	r4, #0
 80051be:	f040 80b2 	bne.w	8005326 <_dtoa_r+0x4fe>
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1d3      	bne.n	800516e <_dtoa_r+0x346>
 80051c6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80051ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f000 80b7 	beq.w	8005340 <_dtoa_r+0x518>
 80051d2:	2200      	movs	r2, #0
 80051d4:	4620      	mov	r0, r4
 80051d6:	4629      	mov	r1, r5
 80051d8:	4b5d      	ldr	r3, [pc, #372]	@ (8005350 <_dtoa_r+0x528>)
 80051da:	f7fb fbef 	bl	80009bc <__aeabi_dcmplt>
 80051de:	2800      	cmp	r0, #0
 80051e0:	f000 80ae 	beq.w	8005340 <_dtoa_r+0x518>
 80051e4:	9b07      	ldr	r3, [sp, #28]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	f000 80aa 	beq.w	8005340 <_dtoa_r+0x518>
 80051ec:	9b08      	ldr	r3, [sp, #32]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	dd37      	ble.n	8005262 <_dtoa_r+0x43a>
 80051f2:	1e7b      	subs	r3, r7, #1
 80051f4:	4620      	mov	r0, r4
 80051f6:	9304      	str	r3, [sp, #16]
 80051f8:	2200      	movs	r2, #0
 80051fa:	4629      	mov	r1, r5
 80051fc:	4b55      	ldr	r3, [pc, #340]	@ (8005354 <_dtoa_r+0x52c>)
 80051fe:	f7fb f96b 	bl	80004d8 <__aeabi_dmul>
 8005202:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005206:	9c08      	ldr	r4, [sp, #32]
 8005208:	3601      	adds	r6, #1
 800520a:	4630      	mov	r0, r6
 800520c:	f7fb f8fa 	bl	8000404 <__aeabi_i2d>
 8005210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005214:	f7fb f960 	bl	80004d8 <__aeabi_dmul>
 8005218:	2200      	movs	r2, #0
 800521a:	4b4f      	ldr	r3, [pc, #316]	@ (8005358 <_dtoa_r+0x530>)
 800521c:	f7fa ffa6 	bl	800016c <__adddf3>
 8005220:	4605      	mov	r5, r0
 8005222:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005226:	2c00      	cmp	r4, #0
 8005228:	f040 809a 	bne.w	8005360 <_dtoa_r+0x538>
 800522c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005230:	2200      	movs	r2, #0
 8005232:	4b4a      	ldr	r3, [pc, #296]	@ (800535c <_dtoa_r+0x534>)
 8005234:	f7fa ff98 	bl	8000168 <__aeabi_dsub>
 8005238:	4602      	mov	r2, r0
 800523a:	460b      	mov	r3, r1
 800523c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005240:	462a      	mov	r2, r5
 8005242:	4633      	mov	r3, r6
 8005244:	f7fb fbd8 	bl	80009f8 <__aeabi_dcmpgt>
 8005248:	2800      	cmp	r0, #0
 800524a:	f040 828e 	bne.w	800576a <_dtoa_r+0x942>
 800524e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005252:	462a      	mov	r2, r5
 8005254:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005258:	f7fb fbb0 	bl	80009bc <__aeabi_dcmplt>
 800525c:	2800      	cmp	r0, #0
 800525e:	f040 8127 	bne.w	80054b0 <_dtoa_r+0x688>
 8005262:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005266:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800526a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800526c:	2b00      	cmp	r3, #0
 800526e:	f2c0 8163 	blt.w	8005538 <_dtoa_r+0x710>
 8005272:	2f0e      	cmp	r7, #14
 8005274:	f300 8160 	bgt.w	8005538 <_dtoa_r+0x710>
 8005278:	4b33      	ldr	r3, [pc, #204]	@ (8005348 <_dtoa_r+0x520>)
 800527a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800527e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005282:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005286:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005288:	2b00      	cmp	r3, #0
 800528a:	da03      	bge.n	8005294 <_dtoa_r+0x46c>
 800528c:	9b07      	ldr	r3, [sp, #28]
 800528e:	2b00      	cmp	r3, #0
 8005290:	f340 8100 	ble.w	8005494 <_dtoa_r+0x66c>
 8005294:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005298:	4656      	mov	r6, sl
 800529a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800529e:	4620      	mov	r0, r4
 80052a0:	4629      	mov	r1, r5
 80052a2:	f7fb fa43 	bl	800072c <__aeabi_ddiv>
 80052a6:	f7fb fbc7 	bl	8000a38 <__aeabi_d2iz>
 80052aa:	4680      	mov	r8, r0
 80052ac:	f7fb f8aa 	bl	8000404 <__aeabi_i2d>
 80052b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052b4:	f7fb f910 	bl	80004d8 <__aeabi_dmul>
 80052b8:	4602      	mov	r2, r0
 80052ba:	460b      	mov	r3, r1
 80052bc:	4620      	mov	r0, r4
 80052be:	4629      	mov	r1, r5
 80052c0:	f7fa ff52 	bl	8000168 <__aeabi_dsub>
 80052c4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80052c8:	9d07      	ldr	r5, [sp, #28]
 80052ca:	f806 4b01 	strb.w	r4, [r6], #1
 80052ce:	eba6 040a 	sub.w	r4, r6, sl
 80052d2:	42a5      	cmp	r5, r4
 80052d4:	4602      	mov	r2, r0
 80052d6:	460b      	mov	r3, r1
 80052d8:	f040 8116 	bne.w	8005508 <_dtoa_r+0x6e0>
 80052dc:	f7fa ff46 	bl	800016c <__adddf3>
 80052e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052e4:	4604      	mov	r4, r0
 80052e6:	460d      	mov	r5, r1
 80052e8:	f7fb fb86 	bl	80009f8 <__aeabi_dcmpgt>
 80052ec:	2800      	cmp	r0, #0
 80052ee:	f040 80f8 	bne.w	80054e2 <_dtoa_r+0x6ba>
 80052f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052f6:	4620      	mov	r0, r4
 80052f8:	4629      	mov	r1, r5
 80052fa:	f7fb fb55 	bl	80009a8 <__aeabi_dcmpeq>
 80052fe:	b118      	cbz	r0, 8005308 <_dtoa_r+0x4e0>
 8005300:	f018 0f01 	tst.w	r8, #1
 8005304:	f040 80ed 	bne.w	80054e2 <_dtoa_r+0x6ba>
 8005308:	4649      	mov	r1, r9
 800530a:	4658      	mov	r0, fp
 800530c:	f000 fc92 	bl	8005c34 <_Bfree>
 8005310:	2300      	movs	r3, #0
 8005312:	7033      	strb	r3, [r6, #0]
 8005314:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005316:	3701      	adds	r7, #1
 8005318:	601f      	str	r7, [r3, #0]
 800531a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800531c:	2b00      	cmp	r3, #0
 800531e:	f000 8320 	beq.w	8005962 <_dtoa_r+0xb3a>
 8005322:	601e      	str	r6, [r3, #0]
 8005324:	e31d      	b.n	8005962 <_dtoa_r+0xb3a>
 8005326:	07e2      	lsls	r2, r4, #31
 8005328:	d505      	bpl.n	8005336 <_dtoa_r+0x50e>
 800532a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800532e:	f7fb f8d3 	bl	80004d8 <__aeabi_dmul>
 8005332:	2301      	movs	r3, #1
 8005334:	3601      	adds	r6, #1
 8005336:	1064      	asrs	r4, r4, #1
 8005338:	3508      	adds	r5, #8
 800533a:	e73f      	b.n	80051bc <_dtoa_r+0x394>
 800533c:	2602      	movs	r6, #2
 800533e:	e742      	b.n	80051c6 <_dtoa_r+0x39e>
 8005340:	9c07      	ldr	r4, [sp, #28]
 8005342:	9704      	str	r7, [sp, #16]
 8005344:	e761      	b.n	800520a <_dtoa_r+0x3e2>
 8005346:	bf00      	nop
 8005348:	08006c10 	.word	0x08006c10
 800534c:	08006be8 	.word	0x08006be8
 8005350:	3ff00000 	.word	0x3ff00000
 8005354:	40240000 	.word	0x40240000
 8005358:	401c0000 	.word	0x401c0000
 800535c:	40140000 	.word	0x40140000
 8005360:	4b70      	ldr	r3, [pc, #448]	@ (8005524 <_dtoa_r+0x6fc>)
 8005362:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005364:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005368:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800536c:	4454      	add	r4, sl
 800536e:	2900      	cmp	r1, #0
 8005370:	d045      	beq.n	80053fe <_dtoa_r+0x5d6>
 8005372:	2000      	movs	r0, #0
 8005374:	496c      	ldr	r1, [pc, #432]	@ (8005528 <_dtoa_r+0x700>)
 8005376:	f7fb f9d9 	bl	800072c <__aeabi_ddiv>
 800537a:	4633      	mov	r3, r6
 800537c:	462a      	mov	r2, r5
 800537e:	f7fa fef3 	bl	8000168 <__aeabi_dsub>
 8005382:	4656      	mov	r6, sl
 8005384:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005388:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800538c:	f7fb fb54 	bl	8000a38 <__aeabi_d2iz>
 8005390:	4605      	mov	r5, r0
 8005392:	f7fb f837 	bl	8000404 <__aeabi_i2d>
 8005396:	4602      	mov	r2, r0
 8005398:	460b      	mov	r3, r1
 800539a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800539e:	f7fa fee3 	bl	8000168 <__aeabi_dsub>
 80053a2:	4602      	mov	r2, r0
 80053a4:	460b      	mov	r3, r1
 80053a6:	3530      	adds	r5, #48	@ 0x30
 80053a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80053ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80053b0:	f806 5b01 	strb.w	r5, [r6], #1
 80053b4:	f7fb fb02 	bl	80009bc <__aeabi_dcmplt>
 80053b8:	2800      	cmp	r0, #0
 80053ba:	d163      	bne.n	8005484 <_dtoa_r+0x65c>
 80053bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053c0:	2000      	movs	r0, #0
 80053c2:	495a      	ldr	r1, [pc, #360]	@ (800552c <_dtoa_r+0x704>)
 80053c4:	f7fa fed0 	bl	8000168 <__aeabi_dsub>
 80053c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80053cc:	f7fb faf6 	bl	80009bc <__aeabi_dcmplt>
 80053d0:	2800      	cmp	r0, #0
 80053d2:	f040 8087 	bne.w	80054e4 <_dtoa_r+0x6bc>
 80053d6:	42a6      	cmp	r6, r4
 80053d8:	f43f af43 	beq.w	8005262 <_dtoa_r+0x43a>
 80053dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80053e0:	2200      	movs	r2, #0
 80053e2:	4b53      	ldr	r3, [pc, #332]	@ (8005530 <_dtoa_r+0x708>)
 80053e4:	f7fb f878 	bl	80004d8 <__aeabi_dmul>
 80053e8:	2200      	movs	r2, #0
 80053ea:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80053ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053f2:	4b4f      	ldr	r3, [pc, #316]	@ (8005530 <_dtoa_r+0x708>)
 80053f4:	f7fb f870 	bl	80004d8 <__aeabi_dmul>
 80053f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053fc:	e7c4      	b.n	8005388 <_dtoa_r+0x560>
 80053fe:	4631      	mov	r1, r6
 8005400:	4628      	mov	r0, r5
 8005402:	f7fb f869 	bl	80004d8 <__aeabi_dmul>
 8005406:	4656      	mov	r6, sl
 8005408:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800540c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800540e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005412:	f7fb fb11 	bl	8000a38 <__aeabi_d2iz>
 8005416:	4605      	mov	r5, r0
 8005418:	f7fa fff4 	bl	8000404 <__aeabi_i2d>
 800541c:	4602      	mov	r2, r0
 800541e:	460b      	mov	r3, r1
 8005420:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005424:	f7fa fea0 	bl	8000168 <__aeabi_dsub>
 8005428:	4602      	mov	r2, r0
 800542a:	460b      	mov	r3, r1
 800542c:	3530      	adds	r5, #48	@ 0x30
 800542e:	f806 5b01 	strb.w	r5, [r6], #1
 8005432:	42a6      	cmp	r6, r4
 8005434:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005438:	f04f 0200 	mov.w	r2, #0
 800543c:	d124      	bne.n	8005488 <_dtoa_r+0x660>
 800543e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005442:	4b39      	ldr	r3, [pc, #228]	@ (8005528 <_dtoa_r+0x700>)
 8005444:	f7fa fe92 	bl	800016c <__adddf3>
 8005448:	4602      	mov	r2, r0
 800544a:	460b      	mov	r3, r1
 800544c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005450:	f7fb fad2 	bl	80009f8 <__aeabi_dcmpgt>
 8005454:	2800      	cmp	r0, #0
 8005456:	d145      	bne.n	80054e4 <_dtoa_r+0x6bc>
 8005458:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800545c:	2000      	movs	r0, #0
 800545e:	4932      	ldr	r1, [pc, #200]	@ (8005528 <_dtoa_r+0x700>)
 8005460:	f7fa fe82 	bl	8000168 <__aeabi_dsub>
 8005464:	4602      	mov	r2, r0
 8005466:	460b      	mov	r3, r1
 8005468:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800546c:	f7fb faa6 	bl	80009bc <__aeabi_dcmplt>
 8005470:	2800      	cmp	r0, #0
 8005472:	f43f aef6 	beq.w	8005262 <_dtoa_r+0x43a>
 8005476:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005478:	1e73      	subs	r3, r6, #1
 800547a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800547c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005480:	2b30      	cmp	r3, #48	@ 0x30
 8005482:	d0f8      	beq.n	8005476 <_dtoa_r+0x64e>
 8005484:	9f04      	ldr	r7, [sp, #16]
 8005486:	e73f      	b.n	8005308 <_dtoa_r+0x4e0>
 8005488:	4b29      	ldr	r3, [pc, #164]	@ (8005530 <_dtoa_r+0x708>)
 800548a:	f7fb f825 	bl	80004d8 <__aeabi_dmul>
 800548e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005492:	e7bc      	b.n	800540e <_dtoa_r+0x5e6>
 8005494:	d10c      	bne.n	80054b0 <_dtoa_r+0x688>
 8005496:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800549a:	2200      	movs	r2, #0
 800549c:	4b25      	ldr	r3, [pc, #148]	@ (8005534 <_dtoa_r+0x70c>)
 800549e:	f7fb f81b 	bl	80004d8 <__aeabi_dmul>
 80054a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80054a6:	f7fb fa9d 	bl	80009e4 <__aeabi_dcmpge>
 80054aa:	2800      	cmp	r0, #0
 80054ac:	f000 815b 	beq.w	8005766 <_dtoa_r+0x93e>
 80054b0:	2400      	movs	r4, #0
 80054b2:	4625      	mov	r5, r4
 80054b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80054b6:	4656      	mov	r6, sl
 80054b8:	43db      	mvns	r3, r3
 80054ba:	9304      	str	r3, [sp, #16]
 80054bc:	2700      	movs	r7, #0
 80054be:	4621      	mov	r1, r4
 80054c0:	4658      	mov	r0, fp
 80054c2:	f000 fbb7 	bl	8005c34 <_Bfree>
 80054c6:	2d00      	cmp	r5, #0
 80054c8:	d0dc      	beq.n	8005484 <_dtoa_r+0x65c>
 80054ca:	b12f      	cbz	r7, 80054d8 <_dtoa_r+0x6b0>
 80054cc:	42af      	cmp	r7, r5
 80054ce:	d003      	beq.n	80054d8 <_dtoa_r+0x6b0>
 80054d0:	4639      	mov	r1, r7
 80054d2:	4658      	mov	r0, fp
 80054d4:	f000 fbae 	bl	8005c34 <_Bfree>
 80054d8:	4629      	mov	r1, r5
 80054da:	4658      	mov	r0, fp
 80054dc:	f000 fbaa 	bl	8005c34 <_Bfree>
 80054e0:	e7d0      	b.n	8005484 <_dtoa_r+0x65c>
 80054e2:	9704      	str	r7, [sp, #16]
 80054e4:	4633      	mov	r3, r6
 80054e6:	461e      	mov	r6, r3
 80054e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80054ec:	2a39      	cmp	r2, #57	@ 0x39
 80054ee:	d107      	bne.n	8005500 <_dtoa_r+0x6d8>
 80054f0:	459a      	cmp	sl, r3
 80054f2:	d1f8      	bne.n	80054e6 <_dtoa_r+0x6be>
 80054f4:	9a04      	ldr	r2, [sp, #16]
 80054f6:	3201      	adds	r2, #1
 80054f8:	9204      	str	r2, [sp, #16]
 80054fa:	2230      	movs	r2, #48	@ 0x30
 80054fc:	f88a 2000 	strb.w	r2, [sl]
 8005500:	781a      	ldrb	r2, [r3, #0]
 8005502:	3201      	adds	r2, #1
 8005504:	701a      	strb	r2, [r3, #0]
 8005506:	e7bd      	b.n	8005484 <_dtoa_r+0x65c>
 8005508:	2200      	movs	r2, #0
 800550a:	4b09      	ldr	r3, [pc, #36]	@ (8005530 <_dtoa_r+0x708>)
 800550c:	f7fa ffe4 	bl	80004d8 <__aeabi_dmul>
 8005510:	2200      	movs	r2, #0
 8005512:	2300      	movs	r3, #0
 8005514:	4604      	mov	r4, r0
 8005516:	460d      	mov	r5, r1
 8005518:	f7fb fa46 	bl	80009a8 <__aeabi_dcmpeq>
 800551c:	2800      	cmp	r0, #0
 800551e:	f43f aebc 	beq.w	800529a <_dtoa_r+0x472>
 8005522:	e6f1      	b.n	8005308 <_dtoa_r+0x4e0>
 8005524:	08006c10 	.word	0x08006c10
 8005528:	3fe00000 	.word	0x3fe00000
 800552c:	3ff00000 	.word	0x3ff00000
 8005530:	40240000 	.word	0x40240000
 8005534:	40140000 	.word	0x40140000
 8005538:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800553a:	2a00      	cmp	r2, #0
 800553c:	f000 80db 	beq.w	80056f6 <_dtoa_r+0x8ce>
 8005540:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005542:	2a01      	cmp	r2, #1
 8005544:	f300 80bf 	bgt.w	80056c6 <_dtoa_r+0x89e>
 8005548:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800554a:	2a00      	cmp	r2, #0
 800554c:	f000 80b7 	beq.w	80056be <_dtoa_r+0x896>
 8005550:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005554:	4646      	mov	r6, r8
 8005556:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005558:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800555a:	2101      	movs	r1, #1
 800555c:	441a      	add	r2, r3
 800555e:	4658      	mov	r0, fp
 8005560:	4498      	add	r8, r3
 8005562:	9209      	str	r2, [sp, #36]	@ 0x24
 8005564:	f000 fc1a 	bl	8005d9c <__i2b>
 8005568:	4605      	mov	r5, r0
 800556a:	b15e      	cbz	r6, 8005584 <_dtoa_r+0x75c>
 800556c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800556e:	2b00      	cmp	r3, #0
 8005570:	dd08      	ble.n	8005584 <_dtoa_r+0x75c>
 8005572:	42b3      	cmp	r3, r6
 8005574:	bfa8      	it	ge
 8005576:	4633      	movge	r3, r6
 8005578:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800557a:	eba8 0803 	sub.w	r8, r8, r3
 800557e:	1af6      	subs	r6, r6, r3
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	9309      	str	r3, [sp, #36]	@ 0x24
 8005584:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005586:	b1f3      	cbz	r3, 80055c6 <_dtoa_r+0x79e>
 8005588:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800558a:	2b00      	cmp	r3, #0
 800558c:	f000 80b7 	beq.w	80056fe <_dtoa_r+0x8d6>
 8005590:	b18c      	cbz	r4, 80055b6 <_dtoa_r+0x78e>
 8005592:	4629      	mov	r1, r5
 8005594:	4622      	mov	r2, r4
 8005596:	4658      	mov	r0, fp
 8005598:	f000 fcbe 	bl	8005f18 <__pow5mult>
 800559c:	464a      	mov	r2, r9
 800559e:	4601      	mov	r1, r0
 80055a0:	4605      	mov	r5, r0
 80055a2:	4658      	mov	r0, fp
 80055a4:	f000 fc10 	bl	8005dc8 <__multiply>
 80055a8:	4649      	mov	r1, r9
 80055aa:	9004      	str	r0, [sp, #16]
 80055ac:	4658      	mov	r0, fp
 80055ae:	f000 fb41 	bl	8005c34 <_Bfree>
 80055b2:	9b04      	ldr	r3, [sp, #16]
 80055b4:	4699      	mov	r9, r3
 80055b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80055b8:	1b1a      	subs	r2, r3, r4
 80055ba:	d004      	beq.n	80055c6 <_dtoa_r+0x79e>
 80055bc:	4649      	mov	r1, r9
 80055be:	4658      	mov	r0, fp
 80055c0:	f000 fcaa 	bl	8005f18 <__pow5mult>
 80055c4:	4681      	mov	r9, r0
 80055c6:	2101      	movs	r1, #1
 80055c8:	4658      	mov	r0, fp
 80055ca:	f000 fbe7 	bl	8005d9c <__i2b>
 80055ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80055d0:	4604      	mov	r4, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	f000 81c9 	beq.w	800596a <_dtoa_r+0xb42>
 80055d8:	461a      	mov	r2, r3
 80055da:	4601      	mov	r1, r0
 80055dc:	4658      	mov	r0, fp
 80055de:	f000 fc9b 	bl	8005f18 <__pow5mult>
 80055e2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80055e4:	4604      	mov	r4, r0
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	f300 808f 	bgt.w	800570a <_dtoa_r+0x8e2>
 80055ec:	9b02      	ldr	r3, [sp, #8]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f040 8087 	bne.w	8005702 <_dtoa_r+0x8da>
 80055f4:	9b03      	ldr	r3, [sp, #12]
 80055f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f040 8083 	bne.w	8005706 <_dtoa_r+0x8de>
 8005600:	9b03      	ldr	r3, [sp, #12]
 8005602:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005606:	0d1b      	lsrs	r3, r3, #20
 8005608:	051b      	lsls	r3, r3, #20
 800560a:	b12b      	cbz	r3, 8005618 <_dtoa_r+0x7f0>
 800560c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800560e:	f108 0801 	add.w	r8, r8, #1
 8005612:	3301      	adds	r3, #1
 8005614:	9309      	str	r3, [sp, #36]	@ 0x24
 8005616:	2301      	movs	r3, #1
 8005618:	930a      	str	r3, [sp, #40]	@ 0x28
 800561a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 81aa 	beq.w	8005976 <_dtoa_r+0xb4e>
 8005622:	6923      	ldr	r3, [r4, #16]
 8005624:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005628:	6918      	ldr	r0, [r3, #16]
 800562a:	f000 fb6b 	bl	8005d04 <__hi0bits>
 800562e:	f1c0 0020 	rsb	r0, r0, #32
 8005632:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005634:	4418      	add	r0, r3
 8005636:	f010 001f 	ands.w	r0, r0, #31
 800563a:	d071      	beq.n	8005720 <_dtoa_r+0x8f8>
 800563c:	f1c0 0320 	rsb	r3, r0, #32
 8005640:	2b04      	cmp	r3, #4
 8005642:	dd65      	ble.n	8005710 <_dtoa_r+0x8e8>
 8005644:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005646:	f1c0 001c 	rsb	r0, r0, #28
 800564a:	4403      	add	r3, r0
 800564c:	4480      	add	r8, r0
 800564e:	4406      	add	r6, r0
 8005650:	9309      	str	r3, [sp, #36]	@ 0x24
 8005652:	f1b8 0f00 	cmp.w	r8, #0
 8005656:	dd05      	ble.n	8005664 <_dtoa_r+0x83c>
 8005658:	4649      	mov	r1, r9
 800565a:	4642      	mov	r2, r8
 800565c:	4658      	mov	r0, fp
 800565e:	f000 fcb5 	bl	8005fcc <__lshift>
 8005662:	4681      	mov	r9, r0
 8005664:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005666:	2b00      	cmp	r3, #0
 8005668:	dd05      	ble.n	8005676 <_dtoa_r+0x84e>
 800566a:	4621      	mov	r1, r4
 800566c:	461a      	mov	r2, r3
 800566e:	4658      	mov	r0, fp
 8005670:	f000 fcac 	bl	8005fcc <__lshift>
 8005674:	4604      	mov	r4, r0
 8005676:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005678:	2b00      	cmp	r3, #0
 800567a:	d053      	beq.n	8005724 <_dtoa_r+0x8fc>
 800567c:	4621      	mov	r1, r4
 800567e:	4648      	mov	r0, r9
 8005680:	f000 fd10 	bl	80060a4 <__mcmp>
 8005684:	2800      	cmp	r0, #0
 8005686:	da4d      	bge.n	8005724 <_dtoa_r+0x8fc>
 8005688:	1e7b      	subs	r3, r7, #1
 800568a:	4649      	mov	r1, r9
 800568c:	9304      	str	r3, [sp, #16]
 800568e:	220a      	movs	r2, #10
 8005690:	2300      	movs	r3, #0
 8005692:	4658      	mov	r0, fp
 8005694:	f000 faf0 	bl	8005c78 <__multadd>
 8005698:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800569a:	4681      	mov	r9, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	f000 816c 	beq.w	800597a <_dtoa_r+0xb52>
 80056a2:	2300      	movs	r3, #0
 80056a4:	4629      	mov	r1, r5
 80056a6:	220a      	movs	r2, #10
 80056a8:	4658      	mov	r0, fp
 80056aa:	f000 fae5 	bl	8005c78 <__multadd>
 80056ae:	9b08      	ldr	r3, [sp, #32]
 80056b0:	4605      	mov	r5, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	dc61      	bgt.n	800577a <_dtoa_r+0x952>
 80056b6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	dc3b      	bgt.n	8005734 <_dtoa_r+0x90c>
 80056bc:	e05d      	b.n	800577a <_dtoa_r+0x952>
 80056be:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80056c0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80056c4:	e746      	b.n	8005554 <_dtoa_r+0x72c>
 80056c6:	9b07      	ldr	r3, [sp, #28]
 80056c8:	1e5c      	subs	r4, r3, #1
 80056ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80056cc:	42a3      	cmp	r3, r4
 80056ce:	bfbf      	itttt	lt
 80056d0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80056d2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80056d4:	1ae3      	sublt	r3, r4, r3
 80056d6:	18d2      	addlt	r2, r2, r3
 80056d8:	bfa8      	it	ge
 80056da:	1b1c      	subge	r4, r3, r4
 80056dc:	9b07      	ldr	r3, [sp, #28]
 80056de:	bfbe      	ittt	lt
 80056e0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80056e2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80056e4:	2400      	movlt	r4, #0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	bfb5      	itete	lt
 80056ea:	eba8 0603 	sublt.w	r6, r8, r3
 80056ee:	4646      	movge	r6, r8
 80056f0:	2300      	movlt	r3, #0
 80056f2:	9b07      	ldrge	r3, [sp, #28]
 80056f4:	e730      	b.n	8005558 <_dtoa_r+0x730>
 80056f6:	4646      	mov	r6, r8
 80056f8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80056fa:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80056fc:	e735      	b.n	800556a <_dtoa_r+0x742>
 80056fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005700:	e75c      	b.n	80055bc <_dtoa_r+0x794>
 8005702:	2300      	movs	r3, #0
 8005704:	e788      	b.n	8005618 <_dtoa_r+0x7f0>
 8005706:	9b02      	ldr	r3, [sp, #8]
 8005708:	e786      	b.n	8005618 <_dtoa_r+0x7f0>
 800570a:	2300      	movs	r3, #0
 800570c:	930a      	str	r3, [sp, #40]	@ 0x28
 800570e:	e788      	b.n	8005622 <_dtoa_r+0x7fa>
 8005710:	d09f      	beq.n	8005652 <_dtoa_r+0x82a>
 8005712:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005714:	331c      	adds	r3, #28
 8005716:	441a      	add	r2, r3
 8005718:	4498      	add	r8, r3
 800571a:	441e      	add	r6, r3
 800571c:	9209      	str	r2, [sp, #36]	@ 0x24
 800571e:	e798      	b.n	8005652 <_dtoa_r+0x82a>
 8005720:	4603      	mov	r3, r0
 8005722:	e7f6      	b.n	8005712 <_dtoa_r+0x8ea>
 8005724:	9b07      	ldr	r3, [sp, #28]
 8005726:	9704      	str	r7, [sp, #16]
 8005728:	2b00      	cmp	r3, #0
 800572a:	dc20      	bgt.n	800576e <_dtoa_r+0x946>
 800572c:	9308      	str	r3, [sp, #32]
 800572e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005730:	2b02      	cmp	r3, #2
 8005732:	dd1e      	ble.n	8005772 <_dtoa_r+0x94a>
 8005734:	9b08      	ldr	r3, [sp, #32]
 8005736:	2b00      	cmp	r3, #0
 8005738:	f47f aebc 	bne.w	80054b4 <_dtoa_r+0x68c>
 800573c:	4621      	mov	r1, r4
 800573e:	2205      	movs	r2, #5
 8005740:	4658      	mov	r0, fp
 8005742:	f000 fa99 	bl	8005c78 <__multadd>
 8005746:	4601      	mov	r1, r0
 8005748:	4604      	mov	r4, r0
 800574a:	4648      	mov	r0, r9
 800574c:	f000 fcaa 	bl	80060a4 <__mcmp>
 8005750:	2800      	cmp	r0, #0
 8005752:	f77f aeaf 	ble.w	80054b4 <_dtoa_r+0x68c>
 8005756:	2331      	movs	r3, #49	@ 0x31
 8005758:	4656      	mov	r6, sl
 800575a:	f806 3b01 	strb.w	r3, [r6], #1
 800575e:	9b04      	ldr	r3, [sp, #16]
 8005760:	3301      	adds	r3, #1
 8005762:	9304      	str	r3, [sp, #16]
 8005764:	e6aa      	b.n	80054bc <_dtoa_r+0x694>
 8005766:	9c07      	ldr	r4, [sp, #28]
 8005768:	9704      	str	r7, [sp, #16]
 800576a:	4625      	mov	r5, r4
 800576c:	e7f3      	b.n	8005756 <_dtoa_r+0x92e>
 800576e:	9b07      	ldr	r3, [sp, #28]
 8005770:	9308      	str	r3, [sp, #32]
 8005772:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 8104 	beq.w	8005982 <_dtoa_r+0xb5a>
 800577a:	2e00      	cmp	r6, #0
 800577c:	dd05      	ble.n	800578a <_dtoa_r+0x962>
 800577e:	4629      	mov	r1, r5
 8005780:	4632      	mov	r2, r6
 8005782:	4658      	mov	r0, fp
 8005784:	f000 fc22 	bl	8005fcc <__lshift>
 8005788:	4605      	mov	r5, r0
 800578a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800578c:	2b00      	cmp	r3, #0
 800578e:	d05a      	beq.n	8005846 <_dtoa_r+0xa1e>
 8005790:	4658      	mov	r0, fp
 8005792:	6869      	ldr	r1, [r5, #4]
 8005794:	f000 fa0e 	bl	8005bb4 <_Balloc>
 8005798:	4606      	mov	r6, r0
 800579a:	b928      	cbnz	r0, 80057a8 <_dtoa_r+0x980>
 800579c:	4602      	mov	r2, r0
 800579e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80057a2:	4b83      	ldr	r3, [pc, #524]	@ (80059b0 <_dtoa_r+0xb88>)
 80057a4:	f7ff bb54 	b.w	8004e50 <_dtoa_r+0x28>
 80057a8:	692a      	ldr	r2, [r5, #16]
 80057aa:	f105 010c 	add.w	r1, r5, #12
 80057ae:	3202      	adds	r2, #2
 80057b0:	0092      	lsls	r2, r2, #2
 80057b2:	300c      	adds	r0, #12
 80057b4:	f7ff fa9f 	bl	8004cf6 <memcpy>
 80057b8:	2201      	movs	r2, #1
 80057ba:	4631      	mov	r1, r6
 80057bc:	4658      	mov	r0, fp
 80057be:	f000 fc05 	bl	8005fcc <__lshift>
 80057c2:	462f      	mov	r7, r5
 80057c4:	4605      	mov	r5, r0
 80057c6:	f10a 0301 	add.w	r3, sl, #1
 80057ca:	9307      	str	r3, [sp, #28]
 80057cc:	9b08      	ldr	r3, [sp, #32]
 80057ce:	4453      	add	r3, sl
 80057d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80057d2:	9b02      	ldr	r3, [sp, #8]
 80057d4:	f003 0301 	and.w	r3, r3, #1
 80057d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80057da:	9b07      	ldr	r3, [sp, #28]
 80057dc:	4621      	mov	r1, r4
 80057de:	3b01      	subs	r3, #1
 80057e0:	4648      	mov	r0, r9
 80057e2:	9302      	str	r3, [sp, #8]
 80057e4:	f7ff fa95 	bl	8004d12 <quorem>
 80057e8:	4639      	mov	r1, r7
 80057ea:	9008      	str	r0, [sp, #32]
 80057ec:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80057f0:	4648      	mov	r0, r9
 80057f2:	f000 fc57 	bl	80060a4 <__mcmp>
 80057f6:	462a      	mov	r2, r5
 80057f8:	9009      	str	r0, [sp, #36]	@ 0x24
 80057fa:	4621      	mov	r1, r4
 80057fc:	4658      	mov	r0, fp
 80057fe:	f000 fc6d 	bl	80060dc <__mdiff>
 8005802:	68c2      	ldr	r2, [r0, #12]
 8005804:	4606      	mov	r6, r0
 8005806:	bb02      	cbnz	r2, 800584a <_dtoa_r+0xa22>
 8005808:	4601      	mov	r1, r0
 800580a:	4648      	mov	r0, r9
 800580c:	f000 fc4a 	bl	80060a4 <__mcmp>
 8005810:	4602      	mov	r2, r0
 8005812:	4631      	mov	r1, r6
 8005814:	4658      	mov	r0, fp
 8005816:	920c      	str	r2, [sp, #48]	@ 0x30
 8005818:	f000 fa0c 	bl	8005c34 <_Bfree>
 800581c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800581e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005820:	9e07      	ldr	r6, [sp, #28]
 8005822:	ea43 0102 	orr.w	r1, r3, r2
 8005826:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005828:	4319      	orrs	r1, r3
 800582a:	d110      	bne.n	800584e <_dtoa_r+0xa26>
 800582c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005830:	d029      	beq.n	8005886 <_dtoa_r+0xa5e>
 8005832:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005834:	2b00      	cmp	r3, #0
 8005836:	dd02      	ble.n	800583e <_dtoa_r+0xa16>
 8005838:	9b08      	ldr	r3, [sp, #32]
 800583a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800583e:	9b02      	ldr	r3, [sp, #8]
 8005840:	f883 8000 	strb.w	r8, [r3]
 8005844:	e63b      	b.n	80054be <_dtoa_r+0x696>
 8005846:	4628      	mov	r0, r5
 8005848:	e7bb      	b.n	80057c2 <_dtoa_r+0x99a>
 800584a:	2201      	movs	r2, #1
 800584c:	e7e1      	b.n	8005812 <_dtoa_r+0x9ea>
 800584e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005850:	2b00      	cmp	r3, #0
 8005852:	db04      	blt.n	800585e <_dtoa_r+0xa36>
 8005854:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8005856:	430b      	orrs	r3, r1
 8005858:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800585a:	430b      	orrs	r3, r1
 800585c:	d120      	bne.n	80058a0 <_dtoa_r+0xa78>
 800585e:	2a00      	cmp	r2, #0
 8005860:	dded      	ble.n	800583e <_dtoa_r+0xa16>
 8005862:	4649      	mov	r1, r9
 8005864:	2201      	movs	r2, #1
 8005866:	4658      	mov	r0, fp
 8005868:	f000 fbb0 	bl	8005fcc <__lshift>
 800586c:	4621      	mov	r1, r4
 800586e:	4681      	mov	r9, r0
 8005870:	f000 fc18 	bl	80060a4 <__mcmp>
 8005874:	2800      	cmp	r0, #0
 8005876:	dc03      	bgt.n	8005880 <_dtoa_r+0xa58>
 8005878:	d1e1      	bne.n	800583e <_dtoa_r+0xa16>
 800587a:	f018 0f01 	tst.w	r8, #1
 800587e:	d0de      	beq.n	800583e <_dtoa_r+0xa16>
 8005880:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005884:	d1d8      	bne.n	8005838 <_dtoa_r+0xa10>
 8005886:	2339      	movs	r3, #57	@ 0x39
 8005888:	9a02      	ldr	r2, [sp, #8]
 800588a:	7013      	strb	r3, [r2, #0]
 800588c:	4633      	mov	r3, r6
 800588e:	461e      	mov	r6, r3
 8005890:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005894:	3b01      	subs	r3, #1
 8005896:	2a39      	cmp	r2, #57	@ 0x39
 8005898:	d052      	beq.n	8005940 <_dtoa_r+0xb18>
 800589a:	3201      	adds	r2, #1
 800589c:	701a      	strb	r2, [r3, #0]
 800589e:	e60e      	b.n	80054be <_dtoa_r+0x696>
 80058a0:	2a00      	cmp	r2, #0
 80058a2:	dd07      	ble.n	80058b4 <_dtoa_r+0xa8c>
 80058a4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80058a8:	d0ed      	beq.n	8005886 <_dtoa_r+0xa5e>
 80058aa:	9a02      	ldr	r2, [sp, #8]
 80058ac:	f108 0301 	add.w	r3, r8, #1
 80058b0:	7013      	strb	r3, [r2, #0]
 80058b2:	e604      	b.n	80054be <_dtoa_r+0x696>
 80058b4:	9b07      	ldr	r3, [sp, #28]
 80058b6:	9a07      	ldr	r2, [sp, #28]
 80058b8:	f803 8c01 	strb.w	r8, [r3, #-1]
 80058bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80058be:	4293      	cmp	r3, r2
 80058c0:	d028      	beq.n	8005914 <_dtoa_r+0xaec>
 80058c2:	4649      	mov	r1, r9
 80058c4:	2300      	movs	r3, #0
 80058c6:	220a      	movs	r2, #10
 80058c8:	4658      	mov	r0, fp
 80058ca:	f000 f9d5 	bl	8005c78 <__multadd>
 80058ce:	42af      	cmp	r7, r5
 80058d0:	4681      	mov	r9, r0
 80058d2:	f04f 0300 	mov.w	r3, #0
 80058d6:	f04f 020a 	mov.w	r2, #10
 80058da:	4639      	mov	r1, r7
 80058dc:	4658      	mov	r0, fp
 80058de:	d107      	bne.n	80058f0 <_dtoa_r+0xac8>
 80058e0:	f000 f9ca 	bl	8005c78 <__multadd>
 80058e4:	4607      	mov	r7, r0
 80058e6:	4605      	mov	r5, r0
 80058e8:	9b07      	ldr	r3, [sp, #28]
 80058ea:	3301      	adds	r3, #1
 80058ec:	9307      	str	r3, [sp, #28]
 80058ee:	e774      	b.n	80057da <_dtoa_r+0x9b2>
 80058f0:	f000 f9c2 	bl	8005c78 <__multadd>
 80058f4:	4629      	mov	r1, r5
 80058f6:	4607      	mov	r7, r0
 80058f8:	2300      	movs	r3, #0
 80058fa:	220a      	movs	r2, #10
 80058fc:	4658      	mov	r0, fp
 80058fe:	f000 f9bb 	bl	8005c78 <__multadd>
 8005902:	4605      	mov	r5, r0
 8005904:	e7f0      	b.n	80058e8 <_dtoa_r+0xac0>
 8005906:	9b08      	ldr	r3, [sp, #32]
 8005908:	2700      	movs	r7, #0
 800590a:	2b00      	cmp	r3, #0
 800590c:	bfcc      	ite	gt
 800590e:	461e      	movgt	r6, r3
 8005910:	2601      	movle	r6, #1
 8005912:	4456      	add	r6, sl
 8005914:	4649      	mov	r1, r9
 8005916:	2201      	movs	r2, #1
 8005918:	4658      	mov	r0, fp
 800591a:	f000 fb57 	bl	8005fcc <__lshift>
 800591e:	4621      	mov	r1, r4
 8005920:	4681      	mov	r9, r0
 8005922:	f000 fbbf 	bl	80060a4 <__mcmp>
 8005926:	2800      	cmp	r0, #0
 8005928:	dcb0      	bgt.n	800588c <_dtoa_r+0xa64>
 800592a:	d102      	bne.n	8005932 <_dtoa_r+0xb0a>
 800592c:	f018 0f01 	tst.w	r8, #1
 8005930:	d1ac      	bne.n	800588c <_dtoa_r+0xa64>
 8005932:	4633      	mov	r3, r6
 8005934:	461e      	mov	r6, r3
 8005936:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800593a:	2a30      	cmp	r2, #48	@ 0x30
 800593c:	d0fa      	beq.n	8005934 <_dtoa_r+0xb0c>
 800593e:	e5be      	b.n	80054be <_dtoa_r+0x696>
 8005940:	459a      	cmp	sl, r3
 8005942:	d1a4      	bne.n	800588e <_dtoa_r+0xa66>
 8005944:	9b04      	ldr	r3, [sp, #16]
 8005946:	3301      	adds	r3, #1
 8005948:	9304      	str	r3, [sp, #16]
 800594a:	2331      	movs	r3, #49	@ 0x31
 800594c:	f88a 3000 	strb.w	r3, [sl]
 8005950:	e5b5      	b.n	80054be <_dtoa_r+0x696>
 8005952:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005954:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80059b4 <_dtoa_r+0xb8c>
 8005958:	b11b      	cbz	r3, 8005962 <_dtoa_r+0xb3a>
 800595a:	f10a 0308 	add.w	r3, sl, #8
 800595e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005960:	6013      	str	r3, [r2, #0]
 8005962:	4650      	mov	r0, sl
 8005964:	b017      	add	sp, #92	@ 0x5c
 8005966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800596a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800596c:	2b01      	cmp	r3, #1
 800596e:	f77f ae3d 	ble.w	80055ec <_dtoa_r+0x7c4>
 8005972:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005974:	930a      	str	r3, [sp, #40]	@ 0x28
 8005976:	2001      	movs	r0, #1
 8005978:	e65b      	b.n	8005632 <_dtoa_r+0x80a>
 800597a:	9b08      	ldr	r3, [sp, #32]
 800597c:	2b00      	cmp	r3, #0
 800597e:	f77f aed6 	ble.w	800572e <_dtoa_r+0x906>
 8005982:	4656      	mov	r6, sl
 8005984:	4621      	mov	r1, r4
 8005986:	4648      	mov	r0, r9
 8005988:	f7ff f9c3 	bl	8004d12 <quorem>
 800598c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005990:	9b08      	ldr	r3, [sp, #32]
 8005992:	f806 8b01 	strb.w	r8, [r6], #1
 8005996:	eba6 020a 	sub.w	r2, r6, sl
 800599a:	4293      	cmp	r3, r2
 800599c:	ddb3      	ble.n	8005906 <_dtoa_r+0xade>
 800599e:	4649      	mov	r1, r9
 80059a0:	2300      	movs	r3, #0
 80059a2:	220a      	movs	r2, #10
 80059a4:	4658      	mov	r0, fp
 80059a6:	f000 f967 	bl	8005c78 <__multadd>
 80059aa:	4681      	mov	r9, r0
 80059ac:	e7ea      	b.n	8005984 <_dtoa_r+0xb5c>
 80059ae:	bf00      	nop
 80059b0:	08006b72 	.word	0x08006b72
 80059b4:	08006af6 	.word	0x08006af6

080059b8 <_free_r>:
 80059b8:	b538      	push	{r3, r4, r5, lr}
 80059ba:	4605      	mov	r5, r0
 80059bc:	2900      	cmp	r1, #0
 80059be:	d040      	beq.n	8005a42 <_free_r+0x8a>
 80059c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059c4:	1f0c      	subs	r4, r1, #4
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	bfb8      	it	lt
 80059ca:	18e4      	addlt	r4, r4, r3
 80059cc:	f000 f8e6 	bl	8005b9c <__malloc_lock>
 80059d0:	4a1c      	ldr	r2, [pc, #112]	@ (8005a44 <_free_r+0x8c>)
 80059d2:	6813      	ldr	r3, [r2, #0]
 80059d4:	b933      	cbnz	r3, 80059e4 <_free_r+0x2c>
 80059d6:	6063      	str	r3, [r4, #4]
 80059d8:	6014      	str	r4, [r2, #0]
 80059da:	4628      	mov	r0, r5
 80059dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059e0:	f000 b8e2 	b.w	8005ba8 <__malloc_unlock>
 80059e4:	42a3      	cmp	r3, r4
 80059e6:	d908      	bls.n	80059fa <_free_r+0x42>
 80059e8:	6820      	ldr	r0, [r4, #0]
 80059ea:	1821      	adds	r1, r4, r0
 80059ec:	428b      	cmp	r3, r1
 80059ee:	bf01      	itttt	eq
 80059f0:	6819      	ldreq	r1, [r3, #0]
 80059f2:	685b      	ldreq	r3, [r3, #4]
 80059f4:	1809      	addeq	r1, r1, r0
 80059f6:	6021      	streq	r1, [r4, #0]
 80059f8:	e7ed      	b.n	80059d6 <_free_r+0x1e>
 80059fa:	461a      	mov	r2, r3
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	b10b      	cbz	r3, 8005a04 <_free_r+0x4c>
 8005a00:	42a3      	cmp	r3, r4
 8005a02:	d9fa      	bls.n	80059fa <_free_r+0x42>
 8005a04:	6811      	ldr	r1, [r2, #0]
 8005a06:	1850      	adds	r0, r2, r1
 8005a08:	42a0      	cmp	r0, r4
 8005a0a:	d10b      	bne.n	8005a24 <_free_r+0x6c>
 8005a0c:	6820      	ldr	r0, [r4, #0]
 8005a0e:	4401      	add	r1, r0
 8005a10:	1850      	adds	r0, r2, r1
 8005a12:	4283      	cmp	r3, r0
 8005a14:	6011      	str	r1, [r2, #0]
 8005a16:	d1e0      	bne.n	80059da <_free_r+0x22>
 8005a18:	6818      	ldr	r0, [r3, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	4408      	add	r0, r1
 8005a1e:	6010      	str	r0, [r2, #0]
 8005a20:	6053      	str	r3, [r2, #4]
 8005a22:	e7da      	b.n	80059da <_free_r+0x22>
 8005a24:	d902      	bls.n	8005a2c <_free_r+0x74>
 8005a26:	230c      	movs	r3, #12
 8005a28:	602b      	str	r3, [r5, #0]
 8005a2a:	e7d6      	b.n	80059da <_free_r+0x22>
 8005a2c:	6820      	ldr	r0, [r4, #0]
 8005a2e:	1821      	adds	r1, r4, r0
 8005a30:	428b      	cmp	r3, r1
 8005a32:	bf01      	itttt	eq
 8005a34:	6819      	ldreq	r1, [r3, #0]
 8005a36:	685b      	ldreq	r3, [r3, #4]
 8005a38:	1809      	addeq	r1, r1, r0
 8005a3a:	6021      	streq	r1, [r4, #0]
 8005a3c:	6063      	str	r3, [r4, #4]
 8005a3e:	6054      	str	r4, [r2, #4]
 8005a40:	e7cb      	b.n	80059da <_free_r+0x22>
 8005a42:	bd38      	pop	{r3, r4, r5, pc}
 8005a44:	20000594 	.word	0x20000594

08005a48 <malloc>:
 8005a48:	4b02      	ldr	r3, [pc, #8]	@ (8005a54 <malloc+0xc>)
 8005a4a:	4601      	mov	r1, r0
 8005a4c:	6818      	ldr	r0, [r3, #0]
 8005a4e:	f000 b825 	b.w	8005a9c <_malloc_r>
 8005a52:	bf00      	nop
 8005a54:	20000018 	.word	0x20000018

08005a58 <sbrk_aligned>:
 8005a58:	b570      	push	{r4, r5, r6, lr}
 8005a5a:	4e0f      	ldr	r6, [pc, #60]	@ (8005a98 <sbrk_aligned+0x40>)
 8005a5c:	460c      	mov	r4, r1
 8005a5e:	6831      	ldr	r1, [r6, #0]
 8005a60:	4605      	mov	r5, r0
 8005a62:	b911      	cbnz	r1, 8005a6a <sbrk_aligned+0x12>
 8005a64:	f000 fcce 	bl	8006404 <_sbrk_r>
 8005a68:	6030      	str	r0, [r6, #0]
 8005a6a:	4621      	mov	r1, r4
 8005a6c:	4628      	mov	r0, r5
 8005a6e:	f000 fcc9 	bl	8006404 <_sbrk_r>
 8005a72:	1c43      	adds	r3, r0, #1
 8005a74:	d103      	bne.n	8005a7e <sbrk_aligned+0x26>
 8005a76:	f04f 34ff 	mov.w	r4, #4294967295
 8005a7a:	4620      	mov	r0, r4
 8005a7c:	bd70      	pop	{r4, r5, r6, pc}
 8005a7e:	1cc4      	adds	r4, r0, #3
 8005a80:	f024 0403 	bic.w	r4, r4, #3
 8005a84:	42a0      	cmp	r0, r4
 8005a86:	d0f8      	beq.n	8005a7a <sbrk_aligned+0x22>
 8005a88:	1a21      	subs	r1, r4, r0
 8005a8a:	4628      	mov	r0, r5
 8005a8c:	f000 fcba 	bl	8006404 <_sbrk_r>
 8005a90:	3001      	adds	r0, #1
 8005a92:	d1f2      	bne.n	8005a7a <sbrk_aligned+0x22>
 8005a94:	e7ef      	b.n	8005a76 <sbrk_aligned+0x1e>
 8005a96:	bf00      	nop
 8005a98:	20000590 	.word	0x20000590

08005a9c <_malloc_r>:
 8005a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005aa0:	1ccd      	adds	r5, r1, #3
 8005aa2:	f025 0503 	bic.w	r5, r5, #3
 8005aa6:	3508      	adds	r5, #8
 8005aa8:	2d0c      	cmp	r5, #12
 8005aaa:	bf38      	it	cc
 8005aac:	250c      	movcc	r5, #12
 8005aae:	2d00      	cmp	r5, #0
 8005ab0:	4606      	mov	r6, r0
 8005ab2:	db01      	blt.n	8005ab8 <_malloc_r+0x1c>
 8005ab4:	42a9      	cmp	r1, r5
 8005ab6:	d904      	bls.n	8005ac2 <_malloc_r+0x26>
 8005ab8:	230c      	movs	r3, #12
 8005aba:	6033      	str	r3, [r6, #0]
 8005abc:	2000      	movs	r0, #0
 8005abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ac2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005b98 <_malloc_r+0xfc>
 8005ac6:	f000 f869 	bl	8005b9c <__malloc_lock>
 8005aca:	f8d8 3000 	ldr.w	r3, [r8]
 8005ace:	461c      	mov	r4, r3
 8005ad0:	bb44      	cbnz	r4, 8005b24 <_malloc_r+0x88>
 8005ad2:	4629      	mov	r1, r5
 8005ad4:	4630      	mov	r0, r6
 8005ad6:	f7ff ffbf 	bl	8005a58 <sbrk_aligned>
 8005ada:	1c43      	adds	r3, r0, #1
 8005adc:	4604      	mov	r4, r0
 8005ade:	d158      	bne.n	8005b92 <_malloc_r+0xf6>
 8005ae0:	f8d8 4000 	ldr.w	r4, [r8]
 8005ae4:	4627      	mov	r7, r4
 8005ae6:	2f00      	cmp	r7, #0
 8005ae8:	d143      	bne.n	8005b72 <_malloc_r+0xd6>
 8005aea:	2c00      	cmp	r4, #0
 8005aec:	d04b      	beq.n	8005b86 <_malloc_r+0xea>
 8005aee:	6823      	ldr	r3, [r4, #0]
 8005af0:	4639      	mov	r1, r7
 8005af2:	4630      	mov	r0, r6
 8005af4:	eb04 0903 	add.w	r9, r4, r3
 8005af8:	f000 fc84 	bl	8006404 <_sbrk_r>
 8005afc:	4581      	cmp	r9, r0
 8005afe:	d142      	bne.n	8005b86 <_malloc_r+0xea>
 8005b00:	6821      	ldr	r1, [r4, #0]
 8005b02:	4630      	mov	r0, r6
 8005b04:	1a6d      	subs	r5, r5, r1
 8005b06:	4629      	mov	r1, r5
 8005b08:	f7ff ffa6 	bl	8005a58 <sbrk_aligned>
 8005b0c:	3001      	adds	r0, #1
 8005b0e:	d03a      	beq.n	8005b86 <_malloc_r+0xea>
 8005b10:	6823      	ldr	r3, [r4, #0]
 8005b12:	442b      	add	r3, r5
 8005b14:	6023      	str	r3, [r4, #0]
 8005b16:	f8d8 3000 	ldr.w	r3, [r8]
 8005b1a:	685a      	ldr	r2, [r3, #4]
 8005b1c:	bb62      	cbnz	r2, 8005b78 <_malloc_r+0xdc>
 8005b1e:	f8c8 7000 	str.w	r7, [r8]
 8005b22:	e00f      	b.n	8005b44 <_malloc_r+0xa8>
 8005b24:	6822      	ldr	r2, [r4, #0]
 8005b26:	1b52      	subs	r2, r2, r5
 8005b28:	d420      	bmi.n	8005b6c <_malloc_r+0xd0>
 8005b2a:	2a0b      	cmp	r2, #11
 8005b2c:	d917      	bls.n	8005b5e <_malloc_r+0xc2>
 8005b2e:	1961      	adds	r1, r4, r5
 8005b30:	42a3      	cmp	r3, r4
 8005b32:	6025      	str	r5, [r4, #0]
 8005b34:	bf18      	it	ne
 8005b36:	6059      	strne	r1, [r3, #4]
 8005b38:	6863      	ldr	r3, [r4, #4]
 8005b3a:	bf08      	it	eq
 8005b3c:	f8c8 1000 	streq.w	r1, [r8]
 8005b40:	5162      	str	r2, [r4, r5]
 8005b42:	604b      	str	r3, [r1, #4]
 8005b44:	4630      	mov	r0, r6
 8005b46:	f000 f82f 	bl	8005ba8 <__malloc_unlock>
 8005b4a:	f104 000b 	add.w	r0, r4, #11
 8005b4e:	1d23      	adds	r3, r4, #4
 8005b50:	f020 0007 	bic.w	r0, r0, #7
 8005b54:	1ac2      	subs	r2, r0, r3
 8005b56:	bf1c      	itt	ne
 8005b58:	1a1b      	subne	r3, r3, r0
 8005b5a:	50a3      	strne	r3, [r4, r2]
 8005b5c:	e7af      	b.n	8005abe <_malloc_r+0x22>
 8005b5e:	6862      	ldr	r2, [r4, #4]
 8005b60:	42a3      	cmp	r3, r4
 8005b62:	bf0c      	ite	eq
 8005b64:	f8c8 2000 	streq.w	r2, [r8]
 8005b68:	605a      	strne	r2, [r3, #4]
 8005b6a:	e7eb      	b.n	8005b44 <_malloc_r+0xa8>
 8005b6c:	4623      	mov	r3, r4
 8005b6e:	6864      	ldr	r4, [r4, #4]
 8005b70:	e7ae      	b.n	8005ad0 <_malloc_r+0x34>
 8005b72:	463c      	mov	r4, r7
 8005b74:	687f      	ldr	r7, [r7, #4]
 8005b76:	e7b6      	b.n	8005ae6 <_malloc_r+0x4a>
 8005b78:	461a      	mov	r2, r3
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	42a3      	cmp	r3, r4
 8005b7e:	d1fb      	bne.n	8005b78 <_malloc_r+0xdc>
 8005b80:	2300      	movs	r3, #0
 8005b82:	6053      	str	r3, [r2, #4]
 8005b84:	e7de      	b.n	8005b44 <_malloc_r+0xa8>
 8005b86:	230c      	movs	r3, #12
 8005b88:	4630      	mov	r0, r6
 8005b8a:	6033      	str	r3, [r6, #0]
 8005b8c:	f000 f80c 	bl	8005ba8 <__malloc_unlock>
 8005b90:	e794      	b.n	8005abc <_malloc_r+0x20>
 8005b92:	6005      	str	r5, [r0, #0]
 8005b94:	e7d6      	b.n	8005b44 <_malloc_r+0xa8>
 8005b96:	bf00      	nop
 8005b98:	20000594 	.word	0x20000594

08005b9c <__malloc_lock>:
 8005b9c:	4801      	ldr	r0, [pc, #4]	@ (8005ba4 <__malloc_lock+0x8>)
 8005b9e:	f7ff b89a 	b.w	8004cd6 <__retarget_lock_acquire_recursive>
 8005ba2:	bf00      	nop
 8005ba4:	2000058c 	.word	0x2000058c

08005ba8 <__malloc_unlock>:
 8005ba8:	4801      	ldr	r0, [pc, #4]	@ (8005bb0 <__malloc_unlock+0x8>)
 8005baa:	f7ff b895 	b.w	8004cd8 <__retarget_lock_release_recursive>
 8005bae:	bf00      	nop
 8005bb0:	2000058c 	.word	0x2000058c

08005bb4 <_Balloc>:
 8005bb4:	b570      	push	{r4, r5, r6, lr}
 8005bb6:	69c6      	ldr	r6, [r0, #28]
 8005bb8:	4604      	mov	r4, r0
 8005bba:	460d      	mov	r5, r1
 8005bbc:	b976      	cbnz	r6, 8005bdc <_Balloc+0x28>
 8005bbe:	2010      	movs	r0, #16
 8005bc0:	f7ff ff42 	bl	8005a48 <malloc>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	61e0      	str	r0, [r4, #28]
 8005bc8:	b920      	cbnz	r0, 8005bd4 <_Balloc+0x20>
 8005bca:	216b      	movs	r1, #107	@ 0x6b
 8005bcc:	4b17      	ldr	r3, [pc, #92]	@ (8005c2c <_Balloc+0x78>)
 8005bce:	4818      	ldr	r0, [pc, #96]	@ (8005c30 <_Balloc+0x7c>)
 8005bd0:	f000 fc28 	bl	8006424 <__assert_func>
 8005bd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005bd8:	6006      	str	r6, [r0, #0]
 8005bda:	60c6      	str	r6, [r0, #12]
 8005bdc:	69e6      	ldr	r6, [r4, #28]
 8005bde:	68f3      	ldr	r3, [r6, #12]
 8005be0:	b183      	cbz	r3, 8005c04 <_Balloc+0x50>
 8005be2:	69e3      	ldr	r3, [r4, #28]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005bea:	b9b8      	cbnz	r0, 8005c1c <_Balloc+0x68>
 8005bec:	2101      	movs	r1, #1
 8005bee:	fa01 f605 	lsl.w	r6, r1, r5
 8005bf2:	1d72      	adds	r2, r6, #5
 8005bf4:	4620      	mov	r0, r4
 8005bf6:	0092      	lsls	r2, r2, #2
 8005bf8:	f000 fc32 	bl	8006460 <_calloc_r>
 8005bfc:	b160      	cbz	r0, 8005c18 <_Balloc+0x64>
 8005bfe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005c02:	e00e      	b.n	8005c22 <_Balloc+0x6e>
 8005c04:	2221      	movs	r2, #33	@ 0x21
 8005c06:	2104      	movs	r1, #4
 8005c08:	4620      	mov	r0, r4
 8005c0a:	f000 fc29 	bl	8006460 <_calloc_r>
 8005c0e:	69e3      	ldr	r3, [r4, #28]
 8005c10:	60f0      	str	r0, [r6, #12]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1e4      	bne.n	8005be2 <_Balloc+0x2e>
 8005c18:	2000      	movs	r0, #0
 8005c1a:	bd70      	pop	{r4, r5, r6, pc}
 8005c1c:	6802      	ldr	r2, [r0, #0]
 8005c1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005c22:	2300      	movs	r3, #0
 8005c24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005c28:	e7f7      	b.n	8005c1a <_Balloc+0x66>
 8005c2a:	bf00      	nop
 8005c2c:	08006b03 	.word	0x08006b03
 8005c30:	08006b83 	.word	0x08006b83

08005c34 <_Bfree>:
 8005c34:	b570      	push	{r4, r5, r6, lr}
 8005c36:	69c6      	ldr	r6, [r0, #28]
 8005c38:	4605      	mov	r5, r0
 8005c3a:	460c      	mov	r4, r1
 8005c3c:	b976      	cbnz	r6, 8005c5c <_Bfree+0x28>
 8005c3e:	2010      	movs	r0, #16
 8005c40:	f7ff ff02 	bl	8005a48 <malloc>
 8005c44:	4602      	mov	r2, r0
 8005c46:	61e8      	str	r0, [r5, #28]
 8005c48:	b920      	cbnz	r0, 8005c54 <_Bfree+0x20>
 8005c4a:	218f      	movs	r1, #143	@ 0x8f
 8005c4c:	4b08      	ldr	r3, [pc, #32]	@ (8005c70 <_Bfree+0x3c>)
 8005c4e:	4809      	ldr	r0, [pc, #36]	@ (8005c74 <_Bfree+0x40>)
 8005c50:	f000 fbe8 	bl	8006424 <__assert_func>
 8005c54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c58:	6006      	str	r6, [r0, #0]
 8005c5a:	60c6      	str	r6, [r0, #12]
 8005c5c:	b13c      	cbz	r4, 8005c6e <_Bfree+0x3a>
 8005c5e:	69eb      	ldr	r3, [r5, #28]
 8005c60:	6862      	ldr	r2, [r4, #4]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c68:	6021      	str	r1, [r4, #0]
 8005c6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005c6e:	bd70      	pop	{r4, r5, r6, pc}
 8005c70:	08006b03 	.word	0x08006b03
 8005c74:	08006b83 	.word	0x08006b83

08005c78 <__multadd>:
 8005c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c7c:	4607      	mov	r7, r0
 8005c7e:	460c      	mov	r4, r1
 8005c80:	461e      	mov	r6, r3
 8005c82:	2000      	movs	r0, #0
 8005c84:	690d      	ldr	r5, [r1, #16]
 8005c86:	f101 0c14 	add.w	ip, r1, #20
 8005c8a:	f8dc 3000 	ldr.w	r3, [ip]
 8005c8e:	3001      	adds	r0, #1
 8005c90:	b299      	uxth	r1, r3
 8005c92:	fb02 6101 	mla	r1, r2, r1, r6
 8005c96:	0c1e      	lsrs	r6, r3, #16
 8005c98:	0c0b      	lsrs	r3, r1, #16
 8005c9a:	fb02 3306 	mla	r3, r2, r6, r3
 8005c9e:	b289      	uxth	r1, r1
 8005ca0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005ca4:	4285      	cmp	r5, r0
 8005ca6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005caa:	f84c 1b04 	str.w	r1, [ip], #4
 8005cae:	dcec      	bgt.n	8005c8a <__multadd+0x12>
 8005cb0:	b30e      	cbz	r6, 8005cf6 <__multadd+0x7e>
 8005cb2:	68a3      	ldr	r3, [r4, #8]
 8005cb4:	42ab      	cmp	r3, r5
 8005cb6:	dc19      	bgt.n	8005cec <__multadd+0x74>
 8005cb8:	6861      	ldr	r1, [r4, #4]
 8005cba:	4638      	mov	r0, r7
 8005cbc:	3101      	adds	r1, #1
 8005cbe:	f7ff ff79 	bl	8005bb4 <_Balloc>
 8005cc2:	4680      	mov	r8, r0
 8005cc4:	b928      	cbnz	r0, 8005cd2 <__multadd+0x5a>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	21ba      	movs	r1, #186	@ 0xba
 8005cca:	4b0c      	ldr	r3, [pc, #48]	@ (8005cfc <__multadd+0x84>)
 8005ccc:	480c      	ldr	r0, [pc, #48]	@ (8005d00 <__multadd+0x88>)
 8005cce:	f000 fba9 	bl	8006424 <__assert_func>
 8005cd2:	6922      	ldr	r2, [r4, #16]
 8005cd4:	f104 010c 	add.w	r1, r4, #12
 8005cd8:	3202      	adds	r2, #2
 8005cda:	0092      	lsls	r2, r2, #2
 8005cdc:	300c      	adds	r0, #12
 8005cde:	f7ff f80a 	bl	8004cf6 <memcpy>
 8005ce2:	4621      	mov	r1, r4
 8005ce4:	4638      	mov	r0, r7
 8005ce6:	f7ff ffa5 	bl	8005c34 <_Bfree>
 8005cea:	4644      	mov	r4, r8
 8005cec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005cf0:	3501      	adds	r5, #1
 8005cf2:	615e      	str	r6, [r3, #20]
 8005cf4:	6125      	str	r5, [r4, #16]
 8005cf6:	4620      	mov	r0, r4
 8005cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cfc:	08006b72 	.word	0x08006b72
 8005d00:	08006b83 	.word	0x08006b83

08005d04 <__hi0bits>:
 8005d04:	4603      	mov	r3, r0
 8005d06:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005d0a:	bf3a      	itte	cc
 8005d0c:	0403      	lslcc	r3, r0, #16
 8005d0e:	2010      	movcc	r0, #16
 8005d10:	2000      	movcs	r0, #0
 8005d12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d16:	bf3c      	itt	cc
 8005d18:	021b      	lslcc	r3, r3, #8
 8005d1a:	3008      	addcc	r0, #8
 8005d1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d20:	bf3c      	itt	cc
 8005d22:	011b      	lslcc	r3, r3, #4
 8005d24:	3004      	addcc	r0, #4
 8005d26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d2a:	bf3c      	itt	cc
 8005d2c:	009b      	lslcc	r3, r3, #2
 8005d2e:	3002      	addcc	r0, #2
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	db05      	blt.n	8005d40 <__hi0bits+0x3c>
 8005d34:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005d38:	f100 0001 	add.w	r0, r0, #1
 8005d3c:	bf08      	it	eq
 8005d3e:	2020      	moveq	r0, #32
 8005d40:	4770      	bx	lr

08005d42 <__lo0bits>:
 8005d42:	6803      	ldr	r3, [r0, #0]
 8005d44:	4602      	mov	r2, r0
 8005d46:	f013 0007 	ands.w	r0, r3, #7
 8005d4a:	d00b      	beq.n	8005d64 <__lo0bits+0x22>
 8005d4c:	07d9      	lsls	r1, r3, #31
 8005d4e:	d421      	bmi.n	8005d94 <__lo0bits+0x52>
 8005d50:	0798      	lsls	r0, r3, #30
 8005d52:	bf49      	itett	mi
 8005d54:	085b      	lsrmi	r3, r3, #1
 8005d56:	089b      	lsrpl	r3, r3, #2
 8005d58:	2001      	movmi	r0, #1
 8005d5a:	6013      	strmi	r3, [r2, #0]
 8005d5c:	bf5c      	itt	pl
 8005d5e:	2002      	movpl	r0, #2
 8005d60:	6013      	strpl	r3, [r2, #0]
 8005d62:	4770      	bx	lr
 8005d64:	b299      	uxth	r1, r3
 8005d66:	b909      	cbnz	r1, 8005d6c <__lo0bits+0x2a>
 8005d68:	2010      	movs	r0, #16
 8005d6a:	0c1b      	lsrs	r3, r3, #16
 8005d6c:	b2d9      	uxtb	r1, r3
 8005d6e:	b909      	cbnz	r1, 8005d74 <__lo0bits+0x32>
 8005d70:	3008      	adds	r0, #8
 8005d72:	0a1b      	lsrs	r3, r3, #8
 8005d74:	0719      	lsls	r1, r3, #28
 8005d76:	bf04      	itt	eq
 8005d78:	091b      	lsreq	r3, r3, #4
 8005d7a:	3004      	addeq	r0, #4
 8005d7c:	0799      	lsls	r1, r3, #30
 8005d7e:	bf04      	itt	eq
 8005d80:	089b      	lsreq	r3, r3, #2
 8005d82:	3002      	addeq	r0, #2
 8005d84:	07d9      	lsls	r1, r3, #31
 8005d86:	d403      	bmi.n	8005d90 <__lo0bits+0x4e>
 8005d88:	085b      	lsrs	r3, r3, #1
 8005d8a:	f100 0001 	add.w	r0, r0, #1
 8005d8e:	d003      	beq.n	8005d98 <__lo0bits+0x56>
 8005d90:	6013      	str	r3, [r2, #0]
 8005d92:	4770      	bx	lr
 8005d94:	2000      	movs	r0, #0
 8005d96:	4770      	bx	lr
 8005d98:	2020      	movs	r0, #32
 8005d9a:	4770      	bx	lr

08005d9c <__i2b>:
 8005d9c:	b510      	push	{r4, lr}
 8005d9e:	460c      	mov	r4, r1
 8005da0:	2101      	movs	r1, #1
 8005da2:	f7ff ff07 	bl	8005bb4 <_Balloc>
 8005da6:	4602      	mov	r2, r0
 8005da8:	b928      	cbnz	r0, 8005db6 <__i2b+0x1a>
 8005daa:	f240 1145 	movw	r1, #325	@ 0x145
 8005dae:	4b04      	ldr	r3, [pc, #16]	@ (8005dc0 <__i2b+0x24>)
 8005db0:	4804      	ldr	r0, [pc, #16]	@ (8005dc4 <__i2b+0x28>)
 8005db2:	f000 fb37 	bl	8006424 <__assert_func>
 8005db6:	2301      	movs	r3, #1
 8005db8:	6144      	str	r4, [r0, #20]
 8005dba:	6103      	str	r3, [r0, #16]
 8005dbc:	bd10      	pop	{r4, pc}
 8005dbe:	bf00      	nop
 8005dc0:	08006b72 	.word	0x08006b72
 8005dc4:	08006b83 	.word	0x08006b83

08005dc8 <__multiply>:
 8005dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dcc:	4614      	mov	r4, r2
 8005dce:	690a      	ldr	r2, [r1, #16]
 8005dd0:	6923      	ldr	r3, [r4, #16]
 8005dd2:	460f      	mov	r7, r1
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	bfa2      	ittt	ge
 8005dd8:	4623      	movge	r3, r4
 8005dda:	460c      	movge	r4, r1
 8005ddc:	461f      	movge	r7, r3
 8005dde:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005de2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005de6:	68a3      	ldr	r3, [r4, #8]
 8005de8:	6861      	ldr	r1, [r4, #4]
 8005dea:	eb0a 0609 	add.w	r6, sl, r9
 8005dee:	42b3      	cmp	r3, r6
 8005df0:	b085      	sub	sp, #20
 8005df2:	bfb8      	it	lt
 8005df4:	3101      	addlt	r1, #1
 8005df6:	f7ff fedd 	bl	8005bb4 <_Balloc>
 8005dfa:	b930      	cbnz	r0, 8005e0a <__multiply+0x42>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005e02:	4b43      	ldr	r3, [pc, #268]	@ (8005f10 <__multiply+0x148>)
 8005e04:	4843      	ldr	r0, [pc, #268]	@ (8005f14 <__multiply+0x14c>)
 8005e06:	f000 fb0d 	bl	8006424 <__assert_func>
 8005e0a:	f100 0514 	add.w	r5, r0, #20
 8005e0e:	462b      	mov	r3, r5
 8005e10:	2200      	movs	r2, #0
 8005e12:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005e16:	4543      	cmp	r3, r8
 8005e18:	d321      	bcc.n	8005e5e <__multiply+0x96>
 8005e1a:	f107 0114 	add.w	r1, r7, #20
 8005e1e:	f104 0214 	add.w	r2, r4, #20
 8005e22:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005e26:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005e2a:	9302      	str	r3, [sp, #8]
 8005e2c:	1b13      	subs	r3, r2, r4
 8005e2e:	3b15      	subs	r3, #21
 8005e30:	f023 0303 	bic.w	r3, r3, #3
 8005e34:	3304      	adds	r3, #4
 8005e36:	f104 0715 	add.w	r7, r4, #21
 8005e3a:	42ba      	cmp	r2, r7
 8005e3c:	bf38      	it	cc
 8005e3e:	2304      	movcc	r3, #4
 8005e40:	9301      	str	r3, [sp, #4]
 8005e42:	9b02      	ldr	r3, [sp, #8]
 8005e44:	9103      	str	r1, [sp, #12]
 8005e46:	428b      	cmp	r3, r1
 8005e48:	d80c      	bhi.n	8005e64 <__multiply+0x9c>
 8005e4a:	2e00      	cmp	r6, #0
 8005e4c:	dd03      	ble.n	8005e56 <__multiply+0x8e>
 8005e4e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d05a      	beq.n	8005f0c <__multiply+0x144>
 8005e56:	6106      	str	r6, [r0, #16]
 8005e58:	b005      	add	sp, #20
 8005e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e5e:	f843 2b04 	str.w	r2, [r3], #4
 8005e62:	e7d8      	b.n	8005e16 <__multiply+0x4e>
 8005e64:	f8b1 a000 	ldrh.w	sl, [r1]
 8005e68:	f1ba 0f00 	cmp.w	sl, #0
 8005e6c:	d023      	beq.n	8005eb6 <__multiply+0xee>
 8005e6e:	46a9      	mov	r9, r5
 8005e70:	f04f 0c00 	mov.w	ip, #0
 8005e74:	f104 0e14 	add.w	lr, r4, #20
 8005e78:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005e7c:	f8d9 3000 	ldr.w	r3, [r9]
 8005e80:	fa1f fb87 	uxth.w	fp, r7
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	fb0a 330b 	mla	r3, sl, fp, r3
 8005e8a:	4463      	add	r3, ip
 8005e8c:	f8d9 c000 	ldr.w	ip, [r9]
 8005e90:	0c3f      	lsrs	r7, r7, #16
 8005e92:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005e96:	fb0a c707 	mla	r7, sl, r7, ip
 8005e9a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005ea4:	4572      	cmp	r2, lr
 8005ea6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005eaa:	f849 3b04 	str.w	r3, [r9], #4
 8005eae:	d8e3      	bhi.n	8005e78 <__multiply+0xb0>
 8005eb0:	9b01      	ldr	r3, [sp, #4]
 8005eb2:	f845 c003 	str.w	ip, [r5, r3]
 8005eb6:	9b03      	ldr	r3, [sp, #12]
 8005eb8:	3104      	adds	r1, #4
 8005eba:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005ebe:	f1b9 0f00 	cmp.w	r9, #0
 8005ec2:	d021      	beq.n	8005f08 <__multiply+0x140>
 8005ec4:	46ae      	mov	lr, r5
 8005ec6:	f04f 0a00 	mov.w	sl, #0
 8005eca:	682b      	ldr	r3, [r5, #0]
 8005ecc:	f104 0c14 	add.w	ip, r4, #20
 8005ed0:	f8bc b000 	ldrh.w	fp, [ip]
 8005ed4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	fb09 770b 	mla	r7, r9, fp, r7
 8005ede:	4457      	add	r7, sl
 8005ee0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005ee4:	f84e 3b04 	str.w	r3, [lr], #4
 8005ee8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005eec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005ef0:	f8be 3000 	ldrh.w	r3, [lr]
 8005ef4:	4562      	cmp	r2, ip
 8005ef6:	fb09 330a 	mla	r3, r9, sl, r3
 8005efa:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005efe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005f02:	d8e5      	bhi.n	8005ed0 <__multiply+0x108>
 8005f04:	9f01      	ldr	r7, [sp, #4]
 8005f06:	51eb      	str	r3, [r5, r7]
 8005f08:	3504      	adds	r5, #4
 8005f0a:	e79a      	b.n	8005e42 <__multiply+0x7a>
 8005f0c:	3e01      	subs	r6, #1
 8005f0e:	e79c      	b.n	8005e4a <__multiply+0x82>
 8005f10:	08006b72 	.word	0x08006b72
 8005f14:	08006b83 	.word	0x08006b83

08005f18 <__pow5mult>:
 8005f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f1c:	4615      	mov	r5, r2
 8005f1e:	f012 0203 	ands.w	r2, r2, #3
 8005f22:	4607      	mov	r7, r0
 8005f24:	460e      	mov	r6, r1
 8005f26:	d007      	beq.n	8005f38 <__pow5mult+0x20>
 8005f28:	4c25      	ldr	r4, [pc, #148]	@ (8005fc0 <__pow5mult+0xa8>)
 8005f2a:	3a01      	subs	r2, #1
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005f32:	f7ff fea1 	bl	8005c78 <__multadd>
 8005f36:	4606      	mov	r6, r0
 8005f38:	10ad      	asrs	r5, r5, #2
 8005f3a:	d03d      	beq.n	8005fb8 <__pow5mult+0xa0>
 8005f3c:	69fc      	ldr	r4, [r7, #28]
 8005f3e:	b97c      	cbnz	r4, 8005f60 <__pow5mult+0x48>
 8005f40:	2010      	movs	r0, #16
 8005f42:	f7ff fd81 	bl	8005a48 <malloc>
 8005f46:	4602      	mov	r2, r0
 8005f48:	61f8      	str	r0, [r7, #28]
 8005f4a:	b928      	cbnz	r0, 8005f58 <__pow5mult+0x40>
 8005f4c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005f50:	4b1c      	ldr	r3, [pc, #112]	@ (8005fc4 <__pow5mult+0xac>)
 8005f52:	481d      	ldr	r0, [pc, #116]	@ (8005fc8 <__pow5mult+0xb0>)
 8005f54:	f000 fa66 	bl	8006424 <__assert_func>
 8005f58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005f5c:	6004      	str	r4, [r0, #0]
 8005f5e:	60c4      	str	r4, [r0, #12]
 8005f60:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005f64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005f68:	b94c      	cbnz	r4, 8005f7e <__pow5mult+0x66>
 8005f6a:	f240 2171 	movw	r1, #625	@ 0x271
 8005f6e:	4638      	mov	r0, r7
 8005f70:	f7ff ff14 	bl	8005d9c <__i2b>
 8005f74:	2300      	movs	r3, #0
 8005f76:	4604      	mov	r4, r0
 8005f78:	f8c8 0008 	str.w	r0, [r8, #8]
 8005f7c:	6003      	str	r3, [r0, #0]
 8005f7e:	f04f 0900 	mov.w	r9, #0
 8005f82:	07eb      	lsls	r3, r5, #31
 8005f84:	d50a      	bpl.n	8005f9c <__pow5mult+0x84>
 8005f86:	4631      	mov	r1, r6
 8005f88:	4622      	mov	r2, r4
 8005f8a:	4638      	mov	r0, r7
 8005f8c:	f7ff ff1c 	bl	8005dc8 <__multiply>
 8005f90:	4680      	mov	r8, r0
 8005f92:	4631      	mov	r1, r6
 8005f94:	4638      	mov	r0, r7
 8005f96:	f7ff fe4d 	bl	8005c34 <_Bfree>
 8005f9a:	4646      	mov	r6, r8
 8005f9c:	106d      	asrs	r5, r5, #1
 8005f9e:	d00b      	beq.n	8005fb8 <__pow5mult+0xa0>
 8005fa0:	6820      	ldr	r0, [r4, #0]
 8005fa2:	b938      	cbnz	r0, 8005fb4 <__pow5mult+0x9c>
 8005fa4:	4622      	mov	r2, r4
 8005fa6:	4621      	mov	r1, r4
 8005fa8:	4638      	mov	r0, r7
 8005faa:	f7ff ff0d 	bl	8005dc8 <__multiply>
 8005fae:	6020      	str	r0, [r4, #0]
 8005fb0:	f8c0 9000 	str.w	r9, [r0]
 8005fb4:	4604      	mov	r4, r0
 8005fb6:	e7e4      	b.n	8005f82 <__pow5mult+0x6a>
 8005fb8:	4630      	mov	r0, r6
 8005fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fbe:	bf00      	nop
 8005fc0:	08006bdc 	.word	0x08006bdc
 8005fc4:	08006b03 	.word	0x08006b03
 8005fc8:	08006b83 	.word	0x08006b83

08005fcc <__lshift>:
 8005fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fd0:	460c      	mov	r4, r1
 8005fd2:	4607      	mov	r7, r0
 8005fd4:	4691      	mov	r9, r2
 8005fd6:	6923      	ldr	r3, [r4, #16]
 8005fd8:	6849      	ldr	r1, [r1, #4]
 8005fda:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005fde:	68a3      	ldr	r3, [r4, #8]
 8005fe0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005fe4:	f108 0601 	add.w	r6, r8, #1
 8005fe8:	42b3      	cmp	r3, r6
 8005fea:	db0b      	blt.n	8006004 <__lshift+0x38>
 8005fec:	4638      	mov	r0, r7
 8005fee:	f7ff fde1 	bl	8005bb4 <_Balloc>
 8005ff2:	4605      	mov	r5, r0
 8005ff4:	b948      	cbnz	r0, 800600a <__lshift+0x3e>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005ffc:	4b27      	ldr	r3, [pc, #156]	@ (800609c <__lshift+0xd0>)
 8005ffe:	4828      	ldr	r0, [pc, #160]	@ (80060a0 <__lshift+0xd4>)
 8006000:	f000 fa10 	bl	8006424 <__assert_func>
 8006004:	3101      	adds	r1, #1
 8006006:	005b      	lsls	r3, r3, #1
 8006008:	e7ee      	b.n	8005fe8 <__lshift+0x1c>
 800600a:	2300      	movs	r3, #0
 800600c:	f100 0114 	add.w	r1, r0, #20
 8006010:	f100 0210 	add.w	r2, r0, #16
 8006014:	4618      	mov	r0, r3
 8006016:	4553      	cmp	r3, sl
 8006018:	db33      	blt.n	8006082 <__lshift+0xb6>
 800601a:	6920      	ldr	r0, [r4, #16]
 800601c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006020:	f104 0314 	add.w	r3, r4, #20
 8006024:	f019 091f 	ands.w	r9, r9, #31
 8006028:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800602c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006030:	d02b      	beq.n	800608a <__lshift+0xbe>
 8006032:	468a      	mov	sl, r1
 8006034:	2200      	movs	r2, #0
 8006036:	f1c9 0e20 	rsb	lr, r9, #32
 800603a:	6818      	ldr	r0, [r3, #0]
 800603c:	fa00 f009 	lsl.w	r0, r0, r9
 8006040:	4310      	orrs	r0, r2
 8006042:	f84a 0b04 	str.w	r0, [sl], #4
 8006046:	f853 2b04 	ldr.w	r2, [r3], #4
 800604a:	459c      	cmp	ip, r3
 800604c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006050:	d8f3      	bhi.n	800603a <__lshift+0x6e>
 8006052:	ebac 0304 	sub.w	r3, ip, r4
 8006056:	3b15      	subs	r3, #21
 8006058:	f023 0303 	bic.w	r3, r3, #3
 800605c:	3304      	adds	r3, #4
 800605e:	f104 0015 	add.w	r0, r4, #21
 8006062:	4584      	cmp	ip, r0
 8006064:	bf38      	it	cc
 8006066:	2304      	movcc	r3, #4
 8006068:	50ca      	str	r2, [r1, r3]
 800606a:	b10a      	cbz	r2, 8006070 <__lshift+0xa4>
 800606c:	f108 0602 	add.w	r6, r8, #2
 8006070:	3e01      	subs	r6, #1
 8006072:	4638      	mov	r0, r7
 8006074:	4621      	mov	r1, r4
 8006076:	612e      	str	r6, [r5, #16]
 8006078:	f7ff fddc 	bl	8005c34 <_Bfree>
 800607c:	4628      	mov	r0, r5
 800607e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006082:	f842 0f04 	str.w	r0, [r2, #4]!
 8006086:	3301      	adds	r3, #1
 8006088:	e7c5      	b.n	8006016 <__lshift+0x4a>
 800608a:	3904      	subs	r1, #4
 800608c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006090:	459c      	cmp	ip, r3
 8006092:	f841 2f04 	str.w	r2, [r1, #4]!
 8006096:	d8f9      	bhi.n	800608c <__lshift+0xc0>
 8006098:	e7ea      	b.n	8006070 <__lshift+0xa4>
 800609a:	bf00      	nop
 800609c:	08006b72 	.word	0x08006b72
 80060a0:	08006b83 	.word	0x08006b83

080060a4 <__mcmp>:
 80060a4:	4603      	mov	r3, r0
 80060a6:	690a      	ldr	r2, [r1, #16]
 80060a8:	6900      	ldr	r0, [r0, #16]
 80060aa:	b530      	push	{r4, r5, lr}
 80060ac:	1a80      	subs	r0, r0, r2
 80060ae:	d10e      	bne.n	80060ce <__mcmp+0x2a>
 80060b0:	3314      	adds	r3, #20
 80060b2:	3114      	adds	r1, #20
 80060b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80060b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80060bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80060c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80060c4:	4295      	cmp	r5, r2
 80060c6:	d003      	beq.n	80060d0 <__mcmp+0x2c>
 80060c8:	d205      	bcs.n	80060d6 <__mcmp+0x32>
 80060ca:	f04f 30ff 	mov.w	r0, #4294967295
 80060ce:	bd30      	pop	{r4, r5, pc}
 80060d0:	42a3      	cmp	r3, r4
 80060d2:	d3f3      	bcc.n	80060bc <__mcmp+0x18>
 80060d4:	e7fb      	b.n	80060ce <__mcmp+0x2a>
 80060d6:	2001      	movs	r0, #1
 80060d8:	e7f9      	b.n	80060ce <__mcmp+0x2a>
	...

080060dc <__mdiff>:
 80060dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060e0:	4689      	mov	r9, r1
 80060e2:	4606      	mov	r6, r0
 80060e4:	4611      	mov	r1, r2
 80060e6:	4648      	mov	r0, r9
 80060e8:	4614      	mov	r4, r2
 80060ea:	f7ff ffdb 	bl	80060a4 <__mcmp>
 80060ee:	1e05      	subs	r5, r0, #0
 80060f0:	d112      	bne.n	8006118 <__mdiff+0x3c>
 80060f2:	4629      	mov	r1, r5
 80060f4:	4630      	mov	r0, r6
 80060f6:	f7ff fd5d 	bl	8005bb4 <_Balloc>
 80060fa:	4602      	mov	r2, r0
 80060fc:	b928      	cbnz	r0, 800610a <__mdiff+0x2e>
 80060fe:	f240 2137 	movw	r1, #567	@ 0x237
 8006102:	4b3e      	ldr	r3, [pc, #248]	@ (80061fc <__mdiff+0x120>)
 8006104:	483e      	ldr	r0, [pc, #248]	@ (8006200 <__mdiff+0x124>)
 8006106:	f000 f98d 	bl	8006424 <__assert_func>
 800610a:	2301      	movs	r3, #1
 800610c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006110:	4610      	mov	r0, r2
 8006112:	b003      	add	sp, #12
 8006114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006118:	bfbc      	itt	lt
 800611a:	464b      	movlt	r3, r9
 800611c:	46a1      	movlt	r9, r4
 800611e:	4630      	mov	r0, r6
 8006120:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006124:	bfba      	itte	lt
 8006126:	461c      	movlt	r4, r3
 8006128:	2501      	movlt	r5, #1
 800612a:	2500      	movge	r5, #0
 800612c:	f7ff fd42 	bl	8005bb4 <_Balloc>
 8006130:	4602      	mov	r2, r0
 8006132:	b918      	cbnz	r0, 800613c <__mdiff+0x60>
 8006134:	f240 2145 	movw	r1, #581	@ 0x245
 8006138:	4b30      	ldr	r3, [pc, #192]	@ (80061fc <__mdiff+0x120>)
 800613a:	e7e3      	b.n	8006104 <__mdiff+0x28>
 800613c:	f100 0b14 	add.w	fp, r0, #20
 8006140:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006144:	f109 0310 	add.w	r3, r9, #16
 8006148:	60c5      	str	r5, [r0, #12]
 800614a:	f04f 0c00 	mov.w	ip, #0
 800614e:	f109 0514 	add.w	r5, r9, #20
 8006152:	46d9      	mov	r9, fp
 8006154:	6926      	ldr	r6, [r4, #16]
 8006156:	f104 0e14 	add.w	lr, r4, #20
 800615a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800615e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006162:	9301      	str	r3, [sp, #4]
 8006164:	9b01      	ldr	r3, [sp, #4]
 8006166:	f85e 0b04 	ldr.w	r0, [lr], #4
 800616a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800616e:	b281      	uxth	r1, r0
 8006170:	9301      	str	r3, [sp, #4]
 8006172:	fa1f f38a 	uxth.w	r3, sl
 8006176:	1a5b      	subs	r3, r3, r1
 8006178:	0c00      	lsrs	r0, r0, #16
 800617a:	4463      	add	r3, ip
 800617c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006180:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006184:	b29b      	uxth	r3, r3
 8006186:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800618a:	4576      	cmp	r6, lr
 800618c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006190:	f849 3b04 	str.w	r3, [r9], #4
 8006194:	d8e6      	bhi.n	8006164 <__mdiff+0x88>
 8006196:	1b33      	subs	r3, r6, r4
 8006198:	3b15      	subs	r3, #21
 800619a:	f023 0303 	bic.w	r3, r3, #3
 800619e:	3415      	adds	r4, #21
 80061a0:	3304      	adds	r3, #4
 80061a2:	42a6      	cmp	r6, r4
 80061a4:	bf38      	it	cc
 80061a6:	2304      	movcc	r3, #4
 80061a8:	441d      	add	r5, r3
 80061aa:	445b      	add	r3, fp
 80061ac:	461e      	mov	r6, r3
 80061ae:	462c      	mov	r4, r5
 80061b0:	4544      	cmp	r4, r8
 80061b2:	d30e      	bcc.n	80061d2 <__mdiff+0xf6>
 80061b4:	f108 0103 	add.w	r1, r8, #3
 80061b8:	1b49      	subs	r1, r1, r5
 80061ba:	f021 0103 	bic.w	r1, r1, #3
 80061be:	3d03      	subs	r5, #3
 80061c0:	45a8      	cmp	r8, r5
 80061c2:	bf38      	it	cc
 80061c4:	2100      	movcc	r1, #0
 80061c6:	440b      	add	r3, r1
 80061c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80061cc:	b199      	cbz	r1, 80061f6 <__mdiff+0x11a>
 80061ce:	6117      	str	r7, [r2, #16]
 80061d0:	e79e      	b.n	8006110 <__mdiff+0x34>
 80061d2:	46e6      	mov	lr, ip
 80061d4:	f854 1b04 	ldr.w	r1, [r4], #4
 80061d8:	fa1f fc81 	uxth.w	ip, r1
 80061dc:	44f4      	add	ip, lr
 80061de:	0c08      	lsrs	r0, r1, #16
 80061e0:	4471      	add	r1, lr
 80061e2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80061e6:	b289      	uxth	r1, r1
 80061e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80061ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80061f0:	f846 1b04 	str.w	r1, [r6], #4
 80061f4:	e7dc      	b.n	80061b0 <__mdiff+0xd4>
 80061f6:	3f01      	subs	r7, #1
 80061f8:	e7e6      	b.n	80061c8 <__mdiff+0xec>
 80061fa:	bf00      	nop
 80061fc:	08006b72 	.word	0x08006b72
 8006200:	08006b83 	.word	0x08006b83

08006204 <__d2b>:
 8006204:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006208:	2101      	movs	r1, #1
 800620a:	4690      	mov	r8, r2
 800620c:	4699      	mov	r9, r3
 800620e:	9e08      	ldr	r6, [sp, #32]
 8006210:	f7ff fcd0 	bl	8005bb4 <_Balloc>
 8006214:	4604      	mov	r4, r0
 8006216:	b930      	cbnz	r0, 8006226 <__d2b+0x22>
 8006218:	4602      	mov	r2, r0
 800621a:	f240 310f 	movw	r1, #783	@ 0x30f
 800621e:	4b23      	ldr	r3, [pc, #140]	@ (80062ac <__d2b+0xa8>)
 8006220:	4823      	ldr	r0, [pc, #140]	@ (80062b0 <__d2b+0xac>)
 8006222:	f000 f8ff 	bl	8006424 <__assert_func>
 8006226:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800622a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800622e:	b10d      	cbz	r5, 8006234 <__d2b+0x30>
 8006230:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006234:	9301      	str	r3, [sp, #4]
 8006236:	f1b8 0300 	subs.w	r3, r8, #0
 800623a:	d024      	beq.n	8006286 <__d2b+0x82>
 800623c:	4668      	mov	r0, sp
 800623e:	9300      	str	r3, [sp, #0]
 8006240:	f7ff fd7f 	bl	8005d42 <__lo0bits>
 8006244:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006248:	b1d8      	cbz	r0, 8006282 <__d2b+0x7e>
 800624a:	f1c0 0320 	rsb	r3, r0, #32
 800624e:	fa02 f303 	lsl.w	r3, r2, r3
 8006252:	430b      	orrs	r3, r1
 8006254:	40c2      	lsrs	r2, r0
 8006256:	6163      	str	r3, [r4, #20]
 8006258:	9201      	str	r2, [sp, #4]
 800625a:	9b01      	ldr	r3, [sp, #4]
 800625c:	2b00      	cmp	r3, #0
 800625e:	bf0c      	ite	eq
 8006260:	2201      	moveq	r2, #1
 8006262:	2202      	movne	r2, #2
 8006264:	61a3      	str	r3, [r4, #24]
 8006266:	6122      	str	r2, [r4, #16]
 8006268:	b1ad      	cbz	r5, 8006296 <__d2b+0x92>
 800626a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800626e:	4405      	add	r5, r0
 8006270:	6035      	str	r5, [r6, #0]
 8006272:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006278:	6018      	str	r0, [r3, #0]
 800627a:	4620      	mov	r0, r4
 800627c:	b002      	add	sp, #8
 800627e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006282:	6161      	str	r1, [r4, #20]
 8006284:	e7e9      	b.n	800625a <__d2b+0x56>
 8006286:	a801      	add	r0, sp, #4
 8006288:	f7ff fd5b 	bl	8005d42 <__lo0bits>
 800628c:	9b01      	ldr	r3, [sp, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	6163      	str	r3, [r4, #20]
 8006292:	3020      	adds	r0, #32
 8006294:	e7e7      	b.n	8006266 <__d2b+0x62>
 8006296:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800629a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800629e:	6030      	str	r0, [r6, #0]
 80062a0:	6918      	ldr	r0, [r3, #16]
 80062a2:	f7ff fd2f 	bl	8005d04 <__hi0bits>
 80062a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80062aa:	e7e4      	b.n	8006276 <__d2b+0x72>
 80062ac:	08006b72 	.word	0x08006b72
 80062b0:	08006b83 	.word	0x08006b83

080062b4 <__sflush_r>:
 80062b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80062b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ba:	0716      	lsls	r6, r2, #28
 80062bc:	4605      	mov	r5, r0
 80062be:	460c      	mov	r4, r1
 80062c0:	d454      	bmi.n	800636c <__sflush_r+0xb8>
 80062c2:	684b      	ldr	r3, [r1, #4]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	dc02      	bgt.n	80062ce <__sflush_r+0x1a>
 80062c8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	dd48      	ble.n	8006360 <__sflush_r+0xac>
 80062ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80062d0:	2e00      	cmp	r6, #0
 80062d2:	d045      	beq.n	8006360 <__sflush_r+0xac>
 80062d4:	2300      	movs	r3, #0
 80062d6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80062da:	682f      	ldr	r7, [r5, #0]
 80062dc:	6a21      	ldr	r1, [r4, #32]
 80062de:	602b      	str	r3, [r5, #0]
 80062e0:	d030      	beq.n	8006344 <__sflush_r+0x90>
 80062e2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80062e4:	89a3      	ldrh	r3, [r4, #12]
 80062e6:	0759      	lsls	r1, r3, #29
 80062e8:	d505      	bpl.n	80062f6 <__sflush_r+0x42>
 80062ea:	6863      	ldr	r3, [r4, #4]
 80062ec:	1ad2      	subs	r2, r2, r3
 80062ee:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80062f0:	b10b      	cbz	r3, 80062f6 <__sflush_r+0x42>
 80062f2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80062f4:	1ad2      	subs	r2, r2, r3
 80062f6:	2300      	movs	r3, #0
 80062f8:	4628      	mov	r0, r5
 80062fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80062fc:	6a21      	ldr	r1, [r4, #32]
 80062fe:	47b0      	blx	r6
 8006300:	1c43      	adds	r3, r0, #1
 8006302:	89a3      	ldrh	r3, [r4, #12]
 8006304:	d106      	bne.n	8006314 <__sflush_r+0x60>
 8006306:	6829      	ldr	r1, [r5, #0]
 8006308:	291d      	cmp	r1, #29
 800630a:	d82b      	bhi.n	8006364 <__sflush_r+0xb0>
 800630c:	4a28      	ldr	r2, [pc, #160]	@ (80063b0 <__sflush_r+0xfc>)
 800630e:	410a      	asrs	r2, r1
 8006310:	07d6      	lsls	r6, r2, #31
 8006312:	d427      	bmi.n	8006364 <__sflush_r+0xb0>
 8006314:	2200      	movs	r2, #0
 8006316:	6062      	str	r2, [r4, #4]
 8006318:	6922      	ldr	r2, [r4, #16]
 800631a:	04d9      	lsls	r1, r3, #19
 800631c:	6022      	str	r2, [r4, #0]
 800631e:	d504      	bpl.n	800632a <__sflush_r+0x76>
 8006320:	1c42      	adds	r2, r0, #1
 8006322:	d101      	bne.n	8006328 <__sflush_r+0x74>
 8006324:	682b      	ldr	r3, [r5, #0]
 8006326:	b903      	cbnz	r3, 800632a <__sflush_r+0x76>
 8006328:	6560      	str	r0, [r4, #84]	@ 0x54
 800632a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800632c:	602f      	str	r7, [r5, #0]
 800632e:	b1b9      	cbz	r1, 8006360 <__sflush_r+0xac>
 8006330:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006334:	4299      	cmp	r1, r3
 8006336:	d002      	beq.n	800633e <__sflush_r+0x8a>
 8006338:	4628      	mov	r0, r5
 800633a:	f7ff fb3d 	bl	80059b8 <_free_r>
 800633e:	2300      	movs	r3, #0
 8006340:	6363      	str	r3, [r4, #52]	@ 0x34
 8006342:	e00d      	b.n	8006360 <__sflush_r+0xac>
 8006344:	2301      	movs	r3, #1
 8006346:	4628      	mov	r0, r5
 8006348:	47b0      	blx	r6
 800634a:	4602      	mov	r2, r0
 800634c:	1c50      	adds	r0, r2, #1
 800634e:	d1c9      	bne.n	80062e4 <__sflush_r+0x30>
 8006350:	682b      	ldr	r3, [r5, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d0c6      	beq.n	80062e4 <__sflush_r+0x30>
 8006356:	2b1d      	cmp	r3, #29
 8006358:	d001      	beq.n	800635e <__sflush_r+0xaa>
 800635a:	2b16      	cmp	r3, #22
 800635c:	d11d      	bne.n	800639a <__sflush_r+0xe6>
 800635e:	602f      	str	r7, [r5, #0]
 8006360:	2000      	movs	r0, #0
 8006362:	e021      	b.n	80063a8 <__sflush_r+0xf4>
 8006364:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006368:	b21b      	sxth	r3, r3
 800636a:	e01a      	b.n	80063a2 <__sflush_r+0xee>
 800636c:	690f      	ldr	r7, [r1, #16]
 800636e:	2f00      	cmp	r7, #0
 8006370:	d0f6      	beq.n	8006360 <__sflush_r+0xac>
 8006372:	0793      	lsls	r3, r2, #30
 8006374:	bf18      	it	ne
 8006376:	2300      	movne	r3, #0
 8006378:	680e      	ldr	r6, [r1, #0]
 800637a:	bf08      	it	eq
 800637c:	694b      	ldreq	r3, [r1, #20]
 800637e:	1bf6      	subs	r6, r6, r7
 8006380:	600f      	str	r7, [r1, #0]
 8006382:	608b      	str	r3, [r1, #8]
 8006384:	2e00      	cmp	r6, #0
 8006386:	ddeb      	ble.n	8006360 <__sflush_r+0xac>
 8006388:	4633      	mov	r3, r6
 800638a:	463a      	mov	r2, r7
 800638c:	4628      	mov	r0, r5
 800638e:	6a21      	ldr	r1, [r4, #32]
 8006390:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006394:	47e0      	blx	ip
 8006396:	2800      	cmp	r0, #0
 8006398:	dc07      	bgt.n	80063aa <__sflush_r+0xf6>
 800639a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800639e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063a2:	f04f 30ff 	mov.w	r0, #4294967295
 80063a6:	81a3      	strh	r3, [r4, #12]
 80063a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063aa:	4407      	add	r7, r0
 80063ac:	1a36      	subs	r6, r6, r0
 80063ae:	e7e9      	b.n	8006384 <__sflush_r+0xd0>
 80063b0:	dfbffffe 	.word	0xdfbffffe

080063b4 <_fflush_r>:
 80063b4:	b538      	push	{r3, r4, r5, lr}
 80063b6:	690b      	ldr	r3, [r1, #16]
 80063b8:	4605      	mov	r5, r0
 80063ba:	460c      	mov	r4, r1
 80063bc:	b913      	cbnz	r3, 80063c4 <_fflush_r+0x10>
 80063be:	2500      	movs	r5, #0
 80063c0:	4628      	mov	r0, r5
 80063c2:	bd38      	pop	{r3, r4, r5, pc}
 80063c4:	b118      	cbz	r0, 80063ce <_fflush_r+0x1a>
 80063c6:	6a03      	ldr	r3, [r0, #32]
 80063c8:	b90b      	cbnz	r3, 80063ce <_fflush_r+0x1a>
 80063ca:	f7fe fb8d 	bl	8004ae8 <__sinit>
 80063ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d0f3      	beq.n	80063be <_fflush_r+0xa>
 80063d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80063d8:	07d0      	lsls	r0, r2, #31
 80063da:	d404      	bmi.n	80063e6 <_fflush_r+0x32>
 80063dc:	0599      	lsls	r1, r3, #22
 80063de:	d402      	bmi.n	80063e6 <_fflush_r+0x32>
 80063e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063e2:	f7fe fc78 	bl	8004cd6 <__retarget_lock_acquire_recursive>
 80063e6:	4628      	mov	r0, r5
 80063e8:	4621      	mov	r1, r4
 80063ea:	f7ff ff63 	bl	80062b4 <__sflush_r>
 80063ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80063f0:	4605      	mov	r5, r0
 80063f2:	07da      	lsls	r2, r3, #31
 80063f4:	d4e4      	bmi.n	80063c0 <_fflush_r+0xc>
 80063f6:	89a3      	ldrh	r3, [r4, #12]
 80063f8:	059b      	lsls	r3, r3, #22
 80063fa:	d4e1      	bmi.n	80063c0 <_fflush_r+0xc>
 80063fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063fe:	f7fe fc6b 	bl	8004cd8 <__retarget_lock_release_recursive>
 8006402:	e7dd      	b.n	80063c0 <_fflush_r+0xc>

08006404 <_sbrk_r>:
 8006404:	b538      	push	{r3, r4, r5, lr}
 8006406:	2300      	movs	r3, #0
 8006408:	4d05      	ldr	r5, [pc, #20]	@ (8006420 <_sbrk_r+0x1c>)
 800640a:	4604      	mov	r4, r0
 800640c:	4608      	mov	r0, r1
 800640e:	602b      	str	r3, [r5, #0]
 8006410:	f7fb fbc2 	bl	8001b98 <_sbrk>
 8006414:	1c43      	adds	r3, r0, #1
 8006416:	d102      	bne.n	800641e <_sbrk_r+0x1a>
 8006418:	682b      	ldr	r3, [r5, #0]
 800641a:	b103      	cbz	r3, 800641e <_sbrk_r+0x1a>
 800641c:	6023      	str	r3, [r4, #0]
 800641e:	bd38      	pop	{r3, r4, r5, pc}
 8006420:	20000588 	.word	0x20000588

08006424 <__assert_func>:
 8006424:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006426:	4614      	mov	r4, r2
 8006428:	461a      	mov	r2, r3
 800642a:	4b09      	ldr	r3, [pc, #36]	@ (8006450 <__assert_func+0x2c>)
 800642c:	4605      	mov	r5, r0
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68d8      	ldr	r0, [r3, #12]
 8006432:	b954      	cbnz	r4, 800644a <__assert_func+0x26>
 8006434:	4b07      	ldr	r3, [pc, #28]	@ (8006454 <__assert_func+0x30>)
 8006436:	461c      	mov	r4, r3
 8006438:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800643c:	9100      	str	r1, [sp, #0]
 800643e:	462b      	mov	r3, r5
 8006440:	4905      	ldr	r1, [pc, #20]	@ (8006458 <__assert_func+0x34>)
 8006442:	f000 f841 	bl	80064c8 <fiprintf>
 8006446:	f000 f851 	bl	80064ec <abort>
 800644a:	4b04      	ldr	r3, [pc, #16]	@ (800645c <__assert_func+0x38>)
 800644c:	e7f4      	b.n	8006438 <__assert_func+0x14>
 800644e:	bf00      	nop
 8006450:	20000018 	.word	0x20000018
 8006454:	08006d1d 	.word	0x08006d1d
 8006458:	08006cef 	.word	0x08006cef
 800645c:	08006ce2 	.word	0x08006ce2

08006460 <_calloc_r>:
 8006460:	b570      	push	{r4, r5, r6, lr}
 8006462:	fba1 5402 	umull	r5, r4, r1, r2
 8006466:	b93c      	cbnz	r4, 8006478 <_calloc_r+0x18>
 8006468:	4629      	mov	r1, r5
 800646a:	f7ff fb17 	bl	8005a9c <_malloc_r>
 800646e:	4606      	mov	r6, r0
 8006470:	b928      	cbnz	r0, 800647e <_calloc_r+0x1e>
 8006472:	2600      	movs	r6, #0
 8006474:	4630      	mov	r0, r6
 8006476:	bd70      	pop	{r4, r5, r6, pc}
 8006478:	220c      	movs	r2, #12
 800647a:	6002      	str	r2, [r0, #0]
 800647c:	e7f9      	b.n	8006472 <_calloc_r+0x12>
 800647e:	462a      	mov	r2, r5
 8006480:	4621      	mov	r1, r4
 8006482:	f7fe fbaa 	bl	8004bda <memset>
 8006486:	e7f5      	b.n	8006474 <_calloc_r+0x14>

08006488 <__ascii_mbtowc>:
 8006488:	b082      	sub	sp, #8
 800648a:	b901      	cbnz	r1, 800648e <__ascii_mbtowc+0x6>
 800648c:	a901      	add	r1, sp, #4
 800648e:	b142      	cbz	r2, 80064a2 <__ascii_mbtowc+0x1a>
 8006490:	b14b      	cbz	r3, 80064a6 <__ascii_mbtowc+0x1e>
 8006492:	7813      	ldrb	r3, [r2, #0]
 8006494:	600b      	str	r3, [r1, #0]
 8006496:	7812      	ldrb	r2, [r2, #0]
 8006498:	1e10      	subs	r0, r2, #0
 800649a:	bf18      	it	ne
 800649c:	2001      	movne	r0, #1
 800649e:	b002      	add	sp, #8
 80064a0:	4770      	bx	lr
 80064a2:	4610      	mov	r0, r2
 80064a4:	e7fb      	b.n	800649e <__ascii_mbtowc+0x16>
 80064a6:	f06f 0001 	mvn.w	r0, #1
 80064aa:	e7f8      	b.n	800649e <__ascii_mbtowc+0x16>

080064ac <__ascii_wctomb>:
 80064ac:	4603      	mov	r3, r0
 80064ae:	4608      	mov	r0, r1
 80064b0:	b141      	cbz	r1, 80064c4 <__ascii_wctomb+0x18>
 80064b2:	2aff      	cmp	r2, #255	@ 0xff
 80064b4:	d904      	bls.n	80064c0 <__ascii_wctomb+0x14>
 80064b6:	228a      	movs	r2, #138	@ 0x8a
 80064b8:	f04f 30ff 	mov.w	r0, #4294967295
 80064bc:	601a      	str	r2, [r3, #0]
 80064be:	4770      	bx	lr
 80064c0:	2001      	movs	r0, #1
 80064c2:	700a      	strb	r2, [r1, #0]
 80064c4:	4770      	bx	lr
	...

080064c8 <fiprintf>:
 80064c8:	b40e      	push	{r1, r2, r3}
 80064ca:	b503      	push	{r0, r1, lr}
 80064cc:	4601      	mov	r1, r0
 80064ce:	ab03      	add	r3, sp, #12
 80064d0:	4805      	ldr	r0, [pc, #20]	@ (80064e8 <fiprintf+0x20>)
 80064d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80064d6:	6800      	ldr	r0, [r0, #0]
 80064d8:	9301      	str	r3, [sp, #4]
 80064da:	f000 f835 	bl	8006548 <_vfiprintf_r>
 80064de:	b002      	add	sp, #8
 80064e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80064e4:	b003      	add	sp, #12
 80064e6:	4770      	bx	lr
 80064e8:	20000018 	.word	0x20000018

080064ec <abort>:
 80064ec:	2006      	movs	r0, #6
 80064ee:	b508      	push	{r3, lr}
 80064f0:	f000 f9fe 	bl	80068f0 <raise>
 80064f4:	2001      	movs	r0, #1
 80064f6:	f7fb fada 	bl	8001aae <_exit>

080064fa <__sfputc_r>:
 80064fa:	6893      	ldr	r3, [r2, #8]
 80064fc:	b410      	push	{r4}
 80064fe:	3b01      	subs	r3, #1
 8006500:	2b00      	cmp	r3, #0
 8006502:	6093      	str	r3, [r2, #8]
 8006504:	da07      	bge.n	8006516 <__sfputc_r+0x1c>
 8006506:	6994      	ldr	r4, [r2, #24]
 8006508:	42a3      	cmp	r3, r4
 800650a:	db01      	blt.n	8006510 <__sfputc_r+0x16>
 800650c:	290a      	cmp	r1, #10
 800650e:	d102      	bne.n	8006516 <__sfputc_r+0x1c>
 8006510:	bc10      	pop	{r4}
 8006512:	f000 b931 	b.w	8006778 <__swbuf_r>
 8006516:	6813      	ldr	r3, [r2, #0]
 8006518:	1c58      	adds	r0, r3, #1
 800651a:	6010      	str	r0, [r2, #0]
 800651c:	7019      	strb	r1, [r3, #0]
 800651e:	4608      	mov	r0, r1
 8006520:	bc10      	pop	{r4}
 8006522:	4770      	bx	lr

08006524 <__sfputs_r>:
 8006524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006526:	4606      	mov	r6, r0
 8006528:	460f      	mov	r7, r1
 800652a:	4614      	mov	r4, r2
 800652c:	18d5      	adds	r5, r2, r3
 800652e:	42ac      	cmp	r4, r5
 8006530:	d101      	bne.n	8006536 <__sfputs_r+0x12>
 8006532:	2000      	movs	r0, #0
 8006534:	e007      	b.n	8006546 <__sfputs_r+0x22>
 8006536:	463a      	mov	r2, r7
 8006538:	4630      	mov	r0, r6
 800653a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800653e:	f7ff ffdc 	bl	80064fa <__sfputc_r>
 8006542:	1c43      	adds	r3, r0, #1
 8006544:	d1f3      	bne.n	800652e <__sfputs_r+0xa>
 8006546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006548 <_vfiprintf_r>:
 8006548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800654c:	460d      	mov	r5, r1
 800654e:	4614      	mov	r4, r2
 8006550:	4698      	mov	r8, r3
 8006552:	4606      	mov	r6, r0
 8006554:	b09d      	sub	sp, #116	@ 0x74
 8006556:	b118      	cbz	r0, 8006560 <_vfiprintf_r+0x18>
 8006558:	6a03      	ldr	r3, [r0, #32]
 800655a:	b90b      	cbnz	r3, 8006560 <_vfiprintf_r+0x18>
 800655c:	f7fe fac4 	bl	8004ae8 <__sinit>
 8006560:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006562:	07d9      	lsls	r1, r3, #31
 8006564:	d405      	bmi.n	8006572 <_vfiprintf_r+0x2a>
 8006566:	89ab      	ldrh	r3, [r5, #12]
 8006568:	059a      	lsls	r2, r3, #22
 800656a:	d402      	bmi.n	8006572 <_vfiprintf_r+0x2a>
 800656c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800656e:	f7fe fbb2 	bl	8004cd6 <__retarget_lock_acquire_recursive>
 8006572:	89ab      	ldrh	r3, [r5, #12]
 8006574:	071b      	lsls	r3, r3, #28
 8006576:	d501      	bpl.n	800657c <_vfiprintf_r+0x34>
 8006578:	692b      	ldr	r3, [r5, #16]
 800657a:	b99b      	cbnz	r3, 80065a4 <_vfiprintf_r+0x5c>
 800657c:	4629      	mov	r1, r5
 800657e:	4630      	mov	r0, r6
 8006580:	f000 f938 	bl	80067f4 <__swsetup_r>
 8006584:	b170      	cbz	r0, 80065a4 <_vfiprintf_r+0x5c>
 8006586:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006588:	07dc      	lsls	r4, r3, #31
 800658a:	d504      	bpl.n	8006596 <_vfiprintf_r+0x4e>
 800658c:	f04f 30ff 	mov.w	r0, #4294967295
 8006590:	b01d      	add	sp, #116	@ 0x74
 8006592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006596:	89ab      	ldrh	r3, [r5, #12]
 8006598:	0598      	lsls	r0, r3, #22
 800659a:	d4f7      	bmi.n	800658c <_vfiprintf_r+0x44>
 800659c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800659e:	f7fe fb9b 	bl	8004cd8 <__retarget_lock_release_recursive>
 80065a2:	e7f3      	b.n	800658c <_vfiprintf_r+0x44>
 80065a4:	2300      	movs	r3, #0
 80065a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80065a8:	2320      	movs	r3, #32
 80065aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80065ae:	2330      	movs	r3, #48	@ 0x30
 80065b0:	f04f 0901 	mov.w	r9, #1
 80065b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80065b8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006764 <_vfiprintf_r+0x21c>
 80065bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80065c0:	4623      	mov	r3, r4
 80065c2:	469a      	mov	sl, r3
 80065c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065c8:	b10a      	cbz	r2, 80065ce <_vfiprintf_r+0x86>
 80065ca:	2a25      	cmp	r2, #37	@ 0x25
 80065cc:	d1f9      	bne.n	80065c2 <_vfiprintf_r+0x7a>
 80065ce:	ebba 0b04 	subs.w	fp, sl, r4
 80065d2:	d00b      	beq.n	80065ec <_vfiprintf_r+0xa4>
 80065d4:	465b      	mov	r3, fp
 80065d6:	4622      	mov	r2, r4
 80065d8:	4629      	mov	r1, r5
 80065da:	4630      	mov	r0, r6
 80065dc:	f7ff ffa2 	bl	8006524 <__sfputs_r>
 80065e0:	3001      	adds	r0, #1
 80065e2:	f000 80a7 	beq.w	8006734 <_vfiprintf_r+0x1ec>
 80065e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80065e8:	445a      	add	r2, fp
 80065ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80065ec:	f89a 3000 	ldrb.w	r3, [sl]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f000 809f 	beq.w	8006734 <_vfiprintf_r+0x1ec>
 80065f6:	2300      	movs	r3, #0
 80065f8:	f04f 32ff 	mov.w	r2, #4294967295
 80065fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006600:	f10a 0a01 	add.w	sl, sl, #1
 8006604:	9304      	str	r3, [sp, #16]
 8006606:	9307      	str	r3, [sp, #28]
 8006608:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800660c:	931a      	str	r3, [sp, #104]	@ 0x68
 800660e:	4654      	mov	r4, sl
 8006610:	2205      	movs	r2, #5
 8006612:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006616:	4853      	ldr	r0, [pc, #332]	@ (8006764 <_vfiprintf_r+0x21c>)
 8006618:	f7fe fb5f 	bl	8004cda <memchr>
 800661c:	9a04      	ldr	r2, [sp, #16]
 800661e:	b9d8      	cbnz	r0, 8006658 <_vfiprintf_r+0x110>
 8006620:	06d1      	lsls	r1, r2, #27
 8006622:	bf44      	itt	mi
 8006624:	2320      	movmi	r3, #32
 8006626:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800662a:	0713      	lsls	r3, r2, #28
 800662c:	bf44      	itt	mi
 800662e:	232b      	movmi	r3, #43	@ 0x2b
 8006630:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006634:	f89a 3000 	ldrb.w	r3, [sl]
 8006638:	2b2a      	cmp	r3, #42	@ 0x2a
 800663a:	d015      	beq.n	8006668 <_vfiprintf_r+0x120>
 800663c:	4654      	mov	r4, sl
 800663e:	2000      	movs	r0, #0
 8006640:	f04f 0c0a 	mov.w	ip, #10
 8006644:	9a07      	ldr	r2, [sp, #28]
 8006646:	4621      	mov	r1, r4
 8006648:	f811 3b01 	ldrb.w	r3, [r1], #1
 800664c:	3b30      	subs	r3, #48	@ 0x30
 800664e:	2b09      	cmp	r3, #9
 8006650:	d94b      	bls.n	80066ea <_vfiprintf_r+0x1a2>
 8006652:	b1b0      	cbz	r0, 8006682 <_vfiprintf_r+0x13a>
 8006654:	9207      	str	r2, [sp, #28]
 8006656:	e014      	b.n	8006682 <_vfiprintf_r+0x13a>
 8006658:	eba0 0308 	sub.w	r3, r0, r8
 800665c:	fa09 f303 	lsl.w	r3, r9, r3
 8006660:	4313      	orrs	r3, r2
 8006662:	46a2      	mov	sl, r4
 8006664:	9304      	str	r3, [sp, #16]
 8006666:	e7d2      	b.n	800660e <_vfiprintf_r+0xc6>
 8006668:	9b03      	ldr	r3, [sp, #12]
 800666a:	1d19      	adds	r1, r3, #4
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	9103      	str	r1, [sp, #12]
 8006670:	2b00      	cmp	r3, #0
 8006672:	bfbb      	ittet	lt
 8006674:	425b      	neglt	r3, r3
 8006676:	f042 0202 	orrlt.w	r2, r2, #2
 800667a:	9307      	strge	r3, [sp, #28]
 800667c:	9307      	strlt	r3, [sp, #28]
 800667e:	bfb8      	it	lt
 8006680:	9204      	strlt	r2, [sp, #16]
 8006682:	7823      	ldrb	r3, [r4, #0]
 8006684:	2b2e      	cmp	r3, #46	@ 0x2e
 8006686:	d10a      	bne.n	800669e <_vfiprintf_r+0x156>
 8006688:	7863      	ldrb	r3, [r4, #1]
 800668a:	2b2a      	cmp	r3, #42	@ 0x2a
 800668c:	d132      	bne.n	80066f4 <_vfiprintf_r+0x1ac>
 800668e:	9b03      	ldr	r3, [sp, #12]
 8006690:	3402      	adds	r4, #2
 8006692:	1d1a      	adds	r2, r3, #4
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	9203      	str	r2, [sp, #12]
 8006698:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800669c:	9305      	str	r3, [sp, #20]
 800669e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006768 <_vfiprintf_r+0x220>
 80066a2:	2203      	movs	r2, #3
 80066a4:	4650      	mov	r0, sl
 80066a6:	7821      	ldrb	r1, [r4, #0]
 80066a8:	f7fe fb17 	bl	8004cda <memchr>
 80066ac:	b138      	cbz	r0, 80066be <_vfiprintf_r+0x176>
 80066ae:	2240      	movs	r2, #64	@ 0x40
 80066b0:	9b04      	ldr	r3, [sp, #16]
 80066b2:	eba0 000a 	sub.w	r0, r0, sl
 80066b6:	4082      	lsls	r2, r0
 80066b8:	4313      	orrs	r3, r2
 80066ba:	3401      	adds	r4, #1
 80066bc:	9304      	str	r3, [sp, #16]
 80066be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066c2:	2206      	movs	r2, #6
 80066c4:	4829      	ldr	r0, [pc, #164]	@ (800676c <_vfiprintf_r+0x224>)
 80066c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80066ca:	f7fe fb06 	bl	8004cda <memchr>
 80066ce:	2800      	cmp	r0, #0
 80066d0:	d03f      	beq.n	8006752 <_vfiprintf_r+0x20a>
 80066d2:	4b27      	ldr	r3, [pc, #156]	@ (8006770 <_vfiprintf_r+0x228>)
 80066d4:	bb1b      	cbnz	r3, 800671e <_vfiprintf_r+0x1d6>
 80066d6:	9b03      	ldr	r3, [sp, #12]
 80066d8:	3307      	adds	r3, #7
 80066da:	f023 0307 	bic.w	r3, r3, #7
 80066de:	3308      	adds	r3, #8
 80066e0:	9303      	str	r3, [sp, #12]
 80066e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066e4:	443b      	add	r3, r7
 80066e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80066e8:	e76a      	b.n	80065c0 <_vfiprintf_r+0x78>
 80066ea:	460c      	mov	r4, r1
 80066ec:	2001      	movs	r0, #1
 80066ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80066f2:	e7a8      	b.n	8006646 <_vfiprintf_r+0xfe>
 80066f4:	2300      	movs	r3, #0
 80066f6:	f04f 0c0a 	mov.w	ip, #10
 80066fa:	4619      	mov	r1, r3
 80066fc:	3401      	adds	r4, #1
 80066fe:	9305      	str	r3, [sp, #20]
 8006700:	4620      	mov	r0, r4
 8006702:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006706:	3a30      	subs	r2, #48	@ 0x30
 8006708:	2a09      	cmp	r2, #9
 800670a:	d903      	bls.n	8006714 <_vfiprintf_r+0x1cc>
 800670c:	2b00      	cmp	r3, #0
 800670e:	d0c6      	beq.n	800669e <_vfiprintf_r+0x156>
 8006710:	9105      	str	r1, [sp, #20]
 8006712:	e7c4      	b.n	800669e <_vfiprintf_r+0x156>
 8006714:	4604      	mov	r4, r0
 8006716:	2301      	movs	r3, #1
 8006718:	fb0c 2101 	mla	r1, ip, r1, r2
 800671c:	e7f0      	b.n	8006700 <_vfiprintf_r+0x1b8>
 800671e:	ab03      	add	r3, sp, #12
 8006720:	9300      	str	r3, [sp, #0]
 8006722:	462a      	mov	r2, r5
 8006724:	4630      	mov	r0, r6
 8006726:	4b13      	ldr	r3, [pc, #76]	@ (8006774 <_vfiprintf_r+0x22c>)
 8006728:	a904      	add	r1, sp, #16
 800672a:	f7fd fd93 	bl	8004254 <_printf_float>
 800672e:	4607      	mov	r7, r0
 8006730:	1c78      	adds	r0, r7, #1
 8006732:	d1d6      	bne.n	80066e2 <_vfiprintf_r+0x19a>
 8006734:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006736:	07d9      	lsls	r1, r3, #31
 8006738:	d405      	bmi.n	8006746 <_vfiprintf_r+0x1fe>
 800673a:	89ab      	ldrh	r3, [r5, #12]
 800673c:	059a      	lsls	r2, r3, #22
 800673e:	d402      	bmi.n	8006746 <_vfiprintf_r+0x1fe>
 8006740:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006742:	f7fe fac9 	bl	8004cd8 <__retarget_lock_release_recursive>
 8006746:	89ab      	ldrh	r3, [r5, #12]
 8006748:	065b      	lsls	r3, r3, #25
 800674a:	f53f af1f 	bmi.w	800658c <_vfiprintf_r+0x44>
 800674e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006750:	e71e      	b.n	8006590 <_vfiprintf_r+0x48>
 8006752:	ab03      	add	r3, sp, #12
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	462a      	mov	r2, r5
 8006758:	4630      	mov	r0, r6
 800675a:	4b06      	ldr	r3, [pc, #24]	@ (8006774 <_vfiprintf_r+0x22c>)
 800675c:	a904      	add	r1, sp, #16
 800675e:	f7fe f817 	bl	8004790 <_printf_i>
 8006762:	e7e4      	b.n	800672e <_vfiprintf_r+0x1e6>
 8006764:	08006e1f 	.word	0x08006e1f
 8006768:	08006e25 	.word	0x08006e25
 800676c:	08006e29 	.word	0x08006e29
 8006770:	08004255 	.word	0x08004255
 8006774:	08006525 	.word	0x08006525

08006778 <__swbuf_r>:
 8006778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800677a:	460e      	mov	r6, r1
 800677c:	4614      	mov	r4, r2
 800677e:	4605      	mov	r5, r0
 8006780:	b118      	cbz	r0, 800678a <__swbuf_r+0x12>
 8006782:	6a03      	ldr	r3, [r0, #32]
 8006784:	b90b      	cbnz	r3, 800678a <__swbuf_r+0x12>
 8006786:	f7fe f9af 	bl	8004ae8 <__sinit>
 800678a:	69a3      	ldr	r3, [r4, #24]
 800678c:	60a3      	str	r3, [r4, #8]
 800678e:	89a3      	ldrh	r3, [r4, #12]
 8006790:	071a      	lsls	r2, r3, #28
 8006792:	d501      	bpl.n	8006798 <__swbuf_r+0x20>
 8006794:	6923      	ldr	r3, [r4, #16]
 8006796:	b943      	cbnz	r3, 80067aa <__swbuf_r+0x32>
 8006798:	4621      	mov	r1, r4
 800679a:	4628      	mov	r0, r5
 800679c:	f000 f82a 	bl	80067f4 <__swsetup_r>
 80067a0:	b118      	cbz	r0, 80067aa <__swbuf_r+0x32>
 80067a2:	f04f 37ff 	mov.w	r7, #4294967295
 80067a6:	4638      	mov	r0, r7
 80067a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067aa:	6823      	ldr	r3, [r4, #0]
 80067ac:	6922      	ldr	r2, [r4, #16]
 80067ae:	b2f6      	uxtb	r6, r6
 80067b0:	1a98      	subs	r0, r3, r2
 80067b2:	6963      	ldr	r3, [r4, #20]
 80067b4:	4637      	mov	r7, r6
 80067b6:	4283      	cmp	r3, r0
 80067b8:	dc05      	bgt.n	80067c6 <__swbuf_r+0x4e>
 80067ba:	4621      	mov	r1, r4
 80067bc:	4628      	mov	r0, r5
 80067be:	f7ff fdf9 	bl	80063b4 <_fflush_r>
 80067c2:	2800      	cmp	r0, #0
 80067c4:	d1ed      	bne.n	80067a2 <__swbuf_r+0x2a>
 80067c6:	68a3      	ldr	r3, [r4, #8]
 80067c8:	3b01      	subs	r3, #1
 80067ca:	60a3      	str	r3, [r4, #8]
 80067cc:	6823      	ldr	r3, [r4, #0]
 80067ce:	1c5a      	adds	r2, r3, #1
 80067d0:	6022      	str	r2, [r4, #0]
 80067d2:	701e      	strb	r6, [r3, #0]
 80067d4:	6962      	ldr	r2, [r4, #20]
 80067d6:	1c43      	adds	r3, r0, #1
 80067d8:	429a      	cmp	r2, r3
 80067da:	d004      	beq.n	80067e6 <__swbuf_r+0x6e>
 80067dc:	89a3      	ldrh	r3, [r4, #12]
 80067de:	07db      	lsls	r3, r3, #31
 80067e0:	d5e1      	bpl.n	80067a6 <__swbuf_r+0x2e>
 80067e2:	2e0a      	cmp	r6, #10
 80067e4:	d1df      	bne.n	80067a6 <__swbuf_r+0x2e>
 80067e6:	4621      	mov	r1, r4
 80067e8:	4628      	mov	r0, r5
 80067ea:	f7ff fde3 	bl	80063b4 <_fflush_r>
 80067ee:	2800      	cmp	r0, #0
 80067f0:	d0d9      	beq.n	80067a6 <__swbuf_r+0x2e>
 80067f2:	e7d6      	b.n	80067a2 <__swbuf_r+0x2a>

080067f4 <__swsetup_r>:
 80067f4:	b538      	push	{r3, r4, r5, lr}
 80067f6:	4b29      	ldr	r3, [pc, #164]	@ (800689c <__swsetup_r+0xa8>)
 80067f8:	4605      	mov	r5, r0
 80067fa:	6818      	ldr	r0, [r3, #0]
 80067fc:	460c      	mov	r4, r1
 80067fe:	b118      	cbz	r0, 8006808 <__swsetup_r+0x14>
 8006800:	6a03      	ldr	r3, [r0, #32]
 8006802:	b90b      	cbnz	r3, 8006808 <__swsetup_r+0x14>
 8006804:	f7fe f970 	bl	8004ae8 <__sinit>
 8006808:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800680c:	0719      	lsls	r1, r3, #28
 800680e:	d422      	bmi.n	8006856 <__swsetup_r+0x62>
 8006810:	06da      	lsls	r2, r3, #27
 8006812:	d407      	bmi.n	8006824 <__swsetup_r+0x30>
 8006814:	2209      	movs	r2, #9
 8006816:	602a      	str	r2, [r5, #0]
 8006818:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800681c:	f04f 30ff 	mov.w	r0, #4294967295
 8006820:	81a3      	strh	r3, [r4, #12]
 8006822:	e033      	b.n	800688c <__swsetup_r+0x98>
 8006824:	0758      	lsls	r0, r3, #29
 8006826:	d512      	bpl.n	800684e <__swsetup_r+0x5a>
 8006828:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800682a:	b141      	cbz	r1, 800683e <__swsetup_r+0x4a>
 800682c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006830:	4299      	cmp	r1, r3
 8006832:	d002      	beq.n	800683a <__swsetup_r+0x46>
 8006834:	4628      	mov	r0, r5
 8006836:	f7ff f8bf 	bl	80059b8 <_free_r>
 800683a:	2300      	movs	r3, #0
 800683c:	6363      	str	r3, [r4, #52]	@ 0x34
 800683e:	89a3      	ldrh	r3, [r4, #12]
 8006840:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006844:	81a3      	strh	r3, [r4, #12]
 8006846:	2300      	movs	r3, #0
 8006848:	6063      	str	r3, [r4, #4]
 800684a:	6923      	ldr	r3, [r4, #16]
 800684c:	6023      	str	r3, [r4, #0]
 800684e:	89a3      	ldrh	r3, [r4, #12]
 8006850:	f043 0308 	orr.w	r3, r3, #8
 8006854:	81a3      	strh	r3, [r4, #12]
 8006856:	6923      	ldr	r3, [r4, #16]
 8006858:	b94b      	cbnz	r3, 800686e <__swsetup_r+0x7a>
 800685a:	89a3      	ldrh	r3, [r4, #12]
 800685c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006860:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006864:	d003      	beq.n	800686e <__swsetup_r+0x7a>
 8006866:	4621      	mov	r1, r4
 8006868:	4628      	mov	r0, r5
 800686a:	f000 f882 	bl	8006972 <__smakebuf_r>
 800686e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006872:	f013 0201 	ands.w	r2, r3, #1
 8006876:	d00a      	beq.n	800688e <__swsetup_r+0x9a>
 8006878:	2200      	movs	r2, #0
 800687a:	60a2      	str	r2, [r4, #8]
 800687c:	6962      	ldr	r2, [r4, #20]
 800687e:	4252      	negs	r2, r2
 8006880:	61a2      	str	r2, [r4, #24]
 8006882:	6922      	ldr	r2, [r4, #16]
 8006884:	b942      	cbnz	r2, 8006898 <__swsetup_r+0xa4>
 8006886:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800688a:	d1c5      	bne.n	8006818 <__swsetup_r+0x24>
 800688c:	bd38      	pop	{r3, r4, r5, pc}
 800688e:	0799      	lsls	r1, r3, #30
 8006890:	bf58      	it	pl
 8006892:	6962      	ldrpl	r2, [r4, #20]
 8006894:	60a2      	str	r2, [r4, #8]
 8006896:	e7f4      	b.n	8006882 <__swsetup_r+0x8e>
 8006898:	2000      	movs	r0, #0
 800689a:	e7f7      	b.n	800688c <__swsetup_r+0x98>
 800689c:	20000018 	.word	0x20000018

080068a0 <_raise_r>:
 80068a0:	291f      	cmp	r1, #31
 80068a2:	b538      	push	{r3, r4, r5, lr}
 80068a4:	4605      	mov	r5, r0
 80068a6:	460c      	mov	r4, r1
 80068a8:	d904      	bls.n	80068b4 <_raise_r+0x14>
 80068aa:	2316      	movs	r3, #22
 80068ac:	6003      	str	r3, [r0, #0]
 80068ae:	f04f 30ff 	mov.w	r0, #4294967295
 80068b2:	bd38      	pop	{r3, r4, r5, pc}
 80068b4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80068b6:	b112      	cbz	r2, 80068be <_raise_r+0x1e>
 80068b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80068bc:	b94b      	cbnz	r3, 80068d2 <_raise_r+0x32>
 80068be:	4628      	mov	r0, r5
 80068c0:	f000 f830 	bl	8006924 <_getpid_r>
 80068c4:	4622      	mov	r2, r4
 80068c6:	4601      	mov	r1, r0
 80068c8:	4628      	mov	r0, r5
 80068ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068ce:	f000 b817 	b.w	8006900 <_kill_r>
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d00a      	beq.n	80068ec <_raise_r+0x4c>
 80068d6:	1c59      	adds	r1, r3, #1
 80068d8:	d103      	bne.n	80068e2 <_raise_r+0x42>
 80068da:	2316      	movs	r3, #22
 80068dc:	6003      	str	r3, [r0, #0]
 80068de:	2001      	movs	r0, #1
 80068e0:	e7e7      	b.n	80068b2 <_raise_r+0x12>
 80068e2:	2100      	movs	r1, #0
 80068e4:	4620      	mov	r0, r4
 80068e6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80068ea:	4798      	blx	r3
 80068ec:	2000      	movs	r0, #0
 80068ee:	e7e0      	b.n	80068b2 <_raise_r+0x12>

080068f0 <raise>:
 80068f0:	4b02      	ldr	r3, [pc, #8]	@ (80068fc <raise+0xc>)
 80068f2:	4601      	mov	r1, r0
 80068f4:	6818      	ldr	r0, [r3, #0]
 80068f6:	f7ff bfd3 	b.w	80068a0 <_raise_r>
 80068fa:	bf00      	nop
 80068fc:	20000018 	.word	0x20000018

08006900 <_kill_r>:
 8006900:	b538      	push	{r3, r4, r5, lr}
 8006902:	2300      	movs	r3, #0
 8006904:	4d06      	ldr	r5, [pc, #24]	@ (8006920 <_kill_r+0x20>)
 8006906:	4604      	mov	r4, r0
 8006908:	4608      	mov	r0, r1
 800690a:	4611      	mov	r1, r2
 800690c:	602b      	str	r3, [r5, #0]
 800690e:	f7fb f8be 	bl	8001a8e <_kill>
 8006912:	1c43      	adds	r3, r0, #1
 8006914:	d102      	bne.n	800691c <_kill_r+0x1c>
 8006916:	682b      	ldr	r3, [r5, #0]
 8006918:	b103      	cbz	r3, 800691c <_kill_r+0x1c>
 800691a:	6023      	str	r3, [r4, #0]
 800691c:	bd38      	pop	{r3, r4, r5, pc}
 800691e:	bf00      	nop
 8006920:	20000588 	.word	0x20000588

08006924 <_getpid_r>:
 8006924:	f7fb b8ac 	b.w	8001a80 <_getpid>

08006928 <__swhatbuf_r>:
 8006928:	b570      	push	{r4, r5, r6, lr}
 800692a:	460c      	mov	r4, r1
 800692c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006930:	4615      	mov	r5, r2
 8006932:	2900      	cmp	r1, #0
 8006934:	461e      	mov	r6, r3
 8006936:	b096      	sub	sp, #88	@ 0x58
 8006938:	da0c      	bge.n	8006954 <__swhatbuf_r+0x2c>
 800693a:	89a3      	ldrh	r3, [r4, #12]
 800693c:	2100      	movs	r1, #0
 800693e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006942:	bf14      	ite	ne
 8006944:	2340      	movne	r3, #64	@ 0x40
 8006946:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800694a:	2000      	movs	r0, #0
 800694c:	6031      	str	r1, [r6, #0]
 800694e:	602b      	str	r3, [r5, #0]
 8006950:	b016      	add	sp, #88	@ 0x58
 8006952:	bd70      	pop	{r4, r5, r6, pc}
 8006954:	466a      	mov	r2, sp
 8006956:	f000 f849 	bl	80069ec <_fstat_r>
 800695a:	2800      	cmp	r0, #0
 800695c:	dbed      	blt.n	800693a <__swhatbuf_r+0x12>
 800695e:	9901      	ldr	r1, [sp, #4]
 8006960:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006964:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006968:	4259      	negs	r1, r3
 800696a:	4159      	adcs	r1, r3
 800696c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006970:	e7eb      	b.n	800694a <__swhatbuf_r+0x22>

08006972 <__smakebuf_r>:
 8006972:	898b      	ldrh	r3, [r1, #12]
 8006974:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006976:	079d      	lsls	r5, r3, #30
 8006978:	4606      	mov	r6, r0
 800697a:	460c      	mov	r4, r1
 800697c:	d507      	bpl.n	800698e <__smakebuf_r+0x1c>
 800697e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006982:	6023      	str	r3, [r4, #0]
 8006984:	6123      	str	r3, [r4, #16]
 8006986:	2301      	movs	r3, #1
 8006988:	6163      	str	r3, [r4, #20]
 800698a:	b003      	add	sp, #12
 800698c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800698e:	466a      	mov	r2, sp
 8006990:	ab01      	add	r3, sp, #4
 8006992:	f7ff ffc9 	bl	8006928 <__swhatbuf_r>
 8006996:	9f00      	ldr	r7, [sp, #0]
 8006998:	4605      	mov	r5, r0
 800699a:	4639      	mov	r1, r7
 800699c:	4630      	mov	r0, r6
 800699e:	f7ff f87d 	bl	8005a9c <_malloc_r>
 80069a2:	b948      	cbnz	r0, 80069b8 <__smakebuf_r+0x46>
 80069a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069a8:	059a      	lsls	r2, r3, #22
 80069aa:	d4ee      	bmi.n	800698a <__smakebuf_r+0x18>
 80069ac:	f023 0303 	bic.w	r3, r3, #3
 80069b0:	f043 0302 	orr.w	r3, r3, #2
 80069b4:	81a3      	strh	r3, [r4, #12]
 80069b6:	e7e2      	b.n	800697e <__smakebuf_r+0xc>
 80069b8:	89a3      	ldrh	r3, [r4, #12]
 80069ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80069be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069c2:	81a3      	strh	r3, [r4, #12]
 80069c4:	9b01      	ldr	r3, [sp, #4]
 80069c6:	6020      	str	r0, [r4, #0]
 80069c8:	b15b      	cbz	r3, 80069e2 <__smakebuf_r+0x70>
 80069ca:	4630      	mov	r0, r6
 80069cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069d0:	f000 f81e 	bl	8006a10 <_isatty_r>
 80069d4:	b128      	cbz	r0, 80069e2 <__smakebuf_r+0x70>
 80069d6:	89a3      	ldrh	r3, [r4, #12]
 80069d8:	f023 0303 	bic.w	r3, r3, #3
 80069dc:	f043 0301 	orr.w	r3, r3, #1
 80069e0:	81a3      	strh	r3, [r4, #12]
 80069e2:	89a3      	ldrh	r3, [r4, #12]
 80069e4:	431d      	orrs	r5, r3
 80069e6:	81a5      	strh	r5, [r4, #12]
 80069e8:	e7cf      	b.n	800698a <__smakebuf_r+0x18>
	...

080069ec <_fstat_r>:
 80069ec:	b538      	push	{r3, r4, r5, lr}
 80069ee:	2300      	movs	r3, #0
 80069f0:	4d06      	ldr	r5, [pc, #24]	@ (8006a0c <_fstat_r+0x20>)
 80069f2:	4604      	mov	r4, r0
 80069f4:	4608      	mov	r0, r1
 80069f6:	4611      	mov	r1, r2
 80069f8:	602b      	str	r3, [r5, #0]
 80069fa:	f7fb f8a7 	bl	8001b4c <_fstat>
 80069fe:	1c43      	adds	r3, r0, #1
 8006a00:	d102      	bne.n	8006a08 <_fstat_r+0x1c>
 8006a02:	682b      	ldr	r3, [r5, #0]
 8006a04:	b103      	cbz	r3, 8006a08 <_fstat_r+0x1c>
 8006a06:	6023      	str	r3, [r4, #0]
 8006a08:	bd38      	pop	{r3, r4, r5, pc}
 8006a0a:	bf00      	nop
 8006a0c:	20000588 	.word	0x20000588

08006a10 <_isatty_r>:
 8006a10:	b538      	push	{r3, r4, r5, lr}
 8006a12:	2300      	movs	r3, #0
 8006a14:	4d05      	ldr	r5, [pc, #20]	@ (8006a2c <_isatty_r+0x1c>)
 8006a16:	4604      	mov	r4, r0
 8006a18:	4608      	mov	r0, r1
 8006a1a:	602b      	str	r3, [r5, #0]
 8006a1c:	f7fb f8a5 	bl	8001b6a <_isatty>
 8006a20:	1c43      	adds	r3, r0, #1
 8006a22:	d102      	bne.n	8006a2a <_isatty_r+0x1a>
 8006a24:	682b      	ldr	r3, [r5, #0]
 8006a26:	b103      	cbz	r3, 8006a2a <_isatty_r+0x1a>
 8006a28:	6023      	str	r3, [r4, #0]
 8006a2a:	bd38      	pop	{r3, r4, r5, pc}
 8006a2c:	20000588 	.word	0x20000588

08006a30 <_init>:
 8006a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a32:	bf00      	nop
 8006a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a36:	bc08      	pop	{r3}
 8006a38:	469e      	mov	lr, r3
 8006a3a:	4770      	bx	lr

08006a3c <_fini>:
 8006a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a3e:	bf00      	nop
 8006a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a42:	bc08      	pop	{r3}
 8006a44:	469e      	mov	lr, r3
 8006a46:	4770      	bx	lr
