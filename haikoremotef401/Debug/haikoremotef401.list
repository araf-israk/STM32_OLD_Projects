
haikoremotef401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e54  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004fe8  08004fe8  00005fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005010  08005010  00007018  2**0
                  CONTENTS
  4 .ARM          00000008  08005010  08005010  00006010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005018  08005018  00007018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005018  08005018  00006018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800501c  0800501c  0000601c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08005020  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  20000018  08005038  00007018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  08005038  000071b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc4d  00000000  00000000  00007048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000220c  00000000  00000000  00014c95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  00016ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000af5  00000000  00000000  00017cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016eae  00000000  00000000  000187c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001014c  00000000  00000000  0002f673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095489  00000000  00000000  0003f7bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d4c48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b7c  00000000  00000000  000d4c8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000d8808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000018 	.word	0x20000018
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004fd0 	.word	0x08004fd0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000001c 	.word	0x2000001c
 80001d0:	08004fd0 	.word	0x08004fd0

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <CS_Select>:
#define CE_Pin 			GPIO_PIN_3
#define CE_GPIO_Port 	GPIOA
#define CS_Pin 			GPIO_PIN_4
#define CS_GPIO_Port 	GPIOA

void CS_Select(void){
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80004c8:	2200      	movs	r2, #0
 80004ca:	2110      	movs	r1, #16
 80004cc:	4802      	ldr	r0, [pc, #8]	@ (80004d8 <CS_Select+0x14>)
 80004ce:	f002 fcaf 	bl	8002e30 <HAL_GPIO_WritePin>
}
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40020000 	.word	0x40020000

080004dc <CS_UnSelect>:

void CS_UnSelect(void){
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80004e0:	2201      	movs	r2, #1
 80004e2:	2110      	movs	r1, #16
 80004e4:	4802      	ldr	r0, [pc, #8]	@ (80004f0 <CS_UnSelect+0x14>)
 80004e6:	f002 fca3 	bl	8002e30 <HAL_GPIO_WritePin>
}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	40020000 	.word	0x40020000

080004f4 <CE_Enable>:

void CE_Enable(void){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_SET);
 80004f8:	2201      	movs	r2, #1
 80004fa:	2108      	movs	r1, #8
 80004fc:	4802      	ldr	r0, [pc, #8]	@ (8000508 <CE_Enable+0x14>)
 80004fe:	f002 fc97 	bl	8002e30 <HAL_GPIO_WritePin>
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40020000 	.word	0x40020000

0800050c <CE_Disable>:

void CE_Disable(void){
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 8000510:	2200      	movs	r2, #0
 8000512:	2108      	movs	r1, #8
 8000514:	4802      	ldr	r0, [pc, #8]	@ (8000520 <CE_Disable+0x14>)
 8000516:	f002 fc8b 	bl	8002e30 <HAL_GPIO_WritePin>
}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40020000 	.word	0x40020000

08000524 <nrf24_WriteReg>:

void nrf24_WriteReg(uint8_t Reg, uint8_t Data){
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	460a      	mov	r2, r1
 800052e:	71fb      	strb	r3, [r7, #7]
 8000530:	4613      	mov	r3, r2
 8000532:	71bb      	strb	r3, [r7, #6]

	uint8_t buf[2];

	buf[0] = Reg | 1<<5;
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	f043 0320 	orr.w	r3, r3, #32
 800053a:	b2db      	uxtb	r3, r3
 800053c:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 800053e:	79bb      	ldrb	r3, [r7, #6]
 8000540:	737b      	strb	r3, [r7, #13]

	CS_Select();
 8000542:	f7ff ffbf 	bl	80004c4 <CS_Select>

	HAL_SPI_Transmit(&hspi1, buf, 2, 100);
 8000546:	f107 010c 	add.w	r1, r7, #12
 800054a:	2364      	movs	r3, #100	@ 0x64
 800054c:	2202      	movs	r2, #2
 800054e:	4804      	ldr	r0, [pc, #16]	@ (8000560 <nrf24_WriteReg+0x3c>)
 8000550:	f003 f94f 	bl	80037f2 <HAL_SPI_Transmit>

	CS_UnSelect();
 8000554:	f7ff ffc2 	bl	80004dc <CS_UnSelect>

}
 8000558:	bf00      	nop
 800055a:	3710      	adds	r7, #16
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	200000dc 	.word	0x200000dc

08000564 <nrf24_WriteRegMulti>:

void nrf24_WriteRegMulti(uint8_t Reg, uint8_t *data, int size){
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	60b9      	str	r1, [r7, #8]
 800056e:	607a      	str	r2, [r7, #4]
 8000570:	73fb      	strb	r3, [r7, #15]

	uint8_t buf[2];

	buf[0] = Reg | 1<<5;
 8000572:	7bfb      	ldrb	r3, [r7, #15]
 8000574:	f043 0320 	orr.w	r3, r3, #32
 8000578:	b2db      	uxtb	r3, r3
 800057a:	753b      	strb	r3, [r7, #20]


	CS_Select();
 800057c:	f7ff ffa2 	bl	80004c4 <CS_Select>

	HAL_SPI_Transmit(&hspi1, buf, 1, 100);
 8000580:	f107 0114 	add.w	r1, r7, #20
 8000584:	2364      	movs	r3, #100	@ 0x64
 8000586:	2201      	movs	r2, #1
 8000588:	4807      	ldr	r0, [pc, #28]	@ (80005a8 <nrf24_WriteRegMulti+0x44>)
 800058a:	f003 f932 	bl	80037f2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, data, size, 100);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	b29a      	uxth	r2, r3
 8000592:	2364      	movs	r3, #100	@ 0x64
 8000594:	68b9      	ldr	r1, [r7, #8]
 8000596:	4804      	ldr	r0, [pc, #16]	@ (80005a8 <nrf24_WriteRegMulti+0x44>)
 8000598:	f003 f92b 	bl	80037f2 <HAL_SPI_Transmit>

	CS_UnSelect();
 800059c:	f7ff ff9e 	bl	80004dc <CS_UnSelect>

}
 80005a0:	bf00      	nop
 80005a2:	3718      	adds	r7, #24
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	200000dc 	.word	0x200000dc

080005ac <nrf24_ReadReg>:

uint8_t nrf24_ReadReg(uint8_t Reg){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	73fb      	strb	r3, [r7, #15]

	CS_Select();
 80005ba:	f7ff ff83 	bl	80004c4 <CS_Select>

	HAL_SPI_Transmit(&hspi1, &Reg, 1, 100);
 80005be:	1df9      	adds	r1, r7, #7
 80005c0:	2364      	movs	r3, #100	@ 0x64
 80005c2:	2201      	movs	r2, #1
 80005c4:	4808      	ldr	r0, [pc, #32]	@ (80005e8 <nrf24_ReadReg+0x3c>)
 80005c6:	f003 f914 	bl	80037f2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &data, 1, 100);
 80005ca:	f107 010f 	add.w	r1, r7, #15
 80005ce:	2364      	movs	r3, #100	@ 0x64
 80005d0:	2201      	movs	r2, #1
 80005d2:	4805      	ldr	r0, [pc, #20]	@ (80005e8 <nrf24_ReadReg+0x3c>)
 80005d4:	f003 fa51 	bl	8003a7a <HAL_SPI_Receive>

	CS_UnSelect();
 80005d8:	f7ff ff80 	bl	80004dc <CS_UnSelect>

	return data;
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3710      	adds	r7, #16
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	200000dc 	.word	0x200000dc

080005ec <nrfsendCmd>:

	CS_UnSelect();
}


void nrfsendCmd(uint8_t cmd){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
	CS_Select();
 80005f6:	f7ff ff65 	bl	80004c4 <CS_Select>

	HAL_SPI_Transmit(&hspi1, &cmd, 1, 100);
 80005fa:	1df9      	adds	r1, r7, #7
 80005fc:	2364      	movs	r3, #100	@ 0x64
 80005fe:	2201      	movs	r2, #1
 8000600:	4804      	ldr	r0, [pc, #16]	@ (8000614 <nrfsendCmd+0x28>)
 8000602:	f003 f8f6 	bl	80037f2 <HAL_SPI_Transmit>

	CS_UnSelect();
 8000606:	f7ff ff69 	bl	80004dc <CS_UnSelect>

}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	200000dc 	.word	0x200000dc

08000618 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	2b07      	cmp	r3, #7
 8000626:	d104      	bne.n	8000632 <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 8000628:	2100      	movs	r1, #0
 800062a:	2007      	movs	r0, #7
 800062c:	f7ff ff7a 	bl	8000524 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 8000630:	e090      	b.n	8000754 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	2b17      	cmp	r3, #23
 8000636:	d104      	bne.n	8000642 <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000638:	2111      	movs	r1, #17
 800063a:	2017      	movs	r0, #23
 800063c:	f7ff ff72 	bl	8000524 <nrf24_WriteReg>
}
 8000640:	e088      	b.n	8000754 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 8000642:	2108      	movs	r1, #8
 8000644:	2000      	movs	r0, #0
 8000646:	f7ff ff6d 	bl	8000524 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 800064a:	213f      	movs	r1, #63	@ 0x3f
 800064c:	2001      	movs	r0, #1
 800064e:	f7ff ff69 	bl	8000524 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 8000652:	2103      	movs	r1, #3
 8000654:	2002      	movs	r0, #2
 8000656:	f7ff ff65 	bl	8000524 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 800065a:	2103      	movs	r1, #3
 800065c:	2003      	movs	r0, #3
 800065e:	f7ff ff61 	bl	8000524 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 8000662:	2103      	movs	r1, #3
 8000664:	2004      	movs	r0, #4
 8000666:	f7ff ff5d 	bl	8000524 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 800066a:	2102      	movs	r1, #2
 800066c:	2005      	movs	r0, #5
 800066e:	f7ff ff59 	bl	8000524 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 8000672:	210e      	movs	r1, #14
 8000674:	2006      	movs	r0, #6
 8000676:	f7ff ff55 	bl	8000524 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 800067a:	2100      	movs	r1, #0
 800067c:	2007      	movs	r0, #7
 800067e:	f7ff ff51 	bl	8000524 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 8000682:	2100      	movs	r1, #0
 8000684:	2008      	movs	r0, #8
 8000686:	f7ff ff4d 	bl	8000524 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 800068a:	2100      	movs	r1, #0
 800068c:	2009      	movs	r0, #9
 800068e:	f7ff ff49 	bl	8000524 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000692:	4a32      	ldr	r2, [pc, #200]	@ (800075c <nrf24_reset+0x144>)
 8000694:	f107 0318 	add.w	r3, r7, #24
 8000698:	e892 0003 	ldmia.w	r2, {r0, r1}
 800069c:	6018      	str	r0, [r3, #0]
 800069e:	3304      	adds	r3, #4
 80006a0:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 80006a2:	f107 0318 	add.w	r3, r7, #24
 80006a6:	2205      	movs	r2, #5
 80006a8:	4619      	mov	r1, r3
 80006aa:	200a      	movs	r0, #10
 80006ac:	f7ff ff5a 	bl	8000564 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 80006b0:	4a2b      	ldr	r2, [pc, #172]	@ (8000760 <nrf24_reset+0x148>)
 80006b2:	f107 0310 	add.w	r3, r7, #16
 80006b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006ba:	6018      	str	r0, [r3, #0]
 80006bc:	3304      	adds	r3, #4
 80006be:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 80006c0:	f107 0310 	add.w	r3, r7, #16
 80006c4:	2205      	movs	r2, #5
 80006c6:	4619      	mov	r1, r3
 80006c8:	200b      	movs	r0, #11
 80006ca:	f7ff ff4b 	bl	8000564 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 80006ce:	21c3      	movs	r1, #195	@ 0xc3
 80006d0:	200c      	movs	r0, #12
 80006d2:	f7ff ff27 	bl	8000524 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 80006d6:	21c4      	movs	r1, #196	@ 0xc4
 80006d8:	200d      	movs	r0, #13
 80006da:	f7ff ff23 	bl	8000524 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 80006de:	21c5      	movs	r1, #197	@ 0xc5
 80006e0:	200e      	movs	r0, #14
 80006e2:	f7ff ff1f 	bl	8000524 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 80006e6:	21c6      	movs	r1, #198	@ 0xc6
 80006e8:	200f      	movs	r0, #15
 80006ea:	f7ff ff1b 	bl	8000524 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80006ee:	4a1b      	ldr	r2, [pc, #108]	@ (800075c <nrf24_reset+0x144>)
 80006f0:	f107 0308 	add.w	r3, r7, #8
 80006f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006f8:	6018      	str	r0, [r3, #0]
 80006fa:	3304      	adds	r3, #4
 80006fc:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 80006fe:	f107 0308 	add.w	r3, r7, #8
 8000702:	2205      	movs	r2, #5
 8000704:	4619      	mov	r1, r3
 8000706:	2010      	movs	r0, #16
 8000708:	f7ff ff2c 	bl	8000564 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 800070c:	2100      	movs	r1, #0
 800070e:	2011      	movs	r0, #17
 8000710:	f7ff ff08 	bl	8000524 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 8000714:	2100      	movs	r1, #0
 8000716:	2012      	movs	r0, #18
 8000718:	f7ff ff04 	bl	8000524 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 800071c:	2100      	movs	r1, #0
 800071e:	2013      	movs	r0, #19
 8000720:	f7ff ff00 	bl	8000524 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 8000724:	2100      	movs	r1, #0
 8000726:	2014      	movs	r0, #20
 8000728:	f7ff fefc 	bl	8000524 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 800072c:	2100      	movs	r1, #0
 800072e:	2015      	movs	r0, #21
 8000730:	f7ff fef8 	bl	8000524 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 8000734:	2100      	movs	r1, #0
 8000736:	2016      	movs	r0, #22
 8000738:	f7ff fef4 	bl	8000524 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 800073c:	2111      	movs	r1, #17
 800073e:	2017      	movs	r0, #23
 8000740:	f7ff fef0 	bl	8000524 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 8000744:	2100      	movs	r1, #0
 8000746:	201c      	movs	r0, #28
 8000748:	f7ff feec 	bl	8000524 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 800074c:	2100      	movs	r1, #0
 800074e:	201d      	movs	r0, #29
 8000750:	f7ff fee8 	bl	8000524 <nrf24_WriteReg>
}
 8000754:	bf00      	nop
 8000756:	3720      	adds	r7, #32
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	08004fe8 	.word	0x08004fe8
 8000760:	08004ff0 	.word	0x08004ff0

08000764 <NRF24_Init>:

void NRF24_Init(void){
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	CE_Disable();
 8000768:	f7ff fed0 	bl	800050c <CE_Disable>

	nrf24_reset(0);
 800076c:	2000      	movs	r0, #0
 800076e:	f7ff ff53 	bl	8000618 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);
 8000772:	2100      	movs	r1, #0
 8000774:	2000      	movs	r0, #0
 8000776:	f7ff fed5 	bl	8000524 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);
 800077a:	2100      	movs	r1, #0
 800077c:	2001      	movs	r0, #1
 800077e:	f7ff fed1 	bl	8000524 <nrf24_WriteReg>

	nrf24_WriteReg(EN_RXADDR, 0);
 8000782:	2100      	movs	r1, #0
 8000784:	2002      	movs	r0, #2
 8000786:	f7ff fecd 	bl	8000524 <nrf24_WriteReg>

	nrf24_WriteReg(SETUP_AW, 0x03);
 800078a:	2103      	movs	r1, #3
 800078c:	2003      	movs	r0, #3
 800078e:	f7ff fec9 	bl	8000524 <nrf24_WriteReg>

	nrf24_WriteReg(SETUP_RETR, 0);
 8000792:	2100      	movs	r1, #0
 8000794:	2004      	movs	r0, #4
 8000796:	f7ff fec5 	bl	8000524 <nrf24_WriteReg>

	nrf24_WriteReg(RF_CH, 0);
 800079a:	2100      	movs	r1, #0
 800079c:	2005      	movs	r0, #5
 800079e:	f7ff fec1 	bl	8000524 <nrf24_WriteReg>

	nrf24_WriteReg(RF_SETUP, 0x0E);
 80007a2:	210e      	movs	r1, #14
 80007a4:	2006      	movs	r0, #6
 80007a6:	f7ff febd 	bl	8000524 <nrf24_WriteReg>

	CE_Enable();
 80007aa:	f7ff fea3 	bl	80004f4 <CE_Enable>
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <NRF24_TxMode>:


void NRF24_TxMode(uint8_t *Address, uint8_t channel){
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b084      	sub	sp, #16
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
 80007ba:	460b      	mov	r3, r1
 80007bc:	70fb      	strb	r3, [r7, #3]

	CE_Disable();
 80007be:	f7ff fea5 	bl	800050c <CE_Disable>

	nrf24_WriteReg(RF_CH, channel);
 80007c2:	78fb      	ldrb	r3, [r7, #3]
 80007c4:	4619      	mov	r1, r3
 80007c6:	2005      	movs	r0, #5
 80007c8:	f7ff feac 	bl	8000524 <nrf24_WriteReg>

	nrf24_WriteRegMulti(TX_ADDR, Address, 5);
 80007cc:	2205      	movs	r2, #5
 80007ce:	6879      	ldr	r1, [r7, #4]
 80007d0:	2010      	movs	r0, #16
 80007d2:	f7ff fec7 	bl	8000564 <nrf24_WriteRegMulti>

	uint8_t config = nrf24_ReadReg(CONFIG);
 80007d6:	2000      	movs	r0, #0
 80007d8:	f7ff fee8 	bl	80005ac <nrf24_ReadReg>
 80007dc:	4603      	mov	r3, r0
 80007de:	73fb      	strb	r3, [r7, #15]
	config = config | (1<<1);
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
 80007e2:	f043 0302 	orr.w	r3, r3, #2
 80007e6:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg(CONFIG, config);
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	4619      	mov	r1, r3
 80007ec:	2000      	movs	r0, #0
 80007ee:	f7ff fe99 	bl	8000524 <nrf24_WriteReg>

	CE_Enable();
 80007f2:	f7ff fe7f 	bl	80004f4 <CE_Enable>
}
 80007f6:	bf00      	nop
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <NRF24_Transmit>:

uint8_t NRF24_Transmit(uint8_t *data){
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]

	uint8_t cmdtosend = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	73bb      	strb	r3, [r7, #14]

	CS_Select();
 800080c:	f7ff fe5a 	bl	80004c4 <CS_Select>

	cmdtosend = W_TX_PAYLOAD;
 8000810:	23a0      	movs	r3, #160	@ 0xa0
 8000812:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&hspi1, &cmdtosend, 1, 100);
 8000814:	f107 010e 	add.w	r1, r7, #14
 8000818:	2364      	movs	r3, #100	@ 0x64
 800081a:	2201      	movs	r2, #1
 800081c:	4816      	ldr	r0, [pc, #88]	@ (8000878 <NRF24_Transmit+0x78>)
 800081e:	f002 ffe8 	bl	80037f2 <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, data, 32, 100);
 8000822:	2364      	movs	r3, #100	@ 0x64
 8000824:	2220      	movs	r2, #32
 8000826:	6879      	ldr	r1, [r7, #4]
 8000828:	4813      	ldr	r0, [pc, #76]	@ (8000878 <NRF24_Transmit+0x78>)
 800082a:	f002 ffe2 	bl	80037f2 <HAL_SPI_Transmit>

	CS_UnSelect();
 800082e:	f7ff fe55 	bl	80004dc <CS_UnSelect>

	HAL_Delay(1);
 8000832:	2001      	movs	r0, #1
 8000834:	f000 ffa4 	bl	8001780 <HAL_Delay>

	uint8_t fifostatus = nrf24_ReadReg(FIFO_STATUS);
 8000838:	2017      	movs	r0, #23
 800083a:	f7ff feb7 	bl	80005ac <nrf24_ReadReg>
 800083e:	4603      	mov	r3, r0
 8000840:	73fb      	strb	r3, [r7, #15]

	if((fifostatus&(1<<4)) && (!(fifostatus&(1<<3)))){
 8000842:	7bfb      	ldrb	r3, [r7, #15]
 8000844:	f003 0310 	and.w	r3, r3, #16
 8000848:	2b00      	cmp	r3, #0
 800084a:	d00f      	beq.n	800086c <NRF24_Transmit+0x6c>
 800084c:	7bfb      	ldrb	r3, [r7, #15]
 800084e:	f003 0308 	and.w	r3, r3, #8
 8000852:	2b00      	cmp	r3, #0
 8000854:	d10a      	bne.n	800086c <NRF24_Transmit+0x6c>
		cmdtosend = FLUSH_TX;
 8000856:	23e1      	movs	r3, #225	@ 0xe1
 8000858:	73bb      	strb	r3, [r7, #14]
		nrfsendCmd(cmdtosend);
 800085a:	7bbb      	ldrb	r3, [r7, #14]
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff fec5 	bl	80005ec <nrfsendCmd>

		nrf24_reset(FIFO_STATUS);
 8000862:	2017      	movs	r0, #23
 8000864:	f7ff fed8 	bl	8000618 <nrf24_reset>

		return 1;
 8000868:	2301      	movs	r3, #1
 800086a:	e000      	b.n	800086e <NRF24_Transmit+0x6e>
	}

	return 0;
 800086c:	2300      	movs	r3, #0
}
 800086e:	4618      	mov	r0, r3
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200000dc 	.word	0x200000dc

0800087c <center_set>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int16_t center_set(uint16_t val){
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	80fb      	strh	r3, [r7, #6]
	return val - 100;
 8000886:	88fb      	ldrh	r3, [r7, #6]
 8000888:	3b64      	subs	r3, #100	@ 0x64
 800088a:	b29b      	uxth	r3, r3
 800088c:	b21b      	sxth	r3, r3
}
 800088e:	4618      	mov	r0, r3
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <MAP>:

uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax, uint32_t au32_OUTmin, uint32_t au32_OUTmax)
{
 800089a:	b480      	push	{r7}
 800089c:	b085      	sub	sp, #20
 800089e:	af00      	add	r7, sp, #0
 80008a0:	60f8      	str	r0, [r7, #12]
 80008a2:	60b9      	str	r1, [r7, #8]
 80008a4:	607a      	str	r2, [r7, #4]
 80008a6:	603b      	str	r3, [r7, #0]
    return ((((au32_IN - au32_INmin)*(au32_OUTmax - au32_OUTmin))/(au32_INmax - au32_INmin)) + au32_OUTmin);
 80008a8:	68fa      	ldr	r2, [r7, #12]
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	1ad3      	subs	r3, r2, r3
 80008ae:	69b9      	ldr	r1, [r7, #24]
 80008b0:	683a      	ldr	r2, [r7, #0]
 80008b2:	1a8a      	subs	r2, r1, r2
 80008b4:	fb03 f202 	mul.w	r2, r3, r2
 80008b8:	6879      	ldr	r1, [r7, #4]
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	1acb      	subs	r3, r1, r3
 80008be:	fbb2 f2f3 	udiv	r2, r2, r3
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	4413      	add	r3, r2
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
	...

080008d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008da:	f000 fedf 	bl	800169c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008de:	f000 fa91 	bl	8000e04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e2:	f000 fc73 	bl	80011cc <MX_GPIO_Init>
  MX_DMA_Init();
 80008e6:	f000 fc51 	bl	800118c <MX_DMA_Init>
  MX_ADC1_Init();
 80008ea:	f000 faf5 	bl	8000ed8 <MX_ADC1_Init>
  MX_SPI1_Init();
 80008ee:	f000 fb53 	bl	8000f98 <MX_SPI1_Init>
  MX_TIM1_Init();
 80008f2:	f000 fb87 	bl	8001004 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*) adc_val, adc_channel);
 80008f6:	4bab      	ldr	r3, [pc, #684]	@ (8000ba4 <main+0x2d0>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	461a      	mov	r2, r3
 80008fc:	49aa      	ldr	r1, [pc, #680]	@ (8000ba8 <main+0x2d4>)
 80008fe:	48ab      	ldr	r0, [pc, #684]	@ (8000bac <main+0x2d8>)
 8000900:	f001 f8b6 	bl	8001a70 <HAL_ADC_Start_DMA>

  NRF24_Init();
 8000904:	f7ff ff2e 	bl	8000764 <NRF24_Init>

  NRF24_TxMode(TxAddress, 10);
 8000908:	210a      	movs	r1, #10
 800090a:	48a9      	ldr	r0, [pc, #676]	@ (8000bb0 <main+0x2dc>)
 800090c:	f7ff ff51 	bl	80007b2 <NRF24_TxMode>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000910:	2100      	movs	r1, #0
 8000912:	48a8      	ldr	r0, [pc, #672]	@ (8000bb4 <main+0x2e0>)
 8000914:	f003 fd5e 	bl	80043d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000918:	2104      	movs	r1, #4
 800091a:	48a6      	ldr	r0, [pc, #664]	@ (8000bb4 <main+0x2e0>)
 800091c:	f003 fd5a 	bl	80043d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000920:	2108      	movs	r1, #8
 8000922:	48a4      	ldr	r0, [pc, #656]	@ (8000bb4 <main+0x2e0>)
 8000924:	f003 fd56 	bl	80043d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000928:	210c      	movs	r1, #12
 800092a:	48a2      	ldr	r0, [pc, #648]	@ (8000bb4 <main+0x2e0>)
 800092c:	f003 fd52 	bl	80043d4 <HAL_TIM_PWM_Start>

  HAL_GPIO_TogglePin(LED_RX_GPIO_Port, LED_RX_Pin);
 8000930:	2140      	movs	r1, #64	@ 0x40
 8000932:	48a1      	ldr	r0, [pc, #644]	@ (8000bb8 <main+0x2e4>)
 8000934:	f002 fa95 	bl	8002e62 <HAL_GPIO_TogglePin>

  while (1)
  {


	  pinsatate = HAL_GPIO_ReadPin(JOYSTICK_BUTTON_GPIO_Port, JOYSTICK_BUTTON_Pin);
 8000938:	2104      	movs	r1, #4
 800093a:	48a0      	ldr	r0, [pc, #640]	@ (8000bbc <main+0x2e8>)
 800093c:	f002 fa60 	bl	8002e00 <HAL_GPIO_ReadPin>
 8000940:	4603      	mov	r3, r0
 8000942:	461a      	mov	r2, r3
 8000944:	4b9e      	ldr	r3, [pc, #632]	@ (8000bc0 <main+0x2ec>)
 8000946:	701a      	strb	r2, [r3, #0]
	  if(pinsatate == 0){
 8000948:	4b9d      	ldr	r3, [pc, #628]	@ (8000bc0 <main+0x2ec>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d105      	bne.n	800095c <main+0x88>
		  HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, SET);
 8000950:	2201      	movs	r2, #1
 8000952:	2140      	movs	r1, #64	@ 0x40
 8000954:	4898      	ldr	r0, [pc, #608]	@ (8000bb8 <main+0x2e4>)
 8000956:	f002 fa6b 	bl	8002e30 <HAL_GPIO_WritePin>
 800095a:	e004      	b.n	8000966 <main+0x92>
	  }
	  else{
		  HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	2140      	movs	r1, #64	@ 0x40
 8000960:	4895      	ldr	r0, [pc, #596]	@ (8000bb8 <main+0x2e4>)
 8000962:	f002 fa65 	bl	8002e30 <HAL_GPIO_WritePin>
	  }

	  stick_val[0] = center_set(MAP(adc_val[0], 0, 4095, 0, 201));
 8000966:	4b90      	ldr	r3, [pc, #576]	@ (8000ba8 <main+0x2d4>)
 8000968:	881b      	ldrh	r3, [r3, #0]
 800096a:	4618      	mov	r0, r3
 800096c:	23c9      	movs	r3, #201	@ 0xc9
 800096e:	9300      	str	r3, [sp, #0]
 8000970:	2300      	movs	r3, #0
 8000972:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000976:	2100      	movs	r1, #0
 8000978:	f7ff ff8f 	bl	800089a <MAP>
 800097c:	4603      	mov	r3, r0
 800097e:	b29b      	uxth	r3, r3
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff ff7b 	bl	800087c <center_set>
 8000986:	4603      	mov	r3, r0
 8000988:	461a      	mov	r2, r3
 800098a:	4b8e      	ldr	r3, [pc, #568]	@ (8000bc4 <main+0x2f0>)
 800098c:	801a      	strh	r2, [r3, #0]
	  if(stick_val[0] > 100){
 800098e:	4b8d      	ldr	r3, [pc, #564]	@ (8000bc4 <main+0x2f0>)
 8000990:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000994:	2b64      	cmp	r3, #100	@ 0x64
 8000996:	dd02      	ble.n	800099e <main+0xca>
		  stick_val[0] = 100;
 8000998:	4b8a      	ldr	r3, [pc, #552]	@ (8000bc4 <main+0x2f0>)
 800099a:	2264      	movs	r2, #100	@ 0x64
 800099c:	801a      	strh	r2, [r3, #0]
	  }
	  if(stick_val[0] < -100){
 800099e:	4b89      	ldr	r3, [pc, #548]	@ (8000bc4 <main+0x2f0>)
 80009a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009a4:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 80009a8:	da03      	bge.n	80009b2 <main+0xde>
		  stick_val[0] = -100;
 80009aa:	4b86      	ldr	r3, [pc, #536]	@ (8000bc4 <main+0x2f0>)
 80009ac:	f64f 729c 	movw	r2, #65436	@ 0xff9c
 80009b0:	801a      	strh	r2, [r3, #0]
	  }
	  if(stick_val[0] >= 5){
 80009b2:	4b84      	ldr	r3, [pc, #528]	@ (8000bc4 <main+0x2f0>)
 80009b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009b8:	2b04      	cmp	r3, #4
 80009ba:	dd1b      	ble.n	80009f4 <main+0x120>
		  htim1.Instance->CCR4 = ((float)(stick_val[0]/100.0f))*(htim1.Instance->ARR);
 80009bc:	4b81      	ldr	r3, [pc, #516]	@ (8000bc4 <main+0x2f0>)
 80009be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009c2:	ee07 3a90 	vmov	s15, r3
 80009c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009ca:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8000bc8 <main+0x2f4>
 80009ce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80009d2:	4b78      	ldr	r3, [pc, #480]	@ (8000bb4 <main+0x2e0>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009d8:	ee07 3a90 	vmov	s15, r3
 80009dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009e4:	4b73      	ldr	r3, [pc, #460]	@ (8000bb4 <main+0x2e0>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009ec:	ee17 2a90 	vmov	r2, s15
 80009f0:	641a      	str	r2, [r3, #64]	@ 0x40
 80009f2:	e003      	b.n	80009fc <main+0x128>
	  }
	  else{
		  htim1.Instance->CCR4 = 0;
 80009f4:	4b6f      	ldr	r3, [pc, #444]	@ (8000bb4 <main+0x2e0>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2200      	movs	r2, #0
 80009fa:	641a      	str	r2, [r3, #64]	@ 0x40
	  }
	  if(stick_val[0] <= -5){
 80009fc:	4b71      	ldr	r3, [pc, #452]	@ (8000bc4 <main+0x2f0>)
 80009fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a02:	f113 0f04 	cmn.w	r3, #4
 8000a06:	da1c      	bge.n	8000a42 <main+0x16e>
		  htim1.Instance->CCR3 = ((float)((~(stick_val[0]) + 1)/100.0f))*(htim1.Instance->ARR);
 8000a08:	4b6e      	ldr	r3, [pc, #440]	@ (8000bc4 <main+0x2f0>)
 8000a0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a0e:	425b      	negs	r3, r3
 8000a10:	ee07 3a90 	vmov	s15, r3
 8000a14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a18:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8000bc8 <main+0x2f4>
 8000a1c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000a20:	4b64      	ldr	r3, [pc, #400]	@ (8000bb4 <main+0x2e0>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a26:	ee07 3a90 	vmov	s15, r3
 8000a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a32:	4b60      	ldr	r3, [pc, #384]	@ (8000bb4 <main+0x2e0>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a3a:	ee17 2a90 	vmov	r2, s15
 8000a3e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a40:	e003      	b.n	8000a4a <main+0x176>
	  }
	  else{
		  htim1.Instance->CCR3 = 0;
 8000a42:	4b5c      	ldr	r3, [pc, #368]	@ (8000bb4 <main+0x2e0>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	2200      	movs	r2, #0
 8000a48:	63da      	str	r2, [r3, #60]	@ 0x3c
	  }

	  stick_val[1] = center_set(MAP(adc_val[1], 0, 4095, 0, 201));
 8000a4a:	4b57      	ldr	r3, [pc, #348]	@ (8000ba8 <main+0x2d4>)
 8000a4c:	885b      	ldrh	r3, [r3, #2]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	23c9      	movs	r3, #201	@ 0xc9
 8000a52:	9300      	str	r3, [sp, #0]
 8000a54:	2300      	movs	r3, #0
 8000a56:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	f7ff ff1d 	bl	800089a <MAP>
 8000a60:	4603      	mov	r3, r0
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff ff09 	bl	800087c <center_set>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	4b55      	ldr	r3, [pc, #340]	@ (8000bc4 <main+0x2f0>)
 8000a70:	805a      	strh	r2, [r3, #2]
	  if(stick_val[1] > 100){
 8000a72:	4b54      	ldr	r3, [pc, #336]	@ (8000bc4 <main+0x2f0>)
 8000a74:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a78:	2b64      	cmp	r3, #100	@ 0x64
 8000a7a:	dd02      	ble.n	8000a82 <main+0x1ae>
		  stick_val[1] = 100;
 8000a7c:	4b51      	ldr	r3, [pc, #324]	@ (8000bc4 <main+0x2f0>)
 8000a7e:	2264      	movs	r2, #100	@ 0x64
 8000a80:	805a      	strh	r2, [r3, #2]
	  }
	  if(stick_val[1] < -100){
 8000a82:	4b50      	ldr	r3, [pc, #320]	@ (8000bc4 <main+0x2f0>)
 8000a84:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a88:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8000a8c:	da03      	bge.n	8000a96 <main+0x1c2>
		  stick_val[1] = -100;
 8000a8e:	4b4d      	ldr	r3, [pc, #308]	@ (8000bc4 <main+0x2f0>)
 8000a90:	f64f 729c 	movw	r2, #65436	@ 0xff9c
 8000a94:	805a      	strh	r2, [r3, #2]
	  }
	  if(stick_val[1] >= 5){
 8000a96:	4b4b      	ldr	r3, [pc, #300]	@ (8000bc4 <main+0x2f0>)
 8000a98:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a9c:	2b04      	cmp	r3, #4
 8000a9e:	dd1b      	ble.n	8000ad8 <main+0x204>
		  htim1.Instance->CCR2 = ((float)(stick_val[1]/100.0f))*(htim1.Instance->ARR);
 8000aa0:	4b48      	ldr	r3, [pc, #288]	@ (8000bc4 <main+0x2f0>)
 8000aa2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000aa6:	ee07 3a90 	vmov	s15, r3
 8000aaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000aae:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8000bc8 <main+0x2f4>
 8000ab2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000ab6:	4b3f      	ldr	r3, [pc, #252]	@ (8000bb4 <main+0x2e0>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000abc:	ee07 3a90 	vmov	s15, r3
 8000ac0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ac4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ac8:	4b3a      	ldr	r3, [pc, #232]	@ (8000bb4 <main+0x2e0>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ad0:	ee17 2a90 	vmov	r2, s15
 8000ad4:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ad6:	e003      	b.n	8000ae0 <main+0x20c>
	  }
	  else{
		  htim1.Instance->CCR2 = 0;
 8000ad8:	4b36      	ldr	r3, [pc, #216]	@ (8000bb4 <main+0x2e0>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2200      	movs	r2, #0
 8000ade:	639a      	str	r2, [r3, #56]	@ 0x38
	  }
	  if(stick_val[1] <= -5){
 8000ae0:	4b38      	ldr	r3, [pc, #224]	@ (8000bc4 <main+0x2f0>)
 8000ae2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ae6:	f113 0f04 	cmn.w	r3, #4
 8000aea:	da1c      	bge.n	8000b26 <main+0x252>
		  htim1.Instance->CCR1 = ((float)((~(stick_val[1]) + 1)/100.0f))*(htim1.Instance->ARR);
 8000aec:	4b35      	ldr	r3, [pc, #212]	@ (8000bc4 <main+0x2f0>)
 8000aee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000af2:	425b      	negs	r3, r3
 8000af4:	ee07 3a90 	vmov	s15, r3
 8000af8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000afc:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8000bc8 <main+0x2f4>
 8000b00:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000b04:	4b2b      	ldr	r3, [pc, #172]	@ (8000bb4 <main+0x2e0>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b0a:	ee07 3a90 	vmov	s15, r3
 8000b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b16:	4b27      	ldr	r3, [pc, #156]	@ (8000bb4 <main+0x2e0>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b1e:	ee17 2a90 	vmov	r2, s15
 8000b22:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b24:	e003      	b.n	8000b2e <main+0x25a>
	  }
	  else{
		  htim1.Instance->CCR1 = 0;
 8000b26:	4b23      	ldr	r3, [pc, #140]	@ (8000bb4 <main+0x2e0>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	635a      	str	r2, [r3, #52]	@ 0x34
	  }

	  if(pinsatate == 1){
 8000b2e:	4b24      	ldr	r3, [pc, #144]	@ (8000bc0 <main+0x2ec>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	f040 80cc 	bne.w	8000cd0 <main+0x3fc>
		  if(stick_val[0] >= 2){
 8000b38:	4b22      	ldr	r3, [pc, #136]	@ (8000bc4 <main+0x2f0>)
 8000b3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	dd63      	ble.n	8000c0a <main+0x336>
			  if(stick_val[1] > 0){
 8000b42:	4b20      	ldr	r3, [pc, #128]	@ (8000bc4 <main+0x2f0>)
 8000b44:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	dd12      	ble.n	8000b72 <main+0x29e>
				  m1_speed = stick_val[0];
 8000b4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000bc4 <main+0x2f0>)
 8000b4e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b52:	4b1e      	ldr	r3, [pc, #120]	@ (8000bcc <main+0x2f8>)
 8000b54:	801a      	strh	r2, [r3, #0]
				  m2_speed = stick_val[0] - stick_val[1];
 8000b56:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc4 <main+0x2f0>)
 8000b58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b5c:	b29a      	uxth	r2, r3
 8000b5e:	4b19      	ldr	r3, [pc, #100]	@ (8000bc4 <main+0x2f0>)
 8000b60:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	1ad3      	subs	r3, r2, r3
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	b21a      	sxth	r2, r3
 8000b6c:	4b18      	ldr	r3, [pc, #96]	@ (8000bd0 <main+0x2fc>)
 8000b6e:	801a      	strh	r2, [r3, #0]
 8000b70:	e03a      	b.n	8000be8 <main+0x314>
			  }
			  else if(stick_val[1] < 0){
 8000b72:	4b14      	ldr	r3, [pc, #80]	@ (8000bc4 <main+0x2f0>)
 8000b74:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	da2b      	bge.n	8000bd4 <main+0x300>
				  m1_speed = stick_val[0] + stick_val[1];
 8000b7c:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <main+0x2f0>)
 8000b7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b82:	b29a      	uxth	r2, r3
 8000b84:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc4 <main+0x2f0>)
 8000b86:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	4413      	add	r3, r2
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	b21a      	sxth	r2, r3
 8000b92:	4b0e      	ldr	r3, [pc, #56]	@ (8000bcc <main+0x2f8>)
 8000b94:	801a      	strh	r2, [r3, #0]
				  m2_speed = stick_val[0];
 8000b96:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc4 <main+0x2f0>)
 8000b98:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd0 <main+0x2fc>)
 8000b9e:	801a      	strh	r2, [r3, #0]
 8000ba0:	e022      	b.n	8000be8 <main+0x314>
 8000ba2:	bf00      	nop
 8000ba4:	20000000 	.word	0x20000000
 8000ba8:	2000017c 	.word	0x2000017c
 8000bac:	20000034 	.word	0x20000034
 8000bb0:	20000004 	.word	0x20000004
 8000bb4:	20000134 	.word	0x20000134
 8000bb8:	40020400 	.word	0x40020400
 8000bbc:	40020000 	.word	0x40020000
 8000bc0:	200001a4 	.word	0x200001a4
 8000bc4:	20000180 	.word	0x20000180
 8000bc8:	42c80000 	.word	0x42c80000
 8000bcc:	200001a6 	.word	0x200001a6
 8000bd0:	200001a8 	.word	0x200001a8
			  }
			  else{
				  m1_speed = stick_val[0];
 8000bd4:	4b85      	ldr	r3, [pc, #532]	@ (8000dec <main+0x518>)
 8000bd6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000bda:	4b85      	ldr	r3, [pc, #532]	@ (8000df0 <main+0x51c>)
 8000bdc:	801a      	strh	r2, [r3, #0]
				  m2_speed = stick_val[0];
 8000bde:	4b83      	ldr	r3, [pc, #524]	@ (8000dec <main+0x518>)
 8000be0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000be4:	4b83      	ldr	r3, [pc, #524]	@ (8000df4 <main+0x520>)
 8000be6:	801a      	strh	r2, [r3, #0]
			  }
			  if(m1_speed < 0){
 8000be8:	4b81      	ldr	r3, [pc, #516]	@ (8000df0 <main+0x51c>)
 8000bea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	da03      	bge.n	8000bfa <main+0x326>
				  m1_speed = 0;
 8000bf2:	4b7f      	ldr	r3, [pc, #508]	@ (8000df0 <main+0x51c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	801a      	strh	r2, [r3, #0]
 8000bf8:	e007      	b.n	8000c0a <main+0x336>
			  }
			  else if(m2_speed < 0){
 8000bfa:	4b7e      	ldr	r3, [pc, #504]	@ (8000df4 <main+0x520>)
 8000bfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	da02      	bge.n	8000c0a <main+0x336>
				  m2_speed = 0;
 8000c04:	4b7b      	ldr	r3, [pc, #492]	@ (8000df4 <main+0x520>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	801a      	strh	r2, [r3, #0]
			  }
		  }
		  if(stick_val[0] <= -2){
 8000c0a:	4b78      	ldr	r3, [pc, #480]	@ (8000dec <main+0x518>)
 8000c0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c14:	da4a      	bge.n	8000cac <main+0x3d8>
			  if(stick_val[1] > 0){
 8000c16:	4b75      	ldr	r3, [pc, #468]	@ (8000dec <main+0x518>)
 8000c18:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	dd12      	ble.n	8000c46 <main+0x372>
				  m1_speed = stick_val[0];
 8000c20:	4b72      	ldr	r3, [pc, #456]	@ (8000dec <main+0x518>)
 8000c22:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000c26:	4b72      	ldr	r3, [pc, #456]	@ (8000df0 <main+0x51c>)
 8000c28:	801a      	strh	r2, [r3, #0]
				  m2_speed = stick_val[0] + stick_val[1];;
 8000c2a:	4b70      	ldr	r3, [pc, #448]	@ (8000dec <main+0x518>)
 8000c2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c30:	b29a      	uxth	r2, r3
 8000c32:	4b6e      	ldr	r3, [pc, #440]	@ (8000dec <main+0x518>)
 8000c34:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	4413      	add	r3, r2
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	b21a      	sxth	r2, r3
 8000c40:	4b6c      	ldr	r3, [pc, #432]	@ (8000df4 <main+0x520>)
 8000c42:	801a      	strh	r2, [r3, #0]
 8000c44:	e021      	b.n	8000c8a <main+0x3b6>
			  }
			  else if(stick_val[1] < 0){
 8000c46:	4b69      	ldr	r3, [pc, #420]	@ (8000dec <main+0x518>)
 8000c48:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	da12      	bge.n	8000c76 <main+0x3a2>
				  m1_speed = stick_val[0] - stick_val[1];;
 8000c50:	4b66      	ldr	r3, [pc, #408]	@ (8000dec <main+0x518>)
 8000c52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	4b64      	ldr	r3, [pc, #400]	@ (8000dec <main+0x518>)
 8000c5a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000c5e:	b29b      	uxth	r3, r3
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	b21a      	sxth	r2, r3
 8000c66:	4b62      	ldr	r3, [pc, #392]	@ (8000df0 <main+0x51c>)
 8000c68:	801a      	strh	r2, [r3, #0]
				  m2_speed = stick_val[0];
 8000c6a:	4b60      	ldr	r3, [pc, #384]	@ (8000dec <main+0x518>)
 8000c6c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000c70:	4b60      	ldr	r3, [pc, #384]	@ (8000df4 <main+0x520>)
 8000c72:	801a      	strh	r2, [r3, #0]
 8000c74:	e009      	b.n	8000c8a <main+0x3b6>
			  }
			  else{
				  m1_speed = stick_val[0];
 8000c76:	4b5d      	ldr	r3, [pc, #372]	@ (8000dec <main+0x518>)
 8000c78:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000c7c:	4b5c      	ldr	r3, [pc, #368]	@ (8000df0 <main+0x51c>)
 8000c7e:	801a      	strh	r2, [r3, #0]
				  m2_speed = stick_val[0];
 8000c80:	4b5a      	ldr	r3, [pc, #360]	@ (8000dec <main+0x518>)
 8000c82:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000c86:	4b5b      	ldr	r3, [pc, #364]	@ (8000df4 <main+0x520>)
 8000c88:	801a      	strh	r2, [r3, #0]
			  }
			  if(m1_speed > 0){
 8000c8a:	4b59      	ldr	r3, [pc, #356]	@ (8000df0 <main+0x51c>)
 8000c8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	dd03      	ble.n	8000c9c <main+0x3c8>
				  m1_speed = 0;
 8000c94:	4b56      	ldr	r3, [pc, #344]	@ (8000df0 <main+0x51c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	801a      	strh	r2, [r3, #0]
 8000c9a:	e007      	b.n	8000cac <main+0x3d8>
			  }
			  else if(m2_speed > 0){
 8000c9c:	4b55      	ldr	r3, [pc, #340]	@ (8000df4 <main+0x520>)
 8000c9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	dd02      	ble.n	8000cac <main+0x3d8>
				  m2_speed = 0;
 8000ca6:	4b53      	ldr	r3, [pc, #332]	@ (8000df4 <main+0x520>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	801a      	strh	r2, [r3, #0]
			  }
		  }

		  if((stick_val[0] < 2) && (stick_val[0] > -2)){
 8000cac:	4b4f      	ldr	r3, [pc, #316]	@ (8000dec <main+0x518>)
 8000cae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	dc48      	bgt.n	8000d48 <main+0x474>
 8000cb6:	4b4d      	ldr	r3, [pc, #308]	@ (8000dec <main+0x518>)
 8000cb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc0:	db42      	blt.n	8000d48 <main+0x474>
			  m1_speed = 0;
 8000cc2:	4b4b      	ldr	r3, [pc, #300]	@ (8000df0 <main+0x51c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	801a      	strh	r2, [r3, #0]
			  m2_speed = 0;
 8000cc8:	4b4a      	ldr	r3, [pc, #296]	@ (8000df4 <main+0x520>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	801a      	strh	r2, [r3, #0]
 8000cce:	e03b      	b.n	8000d48 <main+0x474>
		  }
	  }
	  else if(pinsatate == 0){
 8000cd0:	4b49      	ldr	r3, [pc, #292]	@ (8000df8 <main+0x524>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d137      	bne.n	8000d48 <main+0x474>
		  if(stick_val[1] > 1){
 8000cd8:	4b44      	ldr	r3, [pc, #272]	@ (8000dec <main+0x518>)
 8000cda:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	dd0d      	ble.n	8000cfe <main+0x42a>
			  m1_speed = stick_val[1];
 8000ce2:	4b42      	ldr	r3, [pc, #264]	@ (8000dec <main+0x518>)
 8000ce4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000ce8:	4b41      	ldr	r3, [pc, #260]	@ (8000df0 <main+0x51c>)
 8000cea:	801a      	strh	r2, [r3, #0]
			  m2_speed = -stick_val[1];
 8000cec:	4b3f      	ldr	r3, [pc, #252]	@ (8000dec <main+0x518>)
 8000cee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	425b      	negs	r3, r3
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	b21a      	sxth	r2, r3
 8000cfa:	4b3e      	ldr	r3, [pc, #248]	@ (8000df4 <main+0x520>)
 8000cfc:	801a      	strh	r2, [r3, #0]
		  }
		  if(stick_val[1] < -1){
 8000cfe:	4b3b      	ldr	r3, [pc, #236]	@ (8000dec <main+0x518>)
 8000d00:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d08:	da0d      	bge.n	8000d26 <main+0x452>
			  m1_speed = stick_val[1];
 8000d0a:	4b38      	ldr	r3, [pc, #224]	@ (8000dec <main+0x518>)
 8000d0c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000d10:	4b37      	ldr	r3, [pc, #220]	@ (8000df0 <main+0x51c>)
 8000d12:	801a      	strh	r2, [r3, #0]
			  m2_speed = -stick_val[1];
 8000d14:	4b35      	ldr	r3, [pc, #212]	@ (8000dec <main+0x518>)
 8000d16:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	425b      	negs	r3, r3
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	b21a      	sxth	r2, r3
 8000d22:	4b34      	ldr	r3, [pc, #208]	@ (8000df4 <main+0x520>)
 8000d24:	801a      	strh	r2, [r3, #0]
		  }
		  if((stick_val[1] <= 1) && (stick_val[1] >= -1)){
 8000d26:	4b31      	ldr	r3, [pc, #196]	@ (8000dec <main+0x518>)
 8000d28:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	dc0b      	bgt.n	8000d48 <main+0x474>
 8000d30:	4b2e      	ldr	r3, [pc, #184]	@ (8000dec <main+0x518>)
 8000d32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d3a:	db05      	blt.n	8000d48 <main+0x474>
			  m1_speed = 0;
 8000d3c:	4b2c      	ldr	r3, [pc, #176]	@ (8000df0 <main+0x51c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	801a      	strh	r2, [r3, #0]
			  m2_speed = 0;
 8000d42:	4b2c      	ldr	r3, [pc, #176]	@ (8000df4 <main+0x520>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	801a      	strh	r2, [r3, #0]
		  }
	  }


	  if(m1_speed > 100){
 8000d48:	4b29      	ldr	r3, [pc, #164]	@ (8000df0 <main+0x51c>)
 8000d4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d4e:	2b64      	cmp	r3, #100	@ 0x64
 8000d50:	dd02      	ble.n	8000d58 <main+0x484>
		  m1_speed = 100;
 8000d52:	4b27      	ldr	r3, [pc, #156]	@ (8000df0 <main+0x51c>)
 8000d54:	2264      	movs	r2, #100	@ 0x64
 8000d56:	801a      	strh	r2, [r3, #0]
	  }
	  if(m1_speed < -100){
 8000d58:	4b25      	ldr	r3, [pc, #148]	@ (8000df0 <main+0x51c>)
 8000d5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d5e:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8000d62:	da03      	bge.n	8000d6c <main+0x498>
		  m1_speed = -100;
 8000d64:	4b22      	ldr	r3, [pc, #136]	@ (8000df0 <main+0x51c>)
 8000d66:	f64f 729c 	movw	r2, #65436	@ 0xff9c
 8000d6a:	801a      	strh	r2, [r3, #0]
	  }
	  if(m2_speed > 100){
 8000d6c:	4b21      	ldr	r3, [pc, #132]	@ (8000df4 <main+0x520>)
 8000d6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d72:	2b64      	cmp	r3, #100	@ 0x64
 8000d74:	dd02      	ble.n	8000d7c <main+0x4a8>
		  m2_speed = 100;
 8000d76:	4b1f      	ldr	r3, [pc, #124]	@ (8000df4 <main+0x520>)
 8000d78:	2264      	movs	r2, #100	@ 0x64
 8000d7a:	801a      	strh	r2, [r3, #0]
	  }
	  if(m2_speed < -100){
 8000d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000df4 <main+0x520>)
 8000d7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d82:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8000d86:	da03      	bge.n	8000d90 <main+0x4bc>
		  m2_speed = -100;
 8000d88:	4b1a      	ldr	r3, [pc, #104]	@ (8000df4 <main+0x520>)
 8000d8a:	f64f 729c 	movw	r2, #65436	@ 0xff9c
 8000d8e:	801a      	strh	r2, [r3, #0]
	  }

	  TxData[0] = (uint8_t) (m1_speed >> 8);
 8000d90:	4b17      	ldr	r3, [pc, #92]	@ (8000df0 <main+0x51c>)
 8000d92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d96:	121b      	asrs	r3, r3, #8
 8000d98:	b21b      	sxth	r3, r3
 8000d9a:	b2da      	uxtb	r2, r3
 8000d9c:	4b17      	ldr	r3, [pc, #92]	@ (8000dfc <main+0x528>)
 8000d9e:	701a      	strb	r2, [r3, #0]
	  TxData[1] = (uint8_t) (m1_speed & 0x00FF);
 8000da0:	4b13      	ldr	r3, [pc, #76]	@ (8000df0 <main+0x51c>)
 8000da2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	4b14      	ldr	r3, [pc, #80]	@ (8000dfc <main+0x528>)
 8000daa:	705a      	strb	r2, [r3, #1]

	  TxData[3] = (uint8_t) (m2_speed >> 8);
 8000dac:	4b11      	ldr	r3, [pc, #68]	@ (8000df4 <main+0x520>)
 8000dae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000db2:	121b      	asrs	r3, r3, #8
 8000db4:	b21b      	sxth	r3, r3
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	4b10      	ldr	r3, [pc, #64]	@ (8000dfc <main+0x528>)
 8000dba:	70da      	strb	r2, [r3, #3]
	  TxData[4] = (uint8_t) (m2_speed & 0x00FF);
 8000dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8000df4 <main+0x520>)
 8000dbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8000dfc <main+0x528>)
 8000dc6:	711a      	strb	r2, [r3, #4]
	  if(NRF24_Transmit(TxData) == 1){
 8000dc8:	480c      	ldr	r0, [pc, #48]	@ (8000dfc <main+0x528>)
 8000dca:	f7ff fd19 	bl	8000800 <NRF24_Transmit>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d105      	bne.n	8000de0 <main+0x50c>
		  HAL_GPIO_WritePin(LED_TX_GPIO_Port, LED_TX_Pin, SET);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	2120      	movs	r1, #32
 8000dd8:	4809      	ldr	r0, [pc, #36]	@ (8000e00 <main+0x52c>)
 8000dda:	f002 f829 	bl	8002e30 <HAL_GPIO_WritePin>
 8000dde:	e5ab      	b.n	8000938 <main+0x64>
	  }
	  else{
		  HAL_GPIO_WritePin(LED_TX_GPIO_Port, LED_TX_Pin, RESET);
 8000de0:	2200      	movs	r2, #0
 8000de2:	2120      	movs	r1, #32
 8000de4:	4806      	ldr	r0, [pc, #24]	@ (8000e00 <main+0x52c>)
 8000de6:	f002 f823 	bl	8002e30 <HAL_GPIO_WritePin>
	  pinsatate = HAL_GPIO_ReadPin(JOYSTICK_BUTTON_GPIO_Port, JOYSTICK_BUTTON_Pin);
 8000dea:	e5a5      	b.n	8000938 <main+0x64>
 8000dec:	20000180 	.word	0x20000180
 8000df0:	200001a6 	.word	0x200001a6
 8000df4:	200001a8 	.word	0x200001a8
 8000df8:	200001a4 	.word	0x200001a4
 8000dfc:	20000184 	.word	0x20000184
 8000e00:	40020400 	.word	0x40020400

08000e04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b094      	sub	sp, #80	@ 0x50
 8000e08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0a:	f107 0320 	add.w	r3, r7, #32
 8000e0e:	2230      	movs	r2, #48	@ 0x30
 8000e10:	2100      	movs	r1, #0
 8000e12:	4618      	mov	r0, r3
 8000e14:	f004 f8b0 	bl	8004f78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e18:	f107 030c 	add.w	r3, r7, #12
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	4b28      	ldr	r3, [pc, #160]	@ (8000ed0 <SystemClock_Config+0xcc>)
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e30:	4a27      	ldr	r2, [pc, #156]	@ (8000ed0 <SystemClock_Config+0xcc>)
 8000e32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e36:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e38:	4b25      	ldr	r3, [pc, #148]	@ (8000ed0 <SystemClock_Config+0xcc>)
 8000e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e44:	2300      	movs	r3, #0
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	4b22      	ldr	r3, [pc, #136]	@ (8000ed4 <SystemClock_Config+0xd0>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e50:	4a20      	ldr	r2, [pc, #128]	@ (8000ed4 <SystemClock_Config+0xd0>)
 8000e52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e56:	6013      	str	r3, [r2, #0]
 8000e58:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed4 <SystemClock_Config+0xd0>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e60:	607b      	str	r3, [r7, #4]
 8000e62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e64:	2302      	movs	r3, #2
 8000e66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e6c:	2310      	movs	r3, #16
 8000e6e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e70:	2302      	movs	r3, #2
 8000e72:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e74:	2300      	movs	r3, #0
 8000e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e78:	2308      	movs	r3, #8
 8000e7a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000e7c:	2354      	movs	r3, #84	@ 0x54
 8000e7e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e80:	2302      	movs	r3, #2
 8000e82:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e84:	2304      	movs	r3, #4
 8000e86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e88:	f107 0320 	add.w	r3, r7, #32
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f002 f803 	bl	8002e98 <HAL_RCC_OscConfig>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e98:	f000 fa2e 	bl	80012f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e9c:	230f      	movs	r3, #15
 8000e9e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ea8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000eb2:	f107 030c 	add.w	r3, r7, #12
 8000eb6:	2102      	movs	r1, #2
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f002 fa65 	bl	8003388 <HAL_RCC_ClockConfig>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000ec4:	f000 fa18 	bl	80012f8 <Error_Handler>
  }
}
 8000ec8:	bf00      	nop
 8000eca:	3750      	adds	r7, #80	@ 0x50
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40007000 	.word	0x40007000

08000ed8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ede:	463b      	mov	r3, r7
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000eea:	4b28      	ldr	r3, [pc, #160]	@ (8000f8c <MX_ADC1_Init+0xb4>)
 8000eec:	4a28      	ldr	r2, [pc, #160]	@ (8000f90 <MX_ADC1_Init+0xb8>)
 8000eee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ef0:	4b26      	ldr	r3, [pc, #152]	@ (8000f8c <MX_ADC1_Init+0xb4>)
 8000ef2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000ef6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ef8:	4b24      	ldr	r3, [pc, #144]	@ (8000f8c <MX_ADC1_Init+0xb4>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000efe:	4b23      	ldr	r3, [pc, #140]	@ (8000f8c <MX_ADC1_Init+0xb4>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f04:	4b21      	ldr	r3, [pc, #132]	@ (8000f8c <MX_ADC1_Init+0xb4>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f0a:	4b20      	ldr	r3, [pc, #128]	@ (8000f8c <MX_ADC1_Init+0xb4>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f12:	4b1e      	ldr	r3, [pc, #120]	@ (8000f8c <MX_ADC1_Init+0xb4>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f18:	4b1c      	ldr	r3, [pc, #112]	@ (8000f8c <MX_ADC1_Init+0xb4>)
 8000f1a:	4a1e      	ldr	r2, [pc, #120]	@ (8000f94 <MX_ADC1_Init+0xbc>)
 8000f1c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f1e:	4b1b      	ldr	r3, [pc, #108]	@ (8000f8c <MX_ADC1_Init+0xb4>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000f24:	4b19      	ldr	r3, [pc, #100]	@ (8000f8c <MX_ADC1_Init+0xb4>)
 8000f26:	2202      	movs	r2, #2
 8000f28:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f2a:	4b18      	ldr	r3, [pc, #96]	@ (8000f8c <MX_ADC1_Init+0xb4>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f32:	4b16      	ldr	r3, [pc, #88]	@ (8000f8c <MX_ADC1_Init+0xb4>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f38:	4814      	ldr	r0, [pc, #80]	@ (8000f8c <MX_ADC1_Init+0xb4>)
 8000f3a:	f000 fc45 	bl	80017c8 <HAL_ADC_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f44:	f000 f9d8 	bl	80012f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000f50:	2306      	movs	r3, #6
 8000f52:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f54:	463b      	mov	r3, r7
 8000f56:	4619      	mov	r1, r3
 8000f58:	480c      	ldr	r0, [pc, #48]	@ (8000f8c <MX_ADC1_Init+0xb4>)
 8000f5a:	f000 fea1 	bl	8001ca0 <HAL_ADC_ConfigChannel>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f64:	f000 f9c8 	bl	80012f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f70:	463b      	mov	r3, r7
 8000f72:	4619      	mov	r1, r3
 8000f74:	4805      	ldr	r0, [pc, #20]	@ (8000f8c <MX_ADC1_Init+0xb4>)
 8000f76:	f000 fe93 	bl	8001ca0 <HAL_ADC_ConfigChannel>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000f80:	f000 f9ba 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f84:	bf00      	nop
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000034 	.word	0x20000034
 8000f90:	40012000 	.word	0x40012000
 8000f94:	0f000001 	.word	0x0f000001

08000f98 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f9c:	4b17      	ldr	r3, [pc, #92]	@ (8000ffc <MX_SPI1_Init+0x64>)
 8000f9e:	4a18      	ldr	r2, [pc, #96]	@ (8001000 <MX_SPI1_Init+0x68>)
 8000fa0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fa2:	4b16      	ldr	r3, [pc, #88]	@ (8000ffc <MX_SPI1_Init+0x64>)
 8000fa4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000fa8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000faa:	4b14      	ldr	r3, [pc, #80]	@ (8000ffc <MX_SPI1_Init+0x64>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fb0:	4b12      	ldr	r3, [pc, #72]	@ (8000ffc <MX_SPI1_Init+0x64>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fb6:	4b11      	ldr	r3, [pc, #68]	@ (8000ffc <MX_SPI1_Init+0x64>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000ffc <MX_SPI1_Init+0x64>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000ffc <MX_SPI1_Init+0x64>)
 8000fc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fc8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000fca:	4b0c      	ldr	r3, [pc, #48]	@ (8000ffc <MX_SPI1_Init+0x64>)
 8000fcc:	2228      	movs	r2, #40	@ 0x28
 8000fce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ffc <MX_SPI1_Init+0x64>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fd6:	4b09      	ldr	r3, [pc, #36]	@ (8000ffc <MX_SPI1_Init+0x64>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fdc:	4b07      	ldr	r3, [pc, #28]	@ (8000ffc <MX_SPI1_Init+0x64>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000fe2:	4b06      	ldr	r3, [pc, #24]	@ (8000ffc <MX_SPI1_Init+0x64>)
 8000fe4:	220a      	movs	r2, #10
 8000fe6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fe8:	4804      	ldr	r0, [pc, #16]	@ (8000ffc <MX_SPI1_Init+0x64>)
 8000fea:	f002 fb79 	bl	80036e0 <HAL_SPI_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ff4:	f000 f980 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	200000dc 	.word	0x200000dc
 8001000:	40013000 	.word	0x40013000

08001004 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b096      	sub	sp, #88	@ 0x58
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800100a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
 8001016:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001018:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001022:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
 8001030:	611a      	str	r2, [r3, #16]
 8001032:	615a      	str	r2, [r3, #20]
 8001034:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	2220      	movs	r2, #32
 800103a:	2100      	movs	r1, #0
 800103c:	4618      	mov	r0, r3
 800103e:	f003 ff9b 	bl	8004f78 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001042:	4b50      	ldr	r3, [pc, #320]	@ (8001184 <MX_TIM1_Init+0x180>)
 8001044:	4a50      	ldr	r2, [pc, #320]	@ (8001188 <MX_TIM1_Init+0x184>)
 8001046:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001048:	4b4e      	ldr	r3, [pc, #312]	@ (8001184 <MX_TIM1_Init+0x180>)
 800104a:	2253      	movs	r2, #83	@ 0x53
 800104c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104e:	4b4d      	ldr	r3, [pc, #308]	@ (8001184 <MX_TIM1_Init+0x180>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001054:	4b4b      	ldr	r3, [pc, #300]	@ (8001184 <MX_TIM1_Init+0x180>)
 8001056:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800105a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800105c:	4b49      	ldr	r3, [pc, #292]	@ (8001184 <MX_TIM1_Init+0x180>)
 800105e:	2200      	movs	r2, #0
 8001060:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001062:	4b48      	ldr	r3, [pc, #288]	@ (8001184 <MX_TIM1_Init+0x180>)
 8001064:	2200      	movs	r2, #0
 8001066:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001068:	4b46      	ldr	r3, [pc, #280]	@ (8001184 <MX_TIM1_Init+0x180>)
 800106a:	2280      	movs	r2, #128	@ 0x80
 800106c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800106e:	4845      	ldr	r0, [pc, #276]	@ (8001184 <MX_TIM1_Init+0x180>)
 8001070:	f003 f908 	bl	8004284 <HAL_TIM_Base_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800107a:	f000 f93d 	bl	80012f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800107e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001082:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001084:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001088:	4619      	mov	r1, r3
 800108a:	483e      	ldr	r0, [pc, #248]	@ (8001184 <MX_TIM1_Init+0x180>)
 800108c:	f003 fb14 	bl	80046b8 <HAL_TIM_ConfigClockSource>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001096:	f000 f92f 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800109a:	483a      	ldr	r0, [pc, #232]	@ (8001184 <MX_TIM1_Init+0x180>)
 800109c:	f003 f941 	bl	8004322 <HAL_TIM_PWM_Init>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80010a6:	f000 f927 	bl	80012f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010aa:	2300      	movs	r3, #0
 80010ac:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ae:	2300      	movs	r3, #0
 80010b0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010b2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80010b6:	4619      	mov	r1, r3
 80010b8:	4832      	ldr	r0, [pc, #200]	@ (8001184 <MX_TIM1_Init+0x180>)
 80010ba:	f003 fe9d 	bl	8004df8 <HAL_TIMEx_MasterConfigSynchronization>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80010c4:	f000 f918 	bl	80012f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010c8:	2360      	movs	r3, #96	@ 0x60
 80010ca:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010d0:	2300      	movs	r3, #0
 80010d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010d4:	2300      	movs	r3, #0
 80010d6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010d8:	2300      	movs	r3, #0
 80010da:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010dc:	2300      	movs	r3, #0
 80010de:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010e0:	2300      	movs	r3, #0
 80010e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010e8:	2200      	movs	r2, #0
 80010ea:	4619      	mov	r1, r3
 80010ec:	4825      	ldr	r0, [pc, #148]	@ (8001184 <MX_TIM1_Init+0x180>)
 80010ee:	f003 fa21 	bl	8004534 <HAL_TIM_PWM_ConfigChannel>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80010f8:	f000 f8fe 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001100:	2204      	movs	r2, #4
 8001102:	4619      	mov	r1, r3
 8001104:	481f      	ldr	r0, [pc, #124]	@ (8001184 <MX_TIM1_Init+0x180>)
 8001106:	f003 fa15 	bl	8004534 <HAL_TIM_PWM_ConfigChannel>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001110:	f000 f8f2 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001114:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001118:	2208      	movs	r2, #8
 800111a:	4619      	mov	r1, r3
 800111c:	4819      	ldr	r0, [pc, #100]	@ (8001184 <MX_TIM1_Init+0x180>)
 800111e:	f003 fa09 	bl	8004534 <HAL_TIM_PWM_ConfigChannel>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001128:	f000 f8e6 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800112c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001130:	220c      	movs	r2, #12
 8001132:	4619      	mov	r1, r3
 8001134:	4813      	ldr	r0, [pc, #76]	@ (8001184 <MX_TIM1_Init+0x180>)
 8001136:	f003 f9fd 	bl	8004534 <HAL_TIM_PWM_ConfigChannel>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001140:	f000 f8da 	bl	80012f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001148:	2300      	movs	r3, #0
 800114a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001158:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800115c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800115e:	2300      	movs	r3, #0
 8001160:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	4619      	mov	r1, r3
 8001166:	4807      	ldr	r0, [pc, #28]	@ (8001184 <MX_TIM1_Init+0x180>)
 8001168:	f003 feb4 	bl	8004ed4 <HAL_TIMEx_ConfigBreakDeadTime>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001172:	f000 f8c1 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001176:	4803      	ldr	r0, [pc, #12]	@ (8001184 <MX_TIM1_Init+0x180>)
 8001178:	f000 f9d6 	bl	8001528 <HAL_TIM_MspPostInit>

}
 800117c:	bf00      	nop
 800117e:	3758      	adds	r7, #88	@ 0x58
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000134 	.word	0x20000134
 8001188:	40010000 	.word	0x40010000

0800118c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	4b0c      	ldr	r3, [pc, #48]	@ (80011c8 <MX_DMA_Init+0x3c>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119a:	4a0b      	ldr	r2, [pc, #44]	@ (80011c8 <MX_DMA_Init+0x3c>)
 800119c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a2:	4b09      	ldr	r3, [pc, #36]	@ (80011c8 <MX_DMA_Init+0x3c>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2100      	movs	r1, #0
 80011b2:	2038      	movs	r0, #56	@ 0x38
 80011b4:	f001 f8f9 	bl	80023aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011b8:	2038      	movs	r0, #56	@ 0x38
 80011ba:	f001 f912 	bl	80023e2 <HAL_NVIC_EnableIRQ>

}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40023800 	.word	0x40023800

080011cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08a      	sub	sp, #40	@ 0x28
 80011d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	60da      	str	r2, [r3, #12]
 80011e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
 80011e6:	4b40      	ldr	r3, [pc, #256]	@ (80012e8 <MX_GPIO_Init+0x11c>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	4a3f      	ldr	r2, [pc, #252]	@ (80012e8 <MX_GPIO_Init+0x11c>)
 80011ec:	f043 0304 	orr.w	r3, r3, #4
 80011f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f2:	4b3d      	ldr	r3, [pc, #244]	@ (80012e8 <MX_GPIO_Init+0x11c>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	f003 0304 	and.w	r3, r3, #4
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	4b39      	ldr	r3, [pc, #228]	@ (80012e8 <MX_GPIO_Init+0x11c>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	4a38      	ldr	r2, [pc, #224]	@ (80012e8 <MX_GPIO_Init+0x11c>)
 8001208:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800120c:	6313      	str	r3, [r2, #48]	@ 0x30
 800120e:	4b36      	ldr	r3, [pc, #216]	@ (80012e8 <MX_GPIO_Init+0x11c>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	4b32      	ldr	r3, [pc, #200]	@ (80012e8 <MX_GPIO_Init+0x11c>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	4a31      	ldr	r2, [pc, #196]	@ (80012e8 <MX_GPIO_Init+0x11c>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	6313      	str	r3, [r2, #48]	@ 0x30
 800122a:	4b2f      	ldr	r3, [pc, #188]	@ (80012e8 <MX_GPIO_Init+0x11c>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	607b      	str	r3, [r7, #4]
 800123a:	4b2b      	ldr	r3, [pc, #172]	@ (80012e8 <MX_GPIO_Init+0x11c>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	4a2a      	ldr	r2, [pc, #168]	@ (80012e8 <MX_GPIO_Init+0x11c>)
 8001240:	f043 0302 	orr.w	r3, r3, #2
 8001244:	6313      	str	r3, [r2, #48]	@ 0x30
 8001246:	4b28      	ldr	r3, [pc, #160]	@ (80012e8 <MX_GPIO_Init+0x11c>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001252:	2200      	movs	r2, #0
 8001254:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001258:	4824      	ldr	r0, [pc, #144]	@ (80012ec <MX_GPIO_Init+0x120>)
 800125a:	f001 fde9 	bl	8002e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CE_Pin|CS_Pin, GPIO_PIN_RESET);
 800125e:	2200      	movs	r2, #0
 8001260:	2118      	movs	r1, #24
 8001262:	4823      	ldr	r0, [pc, #140]	@ (80012f0 <MX_GPIO_Init+0x124>)
 8001264:	f001 fde4 	bl	8002e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_TX_Pin|LED_RX_Pin, GPIO_PIN_RESET);
 8001268:	2200      	movs	r2, #0
 800126a:	2160      	movs	r1, #96	@ 0x60
 800126c:	4821      	ldr	r0, [pc, #132]	@ (80012f4 <MX_GPIO_Init+0x128>)
 800126e:	f001 fddf 	bl	8002e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001272:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001276:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001278:	2301      	movs	r3, #1
 800127a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001280:	2300      	movs	r3, #0
 8001282:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	4619      	mov	r1, r3
 800128a:	4818      	ldr	r0, [pc, #96]	@ (80012ec <MX_GPIO_Init+0x120>)
 800128c:	f001 fc34 	bl	8002af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOYSTICK_BUTTON_Pin */
  GPIO_InitStruct.Pin = JOYSTICK_BUTTON_Pin;
 8001290:	2304      	movs	r3, #4
 8001292:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001294:	2300      	movs	r3, #0
 8001296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001298:	2301      	movs	r3, #1
 800129a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(JOYSTICK_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	4619      	mov	r1, r3
 80012a2:	4813      	ldr	r0, [pc, #76]	@ (80012f0 <MX_GPIO_Init+0x124>)
 80012a4:	f001 fc28 	bl	8002af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CE_Pin CS_Pin */
  GPIO_InitStruct.Pin = CE_Pin|CS_Pin;
 80012a8:	2318      	movs	r3, #24
 80012aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ac:	2301      	movs	r3, #1
 80012ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b4:	2300      	movs	r3, #0
 80012b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	4619      	mov	r1, r3
 80012be:	480c      	ldr	r0, [pc, #48]	@ (80012f0 <MX_GPIO_Init+0x124>)
 80012c0:	f001 fc1a 	bl	8002af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_TX_Pin LED_RX_Pin */
  GPIO_InitStruct.Pin = LED_TX_Pin|LED_RX_Pin;
 80012c4:	2360      	movs	r3, #96	@ 0x60
 80012c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c8:	2301      	movs	r3, #1
 80012ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d0:	2300      	movs	r3, #0
 80012d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	4619      	mov	r1, r3
 80012da:	4806      	ldr	r0, [pc, #24]	@ (80012f4 <MX_GPIO_Init+0x128>)
 80012dc:	f001 fc0c 	bl	8002af8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012e0:	bf00      	nop
 80012e2:	3728      	adds	r7, #40	@ 0x28
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40020800 	.word	0x40020800
 80012f0:	40020000 	.word	0x40020000
 80012f4:	40020400 	.word	0x40020400

080012f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012fc:	b672      	cpsid	i
}
 80012fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <Error_Handler+0x8>

08001304 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	607b      	str	r3, [r7, #4]
 800130e:	4b10      	ldr	r3, [pc, #64]	@ (8001350 <HAL_MspInit+0x4c>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001312:	4a0f      	ldr	r2, [pc, #60]	@ (8001350 <HAL_MspInit+0x4c>)
 8001314:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001318:	6453      	str	r3, [r2, #68]	@ 0x44
 800131a:	4b0d      	ldr	r3, [pc, #52]	@ (8001350 <HAL_MspInit+0x4c>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800131e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	603b      	str	r3, [r7, #0]
 800132a:	4b09      	ldr	r3, [pc, #36]	@ (8001350 <HAL_MspInit+0x4c>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132e:	4a08      	ldr	r2, [pc, #32]	@ (8001350 <HAL_MspInit+0x4c>)
 8001330:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001334:	6413      	str	r3, [r2, #64]	@ 0x40
 8001336:	4b06      	ldr	r3, [pc, #24]	@ (8001350 <HAL_MspInit+0x4c>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800133e:	603b      	str	r3, [r7, #0]
 8001340:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	40023800 	.word	0x40023800

08001354 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08a      	sub	sp, #40	@ 0x28
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a33      	ldr	r2, [pc, #204]	@ (8001440 <HAL_ADC_MspInit+0xec>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d15f      	bne.n	8001436 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	4b32      	ldr	r3, [pc, #200]	@ (8001444 <HAL_ADC_MspInit+0xf0>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800137e:	4a31      	ldr	r2, [pc, #196]	@ (8001444 <HAL_ADC_MspInit+0xf0>)
 8001380:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001384:	6453      	str	r3, [r2, #68]	@ 0x44
 8001386:	4b2f      	ldr	r3, [pc, #188]	@ (8001444 <HAL_ADC_MspInit+0xf0>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800138a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	4b2b      	ldr	r3, [pc, #172]	@ (8001444 <HAL_ADC_MspInit+0xf0>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	4a2a      	ldr	r2, [pc, #168]	@ (8001444 <HAL_ADC_MspInit+0xf0>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a2:	4b28      	ldr	r3, [pc, #160]	@ (8001444 <HAL_ADC_MspInit+0xf0>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013ae:	2303      	movs	r3, #3
 80013b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b2:	2303      	movs	r3, #3
 80013b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	4619      	mov	r1, r3
 80013c0:	4821      	ldr	r0, [pc, #132]	@ (8001448 <HAL_ADC_MspInit+0xf4>)
 80013c2:	f001 fb99 	bl	8002af8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80013c6:	4b21      	ldr	r3, [pc, #132]	@ (800144c <HAL_ADC_MspInit+0xf8>)
 80013c8:	4a21      	ldr	r2, [pc, #132]	@ (8001450 <HAL_ADC_MspInit+0xfc>)
 80013ca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80013cc:	4b1f      	ldr	r3, [pc, #124]	@ (800144c <HAL_ADC_MspInit+0xf8>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013d2:	4b1e      	ldr	r3, [pc, #120]	@ (800144c <HAL_ADC_MspInit+0xf8>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013d8:	4b1c      	ldr	r3, [pc, #112]	@ (800144c <HAL_ADC_MspInit+0xf8>)
 80013da:	2200      	movs	r2, #0
 80013dc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80013de:	4b1b      	ldr	r3, [pc, #108]	@ (800144c <HAL_ADC_MspInit+0xf8>)
 80013e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013e4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013e6:	4b19      	ldr	r3, [pc, #100]	@ (800144c <HAL_ADC_MspInit+0xf8>)
 80013e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80013ec:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013ee:	4b17      	ldr	r3, [pc, #92]	@ (800144c <HAL_ADC_MspInit+0xf8>)
 80013f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013f4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80013f6:	4b15      	ldr	r3, [pc, #84]	@ (800144c <HAL_ADC_MspInit+0xf8>)
 80013f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013fc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80013fe:	4b13      	ldr	r3, [pc, #76]	@ (800144c <HAL_ADC_MspInit+0xf8>)
 8001400:	2200      	movs	r2, #0
 8001402:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001404:	4b11      	ldr	r3, [pc, #68]	@ (800144c <HAL_ADC_MspInit+0xf8>)
 8001406:	2200      	movs	r2, #0
 8001408:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800140a:	4810      	ldr	r0, [pc, #64]	@ (800144c <HAL_ADC_MspInit+0xf8>)
 800140c:	f001 f804 	bl	8002418 <HAL_DMA_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001416:	f7ff ff6f 	bl	80012f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a0b      	ldr	r2, [pc, #44]	@ (800144c <HAL_ADC_MspInit+0xf8>)
 800141e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001420:	4a0a      	ldr	r2, [pc, #40]	@ (800144c <HAL_ADC_MspInit+0xf8>)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2100      	movs	r1, #0
 800142a:	2012      	movs	r0, #18
 800142c:	f000 ffbd 	bl	80023aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001430:	2012      	movs	r0, #18
 8001432:	f000 ffd6 	bl	80023e2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001436:	bf00      	nop
 8001438:	3728      	adds	r7, #40	@ 0x28
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40012000 	.word	0x40012000
 8001444:	40023800 	.word	0x40023800
 8001448:	40020000 	.word	0x40020000
 800144c:	2000007c 	.word	0x2000007c
 8001450:	40026410 	.word	0x40026410

08001454 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08a      	sub	sp, #40	@ 0x28
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a19      	ldr	r2, [pc, #100]	@ (80014d8 <HAL_SPI_MspInit+0x84>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d12b      	bne.n	80014ce <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	613b      	str	r3, [r7, #16]
 800147a:	4b18      	ldr	r3, [pc, #96]	@ (80014dc <HAL_SPI_MspInit+0x88>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147e:	4a17      	ldr	r2, [pc, #92]	@ (80014dc <HAL_SPI_MspInit+0x88>)
 8001480:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001484:	6453      	str	r3, [r2, #68]	@ 0x44
 8001486:	4b15      	ldr	r3, [pc, #84]	@ (80014dc <HAL_SPI_MspInit+0x88>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <HAL_SPI_MspInit+0x88>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	4a10      	ldr	r2, [pc, #64]	@ (80014dc <HAL_SPI_MspInit+0x88>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a2:	4b0e      	ldr	r3, [pc, #56]	@ (80014dc <HAL_SPI_MspInit+0x88>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80014ae:	23e0      	movs	r3, #224	@ 0xe0
 80014b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b2:	2302      	movs	r3, #2
 80014b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ba:	2303      	movs	r3, #3
 80014bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014be:	2305      	movs	r3, #5
 80014c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c2:	f107 0314 	add.w	r3, r7, #20
 80014c6:	4619      	mov	r1, r3
 80014c8:	4805      	ldr	r0, [pc, #20]	@ (80014e0 <HAL_SPI_MspInit+0x8c>)
 80014ca:	f001 fb15 	bl	8002af8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80014ce:	bf00      	nop
 80014d0:	3728      	adds	r7, #40	@ 0x28
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40013000 	.word	0x40013000
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40020000 	.word	0x40020000

080014e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001520 <HAL_TIM_Base_MspInit+0x3c>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d10d      	bne.n	8001512 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001524 <HAL_TIM_Base_MspInit+0x40>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fe:	4a09      	ldr	r2, [pc, #36]	@ (8001524 <HAL_TIM_Base_MspInit+0x40>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6453      	str	r3, [r2, #68]	@ 0x44
 8001506:	4b07      	ldr	r3, [pc, #28]	@ (8001524 <HAL_TIM_Base_MspInit+0x40>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001512:	bf00      	nop
 8001514:	3714      	adds	r7, #20
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	40010000 	.word	0x40010000
 8001524:	40023800 	.word	0x40023800

08001528 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 030c 	add.w	r3, r7, #12
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a12      	ldr	r2, [pc, #72]	@ (8001590 <HAL_TIM_MspPostInit+0x68>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d11e      	bne.n	8001588 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60bb      	str	r3, [r7, #8]
 800154e:	4b11      	ldr	r3, [pc, #68]	@ (8001594 <HAL_TIM_MspPostInit+0x6c>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001552:	4a10      	ldr	r2, [pc, #64]	@ (8001594 <HAL_TIM_MspPostInit+0x6c>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6313      	str	r3, [r2, #48]	@ 0x30
 800155a:	4b0e      	ldr	r3, [pc, #56]	@ (8001594 <HAL_TIM_MspPostInit+0x6c>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001566:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800156a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001574:	2300      	movs	r3, #0
 8001576:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001578:	2301      	movs	r3, #1
 800157a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157c:	f107 030c 	add.w	r3, r7, #12
 8001580:	4619      	mov	r1, r3
 8001582:	4805      	ldr	r0, [pc, #20]	@ (8001598 <HAL_TIM_MspPostInit+0x70>)
 8001584:	f001 fab8 	bl	8002af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001588:	bf00      	nop
 800158a:	3720      	adds	r7, #32
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40010000 	.word	0x40010000
 8001594:	40023800 	.word	0x40023800
 8001598:	40020000 	.word	0x40020000

0800159c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015a0:	bf00      	nop
 80015a2:	e7fd      	b.n	80015a0 <NMI_Handler+0x4>

080015a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015a8:	bf00      	nop
 80015aa:	e7fd      	b.n	80015a8 <HardFault_Handler+0x4>

080015ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b0:	bf00      	nop
 80015b2:	e7fd      	b.n	80015b0 <MemManage_Handler+0x4>

080015b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b8:	bf00      	nop
 80015ba:	e7fd      	b.n	80015b8 <BusFault_Handler+0x4>

080015bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c0:	bf00      	nop
 80015c2:	e7fd      	b.n	80015c0 <UsageFault_Handler+0x4>

080015c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f2:	f000 f8a5 	bl	8001740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001600:	4802      	ldr	r0, [pc, #8]	@ (800160c <ADC_IRQHandler+0x10>)
 8001602:	f000 f924 	bl	800184e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000034 	.word	0x20000034

08001610 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001614:	4802      	ldr	r0, [pc, #8]	@ (8001620 <DMA2_Stream0_IRQHandler+0x10>)
 8001616:	f001 f805 	bl	8002624 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	2000007c 	.word	0x2000007c

08001624 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001628:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <SystemInit+0x20>)
 800162a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800162e:	4a05      	ldr	r2, [pc, #20]	@ (8001644 <SystemInit+0x20>)
 8001630:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001634:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001648:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001680 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800164c:	f7ff ffea 	bl	8001624 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001650:	480c      	ldr	r0, [pc, #48]	@ (8001684 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001652:	490d      	ldr	r1, [pc, #52]	@ (8001688 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001654:	4a0d      	ldr	r2, [pc, #52]	@ (800168c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001658:	e002      	b.n	8001660 <LoopCopyDataInit>

0800165a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800165a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800165c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800165e:	3304      	adds	r3, #4

08001660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001664:	d3f9      	bcc.n	800165a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001666:	4a0a      	ldr	r2, [pc, #40]	@ (8001690 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001668:	4c0a      	ldr	r4, [pc, #40]	@ (8001694 <LoopFillZerobss+0x22>)
  movs r3, #0
 800166a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800166c:	e001      	b.n	8001672 <LoopFillZerobss>

0800166e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800166e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001670:	3204      	adds	r2, #4

08001672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001674:	d3fb      	bcc.n	800166e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001676:	f003 fc87 	bl	8004f88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800167a:	f7ff f92b 	bl	80008d4 <main>
  bx  lr    
 800167e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001680:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001688:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 800168c:	08005020 	.word	0x08005020
  ldr r2, =_sbss
 8001690:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001694:	200001b0 	.word	0x200001b0

08001698 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001698:	e7fe      	b.n	8001698 <DMA1_Stream0_IRQHandler>
	...

0800169c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016a0:	4b0e      	ldr	r3, [pc, #56]	@ (80016dc <HAL_Init+0x40>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0d      	ldr	r2, [pc, #52]	@ (80016dc <HAL_Init+0x40>)
 80016a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016ac:	4b0b      	ldr	r3, [pc, #44]	@ (80016dc <HAL_Init+0x40>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a0a      	ldr	r2, [pc, #40]	@ (80016dc <HAL_Init+0x40>)
 80016b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b8:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <HAL_Init+0x40>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a07      	ldr	r2, [pc, #28]	@ (80016dc <HAL_Init+0x40>)
 80016be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c4:	2003      	movs	r0, #3
 80016c6:	f000 fe65 	bl	8002394 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ca:	200f      	movs	r0, #15
 80016cc:	f000 f808 	bl	80016e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016d0:	f7ff fe18 	bl	8001304 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40023c00 	.word	0x40023c00

080016e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016e8:	4b12      	ldr	r3, [pc, #72]	@ (8001734 <HAL_InitTick+0x54>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4b12      	ldr	r3, [pc, #72]	@ (8001738 <HAL_InitTick+0x58>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	4619      	mov	r1, r3
 80016f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 fe7d 	bl	80023fe <HAL_SYSTICK_Config>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e00e      	b.n	800172c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b0f      	cmp	r3, #15
 8001712:	d80a      	bhi.n	800172a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001714:	2200      	movs	r2, #0
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	f04f 30ff 	mov.w	r0, #4294967295
 800171c:	f000 fe45 	bl	80023aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001720:	4a06      	ldr	r2, [pc, #24]	@ (800173c <HAL_InitTick+0x5c>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	e000      	b.n	800172c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
}
 800172c:	4618      	mov	r0, r3
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	2000000c 	.word	0x2000000c
 8001738:	20000014 	.word	0x20000014
 800173c:	20000010 	.word	0x20000010

08001740 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001744:	4b06      	ldr	r3, [pc, #24]	@ (8001760 <HAL_IncTick+0x20>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	461a      	mov	r2, r3
 800174a:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <HAL_IncTick+0x24>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4413      	add	r3, r2
 8001750:	4a04      	ldr	r2, [pc, #16]	@ (8001764 <HAL_IncTick+0x24>)
 8001752:	6013      	str	r3, [r2, #0]
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	20000014 	.word	0x20000014
 8001764:	200001ac 	.word	0x200001ac

08001768 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  return uwTick;
 800176c:	4b03      	ldr	r3, [pc, #12]	@ (800177c <HAL_GetTick+0x14>)
 800176e:	681b      	ldr	r3, [r3, #0]
}
 8001770:	4618      	mov	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	200001ac 	.word	0x200001ac

08001780 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001788:	f7ff ffee 	bl	8001768 <HAL_GetTick>
 800178c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001798:	d005      	beq.n	80017a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800179a:	4b0a      	ldr	r3, [pc, #40]	@ (80017c4 <HAL_Delay+0x44>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	461a      	mov	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4413      	add	r3, r2
 80017a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017a6:	bf00      	nop
 80017a8:	f7ff ffde 	bl	8001768 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d8f7      	bhi.n	80017a8 <HAL_Delay+0x28>
  {
  }
}
 80017b8:	bf00      	nop
 80017ba:	bf00      	nop
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000014 	.word	0x20000014

080017c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017d0:	2300      	movs	r3, #0
 80017d2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e033      	b.n	8001846 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d109      	bne.n	80017fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff fdb4 	bl	8001354 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fe:	f003 0310 	and.w	r3, r3, #16
 8001802:	2b00      	cmp	r3, #0
 8001804:	d118      	bne.n	8001838 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800180e:	f023 0302 	bic.w	r3, r3, #2
 8001812:	f043 0202 	orr.w	r2, r3, #2
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f000 fb62 	bl	8001ee4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182a:	f023 0303 	bic.w	r3, r3, #3
 800182e:	f043 0201 	orr.w	r2, r3, #1
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	641a      	str	r2, [r3, #64]	@ 0x40
 8001836:	e001      	b.n	800183c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001844:	7bfb      	ldrb	r3, [r7, #15]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b086      	sub	sp, #24
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	f003 0320 	and.w	r3, r3, #32
 800187c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d049      	beq.n	8001918 <HAL_ADC_IRQHandler+0xca>
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d046      	beq.n	8001918 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188e:	f003 0310 	and.w	r3, r3, #16
 8001892:	2b00      	cmp	r3, #0
 8001894:	d105      	bne.n	80018a2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d12b      	bne.n	8001908 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d127      	bne.n	8001908 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018be:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d006      	beq.n	80018d4 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d119      	bne.n	8001908 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f022 0220 	bic.w	r2, r2, #32
 80018e2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d105      	bne.n	8001908 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001900:	f043 0201 	orr.w	r2, r3, #1
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f000 f9a1 	bl	8001c50 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f06f 0212 	mvn.w	r2, #18
 8001916:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f003 0304 	and.w	r3, r3, #4
 800191e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001926:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d057      	beq.n	80019de <HAL_ADC_IRQHandler+0x190>
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d054      	beq.n	80019de <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001938:	f003 0310 	and.w	r3, r3, #16
 800193c:	2b00      	cmp	r3, #0
 800193e:	d105      	bne.n	800194c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001944:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d139      	bne.n	80019ce <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001960:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001964:	2b00      	cmp	r3, #0
 8001966:	d006      	beq.n	8001976 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001972:	2b00      	cmp	r3, #0
 8001974:	d12b      	bne.n	80019ce <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001980:	2b00      	cmp	r3, #0
 8001982:	d124      	bne.n	80019ce <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800198e:	2b00      	cmp	r3, #0
 8001990:	d11d      	bne.n	80019ce <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001996:	2b00      	cmp	r3, #0
 8001998:	d119      	bne.n	80019ce <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019a8:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d105      	bne.n	80019ce <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c6:	f043 0201 	orr.w	r2, r3, #1
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f000 fc06 	bl	80021e0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f06f 020c 	mvn.w	r2, #12
 80019dc:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019ec:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d017      	beq.n	8001a24 <HAL_ADC_IRQHandler+0x1d6>
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d014      	beq.n	8001a24 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d10d      	bne.n	8001a24 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 f92f 	bl	8001c78 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f06f 0201 	mvn.w	r2, #1
 8001a22:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f003 0320 	and.w	r3, r3, #32
 8001a2a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a32:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d015      	beq.n	8001a66 <HAL_ADC_IRQHandler+0x218>
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d012      	beq.n	8001a66 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a44:	f043 0202 	orr.w	r2, r3, #2
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f06f 0220 	mvn.w	r2, #32
 8001a54:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 f918 	bl	8001c8c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f06f 0220 	mvn.w	r2, #32
 8001a64:	601a      	str	r2, [r3, #0]
  }
}
 8001a66:	bf00      	nop
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d101      	bne.n	8001a8e <HAL_ADC_Start_DMA+0x1e>
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	e0ce      	b.n	8001c2c <HAL_ADC_Start_DMA+0x1bc>
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2201      	movs	r2, #1
 8001a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d018      	beq.n	8001ad6 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	689a      	ldr	r2, [r3, #8]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f042 0201 	orr.w	r2, r2, #1
 8001ab2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ab4:	4b5f      	ldr	r3, [pc, #380]	@ (8001c34 <HAL_ADC_Start_DMA+0x1c4>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a5f      	ldr	r2, [pc, #380]	@ (8001c38 <HAL_ADC_Start_DMA+0x1c8>)
 8001aba:	fba2 2303 	umull	r2, r3, r2, r3
 8001abe:	0c9a      	lsrs	r2, r3, #18
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	4413      	add	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001ac8:	e002      	b.n	8001ad0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	3b01      	subs	r3, #1
 8001ace:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1f9      	bne.n	8001aca <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ae0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ae4:	d107      	bne.n	8001af6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001af4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	f040 8086 	bne.w	8001c12 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001b0e:	f023 0301 	bic.w	r3, r3, #1
 8001b12:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d007      	beq.n	8001b38 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b30:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b44:	d106      	bne.n	8001b54 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b4a:	f023 0206 	bic.w	r2, r3, #6
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	645a      	str	r2, [r3, #68]	@ 0x44
 8001b52:	e002      	b.n	8001b5a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2200      	movs	r2, #0
 8001b58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b62:	4b36      	ldr	r3, [pc, #216]	@ (8001c3c <HAL_ADC_Start_DMA+0x1cc>)
 8001b64:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b6a:	4a35      	ldr	r2, [pc, #212]	@ (8001c40 <HAL_ADC_Start_DMA+0x1d0>)
 8001b6c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b72:	4a34      	ldr	r2, [pc, #208]	@ (8001c44 <HAL_ADC_Start_DMA+0x1d4>)
 8001b74:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b7a:	4a33      	ldr	r2, [pc, #204]	@ (8001c48 <HAL_ADC_Start_DMA+0x1d8>)
 8001b7c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001b86:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001b96:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	689a      	ldr	r2, [r3, #8]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ba6:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	334c      	adds	r3, #76	@ 0x4c
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	68ba      	ldr	r2, [r7, #8]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f000 fcdc 	bl	8002574 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 031f 	and.w	r3, r3, #31
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d10f      	bne.n	8001be8 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d129      	bne.n	8001c2a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	e020      	b.n	8001c2a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a17      	ldr	r2, [pc, #92]	@ (8001c4c <HAL_ADC_Start_DMA+0x1dc>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d11b      	bne.n	8001c2a <HAL_ADC_Start_DMA+0x1ba>
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d114      	bne.n	8001c2a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	689a      	ldr	r2, [r3, #8]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	e00b      	b.n	8001c2a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c16:	f043 0210 	orr.w	r2, r3, #16
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c22:	f043 0201 	orr.w	r2, r3, #1
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	2000000c 	.word	0x2000000c
 8001c38:	431bde83 	.word	0x431bde83
 8001c3c:	40012300 	.word	0x40012300
 8001c40:	080020dd 	.word	0x080020dd
 8001c44:	08002197 	.word	0x08002197
 8001c48:	080021b3 	.word	0x080021b3
 8001c4c:	40012000 	.word	0x40012000

08001c50 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d101      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x1c>
 8001cb8:	2302      	movs	r3, #2
 8001cba:	e105      	b.n	8001ec8 <HAL_ADC_ConfigChannel+0x228>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b09      	cmp	r3, #9
 8001cca:	d925      	bls.n	8001d18 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68d9      	ldr	r1, [r3, #12]
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4613      	mov	r3, r2
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	4413      	add	r3, r2
 8001ce0:	3b1e      	subs	r3, #30
 8001ce2:	2207      	movs	r2, #7
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	43da      	mvns	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	400a      	ands	r2, r1
 8001cf0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68d9      	ldr	r1, [r3, #12]
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	4618      	mov	r0, r3
 8001d04:	4603      	mov	r3, r0
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	4403      	add	r3, r0
 8001d0a:	3b1e      	subs	r3, #30
 8001d0c:	409a      	lsls	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	430a      	orrs	r2, r1
 8001d14:	60da      	str	r2, [r3, #12]
 8001d16:	e022      	b.n	8001d5e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6919      	ldr	r1, [r3, #16]
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	461a      	mov	r2, r3
 8001d26:	4613      	mov	r3, r2
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	4413      	add	r3, r2
 8001d2c:	2207      	movs	r2, #7
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	43da      	mvns	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	400a      	ands	r2, r1
 8001d3a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6919      	ldr	r1, [r3, #16]
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	4603      	mov	r3, r0
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	4403      	add	r3, r0
 8001d54:	409a      	lsls	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b06      	cmp	r3, #6
 8001d64:	d824      	bhi.n	8001db0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	4613      	mov	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4413      	add	r3, r2
 8001d76:	3b05      	subs	r3, #5
 8001d78:	221f      	movs	r2, #31
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43da      	mvns	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	400a      	ands	r2, r1
 8001d86:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	4618      	mov	r0, r3
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4413      	add	r3, r2
 8001da0:	3b05      	subs	r3, #5
 8001da2:	fa00 f203 	lsl.w	r2, r0, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	430a      	orrs	r2, r1
 8001dac:	635a      	str	r2, [r3, #52]	@ 0x34
 8001dae:	e04c      	b.n	8001e4a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2b0c      	cmp	r3, #12
 8001db6:	d824      	bhi.n	8001e02 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4413      	add	r3, r2
 8001dc8:	3b23      	subs	r3, #35	@ 0x23
 8001dca:	221f      	movs	r2, #31
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43da      	mvns	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	400a      	ands	r2, r1
 8001dd8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	4618      	mov	r0, r3
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	4613      	mov	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4413      	add	r3, r2
 8001df2:	3b23      	subs	r3, #35	@ 0x23
 8001df4:	fa00 f203 	lsl.w	r2, r0, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e00:	e023      	b.n	8001e4a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	4413      	add	r3, r2
 8001e12:	3b41      	subs	r3, #65	@ 0x41
 8001e14:	221f      	movs	r2, #31
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43da      	mvns	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	400a      	ands	r2, r1
 8001e22:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	4618      	mov	r0, r3
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	4613      	mov	r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	4413      	add	r3, r2
 8001e3c:	3b41      	subs	r3, #65	@ 0x41
 8001e3e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	430a      	orrs	r2, r1
 8001e48:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e4a:	4b22      	ldr	r3, [pc, #136]	@ (8001ed4 <HAL_ADC_ConfigChannel+0x234>)
 8001e4c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a21      	ldr	r2, [pc, #132]	@ (8001ed8 <HAL_ADC_ConfigChannel+0x238>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d109      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x1cc>
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2b12      	cmp	r3, #18
 8001e5e:	d105      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a19      	ldr	r2, [pc, #100]	@ (8001ed8 <HAL_ADC_ConfigChannel+0x238>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d123      	bne.n	8001ebe <HAL_ADC_ConfigChannel+0x21e>
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2b10      	cmp	r3, #16
 8001e7c:	d003      	beq.n	8001e86 <HAL_ADC_ConfigChannel+0x1e6>
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2b11      	cmp	r3, #17
 8001e84:	d11b      	bne.n	8001ebe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2b10      	cmp	r3, #16
 8001e98:	d111      	bne.n	8001ebe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e9a:	4b10      	ldr	r3, [pc, #64]	@ (8001edc <HAL_ADC_ConfigChannel+0x23c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a10      	ldr	r2, [pc, #64]	@ (8001ee0 <HAL_ADC_ConfigChannel+0x240>)
 8001ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea4:	0c9a      	lsrs	r2, r3, #18
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001eb0:	e002      	b.n	8001eb8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1f9      	bne.n	8001eb2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3714      	adds	r7, #20
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	40012300 	.word	0x40012300
 8001ed8:	40012000 	.word	0x40012000
 8001edc:	2000000c 	.word	0x2000000c
 8001ee0:	431bde83 	.word	0x431bde83

08001ee4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001eec:	4b79      	ldr	r3, [pc, #484]	@ (80020d4 <ADC_Init+0x1f0>)
 8001eee:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	431a      	orrs	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6859      	ldr	r1, [r3, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	021a      	lsls	r2, r3, #8
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001f3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6859      	ldr	r1, [r3, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6899      	ldr	r1, [r3, #8]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68da      	ldr	r2, [r3, #12]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f76:	4a58      	ldr	r2, [pc, #352]	@ (80020d8 <ADC_Init+0x1f4>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d022      	beq.n	8001fc2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	689a      	ldr	r2, [r3, #8]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f8a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6899      	ldr	r1, [r3, #8]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001fac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6899      	ldr	r1, [r3, #8]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	e00f      	b.n	8001fe2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001fd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001fe0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0202 	bic.w	r2, r2, #2
 8001ff0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6899      	ldr	r1, [r3, #8]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	7e1b      	ldrb	r3, [r3, #24]
 8001ffc:	005a      	lsls	r2, r3, #1
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	430a      	orrs	r2, r1
 8002004:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 3020 	ldrb.w	r3, [r3, #32]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d01b      	beq.n	8002048 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800201e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800202e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6859      	ldr	r1, [r3, #4]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800203a:	3b01      	subs	r3, #1
 800203c:	035a      	lsls	r2, r3, #13
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	430a      	orrs	r2, r1
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	e007      	b.n	8002058 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002056:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002066:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	3b01      	subs	r3, #1
 8002074:	051a      	lsls	r2, r3, #20
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	689a      	ldr	r2, [r3, #8]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800208c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	6899      	ldr	r1, [r3, #8]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800209a:	025a      	lsls	r2, r3, #9
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689a      	ldr	r2, [r3, #8]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6899      	ldr	r1, [r3, #8]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	029a      	lsls	r2, r3, #10
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	609a      	str	r2, [r3, #8]
}
 80020c8:	bf00      	nop
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	40012300 	.word	0x40012300
 80020d8:	0f000001 	.word	0x0f000001

080020dc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020e8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ee:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d13c      	bne.n	8002170 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d12b      	bne.n	8002168 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002114:	2b00      	cmp	r3, #0
 8002116:	d127      	bne.n	8002168 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800211e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002122:	2b00      	cmp	r3, #0
 8002124:	d006      	beq.n	8002134 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002130:	2b00      	cmp	r3, #0
 8002132:	d119      	bne.n	8002168 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 0220 	bic.w	r2, r2, #32
 8002142:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002148:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002154:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d105      	bne.n	8002168 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002160:	f043 0201 	orr.w	r2, r3, #1
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002168:	68f8      	ldr	r0, [r7, #12]
 800216a:	f7ff fd71 	bl	8001c50 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800216e:	e00e      	b.n	800218e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002174:	f003 0310 	and.w	r3, r3, #16
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f7ff fd85 	bl	8001c8c <HAL_ADC_ErrorCallback>
}
 8002182:	e004      	b.n	800218e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	4798      	blx	r3
}
 800218e:	bf00      	nop
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b084      	sub	sp, #16
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021a2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f7ff fd5d 	bl	8001c64 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021aa:	bf00      	nop
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b084      	sub	sp, #16
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021be:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2240      	movs	r2, #64	@ 0x40
 80021c4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ca:	f043 0204 	orr.w	r2, r3, #4
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f7ff fd5a 	bl	8001c8c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021d8:	bf00      	nop
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002204:	4b0c      	ldr	r3, [pc, #48]	@ (8002238 <__NVIC_SetPriorityGrouping+0x44>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002210:	4013      	ands	r3, r2
 8002212:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800221c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002220:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002224:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002226:	4a04      	ldr	r2, [pc, #16]	@ (8002238 <__NVIC_SetPriorityGrouping+0x44>)
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	60d3      	str	r3, [r2, #12]
}
 800222c:	bf00      	nop
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002240:	4b04      	ldr	r3, [pc, #16]	@ (8002254 <__NVIC_GetPriorityGrouping+0x18>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	0a1b      	lsrs	r3, r3, #8
 8002246:	f003 0307 	and.w	r3, r3, #7
}
 800224a:	4618      	mov	r0, r3
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002266:	2b00      	cmp	r3, #0
 8002268:	db0b      	blt.n	8002282 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	f003 021f 	and.w	r2, r3, #31
 8002270:	4907      	ldr	r1, [pc, #28]	@ (8002290 <__NVIC_EnableIRQ+0x38>)
 8002272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002276:	095b      	lsrs	r3, r3, #5
 8002278:	2001      	movs	r0, #1
 800227a:	fa00 f202 	lsl.w	r2, r0, r2
 800227e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	e000e100 	.word	0xe000e100

08002294 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	6039      	str	r1, [r7, #0]
 800229e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	db0a      	blt.n	80022be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	490c      	ldr	r1, [pc, #48]	@ (80022e0 <__NVIC_SetPriority+0x4c>)
 80022ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b2:	0112      	lsls	r2, r2, #4
 80022b4:	b2d2      	uxtb	r2, r2
 80022b6:	440b      	add	r3, r1
 80022b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022bc:	e00a      	b.n	80022d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	4908      	ldr	r1, [pc, #32]	@ (80022e4 <__NVIC_SetPriority+0x50>)
 80022c4:	79fb      	ldrb	r3, [r7, #7]
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	3b04      	subs	r3, #4
 80022cc:	0112      	lsls	r2, r2, #4
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	440b      	add	r3, r1
 80022d2:	761a      	strb	r2, [r3, #24]
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	e000e100 	.word	0xe000e100
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b089      	sub	sp, #36	@ 0x24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	f1c3 0307 	rsb	r3, r3, #7
 8002302:	2b04      	cmp	r3, #4
 8002304:	bf28      	it	cs
 8002306:	2304      	movcs	r3, #4
 8002308:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	3304      	adds	r3, #4
 800230e:	2b06      	cmp	r3, #6
 8002310:	d902      	bls.n	8002318 <NVIC_EncodePriority+0x30>
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	3b03      	subs	r3, #3
 8002316:	e000      	b.n	800231a <NVIC_EncodePriority+0x32>
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800231c:	f04f 32ff 	mov.w	r2, #4294967295
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	43da      	mvns	r2, r3
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	401a      	ands	r2, r3
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002330:	f04f 31ff 	mov.w	r1, #4294967295
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	fa01 f303 	lsl.w	r3, r1, r3
 800233a:	43d9      	mvns	r1, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002340:	4313      	orrs	r3, r2
         );
}
 8002342:	4618      	mov	r0, r3
 8002344:	3724      	adds	r7, #36	@ 0x24
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
	...

08002350 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3b01      	subs	r3, #1
 800235c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002360:	d301      	bcc.n	8002366 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002362:	2301      	movs	r3, #1
 8002364:	e00f      	b.n	8002386 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002366:	4a0a      	ldr	r2, [pc, #40]	@ (8002390 <SysTick_Config+0x40>)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3b01      	subs	r3, #1
 800236c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800236e:	210f      	movs	r1, #15
 8002370:	f04f 30ff 	mov.w	r0, #4294967295
 8002374:	f7ff ff8e 	bl	8002294 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002378:	4b05      	ldr	r3, [pc, #20]	@ (8002390 <SysTick_Config+0x40>)
 800237a:	2200      	movs	r2, #0
 800237c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800237e:	4b04      	ldr	r3, [pc, #16]	@ (8002390 <SysTick_Config+0x40>)
 8002380:	2207      	movs	r2, #7
 8002382:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	e000e010 	.word	0xe000e010

08002394 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f7ff ff29 	bl	80021f4 <__NVIC_SetPriorityGrouping>
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b086      	sub	sp, #24
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	4603      	mov	r3, r0
 80023b2:	60b9      	str	r1, [r7, #8]
 80023b4:	607a      	str	r2, [r7, #4]
 80023b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023bc:	f7ff ff3e 	bl	800223c <__NVIC_GetPriorityGrouping>
 80023c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	68b9      	ldr	r1, [r7, #8]
 80023c6:	6978      	ldr	r0, [r7, #20]
 80023c8:	f7ff ff8e 	bl	80022e8 <NVIC_EncodePriority>
 80023cc:	4602      	mov	r2, r0
 80023ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023d2:	4611      	mov	r1, r2
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff ff5d 	bl	8002294 <__NVIC_SetPriority>
}
 80023da:	bf00      	nop
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b082      	sub	sp, #8
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	4603      	mov	r3, r0
 80023ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff ff31 	bl	8002258 <__NVIC_EnableIRQ>
}
 80023f6:	bf00      	nop
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7ff ffa2 	bl	8002350 <SysTick_Config>
 800240c:	4603      	mov	r3, r0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
	...

08002418 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002420:	2300      	movs	r3, #0
 8002422:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002424:	f7ff f9a0 	bl	8001768 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e099      	b.n	8002568 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2202      	movs	r2, #2
 8002438:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0201 	bic.w	r2, r2, #1
 8002452:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002454:	e00f      	b.n	8002476 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002456:	f7ff f987 	bl	8001768 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b05      	cmp	r3, #5
 8002462:	d908      	bls.n	8002476 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2220      	movs	r2, #32
 8002468:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2203      	movs	r2, #3
 800246e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e078      	b.n	8002568 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1e8      	bne.n	8002456 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	4b38      	ldr	r3, [pc, #224]	@ (8002570 <HAL_DMA_Init+0x158>)
 8002490:	4013      	ands	r3, r2
 8002492:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024cc:	2b04      	cmp	r3, #4
 80024ce:	d107      	bne.n	80024e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d8:	4313      	orrs	r3, r2
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	4313      	orrs	r3, r2
 80024de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	f023 0307 	bic.w	r3, r3, #7
 80024f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	4313      	orrs	r3, r2
 8002500:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002506:	2b04      	cmp	r3, #4
 8002508:	d117      	bne.n	800253a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	4313      	orrs	r3, r2
 8002512:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00e      	beq.n	800253a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 fa6f 	bl	8002a00 <DMA_CheckFifoParam>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d008      	beq.n	800253a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2240      	movs	r2, #64	@ 0x40
 800252c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2201      	movs	r2, #1
 8002532:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002536:	2301      	movs	r3, #1
 8002538:	e016      	b.n	8002568 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 fa26 	bl	8002994 <DMA_CalcBaseAndBitshift>
 8002548:	4603      	mov	r3, r0
 800254a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002550:	223f      	movs	r2, #63	@ 0x3f
 8002552:	409a      	lsls	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3718      	adds	r7, #24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	f010803f 	.word	0xf010803f

08002574 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
 8002580:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002582:	2300      	movs	r3, #0
 8002584:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800258a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002592:	2b01      	cmp	r3, #1
 8002594:	d101      	bne.n	800259a <HAL_DMA_Start_IT+0x26>
 8002596:	2302      	movs	r3, #2
 8002598:	e040      	b.n	800261c <HAL_DMA_Start_IT+0xa8>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d12f      	bne.n	800260e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2202      	movs	r2, #2
 80025b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	68b9      	ldr	r1, [r7, #8]
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 f9b8 	bl	8002938 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025cc:	223f      	movs	r2, #63	@ 0x3f
 80025ce:	409a      	lsls	r2, r3
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0216 	orr.w	r2, r2, #22
 80025e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d007      	beq.n	80025fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0208 	orr.w	r2, r2, #8
 80025fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f042 0201 	orr.w	r2, r2, #1
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	e005      	b.n	800261a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002616:	2302      	movs	r3, #2
 8002618:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800261a:	7dfb      	ldrb	r3, [r7, #23]
}
 800261c:	4618      	mov	r0, r3
 800261e:	3718      	adds	r7, #24
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800262c:	2300      	movs	r3, #0
 800262e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002630:	4b8e      	ldr	r3, [pc, #568]	@ (800286c <HAL_DMA_IRQHandler+0x248>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a8e      	ldr	r2, [pc, #568]	@ (8002870 <HAL_DMA_IRQHandler+0x24c>)
 8002636:	fba2 2303 	umull	r2, r3, r2, r3
 800263a:	0a9b      	lsrs	r3, r3, #10
 800263c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002642:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800264e:	2208      	movs	r2, #8
 8002650:	409a      	lsls	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	4013      	ands	r3, r2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d01a      	beq.n	8002690 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b00      	cmp	r3, #0
 8002666:	d013      	beq.n	8002690 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0204 	bic.w	r2, r2, #4
 8002676:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800267c:	2208      	movs	r2, #8
 800267e:	409a      	lsls	r2, r3
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002688:	f043 0201 	orr.w	r2, r3, #1
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002694:	2201      	movs	r2, #1
 8002696:	409a      	lsls	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4013      	ands	r3, r2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d012      	beq.n	80026c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00b      	beq.n	80026c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b2:	2201      	movs	r2, #1
 80026b4:	409a      	lsls	r2, r3
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026be:	f043 0202 	orr.w	r2, r3, #2
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ca:	2204      	movs	r2, #4
 80026cc:	409a      	lsls	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	4013      	ands	r3, r2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d012      	beq.n	80026fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00b      	beq.n	80026fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e8:	2204      	movs	r2, #4
 80026ea:	409a      	lsls	r2, r3
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f4:	f043 0204 	orr.w	r2, r3, #4
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002700:	2210      	movs	r2, #16
 8002702:	409a      	lsls	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4013      	ands	r3, r2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d043      	beq.n	8002794 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d03c      	beq.n	8002794 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800271e:	2210      	movs	r2, #16
 8002720:	409a      	lsls	r2, r3
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d018      	beq.n	8002766 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d108      	bne.n	8002754 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002746:	2b00      	cmp	r3, #0
 8002748:	d024      	beq.n	8002794 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	4798      	blx	r3
 8002752:	e01f      	b.n	8002794 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002758:	2b00      	cmp	r3, #0
 800275a:	d01b      	beq.n	8002794 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	4798      	blx	r3
 8002764:	e016      	b.n	8002794 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002770:	2b00      	cmp	r3, #0
 8002772:	d107      	bne.n	8002784 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 0208 	bic.w	r2, r2, #8
 8002782:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002788:	2b00      	cmp	r3, #0
 800278a:	d003      	beq.n	8002794 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002798:	2220      	movs	r2, #32
 800279a:	409a      	lsls	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	4013      	ands	r3, r2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 808f 	beq.w	80028c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0310 	and.w	r3, r3, #16
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 8087 	beq.w	80028c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ba:	2220      	movs	r2, #32
 80027bc:	409a      	lsls	r2, r3
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b05      	cmp	r3, #5
 80027cc:	d136      	bne.n	800283c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0216 	bic.w	r2, r2, #22
 80027dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	695a      	ldr	r2, [r3, #20]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d103      	bne.n	80027fe <HAL_DMA_IRQHandler+0x1da>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d007      	beq.n	800280e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0208 	bic.w	r2, r2, #8
 800280c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002812:	223f      	movs	r2, #63	@ 0x3f
 8002814:	409a      	lsls	r2, r3
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800282e:	2b00      	cmp	r3, #0
 8002830:	d07e      	beq.n	8002930 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	4798      	blx	r3
        }
        return;
 800283a:	e079      	b.n	8002930 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d01d      	beq.n	8002886 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10d      	bne.n	8002874 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285c:	2b00      	cmp	r3, #0
 800285e:	d031      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	4798      	blx	r3
 8002868:	e02c      	b.n	80028c4 <HAL_DMA_IRQHandler+0x2a0>
 800286a:	bf00      	nop
 800286c:	2000000c 	.word	0x2000000c
 8002870:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002878:	2b00      	cmp	r3, #0
 800287a:	d023      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	4798      	blx	r3
 8002884:	e01e      	b.n	80028c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10f      	bne.n	80028b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 0210 	bic.w	r2, r2, #16
 80028a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d032      	beq.n	8002932 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d022      	beq.n	800291e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2205      	movs	r2, #5
 80028dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 0201 	bic.w	r2, r2, #1
 80028ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	3301      	adds	r3, #1
 80028f4:	60bb      	str	r3, [r7, #8]
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d307      	bcc.n	800290c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f2      	bne.n	80028f0 <HAL_DMA_IRQHandler+0x2cc>
 800290a:	e000      	b.n	800290e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800290c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002922:	2b00      	cmp	r3, #0
 8002924:	d005      	beq.n	8002932 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	4798      	blx	r3
 800292e:	e000      	b.n	8002932 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002930:	bf00      	nop
    }
  }
}
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
 8002944:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002954:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	2b40      	cmp	r3, #64	@ 0x40
 8002964:	d108      	bne.n	8002978 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002976:	e007      	b.n	8002988 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68ba      	ldr	r2, [r7, #8]
 800297e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	60da      	str	r2, [r3, #12]
}
 8002988:	bf00      	nop
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	3b10      	subs	r3, #16
 80029a4:	4a14      	ldr	r2, [pc, #80]	@ (80029f8 <DMA_CalcBaseAndBitshift+0x64>)
 80029a6:	fba2 2303 	umull	r2, r3, r2, r3
 80029aa:	091b      	lsrs	r3, r3, #4
 80029ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029ae:	4a13      	ldr	r2, [pc, #76]	@ (80029fc <DMA_CalcBaseAndBitshift+0x68>)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4413      	add	r3, r2
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	461a      	mov	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d909      	bls.n	80029d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029ca:	f023 0303 	bic.w	r3, r3, #3
 80029ce:	1d1a      	adds	r2, r3, #4
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	659a      	str	r2, [r3, #88]	@ 0x58
 80029d4:	e007      	b.n	80029e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029de:	f023 0303 	bic.w	r3, r3, #3
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	aaaaaaab 	.word	0xaaaaaaab
 80029fc:	08005008 	.word	0x08005008

08002a00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d11f      	bne.n	8002a5a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	2b03      	cmp	r3, #3
 8002a1e:	d856      	bhi.n	8002ace <DMA_CheckFifoParam+0xce>
 8002a20:	a201      	add	r2, pc, #4	@ (adr r2, 8002a28 <DMA_CheckFifoParam+0x28>)
 8002a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a26:	bf00      	nop
 8002a28:	08002a39 	.word	0x08002a39
 8002a2c:	08002a4b 	.word	0x08002a4b
 8002a30:	08002a39 	.word	0x08002a39
 8002a34:	08002acf 	.word	0x08002acf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d046      	beq.n	8002ad2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a48:	e043      	b.n	8002ad2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a4e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a52:	d140      	bne.n	8002ad6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a58:	e03d      	b.n	8002ad6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a62:	d121      	bne.n	8002aa8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	2b03      	cmp	r3, #3
 8002a68:	d837      	bhi.n	8002ada <DMA_CheckFifoParam+0xda>
 8002a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8002a70 <DMA_CheckFifoParam+0x70>)
 8002a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a70:	08002a81 	.word	0x08002a81
 8002a74:	08002a87 	.word	0x08002a87
 8002a78:	08002a81 	.word	0x08002a81
 8002a7c:	08002a99 	.word	0x08002a99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	73fb      	strb	r3, [r7, #15]
      break;
 8002a84:	e030      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d025      	beq.n	8002ade <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a96:	e022      	b.n	8002ade <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a9c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002aa0:	d11f      	bne.n	8002ae2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002aa6:	e01c      	b.n	8002ae2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d903      	bls.n	8002ab6 <DMA_CheckFifoParam+0xb6>
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2b03      	cmp	r3, #3
 8002ab2:	d003      	beq.n	8002abc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ab4:	e018      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	73fb      	strb	r3, [r7, #15]
      break;
 8002aba:	e015      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00e      	beq.n	8002ae6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
      break;
 8002acc:	e00b      	b.n	8002ae6 <DMA_CheckFifoParam+0xe6>
      break;
 8002ace:	bf00      	nop
 8002ad0:	e00a      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ad2:	bf00      	nop
 8002ad4:	e008      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ad6:	bf00      	nop
 8002ad8:	e006      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ada:	bf00      	nop
 8002adc:	e004      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ade:	bf00      	nop
 8002ae0:	e002      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002ae2:	bf00      	nop
 8002ae4:	e000      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ae6:	bf00      	nop
    }
  } 
  
  return status; 
 8002ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop

08002af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b089      	sub	sp, #36	@ 0x24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b06:	2300      	movs	r3, #0
 8002b08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61fb      	str	r3, [r7, #28]
 8002b12:	e159      	b.n	8002dc8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b14:	2201      	movs	r2, #1
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	4013      	ands	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	f040 8148 	bne.w	8002dc2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d005      	beq.n	8002b4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d130      	bne.n	8002bac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	2203      	movs	r2, #3
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	68da      	ldr	r2, [r3, #12]
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b80:	2201      	movs	r2, #1
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	091b      	lsrs	r3, r3, #4
 8002b96:	f003 0201 	and.w	r2, r3, #1
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 0303 	and.w	r3, r3, #3
 8002bb4:	2b03      	cmp	r3, #3
 8002bb6:	d017      	beq.n	8002be8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	2203      	movs	r2, #3
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f003 0303 	and.w	r3, r3, #3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d123      	bne.n	8002c3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	08da      	lsrs	r2, r3, #3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3208      	adds	r2, #8
 8002bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	220f      	movs	r2, #15
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	43db      	mvns	r3, r3
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4013      	ands	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	691a      	ldr	r2, [r3, #16]
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	08da      	lsrs	r2, r3, #3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	3208      	adds	r2, #8
 8002c36:	69b9      	ldr	r1, [r7, #24]
 8002c38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	2203      	movs	r2, #3
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	4013      	ands	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f003 0203 	and.w	r2, r3, #3
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 80a2 	beq.w	8002dc2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	4b57      	ldr	r3, [pc, #348]	@ (8002de0 <HAL_GPIO_Init+0x2e8>)
 8002c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c86:	4a56      	ldr	r2, [pc, #344]	@ (8002de0 <HAL_GPIO_Init+0x2e8>)
 8002c88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c8e:	4b54      	ldr	r3, [pc, #336]	@ (8002de0 <HAL_GPIO_Init+0x2e8>)
 8002c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c9a:	4a52      	ldr	r2, [pc, #328]	@ (8002de4 <HAL_GPIO_Init+0x2ec>)
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	089b      	lsrs	r3, r3, #2
 8002ca0:	3302      	adds	r3, #2
 8002ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	f003 0303 	and.w	r3, r3, #3
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	220f      	movs	r2, #15
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a49      	ldr	r2, [pc, #292]	@ (8002de8 <HAL_GPIO_Init+0x2f0>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d019      	beq.n	8002cfa <HAL_GPIO_Init+0x202>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a48      	ldr	r2, [pc, #288]	@ (8002dec <HAL_GPIO_Init+0x2f4>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d013      	beq.n	8002cf6 <HAL_GPIO_Init+0x1fe>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a47      	ldr	r2, [pc, #284]	@ (8002df0 <HAL_GPIO_Init+0x2f8>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d00d      	beq.n	8002cf2 <HAL_GPIO_Init+0x1fa>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a46      	ldr	r2, [pc, #280]	@ (8002df4 <HAL_GPIO_Init+0x2fc>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d007      	beq.n	8002cee <HAL_GPIO_Init+0x1f6>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a45      	ldr	r2, [pc, #276]	@ (8002df8 <HAL_GPIO_Init+0x300>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d101      	bne.n	8002cea <HAL_GPIO_Init+0x1f2>
 8002ce6:	2304      	movs	r3, #4
 8002ce8:	e008      	b.n	8002cfc <HAL_GPIO_Init+0x204>
 8002cea:	2307      	movs	r3, #7
 8002cec:	e006      	b.n	8002cfc <HAL_GPIO_Init+0x204>
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e004      	b.n	8002cfc <HAL_GPIO_Init+0x204>
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	e002      	b.n	8002cfc <HAL_GPIO_Init+0x204>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e000      	b.n	8002cfc <HAL_GPIO_Init+0x204>
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	69fa      	ldr	r2, [r7, #28]
 8002cfe:	f002 0203 	and.w	r2, r2, #3
 8002d02:	0092      	lsls	r2, r2, #2
 8002d04:	4093      	lsls	r3, r2
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d0c:	4935      	ldr	r1, [pc, #212]	@ (8002de4 <HAL_GPIO_Init+0x2ec>)
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	089b      	lsrs	r3, r3, #2
 8002d12:	3302      	adds	r3, #2
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d1a:	4b38      	ldr	r3, [pc, #224]	@ (8002dfc <HAL_GPIO_Init+0x304>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	43db      	mvns	r3, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4013      	ands	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d3e:	4a2f      	ldr	r2, [pc, #188]	@ (8002dfc <HAL_GPIO_Init+0x304>)
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d44:	4b2d      	ldr	r3, [pc, #180]	@ (8002dfc <HAL_GPIO_Init+0x304>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4013      	ands	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d003      	beq.n	8002d68 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d68:	4a24      	ldr	r2, [pc, #144]	@ (8002dfc <HAL_GPIO_Init+0x304>)
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d6e:	4b23      	ldr	r3, [pc, #140]	@ (8002dfc <HAL_GPIO_Init+0x304>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	43db      	mvns	r3, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d92:	4a1a      	ldr	r2, [pc, #104]	@ (8002dfc <HAL_GPIO_Init+0x304>)
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d98:	4b18      	ldr	r3, [pc, #96]	@ (8002dfc <HAL_GPIO_Init+0x304>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	43db      	mvns	r3, r3
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	4013      	ands	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d003      	beq.n	8002dbc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dbc:	4a0f      	ldr	r2, [pc, #60]	@ (8002dfc <HAL_GPIO_Init+0x304>)
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	61fb      	str	r3, [r7, #28]
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	2b0f      	cmp	r3, #15
 8002dcc:	f67f aea2 	bls.w	8002b14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dd0:	bf00      	nop
 8002dd2:	bf00      	nop
 8002dd4:	3724      	adds	r7, #36	@ 0x24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	40023800 	.word	0x40023800
 8002de4:	40013800 	.word	0x40013800
 8002de8:	40020000 	.word	0x40020000
 8002dec:	40020400 	.word	0x40020400
 8002df0:	40020800 	.word	0x40020800
 8002df4:	40020c00 	.word	0x40020c00
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	40013c00 	.word	0x40013c00

08002e00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	691a      	ldr	r2, [r3, #16]
 8002e10:	887b      	ldrh	r3, [r7, #2]
 8002e12:	4013      	ands	r3, r2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d002      	beq.n	8002e1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	73fb      	strb	r3, [r7, #15]
 8002e1c:	e001      	b.n	8002e22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	807b      	strh	r3, [r7, #2]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e40:	787b      	ldrb	r3, [r7, #1]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e46:	887a      	ldrh	r2, [r7, #2]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e4c:	e003      	b.n	8002e56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e4e:	887b      	ldrh	r3, [r7, #2]
 8002e50:	041a      	lsls	r2, r3, #16
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	619a      	str	r2, [r3, #24]
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b085      	sub	sp, #20
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e74:	887a      	ldrh	r2, [r7, #2]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	041a      	lsls	r2, r3, #16
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	43d9      	mvns	r1, r3
 8002e80:	887b      	ldrh	r3, [r7, #2]
 8002e82:	400b      	ands	r3, r1
 8002e84:	431a      	orrs	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	619a      	str	r2, [r3, #24]
}
 8002e8a:	bf00      	nop
 8002e8c:	3714      	adds	r7, #20
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
	...

08002e98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e267      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d075      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002eb6:	4b88      	ldr	r3, [pc, #544]	@ (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 030c 	and.w	r3, r3, #12
 8002ebe:	2b04      	cmp	r3, #4
 8002ec0:	d00c      	beq.n	8002edc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ec2:	4b85      	ldr	r3, [pc, #532]	@ (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002eca:	2b08      	cmp	r3, #8
 8002ecc:	d112      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ece:	4b82      	ldr	r3, [pc, #520]	@ (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ed6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002eda:	d10b      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002edc:	4b7e      	ldr	r3, [pc, #504]	@ (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d05b      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x108>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d157      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e242      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002efc:	d106      	bne.n	8002f0c <HAL_RCC_OscConfig+0x74>
 8002efe:	4b76      	ldr	r3, [pc, #472]	@ (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a75      	ldr	r2, [pc, #468]	@ (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002f04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	e01d      	b.n	8002f48 <HAL_RCC_OscConfig+0xb0>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f14:	d10c      	bne.n	8002f30 <HAL_RCC_OscConfig+0x98>
 8002f16:	4b70      	ldr	r3, [pc, #448]	@ (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a6f      	ldr	r2, [pc, #444]	@ (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f20:	6013      	str	r3, [r2, #0]
 8002f22:	4b6d      	ldr	r3, [pc, #436]	@ (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a6c      	ldr	r2, [pc, #432]	@ (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002f28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	e00b      	b.n	8002f48 <HAL_RCC_OscConfig+0xb0>
 8002f30:	4b69      	ldr	r3, [pc, #420]	@ (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a68      	ldr	r2, [pc, #416]	@ (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002f36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f3a:	6013      	str	r3, [r2, #0]
 8002f3c:	4b66      	ldr	r3, [pc, #408]	@ (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a65      	ldr	r2, [pc, #404]	@ (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002f42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d013      	beq.n	8002f78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f50:	f7fe fc0a 	bl	8001768 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f58:	f7fe fc06 	bl	8001768 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b64      	cmp	r3, #100	@ 0x64
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e207      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6a:	4b5b      	ldr	r3, [pc, #364]	@ (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0f0      	beq.n	8002f58 <HAL_RCC_OscConfig+0xc0>
 8002f76:	e014      	b.n	8002fa2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f78:	f7fe fbf6 	bl	8001768 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f80:	f7fe fbf2 	bl	8001768 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b64      	cmp	r3, #100	@ 0x64
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e1f3      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f92:	4b51      	ldr	r3, [pc, #324]	@ (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1f0      	bne.n	8002f80 <HAL_RCC_OscConfig+0xe8>
 8002f9e:	e000      	b.n	8002fa2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d063      	beq.n	8003076 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002fae:	4b4a      	ldr	r3, [pc, #296]	@ (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 030c 	and.w	r3, r3, #12
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00b      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fba:	4b47      	ldr	r3, [pc, #284]	@ (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002fc2:	2b08      	cmp	r3, #8
 8002fc4:	d11c      	bne.n	8003000 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fc6:	4b44      	ldr	r3, [pc, #272]	@ (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d116      	bne.n	8003000 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fd2:	4b41      	ldr	r3, [pc, #260]	@ (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d005      	beq.n	8002fea <HAL_RCC_OscConfig+0x152>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d001      	beq.n	8002fea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e1c7      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fea:	4b3b      	ldr	r3, [pc, #236]	@ (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	4937      	ldr	r1, [pc, #220]	@ (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ffe:	e03a      	b.n	8003076 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d020      	beq.n	800304a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003008:	4b34      	ldr	r3, [pc, #208]	@ (80030dc <HAL_RCC_OscConfig+0x244>)
 800300a:	2201      	movs	r2, #1
 800300c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300e:	f7fe fbab 	bl	8001768 <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003016:	f7fe fba7 	bl	8001768 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e1a8      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003028:	4b2b      	ldr	r3, [pc, #172]	@ (80030d8 <HAL_RCC_OscConfig+0x240>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0302 	and.w	r3, r3, #2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0f0      	beq.n	8003016 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003034:	4b28      	ldr	r3, [pc, #160]	@ (80030d8 <HAL_RCC_OscConfig+0x240>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	00db      	lsls	r3, r3, #3
 8003042:	4925      	ldr	r1, [pc, #148]	@ (80030d8 <HAL_RCC_OscConfig+0x240>)
 8003044:	4313      	orrs	r3, r2
 8003046:	600b      	str	r3, [r1, #0]
 8003048:	e015      	b.n	8003076 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800304a:	4b24      	ldr	r3, [pc, #144]	@ (80030dc <HAL_RCC_OscConfig+0x244>)
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003050:	f7fe fb8a 	bl	8001768 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003058:	f7fe fb86 	bl	8001768 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e187      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800306a:	4b1b      	ldr	r3, [pc, #108]	@ (80030d8 <HAL_RCC_OscConfig+0x240>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1f0      	bne.n	8003058 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0308 	and.w	r3, r3, #8
 800307e:	2b00      	cmp	r3, #0
 8003080:	d036      	beq.n	80030f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d016      	beq.n	80030b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800308a:	4b15      	ldr	r3, [pc, #84]	@ (80030e0 <HAL_RCC_OscConfig+0x248>)
 800308c:	2201      	movs	r2, #1
 800308e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003090:	f7fe fb6a 	bl	8001768 <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003096:	e008      	b.n	80030aa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003098:	f7fe fb66 	bl	8001768 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e167      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030aa:	4b0b      	ldr	r3, [pc, #44]	@ (80030d8 <HAL_RCC_OscConfig+0x240>)
 80030ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d0f0      	beq.n	8003098 <HAL_RCC_OscConfig+0x200>
 80030b6:	e01b      	b.n	80030f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030b8:	4b09      	ldr	r3, [pc, #36]	@ (80030e0 <HAL_RCC_OscConfig+0x248>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030be:	f7fe fb53 	bl	8001768 <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c4:	e00e      	b.n	80030e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030c6:	f7fe fb4f 	bl	8001768 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d907      	bls.n	80030e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e150      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
 80030d8:	40023800 	.word	0x40023800
 80030dc:	42470000 	.word	0x42470000
 80030e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e4:	4b88      	ldr	r3, [pc, #544]	@ (8003308 <HAL_RCC_OscConfig+0x470>)
 80030e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1ea      	bne.n	80030c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 8097 	beq.w	800322c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030fe:	2300      	movs	r3, #0
 8003100:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003102:	4b81      	ldr	r3, [pc, #516]	@ (8003308 <HAL_RCC_OscConfig+0x470>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003106:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10f      	bne.n	800312e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800310e:	2300      	movs	r3, #0
 8003110:	60bb      	str	r3, [r7, #8]
 8003112:	4b7d      	ldr	r3, [pc, #500]	@ (8003308 <HAL_RCC_OscConfig+0x470>)
 8003114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003116:	4a7c      	ldr	r2, [pc, #496]	@ (8003308 <HAL_RCC_OscConfig+0x470>)
 8003118:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800311c:	6413      	str	r3, [r2, #64]	@ 0x40
 800311e:	4b7a      	ldr	r3, [pc, #488]	@ (8003308 <HAL_RCC_OscConfig+0x470>)
 8003120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003126:	60bb      	str	r3, [r7, #8]
 8003128:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800312a:	2301      	movs	r3, #1
 800312c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800312e:	4b77      	ldr	r3, [pc, #476]	@ (800330c <HAL_RCC_OscConfig+0x474>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003136:	2b00      	cmp	r3, #0
 8003138:	d118      	bne.n	800316c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800313a:	4b74      	ldr	r3, [pc, #464]	@ (800330c <HAL_RCC_OscConfig+0x474>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a73      	ldr	r2, [pc, #460]	@ (800330c <HAL_RCC_OscConfig+0x474>)
 8003140:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003144:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003146:	f7fe fb0f 	bl	8001768 <HAL_GetTick>
 800314a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314c:	e008      	b.n	8003160 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800314e:	f7fe fb0b 	bl	8001768 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e10c      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003160:	4b6a      	ldr	r3, [pc, #424]	@ (800330c <HAL_RCC_OscConfig+0x474>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0f0      	beq.n	800314e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d106      	bne.n	8003182 <HAL_RCC_OscConfig+0x2ea>
 8003174:	4b64      	ldr	r3, [pc, #400]	@ (8003308 <HAL_RCC_OscConfig+0x470>)
 8003176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003178:	4a63      	ldr	r2, [pc, #396]	@ (8003308 <HAL_RCC_OscConfig+0x470>)
 800317a:	f043 0301 	orr.w	r3, r3, #1
 800317e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003180:	e01c      	b.n	80031bc <HAL_RCC_OscConfig+0x324>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	2b05      	cmp	r3, #5
 8003188:	d10c      	bne.n	80031a4 <HAL_RCC_OscConfig+0x30c>
 800318a:	4b5f      	ldr	r3, [pc, #380]	@ (8003308 <HAL_RCC_OscConfig+0x470>)
 800318c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800318e:	4a5e      	ldr	r2, [pc, #376]	@ (8003308 <HAL_RCC_OscConfig+0x470>)
 8003190:	f043 0304 	orr.w	r3, r3, #4
 8003194:	6713      	str	r3, [r2, #112]	@ 0x70
 8003196:	4b5c      	ldr	r3, [pc, #368]	@ (8003308 <HAL_RCC_OscConfig+0x470>)
 8003198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800319a:	4a5b      	ldr	r2, [pc, #364]	@ (8003308 <HAL_RCC_OscConfig+0x470>)
 800319c:	f043 0301 	orr.w	r3, r3, #1
 80031a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80031a2:	e00b      	b.n	80031bc <HAL_RCC_OscConfig+0x324>
 80031a4:	4b58      	ldr	r3, [pc, #352]	@ (8003308 <HAL_RCC_OscConfig+0x470>)
 80031a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031a8:	4a57      	ldr	r2, [pc, #348]	@ (8003308 <HAL_RCC_OscConfig+0x470>)
 80031aa:	f023 0301 	bic.w	r3, r3, #1
 80031ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80031b0:	4b55      	ldr	r3, [pc, #340]	@ (8003308 <HAL_RCC_OscConfig+0x470>)
 80031b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031b4:	4a54      	ldr	r2, [pc, #336]	@ (8003308 <HAL_RCC_OscConfig+0x470>)
 80031b6:	f023 0304 	bic.w	r3, r3, #4
 80031ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d015      	beq.n	80031f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c4:	f7fe fad0 	bl	8001768 <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ca:	e00a      	b.n	80031e2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031cc:	f7fe facc 	bl	8001768 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031da:	4293      	cmp	r3, r2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e0cb      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e2:	4b49      	ldr	r3, [pc, #292]	@ (8003308 <HAL_RCC_OscConfig+0x470>)
 80031e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d0ee      	beq.n	80031cc <HAL_RCC_OscConfig+0x334>
 80031ee:	e014      	b.n	800321a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031f0:	f7fe faba 	bl	8001768 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031f6:	e00a      	b.n	800320e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031f8:	f7fe fab6 	bl	8001768 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003206:	4293      	cmp	r3, r2
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e0b5      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800320e:	4b3e      	ldr	r3, [pc, #248]	@ (8003308 <HAL_RCC_OscConfig+0x470>)
 8003210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1ee      	bne.n	80031f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800321a:	7dfb      	ldrb	r3, [r7, #23]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d105      	bne.n	800322c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003220:	4b39      	ldr	r3, [pc, #228]	@ (8003308 <HAL_RCC_OscConfig+0x470>)
 8003222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003224:	4a38      	ldr	r2, [pc, #224]	@ (8003308 <HAL_RCC_OscConfig+0x470>)
 8003226:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800322a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 80a1 	beq.w	8003378 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003236:	4b34      	ldr	r3, [pc, #208]	@ (8003308 <HAL_RCC_OscConfig+0x470>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 030c 	and.w	r3, r3, #12
 800323e:	2b08      	cmp	r3, #8
 8003240:	d05c      	beq.n	80032fc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	2b02      	cmp	r3, #2
 8003248:	d141      	bne.n	80032ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800324a:	4b31      	ldr	r3, [pc, #196]	@ (8003310 <HAL_RCC_OscConfig+0x478>)
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003250:	f7fe fa8a 	bl	8001768 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003258:	f7fe fa86 	bl	8001768 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e087      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800326a:	4b27      	ldr	r3, [pc, #156]	@ (8003308 <HAL_RCC_OscConfig+0x470>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1f0      	bne.n	8003258 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	69da      	ldr	r2, [r3, #28]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	431a      	orrs	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003284:	019b      	lsls	r3, r3, #6
 8003286:	431a      	orrs	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800328c:	085b      	lsrs	r3, r3, #1
 800328e:	3b01      	subs	r3, #1
 8003290:	041b      	lsls	r3, r3, #16
 8003292:	431a      	orrs	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003298:	061b      	lsls	r3, r3, #24
 800329a:	491b      	ldr	r1, [pc, #108]	@ (8003308 <HAL_RCC_OscConfig+0x470>)
 800329c:	4313      	orrs	r3, r2
 800329e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003310 <HAL_RCC_OscConfig+0x478>)
 80032a2:	2201      	movs	r2, #1
 80032a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a6:	f7fe fa5f 	bl	8001768 <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ae:	f7fe fa5b 	bl	8001768 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e05c      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032c0:	4b11      	ldr	r3, [pc, #68]	@ (8003308 <HAL_RCC_OscConfig+0x470>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0f0      	beq.n	80032ae <HAL_RCC_OscConfig+0x416>
 80032cc:	e054      	b.n	8003378 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ce:	4b10      	ldr	r3, [pc, #64]	@ (8003310 <HAL_RCC_OscConfig+0x478>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d4:	f7fe fa48 	bl	8001768 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032dc:	f7fe fa44 	bl	8001768 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e045      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ee:	4b06      	ldr	r3, [pc, #24]	@ (8003308 <HAL_RCC_OscConfig+0x470>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1f0      	bne.n	80032dc <HAL_RCC_OscConfig+0x444>
 80032fa:	e03d      	b.n	8003378 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d107      	bne.n	8003314 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e038      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
 8003308:	40023800 	.word	0x40023800
 800330c:	40007000 	.word	0x40007000
 8003310:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003314:	4b1b      	ldr	r3, [pc, #108]	@ (8003384 <HAL_RCC_OscConfig+0x4ec>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d028      	beq.n	8003374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800332c:	429a      	cmp	r2, r3
 800332e:	d121      	bne.n	8003374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800333a:	429a      	cmp	r2, r3
 800333c:	d11a      	bne.n	8003374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003344:	4013      	ands	r3, r2
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800334a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800334c:	4293      	cmp	r3, r2
 800334e:	d111      	bne.n	8003374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800335a:	085b      	lsrs	r3, r3, #1
 800335c:	3b01      	subs	r3, #1
 800335e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003360:	429a      	cmp	r2, r3
 8003362:	d107      	bne.n	8003374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800336e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003370:	429a      	cmp	r2, r3
 8003372:	d001      	beq.n	8003378 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e000      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3718      	adds	r7, #24
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	40023800 	.word	0x40023800

08003388 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d101      	bne.n	800339c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e0cc      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800339c:	4b68      	ldr	r3, [pc, #416]	@ (8003540 <HAL_RCC_ClockConfig+0x1b8>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d90c      	bls.n	80033c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033aa:	4b65      	ldr	r3, [pc, #404]	@ (8003540 <HAL_RCC_ClockConfig+0x1b8>)
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	b2d2      	uxtb	r2, r2
 80033b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b2:	4b63      	ldr	r3, [pc, #396]	@ (8003540 <HAL_RCC_ClockConfig+0x1b8>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0307 	and.w	r3, r3, #7
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d001      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e0b8      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d020      	beq.n	8003412 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d005      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033dc:	4b59      	ldr	r3, [pc, #356]	@ (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	4a58      	ldr	r2, [pc, #352]	@ (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 80033e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80033e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0308 	and.w	r3, r3, #8
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d005      	beq.n	8003400 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033f4:	4b53      	ldr	r3, [pc, #332]	@ (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	4a52      	ldr	r2, [pc, #328]	@ (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 80033fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80033fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003400:	4b50      	ldr	r3, [pc, #320]	@ (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	494d      	ldr	r1, [pc, #308]	@ (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 800340e:	4313      	orrs	r3, r2
 8003410:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d044      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d107      	bne.n	8003436 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003426:	4b47      	ldr	r3, [pc, #284]	@ (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d119      	bne.n	8003466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e07f      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2b02      	cmp	r3, #2
 800343c:	d003      	beq.n	8003446 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003442:	2b03      	cmp	r3, #3
 8003444:	d107      	bne.n	8003456 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003446:	4b3f      	ldr	r3, [pc, #252]	@ (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d109      	bne.n	8003466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e06f      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003456:	4b3b      	ldr	r3, [pc, #236]	@ (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e067      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003466:	4b37      	ldr	r3, [pc, #220]	@ (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f023 0203 	bic.w	r2, r3, #3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	4934      	ldr	r1, [pc, #208]	@ (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 8003474:	4313      	orrs	r3, r2
 8003476:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003478:	f7fe f976 	bl	8001768 <HAL_GetTick>
 800347c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347e:	e00a      	b.n	8003496 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003480:	f7fe f972 	bl	8001768 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800348e:	4293      	cmp	r3, r2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e04f      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003496:	4b2b      	ldr	r3, [pc, #172]	@ (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 020c 	and.w	r2, r3, #12
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d1eb      	bne.n	8003480 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034a8:	4b25      	ldr	r3, [pc, #148]	@ (8003540 <HAL_RCC_ClockConfig+0x1b8>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d20c      	bcs.n	80034d0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b6:	4b22      	ldr	r3, [pc, #136]	@ (8003540 <HAL_RCC_ClockConfig+0x1b8>)
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	b2d2      	uxtb	r2, r2
 80034bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034be:	4b20      	ldr	r3, [pc, #128]	@ (8003540 <HAL_RCC_ClockConfig+0x1b8>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d001      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e032      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d008      	beq.n	80034ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034dc:	4b19      	ldr	r3, [pc, #100]	@ (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	4916      	ldr	r1, [pc, #88]	@ (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0308 	and.w	r3, r3, #8
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d009      	beq.n	800350e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034fa:	4b12      	ldr	r3, [pc, #72]	@ (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	490e      	ldr	r1, [pc, #56]	@ (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 800350a:	4313      	orrs	r3, r2
 800350c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800350e:	f000 f821 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 8003512:	4602      	mov	r2, r0
 8003514:	4b0b      	ldr	r3, [pc, #44]	@ (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	091b      	lsrs	r3, r3, #4
 800351a:	f003 030f 	and.w	r3, r3, #15
 800351e:	490a      	ldr	r1, [pc, #40]	@ (8003548 <HAL_RCC_ClockConfig+0x1c0>)
 8003520:	5ccb      	ldrb	r3, [r1, r3]
 8003522:	fa22 f303 	lsr.w	r3, r2, r3
 8003526:	4a09      	ldr	r2, [pc, #36]	@ (800354c <HAL_RCC_ClockConfig+0x1c4>)
 8003528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800352a:	4b09      	ldr	r3, [pc, #36]	@ (8003550 <HAL_RCC_ClockConfig+0x1c8>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f7fe f8d6 	bl	80016e0 <HAL_InitTick>

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40023c00 	.word	0x40023c00
 8003544:	40023800 	.word	0x40023800
 8003548:	08004ff8 	.word	0x08004ff8
 800354c:	2000000c 	.word	0x2000000c
 8003550:	20000010 	.word	0x20000010

08003554 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003554:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003558:	b090      	sub	sp, #64	@ 0x40
 800355a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800355c:	2300      	movs	r3, #0
 800355e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003560:	2300      	movs	r3, #0
 8003562:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003564:	2300      	movs	r3, #0
 8003566:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003568:	2300      	movs	r3, #0
 800356a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800356c:	4b59      	ldr	r3, [pc, #356]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 030c 	and.w	r3, r3, #12
 8003574:	2b08      	cmp	r3, #8
 8003576:	d00d      	beq.n	8003594 <HAL_RCC_GetSysClockFreq+0x40>
 8003578:	2b08      	cmp	r3, #8
 800357a:	f200 80a1 	bhi.w	80036c0 <HAL_RCC_GetSysClockFreq+0x16c>
 800357e:	2b00      	cmp	r3, #0
 8003580:	d002      	beq.n	8003588 <HAL_RCC_GetSysClockFreq+0x34>
 8003582:	2b04      	cmp	r3, #4
 8003584:	d003      	beq.n	800358e <HAL_RCC_GetSysClockFreq+0x3a>
 8003586:	e09b      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003588:	4b53      	ldr	r3, [pc, #332]	@ (80036d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800358a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800358c:	e09b      	b.n	80036c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800358e:	4b53      	ldr	r3, [pc, #332]	@ (80036dc <HAL_RCC_GetSysClockFreq+0x188>)
 8003590:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003592:	e098      	b.n	80036c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003594:	4b4f      	ldr	r3, [pc, #316]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800359c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800359e:	4b4d      	ldr	r3, [pc, #308]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d028      	beq.n	80035fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035aa:	4b4a      	ldr	r3, [pc, #296]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	099b      	lsrs	r3, r3, #6
 80035b0:	2200      	movs	r2, #0
 80035b2:	623b      	str	r3, [r7, #32]
 80035b4:	627a      	str	r2, [r7, #36]	@ 0x24
 80035b6:	6a3b      	ldr	r3, [r7, #32]
 80035b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80035bc:	2100      	movs	r1, #0
 80035be:	4b47      	ldr	r3, [pc, #284]	@ (80036dc <HAL_RCC_GetSysClockFreq+0x188>)
 80035c0:	fb03 f201 	mul.w	r2, r3, r1
 80035c4:	2300      	movs	r3, #0
 80035c6:	fb00 f303 	mul.w	r3, r0, r3
 80035ca:	4413      	add	r3, r2
 80035cc:	4a43      	ldr	r2, [pc, #268]	@ (80036dc <HAL_RCC_GetSysClockFreq+0x188>)
 80035ce:	fba0 1202 	umull	r1, r2, r0, r2
 80035d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035d4:	460a      	mov	r2, r1
 80035d6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80035d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035da:	4413      	add	r3, r2
 80035dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035e0:	2200      	movs	r2, #0
 80035e2:	61bb      	str	r3, [r7, #24]
 80035e4:	61fa      	str	r2, [r7, #28]
 80035e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80035ee:	f7fc fdf1 	bl	80001d4 <__aeabi_uldivmod>
 80035f2:	4602      	mov	r2, r0
 80035f4:	460b      	mov	r3, r1
 80035f6:	4613      	mov	r3, r2
 80035f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035fa:	e053      	b.n	80036a4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035fc:	4b35      	ldr	r3, [pc, #212]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	099b      	lsrs	r3, r3, #6
 8003602:	2200      	movs	r2, #0
 8003604:	613b      	str	r3, [r7, #16]
 8003606:	617a      	str	r2, [r7, #20]
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800360e:	f04f 0b00 	mov.w	fp, #0
 8003612:	4652      	mov	r2, sl
 8003614:	465b      	mov	r3, fp
 8003616:	f04f 0000 	mov.w	r0, #0
 800361a:	f04f 0100 	mov.w	r1, #0
 800361e:	0159      	lsls	r1, r3, #5
 8003620:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003624:	0150      	lsls	r0, r2, #5
 8003626:	4602      	mov	r2, r0
 8003628:	460b      	mov	r3, r1
 800362a:	ebb2 080a 	subs.w	r8, r2, sl
 800362e:	eb63 090b 	sbc.w	r9, r3, fp
 8003632:	f04f 0200 	mov.w	r2, #0
 8003636:	f04f 0300 	mov.w	r3, #0
 800363a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800363e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003642:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003646:	ebb2 0408 	subs.w	r4, r2, r8
 800364a:	eb63 0509 	sbc.w	r5, r3, r9
 800364e:	f04f 0200 	mov.w	r2, #0
 8003652:	f04f 0300 	mov.w	r3, #0
 8003656:	00eb      	lsls	r3, r5, #3
 8003658:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800365c:	00e2      	lsls	r2, r4, #3
 800365e:	4614      	mov	r4, r2
 8003660:	461d      	mov	r5, r3
 8003662:	eb14 030a 	adds.w	r3, r4, sl
 8003666:	603b      	str	r3, [r7, #0]
 8003668:	eb45 030b 	adc.w	r3, r5, fp
 800366c:	607b      	str	r3, [r7, #4]
 800366e:	f04f 0200 	mov.w	r2, #0
 8003672:	f04f 0300 	mov.w	r3, #0
 8003676:	e9d7 4500 	ldrd	r4, r5, [r7]
 800367a:	4629      	mov	r1, r5
 800367c:	028b      	lsls	r3, r1, #10
 800367e:	4621      	mov	r1, r4
 8003680:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003684:	4621      	mov	r1, r4
 8003686:	028a      	lsls	r2, r1, #10
 8003688:	4610      	mov	r0, r2
 800368a:	4619      	mov	r1, r3
 800368c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800368e:	2200      	movs	r2, #0
 8003690:	60bb      	str	r3, [r7, #8]
 8003692:	60fa      	str	r2, [r7, #12]
 8003694:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003698:	f7fc fd9c 	bl	80001d4 <__aeabi_uldivmod>
 800369c:	4602      	mov	r2, r0
 800369e:	460b      	mov	r3, r1
 80036a0:	4613      	mov	r3, r2
 80036a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80036a4:	4b0b      	ldr	r3, [pc, #44]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	0c1b      	lsrs	r3, r3, #16
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	3301      	adds	r3, #1
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80036b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80036b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80036be:	e002      	b.n	80036c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036c0:	4b05      	ldr	r3, [pc, #20]	@ (80036d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80036c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80036c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3740      	adds	r7, #64	@ 0x40
 80036cc:	46bd      	mov	sp, r7
 80036ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036d2:	bf00      	nop
 80036d4:	40023800 	.word	0x40023800
 80036d8:	00f42400 	.word	0x00f42400
 80036dc:	017d7840 	.word	0x017d7840

080036e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e07b      	b.n	80037ea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d108      	bne.n	800370c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003702:	d009      	beq.n	8003718 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	61da      	str	r2, [r3, #28]
 800370a:	e005      	b.n	8003718 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d106      	bne.n	8003738 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7fd fe8e 	bl	8001454 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800374e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003760:	431a      	orrs	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	431a      	orrs	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003788:	431a      	orrs	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800379c:	ea42 0103 	orr.w	r1, r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	0c1b      	lsrs	r3, r3, #16
 80037b6:	f003 0104 	and.w	r1, r3, #4
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037be:	f003 0210 	and.w	r2, r3, #16
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	69da      	ldr	r2, [r3, #28]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b088      	sub	sp, #32
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	60f8      	str	r0, [r7, #12]
 80037fa:	60b9      	str	r1, [r7, #8]
 80037fc:	603b      	str	r3, [r7, #0]
 80037fe:	4613      	mov	r3, r2
 8003800:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003802:	f7fd ffb1 	bl	8001768 <HAL_GetTick>
 8003806:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003808:	88fb      	ldrh	r3, [r7, #6]
 800380a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b01      	cmp	r3, #1
 8003816:	d001      	beq.n	800381c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003818:	2302      	movs	r3, #2
 800381a:	e12a      	b.n	8003a72 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d002      	beq.n	8003828 <HAL_SPI_Transmit+0x36>
 8003822:	88fb      	ldrh	r3, [r7, #6]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e122      	b.n	8003a72 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003832:	2b01      	cmp	r3, #1
 8003834:	d101      	bne.n	800383a <HAL_SPI_Transmit+0x48>
 8003836:	2302      	movs	r3, #2
 8003838:	e11b      	b.n	8003a72 <HAL_SPI_Transmit+0x280>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2203      	movs	r2, #3
 8003846:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	68ba      	ldr	r2, [r7, #8]
 8003854:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	88fa      	ldrh	r2, [r7, #6]
 800385a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	88fa      	ldrh	r2, [r7, #6]
 8003860:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003888:	d10f      	bne.n	80038aa <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003898:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80038a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038b4:	2b40      	cmp	r3, #64	@ 0x40
 80038b6:	d007      	beq.n	80038c8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038d0:	d152      	bne.n	8003978 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d002      	beq.n	80038e0 <HAL_SPI_Transmit+0xee>
 80038da:	8b7b      	ldrh	r3, [r7, #26]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d145      	bne.n	800396c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e4:	881a      	ldrh	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f0:	1c9a      	adds	r2, r3, #2
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	3b01      	subs	r3, #1
 80038fe:	b29a      	uxth	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003904:	e032      	b.n	800396c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b02      	cmp	r3, #2
 8003912:	d112      	bne.n	800393a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003918:	881a      	ldrh	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003924:	1c9a      	adds	r2, r3, #2
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800392e:	b29b      	uxth	r3, r3
 8003930:	3b01      	subs	r3, #1
 8003932:	b29a      	uxth	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003938:	e018      	b.n	800396c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800393a:	f7fd ff15 	bl	8001768 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	429a      	cmp	r2, r3
 8003948:	d803      	bhi.n	8003952 <HAL_SPI_Transmit+0x160>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003950:	d102      	bne.n	8003958 <HAL_SPI_Transmit+0x166>
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d109      	bne.n	800396c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e082      	b.n	8003a72 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003970:	b29b      	uxth	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1c7      	bne.n	8003906 <HAL_SPI_Transmit+0x114>
 8003976:	e053      	b.n	8003a20 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d002      	beq.n	8003986 <HAL_SPI_Transmit+0x194>
 8003980:	8b7b      	ldrh	r3, [r7, #26]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d147      	bne.n	8003a16 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	330c      	adds	r3, #12
 8003990:	7812      	ldrb	r2, [r2, #0]
 8003992:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003998:	1c5a      	adds	r2, r3, #1
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	3b01      	subs	r3, #1
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80039ac:	e033      	b.n	8003a16 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d113      	bne.n	80039e4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	330c      	adds	r3, #12
 80039c6:	7812      	ldrb	r2, [r2, #0]
 80039c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ce:	1c5a      	adds	r2, r3, #1
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039d8:	b29b      	uxth	r3, r3
 80039da:	3b01      	subs	r3, #1
 80039dc:	b29a      	uxth	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80039e2:	e018      	b.n	8003a16 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039e4:	f7fd fec0 	bl	8001768 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d803      	bhi.n	80039fc <HAL_SPI_Transmit+0x20a>
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039fa:	d102      	bne.n	8003a02 <HAL_SPI_Transmit+0x210>
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d109      	bne.n	8003a16 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e02d      	b.n	8003a72 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1c6      	bne.n	80039ae <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a20:	69fa      	ldr	r2, [r7, #28]
 8003a22:	6839      	ldr	r1, [r7, #0]
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f000 fbd9 	bl	80041dc <SPI_EndRxTxTransaction>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d002      	beq.n	8003a36 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2220      	movs	r2, #32
 8003a34:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10a      	bne.n	8003a54 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a3e:	2300      	movs	r3, #0
 8003a40:	617b      	str	r3, [r7, #20]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	617b      	str	r3, [r7, #20]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	617b      	str	r3, [r7, #20]
 8003a52:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e000      	b.n	8003a72 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003a70:	2300      	movs	r3, #0
  }
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3720      	adds	r7, #32
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b088      	sub	sp, #32
 8003a7e:	af02      	add	r7, sp, #8
 8003a80:	60f8      	str	r0, [r7, #12]
 8003a82:	60b9      	str	r1, [r7, #8]
 8003a84:	603b      	str	r3, [r7, #0]
 8003a86:	4613      	mov	r3, r2
 8003a88:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d001      	beq.n	8003a9a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003a96:	2302      	movs	r3, #2
 8003a98:	e104      	b.n	8003ca4 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003aa2:	d112      	bne.n	8003aca <HAL_SPI_Receive+0x50>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10e      	bne.n	8003aca <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2204      	movs	r2, #4
 8003ab0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003ab4:	88fa      	ldrh	r2, [r7, #6]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	4613      	mov	r3, r2
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	68b9      	ldr	r1, [r7, #8]
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f000 f8f3 	bl	8003cac <HAL_SPI_TransmitReceive>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	e0ec      	b.n	8003ca4 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003aca:	f7fd fe4d 	bl	8001768 <HAL_GetTick>
 8003ace:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d002      	beq.n	8003adc <HAL_SPI_Receive+0x62>
 8003ad6:	88fb      	ldrh	r3, [r7, #6]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d101      	bne.n	8003ae0 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e0e1      	b.n	8003ca4 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d101      	bne.n	8003aee <HAL_SPI_Receive+0x74>
 8003aea:	2302      	movs	r3, #2
 8003aec:	e0da      	b.n	8003ca4 <HAL_SPI_Receive+0x22a>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2204      	movs	r2, #4
 8003afa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	88fa      	ldrh	r2, [r7, #6]
 8003b0e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	88fa      	ldrh	r2, [r7, #6]
 8003b14:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b3c:	d10f      	bne.n	8003b5e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b4c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003b5c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b68:	2b40      	cmp	r3, #64	@ 0x40
 8003b6a:	d007      	beq.n	8003b7c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b7a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d170      	bne.n	8003c66 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003b84:	e035      	b.n	8003bf2 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f003 0301 	and.w	r3, r3, #1
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d115      	bne.n	8003bc0 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f103 020c 	add.w	r2, r3, #12
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba0:	7812      	ldrb	r2, [r2, #0]
 8003ba2:	b2d2      	uxtb	r2, r2
 8003ba4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003baa:	1c5a      	adds	r2, r3, #1
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003bbe:	e018      	b.n	8003bf2 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bc0:	f7fd fdd2 	bl	8001768 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d803      	bhi.n	8003bd8 <HAL_SPI_Receive+0x15e>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd6:	d102      	bne.n	8003bde <HAL_SPI_Receive+0x164>
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d109      	bne.n	8003bf2 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e058      	b.n	8003ca4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1c4      	bne.n	8003b86 <HAL_SPI_Receive+0x10c>
 8003bfc:	e038      	b.n	8003c70 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d113      	bne.n	8003c34 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68da      	ldr	r2, [r3, #12]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c16:	b292      	uxth	r2, r2
 8003c18:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c1e:	1c9a      	adds	r2, r3, #2
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c32:	e018      	b.n	8003c66 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c34:	f7fd fd98 	bl	8001768 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d803      	bhi.n	8003c4c <HAL_SPI_Receive+0x1d2>
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c4a:	d102      	bne.n	8003c52 <HAL_SPI_Receive+0x1d8>
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d109      	bne.n	8003c66 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e01e      	b.n	8003ca4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1c6      	bne.n	8003bfe <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	6839      	ldr	r1, [r7, #0]
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f000 fa4b 	bl	8004110 <SPI_EndRxTransaction>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d002      	beq.n	8003c86 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2220      	movs	r2, #32
 8003c84:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e000      	b.n	8003ca4 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
  }
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3718      	adds	r7, #24
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b08a      	sub	sp, #40	@ 0x28
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
 8003cb8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cbe:	f7fd fd53 	bl	8001768 <HAL_GetTick>
 8003cc2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003cca:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003cd2:	887b      	ldrh	r3, [r7, #2]
 8003cd4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003cd6:	7ffb      	ldrb	r3, [r7, #31]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d00c      	beq.n	8003cf6 <HAL_SPI_TransmitReceive+0x4a>
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ce2:	d106      	bne.n	8003cf2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d102      	bne.n	8003cf2 <HAL_SPI_TransmitReceive+0x46>
 8003cec:	7ffb      	ldrb	r3, [r7, #31]
 8003cee:	2b04      	cmp	r3, #4
 8003cf0:	d001      	beq.n	8003cf6 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	e17f      	b.n	8003ff6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d005      	beq.n	8003d08 <HAL_SPI_TransmitReceive+0x5c>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d002      	beq.n	8003d08 <HAL_SPI_TransmitReceive+0x5c>
 8003d02:	887b      	ldrh	r3, [r7, #2]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d101      	bne.n	8003d0c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e174      	b.n	8003ff6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d101      	bne.n	8003d1a <HAL_SPI_TransmitReceive+0x6e>
 8003d16:	2302      	movs	r3, #2
 8003d18:	e16d      	b.n	8003ff6 <HAL_SPI_TransmitReceive+0x34a>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	d003      	beq.n	8003d36 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2205      	movs	r2, #5
 8003d32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	887a      	ldrh	r2, [r7, #2]
 8003d46:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	887a      	ldrh	r2, [r7, #2]
 8003d4c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	68ba      	ldr	r2, [r7, #8]
 8003d52:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	887a      	ldrh	r2, [r7, #2]
 8003d58:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	887a      	ldrh	r2, [r7, #2]
 8003d5e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d76:	2b40      	cmp	r3, #64	@ 0x40
 8003d78:	d007      	beq.n	8003d8a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d88:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d92:	d17e      	bne.n	8003e92 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d002      	beq.n	8003da2 <HAL_SPI_TransmitReceive+0xf6>
 8003d9c:	8afb      	ldrh	r3, [r7, #22]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d16c      	bne.n	8003e7c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da6:	881a      	ldrh	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db2:	1c9a      	adds	r2, r3, #2
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dc6:	e059      	b.n	8003e7c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d11b      	bne.n	8003e0e <HAL_SPI_TransmitReceive+0x162>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d016      	beq.n	8003e0e <HAL_SPI_TransmitReceive+0x162>
 8003de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d113      	bne.n	8003e0e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dea:	881a      	ldrh	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df6:	1c9a      	adds	r2, r3, #2
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	3b01      	subs	r3, #1
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d119      	bne.n	8003e50 <HAL_SPI_TransmitReceive+0x1a4>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d014      	beq.n	8003e50 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68da      	ldr	r2, [r3, #12]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e30:	b292      	uxth	r2, r2
 8003e32:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e38:	1c9a      	adds	r2, r3, #2
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	3b01      	subs	r3, #1
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e50:	f7fd fc8a 	bl	8001768 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	6a3b      	ldr	r3, [r7, #32]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d80d      	bhi.n	8003e7c <HAL_SPI_TransmitReceive+0x1d0>
 8003e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e66:	d009      	beq.n	8003e7c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e0bc      	b.n	8003ff6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1a0      	bne.n	8003dc8 <HAL_SPI_TransmitReceive+0x11c>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d19b      	bne.n	8003dc8 <HAL_SPI_TransmitReceive+0x11c>
 8003e90:	e082      	b.n	8003f98 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d002      	beq.n	8003ea0 <HAL_SPI_TransmitReceive+0x1f4>
 8003e9a:	8afb      	ldrh	r3, [r7, #22]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d171      	bne.n	8003f84 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	330c      	adds	r3, #12
 8003eaa:	7812      	ldrb	r2, [r2, #0]
 8003eac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb2:	1c5a      	adds	r2, r3, #1
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ec6:	e05d      	b.n	8003f84 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d11c      	bne.n	8003f10 <HAL_SPI_TransmitReceive+0x264>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d017      	beq.n	8003f10 <HAL_SPI_TransmitReceive+0x264>
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d114      	bne.n	8003f10 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	330c      	adds	r3, #12
 8003ef0:	7812      	ldrb	r2, [r2, #0]
 8003ef2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef8:	1c5a      	adds	r2, r3, #1
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	3b01      	subs	r3, #1
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d119      	bne.n	8003f52 <HAL_SPI_TransmitReceive+0x2a6>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d014      	beq.n	8003f52 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68da      	ldr	r2, [r3, #12]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f32:	b2d2      	uxtb	r2, r2
 8003f34:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f3a:	1c5a      	adds	r2, r3, #1
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	3b01      	subs	r3, #1
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f52:	f7fd fc09 	bl	8001768 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	6a3b      	ldr	r3, [r7, #32]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d803      	bhi.n	8003f6a <HAL_SPI_TransmitReceive+0x2be>
 8003f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f68:	d102      	bne.n	8003f70 <HAL_SPI_TransmitReceive+0x2c4>
 8003f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d109      	bne.n	8003f84 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e038      	b.n	8003ff6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d19c      	bne.n	8003ec8 <HAL_SPI_TransmitReceive+0x21c>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d197      	bne.n	8003ec8 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f98:	6a3a      	ldr	r2, [r7, #32]
 8003f9a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f000 f91d 	bl	80041dc <SPI_EndRxTxTransaction>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d008      	beq.n	8003fba <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2220      	movs	r2, #32
 8003fac:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e01d      	b.n	8003ff6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10a      	bne.n	8003fd8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	613b      	str	r3, [r7, #16]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	613b      	str	r3, [r7, #16]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	613b      	str	r3, [r7, #16]
 8003fd6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e000      	b.n	8003ff6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
  }
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3728      	adds	r7, #40	@ 0x28
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
	...

08004000 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b088      	sub	sp, #32
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	603b      	str	r3, [r7, #0]
 800400c:	4613      	mov	r3, r2
 800400e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004010:	f7fd fbaa 	bl	8001768 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004018:	1a9b      	subs	r3, r3, r2
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	4413      	add	r3, r2
 800401e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004020:	f7fd fba2 	bl	8001768 <HAL_GetTick>
 8004024:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004026:	4b39      	ldr	r3, [pc, #228]	@ (800410c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	015b      	lsls	r3, r3, #5
 800402c:	0d1b      	lsrs	r3, r3, #20
 800402e:	69fa      	ldr	r2, [r7, #28]
 8004030:	fb02 f303 	mul.w	r3, r2, r3
 8004034:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004036:	e054      	b.n	80040e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800403e:	d050      	beq.n	80040e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004040:	f7fd fb92 	bl	8001768 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	69fa      	ldr	r2, [r7, #28]
 800404c:	429a      	cmp	r2, r3
 800404e:	d902      	bls.n	8004056 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d13d      	bne.n	80040d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004064:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800406e:	d111      	bne.n	8004094 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004078:	d004      	beq.n	8004084 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004082:	d107      	bne.n	8004094 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004092:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004098:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800409c:	d10f      	bne.n	80040be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e017      	b.n	8004102 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d101      	bne.n	80040dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80040d8:	2300      	movs	r3, #0
 80040da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	3b01      	subs	r3, #1
 80040e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	689a      	ldr	r2, [r3, #8]
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	4013      	ands	r3, r2
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	bf0c      	ite	eq
 80040f2:	2301      	moveq	r3, #1
 80040f4:	2300      	movne	r3, #0
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	461a      	mov	r2, r3
 80040fa:	79fb      	ldrb	r3, [r7, #7]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d19b      	bne.n	8004038 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3720      	adds	r7, #32
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	2000000c 	.word	0x2000000c

08004110 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af02      	add	r7, sp, #8
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004124:	d111      	bne.n	800414a <SPI_EndRxTransaction+0x3a>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800412e:	d004      	beq.n	800413a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004138:	d107      	bne.n	800414a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004148:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004152:	d12a      	bne.n	80041aa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800415c:	d012      	beq.n	8004184 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	9300      	str	r3, [sp, #0]
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	2200      	movs	r2, #0
 8004166:	2180      	movs	r1, #128	@ 0x80
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f7ff ff49 	bl	8004000 <SPI_WaitFlagStateUntilTimeout>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d02d      	beq.n	80041d0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004178:	f043 0220 	orr.w	r2, r3, #32
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e026      	b.n	80041d2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	9300      	str	r3, [sp, #0]
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	2200      	movs	r2, #0
 800418c:	2101      	movs	r1, #1
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f7ff ff36 	bl	8004000 <SPI_WaitFlagStateUntilTimeout>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d01a      	beq.n	80041d0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800419e:	f043 0220 	orr.w	r2, r3, #32
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e013      	b.n	80041d2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	2200      	movs	r2, #0
 80041b2:	2101      	movs	r1, #1
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f7ff ff23 	bl	8004000 <SPI_WaitFlagStateUntilTimeout>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d007      	beq.n	80041d0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041c4:	f043 0220 	orr.w	r2, r3, #32
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e000      	b.n	80041d2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
	...

080041dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b088      	sub	sp, #32
 80041e0:	af02      	add	r7, sp, #8
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	9300      	str	r3, [sp, #0]
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	2201      	movs	r2, #1
 80041f0:	2102      	movs	r1, #2
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f7ff ff04 	bl	8004000 <SPI_WaitFlagStateUntilTimeout>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d007      	beq.n	800420e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004202:	f043 0220 	orr.w	r2, r3, #32
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e032      	b.n	8004274 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800420e:	4b1b      	ldr	r3, [pc, #108]	@ (800427c <SPI_EndRxTxTransaction+0xa0>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a1b      	ldr	r2, [pc, #108]	@ (8004280 <SPI_EndRxTxTransaction+0xa4>)
 8004214:	fba2 2303 	umull	r2, r3, r2, r3
 8004218:	0d5b      	lsrs	r3, r3, #21
 800421a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800421e:	fb02 f303 	mul.w	r3, r2, r3
 8004222:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800422c:	d112      	bne.n	8004254 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	2200      	movs	r2, #0
 8004236:	2180      	movs	r1, #128	@ 0x80
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f7ff fee1 	bl	8004000 <SPI_WaitFlagStateUntilTimeout>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d016      	beq.n	8004272 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004248:	f043 0220 	orr.w	r2, r3, #32
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e00f      	b.n	8004274 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	3b01      	subs	r3, #1
 800425e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800426a:	2b80      	cmp	r3, #128	@ 0x80
 800426c:	d0f2      	beq.n	8004254 <SPI_EndRxTxTransaction+0x78>
 800426e:	e000      	b.n	8004272 <SPI_EndRxTxTransaction+0x96>
        break;
 8004270:	bf00      	nop
  }

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3718      	adds	r7, #24
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	2000000c 	.word	0x2000000c
 8004280:	165e9f81 	.word	0x165e9f81

08004284 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e041      	b.n	800431a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d106      	bne.n	80042b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7fd f91a 	bl	80014e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3304      	adds	r3, #4
 80042c0:	4619      	mov	r1, r3
 80042c2:	4610      	mov	r0, r2
 80042c4:	f000 fac0 	bl	8004848 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b082      	sub	sp, #8
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e041      	b.n	80043b8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800433a:	b2db      	uxtb	r3, r3
 800433c:	2b00      	cmp	r3, #0
 800433e:	d106      	bne.n	800434e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 f839 	bl	80043c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2202      	movs	r2, #2
 8004352:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	3304      	adds	r3, #4
 800435e:	4619      	mov	r1, r3
 8004360:	4610      	mov	r0, r2
 8004362:	f000 fa71 	bl	8004848 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2201      	movs	r2, #1
 800439a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3708      	adds	r7, #8
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d109      	bne.n	80043f8 <HAL_TIM_PWM_Start+0x24>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	bf14      	ite	ne
 80043f0:	2301      	movne	r3, #1
 80043f2:	2300      	moveq	r3, #0
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	e022      	b.n	800443e <HAL_TIM_PWM_Start+0x6a>
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	2b04      	cmp	r3, #4
 80043fc:	d109      	bne.n	8004412 <HAL_TIM_PWM_Start+0x3e>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b01      	cmp	r3, #1
 8004408:	bf14      	ite	ne
 800440a:	2301      	movne	r3, #1
 800440c:	2300      	moveq	r3, #0
 800440e:	b2db      	uxtb	r3, r3
 8004410:	e015      	b.n	800443e <HAL_TIM_PWM_Start+0x6a>
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	2b08      	cmp	r3, #8
 8004416:	d109      	bne.n	800442c <HAL_TIM_PWM_Start+0x58>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800441e:	b2db      	uxtb	r3, r3
 8004420:	2b01      	cmp	r3, #1
 8004422:	bf14      	ite	ne
 8004424:	2301      	movne	r3, #1
 8004426:	2300      	moveq	r3, #0
 8004428:	b2db      	uxtb	r3, r3
 800442a:	e008      	b.n	800443e <HAL_TIM_PWM_Start+0x6a>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004432:	b2db      	uxtb	r3, r3
 8004434:	2b01      	cmp	r3, #1
 8004436:	bf14      	ite	ne
 8004438:	2301      	movne	r3, #1
 800443a:	2300      	moveq	r3, #0
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e068      	b.n	8004518 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d104      	bne.n	8004456 <HAL_TIM_PWM_Start+0x82>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2202      	movs	r2, #2
 8004450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004454:	e013      	b.n	800447e <HAL_TIM_PWM_Start+0xaa>
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	2b04      	cmp	r3, #4
 800445a:	d104      	bne.n	8004466 <HAL_TIM_PWM_Start+0x92>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2202      	movs	r2, #2
 8004460:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004464:	e00b      	b.n	800447e <HAL_TIM_PWM_Start+0xaa>
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b08      	cmp	r3, #8
 800446a:	d104      	bne.n	8004476 <HAL_TIM_PWM_Start+0xa2>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2202      	movs	r2, #2
 8004470:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004474:	e003      	b.n	800447e <HAL_TIM_PWM_Start+0xaa>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2202      	movs	r2, #2
 800447a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2201      	movs	r2, #1
 8004484:	6839      	ldr	r1, [r7, #0]
 8004486:	4618      	mov	r0, r3
 8004488:	f000 fc90 	bl	8004dac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a23      	ldr	r2, [pc, #140]	@ (8004520 <HAL_TIM_PWM_Start+0x14c>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d107      	bne.n	80044a6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044a4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a1d      	ldr	r2, [pc, #116]	@ (8004520 <HAL_TIM_PWM_Start+0x14c>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d018      	beq.n	80044e2 <HAL_TIM_PWM_Start+0x10e>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044b8:	d013      	beq.n	80044e2 <HAL_TIM_PWM_Start+0x10e>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a19      	ldr	r2, [pc, #100]	@ (8004524 <HAL_TIM_PWM_Start+0x150>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d00e      	beq.n	80044e2 <HAL_TIM_PWM_Start+0x10e>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a17      	ldr	r2, [pc, #92]	@ (8004528 <HAL_TIM_PWM_Start+0x154>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d009      	beq.n	80044e2 <HAL_TIM_PWM_Start+0x10e>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a16      	ldr	r2, [pc, #88]	@ (800452c <HAL_TIM_PWM_Start+0x158>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d004      	beq.n	80044e2 <HAL_TIM_PWM_Start+0x10e>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a14      	ldr	r2, [pc, #80]	@ (8004530 <HAL_TIM_PWM_Start+0x15c>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d111      	bne.n	8004506 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2b06      	cmp	r3, #6
 80044f2:	d010      	beq.n	8004516 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0201 	orr.w	r2, r2, #1
 8004502:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004504:	e007      	b.n	8004516 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f042 0201 	orr.w	r2, r2, #1
 8004514:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	40010000 	.word	0x40010000
 8004524:	40000400 	.word	0x40000400
 8004528:	40000800 	.word	0x40000800
 800452c:	40000c00 	.word	0x40000c00
 8004530:	40014000 	.word	0x40014000

08004534 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004540:	2300      	movs	r3, #0
 8004542:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800454a:	2b01      	cmp	r3, #1
 800454c:	d101      	bne.n	8004552 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800454e:	2302      	movs	r3, #2
 8004550:	e0ae      	b.n	80046b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b0c      	cmp	r3, #12
 800455e:	f200 809f 	bhi.w	80046a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004562:	a201      	add	r2, pc, #4	@ (adr r2, 8004568 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004568:	0800459d 	.word	0x0800459d
 800456c:	080046a1 	.word	0x080046a1
 8004570:	080046a1 	.word	0x080046a1
 8004574:	080046a1 	.word	0x080046a1
 8004578:	080045dd 	.word	0x080045dd
 800457c:	080046a1 	.word	0x080046a1
 8004580:	080046a1 	.word	0x080046a1
 8004584:	080046a1 	.word	0x080046a1
 8004588:	0800461f 	.word	0x0800461f
 800458c:	080046a1 	.word	0x080046a1
 8004590:	080046a1 	.word	0x080046a1
 8004594:	080046a1 	.word	0x080046a1
 8004598:	0800465f 	.word	0x0800465f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68b9      	ldr	r1, [r7, #8]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 f9dc 	bl	8004960 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	699a      	ldr	r2, [r3, #24]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f042 0208 	orr.w	r2, r2, #8
 80045b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	699a      	ldr	r2, [r3, #24]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 0204 	bic.w	r2, r2, #4
 80045c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6999      	ldr	r1, [r3, #24]
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	691a      	ldr	r2, [r3, #16]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	619a      	str	r2, [r3, #24]
      break;
 80045da:	e064      	b.n	80046a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68b9      	ldr	r1, [r7, #8]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f000 fa22 	bl	8004a2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	699a      	ldr	r2, [r3, #24]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	699a      	ldr	r2, [r3, #24]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004606:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6999      	ldr	r1, [r3, #24]
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	021a      	lsls	r2, r3, #8
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	430a      	orrs	r2, r1
 800461a:	619a      	str	r2, [r3, #24]
      break;
 800461c:	e043      	b.n	80046a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68b9      	ldr	r1, [r7, #8]
 8004624:	4618      	mov	r0, r3
 8004626:	f000 fa6d 	bl	8004b04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	69da      	ldr	r2, [r3, #28]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f042 0208 	orr.w	r2, r2, #8
 8004638:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	69da      	ldr	r2, [r3, #28]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0204 	bic.w	r2, r2, #4
 8004648:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	69d9      	ldr	r1, [r3, #28]
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	691a      	ldr	r2, [r3, #16]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	430a      	orrs	r2, r1
 800465a:	61da      	str	r2, [r3, #28]
      break;
 800465c:	e023      	b.n	80046a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68b9      	ldr	r1, [r7, #8]
 8004664:	4618      	mov	r0, r3
 8004666:	f000 fab7 	bl	8004bd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	69da      	ldr	r2, [r3, #28]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004678:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	69da      	ldr	r2, [r3, #28]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004688:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	69d9      	ldr	r1, [r3, #28]
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	021a      	lsls	r2, r3, #8
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	61da      	str	r2, [r3, #28]
      break;
 800469e:	e002      	b.n	80046a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	75fb      	strb	r3, [r7, #23]
      break;
 80046a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80046ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3718      	adds	r7, #24
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046c2:	2300      	movs	r3, #0
 80046c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d101      	bne.n	80046d4 <HAL_TIM_ConfigClockSource+0x1c>
 80046d0:	2302      	movs	r3, #2
 80046d2:	e0b4      	b.n	800483e <HAL_TIM_ConfigClockSource+0x186>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2202      	movs	r2, #2
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80046f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800470c:	d03e      	beq.n	800478c <HAL_TIM_ConfigClockSource+0xd4>
 800470e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004712:	f200 8087 	bhi.w	8004824 <HAL_TIM_ConfigClockSource+0x16c>
 8004716:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800471a:	f000 8086 	beq.w	800482a <HAL_TIM_ConfigClockSource+0x172>
 800471e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004722:	d87f      	bhi.n	8004824 <HAL_TIM_ConfigClockSource+0x16c>
 8004724:	2b70      	cmp	r3, #112	@ 0x70
 8004726:	d01a      	beq.n	800475e <HAL_TIM_ConfigClockSource+0xa6>
 8004728:	2b70      	cmp	r3, #112	@ 0x70
 800472a:	d87b      	bhi.n	8004824 <HAL_TIM_ConfigClockSource+0x16c>
 800472c:	2b60      	cmp	r3, #96	@ 0x60
 800472e:	d050      	beq.n	80047d2 <HAL_TIM_ConfigClockSource+0x11a>
 8004730:	2b60      	cmp	r3, #96	@ 0x60
 8004732:	d877      	bhi.n	8004824 <HAL_TIM_ConfigClockSource+0x16c>
 8004734:	2b50      	cmp	r3, #80	@ 0x50
 8004736:	d03c      	beq.n	80047b2 <HAL_TIM_ConfigClockSource+0xfa>
 8004738:	2b50      	cmp	r3, #80	@ 0x50
 800473a:	d873      	bhi.n	8004824 <HAL_TIM_ConfigClockSource+0x16c>
 800473c:	2b40      	cmp	r3, #64	@ 0x40
 800473e:	d058      	beq.n	80047f2 <HAL_TIM_ConfigClockSource+0x13a>
 8004740:	2b40      	cmp	r3, #64	@ 0x40
 8004742:	d86f      	bhi.n	8004824 <HAL_TIM_ConfigClockSource+0x16c>
 8004744:	2b30      	cmp	r3, #48	@ 0x30
 8004746:	d064      	beq.n	8004812 <HAL_TIM_ConfigClockSource+0x15a>
 8004748:	2b30      	cmp	r3, #48	@ 0x30
 800474a:	d86b      	bhi.n	8004824 <HAL_TIM_ConfigClockSource+0x16c>
 800474c:	2b20      	cmp	r3, #32
 800474e:	d060      	beq.n	8004812 <HAL_TIM_ConfigClockSource+0x15a>
 8004750:	2b20      	cmp	r3, #32
 8004752:	d867      	bhi.n	8004824 <HAL_TIM_ConfigClockSource+0x16c>
 8004754:	2b00      	cmp	r3, #0
 8004756:	d05c      	beq.n	8004812 <HAL_TIM_ConfigClockSource+0x15a>
 8004758:	2b10      	cmp	r3, #16
 800475a:	d05a      	beq.n	8004812 <HAL_TIM_ConfigClockSource+0x15a>
 800475c:	e062      	b.n	8004824 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800476e:	f000 fafd 	bl	8004d6c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004780:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	609a      	str	r2, [r3, #8]
      break;
 800478a:	e04f      	b.n	800482c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800479c:	f000 fae6 	bl	8004d6c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689a      	ldr	r2, [r3, #8]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047ae:	609a      	str	r2, [r3, #8]
      break;
 80047b0:	e03c      	b.n	800482c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047be:	461a      	mov	r2, r3
 80047c0:	f000 fa5a 	bl	8004c78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2150      	movs	r1, #80	@ 0x50
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 fab3 	bl	8004d36 <TIM_ITRx_SetConfig>
      break;
 80047d0:	e02c      	b.n	800482c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047de:	461a      	mov	r2, r3
 80047e0:	f000 fa79 	bl	8004cd6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2160      	movs	r1, #96	@ 0x60
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 faa3 	bl	8004d36 <TIM_ITRx_SetConfig>
      break;
 80047f0:	e01c      	b.n	800482c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047fe:	461a      	mov	r2, r3
 8004800:	f000 fa3a 	bl	8004c78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2140      	movs	r1, #64	@ 0x40
 800480a:	4618      	mov	r0, r3
 800480c:	f000 fa93 	bl	8004d36 <TIM_ITRx_SetConfig>
      break;
 8004810:	e00c      	b.n	800482c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4619      	mov	r1, r3
 800481c:	4610      	mov	r0, r2
 800481e:	f000 fa8a 	bl	8004d36 <TIM_ITRx_SetConfig>
      break;
 8004822:	e003      	b.n	800482c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	73fb      	strb	r3, [r7, #15]
      break;
 8004828:	e000      	b.n	800482c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800482a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800483c:	7bfb      	ldrb	r3, [r7, #15]
}
 800483e:	4618      	mov	r0, r3
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
	...

08004848 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a3a      	ldr	r2, [pc, #232]	@ (8004944 <TIM_Base_SetConfig+0xfc>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d00f      	beq.n	8004880 <TIM_Base_SetConfig+0x38>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004866:	d00b      	beq.n	8004880 <TIM_Base_SetConfig+0x38>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a37      	ldr	r2, [pc, #220]	@ (8004948 <TIM_Base_SetConfig+0x100>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d007      	beq.n	8004880 <TIM_Base_SetConfig+0x38>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a36      	ldr	r2, [pc, #216]	@ (800494c <TIM_Base_SetConfig+0x104>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d003      	beq.n	8004880 <TIM_Base_SetConfig+0x38>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a35      	ldr	r2, [pc, #212]	@ (8004950 <TIM_Base_SetConfig+0x108>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d108      	bne.n	8004892 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004886:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	4313      	orrs	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a2b      	ldr	r2, [pc, #172]	@ (8004944 <TIM_Base_SetConfig+0xfc>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d01b      	beq.n	80048d2 <TIM_Base_SetConfig+0x8a>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048a0:	d017      	beq.n	80048d2 <TIM_Base_SetConfig+0x8a>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a28      	ldr	r2, [pc, #160]	@ (8004948 <TIM_Base_SetConfig+0x100>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d013      	beq.n	80048d2 <TIM_Base_SetConfig+0x8a>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a27      	ldr	r2, [pc, #156]	@ (800494c <TIM_Base_SetConfig+0x104>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d00f      	beq.n	80048d2 <TIM_Base_SetConfig+0x8a>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a26      	ldr	r2, [pc, #152]	@ (8004950 <TIM_Base_SetConfig+0x108>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d00b      	beq.n	80048d2 <TIM_Base_SetConfig+0x8a>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a25      	ldr	r2, [pc, #148]	@ (8004954 <TIM_Base_SetConfig+0x10c>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d007      	beq.n	80048d2 <TIM_Base_SetConfig+0x8a>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a24      	ldr	r2, [pc, #144]	@ (8004958 <TIM_Base_SetConfig+0x110>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d003      	beq.n	80048d2 <TIM_Base_SetConfig+0x8a>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a23      	ldr	r2, [pc, #140]	@ (800495c <TIM_Base_SetConfig+0x114>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d108      	bne.n	80048e4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	689a      	ldr	r2, [r3, #8]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a0e      	ldr	r2, [pc, #56]	@ (8004944 <TIM_Base_SetConfig+0xfc>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d103      	bne.n	8004918 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	691a      	ldr	r2, [r3, #16]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b01      	cmp	r3, #1
 8004928:	d105      	bne.n	8004936 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	f023 0201 	bic.w	r2, r3, #1
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	611a      	str	r2, [r3, #16]
  }
}
 8004936:	bf00      	nop
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	40010000 	.word	0x40010000
 8004948:	40000400 	.word	0x40000400
 800494c:	40000800 	.word	0x40000800
 8004950:	40000c00 	.word	0x40000c00
 8004954:	40014000 	.word	0x40014000
 8004958:	40014400 	.word	0x40014400
 800495c:	40014800 	.word	0x40014800

08004960 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004960:	b480      	push	{r7}
 8004962:	b087      	sub	sp, #28
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a1b      	ldr	r3, [r3, #32]
 8004974:	f023 0201 	bic.w	r2, r3, #1
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800498e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f023 0303 	bic.w	r3, r3, #3
 8004996:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	4313      	orrs	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	f023 0302 	bic.w	r3, r3, #2
 80049a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a1c      	ldr	r2, [pc, #112]	@ (8004a28 <TIM_OC1_SetConfig+0xc8>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d10c      	bne.n	80049d6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	f023 0308 	bic.w	r3, r3, #8
 80049c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f023 0304 	bic.w	r3, r3, #4
 80049d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a13      	ldr	r2, [pc, #76]	@ (8004a28 <TIM_OC1_SetConfig+0xc8>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d111      	bne.n	8004a02 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80049ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	685a      	ldr	r2, [r3, #4]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	621a      	str	r2, [r3, #32]
}
 8004a1c:	bf00      	nop
 8004a1e:	371c      	adds	r7, #28
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	40010000 	.word	0x40010000

08004a2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b087      	sub	sp, #28
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	f023 0210 	bic.w	r2, r3, #16
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	021b      	lsls	r3, r3, #8
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	f023 0320 	bic.w	r3, r3, #32
 8004a76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	011b      	lsls	r3, r3, #4
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a1e      	ldr	r2, [pc, #120]	@ (8004b00 <TIM_OC2_SetConfig+0xd4>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d10d      	bne.n	8004aa8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004aa6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a15      	ldr	r2, [pc, #84]	@ (8004b00 <TIM_OC2_SetConfig+0xd4>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d113      	bne.n	8004ad8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ab6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004abe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	621a      	str	r2, [r3, #32]
}
 8004af2:	bf00      	nop
 8004af4:	371c      	adds	r7, #28
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	40010000 	.word	0x40010000

08004b04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b087      	sub	sp, #28
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a1b      	ldr	r3, [r3, #32]
 8004b18:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f023 0303 	bic.w	r3, r3, #3
 8004b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	021b      	lsls	r3, r3, #8
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a1d      	ldr	r2, [pc, #116]	@ (8004bd4 <TIM_OC3_SetConfig+0xd0>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d10d      	bne.n	8004b7e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	021b      	lsls	r3, r3, #8
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004b7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a14      	ldr	r2, [pc, #80]	@ (8004bd4 <TIM_OC3_SetConfig+0xd0>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d113      	bne.n	8004bae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	011b      	lsls	r3, r3, #4
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	011b      	lsls	r3, r3, #4
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685a      	ldr	r2, [r3, #4]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	621a      	str	r2, [r3, #32]
}
 8004bc8:	bf00      	nop
 8004bca:	371c      	adds	r7, #28
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	40010000 	.word	0x40010000

08004bd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b087      	sub	sp, #28
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a1b      	ldr	r3, [r3, #32]
 8004bec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	69db      	ldr	r3, [r3, #28]
 8004bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	021b      	lsls	r3, r3, #8
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	031b      	lsls	r3, r3, #12
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a10      	ldr	r2, [pc, #64]	@ (8004c74 <TIM_OC4_SetConfig+0x9c>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d109      	bne.n	8004c4c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	019b      	lsls	r3, r3, #6
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	621a      	str	r2, [r3, #32]
}
 8004c66:	bf00      	nop
 8004c68:	371c      	adds	r7, #28
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	40010000 	.word	0x40010000

08004c78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b087      	sub	sp, #28
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6a1b      	ldr	r3, [r3, #32]
 8004c88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	f023 0201 	bic.w	r2, r3, #1
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ca2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	011b      	lsls	r3, r3, #4
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f023 030a 	bic.w	r3, r3, #10
 8004cb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	621a      	str	r2, [r3, #32]
}
 8004cca:	bf00      	nop
 8004ccc:	371c      	adds	r7, #28
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr

08004cd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b087      	sub	sp, #28
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	60f8      	str	r0, [r7, #12]
 8004cde:	60b9      	str	r1, [r7, #8]
 8004ce0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6a1b      	ldr	r3, [r3, #32]
 8004cec:	f023 0210 	bic.w	r2, r3, #16
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	031b      	lsls	r3, r3, #12
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004d12:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	011b      	lsls	r3, r3, #4
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	621a      	str	r2, [r3, #32]
}
 8004d2a:	bf00      	nop
 8004d2c:	371c      	adds	r7, #28
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr

08004d36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d36:	b480      	push	{r7}
 8004d38:	b085      	sub	sp, #20
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
 8004d3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d4e:	683a      	ldr	r2, [r7, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	f043 0307 	orr.w	r3, r3, #7
 8004d58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	609a      	str	r2, [r3, #8]
}
 8004d60:	bf00      	nop
 8004d62:	3714      	adds	r7, #20
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b087      	sub	sp, #28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
 8004d78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	021a      	lsls	r2, r3, #8
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	609a      	str	r2, [r3, #8]
}
 8004da0:	bf00      	nop
 8004da2:	371c      	adds	r7, #28
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b087      	sub	sp, #28
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	f003 031f 	and.w	r3, r3, #31
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6a1a      	ldr	r2, [r3, #32]
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	43db      	mvns	r3, r3
 8004dce:	401a      	ands	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6a1a      	ldr	r2, [r3, #32]
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	f003 031f 	and.w	r3, r3, #31
 8004dde:	6879      	ldr	r1, [r7, #4]
 8004de0:	fa01 f303 	lsl.w	r3, r1, r3
 8004de4:	431a      	orrs	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	621a      	str	r2, [r3, #32]
}
 8004dea:	bf00      	nop
 8004dec:	371c      	adds	r7, #28
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
	...

08004df8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d101      	bne.n	8004e10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	e050      	b.n	8004eb2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a1c      	ldr	r2, [pc, #112]	@ (8004ec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d018      	beq.n	8004e86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e5c:	d013      	beq.n	8004e86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a18      	ldr	r2, [pc, #96]	@ (8004ec4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d00e      	beq.n	8004e86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a16      	ldr	r2, [pc, #88]	@ (8004ec8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d009      	beq.n	8004e86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a15      	ldr	r2, [pc, #84]	@ (8004ecc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d004      	beq.n	8004e86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a13      	ldr	r2, [pc, #76]	@ (8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d10c      	bne.n	8004ea0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	40010000 	.word	0x40010000
 8004ec4:	40000400 	.word	0x40000400
 8004ec8:	40000800 	.word	0x40000800
 8004ecc:	40000c00 	.word	0x40000c00
 8004ed0:	40014000 	.word	0x40014000

08004ed4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d101      	bne.n	8004ef0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004eec:	2302      	movs	r3, #2
 8004eee:	e03d      	b.n	8004f6c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	695b      	ldr	r3, [r3, #20]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	69db      	ldr	r3, [r3, #28]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3714      	adds	r7, #20
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <memset>:
 8004f78:	4402      	add	r2, r0
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d100      	bne.n	8004f82 <memset+0xa>
 8004f80:	4770      	bx	lr
 8004f82:	f803 1b01 	strb.w	r1, [r3], #1
 8004f86:	e7f9      	b.n	8004f7c <memset+0x4>

08004f88 <__libc_init_array>:
 8004f88:	b570      	push	{r4, r5, r6, lr}
 8004f8a:	4d0d      	ldr	r5, [pc, #52]	@ (8004fc0 <__libc_init_array+0x38>)
 8004f8c:	4c0d      	ldr	r4, [pc, #52]	@ (8004fc4 <__libc_init_array+0x3c>)
 8004f8e:	1b64      	subs	r4, r4, r5
 8004f90:	10a4      	asrs	r4, r4, #2
 8004f92:	2600      	movs	r6, #0
 8004f94:	42a6      	cmp	r6, r4
 8004f96:	d109      	bne.n	8004fac <__libc_init_array+0x24>
 8004f98:	4d0b      	ldr	r5, [pc, #44]	@ (8004fc8 <__libc_init_array+0x40>)
 8004f9a:	4c0c      	ldr	r4, [pc, #48]	@ (8004fcc <__libc_init_array+0x44>)
 8004f9c:	f000 f818 	bl	8004fd0 <_init>
 8004fa0:	1b64      	subs	r4, r4, r5
 8004fa2:	10a4      	asrs	r4, r4, #2
 8004fa4:	2600      	movs	r6, #0
 8004fa6:	42a6      	cmp	r6, r4
 8004fa8:	d105      	bne.n	8004fb6 <__libc_init_array+0x2e>
 8004faa:	bd70      	pop	{r4, r5, r6, pc}
 8004fac:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fb0:	4798      	blx	r3
 8004fb2:	3601      	adds	r6, #1
 8004fb4:	e7ee      	b.n	8004f94 <__libc_init_array+0xc>
 8004fb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fba:	4798      	blx	r3
 8004fbc:	3601      	adds	r6, #1
 8004fbe:	e7f2      	b.n	8004fa6 <__libc_init_array+0x1e>
 8004fc0:	08005018 	.word	0x08005018
 8004fc4:	08005018 	.word	0x08005018
 8004fc8:	08005018 	.word	0x08005018
 8004fcc:	0800501c 	.word	0x0800501c

08004fd0 <_init>:
 8004fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fd2:	bf00      	nop
 8004fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fd6:	bc08      	pop	{r3}
 8004fd8:	469e      	mov	lr, r3
 8004fda:	4770      	bx	lr

08004fdc <_fini>:
 8004fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fde:	bf00      	nop
 8004fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fe2:	bc08      	pop	{r3}
 8004fe4:	469e      	mov	lr, r3
 8004fe6:	4770      	bx	lr
