
AGV_Genzero.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ac0  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  08007ca4  08007ca4  00008ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e98  08007e98  0000906c  2**0
                  CONTENTS
  4 .ARM          00000000  08007e98  08007e98  0000906c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e98  08007e98  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e98  08007e98  00008e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e9c  08007e9c  00008e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08007ea0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000898  2000006c  08007f0c  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000904  08007f0c  00009904  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015a19  00000000  00000000  00009095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003149  00000000  00000000  0001eaae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a0  00000000  00000000  00021bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000110c  00000000  00000000  00023198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000040d8  00000000  00000000  000242a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019f9f  00000000  00000000  0002837c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6438  00000000  00000000  0004231b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e8753  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006368  00000000  00000000  000e8798  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000eeb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000006c 	.word	0x2000006c
 8000200:	00000000 	.word	0x00000000
 8000204:	08007c8c 	.word	0x08007c8c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000070 	.word	0x20000070
 8000220:	08007c8c 	.word	0x08007c8c

08000224 <HAL_UART_TxCpltCallback>:


}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
	Tx_Data_Uart1[0] = 5;
 800022c:	4b09      	ldr	r3, [pc, #36]	@ (8000254 <HAL_UART_TxCpltCallback+0x30>)
 800022e:	2205      	movs	r2, #5
 8000230:	701a      	strb	r2, [r3, #0]
	Tx_Data_Uart1[1] = 4;
 8000232:	4b08      	ldr	r3, [pc, #32]	@ (8000254 <HAL_UART_TxCpltCallback+0x30>)
 8000234:	2204      	movs	r2, #4
 8000236:	705a      	strb	r2, [r3, #1]
	Tx_Data_Uart1[2] = 3;
 8000238:	4b06      	ldr	r3, [pc, #24]	@ (8000254 <HAL_UART_TxCpltCallback+0x30>)
 800023a:	2203      	movs	r2, #3
 800023c:	709a      	strb	r2, [r3, #2]
	Tx_Data_Uart1[3] = 2;
 800023e:	4b05      	ldr	r3, [pc, #20]	@ (8000254 <HAL_UART_TxCpltCallback+0x30>)
 8000240:	2202      	movs	r2, #2
 8000242:	70da      	strb	r2, [r3, #3]
	Tx_Data_Uart1[4] = 1;
 8000244:	4b03      	ldr	r3, [pc, #12]	@ (8000254 <HAL_UART_TxCpltCallback+0x30>)
 8000246:	2201      	movs	r2, #1
 8000248:	711a      	strb	r2, [r3, #4]
}
 800024a:	bf00      	nop
 800024c:	370c      	adds	r7, #12
 800024e:	46bd      	mov	sp, r7
 8000250:	bc80      	pop	{r7}
 8000252:	4770      	bx	lr
 8000254:	2000035c 	.word	0x2000035c

08000258 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
	if(Rx_Data_Uart1[0] == 0x56){
 8000260:	4b17      	ldr	r3, [pc, #92]	@ (80002c0 <HAL_UART_RxCpltCallback+0x68>)
 8000262:	781b      	ldrb	r3, [r3, #0]
 8000264:	2b56      	cmp	r3, #86	@ 0x56
 8000266:	d126      	bne.n	80002b6 <HAL_UART_RxCpltCallback+0x5e>
		HAL_GPIO_TogglePin(UART_STATUS_GPIO_Port, UART_STATUS_Pin);
 8000268:	2108      	movs	r1, #8
 800026a:	4816      	ldr	r0, [pc, #88]	@ (80002c4 <HAL_UART_RxCpltCallback+0x6c>)
 800026c:	f003 fbec 	bl	8003a48 <HAL_GPIO_TogglePin>

		if(Rx_Data_Uart1[1] == 0xF1){
 8000270:	4b13      	ldr	r3, [pc, #76]	@ (80002c0 <HAL_UART_RxCpltCallback+0x68>)
 8000272:	785b      	ldrb	r3, [r3, #1]
 8000274:	2bf1      	cmp	r3, #241	@ 0xf1
 8000276:	d102      	bne.n	800027e <HAL_UART_RxCpltCallback+0x26>
			Station = 1;
 8000278:	4b13      	ldr	r3, [pc, #76]	@ (80002c8 <HAL_UART_RxCpltCallback+0x70>)
 800027a:	2201      	movs	r2, #1
 800027c:	701a      	strb	r2, [r3, #0]
		}
		if(Rx_Data_Uart1[1] == 0xF2){
 800027e:	4b10      	ldr	r3, [pc, #64]	@ (80002c0 <HAL_UART_RxCpltCallback+0x68>)
 8000280:	785b      	ldrb	r3, [r3, #1]
 8000282:	2bf2      	cmp	r3, #242	@ 0xf2
 8000284:	d102      	bne.n	800028c <HAL_UART_RxCpltCallback+0x34>
			Station = 2;
 8000286:	4b10      	ldr	r3, [pc, #64]	@ (80002c8 <HAL_UART_RxCpltCallback+0x70>)
 8000288:	2202      	movs	r2, #2
 800028a:	701a      	strb	r2, [r3, #0]
		}
		if(Rx_Data_Uart1[1] == 0xF3){
 800028c:	4b0c      	ldr	r3, [pc, #48]	@ (80002c0 <HAL_UART_RxCpltCallback+0x68>)
 800028e:	785b      	ldrb	r3, [r3, #1]
 8000290:	2bf3      	cmp	r3, #243	@ 0xf3
 8000292:	d102      	bne.n	800029a <HAL_UART_RxCpltCallback+0x42>
			Station = 3;
 8000294:	4b0c      	ldr	r3, [pc, #48]	@ (80002c8 <HAL_UART_RxCpltCallback+0x70>)
 8000296:	2203      	movs	r2, #3
 8000298:	701a      	strb	r2, [r3, #0]
		}
		if(Rx_Data_Uart1[1] == 0xF4){
 800029a:	4b09      	ldr	r3, [pc, #36]	@ (80002c0 <HAL_UART_RxCpltCallback+0x68>)
 800029c:	785b      	ldrb	r3, [r3, #1]
 800029e:	2bf4      	cmp	r3, #244	@ 0xf4
 80002a0:	d102      	bne.n	80002a8 <HAL_UART_RxCpltCallback+0x50>
			Station = 4;
 80002a2:	4b09      	ldr	r3, [pc, #36]	@ (80002c8 <HAL_UART_RxCpltCallback+0x70>)
 80002a4:	2204      	movs	r2, #4
 80002a6:	701a      	strb	r2, [r3, #0]
		}
		if(Rx_Data_Uart1[1] == 0xF5){
 80002a8:	4b05      	ldr	r3, [pc, #20]	@ (80002c0 <HAL_UART_RxCpltCallback+0x68>)
 80002aa:	785b      	ldrb	r3, [r3, #1]
 80002ac:	2bf5      	cmp	r3, #245	@ 0xf5
 80002ae:	d102      	bne.n	80002b6 <HAL_UART_RxCpltCallback+0x5e>
			Station = 5;
 80002b0:	4b05      	ldr	r3, [pc, #20]	@ (80002c8 <HAL_UART_RxCpltCallback+0x70>)
 80002b2:	2205      	movs	r2, #5
 80002b4:	701a      	strb	r2, [r3, #0]
		}

	}

}
 80002b6:	bf00      	nop
 80002b8:	3708      	adds	r7, #8
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	20000364 	.word	0x20000364
 80002c4:	40011400 	.word	0x40011400
 80002c8:	20000000 	.word	0x20000000

080002cc <Startup_RFID>:

void Startup_RFID(){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0

	PN532_SPI_Init(&pn532);
 80002d0:	4808      	ldr	r0, [pc, #32]	@ (80002f4 <Startup_RFID+0x28>)
 80002d2:	f001 f92d 	bl	8001530 <PN532_SPI_Init>
	//HAL_GPIO_WritePin(RFID_SSF_GPIO_Port, RFID_SSF_Pin, 0);

	if(PN532_GetFirmwareVersion(&pn532, uid_version) != PN532_STATUS_OK)
 80002d6:	4908      	ldr	r1, [pc, #32]	@ (80002f8 <Startup_RFID+0x2c>)
 80002d8:	4806      	ldr	r0, [pc, #24]	@ (80002f4 <Startup_RFID+0x28>)
 80002da:	f000 ff41 	bl	8001160 <PN532_GetFirmwareVersion>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <Startup_RFID+0x1c>
	{
		while(1){
 80002e4:	bf00      	nop
 80002e6:	e7fd      	b.n	80002e4 <Startup_RFID+0x18>

		}
	}

	PN532_SamConfiguration(&pn532);
 80002e8:	4802      	ldr	r0, [pc, #8]	@ (80002f4 <Startup_RFID+0x28>)
 80002ea:	f000 ff5d 	bl	80011a8 <PN532_SamConfiguration>

}
 80002ee:	bf00      	nop
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	20000388 	.word	0x20000388
 80002f8:	2000037c 	.word	0x2000037c

080002fc <AGV_RFID_Detection>:
void AGV_RFID_Detection(){
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	uid_len = PN532_ReadPassiveTarget(&pn532, uid, PN532_MIFARE_ISO14443A, 100);
 8000300:	2364      	movs	r3, #100	@ 0x64
 8000302:	2200      	movs	r2, #0
 8000304:	4910      	ldr	r1, [pc, #64]	@ (8000348 <AGV_RFID_Detection+0x4c>)
 8000306:	4811      	ldr	r0, [pc, #68]	@ (800034c <AGV_RFID_Detection+0x50>)
 8000308:	f000 ff70 	bl	80011ec <PN532_ReadPassiveTarget>
 800030c:	4603      	mov	r3, r0
 800030e:	4a10      	ldr	r2, [pc, #64]	@ (8000350 <AGV_RFID_Detection+0x54>)
 8000310:	6013      	str	r3, [r2, #0]

	if(uid_len >= 4){
 8000312:	4b0f      	ldr	r3, [pc, #60]	@ (8000350 <AGV_RFID_Detection+0x54>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	2b03      	cmp	r3, #3
 8000318:	dd13      	ble.n	8000342 <AGV_RFID_Detection+0x46>
		Station_id[0] = uid[0];
 800031a:	4b0b      	ldr	r3, [pc, #44]	@ (8000348 <AGV_RFID_Detection+0x4c>)
 800031c:	781a      	ldrb	r2, [r3, #0]
 800031e:	4b0d      	ldr	r3, [pc, #52]	@ (8000354 <AGV_RFID_Detection+0x58>)
 8000320:	701a      	strb	r2, [r3, #0]
		Station_id[1] = uid[1];
 8000322:	4b09      	ldr	r3, [pc, #36]	@ (8000348 <AGV_RFID_Detection+0x4c>)
 8000324:	785a      	ldrb	r2, [r3, #1]
 8000326:	4b0b      	ldr	r3, [pc, #44]	@ (8000354 <AGV_RFID_Detection+0x58>)
 8000328:	705a      	strb	r2, [r3, #1]
		Station_id[2] = uid[2];
 800032a:	4b07      	ldr	r3, [pc, #28]	@ (8000348 <AGV_RFID_Detection+0x4c>)
 800032c:	789a      	ldrb	r2, [r3, #2]
 800032e:	4b09      	ldr	r3, [pc, #36]	@ (8000354 <AGV_RFID_Detection+0x58>)
 8000330:	709a      	strb	r2, [r3, #2]
		Station_id[3] = uid[3];
 8000332:	4b05      	ldr	r3, [pc, #20]	@ (8000348 <AGV_RFID_Detection+0x4c>)
 8000334:	78da      	ldrb	r2, [r3, #3]
 8000336:	4b07      	ldr	r3, [pc, #28]	@ (8000354 <AGV_RFID_Detection+0x58>)
 8000338:	70da      	strb	r2, [r3, #3]
		Station_id[4] = uid[4];
 800033a:	4b03      	ldr	r3, [pc, #12]	@ (8000348 <AGV_RFID_Detection+0x4c>)
 800033c:	791a      	ldrb	r2, [r3, #4]
 800033e:	4b05      	ldr	r3, [pc, #20]	@ (8000354 <AGV_RFID_Detection+0x58>)
 8000340:	711a      	strb	r2, [r3, #4]
	}
}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	2000036c 	.word	0x2000036c
 800034c:	20000388 	.word	0x20000388
 8000350:	20000378 	.word	0x20000378
 8000354:	200003a0 	.word	0x200003a0

08000358 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800035c:	f001 ff02 	bl	8002164 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000360:	f000 f84e 	bl	8000400 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000364:	f000 fb58 	bl	8000a18 <MX_GPIO_Init>
  MX_DMA_Init();
 8000368:	f000 fb14 	bl	8000994 <MX_DMA_Init>
  MX_ADC1_Init();
 800036c:	f000 f8a6 	bl	80004bc <MX_ADC1_Init>
  MX_ADC3_Init();
 8000370:	f000 f962 	bl	8000638 <MX_ADC3_Init>
  MX_USART1_UART_Init();
 8000374:	f000 fae4 	bl	8000940 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000378:	f000 fa80 	bl	800087c <MX_TIM2_Init>
  MX_I2C1_Init();
 800037c:	f000 fa1a 	bl	80007b4 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000380:	f000 fa46 	bl	8000810 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000384:	2100      	movs	r1, #0
 8000386:	4815      	ldr	r0, [pc, #84]	@ (80003dc <main+0x84>)
 8000388:	f005 f932 	bl	80055f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800038c:	2104      	movs	r1, #4
 800038e:	4813      	ldr	r0, [pc, #76]	@ (80003dc <main+0x84>)
 8000390:	f005 f92e 	bl	80055f0 <HAL_TIM_PWM_Start>

  HAL_ADC_Start_DMA(&hadc1, (uint16_t*) line_sensor_front_values_dma, line_sensor_front_channel_number);
 8000394:	230a      	movs	r3, #10
 8000396:	461a      	mov	r2, r3
 8000398:	4911      	ldr	r1, [pc, #68]	@ (80003e0 <main+0x88>)
 800039a:	4812      	ldr	r0, [pc, #72]	@ (80003e4 <main+0x8c>)
 800039c:	f002 f852 	bl	8002444 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc3, (uint16_t*) line_sensor_back_values_dma, line_sensor_back_channel_number);
 80003a0:	230a      	movs	r3, #10
 80003a2:	461a      	mov	r2, r3
 80003a4:	4910      	ldr	r1, [pc, #64]	@ (80003e8 <main+0x90>)
 80003a6:	4811      	ldr	r0, [pc, #68]	@ (80003ec <main+0x94>)
 80003a8:	f002 f84c 	bl	8002444 <HAL_ADC_Start_DMA>

  HAL_UART_Transmit_DMA(&huart1, Tx_Data_Uart1, sizeof (Tx_Data_Uart1));
 80003ac:	2205      	movs	r2, #5
 80003ae:	4910      	ldr	r1, [pc, #64]	@ (80003f0 <main+0x98>)
 80003b0:	4810      	ldr	r0, [pc, #64]	@ (80003f4 <main+0x9c>)
 80003b2:	f005 fd9f 	bl	8005ef4 <HAL_UART_Transmit_DMA>
  HAL_UART_Receive_DMA (&huart1, Rx_Data_Uart1, sizeof (Rx_Data_Uart1));
 80003b6:	2205      	movs	r2, #5
 80003b8:	490f      	ldr	r1, [pc, #60]	@ (80003f8 <main+0xa0>)
 80003ba:	480e      	ldr	r0, [pc, #56]	@ (80003f4 <main+0x9c>)
 80003bc:	f005 fe0a 	bl	8005fd4 <HAL_UART_Receive_DMA>

  SSD1306_Init (); // initialize the display
 80003c0:	f001 f8e0 	bl	8001584 <SSD1306_Init>


  //HAL_GPIO_WritePin(RFID_BSS_GPIO_Port, RFID_BSS_Pin, RESET);
  Startup_RFID();
 80003c4:	f7ff ff82 	bl	80002cc <Startup_RFID>
  while (1)
  {
//	  HAL_GPIO_WritePin(RFID_BSS_GPIO_Port, RFID_BSS_Pin, RESET);
//	  HAL_GPIO_WritePin(RFID_SS_GPIO_Port, RFID_SS_Pin, RESET);

	  AGV_RFID_Detection();
 80003c8:	f7ff ff98 	bl	80002fc <AGV_RFID_Detection>
//	  }


	  //AGV_Orientation(&agv_orientation, main_line_sensor_front_values_calibrated, main_line_sensor_back_values_calibrated);

	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 80003cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80003d0:	480a      	ldr	r0, [pc, #40]	@ (80003fc <main+0xa4>)
 80003d2:	f003 fb39 	bl	8003a48 <HAL_GPIO_TogglePin>
	  AGV_RFID_Detection();
 80003d6:	bf00      	nop
 80003d8:	e7f6      	b.n	80003c8 <main+0x70>
 80003da:	bf00      	nop
 80003dc:	2000021c 	.word	0x2000021c
 80003e0:	20000334 	.word	0x20000334
 80003e4:	20000088 	.word	0x20000088
 80003e8:	20000348 	.word	0x20000348
 80003ec:	200000b8 	.word	0x200000b8
 80003f0:	2000035c 	.word	0x2000035c
 80003f4:	20000264 	.word	0x20000264
 80003f8:	20000364 	.word	0x20000364
 80003fc:	40011000 	.word	0x40011000

08000400 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b096      	sub	sp, #88	@ 0x58
 8000404:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000406:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800040a:	2228      	movs	r2, #40	@ 0x28
 800040c:	2100      	movs	r1, #0
 800040e:	4618      	mov	r0, r3
 8000410:	f006 fe19 	bl	8007046 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000414:	f107 031c 	add.w	r3, r7, #28
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	605a      	str	r2, [r3, #4]
 800041e:	609a      	str	r2, [r3, #8]
 8000420:	60da      	str	r2, [r3, #12]
 8000422:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000424:	1d3b      	adds	r3, r7, #4
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
 800042e:	60da      	str	r2, [r3, #12]
 8000430:	611a      	str	r2, [r3, #16]
 8000432:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000434:	2301      	movs	r3, #1
 8000436:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000438:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800043c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800043e:	2300      	movs	r3, #0
 8000440:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000442:	2301      	movs	r3, #1
 8000444:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000446:	2302      	movs	r3, #2
 8000448:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800044a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800044e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000450:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000454:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000456:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800045a:	4618      	mov	r0, r3
 800045c:	f004 f8d8 	bl	8004610 <HAL_RCC_OscConfig>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000466:	f000 fb7d 	bl	8000b64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800046a:	230f      	movs	r3, #15
 800046c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800046e:	2302      	movs	r3, #2
 8000470:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000472:	2300      	movs	r3, #0
 8000474:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000476:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800047a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800047c:	2300      	movs	r3, #0
 800047e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000480:	f107 031c 	add.w	r3, r7, #28
 8000484:	2102      	movs	r1, #2
 8000486:	4618      	mov	r0, r3
 8000488:	f004 fb44 	bl	8004b14 <HAL_RCC_ClockConfig>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000492:	f000 fb67 	bl	8000b64 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000496:	2302      	movs	r3, #2
 8000498:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800049a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800049e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004a0:	1d3b      	adds	r3, r7, #4
 80004a2:	4618      	mov	r0, r3
 80004a4:	f004 fcc4 	bl	8004e30 <HAL_RCCEx_PeriphCLKConfig>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80004ae:	f000 fb59 	bl	8000b64 <Error_Handler>
  }
}
 80004b2:	bf00      	nop
 80004b4:	3758      	adds	r7, #88	@ 0x58
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
	...

080004bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
 80004c8:	605a      	str	r2, [r3, #4]
 80004ca:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004cc:	4b58      	ldr	r3, [pc, #352]	@ (8000630 <MX_ADC1_Init+0x174>)
 80004ce:	4a59      	ldr	r2, [pc, #356]	@ (8000634 <MX_ADC1_Init+0x178>)
 80004d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80004d2:	4b57      	ldr	r3, [pc, #348]	@ (8000630 <MX_ADC1_Init+0x174>)
 80004d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80004d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80004da:	4b55      	ldr	r3, [pc, #340]	@ (8000630 <MX_ADC1_Init+0x174>)
 80004dc:	2201      	movs	r2, #1
 80004de:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004e0:	4b53      	ldr	r3, [pc, #332]	@ (8000630 <MX_ADC1_Init+0x174>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004e6:	4b52      	ldr	r3, [pc, #328]	@ (8000630 <MX_ADC1_Init+0x174>)
 80004e8:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80004ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004ee:	4b50      	ldr	r3, [pc, #320]	@ (8000630 <MX_ADC1_Init+0x174>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 10;
 80004f4:	4b4e      	ldr	r3, [pc, #312]	@ (8000630 <MX_ADC1_Init+0x174>)
 80004f6:	220a      	movs	r2, #10
 80004f8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004fa:	484d      	ldr	r0, [pc, #308]	@ (8000630 <MX_ADC1_Init+0x174>)
 80004fc:	f001 feb8 	bl	8002270 <HAL_ADC_Init>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000506:	f000 fb2d 	bl	8000b64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800050a:	2300      	movs	r3, #0
 800050c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800050e:	2301      	movs	r3, #1
 8000510:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000512:	2303      	movs	r3, #3
 8000514:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	4619      	mov	r1, r3
 800051a:	4845      	ldr	r0, [pc, #276]	@ (8000630 <MX_ADC1_Init+0x174>)
 800051c:	f002 f954 	bl	80027c8 <HAL_ADC_ConfigChannel>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000526:	f000 fb1d 	bl	8000b64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800052a:	2301      	movs	r3, #1
 800052c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800052e:	2302      	movs	r3, #2
 8000530:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	4619      	mov	r1, r3
 8000536:	483e      	ldr	r0, [pc, #248]	@ (8000630 <MX_ADC1_Init+0x174>)
 8000538:	f002 f946 	bl	80027c8 <HAL_ADC_ConfigChannel>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000542:	f000 fb0f 	bl	8000b64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000546:	2304      	movs	r3, #4
 8000548:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800054a:	2303      	movs	r3, #3
 800054c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	4619      	mov	r1, r3
 8000552:	4837      	ldr	r0, [pc, #220]	@ (8000630 <MX_ADC1_Init+0x174>)
 8000554:	f002 f938 	bl	80027c8 <HAL_ADC_ConfigChannel>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800055e:	f000 fb01 	bl	8000b64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000562:	2305      	movs	r3, #5
 8000564:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000566:	2304      	movs	r3, #4
 8000568:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	4619      	mov	r1, r3
 800056e:	4830      	ldr	r0, [pc, #192]	@ (8000630 <MX_ADC1_Init+0x174>)
 8000570:	f002 f92a 	bl	80027c8 <HAL_ADC_ConfigChannel>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800057a:	f000 faf3 	bl	8000b64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800057e:	2306      	movs	r3, #6
 8000580:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000582:	2305      	movs	r3, #5
 8000584:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	4619      	mov	r1, r3
 800058a:	4829      	ldr	r0, [pc, #164]	@ (8000630 <MX_ADC1_Init+0x174>)
 800058c:	f002 f91c 	bl	80027c8 <HAL_ADC_ConfigChannel>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000596:	f000 fae5 	bl	8000b64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800059a:	2307      	movs	r3, #7
 800059c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800059e:	2306      	movs	r3, #6
 80005a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	4619      	mov	r1, r3
 80005a6:	4822      	ldr	r0, [pc, #136]	@ (8000630 <MX_ADC1_Init+0x174>)
 80005a8:	f002 f90e 	bl	80027c8 <HAL_ADC_ConfigChannel>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80005b2:	f000 fad7 	bl	8000b64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80005b6:	2308      	movs	r3, #8
 80005b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80005ba:	2307      	movs	r3, #7
 80005bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	4619      	mov	r1, r3
 80005c2:	481b      	ldr	r0, [pc, #108]	@ (8000630 <MX_ADC1_Init+0x174>)
 80005c4:	f002 f900 	bl	80027c8 <HAL_ADC_ConfigChannel>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80005ce:	f000 fac9 	bl	8000b64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80005d2:	2309      	movs	r3, #9
 80005d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80005d6:	2308      	movs	r3, #8
 80005d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	4619      	mov	r1, r3
 80005de:	4814      	ldr	r0, [pc, #80]	@ (8000630 <MX_ADC1_Init+0x174>)
 80005e0:	f002 f8f2 	bl	80027c8 <HAL_ADC_ConfigChannel>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80005ea:	f000 fabb 	bl	8000b64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80005ee:	230a      	movs	r3, #10
 80005f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80005f2:	2309      	movs	r3, #9
 80005f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	4619      	mov	r1, r3
 80005fa:	480d      	ldr	r0, [pc, #52]	@ (8000630 <MX_ADC1_Init+0x174>)
 80005fc:	f002 f8e4 	bl	80027c8 <HAL_ADC_ConfigChannel>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 8000606:	f000 faad 	bl	8000b64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800060a:	230e      	movs	r3, #14
 800060c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800060e:	230a      	movs	r3, #10
 8000610:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	4619      	mov	r1, r3
 8000616:	4806      	ldr	r0, [pc, #24]	@ (8000630 <MX_ADC1_Init+0x174>)
 8000618:	f002 f8d6 	bl	80027c8 <HAL_ADC_ConfigChannel>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_ADC1_Init+0x16a>
  {
    Error_Handler();
 8000622:	f000 fa9f 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000626:	bf00      	nop
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20000088 	.word	0x20000088
 8000634:	40012400 	.word	0x40012400

08000638 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000648:	4b58      	ldr	r3, [pc, #352]	@ (80007ac <MX_ADC3_Init+0x174>)
 800064a:	4a59      	ldr	r2, [pc, #356]	@ (80007b0 <MX_ADC3_Init+0x178>)
 800064c:	601a      	str	r2, [r3, #0]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800064e:	4b57      	ldr	r3, [pc, #348]	@ (80007ac <MX_ADC3_Init+0x174>)
 8000650:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000654:	609a      	str	r2, [r3, #8]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000656:	4b55      	ldr	r3, [pc, #340]	@ (80007ac <MX_ADC3_Init+0x174>)
 8000658:	2201      	movs	r2, #1
 800065a:	731a      	strb	r2, [r3, #12]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800065c:	4b53      	ldr	r3, [pc, #332]	@ (80007ac <MX_ADC3_Init+0x174>)
 800065e:	2200      	movs	r2, #0
 8000660:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000662:	4b52      	ldr	r3, [pc, #328]	@ (80007ac <MX_ADC3_Init+0x174>)
 8000664:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000668:	61da      	str	r2, [r3, #28]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800066a:	4b50      	ldr	r3, [pc, #320]	@ (80007ac <MX_ADC3_Init+0x174>)
 800066c:	2200      	movs	r2, #0
 800066e:	605a      	str	r2, [r3, #4]
  hadc3.Init.NbrOfConversion = 10;
 8000670:	4b4e      	ldr	r3, [pc, #312]	@ (80007ac <MX_ADC3_Init+0x174>)
 8000672:	220a      	movs	r2, #10
 8000674:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000676:	484d      	ldr	r0, [pc, #308]	@ (80007ac <MX_ADC3_Init+0x174>)
 8000678:	f001 fdfa 	bl	8002270 <HAL_ADC_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_ADC3_Init+0x4e>
  {
    Error_Handler();
 8000682:	f000 fa6f 	bl	8000b64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000686:	2302      	movs	r3, #2
 8000688:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800068a:	2301      	movs	r3, #1
 800068c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800068e:	2303      	movs	r3, #3
 8000690:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	4619      	mov	r1, r3
 8000696:	4845      	ldr	r0, [pc, #276]	@ (80007ac <MX_ADC3_Init+0x174>)
 8000698:	f002 f896 	bl	80027c8 <HAL_ADC_ConfigChannel>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 80006a2:	f000 fa5f 	bl	8000b64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006a6:	2303      	movs	r3, #3
 80006a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006aa:	2302      	movs	r3, #2
 80006ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	4619      	mov	r1, r3
 80006b2:	483e      	ldr	r0, [pc, #248]	@ (80007ac <MX_ADC3_Init+0x174>)
 80006b4:	f002 f888 	bl	80027c8 <HAL_ADC_ConfigChannel>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 80006be:	f000 fa51 	bl	8000b64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c2:	2304      	movs	r3, #4
 80006c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006c6:	2303      	movs	r3, #3
 80006c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	4619      	mov	r1, r3
 80006ce:	4837      	ldr	r0, [pc, #220]	@ (80007ac <MX_ADC3_Init+0x174>)
 80006d0:	f002 f87a 	bl	80027c8 <HAL_ADC_ConfigChannel>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_ADC3_Init+0xa6>
  {
    Error_Handler();
 80006da:	f000 fa43 	bl	8000b64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006de:	2305      	movs	r3, #5
 80006e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80006e2:	2304      	movs	r3, #4
 80006e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	4619      	mov	r1, r3
 80006ea:	4830      	ldr	r0, [pc, #192]	@ (80007ac <MX_ADC3_Init+0x174>)
 80006ec:	f002 f86c 	bl	80027c8 <HAL_ADC_ConfigChannel>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_ADC3_Init+0xc2>
  {
    Error_Handler();
 80006f6:	f000 fa35 	bl	8000b64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006fa:	2306      	movs	r3, #6
 80006fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80006fe:	2305      	movs	r3, #5
 8000700:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	4619      	mov	r1, r3
 8000706:	4829      	ldr	r0, [pc, #164]	@ (80007ac <MX_ADC3_Init+0x174>)
 8000708:	f002 f85e 	bl	80027c8 <HAL_ADC_ConfigChannel>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_ADC3_Init+0xde>
  {
    Error_Handler();
 8000712:	f000 fa27 	bl	8000b64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000716:	2307      	movs	r3, #7
 8000718:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800071a:	2306      	movs	r3, #6
 800071c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	4619      	mov	r1, r3
 8000722:	4822      	ldr	r0, [pc, #136]	@ (80007ac <MX_ADC3_Init+0x174>)
 8000724:	f002 f850 	bl	80027c8 <HAL_ADC_ConfigChannel>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_ADC3_Init+0xfa>
  {
    Error_Handler();
 800072e:	f000 fa19 	bl	8000b64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000732:	2308      	movs	r3, #8
 8000734:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000736:	2307      	movs	r3, #7
 8000738:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	4619      	mov	r1, r3
 800073e:	481b      	ldr	r0, [pc, #108]	@ (80007ac <MX_ADC3_Init+0x174>)
 8000740:	f002 f842 	bl	80027c8 <HAL_ADC_ConfigChannel>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_ADC3_Init+0x116>
  {
    Error_Handler();
 800074a:	f000 fa0b 	bl	8000b64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800074e:	230b      	movs	r3, #11
 8000750:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000752:	2308      	movs	r3, #8
 8000754:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	4619      	mov	r1, r3
 800075a:	4814      	ldr	r0, [pc, #80]	@ (80007ac <MX_ADC3_Init+0x174>)
 800075c:	f002 f834 	bl	80027c8 <HAL_ADC_ConfigChannel>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_ADC3_Init+0x132>
  {
    Error_Handler();
 8000766:	f000 f9fd 	bl	8000b64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800076a:	230c      	movs	r3, #12
 800076c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800076e:	2309      	movs	r3, #9
 8000770:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	4619      	mov	r1, r3
 8000776:	480d      	ldr	r0, [pc, #52]	@ (80007ac <MX_ADC3_Init+0x174>)
 8000778:	f002 f826 	bl	80027c8 <HAL_ADC_ConfigChannel>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_ADC3_Init+0x14e>
  {
    Error_Handler();
 8000782:	f000 f9ef 	bl	8000b64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000786:	230d      	movs	r3, #13
 8000788:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800078a:	230a      	movs	r3, #10
 800078c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	4619      	mov	r1, r3
 8000792:	4806      	ldr	r0, [pc, #24]	@ (80007ac <MX_ADC3_Init+0x174>)
 8000794:	f002 f818 	bl	80027c8 <HAL_ADC_ConfigChannel>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_ADC3_Init+0x16a>
  {
    Error_Handler();
 800079e:	f000 f9e1 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	3710      	adds	r7, #16
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	200000b8 	.word	0x200000b8
 80007b0:	40013c00 	.word	0x40013c00

080007b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007b8:	4b12      	ldr	r3, [pc, #72]	@ (8000804 <MX_I2C1_Init+0x50>)
 80007ba:	4a13      	ldr	r2, [pc, #76]	@ (8000808 <MX_I2C1_Init+0x54>)
 80007bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80007be:	4b11      	ldr	r3, [pc, #68]	@ (8000804 <MX_I2C1_Init+0x50>)
 80007c0:	4a12      	ldr	r2, [pc, #72]	@ (800080c <MX_I2C1_Init+0x58>)
 80007c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <MX_I2C1_Init+0x50>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <MX_I2C1_Init+0x50>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <MX_I2C1_Init+0x50>)
 80007d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000804 <MX_I2C1_Init+0x50>)
 80007da:	2200      	movs	r2, #0
 80007dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007de:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <MX_I2C1_Init+0x50>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e4:	4b07      	ldr	r3, [pc, #28]	@ (8000804 <MX_I2C1_Init+0x50>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ea:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <MX_I2C1_Init+0x50>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007f0:	4804      	ldr	r0, [pc, #16]	@ (8000804 <MX_I2C1_Init+0x50>)
 80007f2:	f003 f943 	bl	8003a7c <HAL_I2C_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007fc:	f000 f9b2 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000170 	.word	0x20000170
 8000808:	40005400 	.word	0x40005400
 800080c:	00061a80 	.word	0x00061a80

08000810 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000814:	4b17      	ldr	r3, [pc, #92]	@ (8000874 <MX_SPI2_Init+0x64>)
 8000816:	4a18      	ldr	r2, [pc, #96]	@ (8000878 <MX_SPI2_Init+0x68>)
 8000818:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800081a:	4b16      	ldr	r3, [pc, #88]	@ (8000874 <MX_SPI2_Init+0x64>)
 800081c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000820:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000822:	4b14      	ldr	r3, [pc, #80]	@ (8000874 <MX_SPI2_Init+0x64>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000828:	4b12      	ldr	r3, [pc, #72]	@ (8000874 <MX_SPI2_Init+0x64>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800082e:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <MX_SPI2_Init+0x64>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000834:	4b0f      	ldr	r3, [pc, #60]	@ (8000874 <MX_SPI2_Init+0x64>)
 8000836:	2200      	movs	r2, #0
 8000838:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800083a:	4b0e      	ldr	r3, [pc, #56]	@ (8000874 <MX_SPI2_Init+0x64>)
 800083c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000840:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000842:	4b0c      	ldr	r3, [pc, #48]	@ (8000874 <MX_SPI2_Init+0x64>)
 8000844:	2230      	movs	r2, #48	@ 0x30
 8000846:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8000848:	4b0a      	ldr	r3, [pc, #40]	@ (8000874 <MX_SPI2_Init+0x64>)
 800084a:	2280      	movs	r2, #128	@ 0x80
 800084c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800084e:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <MX_SPI2_Init+0x64>)
 8000850:	2200      	movs	r2, #0
 8000852:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000854:	4b07      	ldr	r3, [pc, #28]	@ (8000874 <MX_SPI2_Init+0x64>)
 8000856:	2200      	movs	r2, #0
 8000858:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800085a:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <MX_SPI2_Init+0x64>)
 800085c:	220a      	movs	r2, #10
 800085e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000860:	4804      	ldr	r0, [pc, #16]	@ (8000874 <MX_SPI2_Init+0x64>)
 8000862:	f004 fb9b 	bl	8004f9c <HAL_SPI_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800086c:	f000 f97a 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	200001c4 	.word	0x200001c4
 8000878:	40003800 	.word	0x40003800

0800087c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	@ 0x28
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000882:	f107 0320 	add.w	r3, r7, #32
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]
 800089a:	615a      	str	r2, [r3, #20]
 800089c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800089e:	4b27      	ldr	r3, [pc, #156]	@ (800093c <MX_TIM2_Init+0xc0>)
 80008a0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008a6:	4b25      	ldr	r3, [pc, #148]	@ (800093c <MX_TIM2_Init+0xc0>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ac:	4b23      	ldr	r3, [pc, #140]	@ (800093c <MX_TIM2_Init+0xc0>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 80008b2:	4b22      	ldr	r3, [pc, #136]	@ (800093c <MX_TIM2_Init+0xc0>)
 80008b4:	22ff      	movs	r2, #255	@ 0xff
 80008b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b8:	4b20      	ldr	r3, [pc, #128]	@ (800093c <MX_TIM2_Init+0xc0>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008be:	4b1f      	ldr	r3, [pc, #124]	@ (800093c <MX_TIM2_Init+0xc0>)
 80008c0:	2280      	movs	r2, #128	@ 0x80
 80008c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008c4:	481d      	ldr	r0, [pc, #116]	@ (800093c <MX_TIM2_Init+0xc0>)
 80008c6:	f004 fe43 	bl	8005550 <HAL_TIM_PWM_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80008d0:	f000 f948 	bl	8000b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d4:	2300      	movs	r3, #0
 80008d6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008dc:	f107 0320 	add.w	r3, r7, #32
 80008e0:	4619      	mov	r1, r3
 80008e2:	4816      	ldr	r0, [pc, #88]	@ (800093c <MX_TIM2_Init+0xc0>)
 80008e4:	f005 fa4a 	bl	8005d7c <HAL_TIMEx_MasterConfigSynchronization>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80008ee:	f000 f939 	bl	8000b64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008f2:	2360      	movs	r3, #96	@ 0x60
 80008f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	2200      	movs	r2, #0
 8000906:	4619      	mov	r1, r3
 8000908:	480c      	ldr	r0, [pc, #48]	@ (800093c <MX_TIM2_Init+0xc0>)
 800090a:	f004 ff2b 	bl	8005764 <HAL_TIM_PWM_ConfigChannel>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000914:	f000 f926 	bl	8000b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	2204      	movs	r2, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4807      	ldr	r0, [pc, #28]	@ (800093c <MX_TIM2_Init+0xc0>)
 8000920:	f004 ff20 	bl	8005764 <HAL_TIM_PWM_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800092a:	f000 f91b 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800092e:	4803      	ldr	r0, [pc, #12]	@ (800093c <MX_TIM2_Init+0xc0>)
 8000930:	f001 f9d0 	bl	8001cd4 <HAL_TIM_MspPostInit>

}
 8000934:	bf00      	nop
 8000936:	3728      	adds	r7, #40	@ 0x28
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	2000021c 	.word	0x2000021c

08000940 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000944:	4b11      	ldr	r3, [pc, #68]	@ (800098c <MX_USART1_UART_Init+0x4c>)
 8000946:	4a12      	ldr	r2, [pc, #72]	@ (8000990 <MX_USART1_UART_Init+0x50>)
 8000948:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800094a:	4b10      	ldr	r3, [pc, #64]	@ (800098c <MX_USART1_UART_Init+0x4c>)
 800094c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000950:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000952:	4b0e      	ldr	r3, [pc, #56]	@ (800098c <MX_USART1_UART_Init+0x4c>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000958:	4b0c      	ldr	r3, [pc, #48]	@ (800098c <MX_USART1_UART_Init+0x4c>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800095e:	4b0b      	ldr	r3, [pc, #44]	@ (800098c <MX_USART1_UART_Init+0x4c>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000964:	4b09      	ldr	r3, [pc, #36]	@ (800098c <MX_USART1_UART_Init+0x4c>)
 8000966:	220c      	movs	r2, #12
 8000968:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096a:	4b08      	ldr	r3, [pc, #32]	@ (800098c <MX_USART1_UART_Init+0x4c>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000970:	4b06      	ldr	r3, [pc, #24]	@ (800098c <MX_USART1_UART_Init+0x4c>)
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000976:	4805      	ldr	r0, [pc, #20]	@ (800098c <MX_USART1_UART_Init+0x4c>)
 8000978:	f005 fa6c 	bl	8005e54 <HAL_UART_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000982:	f000 f8ef 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000264 	.word	0x20000264
 8000990:	40013800 	.word	0x40013800

08000994 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800099a:	4b1e      	ldr	r3, [pc, #120]	@ (8000a14 <MX_DMA_Init+0x80>)
 800099c:	695b      	ldr	r3, [r3, #20]
 800099e:	4a1d      	ldr	r2, [pc, #116]	@ (8000a14 <MX_DMA_Init+0x80>)
 80009a0:	f043 0302 	orr.w	r3, r3, #2
 80009a4:	6153      	str	r3, [r2, #20]
 80009a6:	4b1b      	ldr	r3, [pc, #108]	@ (8000a14 <MX_DMA_Init+0x80>)
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	f003 0302 	and.w	r3, r3, #2
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009b2:	4b18      	ldr	r3, [pc, #96]	@ (8000a14 <MX_DMA_Init+0x80>)
 80009b4:	695b      	ldr	r3, [r3, #20]
 80009b6:	4a17      	ldr	r2, [pc, #92]	@ (8000a14 <MX_DMA_Init+0x80>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	6153      	str	r3, [r2, #20]
 80009be:	4b15      	ldr	r3, [pc, #84]	@ (8000a14 <MX_DMA_Init+0x80>)
 80009c0:	695b      	ldr	r3, [r3, #20]
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2100      	movs	r1, #0
 80009ce:	200b      	movs	r0, #11
 80009d0:	f002 f9d3 	bl	8002d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009d4:	200b      	movs	r0, #11
 80009d6:	f002 f9ec 	bl	8002db2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80009da:	2200      	movs	r2, #0
 80009dc:	2100      	movs	r1, #0
 80009de:	200e      	movs	r0, #14
 80009e0:	f002 f9cb 	bl	8002d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80009e4:	200e      	movs	r0, #14
 80009e6:	f002 f9e4 	bl	8002db2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2100      	movs	r1, #0
 80009ee:	200f      	movs	r0, #15
 80009f0:	f002 f9c3 	bl	8002d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80009f4:	200f      	movs	r0, #15
 80009f6:	f002 f9dc 	bl	8002db2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_5_IRQn, 0, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2100      	movs	r1, #0
 80009fe:	203b      	movs	r0, #59	@ 0x3b
 8000a00:	f002 f9bb 	bl	8002d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_5_IRQn);
 8000a04:	203b      	movs	r0, #59	@ 0x3b
 8000a06:	f002 f9d4 	bl	8002db2 <HAL_NVIC_EnableIRQ>

}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40021000 	.word	0x40021000

08000a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	@ 0x28
 8000a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1e:	f107 0318 	add.w	r3, r7, #24
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a2c:	4b49      	ldr	r3, [pc, #292]	@ (8000b54 <MX_GPIO_Init+0x13c>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	4a48      	ldr	r2, [pc, #288]	@ (8000b54 <MX_GPIO_Init+0x13c>)
 8000a32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a36:	6193      	str	r3, [r2, #24]
 8000a38:	4b46      	ldr	r3, [pc, #280]	@ (8000b54 <MX_GPIO_Init+0x13c>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a40:	617b      	str	r3, [r7, #20]
 8000a42:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a44:	4b43      	ldr	r3, [pc, #268]	@ (8000b54 <MX_GPIO_Init+0x13c>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	4a42      	ldr	r2, [pc, #264]	@ (8000b54 <MX_GPIO_Init+0x13c>)
 8000a4a:	f043 0310 	orr.w	r3, r3, #16
 8000a4e:	6193      	str	r3, [r2, #24]
 8000a50:	4b40      	ldr	r3, [pc, #256]	@ (8000b54 <MX_GPIO_Init+0x13c>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	f003 0310 	and.w	r3, r3, #16
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b54 <MX_GPIO_Init+0x13c>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	4a3c      	ldr	r2, [pc, #240]	@ (8000b54 <MX_GPIO_Init+0x13c>)
 8000a62:	f043 0304 	orr.w	r3, r3, #4
 8000a66:	6193      	str	r3, [r2, #24]
 8000a68:	4b3a      	ldr	r3, [pc, #232]	@ (8000b54 <MX_GPIO_Init+0x13c>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	f003 0304 	and.w	r3, r3, #4
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a74:	4b37      	ldr	r3, [pc, #220]	@ (8000b54 <MX_GPIO_Init+0x13c>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	4a36      	ldr	r2, [pc, #216]	@ (8000b54 <MX_GPIO_Init+0x13c>)
 8000a7a:	f043 0308 	orr.w	r3, r3, #8
 8000a7e:	6193      	str	r3, [r2, #24]
 8000a80:	4b34      	ldr	r3, [pc, #208]	@ (8000b54 <MX_GPIO_Init+0x13c>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	f003 0308 	and.w	r3, r3, #8
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a8c:	4b31      	ldr	r3, [pc, #196]	@ (8000b54 <MX_GPIO_Init+0x13c>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	4a30      	ldr	r2, [pc, #192]	@ (8000b54 <MX_GPIO_Init+0x13c>)
 8000a92:	f043 0320 	orr.w	r3, r3, #32
 8000a96:	6193      	str	r3, [r2, #24]
 8000a98:	4b2e      	ldr	r3, [pc, #184]	@ (8000b54 <MX_GPIO_Init+0x13c>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	f003 0320 	and.w	r3, r3, #32
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RFID_IRQ_Pin|IN3_Pin|IN4_Pin, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f241 0130 	movw	r1, #4144	@ 0x1030
 8000aaa:	482b      	ldr	r0, [pc, #172]	@ (8000b58 <MX_GPIO_Init+0x140>)
 8000aac:	f002 ffb4 	bl	8003a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RFID_SS_GPIO_Port, RFID_SS_Pin, GPIO_PIN_SET);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ab6:	4829      	ldr	r0, [pc, #164]	@ (8000b5c <MX_GPIO_Init+0x144>)
 8000ab8:	f002 ffae 	bl	8003a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RFID_Reset_Pin|RFID_BSS_Pin|UART_STATUS_Pin|INTER_STATUS_Pin, GPIO_PIN_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	f44f 61c3 	mov.w	r1, #1560	@ 0x618
 8000ac2:	4826      	ldr	r0, [pc, #152]	@ (8000b5c <MX_GPIO_Init+0x144>)
 8000ac4:	f002 ffa8 	bl	8003a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8|IN1_Pin|IN2_Pin, GPIO_PIN_RESET);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f44f 6158 	mov.w	r1, #3456	@ 0xd80
 8000ace:	4824      	ldr	r0, [pc, #144]	@ (8000b60 <MX_GPIO_Init+0x148>)
 8000ad0:	f002 ffa2 	bl	8003a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RFID_IRQ_Pin IN3_Pin IN4_Pin */
  GPIO_InitStruct.Pin = RFID_IRQ_Pin|IN3_Pin|IN4_Pin;
 8000ad4:	f241 0330 	movw	r3, #4144	@ 0x1030
 8000ad8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ada:	2301      	movs	r3, #1
 8000adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae6:	f107 0318 	add.w	r3, r7, #24
 8000aea:	4619      	mov	r1, r3
 8000aec:	481a      	ldr	r0, [pc, #104]	@ (8000b58 <MX_GPIO_Init+0x140>)
 8000aee:	f002 fdff 	bl	80036f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RFID_SS_Pin RFID_Reset_Pin RFID_BSS_Pin UART_STATUS_Pin
                           INTER_STATUS_Pin */
  GPIO_InitStruct.Pin = RFID_SS_Pin|RFID_Reset_Pin|RFID_BSS_Pin|UART_STATUS_Pin
 8000af2:	f44f 63e3 	mov.w	r3, #1816	@ 0x718
 8000af6:	61bb      	str	r3, [r7, #24]
                          |INTER_STATUS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af8:	2301      	movs	r3, #1
 8000afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2302      	movs	r3, #2
 8000b02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b04:	f107 0318 	add.w	r3, r7, #24
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4814      	ldr	r0, [pc, #80]	@ (8000b5c <MX_GPIO_Init+0x144>)
 8000b0c:	f002 fdf0 	bl	80036f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000b10:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000b14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b16:	2301      	movs	r3, #1
 8000b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b22:	f107 0318 	add.w	r3, r7, #24
 8000b26:	4619      	mov	r1, r3
 8000b28:	480d      	ldr	r0, [pc, #52]	@ (8000b60 <MX_GPIO_Init+0x148>)
 8000b2a:	f002 fde1 	bl	80036f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_Pin IN2_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin;
 8000b2e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b34:	2301      	movs	r3, #1
 8000b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b40:	f107 0318 	add.w	r3, r7, #24
 8000b44:	4619      	mov	r1, r3
 8000b46:	4806      	ldr	r0, [pc, #24]	@ (8000b60 <MX_GPIO_Init+0x148>)
 8000b48:	f002 fdd2 	bl	80036f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b4c:	bf00      	nop
 8000b4e:	3728      	adds	r7, #40	@ 0x28
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40021000 	.word	0x40021000
 8000b58:	40010c00 	.word	0x40010c00
 8000b5c:	40011400 	.word	0x40011400
 8000b60:	40011000 	.word	0x40011000

08000b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b68:	b672      	cpsid	i
}
 8000b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <Error_Handler+0x8>

08000b70 <PN532_WriteFrame>:
/**
  * @brief: Write a frame to the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns -1 if there is an error parsing the frame.  
  */
int PN532_WriteFrame(PN532* pn532, uint8_t* data, uint16_t length) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b0c8      	sub	sp, #288	@ 0x120
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000b7a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000b7e:	6018      	str	r0, [r3, #0]
 8000b80:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000b84:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000b88:	6019      	str	r1, [r3, #0]
 8000b8a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000b8e:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000b92:	801a      	strh	r2, [r3, #0]
    if (length > PN532_FRAME_MAX_LENGTH || length < 1) {
 8000b94:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000b98:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000b9c:	881b      	ldrh	r3, [r3, #0]
 8000b9e:	2bff      	cmp	r3, #255	@ 0xff
 8000ba0:	d806      	bhi.n	8000bb0 <PN532_WriteFrame+0x40>
 8000ba2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000ba6:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000baa:	881b      	ldrh	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d102      	bne.n	8000bb6 <PN532_WriteFrame+0x46>
        return PN532_STATUS_ERROR; // Data must be array of 1 to 255 bytes.
 8000bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb4:	e0aa      	b.n	8000d0c <PN532_WriteFrame+0x19c>
    // - Command bytes
    // - Checksum
    // - Postamble (0x00)

    uint8_t frame[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    frame[0] = PN532_PREAMBLE;
 8000bbc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000bc0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
    frame[1] = PN532_STARTCODE1;
 8000bc8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000bcc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	705a      	strb	r2, [r3, #1]
    frame[2] = PN532_STARTCODE2;
 8000bd4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000bd8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000bdc:	22ff      	movs	r2, #255	@ 0xff
 8000bde:	709a      	strb	r2, [r3, #2]
    for (uint8_t i = 0; i < 3; i++) {
 8000be0:	2300      	movs	r3, #0
 8000be2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8000be6:	e010      	b.n	8000c0a <PN532_WriteFrame+0x9a>
        checksum += frame[i];
 8000be8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000bec:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000bf0:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000bf4:	5cd2      	ldrb	r2, [r2, r3]
 8000bf6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8000bfa:	4413      	add	r3, r2
 8000bfc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < 3; i++) {
 8000c00:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000c04:	3301      	adds	r3, #1
 8000c06:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8000c0a:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d9ea      	bls.n	8000be8 <PN532_WriteFrame+0x78>
    }
    frame[3] = length & 0xFF;
 8000c12:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000c16:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000c1a:	881b      	ldrh	r3, [r3, #0]
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000c22:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000c26:	70da      	strb	r2, [r3, #3]
    frame[4] = (~length + 1) & 0xFF;
 8000c28:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000c2c:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000c30:	881b      	ldrh	r3, [r3, #0]
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	425b      	negs	r3, r3
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000c3c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000c40:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 0; i < length; i++) {
 8000c42:	2300      	movs	r3, #0
 8000c44:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 8000c48:	e023      	b.n	8000c92 <PN532_WriteFrame+0x122>
        frame[5 + i] = data[i];
 8000c4a:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000c4e:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000c52:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8000c56:	6812      	ldr	r2, [r2, #0]
 8000c58:	441a      	add	r2, r3
 8000c5a:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000c5e:	3305      	adds	r3, #5
 8000c60:	7811      	ldrb	r1, [r2, #0]
 8000c62:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000c66:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000c6a:	54d1      	strb	r1, [r2, r3]
        checksum += data[i];
 8000c6c:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000c70:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000c74:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8000c78:	6812      	ldr	r2, [r2, #0]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	781a      	ldrb	r2, [r3, #0]
 8000c7e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8000c82:	4413      	add	r3, r2
 8000c84:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < length; i++) {
 8000c88:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 8000c92:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000c9c:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 8000ca0:	8812      	ldrh	r2, [r2, #0]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d8d1      	bhi.n	8000c4a <PN532_WriteFrame+0xda>
    }
    frame[length + 5] = ~checksum & 0xFF;
 8000ca6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000caa:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000cae:	881b      	ldrh	r3, [r3, #0]
 8000cb0:	3305      	adds	r3, #5
 8000cb2:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 8000cb6:	43d2      	mvns	r2, r2
 8000cb8:	b2d1      	uxtb	r1, r2
 8000cba:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000cbe:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000cc2:	54d1      	strb	r1, [r2, r3]
    frame[length + 6] = PN532_POSTAMBLE;
 8000cc4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000cc8:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000ccc:	881b      	ldrh	r3, [r3, #0]
 8000cce:	3306      	adds	r3, #6
 8000cd0:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000cd4:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000cd8:	2100      	movs	r1, #0
 8000cda:	54d1      	strb	r1, [r2, r3]
    if (pn532->write_data(frame, length + 7) != PN532_STATUS_OK) {
 8000cdc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000ce0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000cec:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 8000cf0:	8812      	ldrh	r2, [r2, #0]
 8000cf2:	3207      	adds	r2, #7
 8000cf4:	b291      	uxth	r1, r2
 8000cf6:	f107 0214 	add.w	r2, r7, #20
 8000cfa:	4610      	mov	r0, r2
 8000cfc:	4798      	blx	r3
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d002      	beq.n	8000d0a <PN532_WriteFrame+0x19a>
        return PN532_STATUS_ERROR;
 8000d04:	f04f 33ff 	mov.w	r3, #4294967295
 8000d08:	e000      	b.n	8000d0c <PN532_WriteFrame+0x19c>
    }
    return PN532_STATUS_OK;
 8000d0a:	2300      	movs	r3, #0
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <PN532_ReadFrame>:
/**
  * @brief: Read a response frame from the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns frame length or -1 if there is an error parsing the frame.  
  */
int PN532_ReadFrame(PN532* pn532, uint8_t* response, uint16_t length) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b0c8      	sub	sp, #288	@ 0x120
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000d22:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000d26:	6018      	str	r0, [r3, #0]
 8000d28:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000d2c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000d30:	6019      	str	r1, [r3, #0]
 8000d32:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000d36:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000d3a:	801a      	strh	r2, [r3, #0]
    uint8_t buff[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    // Read frame with expected length of data.
    pn532->read_data(buff, length + 7);
 8000d42:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000d46:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000d52:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 8000d56:	8812      	ldrh	r2, [r2, #0]
 8000d58:	3207      	adds	r2, #7
 8000d5a:	b291      	uxth	r1, r2
 8000d5c:	f107 0214 	add.w	r2, r7, #20
 8000d60:	4610      	mov	r0, r2
 8000d62:	4798      	blx	r3
    // Swallow all the 0x00 values that preceed 0xFF.
    uint8_t offset = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    while (buff[offset] == 0x00) {
 8000d6a:	e019      	b.n	8000da0 <PN532_ReadFrame+0x88>
        offset += 1;
 8000d6c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000d70:	3301      	adds	r3, #1
 8000d72:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
        if (offset >= length + 8){
 8000d76:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000d7a:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000d7e:	881b      	ldrh	r3, [r3, #0]
 8000d80:	1dda      	adds	r2, r3, #7
 8000d82:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000d86:	429a      	cmp	r2, r3
 8000d88:	da0a      	bge.n	8000da0 <PN532_ReadFrame+0x88>
            pn532->log("Response frame preamble does not contain 0x00FF!");
 8000d8a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000d8e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	695b      	ldr	r3, [r3, #20]
 8000d96:	485b      	ldr	r0, [pc, #364]	@ (8000f04 <PN532_ReadFrame+0x1ec>)
 8000d98:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 8000d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9e:	e0ab      	b.n	8000ef8 <PN532_ReadFrame+0x1e0>
    while (buff[offset] == 0x00) {
 8000da0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000da4:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000da8:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000dac:	5cd3      	ldrb	r3, [r2, r3]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d0dc      	beq.n	8000d6c <PN532_ReadFrame+0x54>
        }
    }
    if (buff[offset] != 0xFF) {
 8000db2:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000db6:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000dba:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000dbe:	5cd3      	ldrb	r3, [r2, r3]
 8000dc0:	2bff      	cmp	r3, #255	@ 0xff
 8000dc2:	d00a      	beq.n	8000dda <PN532_ReadFrame+0xc2>
        pn532->log("Response frame preamble does not contain 0x00FF!");
 8000dc4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000dc8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	695b      	ldr	r3, [r3, #20]
 8000dd0:	484c      	ldr	r0, [pc, #304]	@ (8000f04 <PN532_ReadFrame+0x1ec>)
 8000dd2:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd8:	e08e      	b.n	8000ef8 <PN532_ReadFrame+0x1e0>
    }
    offset += 1;
 8000dda:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000dde:	3301      	adds	r3, #1
 8000de0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    if (offset >= length + 8) {
 8000de4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000de8:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	1dda      	adds	r2, r3, #7
 8000df0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000df4:	429a      	cmp	r2, r3
 8000df6:	da0a      	bge.n	8000e0e <PN532_ReadFrame+0xf6>
        pn532->log("Response contains no data!");
 8000df8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000dfc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	695b      	ldr	r3, [r3, #20]
 8000e04:	4840      	ldr	r0, [pc, #256]	@ (8000f08 <PN532_ReadFrame+0x1f0>)
 8000e06:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000e08:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0c:	e074      	b.n	8000ef8 <PN532_ReadFrame+0x1e0>
    }
    // Check length & length checksum match.
    uint8_t frame_len = buff[offset];
 8000e0e:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000e12:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000e16:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000e1a:	5cd3      	ldrb	r3, [r2, r3]
 8000e1c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    if (((frame_len + buff[offset+1]) & 0xFF) != 0) {
 8000e20:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000e24:	3301      	adds	r3, #1
 8000e26:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000e2a:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000e2e:	5cd2      	ldrb	r2, [r2, r3]
 8000e30:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8000e34:	4413      	add	r3, r2
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d00a      	beq.n	8000e52 <PN532_ReadFrame+0x13a>
        pn532->log("Response length checksum did not match length!");
 8000e3c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000e40:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	695b      	ldr	r3, [r3, #20]
 8000e48:	4830      	ldr	r0, [pc, #192]	@ (8000f0c <PN532_ReadFrame+0x1f4>)
 8000e4a:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e50:	e052      	b.n	8000ef8 <PN532_ReadFrame+0x1e0>
    }
    // Check frame checksum value matches bytes.
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 8000e52:	2300      	movs	r3, #0
 8000e54:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 8000e58:	e014      	b.n	8000e84 <PN532_ReadFrame+0x16c>
        checksum += buff[offset + 2 + i];
 8000e5a:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000e5e:	1c9a      	adds	r2, r3, #2
 8000e60:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000e64:	4413      	add	r3, r2
 8000e66:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000e6a:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000e6e:	5cd2      	ldrb	r2, [r2, r3]
 8000e70:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8000e74:	4413      	add	r3, r2
 8000e76:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 8000e7a:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000e7e:	3301      	adds	r3, #1
 8000e80:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 8000e84:	f897 211b 	ldrb.w	r2, [r7, #283]	@ 0x11b
 8000e88:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d2e4      	bcs.n	8000e5a <PN532_ReadFrame+0x142>
    }
    checksum &= 0xFF;
    if (checksum != 0) {
 8000e90:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d00a      	beq.n	8000eae <PN532_ReadFrame+0x196>
        pn532->log("Response checksum did not match expected checksum");
 8000e98:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000e9c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	695b      	ldr	r3, [r3, #20]
 8000ea4:	481a      	ldr	r0, [pc, #104]	@ (8000f10 <PN532_ReadFrame+0x1f8>)
 8000ea6:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8000eac:	e024      	b.n	8000ef8 <PN532_ReadFrame+0x1e0>
    }
    // Return frame data.
    for (uint8_t i = 0; i < frame_len; i++) {
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
 8000eb4:	e018      	b.n	8000ee8 <PN532_ReadFrame+0x1d0>
        response[i] = buff[offset + 2 + i];
 8000eb6:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000eba:	1c9a      	adds	r2, r3, #2
 8000ebc:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 8000ec0:	441a      	add	r2, r3
 8000ec2:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 8000ec6:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8000eca:	f5a1 718c 	sub.w	r1, r1, #280	@ 0x118
 8000ece:	6809      	ldr	r1, [r1, #0]
 8000ed0:	440b      	add	r3, r1
 8000ed2:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8000ed6:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8000eda:	5c8a      	ldrb	r2, [r1, r2]
 8000edc:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < frame_len; i++) {
 8000ede:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
 8000ee8:	f897 211c 	ldrb.w	r2, [r7, #284]	@ 0x11c
 8000eec:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d3e0      	bcc.n	8000eb6 <PN532_ReadFrame+0x19e>
    }
    return frame_len;
 8000ef4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	08007ca4 	.word	0x08007ca4
 8000f08:	08007cd8 	.word	0x08007cd8
 8000f0c:	08007cf4 	.word	0x08007cf4
 8000f10:	08007d24 	.word	0x08007d24

08000f14 <PN532_CallFunction>:
    uint8_t* response,
    uint16_t response_length,
    uint8_t* params,
    uint16_t params_length,
    uint32_t timeout
) {
 8000f14:	b590      	push	{r4, r7, lr}
 8000f16:	b0c7      	sub	sp, #284	@ 0x11c
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	f507 748c 	add.w	r4, r7, #280	@ 0x118
 8000f1e:	f5a4 7486 	sub.w	r4, r4, #268	@ 0x10c
 8000f22:	6020      	str	r0, [r4, #0]
 8000f24:	4608      	mov	r0, r1
 8000f26:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8000f2a:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 8000f2e:	600a      	str	r2, [r1, #0]
 8000f30:	4619      	mov	r1, r3
 8000f32:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f36:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	701a      	strb	r2, [r3, #0]
 8000f3e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f42:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000f46:	460a      	mov	r2, r1
 8000f48:	801a      	strh	r2, [r3, #0]
    // Build frame data with command and parameters.
    uint8_t buff[PN532_FRAME_MAX_LENGTH];
    buff[0] = PN532_HOSTTOPN532;
 8000f4a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000f52:	22d4      	movs	r2, #212	@ 0xd4
 8000f54:	701a      	strb	r2, [r3, #0]
    buff[1] = command & 0xFF;
 8000f56:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000f5e:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000f62:	f2a2 120d 	subw	r2, r2, #269	@ 0x10d
 8000f66:	7812      	ldrb	r2, [r2, #0]
 8000f68:	705a      	strb	r2, [r3, #1]
    for (uint8_t i = 0; i < params_length; i++) {
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8000f70:	e012      	b.n	8000f98 <PN532_CallFunction+0x84>
        buff[2 + i] = params[i];
 8000f72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000f76:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8000f7a:	441a      	add	r2, r3
 8000f7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000f80:	3302      	adds	r3, #2
 8000f82:	7811      	ldrb	r1, [r2, #0]
 8000f84:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000f88:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8000f8c:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < params_length; i++) {
 8000f8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000f92:	3301      	adds	r3, #1
 8000f94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8000f98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	f8b7 212c 	ldrh.w	r2, [r7, #300]	@ 0x12c
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d8e5      	bhi.n	8000f72 <PN532_CallFunction+0x5e>
    }
    // Send frame and wait for response.
    if (PN532_WriteFrame(pn532, buff, params_length + 2) != PN532_STATUS_OK) {
 8000fa6:	f8b7 312c 	ldrh.w	r3, [r7, #300]	@ 0x12c
 8000faa:	3302      	adds	r3, #2
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	f107 0110 	add.w	r1, r7, #16
 8000fb2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000fb6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000fba:	6818      	ldr	r0, [r3, #0]
 8000fbc:	f7ff fdd8 	bl	8000b70 <PN532_WriteFrame>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d011      	beq.n	8000fea <PN532_CallFunction+0xd6>
        pn532->wakeup();
 8000fc6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000fca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	691b      	ldr	r3, [r3, #16]
 8000fd2:	4798      	blx	r3
        pn532->log("Trying to wakeup");
 8000fd4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000fd8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	695b      	ldr	r3, [r3, #20]
 8000fe0:	485b      	ldr	r0, [pc, #364]	@ (8001150 <PN532_CallFunction+0x23c>)
 8000fe2:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe8:	e0ac      	b.n	8001144 <PN532_CallFunction+0x230>
    }
    if (!pn532->wait_ready(timeout)) {
 8000fea:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000fee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8000ffa:	4798      	blx	r3
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	f083 0301 	eor.w	r3, r3, #1
 8001002:	b2db      	uxtb	r3, r3
 8001004:	2b00      	cmp	r3, #0
 8001006:	d002      	beq.n	800100e <PN532_CallFunction+0xfa>
        return PN532_STATUS_ERROR;
 8001008:	f04f 33ff 	mov.w	r3, #4294967295
 800100c:	e09a      	b.n	8001144 <PN532_CallFunction+0x230>
    }
    // Verify ACK response and wait to be ready for function response.
    pn532->read_data(buff, sizeof(PN532_ACK));
 800100e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001012:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f107 0210 	add.w	r2, r7, #16
 800101e:	2106      	movs	r1, #6
 8001020:	4610      	mov	r0, r2
 8001022:	4798      	blx	r3
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 8001024:	2300      	movs	r3, #0
 8001026:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800102a:	e01c      	b.n	8001066 <PN532_CallFunction+0x152>
        if (PN532_ACK[i] != buff[i]) {
 800102c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8001030:	4a48      	ldr	r2, [pc, #288]	@ (8001154 <PN532_CallFunction+0x240>)
 8001032:	5cd2      	ldrb	r2, [r2, r3]
 8001034:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8001038:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 800103c:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 8001040:	5ccb      	ldrb	r3, [r1, r3]
 8001042:	429a      	cmp	r2, r3
 8001044:	d00a      	beq.n	800105c <PN532_CallFunction+0x148>
            pn532->log("Did not receive expected ACK from PN532!");
 8001046:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800104a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	4841      	ldr	r0, [pc, #260]	@ (8001158 <PN532_CallFunction+0x244>)
 8001054:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 8001056:	f04f 33ff 	mov.w	r3, #4294967295
 800105a:	e073      	b.n	8001144 <PN532_CallFunction+0x230>
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 800105c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8001060:	3301      	adds	r3, #1
 8001062:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8001066:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800106a:	2b05      	cmp	r3, #5
 800106c:	d9de      	bls.n	800102c <PN532_CallFunction+0x118>
        }
    }
    if (!pn532->wait_ready(timeout)) {
 800106e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001072:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 800107e:	4798      	blx	r3
 8001080:	4603      	mov	r3, r0
 8001082:	f083 0301 	eor.w	r3, r3, #1
 8001086:	b2db      	uxtb	r3, r3
 8001088:	2b00      	cmp	r3, #0
 800108a:	d002      	beq.n	8001092 <PN532_CallFunction+0x17e>
        return PN532_STATUS_ERROR;
 800108c:	f04f 33ff 	mov.w	r3, #4294967295
 8001090:	e058      	b.n	8001144 <PN532_CallFunction+0x230>
    }
    // Read response bytes.
    int frame_len = PN532_ReadFrame(pn532, buff, response_length + 2);
 8001092:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001096:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800109a:	881b      	ldrh	r3, [r3, #0]
 800109c:	3302      	adds	r3, #2
 800109e:	b29a      	uxth	r2, r3
 80010a0:	f107 0110 	add.w	r1, r7, #16
 80010a4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80010a8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80010ac:	6818      	ldr	r0, [r3, #0]
 80010ae:	f7ff fe33 	bl	8000d18 <PN532_ReadFrame>
 80010b2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    // Check that response is for the called function.
    if (! ((buff[0] == PN532_PN532TOHOST) && (buff[1] == (command+1)))) {
 80010b6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80010ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2bd5      	cmp	r3, #213	@ 0xd5
 80010c2:	d10d      	bne.n	80010e0 <PN532_CallFunction+0x1cc>
 80010c4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80010c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80010cc:	785b      	ldrb	r3, [r3, #1]
 80010ce:	461a      	mov	r2, r3
 80010d0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80010d4:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	3301      	adds	r3, #1
 80010dc:	429a      	cmp	r2, r3
 80010de:	d00a      	beq.n	80010f6 <PN532_CallFunction+0x1e2>
        pn532->log("Received unexpected command response!");
 80010e0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80010e4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	695b      	ldr	r3, [r3, #20]
 80010ec:	481b      	ldr	r0, [pc, #108]	@ (800115c <PN532_CallFunction+0x248>)
 80010ee:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80010f0:	f04f 33ff 	mov.w	r3, #4294967295
 80010f4:	e026      	b.n	8001144 <PN532_CallFunction+0x230>
    }
    // Return response data.
    for (uint8_t i = 0; i < response_length; i++) {
 80010f6:	2300      	movs	r3, #0
 80010f8:	f887 3115 	strb.w	r3, [r7, #277]	@ 0x115
 80010fc:	e015      	b.n	800112a <PN532_CallFunction+0x216>
        response[i] = buff[i + 2];
 80010fe:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8001102:	1c9a      	adds	r2, r3, #2
 8001104:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8001108:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 800110c:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 8001110:	6809      	ldr	r1, [r1, #0]
 8001112:	440b      	add	r3, r1
 8001114:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8001118:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 800111c:	5c8a      	ldrb	r2, [r1, r2]
 800111e:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < response_length; i++) {
 8001120:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8001124:	3301      	adds	r3, #1
 8001126:	f887 3115 	strb.w	r3, [r7, #277]	@ 0x115
 800112a:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 800112e:	b29b      	uxth	r3, r3
 8001130:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8001134:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001138:	8812      	ldrh	r2, [r2, #0]
 800113a:	429a      	cmp	r2, r3
 800113c:	d8df      	bhi.n	80010fe <PN532_CallFunction+0x1ea>
    }
    // The the number of bytes read
    return frame_len - 2;
 800113e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001142:	3b02      	subs	r3, #2
}
 8001144:	4618      	mov	r0, r3
 8001146:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 800114a:	46bd      	mov	sp, r7
 800114c:	bd90      	pop	{r4, r7, pc}
 800114e:	bf00      	nop
 8001150:	08007d58 	.word	0x08007d58
 8001154:	08007e30 	.word	0x08007e30
 8001158:	08007d6c 	.word	0x08007d6c
 800115c:	08007d98 	.word	0x08007d98

08001160 <PN532_GetFirmwareVersion>:

/**
  * @brief: Call PN532 GetFirmwareVersion function and return a buff with the IC,
  *  Ver, Rev, and Support values.
  */
int PN532_GetFirmwareVersion(PN532* pn532, uint8_t* version) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af04      	add	r7, sp, #16
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
    // length of version: 4
    if (PN532_CallFunction(pn532, PN532_COMMAND_GETFIRMWAREVERSION,
 800116a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800116e:	9302      	str	r3, [sp, #8]
 8001170:	2300      	movs	r3, #0
 8001172:	9301      	str	r3, [sp, #4]
 8001174:	2300      	movs	r3, #0
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	2304      	movs	r3, #4
 800117a:	683a      	ldr	r2, [r7, #0]
 800117c:	2102      	movs	r1, #2
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff fec8 	bl	8000f14 <PN532_CallFunction>
 8001184:	4603      	mov	r3, r0
 8001186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800118a:	d106      	bne.n	800119a <PN532_GetFirmwareVersion+0x3a>
                           version, 4, NULL, 0, 500) == PN532_STATUS_ERROR) {
        pn532->log("Failed to detect the PN532");
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	695b      	ldr	r3, [r3, #20]
 8001190:	4804      	ldr	r0, [pc, #16]	@ (80011a4 <PN532_GetFirmwareVersion+0x44>)
 8001192:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8001194:	f04f 33ff 	mov.w	r3, #4294967295
 8001198:	e000      	b.n	800119c <PN532_GetFirmwareVersion+0x3c>
    }
    return PN532_STATUS_OK;
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	08007dc0 	.word	0x08007dc0

080011a8 <PN532_SamConfiguration>:

/**
  * @brief: Configure the PN532 to read MiFare cards.
  */
int PN532_SamConfiguration(PN532* pn532) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b088      	sub	sp, #32
 80011ac:	af04      	add	r7, sp, #16
 80011ae:	6078      	str	r0, [r7, #4]
    // - 0x01, normal mode
    // - 0x14, timeout 50ms * 20 = 1 second
    // - 0x01, use IRQ pin
    // Note that no other verification is necessary as call_function will
    // check the command was executed as expected.
    uint8_t params[] = {0x01, 0x14, 0x01};
 80011b0:	4a0d      	ldr	r2, [pc, #52]	@ (80011e8 <PN532_SamConfiguration+0x40>)
 80011b2:	f107 030c 	add.w	r3, r7, #12
 80011b6:	6812      	ldr	r2, [r2, #0]
 80011b8:	4611      	mov	r1, r2
 80011ba:	8019      	strh	r1, [r3, #0]
 80011bc:	3302      	adds	r3, #2
 80011be:	0c12      	lsrs	r2, r2, #16
 80011c0:	701a      	strb	r2, [r3, #0]
    PN532_CallFunction(pn532, PN532_COMMAND_SAMCONFIGURATION,
 80011c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011c6:	9302      	str	r3, [sp, #8]
 80011c8:	2303      	movs	r3, #3
 80011ca:	9301      	str	r3, [sp, #4]
 80011cc:	f107 030c 	add.w	r3, r7, #12
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	2300      	movs	r3, #0
 80011d4:	2200      	movs	r2, #0
 80011d6:	2114      	movs	r1, #20
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff fe9b 	bl	8000f14 <PN532_CallFunction>
                       NULL, 0, params, sizeof(params), PN532_DEFAULT_TIMEOUT);
    return PN532_STATUS_OK;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	08007ddc 	.word	0x08007ddc

080011ec <PN532_ReadPassiveTarget>:
int PN532_ReadPassiveTarget(
    PN532* pn532,
    uint8_t* response,
    uint8_t card_baud,
    uint32_t timeout
) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b090      	sub	sp, #64	@ 0x40
 80011f0:	af04      	add	r7, sp, #16
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	4613      	mov	r3, r2
 80011fa:	71fb      	strb	r3, [r7, #7]
    // Send passive read command for 1 card.  Expect at most a 7 byte UUID.
    uint8_t params[] = {0x01, card_baud};
 80011fc:	2301      	movs	r3, #1
 80011fe:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    uint8_t buff[19];
    int length = PN532_CallFunction(pn532, PN532_COMMAND_INLISTPASSIVETARGET,
 8001208:	f107 0210 	add.w	r2, r7, #16
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	9302      	str	r3, [sp, #8]
 8001210:	2302      	movs	r3, #2
 8001212:	9301      	str	r3, [sp, #4]
 8001214:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2313      	movs	r3, #19
 800121c:	214a      	movs	r1, #74	@ 0x4a
 800121e:	68f8      	ldr	r0, [r7, #12]
 8001220:	f7ff fe78 	bl	8000f14 <PN532_CallFunction>
 8001224:	62b8      	str	r0, [r7, #40]	@ 0x28
                        buff, sizeof(buff), params, sizeof(params), timeout);
    if (length < 0) {
 8001226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001228:	2b00      	cmp	r3, #0
 800122a:	da02      	bge.n	8001232 <PN532_ReadPassiveTarget+0x46>
        return PN532_STATUS_ERROR; // No card found
 800122c:	f04f 33ff 	mov.w	r3, #4294967295
 8001230:	e02e      	b.n	8001290 <PN532_ReadPassiveTarget+0xa4>
    }
    // Check only 1 card with up to a 7 byte UID is present.
    if (buff[0] != 0x01) {
 8001232:	7c3b      	ldrb	r3, [r7, #16]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d006      	beq.n	8001246 <PN532_ReadPassiveTarget+0x5a>
        pn532->log("More than one card detected!");
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	695b      	ldr	r3, [r3, #20]
 800123c:	4816      	ldr	r0, [pc, #88]	@ (8001298 <PN532_ReadPassiveTarget+0xac>)
 800123e:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8001240:	f04f 33ff 	mov.w	r3, #4294967295
 8001244:	e024      	b.n	8001290 <PN532_ReadPassiveTarget+0xa4>
    }
    if (buff[5] > 7) {
 8001246:	7d7b      	ldrb	r3, [r7, #21]
 8001248:	2b07      	cmp	r3, #7
 800124a:	d906      	bls.n	800125a <PN532_ReadPassiveTarget+0x6e>
        pn532->log("Found card with unexpectedly long UID!");
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	4812      	ldr	r0, [pc, #72]	@ (800129c <PN532_ReadPassiveTarget+0xb0>)
 8001252:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8001254:	f04f 33ff 	mov.w	r3, #4294967295
 8001258:	e01a      	b.n	8001290 <PN532_ReadPassiveTarget+0xa4>
    }
    for (uint8_t i = 0; i < buff[5]; i++) {
 800125a:	2300      	movs	r3, #0
 800125c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001260:	e010      	b.n	8001284 <PN532_ReadPassiveTarget+0x98>
        response[i] = buff[6 + i];
 8001262:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001266:	1d9a      	adds	r2, r3, #6
 8001268:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800126c:	68b9      	ldr	r1, [r7, #8]
 800126e:	440b      	add	r3, r1
 8001270:	3230      	adds	r2, #48	@ 0x30
 8001272:	443a      	add	r2, r7
 8001274:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8001278:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < buff[5]; i++) {
 800127a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800127e:	3301      	adds	r3, #1
 8001280:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001284:	7d7b      	ldrb	r3, [r7, #21]
 8001286:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800128a:	429a      	cmp	r2, r3
 800128c:	d3e9      	bcc.n	8001262 <PN532_ReadPassiveTarget+0x76>
    }
    return buff[5];
 800128e:	7d7b      	ldrb	r3, [r7, #21]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3730      	adds	r7, #48	@ 0x30
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	08007de0 	.word	0x08007de0
 800129c:	08007e00 	.word	0x08007e00

080012a0 <PN532_Reset>:
//extern I2C_HandleTypeDef hi2c1;

/**************************************************************************
 * Reset and Log implements
 **************************************************************************/
int PN532_Reset(void) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RFID_Reset_GPIO_Port, RFID_Reset_Pin, GPIO_PIN_SET);
 80012a4:	2201      	movs	r2, #1
 80012a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012aa:	480e      	ldr	r0, [pc, #56]	@ (80012e4 <PN532_Reset+0x44>)
 80012ac:	f002 fbb4 	bl	8003a18 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80012b0:	2064      	movs	r0, #100	@ 0x64
 80012b2:	f000 ffb9 	bl	8002228 <HAL_Delay>
    HAL_GPIO_WritePin(RFID_Reset_GPIO_Port, RFID_Reset_Pin, GPIO_PIN_RESET);
 80012b6:	2200      	movs	r2, #0
 80012b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012bc:	4809      	ldr	r0, [pc, #36]	@ (80012e4 <PN532_Reset+0x44>)
 80012be:	f002 fbab 	bl	8003a18 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 80012c2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012c6:	f000 ffaf 	bl	8002228 <HAL_Delay>
    HAL_GPIO_WritePin(RFID_Reset_GPIO_Port, RFID_Reset_Pin, GPIO_PIN_SET);
 80012ca:	2201      	movs	r2, #1
 80012cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012d0:	4804      	ldr	r0, [pc, #16]	@ (80012e4 <PN532_Reset+0x44>)
 80012d2:	f002 fba1 	bl	8003a18 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80012d6:	2064      	movs	r0, #100	@ 0x64
 80012d8:	f000 ffa6 	bl	8002228 <HAL_Delay>
    return PN532_STATUS_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40011400 	.word	0x40011400

080012e8 <PN532_Log>:

void PN532_Log(const char* log) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
    printf("%s\r\n", log);
 80012f0:	6879      	ldr	r1, [r7, #4]
 80012f2:	4803      	ldr	r0, [pc, #12]	@ (8001300 <PN532_Log+0x18>)
 80012f4:	f005 fe52 	bl	8006f9c <iprintf>
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	08007e28 	.word	0x08007e28

08001304 <spi_rw>:
        num >>= 1;
    }
    return result;
}

void spi_rw(uint8_t* data, uint8_t count) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af02      	add	r7, sp, #8
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(RFID_SS_GPIO_Port, RFID_SS_Pin, GPIO_PIN_RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001316:	480b      	ldr	r0, [pc, #44]	@ (8001344 <spi_rw+0x40>)
 8001318:	f002 fb7e 	bl	8003a18 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, data, data, count, _SPI_TIMEOUT);
    for (uint8_t i = 0; i < count; i++) {
        data[i] = reverse_bit(data[i]);
    }
#else
    HAL_SPI_TransmitReceive(&hspi2, data, data, count, _SPI_TIMEOUT);
 800131c:	78fb      	ldrb	r3, [r7, #3]
 800131e:	b29b      	uxth	r3, r3
 8001320:	220a      	movs	r2, #10
 8001322:	9200      	str	r2, [sp, #0]
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	4807      	ldr	r0, [pc, #28]	@ (8001348 <spi_rw+0x44>)
 800132a:	f003 febb 	bl	80050a4 <HAL_SPI_TransmitReceive>
#endif
    //HAL_Delay(1);
    HAL_GPIO_WritePin(RFID_SS_GPIO_Port, RFID_SS_Pin, GPIO_PIN_SET);
 800132e:	2201      	movs	r2, #1
 8001330:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001334:	4803      	ldr	r0, [pc, #12]	@ (8001344 <spi_rw+0x40>)
 8001336:	f002 fb6f 	bl	8003a18 <HAL_GPIO_WritePin>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40011400 	.word	0x40011400
 8001348:	200001c4 	.word	0x200001c4

0800134c <PN532_SPI_ReadData>:

int PN532_SPI_ReadData(uint8_t* data, uint16_t count) {
 800134c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001350:	b087      	sub	sp, #28
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	460b      	mov	r3, r1
 8001358:	807b      	strh	r3, [r7, #2]
 800135a:	466b      	mov	r3, sp
 800135c:	461e      	mov	r6, r3
    uint8_t frame[count + 1];
 800135e:	887b      	ldrh	r3, [r7, #2]
 8001360:	1c59      	adds	r1, r3, #1
 8001362:	1e4b      	subs	r3, r1, #1
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	460a      	mov	r2, r1
 8001368:	2300      	movs	r3, #0
 800136a:	4690      	mov	r8, r2
 800136c:	4699      	mov	r9, r3
 800136e:	f04f 0200 	mov.w	r2, #0
 8001372:	f04f 0300 	mov.w	r3, #0
 8001376:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800137a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800137e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001382:	460a      	mov	r2, r1
 8001384:	2300      	movs	r3, #0
 8001386:	4614      	mov	r4, r2
 8001388:	461d      	mov	r5, r3
 800138a:	f04f 0200 	mov.w	r2, #0
 800138e:	f04f 0300 	mov.w	r3, #0
 8001392:	00eb      	lsls	r3, r5, #3
 8001394:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001398:	00e2      	lsls	r2, r4, #3
 800139a:	460b      	mov	r3, r1
 800139c:	3307      	adds	r3, #7
 800139e:	08db      	lsrs	r3, r3, #3
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	ebad 0d03 	sub.w	sp, sp, r3
 80013a6:	466b      	mov	r3, sp
 80013a8:	3300      	adds	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]
    frame[0] = _SPI_DATAREAD;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2203      	movs	r2, #3
 80013b0:	701a      	strb	r2, [r3, #0]
    //HAL_Delay(5);
    spi_rw(frame, count + 1);
 80013b2:	887b      	ldrh	r3, [r7, #2]
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	3301      	adds	r3, #1
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	4619      	mov	r1, r3
 80013bc:	68f8      	ldr	r0, [r7, #12]
 80013be:	f7ff ffa1 	bl	8001304 <spi_rw>
    for (uint8_t i = 0; i < count; i++) {
 80013c2:	2300      	movs	r3, #0
 80013c4:	75fb      	strb	r3, [r7, #23]
 80013c6:	e00a      	b.n	80013de <PN532_SPI_ReadData+0x92>
        data[i] = frame[i + 1];
 80013c8:	7dfb      	ldrb	r3, [r7, #23]
 80013ca:	1c5a      	adds	r2, r3, #1
 80013cc:	7dfb      	ldrb	r3, [r7, #23]
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	440b      	add	r3, r1
 80013d2:	68f9      	ldr	r1, [r7, #12]
 80013d4:	5c8a      	ldrb	r2, [r1, r2]
 80013d6:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 80013d8:	7dfb      	ldrb	r3, [r7, #23]
 80013da:	3301      	adds	r3, #1
 80013dc:	75fb      	strb	r3, [r7, #23]
 80013de:	7dfb      	ldrb	r3, [r7, #23]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	887a      	ldrh	r2, [r7, #2]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d8ef      	bhi.n	80013c8 <PN532_SPI_ReadData+0x7c>
    }
    return PN532_STATUS_OK;
 80013e8:	2300      	movs	r3, #0
 80013ea:	46b5      	mov	sp, r6
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	371c      	adds	r7, #28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080013f6 <PN532_SPI_WriteData>:

int PN532_SPI_WriteData(uint8_t *data, uint16_t count) {
 80013f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013fa:	b087      	sub	sp, #28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	460b      	mov	r3, r1
 8001402:	807b      	strh	r3, [r7, #2]
 8001404:	466b      	mov	r3, sp
 8001406:	461e      	mov	r6, r3
    uint8_t frame[count + 1];
 8001408:	887b      	ldrh	r3, [r7, #2]
 800140a:	1c59      	adds	r1, r3, #1
 800140c:	1e4b      	subs	r3, r1, #1
 800140e:	613b      	str	r3, [r7, #16]
 8001410:	460a      	mov	r2, r1
 8001412:	2300      	movs	r3, #0
 8001414:	4690      	mov	r8, r2
 8001416:	4699      	mov	r9, r3
 8001418:	f04f 0200 	mov.w	r2, #0
 800141c:	f04f 0300 	mov.w	r3, #0
 8001420:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001424:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001428:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800142c:	460a      	mov	r2, r1
 800142e:	2300      	movs	r3, #0
 8001430:	4614      	mov	r4, r2
 8001432:	461d      	mov	r5, r3
 8001434:	f04f 0200 	mov.w	r2, #0
 8001438:	f04f 0300 	mov.w	r3, #0
 800143c:	00eb      	lsls	r3, r5, #3
 800143e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001442:	00e2      	lsls	r2, r4, #3
 8001444:	460b      	mov	r3, r1
 8001446:	3307      	adds	r3, #7
 8001448:	08db      	lsrs	r3, r3, #3
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	ebad 0d03 	sub.w	sp, sp, r3
 8001450:	466b      	mov	r3, sp
 8001452:	3300      	adds	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
    frame[0] = _SPI_DATAWRITE;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2201      	movs	r2, #1
 800145a:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 800145c:	2300      	movs	r3, #0
 800145e:	75fb      	strb	r3, [r7, #23]
 8001460:	e00a      	b.n	8001478 <PN532_SPI_WriteData+0x82>
        frame[i + 1] = data[i];
 8001462:	7dfb      	ldrb	r3, [r7, #23]
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	441a      	add	r2, r3
 8001468:	7dfb      	ldrb	r3, [r7, #23]
 800146a:	3301      	adds	r3, #1
 800146c:	7811      	ldrb	r1, [r2, #0]
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < count; i++) {
 8001472:	7dfb      	ldrb	r3, [r7, #23]
 8001474:	3301      	adds	r3, #1
 8001476:	75fb      	strb	r3, [r7, #23]
 8001478:	7dfb      	ldrb	r3, [r7, #23]
 800147a:	b29b      	uxth	r3, r3
 800147c:	887a      	ldrh	r2, [r7, #2]
 800147e:	429a      	cmp	r2, r3
 8001480:	d8ef      	bhi.n	8001462 <PN532_SPI_WriteData+0x6c>
    }
    spi_rw(frame, count + 1);
 8001482:	887b      	ldrh	r3, [r7, #2]
 8001484:	b2db      	uxtb	r3, r3
 8001486:	3301      	adds	r3, #1
 8001488:	b2db      	uxtb	r3, r3
 800148a:	4619      	mov	r1, r3
 800148c:	68f8      	ldr	r0, [r7, #12]
 800148e:	f7ff ff39 	bl	8001304 <spi_rw>
    return PN532_STATUS_OK;
 8001492:	2300      	movs	r3, #0
 8001494:	46b5      	mov	sp, r6
}
 8001496:	4618      	mov	r0, r3
 8001498:	371c      	adds	r7, #28
 800149a:	46bd      	mov	sp, r7
 800149c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080014a0 <PN532_SPI_WaitReady>:

bool PN532_SPI_WaitReady(uint32_t timeout) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
    uint8_t status[] = {_SPI_STATREAD, 0x00};
 80014a8:	2302      	movs	r3, #2
 80014aa:	813b      	strh	r3, [r7, #8]
    uint32_t tickstart = HAL_GetTick();
 80014ac:	f000 feb2 	bl	8002214 <HAL_GetTick>
 80014b0:	60f8      	str	r0, [r7, #12]
    while (HAL_GetTick() - tickstart < timeout) {
 80014b2:	e010      	b.n	80014d6 <PN532_SPI_WaitReady+0x36>
        HAL_Delay(10);
 80014b4:	200a      	movs	r0, #10
 80014b6:	f000 feb7 	bl	8002228 <HAL_Delay>
        spi_rw(status, sizeof(status));
 80014ba:	f107 0308 	add.w	r3, r7, #8
 80014be:	2102      	movs	r1, #2
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff1f 	bl	8001304 <spi_rw>
        if (status[1] == _SPI_READY) {
 80014c6:	7a7b      	ldrb	r3, [r7, #9]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d101      	bne.n	80014d0 <PN532_SPI_WaitReady+0x30>
            return true;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e00b      	b.n	80014e8 <PN532_SPI_WaitReady+0x48>
        } else {
            HAL_Delay(5);
 80014d0:	2005      	movs	r0, #5
 80014d2:	f000 fea9 	bl	8002228 <HAL_Delay>
    while (HAL_GetTick() - tickstart < timeout) {
 80014d6:	f000 fe9d 	bl	8002214 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d8e6      	bhi.n	80014b4 <PN532_SPI_WaitReady+0x14>
        }
    }
    return false;
 80014e6:	2300      	movs	r3, #0
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <PN532_SPI_Wakeup>:

int PN532_SPI_Wakeup(void) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
    // Send any special commands/data to wake up PN532
    uint8_t data[] = {0x00};
 80014f6:	2300      	movs	r3, #0
 80014f8:	713b      	strb	r3, [r7, #4]
    HAL_Delay(100);
 80014fa:	2064      	movs	r0, #100	@ 0x64
 80014fc:	f000 fe94 	bl	8002228 <HAL_Delay>
    HAL_GPIO_WritePin(RFID_SS_GPIO_Port, RFID_SS_Pin, GPIO_PIN_RESET);
 8001500:	2200      	movs	r2, #0
 8001502:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001506:	4809      	ldr	r0, [pc, #36]	@ (800152c <PN532_SPI_Wakeup+0x3c>)
 8001508:	f002 fa86 	bl	8003a18 <HAL_GPIO_WritePin>
    HAL_Delay(1); // T_osc_start
 800150c:	2001      	movs	r0, #1
 800150e:	f000 fe8b 	bl	8002228 <HAL_Delay>
    spi_rw(data, 1);
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	2101      	movs	r1, #1
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff fef4 	bl	8001304 <spi_rw>
    HAL_Delay(100);
 800151c:	2064      	movs	r0, #100	@ 0x64
 800151e:	f000 fe83 	bl	8002228 <HAL_Delay>
    return PN532_STATUS_OK;
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40011400 	.word	0x40011400

08001530 <PN532_SPI_Init>:

void PN532_SPI_Init(PN532* pn532) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
    // init the pn532 functions
    pn532->reset =  PN532_Reset;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a0c      	ldr	r2, [pc, #48]	@ (800156c <PN532_SPI_Init+0x3c>)
 800153c:	601a      	str	r2, [r3, #0]
    pn532->read_data = PN532_SPI_ReadData;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a0b      	ldr	r2, [pc, #44]	@ (8001570 <PN532_SPI_Init+0x40>)
 8001542:	605a      	str	r2, [r3, #4]
    pn532->write_data = PN532_SPI_WriteData;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4a0b      	ldr	r2, [pc, #44]	@ (8001574 <PN532_SPI_Init+0x44>)
 8001548:	609a      	str	r2, [r3, #8]
    pn532->wait_ready = PN532_SPI_WaitReady;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a0a      	ldr	r2, [pc, #40]	@ (8001578 <PN532_SPI_Init+0x48>)
 800154e:	60da      	str	r2, [r3, #12]
    pn532->wakeup = PN532_SPI_Wakeup;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a0a      	ldr	r2, [pc, #40]	@ (800157c <PN532_SPI_Init+0x4c>)
 8001554:	611a      	str	r2, [r3, #16]
    pn532->log = PN532_Log;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a09      	ldr	r2, [pc, #36]	@ (8001580 <PN532_SPI_Init+0x50>)
 800155a:	615a      	str	r2, [r3, #20]

    // hardware wakeup
    pn532->wakeup();
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	4798      	blx	r3
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	080012a1 	.word	0x080012a1
 8001570:	0800134d 	.word	0x0800134d
 8001574:	080013f7 	.word	0x080013f7
 8001578:	080014a1 	.word	0x080014a1
 800157c:	080014f1 	.word	0x080014f1
 8001580:	080012e9 	.word	0x080012e9

08001584 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800158a:	f000 f905 	bl	8001798 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800158e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001592:	2201      	movs	r2, #1
 8001594:	2178      	movs	r1, #120	@ 0x78
 8001596:	485b      	ldr	r0, [pc, #364]	@ (8001704 <SSD1306_Init+0x180>)
 8001598:	f002 fcb2 	bl	8003f00 <HAL_I2C_IsDeviceReady>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	e0a9      	b.n	80016fa <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80015a6:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80015aa:	607b      	str	r3, [r7, #4]
	while(p>0)
 80015ac:	e002      	b.n	80015b4 <SSD1306_Init+0x30>
		p--;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	3b01      	subs	r3, #1
 80015b2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f9      	bne.n	80015ae <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80015ba:	22ae      	movs	r2, #174	@ 0xae
 80015bc:	2100      	movs	r1, #0
 80015be:	2078      	movs	r0, #120	@ 0x78
 80015c0:	f000 f964 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80015c4:	2220      	movs	r2, #32
 80015c6:	2100      	movs	r1, #0
 80015c8:	2078      	movs	r0, #120	@ 0x78
 80015ca:	f000 f95f 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80015ce:	2210      	movs	r2, #16
 80015d0:	2100      	movs	r1, #0
 80015d2:	2078      	movs	r0, #120	@ 0x78
 80015d4:	f000 f95a 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80015d8:	22b0      	movs	r2, #176	@ 0xb0
 80015da:	2100      	movs	r1, #0
 80015dc:	2078      	movs	r0, #120	@ 0x78
 80015de:	f000 f955 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80015e2:	22c8      	movs	r2, #200	@ 0xc8
 80015e4:	2100      	movs	r1, #0
 80015e6:	2078      	movs	r0, #120	@ 0x78
 80015e8:	f000 f950 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80015ec:	2200      	movs	r2, #0
 80015ee:	2100      	movs	r1, #0
 80015f0:	2078      	movs	r0, #120	@ 0x78
 80015f2:	f000 f94b 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80015f6:	2210      	movs	r2, #16
 80015f8:	2100      	movs	r1, #0
 80015fa:	2078      	movs	r0, #120	@ 0x78
 80015fc:	f000 f946 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001600:	2240      	movs	r2, #64	@ 0x40
 8001602:	2100      	movs	r1, #0
 8001604:	2078      	movs	r0, #120	@ 0x78
 8001606:	f000 f941 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800160a:	2281      	movs	r2, #129	@ 0x81
 800160c:	2100      	movs	r1, #0
 800160e:	2078      	movs	r0, #120	@ 0x78
 8001610:	f000 f93c 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001614:	22ff      	movs	r2, #255	@ 0xff
 8001616:	2100      	movs	r1, #0
 8001618:	2078      	movs	r0, #120	@ 0x78
 800161a:	f000 f937 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800161e:	22a1      	movs	r2, #161	@ 0xa1
 8001620:	2100      	movs	r1, #0
 8001622:	2078      	movs	r0, #120	@ 0x78
 8001624:	f000 f932 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001628:	22a6      	movs	r2, #166	@ 0xa6
 800162a:	2100      	movs	r1, #0
 800162c:	2078      	movs	r0, #120	@ 0x78
 800162e:	f000 f92d 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001632:	22a8      	movs	r2, #168	@ 0xa8
 8001634:	2100      	movs	r1, #0
 8001636:	2078      	movs	r0, #120	@ 0x78
 8001638:	f000 f928 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800163c:	223f      	movs	r2, #63	@ 0x3f
 800163e:	2100      	movs	r1, #0
 8001640:	2078      	movs	r0, #120	@ 0x78
 8001642:	f000 f923 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001646:	22a4      	movs	r2, #164	@ 0xa4
 8001648:	2100      	movs	r1, #0
 800164a:	2078      	movs	r0, #120	@ 0x78
 800164c:	f000 f91e 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001650:	22d3      	movs	r2, #211	@ 0xd3
 8001652:	2100      	movs	r1, #0
 8001654:	2078      	movs	r0, #120	@ 0x78
 8001656:	f000 f919 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800165a:	2200      	movs	r2, #0
 800165c:	2100      	movs	r1, #0
 800165e:	2078      	movs	r0, #120	@ 0x78
 8001660:	f000 f914 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001664:	22d5      	movs	r2, #213	@ 0xd5
 8001666:	2100      	movs	r1, #0
 8001668:	2078      	movs	r0, #120	@ 0x78
 800166a:	f000 f90f 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800166e:	22f0      	movs	r2, #240	@ 0xf0
 8001670:	2100      	movs	r1, #0
 8001672:	2078      	movs	r0, #120	@ 0x78
 8001674:	f000 f90a 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001678:	22d9      	movs	r2, #217	@ 0xd9
 800167a:	2100      	movs	r1, #0
 800167c:	2078      	movs	r0, #120	@ 0x78
 800167e:	f000 f905 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001682:	2222      	movs	r2, #34	@ 0x22
 8001684:	2100      	movs	r1, #0
 8001686:	2078      	movs	r0, #120	@ 0x78
 8001688:	f000 f900 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800168c:	22da      	movs	r2, #218	@ 0xda
 800168e:	2100      	movs	r1, #0
 8001690:	2078      	movs	r0, #120	@ 0x78
 8001692:	f000 f8fb 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001696:	2212      	movs	r2, #18
 8001698:	2100      	movs	r1, #0
 800169a:	2078      	movs	r0, #120	@ 0x78
 800169c:	f000 f8f6 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80016a0:	22db      	movs	r2, #219	@ 0xdb
 80016a2:	2100      	movs	r1, #0
 80016a4:	2078      	movs	r0, #120	@ 0x78
 80016a6:	f000 f8f1 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80016aa:	2220      	movs	r2, #32
 80016ac:	2100      	movs	r1, #0
 80016ae:	2078      	movs	r0, #120	@ 0x78
 80016b0:	f000 f8ec 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80016b4:	228d      	movs	r2, #141	@ 0x8d
 80016b6:	2100      	movs	r1, #0
 80016b8:	2078      	movs	r0, #120	@ 0x78
 80016ba:	f000 f8e7 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80016be:	2214      	movs	r2, #20
 80016c0:	2100      	movs	r1, #0
 80016c2:	2078      	movs	r0, #120	@ 0x78
 80016c4:	f000 f8e2 	bl	800188c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80016c8:	22af      	movs	r2, #175	@ 0xaf
 80016ca:	2100      	movs	r1, #0
 80016cc:	2078      	movs	r0, #120	@ 0x78
 80016ce:	f000 f8dd 	bl	800188c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80016d2:	222e      	movs	r2, #46	@ 0x2e
 80016d4:	2100      	movs	r1, #0
 80016d6:	2078      	movs	r0, #120	@ 0x78
 80016d8:	f000 f8d8 	bl	800188c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80016dc:	2000      	movs	r0, #0
 80016de:	f000 f843 	bl	8001768 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80016e2:	f000 f813 	bl	800170c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80016e6:	4b08      	ldr	r3, [pc, #32]	@ (8001708 <SSD1306_Init+0x184>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80016ec:	4b06      	ldr	r3, [pc, #24]	@ (8001708 <SSD1306_Init+0x184>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80016f2:	4b05      	ldr	r3, [pc, #20]	@ (8001708 <SSD1306_Init+0x184>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80016f8:	2301      	movs	r3, #1
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000170 	.word	0x20000170
 8001708:	200007a8 	.word	0x200007a8

0800170c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001712:	2300      	movs	r3, #0
 8001714:	71fb      	strb	r3, [r7, #7]
 8001716:	e01d      	b.n	8001754 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	3b50      	subs	r3, #80	@ 0x50
 800171c:	b2db      	uxtb	r3, r3
 800171e:	461a      	mov	r2, r3
 8001720:	2100      	movs	r1, #0
 8001722:	2078      	movs	r0, #120	@ 0x78
 8001724:	f000 f8b2 	bl	800188c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001728:	2200      	movs	r2, #0
 800172a:	2100      	movs	r1, #0
 800172c:	2078      	movs	r0, #120	@ 0x78
 800172e:	f000 f8ad 	bl	800188c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001732:	2210      	movs	r2, #16
 8001734:	2100      	movs	r1, #0
 8001736:	2078      	movs	r0, #120	@ 0x78
 8001738:	f000 f8a8 	bl	800188c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	01db      	lsls	r3, r3, #7
 8001740:	4a08      	ldr	r2, [pc, #32]	@ (8001764 <SSD1306_UpdateScreen+0x58>)
 8001742:	441a      	add	r2, r3
 8001744:	2380      	movs	r3, #128	@ 0x80
 8001746:	2140      	movs	r1, #64	@ 0x40
 8001748:	2078      	movs	r0, #120	@ 0x78
 800174a:	f000 f839 	bl	80017c0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	3301      	adds	r3, #1
 8001752:	71fb      	strb	r3, [r7, #7]
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	2b07      	cmp	r3, #7
 8001758:	d9de      	bls.n	8001718 <SSD1306_UpdateScreen+0xc>
	}
}
 800175a:	bf00      	nop
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	200003a8 	.word	0x200003a8

08001768 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d101      	bne.n	800177c <SSD1306_Fill+0x14>
 8001778:	2300      	movs	r3, #0
 800177a:	e000      	b.n	800177e <SSD1306_Fill+0x16>
 800177c:	23ff      	movs	r3, #255	@ 0xff
 800177e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001782:	4619      	mov	r1, r3
 8001784:	4803      	ldr	r0, [pc, #12]	@ (8001794 <SSD1306_Fill+0x2c>)
 8001786:	f005 fc5e 	bl	8007046 <memset>
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	200003a8 	.word	0x200003a8

08001798 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800179e:	4b07      	ldr	r3, [pc, #28]	@ (80017bc <ssd1306_I2C_Init+0x24>)
 80017a0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80017a2:	e002      	b.n	80017aa <ssd1306_I2C_Init+0x12>
		p--;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3b01      	subs	r3, #1
 80017a8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1f9      	bne.n	80017a4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80017b0:	bf00      	nop
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr
 80017bc:	0003d090 	.word	0x0003d090

080017c0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80017c0:	b590      	push	{r4, r7, lr}
 80017c2:	b0c7      	sub	sp, #284	@ 0x11c
 80017c4:	af02      	add	r7, sp, #8
 80017c6:	4604      	mov	r4, r0
 80017c8:	4608      	mov	r0, r1
 80017ca:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80017ce:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80017d2:	600a      	str	r2, [r1, #0]
 80017d4:	4619      	mov	r1, r3
 80017d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80017da:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80017de:	4622      	mov	r2, r4
 80017e0:	701a      	strb	r2, [r3, #0]
 80017e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80017e6:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80017ea:	4602      	mov	r2, r0
 80017ec:	701a      	strb	r2, [r3, #0]
 80017ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80017f2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80017f6:	460a      	mov	r2, r1
 80017f8:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80017fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80017fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001802:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001806:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800180a:	7812      	ldrb	r2, [r2, #0]
 800180c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800180e:	2300      	movs	r3, #0
 8001810:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001814:	e015      	b.n	8001842 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001816:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800181a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800181e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001822:	6812      	ldr	r2, [r2, #0]
 8001824:	441a      	add	r2, r3
 8001826:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800182a:	3301      	adds	r3, #1
 800182c:	7811      	ldrb	r1, [r2, #0]
 800182e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001832:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001836:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001838:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800183c:	3301      	adds	r3, #1
 800183e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001842:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001846:	b29b      	uxth	r3, r3
 8001848:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800184c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001850:	8812      	ldrh	r2, [r2, #0]
 8001852:	429a      	cmp	r2, r3
 8001854:	d8df      	bhi.n	8001816 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001856:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800185a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	b299      	uxth	r1, r3
 8001862:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001866:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	3301      	adds	r3, #1
 800186e:	b29b      	uxth	r3, r3
 8001870:	f107 020c 	add.w	r2, r7, #12
 8001874:	200a      	movs	r0, #10
 8001876:	9000      	str	r0, [sp, #0]
 8001878:	4803      	ldr	r0, [pc, #12]	@ (8001888 <ssd1306_I2C_WriteMulti+0xc8>)
 800187a:	f002 fa43 	bl	8003d04 <HAL_I2C_Master_Transmit>
}
 800187e:	bf00      	nop
 8001880:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001884:	46bd      	mov	sp, r7
 8001886:	bd90      	pop	{r4, r7, pc}
 8001888:	20000170 	.word	0x20000170

0800188c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af02      	add	r7, sp, #8
 8001892:	4603      	mov	r3, r0
 8001894:	71fb      	strb	r3, [r7, #7]
 8001896:	460b      	mov	r3, r1
 8001898:	71bb      	strb	r3, [r7, #6]
 800189a:	4613      	mov	r3, r2
 800189c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800189e:	79bb      	ldrb	r3, [r7, #6]
 80018a0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80018a2:	797b      	ldrb	r3, [r7, #5]
 80018a4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	b299      	uxth	r1, r3
 80018aa:	f107 020c 	add.w	r2, r7, #12
 80018ae:	230a      	movs	r3, #10
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	2302      	movs	r3, #2
 80018b4:	4803      	ldr	r0, [pc, #12]	@ (80018c4 <ssd1306_I2C_Write+0x38>)
 80018b6:	f002 fa25 	bl	8003d04 <HAL_I2C_Master_Transmit>
}
 80018ba:	bf00      	nop
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000170 	.word	0x20000170

080018c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018ce:	4b15      	ldr	r3, [pc, #84]	@ (8001924 <HAL_MspInit+0x5c>)
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	4a14      	ldr	r2, [pc, #80]	@ (8001924 <HAL_MspInit+0x5c>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	6193      	str	r3, [r2, #24]
 80018da:	4b12      	ldr	r3, [pc, #72]	@ (8001924 <HAL_MspInit+0x5c>)
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	60bb      	str	r3, [r7, #8]
 80018e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001924 <HAL_MspInit+0x5c>)
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001924 <HAL_MspInit+0x5c>)
 80018ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018f0:	61d3      	str	r3, [r2, #28]
 80018f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001924 <HAL_MspInit+0x5c>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018fa:	607b      	str	r3, [r7, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001928 <HAL_MspInit+0x60>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	4a04      	ldr	r2, [pc, #16]	@ (8001928 <HAL_MspInit+0x60>)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800191a:	bf00      	nop
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr
 8001924:	40021000 	.word	0x40021000
 8001928:	40010000 	.word	0x40010000

0800192c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08e      	sub	sp, #56	@ 0x38
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001934:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a85      	ldr	r2, [pc, #532]	@ (8001b5c <HAL_ADC_MspInit+0x230>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d17e      	bne.n	8001a4a <HAL_ADC_MspInit+0x11e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800194c:	4b84      	ldr	r3, [pc, #528]	@ (8001b60 <HAL_ADC_MspInit+0x234>)
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	4a83      	ldr	r2, [pc, #524]	@ (8001b60 <HAL_ADC_MspInit+0x234>)
 8001952:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001956:	6193      	str	r3, [r2, #24]
 8001958:	4b81      	ldr	r3, [pc, #516]	@ (8001b60 <HAL_ADC_MspInit+0x234>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001960:	627b      	str	r3, [r7, #36]	@ 0x24
 8001962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001964:	4b7e      	ldr	r3, [pc, #504]	@ (8001b60 <HAL_ADC_MspInit+0x234>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	4a7d      	ldr	r2, [pc, #500]	@ (8001b60 <HAL_ADC_MspInit+0x234>)
 800196a:	f043 0310 	orr.w	r3, r3, #16
 800196e:	6193      	str	r3, [r2, #24]
 8001970:	4b7b      	ldr	r3, [pc, #492]	@ (8001b60 <HAL_ADC_MspInit+0x234>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	f003 0310 	and.w	r3, r3, #16
 8001978:	623b      	str	r3, [r7, #32]
 800197a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197c:	4b78      	ldr	r3, [pc, #480]	@ (8001b60 <HAL_ADC_MspInit+0x234>)
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	4a77      	ldr	r2, [pc, #476]	@ (8001b60 <HAL_ADC_MspInit+0x234>)
 8001982:	f043 0304 	orr.w	r3, r3, #4
 8001986:	6193      	str	r3, [r2, #24]
 8001988:	4b75      	ldr	r3, [pc, #468]	@ (8001b60 <HAL_ADC_MspInit+0x234>)
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	61fb      	str	r3, [r7, #28]
 8001992:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001994:	4b72      	ldr	r3, [pc, #456]	@ (8001b60 <HAL_ADC_MspInit+0x234>)
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	4a71      	ldr	r2, [pc, #452]	@ (8001b60 <HAL_ADC_MspInit+0x234>)
 800199a:	f043 0308 	orr.w	r3, r3, #8
 800199e:	6193      	str	r3, [r2, #24]
 80019a0:	4b6f      	ldr	r3, [pc, #444]	@ (8001b60 <HAL_ADC_MspInit+0x234>)
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	f003 0308 	and.w	r3, r3, #8
 80019a8:	61bb      	str	r3, [r7, #24]
 80019aa:	69bb      	ldr	r3, [r7, #24]
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 80019ac:	2311      	movs	r3, #17
 80019ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019b0:	2303      	movs	r3, #3
 80019b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019b8:	4619      	mov	r1, r3
 80019ba:	486a      	ldr	r0, [pc, #424]	@ (8001b64 <HAL_ADC_MspInit+0x238>)
 80019bc:	f001 fe98 	bl	80036f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80019c0:	23f3      	movs	r3, #243	@ 0xf3
 80019c2:	62bb      	str	r3, [r7, #40]	@ 0x28
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019c4:	2303      	movs	r3, #3
 80019c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019cc:	4619      	mov	r1, r3
 80019ce:	4866      	ldr	r0, [pc, #408]	@ (8001b68 <HAL_ADC_MspInit+0x23c>)
 80019d0:	f001 fe8e 	bl	80036f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019d4:	2303      	movs	r3, #3
 80019d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019d8:	2303      	movs	r3, #3
 80019da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019e0:	4619      	mov	r1, r3
 80019e2:	4862      	ldr	r0, [pc, #392]	@ (8001b6c <HAL_ADC_MspInit+0x240>)
 80019e4:	f001 fe84 	bl	80036f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80019e8:	4b61      	ldr	r3, [pc, #388]	@ (8001b70 <HAL_ADC_MspInit+0x244>)
 80019ea:	4a62      	ldr	r2, [pc, #392]	@ (8001b74 <HAL_ADC_MspInit+0x248>)
 80019ec:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019ee:	4b60      	ldr	r3, [pc, #384]	@ (8001b70 <HAL_ADC_MspInit+0x244>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019f4:	4b5e      	ldr	r3, [pc, #376]	@ (8001b70 <HAL_ADC_MspInit+0x244>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001b70 <HAL_ADC_MspInit+0x244>)
 80019fc:	2280      	movs	r2, #128	@ 0x80
 80019fe:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a00:	4b5b      	ldr	r3, [pc, #364]	@ (8001b70 <HAL_ADC_MspInit+0x244>)
 8001a02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a06:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a08:	4b59      	ldr	r3, [pc, #356]	@ (8001b70 <HAL_ADC_MspInit+0x244>)
 8001a0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a0e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a10:	4b57      	ldr	r3, [pc, #348]	@ (8001b70 <HAL_ADC_MspInit+0x244>)
 8001a12:	2220      	movs	r2, #32
 8001a14:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a16:	4b56      	ldr	r3, [pc, #344]	@ (8001b70 <HAL_ADC_MspInit+0x244>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a1c:	4854      	ldr	r0, [pc, #336]	@ (8001b70 <HAL_ADC_MspInit+0x244>)
 8001a1e:	f001 f9e3 	bl	8002de8 <HAL_DMA_Init>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 8001a28:	f7ff f89c 	bl	8000b64 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a50      	ldr	r2, [pc, #320]	@ (8001b70 <HAL_ADC_MspInit+0x244>)
 8001a30:	621a      	str	r2, [r3, #32]
 8001a32:	4a4f      	ldr	r2, [pc, #316]	@ (8001b70 <HAL_ADC_MspInit+0x244>)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	2012      	movs	r0, #18
 8001a3e:	f001 f99c 	bl	8002d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001a42:	2012      	movs	r0, #18
 8001a44:	f001 f9b5 	bl	8002db2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001a48:	e083      	b.n	8001b52 <HAL_ADC_MspInit+0x226>
  else if(hadc->Instance==ADC3)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a4a      	ldr	r2, [pc, #296]	@ (8001b78 <HAL_ADC_MspInit+0x24c>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d17e      	bne.n	8001b52 <HAL_ADC_MspInit+0x226>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001a54:	4b42      	ldr	r3, [pc, #264]	@ (8001b60 <HAL_ADC_MspInit+0x234>)
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	4a41      	ldr	r2, [pc, #260]	@ (8001b60 <HAL_ADC_MspInit+0x234>)
 8001a5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a5e:	6193      	str	r3, [r2, #24]
 8001a60:	4b3f      	ldr	r3, [pc, #252]	@ (8001b60 <HAL_ADC_MspInit+0x234>)
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a6c:	4b3c      	ldr	r3, [pc, #240]	@ (8001b60 <HAL_ADC_MspInit+0x234>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	4a3b      	ldr	r2, [pc, #236]	@ (8001b60 <HAL_ADC_MspInit+0x234>)
 8001a72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a76:	6193      	str	r3, [r2, #24]
 8001a78:	4b39      	ldr	r3, [pc, #228]	@ (8001b60 <HAL_ADC_MspInit+0x234>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a84:	4b36      	ldr	r3, [pc, #216]	@ (8001b60 <HAL_ADC_MspInit+0x234>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	4a35      	ldr	r2, [pc, #212]	@ (8001b60 <HAL_ADC_MspInit+0x234>)
 8001a8a:	f043 0310 	orr.w	r3, r3, #16
 8001a8e:	6193      	str	r3, [r2, #24]
 8001a90:	4b33      	ldr	r3, [pc, #204]	@ (8001b60 <HAL_ADC_MspInit+0x234>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	f003 0310 	and.w	r3, r3, #16
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9c:	4b30      	ldr	r3, [pc, #192]	@ (8001b60 <HAL_ADC_MspInit+0x234>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	4a2f      	ldr	r2, [pc, #188]	@ (8001b60 <HAL_ADC_MspInit+0x234>)
 8001aa2:	f043 0304 	orr.w	r3, r3, #4
 8001aa6:	6193      	str	r3, [r2, #24]
 8001aa8:	4b2d      	ldr	r3, [pc, #180]	@ (8001b60 <HAL_ADC_MspInit+0x234>)
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001ab4:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8001ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aba:	2303      	movs	r3, #3
 8001abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001abe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	482d      	ldr	r0, [pc, #180]	@ (8001b7c <HAL_ADC_MspInit+0x250>)
 8001ac6:	f001 fe13 	bl	80036f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001aca:	230e      	movs	r3, #14
 8001acc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ad2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4822      	ldr	r0, [pc, #136]	@ (8001b64 <HAL_ADC_MspInit+0x238>)
 8001ada:	f001 fe09 	bl	80036f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ade:	230c      	movs	r3, #12
 8001ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001aea:	4619      	mov	r1, r3
 8001aec:	481e      	ldr	r0, [pc, #120]	@ (8001b68 <HAL_ADC_MspInit+0x23c>)
 8001aee:	f001 fdff 	bl	80036f0 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel5;
 8001af2:	4b23      	ldr	r3, [pc, #140]	@ (8001b80 <HAL_ADC_MspInit+0x254>)
 8001af4:	4a23      	ldr	r2, [pc, #140]	@ (8001b84 <HAL_ADC_MspInit+0x258>)
 8001af6:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001af8:	4b21      	ldr	r3, [pc, #132]	@ (8001b80 <HAL_ADC_MspInit+0x254>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001afe:	4b20      	ldr	r3, [pc, #128]	@ (8001b80 <HAL_ADC_MspInit+0x254>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001b04:	4b1e      	ldr	r3, [pc, #120]	@ (8001b80 <HAL_ADC_MspInit+0x254>)
 8001b06:	2280      	movs	r2, #128	@ 0x80
 8001b08:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001b80 <HAL_ADC_MspInit+0x254>)
 8001b0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b10:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b12:	4b1b      	ldr	r3, [pc, #108]	@ (8001b80 <HAL_ADC_MspInit+0x254>)
 8001b14:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b18:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001b1a:	4b19      	ldr	r3, [pc, #100]	@ (8001b80 <HAL_ADC_MspInit+0x254>)
 8001b1c:	2220      	movs	r2, #32
 8001b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001b20:	4b17      	ldr	r3, [pc, #92]	@ (8001b80 <HAL_ADC_MspInit+0x254>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001b26:	4816      	ldr	r0, [pc, #88]	@ (8001b80 <HAL_ADC_MspInit+0x254>)
 8001b28:	f001 f95e 	bl	8002de8 <HAL_DMA_Init>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_ADC_MspInit+0x20a>
      Error_Handler();
 8001b32:	f7ff f817 	bl	8000b64 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a11      	ldr	r2, [pc, #68]	@ (8001b80 <HAL_ADC_MspInit+0x254>)
 8001b3a:	621a      	str	r2, [r3, #32]
 8001b3c:	4a10      	ldr	r2, [pc, #64]	@ (8001b80 <HAL_ADC_MspInit+0x254>)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2100      	movs	r1, #0
 8001b46:	202f      	movs	r0, #47	@ 0x2f
 8001b48:	f001 f917 	bl	8002d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8001b4c:	202f      	movs	r0, #47	@ 0x2f
 8001b4e:	f001 f930 	bl	8002db2 <HAL_NVIC_EnableIRQ>
}
 8001b52:	bf00      	nop
 8001b54:	3738      	adds	r7, #56	@ 0x38
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40012400 	.word	0x40012400
 8001b60:	40021000 	.word	0x40021000
 8001b64:	40011000 	.word	0x40011000
 8001b68:	40010800 	.word	0x40010800
 8001b6c:	40010c00 	.word	0x40010c00
 8001b70:	200000e8 	.word	0x200000e8
 8001b74:	40020008 	.word	0x40020008
 8001b78:	40013c00 	.word	0x40013c00
 8001b7c:	40011c00 	.word	0x40011c00
 8001b80:	2000012c 	.word	0x2000012c
 8001b84:	40020458 	.word	0x40020458

08001b88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 0310 	add.w	r3, r7, #16
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a15      	ldr	r2, [pc, #84]	@ (8001bf8 <HAL_I2C_MspInit+0x70>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d123      	bne.n	8001bf0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba8:	4b14      	ldr	r3, [pc, #80]	@ (8001bfc <HAL_I2C_MspInit+0x74>)
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	4a13      	ldr	r2, [pc, #76]	@ (8001bfc <HAL_I2C_MspInit+0x74>)
 8001bae:	f043 0308 	orr.w	r3, r3, #8
 8001bb2:	6193      	str	r3, [r2, #24]
 8001bb4:	4b11      	ldr	r3, [pc, #68]	@ (8001bfc <HAL_I2C_MspInit+0x74>)
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	f003 0308 	and.w	r3, r3, #8
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bc0:	23c0      	movs	r3, #192	@ 0xc0
 8001bc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bc4:	2312      	movs	r3, #18
 8001bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bcc:	f107 0310 	add.w	r3, r7, #16
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	480b      	ldr	r0, [pc, #44]	@ (8001c00 <HAL_I2C_MspInit+0x78>)
 8001bd4:	f001 fd8c 	bl	80036f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bd8:	4b08      	ldr	r3, [pc, #32]	@ (8001bfc <HAL_I2C_MspInit+0x74>)
 8001bda:	69db      	ldr	r3, [r3, #28]
 8001bdc:	4a07      	ldr	r2, [pc, #28]	@ (8001bfc <HAL_I2C_MspInit+0x74>)
 8001bde:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001be2:	61d3      	str	r3, [r2, #28]
 8001be4:	4b05      	ldr	r3, [pc, #20]	@ (8001bfc <HAL_I2C_MspInit+0x74>)
 8001be6:	69db      	ldr	r3, [r3, #28]
 8001be8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001bf0:	bf00      	nop
 8001bf2:	3720      	adds	r7, #32
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40005400 	.word	0x40005400
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	40010c00 	.word	0x40010c00

08001c04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b088      	sub	sp, #32
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0c:	f107 0310 	add.w	r3, r7, #16
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a1c      	ldr	r2, [pc, #112]	@ (8001c90 <HAL_SPI_MspInit+0x8c>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d131      	bne.n	8001c88 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c24:	4b1b      	ldr	r3, [pc, #108]	@ (8001c94 <HAL_SPI_MspInit+0x90>)
 8001c26:	69db      	ldr	r3, [r3, #28]
 8001c28:	4a1a      	ldr	r2, [pc, #104]	@ (8001c94 <HAL_SPI_MspInit+0x90>)
 8001c2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c2e:	61d3      	str	r3, [r2, #28]
 8001c30:	4b18      	ldr	r3, [pc, #96]	@ (8001c94 <HAL_SPI_MspInit+0x90>)
 8001c32:	69db      	ldr	r3, [r3, #28]
 8001c34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c3c:	4b15      	ldr	r3, [pc, #84]	@ (8001c94 <HAL_SPI_MspInit+0x90>)
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	4a14      	ldr	r2, [pc, #80]	@ (8001c94 <HAL_SPI_MspInit+0x90>)
 8001c42:	f043 0308 	orr.w	r3, r3, #8
 8001c46:	6193      	str	r3, [r2, #24]
 8001c48:	4b12      	ldr	r3, [pc, #72]	@ (8001c94 <HAL_SPI_MspInit+0x90>)
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	f003 0308 	and.w	r3, r3, #8
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001c54:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8001c58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c62:	f107 0310 	add.w	r3, r7, #16
 8001c66:	4619      	mov	r1, r3
 8001c68:	480b      	ldr	r0, [pc, #44]	@ (8001c98 <HAL_SPI_MspInit+0x94>)
 8001c6a:	f001 fd41 	bl	80036f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001c6e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7c:	f107 0310 	add.w	r3, r7, #16
 8001c80:	4619      	mov	r1, r3
 8001c82:	4805      	ldr	r0, [pc, #20]	@ (8001c98 <HAL_SPI_MspInit+0x94>)
 8001c84:	f001 fd34 	bl	80036f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001c88:	bf00      	nop
 8001c8a:	3720      	adds	r7, #32
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40003800 	.word	0x40003800
 8001c94:	40021000 	.word	0x40021000
 8001c98:	40010c00 	.word	0x40010c00

08001c9c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cac:	d10b      	bne.n	8001cc6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cae:	4b08      	ldr	r3, [pc, #32]	@ (8001cd0 <HAL_TIM_PWM_MspInit+0x34>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	4a07      	ldr	r2, [pc, #28]	@ (8001cd0 <HAL_TIM_PWM_MspInit+0x34>)
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	61d3      	str	r3, [r2, #28]
 8001cba:	4b05      	ldr	r3, [pc, #20]	@ (8001cd0 <HAL_TIM_PWM_MspInit+0x34>)
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001cc6:	bf00      	nop
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr
 8001cd0:	40021000 	.word	0x40021000

08001cd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08a      	sub	sp, #40	@ 0x28
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cdc:	f107 0314 	add.w	r3, r7, #20
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cf2:	d142      	bne.n	8001d7a <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf4:	4b23      	ldr	r3, [pc, #140]	@ (8001d84 <HAL_TIM_MspPostInit+0xb0>)
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	4a22      	ldr	r2, [pc, #136]	@ (8001d84 <HAL_TIM_MspPostInit+0xb0>)
 8001cfa:	f043 0304 	orr.w	r3, r3, #4
 8001cfe:	6193      	str	r3, [r2, #24]
 8001d00:	4b20      	ldr	r3, [pc, #128]	@ (8001d84 <HAL_TIM_MspPostInit+0xb0>)
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	613b      	str	r3, [r7, #16]
 8001d0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001d84 <HAL_TIM_MspPostInit+0xb0>)
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	4a1c      	ldr	r2, [pc, #112]	@ (8001d84 <HAL_TIM_MspPostInit+0xb0>)
 8001d12:	f043 0308 	orr.w	r3, r3, #8
 8001d16:	6193      	str	r3, [r2, #24]
 8001d18:	4b1a      	ldr	r3, [pc, #104]	@ (8001d84 <HAL_TIM_MspPostInit+0xb0>)
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	f003 0308 	and.w	r3, r3, #8
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d24:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d32:	f107 0314 	add.w	r3, r7, #20
 8001d36:	4619      	mov	r1, r3
 8001d38:	4813      	ldr	r0, [pc, #76]	@ (8001d88 <HAL_TIM_MspPostInit+0xb4>)
 8001d3a:	f001 fcd9 	bl	80036f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d3e:	2308      	movs	r3, #8
 8001d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d42:	2302      	movs	r3, #2
 8001d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d46:	2302      	movs	r3, #2
 8001d48:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4a:	f107 0314 	add.w	r3, r7, #20
 8001d4e:	4619      	mov	r1, r3
 8001d50:	480e      	ldr	r0, [pc, #56]	@ (8001d8c <HAL_TIM_MspPostInit+0xb8>)
 8001d52:	f001 fccd 	bl	80036f0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001d56:	4b0e      	ldr	r3, [pc, #56]	@ (8001d90 <HAL_TIM_MspPostInit+0xbc>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d62:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d66:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001d6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d72:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d74:	4a06      	ldr	r2, [pc, #24]	@ (8001d90 <HAL_TIM_MspPostInit+0xbc>)
 8001d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d78:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001d7a:	bf00      	nop
 8001d7c:	3728      	adds	r7, #40	@ 0x28
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40021000 	.word	0x40021000
 8001d88:	40010800 	.word	0x40010800
 8001d8c:	40010c00 	.word	0x40010c00
 8001d90:	40010000 	.word	0x40010000

08001d94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b088      	sub	sp, #32
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	f107 0310 	add.w	r3, r7, #16
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a47      	ldr	r2, [pc, #284]	@ (8001ecc <HAL_UART_MspInit+0x138>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	f040 8086 	bne.w	8001ec2 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001db6:	4b46      	ldr	r3, [pc, #280]	@ (8001ed0 <HAL_UART_MspInit+0x13c>)
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	4a45      	ldr	r2, [pc, #276]	@ (8001ed0 <HAL_UART_MspInit+0x13c>)
 8001dbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dc0:	6193      	str	r3, [r2, #24]
 8001dc2:	4b43      	ldr	r3, [pc, #268]	@ (8001ed0 <HAL_UART_MspInit+0x13c>)
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dce:	4b40      	ldr	r3, [pc, #256]	@ (8001ed0 <HAL_UART_MspInit+0x13c>)
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	4a3f      	ldr	r2, [pc, #252]	@ (8001ed0 <HAL_UART_MspInit+0x13c>)
 8001dd4:	f043 0304 	orr.w	r3, r3, #4
 8001dd8:	6193      	str	r3, [r2, #24]
 8001dda:	4b3d      	ldr	r3, [pc, #244]	@ (8001ed0 <HAL_UART_MspInit+0x13c>)
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	f003 0304 	and.w	r3, r3, #4
 8001de2:	60bb      	str	r3, [r7, #8]
 8001de4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001de6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001dea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dec:	2302      	movs	r3, #2
 8001dee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001df0:	2303      	movs	r3, #3
 8001df2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df4:	f107 0310 	add.w	r3, r7, #16
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4836      	ldr	r0, [pc, #216]	@ (8001ed4 <HAL_UART_MspInit+0x140>)
 8001dfc:	f001 fc78 	bl	80036f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0e:	f107 0310 	add.w	r3, r7, #16
 8001e12:	4619      	mov	r1, r3
 8001e14:	482f      	ldr	r0, [pc, #188]	@ (8001ed4 <HAL_UART_MspInit+0x140>)
 8001e16:	f001 fc6b 	bl	80036f0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001e1a:	4b2f      	ldr	r3, [pc, #188]	@ (8001ed8 <HAL_UART_MspInit+0x144>)
 8001e1c:	4a2f      	ldr	r2, [pc, #188]	@ (8001edc <HAL_UART_MspInit+0x148>)
 8001e1e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e20:	4b2d      	ldr	r3, [pc, #180]	@ (8001ed8 <HAL_UART_MspInit+0x144>)
 8001e22:	2210      	movs	r2, #16
 8001e24:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e26:	4b2c      	ldr	r3, [pc, #176]	@ (8001ed8 <HAL_UART_MspInit+0x144>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e2c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ed8 <HAL_UART_MspInit+0x144>)
 8001e2e:	2280      	movs	r2, #128	@ 0x80
 8001e30:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e32:	4b29      	ldr	r3, [pc, #164]	@ (8001ed8 <HAL_UART_MspInit+0x144>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e38:	4b27      	ldr	r3, [pc, #156]	@ (8001ed8 <HAL_UART_MspInit+0x144>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8001e3e:	4b26      	ldr	r3, [pc, #152]	@ (8001ed8 <HAL_UART_MspInit+0x144>)
 8001e40:	2220      	movs	r2, #32
 8001e42:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e44:	4b24      	ldr	r3, [pc, #144]	@ (8001ed8 <HAL_UART_MspInit+0x144>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001e4a:	4823      	ldr	r0, [pc, #140]	@ (8001ed8 <HAL_UART_MspInit+0x144>)
 8001e4c:	f000 ffcc 	bl	8002de8 <HAL_DMA_Init>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8001e56:	f7fe fe85 	bl	8000b64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a1e      	ldr	r2, [pc, #120]	@ (8001ed8 <HAL_UART_MspInit+0x144>)
 8001e5e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e60:	4a1d      	ldr	r2, [pc, #116]	@ (8001ed8 <HAL_UART_MspInit+0x144>)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001e66:	4b1e      	ldr	r3, [pc, #120]	@ (8001ee0 <HAL_UART_MspInit+0x14c>)
 8001e68:	4a1e      	ldr	r2, [pc, #120]	@ (8001ee4 <HAL_UART_MspInit+0x150>)
 8001e6a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e6c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ee0 <HAL_UART_MspInit+0x14c>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e72:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee0 <HAL_UART_MspInit+0x14c>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e78:	4b19      	ldr	r3, [pc, #100]	@ (8001ee0 <HAL_UART_MspInit+0x14c>)
 8001e7a:	2280      	movs	r2, #128	@ 0x80
 8001e7c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e7e:	4b18      	ldr	r3, [pc, #96]	@ (8001ee0 <HAL_UART_MspInit+0x14c>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e84:	4b16      	ldr	r3, [pc, #88]	@ (8001ee0 <HAL_UART_MspInit+0x14c>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001e8a:	4b15      	ldr	r3, [pc, #84]	@ (8001ee0 <HAL_UART_MspInit+0x14c>)
 8001e8c:	2220      	movs	r2, #32
 8001e8e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e90:	4b13      	ldr	r3, [pc, #76]	@ (8001ee0 <HAL_UART_MspInit+0x14c>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001e96:	4812      	ldr	r0, [pc, #72]	@ (8001ee0 <HAL_UART_MspInit+0x14c>)
 8001e98:	f000 ffa6 	bl	8002de8 <HAL_DMA_Init>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8001ea2:	f7fe fe5f 	bl	8000b64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a0d      	ldr	r2, [pc, #52]	@ (8001ee0 <HAL_UART_MspInit+0x14c>)
 8001eaa:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001eac:	4a0c      	ldr	r2, [pc, #48]	@ (8001ee0 <HAL_UART_MspInit+0x14c>)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	2025      	movs	r0, #37	@ 0x25
 8001eb8:	f000 ff5f 	bl	8002d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ebc:	2025      	movs	r0, #37	@ 0x25
 8001ebe:	f000 ff78 	bl	8002db2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ec2:	bf00      	nop
 8001ec4:	3720      	adds	r7, #32
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40013800 	.word	0x40013800
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40010800 	.word	0x40010800
 8001ed8:	200002ac 	.word	0x200002ac
 8001edc:	40020044 	.word	0x40020044
 8001ee0:	200002f0 	.word	0x200002f0
 8001ee4:	40020058 	.word	0x40020058

08001ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001eec:	bf00      	nop
 8001eee:	e7fd      	b.n	8001eec <NMI_Handler+0x4>

08001ef0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ef4:	bf00      	nop
 8001ef6:	e7fd      	b.n	8001ef4 <HardFault_Handler+0x4>

08001ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001efc:	bf00      	nop
 8001efe:	e7fd      	b.n	8001efc <MemManage_Handler+0x4>

08001f00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f04:	bf00      	nop
 8001f06:	e7fd      	b.n	8001f04 <BusFault_Handler+0x4>

08001f08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f0c:	bf00      	nop
 8001f0e:	e7fd      	b.n	8001f0c <UsageFault_Handler+0x4>

08001f10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr

08001f1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr

08001f28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr

08001f34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f38:	f000 f95a 	bl	80021f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f3c:	bf00      	nop
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f44:	4802      	ldr	r0, [pc, #8]	@ (8001f50 <DMA1_Channel1_IRQHandler+0x10>)
 8001f46:	f001 f969 	bl	800321c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	200000e8 	.word	0x200000e8

08001f54 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001f58:	4802      	ldr	r0, [pc, #8]	@ (8001f64 <DMA1_Channel4_IRQHandler+0x10>)
 8001f5a:	f001 f95f 	bl	800321c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	200002ac 	.word	0x200002ac

08001f68 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001f6c:	4802      	ldr	r0, [pc, #8]	@ (8001f78 <DMA1_Channel5_IRQHandler+0x10>)
 8001f6e:	f001 f955 	bl	800321c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	200002f0 	.word	0x200002f0

08001f7c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001f80:	4802      	ldr	r0, [pc, #8]	@ (8001f8c <ADC1_2_IRQHandler+0x10>)
 8001f82:	f000 fb3d 	bl	8002600 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000088 	.word	0x20000088

08001f90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f94:	4802      	ldr	r0, [pc, #8]	@ (8001fa0 <USART1_IRQHandler+0x10>)
 8001f96:	f004 f843 	bl	8006020 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000264 	.word	0x20000264

08001fa4 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8001fa8:	4802      	ldr	r0, [pc, #8]	@ (8001fb4 <ADC3_IRQHandler+0x10>)
 8001faa:	f000 fb29 	bl	8002600 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	200000b8 	.word	0x200000b8

08001fb8 <DMA2_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 and channel5 global interrupts.
  */
void DMA2_Channel4_5_IRQHandler(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 0 */

  /* USER CODE END DMA2_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001fbc:	4802      	ldr	r0, [pc, #8]	@ (8001fc8 <DMA2_Channel4_5_IRQHandler+0x10>)
 8001fbe:	f001 f92d 	bl	800321c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 1 */

  /* USER CODE END DMA2_Channel4_5_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	2000012c 	.word	0x2000012c

08001fcc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]
 8001fdc:	e00a      	b.n	8001ff4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fde:	f3af 8000 	nop.w
 8001fe2:	4601      	mov	r1, r0
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	1c5a      	adds	r2, r3, #1
 8001fe8:	60ba      	str	r2, [r7, #8]
 8001fea:	b2ca      	uxtb	r2, r1
 8001fec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	617b      	str	r3, [r7, #20]
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	dbf0      	blt.n	8001fde <_read+0x12>
  }

  return len;
 8001ffc:	687b      	ldr	r3, [r7, #4]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3718      	adds	r7, #24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b086      	sub	sp, #24
 800200a:	af00      	add	r7, sp, #0
 800200c:	60f8      	str	r0, [r7, #12]
 800200e:	60b9      	str	r1, [r7, #8]
 8002010:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002012:	2300      	movs	r3, #0
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	e009      	b.n	800202c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	1c5a      	adds	r2, r3, #1
 800201c:	60ba      	str	r2, [r7, #8]
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	3301      	adds	r3, #1
 800202a:	617b      	str	r3, [r7, #20]
 800202c:	697a      	ldr	r2, [r7, #20]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	429a      	cmp	r2, r3
 8002032:	dbf1      	blt.n	8002018 <_write+0x12>
  }
  return len;
 8002034:	687b      	ldr	r3, [r7, #4]
}
 8002036:	4618      	mov	r0, r3
 8002038:	3718      	adds	r7, #24
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <_close>:

int _close(int file)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002046:	f04f 33ff 	mov.w	r3, #4294967295
}
 800204a:	4618      	mov	r0, r3
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr

08002054 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002064:	605a      	str	r2, [r3, #4]
  return 0;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr

08002072 <_isatty>:

int _isatty(int file)
{
 8002072:	b480      	push	{r7}
 8002074:	b083      	sub	sp, #12
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800207a:	2301      	movs	r3, #1
}
 800207c:	4618      	mov	r0, r3
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	bc80      	pop	{r7}
 8002084:	4770      	bx	lr

08002086 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002086:	b480      	push	{r7}
 8002088:	b085      	sub	sp, #20
 800208a:	af00      	add	r7, sp, #0
 800208c:	60f8      	str	r0, [r7, #12]
 800208e:	60b9      	str	r1, [r7, #8]
 8002090:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	bc80      	pop	{r7}
 800209c:	4770      	bx	lr
	...

080020a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020a8:	4a14      	ldr	r2, [pc, #80]	@ (80020fc <_sbrk+0x5c>)
 80020aa:	4b15      	ldr	r3, [pc, #84]	@ (8002100 <_sbrk+0x60>)
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020b4:	4b13      	ldr	r3, [pc, #76]	@ (8002104 <_sbrk+0x64>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d102      	bne.n	80020c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020bc:	4b11      	ldr	r3, [pc, #68]	@ (8002104 <_sbrk+0x64>)
 80020be:	4a12      	ldr	r2, [pc, #72]	@ (8002108 <_sbrk+0x68>)
 80020c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020c2:	4b10      	ldr	r3, [pc, #64]	@ (8002104 <_sbrk+0x64>)
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4413      	add	r3, r2
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d207      	bcs.n	80020e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020d0:	f005 f808 	bl	80070e4 <__errno>
 80020d4:	4603      	mov	r3, r0
 80020d6:	220c      	movs	r2, #12
 80020d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020da:	f04f 33ff 	mov.w	r3, #4294967295
 80020de:	e009      	b.n	80020f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020e0:	4b08      	ldr	r3, [pc, #32]	@ (8002104 <_sbrk+0x64>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020e6:	4b07      	ldr	r3, [pc, #28]	@ (8002104 <_sbrk+0x64>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4413      	add	r3, r2
 80020ee:	4a05      	ldr	r2, [pc, #20]	@ (8002104 <_sbrk+0x64>)
 80020f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020f2:	68fb      	ldr	r3, [r7, #12]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20010000 	.word	0x20010000
 8002100:	00000400 	.word	0x00000400
 8002104:	200007b0 	.word	0x200007b0
 8002108:	20000908 	.word	0x20000908

0800210c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002110:	bf00      	nop
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr

08002118 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002118:	f7ff fff8 	bl	800210c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800211c:	480b      	ldr	r0, [pc, #44]	@ (800214c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800211e:	490c      	ldr	r1, [pc, #48]	@ (8002150 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002120:	4a0c      	ldr	r2, [pc, #48]	@ (8002154 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002122:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002124:	e002      	b.n	800212c <LoopCopyDataInit>

08002126 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002126:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002128:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800212a:	3304      	adds	r3, #4

0800212c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800212c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800212e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002130:	d3f9      	bcc.n	8002126 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002132:	4a09      	ldr	r2, [pc, #36]	@ (8002158 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002134:	4c09      	ldr	r4, [pc, #36]	@ (800215c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002136:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002138:	e001      	b.n	800213e <LoopFillZerobss>

0800213a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800213a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800213c:	3204      	adds	r2, #4

0800213e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800213e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002140:	d3fb      	bcc.n	800213a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002142:	f004 ffd5 	bl	80070f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002146:	f7fe f907 	bl	8000358 <main>
  bx lr
 800214a:	4770      	bx	lr
  ldr r0, =_sdata
 800214c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002150:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002154:	08007ea0 	.word	0x08007ea0
  ldr r2, =_sbss
 8002158:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800215c:	20000904 	.word	0x20000904

08002160 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002160:	e7fe      	b.n	8002160 <CAN1_RX1_IRQHandler>
	...

08002164 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002168:	4b08      	ldr	r3, [pc, #32]	@ (800218c <HAL_Init+0x28>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a07      	ldr	r2, [pc, #28]	@ (800218c <HAL_Init+0x28>)
 800216e:	f043 0310 	orr.w	r3, r3, #16
 8002172:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002174:	2003      	movs	r0, #3
 8002176:	f000 fdf5 	bl	8002d64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800217a:	200f      	movs	r0, #15
 800217c:	f000 f808 	bl	8002190 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002180:	f7ff fba2 	bl	80018c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40022000 	.word	0x40022000

08002190 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002198:	4b12      	ldr	r3, [pc, #72]	@ (80021e4 <HAL_InitTick+0x54>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	4b12      	ldr	r3, [pc, #72]	@ (80021e8 <HAL_InitTick+0x58>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	4619      	mov	r1, r3
 80021a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 fe0d 	bl	8002dce <HAL_SYSTICK_Config>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e00e      	b.n	80021dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b0f      	cmp	r3, #15
 80021c2:	d80a      	bhi.n	80021da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021c4:	2200      	movs	r2, #0
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	f04f 30ff 	mov.w	r0, #4294967295
 80021cc:	f000 fdd5 	bl	8002d7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021d0:	4a06      	ldr	r2, [pc, #24]	@ (80021ec <HAL_InitTick+0x5c>)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
 80021d8:	e000      	b.n	80021dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	20000004 	.word	0x20000004
 80021e8:	2000000c 	.word	0x2000000c
 80021ec:	20000008 	.word	0x20000008

080021f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021f4:	4b05      	ldr	r3, [pc, #20]	@ (800220c <HAL_IncTick+0x1c>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	461a      	mov	r2, r3
 80021fa:	4b05      	ldr	r3, [pc, #20]	@ (8002210 <HAL_IncTick+0x20>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4413      	add	r3, r2
 8002200:	4a03      	ldr	r2, [pc, #12]	@ (8002210 <HAL_IncTick+0x20>)
 8002202:	6013      	str	r3, [r2, #0]
}
 8002204:	bf00      	nop
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr
 800220c:	2000000c 	.word	0x2000000c
 8002210:	200007b4 	.word	0x200007b4

08002214 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  return uwTick;
 8002218:	4b02      	ldr	r3, [pc, #8]	@ (8002224 <HAL_GetTick+0x10>)
 800221a:	681b      	ldr	r3, [r3, #0]
}
 800221c:	4618      	mov	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr
 8002224:	200007b4 	.word	0x200007b4

08002228 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002230:	f7ff fff0 	bl	8002214 <HAL_GetTick>
 8002234:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002240:	d005      	beq.n	800224e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002242:	4b0a      	ldr	r3, [pc, #40]	@ (800226c <HAL_Delay+0x44>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	461a      	mov	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4413      	add	r3, r2
 800224c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800224e:	bf00      	nop
 8002250:	f7ff ffe0 	bl	8002214 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	429a      	cmp	r2, r3
 800225e:	d8f7      	bhi.n	8002250 <HAL_Delay+0x28>
  {
  }
}
 8002260:	bf00      	nop
 8002262:	bf00      	nop
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	2000000c 	.word	0x2000000c

08002270 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002278:	2300      	movs	r3, #0
 800227a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800227c:	2300      	movs	r3, #0
 800227e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002280:	2300      	movs	r3, #0
 8002282:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002284:	2300      	movs	r3, #0
 8002286:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e0ce      	b.n	8002430 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800229c:	2b00      	cmp	r3, #0
 800229e:	d109      	bne.n	80022b4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7ff fb3c 	bl	800192c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 fbd9 	bl	8002a6c <ADC_ConversionStop_Disable>
 80022ba:	4603      	mov	r3, r0
 80022bc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022c2:	f003 0310 	and.w	r3, r3, #16
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f040 80a9 	bne.w	800241e <HAL_ADC_Init+0x1ae>
 80022cc:	7dfb      	ldrb	r3, [r7, #23]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f040 80a5 	bne.w	800241e <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80022dc:	f023 0302 	bic.w	r3, r3, #2
 80022e0:	f043 0202 	orr.w	r2, r3, #2
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4951      	ldr	r1, [pc, #324]	@ (8002438 <HAL_ADC_Init+0x1c8>)
 80022f2:	428b      	cmp	r3, r1
 80022f4:	d10a      	bne.n	800230c <HAL_ADC_Init+0x9c>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80022fe:	d002      	beq.n	8002306 <HAL_ADC_Init+0x96>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	69db      	ldr	r3, [r3, #28]
 8002304:	e004      	b.n	8002310 <HAL_ADC_Init+0xa0>
 8002306:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800230a:	e001      	b.n	8002310 <HAL_ADC_Init+0xa0>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002310:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	7b1b      	ldrb	r3, [r3, #12]
 8002316:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002318:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	4313      	orrs	r3, r2
 800231e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002328:	d003      	beq.n	8002332 <HAL_ADC_Init+0xc2>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d102      	bne.n	8002338 <HAL_ADC_Init+0xc8>
 8002332:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002336:	e000      	b.n	800233a <HAL_ADC_Init+0xca>
 8002338:	2300      	movs	r3, #0
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4313      	orrs	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	7d1b      	ldrb	r3, [r3, #20]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d119      	bne.n	800237c <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	7b1b      	ldrb	r3, [r3, #12]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d109      	bne.n	8002364 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	3b01      	subs	r3, #1
 8002356:	035a      	lsls	r2, r3, #13
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	4313      	orrs	r3, r2
 800235c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002360:	613b      	str	r3, [r7, #16]
 8002362:	e00b      	b.n	800237c <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002368:	f043 0220 	orr.w	r2, r3, #32
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002374:	f043 0201 	orr.w	r2, r3, #1
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	430a      	orrs	r2, r1
 800238e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689a      	ldr	r2, [r3, #8]
 8002396:	4b29      	ldr	r3, [pc, #164]	@ (800243c <HAL_ADC_Init+0x1cc>)
 8002398:	4013      	ands	r3, r2
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6812      	ldr	r2, [r2, #0]
 800239e:	68b9      	ldr	r1, [r7, #8]
 80023a0:	430b      	orrs	r3, r1
 80023a2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023ac:	d003      	beq.n	80023b6 <HAL_ADC_Init+0x146>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d104      	bne.n	80023c0 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	051b      	lsls	r3, r3, #20
 80023be:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	430a      	orrs	r2, r1
 80023d2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	4b19      	ldr	r3, [pc, #100]	@ (8002440 <HAL_ADC_Init+0x1d0>)
 80023dc:	4013      	ands	r3, r2
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d10b      	bne.n	80023fc <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ee:	f023 0303 	bic.w	r3, r3, #3
 80023f2:	f043 0201 	orr.w	r2, r3, #1
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023fa:	e018      	b.n	800242e <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002400:	f023 0312 	bic.w	r3, r3, #18
 8002404:	f043 0210 	orr.w	r2, r3, #16
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002410:	f043 0201 	orr.w	r2, r3, #1
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800241c:	e007      	b.n	800242e <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002422:	f043 0210 	orr.w	r2, r3, #16
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800242e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3718      	adds	r7, #24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40013c00 	.word	0x40013c00
 800243c:	ffe1f7fd 	.word	0xffe1f7fd
 8002440:	ff1f0efe 	.word	0xff1f0efe

08002444 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002450:	2300      	movs	r3, #0
 8002452:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a64      	ldr	r2, [pc, #400]	@ (80025ec <HAL_ADC_Start_DMA+0x1a8>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d004      	beq.n	8002468 <HAL_ADC_Start_DMA+0x24>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a63      	ldr	r2, [pc, #396]	@ (80025f0 <HAL_ADC_Start_DMA+0x1ac>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d106      	bne.n	8002476 <HAL_ADC_Start_DMA+0x32>
 8002468:	4b60      	ldr	r3, [pc, #384]	@ (80025ec <HAL_ADC_Start_DMA+0x1a8>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002470:	2b00      	cmp	r3, #0
 8002472:	f040 80b3 	bne.w	80025dc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800247c:	2b01      	cmp	r3, #1
 800247e:	d101      	bne.n	8002484 <HAL_ADC_Start_DMA+0x40>
 8002480:	2302      	movs	r3, #2
 8002482:	e0ae      	b.n	80025e2 <HAL_ADC_Start_DMA+0x19e>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 fa93 	bl	80029b8 <ADC_Enable>
 8002492:	4603      	mov	r3, r0
 8002494:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002496:	7dfb      	ldrb	r3, [r7, #23]
 8002498:	2b00      	cmp	r3, #0
 800249a:	f040 809a 	bne.w	80025d2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80024a6:	f023 0301 	bic.w	r3, r3, #1
 80024aa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a4e      	ldr	r2, [pc, #312]	@ (80025f0 <HAL_ADC_Start_DMA+0x1ac>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d105      	bne.n	80024c8 <HAL_ADC_Start_DMA+0x84>
 80024bc:	4b4b      	ldr	r3, [pc, #300]	@ (80025ec <HAL_ADC_Start_DMA+0x1a8>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d115      	bne.n	80024f4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024cc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d026      	beq.n	8002530 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80024ea:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024f2:	e01d      	b.n	8002530 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a39      	ldr	r2, [pc, #228]	@ (80025ec <HAL_ADC_Start_DMA+0x1a8>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d004      	beq.n	8002514 <HAL_ADC_Start_DMA+0xd0>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a38      	ldr	r2, [pc, #224]	@ (80025f0 <HAL_ADC_Start_DMA+0x1ac>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d10d      	bne.n	8002530 <HAL_ADC_Start_DMA+0xec>
 8002514:	4b35      	ldr	r3, [pc, #212]	@ (80025ec <HAL_ADC_Start_DMA+0x1a8>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800251c:	2b00      	cmp	r3, #0
 800251e:	d007      	beq.n	8002530 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002524:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002528:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002534:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d006      	beq.n	800254a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002540:	f023 0206 	bic.w	r2, r3, #6
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002548:	e002      	b.n	8002550 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	4a25      	ldr	r2, [pc, #148]	@ (80025f4 <HAL_ADC_Start_DMA+0x1b0>)
 800255e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	4a24      	ldr	r2, [pc, #144]	@ (80025f8 <HAL_ADC_Start_DMA+0x1b4>)
 8002566:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	4a23      	ldr	r2, [pc, #140]	@ (80025fc <HAL_ADC_Start_DMA+0x1b8>)
 800256e:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f06f 0202 	mvn.w	r2, #2
 8002578:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002588:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6a18      	ldr	r0, [r3, #32]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	334c      	adds	r3, #76	@ 0x4c
 8002594:	4619      	mov	r1, r3
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f000 fc9b 	bl	8002ed4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80025a8:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80025ac:	d108      	bne.n	80025c0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80025bc:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80025be:	e00f      	b.n	80025e0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689a      	ldr	r2, [r3, #8]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80025ce:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80025d0:	e006      	b.n	80025e0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 80025da:	e001      	b.n	80025e0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80025e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40012400 	.word	0x40012400
 80025f0:	40012800 	.word	0x40012800
 80025f4:	08002aef 	.word	0x08002aef
 80025f8:	08002b6b 	.word	0x08002b6b
 80025fc:	08002b87 	.word	0x08002b87

08002600 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	f003 0320 	and.w	r3, r3, #32
 800261e:	2b00      	cmp	r3, #0
 8002620:	d03e      	beq.n	80026a0 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d039      	beq.n	80026a0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002630:	f003 0310 	and.w	r3, r3, #16
 8002634:	2b00      	cmp	r3, #0
 8002636:	d105      	bne.n	8002644 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800263c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800264e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002652:	d11d      	bne.n	8002690 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002658:	2b00      	cmp	r3, #0
 800265a:	d119      	bne.n	8002690 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 0220 	bic.w	r2, r2, #32
 800266a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002670:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800267c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d105      	bne.n	8002690 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002688:	f043 0201 	orr.w	r2, r3, #1
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f000 f874 	bl	800277e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f06f 0212 	mvn.w	r2, #18
 800269e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d04d      	beq.n	8002746 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d048      	beq.n	8002746 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b8:	f003 0310 	and.w	r3, r3, #16
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d105      	bne.n	80026cc <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80026d6:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80026da:	d012      	beq.n	8002702 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d125      	bne.n	8002736 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80026f4:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80026f8:	d11d      	bne.n	8002736 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d119      	bne.n	8002736 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002710:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002716:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002726:	2b00      	cmp	r3, #0
 8002728:	d105      	bne.n	8002736 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800272e:	f043 0201 	orr.w	r2, r3, #1
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 fa3f 	bl	8002bba <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f06f 020c 	mvn.w	r2, #12
 8002744:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800274c:	2b00      	cmp	r3, #0
 800274e:	d012      	beq.n	8002776 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00d      	beq.n	8002776 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800275e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 f81b 	bl	80027a2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f06f 0201 	mvn.w	r2, #1
 8002774:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002776:	bf00      	nop
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr

08002790 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr

080027a2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr
	...

080027c8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027d2:	2300      	movs	r3, #0
 80027d4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d101      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x20>
 80027e4:	2302      	movs	r3, #2
 80027e6:	e0dc      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x1da>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	2b06      	cmp	r3, #6
 80027f6:	d81c      	bhi.n	8002832 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	3b05      	subs	r3, #5
 800280a:	221f      	movs	r2, #31
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	43db      	mvns	r3, r3
 8002812:	4019      	ands	r1, r3
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	6818      	ldr	r0, [r3, #0]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	3b05      	subs	r3, #5
 8002824:	fa00 f203 	lsl.w	r2, r0, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	430a      	orrs	r2, r1
 800282e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002830:	e03c      	b.n	80028ac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2b0c      	cmp	r3, #12
 8002838:	d81c      	bhi.n	8002874 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	3b23      	subs	r3, #35	@ 0x23
 800284c:	221f      	movs	r2, #31
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43db      	mvns	r3, r3
 8002854:	4019      	ands	r1, r3
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	6818      	ldr	r0, [r3, #0]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	4613      	mov	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	3b23      	subs	r3, #35	@ 0x23
 8002866:	fa00 f203 	lsl.w	r2, r0, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	631a      	str	r2, [r3, #48]	@ 0x30
 8002872:	e01b      	b.n	80028ac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	4613      	mov	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4413      	add	r3, r2
 8002884:	3b41      	subs	r3, #65	@ 0x41
 8002886:	221f      	movs	r2, #31
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	43db      	mvns	r3, r3
 800288e:	4019      	ands	r1, r3
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	6818      	ldr	r0, [r3, #0]
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	4613      	mov	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	3b41      	subs	r3, #65	@ 0x41
 80028a0:	fa00 f203 	lsl.w	r2, r0, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2b09      	cmp	r3, #9
 80028b2:	d91c      	bls.n	80028ee <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68d9      	ldr	r1, [r3, #12]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	4613      	mov	r3, r2
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	4413      	add	r3, r2
 80028c4:	3b1e      	subs	r3, #30
 80028c6:	2207      	movs	r2, #7
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	4019      	ands	r1, r3
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	6898      	ldr	r0, [r3, #8]
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	4613      	mov	r3, r2
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	4413      	add	r3, r2
 80028de:	3b1e      	subs	r3, #30
 80028e0:	fa00 f203 	lsl.w	r2, r0, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	60da      	str	r2, [r3, #12]
 80028ec:	e019      	b.n	8002922 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6919      	ldr	r1, [r3, #16]
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	4613      	mov	r3, r2
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	4413      	add	r3, r2
 80028fe:	2207      	movs	r2, #7
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	4019      	ands	r1, r3
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	6898      	ldr	r0, [r3, #8]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	4613      	mov	r3, r2
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	4413      	add	r3, r2
 8002916:	fa00 f203 	lsl.w	r2, r0, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	430a      	orrs	r2, r1
 8002920:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2b10      	cmp	r3, #16
 8002928:	d003      	beq.n	8002932 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800292e:	2b11      	cmp	r3, #17
 8002930:	d132      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a1d      	ldr	r2, [pc, #116]	@ (80029ac <HAL_ADC_ConfigChannel+0x1e4>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d125      	bne.n	8002988 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d126      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002958:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2b10      	cmp	r3, #16
 8002960:	d11a      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002962:	4b13      	ldr	r3, [pc, #76]	@ (80029b0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a13      	ldr	r2, [pc, #76]	@ (80029b4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002968:	fba2 2303 	umull	r2, r3, r2, r3
 800296c:	0c9a      	lsrs	r2, r3, #18
 800296e:	4613      	mov	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002978:	e002      	b.n	8002980 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	3b01      	subs	r3, #1
 800297e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f9      	bne.n	800297a <HAL_ADC_ConfigChannel+0x1b2>
 8002986:	e007      	b.n	8002998 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800298c:	f043 0220 	orr.w	r2, r3, #32
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr
 80029ac:	40012400 	.word	0x40012400
 80029b0:	20000004 	.word	0x20000004
 80029b4:	431bde83 	.word	0x431bde83

080029b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d040      	beq.n	8002a58 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f042 0201 	orr.w	r2, r2, #1
 80029e4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80029e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002a64 <ADC_Enable+0xac>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a1f      	ldr	r2, [pc, #124]	@ (8002a68 <ADC_Enable+0xb0>)
 80029ec:	fba2 2303 	umull	r2, r3, r2, r3
 80029f0:	0c9b      	lsrs	r3, r3, #18
 80029f2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80029f4:	e002      	b.n	80029fc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	3b01      	subs	r3, #1
 80029fa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f9      	bne.n	80029f6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a02:	f7ff fc07 	bl	8002214 <HAL_GetTick>
 8002a06:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002a08:	e01f      	b.n	8002a4a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a0a:	f7ff fc03 	bl	8002214 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d918      	bls.n	8002a4a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d011      	beq.n	8002a4a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a2a:	f043 0210 	orr.w	r2, r3, #16
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a36:	f043 0201 	orr.w	r2, r3, #1
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e007      	b.n	8002a5a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d1d8      	bne.n	8002a0a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	20000004 	.word	0x20000004
 8002a68:	431bde83 	.word	0x431bde83

08002a6c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a74:	2300      	movs	r3, #0
 8002a76:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d12e      	bne.n	8002ae4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 0201 	bic.w	r2, r2, #1
 8002a94:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a96:	f7ff fbbd 	bl	8002214 <HAL_GetTick>
 8002a9a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a9c:	e01b      	b.n	8002ad6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a9e:	f7ff fbb9 	bl	8002214 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d914      	bls.n	8002ad6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d10d      	bne.n	8002ad6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002abe:	f043 0210 	orr.w	r2, r3, #16
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aca:	f043 0201 	orr.w	r2, r3, #1
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e007      	b.n	8002ae6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d0dc      	beq.n	8002a9e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b084      	sub	sp, #16
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afa:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b00:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d127      	bne.n	8002b58 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b0c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002b1e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002b22:	d115      	bne.n	8002b50 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d111      	bne.n	8002b50 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b30:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d105      	bne.n	8002b50 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b48:	f043 0201 	orr.w	r2, r3, #1
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f7ff fe14 	bl	800277e <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002b56:	e004      	b.n	8002b62 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	4798      	blx	r3
}
 8002b62:	bf00      	nop
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b084      	sub	sp, #16
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b76:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f7ff fe09 	bl	8002790 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b7e:	bf00      	nop
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b084      	sub	sp, #16
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b92:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b98:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba4:	f043 0204 	orr.w	r2, r3, #4
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f7ff fe01 	bl	80027b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bb2:	bf00      	nop
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bc80      	pop	{r7}
 8002bca:	4770      	bx	lr

08002bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8002c10 <__NVIC_SetPriorityGrouping+0x44>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002be2:	68ba      	ldr	r2, [r7, #8]
 8002be4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002be8:	4013      	ands	r3, r2
 8002bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bf4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bfe:	4a04      	ldr	r2, [pc, #16]	@ (8002c10 <__NVIC_SetPriorityGrouping+0x44>)
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	60d3      	str	r3, [r2, #12]
}
 8002c04:	bf00      	nop
 8002c06:	3714      	adds	r7, #20
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc80      	pop	{r7}
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	e000ed00 	.word	0xe000ed00

08002c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c18:	4b04      	ldr	r3, [pc, #16]	@ (8002c2c <__NVIC_GetPriorityGrouping+0x18>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	0a1b      	lsrs	r3, r3, #8
 8002c1e:	f003 0307 	and.w	r3, r3, #7
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bc80      	pop	{r7}
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	e000ed00 	.word	0xe000ed00

08002c30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	4603      	mov	r3, r0
 8002c38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	db0b      	blt.n	8002c5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c42:	79fb      	ldrb	r3, [r7, #7]
 8002c44:	f003 021f 	and.w	r2, r3, #31
 8002c48:	4906      	ldr	r1, [pc, #24]	@ (8002c64 <__NVIC_EnableIRQ+0x34>)
 8002c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4e:	095b      	lsrs	r3, r3, #5
 8002c50:	2001      	movs	r0, #1
 8002c52:	fa00 f202 	lsl.w	r2, r0, r2
 8002c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bc80      	pop	{r7}
 8002c62:	4770      	bx	lr
 8002c64:	e000e100 	.word	0xe000e100

08002c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	6039      	str	r1, [r7, #0]
 8002c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	db0a      	blt.n	8002c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	b2da      	uxtb	r2, r3
 8002c80:	490c      	ldr	r1, [pc, #48]	@ (8002cb4 <__NVIC_SetPriority+0x4c>)
 8002c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c86:	0112      	lsls	r2, r2, #4
 8002c88:	b2d2      	uxtb	r2, r2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c90:	e00a      	b.n	8002ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	4908      	ldr	r1, [pc, #32]	@ (8002cb8 <__NVIC_SetPriority+0x50>)
 8002c98:	79fb      	ldrb	r3, [r7, #7]
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	3b04      	subs	r3, #4
 8002ca0:	0112      	lsls	r2, r2, #4
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	761a      	strb	r2, [r3, #24]
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	e000e100 	.word	0xe000e100
 8002cb8:	e000ed00 	.word	0xe000ed00

08002cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b089      	sub	sp, #36	@ 0x24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f003 0307 	and.w	r3, r3, #7
 8002cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f1c3 0307 	rsb	r3, r3, #7
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	bf28      	it	cs
 8002cda:	2304      	movcs	r3, #4
 8002cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	2b06      	cmp	r3, #6
 8002ce4:	d902      	bls.n	8002cec <NVIC_EncodePriority+0x30>
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	3b03      	subs	r3, #3
 8002cea:	e000      	b.n	8002cee <NVIC_EncodePriority+0x32>
 8002cec:	2300      	movs	r3, #0
 8002cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	43da      	mvns	r2, r3
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	401a      	ands	r2, r3
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d04:	f04f 31ff 	mov.w	r1, #4294967295
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0e:	43d9      	mvns	r1, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d14:	4313      	orrs	r3, r2
         );
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3724      	adds	r7, #36	@ 0x24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr

08002d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d30:	d301      	bcc.n	8002d36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d32:	2301      	movs	r3, #1
 8002d34:	e00f      	b.n	8002d56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d36:	4a0a      	ldr	r2, [pc, #40]	@ (8002d60 <SysTick_Config+0x40>)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d3e:	210f      	movs	r1, #15
 8002d40:	f04f 30ff 	mov.w	r0, #4294967295
 8002d44:	f7ff ff90 	bl	8002c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d48:	4b05      	ldr	r3, [pc, #20]	@ (8002d60 <SysTick_Config+0x40>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d4e:	4b04      	ldr	r3, [pc, #16]	@ (8002d60 <SysTick_Config+0x40>)
 8002d50:	2207      	movs	r2, #7
 8002d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	e000e010 	.word	0xe000e010

08002d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f7ff ff2d 	bl	8002bcc <__NVIC_SetPriorityGrouping>
}
 8002d72:	bf00      	nop
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b086      	sub	sp, #24
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	4603      	mov	r3, r0
 8002d82:	60b9      	str	r1, [r7, #8]
 8002d84:	607a      	str	r2, [r7, #4]
 8002d86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d8c:	f7ff ff42 	bl	8002c14 <__NVIC_GetPriorityGrouping>
 8002d90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	68b9      	ldr	r1, [r7, #8]
 8002d96:	6978      	ldr	r0, [r7, #20]
 8002d98:	f7ff ff90 	bl	8002cbc <NVIC_EncodePriority>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002da2:	4611      	mov	r1, r2
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff ff5f 	bl	8002c68 <__NVIC_SetPriority>
}
 8002daa:	bf00      	nop
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b082      	sub	sp, #8
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	4603      	mov	r3, r0
 8002dba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff ff35 	bl	8002c30 <__NVIC_EnableIRQ>
}
 8002dc6:	bf00      	nop
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b082      	sub	sp, #8
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7ff ffa2 	bl	8002d20 <SysTick_Config>
 8002ddc:	4603      	mov	r3, r0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
	...

08002de8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e059      	b.n	8002eb2 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	461a      	mov	r2, r3
 8002e04:	4b2d      	ldr	r3, [pc, #180]	@ (8002ebc <HAL_DMA_Init+0xd4>)
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d80f      	bhi.n	8002e2a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	4b2b      	ldr	r3, [pc, #172]	@ (8002ec0 <HAL_DMA_Init+0xd8>)
 8002e12:	4413      	add	r3, r2
 8002e14:	4a2b      	ldr	r2, [pc, #172]	@ (8002ec4 <HAL_DMA_Init+0xdc>)
 8002e16:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1a:	091b      	lsrs	r3, r3, #4
 8002e1c:	009a      	lsls	r2, r3, #2
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a28      	ldr	r2, [pc, #160]	@ (8002ec8 <HAL_DMA_Init+0xe0>)
 8002e26:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002e28:	e00e      	b.n	8002e48 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	4b26      	ldr	r3, [pc, #152]	@ (8002ecc <HAL_DMA_Init+0xe4>)
 8002e32:	4413      	add	r3, r2
 8002e34:	4a23      	ldr	r2, [pc, #140]	@ (8002ec4 <HAL_DMA_Init+0xdc>)
 8002e36:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3a:	091b      	lsrs	r3, r3, #4
 8002e3c:	009a      	lsls	r2, r3, #2
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a22      	ldr	r2, [pc, #136]	@ (8002ed0 <HAL_DMA_Init+0xe8>)
 8002e46:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002e5e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002e62:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002e6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr
 8002ebc:	40020407 	.word	0x40020407
 8002ec0:	bffdfff8 	.word	0xbffdfff8
 8002ec4:	cccccccd 	.word	0xcccccccd
 8002ec8:	40020000 	.word	0x40020000
 8002ecc:	bffdfbf8 	.word	0xbffdfbf8
 8002ed0:	40020400 	.word	0x40020400

08002ed4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
 8002ee0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d101      	bne.n	8002ef4 <HAL_DMA_Start_IT+0x20>
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	e04b      	b.n	8002f8c <HAL_DMA_Start_IT+0xb8>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d13a      	bne.n	8002f7e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 0201 	bic.w	r2, r2, #1
 8002f24:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	68b9      	ldr	r1, [r7, #8]
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 fbb1 	bl	8003694 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d008      	beq.n	8002f4c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f042 020e 	orr.w	r2, r2, #14
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	e00f      	b.n	8002f6c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0204 	bic.w	r2, r2, #4
 8002f5a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 020a 	orr.w	r2, r2, #10
 8002f6a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0201 	orr.w	r2, r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	e005      	b.n	8002f8a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002f86:	2302      	movs	r3, #2
 8002f88:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3718      	adds	r7, #24
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d008      	beq.n	8002fbe <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2204      	movs	r2, #4
 8002fb0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e020      	b.n	8003000 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 020e 	bic.w	r2, r2, #14
 8002fcc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 0201 	bic.w	r2, r2, #1
 8002fdc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fec:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	bc80      	pop	{r7}
 8003008:	4770      	bx	lr
	...

0800300c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003014:	2300      	movs	r3, #0
 8003016:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d005      	beq.n	8003030 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2204      	movs	r2, #4
 8003028:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	73fb      	strb	r3, [r7, #15]
 800302e:	e0d6      	b.n	80031de <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 020e 	bic.w	r2, r2, #14
 800303e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0201 	bic.w	r2, r2, #1
 800304e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	461a      	mov	r2, r3
 8003056:	4b64      	ldr	r3, [pc, #400]	@ (80031e8 <HAL_DMA_Abort_IT+0x1dc>)
 8003058:	429a      	cmp	r2, r3
 800305a:	d958      	bls.n	800310e <HAL_DMA_Abort_IT+0x102>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a62      	ldr	r2, [pc, #392]	@ (80031ec <HAL_DMA_Abort_IT+0x1e0>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d04f      	beq.n	8003106 <HAL_DMA_Abort_IT+0xfa>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a61      	ldr	r2, [pc, #388]	@ (80031f0 <HAL_DMA_Abort_IT+0x1e4>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d048      	beq.n	8003102 <HAL_DMA_Abort_IT+0xf6>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a5f      	ldr	r2, [pc, #380]	@ (80031f4 <HAL_DMA_Abort_IT+0x1e8>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d040      	beq.n	80030fc <HAL_DMA_Abort_IT+0xf0>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a5e      	ldr	r2, [pc, #376]	@ (80031f8 <HAL_DMA_Abort_IT+0x1ec>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d038      	beq.n	80030f6 <HAL_DMA_Abort_IT+0xea>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a5c      	ldr	r2, [pc, #368]	@ (80031fc <HAL_DMA_Abort_IT+0x1f0>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d030      	beq.n	80030f0 <HAL_DMA_Abort_IT+0xe4>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a5b      	ldr	r2, [pc, #364]	@ (8003200 <HAL_DMA_Abort_IT+0x1f4>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d028      	beq.n	80030ea <HAL_DMA_Abort_IT+0xde>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a52      	ldr	r2, [pc, #328]	@ (80031e8 <HAL_DMA_Abort_IT+0x1dc>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d020      	beq.n	80030e4 <HAL_DMA_Abort_IT+0xd8>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a57      	ldr	r2, [pc, #348]	@ (8003204 <HAL_DMA_Abort_IT+0x1f8>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d019      	beq.n	80030e0 <HAL_DMA_Abort_IT+0xd4>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a55      	ldr	r2, [pc, #340]	@ (8003208 <HAL_DMA_Abort_IT+0x1fc>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d012      	beq.n	80030dc <HAL_DMA_Abort_IT+0xd0>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a54      	ldr	r2, [pc, #336]	@ (800320c <HAL_DMA_Abort_IT+0x200>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d00a      	beq.n	80030d6 <HAL_DMA_Abort_IT+0xca>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a52      	ldr	r2, [pc, #328]	@ (8003210 <HAL_DMA_Abort_IT+0x204>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d102      	bne.n	80030d0 <HAL_DMA_Abort_IT+0xc4>
 80030ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030ce:	e01b      	b.n	8003108 <HAL_DMA_Abort_IT+0xfc>
 80030d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80030d4:	e018      	b.n	8003108 <HAL_DMA_Abort_IT+0xfc>
 80030d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80030da:	e015      	b.n	8003108 <HAL_DMA_Abort_IT+0xfc>
 80030dc:	2310      	movs	r3, #16
 80030de:	e013      	b.n	8003108 <HAL_DMA_Abort_IT+0xfc>
 80030e0:	2301      	movs	r3, #1
 80030e2:	e011      	b.n	8003108 <HAL_DMA_Abort_IT+0xfc>
 80030e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80030e8:	e00e      	b.n	8003108 <HAL_DMA_Abort_IT+0xfc>
 80030ea:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80030ee:	e00b      	b.n	8003108 <HAL_DMA_Abort_IT+0xfc>
 80030f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80030f4:	e008      	b.n	8003108 <HAL_DMA_Abort_IT+0xfc>
 80030f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030fa:	e005      	b.n	8003108 <HAL_DMA_Abort_IT+0xfc>
 80030fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003100:	e002      	b.n	8003108 <HAL_DMA_Abort_IT+0xfc>
 8003102:	2310      	movs	r3, #16
 8003104:	e000      	b.n	8003108 <HAL_DMA_Abort_IT+0xfc>
 8003106:	2301      	movs	r3, #1
 8003108:	4a42      	ldr	r2, [pc, #264]	@ (8003214 <HAL_DMA_Abort_IT+0x208>)
 800310a:	6053      	str	r3, [r2, #4]
 800310c:	e057      	b.n	80031be <HAL_DMA_Abort_IT+0x1b2>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a36      	ldr	r2, [pc, #216]	@ (80031ec <HAL_DMA_Abort_IT+0x1e0>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d04f      	beq.n	80031b8 <HAL_DMA_Abort_IT+0x1ac>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a34      	ldr	r2, [pc, #208]	@ (80031f0 <HAL_DMA_Abort_IT+0x1e4>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d048      	beq.n	80031b4 <HAL_DMA_Abort_IT+0x1a8>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a33      	ldr	r2, [pc, #204]	@ (80031f4 <HAL_DMA_Abort_IT+0x1e8>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d040      	beq.n	80031ae <HAL_DMA_Abort_IT+0x1a2>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a31      	ldr	r2, [pc, #196]	@ (80031f8 <HAL_DMA_Abort_IT+0x1ec>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d038      	beq.n	80031a8 <HAL_DMA_Abort_IT+0x19c>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a30      	ldr	r2, [pc, #192]	@ (80031fc <HAL_DMA_Abort_IT+0x1f0>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d030      	beq.n	80031a2 <HAL_DMA_Abort_IT+0x196>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a2e      	ldr	r2, [pc, #184]	@ (8003200 <HAL_DMA_Abort_IT+0x1f4>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d028      	beq.n	800319c <HAL_DMA_Abort_IT+0x190>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a26      	ldr	r2, [pc, #152]	@ (80031e8 <HAL_DMA_Abort_IT+0x1dc>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d020      	beq.n	8003196 <HAL_DMA_Abort_IT+0x18a>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a2a      	ldr	r2, [pc, #168]	@ (8003204 <HAL_DMA_Abort_IT+0x1f8>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d019      	beq.n	8003192 <HAL_DMA_Abort_IT+0x186>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a29      	ldr	r2, [pc, #164]	@ (8003208 <HAL_DMA_Abort_IT+0x1fc>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d012      	beq.n	800318e <HAL_DMA_Abort_IT+0x182>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a27      	ldr	r2, [pc, #156]	@ (800320c <HAL_DMA_Abort_IT+0x200>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d00a      	beq.n	8003188 <HAL_DMA_Abort_IT+0x17c>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a26      	ldr	r2, [pc, #152]	@ (8003210 <HAL_DMA_Abort_IT+0x204>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d102      	bne.n	8003182 <HAL_DMA_Abort_IT+0x176>
 800317c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003180:	e01b      	b.n	80031ba <HAL_DMA_Abort_IT+0x1ae>
 8003182:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003186:	e018      	b.n	80031ba <HAL_DMA_Abort_IT+0x1ae>
 8003188:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800318c:	e015      	b.n	80031ba <HAL_DMA_Abort_IT+0x1ae>
 800318e:	2310      	movs	r3, #16
 8003190:	e013      	b.n	80031ba <HAL_DMA_Abort_IT+0x1ae>
 8003192:	2301      	movs	r3, #1
 8003194:	e011      	b.n	80031ba <HAL_DMA_Abort_IT+0x1ae>
 8003196:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800319a:	e00e      	b.n	80031ba <HAL_DMA_Abort_IT+0x1ae>
 800319c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80031a0:	e00b      	b.n	80031ba <HAL_DMA_Abort_IT+0x1ae>
 80031a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80031a6:	e008      	b.n	80031ba <HAL_DMA_Abort_IT+0x1ae>
 80031a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80031ac:	e005      	b.n	80031ba <HAL_DMA_Abort_IT+0x1ae>
 80031ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80031b2:	e002      	b.n	80031ba <HAL_DMA_Abort_IT+0x1ae>
 80031b4:	2310      	movs	r3, #16
 80031b6:	e000      	b.n	80031ba <HAL_DMA_Abort_IT+0x1ae>
 80031b8:	2301      	movs	r3, #1
 80031ba:	4a17      	ldr	r2, [pc, #92]	@ (8003218 <HAL_DMA_Abort_IT+0x20c>)
 80031bc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	4798      	blx	r3
    } 
  }
  return status;
 80031de:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40020080 	.word	0x40020080
 80031ec:	40020008 	.word	0x40020008
 80031f0:	4002001c 	.word	0x4002001c
 80031f4:	40020030 	.word	0x40020030
 80031f8:	40020044 	.word	0x40020044
 80031fc:	40020058 	.word	0x40020058
 8003200:	4002006c 	.word	0x4002006c
 8003204:	40020408 	.word	0x40020408
 8003208:	4002041c 	.word	0x4002041c
 800320c:	40020430 	.word	0x40020430
 8003210:	40020444 	.word	0x40020444
 8003214:	40020400 	.word	0x40020400
 8003218:	40020000 	.word	0x40020000

0800321c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003238:	2204      	movs	r2, #4
 800323a:	409a      	lsls	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4013      	ands	r3, r2
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 80f1 	beq.w	8003428 <HAL_DMA_IRQHandler+0x20c>
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 80eb 	beq.w	8003428 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0320 	and.w	r3, r3, #32
 800325c:	2b00      	cmp	r3, #0
 800325e:	d107      	bne.n	8003270 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 0204 	bic.w	r2, r2, #4
 800326e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	461a      	mov	r2, r3
 8003276:	4b5f      	ldr	r3, [pc, #380]	@ (80033f4 <HAL_DMA_IRQHandler+0x1d8>)
 8003278:	429a      	cmp	r2, r3
 800327a:	d958      	bls.n	800332e <HAL_DMA_IRQHandler+0x112>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a5d      	ldr	r2, [pc, #372]	@ (80033f8 <HAL_DMA_IRQHandler+0x1dc>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d04f      	beq.n	8003326 <HAL_DMA_IRQHandler+0x10a>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a5c      	ldr	r2, [pc, #368]	@ (80033fc <HAL_DMA_IRQHandler+0x1e0>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d048      	beq.n	8003322 <HAL_DMA_IRQHandler+0x106>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a5a      	ldr	r2, [pc, #360]	@ (8003400 <HAL_DMA_IRQHandler+0x1e4>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d040      	beq.n	800331c <HAL_DMA_IRQHandler+0x100>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a59      	ldr	r2, [pc, #356]	@ (8003404 <HAL_DMA_IRQHandler+0x1e8>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d038      	beq.n	8003316 <HAL_DMA_IRQHandler+0xfa>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a57      	ldr	r2, [pc, #348]	@ (8003408 <HAL_DMA_IRQHandler+0x1ec>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d030      	beq.n	8003310 <HAL_DMA_IRQHandler+0xf4>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a56      	ldr	r2, [pc, #344]	@ (800340c <HAL_DMA_IRQHandler+0x1f0>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d028      	beq.n	800330a <HAL_DMA_IRQHandler+0xee>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a4d      	ldr	r2, [pc, #308]	@ (80033f4 <HAL_DMA_IRQHandler+0x1d8>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d020      	beq.n	8003304 <HAL_DMA_IRQHandler+0xe8>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a52      	ldr	r2, [pc, #328]	@ (8003410 <HAL_DMA_IRQHandler+0x1f4>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d019      	beq.n	8003300 <HAL_DMA_IRQHandler+0xe4>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a50      	ldr	r2, [pc, #320]	@ (8003414 <HAL_DMA_IRQHandler+0x1f8>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d012      	beq.n	80032fc <HAL_DMA_IRQHandler+0xe0>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a4f      	ldr	r2, [pc, #316]	@ (8003418 <HAL_DMA_IRQHandler+0x1fc>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d00a      	beq.n	80032f6 <HAL_DMA_IRQHandler+0xda>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a4d      	ldr	r2, [pc, #308]	@ (800341c <HAL_DMA_IRQHandler+0x200>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d102      	bne.n	80032f0 <HAL_DMA_IRQHandler+0xd4>
 80032ea:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80032ee:	e01b      	b.n	8003328 <HAL_DMA_IRQHandler+0x10c>
 80032f0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80032f4:	e018      	b.n	8003328 <HAL_DMA_IRQHandler+0x10c>
 80032f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80032fa:	e015      	b.n	8003328 <HAL_DMA_IRQHandler+0x10c>
 80032fc:	2340      	movs	r3, #64	@ 0x40
 80032fe:	e013      	b.n	8003328 <HAL_DMA_IRQHandler+0x10c>
 8003300:	2304      	movs	r3, #4
 8003302:	e011      	b.n	8003328 <HAL_DMA_IRQHandler+0x10c>
 8003304:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003308:	e00e      	b.n	8003328 <HAL_DMA_IRQHandler+0x10c>
 800330a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800330e:	e00b      	b.n	8003328 <HAL_DMA_IRQHandler+0x10c>
 8003310:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003314:	e008      	b.n	8003328 <HAL_DMA_IRQHandler+0x10c>
 8003316:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800331a:	e005      	b.n	8003328 <HAL_DMA_IRQHandler+0x10c>
 800331c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003320:	e002      	b.n	8003328 <HAL_DMA_IRQHandler+0x10c>
 8003322:	2340      	movs	r3, #64	@ 0x40
 8003324:	e000      	b.n	8003328 <HAL_DMA_IRQHandler+0x10c>
 8003326:	2304      	movs	r3, #4
 8003328:	4a3d      	ldr	r2, [pc, #244]	@ (8003420 <HAL_DMA_IRQHandler+0x204>)
 800332a:	6053      	str	r3, [r2, #4]
 800332c:	e057      	b.n	80033de <HAL_DMA_IRQHandler+0x1c2>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a31      	ldr	r2, [pc, #196]	@ (80033f8 <HAL_DMA_IRQHandler+0x1dc>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d04f      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x1bc>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a2f      	ldr	r2, [pc, #188]	@ (80033fc <HAL_DMA_IRQHandler+0x1e0>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d048      	beq.n	80033d4 <HAL_DMA_IRQHandler+0x1b8>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a2e      	ldr	r2, [pc, #184]	@ (8003400 <HAL_DMA_IRQHandler+0x1e4>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d040      	beq.n	80033ce <HAL_DMA_IRQHandler+0x1b2>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a2c      	ldr	r2, [pc, #176]	@ (8003404 <HAL_DMA_IRQHandler+0x1e8>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d038      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x1ac>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a2b      	ldr	r2, [pc, #172]	@ (8003408 <HAL_DMA_IRQHandler+0x1ec>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d030      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x1a6>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a29      	ldr	r2, [pc, #164]	@ (800340c <HAL_DMA_IRQHandler+0x1f0>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d028      	beq.n	80033bc <HAL_DMA_IRQHandler+0x1a0>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a21      	ldr	r2, [pc, #132]	@ (80033f4 <HAL_DMA_IRQHandler+0x1d8>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d020      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x19a>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a25      	ldr	r2, [pc, #148]	@ (8003410 <HAL_DMA_IRQHandler+0x1f4>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d019      	beq.n	80033b2 <HAL_DMA_IRQHandler+0x196>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a24      	ldr	r2, [pc, #144]	@ (8003414 <HAL_DMA_IRQHandler+0x1f8>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d012      	beq.n	80033ae <HAL_DMA_IRQHandler+0x192>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a22      	ldr	r2, [pc, #136]	@ (8003418 <HAL_DMA_IRQHandler+0x1fc>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d00a      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x18c>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a21      	ldr	r2, [pc, #132]	@ (800341c <HAL_DMA_IRQHandler+0x200>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d102      	bne.n	80033a2 <HAL_DMA_IRQHandler+0x186>
 800339c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80033a0:	e01b      	b.n	80033da <HAL_DMA_IRQHandler+0x1be>
 80033a2:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80033a6:	e018      	b.n	80033da <HAL_DMA_IRQHandler+0x1be>
 80033a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80033ac:	e015      	b.n	80033da <HAL_DMA_IRQHandler+0x1be>
 80033ae:	2340      	movs	r3, #64	@ 0x40
 80033b0:	e013      	b.n	80033da <HAL_DMA_IRQHandler+0x1be>
 80033b2:	2304      	movs	r3, #4
 80033b4:	e011      	b.n	80033da <HAL_DMA_IRQHandler+0x1be>
 80033b6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80033ba:	e00e      	b.n	80033da <HAL_DMA_IRQHandler+0x1be>
 80033bc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80033c0:	e00b      	b.n	80033da <HAL_DMA_IRQHandler+0x1be>
 80033c2:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80033c6:	e008      	b.n	80033da <HAL_DMA_IRQHandler+0x1be>
 80033c8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80033cc:	e005      	b.n	80033da <HAL_DMA_IRQHandler+0x1be>
 80033ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80033d2:	e002      	b.n	80033da <HAL_DMA_IRQHandler+0x1be>
 80033d4:	2340      	movs	r3, #64	@ 0x40
 80033d6:	e000      	b.n	80033da <HAL_DMA_IRQHandler+0x1be>
 80033d8:	2304      	movs	r3, #4
 80033da:	4a12      	ldr	r2, [pc, #72]	@ (8003424 <HAL_DMA_IRQHandler+0x208>)
 80033dc:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 8136 	beq.w	8003654 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80033f0:	e130      	b.n	8003654 <HAL_DMA_IRQHandler+0x438>
 80033f2:	bf00      	nop
 80033f4:	40020080 	.word	0x40020080
 80033f8:	40020008 	.word	0x40020008
 80033fc:	4002001c 	.word	0x4002001c
 8003400:	40020030 	.word	0x40020030
 8003404:	40020044 	.word	0x40020044
 8003408:	40020058 	.word	0x40020058
 800340c:	4002006c 	.word	0x4002006c
 8003410:	40020408 	.word	0x40020408
 8003414:	4002041c 	.word	0x4002041c
 8003418:	40020430 	.word	0x40020430
 800341c:	40020444 	.word	0x40020444
 8003420:	40020400 	.word	0x40020400
 8003424:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342c:	2202      	movs	r2, #2
 800342e:	409a      	lsls	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4013      	ands	r3, r2
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 80dd 	beq.w	80035f4 <HAL_DMA_IRQHandler+0x3d8>
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	f000 80d7 	beq.w	80035f4 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0320 	and.w	r3, r3, #32
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10b      	bne.n	800346c <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 020a 	bic.w	r2, r2, #10
 8003462:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	461a      	mov	r2, r3
 8003472:	4b7b      	ldr	r3, [pc, #492]	@ (8003660 <HAL_DMA_IRQHandler+0x444>)
 8003474:	429a      	cmp	r2, r3
 8003476:	d958      	bls.n	800352a <HAL_DMA_IRQHandler+0x30e>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a79      	ldr	r2, [pc, #484]	@ (8003664 <HAL_DMA_IRQHandler+0x448>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d04f      	beq.n	8003522 <HAL_DMA_IRQHandler+0x306>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a78      	ldr	r2, [pc, #480]	@ (8003668 <HAL_DMA_IRQHandler+0x44c>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d048      	beq.n	800351e <HAL_DMA_IRQHandler+0x302>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a76      	ldr	r2, [pc, #472]	@ (800366c <HAL_DMA_IRQHandler+0x450>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d040      	beq.n	8003518 <HAL_DMA_IRQHandler+0x2fc>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a75      	ldr	r2, [pc, #468]	@ (8003670 <HAL_DMA_IRQHandler+0x454>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d038      	beq.n	8003512 <HAL_DMA_IRQHandler+0x2f6>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a73      	ldr	r2, [pc, #460]	@ (8003674 <HAL_DMA_IRQHandler+0x458>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d030      	beq.n	800350c <HAL_DMA_IRQHandler+0x2f0>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a72      	ldr	r2, [pc, #456]	@ (8003678 <HAL_DMA_IRQHandler+0x45c>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d028      	beq.n	8003506 <HAL_DMA_IRQHandler+0x2ea>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a69      	ldr	r2, [pc, #420]	@ (8003660 <HAL_DMA_IRQHandler+0x444>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d020      	beq.n	8003500 <HAL_DMA_IRQHandler+0x2e4>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a6e      	ldr	r2, [pc, #440]	@ (800367c <HAL_DMA_IRQHandler+0x460>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d019      	beq.n	80034fc <HAL_DMA_IRQHandler+0x2e0>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a6c      	ldr	r2, [pc, #432]	@ (8003680 <HAL_DMA_IRQHandler+0x464>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d012      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x2dc>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a6b      	ldr	r2, [pc, #428]	@ (8003684 <HAL_DMA_IRQHandler+0x468>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d00a      	beq.n	80034f2 <HAL_DMA_IRQHandler+0x2d6>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a69      	ldr	r2, [pc, #420]	@ (8003688 <HAL_DMA_IRQHandler+0x46c>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d102      	bne.n	80034ec <HAL_DMA_IRQHandler+0x2d0>
 80034e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80034ea:	e01b      	b.n	8003524 <HAL_DMA_IRQHandler+0x308>
 80034ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034f0:	e018      	b.n	8003524 <HAL_DMA_IRQHandler+0x308>
 80034f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80034f6:	e015      	b.n	8003524 <HAL_DMA_IRQHandler+0x308>
 80034f8:	2320      	movs	r3, #32
 80034fa:	e013      	b.n	8003524 <HAL_DMA_IRQHandler+0x308>
 80034fc:	2302      	movs	r3, #2
 80034fe:	e011      	b.n	8003524 <HAL_DMA_IRQHandler+0x308>
 8003500:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003504:	e00e      	b.n	8003524 <HAL_DMA_IRQHandler+0x308>
 8003506:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800350a:	e00b      	b.n	8003524 <HAL_DMA_IRQHandler+0x308>
 800350c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003510:	e008      	b.n	8003524 <HAL_DMA_IRQHandler+0x308>
 8003512:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003516:	e005      	b.n	8003524 <HAL_DMA_IRQHandler+0x308>
 8003518:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800351c:	e002      	b.n	8003524 <HAL_DMA_IRQHandler+0x308>
 800351e:	2320      	movs	r3, #32
 8003520:	e000      	b.n	8003524 <HAL_DMA_IRQHandler+0x308>
 8003522:	2302      	movs	r3, #2
 8003524:	4a59      	ldr	r2, [pc, #356]	@ (800368c <HAL_DMA_IRQHandler+0x470>)
 8003526:	6053      	str	r3, [r2, #4]
 8003528:	e057      	b.n	80035da <HAL_DMA_IRQHandler+0x3be>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a4d      	ldr	r2, [pc, #308]	@ (8003664 <HAL_DMA_IRQHandler+0x448>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d04f      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x3b8>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a4b      	ldr	r2, [pc, #300]	@ (8003668 <HAL_DMA_IRQHandler+0x44c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d048      	beq.n	80035d0 <HAL_DMA_IRQHandler+0x3b4>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a4a      	ldr	r2, [pc, #296]	@ (800366c <HAL_DMA_IRQHandler+0x450>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d040      	beq.n	80035ca <HAL_DMA_IRQHandler+0x3ae>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a48      	ldr	r2, [pc, #288]	@ (8003670 <HAL_DMA_IRQHandler+0x454>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d038      	beq.n	80035c4 <HAL_DMA_IRQHandler+0x3a8>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a47      	ldr	r2, [pc, #284]	@ (8003674 <HAL_DMA_IRQHandler+0x458>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d030      	beq.n	80035be <HAL_DMA_IRQHandler+0x3a2>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a45      	ldr	r2, [pc, #276]	@ (8003678 <HAL_DMA_IRQHandler+0x45c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d028      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x39c>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a3d      	ldr	r2, [pc, #244]	@ (8003660 <HAL_DMA_IRQHandler+0x444>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d020      	beq.n	80035b2 <HAL_DMA_IRQHandler+0x396>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a41      	ldr	r2, [pc, #260]	@ (800367c <HAL_DMA_IRQHandler+0x460>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d019      	beq.n	80035ae <HAL_DMA_IRQHandler+0x392>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a40      	ldr	r2, [pc, #256]	@ (8003680 <HAL_DMA_IRQHandler+0x464>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d012      	beq.n	80035aa <HAL_DMA_IRQHandler+0x38e>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a3e      	ldr	r2, [pc, #248]	@ (8003684 <HAL_DMA_IRQHandler+0x468>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d00a      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x388>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a3d      	ldr	r2, [pc, #244]	@ (8003688 <HAL_DMA_IRQHandler+0x46c>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d102      	bne.n	800359e <HAL_DMA_IRQHandler+0x382>
 8003598:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800359c:	e01b      	b.n	80035d6 <HAL_DMA_IRQHandler+0x3ba>
 800359e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80035a2:	e018      	b.n	80035d6 <HAL_DMA_IRQHandler+0x3ba>
 80035a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80035a8:	e015      	b.n	80035d6 <HAL_DMA_IRQHandler+0x3ba>
 80035aa:	2320      	movs	r3, #32
 80035ac:	e013      	b.n	80035d6 <HAL_DMA_IRQHandler+0x3ba>
 80035ae:	2302      	movs	r3, #2
 80035b0:	e011      	b.n	80035d6 <HAL_DMA_IRQHandler+0x3ba>
 80035b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035b6:	e00e      	b.n	80035d6 <HAL_DMA_IRQHandler+0x3ba>
 80035b8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80035bc:	e00b      	b.n	80035d6 <HAL_DMA_IRQHandler+0x3ba>
 80035be:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80035c2:	e008      	b.n	80035d6 <HAL_DMA_IRQHandler+0x3ba>
 80035c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80035c8:	e005      	b.n	80035d6 <HAL_DMA_IRQHandler+0x3ba>
 80035ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80035ce:	e002      	b.n	80035d6 <HAL_DMA_IRQHandler+0x3ba>
 80035d0:	2320      	movs	r3, #32
 80035d2:	e000      	b.n	80035d6 <HAL_DMA_IRQHandler+0x3ba>
 80035d4:	2302      	movs	r3, #2
 80035d6:	4a2e      	ldr	r2, [pc, #184]	@ (8003690 <HAL_DMA_IRQHandler+0x474>)
 80035d8:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d034      	beq.n	8003654 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80035f2:	e02f      	b.n	8003654 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f8:	2208      	movs	r2, #8
 80035fa:	409a      	lsls	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4013      	ands	r3, r2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d028      	beq.n	8003656 <HAL_DMA_IRQHandler+0x43a>
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	f003 0308 	and.w	r3, r3, #8
 800360a:	2b00      	cmp	r3, #0
 800360c:	d023      	beq.n	8003656 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 020e 	bic.w	r2, r2, #14
 800361c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003626:	2101      	movs	r1, #1
 8003628:	fa01 f202 	lsl.w	r2, r1, r2
 800362c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003648:	2b00      	cmp	r3, #0
 800364a:	d004      	beq.n	8003656 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	4798      	blx	r3
    }
  }
  return;
 8003654:	bf00      	nop
 8003656:	bf00      	nop
}
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40020080 	.word	0x40020080
 8003664:	40020008 	.word	0x40020008
 8003668:	4002001c 	.word	0x4002001c
 800366c:	40020030 	.word	0x40020030
 8003670:	40020044 	.word	0x40020044
 8003674:	40020058 	.word	0x40020058
 8003678:	4002006c 	.word	0x4002006c
 800367c:	40020408 	.word	0x40020408
 8003680:	4002041c 	.word	0x4002041c
 8003684:	40020430 	.word	0x40020430
 8003688:	40020444 	.word	0x40020444
 800368c:	40020400 	.word	0x40020400
 8003690:	40020000 	.word	0x40020000

08003694 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
 80036a0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036aa:	2101      	movs	r1, #1
 80036ac:	fa01 f202 	lsl.w	r2, r1, r2
 80036b0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	2b10      	cmp	r3, #16
 80036c0:	d108      	bne.n	80036d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80036d2:	e007      	b.n	80036e4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	60da      	str	r2, [r3, #12]
}
 80036e4:	bf00      	nop
 80036e6:	3714      	adds	r7, #20
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bc80      	pop	{r7}
 80036ec:	4770      	bx	lr
	...

080036f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b08b      	sub	sp, #44	@ 0x2c
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036fa:	2300      	movs	r3, #0
 80036fc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80036fe:	2300      	movs	r3, #0
 8003700:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003702:	e179      	b.n	80039f8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003704:	2201      	movs	r2, #1
 8003706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003708:	fa02 f303 	lsl.w	r3, r2, r3
 800370c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	69fa      	ldr	r2, [r7, #28]
 8003714:	4013      	ands	r3, r2
 8003716:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	429a      	cmp	r2, r3
 800371e:	f040 8168 	bne.w	80039f2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	4a96      	ldr	r2, [pc, #600]	@ (8003980 <HAL_GPIO_Init+0x290>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d05e      	beq.n	80037ea <HAL_GPIO_Init+0xfa>
 800372c:	4a94      	ldr	r2, [pc, #592]	@ (8003980 <HAL_GPIO_Init+0x290>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d875      	bhi.n	800381e <HAL_GPIO_Init+0x12e>
 8003732:	4a94      	ldr	r2, [pc, #592]	@ (8003984 <HAL_GPIO_Init+0x294>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d058      	beq.n	80037ea <HAL_GPIO_Init+0xfa>
 8003738:	4a92      	ldr	r2, [pc, #584]	@ (8003984 <HAL_GPIO_Init+0x294>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d86f      	bhi.n	800381e <HAL_GPIO_Init+0x12e>
 800373e:	4a92      	ldr	r2, [pc, #584]	@ (8003988 <HAL_GPIO_Init+0x298>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d052      	beq.n	80037ea <HAL_GPIO_Init+0xfa>
 8003744:	4a90      	ldr	r2, [pc, #576]	@ (8003988 <HAL_GPIO_Init+0x298>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d869      	bhi.n	800381e <HAL_GPIO_Init+0x12e>
 800374a:	4a90      	ldr	r2, [pc, #576]	@ (800398c <HAL_GPIO_Init+0x29c>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d04c      	beq.n	80037ea <HAL_GPIO_Init+0xfa>
 8003750:	4a8e      	ldr	r2, [pc, #568]	@ (800398c <HAL_GPIO_Init+0x29c>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d863      	bhi.n	800381e <HAL_GPIO_Init+0x12e>
 8003756:	4a8e      	ldr	r2, [pc, #568]	@ (8003990 <HAL_GPIO_Init+0x2a0>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d046      	beq.n	80037ea <HAL_GPIO_Init+0xfa>
 800375c:	4a8c      	ldr	r2, [pc, #560]	@ (8003990 <HAL_GPIO_Init+0x2a0>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d85d      	bhi.n	800381e <HAL_GPIO_Init+0x12e>
 8003762:	2b12      	cmp	r3, #18
 8003764:	d82a      	bhi.n	80037bc <HAL_GPIO_Init+0xcc>
 8003766:	2b12      	cmp	r3, #18
 8003768:	d859      	bhi.n	800381e <HAL_GPIO_Init+0x12e>
 800376a:	a201      	add	r2, pc, #4	@ (adr r2, 8003770 <HAL_GPIO_Init+0x80>)
 800376c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003770:	080037eb 	.word	0x080037eb
 8003774:	080037c5 	.word	0x080037c5
 8003778:	080037d7 	.word	0x080037d7
 800377c:	08003819 	.word	0x08003819
 8003780:	0800381f 	.word	0x0800381f
 8003784:	0800381f 	.word	0x0800381f
 8003788:	0800381f 	.word	0x0800381f
 800378c:	0800381f 	.word	0x0800381f
 8003790:	0800381f 	.word	0x0800381f
 8003794:	0800381f 	.word	0x0800381f
 8003798:	0800381f 	.word	0x0800381f
 800379c:	0800381f 	.word	0x0800381f
 80037a0:	0800381f 	.word	0x0800381f
 80037a4:	0800381f 	.word	0x0800381f
 80037a8:	0800381f 	.word	0x0800381f
 80037ac:	0800381f 	.word	0x0800381f
 80037b0:	0800381f 	.word	0x0800381f
 80037b4:	080037cd 	.word	0x080037cd
 80037b8:	080037e1 	.word	0x080037e1
 80037bc:	4a75      	ldr	r2, [pc, #468]	@ (8003994 <HAL_GPIO_Init+0x2a4>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d013      	beq.n	80037ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80037c2:	e02c      	b.n	800381e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	623b      	str	r3, [r7, #32]
          break;
 80037ca:	e029      	b.n	8003820 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	3304      	adds	r3, #4
 80037d2:	623b      	str	r3, [r7, #32]
          break;
 80037d4:	e024      	b.n	8003820 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	3308      	adds	r3, #8
 80037dc:	623b      	str	r3, [r7, #32]
          break;
 80037de:	e01f      	b.n	8003820 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	330c      	adds	r3, #12
 80037e6:	623b      	str	r3, [r7, #32]
          break;
 80037e8:	e01a      	b.n	8003820 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d102      	bne.n	80037f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80037f2:	2304      	movs	r3, #4
 80037f4:	623b      	str	r3, [r7, #32]
          break;
 80037f6:	e013      	b.n	8003820 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d105      	bne.n	800380c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003800:	2308      	movs	r3, #8
 8003802:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	69fa      	ldr	r2, [r7, #28]
 8003808:	611a      	str	r2, [r3, #16]
          break;
 800380a:	e009      	b.n	8003820 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800380c:	2308      	movs	r3, #8
 800380e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	69fa      	ldr	r2, [r7, #28]
 8003814:	615a      	str	r2, [r3, #20]
          break;
 8003816:	e003      	b.n	8003820 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003818:	2300      	movs	r3, #0
 800381a:	623b      	str	r3, [r7, #32]
          break;
 800381c:	e000      	b.n	8003820 <HAL_GPIO_Init+0x130>
          break;
 800381e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	2bff      	cmp	r3, #255	@ 0xff
 8003824:	d801      	bhi.n	800382a <HAL_GPIO_Init+0x13a>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	e001      	b.n	800382e <HAL_GPIO_Init+0x13e>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	3304      	adds	r3, #4
 800382e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	2bff      	cmp	r3, #255	@ 0xff
 8003834:	d802      	bhi.n	800383c <HAL_GPIO_Init+0x14c>
 8003836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	e002      	b.n	8003842 <HAL_GPIO_Init+0x152>
 800383c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800383e:	3b08      	subs	r3, #8
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	210f      	movs	r1, #15
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	fa01 f303 	lsl.w	r3, r1, r3
 8003850:	43db      	mvns	r3, r3
 8003852:	401a      	ands	r2, r3
 8003854:	6a39      	ldr	r1, [r7, #32]
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	fa01 f303 	lsl.w	r3, r1, r3
 800385c:	431a      	orrs	r2, r3
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 80c1 	beq.w	80039f2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003870:	4b49      	ldr	r3, [pc, #292]	@ (8003998 <HAL_GPIO_Init+0x2a8>)
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	4a48      	ldr	r2, [pc, #288]	@ (8003998 <HAL_GPIO_Init+0x2a8>)
 8003876:	f043 0301 	orr.w	r3, r3, #1
 800387a:	6193      	str	r3, [r2, #24]
 800387c:	4b46      	ldr	r3, [pc, #280]	@ (8003998 <HAL_GPIO_Init+0x2a8>)
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	60bb      	str	r3, [r7, #8]
 8003886:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003888:	4a44      	ldr	r2, [pc, #272]	@ (800399c <HAL_GPIO_Init+0x2ac>)
 800388a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388c:	089b      	lsrs	r3, r3, #2
 800388e:	3302      	adds	r3, #2
 8003890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003894:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003898:	f003 0303 	and.w	r3, r3, #3
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	220f      	movs	r2, #15
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	43db      	mvns	r3, r3
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	4013      	ands	r3, r2
 80038aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a3c      	ldr	r2, [pc, #240]	@ (80039a0 <HAL_GPIO_Init+0x2b0>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d01f      	beq.n	80038f4 <HAL_GPIO_Init+0x204>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a3b      	ldr	r2, [pc, #236]	@ (80039a4 <HAL_GPIO_Init+0x2b4>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d019      	beq.n	80038f0 <HAL_GPIO_Init+0x200>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a3a      	ldr	r2, [pc, #232]	@ (80039a8 <HAL_GPIO_Init+0x2b8>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d013      	beq.n	80038ec <HAL_GPIO_Init+0x1fc>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a39      	ldr	r2, [pc, #228]	@ (80039ac <HAL_GPIO_Init+0x2bc>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d00d      	beq.n	80038e8 <HAL_GPIO_Init+0x1f8>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a38      	ldr	r2, [pc, #224]	@ (80039b0 <HAL_GPIO_Init+0x2c0>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d007      	beq.n	80038e4 <HAL_GPIO_Init+0x1f4>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a37      	ldr	r2, [pc, #220]	@ (80039b4 <HAL_GPIO_Init+0x2c4>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d101      	bne.n	80038e0 <HAL_GPIO_Init+0x1f0>
 80038dc:	2305      	movs	r3, #5
 80038de:	e00a      	b.n	80038f6 <HAL_GPIO_Init+0x206>
 80038e0:	2306      	movs	r3, #6
 80038e2:	e008      	b.n	80038f6 <HAL_GPIO_Init+0x206>
 80038e4:	2304      	movs	r3, #4
 80038e6:	e006      	b.n	80038f6 <HAL_GPIO_Init+0x206>
 80038e8:	2303      	movs	r3, #3
 80038ea:	e004      	b.n	80038f6 <HAL_GPIO_Init+0x206>
 80038ec:	2302      	movs	r3, #2
 80038ee:	e002      	b.n	80038f6 <HAL_GPIO_Init+0x206>
 80038f0:	2301      	movs	r3, #1
 80038f2:	e000      	b.n	80038f6 <HAL_GPIO_Init+0x206>
 80038f4:	2300      	movs	r3, #0
 80038f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038f8:	f002 0203 	and.w	r2, r2, #3
 80038fc:	0092      	lsls	r2, r2, #2
 80038fe:	4093      	lsls	r3, r2
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	4313      	orrs	r3, r2
 8003904:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003906:	4925      	ldr	r1, [pc, #148]	@ (800399c <HAL_GPIO_Init+0x2ac>)
 8003908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390a:	089b      	lsrs	r3, r3, #2
 800390c:	3302      	adds	r3, #2
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d006      	beq.n	800392e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003920:	4b25      	ldr	r3, [pc, #148]	@ (80039b8 <HAL_GPIO_Init+0x2c8>)
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	4924      	ldr	r1, [pc, #144]	@ (80039b8 <HAL_GPIO_Init+0x2c8>)
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	4313      	orrs	r3, r2
 800392a:	608b      	str	r3, [r1, #8]
 800392c:	e006      	b.n	800393c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800392e:	4b22      	ldr	r3, [pc, #136]	@ (80039b8 <HAL_GPIO_Init+0x2c8>)
 8003930:	689a      	ldr	r2, [r3, #8]
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	43db      	mvns	r3, r3
 8003936:	4920      	ldr	r1, [pc, #128]	@ (80039b8 <HAL_GPIO_Init+0x2c8>)
 8003938:	4013      	ands	r3, r2
 800393a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d006      	beq.n	8003956 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003948:	4b1b      	ldr	r3, [pc, #108]	@ (80039b8 <HAL_GPIO_Init+0x2c8>)
 800394a:	68da      	ldr	r2, [r3, #12]
 800394c:	491a      	ldr	r1, [pc, #104]	@ (80039b8 <HAL_GPIO_Init+0x2c8>)
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	4313      	orrs	r3, r2
 8003952:	60cb      	str	r3, [r1, #12]
 8003954:	e006      	b.n	8003964 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003956:	4b18      	ldr	r3, [pc, #96]	@ (80039b8 <HAL_GPIO_Init+0x2c8>)
 8003958:	68da      	ldr	r2, [r3, #12]
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	43db      	mvns	r3, r3
 800395e:	4916      	ldr	r1, [pc, #88]	@ (80039b8 <HAL_GPIO_Init+0x2c8>)
 8003960:	4013      	ands	r3, r2
 8003962:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d025      	beq.n	80039bc <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003970:	4b11      	ldr	r3, [pc, #68]	@ (80039b8 <HAL_GPIO_Init+0x2c8>)
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	4910      	ldr	r1, [pc, #64]	@ (80039b8 <HAL_GPIO_Init+0x2c8>)
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	4313      	orrs	r3, r2
 800397a:	604b      	str	r3, [r1, #4]
 800397c:	e025      	b.n	80039ca <HAL_GPIO_Init+0x2da>
 800397e:	bf00      	nop
 8003980:	10320000 	.word	0x10320000
 8003984:	10310000 	.word	0x10310000
 8003988:	10220000 	.word	0x10220000
 800398c:	10210000 	.word	0x10210000
 8003990:	10120000 	.word	0x10120000
 8003994:	10110000 	.word	0x10110000
 8003998:	40021000 	.word	0x40021000
 800399c:	40010000 	.word	0x40010000
 80039a0:	40010800 	.word	0x40010800
 80039a4:	40010c00 	.word	0x40010c00
 80039a8:	40011000 	.word	0x40011000
 80039ac:	40011400 	.word	0x40011400
 80039b0:	40011800 	.word	0x40011800
 80039b4:	40011c00 	.word	0x40011c00
 80039b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80039bc:	4b15      	ldr	r3, [pc, #84]	@ (8003a14 <HAL_GPIO_Init+0x324>)
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	43db      	mvns	r3, r3
 80039c4:	4913      	ldr	r1, [pc, #76]	@ (8003a14 <HAL_GPIO_Init+0x324>)
 80039c6:	4013      	ands	r3, r2
 80039c8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d006      	beq.n	80039e4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80039d6:	4b0f      	ldr	r3, [pc, #60]	@ (8003a14 <HAL_GPIO_Init+0x324>)
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	490e      	ldr	r1, [pc, #56]	@ (8003a14 <HAL_GPIO_Init+0x324>)
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	4313      	orrs	r3, r2
 80039e0:	600b      	str	r3, [r1, #0]
 80039e2:	e006      	b.n	80039f2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80039e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003a14 <HAL_GPIO_Init+0x324>)
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	43db      	mvns	r3, r3
 80039ec:	4909      	ldr	r1, [pc, #36]	@ (8003a14 <HAL_GPIO_Init+0x324>)
 80039ee:	4013      	ands	r3, r2
 80039f0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80039f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f4:	3301      	adds	r3, #1
 80039f6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f47f ae7e 	bne.w	8003704 <HAL_GPIO_Init+0x14>
  }
}
 8003a08:	bf00      	nop
 8003a0a:	bf00      	nop
 8003a0c:	372c      	adds	r7, #44	@ 0x2c
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bc80      	pop	{r7}
 8003a12:	4770      	bx	lr
 8003a14:	40010400 	.word	0x40010400

08003a18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	460b      	mov	r3, r1
 8003a22:	807b      	strh	r3, [r7, #2]
 8003a24:	4613      	mov	r3, r2
 8003a26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a28:	787b      	ldrb	r3, [r7, #1]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a2e:	887a      	ldrh	r2, [r7, #2]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003a34:	e003      	b.n	8003a3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a36:	887b      	ldrh	r3, [r7, #2]
 8003a38:	041a      	lsls	r2, r3, #16
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	611a      	str	r2, [r3, #16]
}
 8003a3e:	bf00      	nop
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bc80      	pop	{r7}
 8003a46:	4770      	bx	lr

08003a48 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	460b      	mov	r3, r1
 8003a52:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a5a:	887a      	ldrh	r2, [r7, #2]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	041a      	lsls	r2, r3, #16
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	43d9      	mvns	r1, r3
 8003a66:	887b      	ldrh	r3, [r7, #2]
 8003a68:	400b      	ands	r3, r1
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	611a      	str	r2, [r3, #16]
}
 8003a70:	bf00      	nop
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bc80      	pop	{r7}
 8003a78:	4770      	bx	lr
	...

08003a7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e12b      	b.n	8003ce6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d106      	bne.n	8003aa8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7fe f870 	bl	8001b88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2224      	movs	r2, #36	@ 0x24
 8003aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 0201 	bic.w	r2, r2, #1
 8003abe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ace:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ade:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ae0:	f001 f960 	bl	8004da4 <HAL_RCC_GetPCLK1Freq>
 8003ae4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	4a81      	ldr	r2, [pc, #516]	@ (8003cf0 <HAL_I2C_Init+0x274>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d807      	bhi.n	8003b00 <HAL_I2C_Init+0x84>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4a80      	ldr	r2, [pc, #512]	@ (8003cf4 <HAL_I2C_Init+0x278>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	bf94      	ite	ls
 8003af8:	2301      	movls	r3, #1
 8003afa:	2300      	movhi	r3, #0
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	e006      	b.n	8003b0e <HAL_I2C_Init+0x92>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4a7d      	ldr	r2, [pc, #500]	@ (8003cf8 <HAL_I2C_Init+0x27c>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	bf94      	ite	ls
 8003b08:	2301      	movls	r3, #1
 8003b0a:	2300      	movhi	r3, #0
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e0e7      	b.n	8003ce6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	4a78      	ldr	r2, [pc, #480]	@ (8003cfc <HAL_I2C_Init+0x280>)
 8003b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1e:	0c9b      	lsrs	r3, r3, #18
 8003b20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	4a6a      	ldr	r2, [pc, #424]	@ (8003cf0 <HAL_I2C_Init+0x274>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d802      	bhi.n	8003b50 <HAL_I2C_Init+0xd4>
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	e009      	b.n	8003b64 <HAL_I2C_Init+0xe8>
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003b56:	fb02 f303 	mul.w	r3, r2, r3
 8003b5a:	4a69      	ldr	r2, [pc, #420]	@ (8003d00 <HAL_I2C_Init+0x284>)
 8003b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b60:	099b      	lsrs	r3, r3, #6
 8003b62:	3301      	adds	r3, #1
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6812      	ldr	r2, [r2, #0]
 8003b68:	430b      	orrs	r3, r1
 8003b6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003b76:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	495c      	ldr	r1, [pc, #368]	@ (8003cf0 <HAL_I2C_Init+0x274>)
 8003b80:	428b      	cmp	r3, r1
 8003b82:	d819      	bhi.n	8003bb8 <HAL_I2C_Init+0x13c>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	1e59      	subs	r1, r3, #1
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b92:	1c59      	adds	r1, r3, #1
 8003b94:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003b98:	400b      	ands	r3, r1
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00a      	beq.n	8003bb4 <HAL_I2C_Init+0x138>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	1e59      	subs	r1, r3, #1
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bac:	3301      	adds	r3, #1
 8003bae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bb2:	e051      	b.n	8003c58 <HAL_I2C_Init+0x1dc>
 8003bb4:	2304      	movs	r3, #4
 8003bb6:	e04f      	b.n	8003c58 <HAL_I2C_Init+0x1dc>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d111      	bne.n	8003be4 <HAL_I2C_Init+0x168>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	1e58      	subs	r0, r3, #1
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6859      	ldr	r1, [r3, #4]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	005b      	lsls	r3, r3, #1
 8003bcc:	440b      	add	r3, r1
 8003bce:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	bf0c      	ite	eq
 8003bdc:	2301      	moveq	r3, #1
 8003bde:	2300      	movne	r3, #0
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	e012      	b.n	8003c0a <HAL_I2C_Init+0x18e>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	1e58      	subs	r0, r3, #1
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6859      	ldr	r1, [r3, #4]
 8003bec:	460b      	mov	r3, r1
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	440b      	add	r3, r1
 8003bf2:	0099      	lsls	r1, r3, #2
 8003bf4:	440b      	add	r3, r1
 8003bf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	bf0c      	ite	eq
 8003c04:	2301      	moveq	r3, #1
 8003c06:	2300      	movne	r3, #0
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <HAL_I2C_Init+0x196>
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e022      	b.n	8003c58 <HAL_I2C_Init+0x1dc>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10e      	bne.n	8003c38 <HAL_I2C_Init+0x1bc>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	1e58      	subs	r0, r3, #1
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6859      	ldr	r1, [r3, #4]
 8003c22:	460b      	mov	r3, r1
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	440b      	add	r3, r1
 8003c28:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c36:	e00f      	b.n	8003c58 <HAL_I2C_Init+0x1dc>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	1e58      	subs	r0, r3, #1
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6859      	ldr	r1, [r3, #4]
 8003c40:	460b      	mov	r3, r1
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	440b      	add	r3, r1
 8003c46:	0099      	lsls	r1, r3, #2
 8003c48:	440b      	add	r3, r1
 8003c4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c4e:	3301      	adds	r3, #1
 8003c50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c54:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c58:	6879      	ldr	r1, [r7, #4]
 8003c5a:	6809      	ldr	r1, [r1, #0]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	69da      	ldr	r2, [r3, #28]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	431a      	orrs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003c86:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	6911      	ldr	r1, [r2, #16]
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	68d2      	ldr	r2, [r2, #12]
 8003c92:	4311      	orrs	r1, r2
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6812      	ldr	r2, [r2, #0]
 8003c98:	430b      	orrs	r3, r1
 8003c9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	695a      	ldr	r2, [r3, #20]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0201 	orr.w	r2, r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	000186a0 	.word	0x000186a0
 8003cf4:	001e847f 	.word	0x001e847f
 8003cf8:	003d08ff 	.word	0x003d08ff
 8003cfc:	431bde83 	.word	0x431bde83
 8003d00:	10624dd3 	.word	0x10624dd3

08003d04 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b088      	sub	sp, #32
 8003d08:	af02      	add	r7, sp, #8
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	607a      	str	r2, [r7, #4]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	460b      	mov	r3, r1
 8003d12:	817b      	strh	r3, [r7, #10]
 8003d14:	4613      	mov	r3, r2
 8003d16:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d18:	f7fe fa7c 	bl	8002214 <HAL_GetTick>
 8003d1c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b20      	cmp	r3, #32
 8003d28:	f040 80e0 	bne.w	8003eec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	2319      	movs	r3, #25
 8003d32:	2201      	movs	r2, #1
 8003d34:	4970      	ldr	r1, [pc, #448]	@ (8003ef8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f000 fa92 	bl	8004260 <I2C_WaitOnFlagUntilTimeout>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003d42:	2302      	movs	r3, #2
 8003d44:	e0d3      	b.n	8003eee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d101      	bne.n	8003d54 <HAL_I2C_Master_Transmit+0x50>
 8003d50:	2302      	movs	r3, #2
 8003d52:	e0cc      	b.n	8003eee <HAL_I2C_Master_Transmit+0x1ea>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d007      	beq.n	8003d7a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f042 0201 	orr.w	r2, r2, #1
 8003d78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d88:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2221      	movs	r2, #33	@ 0x21
 8003d8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2210      	movs	r2, #16
 8003d96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	893a      	ldrh	r2, [r7, #8]
 8003daa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	4a50      	ldr	r2, [pc, #320]	@ (8003efc <HAL_I2C_Master_Transmit+0x1f8>)
 8003dba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003dbc:	8979      	ldrh	r1, [r7, #10]
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	6a3a      	ldr	r2, [r7, #32]
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f000 f9ca 	bl	800415c <I2C_MasterRequestWrite>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e08d      	b.n	8003eee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	613b      	str	r3, [r7, #16]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	613b      	str	r3, [r7, #16]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	613b      	str	r3, [r7, #16]
 8003de6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003de8:	e066      	b.n	8003eb8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	6a39      	ldr	r1, [r7, #32]
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f000 fb50 	bl	8004494 <I2C_WaitOnTXEFlagUntilTimeout>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00d      	beq.n	8003e16 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfe:	2b04      	cmp	r3, #4
 8003e00:	d107      	bne.n	8003e12 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e06b      	b.n	8003eee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1a:	781a      	ldrb	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e26:	1c5a      	adds	r2, r3, #1
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	3b01      	subs	r3, #1
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	f003 0304 	and.w	r3, r3, #4
 8003e50:	2b04      	cmp	r3, #4
 8003e52:	d11b      	bne.n	8003e8c <HAL_I2C_Master_Transmit+0x188>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d017      	beq.n	8003e8c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e60:	781a      	ldrb	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6c:	1c5a      	adds	r2, r3, #1
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	6a39      	ldr	r1, [r7, #32]
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 fb47 	bl	8004524 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00d      	beq.n	8003eb8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea0:	2b04      	cmp	r3, #4
 8003ea2:	d107      	bne.n	8003eb4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eb2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e01a      	b.n	8003eee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d194      	bne.n	8003dea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ece:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	e000      	b.n	8003eee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003eec:	2302      	movs	r3, #2
  }
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3718      	adds	r7, #24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	00100002 	.word	0x00100002
 8003efc:	ffff0000 	.word	0xffff0000

08003f00 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b08a      	sub	sp, #40	@ 0x28
 8003f04:	af02      	add	r7, sp, #8
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	607a      	str	r2, [r7, #4]
 8003f0a:	603b      	str	r3, [r7, #0]
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003f10:	f7fe f980 	bl	8002214 <HAL_GetTick>
 8003f14:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003f16:	2300      	movs	r3, #0
 8003f18:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b20      	cmp	r3, #32
 8003f24:	f040 8111 	bne.w	800414a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	9300      	str	r3, [sp, #0]
 8003f2c:	2319      	movs	r3, #25
 8003f2e:	2201      	movs	r2, #1
 8003f30:	4988      	ldr	r1, [pc, #544]	@ (8004154 <HAL_I2C_IsDeviceReady+0x254>)
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f000 f994 	bl	8004260 <I2C_WaitOnFlagUntilTimeout>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003f3e:	2302      	movs	r3, #2
 8003f40:	e104      	b.n	800414c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d101      	bne.n	8003f50 <HAL_I2C_IsDeviceReady+0x50>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e0fd      	b.n	800414c <HAL_I2C_IsDeviceReady+0x24c>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d007      	beq.n	8003f76 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f042 0201 	orr.w	r2, r2, #1
 8003f74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2224      	movs	r2, #36	@ 0x24
 8003f8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	4a70      	ldr	r2, [pc, #448]	@ (8004158 <HAL_I2C_IsDeviceReady+0x258>)
 8003f98:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fa8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	9300      	str	r3, [sp, #0]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f000 f952 	bl	8004260 <I2C_WaitOnFlagUntilTimeout>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00d      	beq.n	8003fde <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fd0:	d103      	bne.n	8003fda <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fd8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e0b6      	b.n	800414c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fde:	897b      	ldrh	r3, [r7, #10]
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003fec:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003fee:	f7fe f911 	bl	8002214 <HAL_GetTick>
 8003ff2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	bf0c      	ite	eq
 8004002:	2301      	moveq	r3, #1
 8004004:	2300      	movne	r3, #0
 8004006:	b2db      	uxtb	r3, r3
 8004008:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004014:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004018:	bf0c      	ite	eq
 800401a:	2301      	moveq	r3, #1
 800401c:	2300      	movne	r3, #0
 800401e:	b2db      	uxtb	r3, r3
 8004020:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004022:	e025      	b.n	8004070 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004024:	f7fe f8f6 	bl	8002214 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	429a      	cmp	r2, r3
 8004032:	d302      	bcc.n	800403a <HAL_I2C_IsDeviceReady+0x13a>
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d103      	bne.n	8004042 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	22a0      	movs	r2, #160	@ 0xa0
 800403e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	f003 0302 	and.w	r3, r3, #2
 800404c:	2b02      	cmp	r3, #2
 800404e:	bf0c      	ite	eq
 8004050:	2301      	moveq	r3, #1
 8004052:	2300      	movne	r3, #0
 8004054:	b2db      	uxtb	r3, r3
 8004056:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004062:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004066:	bf0c      	ite	eq
 8004068:	2301      	moveq	r3, #1
 800406a:	2300      	movne	r3, #0
 800406c:	b2db      	uxtb	r3, r3
 800406e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2ba0      	cmp	r3, #160	@ 0xa0
 800407a:	d005      	beq.n	8004088 <HAL_I2C_IsDeviceReady+0x188>
 800407c:	7dfb      	ldrb	r3, [r7, #23]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d102      	bne.n	8004088 <HAL_I2C_IsDeviceReady+0x188>
 8004082:	7dbb      	ldrb	r3, [r7, #22]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d0cd      	beq.n	8004024 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2220      	movs	r2, #32
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b02      	cmp	r3, #2
 800409c:	d129      	bne.n	80040f2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040ac:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ae:	2300      	movs	r3, #0
 80040b0:	613b      	str	r3, [r7, #16]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	613b      	str	r3, [r7, #16]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	613b      	str	r3, [r7, #16]
 80040c2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	2319      	movs	r3, #25
 80040ca:	2201      	movs	r2, #1
 80040cc:	4921      	ldr	r1, [pc, #132]	@ (8004154 <HAL_I2C_IsDeviceReady+0x254>)
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f000 f8c6 	bl	8004260 <I2C_WaitOnFlagUntilTimeout>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e036      	b.n	800414c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2220      	movs	r2, #32
 80040e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80040ee:	2300      	movs	r3, #0
 80040f0:	e02c      	b.n	800414c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004100:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800410a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	2319      	movs	r3, #25
 8004112:	2201      	movs	r2, #1
 8004114:	490f      	ldr	r1, [pc, #60]	@ (8004154 <HAL_I2C_IsDeviceReady+0x254>)
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f000 f8a2 	bl	8004260 <I2C_WaitOnFlagUntilTimeout>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e012      	b.n	800414c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	3301      	adds	r3, #1
 800412a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	429a      	cmp	r2, r3
 8004132:	f4ff af32 	bcc.w	8003f9a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2220      	movs	r2, #32
 800413a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e000      	b.n	800414c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800414a:	2302      	movs	r3, #2
  }
}
 800414c:	4618      	mov	r0, r3
 800414e:	3720      	adds	r7, #32
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	00100002 	.word	0x00100002
 8004158:	ffff0000 	.word	0xffff0000

0800415c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b088      	sub	sp, #32
 8004160:	af02      	add	r7, sp, #8
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	607a      	str	r2, [r7, #4]
 8004166:	603b      	str	r3, [r7, #0]
 8004168:	460b      	mov	r3, r1
 800416a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004170:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	2b08      	cmp	r3, #8
 8004176:	d006      	beq.n	8004186 <I2C_MasterRequestWrite+0x2a>
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d003      	beq.n	8004186 <I2C_MasterRequestWrite+0x2a>
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004184:	d108      	bne.n	8004198 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004194:	601a      	str	r2, [r3, #0]
 8004196:	e00b      	b.n	80041b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800419c:	2b12      	cmp	r3, #18
 800419e:	d107      	bne.n	80041b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	9300      	str	r3, [sp, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f000 f84f 	bl	8004260 <I2C_WaitOnFlagUntilTimeout>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00d      	beq.n	80041e4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041d6:	d103      	bne.n	80041e0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041de:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e035      	b.n	8004250 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041ec:	d108      	bne.n	8004200 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041ee:	897b      	ldrh	r3, [r7, #10]
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	461a      	mov	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80041fc:	611a      	str	r2, [r3, #16]
 80041fe:	e01b      	b.n	8004238 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004200:	897b      	ldrh	r3, [r7, #10]
 8004202:	11db      	asrs	r3, r3, #7
 8004204:	b2db      	uxtb	r3, r3
 8004206:	f003 0306 	and.w	r3, r3, #6
 800420a:	b2db      	uxtb	r3, r3
 800420c:	f063 030f 	orn	r3, r3, #15
 8004210:	b2da      	uxtb	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	490e      	ldr	r1, [pc, #56]	@ (8004258 <I2C_MasterRequestWrite+0xfc>)
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f000 f898 	bl	8004354 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e010      	b.n	8004250 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800422e:	897b      	ldrh	r3, [r7, #10]
 8004230:	b2da      	uxtb	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	4907      	ldr	r1, [pc, #28]	@ (800425c <I2C_MasterRequestWrite+0x100>)
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f000 f888 	bl	8004354 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e000      	b.n	8004250 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3718      	adds	r7, #24
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	00010008 	.word	0x00010008
 800425c:	00010002 	.word	0x00010002

08004260 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	603b      	str	r3, [r7, #0]
 800426c:	4613      	mov	r3, r2
 800426e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004270:	e048      	b.n	8004304 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004278:	d044      	beq.n	8004304 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800427a:	f7fd ffcb 	bl	8002214 <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	683a      	ldr	r2, [r7, #0]
 8004286:	429a      	cmp	r2, r3
 8004288:	d302      	bcc.n	8004290 <I2C_WaitOnFlagUntilTimeout+0x30>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d139      	bne.n	8004304 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	0c1b      	lsrs	r3, r3, #16
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b01      	cmp	r3, #1
 8004298:	d10d      	bne.n	80042b6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	43da      	mvns	r2, r3
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	4013      	ands	r3, r2
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	bf0c      	ite	eq
 80042ac:	2301      	moveq	r3, #1
 80042ae:	2300      	movne	r3, #0
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	461a      	mov	r2, r3
 80042b4:	e00c      	b.n	80042d0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	43da      	mvns	r2, r3
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	4013      	ands	r3, r2
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	bf0c      	ite	eq
 80042c8:	2301      	moveq	r3, #1
 80042ca:	2300      	movne	r3, #0
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	461a      	mov	r2, r3
 80042d0:	79fb      	ldrb	r3, [r7, #7]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d116      	bne.n	8004304 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2220      	movs	r2, #32
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f0:	f043 0220 	orr.w	r2, r3, #32
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e023      	b.n	800434c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	0c1b      	lsrs	r3, r3, #16
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b01      	cmp	r3, #1
 800430c:	d10d      	bne.n	800432a <I2C_WaitOnFlagUntilTimeout+0xca>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	43da      	mvns	r2, r3
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	4013      	ands	r3, r2
 800431a:	b29b      	uxth	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	bf0c      	ite	eq
 8004320:	2301      	moveq	r3, #1
 8004322:	2300      	movne	r3, #0
 8004324:	b2db      	uxtb	r3, r3
 8004326:	461a      	mov	r2, r3
 8004328:	e00c      	b.n	8004344 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	43da      	mvns	r2, r3
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	4013      	ands	r3, r2
 8004336:	b29b      	uxth	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	bf0c      	ite	eq
 800433c:	2301      	moveq	r3, #1
 800433e:	2300      	movne	r3, #0
 8004340:	b2db      	uxtb	r3, r3
 8004342:	461a      	mov	r2, r3
 8004344:	79fb      	ldrb	r3, [r7, #7]
 8004346:	429a      	cmp	r2, r3
 8004348:	d093      	beq.n	8004272 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
 8004360:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004362:	e071      	b.n	8004448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800436e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004372:	d123      	bne.n	80043bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004382:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800438c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2220      	movs	r2, #32
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a8:	f043 0204 	orr.w	r2, r3, #4
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e067      	b.n	800448c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c2:	d041      	beq.n	8004448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043c4:	f7fd ff26 	bl	8002214 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d302      	bcc.n	80043da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d136      	bne.n	8004448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	0c1b      	lsrs	r3, r3, #16
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d10c      	bne.n	80043fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	43da      	mvns	r2, r3
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	4013      	ands	r3, r2
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	bf14      	ite	ne
 80043f6:	2301      	movne	r3, #1
 80043f8:	2300      	moveq	r3, #0
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	e00b      	b.n	8004416 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	43da      	mvns	r2, r3
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	4013      	ands	r3, r2
 800440a:	b29b      	uxth	r3, r3
 800440c:	2b00      	cmp	r3, #0
 800440e:	bf14      	ite	ne
 8004410:	2301      	movne	r3, #1
 8004412:	2300      	moveq	r3, #0
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d016      	beq.n	8004448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2220      	movs	r2, #32
 8004424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004434:	f043 0220 	orr.w	r2, r3, #32
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e021      	b.n	800448c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	0c1b      	lsrs	r3, r3, #16
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b01      	cmp	r3, #1
 8004450:	d10c      	bne.n	800446c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	43da      	mvns	r2, r3
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	4013      	ands	r3, r2
 800445e:	b29b      	uxth	r3, r3
 8004460:	2b00      	cmp	r3, #0
 8004462:	bf14      	ite	ne
 8004464:	2301      	movne	r3, #1
 8004466:	2300      	moveq	r3, #0
 8004468:	b2db      	uxtb	r3, r3
 800446a:	e00b      	b.n	8004484 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	43da      	mvns	r2, r3
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	4013      	ands	r3, r2
 8004478:	b29b      	uxth	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	bf14      	ite	ne
 800447e:	2301      	movne	r3, #1
 8004480:	2300      	moveq	r3, #0
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2b00      	cmp	r3, #0
 8004486:	f47f af6d 	bne.w	8004364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044a0:	e034      	b.n	800450c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f000 f886 	bl	80045b4 <I2C_IsAcknowledgeFailed>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d001      	beq.n	80044b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e034      	b.n	800451c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b8:	d028      	beq.n	800450c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ba:	f7fd feab 	bl	8002214 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d302      	bcc.n	80044d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d11d      	bne.n	800450c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044da:	2b80      	cmp	r3, #128	@ 0x80
 80044dc:	d016      	beq.n	800450c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2220      	movs	r2, #32
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f8:	f043 0220 	orr.w	r2, r3, #32
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e007      	b.n	800451c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004516:	2b80      	cmp	r3, #128	@ 0x80
 8004518:	d1c3      	bne.n	80044a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3710      	adds	r7, #16
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004530:	e034      	b.n	800459c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f000 f83e 	bl	80045b4 <I2C_IsAcknowledgeFailed>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e034      	b.n	80045ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004548:	d028      	beq.n	800459c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800454a:	f7fd fe63 	bl	8002214 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	429a      	cmp	r2, r3
 8004558:	d302      	bcc.n	8004560 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d11d      	bne.n	800459c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	f003 0304 	and.w	r3, r3, #4
 800456a:	2b04      	cmp	r3, #4
 800456c:	d016      	beq.n	800459c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2220      	movs	r2, #32
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004588:	f043 0220 	orr.w	r2, r3, #32
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e007      	b.n	80045ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	f003 0304 	and.w	r3, r3, #4
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d1c3      	bne.n	8004532 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045ca:	d11b      	bne.n	8004604 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80045d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2220      	movs	r2, #32
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f0:	f043 0204 	orr.w	r2, r3, #4
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e000      	b.n	8004606 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	bc80      	pop	{r7}
 800460e:	4770      	bx	lr

08004610 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e272      	b.n	8004b08 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b00      	cmp	r3, #0
 800462c:	f000 8087 	beq.w	800473e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004630:	4b92      	ldr	r3, [pc, #584]	@ (800487c <HAL_RCC_OscConfig+0x26c>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f003 030c 	and.w	r3, r3, #12
 8004638:	2b04      	cmp	r3, #4
 800463a:	d00c      	beq.n	8004656 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800463c:	4b8f      	ldr	r3, [pc, #572]	@ (800487c <HAL_RCC_OscConfig+0x26c>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f003 030c 	and.w	r3, r3, #12
 8004644:	2b08      	cmp	r3, #8
 8004646:	d112      	bne.n	800466e <HAL_RCC_OscConfig+0x5e>
 8004648:	4b8c      	ldr	r3, [pc, #560]	@ (800487c <HAL_RCC_OscConfig+0x26c>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004654:	d10b      	bne.n	800466e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004656:	4b89      	ldr	r3, [pc, #548]	@ (800487c <HAL_RCC_OscConfig+0x26c>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d06c      	beq.n	800473c <HAL_RCC_OscConfig+0x12c>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d168      	bne.n	800473c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e24c      	b.n	8004b08 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004676:	d106      	bne.n	8004686 <HAL_RCC_OscConfig+0x76>
 8004678:	4b80      	ldr	r3, [pc, #512]	@ (800487c <HAL_RCC_OscConfig+0x26c>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a7f      	ldr	r2, [pc, #508]	@ (800487c <HAL_RCC_OscConfig+0x26c>)
 800467e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004682:	6013      	str	r3, [r2, #0]
 8004684:	e02e      	b.n	80046e4 <HAL_RCC_OscConfig+0xd4>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10c      	bne.n	80046a8 <HAL_RCC_OscConfig+0x98>
 800468e:	4b7b      	ldr	r3, [pc, #492]	@ (800487c <HAL_RCC_OscConfig+0x26c>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a7a      	ldr	r2, [pc, #488]	@ (800487c <HAL_RCC_OscConfig+0x26c>)
 8004694:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004698:	6013      	str	r3, [r2, #0]
 800469a:	4b78      	ldr	r3, [pc, #480]	@ (800487c <HAL_RCC_OscConfig+0x26c>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a77      	ldr	r2, [pc, #476]	@ (800487c <HAL_RCC_OscConfig+0x26c>)
 80046a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046a4:	6013      	str	r3, [r2, #0]
 80046a6:	e01d      	b.n	80046e4 <HAL_RCC_OscConfig+0xd4>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046b0:	d10c      	bne.n	80046cc <HAL_RCC_OscConfig+0xbc>
 80046b2:	4b72      	ldr	r3, [pc, #456]	@ (800487c <HAL_RCC_OscConfig+0x26c>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a71      	ldr	r2, [pc, #452]	@ (800487c <HAL_RCC_OscConfig+0x26c>)
 80046b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046bc:	6013      	str	r3, [r2, #0]
 80046be:	4b6f      	ldr	r3, [pc, #444]	@ (800487c <HAL_RCC_OscConfig+0x26c>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a6e      	ldr	r2, [pc, #440]	@ (800487c <HAL_RCC_OscConfig+0x26c>)
 80046c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046c8:	6013      	str	r3, [r2, #0]
 80046ca:	e00b      	b.n	80046e4 <HAL_RCC_OscConfig+0xd4>
 80046cc:	4b6b      	ldr	r3, [pc, #428]	@ (800487c <HAL_RCC_OscConfig+0x26c>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a6a      	ldr	r2, [pc, #424]	@ (800487c <HAL_RCC_OscConfig+0x26c>)
 80046d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046d6:	6013      	str	r3, [r2, #0]
 80046d8:	4b68      	ldr	r3, [pc, #416]	@ (800487c <HAL_RCC_OscConfig+0x26c>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a67      	ldr	r2, [pc, #412]	@ (800487c <HAL_RCC_OscConfig+0x26c>)
 80046de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d013      	beq.n	8004714 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ec:	f7fd fd92 	bl	8002214 <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046f2:	e008      	b.n	8004706 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046f4:	f7fd fd8e 	bl	8002214 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b64      	cmp	r3, #100	@ 0x64
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e200      	b.n	8004b08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004706:	4b5d      	ldr	r3, [pc, #372]	@ (800487c <HAL_RCC_OscConfig+0x26c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d0f0      	beq.n	80046f4 <HAL_RCC_OscConfig+0xe4>
 8004712:	e014      	b.n	800473e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004714:	f7fd fd7e 	bl	8002214 <HAL_GetTick>
 8004718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800471a:	e008      	b.n	800472e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800471c:	f7fd fd7a 	bl	8002214 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b64      	cmp	r3, #100	@ 0x64
 8004728:	d901      	bls.n	800472e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e1ec      	b.n	8004b08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800472e:	4b53      	ldr	r3, [pc, #332]	@ (800487c <HAL_RCC_OscConfig+0x26c>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1f0      	bne.n	800471c <HAL_RCC_OscConfig+0x10c>
 800473a:	e000      	b.n	800473e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800473c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d063      	beq.n	8004812 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800474a:	4b4c      	ldr	r3, [pc, #304]	@ (800487c <HAL_RCC_OscConfig+0x26c>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f003 030c 	and.w	r3, r3, #12
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00b      	beq.n	800476e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004756:	4b49      	ldr	r3, [pc, #292]	@ (800487c <HAL_RCC_OscConfig+0x26c>)
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f003 030c 	and.w	r3, r3, #12
 800475e:	2b08      	cmp	r3, #8
 8004760:	d11c      	bne.n	800479c <HAL_RCC_OscConfig+0x18c>
 8004762:	4b46      	ldr	r3, [pc, #280]	@ (800487c <HAL_RCC_OscConfig+0x26c>)
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d116      	bne.n	800479c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800476e:	4b43      	ldr	r3, [pc, #268]	@ (800487c <HAL_RCC_OscConfig+0x26c>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d005      	beq.n	8004786 <HAL_RCC_OscConfig+0x176>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d001      	beq.n	8004786 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e1c0      	b.n	8004b08 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004786:	4b3d      	ldr	r3, [pc, #244]	@ (800487c <HAL_RCC_OscConfig+0x26c>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	4939      	ldr	r1, [pc, #228]	@ (800487c <HAL_RCC_OscConfig+0x26c>)
 8004796:	4313      	orrs	r3, r2
 8004798:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800479a:	e03a      	b.n	8004812 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d020      	beq.n	80047e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047a4:	4b36      	ldr	r3, [pc, #216]	@ (8004880 <HAL_RCC_OscConfig+0x270>)
 80047a6:	2201      	movs	r2, #1
 80047a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047aa:	f7fd fd33 	bl	8002214 <HAL_GetTick>
 80047ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047b0:	e008      	b.n	80047c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047b2:	f7fd fd2f 	bl	8002214 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d901      	bls.n	80047c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e1a1      	b.n	8004b08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047c4:	4b2d      	ldr	r3, [pc, #180]	@ (800487c <HAL_RCC_OscConfig+0x26c>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d0f0      	beq.n	80047b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047d0:	4b2a      	ldr	r3, [pc, #168]	@ (800487c <HAL_RCC_OscConfig+0x26c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	00db      	lsls	r3, r3, #3
 80047de:	4927      	ldr	r1, [pc, #156]	@ (800487c <HAL_RCC_OscConfig+0x26c>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	600b      	str	r3, [r1, #0]
 80047e4:	e015      	b.n	8004812 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047e6:	4b26      	ldr	r3, [pc, #152]	@ (8004880 <HAL_RCC_OscConfig+0x270>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ec:	f7fd fd12 	bl	8002214 <HAL_GetTick>
 80047f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047f2:	e008      	b.n	8004806 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047f4:	f7fd fd0e 	bl	8002214 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d901      	bls.n	8004806 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e180      	b.n	8004b08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004806:	4b1d      	ldr	r3, [pc, #116]	@ (800487c <HAL_RCC_OscConfig+0x26c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1f0      	bne.n	80047f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0308 	and.w	r3, r3, #8
 800481a:	2b00      	cmp	r3, #0
 800481c:	d03a      	beq.n	8004894 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d019      	beq.n	800485a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004826:	4b17      	ldr	r3, [pc, #92]	@ (8004884 <HAL_RCC_OscConfig+0x274>)
 8004828:	2201      	movs	r2, #1
 800482a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800482c:	f7fd fcf2 	bl	8002214 <HAL_GetTick>
 8004830:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004832:	e008      	b.n	8004846 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004834:	f7fd fcee 	bl	8002214 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b02      	cmp	r3, #2
 8004840:	d901      	bls.n	8004846 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e160      	b.n	8004b08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004846:	4b0d      	ldr	r3, [pc, #52]	@ (800487c <HAL_RCC_OscConfig+0x26c>)
 8004848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d0f0      	beq.n	8004834 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004852:	2001      	movs	r0, #1
 8004854:	f000 face 	bl	8004df4 <RCC_Delay>
 8004858:	e01c      	b.n	8004894 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800485a:	4b0a      	ldr	r3, [pc, #40]	@ (8004884 <HAL_RCC_OscConfig+0x274>)
 800485c:	2200      	movs	r2, #0
 800485e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004860:	f7fd fcd8 	bl	8002214 <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004866:	e00f      	b.n	8004888 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004868:	f7fd fcd4 	bl	8002214 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d908      	bls.n	8004888 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e146      	b.n	8004b08 <HAL_RCC_OscConfig+0x4f8>
 800487a:	bf00      	nop
 800487c:	40021000 	.word	0x40021000
 8004880:	42420000 	.word	0x42420000
 8004884:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004888:	4b92      	ldr	r3, [pc, #584]	@ (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 800488a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1e9      	bne.n	8004868 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	2b00      	cmp	r3, #0
 800489e:	f000 80a6 	beq.w	80049ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048a2:	2300      	movs	r3, #0
 80048a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048a6:	4b8b      	ldr	r3, [pc, #556]	@ (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 80048a8:	69db      	ldr	r3, [r3, #28]
 80048aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10d      	bne.n	80048ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048b2:	4b88      	ldr	r3, [pc, #544]	@ (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	4a87      	ldr	r2, [pc, #540]	@ (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 80048b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048bc:	61d3      	str	r3, [r2, #28]
 80048be:	4b85      	ldr	r3, [pc, #532]	@ (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 80048c0:	69db      	ldr	r3, [r3, #28]
 80048c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048c6:	60bb      	str	r3, [r7, #8]
 80048c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048ca:	2301      	movs	r3, #1
 80048cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ce:	4b82      	ldr	r3, [pc, #520]	@ (8004ad8 <HAL_RCC_OscConfig+0x4c8>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d118      	bne.n	800490c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048da:	4b7f      	ldr	r3, [pc, #508]	@ (8004ad8 <HAL_RCC_OscConfig+0x4c8>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a7e      	ldr	r2, [pc, #504]	@ (8004ad8 <HAL_RCC_OscConfig+0x4c8>)
 80048e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048e6:	f7fd fc95 	bl	8002214 <HAL_GetTick>
 80048ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ec:	e008      	b.n	8004900 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ee:	f7fd fc91 	bl	8002214 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b64      	cmp	r3, #100	@ 0x64
 80048fa:	d901      	bls.n	8004900 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e103      	b.n	8004b08 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004900:	4b75      	ldr	r3, [pc, #468]	@ (8004ad8 <HAL_RCC_OscConfig+0x4c8>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004908:	2b00      	cmp	r3, #0
 800490a:	d0f0      	beq.n	80048ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d106      	bne.n	8004922 <HAL_RCC_OscConfig+0x312>
 8004914:	4b6f      	ldr	r3, [pc, #444]	@ (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	4a6e      	ldr	r2, [pc, #440]	@ (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 800491a:	f043 0301 	orr.w	r3, r3, #1
 800491e:	6213      	str	r3, [r2, #32]
 8004920:	e02d      	b.n	800497e <HAL_RCC_OscConfig+0x36e>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10c      	bne.n	8004944 <HAL_RCC_OscConfig+0x334>
 800492a:	4b6a      	ldr	r3, [pc, #424]	@ (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	4a69      	ldr	r2, [pc, #420]	@ (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 8004930:	f023 0301 	bic.w	r3, r3, #1
 8004934:	6213      	str	r3, [r2, #32]
 8004936:	4b67      	ldr	r3, [pc, #412]	@ (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	4a66      	ldr	r2, [pc, #408]	@ (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 800493c:	f023 0304 	bic.w	r3, r3, #4
 8004940:	6213      	str	r3, [r2, #32]
 8004942:	e01c      	b.n	800497e <HAL_RCC_OscConfig+0x36e>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	2b05      	cmp	r3, #5
 800494a:	d10c      	bne.n	8004966 <HAL_RCC_OscConfig+0x356>
 800494c:	4b61      	ldr	r3, [pc, #388]	@ (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	4a60      	ldr	r2, [pc, #384]	@ (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 8004952:	f043 0304 	orr.w	r3, r3, #4
 8004956:	6213      	str	r3, [r2, #32]
 8004958:	4b5e      	ldr	r3, [pc, #376]	@ (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	4a5d      	ldr	r2, [pc, #372]	@ (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 800495e:	f043 0301 	orr.w	r3, r3, #1
 8004962:	6213      	str	r3, [r2, #32]
 8004964:	e00b      	b.n	800497e <HAL_RCC_OscConfig+0x36e>
 8004966:	4b5b      	ldr	r3, [pc, #364]	@ (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	4a5a      	ldr	r2, [pc, #360]	@ (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 800496c:	f023 0301 	bic.w	r3, r3, #1
 8004970:	6213      	str	r3, [r2, #32]
 8004972:	4b58      	ldr	r3, [pc, #352]	@ (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	4a57      	ldr	r2, [pc, #348]	@ (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 8004978:	f023 0304 	bic.w	r3, r3, #4
 800497c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d015      	beq.n	80049b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004986:	f7fd fc45 	bl	8002214 <HAL_GetTick>
 800498a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800498c:	e00a      	b.n	80049a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800498e:	f7fd fc41 	bl	8002214 <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	f241 3288 	movw	r2, #5000	@ 0x1388
 800499c:	4293      	cmp	r3, r2
 800499e:	d901      	bls.n	80049a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e0b1      	b.n	8004b08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049a4:	4b4b      	ldr	r3, [pc, #300]	@ (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	f003 0302 	and.w	r3, r3, #2
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d0ee      	beq.n	800498e <HAL_RCC_OscConfig+0x37e>
 80049b0:	e014      	b.n	80049dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049b2:	f7fd fc2f 	bl	8002214 <HAL_GetTick>
 80049b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049b8:	e00a      	b.n	80049d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ba:	f7fd fc2b 	bl	8002214 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d901      	bls.n	80049d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e09b      	b.n	8004b08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049d0:	4b40      	ldr	r3, [pc, #256]	@ (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 80049d2:	6a1b      	ldr	r3, [r3, #32]
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1ee      	bne.n	80049ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80049dc:	7dfb      	ldrb	r3, [r7, #23]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d105      	bne.n	80049ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049e2:	4b3c      	ldr	r3, [pc, #240]	@ (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 80049e4:	69db      	ldr	r3, [r3, #28]
 80049e6:	4a3b      	ldr	r2, [pc, #236]	@ (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 80049e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f000 8087 	beq.w	8004b06 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049f8:	4b36      	ldr	r3, [pc, #216]	@ (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f003 030c 	and.w	r3, r3, #12
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d061      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	69db      	ldr	r3, [r3, #28]
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d146      	bne.n	8004a9a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a0c:	4b33      	ldr	r3, [pc, #204]	@ (8004adc <HAL_RCC_OscConfig+0x4cc>)
 8004a0e:	2200      	movs	r2, #0
 8004a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a12:	f7fd fbff 	bl	8002214 <HAL_GetTick>
 8004a16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a18:	e008      	b.n	8004a2c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a1a:	f7fd fbfb 	bl	8002214 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d901      	bls.n	8004a2c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e06d      	b.n	8004b08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a2c:	4b29      	ldr	r3, [pc, #164]	@ (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1f0      	bne.n	8004a1a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a40:	d108      	bne.n	8004a54 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004a42:	4b24      	ldr	r3, [pc, #144]	@ (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	4921      	ldr	r1, [pc, #132]	@ (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a54:	4b1f      	ldr	r3, [pc, #124]	@ (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a19      	ldr	r1, [r3, #32]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a64:	430b      	orrs	r3, r1
 8004a66:	491b      	ldr	r1, [pc, #108]	@ (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8004adc <HAL_RCC_OscConfig+0x4cc>)
 8004a6e:	2201      	movs	r2, #1
 8004a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a72:	f7fd fbcf 	bl	8002214 <HAL_GetTick>
 8004a76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a78:	e008      	b.n	8004a8c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a7a:	f7fd fbcb 	bl	8002214 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d901      	bls.n	8004a8c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e03d      	b.n	8004b08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a8c:	4b11      	ldr	r3, [pc, #68]	@ (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d0f0      	beq.n	8004a7a <HAL_RCC_OscConfig+0x46a>
 8004a98:	e035      	b.n	8004b06 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a9a:	4b10      	ldr	r3, [pc, #64]	@ (8004adc <HAL_RCC_OscConfig+0x4cc>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa0:	f7fd fbb8 	bl	8002214 <HAL_GetTick>
 8004aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004aa6:	e008      	b.n	8004aba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aa8:	f7fd fbb4 	bl	8002214 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e026      	b.n	8004b08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004aba:	4b06      	ldr	r3, [pc, #24]	@ (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d1f0      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x498>
 8004ac6:	e01e      	b.n	8004b06 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	69db      	ldr	r3, [r3, #28]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d107      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e019      	b.n	8004b08 <HAL_RCC_OscConfig+0x4f8>
 8004ad4:	40021000 	.word	0x40021000
 8004ad8:	40007000 	.word	0x40007000
 8004adc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8004b10 <HAL_RCC_OscConfig+0x500>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d106      	bne.n	8004b02 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d001      	beq.n	8004b06 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e000      	b.n	8004b08 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3718      	adds	r7, #24
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	40021000 	.word	0x40021000

08004b14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d101      	bne.n	8004b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e0d0      	b.n	8004cca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b28:	4b6a      	ldr	r3, [pc, #424]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0307 	and.w	r3, r3, #7
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d910      	bls.n	8004b58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b36:	4b67      	ldr	r3, [pc, #412]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f023 0207 	bic.w	r2, r3, #7
 8004b3e:	4965      	ldr	r1, [pc, #404]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b46:	4b63      	ldr	r3, [pc, #396]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0307 	and.w	r3, r3, #7
 8004b4e:	683a      	ldr	r2, [r7, #0]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d001      	beq.n	8004b58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e0b8      	b.n	8004cca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0302 	and.w	r3, r3, #2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d020      	beq.n	8004ba6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0304 	and.w	r3, r3, #4
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d005      	beq.n	8004b7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b70:	4b59      	ldr	r3, [pc, #356]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	4a58      	ldr	r2, [pc, #352]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b76:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004b7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0308 	and.w	r3, r3, #8
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d005      	beq.n	8004b94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b88:	4b53      	ldr	r3, [pc, #332]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	4a52      	ldr	r2, [pc, #328]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b8e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004b92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b94:	4b50      	ldr	r3, [pc, #320]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	494d      	ldr	r1, [pc, #308]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d040      	beq.n	8004c34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d107      	bne.n	8004bca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bba:	4b47      	ldr	r3, [pc, #284]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d115      	bne.n	8004bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e07f      	b.n	8004cca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d107      	bne.n	8004be2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bd2:	4b41      	ldr	r3, [pc, #260]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d109      	bne.n	8004bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e073      	b.n	8004cca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004be2:	4b3d      	ldr	r3, [pc, #244]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e06b      	b.n	8004cca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bf2:	4b39      	ldr	r3, [pc, #228]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f023 0203 	bic.w	r2, r3, #3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	4936      	ldr	r1, [pc, #216]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c04:	f7fd fb06 	bl	8002214 <HAL_GetTick>
 8004c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c0a:	e00a      	b.n	8004c22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c0c:	f7fd fb02 	bl	8002214 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e053      	b.n	8004cca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c22:	4b2d      	ldr	r3, [pc, #180]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f003 020c 	and.w	r2, r3, #12
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d1eb      	bne.n	8004c0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c34:	4b27      	ldr	r3, [pc, #156]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0307 	and.w	r3, r3, #7
 8004c3c:	683a      	ldr	r2, [r7, #0]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d210      	bcs.n	8004c64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c42:	4b24      	ldr	r3, [pc, #144]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f023 0207 	bic.w	r2, r3, #7
 8004c4a:	4922      	ldr	r1, [pc, #136]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c52:	4b20      	ldr	r3, [pc, #128]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0307 	and.w	r3, r3, #7
 8004c5a:	683a      	ldr	r2, [r7, #0]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d001      	beq.n	8004c64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e032      	b.n	8004cca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d008      	beq.n	8004c82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c70:	4b19      	ldr	r3, [pc, #100]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	4916      	ldr	r1, [pc, #88]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0308 	and.w	r3, r3, #8
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d009      	beq.n	8004ca2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c8e:	4b12      	ldr	r3, [pc, #72]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	00db      	lsls	r3, r3, #3
 8004c9c:	490e      	ldr	r1, [pc, #56]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ca2:	f000 f821 	bl	8004ce8 <HAL_RCC_GetSysClockFreq>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	091b      	lsrs	r3, r3, #4
 8004cae:	f003 030f 	and.w	r3, r3, #15
 8004cb2:	490a      	ldr	r1, [pc, #40]	@ (8004cdc <HAL_RCC_ClockConfig+0x1c8>)
 8004cb4:	5ccb      	ldrb	r3, [r1, r3]
 8004cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cba:	4a09      	ldr	r2, [pc, #36]	@ (8004ce0 <HAL_RCC_ClockConfig+0x1cc>)
 8004cbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004cbe:	4b09      	ldr	r3, [pc, #36]	@ (8004ce4 <HAL_RCC_ClockConfig+0x1d0>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7fd fa64 	bl	8002190 <HAL_InitTick>

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	40022000 	.word	0x40022000
 8004cd8:	40021000 	.word	0x40021000
 8004cdc:	08007e38 	.word	0x08007e38
 8004ce0:	20000004 	.word	0x20000004
 8004ce4:	20000008 	.word	0x20000008

08004ce8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b087      	sub	sp, #28
 8004cec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	60fb      	str	r3, [r7, #12]
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	60bb      	str	r3, [r7, #8]
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	617b      	str	r3, [r7, #20]
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004d02:	4b1e      	ldr	r3, [pc, #120]	@ (8004d7c <HAL_RCC_GetSysClockFreq+0x94>)
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f003 030c 	and.w	r3, r3, #12
 8004d0e:	2b04      	cmp	r3, #4
 8004d10:	d002      	beq.n	8004d18 <HAL_RCC_GetSysClockFreq+0x30>
 8004d12:	2b08      	cmp	r3, #8
 8004d14:	d003      	beq.n	8004d1e <HAL_RCC_GetSysClockFreq+0x36>
 8004d16:	e027      	b.n	8004d68 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d18:	4b19      	ldr	r3, [pc, #100]	@ (8004d80 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d1a:	613b      	str	r3, [r7, #16]
      break;
 8004d1c:	e027      	b.n	8004d6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	0c9b      	lsrs	r3, r3, #18
 8004d22:	f003 030f 	and.w	r3, r3, #15
 8004d26:	4a17      	ldr	r2, [pc, #92]	@ (8004d84 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004d28:	5cd3      	ldrb	r3, [r2, r3]
 8004d2a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d010      	beq.n	8004d58 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004d36:	4b11      	ldr	r3, [pc, #68]	@ (8004d7c <HAL_RCC_GetSysClockFreq+0x94>)
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	0c5b      	lsrs	r3, r3, #17
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	4a11      	ldr	r2, [pc, #68]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004d42:	5cd3      	ldrb	r3, [r2, r3]
 8004d44:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a0d      	ldr	r2, [pc, #52]	@ (8004d80 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d4a:	fb03 f202 	mul.w	r2, r3, r2
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d54:	617b      	str	r3, [r7, #20]
 8004d56:	e004      	b.n	8004d62 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a0c      	ldr	r2, [pc, #48]	@ (8004d8c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004d5c:	fb02 f303 	mul.w	r3, r2, r3
 8004d60:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	613b      	str	r3, [r7, #16]
      break;
 8004d66:	e002      	b.n	8004d6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d68:	4b05      	ldr	r3, [pc, #20]	@ (8004d80 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d6a:	613b      	str	r3, [r7, #16]
      break;
 8004d6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d6e:	693b      	ldr	r3, [r7, #16]
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	371c      	adds	r7, #28
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bc80      	pop	{r7}
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	40021000 	.word	0x40021000
 8004d80:	007a1200 	.word	0x007a1200
 8004d84:	08007e50 	.word	0x08007e50
 8004d88:	08007e60 	.word	0x08007e60
 8004d8c:	003d0900 	.word	0x003d0900

08004d90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d94:	4b02      	ldr	r3, [pc, #8]	@ (8004da0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004d96:	681b      	ldr	r3, [r3, #0]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bc80      	pop	{r7}
 8004d9e:	4770      	bx	lr
 8004da0:	20000004 	.word	0x20000004

08004da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004da8:	f7ff fff2 	bl	8004d90 <HAL_RCC_GetHCLKFreq>
 8004dac:	4602      	mov	r2, r0
 8004dae:	4b05      	ldr	r3, [pc, #20]	@ (8004dc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	0a1b      	lsrs	r3, r3, #8
 8004db4:	f003 0307 	and.w	r3, r3, #7
 8004db8:	4903      	ldr	r1, [pc, #12]	@ (8004dc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dba:	5ccb      	ldrb	r3, [r1, r3]
 8004dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	40021000 	.word	0x40021000
 8004dc8:	08007e48 	.word	0x08007e48

08004dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004dd0:	f7ff ffde 	bl	8004d90 <HAL_RCC_GetHCLKFreq>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	4b05      	ldr	r3, [pc, #20]	@ (8004dec <HAL_RCC_GetPCLK2Freq+0x20>)
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	0adb      	lsrs	r3, r3, #11
 8004ddc:	f003 0307 	and.w	r3, r3, #7
 8004de0:	4903      	ldr	r1, [pc, #12]	@ (8004df0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004de2:	5ccb      	ldrb	r3, [r1, r3]
 8004de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	40021000 	.word	0x40021000
 8004df0:	08007e48 	.word	0x08007e48

08004df4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8004e28 <RCC_Delay+0x34>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a0a      	ldr	r2, [pc, #40]	@ (8004e2c <RCC_Delay+0x38>)
 8004e02:	fba2 2303 	umull	r2, r3, r2, r3
 8004e06:	0a5b      	lsrs	r3, r3, #9
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	fb02 f303 	mul.w	r3, r2, r3
 8004e0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004e10:	bf00      	nop
  }
  while (Delay --);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	1e5a      	subs	r2, r3, #1
 8004e16:	60fa      	str	r2, [r7, #12]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1f9      	bne.n	8004e10 <RCC_Delay+0x1c>
}
 8004e1c:	bf00      	nop
 8004e1e:	bf00      	nop
 8004e20:	3714      	adds	r7, #20
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bc80      	pop	{r7}
 8004e26:	4770      	bx	lr
 8004e28:	20000004 	.word	0x20000004
 8004e2c:	10624dd3 	.word	0x10624dd3

08004e30 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	613b      	str	r3, [r7, #16]
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0301 	and.w	r3, r3, #1
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d07d      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e50:	4b4f      	ldr	r3, [pc, #316]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e52:	69db      	ldr	r3, [r3, #28]
 8004e54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10d      	bne.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e5c:	4b4c      	ldr	r3, [pc, #304]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e5e:	69db      	ldr	r3, [r3, #28]
 8004e60:	4a4b      	ldr	r2, [pc, #300]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e66:	61d3      	str	r3, [r2, #28]
 8004e68:	4b49      	ldr	r3, [pc, #292]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e6a:	69db      	ldr	r3, [r3, #28]
 8004e6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e70:	60bb      	str	r3, [r7, #8]
 8004e72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e74:	2301      	movs	r3, #1
 8004e76:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e78:	4b46      	ldr	r3, [pc, #280]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d118      	bne.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e84:	4b43      	ldr	r3, [pc, #268]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a42      	ldr	r2, [pc, #264]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e90:	f7fd f9c0 	bl	8002214 <HAL_GetTick>
 8004e94:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e96:	e008      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e98:	f7fd f9bc 	bl	8002214 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b64      	cmp	r3, #100	@ 0x64
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e06d      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eaa:	4b3a      	ldr	r3, [pc, #232]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0f0      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004eb6:	4b36      	ldr	r3, [pc, #216]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ebe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d02e      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d027      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ed4:	4b2e      	ldr	r3, [pc, #184]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004edc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ede:	4b2e      	ldr	r3, [pc, #184]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ee4:	4b2c      	ldr	r3, [pc, #176]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004eea:	4a29      	ldr	r2, [pc, #164]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d014      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004efa:	f7fd f98b 	bl	8002214 <HAL_GetTick>
 8004efe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f00:	e00a      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f02:	f7fd f987 	bl	8002214 <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d901      	bls.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e036      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f18:	4b1d      	ldr	r3, [pc, #116]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f1a:	6a1b      	ldr	r3, [r3, #32]
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d0ee      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f24:	4b1a      	ldr	r3, [pc, #104]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	4917      	ldr	r1, [pc, #92]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f36:	7dfb      	ldrb	r3, [r7, #23]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d105      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f3c:	4b14      	ldr	r3, [pc, #80]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f3e:	69db      	ldr	r3, [r3, #28]
 8004f40:	4a13      	ldr	r2, [pc, #76]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f46:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0302 	and.w	r3, r3, #2
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d008      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f54:	4b0e      	ldr	r3, [pc, #56]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	490b      	ldr	r1, [pc, #44]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0310 	and.w	r3, r3, #16
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d008      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f72:	4b07      	ldr	r3, [pc, #28]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	4904      	ldr	r1, [pc, #16]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3718      	adds	r7, #24
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	40021000 	.word	0x40021000
 8004f94:	40007000 	.word	0x40007000
 8004f98:	42420440 	.word	0x42420440

08004f9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e076      	b.n	800509c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d108      	bne.n	8004fc8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fbe:	d009      	beq.n	8004fd4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	61da      	str	r2, [r3, #28]
 8004fc6:	e005      	b.n	8004fd4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d106      	bne.n	8004ff4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f7fc fe08 	bl	8001c04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800500a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800501c:	431a      	orrs	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005026:	431a      	orrs	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	431a      	orrs	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	431a      	orrs	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005044:	431a      	orrs	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800504e:	431a      	orrs	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005058:	ea42 0103 	orr.w	r1, r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005060:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	430a      	orrs	r2, r1
 800506a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	0c1a      	lsrs	r2, r3, #16
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f002 0204 	and.w	r2, r2, #4
 800507a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	69da      	ldr	r2, [r3, #28]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800508a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3708      	adds	r7, #8
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b08c      	sub	sp, #48	@ 0x30
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
 80050b0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80050b2:	2301      	movs	r3, #1
 80050b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80050b6:	2300      	movs	r3, #0
 80050b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d101      	bne.n	80050ca <HAL_SPI_TransmitReceive+0x26>
 80050c6:	2302      	movs	r3, #2
 80050c8:	e198      	b.n	80053fc <HAL_SPI_TransmitReceive+0x358>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050d2:	f7fd f89f 	bl	8002214 <HAL_GetTick>
 80050d6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80050de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80050e8:	887b      	ldrh	r3, [r7, #2]
 80050ea:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80050ec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d00f      	beq.n	8005114 <HAL_SPI_TransmitReceive+0x70>
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050fa:	d107      	bne.n	800510c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d103      	bne.n	800510c <HAL_SPI_TransmitReceive+0x68>
 8005104:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005108:	2b04      	cmp	r3, #4
 800510a:	d003      	beq.n	8005114 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800510c:	2302      	movs	r3, #2
 800510e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005112:	e16d      	b.n	80053f0 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d005      	beq.n	8005126 <HAL_SPI_TransmitReceive+0x82>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d002      	beq.n	8005126 <HAL_SPI_TransmitReceive+0x82>
 8005120:	887b      	ldrh	r3, [r7, #2]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d103      	bne.n	800512e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800512c:	e160      	b.n	80053f0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b04      	cmp	r3, #4
 8005138:	d003      	beq.n	8005142 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2205      	movs	r2, #5
 800513e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	887a      	ldrh	r2, [r7, #2]
 8005152:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	887a      	ldrh	r2, [r7, #2]
 8005158:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	887a      	ldrh	r2, [r7, #2]
 8005164:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	887a      	ldrh	r2, [r7, #2]
 800516a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005182:	2b40      	cmp	r3, #64	@ 0x40
 8005184:	d007      	beq.n	8005196 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005194:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800519e:	d17c      	bne.n	800529a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d002      	beq.n	80051ae <HAL_SPI_TransmitReceive+0x10a>
 80051a8:	8b7b      	ldrh	r3, [r7, #26]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d16a      	bne.n	8005284 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051b2:	881a      	ldrh	r2, [r3, #0]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051be:	1c9a      	adds	r2, r3, #2
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	3b01      	subs	r3, #1
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051d2:	e057      	b.n	8005284 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d11b      	bne.n	800521a <HAL_SPI_TransmitReceive+0x176>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d016      	beq.n	800521a <HAL_SPI_TransmitReceive+0x176>
 80051ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d113      	bne.n	800521a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051f6:	881a      	ldrh	r2, [r3, #0]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005202:	1c9a      	adds	r2, r3, #2
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800520c:	b29b      	uxth	r3, r3
 800520e:	3b01      	subs	r3, #1
 8005210:	b29a      	uxth	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005216:	2300      	movs	r3, #0
 8005218:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f003 0301 	and.w	r3, r3, #1
 8005224:	2b01      	cmp	r3, #1
 8005226:	d119      	bne.n	800525c <HAL_SPI_TransmitReceive+0x1b8>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800522c:	b29b      	uxth	r3, r3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d014      	beq.n	800525c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68da      	ldr	r2, [r3, #12]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800523c:	b292      	uxth	r2, r2
 800523e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005244:	1c9a      	adds	r2, r3, #2
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800524e:	b29b      	uxth	r3, r3
 8005250:	3b01      	subs	r3, #1
 8005252:	b29a      	uxth	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005258:	2301      	movs	r3, #1
 800525a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800525c:	f7fc ffda 	bl	8002214 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005268:	429a      	cmp	r2, r3
 800526a:	d80b      	bhi.n	8005284 <HAL_SPI_TransmitReceive+0x1e0>
 800526c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800526e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005272:	d007      	beq.n	8005284 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8005282:	e0b5      	b.n	80053f0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005288:	b29b      	uxth	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1a2      	bne.n	80051d4 <HAL_SPI_TransmitReceive+0x130>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005292:	b29b      	uxth	r3, r3
 8005294:	2b00      	cmp	r3, #0
 8005296:	d19d      	bne.n	80051d4 <HAL_SPI_TransmitReceive+0x130>
 8005298:	e080      	b.n	800539c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d002      	beq.n	80052a8 <HAL_SPI_TransmitReceive+0x204>
 80052a2:	8b7b      	ldrh	r3, [r7, #26]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d16f      	bne.n	8005388 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	330c      	adds	r3, #12
 80052b2:	7812      	ldrb	r2, [r2, #0]
 80052b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ba:	1c5a      	adds	r2, r3, #1
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	3b01      	subs	r3, #1
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052ce:	e05b      	b.n	8005388 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f003 0302 	and.w	r3, r3, #2
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d11c      	bne.n	8005318 <HAL_SPI_TransmitReceive+0x274>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d017      	beq.n	8005318 <HAL_SPI_TransmitReceive+0x274>
 80052e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d114      	bne.n	8005318 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	330c      	adds	r3, #12
 80052f8:	7812      	ldrb	r2, [r2, #0]
 80052fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005300:	1c5a      	adds	r2, r3, #1
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800530a:	b29b      	uxth	r3, r3
 800530c:	3b01      	subs	r3, #1
 800530e:	b29a      	uxth	r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005314:	2300      	movs	r3, #0
 8005316:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b01      	cmp	r3, #1
 8005324:	d119      	bne.n	800535a <HAL_SPI_TransmitReceive+0x2b6>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800532a:	b29b      	uxth	r3, r3
 800532c:	2b00      	cmp	r3, #0
 800532e:	d014      	beq.n	800535a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68da      	ldr	r2, [r3, #12]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800533a:	b2d2      	uxtb	r2, r2
 800533c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005342:	1c5a      	adds	r2, r3, #1
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800534c:	b29b      	uxth	r3, r3
 800534e:	3b01      	subs	r3, #1
 8005350:	b29a      	uxth	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005356:	2301      	movs	r3, #1
 8005358:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800535a:	f7fc ff5b 	bl	8002214 <HAL_GetTick>
 800535e:	4602      	mov	r2, r0
 8005360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005366:	429a      	cmp	r2, r3
 8005368:	d803      	bhi.n	8005372 <HAL_SPI_TransmitReceive+0x2ce>
 800536a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800536c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005370:	d102      	bne.n	8005378 <HAL_SPI_TransmitReceive+0x2d4>
 8005372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005374:	2b00      	cmp	r3, #0
 8005376:	d107      	bne.n	8005388 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8005386:	e033      	b.n	80053f0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800538c:	b29b      	uxth	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d19e      	bne.n	80052d0 <HAL_SPI_TransmitReceive+0x22c>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005396:	b29b      	uxth	r3, r3
 8005398:	2b00      	cmp	r3, #0
 800539a:	d199      	bne.n	80052d0 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800539c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800539e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f000 f8b7 	bl	8005514 <SPI_EndRxTxTransaction>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d006      	beq.n	80053ba <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2220      	movs	r2, #32
 80053b6:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80053b8:	e01a      	b.n	80053f0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10a      	bne.n	80053d8 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053c2:	2300      	movs	r3, #0
 80053c4:	617b      	str	r3, [r7, #20]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	617b      	str	r3, [r7, #20]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	617b      	str	r3, [r7, #20]
 80053d6:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d003      	beq.n	80053e8 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053e6:	e003      	b.n	80053f0 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80053f8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3730      	adds	r7, #48	@ 0x30
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b088      	sub	sp, #32
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	603b      	str	r3, [r7, #0]
 8005410:	4613      	mov	r3, r2
 8005412:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005414:	f7fc fefe 	bl	8002214 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800541c:	1a9b      	subs	r3, r3, r2
 800541e:	683a      	ldr	r2, [r7, #0]
 8005420:	4413      	add	r3, r2
 8005422:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005424:	f7fc fef6 	bl	8002214 <HAL_GetTick>
 8005428:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800542a:	4b39      	ldr	r3, [pc, #228]	@ (8005510 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	015b      	lsls	r3, r3, #5
 8005430:	0d1b      	lsrs	r3, r3, #20
 8005432:	69fa      	ldr	r2, [r7, #28]
 8005434:	fb02 f303 	mul.w	r3, r2, r3
 8005438:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800543a:	e054      	b.n	80054e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005442:	d050      	beq.n	80054e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005444:	f7fc fee6 	bl	8002214 <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	69fa      	ldr	r2, [r7, #28]
 8005450:	429a      	cmp	r2, r3
 8005452:	d902      	bls.n	800545a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d13d      	bne.n	80054d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	685a      	ldr	r2, [r3, #4]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005468:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005472:	d111      	bne.n	8005498 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800547c:	d004      	beq.n	8005488 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005486:	d107      	bne.n	8005498 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005496:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800549c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054a0:	d10f      	bne.n	80054c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80054b0:	601a      	str	r2, [r3, #0]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80054c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	e017      	b.n	8005506 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d101      	bne.n	80054e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80054dc:	2300      	movs	r3, #0
 80054de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	3b01      	subs	r3, #1
 80054e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	689a      	ldr	r2, [r3, #8]
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	4013      	ands	r3, r2
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	bf0c      	ite	eq
 80054f6:	2301      	moveq	r3, #1
 80054f8:	2300      	movne	r3, #0
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	461a      	mov	r2, r3
 80054fe:	79fb      	ldrb	r3, [r7, #7]
 8005500:	429a      	cmp	r2, r3
 8005502:	d19b      	bne.n	800543c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3720      	adds	r7, #32
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	20000004 	.word	0x20000004

08005514 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b086      	sub	sp, #24
 8005518:	af02      	add	r7, sp, #8
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	9300      	str	r3, [sp, #0]
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	2200      	movs	r2, #0
 8005528:	2180      	movs	r1, #128	@ 0x80
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	f7ff ff6a 	bl	8005404 <SPI_WaitFlagStateUntilTimeout>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d007      	beq.n	8005546 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800553a:	f043 0220 	orr.w	r2, r3, #32
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e000      	b.n	8005548 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3710      	adds	r7, #16
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d101      	bne.n	8005562 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e041      	b.n	80055e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d106      	bne.n	800557c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f7fc fb90 	bl	8001c9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2202      	movs	r2, #2
 8005580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	3304      	adds	r3, #4
 800558c:	4619      	mov	r1, r3
 800558e:	4610      	mov	r0, r2
 8005590:	f000 f9aa 	bl	80058e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3708      	adds	r7, #8
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
	...

080055f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d109      	bne.n	8005614 <HAL_TIM_PWM_Start+0x24>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005606:	b2db      	uxtb	r3, r3
 8005608:	2b01      	cmp	r3, #1
 800560a:	bf14      	ite	ne
 800560c:	2301      	movne	r3, #1
 800560e:	2300      	moveq	r3, #0
 8005610:	b2db      	uxtb	r3, r3
 8005612:	e022      	b.n	800565a <HAL_TIM_PWM_Start+0x6a>
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	2b04      	cmp	r3, #4
 8005618:	d109      	bne.n	800562e <HAL_TIM_PWM_Start+0x3e>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b01      	cmp	r3, #1
 8005624:	bf14      	ite	ne
 8005626:	2301      	movne	r3, #1
 8005628:	2300      	moveq	r3, #0
 800562a:	b2db      	uxtb	r3, r3
 800562c:	e015      	b.n	800565a <HAL_TIM_PWM_Start+0x6a>
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	2b08      	cmp	r3, #8
 8005632:	d109      	bne.n	8005648 <HAL_TIM_PWM_Start+0x58>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800563a:	b2db      	uxtb	r3, r3
 800563c:	2b01      	cmp	r3, #1
 800563e:	bf14      	ite	ne
 8005640:	2301      	movne	r3, #1
 8005642:	2300      	moveq	r3, #0
 8005644:	b2db      	uxtb	r3, r3
 8005646:	e008      	b.n	800565a <HAL_TIM_PWM_Start+0x6a>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b01      	cmp	r3, #1
 8005652:	bf14      	ite	ne
 8005654:	2301      	movne	r3, #1
 8005656:	2300      	moveq	r3, #0
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e072      	b.n	8005748 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d104      	bne.n	8005672 <HAL_TIM_PWM_Start+0x82>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2202      	movs	r2, #2
 800566c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005670:	e013      	b.n	800569a <HAL_TIM_PWM_Start+0xaa>
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	2b04      	cmp	r3, #4
 8005676:	d104      	bne.n	8005682 <HAL_TIM_PWM_Start+0x92>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2202      	movs	r2, #2
 800567c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005680:	e00b      	b.n	800569a <HAL_TIM_PWM_Start+0xaa>
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2b08      	cmp	r3, #8
 8005686:	d104      	bne.n	8005692 <HAL_TIM_PWM_Start+0xa2>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2202      	movs	r2, #2
 800568c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005690:	e003      	b.n	800569a <HAL_TIM_PWM_Start+0xaa>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2202      	movs	r2, #2
 8005696:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2201      	movs	r2, #1
 80056a0:	6839      	ldr	r1, [r7, #0]
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 fb46 	bl	8005d34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a28      	ldr	r2, [pc, #160]	@ (8005750 <HAL_TIM_PWM_Start+0x160>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d004      	beq.n	80056bc <HAL_TIM_PWM_Start+0xcc>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a27      	ldr	r2, [pc, #156]	@ (8005754 <HAL_TIM_PWM_Start+0x164>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d101      	bne.n	80056c0 <HAL_TIM_PWM_Start+0xd0>
 80056bc:	2301      	movs	r3, #1
 80056be:	e000      	b.n	80056c2 <HAL_TIM_PWM_Start+0xd2>
 80056c0:	2300      	movs	r3, #0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d007      	beq.n	80056d6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80056d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a1d      	ldr	r2, [pc, #116]	@ (8005750 <HAL_TIM_PWM_Start+0x160>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d018      	beq.n	8005712 <HAL_TIM_PWM_Start+0x122>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a1b      	ldr	r2, [pc, #108]	@ (8005754 <HAL_TIM_PWM_Start+0x164>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d013      	beq.n	8005712 <HAL_TIM_PWM_Start+0x122>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056f2:	d00e      	beq.n	8005712 <HAL_TIM_PWM_Start+0x122>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a17      	ldr	r2, [pc, #92]	@ (8005758 <HAL_TIM_PWM_Start+0x168>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d009      	beq.n	8005712 <HAL_TIM_PWM_Start+0x122>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a16      	ldr	r2, [pc, #88]	@ (800575c <HAL_TIM_PWM_Start+0x16c>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d004      	beq.n	8005712 <HAL_TIM_PWM_Start+0x122>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a14      	ldr	r2, [pc, #80]	@ (8005760 <HAL_TIM_PWM_Start+0x170>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d111      	bne.n	8005736 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f003 0307 	and.w	r3, r3, #7
 800571c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2b06      	cmp	r3, #6
 8005722:	d010      	beq.n	8005746 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f042 0201 	orr.w	r2, r2, #1
 8005732:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005734:	e007      	b.n	8005746 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f042 0201 	orr.w	r2, r2, #1
 8005744:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3710      	adds	r7, #16
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	40012c00 	.word	0x40012c00
 8005754:	40013400 	.word	0x40013400
 8005758:	40000400 	.word	0x40000400
 800575c:	40000800 	.word	0x40000800
 8005760:	40000c00 	.word	0x40000c00

08005764 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005770:	2300      	movs	r3, #0
 8005772:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800577a:	2b01      	cmp	r3, #1
 800577c:	d101      	bne.n	8005782 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800577e:	2302      	movs	r3, #2
 8005780:	e0ae      	b.n	80058e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2b0c      	cmp	r3, #12
 800578e:	f200 809f 	bhi.w	80058d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005792:	a201      	add	r2, pc, #4	@ (adr r2, 8005798 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005798:	080057cd 	.word	0x080057cd
 800579c:	080058d1 	.word	0x080058d1
 80057a0:	080058d1 	.word	0x080058d1
 80057a4:	080058d1 	.word	0x080058d1
 80057a8:	0800580d 	.word	0x0800580d
 80057ac:	080058d1 	.word	0x080058d1
 80057b0:	080058d1 	.word	0x080058d1
 80057b4:	080058d1 	.word	0x080058d1
 80057b8:	0800584f 	.word	0x0800584f
 80057bc:	080058d1 	.word	0x080058d1
 80057c0:	080058d1 	.word	0x080058d1
 80057c4:	080058d1 	.word	0x080058d1
 80057c8:	0800588f 	.word	0x0800588f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68b9      	ldr	r1, [r7, #8]
 80057d2:	4618      	mov	r0, r3
 80057d4:	f000 f902 	bl	80059dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	699a      	ldr	r2, [r3, #24]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f042 0208 	orr.w	r2, r2, #8
 80057e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	699a      	ldr	r2, [r3, #24]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f022 0204 	bic.w	r2, r2, #4
 80057f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	6999      	ldr	r1, [r3, #24]
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	691a      	ldr	r2, [r3, #16]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	430a      	orrs	r2, r1
 8005808:	619a      	str	r2, [r3, #24]
      break;
 800580a:	e064      	b.n	80058d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68b9      	ldr	r1, [r7, #8]
 8005812:	4618      	mov	r0, r3
 8005814:	f000 f952 	bl	8005abc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	699a      	ldr	r2, [r3, #24]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005826:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	699a      	ldr	r2, [r3, #24]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005836:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6999      	ldr	r1, [r3, #24]
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	021a      	lsls	r2, r3, #8
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	430a      	orrs	r2, r1
 800584a:	619a      	str	r2, [r3, #24]
      break;
 800584c:	e043      	b.n	80058d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68b9      	ldr	r1, [r7, #8]
 8005854:	4618      	mov	r0, r3
 8005856:	f000 f9a5 	bl	8005ba4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	69da      	ldr	r2, [r3, #28]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f042 0208 	orr.w	r2, r2, #8
 8005868:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	69da      	ldr	r2, [r3, #28]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f022 0204 	bic.w	r2, r2, #4
 8005878:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	69d9      	ldr	r1, [r3, #28]
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	691a      	ldr	r2, [r3, #16]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	430a      	orrs	r2, r1
 800588a:	61da      	str	r2, [r3, #28]
      break;
 800588c:	e023      	b.n	80058d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68b9      	ldr	r1, [r7, #8]
 8005894:	4618      	mov	r0, r3
 8005896:	f000 f9f9 	bl	8005c8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	69da      	ldr	r2, [r3, #28]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	69da      	ldr	r2, [r3, #28]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	69d9      	ldr	r1, [r3, #28]
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	021a      	lsls	r2, r3, #8
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	430a      	orrs	r2, r1
 80058cc:	61da      	str	r2, [r3, #28]
      break;
 80058ce:	e002      	b.n	80058d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	75fb      	strb	r3, [r7, #23]
      break;
 80058d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80058de:	7dfb      	ldrb	r3, [r7, #23]
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3718      	adds	r7, #24
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a33      	ldr	r2, [pc, #204]	@ (80059c8 <TIM_Base_SetConfig+0xe0>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d013      	beq.n	8005928 <TIM_Base_SetConfig+0x40>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a32      	ldr	r2, [pc, #200]	@ (80059cc <TIM_Base_SetConfig+0xe4>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d00f      	beq.n	8005928 <TIM_Base_SetConfig+0x40>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800590e:	d00b      	beq.n	8005928 <TIM_Base_SetConfig+0x40>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a2f      	ldr	r2, [pc, #188]	@ (80059d0 <TIM_Base_SetConfig+0xe8>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d007      	beq.n	8005928 <TIM_Base_SetConfig+0x40>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a2e      	ldr	r2, [pc, #184]	@ (80059d4 <TIM_Base_SetConfig+0xec>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d003      	beq.n	8005928 <TIM_Base_SetConfig+0x40>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a2d      	ldr	r2, [pc, #180]	@ (80059d8 <TIM_Base_SetConfig+0xf0>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d108      	bne.n	800593a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800592e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	4313      	orrs	r3, r2
 8005938:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a22      	ldr	r2, [pc, #136]	@ (80059c8 <TIM_Base_SetConfig+0xe0>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d013      	beq.n	800596a <TIM_Base_SetConfig+0x82>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a21      	ldr	r2, [pc, #132]	@ (80059cc <TIM_Base_SetConfig+0xe4>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d00f      	beq.n	800596a <TIM_Base_SetConfig+0x82>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005950:	d00b      	beq.n	800596a <TIM_Base_SetConfig+0x82>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a1e      	ldr	r2, [pc, #120]	@ (80059d0 <TIM_Base_SetConfig+0xe8>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d007      	beq.n	800596a <TIM_Base_SetConfig+0x82>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a1d      	ldr	r2, [pc, #116]	@ (80059d4 <TIM_Base_SetConfig+0xec>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d003      	beq.n	800596a <TIM_Base_SetConfig+0x82>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a1c      	ldr	r2, [pc, #112]	@ (80059d8 <TIM_Base_SetConfig+0xf0>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d108      	bne.n	800597c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005970:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	4313      	orrs	r3, r2
 800597a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	4313      	orrs	r3, r2
 8005988:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	689a      	ldr	r2, [r3, #8]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a09      	ldr	r2, [pc, #36]	@ (80059c8 <TIM_Base_SetConfig+0xe0>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d003      	beq.n	80059b0 <TIM_Base_SetConfig+0xc8>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a08      	ldr	r2, [pc, #32]	@ (80059cc <TIM_Base_SetConfig+0xe4>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d103      	bne.n	80059b8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	691a      	ldr	r2, [r3, #16]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	615a      	str	r2, [r3, #20]
}
 80059be:	bf00      	nop
 80059c0:	3714      	adds	r7, #20
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bc80      	pop	{r7}
 80059c6:	4770      	bx	lr
 80059c8:	40012c00 	.word	0x40012c00
 80059cc:	40013400 	.word	0x40013400
 80059d0:	40000400 	.word	0x40000400
 80059d4:	40000800 	.word	0x40000800
 80059d8:	40000c00 	.word	0x40000c00

080059dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059dc:	b480      	push	{r7}
 80059de:	b087      	sub	sp, #28
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a1b      	ldr	r3, [r3, #32]
 80059f0:	f023 0201 	bic.w	r2, r3, #1
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f023 0303 	bic.w	r3, r3, #3
 8005a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	f023 0302 	bic.w	r3, r3, #2
 8005a24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a20      	ldr	r2, [pc, #128]	@ (8005ab4 <TIM_OC1_SetConfig+0xd8>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d003      	beq.n	8005a40 <TIM_OC1_SetConfig+0x64>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a1f      	ldr	r2, [pc, #124]	@ (8005ab8 <TIM_OC1_SetConfig+0xdc>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d10c      	bne.n	8005a5a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	f023 0308 	bic.w	r3, r3, #8
 8005a46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	f023 0304 	bic.w	r3, r3, #4
 8005a58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a15      	ldr	r2, [pc, #84]	@ (8005ab4 <TIM_OC1_SetConfig+0xd8>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d003      	beq.n	8005a6a <TIM_OC1_SetConfig+0x8e>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a14      	ldr	r2, [pc, #80]	@ (8005ab8 <TIM_OC1_SetConfig+0xdc>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d111      	bne.n	8005a8e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	693a      	ldr	r2, [r7, #16]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	621a      	str	r2, [r3, #32]
}
 8005aa8:	bf00      	nop
 8005aaa:	371c      	adds	r7, #28
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bc80      	pop	{r7}
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	40012c00 	.word	0x40012c00
 8005ab8:	40013400 	.word	0x40013400

08005abc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b087      	sub	sp, #28
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a1b      	ldr	r3, [r3, #32]
 8005ad0:	f023 0210 	bic.w	r2, r3, #16
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	699b      	ldr	r3, [r3, #24]
 8005ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005af2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	021b      	lsls	r3, r3, #8
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	f023 0320 	bic.w	r3, r3, #32
 8005b06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	011b      	lsls	r3, r3, #4
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a21      	ldr	r2, [pc, #132]	@ (8005b9c <TIM_OC2_SetConfig+0xe0>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d003      	beq.n	8005b24 <TIM_OC2_SetConfig+0x68>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a20      	ldr	r2, [pc, #128]	@ (8005ba0 <TIM_OC2_SetConfig+0xe4>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d10d      	bne.n	8005b40 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	011b      	lsls	r3, r3, #4
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a16      	ldr	r2, [pc, #88]	@ (8005b9c <TIM_OC2_SetConfig+0xe0>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d003      	beq.n	8005b50 <TIM_OC2_SetConfig+0x94>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a15      	ldr	r2, [pc, #84]	@ (8005ba0 <TIM_OC2_SetConfig+0xe4>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d113      	bne.n	8005b78 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	695b      	ldr	r3, [r3, #20]
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	685a      	ldr	r2, [r3, #4]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	621a      	str	r2, [r3, #32]
}
 8005b92:	bf00      	nop
 8005b94:	371c      	adds	r7, #28
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bc80      	pop	{r7}
 8005b9a:	4770      	bx	lr
 8005b9c:	40012c00 	.word	0x40012c00
 8005ba0:	40013400 	.word	0x40013400

08005ba4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b087      	sub	sp, #28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a1b      	ldr	r3, [r3, #32]
 8005bb8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	69db      	ldr	r3, [r3, #28]
 8005bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f023 0303 	bic.w	r3, r3, #3
 8005bda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005bec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	021b      	lsls	r3, r3, #8
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a21      	ldr	r2, [pc, #132]	@ (8005c84 <TIM_OC3_SetConfig+0xe0>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d003      	beq.n	8005c0a <TIM_OC3_SetConfig+0x66>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a20      	ldr	r2, [pc, #128]	@ (8005c88 <TIM_OC3_SetConfig+0xe4>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d10d      	bne.n	8005c26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	021b      	lsls	r3, r3, #8
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a16      	ldr	r2, [pc, #88]	@ (8005c84 <TIM_OC3_SetConfig+0xe0>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d003      	beq.n	8005c36 <TIM_OC3_SetConfig+0x92>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a15      	ldr	r2, [pc, #84]	@ (8005c88 <TIM_OC3_SetConfig+0xe4>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d113      	bne.n	8005c5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	011b      	lsls	r3, r3, #4
 8005c4c:	693a      	ldr	r2, [r7, #16]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	699b      	ldr	r3, [r3, #24]
 8005c56:	011b      	lsls	r3, r3, #4
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	697a      	ldr	r2, [r7, #20]
 8005c76:	621a      	str	r2, [r3, #32]
}
 8005c78:	bf00      	nop
 8005c7a:	371c      	adds	r7, #28
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bc80      	pop	{r7}
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	40012c00 	.word	0x40012c00
 8005c88:	40013400 	.word	0x40013400

08005c8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b087      	sub	sp, #28
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a1b      	ldr	r3, [r3, #32]
 8005c9a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a1b      	ldr	r3, [r3, #32]
 8005ca0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	69db      	ldr	r3, [r3, #28]
 8005cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	021b      	lsls	r3, r3, #8
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005cd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	031b      	lsls	r3, r3, #12
 8005cde:	693a      	ldr	r2, [r7, #16]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a11      	ldr	r2, [pc, #68]	@ (8005d2c <TIM_OC4_SetConfig+0xa0>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d003      	beq.n	8005cf4 <TIM_OC4_SetConfig+0x68>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a10      	ldr	r2, [pc, #64]	@ (8005d30 <TIM_OC4_SetConfig+0xa4>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d109      	bne.n	8005d08 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005cfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	695b      	ldr	r3, [r3, #20]
 8005d00:	019b      	lsls	r3, r3, #6
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	685a      	ldr	r2, [r3, #4]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	621a      	str	r2, [r3, #32]
}
 8005d22:	bf00      	nop
 8005d24:	371c      	adds	r7, #28
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bc80      	pop	{r7}
 8005d2a:	4770      	bx	lr
 8005d2c:	40012c00 	.word	0x40012c00
 8005d30:	40013400 	.word	0x40013400

08005d34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b087      	sub	sp, #28
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	f003 031f 	and.w	r3, r3, #31
 8005d46:	2201      	movs	r2, #1
 8005d48:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6a1a      	ldr	r2, [r3, #32]
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	43db      	mvns	r3, r3
 8005d56:	401a      	ands	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6a1a      	ldr	r2, [r3, #32]
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	f003 031f 	and.w	r3, r3, #31
 8005d66:	6879      	ldr	r1, [r7, #4]
 8005d68:	fa01 f303 	lsl.w	r3, r1, r3
 8005d6c:	431a      	orrs	r2, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	621a      	str	r2, [r3, #32]
}
 8005d72:	bf00      	nop
 8005d74:	371c      	adds	r7, #28
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bc80      	pop	{r7}
 8005d7a:	4770      	bx	lr

08005d7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d101      	bne.n	8005d94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d90:	2302      	movs	r3, #2
 8005d92:	e050      	b.n	8005e36 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2202      	movs	r2, #2
 8005da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a1b      	ldr	r2, [pc, #108]	@ (8005e40 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d018      	beq.n	8005e0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a19      	ldr	r2, [pc, #100]	@ (8005e44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d013      	beq.n	8005e0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dea:	d00e      	beq.n	8005e0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a15      	ldr	r2, [pc, #84]	@ (8005e48 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d009      	beq.n	8005e0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a14      	ldr	r2, [pc, #80]	@ (8005e4c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d004      	beq.n	8005e0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a12      	ldr	r2, [pc, #72]	@ (8005e50 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d10c      	bne.n	8005e24 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68ba      	ldr	r2, [r7, #8]
 8005e22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3714      	adds	r7, #20
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bc80      	pop	{r7}
 8005e3e:	4770      	bx	lr
 8005e40:	40012c00 	.word	0x40012c00
 8005e44:	40013400 	.word	0x40013400
 8005e48:	40000400 	.word	0x40000400
 8005e4c:	40000800 	.word	0x40000800
 8005e50:	40000c00 	.word	0x40000c00

08005e54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d101      	bne.n	8005e66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e042      	b.n	8005eec <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d106      	bne.n	8005e80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f7fb ff8a 	bl	8001d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2224      	movs	r2, #36	@ 0x24
 8005e84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68da      	ldr	r2, [r3, #12]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 ff2f 	bl	8006cfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	691a      	ldr	r2, [r3, #16]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005eac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	695a      	ldr	r2, [r3, #20]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ebc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68da      	ldr	r2, [r3, #12]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ecc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2220      	movs	r2, #32
 8005ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2220      	movs	r2, #32
 8005ee0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3708      	adds	r7, #8
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b08c      	sub	sp, #48	@ 0x30
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	4613      	mov	r3, r2
 8005f00:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	2b20      	cmp	r3, #32
 8005f0c:	d156      	bne.n	8005fbc <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d002      	beq.n	8005f1a <HAL_UART_Transmit_DMA+0x26>
 8005f14:	88fb      	ldrh	r3, [r7, #6]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d101      	bne.n	8005f1e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e04f      	b.n	8005fbe <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	88fa      	ldrh	r2, [r7, #6]
 8005f28:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	88fa      	ldrh	r2, [r7, #6]
 8005f2e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2221      	movs	r2, #33	@ 0x21
 8005f3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f42:	4a21      	ldr	r2, [pc, #132]	@ (8005fc8 <HAL_UART_Transmit_DMA+0xd4>)
 8005f44:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f4a:	4a20      	ldr	r2, [pc, #128]	@ (8005fcc <HAL_UART_Transmit_DMA+0xd8>)
 8005f4c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f52:	4a1f      	ldr	r2, [pc, #124]	@ (8005fd0 <HAL_UART_Transmit_DMA+0xdc>)
 8005f54:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8005f5e:	f107 0308 	add.w	r3, r7, #8
 8005f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f6a:	6819      	ldr	r1, [r3, #0]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	3304      	adds	r3, #4
 8005f72:	461a      	mov	r2, r3
 8005f74:	88fb      	ldrh	r3, [r7, #6]
 8005f76:	f7fc ffad 	bl	8002ed4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005f82:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	3314      	adds	r3, #20
 8005f8a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	e853 3f00 	ldrex	r3, [r3]
 8005f92:	617b      	str	r3, [r7, #20]
   return(result);
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	3314      	adds	r3, #20
 8005fa2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005fa4:	627a      	str	r2, [r7, #36]	@ 0x24
 8005fa6:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa8:	6a39      	ldr	r1, [r7, #32]
 8005faa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fac:	e841 2300 	strex	r3, r2, [r1]
 8005fb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1e5      	bne.n	8005f84 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	e000      	b.n	8005fbe <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005fbc:	2302      	movs	r3, #2
  }
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3730      	adds	r7, #48	@ 0x30
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	08006591 	.word	0x08006591
 8005fcc:	0800662b 	.word	0x0800662b
 8005fd0:	080067af 	.word	0x080067af

08005fd4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	2b20      	cmp	r3, #32
 8005fec:	d112      	bne.n	8006014 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d002      	beq.n	8005ffa <HAL_UART_Receive_DMA+0x26>
 8005ff4:	88fb      	ldrh	r3, [r7, #6]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d101      	bne.n	8005ffe <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e00b      	b.n	8006016 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006004:	88fb      	ldrh	r3, [r7, #6]
 8006006:	461a      	mov	r2, r3
 8006008:	68b9      	ldr	r1, [r7, #8]
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f000 fc1a 	bl	8006844 <UART_Start_Receive_DMA>
 8006010:	4603      	mov	r3, r0
 8006012:	e000      	b.n	8006016 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006014:	2302      	movs	r3, #2
  }
}
 8006016:	4618      	mov	r0, r3
 8006018:	3710      	adds	r7, #16
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
	...

08006020 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b0ba      	sub	sp, #232	@ 0xe8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006046:	2300      	movs	r3, #0
 8006048:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800604c:	2300      	movs	r3, #0
 800604e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006056:	f003 030f 	and.w	r3, r3, #15
 800605a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800605e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10f      	bne.n	8006086 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800606a:	f003 0320 	and.w	r3, r3, #32
 800606e:	2b00      	cmp	r3, #0
 8006070:	d009      	beq.n	8006086 <HAL_UART_IRQHandler+0x66>
 8006072:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006076:	f003 0320 	and.w	r3, r3, #32
 800607a:	2b00      	cmp	r3, #0
 800607c:	d003      	beq.n	8006086 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 fd7e 	bl	8006b80 <UART_Receive_IT>
      return;
 8006084:	e25b      	b.n	800653e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006086:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800608a:	2b00      	cmp	r3, #0
 800608c:	f000 80de 	beq.w	800624c <HAL_UART_IRQHandler+0x22c>
 8006090:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006094:	f003 0301 	and.w	r3, r3, #1
 8006098:	2b00      	cmp	r3, #0
 800609a:	d106      	bne.n	80060aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800609c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060a0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f000 80d1 	beq.w	800624c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80060aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060ae:	f003 0301 	and.w	r3, r3, #1
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00b      	beq.n	80060ce <HAL_UART_IRQHandler+0xae>
 80060b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d005      	beq.n	80060ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060c6:	f043 0201 	orr.w	r2, r3, #1
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060d2:	f003 0304 	and.w	r3, r3, #4
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00b      	beq.n	80060f2 <HAL_UART_IRQHandler+0xd2>
 80060da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060de:	f003 0301 	and.w	r3, r3, #1
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d005      	beq.n	80060f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ea:	f043 0202 	orr.w	r2, r3, #2
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060f6:	f003 0302 	and.w	r3, r3, #2
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00b      	beq.n	8006116 <HAL_UART_IRQHandler+0xf6>
 80060fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006102:	f003 0301 	and.w	r3, r3, #1
 8006106:	2b00      	cmp	r3, #0
 8006108:	d005      	beq.n	8006116 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800610e:	f043 0204 	orr.w	r2, r3, #4
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800611a:	f003 0308 	and.w	r3, r3, #8
 800611e:	2b00      	cmp	r3, #0
 8006120:	d011      	beq.n	8006146 <HAL_UART_IRQHandler+0x126>
 8006122:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006126:	f003 0320 	and.w	r3, r3, #32
 800612a:	2b00      	cmp	r3, #0
 800612c:	d105      	bne.n	800613a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800612e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006132:	f003 0301 	and.w	r3, r3, #1
 8006136:	2b00      	cmp	r3, #0
 8006138:	d005      	beq.n	8006146 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800613e:	f043 0208 	orr.w	r2, r3, #8
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800614a:	2b00      	cmp	r3, #0
 800614c:	f000 81f2 	beq.w	8006534 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006154:	f003 0320 	and.w	r3, r3, #32
 8006158:	2b00      	cmp	r3, #0
 800615a:	d008      	beq.n	800616e <HAL_UART_IRQHandler+0x14e>
 800615c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006160:	f003 0320 	and.w	r3, r3, #32
 8006164:	2b00      	cmp	r3, #0
 8006166:	d002      	beq.n	800616e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 fd09 	bl	8006b80 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	695b      	ldr	r3, [r3, #20]
 8006174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006178:	2b00      	cmp	r3, #0
 800617a:	bf14      	ite	ne
 800617c:	2301      	movne	r3, #1
 800617e:	2300      	moveq	r3, #0
 8006180:	b2db      	uxtb	r3, r3
 8006182:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800618a:	f003 0308 	and.w	r3, r3, #8
 800618e:	2b00      	cmp	r3, #0
 8006190:	d103      	bne.n	800619a <HAL_UART_IRQHandler+0x17a>
 8006192:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006196:	2b00      	cmp	r3, #0
 8006198:	d04f      	beq.n	800623a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 fc13 	bl	80069c6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d041      	beq.n	8006232 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	3314      	adds	r3, #20
 80061b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80061bc:	e853 3f00 	ldrex	r3, [r3]
 80061c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80061c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80061c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	3314      	adds	r3, #20
 80061d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80061da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80061de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80061e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80061ea:	e841 2300 	strex	r3, r2, [r1]
 80061ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80061f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1d9      	bne.n	80061ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d013      	beq.n	800622a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006206:	4a7e      	ldr	r2, [pc, #504]	@ (8006400 <HAL_UART_IRQHandler+0x3e0>)
 8006208:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800620e:	4618      	mov	r0, r3
 8006210:	f7fc fefc 	bl	800300c <HAL_DMA_Abort_IT>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d016      	beq.n	8006248 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800621e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006224:	4610      	mov	r0, r2
 8006226:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006228:	e00e      	b.n	8006248 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f99c 	bl	8006568 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006230:	e00a      	b.n	8006248 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f998 	bl	8006568 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006238:	e006      	b.n	8006248 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 f994 	bl	8006568 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006246:	e175      	b.n	8006534 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006248:	bf00      	nop
    return;
 800624a:	e173      	b.n	8006534 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006250:	2b01      	cmp	r3, #1
 8006252:	f040 814f 	bne.w	80064f4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800625a:	f003 0310 	and.w	r3, r3, #16
 800625e:	2b00      	cmp	r3, #0
 8006260:	f000 8148 	beq.w	80064f4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006268:	f003 0310 	and.w	r3, r3, #16
 800626c:	2b00      	cmp	r3, #0
 800626e:	f000 8141 	beq.w	80064f4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006272:	2300      	movs	r3, #0
 8006274:	60bb      	str	r3, [r7, #8]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	60bb      	str	r3, [r7, #8]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	60bb      	str	r3, [r7, #8]
 8006286:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006292:	2b00      	cmp	r3, #0
 8006294:	f000 80b6 	beq.w	8006404 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80062a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f000 8145 	beq.w	8006538 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80062b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80062b6:	429a      	cmp	r2, r3
 80062b8:	f080 813e 	bcs.w	8006538 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80062c2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062c8:	699b      	ldr	r3, [r3, #24]
 80062ca:	2b20      	cmp	r3, #32
 80062cc:	f000 8088 	beq.w	80063e0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	330c      	adds	r3, #12
 80062d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062da:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80062de:	e853 3f00 	ldrex	r3, [r3]
 80062e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80062e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80062ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062ee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	330c      	adds	r3, #12
 80062f8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80062fc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006300:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006304:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006308:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800630c:	e841 2300 	strex	r3, r2, [r1]
 8006310:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006314:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006318:	2b00      	cmp	r3, #0
 800631a:	d1d9      	bne.n	80062d0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	3314      	adds	r3, #20
 8006322:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006324:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006326:	e853 3f00 	ldrex	r3, [r3]
 800632a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800632c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800632e:	f023 0301 	bic.w	r3, r3, #1
 8006332:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	3314      	adds	r3, #20
 800633c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006340:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006344:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006346:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006348:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800634c:	e841 2300 	strex	r3, r2, [r1]
 8006350:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006352:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1e1      	bne.n	800631c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	3314      	adds	r3, #20
 800635e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006360:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006362:	e853 3f00 	ldrex	r3, [r3]
 8006366:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006368:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800636a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800636e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	3314      	adds	r3, #20
 8006378:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800637c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800637e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006380:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006382:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006384:	e841 2300 	strex	r3, r2, [r1]
 8006388:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800638a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1e3      	bne.n	8006358 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2220      	movs	r2, #32
 8006394:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	330c      	adds	r3, #12
 80063a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063a8:	e853 3f00 	ldrex	r3, [r3]
 80063ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80063ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063b0:	f023 0310 	bic.w	r3, r3, #16
 80063b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	330c      	adds	r3, #12
 80063be:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80063c2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80063c4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80063c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80063ca:	e841 2300 	strex	r3, r2, [r1]
 80063ce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80063d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1e3      	bne.n	800639e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063da:	4618      	mov	r0, r3
 80063dc:	f7fc fdda 	bl	8002f94 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2202      	movs	r2, #2
 80063e4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	4619      	mov	r1, r3
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 f8bf 	bl	800657a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80063fc:	e09c      	b.n	8006538 <HAL_UART_IRQHandler+0x518>
 80063fe:	bf00      	nop
 8006400:	08006a8b 	.word	0x08006a8b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800640c:	b29b      	uxth	r3, r3
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006418:	b29b      	uxth	r3, r3
 800641a:	2b00      	cmp	r3, #0
 800641c:	f000 808e 	beq.w	800653c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006420:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006424:	2b00      	cmp	r3, #0
 8006426:	f000 8089 	beq.w	800653c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	330c      	adds	r3, #12
 8006430:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006434:	e853 3f00 	ldrex	r3, [r3]
 8006438:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800643a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800643c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006440:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	330c      	adds	r3, #12
 800644a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800644e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006450:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006452:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006454:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006456:	e841 2300 	strex	r3, r2, [r1]
 800645a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800645c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1e3      	bne.n	800642a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	3314      	adds	r3, #20
 8006468:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800646c:	e853 3f00 	ldrex	r3, [r3]
 8006470:	623b      	str	r3, [r7, #32]
   return(result);
 8006472:	6a3b      	ldr	r3, [r7, #32]
 8006474:	f023 0301 	bic.w	r3, r3, #1
 8006478:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	3314      	adds	r3, #20
 8006482:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006486:	633a      	str	r2, [r7, #48]	@ 0x30
 8006488:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800648c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800648e:	e841 2300 	strex	r3, r2, [r1]
 8006492:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1e3      	bne.n	8006462 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2220      	movs	r2, #32
 800649e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	330c      	adds	r3, #12
 80064ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	e853 3f00 	ldrex	r3, [r3]
 80064b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f023 0310 	bic.w	r3, r3, #16
 80064be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	330c      	adds	r3, #12
 80064c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80064cc:	61fa      	str	r2, [r7, #28]
 80064ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d0:	69b9      	ldr	r1, [r7, #24]
 80064d2:	69fa      	ldr	r2, [r7, #28]
 80064d4:	e841 2300 	strex	r3, r2, [r1]
 80064d8:	617b      	str	r3, [r7, #20]
   return(result);
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1e3      	bne.n	80064a8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2202      	movs	r2, #2
 80064e4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80064e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80064ea:	4619      	mov	r1, r3
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 f844 	bl	800657a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80064f2:	e023      	b.n	800653c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80064f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d009      	beq.n	8006514 <HAL_UART_IRQHandler+0x4f4>
 8006500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006504:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006508:	2b00      	cmp	r3, #0
 800650a:	d003      	beq.n	8006514 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 fad0 	bl	8006ab2 <UART_Transmit_IT>
    return;
 8006512:	e014      	b.n	800653e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00e      	beq.n	800653e <HAL_UART_IRQHandler+0x51e>
 8006520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006528:	2b00      	cmp	r3, #0
 800652a:	d008      	beq.n	800653e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 fb0f 	bl	8006b50 <UART_EndTransmit_IT>
    return;
 8006532:	e004      	b.n	800653e <HAL_UART_IRQHandler+0x51e>
    return;
 8006534:	bf00      	nop
 8006536:	e002      	b.n	800653e <HAL_UART_IRQHandler+0x51e>
      return;
 8006538:	bf00      	nop
 800653a:	e000      	b.n	800653e <HAL_UART_IRQHandler+0x51e>
      return;
 800653c:	bf00      	nop
  }
}
 800653e:	37e8      	adds	r7, #232	@ 0xe8
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800654c:	bf00      	nop
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	bc80      	pop	{r7}
 8006554:	4770      	bx	lr

08006556 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006556:	b480      	push	{r7}
 8006558:	b083      	sub	sp, #12
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800655e:	bf00      	nop
 8006560:	370c      	adds	r7, #12
 8006562:	46bd      	mov	sp, r7
 8006564:	bc80      	pop	{r7}
 8006566:	4770      	bx	lr

08006568 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006568:	b480      	push	{r7}
 800656a:	b083      	sub	sp, #12
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006570:	bf00      	nop
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	bc80      	pop	{r7}
 8006578:	4770      	bx	lr

0800657a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800657a:	b480      	push	{r7}
 800657c:	b083      	sub	sp, #12
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
 8006582:	460b      	mov	r3, r1
 8006584:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006586:	bf00      	nop
 8006588:	370c      	adds	r7, #12
 800658a:	46bd      	mov	sp, r7
 800658c:	bc80      	pop	{r7}
 800658e:	4770      	bx	lr

08006590 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b090      	sub	sp, #64	@ 0x40
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800659c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 0320 	and.w	r3, r3, #32
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d137      	bne.n	800661c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80065ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065ae:	2200      	movs	r2, #0
 80065b0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80065b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	3314      	adds	r3, #20
 80065b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065bc:	e853 3f00 	ldrex	r3, [r3]
 80065c0:	623b      	str	r3, [r7, #32]
   return(result);
 80065c2:	6a3b      	ldr	r3, [r7, #32]
 80065c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80065ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	3314      	adds	r3, #20
 80065d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80065d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80065d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065da:	e841 2300 	strex	r3, r2, [r1]
 80065de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80065e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1e5      	bne.n	80065b2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80065e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	330c      	adds	r3, #12
 80065ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	e853 3f00 	ldrex	r3, [r3]
 80065f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80065fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	330c      	adds	r3, #12
 8006604:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006606:	61fa      	str	r2, [r7, #28]
 8006608:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660a:	69b9      	ldr	r1, [r7, #24]
 800660c:	69fa      	ldr	r2, [r7, #28]
 800660e:	e841 2300 	strex	r3, r2, [r1]
 8006612:	617b      	str	r3, [r7, #20]
   return(result);
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d1e5      	bne.n	80065e6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800661a:	e002      	b.n	8006622 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800661c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800661e:	f7f9 fe01 	bl	8000224 <HAL_UART_TxCpltCallback>
}
 8006622:	bf00      	nop
 8006624:	3740      	adds	r7, #64	@ 0x40
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800662a:	b580      	push	{r7, lr}
 800662c:	b084      	sub	sp, #16
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006636:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f7ff ff83 	bl	8006544 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800663e:	bf00      	nop
 8006640:	3710      	adds	r7, #16
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b09c      	sub	sp, #112	@ 0x70
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006652:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 0320 	and.w	r3, r3, #32
 800665e:	2b00      	cmp	r3, #0
 8006660:	d172      	bne.n	8006748 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006662:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006664:	2200      	movs	r2, #0
 8006666:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006668:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	330c      	adds	r3, #12
 800666e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006670:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006672:	e853 3f00 	ldrex	r3, [r3]
 8006676:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006678:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800667a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800667e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006680:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	330c      	adds	r3, #12
 8006686:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006688:	65ba      	str	r2, [r7, #88]	@ 0x58
 800668a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800668e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006690:	e841 2300 	strex	r3, r2, [r1]
 8006694:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006696:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1e5      	bne.n	8006668 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800669c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	3314      	adds	r3, #20
 80066a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a6:	e853 3f00 	ldrex	r3, [r3]
 80066aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80066ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066ae:	f023 0301 	bic.w	r3, r3, #1
 80066b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80066b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	3314      	adds	r3, #20
 80066ba:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80066bc:	647a      	str	r2, [r7, #68]	@ 0x44
 80066be:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80066c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066c4:	e841 2300 	strex	r3, r2, [r1]
 80066c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80066ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d1e5      	bne.n	800669c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	3314      	adds	r3, #20
 80066d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066da:	e853 3f00 	ldrex	r3, [r3]
 80066de:	623b      	str	r3, [r7, #32]
   return(result);
 80066e0:	6a3b      	ldr	r3, [r7, #32]
 80066e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80066e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	3314      	adds	r3, #20
 80066ee:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80066f0:	633a      	str	r2, [r7, #48]	@ 0x30
 80066f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066f8:	e841 2300 	strex	r3, r2, [r1]
 80066fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006700:	2b00      	cmp	r3, #0
 8006702:	d1e5      	bne.n	80066d0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006704:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006706:	2220      	movs	r2, #32
 8006708:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800670c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800670e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006710:	2b01      	cmp	r3, #1
 8006712:	d119      	bne.n	8006748 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006714:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	330c      	adds	r3, #12
 800671a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	e853 3f00 	ldrex	r3, [r3]
 8006722:	60fb      	str	r3, [r7, #12]
   return(result);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f023 0310 	bic.w	r3, r3, #16
 800672a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800672c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	330c      	adds	r3, #12
 8006732:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006734:	61fa      	str	r2, [r7, #28]
 8006736:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006738:	69b9      	ldr	r1, [r7, #24]
 800673a:	69fa      	ldr	r2, [r7, #28]
 800673c:	e841 2300 	strex	r3, r2, [r1]
 8006740:	617b      	str	r3, [r7, #20]
   return(result);
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d1e5      	bne.n	8006714 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006748:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800674a:	2200      	movs	r2, #0
 800674c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800674e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006752:	2b01      	cmp	r3, #1
 8006754:	d106      	bne.n	8006764 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006756:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006758:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800675a:	4619      	mov	r1, r3
 800675c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800675e:	f7ff ff0c 	bl	800657a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006762:	e002      	b.n	800676a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006764:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006766:	f7f9 fd77 	bl	8000258 <HAL_UART_RxCpltCallback>
}
 800676a:	bf00      	nop
 800676c:	3770      	adds	r7, #112	@ 0x70
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006772:	b580      	push	{r7, lr}
 8006774:	b084      	sub	sp, #16
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800677e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2201      	movs	r2, #1
 8006784:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800678a:	2b01      	cmp	r3, #1
 800678c:	d108      	bne.n	80067a0 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006792:	085b      	lsrs	r3, r3, #1
 8006794:	b29b      	uxth	r3, r3
 8006796:	4619      	mov	r1, r3
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f7ff feee 	bl	800657a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800679e:	e002      	b.n	80067a6 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f7ff fed8 	bl	8006556 <HAL_UART_RxHalfCpltCallback>
}
 80067a6:	bf00      	nop
 80067a8:	3710      	adds	r7, #16
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b084      	sub	sp, #16
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80067b6:	2300      	movs	r3, #0
 80067b8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067be:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	bf14      	ite	ne
 80067ce:	2301      	movne	r3, #1
 80067d0:	2300      	moveq	r3, #0
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	2b21      	cmp	r3, #33	@ 0x21
 80067e0:	d108      	bne.n	80067f4 <UART_DMAError+0x46>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d005      	beq.n	80067f4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	2200      	movs	r2, #0
 80067ec:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80067ee:	68b8      	ldr	r0, [r7, #8]
 80067f0:	f000 f8c2 	bl	8006978 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067fe:	2b00      	cmp	r3, #0
 8006800:	bf14      	ite	ne
 8006802:	2301      	movne	r3, #1
 8006804:	2300      	moveq	r3, #0
 8006806:	b2db      	uxtb	r3, r3
 8006808:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006810:	b2db      	uxtb	r3, r3
 8006812:	2b22      	cmp	r3, #34	@ 0x22
 8006814:	d108      	bne.n	8006828 <UART_DMAError+0x7a>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d005      	beq.n	8006828 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	2200      	movs	r2, #0
 8006820:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006822:	68b8      	ldr	r0, [r7, #8]
 8006824:	f000 f8cf 	bl	80069c6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800682c:	f043 0210 	orr.w	r2, r3, #16
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006834:	68b8      	ldr	r0, [r7, #8]
 8006836:	f7ff fe97 	bl	8006568 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800683a:	bf00      	nop
 800683c:	3710      	adds	r7, #16
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
	...

08006844 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b098      	sub	sp, #96	@ 0x60
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	4613      	mov	r3, r2
 8006850:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006852:	68ba      	ldr	r2, [r7, #8]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	88fa      	ldrh	r2, [r7, #6]
 800685c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2222      	movs	r2, #34	@ 0x22
 8006868:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006870:	4a3e      	ldr	r2, [pc, #248]	@ (800696c <UART_Start_Receive_DMA+0x128>)
 8006872:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006878:	4a3d      	ldr	r2, [pc, #244]	@ (8006970 <UART_Start_Receive_DMA+0x12c>)
 800687a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006880:	4a3c      	ldr	r2, [pc, #240]	@ (8006974 <UART_Start_Receive_DMA+0x130>)
 8006882:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006888:	2200      	movs	r2, #0
 800688a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800688c:	f107 0308 	add.w	r3, r7, #8
 8006890:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	3304      	adds	r3, #4
 800689c:	4619      	mov	r1, r3
 800689e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	88fb      	ldrh	r3, [r7, #6]
 80068a4:	f7fc fb16 	bl	8002ed4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80068a8:	2300      	movs	r3, #0
 80068aa:	613b      	str	r3, [r7, #16]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	613b      	str	r3, [r7, #16]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	613b      	str	r3, [r7, #16]
 80068bc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d019      	beq.n	80068fa <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	330c      	adds	r3, #12
 80068cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068d0:	e853 3f00 	ldrex	r3, [r3]
 80068d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80068d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	330c      	adds	r3, #12
 80068e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80068e6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80068e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ea:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80068ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80068ee:	e841 2300 	strex	r3, r2, [r1]
 80068f2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80068f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d1e5      	bne.n	80068c6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	3314      	adds	r3, #20
 8006900:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006904:	e853 3f00 	ldrex	r3, [r3]
 8006908:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800690a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800690c:	f043 0301 	orr.w	r3, r3, #1
 8006910:	657b      	str	r3, [r7, #84]	@ 0x54
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	3314      	adds	r3, #20
 8006918:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800691a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800691c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006920:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006922:	e841 2300 	strex	r3, r2, [r1]
 8006926:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800692a:	2b00      	cmp	r3, #0
 800692c:	d1e5      	bne.n	80068fa <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	3314      	adds	r3, #20
 8006934:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	e853 3f00 	ldrex	r3, [r3]
 800693c:	617b      	str	r3, [r7, #20]
   return(result);
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006944:	653b      	str	r3, [r7, #80]	@ 0x50
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	3314      	adds	r3, #20
 800694c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800694e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006950:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006952:	6a39      	ldr	r1, [r7, #32]
 8006954:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006956:	e841 2300 	strex	r3, r2, [r1]
 800695a:	61fb      	str	r3, [r7, #28]
   return(result);
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1e5      	bne.n	800692e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3760      	adds	r7, #96	@ 0x60
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	08006647 	.word	0x08006647
 8006970:	08006773 	.word	0x08006773
 8006974:	080067af 	.word	0x080067af

08006978 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006978:	b480      	push	{r7}
 800697a:	b089      	sub	sp, #36	@ 0x24
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	330c      	adds	r3, #12
 8006986:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	e853 3f00 	ldrex	r3, [r3]
 800698e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006996:	61fb      	str	r3, [r7, #28]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	330c      	adds	r3, #12
 800699e:	69fa      	ldr	r2, [r7, #28]
 80069a0:	61ba      	str	r2, [r7, #24]
 80069a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a4:	6979      	ldr	r1, [r7, #20]
 80069a6:	69ba      	ldr	r2, [r7, #24]
 80069a8:	e841 2300 	strex	r3, r2, [r1]
 80069ac:	613b      	str	r3, [r7, #16]
   return(result);
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1e5      	bne.n	8006980 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2220      	movs	r2, #32
 80069b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80069bc:	bf00      	nop
 80069be:	3724      	adds	r7, #36	@ 0x24
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bc80      	pop	{r7}
 80069c4:	4770      	bx	lr

080069c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069c6:	b480      	push	{r7}
 80069c8:	b095      	sub	sp, #84	@ 0x54
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	330c      	adds	r3, #12
 80069d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069d8:	e853 3f00 	ldrex	r3, [r3]
 80069dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80069de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	330c      	adds	r3, #12
 80069ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80069ee:	643a      	str	r2, [r7, #64]	@ 0x40
 80069f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80069f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80069f6:	e841 2300 	strex	r3, r2, [r1]
 80069fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80069fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1e5      	bne.n	80069ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	3314      	adds	r3, #20
 8006a08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0a:	6a3b      	ldr	r3, [r7, #32]
 8006a0c:	e853 3f00 	ldrex	r3, [r3]
 8006a10:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	f023 0301 	bic.w	r3, r3, #1
 8006a18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	3314      	adds	r3, #20
 8006a20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a24:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a2a:	e841 2300 	strex	r3, r2, [r1]
 8006a2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1e5      	bne.n	8006a02 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d119      	bne.n	8006a72 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	330c      	adds	r3, #12
 8006a44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	e853 3f00 	ldrex	r3, [r3]
 8006a4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	f023 0310 	bic.w	r3, r3, #16
 8006a54:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	330c      	adds	r3, #12
 8006a5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a5e:	61ba      	str	r2, [r7, #24]
 8006a60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a62:	6979      	ldr	r1, [r7, #20]
 8006a64:	69ba      	ldr	r2, [r7, #24]
 8006a66:	e841 2300 	strex	r3, r2, [r1]
 8006a6a:	613b      	str	r3, [r7, #16]
   return(result);
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1e5      	bne.n	8006a3e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2220      	movs	r2, #32
 8006a76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006a80:	bf00      	nop
 8006a82:	3754      	adds	r7, #84	@ 0x54
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bc80      	pop	{r7}
 8006a88:	4770      	bx	lr

08006a8a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b084      	sub	sp, #16
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f7ff fd5f 	bl	8006568 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006aaa:	bf00      	nop
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}

08006ab2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006ab2:	b480      	push	{r7}
 8006ab4:	b085      	sub	sp, #20
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	2b21      	cmp	r3, #33	@ 0x21
 8006ac4:	d13e      	bne.n	8006b44 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ace:	d114      	bne.n	8006afa <UART_Transmit_IT+0x48>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d110      	bne.n	8006afa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6a1b      	ldr	r3, [r3, #32]
 8006adc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	881b      	ldrh	r3, [r3, #0]
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006aec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	1c9a      	adds	r2, r3, #2
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	621a      	str	r2, [r3, #32]
 8006af8:	e008      	b.n	8006b0c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a1b      	ldr	r3, [r3, #32]
 8006afe:	1c59      	adds	r1, r3, #1
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	6211      	str	r1, [r2, #32]
 8006b04:	781a      	ldrb	r2, [r3, #0]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	3b01      	subs	r3, #1
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	4619      	mov	r1, r3
 8006b1a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d10f      	bne.n	8006b40 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68da      	ldr	r2, [r3, #12]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006b2e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	68da      	ldr	r2, [r3, #12]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b3e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006b40:	2300      	movs	r3, #0
 8006b42:	e000      	b.n	8006b46 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006b44:	2302      	movs	r3, #2
  }
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3714      	adds	r7, #20
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bc80      	pop	{r7}
 8006b4e:	4770      	bx	lr

08006b50 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b082      	sub	sp, #8
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68da      	ldr	r2, [r3, #12]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b66:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2220      	movs	r2, #32
 8006b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f7f9 fb57 	bl	8000224 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3708      	adds	r7, #8
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b08c      	sub	sp, #48	@ 0x30
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	2b22      	cmp	r3, #34	@ 0x22
 8006b92:	f040 80ae 	bne.w	8006cf2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b9e:	d117      	bne.n	8006bd0 <UART_Receive_IT+0x50>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d113      	bne.n	8006bd0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bbe:	b29a      	uxth	r2, r3
 8006bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bc2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bc8:	1c9a      	adds	r2, r3, #2
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	629a      	str	r2, [r3, #40]	@ 0x28
 8006bce:	e026      	b.n	8006c1e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006be2:	d007      	beq.n	8006bf4 <UART_Receive_IT+0x74>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10a      	bne.n	8006c02 <UART_Receive_IT+0x82>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d106      	bne.n	8006c02 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	b2da      	uxtb	r2, r3
 8006bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bfe:	701a      	strb	r2, [r3, #0]
 8006c00:	e008      	b.n	8006c14 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c0e:	b2da      	uxtb	r2, r3
 8006c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c12:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c18:	1c5a      	adds	r2, r3, #1
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	3b01      	subs	r3, #1
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d15d      	bne.n	8006cee <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68da      	ldr	r2, [r3, #12]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f022 0220 	bic.w	r2, r2, #32
 8006c40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	68da      	ldr	r2, [r3, #12]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006c50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	695a      	ldr	r2, [r3, #20]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f022 0201 	bic.w	r2, r2, #1
 8006c60:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2220      	movs	r2, #32
 8006c66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d135      	bne.n	8006ce4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	330c      	adds	r3, #12
 8006c84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	e853 3f00 	ldrex	r3, [r3]
 8006c8c:	613b      	str	r3, [r7, #16]
   return(result);
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	f023 0310 	bic.w	r3, r3, #16
 8006c94:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	330c      	adds	r3, #12
 8006c9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c9e:	623a      	str	r2, [r7, #32]
 8006ca0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca2:	69f9      	ldr	r1, [r7, #28]
 8006ca4:	6a3a      	ldr	r2, [r7, #32]
 8006ca6:	e841 2300 	strex	r3, r2, [r1]
 8006caa:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1e5      	bne.n	8006c7e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 0310 	and.w	r3, r3, #16
 8006cbc:	2b10      	cmp	r3, #16
 8006cbe:	d10a      	bne.n	8006cd6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	60fb      	str	r3, [r7, #12]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	60fb      	str	r3, [r7, #12]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	60fb      	str	r3, [r7, #12]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006cda:	4619      	mov	r1, r3
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f7ff fc4c 	bl	800657a <HAL_UARTEx_RxEventCallback>
 8006ce2:	e002      	b.n	8006cea <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f7f9 fab7 	bl	8000258 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006cea:	2300      	movs	r3, #0
 8006cec:	e002      	b.n	8006cf4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	e000      	b.n	8006cf4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006cf2:	2302      	movs	r3, #2
  }
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3730      	adds	r7, #48	@ 0x30
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	68da      	ldr	r2, [r3, #12]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	430a      	orrs	r2, r1
 8006d18:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	689a      	ldr	r2, [r3, #8]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	431a      	orrs	r2, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	695b      	ldr	r3, [r3, #20]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006d36:	f023 030c 	bic.w	r3, r3, #12
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	6812      	ldr	r2, [r2, #0]
 8006d3e:	68b9      	ldr	r1, [r7, #8]
 8006d40:	430b      	orrs	r3, r1
 8006d42:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	695b      	ldr	r3, [r3, #20]
 8006d4a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	699a      	ldr	r2, [r3, #24]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	430a      	orrs	r2, r1
 8006d58:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a2c      	ldr	r2, [pc, #176]	@ (8006e10 <UART_SetConfig+0x114>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d103      	bne.n	8006d6c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006d64:	f7fe f832 	bl	8004dcc <HAL_RCC_GetPCLK2Freq>
 8006d68:	60f8      	str	r0, [r7, #12]
 8006d6a:	e002      	b.n	8006d72 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006d6c:	f7fe f81a 	bl	8004da4 <HAL_RCC_GetPCLK1Freq>
 8006d70:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	4613      	mov	r3, r2
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	4413      	add	r3, r2
 8006d7a:	009a      	lsls	r2, r3, #2
 8006d7c:	441a      	add	r2, r3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d88:	4a22      	ldr	r2, [pc, #136]	@ (8006e14 <UART_SetConfig+0x118>)
 8006d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d8e:	095b      	lsrs	r3, r3, #5
 8006d90:	0119      	lsls	r1, r3, #4
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	4613      	mov	r3, r2
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	4413      	add	r3, r2
 8006d9a:	009a      	lsls	r2, r3, #2
 8006d9c:	441a      	add	r2, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	fbb2 f2f3 	udiv	r2, r2, r3
 8006da8:	4b1a      	ldr	r3, [pc, #104]	@ (8006e14 <UART_SetConfig+0x118>)
 8006daa:	fba3 0302 	umull	r0, r3, r3, r2
 8006dae:	095b      	lsrs	r3, r3, #5
 8006db0:	2064      	movs	r0, #100	@ 0x64
 8006db2:	fb00 f303 	mul.w	r3, r0, r3
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	011b      	lsls	r3, r3, #4
 8006dba:	3332      	adds	r3, #50	@ 0x32
 8006dbc:	4a15      	ldr	r2, [pc, #84]	@ (8006e14 <UART_SetConfig+0x118>)
 8006dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc2:	095b      	lsrs	r3, r3, #5
 8006dc4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006dc8:	4419      	add	r1, r3
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	4613      	mov	r3, r2
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	4413      	add	r3, r2
 8006dd2:	009a      	lsls	r2, r3, #2
 8006dd4:	441a      	add	r2, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	fbb2 f2f3 	udiv	r2, r2, r3
 8006de0:	4b0c      	ldr	r3, [pc, #48]	@ (8006e14 <UART_SetConfig+0x118>)
 8006de2:	fba3 0302 	umull	r0, r3, r3, r2
 8006de6:	095b      	lsrs	r3, r3, #5
 8006de8:	2064      	movs	r0, #100	@ 0x64
 8006dea:	fb00 f303 	mul.w	r3, r0, r3
 8006dee:	1ad3      	subs	r3, r2, r3
 8006df0:	011b      	lsls	r3, r3, #4
 8006df2:	3332      	adds	r3, #50	@ 0x32
 8006df4:	4a07      	ldr	r2, [pc, #28]	@ (8006e14 <UART_SetConfig+0x118>)
 8006df6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dfa:	095b      	lsrs	r3, r3, #5
 8006dfc:	f003 020f 	and.w	r2, r3, #15
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	440a      	add	r2, r1
 8006e06:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006e08:	bf00      	nop
 8006e0a:	3710      	adds	r7, #16
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	40013800 	.word	0x40013800
 8006e14:	51eb851f 	.word	0x51eb851f

08006e18 <std>:
 8006e18:	2300      	movs	r3, #0
 8006e1a:	b510      	push	{r4, lr}
 8006e1c:	4604      	mov	r4, r0
 8006e1e:	e9c0 3300 	strd	r3, r3, [r0]
 8006e22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e26:	6083      	str	r3, [r0, #8]
 8006e28:	8181      	strh	r1, [r0, #12]
 8006e2a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006e2c:	81c2      	strh	r2, [r0, #14]
 8006e2e:	6183      	str	r3, [r0, #24]
 8006e30:	4619      	mov	r1, r3
 8006e32:	2208      	movs	r2, #8
 8006e34:	305c      	adds	r0, #92	@ 0x5c
 8006e36:	f000 f906 	bl	8007046 <memset>
 8006e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e70 <std+0x58>)
 8006e3c:	6224      	str	r4, [r4, #32]
 8006e3e:	6263      	str	r3, [r4, #36]	@ 0x24
 8006e40:	4b0c      	ldr	r3, [pc, #48]	@ (8006e74 <std+0x5c>)
 8006e42:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006e44:	4b0c      	ldr	r3, [pc, #48]	@ (8006e78 <std+0x60>)
 8006e46:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006e48:	4b0c      	ldr	r3, [pc, #48]	@ (8006e7c <std+0x64>)
 8006e4a:	6323      	str	r3, [r4, #48]	@ 0x30
 8006e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8006e80 <std+0x68>)
 8006e4e:	429c      	cmp	r4, r3
 8006e50:	d006      	beq.n	8006e60 <std+0x48>
 8006e52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006e56:	4294      	cmp	r4, r2
 8006e58:	d002      	beq.n	8006e60 <std+0x48>
 8006e5a:	33d0      	adds	r3, #208	@ 0xd0
 8006e5c:	429c      	cmp	r4, r3
 8006e5e:	d105      	bne.n	8006e6c <std+0x54>
 8006e60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e68:	f000 b966 	b.w	8007138 <__retarget_lock_init_recursive>
 8006e6c:	bd10      	pop	{r4, pc}
 8006e6e:	bf00      	nop
 8006e70:	08006fc1 	.word	0x08006fc1
 8006e74:	08006fe3 	.word	0x08006fe3
 8006e78:	0800701b 	.word	0x0800701b
 8006e7c:	0800703f 	.word	0x0800703f
 8006e80:	200007b8 	.word	0x200007b8

08006e84 <stdio_exit_handler>:
 8006e84:	4a02      	ldr	r2, [pc, #8]	@ (8006e90 <stdio_exit_handler+0xc>)
 8006e86:	4903      	ldr	r1, [pc, #12]	@ (8006e94 <stdio_exit_handler+0x10>)
 8006e88:	4803      	ldr	r0, [pc, #12]	@ (8006e98 <stdio_exit_handler+0x14>)
 8006e8a:	f000 b869 	b.w	8006f60 <_fwalk_sglue>
 8006e8e:	bf00      	nop
 8006e90:	20000010 	.word	0x20000010
 8006e94:	080079d1 	.word	0x080079d1
 8006e98:	20000020 	.word	0x20000020

08006e9c <cleanup_stdio>:
 8006e9c:	6841      	ldr	r1, [r0, #4]
 8006e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8006ed0 <cleanup_stdio+0x34>)
 8006ea0:	b510      	push	{r4, lr}
 8006ea2:	4299      	cmp	r1, r3
 8006ea4:	4604      	mov	r4, r0
 8006ea6:	d001      	beq.n	8006eac <cleanup_stdio+0x10>
 8006ea8:	f000 fd92 	bl	80079d0 <_fflush_r>
 8006eac:	68a1      	ldr	r1, [r4, #8]
 8006eae:	4b09      	ldr	r3, [pc, #36]	@ (8006ed4 <cleanup_stdio+0x38>)
 8006eb0:	4299      	cmp	r1, r3
 8006eb2:	d002      	beq.n	8006eba <cleanup_stdio+0x1e>
 8006eb4:	4620      	mov	r0, r4
 8006eb6:	f000 fd8b 	bl	80079d0 <_fflush_r>
 8006eba:	68e1      	ldr	r1, [r4, #12]
 8006ebc:	4b06      	ldr	r3, [pc, #24]	@ (8006ed8 <cleanup_stdio+0x3c>)
 8006ebe:	4299      	cmp	r1, r3
 8006ec0:	d004      	beq.n	8006ecc <cleanup_stdio+0x30>
 8006ec2:	4620      	mov	r0, r4
 8006ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ec8:	f000 bd82 	b.w	80079d0 <_fflush_r>
 8006ecc:	bd10      	pop	{r4, pc}
 8006ece:	bf00      	nop
 8006ed0:	200007b8 	.word	0x200007b8
 8006ed4:	20000820 	.word	0x20000820
 8006ed8:	20000888 	.word	0x20000888

08006edc <global_stdio_init.part.0>:
 8006edc:	b510      	push	{r4, lr}
 8006ede:	4b0b      	ldr	r3, [pc, #44]	@ (8006f0c <global_stdio_init.part.0+0x30>)
 8006ee0:	4c0b      	ldr	r4, [pc, #44]	@ (8006f10 <global_stdio_init.part.0+0x34>)
 8006ee2:	4a0c      	ldr	r2, [pc, #48]	@ (8006f14 <global_stdio_init.part.0+0x38>)
 8006ee4:	4620      	mov	r0, r4
 8006ee6:	601a      	str	r2, [r3, #0]
 8006ee8:	2104      	movs	r1, #4
 8006eea:	2200      	movs	r2, #0
 8006eec:	f7ff ff94 	bl	8006e18 <std>
 8006ef0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	2109      	movs	r1, #9
 8006ef8:	f7ff ff8e 	bl	8006e18 <std>
 8006efc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006f00:	2202      	movs	r2, #2
 8006f02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f06:	2112      	movs	r1, #18
 8006f08:	f7ff bf86 	b.w	8006e18 <std>
 8006f0c:	200008f0 	.word	0x200008f0
 8006f10:	200007b8 	.word	0x200007b8
 8006f14:	08006e85 	.word	0x08006e85

08006f18 <__sfp_lock_acquire>:
 8006f18:	4801      	ldr	r0, [pc, #4]	@ (8006f20 <__sfp_lock_acquire+0x8>)
 8006f1a:	f000 b90e 	b.w	800713a <__retarget_lock_acquire_recursive>
 8006f1e:	bf00      	nop
 8006f20:	200008f9 	.word	0x200008f9

08006f24 <__sfp_lock_release>:
 8006f24:	4801      	ldr	r0, [pc, #4]	@ (8006f2c <__sfp_lock_release+0x8>)
 8006f26:	f000 b909 	b.w	800713c <__retarget_lock_release_recursive>
 8006f2a:	bf00      	nop
 8006f2c:	200008f9 	.word	0x200008f9

08006f30 <__sinit>:
 8006f30:	b510      	push	{r4, lr}
 8006f32:	4604      	mov	r4, r0
 8006f34:	f7ff fff0 	bl	8006f18 <__sfp_lock_acquire>
 8006f38:	6a23      	ldr	r3, [r4, #32]
 8006f3a:	b11b      	cbz	r3, 8006f44 <__sinit+0x14>
 8006f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f40:	f7ff bff0 	b.w	8006f24 <__sfp_lock_release>
 8006f44:	4b04      	ldr	r3, [pc, #16]	@ (8006f58 <__sinit+0x28>)
 8006f46:	6223      	str	r3, [r4, #32]
 8006f48:	4b04      	ldr	r3, [pc, #16]	@ (8006f5c <__sinit+0x2c>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d1f5      	bne.n	8006f3c <__sinit+0xc>
 8006f50:	f7ff ffc4 	bl	8006edc <global_stdio_init.part.0>
 8006f54:	e7f2      	b.n	8006f3c <__sinit+0xc>
 8006f56:	bf00      	nop
 8006f58:	08006e9d 	.word	0x08006e9d
 8006f5c:	200008f0 	.word	0x200008f0

08006f60 <_fwalk_sglue>:
 8006f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f64:	4607      	mov	r7, r0
 8006f66:	4688      	mov	r8, r1
 8006f68:	4614      	mov	r4, r2
 8006f6a:	2600      	movs	r6, #0
 8006f6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f70:	f1b9 0901 	subs.w	r9, r9, #1
 8006f74:	d505      	bpl.n	8006f82 <_fwalk_sglue+0x22>
 8006f76:	6824      	ldr	r4, [r4, #0]
 8006f78:	2c00      	cmp	r4, #0
 8006f7a:	d1f7      	bne.n	8006f6c <_fwalk_sglue+0xc>
 8006f7c:	4630      	mov	r0, r6
 8006f7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f82:	89ab      	ldrh	r3, [r5, #12]
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d907      	bls.n	8006f98 <_fwalk_sglue+0x38>
 8006f88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	d003      	beq.n	8006f98 <_fwalk_sglue+0x38>
 8006f90:	4629      	mov	r1, r5
 8006f92:	4638      	mov	r0, r7
 8006f94:	47c0      	blx	r8
 8006f96:	4306      	orrs	r6, r0
 8006f98:	3568      	adds	r5, #104	@ 0x68
 8006f9a:	e7e9      	b.n	8006f70 <_fwalk_sglue+0x10>

08006f9c <iprintf>:
 8006f9c:	b40f      	push	{r0, r1, r2, r3}
 8006f9e:	b507      	push	{r0, r1, r2, lr}
 8006fa0:	4906      	ldr	r1, [pc, #24]	@ (8006fbc <iprintf+0x20>)
 8006fa2:	ab04      	add	r3, sp, #16
 8006fa4:	6808      	ldr	r0, [r1, #0]
 8006fa6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006faa:	6881      	ldr	r1, [r0, #8]
 8006fac:	9301      	str	r3, [sp, #4]
 8006fae:	f000 f9e5 	bl	800737c <_vfiprintf_r>
 8006fb2:	b003      	add	sp, #12
 8006fb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fb8:	b004      	add	sp, #16
 8006fba:	4770      	bx	lr
 8006fbc:	2000001c 	.word	0x2000001c

08006fc0 <__sread>:
 8006fc0:	b510      	push	{r4, lr}
 8006fc2:	460c      	mov	r4, r1
 8006fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fc8:	f000 f868 	bl	800709c <_read_r>
 8006fcc:	2800      	cmp	r0, #0
 8006fce:	bfab      	itete	ge
 8006fd0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006fd2:	89a3      	ldrhlt	r3, [r4, #12]
 8006fd4:	181b      	addge	r3, r3, r0
 8006fd6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006fda:	bfac      	ite	ge
 8006fdc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006fde:	81a3      	strhlt	r3, [r4, #12]
 8006fe0:	bd10      	pop	{r4, pc}

08006fe2 <__swrite>:
 8006fe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fe6:	461f      	mov	r7, r3
 8006fe8:	898b      	ldrh	r3, [r1, #12]
 8006fea:	4605      	mov	r5, r0
 8006fec:	05db      	lsls	r3, r3, #23
 8006fee:	460c      	mov	r4, r1
 8006ff0:	4616      	mov	r6, r2
 8006ff2:	d505      	bpl.n	8007000 <__swrite+0x1e>
 8006ff4:	2302      	movs	r3, #2
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ffc:	f000 f83c 	bl	8007078 <_lseek_r>
 8007000:	89a3      	ldrh	r3, [r4, #12]
 8007002:	4632      	mov	r2, r6
 8007004:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007008:	81a3      	strh	r3, [r4, #12]
 800700a:	4628      	mov	r0, r5
 800700c:	463b      	mov	r3, r7
 800700e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007012:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007016:	f000 b853 	b.w	80070c0 <_write_r>

0800701a <__sseek>:
 800701a:	b510      	push	{r4, lr}
 800701c:	460c      	mov	r4, r1
 800701e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007022:	f000 f829 	bl	8007078 <_lseek_r>
 8007026:	1c43      	adds	r3, r0, #1
 8007028:	89a3      	ldrh	r3, [r4, #12]
 800702a:	bf15      	itete	ne
 800702c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800702e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007032:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007036:	81a3      	strheq	r3, [r4, #12]
 8007038:	bf18      	it	ne
 800703a:	81a3      	strhne	r3, [r4, #12]
 800703c:	bd10      	pop	{r4, pc}

0800703e <__sclose>:
 800703e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007042:	f000 b809 	b.w	8007058 <_close_r>

08007046 <memset>:
 8007046:	4603      	mov	r3, r0
 8007048:	4402      	add	r2, r0
 800704a:	4293      	cmp	r3, r2
 800704c:	d100      	bne.n	8007050 <memset+0xa>
 800704e:	4770      	bx	lr
 8007050:	f803 1b01 	strb.w	r1, [r3], #1
 8007054:	e7f9      	b.n	800704a <memset+0x4>
	...

08007058 <_close_r>:
 8007058:	b538      	push	{r3, r4, r5, lr}
 800705a:	2300      	movs	r3, #0
 800705c:	4d05      	ldr	r5, [pc, #20]	@ (8007074 <_close_r+0x1c>)
 800705e:	4604      	mov	r4, r0
 8007060:	4608      	mov	r0, r1
 8007062:	602b      	str	r3, [r5, #0]
 8007064:	f7fa ffeb 	bl	800203e <_close>
 8007068:	1c43      	adds	r3, r0, #1
 800706a:	d102      	bne.n	8007072 <_close_r+0x1a>
 800706c:	682b      	ldr	r3, [r5, #0]
 800706e:	b103      	cbz	r3, 8007072 <_close_r+0x1a>
 8007070:	6023      	str	r3, [r4, #0]
 8007072:	bd38      	pop	{r3, r4, r5, pc}
 8007074:	200008f4 	.word	0x200008f4

08007078 <_lseek_r>:
 8007078:	b538      	push	{r3, r4, r5, lr}
 800707a:	4604      	mov	r4, r0
 800707c:	4608      	mov	r0, r1
 800707e:	4611      	mov	r1, r2
 8007080:	2200      	movs	r2, #0
 8007082:	4d05      	ldr	r5, [pc, #20]	@ (8007098 <_lseek_r+0x20>)
 8007084:	602a      	str	r2, [r5, #0]
 8007086:	461a      	mov	r2, r3
 8007088:	f7fa fffd 	bl	8002086 <_lseek>
 800708c:	1c43      	adds	r3, r0, #1
 800708e:	d102      	bne.n	8007096 <_lseek_r+0x1e>
 8007090:	682b      	ldr	r3, [r5, #0]
 8007092:	b103      	cbz	r3, 8007096 <_lseek_r+0x1e>
 8007094:	6023      	str	r3, [r4, #0]
 8007096:	bd38      	pop	{r3, r4, r5, pc}
 8007098:	200008f4 	.word	0x200008f4

0800709c <_read_r>:
 800709c:	b538      	push	{r3, r4, r5, lr}
 800709e:	4604      	mov	r4, r0
 80070a0:	4608      	mov	r0, r1
 80070a2:	4611      	mov	r1, r2
 80070a4:	2200      	movs	r2, #0
 80070a6:	4d05      	ldr	r5, [pc, #20]	@ (80070bc <_read_r+0x20>)
 80070a8:	602a      	str	r2, [r5, #0]
 80070aa:	461a      	mov	r2, r3
 80070ac:	f7fa ff8e 	bl	8001fcc <_read>
 80070b0:	1c43      	adds	r3, r0, #1
 80070b2:	d102      	bne.n	80070ba <_read_r+0x1e>
 80070b4:	682b      	ldr	r3, [r5, #0]
 80070b6:	b103      	cbz	r3, 80070ba <_read_r+0x1e>
 80070b8:	6023      	str	r3, [r4, #0]
 80070ba:	bd38      	pop	{r3, r4, r5, pc}
 80070bc:	200008f4 	.word	0x200008f4

080070c0 <_write_r>:
 80070c0:	b538      	push	{r3, r4, r5, lr}
 80070c2:	4604      	mov	r4, r0
 80070c4:	4608      	mov	r0, r1
 80070c6:	4611      	mov	r1, r2
 80070c8:	2200      	movs	r2, #0
 80070ca:	4d05      	ldr	r5, [pc, #20]	@ (80070e0 <_write_r+0x20>)
 80070cc:	602a      	str	r2, [r5, #0]
 80070ce:	461a      	mov	r2, r3
 80070d0:	f7fa ff99 	bl	8002006 <_write>
 80070d4:	1c43      	adds	r3, r0, #1
 80070d6:	d102      	bne.n	80070de <_write_r+0x1e>
 80070d8:	682b      	ldr	r3, [r5, #0]
 80070da:	b103      	cbz	r3, 80070de <_write_r+0x1e>
 80070dc:	6023      	str	r3, [r4, #0]
 80070de:	bd38      	pop	{r3, r4, r5, pc}
 80070e0:	200008f4 	.word	0x200008f4

080070e4 <__errno>:
 80070e4:	4b01      	ldr	r3, [pc, #4]	@ (80070ec <__errno+0x8>)
 80070e6:	6818      	ldr	r0, [r3, #0]
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop
 80070ec:	2000001c 	.word	0x2000001c

080070f0 <__libc_init_array>:
 80070f0:	b570      	push	{r4, r5, r6, lr}
 80070f2:	2600      	movs	r6, #0
 80070f4:	4d0c      	ldr	r5, [pc, #48]	@ (8007128 <__libc_init_array+0x38>)
 80070f6:	4c0d      	ldr	r4, [pc, #52]	@ (800712c <__libc_init_array+0x3c>)
 80070f8:	1b64      	subs	r4, r4, r5
 80070fa:	10a4      	asrs	r4, r4, #2
 80070fc:	42a6      	cmp	r6, r4
 80070fe:	d109      	bne.n	8007114 <__libc_init_array+0x24>
 8007100:	f000 fdc4 	bl	8007c8c <_init>
 8007104:	2600      	movs	r6, #0
 8007106:	4d0a      	ldr	r5, [pc, #40]	@ (8007130 <__libc_init_array+0x40>)
 8007108:	4c0a      	ldr	r4, [pc, #40]	@ (8007134 <__libc_init_array+0x44>)
 800710a:	1b64      	subs	r4, r4, r5
 800710c:	10a4      	asrs	r4, r4, #2
 800710e:	42a6      	cmp	r6, r4
 8007110:	d105      	bne.n	800711e <__libc_init_array+0x2e>
 8007112:	bd70      	pop	{r4, r5, r6, pc}
 8007114:	f855 3b04 	ldr.w	r3, [r5], #4
 8007118:	4798      	blx	r3
 800711a:	3601      	adds	r6, #1
 800711c:	e7ee      	b.n	80070fc <__libc_init_array+0xc>
 800711e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007122:	4798      	blx	r3
 8007124:	3601      	adds	r6, #1
 8007126:	e7f2      	b.n	800710e <__libc_init_array+0x1e>
 8007128:	08007e98 	.word	0x08007e98
 800712c:	08007e98 	.word	0x08007e98
 8007130:	08007e98 	.word	0x08007e98
 8007134:	08007e9c 	.word	0x08007e9c

08007138 <__retarget_lock_init_recursive>:
 8007138:	4770      	bx	lr

0800713a <__retarget_lock_acquire_recursive>:
 800713a:	4770      	bx	lr

0800713c <__retarget_lock_release_recursive>:
 800713c:	4770      	bx	lr
	...

08007140 <_free_r>:
 8007140:	b538      	push	{r3, r4, r5, lr}
 8007142:	4605      	mov	r5, r0
 8007144:	2900      	cmp	r1, #0
 8007146:	d040      	beq.n	80071ca <_free_r+0x8a>
 8007148:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800714c:	1f0c      	subs	r4, r1, #4
 800714e:	2b00      	cmp	r3, #0
 8007150:	bfb8      	it	lt
 8007152:	18e4      	addlt	r4, r4, r3
 8007154:	f000 f8de 	bl	8007314 <__malloc_lock>
 8007158:	4a1c      	ldr	r2, [pc, #112]	@ (80071cc <_free_r+0x8c>)
 800715a:	6813      	ldr	r3, [r2, #0]
 800715c:	b933      	cbnz	r3, 800716c <_free_r+0x2c>
 800715e:	6063      	str	r3, [r4, #4]
 8007160:	6014      	str	r4, [r2, #0]
 8007162:	4628      	mov	r0, r5
 8007164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007168:	f000 b8da 	b.w	8007320 <__malloc_unlock>
 800716c:	42a3      	cmp	r3, r4
 800716e:	d908      	bls.n	8007182 <_free_r+0x42>
 8007170:	6820      	ldr	r0, [r4, #0]
 8007172:	1821      	adds	r1, r4, r0
 8007174:	428b      	cmp	r3, r1
 8007176:	bf01      	itttt	eq
 8007178:	6819      	ldreq	r1, [r3, #0]
 800717a:	685b      	ldreq	r3, [r3, #4]
 800717c:	1809      	addeq	r1, r1, r0
 800717e:	6021      	streq	r1, [r4, #0]
 8007180:	e7ed      	b.n	800715e <_free_r+0x1e>
 8007182:	461a      	mov	r2, r3
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	b10b      	cbz	r3, 800718c <_free_r+0x4c>
 8007188:	42a3      	cmp	r3, r4
 800718a:	d9fa      	bls.n	8007182 <_free_r+0x42>
 800718c:	6811      	ldr	r1, [r2, #0]
 800718e:	1850      	adds	r0, r2, r1
 8007190:	42a0      	cmp	r0, r4
 8007192:	d10b      	bne.n	80071ac <_free_r+0x6c>
 8007194:	6820      	ldr	r0, [r4, #0]
 8007196:	4401      	add	r1, r0
 8007198:	1850      	adds	r0, r2, r1
 800719a:	4283      	cmp	r3, r0
 800719c:	6011      	str	r1, [r2, #0]
 800719e:	d1e0      	bne.n	8007162 <_free_r+0x22>
 80071a0:	6818      	ldr	r0, [r3, #0]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	4408      	add	r0, r1
 80071a6:	6010      	str	r0, [r2, #0]
 80071a8:	6053      	str	r3, [r2, #4]
 80071aa:	e7da      	b.n	8007162 <_free_r+0x22>
 80071ac:	d902      	bls.n	80071b4 <_free_r+0x74>
 80071ae:	230c      	movs	r3, #12
 80071b0:	602b      	str	r3, [r5, #0]
 80071b2:	e7d6      	b.n	8007162 <_free_r+0x22>
 80071b4:	6820      	ldr	r0, [r4, #0]
 80071b6:	1821      	adds	r1, r4, r0
 80071b8:	428b      	cmp	r3, r1
 80071ba:	bf01      	itttt	eq
 80071bc:	6819      	ldreq	r1, [r3, #0]
 80071be:	685b      	ldreq	r3, [r3, #4]
 80071c0:	1809      	addeq	r1, r1, r0
 80071c2:	6021      	streq	r1, [r4, #0]
 80071c4:	6063      	str	r3, [r4, #4]
 80071c6:	6054      	str	r4, [r2, #4]
 80071c8:	e7cb      	b.n	8007162 <_free_r+0x22>
 80071ca:	bd38      	pop	{r3, r4, r5, pc}
 80071cc:	20000900 	.word	0x20000900

080071d0 <sbrk_aligned>:
 80071d0:	b570      	push	{r4, r5, r6, lr}
 80071d2:	4e0f      	ldr	r6, [pc, #60]	@ (8007210 <sbrk_aligned+0x40>)
 80071d4:	460c      	mov	r4, r1
 80071d6:	6831      	ldr	r1, [r6, #0]
 80071d8:	4605      	mov	r5, r0
 80071da:	b911      	cbnz	r1, 80071e2 <sbrk_aligned+0x12>
 80071dc:	f000 fcb4 	bl	8007b48 <_sbrk_r>
 80071e0:	6030      	str	r0, [r6, #0]
 80071e2:	4621      	mov	r1, r4
 80071e4:	4628      	mov	r0, r5
 80071e6:	f000 fcaf 	bl	8007b48 <_sbrk_r>
 80071ea:	1c43      	adds	r3, r0, #1
 80071ec:	d103      	bne.n	80071f6 <sbrk_aligned+0x26>
 80071ee:	f04f 34ff 	mov.w	r4, #4294967295
 80071f2:	4620      	mov	r0, r4
 80071f4:	bd70      	pop	{r4, r5, r6, pc}
 80071f6:	1cc4      	adds	r4, r0, #3
 80071f8:	f024 0403 	bic.w	r4, r4, #3
 80071fc:	42a0      	cmp	r0, r4
 80071fe:	d0f8      	beq.n	80071f2 <sbrk_aligned+0x22>
 8007200:	1a21      	subs	r1, r4, r0
 8007202:	4628      	mov	r0, r5
 8007204:	f000 fca0 	bl	8007b48 <_sbrk_r>
 8007208:	3001      	adds	r0, #1
 800720a:	d1f2      	bne.n	80071f2 <sbrk_aligned+0x22>
 800720c:	e7ef      	b.n	80071ee <sbrk_aligned+0x1e>
 800720e:	bf00      	nop
 8007210:	200008fc 	.word	0x200008fc

08007214 <_malloc_r>:
 8007214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007218:	1ccd      	adds	r5, r1, #3
 800721a:	f025 0503 	bic.w	r5, r5, #3
 800721e:	3508      	adds	r5, #8
 8007220:	2d0c      	cmp	r5, #12
 8007222:	bf38      	it	cc
 8007224:	250c      	movcc	r5, #12
 8007226:	2d00      	cmp	r5, #0
 8007228:	4606      	mov	r6, r0
 800722a:	db01      	blt.n	8007230 <_malloc_r+0x1c>
 800722c:	42a9      	cmp	r1, r5
 800722e:	d904      	bls.n	800723a <_malloc_r+0x26>
 8007230:	230c      	movs	r3, #12
 8007232:	6033      	str	r3, [r6, #0]
 8007234:	2000      	movs	r0, #0
 8007236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800723a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007310 <_malloc_r+0xfc>
 800723e:	f000 f869 	bl	8007314 <__malloc_lock>
 8007242:	f8d8 3000 	ldr.w	r3, [r8]
 8007246:	461c      	mov	r4, r3
 8007248:	bb44      	cbnz	r4, 800729c <_malloc_r+0x88>
 800724a:	4629      	mov	r1, r5
 800724c:	4630      	mov	r0, r6
 800724e:	f7ff ffbf 	bl	80071d0 <sbrk_aligned>
 8007252:	1c43      	adds	r3, r0, #1
 8007254:	4604      	mov	r4, r0
 8007256:	d158      	bne.n	800730a <_malloc_r+0xf6>
 8007258:	f8d8 4000 	ldr.w	r4, [r8]
 800725c:	4627      	mov	r7, r4
 800725e:	2f00      	cmp	r7, #0
 8007260:	d143      	bne.n	80072ea <_malloc_r+0xd6>
 8007262:	2c00      	cmp	r4, #0
 8007264:	d04b      	beq.n	80072fe <_malloc_r+0xea>
 8007266:	6823      	ldr	r3, [r4, #0]
 8007268:	4639      	mov	r1, r7
 800726a:	4630      	mov	r0, r6
 800726c:	eb04 0903 	add.w	r9, r4, r3
 8007270:	f000 fc6a 	bl	8007b48 <_sbrk_r>
 8007274:	4581      	cmp	r9, r0
 8007276:	d142      	bne.n	80072fe <_malloc_r+0xea>
 8007278:	6821      	ldr	r1, [r4, #0]
 800727a:	4630      	mov	r0, r6
 800727c:	1a6d      	subs	r5, r5, r1
 800727e:	4629      	mov	r1, r5
 8007280:	f7ff ffa6 	bl	80071d0 <sbrk_aligned>
 8007284:	3001      	adds	r0, #1
 8007286:	d03a      	beq.n	80072fe <_malloc_r+0xea>
 8007288:	6823      	ldr	r3, [r4, #0]
 800728a:	442b      	add	r3, r5
 800728c:	6023      	str	r3, [r4, #0]
 800728e:	f8d8 3000 	ldr.w	r3, [r8]
 8007292:	685a      	ldr	r2, [r3, #4]
 8007294:	bb62      	cbnz	r2, 80072f0 <_malloc_r+0xdc>
 8007296:	f8c8 7000 	str.w	r7, [r8]
 800729a:	e00f      	b.n	80072bc <_malloc_r+0xa8>
 800729c:	6822      	ldr	r2, [r4, #0]
 800729e:	1b52      	subs	r2, r2, r5
 80072a0:	d420      	bmi.n	80072e4 <_malloc_r+0xd0>
 80072a2:	2a0b      	cmp	r2, #11
 80072a4:	d917      	bls.n	80072d6 <_malloc_r+0xc2>
 80072a6:	1961      	adds	r1, r4, r5
 80072a8:	42a3      	cmp	r3, r4
 80072aa:	6025      	str	r5, [r4, #0]
 80072ac:	bf18      	it	ne
 80072ae:	6059      	strne	r1, [r3, #4]
 80072b0:	6863      	ldr	r3, [r4, #4]
 80072b2:	bf08      	it	eq
 80072b4:	f8c8 1000 	streq.w	r1, [r8]
 80072b8:	5162      	str	r2, [r4, r5]
 80072ba:	604b      	str	r3, [r1, #4]
 80072bc:	4630      	mov	r0, r6
 80072be:	f000 f82f 	bl	8007320 <__malloc_unlock>
 80072c2:	f104 000b 	add.w	r0, r4, #11
 80072c6:	1d23      	adds	r3, r4, #4
 80072c8:	f020 0007 	bic.w	r0, r0, #7
 80072cc:	1ac2      	subs	r2, r0, r3
 80072ce:	bf1c      	itt	ne
 80072d0:	1a1b      	subne	r3, r3, r0
 80072d2:	50a3      	strne	r3, [r4, r2]
 80072d4:	e7af      	b.n	8007236 <_malloc_r+0x22>
 80072d6:	6862      	ldr	r2, [r4, #4]
 80072d8:	42a3      	cmp	r3, r4
 80072da:	bf0c      	ite	eq
 80072dc:	f8c8 2000 	streq.w	r2, [r8]
 80072e0:	605a      	strne	r2, [r3, #4]
 80072e2:	e7eb      	b.n	80072bc <_malloc_r+0xa8>
 80072e4:	4623      	mov	r3, r4
 80072e6:	6864      	ldr	r4, [r4, #4]
 80072e8:	e7ae      	b.n	8007248 <_malloc_r+0x34>
 80072ea:	463c      	mov	r4, r7
 80072ec:	687f      	ldr	r7, [r7, #4]
 80072ee:	e7b6      	b.n	800725e <_malloc_r+0x4a>
 80072f0:	461a      	mov	r2, r3
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	42a3      	cmp	r3, r4
 80072f6:	d1fb      	bne.n	80072f0 <_malloc_r+0xdc>
 80072f8:	2300      	movs	r3, #0
 80072fa:	6053      	str	r3, [r2, #4]
 80072fc:	e7de      	b.n	80072bc <_malloc_r+0xa8>
 80072fe:	230c      	movs	r3, #12
 8007300:	4630      	mov	r0, r6
 8007302:	6033      	str	r3, [r6, #0]
 8007304:	f000 f80c 	bl	8007320 <__malloc_unlock>
 8007308:	e794      	b.n	8007234 <_malloc_r+0x20>
 800730a:	6005      	str	r5, [r0, #0]
 800730c:	e7d6      	b.n	80072bc <_malloc_r+0xa8>
 800730e:	bf00      	nop
 8007310:	20000900 	.word	0x20000900

08007314 <__malloc_lock>:
 8007314:	4801      	ldr	r0, [pc, #4]	@ (800731c <__malloc_lock+0x8>)
 8007316:	f7ff bf10 	b.w	800713a <__retarget_lock_acquire_recursive>
 800731a:	bf00      	nop
 800731c:	200008f8 	.word	0x200008f8

08007320 <__malloc_unlock>:
 8007320:	4801      	ldr	r0, [pc, #4]	@ (8007328 <__malloc_unlock+0x8>)
 8007322:	f7ff bf0b 	b.w	800713c <__retarget_lock_release_recursive>
 8007326:	bf00      	nop
 8007328:	200008f8 	.word	0x200008f8

0800732c <__sfputc_r>:
 800732c:	6893      	ldr	r3, [r2, #8]
 800732e:	b410      	push	{r4}
 8007330:	3b01      	subs	r3, #1
 8007332:	2b00      	cmp	r3, #0
 8007334:	6093      	str	r3, [r2, #8]
 8007336:	da07      	bge.n	8007348 <__sfputc_r+0x1c>
 8007338:	6994      	ldr	r4, [r2, #24]
 800733a:	42a3      	cmp	r3, r4
 800733c:	db01      	blt.n	8007342 <__sfputc_r+0x16>
 800733e:	290a      	cmp	r1, #10
 8007340:	d102      	bne.n	8007348 <__sfputc_r+0x1c>
 8007342:	bc10      	pop	{r4}
 8007344:	f000 bb6c 	b.w	8007a20 <__swbuf_r>
 8007348:	6813      	ldr	r3, [r2, #0]
 800734a:	1c58      	adds	r0, r3, #1
 800734c:	6010      	str	r0, [r2, #0]
 800734e:	7019      	strb	r1, [r3, #0]
 8007350:	4608      	mov	r0, r1
 8007352:	bc10      	pop	{r4}
 8007354:	4770      	bx	lr

08007356 <__sfputs_r>:
 8007356:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007358:	4606      	mov	r6, r0
 800735a:	460f      	mov	r7, r1
 800735c:	4614      	mov	r4, r2
 800735e:	18d5      	adds	r5, r2, r3
 8007360:	42ac      	cmp	r4, r5
 8007362:	d101      	bne.n	8007368 <__sfputs_r+0x12>
 8007364:	2000      	movs	r0, #0
 8007366:	e007      	b.n	8007378 <__sfputs_r+0x22>
 8007368:	463a      	mov	r2, r7
 800736a:	4630      	mov	r0, r6
 800736c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007370:	f7ff ffdc 	bl	800732c <__sfputc_r>
 8007374:	1c43      	adds	r3, r0, #1
 8007376:	d1f3      	bne.n	8007360 <__sfputs_r+0xa>
 8007378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800737c <_vfiprintf_r>:
 800737c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007380:	460d      	mov	r5, r1
 8007382:	4614      	mov	r4, r2
 8007384:	4698      	mov	r8, r3
 8007386:	4606      	mov	r6, r0
 8007388:	b09d      	sub	sp, #116	@ 0x74
 800738a:	b118      	cbz	r0, 8007394 <_vfiprintf_r+0x18>
 800738c:	6a03      	ldr	r3, [r0, #32]
 800738e:	b90b      	cbnz	r3, 8007394 <_vfiprintf_r+0x18>
 8007390:	f7ff fdce 	bl	8006f30 <__sinit>
 8007394:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007396:	07d9      	lsls	r1, r3, #31
 8007398:	d405      	bmi.n	80073a6 <_vfiprintf_r+0x2a>
 800739a:	89ab      	ldrh	r3, [r5, #12]
 800739c:	059a      	lsls	r2, r3, #22
 800739e:	d402      	bmi.n	80073a6 <_vfiprintf_r+0x2a>
 80073a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073a2:	f7ff feca 	bl	800713a <__retarget_lock_acquire_recursive>
 80073a6:	89ab      	ldrh	r3, [r5, #12]
 80073a8:	071b      	lsls	r3, r3, #28
 80073aa:	d501      	bpl.n	80073b0 <_vfiprintf_r+0x34>
 80073ac:	692b      	ldr	r3, [r5, #16]
 80073ae:	b99b      	cbnz	r3, 80073d8 <_vfiprintf_r+0x5c>
 80073b0:	4629      	mov	r1, r5
 80073b2:	4630      	mov	r0, r6
 80073b4:	f000 fb72 	bl	8007a9c <__swsetup_r>
 80073b8:	b170      	cbz	r0, 80073d8 <_vfiprintf_r+0x5c>
 80073ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073bc:	07dc      	lsls	r4, r3, #31
 80073be:	d504      	bpl.n	80073ca <_vfiprintf_r+0x4e>
 80073c0:	f04f 30ff 	mov.w	r0, #4294967295
 80073c4:	b01d      	add	sp, #116	@ 0x74
 80073c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ca:	89ab      	ldrh	r3, [r5, #12]
 80073cc:	0598      	lsls	r0, r3, #22
 80073ce:	d4f7      	bmi.n	80073c0 <_vfiprintf_r+0x44>
 80073d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073d2:	f7ff feb3 	bl	800713c <__retarget_lock_release_recursive>
 80073d6:	e7f3      	b.n	80073c0 <_vfiprintf_r+0x44>
 80073d8:	2300      	movs	r3, #0
 80073da:	9309      	str	r3, [sp, #36]	@ 0x24
 80073dc:	2320      	movs	r3, #32
 80073de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80073e2:	2330      	movs	r3, #48	@ 0x30
 80073e4:	f04f 0901 	mov.w	r9, #1
 80073e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80073ec:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007598 <_vfiprintf_r+0x21c>
 80073f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80073f4:	4623      	mov	r3, r4
 80073f6:	469a      	mov	sl, r3
 80073f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073fc:	b10a      	cbz	r2, 8007402 <_vfiprintf_r+0x86>
 80073fe:	2a25      	cmp	r2, #37	@ 0x25
 8007400:	d1f9      	bne.n	80073f6 <_vfiprintf_r+0x7a>
 8007402:	ebba 0b04 	subs.w	fp, sl, r4
 8007406:	d00b      	beq.n	8007420 <_vfiprintf_r+0xa4>
 8007408:	465b      	mov	r3, fp
 800740a:	4622      	mov	r2, r4
 800740c:	4629      	mov	r1, r5
 800740e:	4630      	mov	r0, r6
 8007410:	f7ff ffa1 	bl	8007356 <__sfputs_r>
 8007414:	3001      	adds	r0, #1
 8007416:	f000 80a7 	beq.w	8007568 <_vfiprintf_r+0x1ec>
 800741a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800741c:	445a      	add	r2, fp
 800741e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007420:	f89a 3000 	ldrb.w	r3, [sl]
 8007424:	2b00      	cmp	r3, #0
 8007426:	f000 809f 	beq.w	8007568 <_vfiprintf_r+0x1ec>
 800742a:	2300      	movs	r3, #0
 800742c:	f04f 32ff 	mov.w	r2, #4294967295
 8007430:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007434:	f10a 0a01 	add.w	sl, sl, #1
 8007438:	9304      	str	r3, [sp, #16]
 800743a:	9307      	str	r3, [sp, #28]
 800743c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007440:	931a      	str	r3, [sp, #104]	@ 0x68
 8007442:	4654      	mov	r4, sl
 8007444:	2205      	movs	r2, #5
 8007446:	f814 1b01 	ldrb.w	r1, [r4], #1
 800744a:	4853      	ldr	r0, [pc, #332]	@ (8007598 <_vfiprintf_r+0x21c>)
 800744c:	f000 fb8c 	bl	8007b68 <memchr>
 8007450:	9a04      	ldr	r2, [sp, #16]
 8007452:	b9d8      	cbnz	r0, 800748c <_vfiprintf_r+0x110>
 8007454:	06d1      	lsls	r1, r2, #27
 8007456:	bf44      	itt	mi
 8007458:	2320      	movmi	r3, #32
 800745a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800745e:	0713      	lsls	r3, r2, #28
 8007460:	bf44      	itt	mi
 8007462:	232b      	movmi	r3, #43	@ 0x2b
 8007464:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007468:	f89a 3000 	ldrb.w	r3, [sl]
 800746c:	2b2a      	cmp	r3, #42	@ 0x2a
 800746e:	d015      	beq.n	800749c <_vfiprintf_r+0x120>
 8007470:	4654      	mov	r4, sl
 8007472:	2000      	movs	r0, #0
 8007474:	f04f 0c0a 	mov.w	ip, #10
 8007478:	9a07      	ldr	r2, [sp, #28]
 800747a:	4621      	mov	r1, r4
 800747c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007480:	3b30      	subs	r3, #48	@ 0x30
 8007482:	2b09      	cmp	r3, #9
 8007484:	d94b      	bls.n	800751e <_vfiprintf_r+0x1a2>
 8007486:	b1b0      	cbz	r0, 80074b6 <_vfiprintf_r+0x13a>
 8007488:	9207      	str	r2, [sp, #28]
 800748a:	e014      	b.n	80074b6 <_vfiprintf_r+0x13a>
 800748c:	eba0 0308 	sub.w	r3, r0, r8
 8007490:	fa09 f303 	lsl.w	r3, r9, r3
 8007494:	4313      	orrs	r3, r2
 8007496:	46a2      	mov	sl, r4
 8007498:	9304      	str	r3, [sp, #16]
 800749a:	e7d2      	b.n	8007442 <_vfiprintf_r+0xc6>
 800749c:	9b03      	ldr	r3, [sp, #12]
 800749e:	1d19      	adds	r1, r3, #4
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	9103      	str	r1, [sp, #12]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	bfbb      	ittet	lt
 80074a8:	425b      	neglt	r3, r3
 80074aa:	f042 0202 	orrlt.w	r2, r2, #2
 80074ae:	9307      	strge	r3, [sp, #28]
 80074b0:	9307      	strlt	r3, [sp, #28]
 80074b2:	bfb8      	it	lt
 80074b4:	9204      	strlt	r2, [sp, #16]
 80074b6:	7823      	ldrb	r3, [r4, #0]
 80074b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80074ba:	d10a      	bne.n	80074d2 <_vfiprintf_r+0x156>
 80074bc:	7863      	ldrb	r3, [r4, #1]
 80074be:	2b2a      	cmp	r3, #42	@ 0x2a
 80074c0:	d132      	bne.n	8007528 <_vfiprintf_r+0x1ac>
 80074c2:	9b03      	ldr	r3, [sp, #12]
 80074c4:	3402      	adds	r4, #2
 80074c6:	1d1a      	adds	r2, r3, #4
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	9203      	str	r2, [sp, #12]
 80074cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80074d0:	9305      	str	r3, [sp, #20]
 80074d2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800759c <_vfiprintf_r+0x220>
 80074d6:	2203      	movs	r2, #3
 80074d8:	4650      	mov	r0, sl
 80074da:	7821      	ldrb	r1, [r4, #0]
 80074dc:	f000 fb44 	bl	8007b68 <memchr>
 80074e0:	b138      	cbz	r0, 80074f2 <_vfiprintf_r+0x176>
 80074e2:	2240      	movs	r2, #64	@ 0x40
 80074e4:	9b04      	ldr	r3, [sp, #16]
 80074e6:	eba0 000a 	sub.w	r0, r0, sl
 80074ea:	4082      	lsls	r2, r0
 80074ec:	4313      	orrs	r3, r2
 80074ee:	3401      	adds	r4, #1
 80074f0:	9304      	str	r3, [sp, #16]
 80074f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074f6:	2206      	movs	r2, #6
 80074f8:	4829      	ldr	r0, [pc, #164]	@ (80075a0 <_vfiprintf_r+0x224>)
 80074fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80074fe:	f000 fb33 	bl	8007b68 <memchr>
 8007502:	2800      	cmp	r0, #0
 8007504:	d03f      	beq.n	8007586 <_vfiprintf_r+0x20a>
 8007506:	4b27      	ldr	r3, [pc, #156]	@ (80075a4 <_vfiprintf_r+0x228>)
 8007508:	bb1b      	cbnz	r3, 8007552 <_vfiprintf_r+0x1d6>
 800750a:	9b03      	ldr	r3, [sp, #12]
 800750c:	3307      	adds	r3, #7
 800750e:	f023 0307 	bic.w	r3, r3, #7
 8007512:	3308      	adds	r3, #8
 8007514:	9303      	str	r3, [sp, #12]
 8007516:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007518:	443b      	add	r3, r7
 800751a:	9309      	str	r3, [sp, #36]	@ 0x24
 800751c:	e76a      	b.n	80073f4 <_vfiprintf_r+0x78>
 800751e:	460c      	mov	r4, r1
 8007520:	2001      	movs	r0, #1
 8007522:	fb0c 3202 	mla	r2, ip, r2, r3
 8007526:	e7a8      	b.n	800747a <_vfiprintf_r+0xfe>
 8007528:	2300      	movs	r3, #0
 800752a:	f04f 0c0a 	mov.w	ip, #10
 800752e:	4619      	mov	r1, r3
 8007530:	3401      	adds	r4, #1
 8007532:	9305      	str	r3, [sp, #20]
 8007534:	4620      	mov	r0, r4
 8007536:	f810 2b01 	ldrb.w	r2, [r0], #1
 800753a:	3a30      	subs	r2, #48	@ 0x30
 800753c:	2a09      	cmp	r2, #9
 800753e:	d903      	bls.n	8007548 <_vfiprintf_r+0x1cc>
 8007540:	2b00      	cmp	r3, #0
 8007542:	d0c6      	beq.n	80074d2 <_vfiprintf_r+0x156>
 8007544:	9105      	str	r1, [sp, #20]
 8007546:	e7c4      	b.n	80074d2 <_vfiprintf_r+0x156>
 8007548:	4604      	mov	r4, r0
 800754a:	2301      	movs	r3, #1
 800754c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007550:	e7f0      	b.n	8007534 <_vfiprintf_r+0x1b8>
 8007552:	ab03      	add	r3, sp, #12
 8007554:	9300      	str	r3, [sp, #0]
 8007556:	462a      	mov	r2, r5
 8007558:	4630      	mov	r0, r6
 800755a:	4b13      	ldr	r3, [pc, #76]	@ (80075a8 <_vfiprintf_r+0x22c>)
 800755c:	a904      	add	r1, sp, #16
 800755e:	f3af 8000 	nop.w
 8007562:	4607      	mov	r7, r0
 8007564:	1c78      	adds	r0, r7, #1
 8007566:	d1d6      	bne.n	8007516 <_vfiprintf_r+0x19a>
 8007568:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800756a:	07d9      	lsls	r1, r3, #31
 800756c:	d405      	bmi.n	800757a <_vfiprintf_r+0x1fe>
 800756e:	89ab      	ldrh	r3, [r5, #12]
 8007570:	059a      	lsls	r2, r3, #22
 8007572:	d402      	bmi.n	800757a <_vfiprintf_r+0x1fe>
 8007574:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007576:	f7ff fde1 	bl	800713c <__retarget_lock_release_recursive>
 800757a:	89ab      	ldrh	r3, [r5, #12]
 800757c:	065b      	lsls	r3, r3, #25
 800757e:	f53f af1f 	bmi.w	80073c0 <_vfiprintf_r+0x44>
 8007582:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007584:	e71e      	b.n	80073c4 <_vfiprintf_r+0x48>
 8007586:	ab03      	add	r3, sp, #12
 8007588:	9300      	str	r3, [sp, #0]
 800758a:	462a      	mov	r2, r5
 800758c:	4630      	mov	r0, r6
 800758e:	4b06      	ldr	r3, [pc, #24]	@ (80075a8 <_vfiprintf_r+0x22c>)
 8007590:	a904      	add	r1, sp, #16
 8007592:	f000 f87d 	bl	8007690 <_printf_i>
 8007596:	e7e4      	b.n	8007562 <_vfiprintf_r+0x1e6>
 8007598:	08007e62 	.word	0x08007e62
 800759c:	08007e68 	.word	0x08007e68
 80075a0:	08007e6c 	.word	0x08007e6c
 80075a4:	00000000 	.word	0x00000000
 80075a8:	08007357 	.word	0x08007357

080075ac <_printf_common>:
 80075ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075b0:	4616      	mov	r6, r2
 80075b2:	4698      	mov	r8, r3
 80075b4:	688a      	ldr	r2, [r1, #8]
 80075b6:	690b      	ldr	r3, [r1, #16]
 80075b8:	4607      	mov	r7, r0
 80075ba:	4293      	cmp	r3, r2
 80075bc:	bfb8      	it	lt
 80075be:	4613      	movlt	r3, r2
 80075c0:	6033      	str	r3, [r6, #0]
 80075c2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80075c6:	460c      	mov	r4, r1
 80075c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80075cc:	b10a      	cbz	r2, 80075d2 <_printf_common+0x26>
 80075ce:	3301      	adds	r3, #1
 80075d0:	6033      	str	r3, [r6, #0]
 80075d2:	6823      	ldr	r3, [r4, #0]
 80075d4:	0699      	lsls	r1, r3, #26
 80075d6:	bf42      	ittt	mi
 80075d8:	6833      	ldrmi	r3, [r6, #0]
 80075da:	3302      	addmi	r3, #2
 80075dc:	6033      	strmi	r3, [r6, #0]
 80075de:	6825      	ldr	r5, [r4, #0]
 80075e0:	f015 0506 	ands.w	r5, r5, #6
 80075e4:	d106      	bne.n	80075f4 <_printf_common+0x48>
 80075e6:	f104 0a19 	add.w	sl, r4, #25
 80075ea:	68e3      	ldr	r3, [r4, #12]
 80075ec:	6832      	ldr	r2, [r6, #0]
 80075ee:	1a9b      	subs	r3, r3, r2
 80075f0:	42ab      	cmp	r3, r5
 80075f2:	dc2b      	bgt.n	800764c <_printf_common+0xa0>
 80075f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80075f8:	6822      	ldr	r2, [r4, #0]
 80075fa:	3b00      	subs	r3, #0
 80075fc:	bf18      	it	ne
 80075fe:	2301      	movne	r3, #1
 8007600:	0692      	lsls	r2, r2, #26
 8007602:	d430      	bmi.n	8007666 <_printf_common+0xba>
 8007604:	4641      	mov	r1, r8
 8007606:	4638      	mov	r0, r7
 8007608:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800760c:	47c8      	blx	r9
 800760e:	3001      	adds	r0, #1
 8007610:	d023      	beq.n	800765a <_printf_common+0xae>
 8007612:	6823      	ldr	r3, [r4, #0]
 8007614:	6922      	ldr	r2, [r4, #16]
 8007616:	f003 0306 	and.w	r3, r3, #6
 800761a:	2b04      	cmp	r3, #4
 800761c:	bf14      	ite	ne
 800761e:	2500      	movne	r5, #0
 8007620:	6833      	ldreq	r3, [r6, #0]
 8007622:	f04f 0600 	mov.w	r6, #0
 8007626:	bf08      	it	eq
 8007628:	68e5      	ldreq	r5, [r4, #12]
 800762a:	f104 041a 	add.w	r4, r4, #26
 800762e:	bf08      	it	eq
 8007630:	1aed      	subeq	r5, r5, r3
 8007632:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007636:	bf08      	it	eq
 8007638:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800763c:	4293      	cmp	r3, r2
 800763e:	bfc4      	itt	gt
 8007640:	1a9b      	subgt	r3, r3, r2
 8007642:	18ed      	addgt	r5, r5, r3
 8007644:	42b5      	cmp	r5, r6
 8007646:	d11a      	bne.n	800767e <_printf_common+0xd2>
 8007648:	2000      	movs	r0, #0
 800764a:	e008      	b.n	800765e <_printf_common+0xb2>
 800764c:	2301      	movs	r3, #1
 800764e:	4652      	mov	r2, sl
 8007650:	4641      	mov	r1, r8
 8007652:	4638      	mov	r0, r7
 8007654:	47c8      	blx	r9
 8007656:	3001      	adds	r0, #1
 8007658:	d103      	bne.n	8007662 <_printf_common+0xb6>
 800765a:	f04f 30ff 	mov.w	r0, #4294967295
 800765e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007662:	3501      	adds	r5, #1
 8007664:	e7c1      	b.n	80075ea <_printf_common+0x3e>
 8007666:	2030      	movs	r0, #48	@ 0x30
 8007668:	18e1      	adds	r1, r4, r3
 800766a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800766e:	1c5a      	adds	r2, r3, #1
 8007670:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007674:	4422      	add	r2, r4
 8007676:	3302      	adds	r3, #2
 8007678:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800767c:	e7c2      	b.n	8007604 <_printf_common+0x58>
 800767e:	2301      	movs	r3, #1
 8007680:	4622      	mov	r2, r4
 8007682:	4641      	mov	r1, r8
 8007684:	4638      	mov	r0, r7
 8007686:	47c8      	blx	r9
 8007688:	3001      	adds	r0, #1
 800768a:	d0e6      	beq.n	800765a <_printf_common+0xae>
 800768c:	3601      	adds	r6, #1
 800768e:	e7d9      	b.n	8007644 <_printf_common+0x98>

08007690 <_printf_i>:
 8007690:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007694:	7e0f      	ldrb	r7, [r1, #24]
 8007696:	4691      	mov	r9, r2
 8007698:	2f78      	cmp	r7, #120	@ 0x78
 800769a:	4680      	mov	r8, r0
 800769c:	460c      	mov	r4, r1
 800769e:	469a      	mov	sl, r3
 80076a0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80076a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80076a6:	d807      	bhi.n	80076b8 <_printf_i+0x28>
 80076a8:	2f62      	cmp	r7, #98	@ 0x62
 80076aa:	d80a      	bhi.n	80076c2 <_printf_i+0x32>
 80076ac:	2f00      	cmp	r7, #0
 80076ae:	f000 80d3 	beq.w	8007858 <_printf_i+0x1c8>
 80076b2:	2f58      	cmp	r7, #88	@ 0x58
 80076b4:	f000 80ba 	beq.w	800782c <_printf_i+0x19c>
 80076b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80076c0:	e03a      	b.n	8007738 <_printf_i+0xa8>
 80076c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80076c6:	2b15      	cmp	r3, #21
 80076c8:	d8f6      	bhi.n	80076b8 <_printf_i+0x28>
 80076ca:	a101      	add	r1, pc, #4	@ (adr r1, 80076d0 <_printf_i+0x40>)
 80076cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80076d0:	08007729 	.word	0x08007729
 80076d4:	0800773d 	.word	0x0800773d
 80076d8:	080076b9 	.word	0x080076b9
 80076dc:	080076b9 	.word	0x080076b9
 80076e0:	080076b9 	.word	0x080076b9
 80076e4:	080076b9 	.word	0x080076b9
 80076e8:	0800773d 	.word	0x0800773d
 80076ec:	080076b9 	.word	0x080076b9
 80076f0:	080076b9 	.word	0x080076b9
 80076f4:	080076b9 	.word	0x080076b9
 80076f8:	080076b9 	.word	0x080076b9
 80076fc:	0800783f 	.word	0x0800783f
 8007700:	08007767 	.word	0x08007767
 8007704:	080077f9 	.word	0x080077f9
 8007708:	080076b9 	.word	0x080076b9
 800770c:	080076b9 	.word	0x080076b9
 8007710:	08007861 	.word	0x08007861
 8007714:	080076b9 	.word	0x080076b9
 8007718:	08007767 	.word	0x08007767
 800771c:	080076b9 	.word	0x080076b9
 8007720:	080076b9 	.word	0x080076b9
 8007724:	08007801 	.word	0x08007801
 8007728:	6833      	ldr	r3, [r6, #0]
 800772a:	1d1a      	adds	r2, r3, #4
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	6032      	str	r2, [r6, #0]
 8007730:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007734:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007738:	2301      	movs	r3, #1
 800773a:	e09e      	b.n	800787a <_printf_i+0x1ea>
 800773c:	6833      	ldr	r3, [r6, #0]
 800773e:	6820      	ldr	r0, [r4, #0]
 8007740:	1d19      	adds	r1, r3, #4
 8007742:	6031      	str	r1, [r6, #0]
 8007744:	0606      	lsls	r6, r0, #24
 8007746:	d501      	bpl.n	800774c <_printf_i+0xbc>
 8007748:	681d      	ldr	r5, [r3, #0]
 800774a:	e003      	b.n	8007754 <_printf_i+0xc4>
 800774c:	0645      	lsls	r5, r0, #25
 800774e:	d5fb      	bpl.n	8007748 <_printf_i+0xb8>
 8007750:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007754:	2d00      	cmp	r5, #0
 8007756:	da03      	bge.n	8007760 <_printf_i+0xd0>
 8007758:	232d      	movs	r3, #45	@ 0x2d
 800775a:	426d      	negs	r5, r5
 800775c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007760:	230a      	movs	r3, #10
 8007762:	4859      	ldr	r0, [pc, #356]	@ (80078c8 <_printf_i+0x238>)
 8007764:	e011      	b.n	800778a <_printf_i+0xfa>
 8007766:	6821      	ldr	r1, [r4, #0]
 8007768:	6833      	ldr	r3, [r6, #0]
 800776a:	0608      	lsls	r0, r1, #24
 800776c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007770:	d402      	bmi.n	8007778 <_printf_i+0xe8>
 8007772:	0649      	lsls	r1, r1, #25
 8007774:	bf48      	it	mi
 8007776:	b2ad      	uxthmi	r5, r5
 8007778:	2f6f      	cmp	r7, #111	@ 0x6f
 800777a:	6033      	str	r3, [r6, #0]
 800777c:	bf14      	ite	ne
 800777e:	230a      	movne	r3, #10
 8007780:	2308      	moveq	r3, #8
 8007782:	4851      	ldr	r0, [pc, #324]	@ (80078c8 <_printf_i+0x238>)
 8007784:	2100      	movs	r1, #0
 8007786:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800778a:	6866      	ldr	r6, [r4, #4]
 800778c:	2e00      	cmp	r6, #0
 800778e:	bfa8      	it	ge
 8007790:	6821      	ldrge	r1, [r4, #0]
 8007792:	60a6      	str	r6, [r4, #8]
 8007794:	bfa4      	itt	ge
 8007796:	f021 0104 	bicge.w	r1, r1, #4
 800779a:	6021      	strge	r1, [r4, #0]
 800779c:	b90d      	cbnz	r5, 80077a2 <_printf_i+0x112>
 800779e:	2e00      	cmp	r6, #0
 80077a0:	d04b      	beq.n	800783a <_printf_i+0x1aa>
 80077a2:	4616      	mov	r6, r2
 80077a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80077a8:	fb03 5711 	mls	r7, r3, r1, r5
 80077ac:	5dc7      	ldrb	r7, [r0, r7]
 80077ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80077b2:	462f      	mov	r7, r5
 80077b4:	42bb      	cmp	r3, r7
 80077b6:	460d      	mov	r5, r1
 80077b8:	d9f4      	bls.n	80077a4 <_printf_i+0x114>
 80077ba:	2b08      	cmp	r3, #8
 80077bc:	d10b      	bne.n	80077d6 <_printf_i+0x146>
 80077be:	6823      	ldr	r3, [r4, #0]
 80077c0:	07df      	lsls	r7, r3, #31
 80077c2:	d508      	bpl.n	80077d6 <_printf_i+0x146>
 80077c4:	6923      	ldr	r3, [r4, #16]
 80077c6:	6861      	ldr	r1, [r4, #4]
 80077c8:	4299      	cmp	r1, r3
 80077ca:	bfde      	ittt	le
 80077cc:	2330      	movle	r3, #48	@ 0x30
 80077ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80077d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80077d6:	1b92      	subs	r2, r2, r6
 80077d8:	6122      	str	r2, [r4, #16]
 80077da:	464b      	mov	r3, r9
 80077dc:	4621      	mov	r1, r4
 80077de:	4640      	mov	r0, r8
 80077e0:	f8cd a000 	str.w	sl, [sp]
 80077e4:	aa03      	add	r2, sp, #12
 80077e6:	f7ff fee1 	bl	80075ac <_printf_common>
 80077ea:	3001      	adds	r0, #1
 80077ec:	d14a      	bne.n	8007884 <_printf_i+0x1f4>
 80077ee:	f04f 30ff 	mov.w	r0, #4294967295
 80077f2:	b004      	add	sp, #16
 80077f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077f8:	6823      	ldr	r3, [r4, #0]
 80077fa:	f043 0320 	orr.w	r3, r3, #32
 80077fe:	6023      	str	r3, [r4, #0]
 8007800:	2778      	movs	r7, #120	@ 0x78
 8007802:	4832      	ldr	r0, [pc, #200]	@ (80078cc <_printf_i+0x23c>)
 8007804:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007808:	6823      	ldr	r3, [r4, #0]
 800780a:	6831      	ldr	r1, [r6, #0]
 800780c:	061f      	lsls	r7, r3, #24
 800780e:	f851 5b04 	ldr.w	r5, [r1], #4
 8007812:	d402      	bmi.n	800781a <_printf_i+0x18a>
 8007814:	065f      	lsls	r7, r3, #25
 8007816:	bf48      	it	mi
 8007818:	b2ad      	uxthmi	r5, r5
 800781a:	6031      	str	r1, [r6, #0]
 800781c:	07d9      	lsls	r1, r3, #31
 800781e:	bf44      	itt	mi
 8007820:	f043 0320 	orrmi.w	r3, r3, #32
 8007824:	6023      	strmi	r3, [r4, #0]
 8007826:	b11d      	cbz	r5, 8007830 <_printf_i+0x1a0>
 8007828:	2310      	movs	r3, #16
 800782a:	e7ab      	b.n	8007784 <_printf_i+0xf4>
 800782c:	4826      	ldr	r0, [pc, #152]	@ (80078c8 <_printf_i+0x238>)
 800782e:	e7e9      	b.n	8007804 <_printf_i+0x174>
 8007830:	6823      	ldr	r3, [r4, #0]
 8007832:	f023 0320 	bic.w	r3, r3, #32
 8007836:	6023      	str	r3, [r4, #0]
 8007838:	e7f6      	b.n	8007828 <_printf_i+0x198>
 800783a:	4616      	mov	r6, r2
 800783c:	e7bd      	b.n	80077ba <_printf_i+0x12a>
 800783e:	6833      	ldr	r3, [r6, #0]
 8007840:	6825      	ldr	r5, [r4, #0]
 8007842:	1d18      	adds	r0, r3, #4
 8007844:	6961      	ldr	r1, [r4, #20]
 8007846:	6030      	str	r0, [r6, #0]
 8007848:	062e      	lsls	r6, r5, #24
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	d501      	bpl.n	8007852 <_printf_i+0x1c2>
 800784e:	6019      	str	r1, [r3, #0]
 8007850:	e002      	b.n	8007858 <_printf_i+0x1c8>
 8007852:	0668      	lsls	r0, r5, #25
 8007854:	d5fb      	bpl.n	800784e <_printf_i+0x1be>
 8007856:	8019      	strh	r1, [r3, #0]
 8007858:	2300      	movs	r3, #0
 800785a:	4616      	mov	r6, r2
 800785c:	6123      	str	r3, [r4, #16]
 800785e:	e7bc      	b.n	80077da <_printf_i+0x14a>
 8007860:	6833      	ldr	r3, [r6, #0]
 8007862:	2100      	movs	r1, #0
 8007864:	1d1a      	adds	r2, r3, #4
 8007866:	6032      	str	r2, [r6, #0]
 8007868:	681e      	ldr	r6, [r3, #0]
 800786a:	6862      	ldr	r2, [r4, #4]
 800786c:	4630      	mov	r0, r6
 800786e:	f000 f97b 	bl	8007b68 <memchr>
 8007872:	b108      	cbz	r0, 8007878 <_printf_i+0x1e8>
 8007874:	1b80      	subs	r0, r0, r6
 8007876:	6060      	str	r0, [r4, #4]
 8007878:	6863      	ldr	r3, [r4, #4]
 800787a:	6123      	str	r3, [r4, #16]
 800787c:	2300      	movs	r3, #0
 800787e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007882:	e7aa      	b.n	80077da <_printf_i+0x14a>
 8007884:	4632      	mov	r2, r6
 8007886:	4649      	mov	r1, r9
 8007888:	4640      	mov	r0, r8
 800788a:	6923      	ldr	r3, [r4, #16]
 800788c:	47d0      	blx	sl
 800788e:	3001      	adds	r0, #1
 8007890:	d0ad      	beq.n	80077ee <_printf_i+0x15e>
 8007892:	6823      	ldr	r3, [r4, #0]
 8007894:	079b      	lsls	r3, r3, #30
 8007896:	d413      	bmi.n	80078c0 <_printf_i+0x230>
 8007898:	68e0      	ldr	r0, [r4, #12]
 800789a:	9b03      	ldr	r3, [sp, #12]
 800789c:	4298      	cmp	r0, r3
 800789e:	bfb8      	it	lt
 80078a0:	4618      	movlt	r0, r3
 80078a2:	e7a6      	b.n	80077f2 <_printf_i+0x162>
 80078a4:	2301      	movs	r3, #1
 80078a6:	4632      	mov	r2, r6
 80078a8:	4649      	mov	r1, r9
 80078aa:	4640      	mov	r0, r8
 80078ac:	47d0      	blx	sl
 80078ae:	3001      	adds	r0, #1
 80078b0:	d09d      	beq.n	80077ee <_printf_i+0x15e>
 80078b2:	3501      	adds	r5, #1
 80078b4:	68e3      	ldr	r3, [r4, #12]
 80078b6:	9903      	ldr	r1, [sp, #12]
 80078b8:	1a5b      	subs	r3, r3, r1
 80078ba:	42ab      	cmp	r3, r5
 80078bc:	dcf2      	bgt.n	80078a4 <_printf_i+0x214>
 80078be:	e7eb      	b.n	8007898 <_printf_i+0x208>
 80078c0:	2500      	movs	r5, #0
 80078c2:	f104 0619 	add.w	r6, r4, #25
 80078c6:	e7f5      	b.n	80078b4 <_printf_i+0x224>
 80078c8:	08007e73 	.word	0x08007e73
 80078cc:	08007e84 	.word	0x08007e84

080078d0 <__sflush_r>:
 80078d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80078d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078d6:	0716      	lsls	r6, r2, #28
 80078d8:	4605      	mov	r5, r0
 80078da:	460c      	mov	r4, r1
 80078dc:	d454      	bmi.n	8007988 <__sflush_r+0xb8>
 80078de:	684b      	ldr	r3, [r1, #4]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	dc02      	bgt.n	80078ea <__sflush_r+0x1a>
 80078e4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	dd48      	ble.n	800797c <__sflush_r+0xac>
 80078ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80078ec:	2e00      	cmp	r6, #0
 80078ee:	d045      	beq.n	800797c <__sflush_r+0xac>
 80078f0:	2300      	movs	r3, #0
 80078f2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80078f6:	682f      	ldr	r7, [r5, #0]
 80078f8:	6a21      	ldr	r1, [r4, #32]
 80078fa:	602b      	str	r3, [r5, #0]
 80078fc:	d030      	beq.n	8007960 <__sflush_r+0x90>
 80078fe:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007900:	89a3      	ldrh	r3, [r4, #12]
 8007902:	0759      	lsls	r1, r3, #29
 8007904:	d505      	bpl.n	8007912 <__sflush_r+0x42>
 8007906:	6863      	ldr	r3, [r4, #4]
 8007908:	1ad2      	subs	r2, r2, r3
 800790a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800790c:	b10b      	cbz	r3, 8007912 <__sflush_r+0x42>
 800790e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007910:	1ad2      	subs	r2, r2, r3
 8007912:	2300      	movs	r3, #0
 8007914:	4628      	mov	r0, r5
 8007916:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007918:	6a21      	ldr	r1, [r4, #32]
 800791a:	47b0      	blx	r6
 800791c:	1c43      	adds	r3, r0, #1
 800791e:	89a3      	ldrh	r3, [r4, #12]
 8007920:	d106      	bne.n	8007930 <__sflush_r+0x60>
 8007922:	6829      	ldr	r1, [r5, #0]
 8007924:	291d      	cmp	r1, #29
 8007926:	d82b      	bhi.n	8007980 <__sflush_r+0xb0>
 8007928:	4a28      	ldr	r2, [pc, #160]	@ (80079cc <__sflush_r+0xfc>)
 800792a:	410a      	asrs	r2, r1
 800792c:	07d6      	lsls	r6, r2, #31
 800792e:	d427      	bmi.n	8007980 <__sflush_r+0xb0>
 8007930:	2200      	movs	r2, #0
 8007932:	6062      	str	r2, [r4, #4]
 8007934:	6922      	ldr	r2, [r4, #16]
 8007936:	04d9      	lsls	r1, r3, #19
 8007938:	6022      	str	r2, [r4, #0]
 800793a:	d504      	bpl.n	8007946 <__sflush_r+0x76>
 800793c:	1c42      	adds	r2, r0, #1
 800793e:	d101      	bne.n	8007944 <__sflush_r+0x74>
 8007940:	682b      	ldr	r3, [r5, #0]
 8007942:	b903      	cbnz	r3, 8007946 <__sflush_r+0x76>
 8007944:	6560      	str	r0, [r4, #84]	@ 0x54
 8007946:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007948:	602f      	str	r7, [r5, #0]
 800794a:	b1b9      	cbz	r1, 800797c <__sflush_r+0xac>
 800794c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007950:	4299      	cmp	r1, r3
 8007952:	d002      	beq.n	800795a <__sflush_r+0x8a>
 8007954:	4628      	mov	r0, r5
 8007956:	f7ff fbf3 	bl	8007140 <_free_r>
 800795a:	2300      	movs	r3, #0
 800795c:	6363      	str	r3, [r4, #52]	@ 0x34
 800795e:	e00d      	b.n	800797c <__sflush_r+0xac>
 8007960:	2301      	movs	r3, #1
 8007962:	4628      	mov	r0, r5
 8007964:	47b0      	blx	r6
 8007966:	4602      	mov	r2, r0
 8007968:	1c50      	adds	r0, r2, #1
 800796a:	d1c9      	bne.n	8007900 <__sflush_r+0x30>
 800796c:	682b      	ldr	r3, [r5, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d0c6      	beq.n	8007900 <__sflush_r+0x30>
 8007972:	2b1d      	cmp	r3, #29
 8007974:	d001      	beq.n	800797a <__sflush_r+0xaa>
 8007976:	2b16      	cmp	r3, #22
 8007978:	d11d      	bne.n	80079b6 <__sflush_r+0xe6>
 800797a:	602f      	str	r7, [r5, #0]
 800797c:	2000      	movs	r0, #0
 800797e:	e021      	b.n	80079c4 <__sflush_r+0xf4>
 8007980:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007984:	b21b      	sxth	r3, r3
 8007986:	e01a      	b.n	80079be <__sflush_r+0xee>
 8007988:	690f      	ldr	r7, [r1, #16]
 800798a:	2f00      	cmp	r7, #0
 800798c:	d0f6      	beq.n	800797c <__sflush_r+0xac>
 800798e:	0793      	lsls	r3, r2, #30
 8007990:	bf18      	it	ne
 8007992:	2300      	movne	r3, #0
 8007994:	680e      	ldr	r6, [r1, #0]
 8007996:	bf08      	it	eq
 8007998:	694b      	ldreq	r3, [r1, #20]
 800799a:	1bf6      	subs	r6, r6, r7
 800799c:	600f      	str	r7, [r1, #0]
 800799e:	608b      	str	r3, [r1, #8]
 80079a0:	2e00      	cmp	r6, #0
 80079a2:	ddeb      	ble.n	800797c <__sflush_r+0xac>
 80079a4:	4633      	mov	r3, r6
 80079a6:	463a      	mov	r2, r7
 80079a8:	4628      	mov	r0, r5
 80079aa:	6a21      	ldr	r1, [r4, #32]
 80079ac:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80079b0:	47e0      	blx	ip
 80079b2:	2800      	cmp	r0, #0
 80079b4:	dc07      	bgt.n	80079c6 <__sflush_r+0xf6>
 80079b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079be:	f04f 30ff 	mov.w	r0, #4294967295
 80079c2:	81a3      	strh	r3, [r4, #12]
 80079c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079c6:	4407      	add	r7, r0
 80079c8:	1a36      	subs	r6, r6, r0
 80079ca:	e7e9      	b.n	80079a0 <__sflush_r+0xd0>
 80079cc:	dfbffffe 	.word	0xdfbffffe

080079d0 <_fflush_r>:
 80079d0:	b538      	push	{r3, r4, r5, lr}
 80079d2:	690b      	ldr	r3, [r1, #16]
 80079d4:	4605      	mov	r5, r0
 80079d6:	460c      	mov	r4, r1
 80079d8:	b913      	cbnz	r3, 80079e0 <_fflush_r+0x10>
 80079da:	2500      	movs	r5, #0
 80079dc:	4628      	mov	r0, r5
 80079de:	bd38      	pop	{r3, r4, r5, pc}
 80079e0:	b118      	cbz	r0, 80079ea <_fflush_r+0x1a>
 80079e2:	6a03      	ldr	r3, [r0, #32]
 80079e4:	b90b      	cbnz	r3, 80079ea <_fflush_r+0x1a>
 80079e6:	f7ff faa3 	bl	8006f30 <__sinit>
 80079ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d0f3      	beq.n	80079da <_fflush_r+0xa>
 80079f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80079f4:	07d0      	lsls	r0, r2, #31
 80079f6:	d404      	bmi.n	8007a02 <_fflush_r+0x32>
 80079f8:	0599      	lsls	r1, r3, #22
 80079fa:	d402      	bmi.n	8007a02 <_fflush_r+0x32>
 80079fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079fe:	f7ff fb9c 	bl	800713a <__retarget_lock_acquire_recursive>
 8007a02:	4628      	mov	r0, r5
 8007a04:	4621      	mov	r1, r4
 8007a06:	f7ff ff63 	bl	80078d0 <__sflush_r>
 8007a0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a0c:	4605      	mov	r5, r0
 8007a0e:	07da      	lsls	r2, r3, #31
 8007a10:	d4e4      	bmi.n	80079dc <_fflush_r+0xc>
 8007a12:	89a3      	ldrh	r3, [r4, #12]
 8007a14:	059b      	lsls	r3, r3, #22
 8007a16:	d4e1      	bmi.n	80079dc <_fflush_r+0xc>
 8007a18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a1a:	f7ff fb8f 	bl	800713c <__retarget_lock_release_recursive>
 8007a1e:	e7dd      	b.n	80079dc <_fflush_r+0xc>

08007a20 <__swbuf_r>:
 8007a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a22:	460e      	mov	r6, r1
 8007a24:	4614      	mov	r4, r2
 8007a26:	4605      	mov	r5, r0
 8007a28:	b118      	cbz	r0, 8007a32 <__swbuf_r+0x12>
 8007a2a:	6a03      	ldr	r3, [r0, #32]
 8007a2c:	b90b      	cbnz	r3, 8007a32 <__swbuf_r+0x12>
 8007a2e:	f7ff fa7f 	bl	8006f30 <__sinit>
 8007a32:	69a3      	ldr	r3, [r4, #24]
 8007a34:	60a3      	str	r3, [r4, #8]
 8007a36:	89a3      	ldrh	r3, [r4, #12]
 8007a38:	071a      	lsls	r2, r3, #28
 8007a3a:	d501      	bpl.n	8007a40 <__swbuf_r+0x20>
 8007a3c:	6923      	ldr	r3, [r4, #16]
 8007a3e:	b943      	cbnz	r3, 8007a52 <__swbuf_r+0x32>
 8007a40:	4621      	mov	r1, r4
 8007a42:	4628      	mov	r0, r5
 8007a44:	f000 f82a 	bl	8007a9c <__swsetup_r>
 8007a48:	b118      	cbz	r0, 8007a52 <__swbuf_r+0x32>
 8007a4a:	f04f 37ff 	mov.w	r7, #4294967295
 8007a4e:	4638      	mov	r0, r7
 8007a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a52:	6823      	ldr	r3, [r4, #0]
 8007a54:	6922      	ldr	r2, [r4, #16]
 8007a56:	b2f6      	uxtb	r6, r6
 8007a58:	1a98      	subs	r0, r3, r2
 8007a5a:	6963      	ldr	r3, [r4, #20]
 8007a5c:	4637      	mov	r7, r6
 8007a5e:	4283      	cmp	r3, r0
 8007a60:	dc05      	bgt.n	8007a6e <__swbuf_r+0x4e>
 8007a62:	4621      	mov	r1, r4
 8007a64:	4628      	mov	r0, r5
 8007a66:	f7ff ffb3 	bl	80079d0 <_fflush_r>
 8007a6a:	2800      	cmp	r0, #0
 8007a6c:	d1ed      	bne.n	8007a4a <__swbuf_r+0x2a>
 8007a6e:	68a3      	ldr	r3, [r4, #8]
 8007a70:	3b01      	subs	r3, #1
 8007a72:	60a3      	str	r3, [r4, #8]
 8007a74:	6823      	ldr	r3, [r4, #0]
 8007a76:	1c5a      	adds	r2, r3, #1
 8007a78:	6022      	str	r2, [r4, #0]
 8007a7a:	701e      	strb	r6, [r3, #0]
 8007a7c:	6962      	ldr	r2, [r4, #20]
 8007a7e:	1c43      	adds	r3, r0, #1
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d004      	beq.n	8007a8e <__swbuf_r+0x6e>
 8007a84:	89a3      	ldrh	r3, [r4, #12]
 8007a86:	07db      	lsls	r3, r3, #31
 8007a88:	d5e1      	bpl.n	8007a4e <__swbuf_r+0x2e>
 8007a8a:	2e0a      	cmp	r6, #10
 8007a8c:	d1df      	bne.n	8007a4e <__swbuf_r+0x2e>
 8007a8e:	4621      	mov	r1, r4
 8007a90:	4628      	mov	r0, r5
 8007a92:	f7ff ff9d 	bl	80079d0 <_fflush_r>
 8007a96:	2800      	cmp	r0, #0
 8007a98:	d0d9      	beq.n	8007a4e <__swbuf_r+0x2e>
 8007a9a:	e7d6      	b.n	8007a4a <__swbuf_r+0x2a>

08007a9c <__swsetup_r>:
 8007a9c:	b538      	push	{r3, r4, r5, lr}
 8007a9e:	4b29      	ldr	r3, [pc, #164]	@ (8007b44 <__swsetup_r+0xa8>)
 8007aa0:	4605      	mov	r5, r0
 8007aa2:	6818      	ldr	r0, [r3, #0]
 8007aa4:	460c      	mov	r4, r1
 8007aa6:	b118      	cbz	r0, 8007ab0 <__swsetup_r+0x14>
 8007aa8:	6a03      	ldr	r3, [r0, #32]
 8007aaa:	b90b      	cbnz	r3, 8007ab0 <__swsetup_r+0x14>
 8007aac:	f7ff fa40 	bl	8006f30 <__sinit>
 8007ab0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ab4:	0719      	lsls	r1, r3, #28
 8007ab6:	d422      	bmi.n	8007afe <__swsetup_r+0x62>
 8007ab8:	06da      	lsls	r2, r3, #27
 8007aba:	d407      	bmi.n	8007acc <__swsetup_r+0x30>
 8007abc:	2209      	movs	r2, #9
 8007abe:	602a      	str	r2, [r5, #0]
 8007ac0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ac8:	81a3      	strh	r3, [r4, #12]
 8007aca:	e033      	b.n	8007b34 <__swsetup_r+0x98>
 8007acc:	0758      	lsls	r0, r3, #29
 8007ace:	d512      	bpl.n	8007af6 <__swsetup_r+0x5a>
 8007ad0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ad2:	b141      	cbz	r1, 8007ae6 <__swsetup_r+0x4a>
 8007ad4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ad8:	4299      	cmp	r1, r3
 8007ada:	d002      	beq.n	8007ae2 <__swsetup_r+0x46>
 8007adc:	4628      	mov	r0, r5
 8007ade:	f7ff fb2f 	bl	8007140 <_free_r>
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ae6:	89a3      	ldrh	r3, [r4, #12]
 8007ae8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007aec:	81a3      	strh	r3, [r4, #12]
 8007aee:	2300      	movs	r3, #0
 8007af0:	6063      	str	r3, [r4, #4]
 8007af2:	6923      	ldr	r3, [r4, #16]
 8007af4:	6023      	str	r3, [r4, #0]
 8007af6:	89a3      	ldrh	r3, [r4, #12]
 8007af8:	f043 0308 	orr.w	r3, r3, #8
 8007afc:	81a3      	strh	r3, [r4, #12]
 8007afe:	6923      	ldr	r3, [r4, #16]
 8007b00:	b94b      	cbnz	r3, 8007b16 <__swsetup_r+0x7a>
 8007b02:	89a3      	ldrh	r3, [r4, #12]
 8007b04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007b08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b0c:	d003      	beq.n	8007b16 <__swsetup_r+0x7a>
 8007b0e:	4621      	mov	r1, r4
 8007b10:	4628      	mov	r0, r5
 8007b12:	f000 f85c 	bl	8007bce <__smakebuf_r>
 8007b16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b1a:	f013 0201 	ands.w	r2, r3, #1
 8007b1e:	d00a      	beq.n	8007b36 <__swsetup_r+0x9a>
 8007b20:	2200      	movs	r2, #0
 8007b22:	60a2      	str	r2, [r4, #8]
 8007b24:	6962      	ldr	r2, [r4, #20]
 8007b26:	4252      	negs	r2, r2
 8007b28:	61a2      	str	r2, [r4, #24]
 8007b2a:	6922      	ldr	r2, [r4, #16]
 8007b2c:	b942      	cbnz	r2, 8007b40 <__swsetup_r+0xa4>
 8007b2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007b32:	d1c5      	bne.n	8007ac0 <__swsetup_r+0x24>
 8007b34:	bd38      	pop	{r3, r4, r5, pc}
 8007b36:	0799      	lsls	r1, r3, #30
 8007b38:	bf58      	it	pl
 8007b3a:	6962      	ldrpl	r2, [r4, #20]
 8007b3c:	60a2      	str	r2, [r4, #8]
 8007b3e:	e7f4      	b.n	8007b2a <__swsetup_r+0x8e>
 8007b40:	2000      	movs	r0, #0
 8007b42:	e7f7      	b.n	8007b34 <__swsetup_r+0x98>
 8007b44:	2000001c 	.word	0x2000001c

08007b48 <_sbrk_r>:
 8007b48:	b538      	push	{r3, r4, r5, lr}
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	4d05      	ldr	r5, [pc, #20]	@ (8007b64 <_sbrk_r+0x1c>)
 8007b4e:	4604      	mov	r4, r0
 8007b50:	4608      	mov	r0, r1
 8007b52:	602b      	str	r3, [r5, #0]
 8007b54:	f7fa faa4 	bl	80020a0 <_sbrk>
 8007b58:	1c43      	adds	r3, r0, #1
 8007b5a:	d102      	bne.n	8007b62 <_sbrk_r+0x1a>
 8007b5c:	682b      	ldr	r3, [r5, #0]
 8007b5e:	b103      	cbz	r3, 8007b62 <_sbrk_r+0x1a>
 8007b60:	6023      	str	r3, [r4, #0]
 8007b62:	bd38      	pop	{r3, r4, r5, pc}
 8007b64:	200008f4 	.word	0x200008f4

08007b68 <memchr>:
 8007b68:	4603      	mov	r3, r0
 8007b6a:	b510      	push	{r4, lr}
 8007b6c:	b2c9      	uxtb	r1, r1
 8007b6e:	4402      	add	r2, r0
 8007b70:	4293      	cmp	r3, r2
 8007b72:	4618      	mov	r0, r3
 8007b74:	d101      	bne.n	8007b7a <memchr+0x12>
 8007b76:	2000      	movs	r0, #0
 8007b78:	e003      	b.n	8007b82 <memchr+0x1a>
 8007b7a:	7804      	ldrb	r4, [r0, #0]
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	428c      	cmp	r4, r1
 8007b80:	d1f6      	bne.n	8007b70 <memchr+0x8>
 8007b82:	bd10      	pop	{r4, pc}

08007b84 <__swhatbuf_r>:
 8007b84:	b570      	push	{r4, r5, r6, lr}
 8007b86:	460c      	mov	r4, r1
 8007b88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b8c:	4615      	mov	r5, r2
 8007b8e:	2900      	cmp	r1, #0
 8007b90:	461e      	mov	r6, r3
 8007b92:	b096      	sub	sp, #88	@ 0x58
 8007b94:	da0c      	bge.n	8007bb0 <__swhatbuf_r+0x2c>
 8007b96:	89a3      	ldrh	r3, [r4, #12]
 8007b98:	2100      	movs	r1, #0
 8007b9a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007b9e:	bf14      	ite	ne
 8007ba0:	2340      	movne	r3, #64	@ 0x40
 8007ba2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007ba6:	2000      	movs	r0, #0
 8007ba8:	6031      	str	r1, [r6, #0]
 8007baa:	602b      	str	r3, [r5, #0]
 8007bac:	b016      	add	sp, #88	@ 0x58
 8007bae:	bd70      	pop	{r4, r5, r6, pc}
 8007bb0:	466a      	mov	r2, sp
 8007bb2:	f000 f849 	bl	8007c48 <_fstat_r>
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	dbed      	blt.n	8007b96 <__swhatbuf_r+0x12>
 8007bba:	9901      	ldr	r1, [sp, #4]
 8007bbc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007bc0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007bc4:	4259      	negs	r1, r3
 8007bc6:	4159      	adcs	r1, r3
 8007bc8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007bcc:	e7eb      	b.n	8007ba6 <__swhatbuf_r+0x22>

08007bce <__smakebuf_r>:
 8007bce:	898b      	ldrh	r3, [r1, #12]
 8007bd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bd2:	079d      	lsls	r5, r3, #30
 8007bd4:	4606      	mov	r6, r0
 8007bd6:	460c      	mov	r4, r1
 8007bd8:	d507      	bpl.n	8007bea <__smakebuf_r+0x1c>
 8007bda:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007bde:	6023      	str	r3, [r4, #0]
 8007be0:	6123      	str	r3, [r4, #16]
 8007be2:	2301      	movs	r3, #1
 8007be4:	6163      	str	r3, [r4, #20]
 8007be6:	b003      	add	sp, #12
 8007be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bea:	466a      	mov	r2, sp
 8007bec:	ab01      	add	r3, sp, #4
 8007bee:	f7ff ffc9 	bl	8007b84 <__swhatbuf_r>
 8007bf2:	9f00      	ldr	r7, [sp, #0]
 8007bf4:	4605      	mov	r5, r0
 8007bf6:	4639      	mov	r1, r7
 8007bf8:	4630      	mov	r0, r6
 8007bfa:	f7ff fb0b 	bl	8007214 <_malloc_r>
 8007bfe:	b948      	cbnz	r0, 8007c14 <__smakebuf_r+0x46>
 8007c00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c04:	059a      	lsls	r2, r3, #22
 8007c06:	d4ee      	bmi.n	8007be6 <__smakebuf_r+0x18>
 8007c08:	f023 0303 	bic.w	r3, r3, #3
 8007c0c:	f043 0302 	orr.w	r3, r3, #2
 8007c10:	81a3      	strh	r3, [r4, #12]
 8007c12:	e7e2      	b.n	8007bda <__smakebuf_r+0xc>
 8007c14:	89a3      	ldrh	r3, [r4, #12]
 8007c16:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007c1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c1e:	81a3      	strh	r3, [r4, #12]
 8007c20:	9b01      	ldr	r3, [sp, #4]
 8007c22:	6020      	str	r0, [r4, #0]
 8007c24:	b15b      	cbz	r3, 8007c3e <__smakebuf_r+0x70>
 8007c26:	4630      	mov	r0, r6
 8007c28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c2c:	f000 f81e 	bl	8007c6c <_isatty_r>
 8007c30:	b128      	cbz	r0, 8007c3e <__smakebuf_r+0x70>
 8007c32:	89a3      	ldrh	r3, [r4, #12]
 8007c34:	f023 0303 	bic.w	r3, r3, #3
 8007c38:	f043 0301 	orr.w	r3, r3, #1
 8007c3c:	81a3      	strh	r3, [r4, #12]
 8007c3e:	89a3      	ldrh	r3, [r4, #12]
 8007c40:	431d      	orrs	r5, r3
 8007c42:	81a5      	strh	r5, [r4, #12]
 8007c44:	e7cf      	b.n	8007be6 <__smakebuf_r+0x18>
	...

08007c48 <_fstat_r>:
 8007c48:	b538      	push	{r3, r4, r5, lr}
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	4d06      	ldr	r5, [pc, #24]	@ (8007c68 <_fstat_r+0x20>)
 8007c4e:	4604      	mov	r4, r0
 8007c50:	4608      	mov	r0, r1
 8007c52:	4611      	mov	r1, r2
 8007c54:	602b      	str	r3, [r5, #0]
 8007c56:	f7fa f9fd 	bl	8002054 <_fstat>
 8007c5a:	1c43      	adds	r3, r0, #1
 8007c5c:	d102      	bne.n	8007c64 <_fstat_r+0x1c>
 8007c5e:	682b      	ldr	r3, [r5, #0]
 8007c60:	b103      	cbz	r3, 8007c64 <_fstat_r+0x1c>
 8007c62:	6023      	str	r3, [r4, #0]
 8007c64:	bd38      	pop	{r3, r4, r5, pc}
 8007c66:	bf00      	nop
 8007c68:	200008f4 	.word	0x200008f4

08007c6c <_isatty_r>:
 8007c6c:	b538      	push	{r3, r4, r5, lr}
 8007c6e:	2300      	movs	r3, #0
 8007c70:	4d05      	ldr	r5, [pc, #20]	@ (8007c88 <_isatty_r+0x1c>)
 8007c72:	4604      	mov	r4, r0
 8007c74:	4608      	mov	r0, r1
 8007c76:	602b      	str	r3, [r5, #0]
 8007c78:	f7fa f9fb 	bl	8002072 <_isatty>
 8007c7c:	1c43      	adds	r3, r0, #1
 8007c7e:	d102      	bne.n	8007c86 <_isatty_r+0x1a>
 8007c80:	682b      	ldr	r3, [r5, #0]
 8007c82:	b103      	cbz	r3, 8007c86 <_isatty_r+0x1a>
 8007c84:	6023      	str	r3, [r4, #0]
 8007c86:	bd38      	pop	{r3, r4, r5, pc}
 8007c88:	200008f4 	.word	0x200008f4

08007c8c <_init>:
 8007c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c8e:	bf00      	nop
 8007c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c92:	bc08      	pop	{r3}
 8007c94:	469e      	mov	lr, r3
 8007c96:	4770      	bx	lr

08007c98 <_fini>:
 8007c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c9a:	bf00      	nop
 8007c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c9e:	bc08      	pop	{r3}
 8007ca0:	469e      	mov	lr, r3
 8007ca2:	4770      	bx	lr
