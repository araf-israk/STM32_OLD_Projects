
new_rfid_stupid_bullshit_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031f8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  08003304  08003304  00004304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034f0  080034f0  00005068  2**0
                  CONTENTS
  4 .ARM          00000000  080034f0  080034f0  00005068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034f0  080034f0  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034f0  080034f0  000044f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080034f4  080034f4  000044f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080034f8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  20000068  08003560  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  08003560  00005374  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006885  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a7a  00000000  00000000  0000b916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a8  00000000  00000000  0000d390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005a2  00000000  00000000  0000db38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018429  00000000  00000000  0000e0da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009660  00000000  00000000  00026503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000846f6  00000000  00000000  0002fb63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4259  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002490  00000000  00000000  000b429c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000b672c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080032ec 	.word	0x080032ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080032ec 	.word	0x080032ec

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 ffc5 	bl	80010e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f84b 	bl	80001f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f8c5 	bl	80002e8 <MX_GPIO_Init>
  MX_SPI1_Init();
 800015e:	f000 f88d 	bl	800027c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 8000162:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000166:	f001 f81d 	bl	80011a4 <HAL_Delay>
  memset(buffer, 0, sizeof(buffer));
 800016a:	2232      	movs	r2, #50	@ 0x32
 800016c:	2100      	movs	r1, #0
 800016e:	481b      	ldr	r0, [pc, #108]	@ (80001dc <main+0x90>)
 8000170:	f002 fa99 	bl	80026a6 <memset>



  PN532 pn532;
  PN532_SPI_Init(&pn532);
 8000174:	463b      	mov	r3, r7
 8000176:	4618      	mov	r0, r3
 8000178:	f000 fe14 	bl	8000da4 <PN532_SPI_Init>
  if (PN532_GetFirmwareVersion(&pn532, buff) != PN532_STATUS_OK)
 800017c:	463b      	mov	r3, r7
 800017e:	4918      	ldr	r1, [pc, #96]	@ (80001e0 <main+0x94>)
 8000180:	4618      	mov	r0, r3
 8000182:	f000 fc1d 	bl	80009c0 <PN532_GetFirmwareVersion>
 8000186:	4603      	mov	r3, r0
 8000188:	2b00      	cmp	r3, #0
 800018a:	d013      	beq.n	80001b4 <main+0x68>
  {
	  while(1)
	  {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 800018c:	2201      	movs	r2, #1
 800018e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000192:	4814      	ldr	r0, [pc, #80]	@ (80001e4 <main+0x98>)
 8000194:	f001 fa92 	bl	80016bc <HAL_GPIO_WritePin>
		  HAL_Delay(250);
 8000198:	20fa      	movs	r0, #250	@ 0xfa
 800019a:	f001 f803 	bl	80011a4 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 800019e:	2200      	movs	r2, #0
 80001a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001a4:	480f      	ldr	r0, [pc, #60]	@ (80001e4 <main+0x98>)
 80001a6:	f001 fa89 	bl	80016bc <HAL_GPIO_WritePin>
		  HAL_Delay(250);
 80001aa:	20fa      	movs	r0, #250	@ 0xfa
 80001ac:	f000 fffa 	bl	80011a4 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 80001b0:	bf00      	nop
 80001b2:	e7eb      	b.n	800018c <main+0x40>
	  }
  }
  PN532_SamConfiguration(&pn532);
 80001b4:	463b      	mov	r3, r7
 80001b6:	4618      	mov	r0, r3
 80001b8:	f000 fc26 	bl	8000a08 <PN532_SamConfiguration>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uid_len = PN532_ReadPassiveTarget(&pn532, uid, PN532_MIFARE_ISO14443A, 1000);
 80001bc:	4638      	mov	r0, r7
 80001be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001c2:	2200      	movs	r2, #0
 80001c4:	4908      	ldr	r1, [pc, #32]	@ (80001e8 <main+0x9c>)
 80001c6:	f000 fc41 	bl	8000a4c <PN532_ReadPassiveTarget>
 80001ca:	4603      	mov	r3, r0
 80001cc:	4a07      	ldr	r2, [pc, #28]	@ (80001ec <main+0xa0>)
 80001ce:	6013      	str	r3, [r2, #0]
	  HAL_Delay(10);
 80001d0:	200a      	movs	r0, #10
 80001d2:	f000 ffe7 	bl	80011a4 <HAL_Delay>
	  uid_len = PN532_ReadPassiveTarget(&pn532, uid, PN532_MIFARE_ISO14443A, 1000);
 80001d6:	bf00      	nop
 80001d8:	e7f0      	b.n	80001bc <main+0x70>
 80001da:	bf00      	nop
 80001dc:	200001ec 	.word	0x200001ec
 80001e0:	200000dc 	.word	0x200000dc
 80001e4:	40011000 	.word	0x40011000
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	200001e8 	.word	0x200001e8

080001f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b090      	sub	sp, #64	@ 0x40
 80001f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f6:	f107 0318 	add.w	r3, r7, #24
 80001fa:	2228      	movs	r2, #40	@ 0x28
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f002 fa51 	bl	80026a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000204:	1d3b      	adds	r3, r7, #4
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]
 800020a:	605a      	str	r2, [r3, #4]
 800020c:	609a      	str	r2, [r3, #8]
 800020e:	60da      	str	r2, [r3, #12]
 8000210:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000212:	2301      	movs	r3, #1
 8000214:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000216:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800021a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800021c:	2300      	movs	r3, #0
 800021e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000220:	2301      	movs	r3, #1
 8000222:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000224:	2302      	movs	r3, #2
 8000226:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000228:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800022c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800022e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000232:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000234:	f107 0318 	add.w	r3, r7, #24
 8000238:	4618      	mov	r0, r3
 800023a:	f001 fa57 	bl	80016ec <HAL_RCC_OscConfig>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d001      	beq.n	8000248 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000244:	f000 f8be 	bl	80003c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000248:	230f      	movs	r3, #15
 800024a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800024c:	2302      	movs	r3, #2
 800024e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000250:	2300      	movs	r3, #0
 8000252:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000254:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000258:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	2102      	movs	r1, #2
 8000262:	4618      	mov	r0, r3
 8000264:	f001 fcc4 	bl	8001bf0 <HAL_RCC_ClockConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800026e:	f000 f8a9 	bl	80003c4 <Error_Handler>
  }
}
 8000272:	bf00      	nop
 8000274:	3740      	adds	r7, #64	@ 0x40
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
	...

0800027c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000280:	4b17      	ldr	r3, [pc, #92]	@ (80002e0 <MX_SPI1_Init+0x64>)
 8000282:	4a18      	ldr	r2, [pc, #96]	@ (80002e4 <MX_SPI1_Init+0x68>)
 8000284:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000286:	4b16      	ldr	r3, [pc, #88]	@ (80002e0 <MX_SPI1_Init+0x64>)
 8000288:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800028c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800028e:	4b14      	ldr	r3, [pc, #80]	@ (80002e0 <MX_SPI1_Init+0x64>)
 8000290:	2200      	movs	r2, #0
 8000292:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000294:	4b12      	ldr	r3, [pc, #72]	@ (80002e0 <MX_SPI1_Init+0x64>)
 8000296:	2200      	movs	r2, #0
 8000298:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800029a:	4b11      	ldr	r3, [pc, #68]	@ (80002e0 <MX_SPI1_Init+0x64>)
 800029c:	2200      	movs	r2, #0
 800029e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002a0:	4b0f      	ldr	r3, [pc, #60]	@ (80002e0 <MX_SPI1_Init+0x64>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002a6:	4b0e      	ldr	r3, [pc, #56]	@ (80002e0 <MX_SPI1_Init+0x64>)
 80002a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80002ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80002ae:	4b0c      	ldr	r3, [pc, #48]	@ (80002e0 <MX_SPI1_Init+0x64>)
 80002b0:	2228      	movs	r2, #40	@ 0x28
 80002b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80002b4:	4b0a      	ldr	r3, [pc, #40]	@ (80002e0 <MX_SPI1_Init+0x64>)
 80002b6:	2280      	movs	r2, #128	@ 0x80
 80002b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002ba:	4b09      	ldr	r3, [pc, #36]	@ (80002e0 <MX_SPI1_Init+0x64>)
 80002bc:	2200      	movs	r2, #0
 80002be:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002c0:	4b07      	ldr	r3, [pc, #28]	@ (80002e0 <MX_SPI1_Init+0x64>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80002c6:	4b06      	ldr	r3, [pc, #24]	@ (80002e0 <MX_SPI1_Init+0x64>)
 80002c8:	220a      	movs	r2, #10
 80002ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002cc:	4804      	ldr	r0, [pc, #16]	@ (80002e0 <MX_SPI1_Init+0x64>)
 80002ce:	f001 fdeb 	bl	8001ea8 <HAL_SPI_Init>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80002d8:	f000 f874 	bl	80003c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80002dc:	bf00      	nop
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	20000084 	.word	0x20000084
 80002e4:	40013000 	.word	0x40013000

080002e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b088      	sub	sp, #32
 80002ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ee:	f107 0310 	add.w	r3, r7, #16
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
 80002f6:	605a      	str	r2, [r3, #4]
 80002f8:	609a      	str	r2, [r3, #8]
 80002fa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002fc:	4b2e      	ldr	r3, [pc, #184]	@ (80003b8 <MX_GPIO_Init+0xd0>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a2d      	ldr	r2, [pc, #180]	@ (80003b8 <MX_GPIO_Init+0xd0>)
 8000302:	f043 0310 	orr.w	r3, r3, #16
 8000306:	6193      	str	r3, [r2, #24]
 8000308:	4b2b      	ldr	r3, [pc, #172]	@ (80003b8 <MX_GPIO_Init+0xd0>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	f003 0310 	and.w	r3, r3, #16
 8000310:	60fb      	str	r3, [r7, #12]
 8000312:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000314:	4b28      	ldr	r3, [pc, #160]	@ (80003b8 <MX_GPIO_Init+0xd0>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	4a27      	ldr	r2, [pc, #156]	@ (80003b8 <MX_GPIO_Init+0xd0>)
 800031a:	f043 0320 	orr.w	r3, r3, #32
 800031e:	6193      	str	r3, [r2, #24]
 8000320:	4b25      	ldr	r3, [pc, #148]	@ (80003b8 <MX_GPIO_Init+0xd0>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	f003 0320 	and.w	r3, r3, #32
 8000328:	60bb      	str	r3, [r7, #8]
 800032a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800032c:	4b22      	ldr	r3, [pc, #136]	@ (80003b8 <MX_GPIO_Init+0xd0>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	4a21      	ldr	r2, [pc, #132]	@ (80003b8 <MX_GPIO_Init+0xd0>)
 8000332:	f043 0304 	orr.w	r3, r3, #4
 8000336:	6193      	str	r3, [r2, #24]
 8000338:	4b1f      	ldr	r3, [pc, #124]	@ (80003b8 <MX_GPIO_Init+0xd0>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	f003 0304 	and.w	r3, r3, #4
 8000340:	607b      	str	r3, [r7, #4]
 8000342:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000344:	4b1c      	ldr	r3, [pc, #112]	@ (80003b8 <MX_GPIO_Init+0xd0>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	4a1b      	ldr	r2, [pc, #108]	@ (80003b8 <MX_GPIO_Init+0xd0>)
 800034a:	f043 0308 	orr.w	r3, r3, #8
 800034e:	6193      	str	r3, [r2, #24]
 8000350:	4b19      	ldr	r3, [pc, #100]	@ (80003b8 <MX_GPIO_Init+0xd0>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	f003 0308 	and.w	r3, r3, #8
 8000358:	603b      	str	r3, [r7, #0]
 800035a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800035c:	2200      	movs	r2, #0
 800035e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000362:	4816      	ldr	r0, [pc, #88]	@ (80003bc <MX_GPIO_Init+0xd4>)
 8000364:	f001 f9aa 	bl	80016bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RFID_SS_Pin|RFID_IRQ_Pin|RFID_Reset_Pin, GPIO_PIN_RESET);
 8000368:	2200      	movs	r2, #0
 800036a:	f240 4103 	movw	r1, #1027	@ 0x403
 800036e:	4814      	ldr	r0, [pc, #80]	@ (80003c0 <MX_GPIO_Init+0xd8>)
 8000370:	f001 f9a4 	bl	80016bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000374:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000378:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800037a:	2301      	movs	r3, #1
 800037c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037e:	2300      	movs	r3, #0
 8000380:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000382:	2302      	movs	r3, #2
 8000384:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000386:	f107 0310 	add.w	r3, r7, #16
 800038a:	4619      	mov	r1, r3
 800038c:	480b      	ldr	r0, [pc, #44]	@ (80003bc <MX_GPIO_Init+0xd4>)
 800038e:	f001 f811 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RFID_SS_Pin RFID_IRQ_Pin RFID_Reset_Pin */
  GPIO_InitStruct.Pin = RFID_SS_Pin|RFID_IRQ_Pin|RFID_Reset_Pin;
 8000392:	f240 4303 	movw	r3, #1027	@ 0x403
 8000396:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000398:	2301      	movs	r3, #1
 800039a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800039c:	2300      	movs	r3, #0
 800039e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003a0:	2302      	movs	r3, #2
 80003a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003a4:	f107 0310 	add.w	r3, r7, #16
 80003a8:	4619      	mov	r1, r3
 80003aa:	4805      	ldr	r0, [pc, #20]	@ (80003c0 <MX_GPIO_Init+0xd8>)
 80003ac:	f001 f802 	bl	80013b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003b0:	bf00      	nop
 80003b2:	3720      	adds	r7, #32
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	40021000 	.word	0x40021000
 80003bc:	40011000 	.word	0x40011000
 80003c0:	40010c00 	.word	0x40010c00

080003c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c8:	b672      	cpsid	i
}
 80003ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003cc:	bf00      	nop
 80003ce:	e7fd      	b.n	80003cc <Error_Handler+0x8>

080003d0 <PN532_WriteFrame>:
/**
  * @brief: Write a frame to the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns -1 if there is an error parsing the frame.  
  */
int PN532_WriteFrame(PN532* pn532, uint8_t* data, uint16_t length) {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b0c8      	sub	sp, #288	@ 0x120
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80003da:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80003de:	6018      	str	r0, [r3, #0]
 80003e0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80003e4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80003e8:	6019      	str	r1, [r3, #0]
 80003ea:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80003ee:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80003f2:	801a      	strh	r2, [r3, #0]
    if (length > PN532_FRAME_MAX_LENGTH || length < 1) {
 80003f4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80003f8:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80003fc:	881b      	ldrh	r3, [r3, #0]
 80003fe:	2bff      	cmp	r3, #255	@ 0xff
 8000400:	d806      	bhi.n	8000410 <PN532_WriteFrame+0x40>
 8000402:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000406:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 800040a:	881b      	ldrh	r3, [r3, #0]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d102      	bne.n	8000416 <PN532_WriteFrame+0x46>
        return PN532_STATUS_ERROR; // Data must be array of 1 to 255 bytes.
 8000410:	f04f 33ff 	mov.w	r3, #4294967295
 8000414:	e0aa      	b.n	800056c <PN532_WriteFrame+0x19c>
    // - Command bytes
    // - Checksum
    // - Postamble (0x00)

    uint8_t frame[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 8000416:	2300      	movs	r3, #0
 8000418:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    frame[0] = PN532_PREAMBLE;
 800041c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000420:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
    frame[1] = PN532_STARTCODE1;
 8000428:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800042c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000430:	2200      	movs	r2, #0
 8000432:	705a      	strb	r2, [r3, #1]
    frame[2] = PN532_STARTCODE2;
 8000434:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000438:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800043c:	22ff      	movs	r2, #255	@ 0xff
 800043e:	709a      	strb	r2, [r3, #2]
    for (uint8_t i = 0; i < 3; i++) {
 8000440:	2300      	movs	r3, #0
 8000442:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8000446:	e010      	b.n	800046a <PN532_WriteFrame+0x9a>
        checksum += frame[i];
 8000448:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800044c:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000450:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000454:	5cd2      	ldrb	r2, [r2, r3]
 8000456:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800045a:	4413      	add	r3, r2
 800045c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < 3; i++) {
 8000460:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000464:	3301      	adds	r3, #1
 8000466:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800046a:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800046e:	2b02      	cmp	r3, #2
 8000470:	d9ea      	bls.n	8000448 <PN532_WriteFrame+0x78>
    }
    frame[3] = length & 0xFF;
 8000472:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000476:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 800047a:	881b      	ldrh	r3, [r3, #0]
 800047c:	b2da      	uxtb	r2, r3
 800047e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000482:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000486:	70da      	strb	r2, [r3, #3]
    frame[4] = (~length + 1) & 0xFF;
 8000488:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800048c:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000490:	881b      	ldrh	r3, [r3, #0]
 8000492:	b2db      	uxtb	r3, r3
 8000494:	425b      	negs	r3, r3
 8000496:	b2da      	uxtb	r2, r3
 8000498:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800049c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80004a0:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 0; i < length; i++) {
 80004a2:	2300      	movs	r3, #0
 80004a4:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 80004a8:	e023      	b.n	80004f2 <PN532_WriteFrame+0x122>
        frame[5 + i] = data[i];
 80004aa:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 80004ae:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80004b2:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 80004b6:	6812      	ldr	r2, [r2, #0]
 80004b8:	441a      	add	r2, r3
 80004ba:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 80004be:	3305      	adds	r3, #5
 80004c0:	7811      	ldrb	r1, [r2, #0]
 80004c2:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80004c6:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80004ca:	54d1      	strb	r1, [r2, r3]
        checksum += data[i];
 80004cc:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 80004d0:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80004d4:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 80004d8:	6812      	ldr	r2, [r2, #0]
 80004da:	4413      	add	r3, r2
 80004dc:	781a      	ldrb	r2, [r3, #0]
 80004de:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80004e2:	4413      	add	r3, r2
 80004e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < length; i++) {
 80004e8:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 80004ec:	3301      	adds	r3, #1
 80004ee:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 80004f2:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 80004f6:	b29b      	uxth	r3, r3
 80004f8:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80004fc:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 8000500:	8812      	ldrh	r2, [r2, #0]
 8000502:	429a      	cmp	r2, r3
 8000504:	d8d1      	bhi.n	80004aa <PN532_WriteFrame+0xda>
    }
    frame[length + 5] = ~checksum & 0xFF;
 8000506:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800050a:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 800050e:	881b      	ldrh	r3, [r3, #0]
 8000510:	3305      	adds	r3, #5
 8000512:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 8000516:	43d2      	mvns	r2, r2
 8000518:	b2d1      	uxtb	r1, r2
 800051a:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800051e:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000522:	54d1      	strb	r1, [r2, r3]
    frame[length + 6] = PN532_POSTAMBLE;
 8000524:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000528:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 800052c:	881b      	ldrh	r3, [r3, #0]
 800052e:	3306      	adds	r3, #6
 8000530:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000534:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000538:	2100      	movs	r1, #0
 800053a:	54d1      	strb	r1, [r2, r3]
    if (pn532->write_data(frame, length + 7) != PN532_STATUS_OK) {
 800053c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000540:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	689b      	ldr	r3, [r3, #8]
 8000548:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800054c:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 8000550:	8812      	ldrh	r2, [r2, #0]
 8000552:	3207      	adds	r2, #7
 8000554:	b291      	uxth	r1, r2
 8000556:	f107 0214 	add.w	r2, r7, #20
 800055a:	4610      	mov	r0, r2
 800055c:	4798      	blx	r3
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d002      	beq.n	800056a <PN532_WriteFrame+0x19a>
        return PN532_STATUS_ERROR;
 8000564:	f04f 33ff 	mov.w	r3, #4294967295
 8000568:	e000      	b.n	800056c <PN532_WriteFrame+0x19c>
    }
    return PN532_STATUS_OK;
 800056a:	2300      	movs	r3, #0
}
 800056c:	4618      	mov	r0, r3
 800056e:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
	...

08000578 <PN532_ReadFrame>:
/**
  * @brief: Read a response frame from the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns frame length or -1 if there is an error parsing the frame.  
  */
int PN532_ReadFrame(PN532* pn532, uint8_t* response, uint16_t length) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b0c8      	sub	sp, #288	@ 0x120
 800057c:	af00      	add	r7, sp, #0
 800057e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000582:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000586:	6018      	str	r0, [r3, #0]
 8000588:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800058c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000590:	6019      	str	r1, [r3, #0]
 8000592:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000596:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 800059a:	801a      	strh	r2, [r3, #0]
    uint8_t buff[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 800059c:	2300      	movs	r3, #0
 800059e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    // Read frame with expected length of data.
    pn532->read_data(buff, length + 7);
 80005a2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80005a6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80005b2:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 80005b6:	8812      	ldrh	r2, [r2, #0]
 80005b8:	3207      	adds	r2, #7
 80005ba:	b291      	uxth	r1, r2
 80005bc:	f107 0214 	add.w	r2, r7, #20
 80005c0:	4610      	mov	r0, r2
 80005c2:	4798      	blx	r3
    // Swallow all the 0x00 values that preceed 0xFF.
    uint8_t offset = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    while (buff[offset] == 0x00) {
 80005ca:	e019      	b.n	8000600 <PN532_ReadFrame+0x88>
        offset += 1;
 80005cc:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80005d0:	3301      	adds	r3, #1
 80005d2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
        if (offset >= length + 8){
 80005d6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80005da:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80005de:	881b      	ldrh	r3, [r3, #0]
 80005e0:	1dda      	adds	r2, r3, #7
 80005e2:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80005e6:	429a      	cmp	r2, r3
 80005e8:	da0a      	bge.n	8000600 <PN532_ReadFrame+0x88>
            pn532->log("Response frame preamble does not contain 0x00FF!");
 80005ea:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80005ee:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	485b      	ldr	r0, [pc, #364]	@ (8000764 <PN532_ReadFrame+0x1ec>)
 80005f8:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 80005fa:	f04f 33ff 	mov.w	r3, #4294967295
 80005fe:	e0ab      	b.n	8000758 <PN532_ReadFrame+0x1e0>
    while (buff[offset] == 0x00) {
 8000600:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000604:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000608:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800060c:	5cd3      	ldrb	r3, [r2, r3]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d0dc      	beq.n	80005cc <PN532_ReadFrame+0x54>
        }
    }
    if (buff[offset] != 0xFF) {
 8000612:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000616:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800061a:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800061e:	5cd3      	ldrb	r3, [r2, r3]
 8000620:	2bff      	cmp	r3, #255	@ 0xff
 8000622:	d00a      	beq.n	800063a <PN532_ReadFrame+0xc2>
        pn532->log("Response frame preamble does not contain 0x00FF!");
 8000624:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000628:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	695b      	ldr	r3, [r3, #20]
 8000630:	484c      	ldr	r0, [pc, #304]	@ (8000764 <PN532_ReadFrame+0x1ec>)
 8000632:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000634:	f04f 33ff 	mov.w	r3, #4294967295
 8000638:	e08e      	b.n	8000758 <PN532_ReadFrame+0x1e0>
    }
    offset += 1;
 800063a:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800063e:	3301      	adds	r3, #1
 8000640:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    if (offset >= length + 8) {
 8000644:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000648:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 800064c:	881b      	ldrh	r3, [r3, #0]
 800064e:	1dda      	adds	r2, r3, #7
 8000650:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000654:	429a      	cmp	r2, r3
 8000656:	da0a      	bge.n	800066e <PN532_ReadFrame+0xf6>
        pn532->log("Response contains no data!");
 8000658:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800065c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	695b      	ldr	r3, [r3, #20]
 8000664:	4840      	ldr	r0, [pc, #256]	@ (8000768 <PN532_ReadFrame+0x1f0>)
 8000666:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000668:	f04f 33ff 	mov.w	r3, #4294967295
 800066c:	e074      	b.n	8000758 <PN532_ReadFrame+0x1e0>
    }
    // Check length & length checksum match.
    uint8_t frame_len = buff[offset];
 800066e:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000672:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000676:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800067a:	5cd3      	ldrb	r3, [r2, r3]
 800067c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    if (((frame_len + buff[offset+1]) & 0xFF) != 0) {
 8000680:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000684:	3301      	adds	r3, #1
 8000686:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800068a:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800068e:	5cd2      	ldrb	r2, [r2, r3]
 8000690:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8000694:	4413      	add	r3, r2
 8000696:	b2db      	uxtb	r3, r3
 8000698:	2b00      	cmp	r3, #0
 800069a:	d00a      	beq.n	80006b2 <PN532_ReadFrame+0x13a>
        pn532->log("Response length checksum did not match length!");
 800069c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80006a0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	695b      	ldr	r3, [r3, #20]
 80006a8:	4830      	ldr	r0, [pc, #192]	@ (800076c <PN532_ReadFrame+0x1f4>)
 80006aa:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80006ac:	f04f 33ff 	mov.w	r3, #4294967295
 80006b0:	e052      	b.n	8000758 <PN532_ReadFrame+0x1e0>
    }
    // Check frame checksum value matches bytes.
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 80006b2:	2300      	movs	r3, #0
 80006b4:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 80006b8:	e014      	b.n	80006e4 <PN532_ReadFrame+0x16c>
        checksum += buff[offset + 2 + i];
 80006ba:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80006be:	1c9a      	adds	r2, r3, #2
 80006c0:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 80006c4:	4413      	add	r3, r2
 80006c6:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80006ca:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80006ce:	5cd2      	ldrb	r2, [r2, r3]
 80006d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80006d4:	4413      	add	r3, r2
 80006d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 80006da:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 80006de:	3301      	adds	r3, #1
 80006e0:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 80006e4:	f897 211b 	ldrb.w	r2, [r7, #283]	@ 0x11b
 80006e8:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d2e4      	bcs.n	80006ba <PN532_ReadFrame+0x142>
    }
    checksum &= 0xFF;
    if (checksum != 0) {
 80006f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d00a      	beq.n	800070e <PN532_ReadFrame+0x196>
        pn532->log("Response checksum did not match expected checksum");
 80006f8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80006fc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	695b      	ldr	r3, [r3, #20]
 8000704:	481a      	ldr	r0, [pc, #104]	@ (8000770 <PN532_ReadFrame+0x1f8>)
 8000706:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000708:	f04f 33ff 	mov.w	r3, #4294967295
 800070c:	e024      	b.n	8000758 <PN532_ReadFrame+0x1e0>
    }
    // Return frame data.
    for (uint8_t i = 0; i < frame_len; i++) {
 800070e:	2300      	movs	r3, #0
 8000710:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
 8000714:	e018      	b.n	8000748 <PN532_ReadFrame+0x1d0>
        response[i] = buff[offset + 2 + i];
 8000716:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800071a:	1c9a      	adds	r2, r3, #2
 800071c:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 8000720:	441a      	add	r2, r3
 8000722:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 8000726:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 800072a:	f5a1 718c 	sub.w	r1, r1, #280	@ 0x118
 800072e:	6809      	ldr	r1, [r1, #0]
 8000730:	440b      	add	r3, r1
 8000732:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8000736:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 800073a:	5c8a      	ldrb	r2, [r1, r2]
 800073c:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < frame_len; i++) {
 800073e:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 8000742:	3301      	adds	r3, #1
 8000744:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
 8000748:	f897 211c 	ldrb.w	r2, [r7, #284]	@ 0x11c
 800074c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8000750:	429a      	cmp	r2, r3
 8000752:	d3e0      	bcc.n	8000716 <PN532_ReadFrame+0x19e>
    }
    return frame_len;
 8000754:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
}
 8000758:	4618      	mov	r0, r3
 800075a:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	08003304 	.word	0x08003304
 8000768:	08003338 	.word	0x08003338
 800076c:	08003354 	.word	0x08003354
 8000770:	08003384 	.word	0x08003384

08000774 <PN532_CallFunction>:
    uint8_t* response,
    uint16_t response_length,
    uint8_t* params,
    uint16_t params_length,
    uint32_t timeout
) {
 8000774:	b590      	push	{r4, r7, lr}
 8000776:	b0c7      	sub	sp, #284	@ 0x11c
 8000778:	af00      	add	r7, sp, #0
 800077a:	f507 748c 	add.w	r4, r7, #280	@ 0x118
 800077e:	f5a4 7486 	sub.w	r4, r4, #268	@ 0x10c
 8000782:	6020      	str	r0, [r4, #0]
 8000784:	4608      	mov	r0, r1
 8000786:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 800078a:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 800078e:	600a      	str	r2, [r1, #0]
 8000790:	4619      	mov	r1, r3
 8000792:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000796:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 800079a:	4602      	mov	r2, r0
 800079c:	701a      	strb	r2, [r3, #0]
 800079e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80007a2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80007a6:	460a      	mov	r2, r1
 80007a8:	801a      	strh	r2, [r3, #0]
    // Build frame data with command and parameters.
    uint8_t buff[PN532_FRAME_MAX_LENGTH];
    buff[0] = PN532_HOSTTOPN532;
 80007aa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80007ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80007b2:	22d4      	movs	r2, #212	@ 0xd4
 80007b4:	701a      	strb	r2, [r3, #0]
    buff[1] = command & 0xFF;
 80007b6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80007ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80007be:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80007c2:	f2a2 120d 	subw	r2, r2, #269	@ 0x10d
 80007c6:	7812      	ldrb	r2, [r2, #0]
 80007c8:	705a      	strb	r2, [r3, #1]
    for (uint8_t i = 0; i < params_length; i++) {
 80007ca:	2300      	movs	r3, #0
 80007cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80007d0:	e012      	b.n	80007f8 <PN532_CallFunction+0x84>
        buff[2 + i] = params[i];
 80007d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80007d6:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80007da:	441a      	add	r2, r3
 80007dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80007e0:	3302      	adds	r3, #2
 80007e2:	7811      	ldrb	r1, [r2, #0]
 80007e4:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80007e8:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80007ec:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < params_length; i++) {
 80007ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80007f2:	3301      	adds	r3, #1
 80007f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80007f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	f8b7 212c 	ldrh.w	r2, [r7, #300]	@ 0x12c
 8000802:	429a      	cmp	r2, r3
 8000804:	d8e5      	bhi.n	80007d2 <PN532_CallFunction+0x5e>
    }
    // Send frame and wait for response.
    if (PN532_WriteFrame(pn532, buff, params_length + 2) != PN532_STATUS_OK) {
 8000806:	f8b7 312c 	ldrh.w	r3, [r7, #300]	@ 0x12c
 800080a:	3302      	adds	r3, #2
 800080c:	b29a      	uxth	r2, r3
 800080e:	f107 0110 	add.w	r1, r7, #16
 8000812:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000816:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800081a:	6818      	ldr	r0, [r3, #0]
 800081c:	f7ff fdd8 	bl	80003d0 <PN532_WriteFrame>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d011      	beq.n	800084a <PN532_CallFunction+0xd6>
        pn532->wakeup();
 8000826:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800082a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	691b      	ldr	r3, [r3, #16]
 8000832:	4798      	blx	r3
        pn532->log("Trying to wakeup");
 8000834:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000838:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	695b      	ldr	r3, [r3, #20]
 8000840:	485b      	ldr	r0, [pc, #364]	@ (80009b0 <PN532_CallFunction+0x23c>)
 8000842:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000844:	f04f 33ff 	mov.w	r3, #4294967295
 8000848:	e0ac      	b.n	80009a4 <PN532_CallFunction+0x230>
    }
    if (!pn532->wait_ready(timeout)) {
 800084a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800084e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	68db      	ldr	r3, [r3, #12]
 8000856:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 800085a:	4798      	blx	r3
 800085c:	4603      	mov	r3, r0
 800085e:	f083 0301 	eor.w	r3, r3, #1
 8000862:	b2db      	uxtb	r3, r3
 8000864:	2b00      	cmp	r3, #0
 8000866:	d002      	beq.n	800086e <PN532_CallFunction+0xfa>
        return PN532_STATUS_ERROR;
 8000868:	f04f 33ff 	mov.w	r3, #4294967295
 800086c:	e09a      	b.n	80009a4 <PN532_CallFunction+0x230>
    }
    // Verify ACK response and wait to be ready for function response.
    pn532->read_data(buff, sizeof(PN532_ACK));
 800086e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000872:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	f107 0210 	add.w	r2, r7, #16
 800087e:	2106      	movs	r1, #6
 8000880:	4610      	mov	r0, r2
 8000882:	4798      	blx	r3
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 8000884:	2300      	movs	r3, #0
 8000886:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800088a:	e01c      	b.n	80008c6 <PN532_CallFunction+0x152>
        if (PN532_ACK[i] != buff[i]) {
 800088c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8000890:	4a48      	ldr	r2, [pc, #288]	@ (80009b4 <PN532_CallFunction+0x240>)
 8000892:	5cd2      	ldrb	r2, [r2, r3]
 8000894:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8000898:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 800089c:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 80008a0:	5ccb      	ldrb	r3, [r1, r3]
 80008a2:	429a      	cmp	r2, r3
 80008a4:	d00a      	beq.n	80008bc <PN532_CallFunction+0x148>
            pn532->log("Did not receive expected ACK from PN532!");
 80008a6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80008aa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	695b      	ldr	r3, [r3, #20]
 80008b2:	4841      	ldr	r0, [pc, #260]	@ (80009b8 <PN532_CallFunction+0x244>)
 80008b4:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 80008b6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ba:	e073      	b.n	80009a4 <PN532_CallFunction+0x230>
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 80008bc:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80008c0:	3301      	adds	r3, #1
 80008c2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80008c6:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80008ca:	2b05      	cmp	r3, #5
 80008cc:	d9de      	bls.n	800088c <PN532_CallFunction+0x118>
        }
    }
    if (!pn532->wait_ready(timeout)) {
 80008ce:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80008d2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	68db      	ldr	r3, [r3, #12]
 80008da:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 80008de:	4798      	blx	r3
 80008e0:	4603      	mov	r3, r0
 80008e2:	f083 0301 	eor.w	r3, r3, #1
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d002      	beq.n	80008f2 <PN532_CallFunction+0x17e>
        return PN532_STATUS_ERROR;
 80008ec:	f04f 33ff 	mov.w	r3, #4294967295
 80008f0:	e058      	b.n	80009a4 <PN532_CallFunction+0x230>
    }
    // Read response bytes.
    int frame_len = PN532_ReadFrame(pn532, buff, response_length + 2);
 80008f2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80008f6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	3302      	adds	r3, #2
 80008fe:	b29a      	uxth	r2, r3
 8000900:	f107 0110 	add.w	r1, r7, #16
 8000904:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000908:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800090c:	6818      	ldr	r0, [r3, #0]
 800090e:	f7ff fe33 	bl	8000578 <PN532_ReadFrame>
 8000912:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    // Check that response is for the called function.
    if (! ((buff[0] == PN532_PN532TOHOST) && (buff[1] == (command+1)))) {
 8000916:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800091a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2bd5      	cmp	r3, #213	@ 0xd5
 8000922:	d10d      	bne.n	8000940 <PN532_CallFunction+0x1cc>
 8000924:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000928:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800092c:	785b      	ldrb	r3, [r3, #1]
 800092e:	461a      	mov	r2, r3
 8000930:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000934:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	3301      	adds	r3, #1
 800093c:	429a      	cmp	r2, r3
 800093e:	d00a      	beq.n	8000956 <PN532_CallFunction+0x1e2>
        pn532->log("Received unexpected command response!");
 8000940:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000944:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	695b      	ldr	r3, [r3, #20]
 800094c:	481b      	ldr	r0, [pc, #108]	@ (80009bc <PN532_CallFunction+0x248>)
 800094e:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000950:	f04f 33ff 	mov.w	r3, #4294967295
 8000954:	e026      	b.n	80009a4 <PN532_CallFunction+0x230>
    }
    // Return response data.
    for (uint8_t i = 0; i < response_length; i++) {
 8000956:	2300      	movs	r3, #0
 8000958:	f887 3115 	strb.w	r3, [r7, #277]	@ 0x115
 800095c:	e015      	b.n	800098a <PN532_CallFunction+0x216>
        response[i] = buff[i + 2];
 800095e:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8000962:	1c9a      	adds	r2, r3, #2
 8000964:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8000968:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 800096c:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 8000970:	6809      	ldr	r1, [r1, #0]
 8000972:	440b      	add	r3, r1
 8000974:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8000978:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 800097c:	5c8a      	ldrb	r2, [r1, r2]
 800097e:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < response_length; i++) {
 8000980:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8000984:	3301      	adds	r3, #1
 8000986:	f887 3115 	strb.w	r3, [r7, #277]	@ 0x115
 800098a:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 800098e:	b29b      	uxth	r3, r3
 8000990:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000994:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000998:	8812      	ldrh	r2, [r2, #0]
 800099a:	429a      	cmp	r2, r3
 800099c:	d8df      	bhi.n	800095e <PN532_CallFunction+0x1ea>
    }
    // The the number of bytes read
    return frame_len - 2;
 800099e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80009a2:	3b02      	subs	r3, #2
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd90      	pop	{r4, r7, pc}
 80009ae:	bf00      	nop
 80009b0:	080033b8 	.word	0x080033b8
 80009b4:	08003490 	.word	0x08003490
 80009b8:	080033cc 	.word	0x080033cc
 80009bc:	080033f8 	.word	0x080033f8

080009c0 <PN532_GetFirmwareVersion>:

/**
  * @brief: Call PN532 GetFirmwareVersion function and return a buff with the IC,
  *  Ver, Rev, and Support values.
  */
int PN532_GetFirmwareVersion(PN532* pn532, uint8_t* version) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af04      	add	r7, sp, #16
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]
    // length of version: 4
    if (PN532_CallFunction(pn532, PN532_COMMAND_GETFIRMWAREVERSION,
 80009ca:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80009ce:	9302      	str	r3, [sp, #8]
 80009d0:	2300      	movs	r3, #0
 80009d2:	9301      	str	r3, [sp, #4]
 80009d4:	2300      	movs	r3, #0
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	2304      	movs	r3, #4
 80009da:	683a      	ldr	r2, [r7, #0]
 80009dc:	2102      	movs	r1, #2
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f7ff fec8 	bl	8000774 <PN532_CallFunction>
 80009e4:	4603      	mov	r3, r0
 80009e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009ea:	d106      	bne.n	80009fa <PN532_GetFirmwareVersion+0x3a>
                           version, 4, NULL, 0, 500) == PN532_STATUS_ERROR) {
        pn532->log("Failed to detect the PN532");
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	695b      	ldr	r3, [r3, #20]
 80009f0:	4804      	ldr	r0, [pc, #16]	@ (8000a04 <PN532_GetFirmwareVersion+0x44>)
 80009f2:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80009f4:	f04f 33ff 	mov.w	r3, #4294967295
 80009f8:	e000      	b.n	80009fc <PN532_GetFirmwareVersion+0x3c>
    }
    return PN532_STATUS_OK;
 80009fa:	2300      	movs	r3, #0
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	08003420 	.word	0x08003420

08000a08 <PN532_SamConfiguration>:

/**
  * @brief: Configure the PN532 to read MiFare cards.
  */
int PN532_SamConfiguration(PN532* pn532) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b088      	sub	sp, #32
 8000a0c:	af04      	add	r7, sp, #16
 8000a0e:	6078      	str	r0, [r7, #4]
    // - 0x01, normal mode
    // - 0x14, timeout 50ms * 20 = 1 second
    // - 0x01, use IRQ pin
    // Note that no other verification is necessary as call_function will
    // check the command was executed as expected.
    uint8_t params[] = {0x01, 0x14, 0x01};
 8000a10:	4a0d      	ldr	r2, [pc, #52]	@ (8000a48 <PN532_SamConfiguration+0x40>)
 8000a12:	f107 030c 	add.w	r3, r7, #12
 8000a16:	6812      	ldr	r2, [r2, #0]
 8000a18:	4611      	mov	r1, r2
 8000a1a:	8019      	strh	r1, [r3, #0]
 8000a1c:	3302      	adds	r3, #2
 8000a1e:	0c12      	lsrs	r2, r2, #16
 8000a20:	701a      	strb	r2, [r3, #0]
    PN532_CallFunction(pn532, PN532_COMMAND_SAMCONFIGURATION,
 8000a22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a26:	9302      	str	r3, [sp, #8]
 8000a28:	2303      	movs	r3, #3
 8000a2a:	9301      	str	r3, [sp, #4]
 8000a2c:	f107 030c 	add.w	r3, r7, #12
 8000a30:	9300      	str	r3, [sp, #0]
 8000a32:	2300      	movs	r3, #0
 8000a34:	2200      	movs	r2, #0
 8000a36:	2114      	movs	r1, #20
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f7ff fe9b 	bl	8000774 <PN532_CallFunction>
                       NULL, 0, params, sizeof(params), PN532_DEFAULT_TIMEOUT);
    return PN532_STATUS_OK;
 8000a3e:	2300      	movs	r3, #0
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3710      	adds	r7, #16
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	0800343c 	.word	0x0800343c

08000a4c <PN532_ReadPassiveTarget>:
int PN532_ReadPassiveTarget(
    PN532* pn532,
    uint8_t* response,
    uint8_t card_baud,
    uint32_t timeout
) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b090      	sub	sp, #64	@ 0x40
 8000a50:	af04      	add	r7, sp, #16
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	4613      	mov	r3, r2
 8000a5a:	71fb      	strb	r3, [r7, #7]
    // Send passive read command for 1 card.  Expect at most a 7 byte UUID.
    uint8_t params[] = {0x01, card_baud};
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    uint8_t buff[19];
    int length = PN532_CallFunction(pn532, PN532_COMMAND_INLISTPASSIVETARGET,
 8000a68:	f107 0210 	add.w	r2, r7, #16
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	9302      	str	r3, [sp, #8]
 8000a70:	2302      	movs	r3, #2
 8000a72:	9301      	str	r3, [sp, #4]
 8000a74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a78:	9300      	str	r3, [sp, #0]
 8000a7a:	2313      	movs	r3, #19
 8000a7c:	214a      	movs	r1, #74	@ 0x4a
 8000a7e:	68f8      	ldr	r0, [r7, #12]
 8000a80:	f7ff fe78 	bl	8000774 <PN532_CallFunction>
 8000a84:	62b8      	str	r0, [r7, #40]	@ 0x28
                        buff, sizeof(buff), params, sizeof(params), timeout);
    if (length < 0) {
 8000a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	da02      	bge.n	8000a92 <PN532_ReadPassiveTarget+0x46>
        return PN532_STATUS_ERROR; // No card found
 8000a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a90:	e02e      	b.n	8000af0 <PN532_ReadPassiveTarget+0xa4>
    }
    // Check only 1 card with up to a 7 byte UID is present.
    if (buff[0] != 0x01) {
 8000a92:	7c3b      	ldrb	r3, [r7, #16]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d006      	beq.n	8000aa6 <PN532_ReadPassiveTarget+0x5a>
        pn532->log("More than one card detected!");
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	695b      	ldr	r3, [r3, #20]
 8000a9c:	4816      	ldr	r0, [pc, #88]	@ (8000af8 <PN532_ReadPassiveTarget+0xac>)
 8000a9e:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa4:	e024      	b.n	8000af0 <PN532_ReadPassiveTarget+0xa4>
    }
    if (buff[5] > 7) {
 8000aa6:	7d7b      	ldrb	r3, [r7, #21]
 8000aa8:	2b07      	cmp	r3, #7
 8000aaa:	d906      	bls.n	8000aba <PN532_ReadPassiveTarget+0x6e>
        pn532->log("Found card with unexpectedly long UID!");
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	695b      	ldr	r3, [r3, #20]
 8000ab0:	4812      	ldr	r0, [pc, #72]	@ (8000afc <PN532_ReadPassiveTarget+0xb0>)
 8000ab2:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab8:	e01a      	b.n	8000af0 <PN532_ReadPassiveTarget+0xa4>
    }
    for (uint8_t i = 0; i < buff[5]; i++) {
 8000aba:	2300      	movs	r3, #0
 8000abc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000ac0:	e010      	b.n	8000ae4 <PN532_ReadPassiveTarget+0x98>
        response[i] = buff[6 + i];
 8000ac2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ac6:	1d9a      	adds	r2, r3, #6
 8000ac8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000acc:	68b9      	ldr	r1, [r7, #8]
 8000ace:	440b      	add	r3, r1
 8000ad0:	3230      	adds	r2, #48	@ 0x30
 8000ad2:	443a      	add	r2, r7
 8000ad4:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8000ad8:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < buff[5]; i++) {
 8000ada:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ade:	3301      	adds	r3, #1
 8000ae0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000ae4:	7d7b      	ldrb	r3, [r7, #21]
 8000ae6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000aea:	429a      	cmp	r2, r3
 8000aec:	d3e9      	bcc.n	8000ac2 <PN532_ReadPassiveTarget+0x76>
    }
    return buff[5];
 8000aee:	7d7b      	ldrb	r3, [r7, #21]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3730      	adds	r7, #48	@ 0x30
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	08003440 	.word	0x08003440
 8000afc:	08003460 	.word	0x08003460

08000b00 <PN532_Reset>:
//extern I2C_HandleTypeDef hi2c1;

/**************************************************************************
 * Reset and Log implements
 **************************************************************************/
int PN532_Reset(void) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RFID_Reset_GPIO_Port, RFID_Reset_Pin, GPIO_PIN_SET);
 8000b04:	2201      	movs	r2, #1
 8000b06:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b0a:	480e      	ldr	r0, [pc, #56]	@ (8000b44 <PN532_Reset+0x44>)
 8000b0c:	f000 fdd6 	bl	80016bc <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000b10:	2064      	movs	r0, #100	@ 0x64
 8000b12:	f000 fb47 	bl	80011a4 <HAL_Delay>
    HAL_GPIO_WritePin(RFID_Reset_GPIO_Port, RFID_Reset_Pin, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b1c:	4809      	ldr	r0, [pc, #36]	@ (8000b44 <PN532_Reset+0x44>)
 8000b1e:	f000 fdcd 	bl	80016bc <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000b22:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b26:	f000 fb3d 	bl	80011a4 <HAL_Delay>
    HAL_GPIO_WritePin(RFID_Reset_GPIO_Port, RFID_Reset_Pin, GPIO_PIN_SET);
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b30:	4804      	ldr	r0, [pc, #16]	@ (8000b44 <PN532_Reset+0x44>)
 8000b32:	f000 fdc3 	bl	80016bc <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000b36:	2064      	movs	r0, #100	@ 0x64
 8000b38:	f000 fb34 	bl	80011a4 <HAL_Delay>
    return PN532_STATUS_OK;
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40010c00 	.word	0x40010c00

08000b48 <PN532_Log>:

void PN532_Log(const char* log) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
    printf("%s\r\n", log);
 8000b50:	6879      	ldr	r1, [r7, #4]
 8000b52:	4803      	ldr	r0, [pc, #12]	@ (8000b60 <PN532_Log+0x18>)
 8000b54:	f001 fd52 	bl	80025fc <iprintf>
}
 8000b58:	bf00      	nop
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	08003488 	.word	0x08003488

08000b64 <spi_rw>:
        num >>= 1;
    }
    return result;
}

void spi_rw(uint8_t* data, uint8_t count) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af02      	add	r7, sp, #8
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(RFID_SS_GPIO_Port, RFID_SS_Pin, GPIO_PIN_RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2101      	movs	r1, #1
 8000b74:	480d      	ldr	r0, [pc, #52]	@ (8000bac <spi_rw+0x48>)
 8000b76:	f000 fda1 	bl	80016bc <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	f000 fb12 	bl	80011a4 <HAL_Delay>
    HAL_SPI_TransmitReceive(&hspi1, data, data, count, _SPI_TIMEOUT);
    for (uint8_t i = 0; i < count; i++) {
        data[i] = reverse_bit(data[i]);
    }
#else
    HAL_SPI_TransmitReceive(&hspi1, data, data, count, _SPI_TIMEOUT);
 8000b80:	78fb      	ldrb	r3, [r7, #3]
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	220a      	movs	r2, #10
 8000b86:	9200      	str	r2, [sp, #0]
 8000b88:	687a      	ldr	r2, [r7, #4]
 8000b8a:	6879      	ldr	r1, [r7, #4]
 8000b8c:	4808      	ldr	r0, [pc, #32]	@ (8000bb0 <spi_rw+0x4c>)
 8000b8e:	f001 fa0f 	bl	8001fb0 <HAL_SPI_TransmitReceive>
#endif
    HAL_Delay(1);
 8000b92:	2001      	movs	r0, #1
 8000b94:	f000 fb06 	bl	80011a4 <HAL_Delay>
    HAL_GPIO_WritePin(RFID_SS_GPIO_Port, RFID_SS_Pin, GPIO_PIN_SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	4803      	ldr	r0, [pc, #12]	@ (8000bac <spi_rw+0x48>)
 8000b9e:	f000 fd8d 	bl	80016bc <HAL_GPIO_WritePin>
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40010c00 	.word	0x40010c00
 8000bb0:	20000084 	.word	0x20000084

08000bb4 <PN532_SPI_ReadData>:

int PN532_SPI_ReadData(uint8_t* data, uint16_t count) {
 8000bb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000bb8:	b087      	sub	sp, #28
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	807b      	strh	r3, [r7, #2]
 8000bc2:	466b      	mov	r3, sp
 8000bc4:	461e      	mov	r6, r3
    uint8_t frame[count + 1];
 8000bc6:	887b      	ldrh	r3, [r7, #2]
 8000bc8:	1c59      	adds	r1, r3, #1
 8000bca:	1e4b      	subs	r3, r1, #1
 8000bcc:	613b      	str	r3, [r7, #16]
 8000bce:	460a      	mov	r2, r1
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	4690      	mov	r8, r2
 8000bd4:	4699      	mov	r9, r3
 8000bd6:	f04f 0200 	mov.w	r2, #0
 8000bda:	f04f 0300 	mov.w	r3, #0
 8000bde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000be2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000be6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000bea:	460a      	mov	r2, r1
 8000bec:	2300      	movs	r3, #0
 8000bee:	4614      	mov	r4, r2
 8000bf0:	461d      	mov	r5, r3
 8000bf2:	f04f 0200 	mov.w	r2, #0
 8000bf6:	f04f 0300 	mov.w	r3, #0
 8000bfa:	00eb      	lsls	r3, r5, #3
 8000bfc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c00:	00e2      	lsls	r2, r4, #3
 8000c02:	460b      	mov	r3, r1
 8000c04:	3307      	adds	r3, #7
 8000c06:	08db      	lsrs	r3, r3, #3
 8000c08:	00db      	lsls	r3, r3, #3
 8000c0a:	ebad 0d03 	sub.w	sp, sp, r3
 8000c0e:	466b      	mov	r3, sp
 8000c10:	3300      	adds	r3, #0
 8000c12:	60fb      	str	r3, [r7, #12]
    frame[0] = _SPI_DATAREAD;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	2203      	movs	r2, #3
 8000c18:	701a      	strb	r2, [r3, #0]
    HAL_Delay(5);
 8000c1a:	2005      	movs	r0, #5
 8000c1c:	f000 fac2 	bl	80011a4 <HAL_Delay>
    spi_rw(frame, count + 1);
 8000c20:	887b      	ldrh	r3, [r7, #2]
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	3301      	adds	r3, #1
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	4619      	mov	r1, r3
 8000c2a:	68f8      	ldr	r0, [r7, #12]
 8000c2c:	f7ff ff9a 	bl	8000b64 <spi_rw>
    for (uint8_t i = 0; i < count; i++) {
 8000c30:	2300      	movs	r3, #0
 8000c32:	75fb      	strb	r3, [r7, #23]
 8000c34:	e00a      	b.n	8000c4c <PN532_SPI_ReadData+0x98>
        data[i] = frame[i + 1];
 8000c36:	7dfb      	ldrb	r3, [r7, #23]
 8000c38:	1c5a      	adds	r2, r3, #1
 8000c3a:	7dfb      	ldrb	r3, [r7, #23]
 8000c3c:	6879      	ldr	r1, [r7, #4]
 8000c3e:	440b      	add	r3, r1
 8000c40:	68f9      	ldr	r1, [r7, #12]
 8000c42:	5c8a      	ldrb	r2, [r1, r2]
 8000c44:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 8000c46:	7dfb      	ldrb	r3, [r7, #23]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	75fb      	strb	r3, [r7, #23]
 8000c4c:	7dfb      	ldrb	r3, [r7, #23]
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	887a      	ldrh	r2, [r7, #2]
 8000c52:	429a      	cmp	r2, r3
 8000c54:	d8ef      	bhi.n	8000c36 <PN532_SPI_ReadData+0x82>
    }
    return PN532_STATUS_OK;
 8000c56:	2300      	movs	r3, #0
 8000c58:	46b5      	mov	sp, r6
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	371c      	adds	r7, #28
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000c64 <PN532_SPI_WriteData>:

int PN532_SPI_WriteData(uint8_t *data, uint16_t count) {
 8000c64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c68:	b087      	sub	sp, #28
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
 8000c6e:	460b      	mov	r3, r1
 8000c70:	807b      	strh	r3, [r7, #2]
 8000c72:	466b      	mov	r3, sp
 8000c74:	461e      	mov	r6, r3
    uint8_t frame[count + 1];
 8000c76:	887b      	ldrh	r3, [r7, #2]
 8000c78:	1c59      	adds	r1, r3, #1
 8000c7a:	1e4b      	subs	r3, r1, #1
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	460a      	mov	r2, r1
 8000c80:	2300      	movs	r3, #0
 8000c82:	4690      	mov	r8, r2
 8000c84:	4699      	mov	r9, r3
 8000c86:	f04f 0200 	mov.w	r2, #0
 8000c8a:	f04f 0300 	mov.w	r3, #0
 8000c8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000c92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000c96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000c9a:	460a      	mov	r2, r1
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4614      	mov	r4, r2
 8000ca0:	461d      	mov	r5, r3
 8000ca2:	f04f 0200 	mov.w	r2, #0
 8000ca6:	f04f 0300 	mov.w	r3, #0
 8000caa:	00eb      	lsls	r3, r5, #3
 8000cac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000cb0:	00e2      	lsls	r2, r4, #3
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	3307      	adds	r3, #7
 8000cb6:	08db      	lsrs	r3, r3, #3
 8000cb8:	00db      	lsls	r3, r3, #3
 8000cba:	ebad 0d03 	sub.w	sp, sp, r3
 8000cbe:	466b      	mov	r3, sp
 8000cc0:	3300      	adds	r3, #0
 8000cc2:	60fb      	str	r3, [r7, #12]
    frame[0] = _SPI_DATAWRITE;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 8000cca:	2300      	movs	r3, #0
 8000ccc:	75fb      	strb	r3, [r7, #23]
 8000cce:	e00a      	b.n	8000ce6 <PN532_SPI_WriteData+0x82>
        frame[i + 1] = data[i];
 8000cd0:	7dfb      	ldrb	r3, [r7, #23]
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	441a      	add	r2, r3
 8000cd6:	7dfb      	ldrb	r3, [r7, #23]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	7811      	ldrb	r1, [r2, #0]
 8000cdc:	68fa      	ldr	r2, [r7, #12]
 8000cde:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < count; i++) {
 8000ce0:	7dfb      	ldrb	r3, [r7, #23]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	75fb      	strb	r3, [r7, #23]
 8000ce6:	7dfb      	ldrb	r3, [r7, #23]
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	887a      	ldrh	r2, [r7, #2]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d8ef      	bhi.n	8000cd0 <PN532_SPI_WriteData+0x6c>
    }
    spi_rw(frame, count + 1);
 8000cf0:	887b      	ldrh	r3, [r7, #2]
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	68f8      	ldr	r0, [r7, #12]
 8000cfc:	f7ff ff32 	bl	8000b64 <spi_rw>
    return PN532_STATUS_OK;
 8000d00:	2300      	movs	r3, #0
 8000d02:	46b5      	mov	sp, r6
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	371c      	adds	r7, #28
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000d0e <PN532_SPI_WaitReady>:

bool PN532_SPI_WaitReady(uint32_t timeout) {
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b084      	sub	sp, #16
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
    uint8_t status[] = {_SPI_STATREAD, 0x00};
 8000d16:	2302      	movs	r3, #2
 8000d18:	813b      	strh	r3, [r7, #8]
    uint32_t tickstart = HAL_GetTick();
 8000d1a:	f000 fa39 	bl	8001190 <HAL_GetTick>
 8000d1e:	60f8      	str	r0, [r7, #12]
    while (HAL_GetTick() - tickstart < timeout) {
 8000d20:	e010      	b.n	8000d44 <PN532_SPI_WaitReady+0x36>
        HAL_Delay(10);
 8000d22:	200a      	movs	r0, #10
 8000d24:	f000 fa3e 	bl	80011a4 <HAL_Delay>
        spi_rw(status, sizeof(status));
 8000d28:	f107 0308 	add.w	r3, r7, #8
 8000d2c:	2102      	movs	r1, #2
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff ff18 	bl	8000b64 <spi_rw>
        if (status[1] == _SPI_READY) {
 8000d34:	7a7b      	ldrb	r3, [r7, #9]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d101      	bne.n	8000d3e <PN532_SPI_WaitReady+0x30>
            return true;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e00b      	b.n	8000d56 <PN532_SPI_WaitReady+0x48>
        } else {
            HAL_Delay(5);
 8000d3e:	2005      	movs	r0, #5
 8000d40:	f000 fa30 	bl	80011a4 <HAL_Delay>
    while (HAL_GetTick() - tickstart < timeout) {
 8000d44:	f000 fa24 	bl	8001190 <HAL_GetTick>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d8e6      	bhi.n	8000d22 <PN532_SPI_WaitReady+0x14>
        }
    }
    return false;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
	...

08000d60 <PN532_SPI_Wakeup>:

int PN532_SPI_Wakeup(void) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
    // Send any special commands/data to wake up PN532
    uint8_t data[] = {0x00};
 8000d66:	2300      	movs	r3, #0
 8000d68:	713b      	strb	r3, [r7, #4]
    HAL_Delay(1000);
 8000d6a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d6e:	f000 fa19 	bl	80011a4 <HAL_Delay>
    HAL_GPIO_WritePin(RFID_SS_GPIO_Port, RFID_SS_Pin, GPIO_PIN_RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2101      	movs	r1, #1
 8000d76:	480a      	ldr	r0, [pc, #40]	@ (8000da0 <PN532_SPI_Wakeup+0x40>)
 8000d78:	f000 fca0 	bl	80016bc <HAL_GPIO_WritePin>
    HAL_Delay(2); // T_osc_start
 8000d7c:	2002      	movs	r0, #2
 8000d7e:	f000 fa11 	bl	80011a4 <HAL_Delay>
    spi_rw(data, 1);
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	2101      	movs	r1, #1
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff feec 	bl	8000b64 <spi_rw>
    HAL_Delay(1000);
 8000d8c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d90:	f000 fa08 	bl	80011a4 <HAL_Delay>
    return PN532_STATUS_OK;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40010c00 	.word	0x40010c00

08000da4 <PN532_SPI_Init>:

void PN532_SPI_Init(PN532* pn532) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
    // init the pn532 functions
    pn532->reset =  PN532_Reset;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a0c      	ldr	r2, [pc, #48]	@ (8000de0 <PN532_SPI_Init+0x3c>)
 8000db0:	601a      	str	r2, [r3, #0]
    pn532->read_data = PN532_SPI_ReadData;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a0b      	ldr	r2, [pc, #44]	@ (8000de4 <PN532_SPI_Init+0x40>)
 8000db6:	605a      	str	r2, [r3, #4]
    pn532->write_data = PN532_SPI_WriteData;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a0b      	ldr	r2, [pc, #44]	@ (8000de8 <PN532_SPI_Init+0x44>)
 8000dbc:	609a      	str	r2, [r3, #8]
    pn532->wait_ready = PN532_SPI_WaitReady;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a0a      	ldr	r2, [pc, #40]	@ (8000dec <PN532_SPI_Init+0x48>)
 8000dc2:	60da      	str	r2, [r3, #12]
    pn532->wakeup = PN532_SPI_Wakeup;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000df0 <PN532_SPI_Init+0x4c>)
 8000dc8:	611a      	str	r2, [r3, #16]
    pn532->log = PN532_Log;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a09      	ldr	r2, [pc, #36]	@ (8000df4 <PN532_SPI_Init+0x50>)
 8000dce:	615a      	str	r2, [r3, #20]

    // hardware wakeup
    pn532->wakeup();
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	691b      	ldr	r3, [r3, #16]
 8000dd4:	4798      	blx	r3
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	08000b01 	.word	0x08000b01
 8000de4:	08000bb5 	.word	0x08000bb5
 8000de8:	08000c65 	.word	0x08000c65
 8000dec:	08000d0f 	.word	0x08000d0f
 8000df0:	08000d61 	.word	0x08000d61
 8000df4:	08000b49 	.word	0x08000b49

08000df8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dfe:	4b15      	ldr	r3, [pc, #84]	@ (8000e54 <HAL_MspInit+0x5c>)
 8000e00:	699b      	ldr	r3, [r3, #24]
 8000e02:	4a14      	ldr	r2, [pc, #80]	@ (8000e54 <HAL_MspInit+0x5c>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6193      	str	r3, [r2, #24]
 8000e0a:	4b12      	ldr	r3, [pc, #72]	@ (8000e54 <HAL_MspInit+0x5c>)
 8000e0c:	699b      	ldr	r3, [r3, #24]
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e16:	4b0f      	ldr	r3, [pc, #60]	@ (8000e54 <HAL_MspInit+0x5c>)
 8000e18:	69db      	ldr	r3, [r3, #28]
 8000e1a:	4a0e      	ldr	r2, [pc, #56]	@ (8000e54 <HAL_MspInit+0x5c>)
 8000e1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e20:	61d3      	str	r3, [r2, #28]
 8000e22:	4b0c      	ldr	r3, [pc, #48]	@ (8000e54 <HAL_MspInit+0x5c>)
 8000e24:	69db      	ldr	r3, [r3, #28]
 8000e26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e58 <HAL_MspInit+0x60>)
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	4a04      	ldr	r2, [pc, #16]	@ (8000e58 <HAL_MspInit+0x60>)
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	3714      	adds	r7, #20
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr
 8000e54:	40021000 	.word	0x40021000
 8000e58:	40010000 	.word	0x40010000

08000e5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b088      	sub	sp, #32
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 0310 	add.w	r3, r7, #16
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a1b      	ldr	r2, [pc, #108]	@ (8000ee4 <HAL_SPI_MspInit+0x88>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d12f      	bne.n	8000edc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee8 <HAL_SPI_MspInit+0x8c>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	4a19      	ldr	r2, [pc, #100]	@ (8000ee8 <HAL_SPI_MspInit+0x8c>)
 8000e82:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e86:	6193      	str	r3, [r2, #24]
 8000e88:	4b17      	ldr	r3, [pc, #92]	@ (8000ee8 <HAL_SPI_MspInit+0x8c>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e94:	4b14      	ldr	r3, [pc, #80]	@ (8000ee8 <HAL_SPI_MspInit+0x8c>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	4a13      	ldr	r2, [pc, #76]	@ (8000ee8 <HAL_SPI_MspInit+0x8c>)
 8000e9a:	f043 0304 	orr.w	r3, r3, #4
 8000e9e:	6193      	str	r3, [r2, #24]
 8000ea0:	4b11      	ldr	r3, [pc, #68]	@ (8000ee8 <HAL_SPI_MspInit+0x8c>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	f003 0304 	and.w	r3, r3, #4
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000eac:	23a0      	movs	r3, #160	@ 0xa0
 8000eae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb8:	f107 0310 	add.w	r3, r7, #16
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	480b      	ldr	r0, [pc, #44]	@ (8000eec <HAL_SPI_MspInit+0x90>)
 8000ec0:	f000 fa78 	bl	80013b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ec4:	2340      	movs	r3, #64	@ 0x40
 8000ec6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed0:	f107 0310 	add.w	r3, r7, #16
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4805      	ldr	r0, [pc, #20]	@ (8000eec <HAL_SPI_MspInit+0x90>)
 8000ed8:	f000 fa6c 	bl	80013b4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000edc:	bf00      	nop
 8000ede:	3720      	adds	r7, #32
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40013000 	.word	0x40013000
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	40010800 	.word	0x40010800

08000ef0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <NMI_Handler+0x4>

08000ef8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <HardFault_Handler+0x4>

08000f00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <MemManage_Handler+0x4>

08000f08 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f0c:	bf00      	nop
 8000f0e:	e7fd      	b.n	8000f0c <BusFault_Handler+0x4>

08000f10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <UsageFault_Handler+0x4>

08000f18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bc80      	pop	{r7}
 8000f22:	4770      	bx	lr

08000f24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr

08000f30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr

08000f3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f40:	f000 f914 	bl	800116c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	e00a      	b.n	8000f70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f5a:	f3af 8000 	nop.w
 8000f5e:	4601      	mov	r1, r0
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	1c5a      	adds	r2, r3, #1
 8000f64:	60ba      	str	r2, [r7, #8]
 8000f66:	b2ca      	uxtb	r2, r1
 8000f68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	697a      	ldr	r2, [r7, #20]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	dbf0      	blt.n	8000f5a <_read+0x12>
  }

  return len;
 8000f78:	687b      	ldr	r3, [r7, #4]
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b086      	sub	sp, #24
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	60f8      	str	r0, [r7, #12]
 8000f8a:	60b9      	str	r1, [r7, #8]
 8000f8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
 8000f92:	e009      	b.n	8000fa8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	1c5a      	adds	r2, r3, #1
 8000f98:	60ba      	str	r2, [r7, #8]
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	617b      	str	r3, [r7, #20]
 8000fa8:	697a      	ldr	r2, [r7, #20]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	dbf1      	blt.n	8000f94 <_write+0x12>
  }
  return len;
 8000fb0:	687b      	ldr	r3, [r7, #4]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3718      	adds	r7, #24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <_close>:

int _close(int file)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr

08000fd0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fe0:	605a      	str	r2, [r3, #4]
  return 0;
 8000fe2:	2300      	movs	r3, #0
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc80      	pop	{r7}
 8000fec:	4770      	bx	lr

08000fee <_isatty>:

int _isatty(int file)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	b083      	sub	sp, #12
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ff6:	2301      	movs	r3, #1
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr

08001002 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001002:	b480      	push	{r7}
 8001004:	b085      	sub	sp, #20
 8001006:	af00      	add	r7, sp, #0
 8001008:	60f8      	str	r0, [r7, #12]
 800100a:	60b9      	str	r1, [r7, #8]
 800100c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800100e:	2300      	movs	r3, #0
}
 8001010:	4618      	mov	r0, r3
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr
	...

0800101c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001024:	4a14      	ldr	r2, [pc, #80]	@ (8001078 <_sbrk+0x5c>)
 8001026:	4b15      	ldr	r3, [pc, #84]	@ (800107c <_sbrk+0x60>)
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001030:	4b13      	ldr	r3, [pc, #76]	@ (8001080 <_sbrk+0x64>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d102      	bne.n	800103e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001038:	4b11      	ldr	r3, [pc, #68]	@ (8001080 <_sbrk+0x64>)
 800103a:	4a12      	ldr	r2, [pc, #72]	@ (8001084 <_sbrk+0x68>)
 800103c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800103e:	4b10      	ldr	r3, [pc, #64]	@ (8001080 <_sbrk+0x64>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4413      	add	r3, r2
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	429a      	cmp	r2, r3
 800104a:	d207      	bcs.n	800105c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800104c:	f001 fb7a 	bl	8002744 <__errno>
 8001050:	4603      	mov	r3, r0
 8001052:	220c      	movs	r2, #12
 8001054:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001056:	f04f 33ff 	mov.w	r3, #4294967295
 800105a:	e009      	b.n	8001070 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800105c:	4b08      	ldr	r3, [pc, #32]	@ (8001080 <_sbrk+0x64>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001062:	4b07      	ldr	r3, [pc, #28]	@ (8001080 <_sbrk+0x64>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	4a05      	ldr	r2, [pc, #20]	@ (8001080 <_sbrk+0x64>)
 800106c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800106e:	68fb      	ldr	r3, [r7, #12]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20005000 	.word	0x20005000
 800107c:	00000400 	.word	0x00000400
 8001080:	20000220 	.word	0x20000220
 8001084:	20000378 	.word	0x20000378

08001088 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	bc80      	pop	{r7}
 8001092:	4770      	bx	lr

08001094 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001094:	f7ff fff8 	bl	8001088 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001098:	480b      	ldr	r0, [pc, #44]	@ (80010c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800109a:	490c      	ldr	r1, [pc, #48]	@ (80010cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800109c:	4a0c      	ldr	r2, [pc, #48]	@ (80010d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a0:	e002      	b.n	80010a8 <LoopCopyDataInit>

080010a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010a6:	3304      	adds	r3, #4

080010a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010ac:	d3f9      	bcc.n	80010a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ae:	4a09      	ldr	r2, [pc, #36]	@ (80010d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010b0:	4c09      	ldr	r4, [pc, #36]	@ (80010d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b4:	e001      	b.n	80010ba <LoopFillZerobss>

080010b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b8:	3204      	adds	r2, #4

080010ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010bc:	d3fb      	bcc.n	80010b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010be:	f001 fb47 	bl	8002750 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010c2:	f7ff f843 	bl	800014c <main>
  bx lr
 80010c6:	4770      	bx	lr
  ldr r0, =_sdata
 80010c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010cc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80010d0:	080034f8 	.word	0x080034f8
  ldr r2, =_sbss
 80010d4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80010d8:	20000374 	.word	0x20000374

080010dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010dc:	e7fe      	b.n	80010dc <ADC1_2_IRQHandler>
	...

080010e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e4:	4b08      	ldr	r3, [pc, #32]	@ (8001108 <HAL_Init+0x28>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a07      	ldr	r2, [pc, #28]	@ (8001108 <HAL_Init+0x28>)
 80010ea:	f043 0310 	orr.w	r3, r3, #16
 80010ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f0:	2003      	movs	r0, #3
 80010f2:	f000 f92b 	bl	800134c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010f6:	200f      	movs	r0, #15
 80010f8:	f000 f808 	bl	800110c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010fc:	f7ff fe7c 	bl	8000df8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40022000 	.word	0x40022000

0800110c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001114:	4b12      	ldr	r3, [pc, #72]	@ (8001160 <HAL_InitTick+0x54>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b12      	ldr	r3, [pc, #72]	@ (8001164 <HAL_InitTick+0x58>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	4619      	mov	r1, r3
 800111e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001122:	fbb3 f3f1 	udiv	r3, r3, r1
 8001126:	fbb2 f3f3 	udiv	r3, r2, r3
 800112a:	4618      	mov	r0, r3
 800112c:	f000 f935 	bl	800139a <HAL_SYSTICK_Config>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e00e      	b.n	8001158 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b0f      	cmp	r3, #15
 800113e:	d80a      	bhi.n	8001156 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001140:	2200      	movs	r2, #0
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	f04f 30ff 	mov.w	r0, #4294967295
 8001148:	f000 f90b 	bl	8001362 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800114c:	4a06      	ldr	r2, [pc, #24]	@ (8001168 <HAL_InitTick+0x5c>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001152:	2300      	movs	r3, #0
 8001154:	e000      	b.n	8001158 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000000 	.word	0x20000000
 8001164:	20000008 	.word	0x20000008
 8001168:	20000004 	.word	0x20000004

0800116c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001170:	4b05      	ldr	r3, [pc, #20]	@ (8001188 <HAL_IncTick+0x1c>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	4b05      	ldr	r3, [pc, #20]	@ (800118c <HAL_IncTick+0x20>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4413      	add	r3, r2
 800117c:	4a03      	ldr	r2, [pc, #12]	@ (800118c <HAL_IncTick+0x20>)
 800117e:	6013      	str	r3, [r2, #0]
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr
 8001188:	20000008 	.word	0x20000008
 800118c:	20000224 	.word	0x20000224

08001190 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return uwTick;
 8001194:	4b02      	ldr	r3, [pc, #8]	@ (80011a0 <HAL_GetTick+0x10>)
 8001196:	681b      	ldr	r3, [r3, #0]
}
 8001198:	4618      	mov	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr
 80011a0:	20000224 	.word	0x20000224

080011a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011ac:	f7ff fff0 	bl	8001190 <HAL_GetTick>
 80011b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011bc:	d005      	beq.n	80011ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011be:	4b0a      	ldr	r3, [pc, #40]	@ (80011e8 <HAL_Delay+0x44>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	461a      	mov	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4413      	add	r3, r2
 80011c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ca:	bf00      	nop
 80011cc:	f7ff ffe0 	bl	8001190 <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d8f7      	bhi.n	80011cc <HAL_Delay+0x28>
  {
  }
}
 80011dc:	bf00      	nop
 80011de:	bf00      	nop
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000008 	.word	0x20000008

080011ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001230 <__NVIC_SetPriorityGrouping+0x44>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001202:	68ba      	ldr	r2, [r7, #8]
 8001204:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001208:	4013      	ands	r3, r2
 800120a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001214:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001218:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800121c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800121e:	4a04      	ldr	r2, [pc, #16]	@ (8001230 <__NVIC_SetPriorityGrouping+0x44>)
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	60d3      	str	r3, [r2, #12]
}
 8001224:	bf00      	nop
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	bc80      	pop	{r7}
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001238:	4b04      	ldr	r3, [pc, #16]	@ (800124c <__NVIC_GetPriorityGrouping+0x18>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	0a1b      	lsrs	r3, r3, #8
 800123e:	f003 0307 	and.w	r3, r3, #7
}
 8001242:	4618      	mov	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	bc80      	pop	{r7}
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	6039      	str	r1, [r7, #0]
 800125a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001260:	2b00      	cmp	r3, #0
 8001262:	db0a      	blt.n	800127a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	b2da      	uxtb	r2, r3
 8001268:	490c      	ldr	r1, [pc, #48]	@ (800129c <__NVIC_SetPriority+0x4c>)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	0112      	lsls	r2, r2, #4
 8001270:	b2d2      	uxtb	r2, r2
 8001272:	440b      	add	r3, r1
 8001274:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001278:	e00a      	b.n	8001290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4908      	ldr	r1, [pc, #32]	@ (80012a0 <__NVIC_SetPriority+0x50>)
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	f003 030f 	and.w	r3, r3, #15
 8001286:	3b04      	subs	r3, #4
 8001288:	0112      	lsls	r2, r2, #4
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	440b      	add	r3, r1
 800128e:	761a      	strb	r2, [r3, #24]
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	e000e100 	.word	0xe000e100
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b089      	sub	sp, #36	@ 0x24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f1c3 0307 	rsb	r3, r3, #7
 80012be:	2b04      	cmp	r3, #4
 80012c0:	bf28      	it	cs
 80012c2:	2304      	movcs	r3, #4
 80012c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3304      	adds	r3, #4
 80012ca:	2b06      	cmp	r3, #6
 80012cc:	d902      	bls.n	80012d4 <NVIC_EncodePriority+0x30>
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3b03      	subs	r3, #3
 80012d2:	e000      	b.n	80012d6 <NVIC_EncodePriority+0x32>
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	f04f 32ff 	mov.w	r2, #4294967295
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43da      	mvns	r2, r3
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	401a      	ands	r2, r3
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ec:	f04f 31ff 	mov.w	r1, #4294967295
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	fa01 f303 	lsl.w	r3, r1, r3
 80012f6:	43d9      	mvns	r1, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fc:	4313      	orrs	r3, r2
         );
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3724      	adds	r7, #36	@ 0x24
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr

08001308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3b01      	subs	r3, #1
 8001314:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001318:	d301      	bcc.n	800131e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800131a:	2301      	movs	r3, #1
 800131c:	e00f      	b.n	800133e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800131e:	4a0a      	ldr	r2, [pc, #40]	@ (8001348 <SysTick_Config+0x40>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3b01      	subs	r3, #1
 8001324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001326:	210f      	movs	r1, #15
 8001328:	f04f 30ff 	mov.w	r0, #4294967295
 800132c:	f7ff ff90 	bl	8001250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001330:	4b05      	ldr	r3, [pc, #20]	@ (8001348 <SysTick_Config+0x40>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001336:	4b04      	ldr	r3, [pc, #16]	@ (8001348 <SysTick_Config+0x40>)
 8001338:	2207      	movs	r2, #7
 800133a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	e000e010 	.word	0xe000e010

0800134c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff ff49 	bl	80011ec <__NVIC_SetPriorityGrouping>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001362:	b580      	push	{r7, lr}
 8001364:	b086      	sub	sp, #24
 8001366:	af00      	add	r7, sp, #0
 8001368:	4603      	mov	r3, r0
 800136a:	60b9      	str	r1, [r7, #8]
 800136c:	607a      	str	r2, [r7, #4]
 800136e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001374:	f7ff ff5e 	bl	8001234 <__NVIC_GetPriorityGrouping>
 8001378:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	6978      	ldr	r0, [r7, #20]
 8001380:	f7ff ff90 	bl	80012a4 <NVIC_EncodePriority>
 8001384:	4602      	mov	r2, r0
 8001386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138a:	4611      	mov	r1, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff5f 	bl	8001250 <__NVIC_SetPriority>
}
 8001392:	bf00      	nop
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff ffb0 	bl	8001308 <SysTick_Config>
 80013a8:	4603      	mov	r3, r0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b08b      	sub	sp, #44	@ 0x2c
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013be:	2300      	movs	r3, #0
 80013c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013c2:	2300      	movs	r3, #0
 80013c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013c6:	e169      	b.n	800169c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013c8:	2201      	movs	r2, #1
 80013ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	69fa      	ldr	r2, [r7, #28]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	f040 8158 	bne.w	8001696 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	4a9a      	ldr	r2, [pc, #616]	@ (8001654 <HAL_GPIO_Init+0x2a0>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d05e      	beq.n	80014ae <HAL_GPIO_Init+0xfa>
 80013f0:	4a98      	ldr	r2, [pc, #608]	@ (8001654 <HAL_GPIO_Init+0x2a0>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d875      	bhi.n	80014e2 <HAL_GPIO_Init+0x12e>
 80013f6:	4a98      	ldr	r2, [pc, #608]	@ (8001658 <HAL_GPIO_Init+0x2a4>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d058      	beq.n	80014ae <HAL_GPIO_Init+0xfa>
 80013fc:	4a96      	ldr	r2, [pc, #600]	@ (8001658 <HAL_GPIO_Init+0x2a4>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d86f      	bhi.n	80014e2 <HAL_GPIO_Init+0x12e>
 8001402:	4a96      	ldr	r2, [pc, #600]	@ (800165c <HAL_GPIO_Init+0x2a8>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d052      	beq.n	80014ae <HAL_GPIO_Init+0xfa>
 8001408:	4a94      	ldr	r2, [pc, #592]	@ (800165c <HAL_GPIO_Init+0x2a8>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d869      	bhi.n	80014e2 <HAL_GPIO_Init+0x12e>
 800140e:	4a94      	ldr	r2, [pc, #592]	@ (8001660 <HAL_GPIO_Init+0x2ac>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d04c      	beq.n	80014ae <HAL_GPIO_Init+0xfa>
 8001414:	4a92      	ldr	r2, [pc, #584]	@ (8001660 <HAL_GPIO_Init+0x2ac>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d863      	bhi.n	80014e2 <HAL_GPIO_Init+0x12e>
 800141a:	4a92      	ldr	r2, [pc, #584]	@ (8001664 <HAL_GPIO_Init+0x2b0>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d046      	beq.n	80014ae <HAL_GPIO_Init+0xfa>
 8001420:	4a90      	ldr	r2, [pc, #576]	@ (8001664 <HAL_GPIO_Init+0x2b0>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d85d      	bhi.n	80014e2 <HAL_GPIO_Init+0x12e>
 8001426:	2b12      	cmp	r3, #18
 8001428:	d82a      	bhi.n	8001480 <HAL_GPIO_Init+0xcc>
 800142a:	2b12      	cmp	r3, #18
 800142c:	d859      	bhi.n	80014e2 <HAL_GPIO_Init+0x12e>
 800142e:	a201      	add	r2, pc, #4	@ (adr r2, 8001434 <HAL_GPIO_Init+0x80>)
 8001430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001434:	080014af 	.word	0x080014af
 8001438:	08001489 	.word	0x08001489
 800143c:	0800149b 	.word	0x0800149b
 8001440:	080014dd 	.word	0x080014dd
 8001444:	080014e3 	.word	0x080014e3
 8001448:	080014e3 	.word	0x080014e3
 800144c:	080014e3 	.word	0x080014e3
 8001450:	080014e3 	.word	0x080014e3
 8001454:	080014e3 	.word	0x080014e3
 8001458:	080014e3 	.word	0x080014e3
 800145c:	080014e3 	.word	0x080014e3
 8001460:	080014e3 	.word	0x080014e3
 8001464:	080014e3 	.word	0x080014e3
 8001468:	080014e3 	.word	0x080014e3
 800146c:	080014e3 	.word	0x080014e3
 8001470:	080014e3 	.word	0x080014e3
 8001474:	080014e3 	.word	0x080014e3
 8001478:	08001491 	.word	0x08001491
 800147c:	080014a5 	.word	0x080014a5
 8001480:	4a79      	ldr	r2, [pc, #484]	@ (8001668 <HAL_GPIO_Init+0x2b4>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d013      	beq.n	80014ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001486:	e02c      	b.n	80014e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	623b      	str	r3, [r7, #32]
          break;
 800148e:	e029      	b.n	80014e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	3304      	adds	r3, #4
 8001496:	623b      	str	r3, [r7, #32]
          break;
 8001498:	e024      	b.n	80014e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	3308      	adds	r3, #8
 80014a0:	623b      	str	r3, [r7, #32]
          break;
 80014a2:	e01f      	b.n	80014e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	330c      	adds	r3, #12
 80014aa:	623b      	str	r3, [r7, #32]
          break;
 80014ac:	e01a      	b.n	80014e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d102      	bne.n	80014bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014b6:	2304      	movs	r3, #4
 80014b8:	623b      	str	r3, [r7, #32]
          break;
 80014ba:	e013      	b.n	80014e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d105      	bne.n	80014d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014c4:	2308      	movs	r3, #8
 80014c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	69fa      	ldr	r2, [r7, #28]
 80014cc:	611a      	str	r2, [r3, #16]
          break;
 80014ce:	e009      	b.n	80014e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014d0:	2308      	movs	r3, #8
 80014d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	69fa      	ldr	r2, [r7, #28]
 80014d8:	615a      	str	r2, [r3, #20]
          break;
 80014da:	e003      	b.n	80014e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014dc:	2300      	movs	r3, #0
 80014de:	623b      	str	r3, [r7, #32]
          break;
 80014e0:	e000      	b.n	80014e4 <HAL_GPIO_Init+0x130>
          break;
 80014e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	2bff      	cmp	r3, #255	@ 0xff
 80014e8:	d801      	bhi.n	80014ee <HAL_GPIO_Init+0x13a>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	e001      	b.n	80014f2 <HAL_GPIO_Init+0x13e>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	3304      	adds	r3, #4
 80014f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	2bff      	cmp	r3, #255	@ 0xff
 80014f8:	d802      	bhi.n	8001500 <HAL_GPIO_Init+0x14c>
 80014fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	e002      	b.n	8001506 <HAL_GPIO_Init+0x152>
 8001500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001502:	3b08      	subs	r3, #8
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	210f      	movs	r1, #15
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	fa01 f303 	lsl.w	r3, r1, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	401a      	ands	r2, r3
 8001518:	6a39      	ldr	r1, [r7, #32]
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	fa01 f303 	lsl.w	r3, r1, r3
 8001520:	431a      	orrs	r2, r3
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 80b1 	beq.w	8001696 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001534:	4b4d      	ldr	r3, [pc, #308]	@ (800166c <HAL_GPIO_Init+0x2b8>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	4a4c      	ldr	r2, [pc, #304]	@ (800166c <HAL_GPIO_Init+0x2b8>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	6193      	str	r3, [r2, #24]
 8001540:	4b4a      	ldr	r3, [pc, #296]	@ (800166c <HAL_GPIO_Init+0x2b8>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800154c:	4a48      	ldr	r2, [pc, #288]	@ (8001670 <HAL_GPIO_Init+0x2bc>)
 800154e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001550:	089b      	lsrs	r3, r3, #2
 8001552:	3302      	adds	r3, #2
 8001554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001558:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800155a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155c:	f003 0303 	and.w	r3, r3, #3
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	220f      	movs	r2, #15
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	4013      	ands	r3, r2
 800156e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a40      	ldr	r2, [pc, #256]	@ (8001674 <HAL_GPIO_Init+0x2c0>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d013      	beq.n	80015a0 <HAL_GPIO_Init+0x1ec>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a3f      	ldr	r2, [pc, #252]	@ (8001678 <HAL_GPIO_Init+0x2c4>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d00d      	beq.n	800159c <HAL_GPIO_Init+0x1e8>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a3e      	ldr	r2, [pc, #248]	@ (800167c <HAL_GPIO_Init+0x2c8>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d007      	beq.n	8001598 <HAL_GPIO_Init+0x1e4>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a3d      	ldr	r2, [pc, #244]	@ (8001680 <HAL_GPIO_Init+0x2cc>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d101      	bne.n	8001594 <HAL_GPIO_Init+0x1e0>
 8001590:	2303      	movs	r3, #3
 8001592:	e006      	b.n	80015a2 <HAL_GPIO_Init+0x1ee>
 8001594:	2304      	movs	r3, #4
 8001596:	e004      	b.n	80015a2 <HAL_GPIO_Init+0x1ee>
 8001598:	2302      	movs	r3, #2
 800159a:	e002      	b.n	80015a2 <HAL_GPIO_Init+0x1ee>
 800159c:	2301      	movs	r3, #1
 800159e:	e000      	b.n	80015a2 <HAL_GPIO_Init+0x1ee>
 80015a0:	2300      	movs	r3, #0
 80015a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015a4:	f002 0203 	and.w	r2, r2, #3
 80015a8:	0092      	lsls	r2, r2, #2
 80015aa:	4093      	lsls	r3, r2
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015b2:	492f      	ldr	r1, [pc, #188]	@ (8001670 <HAL_GPIO_Init+0x2bc>)
 80015b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b6:	089b      	lsrs	r3, r3, #2
 80015b8:	3302      	adds	r3, #2
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d006      	beq.n	80015da <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	492c      	ldr	r1, [pc, #176]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	608b      	str	r3, [r1, #8]
 80015d8:	e006      	b.n	80015e8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015da:	4b2a      	ldr	r3, [pc, #168]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 80015dc:	689a      	ldr	r2, [r3, #8]
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	43db      	mvns	r3, r3
 80015e2:	4928      	ldr	r1, [pc, #160]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 80015e4:	4013      	ands	r3, r2
 80015e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d006      	beq.n	8001602 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015f4:	4b23      	ldr	r3, [pc, #140]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 80015f6:	68da      	ldr	r2, [r3, #12]
 80015f8:	4922      	ldr	r1, [pc, #136]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	60cb      	str	r3, [r1, #12]
 8001600:	e006      	b.n	8001610 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001602:	4b20      	ldr	r3, [pc, #128]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 8001604:	68da      	ldr	r2, [r3, #12]
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	43db      	mvns	r3, r3
 800160a:	491e      	ldr	r1, [pc, #120]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 800160c:	4013      	ands	r3, r2
 800160e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d006      	beq.n	800162a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800161c:	4b19      	ldr	r3, [pc, #100]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 800161e:	685a      	ldr	r2, [r3, #4]
 8001620:	4918      	ldr	r1, [pc, #96]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	4313      	orrs	r3, r2
 8001626:	604b      	str	r3, [r1, #4]
 8001628:	e006      	b.n	8001638 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800162a:	4b16      	ldr	r3, [pc, #88]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	43db      	mvns	r3, r3
 8001632:	4914      	ldr	r1, [pc, #80]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 8001634:	4013      	ands	r3, r2
 8001636:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d021      	beq.n	8001688 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001644:	4b0f      	ldr	r3, [pc, #60]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	490e      	ldr	r1, [pc, #56]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	4313      	orrs	r3, r2
 800164e:	600b      	str	r3, [r1, #0]
 8001650:	e021      	b.n	8001696 <HAL_GPIO_Init+0x2e2>
 8001652:	bf00      	nop
 8001654:	10320000 	.word	0x10320000
 8001658:	10310000 	.word	0x10310000
 800165c:	10220000 	.word	0x10220000
 8001660:	10210000 	.word	0x10210000
 8001664:	10120000 	.word	0x10120000
 8001668:	10110000 	.word	0x10110000
 800166c:	40021000 	.word	0x40021000
 8001670:	40010000 	.word	0x40010000
 8001674:	40010800 	.word	0x40010800
 8001678:	40010c00 	.word	0x40010c00
 800167c:	40011000 	.word	0x40011000
 8001680:	40011400 	.word	0x40011400
 8001684:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001688:	4b0b      	ldr	r3, [pc, #44]	@ (80016b8 <HAL_GPIO_Init+0x304>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	43db      	mvns	r3, r3
 8001690:	4909      	ldr	r1, [pc, #36]	@ (80016b8 <HAL_GPIO_Init+0x304>)
 8001692:	4013      	ands	r3, r2
 8001694:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001698:	3301      	adds	r3, #1
 800169a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a2:	fa22 f303 	lsr.w	r3, r2, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f47f ae8e 	bne.w	80013c8 <HAL_GPIO_Init+0x14>
  }
}
 80016ac:	bf00      	nop
 80016ae:	bf00      	nop
 80016b0:	372c      	adds	r7, #44	@ 0x2c
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	40010400 	.word	0x40010400

080016bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	807b      	strh	r3, [r7, #2]
 80016c8:	4613      	mov	r3, r2
 80016ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016cc:	787b      	ldrb	r3, [r7, #1]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016d2:	887a      	ldrh	r2, [r7, #2]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016d8:	e003      	b.n	80016e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016da:	887b      	ldrh	r3, [r7, #2]
 80016dc:	041a      	lsls	r2, r3, #16
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	611a      	str	r2, [r3, #16]
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr

080016ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e272      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 8087 	beq.w	800181a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800170c:	4b92      	ldr	r3, [pc, #584]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 030c 	and.w	r3, r3, #12
 8001714:	2b04      	cmp	r3, #4
 8001716:	d00c      	beq.n	8001732 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001718:	4b8f      	ldr	r3, [pc, #572]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 030c 	and.w	r3, r3, #12
 8001720:	2b08      	cmp	r3, #8
 8001722:	d112      	bne.n	800174a <HAL_RCC_OscConfig+0x5e>
 8001724:	4b8c      	ldr	r3, [pc, #560]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800172c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001730:	d10b      	bne.n	800174a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001732:	4b89      	ldr	r3, [pc, #548]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d06c      	beq.n	8001818 <HAL_RCC_OscConfig+0x12c>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d168      	bne.n	8001818 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e24c      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001752:	d106      	bne.n	8001762 <HAL_RCC_OscConfig+0x76>
 8001754:	4b80      	ldr	r3, [pc, #512]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a7f      	ldr	r2, [pc, #508]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 800175a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800175e:	6013      	str	r3, [r2, #0]
 8001760:	e02e      	b.n	80017c0 <HAL_RCC_OscConfig+0xd4>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10c      	bne.n	8001784 <HAL_RCC_OscConfig+0x98>
 800176a:	4b7b      	ldr	r3, [pc, #492]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a7a      	ldr	r2, [pc, #488]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001770:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	4b78      	ldr	r3, [pc, #480]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a77      	ldr	r2, [pc, #476]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 800177c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001780:	6013      	str	r3, [r2, #0]
 8001782:	e01d      	b.n	80017c0 <HAL_RCC_OscConfig+0xd4>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800178c:	d10c      	bne.n	80017a8 <HAL_RCC_OscConfig+0xbc>
 800178e:	4b72      	ldr	r3, [pc, #456]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a71      	ldr	r2, [pc, #452]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001794:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	4b6f      	ldr	r3, [pc, #444]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a6e      	ldr	r2, [pc, #440]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 80017a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	e00b      	b.n	80017c0 <HAL_RCC_OscConfig+0xd4>
 80017a8:	4b6b      	ldr	r3, [pc, #428]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a6a      	ldr	r2, [pc, #424]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 80017ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	4b68      	ldr	r3, [pc, #416]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a67      	ldr	r2, [pc, #412]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 80017ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d013      	beq.n	80017f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c8:	f7ff fce2 	bl	8001190 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d0:	f7ff fcde 	bl	8001190 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b64      	cmp	r3, #100	@ 0x64
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e200      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e2:	4b5d      	ldr	r3, [pc, #372]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0f0      	beq.n	80017d0 <HAL_RCC_OscConfig+0xe4>
 80017ee:	e014      	b.n	800181a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f0:	f7ff fcce 	bl	8001190 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f8:	f7ff fcca 	bl	8001190 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b64      	cmp	r3, #100	@ 0x64
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e1ec      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800180a:	4b53      	ldr	r3, [pc, #332]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f0      	bne.n	80017f8 <HAL_RCC_OscConfig+0x10c>
 8001816:	e000      	b.n	800181a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001818:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d063      	beq.n	80018ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001826:	4b4c      	ldr	r3, [pc, #304]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 030c 	and.w	r3, r3, #12
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00b      	beq.n	800184a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001832:	4b49      	ldr	r3, [pc, #292]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 030c 	and.w	r3, r3, #12
 800183a:	2b08      	cmp	r3, #8
 800183c:	d11c      	bne.n	8001878 <HAL_RCC_OscConfig+0x18c>
 800183e:	4b46      	ldr	r3, [pc, #280]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d116      	bne.n	8001878 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800184a:	4b43      	ldr	r3, [pc, #268]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d005      	beq.n	8001862 <HAL_RCC_OscConfig+0x176>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d001      	beq.n	8001862 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e1c0      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001862:	4b3d      	ldr	r3, [pc, #244]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	4939      	ldr	r1, [pc, #228]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001872:	4313      	orrs	r3, r2
 8001874:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001876:	e03a      	b.n	80018ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d020      	beq.n	80018c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001880:	4b36      	ldr	r3, [pc, #216]	@ (800195c <HAL_RCC_OscConfig+0x270>)
 8001882:	2201      	movs	r2, #1
 8001884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001886:	f7ff fc83 	bl	8001190 <HAL_GetTick>
 800188a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188c:	e008      	b.n	80018a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800188e:	f7ff fc7f 	bl	8001190 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e1a1      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0f0      	beq.n	800188e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	4927      	ldr	r1, [pc, #156]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	600b      	str	r3, [r1, #0]
 80018c0:	e015      	b.n	80018ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018c2:	4b26      	ldr	r3, [pc, #152]	@ (800195c <HAL_RCC_OscConfig+0x270>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c8:	f7ff fc62 	bl	8001190 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d0:	f7ff fc5e 	bl	8001190 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e180      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f0      	bne.n	80018d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0308 	and.w	r3, r3, #8
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d03a      	beq.n	8001970 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d019      	beq.n	8001936 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001902:	4b17      	ldr	r3, [pc, #92]	@ (8001960 <HAL_RCC_OscConfig+0x274>)
 8001904:	2201      	movs	r2, #1
 8001906:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001908:	f7ff fc42 	bl	8001190 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001910:	f7ff fc3e 	bl	8001190 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e160      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001922:	4b0d      	ldr	r3, [pc, #52]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0f0      	beq.n	8001910 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800192e:	2001      	movs	r0, #1
 8001930:	f000 fa9c 	bl	8001e6c <RCC_Delay>
 8001934:	e01c      	b.n	8001970 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001936:	4b0a      	ldr	r3, [pc, #40]	@ (8001960 <HAL_RCC_OscConfig+0x274>)
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800193c:	f7ff fc28 	bl	8001190 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001942:	e00f      	b.n	8001964 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001944:	f7ff fc24 	bl	8001190 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d908      	bls.n	8001964 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e146      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
 8001956:	bf00      	nop
 8001958:	40021000 	.word	0x40021000
 800195c:	42420000 	.word	0x42420000
 8001960:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001964:	4b92      	ldr	r3, [pc, #584]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1e9      	bne.n	8001944 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	2b00      	cmp	r3, #0
 800197a:	f000 80a6 	beq.w	8001aca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800197e:	2300      	movs	r3, #0
 8001980:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001982:	4b8b      	ldr	r3, [pc, #556]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10d      	bne.n	80019aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800198e:	4b88      	ldr	r3, [pc, #544]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	4a87      	ldr	r2, [pc, #540]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001994:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001998:	61d3      	str	r3, [r2, #28]
 800199a:	4b85      	ldr	r3, [pc, #532]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019a6:	2301      	movs	r3, #1
 80019a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019aa:	4b82      	ldr	r3, [pc, #520]	@ (8001bb4 <HAL_RCC_OscConfig+0x4c8>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d118      	bne.n	80019e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019b6:	4b7f      	ldr	r3, [pc, #508]	@ (8001bb4 <HAL_RCC_OscConfig+0x4c8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a7e      	ldr	r2, [pc, #504]	@ (8001bb4 <HAL_RCC_OscConfig+0x4c8>)
 80019bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019c2:	f7ff fbe5 	bl	8001190 <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ca:	f7ff fbe1 	bl	8001190 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b64      	cmp	r3, #100	@ 0x64
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e103      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019dc:	4b75      	ldr	r3, [pc, #468]	@ (8001bb4 <HAL_RCC_OscConfig+0x4c8>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0f0      	beq.n	80019ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d106      	bne.n	80019fe <HAL_RCC_OscConfig+0x312>
 80019f0:	4b6f      	ldr	r3, [pc, #444]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	4a6e      	ldr	r2, [pc, #440]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	6213      	str	r3, [r2, #32]
 80019fc:	e02d      	b.n	8001a5a <HAL_RCC_OscConfig+0x36e>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10c      	bne.n	8001a20 <HAL_RCC_OscConfig+0x334>
 8001a06:	4b6a      	ldr	r3, [pc, #424]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	4a69      	ldr	r2, [pc, #420]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a0c:	f023 0301 	bic.w	r3, r3, #1
 8001a10:	6213      	str	r3, [r2, #32]
 8001a12:	4b67      	ldr	r3, [pc, #412]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a14:	6a1b      	ldr	r3, [r3, #32]
 8001a16:	4a66      	ldr	r2, [pc, #408]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a18:	f023 0304 	bic.w	r3, r3, #4
 8001a1c:	6213      	str	r3, [r2, #32]
 8001a1e:	e01c      	b.n	8001a5a <HAL_RCC_OscConfig+0x36e>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	2b05      	cmp	r3, #5
 8001a26:	d10c      	bne.n	8001a42 <HAL_RCC_OscConfig+0x356>
 8001a28:	4b61      	ldr	r3, [pc, #388]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	4a60      	ldr	r2, [pc, #384]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a2e:	f043 0304 	orr.w	r3, r3, #4
 8001a32:	6213      	str	r3, [r2, #32]
 8001a34:	4b5e      	ldr	r3, [pc, #376]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	4a5d      	ldr	r2, [pc, #372]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	6213      	str	r3, [r2, #32]
 8001a40:	e00b      	b.n	8001a5a <HAL_RCC_OscConfig+0x36e>
 8001a42:	4b5b      	ldr	r3, [pc, #364]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	4a5a      	ldr	r2, [pc, #360]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a48:	f023 0301 	bic.w	r3, r3, #1
 8001a4c:	6213      	str	r3, [r2, #32]
 8001a4e:	4b58      	ldr	r3, [pc, #352]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	4a57      	ldr	r2, [pc, #348]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a54:	f023 0304 	bic.w	r3, r3, #4
 8001a58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d015      	beq.n	8001a8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a62:	f7ff fb95 	bl	8001190 <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a68:	e00a      	b.n	8001a80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a6a:	f7ff fb91 	bl	8001190 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e0b1      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a80:	4b4b      	ldr	r3, [pc, #300]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0ee      	beq.n	8001a6a <HAL_RCC_OscConfig+0x37e>
 8001a8c:	e014      	b.n	8001ab8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a8e:	f7ff fb7f 	bl	8001190 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a94:	e00a      	b.n	8001aac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a96:	f7ff fb7b 	bl	8001190 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e09b      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aac:	4b40      	ldr	r3, [pc, #256]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1ee      	bne.n	8001a96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ab8:	7dfb      	ldrb	r3, [r7, #23]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d105      	bne.n	8001aca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001abe:	4b3c      	ldr	r3, [pc, #240]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	4a3b      	ldr	r2, [pc, #236]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001ac4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ac8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 8087 	beq.w	8001be2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ad4:	4b36      	ldr	r3, [pc, #216]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 030c 	and.w	r3, r3, #12
 8001adc:	2b08      	cmp	r3, #8
 8001ade:	d061      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69db      	ldr	r3, [r3, #28]
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d146      	bne.n	8001b76 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae8:	4b33      	ldr	r3, [pc, #204]	@ (8001bb8 <HAL_RCC_OscConfig+0x4cc>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aee:	f7ff fb4f 	bl	8001190 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af6:	f7ff fb4b 	bl	8001190 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e06d      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b08:	4b29      	ldr	r3, [pc, #164]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1f0      	bne.n	8001af6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b1c:	d108      	bne.n	8001b30 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b1e:	4b24      	ldr	r3, [pc, #144]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	4921      	ldr	r1, [pc, #132]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b30:	4b1f      	ldr	r3, [pc, #124]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a19      	ldr	r1, [r3, #32]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b40:	430b      	orrs	r3, r1
 8001b42:	491b      	ldr	r1, [pc, #108]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b48:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb8 <HAL_RCC_OscConfig+0x4cc>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4e:	f7ff fb1f 	bl	8001190 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b56:	f7ff fb1b 	bl	8001190 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e03d      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b68:	4b11      	ldr	r3, [pc, #68]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0f0      	beq.n	8001b56 <HAL_RCC_OscConfig+0x46a>
 8001b74:	e035      	b.n	8001be2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b76:	4b10      	ldr	r3, [pc, #64]	@ (8001bb8 <HAL_RCC_OscConfig+0x4cc>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7c:	f7ff fb08 	bl	8001190 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b84:	f7ff fb04 	bl	8001190 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e026      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b96:	4b06      	ldr	r3, [pc, #24]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f0      	bne.n	8001b84 <HAL_RCC_OscConfig+0x498>
 8001ba2:	e01e      	b.n	8001be2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	69db      	ldr	r3, [r3, #28]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d107      	bne.n	8001bbc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e019      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	40007000 	.word	0x40007000
 8001bb8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001bec <HAL_RCC_OscConfig+0x500>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d106      	bne.n	8001bde <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d001      	beq.n	8001be2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40021000 	.word	0x40021000

08001bf0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e0d0      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c04:	4b6a      	ldr	r3, [pc, #424]	@ (8001db0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d910      	bls.n	8001c34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c12:	4b67      	ldr	r3, [pc, #412]	@ (8001db0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f023 0207 	bic.w	r2, r3, #7
 8001c1a:	4965      	ldr	r1, [pc, #404]	@ (8001db0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c22:	4b63      	ldr	r3, [pc, #396]	@ (8001db0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d001      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e0b8      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d020      	beq.n	8001c82 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d005      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c4c:	4b59      	ldr	r3, [pc, #356]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	4a58      	ldr	r2, [pc, #352]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c52:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c56:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0308 	and.w	r3, r3, #8
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d005      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c64:	4b53      	ldr	r3, [pc, #332]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	4a52      	ldr	r2, [pc, #328]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001c6e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c70:	4b50      	ldr	r3, [pc, #320]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	494d      	ldr	r1, [pc, #308]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d040      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d107      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c96:	4b47      	ldr	r3, [pc, #284]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d115      	bne.n	8001cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e07f      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d107      	bne.n	8001cbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cae:	4b41      	ldr	r3, [pc, #260]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d109      	bne.n	8001cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e073      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cbe:	4b3d      	ldr	r3, [pc, #244]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e06b      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cce:	4b39      	ldr	r3, [pc, #228]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f023 0203 	bic.w	r2, r3, #3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	4936      	ldr	r1, [pc, #216]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ce0:	f7ff fa56 	bl	8001190 <HAL_GetTick>
 8001ce4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce6:	e00a      	b.n	8001cfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ce8:	f7ff fa52 	bl	8001190 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e053      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cfe:	4b2d      	ldr	r3, [pc, #180]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f003 020c 	and.w	r2, r3, #12
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d1eb      	bne.n	8001ce8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d10:	4b27      	ldr	r3, [pc, #156]	@ (8001db0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d210      	bcs.n	8001d40 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1e:	4b24      	ldr	r3, [pc, #144]	@ (8001db0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f023 0207 	bic.w	r2, r3, #7
 8001d26:	4922      	ldr	r1, [pc, #136]	@ (8001db0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2e:	4b20      	ldr	r3, [pc, #128]	@ (8001db0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d001      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e032      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d008      	beq.n	8001d5e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d4c:	4b19      	ldr	r3, [pc, #100]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	4916      	ldr	r1, [pc, #88]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d009      	beq.n	8001d7e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d6a:	4b12      	ldr	r3, [pc, #72]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	490e      	ldr	r1, [pc, #56]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d7e:	f000 f821 	bl	8001dc4 <HAL_RCC_GetSysClockFreq>
 8001d82:	4602      	mov	r2, r0
 8001d84:	4b0b      	ldr	r3, [pc, #44]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	091b      	lsrs	r3, r3, #4
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	490a      	ldr	r1, [pc, #40]	@ (8001db8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d90:	5ccb      	ldrb	r3, [r1, r3]
 8001d92:	fa22 f303 	lsr.w	r3, r2, r3
 8001d96:	4a09      	ldr	r2, [pc, #36]	@ (8001dbc <HAL_RCC_ClockConfig+0x1cc>)
 8001d98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d9a:	4b09      	ldr	r3, [pc, #36]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1d0>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff f9b4 	bl	800110c <HAL_InitTick>

  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40022000 	.word	0x40022000
 8001db4:	40021000 	.word	0x40021000
 8001db8:	08003498 	.word	0x08003498
 8001dbc:	20000000 	.word	0x20000000
 8001dc0:	20000004 	.word	0x20000004

08001dc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b087      	sub	sp, #28
 8001dc8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60bb      	str	r3, [r7, #8]
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001dde:	4b1e      	ldr	r3, [pc, #120]	@ (8001e58 <HAL_RCC_GetSysClockFreq+0x94>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f003 030c 	and.w	r3, r3, #12
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	d002      	beq.n	8001df4 <HAL_RCC_GetSysClockFreq+0x30>
 8001dee:	2b08      	cmp	r3, #8
 8001df0:	d003      	beq.n	8001dfa <HAL_RCC_GetSysClockFreq+0x36>
 8001df2:	e027      	b.n	8001e44 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001df4:	4b19      	ldr	r3, [pc, #100]	@ (8001e5c <HAL_RCC_GetSysClockFreq+0x98>)
 8001df6:	613b      	str	r3, [r7, #16]
      break;
 8001df8:	e027      	b.n	8001e4a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	0c9b      	lsrs	r3, r3, #18
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	4a17      	ldr	r2, [pc, #92]	@ (8001e60 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e04:	5cd3      	ldrb	r3, [r2, r3]
 8001e06:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d010      	beq.n	8001e34 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e12:	4b11      	ldr	r3, [pc, #68]	@ (8001e58 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	0c5b      	lsrs	r3, r3, #17
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	4a11      	ldr	r2, [pc, #68]	@ (8001e64 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e1e:	5cd3      	ldrb	r3, [r2, r3]
 8001e20:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a0d      	ldr	r2, [pc, #52]	@ (8001e5c <HAL_RCC_GetSysClockFreq+0x98>)
 8001e26:	fb03 f202 	mul.w	r2, r3, r2
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	e004      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a0c      	ldr	r2, [pc, #48]	@ (8001e68 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e38:	fb02 f303 	mul.w	r3, r2, r3
 8001e3c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	613b      	str	r3, [r7, #16]
      break;
 8001e42:	e002      	b.n	8001e4a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e44:	4b05      	ldr	r3, [pc, #20]	@ (8001e5c <HAL_RCC_GetSysClockFreq+0x98>)
 8001e46:	613b      	str	r3, [r7, #16]
      break;
 8001e48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e4a:	693b      	ldr	r3, [r7, #16]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	371c      	adds	r7, #28
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bc80      	pop	{r7}
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	007a1200 	.word	0x007a1200
 8001e60:	080034a8 	.word	0x080034a8
 8001e64:	080034b8 	.word	0x080034b8
 8001e68:	003d0900 	.word	0x003d0900

08001e6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e74:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea0 <RCC_Delay+0x34>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a0a      	ldr	r2, [pc, #40]	@ (8001ea4 <RCC_Delay+0x38>)
 8001e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7e:	0a5b      	lsrs	r3, r3, #9
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	fb02 f303 	mul.w	r3, r2, r3
 8001e86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e88:	bf00      	nop
  }
  while (Delay --);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	1e5a      	subs	r2, r3, #1
 8001e8e:	60fa      	str	r2, [r7, #12]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1f9      	bne.n	8001e88 <RCC_Delay+0x1c>
}
 8001e94:	bf00      	nop
 8001e96:	bf00      	nop
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr
 8001ea0:	20000000 	.word	0x20000000
 8001ea4:	10624dd3 	.word	0x10624dd3

08001ea8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e076      	b.n	8001fa8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d108      	bne.n	8001ed4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001eca:	d009      	beq.n	8001ee0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	61da      	str	r2, [r3, #28]
 8001ed2:	e005      	b.n	8001ee0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d106      	bne.n	8001f00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7fe ffae 	bl	8000e5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2202      	movs	r2, #2
 8001f04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001f28:	431a      	orrs	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f50:	431a      	orrs	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f64:	ea42 0103 	orr.w	r1, r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f6c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	0c1a      	lsrs	r2, r3, #16
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f002 0204 	and.w	r2, r2, #4
 8001f86:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	69da      	ldr	r2, [r3, #28]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f96:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08a      	sub	sp, #40	@ 0x28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
 8001fbc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fc2:	f7ff f8e5 	bl	8001190 <HAL_GetTick>
 8001fc6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001fce:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001fd6:	887b      	ldrh	r3, [r7, #2]
 8001fd8:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001fda:	7ffb      	ldrb	r3, [r7, #31]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d00c      	beq.n	8001ffa <HAL_SPI_TransmitReceive+0x4a>
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001fe6:	d106      	bne.n	8001ff6 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d102      	bne.n	8001ff6 <HAL_SPI_TransmitReceive+0x46>
 8001ff0:	7ffb      	ldrb	r3, [r7, #31]
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	d001      	beq.n	8001ffa <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	e17f      	b.n	80022fa <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d005      	beq.n	800200c <HAL_SPI_TransmitReceive+0x5c>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d002      	beq.n	800200c <HAL_SPI_TransmitReceive+0x5c>
 8002006:	887b      	ldrh	r3, [r7, #2]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d101      	bne.n	8002010 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e174      	b.n	80022fa <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002016:	2b01      	cmp	r3, #1
 8002018:	d101      	bne.n	800201e <HAL_SPI_TransmitReceive+0x6e>
 800201a:	2302      	movs	r3, #2
 800201c:	e16d      	b.n	80022fa <HAL_SPI_TransmitReceive+0x34a>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b04      	cmp	r3, #4
 8002030:	d003      	beq.n	800203a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2205      	movs	r2, #5
 8002036:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	887a      	ldrh	r2, [r7, #2]
 800204a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	887a      	ldrh	r2, [r7, #2]
 8002050:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	68ba      	ldr	r2, [r7, #8]
 8002056:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	887a      	ldrh	r2, [r7, #2]
 800205c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	887a      	ldrh	r2, [r7, #2]
 8002062:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800207a:	2b40      	cmp	r3, #64	@ 0x40
 800207c:	d007      	beq.n	800208e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800208c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002096:	d17e      	bne.n	8002196 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d002      	beq.n	80020a6 <HAL_SPI_TransmitReceive+0xf6>
 80020a0:	8afb      	ldrh	r3, [r7, #22]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d16c      	bne.n	8002180 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020aa:	881a      	ldrh	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b6:	1c9a      	adds	r2, r3, #2
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	3b01      	subs	r3, #1
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020ca:	e059      	b.n	8002180 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d11b      	bne.n	8002112 <HAL_SPI_TransmitReceive+0x162>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020de:	b29b      	uxth	r3, r3
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d016      	beq.n	8002112 <HAL_SPI_TransmitReceive+0x162>
 80020e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d113      	bne.n	8002112 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ee:	881a      	ldrh	r2, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fa:	1c9a      	adds	r2, r3, #2
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002104:	b29b      	uxth	r3, r3
 8002106:	3b01      	subs	r3, #1
 8002108:	b29a      	uxth	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800210e:	2300      	movs	r3, #0
 8002110:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	2b01      	cmp	r3, #1
 800211e:	d119      	bne.n	8002154 <HAL_SPI_TransmitReceive+0x1a4>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002124:	b29b      	uxth	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d014      	beq.n	8002154 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68da      	ldr	r2, [r3, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002134:	b292      	uxth	r2, r2
 8002136:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800213c:	1c9a      	adds	r2, r3, #2
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002146:	b29b      	uxth	r3, r3
 8002148:	3b01      	subs	r3, #1
 800214a:	b29a      	uxth	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002150:	2301      	movs	r3, #1
 8002152:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002154:	f7ff f81c 	bl	8001190 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	6a3b      	ldr	r3, [r7, #32]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002160:	429a      	cmp	r2, r3
 8002162:	d80d      	bhi.n	8002180 <HAL_SPI_TransmitReceive+0x1d0>
 8002164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800216a:	d009      	beq.n	8002180 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e0bc      	b.n	80022fa <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002184:	b29b      	uxth	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1a0      	bne.n	80020cc <HAL_SPI_TransmitReceive+0x11c>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800218e:	b29b      	uxth	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	d19b      	bne.n	80020cc <HAL_SPI_TransmitReceive+0x11c>
 8002194:	e082      	b.n	800229c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d002      	beq.n	80021a4 <HAL_SPI_TransmitReceive+0x1f4>
 800219e:	8afb      	ldrh	r3, [r7, #22]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d171      	bne.n	8002288 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	330c      	adds	r3, #12
 80021ae:	7812      	ldrb	r2, [r2, #0]
 80021b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b6:	1c5a      	adds	r2, r3, #1
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	3b01      	subs	r3, #1
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021ca:	e05d      	b.n	8002288 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d11c      	bne.n	8002214 <HAL_SPI_TransmitReceive+0x264>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021de:	b29b      	uxth	r3, r3
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d017      	beq.n	8002214 <HAL_SPI_TransmitReceive+0x264>
 80021e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d114      	bne.n	8002214 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	330c      	adds	r3, #12
 80021f4:	7812      	ldrb	r2, [r2, #0]
 80021f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fc:	1c5a      	adds	r2, r3, #1
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002206:	b29b      	uxth	r3, r3
 8002208:	3b01      	subs	r3, #1
 800220a:	b29a      	uxth	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002210:	2300      	movs	r3, #0
 8002212:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b01      	cmp	r3, #1
 8002220:	d119      	bne.n	8002256 <HAL_SPI_TransmitReceive+0x2a6>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002226:	b29b      	uxth	r3, r3
 8002228:	2b00      	cmp	r3, #0
 800222a:	d014      	beq.n	8002256 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68da      	ldr	r2, [r3, #12]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800223e:	1c5a      	adds	r2, r3, #1
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002248:	b29b      	uxth	r3, r3
 800224a:	3b01      	subs	r3, #1
 800224c:	b29a      	uxth	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002252:	2301      	movs	r3, #1
 8002254:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002256:	f7fe ff9b 	bl	8001190 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	6a3b      	ldr	r3, [r7, #32]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002262:	429a      	cmp	r2, r3
 8002264:	d803      	bhi.n	800226e <HAL_SPI_TransmitReceive+0x2be>
 8002266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226c:	d102      	bne.n	8002274 <HAL_SPI_TransmitReceive+0x2c4>
 800226e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002270:	2b00      	cmp	r3, #0
 8002272:	d109      	bne.n	8002288 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e038      	b.n	80022fa <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800228c:	b29b      	uxth	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d19c      	bne.n	80021cc <HAL_SPI_TransmitReceive+0x21c>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002296:	b29b      	uxth	r3, r3
 8002298:	2b00      	cmp	r3, #0
 800229a:	d197      	bne.n	80021cc <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800229c:	6a3a      	ldr	r2, [r7, #32]
 800229e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f000 f8b7 	bl	8002414 <SPI_EndRxTxTransaction>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d008      	beq.n	80022be <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2220      	movs	r2, #32
 80022b0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e01d      	b.n	80022fa <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10a      	bne.n	80022dc <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e000      	b.n	80022fa <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80022f8:	2300      	movs	r3, #0
  }
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3728      	adds	r7, #40	@ 0x28
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b088      	sub	sp, #32
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	603b      	str	r3, [r7, #0]
 8002310:	4613      	mov	r3, r2
 8002312:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002314:	f7fe ff3c 	bl	8001190 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800231c:	1a9b      	subs	r3, r3, r2
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	4413      	add	r3, r2
 8002322:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002324:	f7fe ff34 	bl	8001190 <HAL_GetTick>
 8002328:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800232a:	4b39      	ldr	r3, [pc, #228]	@ (8002410 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	015b      	lsls	r3, r3, #5
 8002330:	0d1b      	lsrs	r3, r3, #20
 8002332:	69fa      	ldr	r2, [r7, #28]
 8002334:	fb02 f303 	mul.w	r3, r2, r3
 8002338:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800233a:	e054      	b.n	80023e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002342:	d050      	beq.n	80023e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002344:	f7fe ff24 	bl	8001190 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	69fa      	ldr	r2, [r7, #28]
 8002350:	429a      	cmp	r2, r3
 8002352:	d902      	bls.n	800235a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d13d      	bne.n	80023d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002368:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002372:	d111      	bne.n	8002398 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800237c:	d004      	beq.n	8002388 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002386:	d107      	bne.n	8002398 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002396:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800239c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023a0:	d10f      	bne.n	80023c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80023c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e017      	b.n	8002406 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80023dc:	2300      	movs	r3, #0
 80023de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	4013      	ands	r3, r2
 80023f0:	68ba      	ldr	r2, [r7, #8]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	bf0c      	ite	eq
 80023f6:	2301      	moveq	r3, #1
 80023f8:	2300      	movne	r3, #0
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	461a      	mov	r2, r3
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	429a      	cmp	r2, r3
 8002402:	d19b      	bne.n	800233c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3720      	adds	r7, #32
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20000000 	.word	0x20000000

08002414 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af02      	add	r7, sp, #8
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2201      	movs	r2, #1
 8002428:	2102      	movs	r1, #2
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f7ff ff6a 	bl	8002304 <SPI_WaitFlagStateUntilTimeout>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d007      	beq.n	8002446 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800243a:	f043 0220 	orr.w	r2, r3, #32
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e013      	b.n	800246e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	2200      	movs	r2, #0
 800244e:	2180      	movs	r1, #128	@ 0x80
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f7ff ff57 	bl	8002304 <SPI_WaitFlagStateUntilTimeout>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d007      	beq.n	800246c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002460:	f043 0220 	orr.w	r2, r3, #32
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e000      	b.n	800246e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
	...

08002478 <std>:
 8002478:	2300      	movs	r3, #0
 800247a:	b510      	push	{r4, lr}
 800247c:	4604      	mov	r4, r0
 800247e:	e9c0 3300 	strd	r3, r3, [r0]
 8002482:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002486:	6083      	str	r3, [r0, #8]
 8002488:	8181      	strh	r1, [r0, #12]
 800248a:	6643      	str	r3, [r0, #100]	@ 0x64
 800248c:	81c2      	strh	r2, [r0, #14]
 800248e:	6183      	str	r3, [r0, #24]
 8002490:	4619      	mov	r1, r3
 8002492:	2208      	movs	r2, #8
 8002494:	305c      	adds	r0, #92	@ 0x5c
 8002496:	f000 f906 	bl	80026a6 <memset>
 800249a:	4b0d      	ldr	r3, [pc, #52]	@ (80024d0 <std+0x58>)
 800249c:	6224      	str	r4, [r4, #32]
 800249e:	6263      	str	r3, [r4, #36]	@ 0x24
 80024a0:	4b0c      	ldr	r3, [pc, #48]	@ (80024d4 <std+0x5c>)
 80024a2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80024a4:	4b0c      	ldr	r3, [pc, #48]	@ (80024d8 <std+0x60>)
 80024a6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80024a8:	4b0c      	ldr	r3, [pc, #48]	@ (80024dc <std+0x64>)
 80024aa:	6323      	str	r3, [r4, #48]	@ 0x30
 80024ac:	4b0c      	ldr	r3, [pc, #48]	@ (80024e0 <std+0x68>)
 80024ae:	429c      	cmp	r4, r3
 80024b0:	d006      	beq.n	80024c0 <std+0x48>
 80024b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80024b6:	4294      	cmp	r4, r2
 80024b8:	d002      	beq.n	80024c0 <std+0x48>
 80024ba:	33d0      	adds	r3, #208	@ 0xd0
 80024bc:	429c      	cmp	r4, r3
 80024be:	d105      	bne.n	80024cc <std+0x54>
 80024c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80024c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024c8:	f000 b966 	b.w	8002798 <__retarget_lock_init_recursive>
 80024cc:	bd10      	pop	{r4, pc}
 80024ce:	bf00      	nop
 80024d0:	08002621 	.word	0x08002621
 80024d4:	08002643 	.word	0x08002643
 80024d8:	0800267b 	.word	0x0800267b
 80024dc:	0800269f 	.word	0x0800269f
 80024e0:	20000228 	.word	0x20000228

080024e4 <stdio_exit_handler>:
 80024e4:	4a02      	ldr	r2, [pc, #8]	@ (80024f0 <stdio_exit_handler+0xc>)
 80024e6:	4903      	ldr	r1, [pc, #12]	@ (80024f4 <stdio_exit_handler+0x10>)
 80024e8:	4803      	ldr	r0, [pc, #12]	@ (80024f8 <stdio_exit_handler+0x14>)
 80024ea:	f000 b869 	b.w	80025c0 <_fwalk_sglue>
 80024ee:	bf00      	nop
 80024f0:	2000000c 	.word	0x2000000c
 80024f4:	08003031 	.word	0x08003031
 80024f8:	2000001c 	.word	0x2000001c

080024fc <cleanup_stdio>:
 80024fc:	6841      	ldr	r1, [r0, #4]
 80024fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002530 <cleanup_stdio+0x34>)
 8002500:	b510      	push	{r4, lr}
 8002502:	4299      	cmp	r1, r3
 8002504:	4604      	mov	r4, r0
 8002506:	d001      	beq.n	800250c <cleanup_stdio+0x10>
 8002508:	f000 fd92 	bl	8003030 <_fflush_r>
 800250c:	68a1      	ldr	r1, [r4, #8]
 800250e:	4b09      	ldr	r3, [pc, #36]	@ (8002534 <cleanup_stdio+0x38>)
 8002510:	4299      	cmp	r1, r3
 8002512:	d002      	beq.n	800251a <cleanup_stdio+0x1e>
 8002514:	4620      	mov	r0, r4
 8002516:	f000 fd8b 	bl	8003030 <_fflush_r>
 800251a:	68e1      	ldr	r1, [r4, #12]
 800251c:	4b06      	ldr	r3, [pc, #24]	@ (8002538 <cleanup_stdio+0x3c>)
 800251e:	4299      	cmp	r1, r3
 8002520:	d004      	beq.n	800252c <cleanup_stdio+0x30>
 8002522:	4620      	mov	r0, r4
 8002524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002528:	f000 bd82 	b.w	8003030 <_fflush_r>
 800252c:	bd10      	pop	{r4, pc}
 800252e:	bf00      	nop
 8002530:	20000228 	.word	0x20000228
 8002534:	20000290 	.word	0x20000290
 8002538:	200002f8 	.word	0x200002f8

0800253c <global_stdio_init.part.0>:
 800253c:	b510      	push	{r4, lr}
 800253e:	4b0b      	ldr	r3, [pc, #44]	@ (800256c <global_stdio_init.part.0+0x30>)
 8002540:	4c0b      	ldr	r4, [pc, #44]	@ (8002570 <global_stdio_init.part.0+0x34>)
 8002542:	4a0c      	ldr	r2, [pc, #48]	@ (8002574 <global_stdio_init.part.0+0x38>)
 8002544:	4620      	mov	r0, r4
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	2104      	movs	r1, #4
 800254a:	2200      	movs	r2, #0
 800254c:	f7ff ff94 	bl	8002478 <std>
 8002550:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002554:	2201      	movs	r2, #1
 8002556:	2109      	movs	r1, #9
 8002558:	f7ff ff8e 	bl	8002478 <std>
 800255c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002560:	2202      	movs	r2, #2
 8002562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002566:	2112      	movs	r1, #18
 8002568:	f7ff bf86 	b.w	8002478 <std>
 800256c:	20000360 	.word	0x20000360
 8002570:	20000228 	.word	0x20000228
 8002574:	080024e5 	.word	0x080024e5

08002578 <__sfp_lock_acquire>:
 8002578:	4801      	ldr	r0, [pc, #4]	@ (8002580 <__sfp_lock_acquire+0x8>)
 800257a:	f000 b90e 	b.w	800279a <__retarget_lock_acquire_recursive>
 800257e:	bf00      	nop
 8002580:	20000369 	.word	0x20000369

08002584 <__sfp_lock_release>:
 8002584:	4801      	ldr	r0, [pc, #4]	@ (800258c <__sfp_lock_release+0x8>)
 8002586:	f000 b909 	b.w	800279c <__retarget_lock_release_recursive>
 800258a:	bf00      	nop
 800258c:	20000369 	.word	0x20000369

08002590 <__sinit>:
 8002590:	b510      	push	{r4, lr}
 8002592:	4604      	mov	r4, r0
 8002594:	f7ff fff0 	bl	8002578 <__sfp_lock_acquire>
 8002598:	6a23      	ldr	r3, [r4, #32]
 800259a:	b11b      	cbz	r3, 80025a4 <__sinit+0x14>
 800259c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025a0:	f7ff bff0 	b.w	8002584 <__sfp_lock_release>
 80025a4:	4b04      	ldr	r3, [pc, #16]	@ (80025b8 <__sinit+0x28>)
 80025a6:	6223      	str	r3, [r4, #32]
 80025a8:	4b04      	ldr	r3, [pc, #16]	@ (80025bc <__sinit+0x2c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1f5      	bne.n	800259c <__sinit+0xc>
 80025b0:	f7ff ffc4 	bl	800253c <global_stdio_init.part.0>
 80025b4:	e7f2      	b.n	800259c <__sinit+0xc>
 80025b6:	bf00      	nop
 80025b8:	080024fd 	.word	0x080024fd
 80025bc:	20000360 	.word	0x20000360

080025c0 <_fwalk_sglue>:
 80025c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80025c4:	4607      	mov	r7, r0
 80025c6:	4688      	mov	r8, r1
 80025c8:	4614      	mov	r4, r2
 80025ca:	2600      	movs	r6, #0
 80025cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80025d0:	f1b9 0901 	subs.w	r9, r9, #1
 80025d4:	d505      	bpl.n	80025e2 <_fwalk_sglue+0x22>
 80025d6:	6824      	ldr	r4, [r4, #0]
 80025d8:	2c00      	cmp	r4, #0
 80025da:	d1f7      	bne.n	80025cc <_fwalk_sglue+0xc>
 80025dc:	4630      	mov	r0, r6
 80025de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80025e2:	89ab      	ldrh	r3, [r5, #12]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d907      	bls.n	80025f8 <_fwalk_sglue+0x38>
 80025e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80025ec:	3301      	adds	r3, #1
 80025ee:	d003      	beq.n	80025f8 <_fwalk_sglue+0x38>
 80025f0:	4629      	mov	r1, r5
 80025f2:	4638      	mov	r0, r7
 80025f4:	47c0      	blx	r8
 80025f6:	4306      	orrs	r6, r0
 80025f8:	3568      	adds	r5, #104	@ 0x68
 80025fa:	e7e9      	b.n	80025d0 <_fwalk_sglue+0x10>

080025fc <iprintf>:
 80025fc:	b40f      	push	{r0, r1, r2, r3}
 80025fe:	b507      	push	{r0, r1, r2, lr}
 8002600:	4906      	ldr	r1, [pc, #24]	@ (800261c <iprintf+0x20>)
 8002602:	ab04      	add	r3, sp, #16
 8002604:	6808      	ldr	r0, [r1, #0]
 8002606:	f853 2b04 	ldr.w	r2, [r3], #4
 800260a:	6881      	ldr	r1, [r0, #8]
 800260c:	9301      	str	r3, [sp, #4]
 800260e:	f000 f9e5 	bl	80029dc <_vfiprintf_r>
 8002612:	b003      	add	sp, #12
 8002614:	f85d eb04 	ldr.w	lr, [sp], #4
 8002618:	b004      	add	sp, #16
 800261a:	4770      	bx	lr
 800261c:	20000018 	.word	0x20000018

08002620 <__sread>:
 8002620:	b510      	push	{r4, lr}
 8002622:	460c      	mov	r4, r1
 8002624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002628:	f000 f868 	bl	80026fc <_read_r>
 800262c:	2800      	cmp	r0, #0
 800262e:	bfab      	itete	ge
 8002630:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002632:	89a3      	ldrhlt	r3, [r4, #12]
 8002634:	181b      	addge	r3, r3, r0
 8002636:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800263a:	bfac      	ite	ge
 800263c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800263e:	81a3      	strhlt	r3, [r4, #12]
 8002640:	bd10      	pop	{r4, pc}

08002642 <__swrite>:
 8002642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002646:	461f      	mov	r7, r3
 8002648:	898b      	ldrh	r3, [r1, #12]
 800264a:	4605      	mov	r5, r0
 800264c:	05db      	lsls	r3, r3, #23
 800264e:	460c      	mov	r4, r1
 8002650:	4616      	mov	r6, r2
 8002652:	d505      	bpl.n	8002660 <__swrite+0x1e>
 8002654:	2302      	movs	r3, #2
 8002656:	2200      	movs	r2, #0
 8002658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800265c:	f000 f83c 	bl	80026d8 <_lseek_r>
 8002660:	89a3      	ldrh	r3, [r4, #12]
 8002662:	4632      	mov	r2, r6
 8002664:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002668:	81a3      	strh	r3, [r4, #12]
 800266a:	4628      	mov	r0, r5
 800266c:	463b      	mov	r3, r7
 800266e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002672:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002676:	f000 b853 	b.w	8002720 <_write_r>

0800267a <__sseek>:
 800267a:	b510      	push	{r4, lr}
 800267c:	460c      	mov	r4, r1
 800267e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002682:	f000 f829 	bl	80026d8 <_lseek_r>
 8002686:	1c43      	adds	r3, r0, #1
 8002688:	89a3      	ldrh	r3, [r4, #12]
 800268a:	bf15      	itete	ne
 800268c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800268e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002692:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002696:	81a3      	strheq	r3, [r4, #12]
 8002698:	bf18      	it	ne
 800269a:	81a3      	strhne	r3, [r4, #12]
 800269c:	bd10      	pop	{r4, pc}

0800269e <__sclose>:
 800269e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026a2:	f000 b809 	b.w	80026b8 <_close_r>

080026a6 <memset>:
 80026a6:	4603      	mov	r3, r0
 80026a8:	4402      	add	r2, r0
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d100      	bne.n	80026b0 <memset+0xa>
 80026ae:	4770      	bx	lr
 80026b0:	f803 1b01 	strb.w	r1, [r3], #1
 80026b4:	e7f9      	b.n	80026aa <memset+0x4>
	...

080026b8 <_close_r>:
 80026b8:	b538      	push	{r3, r4, r5, lr}
 80026ba:	2300      	movs	r3, #0
 80026bc:	4d05      	ldr	r5, [pc, #20]	@ (80026d4 <_close_r+0x1c>)
 80026be:	4604      	mov	r4, r0
 80026c0:	4608      	mov	r0, r1
 80026c2:	602b      	str	r3, [r5, #0]
 80026c4:	f7fe fc79 	bl	8000fba <_close>
 80026c8:	1c43      	adds	r3, r0, #1
 80026ca:	d102      	bne.n	80026d2 <_close_r+0x1a>
 80026cc:	682b      	ldr	r3, [r5, #0]
 80026ce:	b103      	cbz	r3, 80026d2 <_close_r+0x1a>
 80026d0:	6023      	str	r3, [r4, #0]
 80026d2:	bd38      	pop	{r3, r4, r5, pc}
 80026d4:	20000364 	.word	0x20000364

080026d8 <_lseek_r>:
 80026d8:	b538      	push	{r3, r4, r5, lr}
 80026da:	4604      	mov	r4, r0
 80026dc:	4608      	mov	r0, r1
 80026de:	4611      	mov	r1, r2
 80026e0:	2200      	movs	r2, #0
 80026e2:	4d05      	ldr	r5, [pc, #20]	@ (80026f8 <_lseek_r+0x20>)
 80026e4:	602a      	str	r2, [r5, #0]
 80026e6:	461a      	mov	r2, r3
 80026e8:	f7fe fc8b 	bl	8001002 <_lseek>
 80026ec:	1c43      	adds	r3, r0, #1
 80026ee:	d102      	bne.n	80026f6 <_lseek_r+0x1e>
 80026f0:	682b      	ldr	r3, [r5, #0]
 80026f2:	b103      	cbz	r3, 80026f6 <_lseek_r+0x1e>
 80026f4:	6023      	str	r3, [r4, #0]
 80026f6:	bd38      	pop	{r3, r4, r5, pc}
 80026f8:	20000364 	.word	0x20000364

080026fc <_read_r>:
 80026fc:	b538      	push	{r3, r4, r5, lr}
 80026fe:	4604      	mov	r4, r0
 8002700:	4608      	mov	r0, r1
 8002702:	4611      	mov	r1, r2
 8002704:	2200      	movs	r2, #0
 8002706:	4d05      	ldr	r5, [pc, #20]	@ (800271c <_read_r+0x20>)
 8002708:	602a      	str	r2, [r5, #0]
 800270a:	461a      	mov	r2, r3
 800270c:	f7fe fc1c 	bl	8000f48 <_read>
 8002710:	1c43      	adds	r3, r0, #1
 8002712:	d102      	bne.n	800271a <_read_r+0x1e>
 8002714:	682b      	ldr	r3, [r5, #0]
 8002716:	b103      	cbz	r3, 800271a <_read_r+0x1e>
 8002718:	6023      	str	r3, [r4, #0]
 800271a:	bd38      	pop	{r3, r4, r5, pc}
 800271c:	20000364 	.word	0x20000364

08002720 <_write_r>:
 8002720:	b538      	push	{r3, r4, r5, lr}
 8002722:	4604      	mov	r4, r0
 8002724:	4608      	mov	r0, r1
 8002726:	4611      	mov	r1, r2
 8002728:	2200      	movs	r2, #0
 800272a:	4d05      	ldr	r5, [pc, #20]	@ (8002740 <_write_r+0x20>)
 800272c:	602a      	str	r2, [r5, #0]
 800272e:	461a      	mov	r2, r3
 8002730:	f7fe fc27 	bl	8000f82 <_write>
 8002734:	1c43      	adds	r3, r0, #1
 8002736:	d102      	bne.n	800273e <_write_r+0x1e>
 8002738:	682b      	ldr	r3, [r5, #0]
 800273a:	b103      	cbz	r3, 800273e <_write_r+0x1e>
 800273c:	6023      	str	r3, [r4, #0]
 800273e:	bd38      	pop	{r3, r4, r5, pc}
 8002740:	20000364 	.word	0x20000364

08002744 <__errno>:
 8002744:	4b01      	ldr	r3, [pc, #4]	@ (800274c <__errno+0x8>)
 8002746:	6818      	ldr	r0, [r3, #0]
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	20000018 	.word	0x20000018

08002750 <__libc_init_array>:
 8002750:	b570      	push	{r4, r5, r6, lr}
 8002752:	2600      	movs	r6, #0
 8002754:	4d0c      	ldr	r5, [pc, #48]	@ (8002788 <__libc_init_array+0x38>)
 8002756:	4c0d      	ldr	r4, [pc, #52]	@ (800278c <__libc_init_array+0x3c>)
 8002758:	1b64      	subs	r4, r4, r5
 800275a:	10a4      	asrs	r4, r4, #2
 800275c:	42a6      	cmp	r6, r4
 800275e:	d109      	bne.n	8002774 <__libc_init_array+0x24>
 8002760:	f000 fdc4 	bl	80032ec <_init>
 8002764:	2600      	movs	r6, #0
 8002766:	4d0a      	ldr	r5, [pc, #40]	@ (8002790 <__libc_init_array+0x40>)
 8002768:	4c0a      	ldr	r4, [pc, #40]	@ (8002794 <__libc_init_array+0x44>)
 800276a:	1b64      	subs	r4, r4, r5
 800276c:	10a4      	asrs	r4, r4, #2
 800276e:	42a6      	cmp	r6, r4
 8002770:	d105      	bne.n	800277e <__libc_init_array+0x2e>
 8002772:	bd70      	pop	{r4, r5, r6, pc}
 8002774:	f855 3b04 	ldr.w	r3, [r5], #4
 8002778:	4798      	blx	r3
 800277a:	3601      	adds	r6, #1
 800277c:	e7ee      	b.n	800275c <__libc_init_array+0xc>
 800277e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002782:	4798      	blx	r3
 8002784:	3601      	adds	r6, #1
 8002786:	e7f2      	b.n	800276e <__libc_init_array+0x1e>
 8002788:	080034f0 	.word	0x080034f0
 800278c:	080034f0 	.word	0x080034f0
 8002790:	080034f0 	.word	0x080034f0
 8002794:	080034f4 	.word	0x080034f4

08002798 <__retarget_lock_init_recursive>:
 8002798:	4770      	bx	lr

0800279a <__retarget_lock_acquire_recursive>:
 800279a:	4770      	bx	lr

0800279c <__retarget_lock_release_recursive>:
 800279c:	4770      	bx	lr
	...

080027a0 <_free_r>:
 80027a0:	b538      	push	{r3, r4, r5, lr}
 80027a2:	4605      	mov	r5, r0
 80027a4:	2900      	cmp	r1, #0
 80027a6:	d040      	beq.n	800282a <_free_r+0x8a>
 80027a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027ac:	1f0c      	subs	r4, r1, #4
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	bfb8      	it	lt
 80027b2:	18e4      	addlt	r4, r4, r3
 80027b4:	f000 f8de 	bl	8002974 <__malloc_lock>
 80027b8:	4a1c      	ldr	r2, [pc, #112]	@ (800282c <_free_r+0x8c>)
 80027ba:	6813      	ldr	r3, [r2, #0]
 80027bc:	b933      	cbnz	r3, 80027cc <_free_r+0x2c>
 80027be:	6063      	str	r3, [r4, #4]
 80027c0:	6014      	str	r4, [r2, #0]
 80027c2:	4628      	mov	r0, r5
 80027c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80027c8:	f000 b8da 	b.w	8002980 <__malloc_unlock>
 80027cc:	42a3      	cmp	r3, r4
 80027ce:	d908      	bls.n	80027e2 <_free_r+0x42>
 80027d0:	6820      	ldr	r0, [r4, #0]
 80027d2:	1821      	adds	r1, r4, r0
 80027d4:	428b      	cmp	r3, r1
 80027d6:	bf01      	itttt	eq
 80027d8:	6819      	ldreq	r1, [r3, #0]
 80027da:	685b      	ldreq	r3, [r3, #4]
 80027dc:	1809      	addeq	r1, r1, r0
 80027de:	6021      	streq	r1, [r4, #0]
 80027e0:	e7ed      	b.n	80027be <_free_r+0x1e>
 80027e2:	461a      	mov	r2, r3
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	b10b      	cbz	r3, 80027ec <_free_r+0x4c>
 80027e8:	42a3      	cmp	r3, r4
 80027ea:	d9fa      	bls.n	80027e2 <_free_r+0x42>
 80027ec:	6811      	ldr	r1, [r2, #0]
 80027ee:	1850      	adds	r0, r2, r1
 80027f0:	42a0      	cmp	r0, r4
 80027f2:	d10b      	bne.n	800280c <_free_r+0x6c>
 80027f4:	6820      	ldr	r0, [r4, #0]
 80027f6:	4401      	add	r1, r0
 80027f8:	1850      	adds	r0, r2, r1
 80027fa:	4283      	cmp	r3, r0
 80027fc:	6011      	str	r1, [r2, #0]
 80027fe:	d1e0      	bne.n	80027c2 <_free_r+0x22>
 8002800:	6818      	ldr	r0, [r3, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	4408      	add	r0, r1
 8002806:	6010      	str	r0, [r2, #0]
 8002808:	6053      	str	r3, [r2, #4]
 800280a:	e7da      	b.n	80027c2 <_free_r+0x22>
 800280c:	d902      	bls.n	8002814 <_free_r+0x74>
 800280e:	230c      	movs	r3, #12
 8002810:	602b      	str	r3, [r5, #0]
 8002812:	e7d6      	b.n	80027c2 <_free_r+0x22>
 8002814:	6820      	ldr	r0, [r4, #0]
 8002816:	1821      	adds	r1, r4, r0
 8002818:	428b      	cmp	r3, r1
 800281a:	bf01      	itttt	eq
 800281c:	6819      	ldreq	r1, [r3, #0]
 800281e:	685b      	ldreq	r3, [r3, #4]
 8002820:	1809      	addeq	r1, r1, r0
 8002822:	6021      	streq	r1, [r4, #0]
 8002824:	6063      	str	r3, [r4, #4]
 8002826:	6054      	str	r4, [r2, #4]
 8002828:	e7cb      	b.n	80027c2 <_free_r+0x22>
 800282a:	bd38      	pop	{r3, r4, r5, pc}
 800282c:	20000370 	.word	0x20000370

08002830 <sbrk_aligned>:
 8002830:	b570      	push	{r4, r5, r6, lr}
 8002832:	4e0f      	ldr	r6, [pc, #60]	@ (8002870 <sbrk_aligned+0x40>)
 8002834:	460c      	mov	r4, r1
 8002836:	6831      	ldr	r1, [r6, #0]
 8002838:	4605      	mov	r5, r0
 800283a:	b911      	cbnz	r1, 8002842 <sbrk_aligned+0x12>
 800283c:	f000 fcb4 	bl	80031a8 <_sbrk_r>
 8002840:	6030      	str	r0, [r6, #0]
 8002842:	4621      	mov	r1, r4
 8002844:	4628      	mov	r0, r5
 8002846:	f000 fcaf 	bl	80031a8 <_sbrk_r>
 800284a:	1c43      	adds	r3, r0, #1
 800284c:	d103      	bne.n	8002856 <sbrk_aligned+0x26>
 800284e:	f04f 34ff 	mov.w	r4, #4294967295
 8002852:	4620      	mov	r0, r4
 8002854:	bd70      	pop	{r4, r5, r6, pc}
 8002856:	1cc4      	adds	r4, r0, #3
 8002858:	f024 0403 	bic.w	r4, r4, #3
 800285c:	42a0      	cmp	r0, r4
 800285e:	d0f8      	beq.n	8002852 <sbrk_aligned+0x22>
 8002860:	1a21      	subs	r1, r4, r0
 8002862:	4628      	mov	r0, r5
 8002864:	f000 fca0 	bl	80031a8 <_sbrk_r>
 8002868:	3001      	adds	r0, #1
 800286a:	d1f2      	bne.n	8002852 <sbrk_aligned+0x22>
 800286c:	e7ef      	b.n	800284e <sbrk_aligned+0x1e>
 800286e:	bf00      	nop
 8002870:	2000036c 	.word	0x2000036c

08002874 <_malloc_r>:
 8002874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002878:	1ccd      	adds	r5, r1, #3
 800287a:	f025 0503 	bic.w	r5, r5, #3
 800287e:	3508      	adds	r5, #8
 8002880:	2d0c      	cmp	r5, #12
 8002882:	bf38      	it	cc
 8002884:	250c      	movcc	r5, #12
 8002886:	2d00      	cmp	r5, #0
 8002888:	4606      	mov	r6, r0
 800288a:	db01      	blt.n	8002890 <_malloc_r+0x1c>
 800288c:	42a9      	cmp	r1, r5
 800288e:	d904      	bls.n	800289a <_malloc_r+0x26>
 8002890:	230c      	movs	r3, #12
 8002892:	6033      	str	r3, [r6, #0]
 8002894:	2000      	movs	r0, #0
 8002896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800289a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002970 <_malloc_r+0xfc>
 800289e:	f000 f869 	bl	8002974 <__malloc_lock>
 80028a2:	f8d8 3000 	ldr.w	r3, [r8]
 80028a6:	461c      	mov	r4, r3
 80028a8:	bb44      	cbnz	r4, 80028fc <_malloc_r+0x88>
 80028aa:	4629      	mov	r1, r5
 80028ac:	4630      	mov	r0, r6
 80028ae:	f7ff ffbf 	bl	8002830 <sbrk_aligned>
 80028b2:	1c43      	adds	r3, r0, #1
 80028b4:	4604      	mov	r4, r0
 80028b6:	d158      	bne.n	800296a <_malloc_r+0xf6>
 80028b8:	f8d8 4000 	ldr.w	r4, [r8]
 80028bc:	4627      	mov	r7, r4
 80028be:	2f00      	cmp	r7, #0
 80028c0:	d143      	bne.n	800294a <_malloc_r+0xd6>
 80028c2:	2c00      	cmp	r4, #0
 80028c4:	d04b      	beq.n	800295e <_malloc_r+0xea>
 80028c6:	6823      	ldr	r3, [r4, #0]
 80028c8:	4639      	mov	r1, r7
 80028ca:	4630      	mov	r0, r6
 80028cc:	eb04 0903 	add.w	r9, r4, r3
 80028d0:	f000 fc6a 	bl	80031a8 <_sbrk_r>
 80028d4:	4581      	cmp	r9, r0
 80028d6:	d142      	bne.n	800295e <_malloc_r+0xea>
 80028d8:	6821      	ldr	r1, [r4, #0]
 80028da:	4630      	mov	r0, r6
 80028dc:	1a6d      	subs	r5, r5, r1
 80028de:	4629      	mov	r1, r5
 80028e0:	f7ff ffa6 	bl	8002830 <sbrk_aligned>
 80028e4:	3001      	adds	r0, #1
 80028e6:	d03a      	beq.n	800295e <_malloc_r+0xea>
 80028e8:	6823      	ldr	r3, [r4, #0]
 80028ea:	442b      	add	r3, r5
 80028ec:	6023      	str	r3, [r4, #0]
 80028ee:	f8d8 3000 	ldr.w	r3, [r8]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	bb62      	cbnz	r2, 8002950 <_malloc_r+0xdc>
 80028f6:	f8c8 7000 	str.w	r7, [r8]
 80028fa:	e00f      	b.n	800291c <_malloc_r+0xa8>
 80028fc:	6822      	ldr	r2, [r4, #0]
 80028fe:	1b52      	subs	r2, r2, r5
 8002900:	d420      	bmi.n	8002944 <_malloc_r+0xd0>
 8002902:	2a0b      	cmp	r2, #11
 8002904:	d917      	bls.n	8002936 <_malloc_r+0xc2>
 8002906:	1961      	adds	r1, r4, r5
 8002908:	42a3      	cmp	r3, r4
 800290a:	6025      	str	r5, [r4, #0]
 800290c:	bf18      	it	ne
 800290e:	6059      	strne	r1, [r3, #4]
 8002910:	6863      	ldr	r3, [r4, #4]
 8002912:	bf08      	it	eq
 8002914:	f8c8 1000 	streq.w	r1, [r8]
 8002918:	5162      	str	r2, [r4, r5]
 800291a:	604b      	str	r3, [r1, #4]
 800291c:	4630      	mov	r0, r6
 800291e:	f000 f82f 	bl	8002980 <__malloc_unlock>
 8002922:	f104 000b 	add.w	r0, r4, #11
 8002926:	1d23      	adds	r3, r4, #4
 8002928:	f020 0007 	bic.w	r0, r0, #7
 800292c:	1ac2      	subs	r2, r0, r3
 800292e:	bf1c      	itt	ne
 8002930:	1a1b      	subne	r3, r3, r0
 8002932:	50a3      	strne	r3, [r4, r2]
 8002934:	e7af      	b.n	8002896 <_malloc_r+0x22>
 8002936:	6862      	ldr	r2, [r4, #4]
 8002938:	42a3      	cmp	r3, r4
 800293a:	bf0c      	ite	eq
 800293c:	f8c8 2000 	streq.w	r2, [r8]
 8002940:	605a      	strne	r2, [r3, #4]
 8002942:	e7eb      	b.n	800291c <_malloc_r+0xa8>
 8002944:	4623      	mov	r3, r4
 8002946:	6864      	ldr	r4, [r4, #4]
 8002948:	e7ae      	b.n	80028a8 <_malloc_r+0x34>
 800294a:	463c      	mov	r4, r7
 800294c:	687f      	ldr	r7, [r7, #4]
 800294e:	e7b6      	b.n	80028be <_malloc_r+0x4a>
 8002950:	461a      	mov	r2, r3
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	42a3      	cmp	r3, r4
 8002956:	d1fb      	bne.n	8002950 <_malloc_r+0xdc>
 8002958:	2300      	movs	r3, #0
 800295a:	6053      	str	r3, [r2, #4]
 800295c:	e7de      	b.n	800291c <_malloc_r+0xa8>
 800295e:	230c      	movs	r3, #12
 8002960:	4630      	mov	r0, r6
 8002962:	6033      	str	r3, [r6, #0]
 8002964:	f000 f80c 	bl	8002980 <__malloc_unlock>
 8002968:	e794      	b.n	8002894 <_malloc_r+0x20>
 800296a:	6005      	str	r5, [r0, #0]
 800296c:	e7d6      	b.n	800291c <_malloc_r+0xa8>
 800296e:	bf00      	nop
 8002970:	20000370 	.word	0x20000370

08002974 <__malloc_lock>:
 8002974:	4801      	ldr	r0, [pc, #4]	@ (800297c <__malloc_lock+0x8>)
 8002976:	f7ff bf10 	b.w	800279a <__retarget_lock_acquire_recursive>
 800297a:	bf00      	nop
 800297c:	20000368 	.word	0x20000368

08002980 <__malloc_unlock>:
 8002980:	4801      	ldr	r0, [pc, #4]	@ (8002988 <__malloc_unlock+0x8>)
 8002982:	f7ff bf0b 	b.w	800279c <__retarget_lock_release_recursive>
 8002986:	bf00      	nop
 8002988:	20000368 	.word	0x20000368

0800298c <__sfputc_r>:
 800298c:	6893      	ldr	r3, [r2, #8]
 800298e:	b410      	push	{r4}
 8002990:	3b01      	subs	r3, #1
 8002992:	2b00      	cmp	r3, #0
 8002994:	6093      	str	r3, [r2, #8]
 8002996:	da07      	bge.n	80029a8 <__sfputc_r+0x1c>
 8002998:	6994      	ldr	r4, [r2, #24]
 800299a:	42a3      	cmp	r3, r4
 800299c:	db01      	blt.n	80029a2 <__sfputc_r+0x16>
 800299e:	290a      	cmp	r1, #10
 80029a0:	d102      	bne.n	80029a8 <__sfputc_r+0x1c>
 80029a2:	bc10      	pop	{r4}
 80029a4:	f000 bb6c 	b.w	8003080 <__swbuf_r>
 80029a8:	6813      	ldr	r3, [r2, #0]
 80029aa:	1c58      	adds	r0, r3, #1
 80029ac:	6010      	str	r0, [r2, #0]
 80029ae:	7019      	strb	r1, [r3, #0]
 80029b0:	4608      	mov	r0, r1
 80029b2:	bc10      	pop	{r4}
 80029b4:	4770      	bx	lr

080029b6 <__sfputs_r>:
 80029b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029b8:	4606      	mov	r6, r0
 80029ba:	460f      	mov	r7, r1
 80029bc:	4614      	mov	r4, r2
 80029be:	18d5      	adds	r5, r2, r3
 80029c0:	42ac      	cmp	r4, r5
 80029c2:	d101      	bne.n	80029c8 <__sfputs_r+0x12>
 80029c4:	2000      	movs	r0, #0
 80029c6:	e007      	b.n	80029d8 <__sfputs_r+0x22>
 80029c8:	463a      	mov	r2, r7
 80029ca:	4630      	mov	r0, r6
 80029cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029d0:	f7ff ffdc 	bl	800298c <__sfputc_r>
 80029d4:	1c43      	adds	r3, r0, #1
 80029d6:	d1f3      	bne.n	80029c0 <__sfputs_r+0xa>
 80029d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080029dc <_vfiprintf_r>:
 80029dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029e0:	460d      	mov	r5, r1
 80029e2:	4614      	mov	r4, r2
 80029e4:	4698      	mov	r8, r3
 80029e6:	4606      	mov	r6, r0
 80029e8:	b09d      	sub	sp, #116	@ 0x74
 80029ea:	b118      	cbz	r0, 80029f4 <_vfiprintf_r+0x18>
 80029ec:	6a03      	ldr	r3, [r0, #32]
 80029ee:	b90b      	cbnz	r3, 80029f4 <_vfiprintf_r+0x18>
 80029f0:	f7ff fdce 	bl	8002590 <__sinit>
 80029f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80029f6:	07d9      	lsls	r1, r3, #31
 80029f8:	d405      	bmi.n	8002a06 <_vfiprintf_r+0x2a>
 80029fa:	89ab      	ldrh	r3, [r5, #12]
 80029fc:	059a      	lsls	r2, r3, #22
 80029fe:	d402      	bmi.n	8002a06 <_vfiprintf_r+0x2a>
 8002a00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002a02:	f7ff feca 	bl	800279a <__retarget_lock_acquire_recursive>
 8002a06:	89ab      	ldrh	r3, [r5, #12]
 8002a08:	071b      	lsls	r3, r3, #28
 8002a0a:	d501      	bpl.n	8002a10 <_vfiprintf_r+0x34>
 8002a0c:	692b      	ldr	r3, [r5, #16]
 8002a0e:	b99b      	cbnz	r3, 8002a38 <_vfiprintf_r+0x5c>
 8002a10:	4629      	mov	r1, r5
 8002a12:	4630      	mov	r0, r6
 8002a14:	f000 fb72 	bl	80030fc <__swsetup_r>
 8002a18:	b170      	cbz	r0, 8002a38 <_vfiprintf_r+0x5c>
 8002a1a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002a1c:	07dc      	lsls	r4, r3, #31
 8002a1e:	d504      	bpl.n	8002a2a <_vfiprintf_r+0x4e>
 8002a20:	f04f 30ff 	mov.w	r0, #4294967295
 8002a24:	b01d      	add	sp, #116	@ 0x74
 8002a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a2a:	89ab      	ldrh	r3, [r5, #12]
 8002a2c:	0598      	lsls	r0, r3, #22
 8002a2e:	d4f7      	bmi.n	8002a20 <_vfiprintf_r+0x44>
 8002a30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002a32:	f7ff feb3 	bl	800279c <__retarget_lock_release_recursive>
 8002a36:	e7f3      	b.n	8002a20 <_vfiprintf_r+0x44>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8002a3c:	2320      	movs	r3, #32
 8002a3e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002a42:	2330      	movs	r3, #48	@ 0x30
 8002a44:	f04f 0901 	mov.w	r9, #1
 8002a48:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a4c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8002bf8 <_vfiprintf_r+0x21c>
 8002a50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002a54:	4623      	mov	r3, r4
 8002a56:	469a      	mov	sl, r3
 8002a58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a5c:	b10a      	cbz	r2, 8002a62 <_vfiprintf_r+0x86>
 8002a5e:	2a25      	cmp	r2, #37	@ 0x25
 8002a60:	d1f9      	bne.n	8002a56 <_vfiprintf_r+0x7a>
 8002a62:	ebba 0b04 	subs.w	fp, sl, r4
 8002a66:	d00b      	beq.n	8002a80 <_vfiprintf_r+0xa4>
 8002a68:	465b      	mov	r3, fp
 8002a6a:	4622      	mov	r2, r4
 8002a6c:	4629      	mov	r1, r5
 8002a6e:	4630      	mov	r0, r6
 8002a70:	f7ff ffa1 	bl	80029b6 <__sfputs_r>
 8002a74:	3001      	adds	r0, #1
 8002a76:	f000 80a7 	beq.w	8002bc8 <_vfiprintf_r+0x1ec>
 8002a7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002a7c:	445a      	add	r2, fp
 8002a7e:	9209      	str	r2, [sp, #36]	@ 0x24
 8002a80:	f89a 3000 	ldrb.w	r3, [sl]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 809f 	beq.w	8002bc8 <_vfiprintf_r+0x1ec>
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a94:	f10a 0a01 	add.w	sl, sl, #1
 8002a98:	9304      	str	r3, [sp, #16]
 8002a9a:	9307      	str	r3, [sp, #28]
 8002a9c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002aa0:	931a      	str	r3, [sp, #104]	@ 0x68
 8002aa2:	4654      	mov	r4, sl
 8002aa4:	2205      	movs	r2, #5
 8002aa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002aaa:	4853      	ldr	r0, [pc, #332]	@ (8002bf8 <_vfiprintf_r+0x21c>)
 8002aac:	f000 fb8c 	bl	80031c8 <memchr>
 8002ab0:	9a04      	ldr	r2, [sp, #16]
 8002ab2:	b9d8      	cbnz	r0, 8002aec <_vfiprintf_r+0x110>
 8002ab4:	06d1      	lsls	r1, r2, #27
 8002ab6:	bf44      	itt	mi
 8002ab8:	2320      	movmi	r3, #32
 8002aba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002abe:	0713      	lsls	r3, r2, #28
 8002ac0:	bf44      	itt	mi
 8002ac2:	232b      	movmi	r3, #43	@ 0x2b
 8002ac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002ac8:	f89a 3000 	ldrb.w	r3, [sl]
 8002acc:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ace:	d015      	beq.n	8002afc <_vfiprintf_r+0x120>
 8002ad0:	4654      	mov	r4, sl
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	f04f 0c0a 	mov.w	ip, #10
 8002ad8:	9a07      	ldr	r2, [sp, #28]
 8002ada:	4621      	mov	r1, r4
 8002adc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ae0:	3b30      	subs	r3, #48	@ 0x30
 8002ae2:	2b09      	cmp	r3, #9
 8002ae4:	d94b      	bls.n	8002b7e <_vfiprintf_r+0x1a2>
 8002ae6:	b1b0      	cbz	r0, 8002b16 <_vfiprintf_r+0x13a>
 8002ae8:	9207      	str	r2, [sp, #28]
 8002aea:	e014      	b.n	8002b16 <_vfiprintf_r+0x13a>
 8002aec:	eba0 0308 	sub.w	r3, r0, r8
 8002af0:	fa09 f303 	lsl.w	r3, r9, r3
 8002af4:	4313      	orrs	r3, r2
 8002af6:	46a2      	mov	sl, r4
 8002af8:	9304      	str	r3, [sp, #16]
 8002afa:	e7d2      	b.n	8002aa2 <_vfiprintf_r+0xc6>
 8002afc:	9b03      	ldr	r3, [sp, #12]
 8002afe:	1d19      	adds	r1, r3, #4
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	9103      	str	r1, [sp, #12]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	bfbb      	ittet	lt
 8002b08:	425b      	neglt	r3, r3
 8002b0a:	f042 0202 	orrlt.w	r2, r2, #2
 8002b0e:	9307      	strge	r3, [sp, #28]
 8002b10:	9307      	strlt	r3, [sp, #28]
 8002b12:	bfb8      	it	lt
 8002b14:	9204      	strlt	r2, [sp, #16]
 8002b16:	7823      	ldrb	r3, [r4, #0]
 8002b18:	2b2e      	cmp	r3, #46	@ 0x2e
 8002b1a:	d10a      	bne.n	8002b32 <_vfiprintf_r+0x156>
 8002b1c:	7863      	ldrb	r3, [r4, #1]
 8002b1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b20:	d132      	bne.n	8002b88 <_vfiprintf_r+0x1ac>
 8002b22:	9b03      	ldr	r3, [sp, #12]
 8002b24:	3402      	adds	r4, #2
 8002b26:	1d1a      	adds	r2, r3, #4
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	9203      	str	r2, [sp, #12]
 8002b2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002b30:	9305      	str	r3, [sp, #20]
 8002b32:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8002bfc <_vfiprintf_r+0x220>
 8002b36:	2203      	movs	r2, #3
 8002b38:	4650      	mov	r0, sl
 8002b3a:	7821      	ldrb	r1, [r4, #0]
 8002b3c:	f000 fb44 	bl	80031c8 <memchr>
 8002b40:	b138      	cbz	r0, 8002b52 <_vfiprintf_r+0x176>
 8002b42:	2240      	movs	r2, #64	@ 0x40
 8002b44:	9b04      	ldr	r3, [sp, #16]
 8002b46:	eba0 000a 	sub.w	r0, r0, sl
 8002b4a:	4082      	lsls	r2, r0
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	3401      	adds	r4, #1
 8002b50:	9304      	str	r3, [sp, #16]
 8002b52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b56:	2206      	movs	r2, #6
 8002b58:	4829      	ldr	r0, [pc, #164]	@ (8002c00 <_vfiprintf_r+0x224>)
 8002b5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002b5e:	f000 fb33 	bl	80031c8 <memchr>
 8002b62:	2800      	cmp	r0, #0
 8002b64:	d03f      	beq.n	8002be6 <_vfiprintf_r+0x20a>
 8002b66:	4b27      	ldr	r3, [pc, #156]	@ (8002c04 <_vfiprintf_r+0x228>)
 8002b68:	bb1b      	cbnz	r3, 8002bb2 <_vfiprintf_r+0x1d6>
 8002b6a:	9b03      	ldr	r3, [sp, #12]
 8002b6c:	3307      	adds	r3, #7
 8002b6e:	f023 0307 	bic.w	r3, r3, #7
 8002b72:	3308      	adds	r3, #8
 8002b74:	9303      	str	r3, [sp, #12]
 8002b76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002b78:	443b      	add	r3, r7
 8002b7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8002b7c:	e76a      	b.n	8002a54 <_vfiprintf_r+0x78>
 8002b7e:	460c      	mov	r4, r1
 8002b80:	2001      	movs	r0, #1
 8002b82:	fb0c 3202 	mla	r2, ip, r2, r3
 8002b86:	e7a8      	b.n	8002ada <_vfiprintf_r+0xfe>
 8002b88:	2300      	movs	r3, #0
 8002b8a:	f04f 0c0a 	mov.w	ip, #10
 8002b8e:	4619      	mov	r1, r3
 8002b90:	3401      	adds	r4, #1
 8002b92:	9305      	str	r3, [sp, #20]
 8002b94:	4620      	mov	r0, r4
 8002b96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b9a:	3a30      	subs	r2, #48	@ 0x30
 8002b9c:	2a09      	cmp	r2, #9
 8002b9e:	d903      	bls.n	8002ba8 <_vfiprintf_r+0x1cc>
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d0c6      	beq.n	8002b32 <_vfiprintf_r+0x156>
 8002ba4:	9105      	str	r1, [sp, #20]
 8002ba6:	e7c4      	b.n	8002b32 <_vfiprintf_r+0x156>
 8002ba8:	4604      	mov	r4, r0
 8002baa:	2301      	movs	r3, #1
 8002bac:	fb0c 2101 	mla	r1, ip, r1, r2
 8002bb0:	e7f0      	b.n	8002b94 <_vfiprintf_r+0x1b8>
 8002bb2:	ab03      	add	r3, sp, #12
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	462a      	mov	r2, r5
 8002bb8:	4630      	mov	r0, r6
 8002bba:	4b13      	ldr	r3, [pc, #76]	@ (8002c08 <_vfiprintf_r+0x22c>)
 8002bbc:	a904      	add	r1, sp, #16
 8002bbe:	f3af 8000 	nop.w
 8002bc2:	4607      	mov	r7, r0
 8002bc4:	1c78      	adds	r0, r7, #1
 8002bc6:	d1d6      	bne.n	8002b76 <_vfiprintf_r+0x19a>
 8002bc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002bca:	07d9      	lsls	r1, r3, #31
 8002bcc:	d405      	bmi.n	8002bda <_vfiprintf_r+0x1fe>
 8002bce:	89ab      	ldrh	r3, [r5, #12]
 8002bd0:	059a      	lsls	r2, r3, #22
 8002bd2:	d402      	bmi.n	8002bda <_vfiprintf_r+0x1fe>
 8002bd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002bd6:	f7ff fde1 	bl	800279c <__retarget_lock_release_recursive>
 8002bda:	89ab      	ldrh	r3, [r5, #12]
 8002bdc:	065b      	lsls	r3, r3, #25
 8002bde:	f53f af1f 	bmi.w	8002a20 <_vfiprintf_r+0x44>
 8002be2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002be4:	e71e      	b.n	8002a24 <_vfiprintf_r+0x48>
 8002be6:	ab03      	add	r3, sp, #12
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	462a      	mov	r2, r5
 8002bec:	4630      	mov	r0, r6
 8002bee:	4b06      	ldr	r3, [pc, #24]	@ (8002c08 <_vfiprintf_r+0x22c>)
 8002bf0:	a904      	add	r1, sp, #16
 8002bf2:	f000 f87d 	bl	8002cf0 <_printf_i>
 8002bf6:	e7e4      	b.n	8002bc2 <_vfiprintf_r+0x1e6>
 8002bf8:	080034ba 	.word	0x080034ba
 8002bfc:	080034c0 	.word	0x080034c0
 8002c00:	080034c4 	.word	0x080034c4
 8002c04:	00000000 	.word	0x00000000
 8002c08:	080029b7 	.word	0x080029b7

08002c0c <_printf_common>:
 8002c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c10:	4616      	mov	r6, r2
 8002c12:	4698      	mov	r8, r3
 8002c14:	688a      	ldr	r2, [r1, #8]
 8002c16:	690b      	ldr	r3, [r1, #16]
 8002c18:	4607      	mov	r7, r0
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	bfb8      	it	lt
 8002c1e:	4613      	movlt	r3, r2
 8002c20:	6033      	str	r3, [r6, #0]
 8002c22:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002c26:	460c      	mov	r4, r1
 8002c28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002c2c:	b10a      	cbz	r2, 8002c32 <_printf_common+0x26>
 8002c2e:	3301      	adds	r3, #1
 8002c30:	6033      	str	r3, [r6, #0]
 8002c32:	6823      	ldr	r3, [r4, #0]
 8002c34:	0699      	lsls	r1, r3, #26
 8002c36:	bf42      	ittt	mi
 8002c38:	6833      	ldrmi	r3, [r6, #0]
 8002c3a:	3302      	addmi	r3, #2
 8002c3c:	6033      	strmi	r3, [r6, #0]
 8002c3e:	6825      	ldr	r5, [r4, #0]
 8002c40:	f015 0506 	ands.w	r5, r5, #6
 8002c44:	d106      	bne.n	8002c54 <_printf_common+0x48>
 8002c46:	f104 0a19 	add.w	sl, r4, #25
 8002c4a:	68e3      	ldr	r3, [r4, #12]
 8002c4c:	6832      	ldr	r2, [r6, #0]
 8002c4e:	1a9b      	subs	r3, r3, r2
 8002c50:	42ab      	cmp	r3, r5
 8002c52:	dc2b      	bgt.n	8002cac <_printf_common+0xa0>
 8002c54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002c58:	6822      	ldr	r2, [r4, #0]
 8002c5a:	3b00      	subs	r3, #0
 8002c5c:	bf18      	it	ne
 8002c5e:	2301      	movne	r3, #1
 8002c60:	0692      	lsls	r2, r2, #26
 8002c62:	d430      	bmi.n	8002cc6 <_printf_common+0xba>
 8002c64:	4641      	mov	r1, r8
 8002c66:	4638      	mov	r0, r7
 8002c68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002c6c:	47c8      	blx	r9
 8002c6e:	3001      	adds	r0, #1
 8002c70:	d023      	beq.n	8002cba <_printf_common+0xae>
 8002c72:	6823      	ldr	r3, [r4, #0]
 8002c74:	6922      	ldr	r2, [r4, #16]
 8002c76:	f003 0306 	and.w	r3, r3, #6
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	bf14      	ite	ne
 8002c7e:	2500      	movne	r5, #0
 8002c80:	6833      	ldreq	r3, [r6, #0]
 8002c82:	f04f 0600 	mov.w	r6, #0
 8002c86:	bf08      	it	eq
 8002c88:	68e5      	ldreq	r5, [r4, #12]
 8002c8a:	f104 041a 	add.w	r4, r4, #26
 8002c8e:	bf08      	it	eq
 8002c90:	1aed      	subeq	r5, r5, r3
 8002c92:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002c96:	bf08      	it	eq
 8002c98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	bfc4      	itt	gt
 8002ca0:	1a9b      	subgt	r3, r3, r2
 8002ca2:	18ed      	addgt	r5, r5, r3
 8002ca4:	42b5      	cmp	r5, r6
 8002ca6:	d11a      	bne.n	8002cde <_printf_common+0xd2>
 8002ca8:	2000      	movs	r0, #0
 8002caa:	e008      	b.n	8002cbe <_printf_common+0xb2>
 8002cac:	2301      	movs	r3, #1
 8002cae:	4652      	mov	r2, sl
 8002cb0:	4641      	mov	r1, r8
 8002cb2:	4638      	mov	r0, r7
 8002cb4:	47c8      	blx	r9
 8002cb6:	3001      	adds	r0, #1
 8002cb8:	d103      	bne.n	8002cc2 <_printf_common+0xb6>
 8002cba:	f04f 30ff 	mov.w	r0, #4294967295
 8002cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cc2:	3501      	adds	r5, #1
 8002cc4:	e7c1      	b.n	8002c4a <_printf_common+0x3e>
 8002cc6:	2030      	movs	r0, #48	@ 0x30
 8002cc8:	18e1      	adds	r1, r4, r3
 8002cca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002cce:	1c5a      	adds	r2, r3, #1
 8002cd0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002cd4:	4422      	add	r2, r4
 8002cd6:	3302      	adds	r3, #2
 8002cd8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002cdc:	e7c2      	b.n	8002c64 <_printf_common+0x58>
 8002cde:	2301      	movs	r3, #1
 8002ce0:	4622      	mov	r2, r4
 8002ce2:	4641      	mov	r1, r8
 8002ce4:	4638      	mov	r0, r7
 8002ce6:	47c8      	blx	r9
 8002ce8:	3001      	adds	r0, #1
 8002cea:	d0e6      	beq.n	8002cba <_printf_common+0xae>
 8002cec:	3601      	adds	r6, #1
 8002cee:	e7d9      	b.n	8002ca4 <_printf_common+0x98>

08002cf0 <_printf_i>:
 8002cf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002cf4:	7e0f      	ldrb	r7, [r1, #24]
 8002cf6:	4691      	mov	r9, r2
 8002cf8:	2f78      	cmp	r7, #120	@ 0x78
 8002cfa:	4680      	mov	r8, r0
 8002cfc:	460c      	mov	r4, r1
 8002cfe:	469a      	mov	sl, r3
 8002d00:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002d02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002d06:	d807      	bhi.n	8002d18 <_printf_i+0x28>
 8002d08:	2f62      	cmp	r7, #98	@ 0x62
 8002d0a:	d80a      	bhi.n	8002d22 <_printf_i+0x32>
 8002d0c:	2f00      	cmp	r7, #0
 8002d0e:	f000 80d3 	beq.w	8002eb8 <_printf_i+0x1c8>
 8002d12:	2f58      	cmp	r7, #88	@ 0x58
 8002d14:	f000 80ba 	beq.w	8002e8c <_printf_i+0x19c>
 8002d18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002d1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002d20:	e03a      	b.n	8002d98 <_printf_i+0xa8>
 8002d22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002d26:	2b15      	cmp	r3, #21
 8002d28:	d8f6      	bhi.n	8002d18 <_printf_i+0x28>
 8002d2a:	a101      	add	r1, pc, #4	@ (adr r1, 8002d30 <_printf_i+0x40>)
 8002d2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002d30:	08002d89 	.word	0x08002d89
 8002d34:	08002d9d 	.word	0x08002d9d
 8002d38:	08002d19 	.word	0x08002d19
 8002d3c:	08002d19 	.word	0x08002d19
 8002d40:	08002d19 	.word	0x08002d19
 8002d44:	08002d19 	.word	0x08002d19
 8002d48:	08002d9d 	.word	0x08002d9d
 8002d4c:	08002d19 	.word	0x08002d19
 8002d50:	08002d19 	.word	0x08002d19
 8002d54:	08002d19 	.word	0x08002d19
 8002d58:	08002d19 	.word	0x08002d19
 8002d5c:	08002e9f 	.word	0x08002e9f
 8002d60:	08002dc7 	.word	0x08002dc7
 8002d64:	08002e59 	.word	0x08002e59
 8002d68:	08002d19 	.word	0x08002d19
 8002d6c:	08002d19 	.word	0x08002d19
 8002d70:	08002ec1 	.word	0x08002ec1
 8002d74:	08002d19 	.word	0x08002d19
 8002d78:	08002dc7 	.word	0x08002dc7
 8002d7c:	08002d19 	.word	0x08002d19
 8002d80:	08002d19 	.word	0x08002d19
 8002d84:	08002e61 	.word	0x08002e61
 8002d88:	6833      	ldr	r3, [r6, #0]
 8002d8a:	1d1a      	adds	r2, r3, #4
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6032      	str	r2, [r6, #0]
 8002d90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002d94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e09e      	b.n	8002eda <_printf_i+0x1ea>
 8002d9c:	6833      	ldr	r3, [r6, #0]
 8002d9e:	6820      	ldr	r0, [r4, #0]
 8002da0:	1d19      	adds	r1, r3, #4
 8002da2:	6031      	str	r1, [r6, #0]
 8002da4:	0606      	lsls	r6, r0, #24
 8002da6:	d501      	bpl.n	8002dac <_printf_i+0xbc>
 8002da8:	681d      	ldr	r5, [r3, #0]
 8002daa:	e003      	b.n	8002db4 <_printf_i+0xc4>
 8002dac:	0645      	lsls	r5, r0, #25
 8002dae:	d5fb      	bpl.n	8002da8 <_printf_i+0xb8>
 8002db0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002db4:	2d00      	cmp	r5, #0
 8002db6:	da03      	bge.n	8002dc0 <_printf_i+0xd0>
 8002db8:	232d      	movs	r3, #45	@ 0x2d
 8002dba:	426d      	negs	r5, r5
 8002dbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002dc0:	230a      	movs	r3, #10
 8002dc2:	4859      	ldr	r0, [pc, #356]	@ (8002f28 <_printf_i+0x238>)
 8002dc4:	e011      	b.n	8002dea <_printf_i+0xfa>
 8002dc6:	6821      	ldr	r1, [r4, #0]
 8002dc8:	6833      	ldr	r3, [r6, #0]
 8002dca:	0608      	lsls	r0, r1, #24
 8002dcc:	f853 5b04 	ldr.w	r5, [r3], #4
 8002dd0:	d402      	bmi.n	8002dd8 <_printf_i+0xe8>
 8002dd2:	0649      	lsls	r1, r1, #25
 8002dd4:	bf48      	it	mi
 8002dd6:	b2ad      	uxthmi	r5, r5
 8002dd8:	2f6f      	cmp	r7, #111	@ 0x6f
 8002dda:	6033      	str	r3, [r6, #0]
 8002ddc:	bf14      	ite	ne
 8002dde:	230a      	movne	r3, #10
 8002de0:	2308      	moveq	r3, #8
 8002de2:	4851      	ldr	r0, [pc, #324]	@ (8002f28 <_printf_i+0x238>)
 8002de4:	2100      	movs	r1, #0
 8002de6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002dea:	6866      	ldr	r6, [r4, #4]
 8002dec:	2e00      	cmp	r6, #0
 8002dee:	bfa8      	it	ge
 8002df0:	6821      	ldrge	r1, [r4, #0]
 8002df2:	60a6      	str	r6, [r4, #8]
 8002df4:	bfa4      	itt	ge
 8002df6:	f021 0104 	bicge.w	r1, r1, #4
 8002dfa:	6021      	strge	r1, [r4, #0]
 8002dfc:	b90d      	cbnz	r5, 8002e02 <_printf_i+0x112>
 8002dfe:	2e00      	cmp	r6, #0
 8002e00:	d04b      	beq.n	8002e9a <_printf_i+0x1aa>
 8002e02:	4616      	mov	r6, r2
 8002e04:	fbb5 f1f3 	udiv	r1, r5, r3
 8002e08:	fb03 5711 	mls	r7, r3, r1, r5
 8002e0c:	5dc7      	ldrb	r7, [r0, r7]
 8002e0e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002e12:	462f      	mov	r7, r5
 8002e14:	42bb      	cmp	r3, r7
 8002e16:	460d      	mov	r5, r1
 8002e18:	d9f4      	bls.n	8002e04 <_printf_i+0x114>
 8002e1a:	2b08      	cmp	r3, #8
 8002e1c:	d10b      	bne.n	8002e36 <_printf_i+0x146>
 8002e1e:	6823      	ldr	r3, [r4, #0]
 8002e20:	07df      	lsls	r7, r3, #31
 8002e22:	d508      	bpl.n	8002e36 <_printf_i+0x146>
 8002e24:	6923      	ldr	r3, [r4, #16]
 8002e26:	6861      	ldr	r1, [r4, #4]
 8002e28:	4299      	cmp	r1, r3
 8002e2a:	bfde      	ittt	le
 8002e2c:	2330      	movle	r3, #48	@ 0x30
 8002e2e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002e32:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002e36:	1b92      	subs	r2, r2, r6
 8002e38:	6122      	str	r2, [r4, #16]
 8002e3a:	464b      	mov	r3, r9
 8002e3c:	4621      	mov	r1, r4
 8002e3e:	4640      	mov	r0, r8
 8002e40:	f8cd a000 	str.w	sl, [sp]
 8002e44:	aa03      	add	r2, sp, #12
 8002e46:	f7ff fee1 	bl	8002c0c <_printf_common>
 8002e4a:	3001      	adds	r0, #1
 8002e4c:	d14a      	bne.n	8002ee4 <_printf_i+0x1f4>
 8002e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8002e52:	b004      	add	sp, #16
 8002e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e58:	6823      	ldr	r3, [r4, #0]
 8002e5a:	f043 0320 	orr.w	r3, r3, #32
 8002e5e:	6023      	str	r3, [r4, #0]
 8002e60:	2778      	movs	r7, #120	@ 0x78
 8002e62:	4832      	ldr	r0, [pc, #200]	@ (8002f2c <_printf_i+0x23c>)
 8002e64:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002e68:	6823      	ldr	r3, [r4, #0]
 8002e6a:	6831      	ldr	r1, [r6, #0]
 8002e6c:	061f      	lsls	r7, r3, #24
 8002e6e:	f851 5b04 	ldr.w	r5, [r1], #4
 8002e72:	d402      	bmi.n	8002e7a <_printf_i+0x18a>
 8002e74:	065f      	lsls	r7, r3, #25
 8002e76:	bf48      	it	mi
 8002e78:	b2ad      	uxthmi	r5, r5
 8002e7a:	6031      	str	r1, [r6, #0]
 8002e7c:	07d9      	lsls	r1, r3, #31
 8002e7e:	bf44      	itt	mi
 8002e80:	f043 0320 	orrmi.w	r3, r3, #32
 8002e84:	6023      	strmi	r3, [r4, #0]
 8002e86:	b11d      	cbz	r5, 8002e90 <_printf_i+0x1a0>
 8002e88:	2310      	movs	r3, #16
 8002e8a:	e7ab      	b.n	8002de4 <_printf_i+0xf4>
 8002e8c:	4826      	ldr	r0, [pc, #152]	@ (8002f28 <_printf_i+0x238>)
 8002e8e:	e7e9      	b.n	8002e64 <_printf_i+0x174>
 8002e90:	6823      	ldr	r3, [r4, #0]
 8002e92:	f023 0320 	bic.w	r3, r3, #32
 8002e96:	6023      	str	r3, [r4, #0]
 8002e98:	e7f6      	b.n	8002e88 <_printf_i+0x198>
 8002e9a:	4616      	mov	r6, r2
 8002e9c:	e7bd      	b.n	8002e1a <_printf_i+0x12a>
 8002e9e:	6833      	ldr	r3, [r6, #0]
 8002ea0:	6825      	ldr	r5, [r4, #0]
 8002ea2:	1d18      	adds	r0, r3, #4
 8002ea4:	6961      	ldr	r1, [r4, #20]
 8002ea6:	6030      	str	r0, [r6, #0]
 8002ea8:	062e      	lsls	r6, r5, #24
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	d501      	bpl.n	8002eb2 <_printf_i+0x1c2>
 8002eae:	6019      	str	r1, [r3, #0]
 8002eb0:	e002      	b.n	8002eb8 <_printf_i+0x1c8>
 8002eb2:	0668      	lsls	r0, r5, #25
 8002eb4:	d5fb      	bpl.n	8002eae <_printf_i+0x1be>
 8002eb6:	8019      	strh	r1, [r3, #0]
 8002eb8:	2300      	movs	r3, #0
 8002eba:	4616      	mov	r6, r2
 8002ebc:	6123      	str	r3, [r4, #16]
 8002ebe:	e7bc      	b.n	8002e3a <_printf_i+0x14a>
 8002ec0:	6833      	ldr	r3, [r6, #0]
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	1d1a      	adds	r2, r3, #4
 8002ec6:	6032      	str	r2, [r6, #0]
 8002ec8:	681e      	ldr	r6, [r3, #0]
 8002eca:	6862      	ldr	r2, [r4, #4]
 8002ecc:	4630      	mov	r0, r6
 8002ece:	f000 f97b 	bl	80031c8 <memchr>
 8002ed2:	b108      	cbz	r0, 8002ed8 <_printf_i+0x1e8>
 8002ed4:	1b80      	subs	r0, r0, r6
 8002ed6:	6060      	str	r0, [r4, #4]
 8002ed8:	6863      	ldr	r3, [r4, #4]
 8002eda:	6123      	str	r3, [r4, #16]
 8002edc:	2300      	movs	r3, #0
 8002ede:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002ee2:	e7aa      	b.n	8002e3a <_printf_i+0x14a>
 8002ee4:	4632      	mov	r2, r6
 8002ee6:	4649      	mov	r1, r9
 8002ee8:	4640      	mov	r0, r8
 8002eea:	6923      	ldr	r3, [r4, #16]
 8002eec:	47d0      	blx	sl
 8002eee:	3001      	adds	r0, #1
 8002ef0:	d0ad      	beq.n	8002e4e <_printf_i+0x15e>
 8002ef2:	6823      	ldr	r3, [r4, #0]
 8002ef4:	079b      	lsls	r3, r3, #30
 8002ef6:	d413      	bmi.n	8002f20 <_printf_i+0x230>
 8002ef8:	68e0      	ldr	r0, [r4, #12]
 8002efa:	9b03      	ldr	r3, [sp, #12]
 8002efc:	4298      	cmp	r0, r3
 8002efe:	bfb8      	it	lt
 8002f00:	4618      	movlt	r0, r3
 8002f02:	e7a6      	b.n	8002e52 <_printf_i+0x162>
 8002f04:	2301      	movs	r3, #1
 8002f06:	4632      	mov	r2, r6
 8002f08:	4649      	mov	r1, r9
 8002f0a:	4640      	mov	r0, r8
 8002f0c:	47d0      	blx	sl
 8002f0e:	3001      	adds	r0, #1
 8002f10:	d09d      	beq.n	8002e4e <_printf_i+0x15e>
 8002f12:	3501      	adds	r5, #1
 8002f14:	68e3      	ldr	r3, [r4, #12]
 8002f16:	9903      	ldr	r1, [sp, #12]
 8002f18:	1a5b      	subs	r3, r3, r1
 8002f1a:	42ab      	cmp	r3, r5
 8002f1c:	dcf2      	bgt.n	8002f04 <_printf_i+0x214>
 8002f1e:	e7eb      	b.n	8002ef8 <_printf_i+0x208>
 8002f20:	2500      	movs	r5, #0
 8002f22:	f104 0619 	add.w	r6, r4, #25
 8002f26:	e7f5      	b.n	8002f14 <_printf_i+0x224>
 8002f28:	080034cb 	.word	0x080034cb
 8002f2c:	080034dc 	.word	0x080034dc

08002f30 <__sflush_r>:
 8002f30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f36:	0716      	lsls	r6, r2, #28
 8002f38:	4605      	mov	r5, r0
 8002f3a:	460c      	mov	r4, r1
 8002f3c:	d454      	bmi.n	8002fe8 <__sflush_r+0xb8>
 8002f3e:	684b      	ldr	r3, [r1, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	dc02      	bgt.n	8002f4a <__sflush_r+0x1a>
 8002f44:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	dd48      	ble.n	8002fdc <__sflush_r+0xac>
 8002f4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002f4c:	2e00      	cmp	r6, #0
 8002f4e:	d045      	beq.n	8002fdc <__sflush_r+0xac>
 8002f50:	2300      	movs	r3, #0
 8002f52:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002f56:	682f      	ldr	r7, [r5, #0]
 8002f58:	6a21      	ldr	r1, [r4, #32]
 8002f5a:	602b      	str	r3, [r5, #0]
 8002f5c:	d030      	beq.n	8002fc0 <__sflush_r+0x90>
 8002f5e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002f60:	89a3      	ldrh	r3, [r4, #12]
 8002f62:	0759      	lsls	r1, r3, #29
 8002f64:	d505      	bpl.n	8002f72 <__sflush_r+0x42>
 8002f66:	6863      	ldr	r3, [r4, #4]
 8002f68:	1ad2      	subs	r2, r2, r3
 8002f6a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002f6c:	b10b      	cbz	r3, 8002f72 <__sflush_r+0x42>
 8002f6e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002f70:	1ad2      	subs	r2, r2, r3
 8002f72:	2300      	movs	r3, #0
 8002f74:	4628      	mov	r0, r5
 8002f76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002f78:	6a21      	ldr	r1, [r4, #32]
 8002f7a:	47b0      	blx	r6
 8002f7c:	1c43      	adds	r3, r0, #1
 8002f7e:	89a3      	ldrh	r3, [r4, #12]
 8002f80:	d106      	bne.n	8002f90 <__sflush_r+0x60>
 8002f82:	6829      	ldr	r1, [r5, #0]
 8002f84:	291d      	cmp	r1, #29
 8002f86:	d82b      	bhi.n	8002fe0 <__sflush_r+0xb0>
 8002f88:	4a28      	ldr	r2, [pc, #160]	@ (800302c <__sflush_r+0xfc>)
 8002f8a:	410a      	asrs	r2, r1
 8002f8c:	07d6      	lsls	r6, r2, #31
 8002f8e:	d427      	bmi.n	8002fe0 <__sflush_r+0xb0>
 8002f90:	2200      	movs	r2, #0
 8002f92:	6062      	str	r2, [r4, #4]
 8002f94:	6922      	ldr	r2, [r4, #16]
 8002f96:	04d9      	lsls	r1, r3, #19
 8002f98:	6022      	str	r2, [r4, #0]
 8002f9a:	d504      	bpl.n	8002fa6 <__sflush_r+0x76>
 8002f9c:	1c42      	adds	r2, r0, #1
 8002f9e:	d101      	bne.n	8002fa4 <__sflush_r+0x74>
 8002fa0:	682b      	ldr	r3, [r5, #0]
 8002fa2:	b903      	cbnz	r3, 8002fa6 <__sflush_r+0x76>
 8002fa4:	6560      	str	r0, [r4, #84]	@ 0x54
 8002fa6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002fa8:	602f      	str	r7, [r5, #0]
 8002faa:	b1b9      	cbz	r1, 8002fdc <__sflush_r+0xac>
 8002fac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002fb0:	4299      	cmp	r1, r3
 8002fb2:	d002      	beq.n	8002fba <__sflush_r+0x8a>
 8002fb4:	4628      	mov	r0, r5
 8002fb6:	f7ff fbf3 	bl	80027a0 <_free_r>
 8002fba:	2300      	movs	r3, #0
 8002fbc:	6363      	str	r3, [r4, #52]	@ 0x34
 8002fbe:	e00d      	b.n	8002fdc <__sflush_r+0xac>
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	4628      	mov	r0, r5
 8002fc4:	47b0      	blx	r6
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	1c50      	adds	r0, r2, #1
 8002fca:	d1c9      	bne.n	8002f60 <__sflush_r+0x30>
 8002fcc:	682b      	ldr	r3, [r5, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d0c6      	beq.n	8002f60 <__sflush_r+0x30>
 8002fd2:	2b1d      	cmp	r3, #29
 8002fd4:	d001      	beq.n	8002fda <__sflush_r+0xaa>
 8002fd6:	2b16      	cmp	r3, #22
 8002fd8:	d11d      	bne.n	8003016 <__sflush_r+0xe6>
 8002fda:	602f      	str	r7, [r5, #0]
 8002fdc:	2000      	movs	r0, #0
 8002fde:	e021      	b.n	8003024 <__sflush_r+0xf4>
 8002fe0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fe4:	b21b      	sxth	r3, r3
 8002fe6:	e01a      	b.n	800301e <__sflush_r+0xee>
 8002fe8:	690f      	ldr	r7, [r1, #16]
 8002fea:	2f00      	cmp	r7, #0
 8002fec:	d0f6      	beq.n	8002fdc <__sflush_r+0xac>
 8002fee:	0793      	lsls	r3, r2, #30
 8002ff0:	bf18      	it	ne
 8002ff2:	2300      	movne	r3, #0
 8002ff4:	680e      	ldr	r6, [r1, #0]
 8002ff6:	bf08      	it	eq
 8002ff8:	694b      	ldreq	r3, [r1, #20]
 8002ffa:	1bf6      	subs	r6, r6, r7
 8002ffc:	600f      	str	r7, [r1, #0]
 8002ffe:	608b      	str	r3, [r1, #8]
 8003000:	2e00      	cmp	r6, #0
 8003002:	ddeb      	ble.n	8002fdc <__sflush_r+0xac>
 8003004:	4633      	mov	r3, r6
 8003006:	463a      	mov	r2, r7
 8003008:	4628      	mov	r0, r5
 800300a:	6a21      	ldr	r1, [r4, #32]
 800300c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003010:	47e0      	blx	ip
 8003012:	2800      	cmp	r0, #0
 8003014:	dc07      	bgt.n	8003026 <__sflush_r+0xf6>
 8003016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800301a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800301e:	f04f 30ff 	mov.w	r0, #4294967295
 8003022:	81a3      	strh	r3, [r4, #12]
 8003024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003026:	4407      	add	r7, r0
 8003028:	1a36      	subs	r6, r6, r0
 800302a:	e7e9      	b.n	8003000 <__sflush_r+0xd0>
 800302c:	dfbffffe 	.word	0xdfbffffe

08003030 <_fflush_r>:
 8003030:	b538      	push	{r3, r4, r5, lr}
 8003032:	690b      	ldr	r3, [r1, #16]
 8003034:	4605      	mov	r5, r0
 8003036:	460c      	mov	r4, r1
 8003038:	b913      	cbnz	r3, 8003040 <_fflush_r+0x10>
 800303a:	2500      	movs	r5, #0
 800303c:	4628      	mov	r0, r5
 800303e:	bd38      	pop	{r3, r4, r5, pc}
 8003040:	b118      	cbz	r0, 800304a <_fflush_r+0x1a>
 8003042:	6a03      	ldr	r3, [r0, #32]
 8003044:	b90b      	cbnz	r3, 800304a <_fflush_r+0x1a>
 8003046:	f7ff faa3 	bl	8002590 <__sinit>
 800304a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0f3      	beq.n	800303a <_fflush_r+0xa>
 8003052:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003054:	07d0      	lsls	r0, r2, #31
 8003056:	d404      	bmi.n	8003062 <_fflush_r+0x32>
 8003058:	0599      	lsls	r1, r3, #22
 800305a:	d402      	bmi.n	8003062 <_fflush_r+0x32>
 800305c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800305e:	f7ff fb9c 	bl	800279a <__retarget_lock_acquire_recursive>
 8003062:	4628      	mov	r0, r5
 8003064:	4621      	mov	r1, r4
 8003066:	f7ff ff63 	bl	8002f30 <__sflush_r>
 800306a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800306c:	4605      	mov	r5, r0
 800306e:	07da      	lsls	r2, r3, #31
 8003070:	d4e4      	bmi.n	800303c <_fflush_r+0xc>
 8003072:	89a3      	ldrh	r3, [r4, #12]
 8003074:	059b      	lsls	r3, r3, #22
 8003076:	d4e1      	bmi.n	800303c <_fflush_r+0xc>
 8003078:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800307a:	f7ff fb8f 	bl	800279c <__retarget_lock_release_recursive>
 800307e:	e7dd      	b.n	800303c <_fflush_r+0xc>

08003080 <__swbuf_r>:
 8003080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003082:	460e      	mov	r6, r1
 8003084:	4614      	mov	r4, r2
 8003086:	4605      	mov	r5, r0
 8003088:	b118      	cbz	r0, 8003092 <__swbuf_r+0x12>
 800308a:	6a03      	ldr	r3, [r0, #32]
 800308c:	b90b      	cbnz	r3, 8003092 <__swbuf_r+0x12>
 800308e:	f7ff fa7f 	bl	8002590 <__sinit>
 8003092:	69a3      	ldr	r3, [r4, #24]
 8003094:	60a3      	str	r3, [r4, #8]
 8003096:	89a3      	ldrh	r3, [r4, #12]
 8003098:	071a      	lsls	r2, r3, #28
 800309a:	d501      	bpl.n	80030a0 <__swbuf_r+0x20>
 800309c:	6923      	ldr	r3, [r4, #16]
 800309e:	b943      	cbnz	r3, 80030b2 <__swbuf_r+0x32>
 80030a0:	4621      	mov	r1, r4
 80030a2:	4628      	mov	r0, r5
 80030a4:	f000 f82a 	bl	80030fc <__swsetup_r>
 80030a8:	b118      	cbz	r0, 80030b2 <__swbuf_r+0x32>
 80030aa:	f04f 37ff 	mov.w	r7, #4294967295
 80030ae:	4638      	mov	r0, r7
 80030b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030b2:	6823      	ldr	r3, [r4, #0]
 80030b4:	6922      	ldr	r2, [r4, #16]
 80030b6:	b2f6      	uxtb	r6, r6
 80030b8:	1a98      	subs	r0, r3, r2
 80030ba:	6963      	ldr	r3, [r4, #20]
 80030bc:	4637      	mov	r7, r6
 80030be:	4283      	cmp	r3, r0
 80030c0:	dc05      	bgt.n	80030ce <__swbuf_r+0x4e>
 80030c2:	4621      	mov	r1, r4
 80030c4:	4628      	mov	r0, r5
 80030c6:	f7ff ffb3 	bl	8003030 <_fflush_r>
 80030ca:	2800      	cmp	r0, #0
 80030cc:	d1ed      	bne.n	80030aa <__swbuf_r+0x2a>
 80030ce:	68a3      	ldr	r3, [r4, #8]
 80030d0:	3b01      	subs	r3, #1
 80030d2:	60a3      	str	r3, [r4, #8]
 80030d4:	6823      	ldr	r3, [r4, #0]
 80030d6:	1c5a      	adds	r2, r3, #1
 80030d8:	6022      	str	r2, [r4, #0]
 80030da:	701e      	strb	r6, [r3, #0]
 80030dc:	6962      	ldr	r2, [r4, #20]
 80030de:	1c43      	adds	r3, r0, #1
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d004      	beq.n	80030ee <__swbuf_r+0x6e>
 80030e4:	89a3      	ldrh	r3, [r4, #12]
 80030e6:	07db      	lsls	r3, r3, #31
 80030e8:	d5e1      	bpl.n	80030ae <__swbuf_r+0x2e>
 80030ea:	2e0a      	cmp	r6, #10
 80030ec:	d1df      	bne.n	80030ae <__swbuf_r+0x2e>
 80030ee:	4621      	mov	r1, r4
 80030f0:	4628      	mov	r0, r5
 80030f2:	f7ff ff9d 	bl	8003030 <_fflush_r>
 80030f6:	2800      	cmp	r0, #0
 80030f8:	d0d9      	beq.n	80030ae <__swbuf_r+0x2e>
 80030fa:	e7d6      	b.n	80030aa <__swbuf_r+0x2a>

080030fc <__swsetup_r>:
 80030fc:	b538      	push	{r3, r4, r5, lr}
 80030fe:	4b29      	ldr	r3, [pc, #164]	@ (80031a4 <__swsetup_r+0xa8>)
 8003100:	4605      	mov	r5, r0
 8003102:	6818      	ldr	r0, [r3, #0]
 8003104:	460c      	mov	r4, r1
 8003106:	b118      	cbz	r0, 8003110 <__swsetup_r+0x14>
 8003108:	6a03      	ldr	r3, [r0, #32]
 800310a:	b90b      	cbnz	r3, 8003110 <__swsetup_r+0x14>
 800310c:	f7ff fa40 	bl	8002590 <__sinit>
 8003110:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003114:	0719      	lsls	r1, r3, #28
 8003116:	d422      	bmi.n	800315e <__swsetup_r+0x62>
 8003118:	06da      	lsls	r2, r3, #27
 800311a:	d407      	bmi.n	800312c <__swsetup_r+0x30>
 800311c:	2209      	movs	r2, #9
 800311e:	602a      	str	r2, [r5, #0]
 8003120:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003124:	f04f 30ff 	mov.w	r0, #4294967295
 8003128:	81a3      	strh	r3, [r4, #12]
 800312a:	e033      	b.n	8003194 <__swsetup_r+0x98>
 800312c:	0758      	lsls	r0, r3, #29
 800312e:	d512      	bpl.n	8003156 <__swsetup_r+0x5a>
 8003130:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003132:	b141      	cbz	r1, 8003146 <__swsetup_r+0x4a>
 8003134:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003138:	4299      	cmp	r1, r3
 800313a:	d002      	beq.n	8003142 <__swsetup_r+0x46>
 800313c:	4628      	mov	r0, r5
 800313e:	f7ff fb2f 	bl	80027a0 <_free_r>
 8003142:	2300      	movs	r3, #0
 8003144:	6363      	str	r3, [r4, #52]	@ 0x34
 8003146:	89a3      	ldrh	r3, [r4, #12]
 8003148:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800314c:	81a3      	strh	r3, [r4, #12]
 800314e:	2300      	movs	r3, #0
 8003150:	6063      	str	r3, [r4, #4]
 8003152:	6923      	ldr	r3, [r4, #16]
 8003154:	6023      	str	r3, [r4, #0]
 8003156:	89a3      	ldrh	r3, [r4, #12]
 8003158:	f043 0308 	orr.w	r3, r3, #8
 800315c:	81a3      	strh	r3, [r4, #12]
 800315e:	6923      	ldr	r3, [r4, #16]
 8003160:	b94b      	cbnz	r3, 8003176 <__swsetup_r+0x7a>
 8003162:	89a3      	ldrh	r3, [r4, #12]
 8003164:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003168:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800316c:	d003      	beq.n	8003176 <__swsetup_r+0x7a>
 800316e:	4621      	mov	r1, r4
 8003170:	4628      	mov	r0, r5
 8003172:	f000 f85c 	bl	800322e <__smakebuf_r>
 8003176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800317a:	f013 0201 	ands.w	r2, r3, #1
 800317e:	d00a      	beq.n	8003196 <__swsetup_r+0x9a>
 8003180:	2200      	movs	r2, #0
 8003182:	60a2      	str	r2, [r4, #8]
 8003184:	6962      	ldr	r2, [r4, #20]
 8003186:	4252      	negs	r2, r2
 8003188:	61a2      	str	r2, [r4, #24]
 800318a:	6922      	ldr	r2, [r4, #16]
 800318c:	b942      	cbnz	r2, 80031a0 <__swsetup_r+0xa4>
 800318e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003192:	d1c5      	bne.n	8003120 <__swsetup_r+0x24>
 8003194:	bd38      	pop	{r3, r4, r5, pc}
 8003196:	0799      	lsls	r1, r3, #30
 8003198:	bf58      	it	pl
 800319a:	6962      	ldrpl	r2, [r4, #20]
 800319c:	60a2      	str	r2, [r4, #8]
 800319e:	e7f4      	b.n	800318a <__swsetup_r+0x8e>
 80031a0:	2000      	movs	r0, #0
 80031a2:	e7f7      	b.n	8003194 <__swsetup_r+0x98>
 80031a4:	20000018 	.word	0x20000018

080031a8 <_sbrk_r>:
 80031a8:	b538      	push	{r3, r4, r5, lr}
 80031aa:	2300      	movs	r3, #0
 80031ac:	4d05      	ldr	r5, [pc, #20]	@ (80031c4 <_sbrk_r+0x1c>)
 80031ae:	4604      	mov	r4, r0
 80031b0:	4608      	mov	r0, r1
 80031b2:	602b      	str	r3, [r5, #0]
 80031b4:	f7fd ff32 	bl	800101c <_sbrk>
 80031b8:	1c43      	adds	r3, r0, #1
 80031ba:	d102      	bne.n	80031c2 <_sbrk_r+0x1a>
 80031bc:	682b      	ldr	r3, [r5, #0]
 80031be:	b103      	cbz	r3, 80031c2 <_sbrk_r+0x1a>
 80031c0:	6023      	str	r3, [r4, #0]
 80031c2:	bd38      	pop	{r3, r4, r5, pc}
 80031c4:	20000364 	.word	0x20000364

080031c8 <memchr>:
 80031c8:	4603      	mov	r3, r0
 80031ca:	b510      	push	{r4, lr}
 80031cc:	b2c9      	uxtb	r1, r1
 80031ce:	4402      	add	r2, r0
 80031d0:	4293      	cmp	r3, r2
 80031d2:	4618      	mov	r0, r3
 80031d4:	d101      	bne.n	80031da <memchr+0x12>
 80031d6:	2000      	movs	r0, #0
 80031d8:	e003      	b.n	80031e2 <memchr+0x1a>
 80031da:	7804      	ldrb	r4, [r0, #0]
 80031dc:	3301      	adds	r3, #1
 80031de:	428c      	cmp	r4, r1
 80031e0:	d1f6      	bne.n	80031d0 <memchr+0x8>
 80031e2:	bd10      	pop	{r4, pc}

080031e4 <__swhatbuf_r>:
 80031e4:	b570      	push	{r4, r5, r6, lr}
 80031e6:	460c      	mov	r4, r1
 80031e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031ec:	4615      	mov	r5, r2
 80031ee:	2900      	cmp	r1, #0
 80031f0:	461e      	mov	r6, r3
 80031f2:	b096      	sub	sp, #88	@ 0x58
 80031f4:	da0c      	bge.n	8003210 <__swhatbuf_r+0x2c>
 80031f6:	89a3      	ldrh	r3, [r4, #12]
 80031f8:	2100      	movs	r1, #0
 80031fa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80031fe:	bf14      	ite	ne
 8003200:	2340      	movne	r3, #64	@ 0x40
 8003202:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003206:	2000      	movs	r0, #0
 8003208:	6031      	str	r1, [r6, #0]
 800320a:	602b      	str	r3, [r5, #0]
 800320c:	b016      	add	sp, #88	@ 0x58
 800320e:	bd70      	pop	{r4, r5, r6, pc}
 8003210:	466a      	mov	r2, sp
 8003212:	f000 f849 	bl	80032a8 <_fstat_r>
 8003216:	2800      	cmp	r0, #0
 8003218:	dbed      	blt.n	80031f6 <__swhatbuf_r+0x12>
 800321a:	9901      	ldr	r1, [sp, #4]
 800321c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003220:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003224:	4259      	negs	r1, r3
 8003226:	4159      	adcs	r1, r3
 8003228:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800322c:	e7eb      	b.n	8003206 <__swhatbuf_r+0x22>

0800322e <__smakebuf_r>:
 800322e:	898b      	ldrh	r3, [r1, #12]
 8003230:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003232:	079d      	lsls	r5, r3, #30
 8003234:	4606      	mov	r6, r0
 8003236:	460c      	mov	r4, r1
 8003238:	d507      	bpl.n	800324a <__smakebuf_r+0x1c>
 800323a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800323e:	6023      	str	r3, [r4, #0]
 8003240:	6123      	str	r3, [r4, #16]
 8003242:	2301      	movs	r3, #1
 8003244:	6163      	str	r3, [r4, #20]
 8003246:	b003      	add	sp, #12
 8003248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800324a:	466a      	mov	r2, sp
 800324c:	ab01      	add	r3, sp, #4
 800324e:	f7ff ffc9 	bl	80031e4 <__swhatbuf_r>
 8003252:	9f00      	ldr	r7, [sp, #0]
 8003254:	4605      	mov	r5, r0
 8003256:	4639      	mov	r1, r7
 8003258:	4630      	mov	r0, r6
 800325a:	f7ff fb0b 	bl	8002874 <_malloc_r>
 800325e:	b948      	cbnz	r0, 8003274 <__smakebuf_r+0x46>
 8003260:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003264:	059a      	lsls	r2, r3, #22
 8003266:	d4ee      	bmi.n	8003246 <__smakebuf_r+0x18>
 8003268:	f023 0303 	bic.w	r3, r3, #3
 800326c:	f043 0302 	orr.w	r3, r3, #2
 8003270:	81a3      	strh	r3, [r4, #12]
 8003272:	e7e2      	b.n	800323a <__smakebuf_r+0xc>
 8003274:	89a3      	ldrh	r3, [r4, #12]
 8003276:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800327a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800327e:	81a3      	strh	r3, [r4, #12]
 8003280:	9b01      	ldr	r3, [sp, #4]
 8003282:	6020      	str	r0, [r4, #0]
 8003284:	b15b      	cbz	r3, 800329e <__smakebuf_r+0x70>
 8003286:	4630      	mov	r0, r6
 8003288:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800328c:	f000 f81e 	bl	80032cc <_isatty_r>
 8003290:	b128      	cbz	r0, 800329e <__smakebuf_r+0x70>
 8003292:	89a3      	ldrh	r3, [r4, #12]
 8003294:	f023 0303 	bic.w	r3, r3, #3
 8003298:	f043 0301 	orr.w	r3, r3, #1
 800329c:	81a3      	strh	r3, [r4, #12]
 800329e:	89a3      	ldrh	r3, [r4, #12]
 80032a0:	431d      	orrs	r5, r3
 80032a2:	81a5      	strh	r5, [r4, #12]
 80032a4:	e7cf      	b.n	8003246 <__smakebuf_r+0x18>
	...

080032a8 <_fstat_r>:
 80032a8:	b538      	push	{r3, r4, r5, lr}
 80032aa:	2300      	movs	r3, #0
 80032ac:	4d06      	ldr	r5, [pc, #24]	@ (80032c8 <_fstat_r+0x20>)
 80032ae:	4604      	mov	r4, r0
 80032b0:	4608      	mov	r0, r1
 80032b2:	4611      	mov	r1, r2
 80032b4:	602b      	str	r3, [r5, #0]
 80032b6:	f7fd fe8b 	bl	8000fd0 <_fstat>
 80032ba:	1c43      	adds	r3, r0, #1
 80032bc:	d102      	bne.n	80032c4 <_fstat_r+0x1c>
 80032be:	682b      	ldr	r3, [r5, #0]
 80032c0:	b103      	cbz	r3, 80032c4 <_fstat_r+0x1c>
 80032c2:	6023      	str	r3, [r4, #0]
 80032c4:	bd38      	pop	{r3, r4, r5, pc}
 80032c6:	bf00      	nop
 80032c8:	20000364 	.word	0x20000364

080032cc <_isatty_r>:
 80032cc:	b538      	push	{r3, r4, r5, lr}
 80032ce:	2300      	movs	r3, #0
 80032d0:	4d05      	ldr	r5, [pc, #20]	@ (80032e8 <_isatty_r+0x1c>)
 80032d2:	4604      	mov	r4, r0
 80032d4:	4608      	mov	r0, r1
 80032d6:	602b      	str	r3, [r5, #0]
 80032d8:	f7fd fe89 	bl	8000fee <_isatty>
 80032dc:	1c43      	adds	r3, r0, #1
 80032de:	d102      	bne.n	80032e6 <_isatty_r+0x1a>
 80032e0:	682b      	ldr	r3, [r5, #0]
 80032e2:	b103      	cbz	r3, 80032e6 <_isatty_r+0x1a>
 80032e4:	6023      	str	r3, [r4, #0]
 80032e6:	bd38      	pop	{r3, r4, r5, pc}
 80032e8:	20000364 	.word	0x20000364

080032ec <_init>:
 80032ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ee:	bf00      	nop
 80032f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032f2:	bc08      	pop	{r3}
 80032f4:	469e      	mov	lr, r3
 80032f6:	4770      	bx	lr

080032f8 <_fini>:
 80032f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032fa:	bf00      	nop
 80032fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032fe:	bc08      	pop	{r3}
 8003300:	469e      	mov	lr, r3
 8003302:	4770      	bx	lr
