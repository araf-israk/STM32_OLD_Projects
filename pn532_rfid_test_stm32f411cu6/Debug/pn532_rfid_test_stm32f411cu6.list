
pn532_rfid_test_stm32f411cu6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a84  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08003c24  08003c24  00004c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dfc  08003dfc  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08003dfc  08003dfc  00004dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e04  08003e04  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e04  08003e04  00004e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e08  08003e08  00004e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003e0c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  20000068  08003e74  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000390  08003e74  00005390  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008881  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e08  00000000  00000000  0000d919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000868  00000000  00000000  0000f728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000638  00000000  00000000  0000ff90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170c1  00000000  00000000  000105c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ab5c  00000000  00000000  00027689  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008830f  00000000  00000000  000321e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ba4f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027e4  00000000  00000000  000ba538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000bcd1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003c0c 	.word	0x08003c0c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08003c0c 	.word	0x08003c0c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f001 f865 	bl	8001644 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f863 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 f8ff 	bl	8000780 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000582:	f000 f8c7 	bl	8000714 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 8000586:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800058a:	f001 f8cd 	bl	8001728 <HAL_Delay>
  memset(buffer, 0, sizeof(buffer));
 800058e:	2232      	movs	r2, #50	@ 0x32
 8000590:	2100      	movs	r1, #0
 8000592:	4825      	ldr	r0, [pc, #148]	@ (8000628 <main+0xb8>)
 8000594:	f002 fd21 	bl	8002fda <memset>




  PN532_SPI_Init(&pn532);
 8000598:	4824      	ldr	r0, [pc, #144]	@ (800062c <main+0xbc>)
 800059a:	f000 fe97 	bl	80012cc <PN532_SPI_Init>

  if (PN532_GetFirmwareVersion(&pn532, buff) != PN532_STATUS_OK)
 800059e:	4924      	ldr	r1, [pc, #144]	@ (8000630 <main+0xc0>)
 80005a0:	4822      	ldr	r0, [pc, #136]	@ (800062c <main+0xbc>)
 80005a2:	f000 fc63 	bl	8000e6c <PN532_GetFirmwareVersion>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d013      	beq.n	80005d4 <main+0x64>
  {
    while(1)
    {
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005b2:	4820      	ldr	r0, [pc, #128]	@ (8000634 <main+0xc4>)
 80005b4:	f001 fb94 	bl	8001ce0 <HAL_GPIO_WritePin>
    	HAL_Delay(250);
 80005b8:	20fa      	movs	r0, #250	@ 0xfa
 80005ba:	f001 f8b5 	bl	8001728 <HAL_Delay>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005c4:	481b      	ldr	r0, [pc, #108]	@ (8000634 <main+0xc4>)
 80005c6:	f001 fb8b 	bl	8001ce0 <HAL_GPIO_WritePin>
    	HAL_Delay(250);
 80005ca:	20fa      	movs	r0, #250	@ 0xfa
 80005cc:	f001 f8ac 	bl	8001728 <HAL_Delay>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 80005d0:	bf00      	nop
 80005d2:	e7eb      	b.n	80005ac <main+0x3c>
    }
  }
  PN532_SamConfiguration(&pn532);
 80005d4:	4815      	ldr	r0, [pc, #84]	@ (800062c <main+0xbc>)
 80005d6:	f000 fc6d 	bl	8000eb4 <PN532_SamConfiguration>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //memset(uid, 0, sizeof(uid));
	  uid_len = PN532_ReadPassiveTarget(&pn532, uid, PN532_MIFARE_ISO14443A, 1000);
 80005da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005de:	2200      	movs	r2, #0
 80005e0:	4915      	ldr	r1, [pc, #84]	@ (8000638 <main+0xc8>)
 80005e2:	4812      	ldr	r0, [pc, #72]	@ (800062c <main+0xbc>)
 80005e4:	f000 fc88 	bl	8000ef8 <PN532_ReadPassiveTarget>
 80005e8:	4603      	mov	r3, r0
 80005ea:	4a14      	ldr	r2, [pc, #80]	@ (800063c <main+0xcc>)
 80005ec:	6013      	str	r3, [r2, #0]
	      if (uid_len != PN532_STATUS_ERROR) {
 80005ee:	4b13      	ldr	r3, [pc, #76]	@ (800063c <main+0xcc>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005f6:	d0f0      	beq.n	80005da <main+0x6a>
//	  	      buff[i] = (i << 4) + i;
//	  	    }
//	  	    pn532_error = PN532_MifareClassicWriteBlock(&pn532, buff, 6);

	  	  // Read the data from block 6
	  	    for (uint8_t i = 0; i < 16; i++) {
 80005f8:	2300      	movs	r3, #0
 80005fa:	71fb      	strb	r3, [r7, #7]
 80005fc:	e006      	b.n	800060c <main+0x9c>
	  		  buff[i] = 0x00;
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	4a0b      	ldr	r2, [pc, #44]	@ (8000630 <main+0xc0>)
 8000602:	2100      	movs	r1, #0
 8000604:	54d1      	strb	r1, [r2, r3]
	  	    for (uint8_t i = 0; i < 16; i++) {
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	3301      	adds	r3, #1
 800060a:	71fb      	strb	r3, [r7, #7]
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	2b0f      	cmp	r3, #15
 8000610:	d9f5      	bls.n	80005fe <main+0x8e>
	  	  	 }
	  	  	 pn532_error = PN532_MifareClassicReadBlock(&pn532, buff, 6);
 8000612:	2206      	movs	r2, #6
 8000614:	4906      	ldr	r1, [pc, #24]	@ (8000630 <main+0xc0>)
 8000616:	4805      	ldr	r0, [pc, #20]	@ (800062c <main+0xbc>)
 8000618:	f000 fcc8 	bl	8000fac <PN532_MifareClassicReadBlock>
 800061c:	4603      	mov	r3, r0
 800061e:	461a      	mov	r2, r3
 8000620:	4b07      	ldr	r3, [pc, #28]	@ (8000640 <main+0xd0>)
 8000622:	601a      	str	r2, [r3, #0]
	  uid_len = PN532_ReadPassiveTarget(&pn532, uid, PN532_MIFARE_ISO14443A, 1000);
 8000624:	e7d9      	b.n	80005da <main+0x6a>
 8000626:	bf00      	nop
 8000628:	20000208 	.word	0x20000208
 800062c:	20000198 	.word	0x20000198
 8000630:	20000084 	.word	0x20000084
 8000634:	40020800 	.word	0x40020800
 8000638:	20000184 	.word	0x20000184
 800063c:	20000194 	.word	0x20000194
 8000640:	20000190 	.word	0x20000190

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	@ 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	2230      	movs	r2, #48	@ 0x30
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f002 fcc1 	bl	8002fda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	4b27      	ldr	r3, [pc, #156]	@ (800070c <SystemClock_Config+0xc8>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000670:	4a26      	ldr	r2, [pc, #152]	@ (800070c <SystemClock_Config+0xc8>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	@ 0x40
 8000678:	4b24      	ldr	r3, [pc, #144]	@ (800070c <SystemClock_Config+0xc8>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	4b21      	ldr	r3, [pc, #132]	@ (8000710 <SystemClock_Config+0xcc>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a20      	ldr	r2, [pc, #128]	@ (8000710 <SystemClock_Config+0xcc>)
 800068e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b1e      	ldr	r3, [pc, #120]	@ (8000710 <SystemClock_Config+0xcc>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a0:	2301      	movs	r3, #1
 80006a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006b4:	2319      	movs	r3, #25
 80006b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 128;
 80006b8:	2380      	movs	r3, #128	@ 0x80
 80006ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006c0:	2304      	movs	r3, #4
 80006c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 0320 	add.w	r3, r7, #32
 80006c8:	4618      	mov	r0, r3
 80006ca:	f001 fb23 	bl	8001d14 <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d4:	f000 f8cc 	bl	8000870 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006dc:	2302      	movs	r3, #2
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80006e0:	2390      	movs	r3, #144	@ 0x90
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f001 fd86 	bl	8002204 <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80006fe:	f000 f8b7 	bl	8000870 <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3750      	adds	r7, #80	@ 0x50
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000718:	4b17      	ldr	r3, [pc, #92]	@ (8000778 <MX_SPI1_Init+0x64>)
 800071a:	4a18      	ldr	r2, [pc, #96]	@ (800077c <MX_SPI1_Init+0x68>)
 800071c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800071e:	4b16      	ldr	r3, [pc, #88]	@ (8000778 <MX_SPI1_Init+0x64>)
 8000720:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000724:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000726:	4b14      	ldr	r3, [pc, #80]	@ (8000778 <MX_SPI1_Init+0x64>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800072c:	4b12      	ldr	r3, [pc, #72]	@ (8000778 <MX_SPI1_Init+0x64>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000732:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <MX_SPI1_Init+0x64>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000738:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <MX_SPI1_Init+0x64>)
 800073a:	2200      	movs	r2, #0
 800073c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800073e:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <MX_SPI1_Init+0x64>)
 8000740:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000744:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000746:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <MX_SPI1_Init+0x64>)
 8000748:	2218      	movs	r2, #24
 800074a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 800074c:	4b0a      	ldr	r3, [pc, #40]	@ (8000778 <MX_SPI1_Init+0x64>)
 800074e:	2280      	movs	r2, #128	@ 0x80
 8000750:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000752:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <MX_SPI1_Init+0x64>)
 8000754:	2200      	movs	r2, #0
 8000756:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000758:	4b07      	ldr	r3, [pc, #28]	@ (8000778 <MX_SPI1_Init+0x64>)
 800075a:	2200      	movs	r2, #0
 800075c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800075e:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <MX_SPI1_Init+0x64>)
 8000760:	220a      	movs	r2, #10
 8000762:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000764:	4804      	ldr	r0, [pc, #16]	@ (8000778 <MX_SPI1_Init+0x64>)
 8000766:	f001 fef9 	bl	800255c <HAL_SPI_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000770:	f000 f87e 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	200001b0 	.word	0x200001b0
 800077c:	40013000 	.word	0x40013000

08000780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08a      	sub	sp, #40	@ 0x28
 8000784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
 800079a:	4b32      	ldr	r3, [pc, #200]	@ (8000864 <MX_GPIO_Init+0xe4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4a31      	ldr	r2, [pc, #196]	@ (8000864 <MX_GPIO_Init+0xe4>)
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a6:	4b2f      	ldr	r3, [pc, #188]	@ (8000864 <MX_GPIO_Init+0xe4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	f003 0304 	and.w	r3, r3, #4
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	4b2b      	ldr	r3, [pc, #172]	@ (8000864 <MX_GPIO_Init+0xe4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	4a2a      	ldr	r2, [pc, #168]	@ (8000864 <MX_GPIO_Init+0xe4>)
 80007bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c2:	4b28      	ldr	r3, [pc, #160]	@ (8000864 <MX_GPIO_Init+0xe4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	4b24      	ldr	r3, [pc, #144]	@ (8000864 <MX_GPIO_Init+0xe4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a23      	ldr	r2, [pc, #140]	@ (8000864 <MX_GPIO_Init+0xe4>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007de:	4b21      	ldr	r3, [pc, #132]	@ (8000864 <MX_GPIO_Init+0xe4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000864 <MX_GPIO_Init+0xe4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000864 <MX_GPIO_Init+0xe4>)
 80007f4:	f043 0302 	orr.w	r3, r3, #2
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000864 <MX_GPIO_Init+0xe4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800080c:	4816      	ldr	r0, [pc, #88]	@ (8000868 <MX_GPIO_Init+0xe8>)
 800080e:	f001 fa67 	bl	8001ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RFID_SS_Pin|RFID_IRQ_Pin|RFID_Reset_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	f240 4103 	movw	r1, #1027	@ 0x403
 8000818:	4814      	ldr	r0, [pc, #80]	@ (800086c <MX_GPIO_Init+0xec>)
 800081a:	f001 fa61 	bl	8001ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800081e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4619      	mov	r1, r3
 8000836:	480c      	ldr	r0, [pc, #48]	@ (8000868 <MX_GPIO_Init+0xe8>)
 8000838:	f001 f8ce 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RFID_SS_Pin RFID_IRQ_Pin RFID_Reset_Pin */
  GPIO_InitStruct.Pin = RFID_SS_Pin|RFID_IRQ_Pin|RFID_Reset_Pin;
 800083c:	f240 4303 	movw	r3, #1027	@ 0x403
 8000840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	4805      	ldr	r0, [pc, #20]	@ (800086c <MX_GPIO_Init+0xec>)
 8000856:	f001 f8bf 	bl	80019d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800085a:	bf00      	nop
 800085c:	3728      	adds	r7, #40	@ 0x28
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40023800 	.word	0x40023800
 8000868:	40020800 	.word	0x40020800
 800086c:	40020400 	.word	0x40020400

08000870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000874:	b672      	cpsid	i
}
 8000876:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <Error_Handler+0x8>

0800087c <PN532_WriteFrame>:
/**
  * @brief: Write a frame to the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns -1 if there is an error parsing the frame.  
  */
int PN532_WriteFrame(PN532* pn532, uint8_t* data, uint16_t length) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b0c8      	sub	sp, #288	@ 0x120
 8000880:	af00      	add	r7, sp, #0
 8000882:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000886:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800088a:	6018      	str	r0, [r3, #0]
 800088c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000890:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000894:	6019      	str	r1, [r3, #0]
 8000896:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800089a:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 800089e:	801a      	strh	r2, [r3, #0]
    if (length > PN532_FRAME_MAX_LENGTH || length < 1) {
 80008a0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80008a4:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80008a8:	881b      	ldrh	r3, [r3, #0]
 80008aa:	2bff      	cmp	r3, #255	@ 0xff
 80008ac:	d806      	bhi.n	80008bc <PN532_WriteFrame+0x40>
 80008ae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80008b2:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80008b6:	881b      	ldrh	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d102      	bne.n	80008c2 <PN532_WriteFrame+0x46>
        return PN532_STATUS_ERROR; // Data must be array of 1 to 255 bytes.
 80008bc:	f04f 33ff 	mov.w	r3, #4294967295
 80008c0:	e0aa      	b.n	8000a18 <PN532_WriteFrame+0x19c>
    // - Command bytes
    // - Checksum
    // - Postamble (0x00)

    uint8_t frame[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    frame[0] = PN532_PREAMBLE;
 80008c8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80008cc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80008d0:	2200      	movs	r2, #0
 80008d2:	701a      	strb	r2, [r3, #0]
    frame[1] = PN532_STARTCODE1;
 80008d4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80008d8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80008dc:	2200      	movs	r2, #0
 80008de:	705a      	strb	r2, [r3, #1]
    frame[2] = PN532_STARTCODE2;
 80008e0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80008e4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80008e8:	22ff      	movs	r2, #255	@ 0xff
 80008ea:	709a      	strb	r2, [r3, #2]
    for (uint8_t i = 0; i < 3; i++) {
 80008ec:	2300      	movs	r3, #0
 80008ee:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80008f2:	e010      	b.n	8000916 <PN532_WriteFrame+0x9a>
        checksum += frame[i];
 80008f4:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80008f8:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80008fc:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000900:	5cd2      	ldrb	r2, [r2, r3]
 8000902:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8000906:	4413      	add	r3, r2
 8000908:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < 3; i++) {
 800090c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000910:	3301      	adds	r3, #1
 8000912:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8000916:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800091a:	2b02      	cmp	r3, #2
 800091c:	d9ea      	bls.n	80008f4 <PN532_WriteFrame+0x78>
    }
    frame[3] = length & 0xFF;
 800091e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000922:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000926:	881b      	ldrh	r3, [r3, #0]
 8000928:	b2da      	uxtb	r2, r3
 800092a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800092e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000932:	70da      	strb	r2, [r3, #3]
    frame[4] = (~length + 1) & 0xFF;
 8000934:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000938:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 800093c:	881b      	ldrh	r3, [r3, #0]
 800093e:	b2db      	uxtb	r3, r3
 8000940:	425b      	negs	r3, r3
 8000942:	b2da      	uxtb	r2, r3
 8000944:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000948:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800094c:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 0; i < length; i++) {
 800094e:	2300      	movs	r3, #0
 8000950:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 8000954:	e023      	b.n	800099e <PN532_WriteFrame+0x122>
        frame[5 + i] = data[i];
 8000956:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 800095a:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800095e:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8000962:	6812      	ldr	r2, [r2, #0]
 8000964:	441a      	add	r2, r3
 8000966:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 800096a:	3305      	adds	r3, #5
 800096c:	7811      	ldrb	r1, [r2, #0]
 800096e:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000972:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000976:	54d1      	strb	r1, [r2, r3]
        checksum += data[i];
 8000978:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 800097c:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000980:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8000984:	6812      	ldr	r2, [r2, #0]
 8000986:	4413      	add	r3, r2
 8000988:	781a      	ldrb	r2, [r3, #0]
 800098a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800098e:	4413      	add	r3, r2
 8000990:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < length; i++) {
 8000994:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000998:	3301      	adds	r3, #1
 800099a:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 800099e:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 80009a2:	b29b      	uxth	r3, r3
 80009a4:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80009a8:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 80009ac:	8812      	ldrh	r2, [r2, #0]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	d8d1      	bhi.n	8000956 <PN532_WriteFrame+0xda>
    }
    frame[length + 5] = ~checksum & 0xFF;
 80009b2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80009b6:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80009ba:	881b      	ldrh	r3, [r3, #0]
 80009bc:	3305      	adds	r3, #5
 80009be:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 80009c2:	43d2      	mvns	r2, r2
 80009c4:	b2d1      	uxtb	r1, r2
 80009c6:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80009ca:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80009ce:	54d1      	strb	r1, [r2, r3]
    frame[length + 6] = PN532_POSTAMBLE;
 80009d0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80009d4:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80009d8:	881b      	ldrh	r3, [r3, #0]
 80009da:	3306      	adds	r3, #6
 80009dc:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80009e0:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80009e4:	2100      	movs	r1, #0
 80009e6:	54d1      	strb	r1, [r2, r3]
    if (pn532->write_data(frame, length + 7) != PN532_STATUS_OK) {
 80009e8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80009ec:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	689b      	ldr	r3, [r3, #8]
 80009f4:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80009f8:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 80009fc:	8812      	ldrh	r2, [r2, #0]
 80009fe:	3207      	adds	r2, #7
 8000a00:	b291      	uxth	r1, r2
 8000a02:	f107 0214 	add.w	r2, r7, #20
 8000a06:	4610      	mov	r0, r2
 8000a08:	4798      	blx	r3
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d002      	beq.n	8000a16 <PN532_WriteFrame+0x19a>
        return PN532_STATUS_ERROR;
 8000a10:	f04f 33ff 	mov.w	r3, #4294967295
 8000a14:	e000      	b.n	8000a18 <PN532_WriteFrame+0x19c>
    }
    return PN532_STATUS_OK;
 8000a16:	2300      	movs	r3, #0
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <PN532_ReadFrame>:
/**
  * @brief: Read a response frame from the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns frame length or -1 if there is an error parsing the frame.  
  */
int PN532_ReadFrame(PN532* pn532, uint8_t* response, uint16_t length) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b0c8      	sub	sp, #288	@ 0x120
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000a2e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000a32:	6018      	str	r0, [r3, #0]
 8000a34:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000a38:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000a3c:	6019      	str	r1, [r3, #0]
 8000a3e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000a42:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000a46:	801a      	strh	r2, [r3, #0]
    uint8_t buff[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    // Read frame with expected length of data.
    pn532->read_data(buff, length + 7);
 8000a4e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000a52:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000a5e:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 8000a62:	8812      	ldrh	r2, [r2, #0]
 8000a64:	3207      	adds	r2, #7
 8000a66:	b291      	uxth	r1, r2
 8000a68:	f107 0214 	add.w	r2, r7, #20
 8000a6c:	4610      	mov	r0, r2
 8000a6e:	4798      	blx	r3
    // Swallow all the 0x00 values that preceed 0xFF.
    uint8_t offset = 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    while (buff[offset] == 0x00) {
 8000a76:	e019      	b.n	8000aac <PN532_ReadFrame+0x88>
        offset += 1;
 8000a78:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
        if (offset >= length + 8){
 8000a82:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000a86:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000a8a:	881b      	ldrh	r3, [r3, #0]
 8000a8c:	1dda      	adds	r2, r3, #7
 8000a8e:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000a92:	429a      	cmp	r2, r3
 8000a94:	da0a      	bge.n	8000aac <PN532_ReadFrame+0x88>
            pn532->log("Response frame preamble does not contain 0x00FF!");
 8000a96:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000a9a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	695b      	ldr	r3, [r3, #20]
 8000aa2:	485b      	ldr	r0, [pc, #364]	@ (8000c10 <PN532_ReadFrame+0x1ec>)
 8000aa4:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 8000aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aaa:	e0ab      	b.n	8000c04 <PN532_ReadFrame+0x1e0>
    while (buff[offset] == 0x00) {
 8000aac:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000ab0:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000ab4:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000ab8:	5cd3      	ldrb	r3, [r2, r3]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d0dc      	beq.n	8000a78 <PN532_ReadFrame+0x54>
        }
    }
    if (buff[offset] != 0xFF) {
 8000abe:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000ac2:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000ac6:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000aca:	5cd3      	ldrb	r3, [r2, r3]
 8000acc:	2bff      	cmp	r3, #255	@ 0xff
 8000ace:	d00a      	beq.n	8000ae6 <PN532_ReadFrame+0xc2>
        pn532->log("Response frame preamble does not contain 0x00FF!");
 8000ad0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000ad4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	695b      	ldr	r3, [r3, #20]
 8000adc:	484c      	ldr	r0, [pc, #304]	@ (8000c10 <PN532_ReadFrame+0x1ec>)
 8000ade:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae4:	e08e      	b.n	8000c04 <PN532_ReadFrame+0x1e0>
    }
    offset += 1;
 8000ae6:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000aea:	3301      	adds	r3, #1
 8000aec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    if (offset >= length + 8) {
 8000af0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000af4:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000af8:	881b      	ldrh	r3, [r3, #0]
 8000afa:	1dda      	adds	r2, r3, #7
 8000afc:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000b00:	429a      	cmp	r2, r3
 8000b02:	da0a      	bge.n	8000b1a <PN532_ReadFrame+0xf6>
        pn532->log("Response contains no data!");
 8000b04:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000b08:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	695b      	ldr	r3, [r3, #20]
 8000b10:	4840      	ldr	r0, [pc, #256]	@ (8000c14 <PN532_ReadFrame+0x1f0>)
 8000b12:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000b14:	f04f 33ff 	mov.w	r3, #4294967295
 8000b18:	e074      	b.n	8000c04 <PN532_ReadFrame+0x1e0>
    }
    // Check length & length checksum match.
    uint8_t frame_len = buff[offset];
 8000b1a:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000b1e:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000b22:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000b26:	5cd3      	ldrb	r3, [r2, r3]
 8000b28:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    if (((frame_len + buff[offset+1]) & 0xFF) != 0) {
 8000b2c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000b30:	3301      	adds	r3, #1
 8000b32:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000b36:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000b3a:	5cd2      	ldrb	r2, [r2, r3]
 8000b3c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8000b40:	4413      	add	r3, r2
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d00a      	beq.n	8000b5e <PN532_ReadFrame+0x13a>
        pn532->log("Response length checksum did not match length!");
 8000b48:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000b4c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	695b      	ldr	r3, [r3, #20]
 8000b54:	4830      	ldr	r0, [pc, #192]	@ (8000c18 <PN532_ReadFrame+0x1f4>)
 8000b56:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000b58:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5c:	e052      	b.n	8000c04 <PN532_ReadFrame+0x1e0>
    }
    // Check frame checksum value matches bytes.
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 8000b5e:	2300      	movs	r3, #0
 8000b60:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 8000b64:	e014      	b.n	8000b90 <PN532_ReadFrame+0x16c>
        checksum += buff[offset + 2 + i];
 8000b66:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000b6a:	1c9a      	adds	r2, r3, #2
 8000b6c:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000b70:	4413      	add	r3, r2
 8000b72:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000b76:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000b7a:	5cd2      	ldrb	r2, [r2, r3]
 8000b7c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8000b80:	4413      	add	r3, r2
 8000b82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 8000b86:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 8000b90:	f897 211b 	ldrb.w	r2, [r7, #283]	@ 0x11b
 8000b94:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d2e4      	bcs.n	8000b66 <PN532_ReadFrame+0x142>
    }
    checksum &= 0xFF;
    if (checksum != 0) {
 8000b9c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d00a      	beq.n	8000bba <PN532_ReadFrame+0x196>
        pn532->log("Response checksum did not match expected checksum");
 8000ba4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000ba8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	695b      	ldr	r3, [r3, #20]
 8000bb0:	481a      	ldr	r0, [pc, #104]	@ (8000c1c <PN532_ReadFrame+0x1f8>)
 8000bb2:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb8:	e024      	b.n	8000c04 <PN532_ReadFrame+0x1e0>
    }
    // Return frame data.
    for (uint8_t i = 0; i < frame_len; i++) {
 8000bba:	2300      	movs	r3, #0
 8000bbc:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
 8000bc0:	e018      	b.n	8000bf4 <PN532_ReadFrame+0x1d0>
        response[i] = buff[offset + 2 + i];
 8000bc2:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000bc6:	1c9a      	adds	r2, r3, #2
 8000bc8:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 8000bcc:	441a      	add	r2, r3
 8000bce:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 8000bd2:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8000bd6:	f5a1 718c 	sub.w	r1, r1, #280	@ 0x118
 8000bda:	6809      	ldr	r1, [r1, #0]
 8000bdc:	440b      	add	r3, r1
 8000bde:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8000be2:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8000be6:	5c8a      	ldrb	r2, [r1, r2]
 8000be8:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < frame_len; i++) {
 8000bea:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 8000bee:	3301      	adds	r3, #1
 8000bf0:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
 8000bf4:	f897 211c 	ldrb.w	r2, [r7, #284]	@ 0x11c
 8000bf8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d3e0      	bcc.n	8000bc2 <PN532_ReadFrame+0x19e>
    }
    return frame_len;
 8000c00:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	08003c24 	.word	0x08003c24
 8000c14:	08003c58 	.word	0x08003c58
 8000c18:	08003c74 	.word	0x08003c74
 8000c1c:	08003ca4 	.word	0x08003ca4

08000c20 <PN532_CallFunction>:
    uint8_t* response,
    uint16_t response_length,
    uint8_t* params,
    uint16_t params_length,
    uint32_t timeout
) {
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b0c7      	sub	sp, #284	@ 0x11c
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	f507 748c 	add.w	r4, r7, #280	@ 0x118
 8000c2a:	f5a4 7486 	sub.w	r4, r4, #268	@ 0x10c
 8000c2e:	6020      	str	r0, [r4, #0]
 8000c30:	4608      	mov	r0, r1
 8000c32:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8000c36:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 8000c3a:	600a      	str	r2, [r1, #0]
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000c42:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8000c46:	4602      	mov	r2, r0
 8000c48:	701a      	strb	r2, [r3, #0]
 8000c4a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000c4e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000c52:	460a      	mov	r2, r1
 8000c54:	801a      	strh	r2, [r3, #0]
    // Build frame data with command and parameters.
    uint8_t buff[PN532_FRAME_MAX_LENGTH];
    buff[0] = PN532_HOSTTOPN532;
 8000c56:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000c5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000c5e:	22d4      	movs	r2, #212	@ 0xd4
 8000c60:	701a      	strb	r2, [r3, #0]
    buff[1] = command & 0xFF;
 8000c62:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000c66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000c6a:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000c6e:	f2a2 120d 	subw	r2, r2, #269	@ 0x10d
 8000c72:	7812      	ldrb	r2, [r2, #0]
 8000c74:	705a      	strb	r2, [r3, #1]
    for (uint8_t i = 0; i < params_length; i++) {
 8000c76:	2300      	movs	r3, #0
 8000c78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8000c7c:	e012      	b.n	8000ca4 <PN532_CallFunction+0x84>
        buff[2 + i] = params[i];
 8000c7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000c82:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8000c86:	441a      	add	r2, r3
 8000c88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000c8c:	3302      	adds	r3, #2
 8000c8e:	7811      	ldrb	r1, [r2, #0]
 8000c90:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000c94:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8000c98:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < params_length; i++) {
 8000c9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8000ca4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	f8b7 212c 	ldrh.w	r2, [r7, #300]	@ 0x12c
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	d8e5      	bhi.n	8000c7e <PN532_CallFunction+0x5e>
    }
    // Send frame and wait for response.
    if (PN532_WriteFrame(pn532, buff, params_length + 2) != PN532_STATUS_OK) {
 8000cb2:	f8b7 312c 	ldrh.w	r3, [r7, #300]	@ 0x12c
 8000cb6:	3302      	adds	r3, #2
 8000cb8:	b29a      	uxth	r2, r3
 8000cba:	f107 0110 	add.w	r1, r7, #16
 8000cbe:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000cc2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000cc6:	6818      	ldr	r0, [r3, #0]
 8000cc8:	f7ff fdd8 	bl	800087c <PN532_WriteFrame>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d011      	beq.n	8000cf6 <PN532_CallFunction+0xd6>
        pn532->wakeup();
 8000cd2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000cd6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	691b      	ldr	r3, [r3, #16]
 8000cde:	4798      	blx	r3
        pn532->log("Trying to wakeup");
 8000ce0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000ce4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	695b      	ldr	r3, [r3, #20]
 8000cec:	485b      	ldr	r0, [pc, #364]	@ (8000e5c <PN532_CallFunction+0x23c>)
 8000cee:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf4:	e0ac      	b.n	8000e50 <PN532_CallFunction+0x230>
    }
    if (!pn532->wait_ready(timeout)) {
 8000cf6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000cfa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	68db      	ldr	r3, [r3, #12]
 8000d02:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8000d06:	4798      	blx	r3
 8000d08:	4603      	mov	r3, r0
 8000d0a:	f083 0301 	eor.w	r3, r3, #1
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d002      	beq.n	8000d1a <PN532_CallFunction+0xfa>
        return PN532_STATUS_ERROR;
 8000d14:	f04f 33ff 	mov.w	r3, #4294967295
 8000d18:	e09a      	b.n	8000e50 <PN532_CallFunction+0x230>
    }
    // Verify ACK response and wait to be ready for function response.
    pn532->read_data(buff, sizeof(PN532_ACK));
 8000d1a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d1e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f107 0210 	add.w	r2, r7, #16
 8000d2a:	2106      	movs	r1, #6
 8000d2c:	4610      	mov	r0, r2
 8000d2e:	4798      	blx	r3
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 8000d30:	2300      	movs	r3, #0
 8000d32:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8000d36:	e01c      	b.n	8000d72 <PN532_CallFunction+0x152>
        if (PN532_ACK[i] != buff[i]) {
 8000d38:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8000d3c:	4a48      	ldr	r2, [pc, #288]	@ (8000e60 <PN532_CallFunction+0x240>)
 8000d3e:	5cd2      	ldrb	r2, [r2, r3]
 8000d40:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8000d44:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8000d48:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 8000d4c:	5ccb      	ldrb	r3, [r1, r3]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d00a      	beq.n	8000d68 <PN532_CallFunction+0x148>
            pn532->log("Did not receive expected ACK from PN532!");
 8000d52:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d56:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	695b      	ldr	r3, [r3, #20]
 8000d5e:	4841      	ldr	r0, [pc, #260]	@ (8000e64 <PN532_CallFunction+0x244>)
 8000d60:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
 8000d66:	e073      	b.n	8000e50 <PN532_CallFunction+0x230>
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 8000d68:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8000d72:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8000d76:	2b05      	cmp	r3, #5
 8000d78:	d9de      	bls.n	8000d38 <PN532_CallFunction+0x118>
        }
    }
    if (!pn532->wait_ready(timeout)) {
 8000d7a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d7e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8000d8a:	4798      	blx	r3
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	f083 0301 	eor.w	r3, r3, #1
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d002      	beq.n	8000d9e <PN532_CallFunction+0x17e>
        return PN532_STATUS_ERROR;
 8000d98:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9c:	e058      	b.n	8000e50 <PN532_CallFunction+0x230>
    }
    // Read response bytes.
    int frame_len = PN532_ReadFrame(pn532, buff, response_length + 2);
 8000d9e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000da2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000da6:	881b      	ldrh	r3, [r3, #0]
 8000da8:	3302      	adds	r3, #2
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	f107 0110 	add.w	r1, r7, #16
 8000db0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000db4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000db8:	6818      	ldr	r0, [r3, #0]
 8000dba:	f7ff fe33 	bl	8000a24 <PN532_ReadFrame>
 8000dbe:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    // Check that response is for the called function.
    if (! ((buff[0] == PN532_PN532TOHOST) && (buff[1] == (command+1)))) {
 8000dc2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000dc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2bd5      	cmp	r3, #213	@ 0xd5
 8000dce:	d10d      	bne.n	8000dec <PN532_CallFunction+0x1cc>
 8000dd0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000dd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000dd8:	785b      	ldrb	r3, [r3, #1]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000de0:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	3301      	adds	r3, #1
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d00a      	beq.n	8000e02 <PN532_CallFunction+0x1e2>
        pn532->log("Received unexpected command response!");
 8000dec:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000df0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	695b      	ldr	r3, [r3, #20]
 8000df8:	481b      	ldr	r0, [pc, #108]	@ (8000e68 <PN532_CallFunction+0x248>)
 8000dfa:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000e00:	e026      	b.n	8000e50 <PN532_CallFunction+0x230>
    }
    // Return response data.
    for (uint8_t i = 0; i < response_length; i++) {
 8000e02:	2300      	movs	r3, #0
 8000e04:	f887 3115 	strb.w	r3, [r7, #277]	@ 0x115
 8000e08:	e015      	b.n	8000e36 <PN532_CallFunction+0x216>
        response[i] = buff[i + 2];
 8000e0a:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8000e0e:	1c9a      	adds	r2, r3, #2
 8000e10:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8000e14:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8000e18:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 8000e1c:	6809      	ldr	r1, [r1, #0]
 8000e1e:	440b      	add	r3, r1
 8000e20:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8000e24:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 8000e28:	5c8a      	ldrb	r2, [r1, r2]
 8000e2a:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < response_length; i++) {
 8000e2c:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8000e30:	3301      	adds	r3, #1
 8000e32:	f887 3115 	strb.w	r3, [r7, #277]	@ 0x115
 8000e36:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000e40:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000e44:	8812      	ldrh	r2, [r2, #0]
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d8df      	bhi.n	8000e0a <PN532_CallFunction+0x1ea>
    }
    // The the number of bytes read
    return frame_len - 2;
 8000e4a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000e4e:	3b02      	subs	r3, #2
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd90      	pop	{r4, r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	08003cd8 	.word	0x08003cd8
 8000e60:	08003db0 	.word	0x08003db0
 8000e64:	08003cec 	.word	0x08003cec
 8000e68:	08003d18 	.word	0x08003d18

08000e6c <PN532_GetFirmwareVersion>:

/**
  * @brief: Call PN532 GetFirmwareVersion function and return a buff with the IC,
  *  Ver, Rev, and Support values.
  */
int PN532_GetFirmwareVersion(PN532* pn532, uint8_t* version) {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af04      	add	r7, sp, #16
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
    // length of version: 4
    if (PN532_CallFunction(pn532, PN532_COMMAND_GETFIRMWAREVERSION,
 8000e76:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000e7a:	9302      	str	r3, [sp, #8]
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	9301      	str	r3, [sp, #4]
 8000e80:	2300      	movs	r3, #0
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	2304      	movs	r3, #4
 8000e86:	683a      	ldr	r2, [r7, #0]
 8000e88:	2102      	movs	r1, #2
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f7ff fec8 	bl	8000c20 <PN532_CallFunction>
 8000e90:	4603      	mov	r3, r0
 8000e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e96:	d106      	bne.n	8000ea6 <PN532_GetFirmwareVersion+0x3a>
                           version, 4, NULL, 0, 500) == PN532_STATUS_ERROR) {
        pn532->log("Failed to detect the PN532");
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	695b      	ldr	r3, [r3, #20]
 8000e9c:	4804      	ldr	r0, [pc, #16]	@ (8000eb0 <PN532_GetFirmwareVersion+0x44>)
 8000e9e:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea4:	e000      	b.n	8000ea8 <PN532_GetFirmwareVersion+0x3c>
    }
    return PN532_STATUS_OK;
 8000ea6:	2300      	movs	r3, #0
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	08003d40 	.word	0x08003d40

08000eb4 <PN532_SamConfiguration>:

/**
  * @brief: Configure the PN532 to read MiFare cards.
  */
int PN532_SamConfiguration(PN532* pn532) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b088      	sub	sp, #32
 8000eb8:	af04      	add	r7, sp, #16
 8000eba:	6078      	str	r0, [r7, #4]
    // - 0x01, normal mode
    // - 0x14, timeout 50ms * 20 = 1 second
    // - 0x01, use IRQ pin
    // Note that no other verification is necessary as call_function will
    // check the command was executed as expected.
    uint8_t params[] = {0x01, 0x14, 0x01};
 8000ebc:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef4 <PN532_SamConfiguration+0x40>)
 8000ebe:	f107 030c 	add.w	r3, r7, #12
 8000ec2:	6812      	ldr	r2, [r2, #0]
 8000ec4:	4611      	mov	r1, r2
 8000ec6:	8019      	strh	r1, [r3, #0]
 8000ec8:	3302      	adds	r3, #2
 8000eca:	0c12      	lsrs	r2, r2, #16
 8000ecc:	701a      	strb	r2, [r3, #0]
    PN532_CallFunction(pn532, PN532_COMMAND_SAMCONFIGURATION,
 8000ece:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ed2:	9302      	str	r3, [sp, #8]
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	9301      	str	r3, [sp, #4]
 8000ed8:	f107 030c 	add.w	r3, r7, #12
 8000edc:	9300      	str	r3, [sp, #0]
 8000ede:	2300      	movs	r3, #0
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2114      	movs	r1, #20
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff fe9b 	bl	8000c20 <PN532_CallFunction>
                       NULL, 0, params, sizeof(params), PN532_DEFAULT_TIMEOUT);
    return PN532_STATUS_OK;
 8000eea:	2300      	movs	r3, #0
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	08003d5c 	.word	0x08003d5c

08000ef8 <PN532_ReadPassiveTarget>:
int PN532_ReadPassiveTarget(
    PN532* pn532,
    uint8_t* response,
    uint8_t card_baud,
    uint32_t timeout
) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b090      	sub	sp, #64	@ 0x40
 8000efc:	af04      	add	r7, sp, #16
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	603b      	str	r3, [r7, #0]
 8000f04:	4613      	mov	r3, r2
 8000f06:	71fb      	strb	r3, [r7, #7]
    // Send passive read command for 1 card.  Expect at most a 7 byte UUID.
    uint8_t params[] = {0x01, card_baud};
 8000f08:	2301      	movs	r3, #1
 8000f0a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    uint8_t buff[19];
    int length = PN532_CallFunction(pn532, PN532_COMMAND_INLISTPASSIVETARGET,
 8000f14:	f107 0210 	add.w	r2, r7, #16
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	9302      	str	r3, [sp, #8]
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	9301      	str	r3, [sp, #4]
 8000f20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2313      	movs	r3, #19
 8000f28:	214a      	movs	r1, #74	@ 0x4a
 8000f2a:	68f8      	ldr	r0, [r7, #12]
 8000f2c:	f7ff fe78 	bl	8000c20 <PN532_CallFunction>
 8000f30:	62b8      	str	r0, [r7, #40]	@ 0x28
                        buff, sizeof(buff), params, sizeof(params), timeout);
    if (length < 0) {
 8000f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	da02      	bge.n	8000f3e <PN532_ReadPassiveTarget+0x46>
        return PN532_STATUS_ERROR; // No card found
 8000f38:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3c:	e02e      	b.n	8000f9c <PN532_ReadPassiveTarget+0xa4>
    }
    // Check only 1 card with up to a 7 byte UID is present.
    if (buff[0] != 0x01) {
 8000f3e:	7c3b      	ldrb	r3, [r7, #16]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d006      	beq.n	8000f52 <PN532_ReadPassiveTarget+0x5a>
        pn532->log("More than one card detected!");
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	695b      	ldr	r3, [r3, #20]
 8000f48:	4816      	ldr	r0, [pc, #88]	@ (8000fa4 <PN532_ReadPassiveTarget+0xac>)
 8000f4a:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f50:	e024      	b.n	8000f9c <PN532_ReadPassiveTarget+0xa4>
    }
    if (buff[5] > 7) {
 8000f52:	7d7b      	ldrb	r3, [r7, #21]
 8000f54:	2b07      	cmp	r3, #7
 8000f56:	d906      	bls.n	8000f66 <PN532_ReadPassiveTarget+0x6e>
        pn532->log("Found card with unexpectedly long UID!");
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	4812      	ldr	r0, [pc, #72]	@ (8000fa8 <PN532_ReadPassiveTarget+0xb0>)
 8000f5e:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000f60:	f04f 33ff 	mov.w	r3, #4294967295
 8000f64:	e01a      	b.n	8000f9c <PN532_ReadPassiveTarget+0xa4>
    }
    for (uint8_t i = 0; i < buff[5]; i++) {
 8000f66:	2300      	movs	r3, #0
 8000f68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000f6c:	e010      	b.n	8000f90 <PN532_ReadPassiveTarget+0x98>
        response[i] = buff[6 + i];
 8000f6e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f72:	1d9a      	adds	r2, r3, #6
 8000f74:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f78:	68b9      	ldr	r1, [r7, #8]
 8000f7a:	440b      	add	r3, r1
 8000f7c:	3230      	adds	r2, #48	@ 0x30
 8000f7e:	443a      	add	r2, r7
 8000f80:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8000f84:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < buff[5]; i++) {
 8000f86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000f90:	7d7b      	ldrb	r3, [r7, #21]
 8000f92:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d3e9      	bcc.n	8000f6e <PN532_ReadPassiveTarget+0x76>
    }
    return buff[5];
 8000f9a:	7d7b      	ldrb	r3, [r7, #21]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3730      	adds	r7, #48	@ 0x30
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	08003d60 	.word	0x08003d60
 8000fa8:	08003d80 	.word	0x08003d80

08000fac <PN532_MifareClassicReadBlock>:
  *     to read.
  * @param response: buffer of length 16 returned if the block is successfully read.
  * @param block_number: specify a block to read.
  * @retval: PN532 error code.
  */
int PN532_MifareClassicReadBlock(PN532* pn532, uint8_t* response, uint16_t block_number) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08e      	sub	sp, #56	@ 0x38
 8000fb0:	af04      	add	r7, sp, #16
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	80fb      	strh	r3, [r7, #6]
    uint8_t params[] = {0x01, MIFARE_CMD_READ, block_number & 0xFF};
 8000fba:	2301      	movs	r3, #1
 8000fbc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8000fc0:	2330      	movs	r3, #48	@ 0x30
 8000fc2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8000fc6:	88fb      	ldrh	r3, [r7, #6]
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    uint8_t buff[MIFARE_BLOCK_LENGTH + 1];
    // Send InDataExchange request to read block of MiFare data.
    PN532_CallFunction(pn532, PN532_COMMAND_INDATAEXCHANGE, buff, sizeof(buff),
 8000fce:	f107 0210 	add.w	r2, r7, #16
 8000fd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fd6:	9302      	str	r3, [sp, #8]
 8000fd8:	2303      	movs	r3, #3
 8000fda:	9301      	str	r3, [sp, #4]
 8000fdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	2311      	movs	r3, #17
 8000fe4:	2140      	movs	r1, #64	@ 0x40
 8000fe6:	68f8      	ldr	r0, [r7, #12]
 8000fe8:	f7ff fe1a 	bl	8000c20 <PN532_CallFunction>
                       params, sizeof(params), PN532_DEFAULT_TIMEOUT);
    // Check first response is 0x00 to show success.
    if (buff[0] != PN532_ERROR_NONE) {
 8000fec:	7c3b      	ldrb	r3, [r7, #16]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <PN532_MifareClassicReadBlock+0x4a>
        return buff[0];
 8000ff2:	7c3b      	ldrb	r3, [r7, #16]
 8000ff4:	e019      	b.n	800102a <PN532_MifareClassicReadBlock+0x7e>
    }
    for (uint8_t i = 0; i < MIFARE_BLOCK_LENGTH; i++) {
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000ffc:	e010      	b.n	8001020 <PN532_MifareClassicReadBlock+0x74>
        response[i] = buff[i + 1];
 8000ffe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001002:	1c5a      	adds	r2, r3, #1
 8001004:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001008:	68b9      	ldr	r1, [r7, #8]
 800100a:	440b      	add	r3, r1
 800100c:	3228      	adds	r2, #40	@ 0x28
 800100e:	443a      	add	r2, r7
 8001010:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8001014:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < MIFARE_BLOCK_LENGTH; i++) {
 8001016:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800101a:	3301      	adds	r3, #1
 800101c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001020:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001024:	2b0f      	cmp	r3, #15
 8001026:	d9ea      	bls.n	8000ffe <PN532_MifareClassicReadBlock+0x52>
    }
    return buff[0];
 8001028:	7c3b      	ldrb	r3, [r7, #16]
}
 800102a:	4618      	mov	r0, r3
 800102c:	3728      	adds	r7, #40	@ 0x28
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <PN532_Reset>:
//extern I2C_HandleTypeDef hi2c1;

/**************************************************************************
 * Reset and Log implements
 **************************************************************************/
int PN532_Reset(void) {
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RFID_Reset_GPIO_Port, RFID_Reset_Pin, GPIO_PIN_SET);
 8001038:	2201      	movs	r2, #1
 800103a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800103e:	480e      	ldr	r0, [pc, #56]	@ (8001078 <PN532_Reset+0x44>)
 8001040:	f000 fe4e 	bl	8001ce0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001044:	2064      	movs	r0, #100	@ 0x64
 8001046:	f000 fb6f 	bl	8001728 <HAL_Delay>
    HAL_GPIO_WritePin(RFID_Reset_GPIO_Port, RFID_Reset_Pin, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001050:	4809      	ldr	r0, [pc, #36]	@ (8001078 <PN532_Reset+0x44>)
 8001052:	f000 fe45 	bl	8001ce0 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001056:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800105a:	f000 fb65 	bl	8001728 <HAL_Delay>
    HAL_GPIO_WritePin(RFID_Reset_GPIO_Port, RFID_Reset_Pin, GPIO_PIN_SET);
 800105e:	2201      	movs	r2, #1
 8001060:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001064:	4804      	ldr	r0, [pc, #16]	@ (8001078 <PN532_Reset+0x44>)
 8001066:	f000 fe3b 	bl	8001ce0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800106a:	2064      	movs	r0, #100	@ 0x64
 800106c:	f000 fb5c 	bl	8001728 <HAL_Delay>
    return PN532_STATUS_OK;
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40020400 	.word	0x40020400

0800107c <PN532_Log>:

void PN532_Log(const char* log) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
    printf("%s\r\n", log);
 8001084:	6879      	ldr	r1, [r7, #4]
 8001086:	4803      	ldr	r0, [pc, #12]	@ (8001094 <PN532_Log+0x18>)
 8001088:	f001 ff52 	bl	8002f30 <iprintf>
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	08003da8 	.word	0x08003da8

08001098 <spi_rw>:
        num >>= 1;
    }
    return result;
}

void spi_rw(uint8_t* data, uint8_t count) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af02      	add	r7, sp, #8
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(RFID_SS_GPIO_Port, RFID_SS_Pin, GPIO_PIN_RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2101      	movs	r1, #1
 80010a8:	480a      	ldr	r0, [pc, #40]	@ (80010d4 <spi_rw+0x3c>)
 80010aa:	f000 fe19 	bl	8001ce0 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, data, data, count, _SPI_TIMEOUT);
    for (uint8_t i = 0; i < count; i++) {
        data[i] = reverse_bit(data[i]);
    }
#else
    HAL_SPI_TransmitReceive(&hspi1, data, data, count, _SPI_TIMEOUT);
 80010ae:	78fb      	ldrb	r3, [r7, #3]
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	220a      	movs	r2, #10
 80010b4:	9200      	str	r2, [sp, #0]
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	6879      	ldr	r1, [r7, #4]
 80010ba:	4807      	ldr	r0, [pc, #28]	@ (80010d8 <spi_rw+0x40>)
 80010bc:	f001 fad7 	bl	800266e <HAL_SPI_TransmitReceive>
#endif
    //HAL_Delay(1);
    HAL_GPIO_WritePin(RFID_SS_GPIO_Port, RFID_SS_Pin, GPIO_PIN_SET);
 80010c0:	2201      	movs	r2, #1
 80010c2:	2101      	movs	r1, #1
 80010c4:	4803      	ldr	r0, [pc, #12]	@ (80010d4 <spi_rw+0x3c>)
 80010c6:	f000 fe0b 	bl	8001ce0 <HAL_GPIO_WritePin>
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40020400 	.word	0x40020400
 80010d8:	200001b0 	.word	0x200001b0

080010dc <PN532_SPI_ReadData>:

int PN532_SPI_ReadData(uint8_t* data, uint16_t count) {
 80010dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010e0:	b087      	sub	sp, #28
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
 80010e6:	460b      	mov	r3, r1
 80010e8:	807b      	strh	r3, [r7, #2]
 80010ea:	466b      	mov	r3, sp
 80010ec:	461e      	mov	r6, r3
    uint8_t frame[count + 1];
 80010ee:	887b      	ldrh	r3, [r7, #2]
 80010f0:	1c59      	adds	r1, r3, #1
 80010f2:	1e4b      	subs	r3, r1, #1
 80010f4:	613b      	str	r3, [r7, #16]
 80010f6:	460a      	mov	r2, r1
 80010f8:	2300      	movs	r3, #0
 80010fa:	4690      	mov	r8, r2
 80010fc:	4699      	mov	r9, r3
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	f04f 0300 	mov.w	r3, #0
 8001106:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800110a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800110e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001112:	460a      	mov	r2, r1
 8001114:	2300      	movs	r3, #0
 8001116:	4614      	mov	r4, r2
 8001118:	461d      	mov	r5, r3
 800111a:	f04f 0200 	mov.w	r2, #0
 800111e:	f04f 0300 	mov.w	r3, #0
 8001122:	00eb      	lsls	r3, r5, #3
 8001124:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001128:	00e2      	lsls	r2, r4, #3
 800112a:	460b      	mov	r3, r1
 800112c:	3307      	adds	r3, #7
 800112e:	08db      	lsrs	r3, r3, #3
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	ebad 0d03 	sub.w	sp, sp, r3
 8001136:	466b      	mov	r3, sp
 8001138:	3300      	adds	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
    frame[0] = _SPI_DATAREAD;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2203      	movs	r2, #3
 8001140:	701a      	strb	r2, [r3, #0]
    HAL_Delay(5);
 8001142:	2005      	movs	r0, #5
 8001144:	f000 faf0 	bl	8001728 <HAL_Delay>
    spi_rw(frame, count + 1);
 8001148:	887b      	ldrh	r3, [r7, #2]
 800114a:	b2db      	uxtb	r3, r3
 800114c:	3301      	adds	r3, #1
 800114e:	b2db      	uxtb	r3, r3
 8001150:	4619      	mov	r1, r3
 8001152:	68f8      	ldr	r0, [r7, #12]
 8001154:	f7ff ffa0 	bl	8001098 <spi_rw>
    for (uint8_t i = 0; i < count; i++) {
 8001158:	2300      	movs	r3, #0
 800115a:	75fb      	strb	r3, [r7, #23]
 800115c:	e00a      	b.n	8001174 <PN532_SPI_ReadData+0x98>
        data[i] = frame[i + 1];
 800115e:	7dfb      	ldrb	r3, [r7, #23]
 8001160:	1c5a      	adds	r2, r3, #1
 8001162:	7dfb      	ldrb	r3, [r7, #23]
 8001164:	6879      	ldr	r1, [r7, #4]
 8001166:	440b      	add	r3, r1
 8001168:	68f9      	ldr	r1, [r7, #12]
 800116a:	5c8a      	ldrb	r2, [r1, r2]
 800116c:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 800116e:	7dfb      	ldrb	r3, [r7, #23]
 8001170:	3301      	adds	r3, #1
 8001172:	75fb      	strb	r3, [r7, #23]
 8001174:	7dfb      	ldrb	r3, [r7, #23]
 8001176:	b29b      	uxth	r3, r3
 8001178:	887a      	ldrh	r2, [r7, #2]
 800117a:	429a      	cmp	r2, r3
 800117c:	d8ef      	bhi.n	800115e <PN532_SPI_ReadData+0x82>
    }
    return PN532_STATUS_OK;
 800117e:	2300      	movs	r3, #0
 8001180:	46b5      	mov	sp, r6
}
 8001182:	4618      	mov	r0, r3
 8001184:	371c      	adds	r7, #28
 8001186:	46bd      	mov	sp, r7
 8001188:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800118c <PN532_SPI_WriteData>:

int PN532_SPI_WriteData(uint8_t *data, uint16_t count) {
 800118c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001190:	b087      	sub	sp, #28
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
 8001196:	460b      	mov	r3, r1
 8001198:	807b      	strh	r3, [r7, #2]
 800119a:	466b      	mov	r3, sp
 800119c:	461e      	mov	r6, r3
    uint8_t frame[count + 1];
 800119e:	887b      	ldrh	r3, [r7, #2]
 80011a0:	1c59      	adds	r1, r3, #1
 80011a2:	1e4b      	subs	r3, r1, #1
 80011a4:	613b      	str	r3, [r7, #16]
 80011a6:	460a      	mov	r2, r1
 80011a8:	2300      	movs	r3, #0
 80011aa:	4690      	mov	r8, r2
 80011ac:	4699      	mov	r9, r3
 80011ae:	f04f 0200 	mov.w	r2, #0
 80011b2:	f04f 0300 	mov.w	r3, #0
 80011b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80011ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80011be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80011c2:	460a      	mov	r2, r1
 80011c4:	2300      	movs	r3, #0
 80011c6:	4614      	mov	r4, r2
 80011c8:	461d      	mov	r5, r3
 80011ca:	f04f 0200 	mov.w	r2, #0
 80011ce:	f04f 0300 	mov.w	r3, #0
 80011d2:	00eb      	lsls	r3, r5, #3
 80011d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80011d8:	00e2      	lsls	r2, r4, #3
 80011da:	460b      	mov	r3, r1
 80011dc:	3307      	adds	r3, #7
 80011de:	08db      	lsrs	r3, r3, #3
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	ebad 0d03 	sub.w	sp, sp, r3
 80011e6:	466b      	mov	r3, sp
 80011e8:	3300      	adds	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
    frame[0] = _SPI_DATAWRITE;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2201      	movs	r2, #1
 80011f0:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 80011f2:	2300      	movs	r3, #0
 80011f4:	75fb      	strb	r3, [r7, #23]
 80011f6:	e00a      	b.n	800120e <PN532_SPI_WriteData+0x82>
        frame[i + 1] = data[i];
 80011f8:	7dfb      	ldrb	r3, [r7, #23]
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	441a      	add	r2, r3
 80011fe:	7dfb      	ldrb	r3, [r7, #23]
 8001200:	3301      	adds	r3, #1
 8001202:	7811      	ldrb	r1, [r2, #0]
 8001204:	68fa      	ldr	r2, [r7, #12]
 8001206:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < count; i++) {
 8001208:	7dfb      	ldrb	r3, [r7, #23]
 800120a:	3301      	adds	r3, #1
 800120c:	75fb      	strb	r3, [r7, #23]
 800120e:	7dfb      	ldrb	r3, [r7, #23]
 8001210:	b29b      	uxth	r3, r3
 8001212:	887a      	ldrh	r2, [r7, #2]
 8001214:	429a      	cmp	r2, r3
 8001216:	d8ef      	bhi.n	80011f8 <PN532_SPI_WriteData+0x6c>
    }
    spi_rw(frame, count + 1);
 8001218:	887b      	ldrh	r3, [r7, #2]
 800121a:	b2db      	uxtb	r3, r3
 800121c:	3301      	adds	r3, #1
 800121e:	b2db      	uxtb	r3, r3
 8001220:	4619      	mov	r1, r3
 8001222:	68f8      	ldr	r0, [r7, #12]
 8001224:	f7ff ff38 	bl	8001098 <spi_rw>
    return PN532_STATUS_OK;
 8001228:	2300      	movs	r3, #0
 800122a:	46b5      	mov	sp, r6
}
 800122c:	4618      	mov	r0, r3
 800122e:	371c      	adds	r7, #28
 8001230:	46bd      	mov	sp, r7
 8001232:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001236 <PN532_SPI_WaitReady>:

bool PN532_SPI_WaitReady(uint32_t timeout) {
 8001236:	b580      	push	{r7, lr}
 8001238:	b084      	sub	sp, #16
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
    uint8_t status[] = {_SPI_STATREAD, 0x00};
 800123e:	2302      	movs	r3, #2
 8001240:	813b      	strh	r3, [r7, #8]
    uint32_t tickstart = HAL_GetTick();
 8001242:	f000 fa65 	bl	8001710 <HAL_GetTick>
 8001246:	60f8      	str	r0, [r7, #12]
    while (HAL_GetTick() - tickstart < timeout) {
 8001248:	e010      	b.n	800126c <PN532_SPI_WaitReady+0x36>
        HAL_Delay(10);
 800124a:	200a      	movs	r0, #10
 800124c:	f000 fa6c 	bl	8001728 <HAL_Delay>
        spi_rw(status, sizeof(status));
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	2102      	movs	r1, #2
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff ff1e 	bl	8001098 <spi_rw>
        if (status[1] == _SPI_READY) {
 800125c:	7a7b      	ldrb	r3, [r7, #9]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d101      	bne.n	8001266 <PN532_SPI_WaitReady+0x30>
            return true;
 8001262:	2301      	movs	r3, #1
 8001264:	e00b      	b.n	800127e <PN532_SPI_WaitReady+0x48>
        } else {
            HAL_Delay(5);
 8001266:	2005      	movs	r0, #5
 8001268:	f000 fa5e 	bl	8001728 <HAL_Delay>
    while (HAL_GetTick() - tickstart < timeout) {
 800126c:	f000 fa50 	bl	8001710 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	429a      	cmp	r2, r3
 800127a:	d8e6      	bhi.n	800124a <PN532_SPI_WaitReady+0x14>
        }
    }
    return false;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <PN532_SPI_Wakeup>:

int PN532_SPI_Wakeup(void) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
    // Send any special commands/data to wake up PN532
    uint8_t data[] = {0x00};
 800128e:	2300      	movs	r3, #0
 8001290:	713b      	strb	r3, [r7, #4]
    HAL_Delay(1000);
 8001292:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001296:	f000 fa47 	bl	8001728 <HAL_Delay>
    HAL_GPIO_WritePin(RFID_SS_GPIO_Port, RFID_SS_Pin, GPIO_PIN_RESET);
 800129a:	2200      	movs	r2, #0
 800129c:	2101      	movs	r1, #1
 800129e:	480a      	ldr	r0, [pc, #40]	@ (80012c8 <PN532_SPI_Wakeup+0x40>)
 80012a0:	f000 fd1e 	bl	8001ce0 <HAL_GPIO_WritePin>
    HAL_Delay(2); // T_osc_start
 80012a4:	2002      	movs	r0, #2
 80012a6:	f000 fa3f 	bl	8001728 <HAL_Delay>
    spi_rw(data, 1);
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	2101      	movs	r1, #1
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff fef2 	bl	8001098 <spi_rw>
    HAL_Delay(1000);
 80012b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012b8:	f000 fa36 	bl	8001728 <HAL_Delay>
    return PN532_STATUS_OK;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40020400 	.word	0x40020400

080012cc <PN532_SPI_Init>:

void PN532_SPI_Init(PN532* pn532) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
    // init the pn532 functions
    pn532->reset =  PN532_Reset;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4a0c      	ldr	r2, [pc, #48]	@ (8001308 <PN532_SPI_Init+0x3c>)
 80012d8:	601a      	str	r2, [r3, #0]
    pn532->read_data = PN532_SPI_ReadData;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a0b      	ldr	r2, [pc, #44]	@ (800130c <PN532_SPI_Init+0x40>)
 80012de:	605a      	str	r2, [r3, #4]
    pn532->write_data = PN532_SPI_WriteData;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a0b      	ldr	r2, [pc, #44]	@ (8001310 <PN532_SPI_Init+0x44>)
 80012e4:	609a      	str	r2, [r3, #8]
    pn532->wait_ready = PN532_SPI_WaitReady;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001314 <PN532_SPI_Init+0x48>)
 80012ea:	60da      	str	r2, [r3, #12]
    pn532->wakeup = PN532_SPI_Wakeup;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001318 <PN532_SPI_Init+0x4c>)
 80012f0:	611a      	str	r2, [r3, #16]
    pn532->log = PN532_Log;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a09      	ldr	r2, [pc, #36]	@ (800131c <PN532_SPI_Init+0x50>)
 80012f6:	615a      	str	r2, [r3, #20]

    // hardware wakeup
    pn532->wakeup();
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	691b      	ldr	r3, [r3, #16]
 80012fc:	4798      	blx	r3
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	08001035 	.word	0x08001035
 800130c:	080010dd 	.word	0x080010dd
 8001310:	0800118d 	.word	0x0800118d
 8001314:	08001237 	.word	0x08001237
 8001318:	08001289 	.word	0x08001289
 800131c:	0800107d 	.word	0x0800107d

08001320 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	4b10      	ldr	r3, [pc, #64]	@ (800136c <HAL_MspInit+0x4c>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132e:	4a0f      	ldr	r2, [pc, #60]	@ (800136c <HAL_MspInit+0x4c>)
 8001330:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001334:	6453      	str	r3, [r2, #68]	@ 0x44
 8001336:	4b0d      	ldr	r3, [pc, #52]	@ (800136c <HAL_MspInit+0x4c>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800133a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	603b      	str	r3, [r7, #0]
 8001346:	4b09      	ldr	r3, [pc, #36]	@ (800136c <HAL_MspInit+0x4c>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134a:	4a08      	ldr	r2, [pc, #32]	@ (800136c <HAL_MspInit+0x4c>)
 800134c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001350:	6413      	str	r3, [r2, #64]	@ 0x40
 8001352:	4b06      	ldr	r3, [pc, #24]	@ (800136c <HAL_MspInit+0x4c>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	40023800 	.word	0x40023800

08001370 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	@ 0x28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a1d      	ldr	r2, [pc, #116]	@ (8001404 <HAL_SPI_MspInit+0x94>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d133      	bne.n	80013fa <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
 8001396:	4b1c      	ldr	r3, [pc, #112]	@ (8001408 <HAL_SPI_MspInit+0x98>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800139a:	4a1b      	ldr	r2, [pc, #108]	@ (8001408 <HAL_SPI_MspInit+0x98>)
 800139c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013a2:	4b19      	ldr	r3, [pc, #100]	@ (8001408 <HAL_SPI_MspInit+0x98>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013aa:	613b      	str	r3, [r7, #16]
 80013ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	4b15      	ldr	r3, [pc, #84]	@ (8001408 <HAL_SPI_MspInit+0x98>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	4a14      	ldr	r2, [pc, #80]	@ (8001408 <HAL_SPI_MspInit+0x98>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013be:	4b12      	ldr	r3, [pc, #72]	@ (8001408 <HAL_SPI_MspInit+0x98>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80013ca:	23e0      	movs	r3, #224	@ 0xe0
 80013cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	2302      	movs	r3, #2
 80013d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d6:	2303      	movs	r3, #3
 80013d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013da:	2305      	movs	r3, #5
 80013dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	4619      	mov	r1, r3
 80013e4:	4809      	ldr	r0, [pc, #36]	@ (800140c <HAL_SPI_MspInit+0x9c>)
 80013e6:	f000 faf7 	bl	80019d8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	2023      	movs	r0, #35	@ 0x23
 80013f0:	f000 fa99 	bl	8001926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80013f4:	2023      	movs	r0, #35	@ 0x23
 80013f6:	f000 fab2 	bl	800195e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80013fa:	bf00      	nop
 80013fc:	3728      	adds	r7, #40	@ 0x28
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40013000 	.word	0x40013000
 8001408:	40023800 	.word	0x40023800
 800140c:	40020000 	.word	0x40020000

08001410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001414:	bf00      	nop
 8001416:	e7fd      	b.n	8001414 <NMI_Handler+0x4>

08001418 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800141c:	bf00      	nop
 800141e:	e7fd      	b.n	800141c <HardFault_Handler+0x4>

08001420 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001424:	bf00      	nop
 8001426:	e7fd      	b.n	8001424 <MemManage_Handler+0x4>

08001428 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800142c:	bf00      	nop
 800142e:	e7fd      	b.n	800142c <BusFault_Handler+0x4>

08001430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001434:	bf00      	nop
 8001436:	e7fd      	b.n	8001434 <UsageFault_Handler+0x4>

08001438 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001466:	f000 f93f 	bl	80016e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001474:	4802      	ldr	r0, [pc, #8]	@ (8001480 <SPI1_IRQHandler+0x10>)
 8001476:	f001 faab 	bl	80029d0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200001b0 	.word	0x200001b0

08001484 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]
 8001494:	e00a      	b.n	80014ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001496:	f3af 8000 	nop.w
 800149a:	4601      	mov	r1, r0
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	1c5a      	adds	r2, r3, #1
 80014a0:	60ba      	str	r2, [r7, #8]
 80014a2:	b2ca      	uxtb	r2, r1
 80014a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	3301      	adds	r3, #1
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	697a      	ldr	r2, [r7, #20]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	dbf0      	blt.n	8001496 <_read+0x12>
  }

  return len;
 80014b4:	687b      	ldr	r3, [r7, #4]
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b086      	sub	sp, #24
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	60f8      	str	r0, [r7, #12]
 80014c6:	60b9      	str	r1, [r7, #8]
 80014c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]
 80014ce:	e009      	b.n	80014e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	1c5a      	adds	r2, r3, #1
 80014d4:	60ba      	str	r2, [r7, #8]
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	4618      	mov	r0, r3
 80014da:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	3301      	adds	r3, #1
 80014e2:	617b      	str	r3, [r7, #20]
 80014e4:	697a      	ldr	r2, [r7, #20]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	dbf1      	blt.n	80014d0 <_write+0x12>
  }
  return len;
 80014ec:	687b      	ldr	r3, [r7, #4]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3718      	adds	r7, #24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <_close>:

int _close(int file)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001502:	4618      	mov	r0, r3
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800150e:	b480      	push	{r7}
 8001510:	b083      	sub	sp, #12
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
 8001516:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800151e:	605a      	str	r2, [r3, #4]
  return 0;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <_isatty>:

int _isatty(int file)
{
 800152e:	b480      	push	{r7}
 8001530:	b083      	sub	sp, #12
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001536:	2301      	movs	r3, #1
}
 8001538:	4618      	mov	r0, r3
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
	...

08001560 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001568:	4a14      	ldr	r2, [pc, #80]	@ (80015bc <_sbrk+0x5c>)
 800156a:	4b15      	ldr	r3, [pc, #84]	@ (80015c0 <_sbrk+0x60>)
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001574:	4b13      	ldr	r3, [pc, #76]	@ (80015c4 <_sbrk+0x64>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d102      	bne.n	8001582 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800157c:	4b11      	ldr	r3, [pc, #68]	@ (80015c4 <_sbrk+0x64>)
 800157e:	4a12      	ldr	r2, [pc, #72]	@ (80015c8 <_sbrk+0x68>)
 8001580:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001582:	4b10      	ldr	r3, [pc, #64]	@ (80015c4 <_sbrk+0x64>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4413      	add	r3, r2
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	429a      	cmp	r2, r3
 800158e:	d207      	bcs.n	80015a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001590:	f001 fd72 	bl	8003078 <__errno>
 8001594:	4603      	mov	r3, r0
 8001596:	220c      	movs	r2, #12
 8001598:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800159a:	f04f 33ff 	mov.w	r3, #4294967295
 800159e:	e009      	b.n	80015b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015a0:	4b08      	ldr	r3, [pc, #32]	@ (80015c4 <_sbrk+0x64>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015a6:	4b07      	ldr	r3, [pc, #28]	@ (80015c4 <_sbrk+0x64>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4413      	add	r3, r2
 80015ae:	4a05      	ldr	r2, [pc, #20]	@ (80015c4 <_sbrk+0x64>)
 80015b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015b2:	68fb      	ldr	r3, [r7, #12]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20020000 	.word	0x20020000
 80015c0:	00000400 	.word	0x00000400
 80015c4:	2000023c 	.word	0x2000023c
 80015c8:	20000390 	.word	0x20000390

080015cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015d0:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <SystemInit+0x20>)
 80015d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015d6:	4a05      	ldr	r2, [pc, #20]	@ (80015ec <SystemInit+0x20>)
 80015d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001628 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015f4:	f7ff ffea 	bl	80015cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015f8:	480c      	ldr	r0, [pc, #48]	@ (800162c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015fa:	490d      	ldr	r1, [pc, #52]	@ (8001630 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001634 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001600:	e002      	b.n	8001608 <LoopCopyDataInit>

08001602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001606:	3304      	adds	r3, #4

08001608 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800160a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800160c:	d3f9      	bcc.n	8001602 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800160e:	4a0a      	ldr	r2, [pc, #40]	@ (8001638 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001610:	4c0a      	ldr	r4, [pc, #40]	@ (800163c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001614:	e001      	b.n	800161a <LoopFillZerobss>

08001616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001618:	3204      	adds	r2, #4

0800161a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800161a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800161c:	d3fb      	bcc.n	8001616 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800161e:	f001 fd31 	bl	8003084 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001622:	f7fe ffa5 	bl	8000570 <main>
  bx  lr    
 8001626:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001628:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800162c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001630:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001634:	08003e0c 	.word	0x08003e0c
  ldr r2, =_sbss
 8001638:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800163c:	20000390 	.word	0x20000390

08001640 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001640:	e7fe      	b.n	8001640 <ADC_IRQHandler>
	...

08001644 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001648:	4b0e      	ldr	r3, [pc, #56]	@ (8001684 <HAL_Init+0x40>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a0d      	ldr	r2, [pc, #52]	@ (8001684 <HAL_Init+0x40>)
 800164e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001652:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001654:	4b0b      	ldr	r3, [pc, #44]	@ (8001684 <HAL_Init+0x40>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a0a      	ldr	r2, [pc, #40]	@ (8001684 <HAL_Init+0x40>)
 800165a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800165e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001660:	4b08      	ldr	r3, [pc, #32]	@ (8001684 <HAL_Init+0x40>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a07      	ldr	r2, [pc, #28]	@ (8001684 <HAL_Init+0x40>)
 8001666:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800166a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800166c:	2003      	movs	r0, #3
 800166e:	f000 f94f 	bl	8001910 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001672:	200f      	movs	r0, #15
 8001674:	f000 f808 	bl	8001688 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001678:	f7ff fe52 	bl	8001320 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40023c00 	.word	0x40023c00

08001688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001690:	4b12      	ldr	r3, [pc, #72]	@ (80016dc <HAL_InitTick+0x54>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4b12      	ldr	r3, [pc, #72]	@ (80016e0 <HAL_InitTick+0x58>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	4619      	mov	r1, r3
 800169a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800169e:	fbb3 f3f1 	udiv	r3, r3, r1
 80016a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a6:	4618      	mov	r0, r3
 80016a8:	f000 f967 	bl	800197a <HAL_SYSTICK_Config>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e00e      	b.n	80016d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b0f      	cmp	r3, #15
 80016ba:	d80a      	bhi.n	80016d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016bc:	2200      	movs	r2, #0
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295
 80016c4:	f000 f92f 	bl	8001926 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016c8:	4a06      	ldr	r2, [pc, #24]	@ (80016e4 <HAL_InitTick+0x5c>)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ce:	2300      	movs	r3, #0
 80016d0:	e000      	b.n	80016d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000000 	.word	0x20000000
 80016e0:	20000008 	.word	0x20000008
 80016e4:	20000004 	.word	0x20000004

080016e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016ec:	4b06      	ldr	r3, [pc, #24]	@ (8001708 <HAL_IncTick+0x20>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	461a      	mov	r2, r3
 80016f2:	4b06      	ldr	r3, [pc, #24]	@ (800170c <HAL_IncTick+0x24>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4413      	add	r3, r2
 80016f8:	4a04      	ldr	r2, [pc, #16]	@ (800170c <HAL_IncTick+0x24>)
 80016fa:	6013      	str	r3, [r2, #0]
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	20000008 	.word	0x20000008
 800170c:	20000240 	.word	0x20000240

08001710 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return uwTick;
 8001714:	4b03      	ldr	r3, [pc, #12]	@ (8001724 <HAL_GetTick+0x14>)
 8001716:	681b      	ldr	r3, [r3, #0]
}
 8001718:	4618      	mov	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	20000240 	.word	0x20000240

08001728 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001730:	f7ff ffee 	bl	8001710 <HAL_GetTick>
 8001734:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001740:	d005      	beq.n	800174e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001742:	4b0a      	ldr	r3, [pc, #40]	@ (800176c <HAL_Delay+0x44>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	461a      	mov	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4413      	add	r3, r2
 800174c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800174e:	bf00      	nop
 8001750:	f7ff ffde 	bl	8001710 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	429a      	cmp	r2, r3
 800175e:	d8f7      	bhi.n	8001750 <HAL_Delay+0x28>
  {
  }
}
 8001760:	bf00      	nop
 8001762:	bf00      	nop
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000008 	.word	0x20000008

08001770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001780:	4b0c      	ldr	r3, [pc, #48]	@ (80017b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001786:	68ba      	ldr	r2, [r7, #8]
 8001788:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800178c:	4013      	ands	r3, r2
 800178e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001798:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800179c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017a2:	4a04      	ldr	r2, [pc, #16]	@ (80017b4 <__NVIC_SetPriorityGrouping+0x44>)
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	60d3      	str	r3, [r2, #12]
}
 80017a8:	bf00      	nop
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017bc:	4b04      	ldr	r3, [pc, #16]	@ (80017d0 <__NVIC_GetPriorityGrouping+0x18>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	0a1b      	lsrs	r3, r3, #8
 80017c2:	f003 0307 	and.w	r3, r3, #7
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	db0b      	blt.n	80017fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	f003 021f 	and.w	r2, r3, #31
 80017ec:	4907      	ldr	r1, [pc, #28]	@ (800180c <__NVIC_EnableIRQ+0x38>)
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	095b      	lsrs	r3, r3, #5
 80017f4:	2001      	movs	r0, #1
 80017f6:	fa00 f202 	lsl.w	r2, r0, r2
 80017fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	e000e100 	.word	0xe000e100

08001810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	6039      	str	r1, [r7, #0]
 800181a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800181c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001820:	2b00      	cmp	r3, #0
 8001822:	db0a      	blt.n	800183a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	b2da      	uxtb	r2, r3
 8001828:	490c      	ldr	r1, [pc, #48]	@ (800185c <__NVIC_SetPriority+0x4c>)
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	0112      	lsls	r2, r2, #4
 8001830:	b2d2      	uxtb	r2, r2
 8001832:	440b      	add	r3, r1
 8001834:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001838:	e00a      	b.n	8001850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	b2da      	uxtb	r2, r3
 800183e:	4908      	ldr	r1, [pc, #32]	@ (8001860 <__NVIC_SetPriority+0x50>)
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	f003 030f 	and.w	r3, r3, #15
 8001846:	3b04      	subs	r3, #4
 8001848:	0112      	lsls	r2, r2, #4
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	440b      	add	r3, r1
 800184e:	761a      	strb	r2, [r3, #24]
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000e100 	.word	0xe000e100
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001864:	b480      	push	{r7}
 8001866:	b089      	sub	sp, #36	@ 0x24
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	f1c3 0307 	rsb	r3, r3, #7
 800187e:	2b04      	cmp	r3, #4
 8001880:	bf28      	it	cs
 8001882:	2304      	movcs	r3, #4
 8001884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3304      	adds	r3, #4
 800188a:	2b06      	cmp	r3, #6
 800188c:	d902      	bls.n	8001894 <NVIC_EncodePriority+0x30>
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3b03      	subs	r3, #3
 8001892:	e000      	b.n	8001896 <NVIC_EncodePriority+0x32>
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001898:	f04f 32ff 	mov.w	r2, #4294967295
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43da      	mvns	r2, r3
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	401a      	ands	r2, r3
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018ac:	f04f 31ff 	mov.w	r1, #4294967295
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	fa01 f303 	lsl.w	r3, r1, r3
 80018b6:	43d9      	mvns	r1, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018bc:	4313      	orrs	r3, r2
         );
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3724      	adds	r7, #36	@ 0x24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
	...

080018cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018dc:	d301      	bcc.n	80018e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018de:	2301      	movs	r3, #1
 80018e0:	e00f      	b.n	8001902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018e2:	4a0a      	ldr	r2, [pc, #40]	@ (800190c <SysTick_Config+0x40>)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ea:	210f      	movs	r1, #15
 80018ec:	f04f 30ff 	mov.w	r0, #4294967295
 80018f0:	f7ff ff8e 	bl	8001810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f4:	4b05      	ldr	r3, [pc, #20]	@ (800190c <SysTick_Config+0x40>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018fa:	4b04      	ldr	r3, [pc, #16]	@ (800190c <SysTick_Config+0x40>)
 80018fc:	2207      	movs	r2, #7
 80018fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	e000e010 	.word	0xe000e010

08001910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff ff29 	bl	8001770 <__NVIC_SetPriorityGrouping>
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001926:	b580      	push	{r7, lr}
 8001928:	b086      	sub	sp, #24
 800192a:	af00      	add	r7, sp, #0
 800192c:	4603      	mov	r3, r0
 800192e:	60b9      	str	r1, [r7, #8]
 8001930:	607a      	str	r2, [r7, #4]
 8001932:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001938:	f7ff ff3e 	bl	80017b8 <__NVIC_GetPriorityGrouping>
 800193c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	68b9      	ldr	r1, [r7, #8]
 8001942:	6978      	ldr	r0, [r7, #20]
 8001944:	f7ff ff8e 	bl	8001864 <NVIC_EncodePriority>
 8001948:	4602      	mov	r2, r0
 800194a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800194e:	4611      	mov	r1, r2
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff5d 	bl	8001810 <__NVIC_SetPriority>
}
 8001956:	bf00      	nop
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	4603      	mov	r3, r0
 8001966:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff31 	bl	80017d4 <__NVIC_EnableIRQ>
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff ffa2 	bl	80018cc <SysTick_Config>
 8001988:	4603      	mov	r3, r0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001992:	b480      	push	{r7}
 8001994:	b083      	sub	sp, #12
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d004      	beq.n	80019b0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2280      	movs	r2, #128	@ 0x80
 80019aa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e00c      	b.n	80019ca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2205      	movs	r2, #5
 80019b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0201 	bic.w	r2, r2, #1
 80019c6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
	...

080019d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d8:	b480      	push	{r7}
 80019da:	b089      	sub	sp, #36	@ 0x24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
 80019f2:	e159      	b.n	8001ca8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019f4:	2201      	movs	r2, #1
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	4013      	ands	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	f040 8148 	bne.w	8001ca2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 0303 	and.w	r3, r3, #3
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d005      	beq.n	8001a2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d130      	bne.n	8001a8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	2203      	movs	r2, #3
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	68da      	ldr	r2, [r3, #12]
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a60:	2201      	movs	r2, #1
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	091b      	lsrs	r3, r3, #4
 8001a76:	f003 0201 	and.w	r2, r3, #1
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	2b03      	cmp	r3, #3
 8001a96:	d017      	beq.n	8001ac8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d123      	bne.n	8001b1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	08da      	lsrs	r2, r3, #3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3208      	adds	r2, #8
 8001adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	220f      	movs	r2, #15
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	691a      	ldr	r2, [r3, #16]
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	08da      	lsrs	r2, r3, #3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	3208      	adds	r2, #8
 8001b16:	69b9      	ldr	r1, [r7, #24]
 8001b18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	2203      	movs	r2, #3
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 0203 	and.w	r2, r3, #3
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f000 80a2 	beq.w	8001ca2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	4b57      	ldr	r3, [pc, #348]	@ (8001cc0 <HAL_GPIO_Init+0x2e8>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b66:	4a56      	ldr	r2, [pc, #344]	@ (8001cc0 <HAL_GPIO_Init+0x2e8>)
 8001b68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b6e:	4b54      	ldr	r3, [pc, #336]	@ (8001cc0 <HAL_GPIO_Init+0x2e8>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b7a:	4a52      	ldr	r2, [pc, #328]	@ (8001cc4 <HAL_GPIO_Init+0x2ec>)
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	089b      	lsrs	r3, r3, #2
 8001b80:	3302      	adds	r3, #2
 8001b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	220f      	movs	r2, #15
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43db      	mvns	r3, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a49      	ldr	r2, [pc, #292]	@ (8001cc8 <HAL_GPIO_Init+0x2f0>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d019      	beq.n	8001bda <HAL_GPIO_Init+0x202>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a48      	ldr	r2, [pc, #288]	@ (8001ccc <HAL_GPIO_Init+0x2f4>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d013      	beq.n	8001bd6 <HAL_GPIO_Init+0x1fe>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a47      	ldr	r2, [pc, #284]	@ (8001cd0 <HAL_GPIO_Init+0x2f8>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d00d      	beq.n	8001bd2 <HAL_GPIO_Init+0x1fa>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a46      	ldr	r2, [pc, #280]	@ (8001cd4 <HAL_GPIO_Init+0x2fc>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d007      	beq.n	8001bce <HAL_GPIO_Init+0x1f6>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a45      	ldr	r2, [pc, #276]	@ (8001cd8 <HAL_GPIO_Init+0x300>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d101      	bne.n	8001bca <HAL_GPIO_Init+0x1f2>
 8001bc6:	2304      	movs	r3, #4
 8001bc8:	e008      	b.n	8001bdc <HAL_GPIO_Init+0x204>
 8001bca:	2307      	movs	r3, #7
 8001bcc:	e006      	b.n	8001bdc <HAL_GPIO_Init+0x204>
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e004      	b.n	8001bdc <HAL_GPIO_Init+0x204>
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	e002      	b.n	8001bdc <HAL_GPIO_Init+0x204>
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e000      	b.n	8001bdc <HAL_GPIO_Init+0x204>
 8001bda:	2300      	movs	r3, #0
 8001bdc:	69fa      	ldr	r2, [r7, #28]
 8001bde:	f002 0203 	and.w	r2, r2, #3
 8001be2:	0092      	lsls	r2, r2, #2
 8001be4:	4093      	lsls	r3, r2
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bec:	4935      	ldr	r1, [pc, #212]	@ (8001cc4 <HAL_GPIO_Init+0x2ec>)
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	089b      	lsrs	r3, r3, #2
 8001bf2:	3302      	adds	r3, #2
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bfa:	4b38      	ldr	r3, [pc, #224]	@ (8001cdc <HAL_GPIO_Init+0x304>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	43db      	mvns	r3, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4013      	ands	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c1e:	4a2f      	ldr	r2, [pc, #188]	@ (8001cdc <HAL_GPIO_Init+0x304>)
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c24:	4b2d      	ldr	r3, [pc, #180]	@ (8001cdc <HAL_GPIO_Init+0x304>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d003      	beq.n	8001c48 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c48:	4a24      	ldr	r2, [pc, #144]	@ (8001cdc <HAL_GPIO_Init+0x304>)
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c4e:	4b23      	ldr	r3, [pc, #140]	@ (8001cdc <HAL_GPIO_Init+0x304>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	43db      	mvns	r3, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c72:	4a1a      	ldr	r2, [pc, #104]	@ (8001cdc <HAL_GPIO_Init+0x304>)
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c78:	4b18      	ldr	r3, [pc, #96]	@ (8001cdc <HAL_GPIO_Init+0x304>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	43db      	mvns	r3, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4013      	ands	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c9c:	4a0f      	ldr	r2, [pc, #60]	@ (8001cdc <HAL_GPIO_Init+0x304>)
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	61fb      	str	r3, [r7, #28]
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	2b0f      	cmp	r3, #15
 8001cac:	f67f aea2 	bls.w	80019f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	bf00      	nop
 8001cb4:	3724      	adds	r7, #36	@ 0x24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40013800 	.word	0x40013800
 8001cc8:	40020000 	.word	0x40020000
 8001ccc:	40020400 	.word	0x40020400
 8001cd0:	40020800 	.word	0x40020800
 8001cd4:	40020c00 	.word	0x40020c00
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	40013c00 	.word	0x40013c00

08001ce0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	807b      	strh	r3, [r7, #2]
 8001cec:	4613      	mov	r3, r2
 8001cee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cf0:	787b      	ldrb	r3, [r7, #1]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cf6:	887a      	ldrh	r2, [r7, #2]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cfc:	e003      	b.n	8001d06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cfe:	887b      	ldrh	r3, [r7, #2]
 8001d00:	041a      	lsls	r2, r3, #16
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	619a      	str	r2, [r3, #24]
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
	...

08001d14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e267      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d075      	beq.n	8001e1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d32:	4b88      	ldr	r3, [pc, #544]	@ (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 030c 	and.w	r3, r3, #12
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	d00c      	beq.n	8001d58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d3e:	4b85      	ldr	r3, [pc, #532]	@ (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d46:	2b08      	cmp	r3, #8
 8001d48:	d112      	bne.n	8001d70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d4a:	4b82      	ldr	r3, [pc, #520]	@ (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d52:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d56:	d10b      	bne.n	8001d70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d58:	4b7e      	ldr	r3, [pc, #504]	@ (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d05b      	beq.n	8001e1c <HAL_RCC_OscConfig+0x108>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d157      	bne.n	8001e1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e242      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d78:	d106      	bne.n	8001d88 <HAL_RCC_OscConfig+0x74>
 8001d7a:	4b76      	ldr	r3, [pc, #472]	@ (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a75      	ldr	r2, [pc, #468]	@ (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001d80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d84:	6013      	str	r3, [r2, #0]
 8001d86:	e01d      	b.n	8001dc4 <HAL_RCC_OscConfig+0xb0>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d90:	d10c      	bne.n	8001dac <HAL_RCC_OscConfig+0x98>
 8001d92:	4b70      	ldr	r3, [pc, #448]	@ (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a6f      	ldr	r2, [pc, #444]	@ (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001d98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d9c:	6013      	str	r3, [r2, #0]
 8001d9e:	4b6d      	ldr	r3, [pc, #436]	@ (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a6c      	ldr	r2, [pc, #432]	@ (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001da4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	e00b      	b.n	8001dc4 <HAL_RCC_OscConfig+0xb0>
 8001dac:	4b69      	ldr	r3, [pc, #420]	@ (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a68      	ldr	r2, [pc, #416]	@ (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001db2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001db6:	6013      	str	r3, [r2, #0]
 8001db8:	4b66      	ldr	r3, [pc, #408]	@ (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a65      	ldr	r2, [pc, #404]	@ (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001dbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d013      	beq.n	8001df4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dcc:	f7ff fca0 	bl	8001710 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dd4:	f7ff fc9c 	bl	8001710 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b64      	cmp	r3, #100	@ 0x64
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e207      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de6:	4b5b      	ldr	r3, [pc, #364]	@ (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0f0      	beq.n	8001dd4 <HAL_RCC_OscConfig+0xc0>
 8001df2:	e014      	b.n	8001e1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df4:	f7ff fc8c 	bl	8001710 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dfc:	f7ff fc88 	bl	8001710 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b64      	cmp	r3, #100	@ 0x64
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e1f3      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e0e:	4b51      	ldr	r3, [pc, #324]	@ (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f0      	bne.n	8001dfc <HAL_RCC_OscConfig+0xe8>
 8001e1a:	e000      	b.n	8001e1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d063      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e2a:	4b4a      	ldr	r3, [pc, #296]	@ (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 030c 	and.w	r3, r3, #12
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00b      	beq.n	8001e4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e36:	4b47      	ldr	r3, [pc, #284]	@ (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e3e:	2b08      	cmp	r3, #8
 8001e40:	d11c      	bne.n	8001e7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e42:	4b44      	ldr	r3, [pc, #272]	@ (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d116      	bne.n	8001e7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e4e:	4b41      	ldr	r3, [pc, #260]	@ (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d005      	beq.n	8001e66 <HAL_RCC_OscConfig+0x152>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d001      	beq.n	8001e66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e1c7      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e66:	4b3b      	ldr	r3, [pc, #236]	@ (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	4937      	ldr	r1, [pc, #220]	@ (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e7a:	e03a      	b.n	8001ef2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d020      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e84:	4b34      	ldr	r3, [pc, #208]	@ (8001f58 <HAL_RCC_OscConfig+0x244>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8a:	f7ff fc41 	bl	8001710 <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e92:	f7ff fc3d 	bl	8001710 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e1a8      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea4:	4b2b      	ldr	r3, [pc, #172]	@ (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0f0      	beq.n	8001e92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb0:	4b28      	ldr	r3, [pc, #160]	@ (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	4925      	ldr	r1, [pc, #148]	@ (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	600b      	str	r3, [r1, #0]
 8001ec4:	e015      	b.n	8001ef2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ec6:	4b24      	ldr	r3, [pc, #144]	@ (8001f58 <HAL_RCC_OscConfig+0x244>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ecc:	f7ff fc20 	bl	8001710 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ed4:	f7ff fc1c 	bl	8001710 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e187      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ee6:	4b1b      	ldr	r3, [pc, #108]	@ (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f0      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0308 	and.w	r3, r3, #8
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d036      	beq.n	8001f6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d016      	beq.n	8001f34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f06:	4b15      	ldr	r3, [pc, #84]	@ (8001f5c <HAL_RCC_OscConfig+0x248>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0c:	f7ff fc00 	bl	8001710 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f14:	f7ff fbfc 	bl	8001710 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e167      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f26:	4b0b      	ldr	r3, [pc, #44]	@ (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001f28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0f0      	beq.n	8001f14 <HAL_RCC_OscConfig+0x200>
 8001f32:	e01b      	b.n	8001f6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f34:	4b09      	ldr	r3, [pc, #36]	@ (8001f5c <HAL_RCC_OscConfig+0x248>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3a:	f7ff fbe9 	bl	8001710 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f40:	e00e      	b.n	8001f60 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f42:	f7ff fbe5 	bl	8001710 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d907      	bls.n	8001f60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e150      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
 8001f54:	40023800 	.word	0x40023800
 8001f58:	42470000 	.word	0x42470000
 8001f5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f60:	4b88      	ldr	r3, [pc, #544]	@ (8002184 <HAL_RCC_OscConfig+0x470>)
 8001f62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1ea      	bne.n	8001f42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f000 8097 	beq.w	80020a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f7e:	4b81      	ldr	r3, [pc, #516]	@ (8002184 <HAL_RCC_OscConfig+0x470>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10f      	bne.n	8001faa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	4b7d      	ldr	r3, [pc, #500]	@ (8002184 <HAL_RCC_OscConfig+0x470>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f92:	4a7c      	ldr	r2, [pc, #496]	@ (8002184 <HAL_RCC_OscConfig+0x470>)
 8001f94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f9a:	4b7a      	ldr	r3, [pc, #488]	@ (8002184 <HAL_RCC_OscConfig+0x470>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fa2:	60bb      	str	r3, [r7, #8]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001faa:	4b77      	ldr	r3, [pc, #476]	@ (8002188 <HAL_RCC_OscConfig+0x474>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d118      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fb6:	4b74      	ldr	r3, [pc, #464]	@ (8002188 <HAL_RCC_OscConfig+0x474>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a73      	ldr	r2, [pc, #460]	@ (8002188 <HAL_RCC_OscConfig+0x474>)
 8001fbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fc2:	f7ff fba5 	bl	8001710 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fca:	f7ff fba1 	bl	8001710 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e10c      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fdc:	4b6a      	ldr	r3, [pc, #424]	@ (8002188 <HAL_RCC_OscConfig+0x474>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0f0      	beq.n	8001fca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d106      	bne.n	8001ffe <HAL_RCC_OscConfig+0x2ea>
 8001ff0:	4b64      	ldr	r3, [pc, #400]	@ (8002184 <HAL_RCC_OscConfig+0x470>)
 8001ff2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ff4:	4a63      	ldr	r2, [pc, #396]	@ (8002184 <HAL_RCC_OscConfig+0x470>)
 8001ff6:	f043 0301 	orr.w	r3, r3, #1
 8001ffa:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ffc:	e01c      	b.n	8002038 <HAL_RCC_OscConfig+0x324>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	2b05      	cmp	r3, #5
 8002004:	d10c      	bne.n	8002020 <HAL_RCC_OscConfig+0x30c>
 8002006:	4b5f      	ldr	r3, [pc, #380]	@ (8002184 <HAL_RCC_OscConfig+0x470>)
 8002008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800200a:	4a5e      	ldr	r2, [pc, #376]	@ (8002184 <HAL_RCC_OscConfig+0x470>)
 800200c:	f043 0304 	orr.w	r3, r3, #4
 8002010:	6713      	str	r3, [r2, #112]	@ 0x70
 8002012:	4b5c      	ldr	r3, [pc, #368]	@ (8002184 <HAL_RCC_OscConfig+0x470>)
 8002014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002016:	4a5b      	ldr	r2, [pc, #364]	@ (8002184 <HAL_RCC_OscConfig+0x470>)
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	6713      	str	r3, [r2, #112]	@ 0x70
 800201e:	e00b      	b.n	8002038 <HAL_RCC_OscConfig+0x324>
 8002020:	4b58      	ldr	r3, [pc, #352]	@ (8002184 <HAL_RCC_OscConfig+0x470>)
 8002022:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002024:	4a57      	ldr	r2, [pc, #348]	@ (8002184 <HAL_RCC_OscConfig+0x470>)
 8002026:	f023 0301 	bic.w	r3, r3, #1
 800202a:	6713      	str	r3, [r2, #112]	@ 0x70
 800202c:	4b55      	ldr	r3, [pc, #340]	@ (8002184 <HAL_RCC_OscConfig+0x470>)
 800202e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002030:	4a54      	ldr	r2, [pc, #336]	@ (8002184 <HAL_RCC_OscConfig+0x470>)
 8002032:	f023 0304 	bic.w	r3, r3, #4
 8002036:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d015      	beq.n	800206c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002040:	f7ff fb66 	bl	8001710 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002046:	e00a      	b.n	800205e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002048:	f7ff fb62 	bl	8001710 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002056:	4293      	cmp	r3, r2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e0cb      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800205e:	4b49      	ldr	r3, [pc, #292]	@ (8002184 <HAL_RCC_OscConfig+0x470>)
 8002060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0ee      	beq.n	8002048 <HAL_RCC_OscConfig+0x334>
 800206a:	e014      	b.n	8002096 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206c:	f7ff fb50 	bl	8001710 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002072:	e00a      	b.n	800208a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002074:	f7ff fb4c 	bl	8001710 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002082:	4293      	cmp	r3, r2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e0b5      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800208a:	4b3e      	ldr	r3, [pc, #248]	@ (8002184 <HAL_RCC_OscConfig+0x470>)
 800208c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1ee      	bne.n	8002074 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002096:	7dfb      	ldrb	r3, [r7, #23]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d105      	bne.n	80020a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800209c:	4b39      	ldr	r3, [pc, #228]	@ (8002184 <HAL_RCC_OscConfig+0x470>)
 800209e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a0:	4a38      	ldr	r2, [pc, #224]	@ (8002184 <HAL_RCC_OscConfig+0x470>)
 80020a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 80a1 	beq.w	80021f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020b2:	4b34      	ldr	r3, [pc, #208]	@ (8002184 <HAL_RCC_OscConfig+0x470>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 030c 	and.w	r3, r3, #12
 80020ba:	2b08      	cmp	r3, #8
 80020bc:	d05c      	beq.n	8002178 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d141      	bne.n	800214a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c6:	4b31      	ldr	r3, [pc, #196]	@ (800218c <HAL_RCC_OscConfig+0x478>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020cc:	f7ff fb20 	bl	8001710 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020d4:	f7ff fb1c 	bl	8001710 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e087      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020e6:	4b27      	ldr	r3, [pc, #156]	@ (8002184 <HAL_RCC_OscConfig+0x470>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f0      	bne.n	80020d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69da      	ldr	r2, [r3, #28]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002100:	019b      	lsls	r3, r3, #6
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002108:	085b      	lsrs	r3, r3, #1
 800210a:	3b01      	subs	r3, #1
 800210c:	041b      	lsls	r3, r3, #16
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002114:	061b      	lsls	r3, r3, #24
 8002116:	491b      	ldr	r1, [pc, #108]	@ (8002184 <HAL_RCC_OscConfig+0x470>)
 8002118:	4313      	orrs	r3, r2
 800211a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800211c:	4b1b      	ldr	r3, [pc, #108]	@ (800218c <HAL_RCC_OscConfig+0x478>)
 800211e:	2201      	movs	r2, #1
 8002120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002122:	f7ff faf5 	bl	8001710 <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002128:	e008      	b.n	800213c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800212a:	f7ff faf1 	bl	8001710 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e05c      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800213c:	4b11      	ldr	r3, [pc, #68]	@ (8002184 <HAL_RCC_OscConfig+0x470>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d0f0      	beq.n	800212a <HAL_RCC_OscConfig+0x416>
 8002148:	e054      	b.n	80021f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214a:	4b10      	ldr	r3, [pc, #64]	@ (800218c <HAL_RCC_OscConfig+0x478>)
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002150:	f7ff fade 	bl	8001710 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002158:	f7ff fada 	bl	8001710 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e045      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800216a:	4b06      	ldr	r3, [pc, #24]	@ (8002184 <HAL_RCC_OscConfig+0x470>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f0      	bne.n	8002158 <HAL_RCC_OscConfig+0x444>
 8002176:	e03d      	b.n	80021f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d107      	bne.n	8002190 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e038      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
 8002184:	40023800 	.word	0x40023800
 8002188:	40007000 	.word	0x40007000
 800218c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002190:	4b1b      	ldr	r3, [pc, #108]	@ (8002200 <HAL_RCC_OscConfig+0x4ec>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d028      	beq.n	80021f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d121      	bne.n	80021f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d11a      	bne.n	80021f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80021c0:	4013      	ands	r3, r2
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80021c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d111      	bne.n	80021f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d6:	085b      	lsrs	r3, r3, #1
 80021d8:	3b01      	subs	r3, #1
 80021da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021dc:	429a      	cmp	r2, r3
 80021de:	d107      	bne.n	80021f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d001      	beq.n	80021f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e000      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40023800 	.word	0x40023800

08002204 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e0cc      	b.n	80023b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002218:	4b68      	ldr	r3, [pc, #416]	@ (80023bc <HAL_RCC_ClockConfig+0x1b8>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d90c      	bls.n	8002240 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002226:	4b65      	ldr	r3, [pc, #404]	@ (80023bc <HAL_RCC_ClockConfig+0x1b8>)
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800222e:	4b63      	ldr	r3, [pc, #396]	@ (80023bc <HAL_RCC_ClockConfig+0x1b8>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	429a      	cmp	r2, r3
 800223a:	d001      	beq.n	8002240 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e0b8      	b.n	80023b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d020      	beq.n	800228e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b00      	cmp	r3, #0
 8002256:	d005      	beq.n	8002264 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002258:	4b59      	ldr	r3, [pc, #356]	@ (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	4a58      	ldr	r2, [pc, #352]	@ (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 800225e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002262:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0308 	and.w	r3, r3, #8
 800226c:	2b00      	cmp	r3, #0
 800226e:	d005      	beq.n	800227c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002270:	4b53      	ldr	r3, [pc, #332]	@ (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	4a52      	ldr	r2, [pc, #328]	@ (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002276:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800227a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800227c:	4b50      	ldr	r3, [pc, #320]	@ (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	494d      	ldr	r1, [pc, #308]	@ (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 800228a:	4313      	orrs	r3, r2
 800228c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d044      	beq.n	8002324 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d107      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a2:	4b47      	ldr	r3, [pc, #284]	@ (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d119      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e07f      	b.n	80023b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d003      	beq.n	80022c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022be:	2b03      	cmp	r3, #3
 80022c0:	d107      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022c2:	4b3f      	ldr	r3, [pc, #252]	@ (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d109      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e06f      	b.n	80023b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d2:	4b3b      	ldr	r3, [pc, #236]	@ (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e067      	b.n	80023b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022e2:	4b37      	ldr	r3, [pc, #220]	@ (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f023 0203 	bic.w	r2, r3, #3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	4934      	ldr	r1, [pc, #208]	@ (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022f4:	f7ff fa0c 	bl	8001710 <HAL_GetTick>
 80022f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022fa:	e00a      	b.n	8002312 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022fc:	f7ff fa08 	bl	8001710 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	f241 3288 	movw	r2, #5000	@ 0x1388
 800230a:	4293      	cmp	r3, r2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e04f      	b.n	80023b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002312:	4b2b      	ldr	r3, [pc, #172]	@ (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 020c 	and.w	r2, r3, #12
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	429a      	cmp	r2, r3
 8002322:	d1eb      	bne.n	80022fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002324:	4b25      	ldr	r3, [pc, #148]	@ (80023bc <HAL_RCC_ClockConfig+0x1b8>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	429a      	cmp	r2, r3
 8002330:	d20c      	bcs.n	800234c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002332:	4b22      	ldr	r3, [pc, #136]	@ (80023bc <HAL_RCC_ClockConfig+0x1b8>)
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800233a:	4b20      	ldr	r3, [pc, #128]	@ (80023bc <HAL_RCC_ClockConfig+0x1b8>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	429a      	cmp	r2, r3
 8002346:	d001      	beq.n	800234c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e032      	b.n	80023b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	2b00      	cmp	r3, #0
 8002356:	d008      	beq.n	800236a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002358:	4b19      	ldr	r3, [pc, #100]	@ (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	4916      	ldr	r1, [pc, #88]	@ (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002366:	4313      	orrs	r3, r2
 8002368:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	2b00      	cmp	r3, #0
 8002374:	d009      	beq.n	800238a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002376:	4b12      	ldr	r3, [pc, #72]	@ (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	490e      	ldr	r1, [pc, #56]	@ (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	4313      	orrs	r3, r2
 8002388:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800238a:	f000 f821 	bl	80023d0 <HAL_RCC_GetSysClockFreq>
 800238e:	4602      	mov	r2, r0
 8002390:	4b0b      	ldr	r3, [pc, #44]	@ (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	091b      	lsrs	r3, r3, #4
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	490a      	ldr	r1, [pc, #40]	@ (80023c4 <HAL_RCC_ClockConfig+0x1c0>)
 800239c:	5ccb      	ldrb	r3, [r1, r3]
 800239e:	fa22 f303 	lsr.w	r3, r2, r3
 80023a2:	4a09      	ldr	r2, [pc, #36]	@ (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 80023a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023a6:	4b09      	ldr	r3, [pc, #36]	@ (80023cc <HAL_RCC_ClockConfig+0x1c8>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff f96c 	bl	8001688 <HAL_InitTick>

  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40023c00 	.word	0x40023c00
 80023c0:	40023800 	.word	0x40023800
 80023c4:	08003db8 	.word	0x08003db8
 80023c8:	20000000 	.word	0x20000000
 80023cc:	20000004 	.word	0x20000004

080023d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023d4:	b090      	sub	sp, #64	@ 0x40
 80023d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023d8:	2300      	movs	r3, #0
 80023da:	637b      	str	r3, [r7, #52]	@ 0x34
 80023dc:	2300      	movs	r3, #0
 80023de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023e0:	2300      	movs	r3, #0
 80023e2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023e8:	4b59      	ldr	r3, [pc, #356]	@ (8002550 <HAL_RCC_GetSysClockFreq+0x180>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f003 030c 	and.w	r3, r3, #12
 80023f0:	2b08      	cmp	r3, #8
 80023f2:	d00d      	beq.n	8002410 <HAL_RCC_GetSysClockFreq+0x40>
 80023f4:	2b08      	cmp	r3, #8
 80023f6:	f200 80a1 	bhi.w	800253c <HAL_RCC_GetSysClockFreq+0x16c>
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d002      	beq.n	8002404 <HAL_RCC_GetSysClockFreq+0x34>
 80023fe:	2b04      	cmp	r3, #4
 8002400:	d003      	beq.n	800240a <HAL_RCC_GetSysClockFreq+0x3a>
 8002402:	e09b      	b.n	800253c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002404:	4b53      	ldr	r3, [pc, #332]	@ (8002554 <HAL_RCC_GetSysClockFreq+0x184>)
 8002406:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002408:	e09b      	b.n	8002542 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800240a:	4b53      	ldr	r3, [pc, #332]	@ (8002558 <HAL_RCC_GetSysClockFreq+0x188>)
 800240c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800240e:	e098      	b.n	8002542 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002410:	4b4f      	ldr	r3, [pc, #316]	@ (8002550 <HAL_RCC_GetSysClockFreq+0x180>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002418:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800241a:	4b4d      	ldr	r3, [pc, #308]	@ (8002550 <HAL_RCC_GetSysClockFreq+0x180>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d028      	beq.n	8002478 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002426:	4b4a      	ldr	r3, [pc, #296]	@ (8002550 <HAL_RCC_GetSysClockFreq+0x180>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	099b      	lsrs	r3, r3, #6
 800242c:	2200      	movs	r2, #0
 800242e:	623b      	str	r3, [r7, #32]
 8002430:	627a      	str	r2, [r7, #36]	@ 0x24
 8002432:	6a3b      	ldr	r3, [r7, #32]
 8002434:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002438:	2100      	movs	r1, #0
 800243a:	4b47      	ldr	r3, [pc, #284]	@ (8002558 <HAL_RCC_GetSysClockFreq+0x188>)
 800243c:	fb03 f201 	mul.w	r2, r3, r1
 8002440:	2300      	movs	r3, #0
 8002442:	fb00 f303 	mul.w	r3, r0, r3
 8002446:	4413      	add	r3, r2
 8002448:	4a43      	ldr	r2, [pc, #268]	@ (8002558 <HAL_RCC_GetSysClockFreq+0x188>)
 800244a:	fba0 1202 	umull	r1, r2, r0, r2
 800244e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002450:	460a      	mov	r2, r1
 8002452:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002454:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002456:	4413      	add	r3, r2
 8002458:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800245a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800245c:	2200      	movs	r2, #0
 800245e:	61bb      	str	r3, [r7, #24]
 8002460:	61fa      	str	r2, [r7, #28]
 8002462:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002466:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800246a:	f7fd ff09 	bl	8000280 <__aeabi_uldivmod>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4613      	mov	r3, r2
 8002474:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002476:	e053      	b.n	8002520 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002478:	4b35      	ldr	r3, [pc, #212]	@ (8002550 <HAL_RCC_GetSysClockFreq+0x180>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	099b      	lsrs	r3, r3, #6
 800247e:	2200      	movs	r2, #0
 8002480:	613b      	str	r3, [r7, #16]
 8002482:	617a      	str	r2, [r7, #20]
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800248a:	f04f 0b00 	mov.w	fp, #0
 800248e:	4652      	mov	r2, sl
 8002490:	465b      	mov	r3, fp
 8002492:	f04f 0000 	mov.w	r0, #0
 8002496:	f04f 0100 	mov.w	r1, #0
 800249a:	0159      	lsls	r1, r3, #5
 800249c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024a0:	0150      	lsls	r0, r2, #5
 80024a2:	4602      	mov	r2, r0
 80024a4:	460b      	mov	r3, r1
 80024a6:	ebb2 080a 	subs.w	r8, r2, sl
 80024aa:	eb63 090b 	sbc.w	r9, r3, fp
 80024ae:	f04f 0200 	mov.w	r2, #0
 80024b2:	f04f 0300 	mov.w	r3, #0
 80024b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80024ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80024be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80024c2:	ebb2 0408 	subs.w	r4, r2, r8
 80024c6:	eb63 0509 	sbc.w	r5, r3, r9
 80024ca:	f04f 0200 	mov.w	r2, #0
 80024ce:	f04f 0300 	mov.w	r3, #0
 80024d2:	00eb      	lsls	r3, r5, #3
 80024d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024d8:	00e2      	lsls	r2, r4, #3
 80024da:	4614      	mov	r4, r2
 80024dc:	461d      	mov	r5, r3
 80024de:	eb14 030a 	adds.w	r3, r4, sl
 80024e2:	603b      	str	r3, [r7, #0]
 80024e4:	eb45 030b 	adc.w	r3, r5, fp
 80024e8:	607b      	str	r3, [r7, #4]
 80024ea:	f04f 0200 	mov.w	r2, #0
 80024ee:	f04f 0300 	mov.w	r3, #0
 80024f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024f6:	4629      	mov	r1, r5
 80024f8:	028b      	lsls	r3, r1, #10
 80024fa:	4621      	mov	r1, r4
 80024fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002500:	4621      	mov	r1, r4
 8002502:	028a      	lsls	r2, r1, #10
 8002504:	4610      	mov	r0, r2
 8002506:	4619      	mov	r1, r3
 8002508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800250a:	2200      	movs	r2, #0
 800250c:	60bb      	str	r3, [r7, #8]
 800250e:	60fa      	str	r2, [r7, #12]
 8002510:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002514:	f7fd feb4 	bl	8000280 <__aeabi_uldivmod>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	4613      	mov	r3, r2
 800251e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002520:	4b0b      	ldr	r3, [pc, #44]	@ (8002550 <HAL_RCC_GetSysClockFreq+0x180>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	0c1b      	lsrs	r3, r3, #16
 8002526:	f003 0303 	and.w	r3, r3, #3
 800252a:	3301      	adds	r3, #1
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002530:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002534:	fbb2 f3f3 	udiv	r3, r2, r3
 8002538:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800253a:	e002      	b.n	8002542 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800253c:	4b05      	ldr	r3, [pc, #20]	@ (8002554 <HAL_RCC_GetSysClockFreq+0x184>)
 800253e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002540:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002544:	4618      	mov	r0, r3
 8002546:	3740      	adds	r7, #64	@ 0x40
 8002548:	46bd      	mov	sp, r7
 800254a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800254e:	bf00      	nop
 8002550:	40023800 	.word	0x40023800
 8002554:	00f42400 	.word	0x00f42400
 8002558:	017d7840 	.word	0x017d7840

0800255c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e07b      	b.n	8002666 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002572:	2b00      	cmp	r3, #0
 8002574:	d108      	bne.n	8002588 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800257e:	d009      	beq.n	8002594 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	61da      	str	r2, [r3, #28]
 8002586:	e005      	b.n	8002594 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d106      	bne.n	80025b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7fe fede 	bl	8001370 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2202      	movs	r2, #2
 80025b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80025dc:	431a      	orrs	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025e6:	431a      	orrs	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	431a      	orrs	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	431a      	orrs	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002604:	431a      	orrs	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002618:	ea42 0103 	orr.w	r1, r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002620:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	0c1b      	lsrs	r3, r3, #16
 8002632:	f003 0104 	and.w	r1, r3, #4
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263a:	f003 0210 	and.w	r2, r3, #16
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	69da      	ldr	r2, [r3, #28]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002654:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b08c      	sub	sp, #48	@ 0x30
 8002672:	af00      	add	r7, sp, #0
 8002674:	60f8      	str	r0, [r7, #12]
 8002676:	60b9      	str	r1, [r7, #8]
 8002678:	607a      	str	r2, [r7, #4]
 800267a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800267c:	2301      	movs	r3, #1
 800267e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002680:	2300      	movs	r3, #0
 8002682:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800268c:	2b01      	cmp	r3, #1
 800268e:	d101      	bne.n	8002694 <HAL_SPI_TransmitReceive+0x26>
 8002690:	2302      	movs	r3, #2
 8002692:	e198      	b.n	80029c6 <HAL_SPI_TransmitReceive+0x358>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800269c:	f7ff f838 	bl	8001710 <HAL_GetTick>
 80026a0:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80026a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80026b2:	887b      	ldrh	r3, [r7, #2]
 80026b4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80026b6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d00f      	beq.n	80026de <HAL_SPI_TransmitReceive+0x70>
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80026c4:	d107      	bne.n	80026d6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d103      	bne.n	80026d6 <HAL_SPI_TransmitReceive+0x68>
 80026ce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	d003      	beq.n	80026de <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80026d6:	2302      	movs	r3, #2
 80026d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80026dc:	e16d      	b.n	80029ba <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d005      	beq.n	80026f0 <HAL_SPI_TransmitReceive+0x82>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d002      	beq.n	80026f0 <HAL_SPI_TransmitReceive+0x82>
 80026ea:	887b      	ldrh	r3, [r7, #2]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d103      	bne.n	80026f8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80026f6:	e160      	b.n	80029ba <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b04      	cmp	r3, #4
 8002702:	d003      	beq.n	800270c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2205      	movs	r2, #5
 8002708:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	887a      	ldrh	r2, [r7, #2]
 800271c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	887a      	ldrh	r2, [r7, #2]
 8002722:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	887a      	ldrh	r2, [r7, #2]
 800272e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	887a      	ldrh	r2, [r7, #2]
 8002734:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800274c:	2b40      	cmp	r3, #64	@ 0x40
 800274e:	d007      	beq.n	8002760 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800275e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002768:	d17c      	bne.n	8002864 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d002      	beq.n	8002778 <HAL_SPI_TransmitReceive+0x10a>
 8002772:	8b7b      	ldrh	r3, [r7, #26]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d16a      	bne.n	800284e <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277c:	881a      	ldrh	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002788:	1c9a      	adds	r2, r3, #2
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002792:	b29b      	uxth	r3, r3
 8002794:	3b01      	subs	r3, #1
 8002796:	b29a      	uxth	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800279c:	e057      	b.n	800284e <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d11b      	bne.n	80027e4 <HAL_SPI_TransmitReceive+0x176>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d016      	beq.n	80027e4 <HAL_SPI_TransmitReceive+0x176>
 80027b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d113      	bne.n	80027e4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c0:	881a      	ldrh	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027cc:	1c9a      	adds	r2, r3, #2
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	3b01      	subs	r3, #1
 80027da:	b29a      	uxth	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027e0:	2300      	movs	r3, #0
 80027e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d119      	bne.n	8002826 <HAL_SPI_TransmitReceive+0x1b8>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d014      	beq.n	8002826 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002806:	b292      	uxth	r2, r2
 8002808:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800280e:	1c9a      	adds	r2, r3, #2
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002818:	b29b      	uxth	r3, r3
 800281a:	3b01      	subs	r3, #1
 800281c:	b29a      	uxth	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002822:	2301      	movs	r3, #1
 8002824:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002826:	f7fe ff73 	bl	8001710 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002832:	429a      	cmp	r2, r3
 8002834:	d80b      	bhi.n	800284e <HAL_SPI_TransmitReceive+0x1e0>
 8002836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800283c:	d007      	beq.n	800284e <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800284c:	e0b5      	b.n	80029ba <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002852:	b29b      	uxth	r3, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1a2      	bne.n	800279e <HAL_SPI_TransmitReceive+0x130>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800285c:	b29b      	uxth	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d19d      	bne.n	800279e <HAL_SPI_TransmitReceive+0x130>
 8002862:	e080      	b.n	8002966 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d002      	beq.n	8002872 <HAL_SPI_TransmitReceive+0x204>
 800286c:	8b7b      	ldrh	r3, [r7, #26]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d16f      	bne.n	8002952 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	330c      	adds	r3, #12
 800287c:	7812      	ldrb	r2, [r2, #0]
 800287e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002884:	1c5a      	adds	r2, r3, #1
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800288e:	b29b      	uxth	r3, r3
 8002890:	3b01      	subs	r3, #1
 8002892:	b29a      	uxth	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002898:	e05b      	b.n	8002952 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d11c      	bne.n	80028e2 <HAL_SPI_TransmitReceive+0x274>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d017      	beq.n	80028e2 <HAL_SPI_TransmitReceive+0x274>
 80028b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d114      	bne.n	80028e2 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	330c      	adds	r3, #12
 80028c2:	7812      	ldrb	r2, [r2, #0]
 80028c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ca:	1c5a      	adds	r2, r3, #1
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	3b01      	subs	r3, #1
 80028d8:	b29a      	uxth	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028de:	2300      	movs	r3, #0
 80028e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d119      	bne.n	8002924 <HAL_SPI_TransmitReceive+0x2b6>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d014      	beq.n	8002924 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68da      	ldr	r2, [r3, #12]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800290c:	1c5a      	adds	r2, r3, #1
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002916:	b29b      	uxth	r3, r3
 8002918:	3b01      	subs	r3, #1
 800291a:	b29a      	uxth	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002920:	2301      	movs	r3, #1
 8002922:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002924:	f7fe fef4 	bl	8001710 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002930:	429a      	cmp	r2, r3
 8002932:	d803      	bhi.n	800293c <HAL_SPI_TransmitReceive+0x2ce>
 8002934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800293a:	d102      	bne.n	8002942 <HAL_SPI_TransmitReceive+0x2d4>
 800293c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800293e:	2b00      	cmp	r3, #0
 8002940:	d107      	bne.n	8002952 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8002950:	e033      	b.n	80029ba <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002956:	b29b      	uxth	r3, r3
 8002958:	2b00      	cmp	r3, #0
 800295a:	d19e      	bne.n	800289a <HAL_SPI_TransmitReceive+0x22c>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002960:	b29b      	uxth	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d199      	bne.n	800289a <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002966:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002968:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 f9ca 	bl	8002d04 <SPI_EndRxTxTransaction>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d006      	beq.n	8002984 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2220      	movs	r2, #32
 8002980:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8002982:	e01a      	b.n	80029ba <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10a      	bne.n	80029a2 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800298c:	2300      	movs	r3, #0
 800298e:	617b      	str	r3, [r7, #20]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	617b      	str	r3, [r7, #20]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	617b      	str	r3, [r7, #20]
 80029a0:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80029b0:	e003      	b.n	80029ba <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80029c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3730      	adds	r7, #48	@ 0x30
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
	...

080029d0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b088      	sub	sp, #32
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10e      	bne.n	8002a10 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d009      	beq.n	8002a10 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d004      	beq.n	8002a10 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	4798      	blx	r3
    return;
 8002a0e:	e0ce      	b.n	8002bae <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d009      	beq.n	8002a2e <HAL_SPI_IRQHandler+0x5e>
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d004      	beq.n	8002a2e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	4798      	blx	r3
    return;
 8002a2c:	e0bf      	b.n	8002bae <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	f003 0320 	and.w	r3, r3, #32
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10a      	bne.n	8002a4e <HAL_SPI_IRQHandler+0x7e>
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d105      	bne.n	8002a4e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 80b0 	beq.w	8002bae <HAL_SPI_IRQHandler+0x1de>
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	f003 0320 	and.w	r3, r3, #32
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f000 80aa 	beq.w	8002bae <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d023      	beq.n	8002aac <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b03      	cmp	r3, #3
 8002a6e:	d011      	beq.n	8002a94 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a74:	f043 0204 	orr.w	r2, r3, #4
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	617b      	str	r3, [r7, #20]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	617b      	str	r3, [r7, #20]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	617b      	str	r3, [r7, #20]
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	e00b      	b.n	8002aac <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a94:	2300      	movs	r3, #0
 8002a96:	613b      	str	r3, [r7, #16]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	613b      	str	r3, [r7, #16]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	613b      	str	r3, [r7, #16]
 8002aa8:	693b      	ldr	r3, [r7, #16]
        return;
 8002aaa:	e080      	b.n	8002bae <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	f003 0320 	and.w	r3, r3, #32
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d014      	beq.n	8002ae0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aba:	f043 0201 	orr.w	r2, r3, #1
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00c      	beq.n	8002b04 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aee:	f043 0208 	orr.w	r2, r3, #8
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002af6:	2300      	movs	r3, #0
 8002af8:	60bb      	str	r3, [r7, #8]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	60bb      	str	r3, [r7, #8]
 8002b02:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d04f      	beq.n	8002bac <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002b1a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d104      	bne.n	8002b38 <HAL_SPI_IRQHandler+0x168>
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d034      	beq.n	8002ba2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 0203 	bic.w	r2, r2, #3
 8002b46:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d011      	beq.n	8002b74 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b54:	4a17      	ldr	r2, [pc, #92]	@ (8002bb4 <HAL_SPI_IRQHandler+0x1e4>)
 8002b56:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7fe ff18 	bl	8001992 <HAL_DMA_Abort_IT>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d005      	beq.n	8002b74 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b6c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d016      	beq.n	8002baa <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b80:	4a0c      	ldr	r2, [pc, #48]	@ (8002bb4 <HAL_SPI_IRQHandler+0x1e4>)
 8002b82:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fe ff02 	bl	8001992 <HAL_DMA_Abort_IT>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00a      	beq.n	8002baa <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b98:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8002ba0:	e003      	b.n	8002baa <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f808 	bl	8002bb8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002ba8:	e000      	b.n	8002bac <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002baa:	bf00      	nop
    return;
 8002bac:	bf00      	nop
  }
}
 8002bae:	3720      	adds	r7, #32
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	08002bcd 	.word	0x08002bcd

08002bb8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f7ff ffe6 	bl	8002bb8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002bec:	bf00      	nop
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b088      	sub	sp, #32
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	603b      	str	r3, [r7, #0]
 8002c00:	4613      	mov	r3, r2
 8002c02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c04:	f7fe fd84 	bl	8001710 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c0c:	1a9b      	subs	r3, r3, r2
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	4413      	add	r3, r2
 8002c12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c14:	f7fe fd7c 	bl	8001710 <HAL_GetTick>
 8002c18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c1a:	4b39      	ldr	r3, [pc, #228]	@ (8002d00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	015b      	lsls	r3, r3, #5
 8002c20:	0d1b      	lsrs	r3, r3, #20
 8002c22:	69fa      	ldr	r2, [r7, #28]
 8002c24:	fb02 f303 	mul.w	r3, r2, r3
 8002c28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c2a:	e054      	b.n	8002cd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c32:	d050      	beq.n	8002cd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c34:	f7fe fd6c 	bl	8001710 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	69fa      	ldr	r2, [r7, #28]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d902      	bls.n	8002c4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d13d      	bne.n	8002cc6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	685a      	ldr	r2, [r3, #4]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002c58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c62:	d111      	bne.n	8002c88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c6c:	d004      	beq.n	8002c78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c76:	d107      	bne.n	8002c88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c90:	d10f      	bne.n	8002cb2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002cb0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e017      	b.n	8002cf6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	68ba      	ldr	r2, [r7, #8]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	bf0c      	ite	eq
 8002ce6:	2301      	moveq	r3, #1
 8002ce8:	2300      	movne	r3, #0
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	461a      	mov	r2, r3
 8002cee:	79fb      	ldrb	r3, [r7, #7]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d19b      	bne.n	8002c2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3720      	adds	r7, #32
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000000 	.word	0x20000000

08002d04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b088      	sub	sp, #32
 8002d08:	af02      	add	r7, sp, #8
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	2201      	movs	r2, #1
 8002d18:	2102      	movs	r1, #2
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f7ff ff6a 	bl	8002bf4 <SPI_WaitFlagStateUntilTimeout>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d007      	beq.n	8002d36 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d2a:	f043 0220 	orr.w	r2, r3, #32
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e032      	b.n	8002d9c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002d36:	4b1b      	ldr	r3, [pc, #108]	@ (8002da4 <SPI_EndRxTxTransaction+0xa0>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a1b      	ldr	r2, [pc, #108]	@ (8002da8 <SPI_EndRxTxTransaction+0xa4>)
 8002d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d40:	0d5b      	lsrs	r3, r3, #21
 8002d42:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002d46:	fb02 f303 	mul.w	r3, r2, r3
 8002d4a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d54:	d112      	bne.n	8002d7c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	9300      	str	r3, [sp, #0]
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	2180      	movs	r1, #128	@ 0x80
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f7ff ff47 	bl	8002bf4 <SPI_WaitFlagStateUntilTimeout>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d016      	beq.n	8002d9a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d70:	f043 0220 	orr.w	r2, r3, #32
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e00f      	b.n	8002d9c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00a      	beq.n	8002d98 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	3b01      	subs	r3, #1
 8002d86:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d92:	2b80      	cmp	r3, #128	@ 0x80
 8002d94:	d0f2      	beq.n	8002d7c <SPI_EndRxTxTransaction+0x78>
 8002d96:	e000      	b.n	8002d9a <SPI_EndRxTxTransaction+0x96>
        break;
 8002d98:	bf00      	nop
  }

  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3718      	adds	r7, #24
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	20000000 	.word	0x20000000
 8002da8:	165e9f81 	.word	0x165e9f81

08002dac <std>:
 8002dac:	2300      	movs	r3, #0
 8002dae:	b510      	push	{r4, lr}
 8002db0:	4604      	mov	r4, r0
 8002db2:	e9c0 3300 	strd	r3, r3, [r0]
 8002db6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002dba:	6083      	str	r3, [r0, #8]
 8002dbc:	8181      	strh	r1, [r0, #12]
 8002dbe:	6643      	str	r3, [r0, #100]	@ 0x64
 8002dc0:	81c2      	strh	r2, [r0, #14]
 8002dc2:	6183      	str	r3, [r0, #24]
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	2208      	movs	r2, #8
 8002dc8:	305c      	adds	r0, #92	@ 0x5c
 8002dca:	f000 f906 	bl	8002fda <memset>
 8002dce:	4b0d      	ldr	r3, [pc, #52]	@ (8002e04 <std+0x58>)
 8002dd0:	6263      	str	r3, [r4, #36]	@ 0x24
 8002dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8002e08 <std+0x5c>)
 8002dd4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8002e0c <std+0x60>)
 8002dd8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002dda:	4b0d      	ldr	r3, [pc, #52]	@ (8002e10 <std+0x64>)
 8002ddc:	6323      	str	r3, [r4, #48]	@ 0x30
 8002dde:	4b0d      	ldr	r3, [pc, #52]	@ (8002e14 <std+0x68>)
 8002de0:	6224      	str	r4, [r4, #32]
 8002de2:	429c      	cmp	r4, r3
 8002de4:	d006      	beq.n	8002df4 <std+0x48>
 8002de6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002dea:	4294      	cmp	r4, r2
 8002dec:	d002      	beq.n	8002df4 <std+0x48>
 8002dee:	33d0      	adds	r3, #208	@ 0xd0
 8002df0:	429c      	cmp	r4, r3
 8002df2:	d105      	bne.n	8002e00 <std+0x54>
 8002df4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002dfc:	f000 b966 	b.w	80030cc <__retarget_lock_init_recursive>
 8002e00:	bd10      	pop	{r4, pc}
 8002e02:	bf00      	nop
 8002e04:	08002f55 	.word	0x08002f55
 8002e08:	08002f77 	.word	0x08002f77
 8002e0c:	08002faf 	.word	0x08002faf
 8002e10:	08002fd3 	.word	0x08002fd3
 8002e14:	20000244 	.word	0x20000244

08002e18 <stdio_exit_handler>:
 8002e18:	4a02      	ldr	r2, [pc, #8]	@ (8002e24 <stdio_exit_handler+0xc>)
 8002e1a:	4903      	ldr	r1, [pc, #12]	@ (8002e28 <stdio_exit_handler+0x10>)
 8002e1c:	4803      	ldr	r0, [pc, #12]	@ (8002e2c <stdio_exit_handler+0x14>)
 8002e1e:	f000 b869 	b.w	8002ef4 <_fwalk_sglue>
 8002e22:	bf00      	nop
 8002e24:	2000000c 	.word	0x2000000c
 8002e28:	0800396d 	.word	0x0800396d
 8002e2c:	2000001c 	.word	0x2000001c

08002e30 <cleanup_stdio>:
 8002e30:	6841      	ldr	r1, [r0, #4]
 8002e32:	4b0c      	ldr	r3, [pc, #48]	@ (8002e64 <cleanup_stdio+0x34>)
 8002e34:	4299      	cmp	r1, r3
 8002e36:	b510      	push	{r4, lr}
 8002e38:	4604      	mov	r4, r0
 8002e3a:	d001      	beq.n	8002e40 <cleanup_stdio+0x10>
 8002e3c:	f000 fd96 	bl	800396c <_fflush_r>
 8002e40:	68a1      	ldr	r1, [r4, #8]
 8002e42:	4b09      	ldr	r3, [pc, #36]	@ (8002e68 <cleanup_stdio+0x38>)
 8002e44:	4299      	cmp	r1, r3
 8002e46:	d002      	beq.n	8002e4e <cleanup_stdio+0x1e>
 8002e48:	4620      	mov	r0, r4
 8002e4a:	f000 fd8f 	bl	800396c <_fflush_r>
 8002e4e:	68e1      	ldr	r1, [r4, #12]
 8002e50:	4b06      	ldr	r3, [pc, #24]	@ (8002e6c <cleanup_stdio+0x3c>)
 8002e52:	4299      	cmp	r1, r3
 8002e54:	d004      	beq.n	8002e60 <cleanup_stdio+0x30>
 8002e56:	4620      	mov	r0, r4
 8002e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e5c:	f000 bd86 	b.w	800396c <_fflush_r>
 8002e60:	bd10      	pop	{r4, pc}
 8002e62:	bf00      	nop
 8002e64:	20000244 	.word	0x20000244
 8002e68:	200002ac 	.word	0x200002ac
 8002e6c:	20000314 	.word	0x20000314

08002e70 <global_stdio_init.part.0>:
 8002e70:	b510      	push	{r4, lr}
 8002e72:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea0 <global_stdio_init.part.0+0x30>)
 8002e74:	4c0b      	ldr	r4, [pc, #44]	@ (8002ea4 <global_stdio_init.part.0+0x34>)
 8002e76:	4a0c      	ldr	r2, [pc, #48]	@ (8002ea8 <global_stdio_init.part.0+0x38>)
 8002e78:	601a      	str	r2, [r3, #0]
 8002e7a:	4620      	mov	r0, r4
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	2104      	movs	r1, #4
 8002e80:	f7ff ff94 	bl	8002dac <std>
 8002e84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002e88:	2201      	movs	r2, #1
 8002e8a:	2109      	movs	r1, #9
 8002e8c:	f7ff ff8e 	bl	8002dac <std>
 8002e90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002e94:	2202      	movs	r2, #2
 8002e96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e9a:	2112      	movs	r1, #18
 8002e9c:	f7ff bf86 	b.w	8002dac <std>
 8002ea0:	2000037c 	.word	0x2000037c
 8002ea4:	20000244 	.word	0x20000244
 8002ea8:	08002e19 	.word	0x08002e19

08002eac <__sfp_lock_acquire>:
 8002eac:	4801      	ldr	r0, [pc, #4]	@ (8002eb4 <__sfp_lock_acquire+0x8>)
 8002eae:	f000 b90e 	b.w	80030ce <__retarget_lock_acquire_recursive>
 8002eb2:	bf00      	nop
 8002eb4:	20000385 	.word	0x20000385

08002eb8 <__sfp_lock_release>:
 8002eb8:	4801      	ldr	r0, [pc, #4]	@ (8002ec0 <__sfp_lock_release+0x8>)
 8002eba:	f000 b909 	b.w	80030d0 <__retarget_lock_release_recursive>
 8002ebe:	bf00      	nop
 8002ec0:	20000385 	.word	0x20000385

08002ec4 <__sinit>:
 8002ec4:	b510      	push	{r4, lr}
 8002ec6:	4604      	mov	r4, r0
 8002ec8:	f7ff fff0 	bl	8002eac <__sfp_lock_acquire>
 8002ecc:	6a23      	ldr	r3, [r4, #32]
 8002ece:	b11b      	cbz	r3, 8002ed8 <__sinit+0x14>
 8002ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ed4:	f7ff bff0 	b.w	8002eb8 <__sfp_lock_release>
 8002ed8:	4b04      	ldr	r3, [pc, #16]	@ (8002eec <__sinit+0x28>)
 8002eda:	6223      	str	r3, [r4, #32]
 8002edc:	4b04      	ldr	r3, [pc, #16]	@ (8002ef0 <__sinit+0x2c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1f5      	bne.n	8002ed0 <__sinit+0xc>
 8002ee4:	f7ff ffc4 	bl	8002e70 <global_stdio_init.part.0>
 8002ee8:	e7f2      	b.n	8002ed0 <__sinit+0xc>
 8002eea:	bf00      	nop
 8002eec:	08002e31 	.word	0x08002e31
 8002ef0:	2000037c 	.word	0x2000037c

08002ef4 <_fwalk_sglue>:
 8002ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ef8:	4607      	mov	r7, r0
 8002efa:	4688      	mov	r8, r1
 8002efc:	4614      	mov	r4, r2
 8002efe:	2600      	movs	r6, #0
 8002f00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002f04:	f1b9 0901 	subs.w	r9, r9, #1
 8002f08:	d505      	bpl.n	8002f16 <_fwalk_sglue+0x22>
 8002f0a:	6824      	ldr	r4, [r4, #0]
 8002f0c:	2c00      	cmp	r4, #0
 8002f0e:	d1f7      	bne.n	8002f00 <_fwalk_sglue+0xc>
 8002f10:	4630      	mov	r0, r6
 8002f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f16:	89ab      	ldrh	r3, [r5, #12]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d907      	bls.n	8002f2c <_fwalk_sglue+0x38>
 8002f1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002f20:	3301      	adds	r3, #1
 8002f22:	d003      	beq.n	8002f2c <_fwalk_sglue+0x38>
 8002f24:	4629      	mov	r1, r5
 8002f26:	4638      	mov	r0, r7
 8002f28:	47c0      	blx	r8
 8002f2a:	4306      	orrs	r6, r0
 8002f2c:	3568      	adds	r5, #104	@ 0x68
 8002f2e:	e7e9      	b.n	8002f04 <_fwalk_sglue+0x10>

08002f30 <iprintf>:
 8002f30:	b40f      	push	{r0, r1, r2, r3}
 8002f32:	b507      	push	{r0, r1, r2, lr}
 8002f34:	4906      	ldr	r1, [pc, #24]	@ (8002f50 <iprintf+0x20>)
 8002f36:	ab04      	add	r3, sp, #16
 8002f38:	6808      	ldr	r0, [r1, #0]
 8002f3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f3e:	6881      	ldr	r1, [r0, #8]
 8002f40:	9301      	str	r3, [sp, #4]
 8002f42:	f000 f9e9 	bl	8003318 <_vfiprintf_r>
 8002f46:	b003      	add	sp, #12
 8002f48:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f4c:	b004      	add	sp, #16
 8002f4e:	4770      	bx	lr
 8002f50:	20000018 	.word	0x20000018

08002f54 <__sread>:
 8002f54:	b510      	push	{r4, lr}
 8002f56:	460c      	mov	r4, r1
 8002f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f5c:	f000 f868 	bl	8003030 <_read_r>
 8002f60:	2800      	cmp	r0, #0
 8002f62:	bfab      	itete	ge
 8002f64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002f66:	89a3      	ldrhlt	r3, [r4, #12]
 8002f68:	181b      	addge	r3, r3, r0
 8002f6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002f6e:	bfac      	ite	ge
 8002f70:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002f72:	81a3      	strhlt	r3, [r4, #12]
 8002f74:	bd10      	pop	{r4, pc}

08002f76 <__swrite>:
 8002f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f7a:	461f      	mov	r7, r3
 8002f7c:	898b      	ldrh	r3, [r1, #12]
 8002f7e:	05db      	lsls	r3, r3, #23
 8002f80:	4605      	mov	r5, r0
 8002f82:	460c      	mov	r4, r1
 8002f84:	4616      	mov	r6, r2
 8002f86:	d505      	bpl.n	8002f94 <__swrite+0x1e>
 8002f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f000 f83c 	bl	800300c <_lseek_r>
 8002f94:	89a3      	ldrh	r3, [r4, #12]
 8002f96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f9e:	81a3      	strh	r3, [r4, #12]
 8002fa0:	4632      	mov	r2, r6
 8002fa2:	463b      	mov	r3, r7
 8002fa4:	4628      	mov	r0, r5
 8002fa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002faa:	f000 b853 	b.w	8003054 <_write_r>

08002fae <__sseek>:
 8002fae:	b510      	push	{r4, lr}
 8002fb0:	460c      	mov	r4, r1
 8002fb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fb6:	f000 f829 	bl	800300c <_lseek_r>
 8002fba:	1c43      	adds	r3, r0, #1
 8002fbc:	89a3      	ldrh	r3, [r4, #12]
 8002fbe:	bf15      	itete	ne
 8002fc0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002fc2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002fc6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002fca:	81a3      	strheq	r3, [r4, #12]
 8002fcc:	bf18      	it	ne
 8002fce:	81a3      	strhne	r3, [r4, #12]
 8002fd0:	bd10      	pop	{r4, pc}

08002fd2 <__sclose>:
 8002fd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fd6:	f000 b809 	b.w	8002fec <_close_r>

08002fda <memset>:
 8002fda:	4402      	add	r2, r0
 8002fdc:	4603      	mov	r3, r0
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d100      	bne.n	8002fe4 <memset+0xa>
 8002fe2:	4770      	bx	lr
 8002fe4:	f803 1b01 	strb.w	r1, [r3], #1
 8002fe8:	e7f9      	b.n	8002fde <memset+0x4>
	...

08002fec <_close_r>:
 8002fec:	b538      	push	{r3, r4, r5, lr}
 8002fee:	4d06      	ldr	r5, [pc, #24]	@ (8003008 <_close_r+0x1c>)
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	4604      	mov	r4, r0
 8002ff4:	4608      	mov	r0, r1
 8002ff6:	602b      	str	r3, [r5, #0]
 8002ff8:	f7fe fa7d 	bl	80014f6 <_close>
 8002ffc:	1c43      	adds	r3, r0, #1
 8002ffe:	d102      	bne.n	8003006 <_close_r+0x1a>
 8003000:	682b      	ldr	r3, [r5, #0]
 8003002:	b103      	cbz	r3, 8003006 <_close_r+0x1a>
 8003004:	6023      	str	r3, [r4, #0]
 8003006:	bd38      	pop	{r3, r4, r5, pc}
 8003008:	20000380 	.word	0x20000380

0800300c <_lseek_r>:
 800300c:	b538      	push	{r3, r4, r5, lr}
 800300e:	4d07      	ldr	r5, [pc, #28]	@ (800302c <_lseek_r+0x20>)
 8003010:	4604      	mov	r4, r0
 8003012:	4608      	mov	r0, r1
 8003014:	4611      	mov	r1, r2
 8003016:	2200      	movs	r2, #0
 8003018:	602a      	str	r2, [r5, #0]
 800301a:	461a      	mov	r2, r3
 800301c:	f7fe fa92 	bl	8001544 <_lseek>
 8003020:	1c43      	adds	r3, r0, #1
 8003022:	d102      	bne.n	800302a <_lseek_r+0x1e>
 8003024:	682b      	ldr	r3, [r5, #0]
 8003026:	b103      	cbz	r3, 800302a <_lseek_r+0x1e>
 8003028:	6023      	str	r3, [r4, #0]
 800302a:	bd38      	pop	{r3, r4, r5, pc}
 800302c:	20000380 	.word	0x20000380

08003030 <_read_r>:
 8003030:	b538      	push	{r3, r4, r5, lr}
 8003032:	4d07      	ldr	r5, [pc, #28]	@ (8003050 <_read_r+0x20>)
 8003034:	4604      	mov	r4, r0
 8003036:	4608      	mov	r0, r1
 8003038:	4611      	mov	r1, r2
 800303a:	2200      	movs	r2, #0
 800303c:	602a      	str	r2, [r5, #0]
 800303e:	461a      	mov	r2, r3
 8003040:	f7fe fa20 	bl	8001484 <_read>
 8003044:	1c43      	adds	r3, r0, #1
 8003046:	d102      	bne.n	800304e <_read_r+0x1e>
 8003048:	682b      	ldr	r3, [r5, #0]
 800304a:	b103      	cbz	r3, 800304e <_read_r+0x1e>
 800304c:	6023      	str	r3, [r4, #0]
 800304e:	bd38      	pop	{r3, r4, r5, pc}
 8003050:	20000380 	.word	0x20000380

08003054 <_write_r>:
 8003054:	b538      	push	{r3, r4, r5, lr}
 8003056:	4d07      	ldr	r5, [pc, #28]	@ (8003074 <_write_r+0x20>)
 8003058:	4604      	mov	r4, r0
 800305a:	4608      	mov	r0, r1
 800305c:	4611      	mov	r1, r2
 800305e:	2200      	movs	r2, #0
 8003060:	602a      	str	r2, [r5, #0]
 8003062:	461a      	mov	r2, r3
 8003064:	f7fe fa2b 	bl	80014be <_write>
 8003068:	1c43      	adds	r3, r0, #1
 800306a:	d102      	bne.n	8003072 <_write_r+0x1e>
 800306c:	682b      	ldr	r3, [r5, #0]
 800306e:	b103      	cbz	r3, 8003072 <_write_r+0x1e>
 8003070:	6023      	str	r3, [r4, #0]
 8003072:	bd38      	pop	{r3, r4, r5, pc}
 8003074:	20000380 	.word	0x20000380

08003078 <__errno>:
 8003078:	4b01      	ldr	r3, [pc, #4]	@ (8003080 <__errno+0x8>)
 800307a:	6818      	ldr	r0, [r3, #0]
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	20000018 	.word	0x20000018

08003084 <__libc_init_array>:
 8003084:	b570      	push	{r4, r5, r6, lr}
 8003086:	4d0d      	ldr	r5, [pc, #52]	@ (80030bc <__libc_init_array+0x38>)
 8003088:	4c0d      	ldr	r4, [pc, #52]	@ (80030c0 <__libc_init_array+0x3c>)
 800308a:	1b64      	subs	r4, r4, r5
 800308c:	10a4      	asrs	r4, r4, #2
 800308e:	2600      	movs	r6, #0
 8003090:	42a6      	cmp	r6, r4
 8003092:	d109      	bne.n	80030a8 <__libc_init_array+0x24>
 8003094:	4d0b      	ldr	r5, [pc, #44]	@ (80030c4 <__libc_init_array+0x40>)
 8003096:	4c0c      	ldr	r4, [pc, #48]	@ (80030c8 <__libc_init_array+0x44>)
 8003098:	f000 fdb8 	bl	8003c0c <_init>
 800309c:	1b64      	subs	r4, r4, r5
 800309e:	10a4      	asrs	r4, r4, #2
 80030a0:	2600      	movs	r6, #0
 80030a2:	42a6      	cmp	r6, r4
 80030a4:	d105      	bne.n	80030b2 <__libc_init_array+0x2e>
 80030a6:	bd70      	pop	{r4, r5, r6, pc}
 80030a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80030ac:	4798      	blx	r3
 80030ae:	3601      	adds	r6, #1
 80030b0:	e7ee      	b.n	8003090 <__libc_init_array+0xc>
 80030b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80030b6:	4798      	blx	r3
 80030b8:	3601      	adds	r6, #1
 80030ba:	e7f2      	b.n	80030a2 <__libc_init_array+0x1e>
 80030bc:	08003e04 	.word	0x08003e04
 80030c0:	08003e04 	.word	0x08003e04
 80030c4:	08003e04 	.word	0x08003e04
 80030c8:	08003e08 	.word	0x08003e08

080030cc <__retarget_lock_init_recursive>:
 80030cc:	4770      	bx	lr

080030ce <__retarget_lock_acquire_recursive>:
 80030ce:	4770      	bx	lr

080030d0 <__retarget_lock_release_recursive>:
 80030d0:	4770      	bx	lr
	...

080030d4 <_free_r>:
 80030d4:	b538      	push	{r3, r4, r5, lr}
 80030d6:	4605      	mov	r5, r0
 80030d8:	2900      	cmp	r1, #0
 80030da:	d041      	beq.n	8003160 <_free_r+0x8c>
 80030dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030e0:	1f0c      	subs	r4, r1, #4
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	bfb8      	it	lt
 80030e6:	18e4      	addlt	r4, r4, r3
 80030e8:	f000 f8e0 	bl	80032ac <__malloc_lock>
 80030ec:	4a1d      	ldr	r2, [pc, #116]	@ (8003164 <_free_r+0x90>)
 80030ee:	6813      	ldr	r3, [r2, #0]
 80030f0:	b933      	cbnz	r3, 8003100 <_free_r+0x2c>
 80030f2:	6063      	str	r3, [r4, #4]
 80030f4:	6014      	str	r4, [r2, #0]
 80030f6:	4628      	mov	r0, r5
 80030f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030fc:	f000 b8dc 	b.w	80032b8 <__malloc_unlock>
 8003100:	42a3      	cmp	r3, r4
 8003102:	d908      	bls.n	8003116 <_free_r+0x42>
 8003104:	6820      	ldr	r0, [r4, #0]
 8003106:	1821      	adds	r1, r4, r0
 8003108:	428b      	cmp	r3, r1
 800310a:	bf01      	itttt	eq
 800310c:	6819      	ldreq	r1, [r3, #0]
 800310e:	685b      	ldreq	r3, [r3, #4]
 8003110:	1809      	addeq	r1, r1, r0
 8003112:	6021      	streq	r1, [r4, #0]
 8003114:	e7ed      	b.n	80030f2 <_free_r+0x1e>
 8003116:	461a      	mov	r2, r3
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	b10b      	cbz	r3, 8003120 <_free_r+0x4c>
 800311c:	42a3      	cmp	r3, r4
 800311e:	d9fa      	bls.n	8003116 <_free_r+0x42>
 8003120:	6811      	ldr	r1, [r2, #0]
 8003122:	1850      	adds	r0, r2, r1
 8003124:	42a0      	cmp	r0, r4
 8003126:	d10b      	bne.n	8003140 <_free_r+0x6c>
 8003128:	6820      	ldr	r0, [r4, #0]
 800312a:	4401      	add	r1, r0
 800312c:	1850      	adds	r0, r2, r1
 800312e:	4283      	cmp	r3, r0
 8003130:	6011      	str	r1, [r2, #0]
 8003132:	d1e0      	bne.n	80030f6 <_free_r+0x22>
 8003134:	6818      	ldr	r0, [r3, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	6053      	str	r3, [r2, #4]
 800313a:	4408      	add	r0, r1
 800313c:	6010      	str	r0, [r2, #0]
 800313e:	e7da      	b.n	80030f6 <_free_r+0x22>
 8003140:	d902      	bls.n	8003148 <_free_r+0x74>
 8003142:	230c      	movs	r3, #12
 8003144:	602b      	str	r3, [r5, #0]
 8003146:	e7d6      	b.n	80030f6 <_free_r+0x22>
 8003148:	6820      	ldr	r0, [r4, #0]
 800314a:	1821      	adds	r1, r4, r0
 800314c:	428b      	cmp	r3, r1
 800314e:	bf04      	itt	eq
 8003150:	6819      	ldreq	r1, [r3, #0]
 8003152:	685b      	ldreq	r3, [r3, #4]
 8003154:	6063      	str	r3, [r4, #4]
 8003156:	bf04      	itt	eq
 8003158:	1809      	addeq	r1, r1, r0
 800315a:	6021      	streq	r1, [r4, #0]
 800315c:	6054      	str	r4, [r2, #4]
 800315e:	e7ca      	b.n	80030f6 <_free_r+0x22>
 8003160:	bd38      	pop	{r3, r4, r5, pc}
 8003162:	bf00      	nop
 8003164:	2000038c 	.word	0x2000038c

08003168 <sbrk_aligned>:
 8003168:	b570      	push	{r4, r5, r6, lr}
 800316a:	4e0f      	ldr	r6, [pc, #60]	@ (80031a8 <sbrk_aligned+0x40>)
 800316c:	460c      	mov	r4, r1
 800316e:	6831      	ldr	r1, [r6, #0]
 8003170:	4605      	mov	r5, r0
 8003172:	b911      	cbnz	r1, 800317a <sbrk_aligned+0x12>
 8003174:	f000 fcb6 	bl	8003ae4 <_sbrk_r>
 8003178:	6030      	str	r0, [r6, #0]
 800317a:	4621      	mov	r1, r4
 800317c:	4628      	mov	r0, r5
 800317e:	f000 fcb1 	bl	8003ae4 <_sbrk_r>
 8003182:	1c43      	adds	r3, r0, #1
 8003184:	d103      	bne.n	800318e <sbrk_aligned+0x26>
 8003186:	f04f 34ff 	mov.w	r4, #4294967295
 800318a:	4620      	mov	r0, r4
 800318c:	bd70      	pop	{r4, r5, r6, pc}
 800318e:	1cc4      	adds	r4, r0, #3
 8003190:	f024 0403 	bic.w	r4, r4, #3
 8003194:	42a0      	cmp	r0, r4
 8003196:	d0f8      	beq.n	800318a <sbrk_aligned+0x22>
 8003198:	1a21      	subs	r1, r4, r0
 800319a:	4628      	mov	r0, r5
 800319c:	f000 fca2 	bl	8003ae4 <_sbrk_r>
 80031a0:	3001      	adds	r0, #1
 80031a2:	d1f2      	bne.n	800318a <sbrk_aligned+0x22>
 80031a4:	e7ef      	b.n	8003186 <sbrk_aligned+0x1e>
 80031a6:	bf00      	nop
 80031a8:	20000388 	.word	0x20000388

080031ac <_malloc_r>:
 80031ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031b0:	1ccd      	adds	r5, r1, #3
 80031b2:	f025 0503 	bic.w	r5, r5, #3
 80031b6:	3508      	adds	r5, #8
 80031b8:	2d0c      	cmp	r5, #12
 80031ba:	bf38      	it	cc
 80031bc:	250c      	movcc	r5, #12
 80031be:	2d00      	cmp	r5, #0
 80031c0:	4606      	mov	r6, r0
 80031c2:	db01      	blt.n	80031c8 <_malloc_r+0x1c>
 80031c4:	42a9      	cmp	r1, r5
 80031c6:	d904      	bls.n	80031d2 <_malloc_r+0x26>
 80031c8:	230c      	movs	r3, #12
 80031ca:	6033      	str	r3, [r6, #0]
 80031cc:	2000      	movs	r0, #0
 80031ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80032a8 <_malloc_r+0xfc>
 80031d6:	f000 f869 	bl	80032ac <__malloc_lock>
 80031da:	f8d8 3000 	ldr.w	r3, [r8]
 80031de:	461c      	mov	r4, r3
 80031e0:	bb44      	cbnz	r4, 8003234 <_malloc_r+0x88>
 80031e2:	4629      	mov	r1, r5
 80031e4:	4630      	mov	r0, r6
 80031e6:	f7ff ffbf 	bl	8003168 <sbrk_aligned>
 80031ea:	1c43      	adds	r3, r0, #1
 80031ec:	4604      	mov	r4, r0
 80031ee:	d158      	bne.n	80032a2 <_malloc_r+0xf6>
 80031f0:	f8d8 4000 	ldr.w	r4, [r8]
 80031f4:	4627      	mov	r7, r4
 80031f6:	2f00      	cmp	r7, #0
 80031f8:	d143      	bne.n	8003282 <_malloc_r+0xd6>
 80031fa:	2c00      	cmp	r4, #0
 80031fc:	d04b      	beq.n	8003296 <_malloc_r+0xea>
 80031fe:	6823      	ldr	r3, [r4, #0]
 8003200:	4639      	mov	r1, r7
 8003202:	4630      	mov	r0, r6
 8003204:	eb04 0903 	add.w	r9, r4, r3
 8003208:	f000 fc6c 	bl	8003ae4 <_sbrk_r>
 800320c:	4581      	cmp	r9, r0
 800320e:	d142      	bne.n	8003296 <_malloc_r+0xea>
 8003210:	6821      	ldr	r1, [r4, #0]
 8003212:	1a6d      	subs	r5, r5, r1
 8003214:	4629      	mov	r1, r5
 8003216:	4630      	mov	r0, r6
 8003218:	f7ff ffa6 	bl	8003168 <sbrk_aligned>
 800321c:	3001      	adds	r0, #1
 800321e:	d03a      	beq.n	8003296 <_malloc_r+0xea>
 8003220:	6823      	ldr	r3, [r4, #0]
 8003222:	442b      	add	r3, r5
 8003224:	6023      	str	r3, [r4, #0]
 8003226:	f8d8 3000 	ldr.w	r3, [r8]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	bb62      	cbnz	r2, 8003288 <_malloc_r+0xdc>
 800322e:	f8c8 7000 	str.w	r7, [r8]
 8003232:	e00f      	b.n	8003254 <_malloc_r+0xa8>
 8003234:	6822      	ldr	r2, [r4, #0]
 8003236:	1b52      	subs	r2, r2, r5
 8003238:	d420      	bmi.n	800327c <_malloc_r+0xd0>
 800323a:	2a0b      	cmp	r2, #11
 800323c:	d917      	bls.n	800326e <_malloc_r+0xc2>
 800323e:	1961      	adds	r1, r4, r5
 8003240:	42a3      	cmp	r3, r4
 8003242:	6025      	str	r5, [r4, #0]
 8003244:	bf18      	it	ne
 8003246:	6059      	strne	r1, [r3, #4]
 8003248:	6863      	ldr	r3, [r4, #4]
 800324a:	bf08      	it	eq
 800324c:	f8c8 1000 	streq.w	r1, [r8]
 8003250:	5162      	str	r2, [r4, r5]
 8003252:	604b      	str	r3, [r1, #4]
 8003254:	4630      	mov	r0, r6
 8003256:	f000 f82f 	bl	80032b8 <__malloc_unlock>
 800325a:	f104 000b 	add.w	r0, r4, #11
 800325e:	1d23      	adds	r3, r4, #4
 8003260:	f020 0007 	bic.w	r0, r0, #7
 8003264:	1ac2      	subs	r2, r0, r3
 8003266:	bf1c      	itt	ne
 8003268:	1a1b      	subne	r3, r3, r0
 800326a:	50a3      	strne	r3, [r4, r2]
 800326c:	e7af      	b.n	80031ce <_malloc_r+0x22>
 800326e:	6862      	ldr	r2, [r4, #4]
 8003270:	42a3      	cmp	r3, r4
 8003272:	bf0c      	ite	eq
 8003274:	f8c8 2000 	streq.w	r2, [r8]
 8003278:	605a      	strne	r2, [r3, #4]
 800327a:	e7eb      	b.n	8003254 <_malloc_r+0xa8>
 800327c:	4623      	mov	r3, r4
 800327e:	6864      	ldr	r4, [r4, #4]
 8003280:	e7ae      	b.n	80031e0 <_malloc_r+0x34>
 8003282:	463c      	mov	r4, r7
 8003284:	687f      	ldr	r7, [r7, #4]
 8003286:	e7b6      	b.n	80031f6 <_malloc_r+0x4a>
 8003288:	461a      	mov	r2, r3
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	42a3      	cmp	r3, r4
 800328e:	d1fb      	bne.n	8003288 <_malloc_r+0xdc>
 8003290:	2300      	movs	r3, #0
 8003292:	6053      	str	r3, [r2, #4]
 8003294:	e7de      	b.n	8003254 <_malloc_r+0xa8>
 8003296:	230c      	movs	r3, #12
 8003298:	6033      	str	r3, [r6, #0]
 800329a:	4630      	mov	r0, r6
 800329c:	f000 f80c 	bl	80032b8 <__malloc_unlock>
 80032a0:	e794      	b.n	80031cc <_malloc_r+0x20>
 80032a2:	6005      	str	r5, [r0, #0]
 80032a4:	e7d6      	b.n	8003254 <_malloc_r+0xa8>
 80032a6:	bf00      	nop
 80032a8:	2000038c 	.word	0x2000038c

080032ac <__malloc_lock>:
 80032ac:	4801      	ldr	r0, [pc, #4]	@ (80032b4 <__malloc_lock+0x8>)
 80032ae:	f7ff bf0e 	b.w	80030ce <__retarget_lock_acquire_recursive>
 80032b2:	bf00      	nop
 80032b4:	20000384 	.word	0x20000384

080032b8 <__malloc_unlock>:
 80032b8:	4801      	ldr	r0, [pc, #4]	@ (80032c0 <__malloc_unlock+0x8>)
 80032ba:	f7ff bf09 	b.w	80030d0 <__retarget_lock_release_recursive>
 80032be:	bf00      	nop
 80032c0:	20000384 	.word	0x20000384

080032c4 <__sfputc_r>:
 80032c4:	6893      	ldr	r3, [r2, #8]
 80032c6:	3b01      	subs	r3, #1
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	b410      	push	{r4}
 80032cc:	6093      	str	r3, [r2, #8]
 80032ce:	da08      	bge.n	80032e2 <__sfputc_r+0x1e>
 80032d0:	6994      	ldr	r4, [r2, #24]
 80032d2:	42a3      	cmp	r3, r4
 80032d4:	db01      	blt.n	80032da <__sfputc_r+0x16>
 80032d6:	290a      	cmp	r1, #10
 80032d8:	d103      	bne.n	80032e2 <__sfputc_r+0x1e>
 80032da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032de:	f000 bb6d 	b.w	80039bc <__swbuf_r>
 80032e2:	6813      	ldr	r3, [r2, #0]
 80032e4:	1c58      	adds	r0, r3, #1
 80032e6:	6010      	str	r0, [r2, #0]
 80032e8:	7019      	strb	r1, [r3, #0]
 80032ea:	4608      	mov	r0, r1
 80032ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <__sfputs_r>:
 80032f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032f4:	4606      	mov	r6, r0
 80032f6:	460f      	mov	r7, r1
 80032f8:	4614      	mov	r4, r2
 80032fa:	18d5      	adds	r5, r2, r3
 80032fc:	42ac      	cmp	r4, r5
 80032fe:	d101      	bne.n	8003304 <__sfputs_r+0x12>
 8003300:	2000      	movs	r0, #0
 8003302:	e007      	b.n	8003314 <__sfputs_r+0x22>
 8003304:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003308:	463a      	mov	r2, r7
 800330a:	4630      	mov	r0, r6
 800330c:	f7ff ffda 	bl	80032c4 <__sfputc_r>
 8003310:	1c43      	adds	r3, r0, #1
 8003312:	d1f3      	bne.n	80032fc <__sfputs_r+0xa>
 8003314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003318 <_vfiprintf_r>:
 8003318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800331c:	460d      	mov	r5, r1
 800331e:	b09d      	sub	sp, #116	@ 0x74
 8003320:	4614      	mov	r4, r2
 8003322:	4698      	mov	r8, r3
 8003324:	4606      	mov	r6, r0
 8003326:	b118      	cbz	r0, 8003330 <_vfiprintf_r+0x18>
 8003328:	6a03      	ldr	r3, [r0, #32]
 800332a:	b90b      	cbnz	r3, 8003330 <_vfiprintf_r+0x18>
 800332c:	f7ff fdca 	bl	8002ec4 <__sinit>
 8003330:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003332:	07d9      	lsls	r1, r3, #31
 8003334:	d405      	bmi.n	8003342 <_vfiprintf_r+0x2a>
 8003336:	89ab      	ldrh	r3, [r5, #12]
 8003338:	059a      	lsls	r2, r3, #22
 800333a:	d402      	bmi.n	8003342 <_vfiprintf_r+0x2a>
 800333c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800333e:	f7ff fec6 	bl	80030ce <__retarget_lock_acquire_recursive>
 8003342:	89ab      	ldrh	r3, [r5, #12]
 8003344:	071b      	lsls	r3, r3, #28
 8003346:	d501      	bpl.n	800334c <_vfiprintf_r+0x34>
 8003348:	692b      	ldr	r3, [r5, #16]
 800334a:	b99b      	cbnz	r3, 8003374 <_vfiprintf_r+0x5c>
 800334c:	4629      	mov	r1, r5
 800334e:	4630      	mov	r0, r6
 8003350:	f000 fb72 	bl	8003a38 <__swsetup_r>
 8003354:	b170      	cbz	r0, 8003374 <_vfiprintf_r+0x5c>
 8003356:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003358:	07dc      	lsls	r4, r3, #31
 800335a:	d504      	bpl.n	8003366 <_vfiprintf_r+0x4e>
 800335c:	f04f 30ff 	mov.w	r0, #4294967295
 8003360:	b01d      	add	sp, #116	@ 0x74
 8003362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003366:	89ab      	ldrh	r3, [r5, #12]
 8003368:	0598      	lsls	r0, r3, #22
 800336a:	d4f7      	bmi.n	800335c <_vfiprintf_r+0x44>
 800336c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800336e:	f7ff feaf 	bl	80030d0 <__retarget_lock_release_recursive>
 8003372:	e7f3      	b.n	800335c <_vfiprintf_r+0x44>
 8003374:	2300      	movs	r3, #0
 8003376:	9309      	str	r3, [sp, #36]	@ 0x24
 8003378:	2320      	movs	r3, #32
 800337a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800337e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003382:	2330      	movs	r3, #48	@ 0x30
 8003384:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003534 <_vfiprintf_r+0x21c>
 8003388:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800338c:	f04f 0901 	mov.w	r9, #1
 8003390:	4623      	mov	r3, r4
 8003392:	469a      	mov	sl, r3
 8003394:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003398:	b10a      	cbz	r2, 800339e <_vfiprintf_r+0x86>
 800339a:	2a25      	cmp	r2, #37	@ 0x25
 800339c:	d1f9      	bne.n	8003392 <_vfiprintf_r+0x7a>
 800339e:	ebba 0b04 	subs.w	fp, sl, r4
 80033a2:	d00b      	beq.n	80033bc <_vfiprintf_r+0xa4>
 80033a4:	465b      	mov	r3, fp
 80033a6:	4622      	mov	r2, r4
 80033a8:	4629      	mov	r1, r5
 80033aa:	4630      	mov	r0, r6
 80033ac:	f7ff ffa1 	bl	80032f2 <__sfputs_r>
 80033b0:	3001      	adds	r0, #1
 80033b2:	f000 80a7 	beq.w	8003504 <_vfiprintf_r+0x1ec>
 80033b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80033b8:	445a      	add	r2, fp
 80033ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80033bc:	f89a 3000 	ldrb.w	r3, [sl]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 809f 	beq.w	8003504 <_vfiprintf_r+0x1ec>
 80033c6:	2300      	movs	r3, #0
 80033c8:	f04f 32ff 	mov.w	r2, #4294967295
 80033cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033d0:	f10a 0a01 	add.w	sl, sl, #1
 80033d4:	9304      	str	r3, [sp, #16]
 80033d6:	9307      	str	r3, [sp, #28]
 80033d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80033dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80033de:	4654      	mov	r4, sl
 80033e0:	2205      	movs	r2, #5
 80033e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033e6:	4853      	ldr	r0, [pc, #332]	@ (8003534 <_vfiprintf_r+0x21c>)
 80033e8:	f7fc fefa 	bl	80001e0 <memchr>
 80033ec:	9a04      	ldr	r2, [sp, #16]
 80033ee:	b9d8      	cbnz	r0, 8003428 <_vfiprintf_r+0x110>
 80033f0:	06d1      	lsls	r1, r2, #27
 80033f2:	bf44      	itt	mi
 80033f4:	2320      	movmi	r3, #32
 80033f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80033fa:	0713      	lsls	r3, r2, #28
 80033fc:	bf44      	itt	mi
 80033fe:	232b      	movmi	r3, #43	@ 0x2b
 8003400:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003404:	f89a 3000 	ldrb.w	r3, [sl]
 8003408:	2b2a      	cmp	r3, #42	@ 0x2a
 800340a:	d015      	beq.n	8003438 <_vfiprintf_r+0x120>
 800340c:	9a07      	ldr	r2, [sp, #28]
 800340e:	4654      	mov	r4, sl
 8003410:	2000      	movs	r0, #0
 8003412:	f04f 0c0a 	mov.w	ip, #10
 8003416:	4621      	mov	r1, r4
 8003418:	f811 3b01 	ldrb.w	r3, [r1], #1
 800341c:	3b30      	subs	r3, #48	@ 0x30
 800341e:	2b09      	cmp	r3, #9
 8003420:	d94b      	bls.n	80034ba <_vfiprintf_r+0x1a2>
 8003422:	b1b0      	cbz	r0, 8003452 <_vfiprintf_r+0x13a>
 8003424:	9207      	str	r2, [sp, #28]
 8003426:	e014      	b.n	8003452 <_vfiprintf_r+0x13a>
 8003428:	eba0 0308 	sub.w	r3, r0, r8
 800342c:	fa09 f303 	lsl.w	r3, r9, r3
 8003430:	4313      	orrs	r3, r2
 8003432:	9304      	str	r3, [sp, #16]
 8003434:	46a2      	mov	sl, r4
 8003436:	e7d2      	b.n	80033de <_vfiprintf_r+0xc6>
 8003438:	9b03      	ldr	r3, [sp, #12]
 800343a:	1d19      	adds	r1, r3, #4
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	9103      	str	r1, [sp, #12]
 8003440:	2b00      	cmp	r3, #0
 8003442:	bfbb      	ittet	lt
 8003444:	425b      	neglt	r3, r3
 8003446:	f042 0202 	orrlt.w	r2, r2, #2
 800344a:	9307      	strge	r3, [sp, #28]
 800344c:	9307      	strlt	r3, [sp, #28]
 800344e:	bfb8      	it	lt
 8003450:	9204      	strlt	r2, [sp, #16]
 8003452:	7823      	ldrb	r3, [r4, #0]
 8003454:	2b2e      	cmp	r3, #46	@ 0x2e
 8003456:	d10a      	bne.n	800346e <_vfiprintf_r+0x156>
 8003458:	7863      	ldrb	r3, [r4, #1]
 800345a:	2b2a      	cmp	r3, #42	@ 0x2a
 800345c:	d132      	bne.n	80034c4 <_vfiprintf_r+0x1ac>
 800345e:	9b03      	ldr	r3, [sp, #12]
 8003460:	1d1a      	adds	r2, r3, #4
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	9203      	str	r2, [sp, #12]
 8003466:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800346a:	3402      	adds	r4, #2
 800346c:	9305      	str	r3, [sp, #20]
 800346e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003544 <_vfiprintf_r+0x22c>
 8003472:	7821      	ldrb	r1, [r4, #0]
 8003474:	2203      	movs	r2, #3
 8003476:	4650      	mov	r0, sl
 8003478:	f7fc feb2 	bl	80001e0 <memchr>
 800347c:	b138      	cbz	r0, 800348e <_vfiprintf_r+0x176>
 800347e:	9b04      	ldr	r3, [sp, #16]
 8003480:	eba0 000a 	sub.w	r0, r0, sl
 8003484:	2240      	movs	r2, #64	@ 0x40
 8003486:	4082      	lsls	r2, r0
 8003488:	4313      	orrs	r3, r2
 800348a:	3401      	adds	r4, #1
 800348c:	9304      	str	r3, [sp, #16]
 800348e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003492:	4829      	ldr	r0, [pc, #164]	@ (8003538 <_vfiprintf_r+0x220>)
 8003494:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003498:	2206      	movs	r2, #6
 800349a:	f7fc fea1 	bl	80001e0 <memchr>
 800349e:	2800      	cmp	r0, #0
 80034a0:	d03f      	beq.n	8003522 <_vfiprintf_r+0x20a>
 80034a2:	4b26      	ldr	r3, [pc, #152]	@ (800353c <_vfiprintf_r+0x224>)
 80034a4:	bb1b      	cbnz	r3, 80034ee <_vfiprintf_r+0x1d6>
 80034a6:	9b03      	ldr	r3, [sp, #12]
 80034a8:	3307      	adds	r3, #7
 80034aa:	f023 0307 	bic.w	r3, r3, #7
 80034ae:	3308      	adds	r3, #8
 80034b0:	9303      	str	r3, [sp, #12]
 80034b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80034b4:	443b      	add	r3, r7
 80034b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80034b8:	e76a      	b.n	8003390 <_vfiprintf_r+0x78>
 80034ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80034be:	460c      	mov	r4, r1
 80034c0:	2001      	movs	r0, #1
 80034c2:	e7a8      	b.n	8003416 <_vfiprintf_r+0xfe>
 80034c4:	2300      	movs	r3, #0
 80034c6:	3401      	adds	r4, #1
 80034c8:	9305      	str	r3, [sp, #20]
 80034ca:	4619      	mov	r1, r3
 80034cc:	f04f 0c0a 	mov.w	ip, #10
 80034d0:	4620      	mov	r0, r4
 80034d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034d6:	3a30      	subs	r2, #48	@ 0x30
 80034d8:	2a09      	cmp	r2, #9
 80034da:	d903      	bls.n	80034e4 <_vfiprintf_r+0x1cc>
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d0c6      	beq.n	800346e <_vfiprintf_r+0x156>
 80034e0:	9105      	str	r1, [sp, #20]
 80034e2:	e7c4      	b.n	800346e <_vfiprintf_r+0x156>
 80034e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80034e8:	4604      	mov	r4, r0
 80034ea:	2301      	movs	r3, #1
 80034ec:	e7f0      	b.n	80034d0 <_vfiprintf_r+0x1b8>
 80034ee:	ab03      	add	r3, sp, #12
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	462a      	mov	r2, r5
 80034f4:	4b12      	ldr	r3, [pc, #72]	@ (8003540 <_vfiprintf_r+0x228>)
 80034f6:	a904      	add	r1, sp, #16
 80034f8:	4630      	mov	r0, r6
 80034fa:	f3af 8000 	nop.w
 80034fe:	4607      	mov	r7, r0
 8003500:	1c78      	adds	r0, r7, #1
 8003502:	d1d6      	bne.n	80034b2 <_vfiprintf_r+0x19a>
 8003504:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003506:	07d9      	lsls	r1, r3, #31
 8003508:	d405      	bmi.n	8003516 <_vfiprintf_r+0x1fe>
 800350a:	89ab      	ldrh	r3, [r5, #12]
 800350c:	059a      	lsls	r2, r3, #22
 800350e:	d402      	bmi.n	8003516 <_vfiprintf_r+0x1fe>
 8003510:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003512:	f7ff fddd 	bl	80030d0 <__retarget_lock_release_recursive>
 8003516:	89ab      	ldrh	r3, [r5, #12]
 8003518:	065b      	lsls	r3, r3, #25
 800351a:	f53f af1f 	bmi.w	800335c <_vfiprintf_r+0x44>
 800351e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003520:	e71e      	b.n	8003360 <_vfiprintf_r+0x48>
 8003522:	ab03      	add	r3, sp, #12
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	462a      	mov	r2, r5
 8003528:	4b05      	ldr	r3, [pc, #20]	@ (8003540 <_vfiprintf_r+0x228>)
 800352a:	a904      	add	r1, sp, #16
 800352c:	4630      	mov	r0, r6
 800352e:	f000 f879 	bl	8003624 <_printf_i>
 8003532:	e7e4      	b.n	80034fe <_vfiprintf_r+0x1e6>
 8003534:	08003dc8 	.word	0x08003dc8
 8003538:	08003dd2 	.word	0x08003dd2
 800353c:	00000000 	.word	0x00000000
 8003540:	080032f3 	.word	0x080032f3
 8003544:	08003dce 	.word	0x08003dce

08003548 <_printf_common>:
 8003548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800354c:	4616      	mov	r6, r2
 800354e:	4698      	mov	r8, r3
 8003550:	688a      	ldr	r2, [r1, #8]
 8003552:	690b      	ldr	r3, [r1, #16]
 8003554:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003558:	4293      	cmp	r3, r2
 800355a:	bfb8      	it	lt
 800355c:	4613      	movlt	r3, r2
 800355e:	6033      	str	r3, [r6, #0]
 8003560:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003564:	4607      	mov	r7, r0
 8003566:	460c      	mov	r4, r1
 8003568:	b10a      	cbz	r2, 800356e <_printf_common+0x26>
 800356a:	3301      	adds	r3, #1
 800356c:	6033      	str	r3, [r6, #0]
 800356e:	6823      	ldr	r3, [r4, #0]
 8003570:	0699      	lsls	r1, r3, #26
 8003572:	bf42      	ittt	mi
 8003574:	6833      	ldrmi	r3, [r6, #0]
 8003576:	3302      	addmi	r3, #2
 8003578:	6033      	strmi	r3, [r6, #0]
 800357a:	6825      	ldr	r5, [r4, #0]
 800357c:	f015 0506 	ands.w	r5, r5, #6
 8003580:	d106      	bne.n	8003590 <_printf_common+0x48>
 8003582:	f104 0a19 	add.w	sl, r4, #25
 8003586:	68e3      	ldr	r3, [r4, #12]
 8003588:	6832      	ldr	r2, [r6, #0]
 800358a:	1a9b      	subs	r3, r3, r2
 800358c:	42ab      	cmp	r3, r5
 800358e:	dc26      	bgt.n	80035de <_printf_common+0x96>
 8003590:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003594:	6822      	ldr	r2, [r4, #0]
 8003596:	3b00      	subs	r3, #0
 8003598:	bf18      	it	ne
 800359a:	2301      	movne	r3, #1
 800359c:	0692      	lsls	r2, r2, #26
 800359e:	d42b      	bmi.n	80035f8 <_printf_common+0xb0>
 80035a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80035a4:	4641      	mov	r1, r8
 80035a6:	4638      	mov	r0, r7
 80035a8:	47c8      	blx	r9
 80035aa:	3001      	adds	r0, #1
 80035ac:	d01e      	beq.n	80035ec <_printf_common+0xa4>
 80035ae:	6823      	ldr	r3, [r4, #0]
 80035b0:	6922      	ldr	r2, [r4, #16]
 80035b2:	f003 0306 	and.w	r3, r3, #6
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	bf02      	ittt	eq
 80035ba:	68e5      	ldreq	r5, [r4, #12]
 80035bc:	6833      	ldreq	r3, [r6, #0]
 80035be:	1aed      	subeq	r5, r5, r3
 80035c0:	68a3      	ldr	r3, [r4, #8]
 80035c2:	bf0c      	ite	eq
 80035c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035c8:	2500      	movne	r5, #0
 80035ca:	4293      	cmp	r3, r2
 80035cc:	bfc4      	itt	gt
 80035ce:	1a9b      	subgt	r3, r3, r2
 80035d0:	18ed      	addgt	r5, r5, r3
 80035d2:	2600      	movs	r6, #0
 80035d4:	341a      	adds	r4, #26
 80035d6:	42b5      	cmp	r5, r6
 80035d8:	d11a      	bne.n	8003610 <_printf_common+0xc8>
 80035da:	2000      	movs	r0, #0
 80035dc:	e008      	b.n	80035f0 <_printf_common+0xa8>
 80035de:	2301      	movs	r3, #1
 80035e0:	4652      	mov	r2, sl
 80035e2:	4641      	mov	r1, r8
 80035e4:	4638      	mov	r0, r7
 80035e6:	47c8      	blx	r9
 80035e8:	3001      	adds	r0, #1
 80035ea:	d103      	bne.n	80035f4 <_printf_common+0xac>
 80035ec:	f04f 30ff 	mov.w	r0, #4294967295
 80035f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035f4:	3501      	adds	r5, #1
 80035f6:	e7c6      	b.n	8003586 <_printf_common+0x3e>
 80035f8:	18e1      	adds	r1, r4, r3
 80035fa:	1c5a      	adds	r2, r3, #1
 80035fc:	2030      	movs	r0, #48	@ 0x30
 80035fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003602:	4422      	add	r2, r4
 8003604:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003608:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800360c:	3302      	adds	r3, #2
 800360e:	e7c7      	b.n	80035a0 <_printf_common+0x58>
 8003610:	2301      	movs	r3, #1
 8003612:	4622      	mov	r2, r4
 8003614:	4641      	mov	r1, r8
 8003616:	4638      	mov	r0, r7
 8003618:	47c8      	blx	r9
 800361a:	3001      	adds	r0, #1
 800361c:	d0e6      	beq.n	80035ec <_printf_common+0xa4>
 800361e:	3601      	adds	r6, #1
 8003620:	e7d9      	b.n	80035d6 <_printf_common+0x8e>
	...

08003624 <_printf_i>:
 8003624:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003628:	7e0f      	ldrb	r7, [r1, #24]
 800362a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800362c:	2f78      	cmp	r7, #120	@ 0x78
 800362e:	4691      	mov	r9, r2
 8003630:	4680      	mov	r8, r0
 8003632:	460c      	mov	r4, r1
 8003634:	469a      	mov	sl, r3
 8003636:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800363a:	d807      	bhi.n	800364c <_printf_i+0x28>
 800363c:	2f62      	cmp	r7, #98	@ 0x62
 800363e:	d80a      	bhi.n	8003656 <_printf_i+0x32>
 8003640:	2f00      	cmp	r7, #0
 8003642:	f000 80d2 	beq.w	80037ea <_printf_i+0x1c6>
 8003646:	2f58      	cmp	r7, #88	@ 0x58
 8003648:	f000 80b9 	beq.w	80037be <_printf_i+0x19a>
 800364c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003650:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003654:	e03a      	b.n	80036cc <_printf_i+0xa8>
 8003656:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800365a:	2b15      	cmp	r3, #21
 800365c:	d8f6      	bhi.n	800364c <_printf_i+0x28>
 800365e:	a101      	add	r1, pc, #4	@ (adr r1, 8003664 <_printf_i+0x40>)
 8003660:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003664:	080036bd 	.word	0x080036bd
 8003668:	080036d1 	.word	0x080036d1
 800366c:	0800364d 	.word	0x0800364d
 8003670:	0800364d 	.word	0x0800364d
 8003674:	0800364d 	.word	0x0800364d
 8003678:	0800364d 	.word	0x0800364d
 800367c:	080036d1 	.word	0x080036d1
 8003680:	0800364d 	.word	0x0800364d
 8003684:	0800364d 	.word	0x0800364d
 8003688:	0800364d 	.word	0x0800364d
 800368c:	0800364d 	.word	0x0800364d
 8003690:	080037d1 	.word	0x080037d1
 8003694:	080036fb 	.word	0x080036fb
 8003698:	0800378b 	.word	0x0800378b
 800369c:	0800364d 	.word	0x0800364d
 80036a0:	0800364d 	.word	0x0800364d
 80036a4:	080037f3 	.word	0x080037f3
 80036a8:	0800364d 	.word	0x0800364d
 80036ac:	080036fb 	.word	0x080036fb
 80036b0:	0800364d 	.word	0x0800364d
 80036b4:	0800364d 	.word	0x0800364d
 80036b8:	08003793 	.word	0x08003793
 80036bc:	6833      	ldr	r3, [r6, #0]
 80036be:	1d1a      	adds	r2, r3, #4
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6032      	str	r2, [r6, #0]
 80036c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80036c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80036cc:	2301      	movs	r3, #1
 80036ce:	e09d      	b.n	800380c <_printf_i+0x1e8>
 80036d0:	6833      	ldr	r3, [r6, #0]
 80036d2:	6820      	ldr	r0, [r4, #0]
 80036d4:	1d19      	adds	r1, r3, #4
 80036d6:	6031      	str	r1, [r6, #0]
 80036d8:	0606      	lsls	r6, r0, #24
 80036da:	d501      	bpl.n	80036e0 <_printf_i+0xbc>
 80036dc:	681d      	ldr	r5, [r3, #0]
 80036de:	e003      	b.n	80036e8 <_printf_i+0xc4>
 80036e0:	0645      	lsls	r5, r0, #25
 80036e2:	d5fb      	bpl.n	80036dc <_printf_i+0xb8>
 80036e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80036e8:	2d00      	cmp	r5, #0
 80036ea:	da03      	bge.n	80036f4 <_printf_i+0xd0>
 80036ec:	232d      	movs	r3, #45	@ 0x2d
 80036ee:	426d      	negs	r5, r5
 80036f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80036f4:	4859      	ldr	r0, [pc, #356]	@ (800385c <_printf_i+0x238>)
 80036f6:	230a      	movs	r3, #10
 80036f8:	e011      	b.n	800371e <_printf_i+0xfa>
 80036fa:	6821      	ldr	r1, [r4, #0]
 80036fc:	6833      	ldr	r3, [r6, #0]
 80036fe:	0608      	lsls	r0, r1, #24
 8003700:	f853 5b04 	ldr.w	r5, [r3], #4
 8003704:	d402      	bmi.n	800370c <_printf_i+0xe8>
 8003706:	0649      	lsls	r1, r1, #25
 8003708:	bf48      	it	mi
 800370a:	b2ad      	uxthmi	r5, r5
 800370c:	2f6f      	cmp	r7, #111	@ 0x6f
 800370e:	4853      	ldr	r0, [pc, #332]	@ (800385c <_printf_i+0x238>)
 8003710:	6033      	str	r3, [r6, #0]
 8003712:	bf14      	ite	ne
 8003714:	230a      	movne	r3, #10
 8003716:	2308      	moveq	r3, #8
 8003718:	2100      	movs	r1, #0
 800371a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800371e:	6866      	ldr	r6, [r4, #4]
 8003720:	60a6      	str	r6, [r4, #8]
 8003722:	2e00      	cmp	r6, #0
 8003724:	bfa2      	ittt	ge
 8003726:	6821      	ldrge	r1, [r4, #0]
 8003728:	f021 0104 	bicge.w	r1, r1, #4
 800372c:	6021      	strge	r1, [r4, #0]
 800372e:	b90d      	cbnz	r5, 8003734 <_printf_i+0x110>
 8003730:	2e00      	cmp	r6, #0
 8003732:	d04b      	beq.n	80037cc <_printf_i+0x1a8>
 8003734:	4616      	mov	r6, r2
 8003736:	fbb5 f1f3 	udiv	r1, r5, r3
 800373a:	fb03 5711 	mls	r7, r3, r1, r5
 800373e:	5dc7      	ldrb	r7, [r0, r7]
 8003740:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003744:	462f      	mov	r7, r5
 8003746:	42bb      	cmp	r3, r7
 8003748:	460d      	mov	r5, r1
 800374a:	d9f4      	bls.n	8003736 <_printf_i+0x112>
 800374c:	2b08      	cmp	r3, #8
 800374e:	d10b      	bne.n	8003768 <_printf_i+0x144>
 8003750:	6823      	ldr	r3, [r4, #0]
 8003752:	07df      	lsls	r7, r3, #31
 8003754:	d508      	bpl.n	8003768 <_printf_i+0x144>
 8003756:	6923      	ldr	r3, [r4, #16]
 8003758:	6861      	ldr	r1, [r4, #4]
 800375a:	4299      	cmp	r1, r3
 800375c:	bfde      	ittt	le
 800375e:	2330      	movle	r3, #48	@ 0x30
 8003760:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003764:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003768:	1b92      	subs	r2, r2, r6
 800376a:	6122      	str	r2, [r4, #16]
 800376c:	f8cd a000 	str.w	sl, [sp]
 8003770:	464b      	mov	r3, r9
 8003772:	aa03      	add	r2, sp, #12
 8003774:	4621      	mov	r1, r4
 8003776:	4640      	mov	r0, r8
 8003778:	f7ff fee6 	bl	8003548 <_printf_common>
 800377c:	3001      	adds	r0, #1
 800377e:	d14a      	bne.n	8003816 <_printf_i+0x1f2>
 8003780:	f04f 30ff 	mov.w	r0, #4294967295
 8003784:	b004      	add	sp, #16
 8003786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800378a:	6823      	ldr	r3, [r4, #0]
 800378c:	f043 0320 	orr.w	r3, r3, #32
 8003790:	6023      	str	r3, [r4, #0]
 8003792:	4833      	ldr	r0, [pc, #204]	@ (8003860 <_printf_i+0x23c>)
 8003794:	2778      	movs	r7, #120	@ 0x78
 8003796:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800379a:	6823      	ldr	r3, [r4, #0]
 800379c:	6831      	ldr	r1, [r6, #0]
 800379e:	061f      	lsls	r7, r3, #24
 80037a0:	f851 5b04 	ldr.w	r5, [r1], #4
 80037a4:	d402      	bmi.n	80037ac <_printf_i+0x188>
 80037a6:	065f      	lsls	r7, r3, #25
 80037a8:	bf48      	it	mi
 80037aa:	b2ad      	uxthmi	r5, r5
 80037ac:	6031      	str	r1, [r6, #0]
 80037ae:	07d9      	lsls	r1, r3, #31
 80037b0:	bf44      	itt	mi
 80037b2:	f043 0320 	orrmi.w	r3, r3, #32
 80037b6:	6023      	strmi	r3, [r4, #0]
 80037b8:	b11d      	cbz	r5, 80037c2 <_printf_i+0x19e>
 80037ba:	2310      	movs	r3, #16
 80037bc:	e7ac      	b.n	8003718 <_printf_i+0xf4>
 80037be:	4827      	ldr	r0, [pc, #156]	@ (800385c <_printf_i+0x238>)
 80037c0:	e7e9      	b.n	8003796 <_printf_i+0x172>
 80037c2:	6823      	ldr	r3, [r4, #0]
 80037c4:	f023 0320 	bic.w	r3, r3, #32
 80037c8:	6023      	str	r3, [r4, #0]
 80037ca:	e7f6      	b.n	80037ba <_printf_i+0x196>
 80037cc:	4616      	mov	r6, r2
 80037ce:	e7bd      	b.n	800374c <_printf_i+0x128>
 80037d0:	6833      	ldr	r3, [r6, #0]
 80037d2:	6825      	ldr	r5, [r4, #0]
 80037d4:	6961      	ldr	r1, [r4, #20]
 80037d6:	1d18      	adds	r0, r3, #4
 80037d8:	6030      	str	r0, [r6, #0]
 80037da:	062e      	lsls	r6, r5, #24
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	d501      	bpl.n	80037e4 <_printf_i+0x1c0>
 80037e0:	6019      	str	r1, [r3, #0]
 80037e2:	e002      	b.n	80037ea <_printf_i+0x1c6>
 80037e4:	0668      	lsls	r0, r5, #25
 80037e6:	d5fb      	bpl.n	80037e0 <_printf_i+0x1bc>
 80037e8:	8019      	strh	r1, [r3, #0]
 80037ea:	2300      	movs	r3, #0
 80037ec:	6123      	str	r3, [r4, #16]
 80037ee:	4616      	mov	r6, r2
 80037f0:	e7bc      	b.n	800376c <_printf_i+0x148>
 80037f2:	6833      	ldr	r3, [r6, #0]
 80037f4:	1d1a      	adds	r2, r3, #4
 80037f6:	6032      	str	r2, [r6, #0]
 80037f8:	681e      	ldr	r6, [r3, #0]
 80037fa:	6862      	ldr	r2, [r4, #4]
 80037fc:	2100      	movs	r1, #0
 80037fe:	4630      	mov	r0, r6
 8003800:	f7fc fcee 	bl	80001e0 <memchr>
 8003804:	b108      	cbz	r0, 800380a <_printf_i+0x1e6>
 8003806:	1b80      	subs	r0, r0, r6
 8003808:	6060      	str	r0, [r4, #4]
 800380a:	6863      	ldr	r3, [r4, #4]
 800380c:	6123      	str	r3, [r4, #16]
 800380e:	2300      	movs	r3, #0
 8003810:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003814:	e7aa      	b.n	800376c <_printf_i+0x148>
 8003816:	6923      	ldr	r3, [r4, #16]
 8003818:	4632      	mov	r2, r6
 800381a:	4649      	mov	r1, r9
 800381c:	4640      	mov	r0, r8
 800381e:	47d0      	blx	sl
 8003820:	3001      	adds	r0, #1
 8003822:	d0ad      	beq.n	8003780 <_printf_i+0x15c>
 8003824:	6823      	ldr	r3, [r4, #0]
 8003826:	079b      	lsls	r3, r3, #30
 8003828:	d413      	bmi.n	8003852 <_printf_i+0x22e>
 800382a:	68e0      	ldr	r0, [r4, #12]
 800382c:	9b03      	ldr	r3, [sp, #12]
 800382e:	4298      	cmp	r0, r3
 8003830:	bfb8      	it	lt
 8003832:	4618      	movlt	r0, r3
 8003834:	e7a6      	b.n	8003784 <_printf_i+0x160>
 8003836:	2301      	movs	r3, #1
 8003838:	4632      	mov	r2, r6
 800383a:	4649      	mov	r1, r9
 800383c:	4640      	mov	r0, r8
 800383e:	47d0      	blx	sl
 8003840:	3001      	adds	r0, #1
 8003842:	d09d      	beq.n	8003780 <_printf_i+0x15c>
 8003844:	3501      	adds	r5, #1
 8003846:	68e3      	ldr	r3, [r4, #12]
 8003848:	9903      	ldr	r1, [sp, #12]
 800384a:	1a5b      	subs	r3, r3, r1
 800384c:	42ab      	cmp	r3, r5
 800384e:	dcf2      	bgt.n	8003836 <_printf_i+0x212>
 8003850:	e7eb      	b.n	800382a <_printf_i+0x206>
 8003852:	2500      	movs	r5, #0
 8003854:	f104 0619 	add.w	r6, r4, #25
 8003858:	e7f5      	b.n	8003846 <_printf_i+0x222>
 800385a:	bf00      	nop
 800385c:	08003dd9 	.word	0x08003dd9
 8003860:	08003dea 	.word	0x08003dea

08003864 <__sflush_r>:
 8003864:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800386c:	0716      	lsls	r6, r2, #28
 800386e:	4605      	mov	r5, r0
 8003870:	460c      	mov	r4, r1
 8003872:	d454      	bmi.n	800391e <__sflush_r+0xba>
 8003874:	684b      	ldr	r3, [r1, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	dc02      	bgt.n	8003880 <__sflush_r+0x1c>
 800387a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800387c:	2b00      	cmp	r3, #0
 800387e:	dd48      	ble.n	8003912 <__sflush_r+0xae>
 8003880:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003882:	2e00      	cmp	r6, #0
 8003884:	d045      	beq.n	8003912 <__sflush_r+0xae>
 8003886:	2300      	movs	r3, #0
 8003888:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800388c:	682f      	ldr	r7, [r5, #0]
 800388e:	6a21      	ldr	r1, [r4, #32]
 8003890:	602b      	str	r3, [r5, #0]
 8003892:	d030      	beq.n	80038f6 <__sflush_r+0x92>
 8003894:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003896:	89a3      	ldrh	r3, [r4, #12]
 8003898:	0759      	lsls	r1, r3, #29
 800389a:	d505      	bpl.n	80038a8 <__sflush_r+0x44>
 800389c:	6863      	ldr	r3, [r4, #4]
 800389e:	1ad2      	subs	r2, r2, r3
 80038a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80038a2:	b10b      	cbz	r3, 80038a8 <__sflush_r+0x44>
 80038a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80038a6:	1ad2      	subs	r2, r2, r3
 80038a8:	2300      	movs	r3, #0
 80038aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80038ac:	6a21      	ldr	r1, [r4, #32]
 80038ae:	4628      	mov	r0, r5
 80038b0:	47b0      	blx	r6
 80038b2:	1c43      	adds	r3, r0, #1
 80038b4:	89a3      	ldrh	r3, [r4, #12]
 80038b6:	d106      	bne.n	80038c6 <__sflush_r+0x62>
 80038b8:	6829      	ldr	r1, [r5, #0]
 80038ba:	291d      	cmp	r1, #29
 80038bc:	d82b      	bhi.n	8003916 <__sflush_r+0xb2>
 80038be:	4a2a      	ldr	r2, [pc, #168]	@ (8003968 <__sflush_r+0x104>)
 80038c0:	410a      	asrs	r2, r1
 80038c2:	07d6      	lsls	r6, r2, #31
 80038c4:	d427      	bmi.n	8003916 <__sflush_r+0xb2>
 80038c6:	2200      	movs	r2, #0
 80038c8:	6062      	str	r2, [r4, #4]
 80038ca:	04d9      	lsls	r1, r3, #19
 80038cc:	6922      	ldr	r2, [r4, #16]
 80038ce:	6022      	str	r2, [r4, #0]
 80038d0:	d504      	bpl.n	80038dc <__sflush_r+0x78>
 80038d2:	1c42      	adds	r2, r0, #1
 80038d4:	d101      	bne.n	80038da <__sflush_r+0x76>
 80038d6:	682b      	ldr	r3, [r5, #0]
 80038d8:	b903      	cbnz	r3, 80038dc <__sflush_r+0x78>
 80038da:	6560      	str	r0, [r4, #84]	@ 0x54
 80038dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80038de:	602f      	str	r7, [r5, #0]
 80038e0:	b1b9      	cbz	r1, 8003912 <__sflush_r+0xae>
 80038e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80038e6:	4299      	cmp	r1, r3
 80038e8:	d002      	beq.n	80038f0 <__sflush_r+0x8c>
 80038ea:	4628      	mov	r0, r5
 80038ec:	f7ff fbf2 	bl	80030d4 <_free_r>
 80038f0:	2300      	movs	r3, #0
 80038f2:	6363      	str	r3, [r4, #52]	@ 0x34
 80038f4:	e00d      	b.n	8003912 <__sflush_r+0xae>
 80038f6:	2301      	movs	r3, #1
 80038f8:	4628      	mov	r0, r5
 80038fa:	47b0      	blx	r6
 80038fc:	4602      	mov	r2, r0
 80038fe:	1c50      	adds	r0, r2, #1
 8003900:	d1c9      	bne.n	8003896 <__sflush_r+0x32>
 8003902:	682b      	ldr	r3, [r5, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d0c6      	beq.n	8003896 <__sflush_r+0x32>
 8003908:	2b1d      	cmp	r3, #29
 800390a:	d001      	beq.n	8003910 <__sflush_r+0xac>
 800390c:	2b16      	cmp	r3, #22
 800390e:	d11e      	bne.n	800394e <__sflush_r+0xea>
 8003910:	602f      	str	r7, [r5, #0]
 8003912:	2000      	movs	r0, #0
 8003914:	e022      	b.n	800395c <__sflush_r+0xf8>
 8003916:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800391a:	b21b      	sxth	r3, r3
 800391c:	e01b      	b.n	8003956 <__sflush_r+0xf2>
 800391e:	690f      	ldr	r7, [r1, #16]
 8003920:	2f00      	cmp	r7, #0
 8003922:	d0f6      	beq.n	8003912 <__sflush_r+0xae>
 8003924:	0793      	lsls	r3, r2, #30
 8003926:	680e      	ldr	r6, [r1, #0]
 8003928:	bf08      	it	eq
 800392a:	694b      	ldreq	r3, [r1, #20]
 800392c:	600f      	str	r7, [r1, #0]
 800392e:	bf18      	it	ne
 8003930:	2300      	movne	r3, #0
 8003932:	eba6 0807 	sub.w	r8, r6, r7
 8003936:	608b      	str	r3, [r1, #8]
 8003938:	f1b8 0f00 	cmp.w	r8, #0
 800393c:	dde9      	ble.n	8003912 <__sflush_r+0xae>
 800393e:	6a21      	ldr	r1, [r4, #32]
 8003940:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003942:	4643      	mov	r3, r8
 8003944:	463a      	mov	r2, r7
 8003946:	4628      	mov	r0, r5
 8003948:	47b0      	blx	r6
 800394a:	2800      	cmp	r0, #0
 800394c:	dc08      	bgt.n	8003960 <__sflush_r+0xfc>
 800394e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003952:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003956:	81a3      	strh	r3, [r4, #12]
 8003958:	f04f 30ff 	mov.w	r0, #4294967295
 800395c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003960:	4407      	add	r7, r0
 8003962:	eba8 0800 	sub.w	r8, r8, r0
 8003966:	e7e7      	b.n	8003938 <__sflush_r+0xd4>
 8003968:	dfbffffe 	.word	0xdfbffffe

0800396c <_fflush_r>:
 800396c:	b538      	push	{r3, r4, r5, lr}
 800396e:	690b      	ldr	r3, [r1, #16]
 8003970:	4605      	mov	r5, r0
 8003972:	460c      	mov	r4, r1
 8003974:	b913      	cbnz	r3, 800397c <_fflush_r+0x10>
 8003976:	2500      	movs	r5, #0
 8003978:	4628      	mov	r0, r5
 800397a:	bd38      	pop	{r3, r4, r5, pc}
 800397c:	b118      	cbz	r0, 8003986 <_fflush_r+0x1a>
 800397e:	6a03      	ldr	r3, [r0, #32]
 8003980:	b90b      	cbnz	r3, 8003986 <_fflush_r+0x1a>
 8003982:	f7ff fa9f 	bl	8002ec4 <__sinit>
 8003986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d0f3      	beq.n	8003976 <_fflush_r+0xa>
 800398e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003990:	07d0      	lsls	r0, r2, #31
 8003992:	d404      	bmi.n	800399e <_fflush_r+0x32>
 8003994:	0599      	lsls	r1, r3, #22
 8003996:	d402      	bmi.n	800399e <_fflush_r+0x32>
 8003998:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800399a:	f7ff fb98 	bl	80030ce <__retarget_lock_acquire_recursive>
 800399e:	4628      	mov	r0, r5
 80039a0:	4621      	mov	r1, r4
 80039a2:	f7ff ff5f 	bl	8003864 <__sflush_r>
 80039a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80039a8:	07da      	lsls	r2, r3, #31
 80039aa:	4605      	mov	r5, r0
 80039ac:	d4e4      	bmi.n	8003978 <_fflush_r+0xc>
 80039ae:	89a3      	ldrh	r3, [r4, #12]
 80039b0:	059b      	lsls	r3, r3, #22
 80039b2:	d4e1      	bmi.n	8003978 <_fflush_r+0xc>
 80039b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80039b6:	f7ff fb8b 	bl	80030d0 <__retarget_lock_release_recursive>
 80039ba:	e7dd      	b.n	8003978 <_fflush_r+0xc>

080039bc <__swbuf_r>:
 80039bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039be:	460e      	mov	r6, r1
 80039c0:	4614      	mov	r4, r2
 80039c2:	4605      	mov	r5, r0
 80039c4:	b118      	cbz	r0, 80039ce <__swbuf_r+0x12>
 80039c6:	6a03      	ldr	r3, [r0, #32]
 80039c8:	b90b      	cbnz	r3, 80039ce <__swbuf_r+0x12>
 80039ca:	f7ff fa7b 	bl	8002ec4 <__sinit>
 80039ce:	69a3      	ldr	r3, [r4, #24]
 80039d0:	60a3      	str	r3, [r4, #8]
 80039d2:	89a3      	ldrh	r3, [r4, #12]
 80039d4:	071a      	lsls	r2, r3, #28
 80039d6:	d501      	bpl.n	80039dc <__swbuf_r+0x20>
 80039d8:	6923      	ldr	r3, [r4, #16]
 80039da:	b943      	cbnz	r3, 80039ee <__swbuf_r+0x32>
 80039dc:	4621      	mov	r1, r4
 80039de:	4628      	mov	r0, r5
 80039e0:	f000 f82a 	bl	8003a38 <__swsetup_r>
 80039e4:	b118      	cbz	r0, 80039ee <__swbuf_r+0x32>
 80039e6:	f04f 37ff 	mov.w	r7, #4294967295
 80039ea:	4638      	mov	r0, r7
 80039ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039ee:	6823      	ldr	r3, [r4, #0]
 80039f0:	6922      	ldr	r2, [r4, #16]
 80039f2:	1a98      	subs	r0, r3, r2
 80039f4:	6963      	ldr	r3, [r4, #20]
 80039f6:	b2f6      	uxtb	r6, r6
 80039f8:	4283      	cmp	r3, r0
 80039fa:	4637      	mov	r7, r6
 80039fc:	dc05      	bgt.n	8003a0a <__swbuf_r+0x4e>
 80039fe:	4621      	mov	r1, r4
 8003a00:	4628      	mov	r0, r5
 8003a02:	f7ff ffb3 	bl	800396c <_fflush_r>
 8003a06:	2800      	cmp	r0, #0
 8003a08:	d1ed      	bne.n	80039e6 <__swbuf_r+0x2a>
 8003a0a:	68a3      	ldr	r3, [r4, #8]
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	60a3      	str	r3, [r4, #8]
 8003a10:	6823      	ldr	r3, [r4, #0]
 8003a12:	1c5a      	adds	r2, r3, #1
 8003a14:	6022      	str	r2, [r4, #0]
 8003a16:	701e      	strb	r6, [r3, #0]
 8003a18:	6962      	ldr	r2, [r4, #20]
 8003a1a:	1c43      	adds	r3, r0, #1
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d004      	beq.n	8003a2a <__swbuf_r+0x6e>
 8003a20:	89a3      	ldrh	r3, [r4, #12]
 8003a22:	07db      	lsls	r3, r3, #31
 8003a24:	d5e1      	bpl.n	80039ea <__swbuf_r+0x2e>
 8003a26:	2e0a      	cmp	r6, #10
 8003a28:	d1df      	bne.n	80039ea <__swbuf_r+0x2e>
 8003a2a:	4621      	mov	r1, r4
 8003a2c:	4628      	mov	r0, r5
 8003a2e:	f7ff ff9d 	bl	800396c <_fflush_r>
 8003a32:	2800      	cmp	r0, #0
 8003a34:	d0d9      	beq.n	80039ea <__swbuf_r+0x2e>
 8003a36:	e7d6      	b.n	80039e6 <__swbuf_r+0x2a>

08003a38 <__swsetup_r>:
 8003a38:	b538      	push	{r3, r4, r5, lr}
 8003a3a:	4b29      	ldr	r3, [pc, #164]	@ (8003ae0 <__swsetup_r+0xa8>)
 8003a3c:	4605      	mov	r5, r0
 8003a3e:	6818      	ldr	r0, [r3, #0]
 8003a40:	460c      	mov	r4, r1
 8003a42:	b118      	cbz	r0, 8003a4c <__swsetup_r+0x14>
 8003a44:	6a03      	ldr	r3, [r0, #32]
 8003a46:	b90b      	cbnz	r3, 8003a4c <__swsetup_r+0x14>
 8003a48:	f7ff fa3c 	bl	8002ec4 <__sinit>
 8003a4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a50:	0719      	lsls	r1, r3, #28
 8003a52:	d422      	bmi.n	8003a9a <__swsetup_r+0x62>
 8003a54:	06da      	lsls	r2, r3, #27
 8003a56:	d407      	bmi.n	8003a68 <__swsetup_r+0x30>
 8003a58:	2209      	movs	r2, #9
 8003a5a:	602a      	str	r2, [r5, #0]
 8003a5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a60:	81a3      	strh	r3, [r4, #12]
 8003a62:	f04f 30ff 	mov.w	r0, #4294967295
 8003a66:	e033      	b.n	8003ad0 <__swsetup_r+0x98>
 8003a68:	0758      	lsls	r0, r3, #29
 8003a6a:	d512      	bpl.n	8003a92 <__swsetup_r+0x5a>
 8003a6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a6e:	b141      	cbz	r1, 8003a82 <__swsetup_r+0x4a>
 8003a70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a74:	4299      	cmp	r1, r3
 8003a76:	d002      	beq.n	8003a7e <__swsetup_r+0x46>
 8003a78:	4628      	mov	r0, r5
 8003a7a:	f7ff fb2b 	bl	80030d4 <_free_r>
 8003a7e:	2300      	movs	r3, #0
 8003a80:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a82:	89a3      	ldrh	r3, [r4, #12]
 8003a84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003a88:	81a3      	strh	r3, [r4, #12]
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	6063      	str	r3, [r4, #4]
 8003a8e:	6923      	ldr	r3, [r4, #16]
 8003a90:	6023      	str	r3, [r4, #0]
 8003a92:	89a3      	ldrh	r3, [r4, #12]
 8003a94:	f043 0308 	orr.w	r3, r3, #8
 8003a98:	81a3      	strh	r3, [r4, #12]
 8003a9a:	6923      	ldr	r3, [r4, #16]
 8003a9c:	b94b      	cbnz	r3, 8003ab2 <__swsetup_r+0x7a>
 8003a9e:	89a3      	ldrh	r3, [r4, #12]
 8003aa0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003aa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003aa8:	d003      	beq.n	8003ab2 <__swsetup_r+0x7a>
 8003aaa:	4621      	mov	r1, r4
 8003aac:	4628      	mov	r0, r5
 8003aae:	f000 f84f 	bl	8003b50 <__smakebuf_r>
 8003ab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ab6:	f013 0201 	ands.w	r2, r3, #1
 8003aba:	d00a      	beq.n	8003ad2 <__swsetup_r+0x9a>
 8003abc:	2200      	movs	r2, #0
 8003abe:	60a2      	str	r2, [r4, #8]
 8003ac0:	6962      	ldr	r2, [r4, #20]
 8003ac2:	4252      	negs	r2, r2
 8003ac4:	61a2      	str	r2, [r4, #24]
 8003ac6:	6922      	ldr	r2, [r4, #16]
 8003ac8:	b942      	cbnz	r2, 8003adc <__swsetup_r+0xa4>
 8003aca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003ace:	d1c5      	bne.n	8003a5c <__swsetup_r+0x24>
 8003ad0:	bd38      	pop	{r3, r4, r5, pc}
 8003ad2:	0799      	lsls	r1, r3, #30
 8003ad4:	bf58      	it	pl
 8003ad6:	6962      	ldrpl	r2, [r4, #20]
 8003ad8:	60a2      	str	r2, [r4, #8]
 8003ada:	e7f4      	b.n	8003ac6 <__swsetup_r+0x8e>
 8003adc:	2000      	movs	r0, #0
 8003ade:	e7f7      	b.n	8003ad0 <__swsetup_r+0x98>
 8003ae0:	20000018 	.word	0x20000018

08003ae4 <_sbrk_r>:
 8003ae4:	b538      	push	{r3, r4, r5, lr}
 8003ae6:	4d06      	ldr	r5, [pc, #24]	@ (8003b00 <_sbrk_r+0x1c>)
 8003ae8:	2300      	movs	r3, #0
 8003aea:	4604      	mov	r4, r0
 8003aec:	4608      	mov	r0, r1
 8003aee:	602b      	str	r3, [r5, #0]
 8003af0:	f7fd fd36 	bl	8001560 <_sbrk>
 8003af4:	1c43      	adds	r3, r0, #1
 8003af6:	d102      	bne.n	8003afe <_sbrk_r+0x1a>
 8003af8:	682b      	ldr	r3, [r5, #0]
 8003afa:	b103      	cbz	r3, 8003afe <_sbrk_r+0x1a>
 8003afc:	6023      	str	r3, [r4, #0]
 8003afe:	bd38      	pop	{r3, r4, r5, pc}
 8003b00:	20000380 	.word	0x20000380

08003b04 <__swhatbuf_r>:
 8003b04:	b570      	push	{r4, r5, r6, lr}
 8003b06:	460c      	mov	r4, r1
 8003b08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b0c:	2900      	cmp	r1, #0
 8003b0e:	b096      	sub	sp, #88	@ 0x58
 8003b10:	4615      	mov	r5, r2
 8003b12:	461e      	mov	r6, r3
 8003b14:	da0d      	bge.n	8003b32 <__swhatbuf_r+0x2e>
 8003b16:	89a3      	ldrh	r3, [r4, #12]
 8003b18:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003b1c:	f04f 0100 	mov.w	r1, #0
 8003b20:	bf14      	ite	ne
 8003b22:	2340      	movne	r3, #64	@ 0x40
 8003b24:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003b28:	2000      	movs	r0, #0
 8003b2a:	6031      	str	r1, [r6, #0]
 8003b2c:	602b      	str	r3, [r5, #0]
 8003b2e:	b016      	add	sp, #88	@ 0x58
 8003b30:	bd70      	pop	{r4, r5, r6, pc}
 8003b32:	466a      	mov	r2, sp
 8003b34:	f000 f848 	bl	8003bc8 <_fstat_r>
 8003b38:	2800      	cmp	r0, #0
 8003b3a:	dbec      	blt.n	8003b16 <__swhatbuf_r+0x12>
 8003b3c:	9901      	ldr	r1, [sp, #4]
 8003b3e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003b42:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003b46:	4259      	negs	r1, r3
 8003b48:	4159      	adcs	r1, r3
 8003b4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b4e:	e7eb      	b.n	8003b28 <__swhatbuf_r+0x24>

08003b50 <__smakebuf_r>:
 8003b50:	898b      	ldrh	r3, [r1, #12]
 8003b52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b54:	079d      	lsls	r5, r3, #30
 8003b56:	4606      	mov	r6, r0
 8003b58:	460c      	mov	r4, r1
 8003b5a:	d507      	bpl.n	8003b6c <__smakebuf_r+0x1c>
 8003b5c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003b60:	6023      	str	r3, [r4, #0]
 8003b62:	6123      	str	r3, [r4, #16]
 8003b64:	2301      	movs	r3, #1
 8003b66:	6163      	str	r3, [r4, #20]
 8003b68:	b003      	add	sp, #12
 8003b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b6c:	ab01      	add	r3, sp, #4
 8003b6e:	466a      	mov	r2, sp
 8003b70:	f7ff ffc8 	bl	8003b04 <__swhatbuf_r>
 8003b74:	9f00      	ldr	r7, [sp, #0]
 8003b76:	4605      	mov	r5, r0
 8003b78:	4639      	mov	r1, r7
 8003b7a:	4630      	mov	r0, r6
 8003b7c:	f7ff fb16 	bl	80031ac <_malloc_r>
 8003b80:	b948      	cbnz	r0, 8003b96 <__smakebuf_r+0x46>
 8003b82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b86:	059a      	lsls	r2, r3, #22
 8003b88:	d4ee      	bmi.n	8003b68 <__smakebuf_r+0x18>
 8003b8a:	f023 0303 	bic.w	r3, r3, #3
 8003b8e:	f043 0302 	orr.w	r3, r3, #2
 8003b92:	81a3      	strh	r3, [r4, #12]
 8003b94:	e7e2      	b.n	8003b5c <__smakebuf_r+0xc>
 8003b96:	89a3      	ldrh	r3, [r4, #12]
 8003b98:	6020      	str	r0, [r4, #0]
 8003b9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b9e:	81a3      	strh	r3, [r4, #12]
 8003ba0:	9b01      	ldr	r3, [sp, #4]
 8003ba2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003ba6:	b15b      	cbz	r3, 8003bc0 <__smakebuf_r+0x70>
 8003ba8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bac:	4630      	mov	r0, r6
 8003bae:	f000 f81d 	bl	8003bec <_isatty_r>
 8003bb2:	b128      	cbz	r0, 8003bc0 <__smakebuf_r+0x70>
 8003bb4:	89a3      	ldrh	r3, [r4, #12]
 8003bb6:	f023 0303 	bic.w	r3, r3, #3
 8003bba:	f043 0301 	orr.w	r3, r3, #1
 8003bbe:	81a3      	strh	r3, [r4, #12]
 8003bc0:	89a3      	ldrh	r3, [r4, #12]
 8003bc2:	431d      	orrs	r5, r3
 8003bc4:	81a5      	strh	r5, [r4, #12]
 8003bc6:	e7cf      	b.n	8003b68 <__smakebuf_r+0x18>

08003bc8 <_fstat_r>:
 8003bc8:	b538      	push	{r3, r4, r5, lr}
 8003bca:	4d07      	ldr	r5, [pc, #28]	@ (8003be8 <_fstat_r+0x20>)
 8003bcc:	2300      	movs	r3, #0
 8003bce:	4604      	mov	r4, r0
 8003bd0:	4608      	mov	r0, r1
 8003bd2:	4611      	mov	r1, r2
 8003bd4:	602b      	str	r3, [r5, #0]
 8003bd6:	f7fd fc9a 	bl	800150e <_fstat>
 8003bda:	1c43      	adds	r3, r0, #1
 8003bdc:	d102      	bne.n	8003be4 <_fstat_r+0x1c>
 8003bde:	682b      	ldr	r3, [r5, #0]
 8003be0:	b103      	cbz	r3, 8003be4 <_fstat_r+0x1c>
 8003be2:	6023      	str	r3, [r4, #0]
 8003be4:	bd38      	pop	{r3, r4, r5, pc}
 8003be6:	bf00      	nop
 8003be8:	20000380 	.word	0x20000380

08003bec <_isatty_r>:
 8003bec:	b538      	push	{r3, r4, r5, lr}
 8003bee:	4d06      	ldr	r5, [pc, #24]	@ (8003c08 <_isatty_r+0x1c>)
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	4604      	mov	r4, r0
 8003bf4:	4608      	mov	r0, r1
 8003bf6:	602b      	str	r3, [r5, #0]
 8003bf8:	f7fd fc99 	bl	800152e <_isatty>
 8003bfc:	1c43      	adds	r3, r0, #1
 8003bfe:	d102      	bne.n	8003c06 <_isatty_r+0x1a>
 8003c00:	682b      	ldr	r3, [r5, #0]
 8003c02:	b103      	cbz	r3, 8003c06 <_isatty_r+0x1a>
 8003c04:	6023      	str	r3, [r4, #0]
 8003c06:	bd38      	pop	{r3, r4, r5, pc}
 8003c08:	20000380 	.word	0x20000380

08003c0c <_init>:
 8003c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c0e:	bf00      	nop
 8003c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c12:	bc08      	pop	{r3}
 8003c14:	469e      	mov	lr, r3
 8003c16:	4770      	bx	lr

08003c18 <_fini>:
 8003c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c1a:	bf00      	nop
 8003c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c1e:	bc08      	pop	{r3}
 8003c20:	469e      	mov	lr, r3
 8003c22:	4770      	bx	lr
