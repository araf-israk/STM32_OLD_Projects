
TESTTES_DEMO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002390  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800249c  0800249c  0000349c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024c4  080024c4  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  080024c4  080024c4  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024c4  080024c4  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024c4  080024c4  000034c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080024c8  080024c8  000034c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080024cc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  080024d8  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  080024d8  00004078  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a427  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001884  00000000  00000000  0000e45c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  0000fce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000929  00000000  00000000  000108a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015cff  00000000  00000000  000111d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c533  00000000  00000000  00026ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008885e  00000000  00000000  00033403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bbc61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031e4  00000000  00000000  000bbca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000bee88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002484 	.word	0x08002484

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002484 	.word	0x08002484

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 ffb6 	bl	80010c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f820 	bl	8000198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8b4 	bl	80002c4 <MX_GPIO_Init>
  MX_TIM1_Init();
 800015c:	f000 f862 	bl	8000224 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000160:	480a      	ldr	r0, [pc, #40]	@ (800018c <main+0x40>)
 8000162:	f001 fefb 	bl	8001f5c <HAL_TIM_Base_Start>

  ID = readID();
 8000166:	f000 fe45 	bl	8000df4 <readID>
 800016a:	4603      	mov	r3, r0
 800016c:	461a      	mov	r2, r3
 800016e:	4b08      	ldr	r3, [pc, #32]	@ (8000190 <main+0x44>)
 8000170:	801a      	strh	r2, [r3, #0]
  HAL_Delay(100);
 8000172:	2064      	movs	r0, #100	@ 0x64
 8000174:	f001 f806 	bl	8001184 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8000178:	2104      	movs	r1, #4
 800017a:	4806      	ldr	r0, [pc, #24]	@ (8000194 <main+0x48>)
 800017c:	f001 faa6 	bl	80016cc <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000180:	2064      	movs	r0, #100	@ 0x64
 8000182:	f000 ffff 	bl	8001184 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8000186:	bf00      	nop
 8000188:	e7f6      	b.n	8000178 <main+0x2c>
 800018a:	bf00      	nop
 800018c:	20000028 	.word	0x20000028
 8000190:	20000070 	.word	0x20000070
 8000194:	40010c00 	.word	0x40010c00

08000198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b090      	sub	sp, #64	@ 0x40
 800019c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800019e:	f107 0318 	add.w	r3, r7, #24
 80001a2:	2228      	movs	r2, #40	@ 0x28
 80001a4:	2100      	movs	r1, #0
 80001a6:	4618      	mov	r0, r3
 80001a8:	f002 f940 	bl	800242c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ac:	1d3b      	adds	r3, r7, #4
 80001ae:	2200      	movs	r2, #0
 80001b0:	601a      	str	r2, [r3, #0]
 80001b2:	605a      	str	r2, [r3, #4]
 80001b4:	609a      	str	r2, [r3, #8]
 80001b6:	60da      	str	r2, [r3, #12]
 80001b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001ba:	2301      	movs	r3, #1
 80001bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001c4:	2300      	movs	r3, #0
 80001c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c8:	2301      	movs	r3, #1
 80001ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001cc:	2302      	movs	r3, #2
 80001ce:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001d6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80001da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001dc:	f107 0318 	add.w	r3, r7, #24
 80001e0:	4618      	mov	r0, r3
 80001e2:	f001 fa8d 	bl	8001700 <HAL_RCC_OscConfig>
 80001e6:	4603      	mov	r3, r0
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d001      	beq.n	80001f0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001ec:	f000 f8fa 	bl	80003e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001f0:	230f      	movs	r3, #15
 80001f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001f4:	2302      	movs	r3, #2
 80001f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f8:	2300      	movs	r3, #0
 80001fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000200:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000202:	2300      	movs	r3, #0
 8000204:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	2102      	movs	r1, #2
 800020a:	4618      	mov	r0, r3
 800020c:	f001 fcfa 	bl	8001c04 <HAL_RCC_ClockConfig>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d001      	beq.n	800021a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000216:	f000 f8e5 	bl	80003e4 <Error_Handler>
  }
}
 800021a:	bf00      	nop
 800021c:	3740      	adds	r7, #64	@ 0x40
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
	...

08000224 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b086      	sub	sp, #24
 8000228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800022a:	f107 0308 	add.w	r3, r7, #8
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000238:	463b      	mov	r3, r7
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
 800023e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000240:	4b1e      	ldr	r3, [pc, #120]	@ (80002bc <MX_TIM1_Init+0x98>)
 8000242:	4a1f      	ldr	r2, [pc, #124]	@ (80002c0 <MX_TIM1_Init+0x9c>)
 8000244:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000246:	4b1d      	ldr	r3, [pc, #116]	@ (80002bc <MX_TIM1_Init+0x98>)
 8000248:	2247      	movs	r2, #71	@ 0x47
 800024a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800024c:	4b1b      	ldr	r3, [pc, #108]	@ (80002bc <MX_TIM1_Init+0x98>)
 800024e:	2200      	movs	r2, #0
 8000250:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535-1;
 8000252:	4b1a      	ldr	r3, [pc, #104]	@ (80002bc <MX_TIM1_Init+0x98>)
 8000254:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000258:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800025a:	4b18      	ldr	r3, [pc, #96]	@ (80002bc <MX_TIM1_Init+0x98>)
 800025c:	2200      	movs	r2, #0
 800025e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000260:	4b16      	ldr	r3, [pc, #88]	@ (80002bc <MX_TIM1_Init+0x98>)
 8000262:	2200      	movs	r2, #0
 8000264:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000266:	4b15      	ldr	r3, [pc, #84]	@ (80002bc <MX_TIM1_Init+0x98>)
 8000268:	2200      	movs	r2, #0
 800026a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800026c:	4813      	ldr	r0, [pc, #76]	@ (80002bc <MX_TIM1_Init+0x98>)
 800026e:	f001 fe25 	bl	8001ebc <HAL_TIM_Base_Init>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d001      	beq.n	800027c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000278:	f000 f8b4 	bl	80003e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800027c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000280:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000282:	f107 0308 	add.w	r3, r7, #8
 8000286:	4619      	mov	r1, r3
 8000288:	480c      	ldr	r0, [pc, #48]	@ (80002bc <MX_TIM1_Init+0x98>)
 800028a:	f001 feb1 	bl	8001ff0 <HAL_TIM_ConfigClockSource>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000294:	f000 f8a6 	bl	80003e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000298:	2300      	movs	r3, #0
 800029a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800029c:	2300      	movs	r3, #0
 800029e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80002a0:	463b      	mov	r3, r7
 80002a2:	4619      	mov	r1, r3
 80002a4:	4805      	ldr	r0, [pc, #20]	@ (80002bc <MX_TIM1_Init+0x98>)
 80002a6:	f002 f863 	bl	8002370 <HAL_TIMEx_MasterConfigSynchronization>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80002b0:	f000 f898 	bl	80003e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80002b4:	bf00      	nop
 80002b6:	3718      	adds	r7, #24
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	20000028 	.word	0x20000028
 80002c0:	40012c00 	.word	0x40012c00

080002c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b088      	sub	sp, #32
 80002c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ca:	f107 0310 	add.w	r3, r7, #16
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]
 80002d6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002d8:	4b3e      	ldr	r3, [pc, #248]	@ (80003d4 <MX_GPIO_Init+0x110>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	4a3d      	ldr	r2, [pc, #244]	@ (80003d4 <MX_GPIO_Init+0x110>)
 80002de:	f043 0310 	orr.w	r3, r3, #16
 80002e2:	6193      	str	r3, [r2, #24]
 80002e4:	4b3b      	ldr	r3, [pc, #236]	@ (80003d4 <MX_GPIO_Init+0x110>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	f003 0310 	and.w	r3, r3, #16
 80002ec:	60fb      	str	r3, [r7, #12]
 80002ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002f0:	4b38      	ldr	r3, [pc, #224]	@ (80003d4 <MX_GPIO_Init+0x110>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	4a37      	ldr	r2, [pc, #220]	@ (80003d4 <MX_GPIO_Init+0x110>)
 80002f6:	f043 0320 	orr.w	r3, r3, #32
 80002fa:	6193      	str	r3, [r2, #24]
 80002fc:	4b35      	ldr	r3, [pc, #212]	@ (80003d4 <MX_GPIO_Init+0x110>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	f003 0320 	and.w	r3, r3, #32
 8000304:	60bb      	str	r3, [r7, #8]
 8000306:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000308:	4b32      	ldr	r3, [pc, #200]	@ (80003d4 <MX_GPIO_Init+0x110>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	4a31      	ldr	r2, [pc, #196]	@ (80003d4 <MX_GPIO_Init+0x110>)
 800030e:	f043 0304 	orr.w	r3, r3, #4
 8000312:	6193      	str	r3, [r2, #24]
 8000314:	4b2f      	ldr	r3, [pc, #188]	@ (80003d4 <MX_GPIO_Init+0x110>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	f003 0304 	and.w	r3, r3, #4
 800031c:	607b      	str	r3, [r7, #4]
 800031e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000320:	4b2c      	ldr	r3, [pc, #176]	@ (80003d4 <MX_GPIO_Init+0x110>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	4a2b      	ldr	r2, [pc, #172]	@ (80003d4 <MX_GPIO_Init+0x110>)
 8000326:	f043 0308 	orr.w	r3, r3, #8
 800032a:	6193      	str	r3, [r2, #24]
 800032c:	4b29      	ldr	r3, [pc, #164]	@ (80003d4 <MX_GPIO_Init+0x110>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	f003 0308 	and.w	r3, r3, #8
 8000334:	603b      	str	r3, [r7, #0]
 8000336:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000338:	2200      	movs	r2, #0
 800033a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800033e:	4826      	ldr	r0, [pc, #152]	@ (80003d8 <MX_GPIO_Init+0x114>)
 8000340:	f001 f9ac 	bl	800169c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000344:	2200      	movs	r2, #0
 8000346:	f248 012f 	movw	r1, #32815	@ 0x802f
 800034a:	4824      	ldr	r0, [pc, #144]	@ (80003dc <MX_GPIO_Init+0x118>)
 800034c:	f001 f9a6 	bl	800169c <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000350:	2200      	movs	r2, #0
 8000352:	217e      	movs	r1, #126	@ 0x7e
 8000354:	4822      	ldr	r0, [pc, #136]	@ (80003e0 <MX_GPIO_Init+0x11c>)
 8000356:	f001 f9a1 	bl	800169c <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800035a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800035e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000360:	2301      	movs	r3, #1
 8000362:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000364:	2300      	movs	r3, #0
 8000366:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000368:	2302      	movs	r3, #2
 800036a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800036c:	f107 0310 	add.w	r3, r7, #16
 8000370:	4619      	mov	r1, r3
 8000372:	4819      	ldr	r0, [pc, #100]	@ (80003d8 <MX_GPIO_Init+0x114>)
 8000374:	f001 f80e 	bl	8001394 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA5 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000378:	f248 032f 	movw	r3, #32815	@ 0x802f
 800037c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800037e:	2301      	movs	r3, #1
 8000380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000382:	2300      	movs	r3, #0
 8000384:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000386:	2302      	movs	r3, #2
 8000388:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800038a:	f107 0310 	add.w	r3, r7, #16
 800038e:	4619      	mov	r1, r3
 8000390:	4812      	ldr	r0, [pc, #72]	@ (80003dc <MX_GPIO_Init+0x118>)
 8000392:	f000 ffff 	bl	8001394 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000396:	2310      	movs	r3, #16
 8000398:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800039a:	2300      	movs	r3, #0
 800039c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800039e:	2300      	movs	r3, #0
 80003a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003a2:	f107 0310 	add.w	r3, r7, #16
 80003a6:	4619      	mov	r1, r3
 80003a8:	480c      	ldr	r0, [pc, #48]	@ (80003dc <MX_GPIO_Init+0x118>)
 80003aa:	f000 fff3 	bl	8001394 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB3 PB4
                           PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80003ae:	237e      	movs	r3, #126	@ 0x7e
 80003b0:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b2:	2301      	movs	r3, #1
 80003b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b6:	2300      	movs	r3, #0
 80003b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ba:	2302      	movs	r3, #2
 80003bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003be:	f107 0310 	add.w	r3, r7, #16
 80003c2:	4619      	mov	r1, r3
 80003c4:	4806      	ldr	r0, [pc, #24]	@ (80003e0 <MX_GPIO_Init+0x11c>)
 80003c6:	f000 ffe5 	bl	8001394 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003ca:	bf00      	nop
 80003cc:	3720      	adds	r7, #32
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	40021000 	.word	0x40021000
 80003d8:	40011000 	.word	0x40011000
 80003dc:	40010800 	.word	0x40010800
 80003e0:	40010c00 	.word	0x40010c00

080003e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e8:	b672      	cpsid	i
}
 80003ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003ec:	bf00      	nop
 80003ee:	e7fd      	b.n	80003ec <Error_Handler+0x8>

080003f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b085      	sub	sp, #20
 80003f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003f6:	4b15      	ldr	r3, [pc, #84]	@ (800044c <HAL_MspInit+0x5c>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	4a14      	ldr	r2, [pc, #80]	@ (800044c <HAL_MspInit+0x5c>)
 80003fc:	f043 0301 	orr.w	r3, r3, #1
 8000400:	6193      	str	r3, [r2, #24]
 8000402:	4b12      	ldr	r3, [pc, #72]	@ (800044c <HAL_MspInit+0x5c>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	f003 0301 	and.w	r3, r3, #1
 800040a:	60bb      	str	r3, [r7, #8]
 800040c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800040e:	4b0f      	ldr	r3, [pc, #60]	@ (800044c <HAL_MspInit+0x5c>)
 8000410:	69db      	ldr	r3, [r3, #28]
 8000412:	4a0e      	ldr	r2, [pc, #56]	@ (800044c <HAL_MspInit+0x5c>)
 8000414:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000418:	61d3      	str	r3, [r2, #28]
 800041a:	4b0c      	ldr	r3, [pc, #48]	@ (800044c <HAL_MspInit+0x5c>)
 800041c:	69db      	ldr	r3, [r3, #28]
 800041e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000422:	607b      	str	r3, [r7, #4]
 8000424:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000426:	4b0a      	ldr	r3, [pc, #40]	@ (8000450 <HAL_MspInit+0x60>)
 8000428:	685b      	ldr	r3, [r3, #4]
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	4a04      	ldr	r2, [pc, #16]	@ (8000450 <HAL_MspInit+0x60>)
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000442:	bf00      	nop
 8000444:	3714      	adds	r7, #20
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr
 800044c:	40021000 	.word	0x40021000
 8000450:	40010000 	.word	0x40010000

08000454 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000454:	b480      	push	{r7}
 8000456:	b085      	sub	sp, #20
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a09      	ldr	r2, [pc, #36]	@ (8000488 <HAL_TIM_Base_MspInit+0x34>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d10b      	bne.n	800047e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000466:	4b09      	ldr	r3, [pc, #36]	@ (800048c <HAL_TIM_Base_MspInit+0x38>)
 8000468:	699b      	ldr	r3, [r3, #24]
 800046a:	4a08      	ldr	r2, [pc, #32]	@ (800048c <HAL_TIM_Base_MspInit+0x38>)
 800046c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000470:	6193      	str	r3, [r2, #24]
 8000472:	4b06      	ldr	r3, [pc, #24]	@ (800048c <HAL_TIM_Base_MspInit+0x38>)
 8000474:	699b      	ldr	r3, [r3, #24]
 8000476:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800047e:	bf00      	nop
 8000480:	3714      	adds	r7, #20
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr
 8000488:	40012c00 	.word	0x40012c00
 800048c:	40021000 	.word	0x40021000

08000490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000494:	bf00      	nop
 8000496:	e7fd      	b.n	8000494 <NMI_Handler+0x4>

08000498 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800049c:	bf00      	nop
 800049e:	e7fd      	b.n	800049c <HardFault_Handler+0x4>

080004a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004a4:	bf00      	nop
 80004a6:	e7fd      	b.n	80004a4 <MemManage_Handler+0x4>

080004a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ac:	bf00      	nop
 80004ae:	e7fd      	b.n	80004ac <BusFault_Handler+0x4>

080004b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004b4:	bf00      	nop
 80004b6:	e7fd      	b.n	80004b4 <UsageFault_Handler+0x4>

080004b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004bc:	bf00      	nop
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr

080004c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004c8:	bf00      	nop
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr

080004d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bc80      	pop	{r7}
 80004da:	4770      	bx	lr

080004dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004e0:	f000 fe34 	bl	800114c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004e4:	bf00      	nop
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004ec:	bf00      	nop
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr

080004f4 <delay>:


/****************** delay in microseconds ***********************/
extern TIM_HandleTypeDef htim1;
void delay (uint32_t time)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80004fc:	4b08      	ldr	r3, [pc, #32]	@ (8000520 <delay+0x2c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	2200      	movs	r2, #0
 8000502:	625a      	str	r2, [r3, #36]	@ 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<time);
 8000504:	bf00      	nop
 8000506:	4b06      	ldr	r3, [pc, #24]	@ (8000520 <delay+0x2c>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800050c:	687a      	ldr	r2, [r7, #4]
 800050e:	429a      	cmp	r2, r3
 8000510:	d8f9      	bhi.n	8000506 <delay+0x12>
}
 8000512:	bf00      	nop
 8000514:	bf00      	nop
 8000516:	370c      	adds	r7, #12
 8000518:	46bd      	mov	sp, r7
 800051a:	bc80      	pop	{r7}
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	20000028 	.word	0x20000028

08000524 <PIN_LOW>:

/********************************************** NO CHNAGES AFTER THIS ************************************************/


void PIN_LOW (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	460b      	mov	r3, r1
 800052e:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000530:	887b      	ldrh	r3, [r7, #2]
 8000532:	2200      	movs	r2, #0
 8000534:	4619      	mov	r1, r3
 8000536:	6878      	ldr	r0, [r7, #4]
 8000538:	f001 f8b0 	bl	800169c <HAL_GPIO_WritePin>
}
 800053c:	bf00      	nop
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <PIN_HIGH>:

void PIN_HIGH (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	460b      	mov	r3, r1
 800054e:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8000550:	887b      	ldrh	r3, [r7, #2]
 8000552:	2201      	movs	r2, #1
 8000554:	4619      	mov	r1, r3
 8000556:	6878      	ldr	r0, [r7, #4]
 8000558:	f001 f8a0 	bl	800169c <HAL_GPIO_WritePin>
}
 800055c:	bf00      	nop
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}

08000564 <PIN_INPUT>:

void PIN_INPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	460b      	mov	r3, r1
 800056e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 8000570:	887b      	ldrh	r3, [r7, #2]
 8000572:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000574:	2300      	movs	r3, #0
 8000576:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000578:	2301      	movs	r3, #1
 800057a:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800057c:	f107 0308 	add.w	r3, r7, #8
 8000580:	4619      	mov	r1, r3
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f000 ff06 	bl	8001394 <HAL_GPIO_Init>
}
 8000588:	bf00      	nop
 800058a:	3718      	adds	r7, #24
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}

08000590 <PIN_OUTPUT>:

void PIN_OUTPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	460b      	mov	r3, r1
 800059a:	807b      	strh	r3, [r7, #2]
	 GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 800059c:	887b      	ldrh	r3, [r7, #2]
 800059e:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a0:	2301      	movs	r3, #1
 80005a2:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a4:	2300      	movs	r3, #0
 80005a6:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005a8:	2303      	movs	r3, #3
 80005aa:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80005ac:	f107 0308 	add.w	r3, r7, #8
 80005b0:	4619      	mov	r1, r3
 80005b2:	6878      	ldr	r0, [r7, #4]
 80005b4:	f000 feee 	bl	8001394 <HAL_GPIO_Init>
}
 80005b8:	bf00      	nop
 80005ba:	3718      	adds	r7, #24
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <WriteCmdData>:

static void write24(uint16_t color);

static void writecmddata(uint16_t cmd, uint16_t dat);

void WriteCmdData(uint16_t cmd, uint16_t dat) { writecmddata(cmd, dat); }
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	460a      	mov	r2, r1
 80005ca:	80fb      	strh	r3, [r7, #6]
 80005cc:	4613      	mov	r3, r2
 80005ce:	80bb      	strh	r3, [r7, #4]
 80005d0:	88ba      	ldrh	r2, [r7, #4]
 80005d2:	88fb      	ldrh	r3, [r7, #6]
 80005d4:	4611      	mov	r1, r2
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 f86c 	bl	80006b4 <writecmddata>
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <pushCommand>:

static void init_table(const void *table, int16_t size);

static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block);

void pushCommand(uint16_t cmd, uint8_t * block, int8_t N) { WriteCmdParamN(cmd, N, block); }
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	6039      	str	r1, [r7, #0]
 80005ee:	80fb      	strh	r3, [r7, #6]
 80005f0:	4613      	mov	r3, r2
 80005f2:	717b      	strb	r3, [r7, #5]
 80005f4:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80005f8:	88fb      	ldrh	r3, [r7, #6]
 80005fa:	683a      	ldr	r2, [r7, #0]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 f913 	bl	8000828 <WriteCmdParamN>
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <setReadDir>:


//extern GFXfont *gfxFont;

void setReadDir (void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	PIN_INPUT(D0_PORT, D0_PIN);
 8000610:	2101      	movs	r1, #1
 8000612:	4811      	ldr	r0, [pc, #68]	@ (8000658 <setReadDir+0x4c>)
 8000614:	f7ff ffa6 	bl	8000564 <PIN_INPUT>
	PIN_INPUT(D1_PORT, D1_PIN);
 8000618:	2102      	movs	r1, #2
 800061a:	480f      	ldr	r0, [pc, #60]	@ (8000658 <setReadDir+0x4c>)
 800061c:	f7ff ffa2 	bl	8000564 <PIN_INPUT>
	PIN_INPUT(D2_PORT, D2_PIN);
 8000620:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000624:	480d      	ldr	r0, [pc, #52]	@ (800065c <setReadDir+0x50>)
 8000626:	f7ff ff9d 	bl	8000564 <PIN_INPUT>
	PIN_INPUT(D3_PORT, D3_PIN);
 800062a:	2108      	movs	r1, #8
 800062c:	480a      	ldr	r0, [pc, #40]	@ (8000658 <setReadDir+0x4c>)
 800062e:	f7ff ff99 	bl	8000564 <PIN_INPUT>
	PIN_INPUT(D4_PORT, D4_PIN);
 8000632:	2110      	movs	r1, #16
 8000634:	4808      	ldr	r0, [pc, #32]	@ (8000658 <setReadDir+0x4c>)
 8000636:	f7ff ff95 	bl	8000564 <PIN_INPUT>
	PIN_INPUT(D5_PORT, D5_PIN);
 800063a:	2120      	movs	r1, #32
 800063c:	4806      	ldr	r0, [pc, #24]	@ (8000658 <setReadDir+0x4c>)
 800063e:	f7ff ff91 	bl	8000564 <PIN_INPUT>
	PIN_INPUT(D6_PORT, D6_PIN);
 8000642:	2140      	movs	r1, #64	@ 0x40
 8000644:	4804      	ldr	r0, [pc, #16]	@ (8000658 <setReadDir+0x4c>)
 8000646:	f7ff ff8d 	bl	8000564 <PIN_INPUT>
	PIN_INPUT(D7_PORT, D7_PIN);
 800064a:	2120      	movs	r1, #32
 800064c:	4803      	ldr	r0, [pc, #12]	@ (800065c <setReadDir+0x50>)
 800064e:	f7ff ff89 	bl	8000564 <PIN_INPUT>
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40010c00 	.word	0x40010c00
 800065c:	40010800 	.word	0x40010800

08000660 <setWriteDir>:

void setWriteDir (void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	PIN_OUTPUT(D0_PORT, D0_PIN);
 8000664:	2101      	movs	r1, #1
 8000666:	4811      	ldr	r0, [pc, #68]	@ (80006ac <setWriteDir+0x4c>)
 8000668:	f7ff ff92 	bl	8000590 <PIN_OUTPUT>
	PIN_OUTPUT(D1_PORT, D1_PIN);
 800066c:	2102      	movs	r1, #2
 800066e:	480f      	ldr	r0, [pc, #60]	@ (80006ac <setWriteDir+0x4c>)
 8000670:	f7ff ff8e 	bl	8000590 <PIN_OUTPUT>
	PIN_OUTPUT(D2_PORT, D2_PIN);
 8000674:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000678:	480d      	ldr	r0, [pc, #52]	@ (80006b0 <setWriteDir+0x50>)
 800067a:	f7ff ff89 	bl	8000590 <PIN_OUTPUT>
	PIN_OUTPUT(D3_PORT, D3_PIN);
 800067e:	2108      	movs	r1, #8
 8000680:	480a      	ldr	r0, [pc, #40]	@ (80006ac <setWriteDir+0x4c>)
 8000682:	f7ff ff85 	bl	8000590 <PIN_OUTPUT>
	PIN_OUTPUT(D4_PORT, D4_PIN);
 8000686:	2110      	movs	r1, #16
 8000688:	4808      	ldr	r0, [pc, #32]	@ (80006ac <setWriteDir+0x4c>)
 800068a:	f7ff ff81 	bl	8000590 <PIN_OUTPUT>
	PIN_OUTPUT(D5_PORT, D5_PIN);
 800068e:	2120      	movs	r1, #32
 8000690:	4806      	ldr	r0, [pc, #24]	@ (80006ac <setWriteDir+0x4c>)
 8000692:	f7ff ff7d 	bl	8000590 <PIN_OUTPUT>
	PIN_OUTPUT(D6_PORT, D6_PIN);
 8000696:	2140      	movs	r1, #64	@ 0x40
 8000698:	4804      	ldr	r0, [pc, #16]	@ (80006ac <setWriteDir+0x4c>)
 800069a:	f7ff ff79 	bl	8000590 <PIN_OUTPUT>
	PIN_OUTPUT(D7_PORT, D7_PIN);
 800069e:	2120      	movs	r1, #32
 80006a0:	4803      	ldr	r0, [pc, #12]	@ (80006b0 <setWriteDir+0x50>)
 80006a2:	f7ff ff75 	bl	8000590 <PIN_OUTPUT>
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40010c00 	.word	0x40010c00
 80006b0:	40010800 	.word	0x40010800

080006b4 <writecmddata>:
    write8(b);
}


static void writecmddata(uint16_t cmd, uint16_t dat)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	460a      	mov	r2, r1
 80006be:	80fb      	strh	r3, [r7, #6]
 80006c0:	4613      	mov	r3, r2
 80006c2:	80bb      	strh	r3, [r7, #4]
    CS_ACTIVE;
 80006c4:	2102      	movs	r1, #2
 80006c6:	4855      	ldr	r0, [pc, #340]	@ (800081c <writecmddata+0x168>)
 80006c8:	f7ff ff2c 	bl	8000524 <PIN_LOW>
    WriteCmd(cmd);
 80006cc:	2104      	movs	r1, #4
 80006ce:	4853      	ldr	r0, [pc, #332]	@ (800081c <writecmddata+0x168>)
 80006d0:	f7ff ff28 	bl	8000524 <PIN_LOW>
 80006d4:	88fb      	ldrh	r3, [r7, #6]
 80006d6:	0a1b      	lsrs	r3, r3, #8
 80006d8:	b29b      	uxth	r3, r3
 80006da:	73fb      	strb	r3, [r7, #15]
 80006dc:	88fb      	ldrh	r3, [r7, #6]
 80006de:	73bb      	strb	r3, [r7, #14]
 80006e0:	4b4e      	ldr	r3, [pc, #312]	@ (800081c <writecmddata+0x168>)
 80006e2:	4a4f      	ldr	r2, [pc, #316]	@ (8000820 <writecmddata+0x16c>)
 80006e4:	611a      	str	r2, [r3, #16]
 80006e6:	4b4f      	ldr	r3, [pc, #316]	@ (8000824 <writecmddata+0x170>)
 80006e8:	f44f 02f6 	mov.w	r2, #8060928	@ 0x7b0000
 80006ec:	611a      	str	r2, [r3, #16]
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	035b      	lsls	r3, r3, #13
 80006f2:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 80006f6:	7bfb      	ldrb	r3, [r7, #15]
 80006f8:	109b      	asrs	r3, r3, #2
 80006fa:	f003 0320 	and.w	r3, r3, #32
 80006fe:	431a      	orrs	r2, r3
 8000700:	4b46      	ldr	r3, [pc, #280]	@ (800081c <writecmddata+0x168>)
 8000702:	611a      	str	r2, [r3, #16]
 8000704:	7bfb      	ldrb	r3, [r7, #15]
 8000706:	4a47      	ldr	r2, [pc, #284]	@ (8000824 <writecmddata+0x170>)
 8000708:	f003 037b 	and.w	r3, r3, #123	@ 0x7b
 800070c:	6113      	str	r3, [r2, #16]
 800070e:	2108      	movs	r1, #8
 8000710:	4842      	ldr	r0, [pc, #264]	@ (800081c <writecmddata+0x168>)
 8000712:	f7ff ff07 	bl	8000524 <PIN_LOW>
 8000716:	2108      	movs	r1, #8
 8000718:	4840      	ldr	r0, [pc, #256]	@ (800081c <writecmddata+0x168>)
 800071a:	f7ff ff13 	bl	8000544 <PIN_HIGH>
 800071e:	2108      	movs	r1, #8
 8000720:	483e      	ldr	r0, [pc, #248]	@ (800081c <writecmddata+0x168>)
 8000722:	f7ff ff0f 	bl	8000544 <PIN_HIGH>
 8000726:	4b3d      	ldr	r3, [pc, #244]	@ (800081c <writecmddata+0x168>)
 8000728:	4a3d      	ldr	r2, [pc, #244]	@ (8000820 <writecmddata+0x16c>)
 800072a:	611a      	str	r2, [r3, #16]
 800072c:	4b3d      	ldr	r3, [pc, #244]	@ (8000824 <writecmddata+0x170>)
 800072e:	f44f 02f6 	mov.w	r2, #8060928	@ 0x7b0000
 8000732:	611a      	str	r2, [r3, #16]
 8000734:	7bbb      	ldrb	r3, [r7, #14]
 8000736:	035b      	lsls	r3, r3, #13
 8000738:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 800073c:	7bbb      	ldrb	r3, [r7, #14]
 800073e:	109b      	asrs	r3, r3, #2
 8000740:	f003 0320 	and.w	r3, r3, #32
 8000744:	431a      	orrs	r2, r3
 8000746:	4b35      	ldr	r3, [pc, #212]	@ (800081c <writecmddata+0x168>)
 8000748:	611a      	str	r2, [r3, #16]
 800074a:	7bbb      	ldrb	r3, [r7, #14]
 800074c:	4a35      	ldr	r2, [pc, #212]	@ (8000824 <writecmddata+0x170>)
 800074e:	f003 037b 	and.w	r3, r3, #123	@ 0x7b
 8000752:	6113      	str	r3, [r2, #16]
 8000754:	2108      	movs	r1, #8
 8000756:	4831      	ldr	r0, [pc, #196]	@ (800081c <writecmddata+0x168>)
 8000758:	f7ff fee4 	bl	8000524 <PIN_LOW>
 800075c:	2108      	movs	r1, #8
 800075e:	482f      	ldr	r0, [pc, #188]	@ (800081c <writecmddata+0x168>)
 8000760:	f7ff fef0 	bl	8000544 <PIN_HIGH>
 8000764:	2108      	movs	r1, #8
 8000766:	482d      	ldr	r0, [pc, #180]	@ (800081c <writecmddata+0x168>)
 8000768:	f7ff feec 	bl	8000544 <PIN_HIGH>
 800076c:	2104      	movs	r1, #4
 800076e:	482b      	ldr	r0, [pc, #172]	@ (800081c <writecmddata+0x168>)
 8000770:	f7ff fee8 	bl	8000544 <PIN_HIGH>
    WriteData(dat);
 8000774:	88bb      	ldrh	r3, [r7, #4]
 8000776:	0a1b      	lsrs	r3, r3, #8
 8000778:	b29b      	uxth	r3, r3
 800077a:	737b      	strb	r3, [r7, #13]
 800077c:	88bb      	ldrh	r3, [r7, #4]
 800077e:	733b      	strb	r3, [r7, #12]
 8000780:	4b26      	ldr	r3, [pc, #152]	@ (800081c <writecmddata+0x168>)
 8000782:	4a27      	ldr	r2, [pc, #156]	@ (8000820 <writecmddata+0x16c>)
 8000784:	611a      	str	r2, [r3, #16]
 8000786:	4b27      	ldr	r3, [pc, #156]	@ (8000824 <writecmddata+0x170>)
 8000788:	f44f 02f6 	mov.w	r2, #8060928	@ 0x7b0000
 800078c:	611a      	str	r2, [r3, #16]
 800078e:	7b7b      	ldrb	r3, [r7, #13]
 8000790:	035b      	lsls	r3, r3, #13
 8000792:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 8000796:	7b7b      	ldrb	r3, [r7, #13]
 8000798:	109b      	asrs	r3, r3, #2
 800079a:	f003 0320 	and.w	r3, r3, #32
 800079e:	431a      	orrs	r2, r3
 80007a0:	4b1e      	ldr	r3, [pc, #120]	@ (800081c <writecmddata+0x168>)
 80007a2:	611a      	str	r2, [r3, #16]
 80007a4:	7b7b      	ldrb	r3, [r7, #13]
 80007a6:	4a1f      	ldr	r2, [pc, #124]	@ (8000824 <writecmddata+0x170>)
 80007a8:	f003 037b 	and.w	r3, r3, #123	@ 0x7b
 80007ac:	6113      	str	r3, [r2, #16]
 80007ae:	2108      	movs	r1, #8
 80007b0:	481a      	ldr	r0, [pc, #104]	@ (800081c <writecmddata+0x168>)
 80007b2:	f7ff feb7 	bl	8000524 <PIN_LOW>
 80007b6:	2108      	movs	r1, #8
 80007b8:	4818      	ldr	r0, [pc, #96]	@ (800081c <writecmddata+0x168>)
 80007ba:	f7ff fec3 	bl	8000544 <PIN_HIGH>
 80007be:	2108      	movs	r1, #8
 80007c0:	4816      	ldr	r0, [pc, #88]	@ (800081c <writecmddata+0x168>)
 80007c2:	f7ff febf 	bl	8000544 <PIN_HIGH>
 80007c6:	4b15      	ldr	r3, [pc, #84]	@ (800081c <writecmddata+0x168>)
 80007c8:	4a15      	ldr	r2, [pc, #84]	@ (8000820 <writecmddata+0x16c>)
 80007ca:	611a      	str	r2, [r3, #16]
 80007cc:	4b15      	ldr	r3, [pc, #84]	@ (8000824 <writecmddata+0x170>)
 80007ce:	f44f 02f6 	mov.w	r2, #8060928	@ 0x7b0000
 80007d2:	611a      	str	r2, [r3, #16]
 80007d4:	7b3b      	ldrb	r3, [r7, #12]
 80007d6:	035b      	lsls	r3, r3, #13
 80007d8:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 80007dc:	7b3b      	ldrb	r3, [r7, #12]
 80007de:	109b      	asrs	r3, r3, #2
 80007e0:	f003 0320 	and.w	r3, r3, #32
 80007e4:	431a      	orrs	r2, r3
 80007e6:	4b0d      	ldr	r3, [pc, #52]	@ (800081c <writecmddata+0x168>)
 80007e8:	611a      	str	r2, [r3, #16]
 80007ea:	7b3b      	ldrb	r3, [r7, #12]
 80007ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000824 <writecmddata+0x170>)
 80007ee:	f003 037b 	and.w	r3, r3, #123	@ 0x7b
 80007f2:	6113      	str	r3, [r2, #16]
 80007f4:	2108      	movs	r1, #8
 80007f6:	4809      	ldr	r0, [pc, #36]	@ (800081c <writecmddata+0x168>)
 80007f8:	f7ff fe94 	bl	8000524 <PIN_LOW>
 80007fc:	2108      	movs	r1, #8
 80007fe:	4807      	ldr	r0, [pc, #28]	@ (800081c <writecmddata+0x168>)
 8000800:	f7ff fea0 	bl	8000544 <PIN_HIGH>
 8000804:	2108      	movs	r1, #8
 8000806:	4805      	ldr	r0, [pc, #20]	@ (800081c <writecmddata+0x168>)
 8000808:	f7ff fe9c 	bl	8000544 <PIN_HIGH>
    CS_IDLE;
 800080c:	2102      	movs	r1, #2
 800080e:	4803      	ldr	r0, [pc, #12]	@ (800081c <writecmddata+0x168>)
 8000810:	f7ff fe98 	bl	8000544 <PIN_HIGH>
}
 8000814:	bf00      	nop
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40010800 	.word	0x40010800
 8000820:	80200000 	.word	0x80200000
 8000824:	40010c00 	.word	0x40010c00

08000828 <WriteCmdParamN>:



static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	603a      	str	r2, [r7, #0]
 8000832:	80fb      	strh	r3, [r7, #6]
 8000834:	460b      	mov	r3, r1
 8000836:	717b      	strb	r3, [r7, #5]
    CS_ACTIVE;
 8000838:	2102      	movs	r1, #2
 800083a:	4878      	ldr	r0, [pc, #480]	@ (8000a1c <WriteCmdParamN+0x1f4>)
 800083c:	f7ff fe72 	bl	8000524 <PIN_LOW>
    WriteCmd(cmd);
 8000840:	2104      	movs	r1, #4
 8000842:	4876      	ldr	r0, [pc, #472]	@ (8000a1c <WriteCmdParamN+0x1f4>)
 8000844:	f7ff fe6e 	bl	8000524 <PIN_LOW>
 8000848:	88fb      	ldrh	r3, [r7, #6]
 800084a:	0a1b      	lsrs	r3, r3, #8
 800084c:	b29b      	uxth	r3, r3
 800084e:	73fb      	strb	r3, [r7, #15]
 8000850:	88fb      	ldrh	r3, [r7, #6]
 8000852:	73bb      	strb	r3, [r7, #14]
 8000854:	4b71      	ldr	r3, [pc, #452]	@ (8000a1c <WriteCmdParamN+0x1f4>)
 8000856:	4a72      	ldr	r2, [pc, #456]	@ (8000a20 <WriteCmdParamN+0x1f8>)
 8000858:	611a      	str	r2, [r3, #16]
 800085a:	4b72      	ldr	r3, [pc, #456]	@ (8000a24 <WriteCmdParamN+0x1fc>)
 800085c:	f44f 02f6 	mov.w	r2, #8060928	@ 0x7b0000
 8000860:	611a      	str	r2, [r3, #16]
 8000862:	7bfb      	ldrb	r3, [r7, #15]
 8000864:	035b      	lsls	r3, r3, #13
 8000866:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 800086a:	7bfb      	ldrb	r3, [r7, #15]
 800086c:	109b      	asrs	r3, r3, #2
 800086e:	f003 0320 	and.w	r3, r3, #32
 8000872:	431a      	orrs	r2, r3
 8000874:	4b69      	ldr	r3, [pc, #420]	@ (8000a1c <WriteCmdParamN+0x1f4>)
 8000876:	611a      	str	r2, [r3, #16]
 8000878:	7bfb      	ldrb	r3, [r7, #15]
 800087a:	4a6a      	ldr	r2, [pc, #424]	@ (8000a24 <WriteCmdParamN+0x1fc>)
 800087c:	f003 037b 	and.w	r3, r3, #123	@ 0x7b
 8000880:	6113      	str	r3, [r2, #16]
 8000882:	2108      	movs	r1, #8
 8000884:	4865      	ldr	r0, [pc, #404]	@ (8000a1c <WriteCmdParamN+0x1f4>)
 8000886:	f7ff fe4d 	bl	8000524 <PIN_LOW>
 800088a:	2108      	movs	r1, #8
 800088c:	4863      	ldr	r0, [pc, #396]	@ (8000a1c <WriteCmdParamN+0x1f4>)
 800088e:	f7ff fe59 	bl	8000544 <PIN_HIGH>
 8000892:	2108      	movs	r1, #8
 8000894:	4861      	ldr	r0, [pc, #388]	@ (8000a1c <WriteCmdParamN+0x1f4>)
 8000896:	f7ff fe55 	bl	8000544 <PIN_HIGH>
 800089a:	4b60      	ldr	r3, [pc, #384]	@ (8000a1c <WriteCmdParamN+0x1f4>)
 800089c:	4a60      	ldr	r2, [pc, #384]	@ (8000a20 <WriteCmdParamN+0x1f8>)
 800089e:	611a      	str	r2, [r3, #16]
 80008a0:	4b60      	ldr	r3, [pc, #384]	@ (8000a24 <WriteCmdParamN+0x1fc>)
 80008a2:	f44f 02f6 	mov.w	r2, #8060928	@ 0x7b0000
 80008a6:	611a      	str	r2, [r3, #16]
 80008a8:	7bbb      	ldrb	r3, [r7, #14]
 80008aa:	035b      	lsls	r3, r3, #13
 80008ac:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 80008b0:	7bbb      	ldrb	r3, [r7, #14]
 80008b2:	109b      	asrs	r3, r3, #2
 80008b4:	f003 0320 	and.w	r3, r3, #32
 80008b8:	431a      	orrs	r2, r3
 80008ba:	4b58      	ldr	r3, [pc, #352]	@ (8000a1c <WriteCmdParamN+0x1f4>)
 80008bc:	611a      	str	r2, [r3, #16]
 80008be:	7bbb      	ldrb	r3, [r7, #14]
 80008c0:	4a58      	ldr	r2, [pc, #352]	@ (8000a24 <WriteCmdParamN+0x1fc>)
 80008c2:	f003 037b 	and.w	r3, r3, #123	@ 0x7b
 80008c6:	6113      	str	r3, [r2, #16]
 80008c8:	2108      	movs	r1, #8
 80008ca:	4854      	ldr	r0, [pc, #336]	@ (8000a1c <WriteCmdParamN+0x1f4>)
 80008cc:	f7ff fe2a 	bl	8000524 <PIN_LOW>
 80008d0:	2108      	movs	r1, #8
 80008d2:	4852      	ldr	r0, [pc, #328]	@ (8000a1c <WriteCmdParamN+0x1f4>)
 80008d4:	f7ff fe36 	bl	8000544 <PIN_HIGH>
 80008d8:	2108      	movs	r1, #8
 80008da:	4850      	ldr	r0, [pc, #320]	@ (8000a1c <WriteCmdParamN+0x1f4>)
 80008dc:	f7ff fe32 	bl	8000544 <PIN_HIGH>
 80008e0:	2104      	movs	r1, #4
 80008e2:	484e      	ldr	r0, [pc, #312]	@ (8000a1c <WriteCmdParamN+0x1f4>)
 80008e4:	f7ff fe2e 	bl	8000544 <PIN_HIGH>
    while (N-- > 0) {
 80008e8:	e086      	b.n	80009f8 <WriteCmdParamN+0x1d0>
        uint8_t u8 = *block++;
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	1c5a      	adds	r2, r3, #1
 80008ee:	603a      	str	r2, [r7, #0]
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	737b      	strb	r3, [r7, #13]
        write8(u8);
 80008f4:	4b49      	ldr	r3, [pc, #292]	@ (8000a1c <WriteCmdParamN+0x1f4>)
 80008f6:	4a4a      	ldr	r2, [pc, #296]	@ (8000a20 <WriteCmdParamN+0x1f8>)
 80008f8:	611a      	str	r2, [r3, #16]
 80008fa:	4b4a      	ldr	r3, [pc, #296]	@ (8000a24 <WriteCmdParamN+0x1fc>)
 80008fc:	f44f 02f6 	mov.w	r2, #8060928	@ 0x7b0000
 8000900:	611a      	str	r2, [r3, #16]
 8000902:	7b7b      	ldrb	r3, [r7, #13]
 8000904:	035b      	lsls	r3, r3, #13
 8000906:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 800090a:	7b7b      	ldrb	r3, [r7, #13]
 800090c:	109b      	asrs	r3, r3, #2
 800090e:	f003 0320 	and.w	r3, r3, #32
 8000912:	431a      	orrs	r2, r3
 8000914:	4b41      	ldr	r3, [pc, #260]	@ (8000a1c <WriteCmdParamN+0x1f4>)
 8000916:	611a      	str	r2, [r3, #16]
 8000918:	7b7b      	ldrb	r3, [r7, #13]
 800091a:	4a42      	ldr	r2, [pc, #264]	@ (8000a24 <WriteCmdParamN+0x1fc>)
 800091c:	f003 037b 	and.w	r3, r3, #123	@ 0x7b
 8000920:	6113      	str	r3, [r2, #16]
 8000922:	2108      	movs	r1, #8
 8000924:	483d      	ldr	r0, [pc, #244]	@ (8000a1c <WriteCmdParamN+0x1f4>)
 8000926:	f7ff fdfd 	bl	8000524 <PIN_LOW>
 800092a:	2108      	movs	r1, #8
 800092c:	483b      	ldr	r0, [pc, #236]	@ (8000a1c <WriteCmdParamN+0x1f4>)
 800092e:	f7ff fe09 	bl	8000544 <PIN_HIGH>
 8000932:	2108      	movs	r1, #8
 8000934:	4839      	ldr	r0, [pc, #228]	@ (8000a1c <WriteCmdParamN+0x1f4>)
 8000936:	f7ff fe05 	bl	8000544 <PIN_HIGH>
        if (N && is8347) {
 800093a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d05a      	beq.n	80009f8 <WriteCmdParamN+0x1d0>
 8000942:	4b39      	ldr	r3, [pc, #228]	@ (8000a28 <WriteCmdParamN+0x200>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d056      	beq.n	80009f8 <WriteCmdParamN+0x1d0>
            cmd++;
 800094a:	88fb      	ldrh	r3, [r7, #6]
 800094c:	3301      	adds	r3, #1
 800094e:	80fb      	strh	r3, [r7, #6]
            WriteCmd(cmd);
 8000950:	2104      	movs	r1, #4
 8000952:	4832      	ldr	r0, [pc, #200]	@ (8000a1c <WriteCmdParamN+0x1f4>)
 8000954:	f7ff fde6 	bl	8000524 <PIN_LOW>
 8000958:	88fb      	ldrh	r3, [r7, #6]
 800095a:	0a1b      	lsrs	r3, r3, #8
 800095c:	b29b      	uxth	r3, r3
 800095e:	733b      	strb	r3, [r7, #12]
 8000960:	88fb      	ldrh	r3, [r7, #6]
 8000962:	72fb      	strb	r3, [r7, #11]
 8000964:	4b2d      	ldr	r3, [pc, #180]	@ (8000a1c <WriteCmdParamN+0x1f4>)
 8000966:	4a2e      	ldr	r2, [pc, #184]	@ (8000a20 <WriteCmdParamN+0x1f8>)
 8000968:	611a      	str	r2, [r3, #16]
 800096a:	4b2e      	ldr	r3, [pc, #184]	@ (8000a24 <WriteCmdParamN+0x1fc>)
 800096c:	f44f 02f6 	mov.w	r2, #8060928	@ 0x7b0000
 8000970:	611a      	str	r2, [r3, #16]
 8000972:	7b3b      	ldrb	r3, [r7, #12]
 8000974:	035b      	lsls	r3, r3, #13
 8000976:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 800097a:	7b3b      	ldrb	r3, [r7, #12]
 800097c:	109b      	asrs	r3, r3, #2
 800097e:	f003 0320 	and.w	r3, r3, #32
 8000982:	431a      	orrs	r2, r3
 8000984:	4b25      	ldr	r3, [pc, #148]	@ (8000a1c <WriteCmdParamN+0x1f4>)
 8000986:	611a      	str	r2, [r3, #16]
 8000988:	7b3b      	ldrb	r3, [r7, #12]
 800098a:	4a26      	ldr	r2, [pc, #152]	@ (8000a24 <WriteCmdParamN+0x1fc>)
 800098c:	f003 037b 	and.w	r3, r3, #123	@ 0x7b
 8000990:	6113      	str	r3, [r2, #16]
 8000992:	2108      	movs	r1, #8
 8000994:	4821      	ldr	r0, [pc, #132]	@ (8000a1c <WriteCmdParamN+0x1f4>)
 8000996:	f7ff fdc5 	bl	8000524 <PIN_LOW>
 800099a:	2108      	movs	r1, #8
 800099c:	481f      	ldr	r0, [pc, #124]	@ (8000a1c <WriteCmdParamN+0x1f4>)
 800099e:	f7ff fdd1 	bl	8000544 <PIN_HIGH>
 80009a2:	2108      	movs	r1, #8
 80009a4:	481d      	ldr	r0, [pc, #116]	@ (8000a1c <WriteCmdParamN+0x1f4>)
 80009a6:	f7ff fdcd 	bl	8000544 <PIN_HIGH>
 80009aa:	4b1c      	ldr	r3, [pc, #112]	@ (8000a1c <WriteCmdParamN+0x1f4>)
 80009ac:	4a1c      	ldr	r2, [pc, #112]	@ (8000a20 <WriteCmdParamN+0x1f8>)
 80009ae:	611a      	str	r2, [r3, #16]
 80009b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a24 <WriteCmdParamN+0x1fc>)
 80009b2:	f44f 02f6 	mov.w	r2, #8060928	@ 0x7b0000
 80009b6:	611a      	str	r2, [r3, #16]
 80009b8:	7afb      	ldrb	r3, [r7, #11]
 80009ba:	035b      	lsls	r3, r3, #13
 80009bc:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 80009c0:	7afb      	ldrb	r3, [r7, #11]
 80009c2:	109b      	asrs	r3, r3, #2
 80009c4:	f003 0320 	and.w	r3, r3, #32
 80009c8:	431a      	orrs	r2, r3
 80009ca:	4b14      	ldr	r3, [pc, #80]	@ (8000a1c <WriteCmdParamN+0x1f4>)
 80009cc:	611a      	str	r2, [r3, #16]
 80009ce:	7afb      	ldrb	r3, [r7, #11]
 80009d0:	4a14      	ldr	r2, [pc, #80]	@ (8000a24 <WriteCmdParamN+0x1fc>)
 80009d2:	f003 037b 	and.w	r3, r3, #123	@ 0x7b
 80009d6:	6113      	str	r3, [r2, #16]
 80009d8:	2108      	movs	r1, #8
 80009da:	4810      	ldr	r0, [pc, #64]	@ (8000a1c <WriteCmdParamN+0x1f4>)
 80009dc:	f7ff fda2 	bl	8000524 <PIN_LOW>
 80009e0:	2108      	movs	r1, #8
 80009e2:	480e      	ldr	r0, [pc, #56]	@ (8000a1c <WriteCmdParamN+0x1f4>)
 80009e4:	f7ff fdae 	bl	8000544 <PIN_HIGH>
 80009e8:	2108      	movs	r1, #8
 80009ea:	480c      	ldr	r0, [pc, #48]	@ (8000a1c <WriteCmdParamN+0x1f4>)
 80009ec:	f7ff fdaa 	bl	8000544 <PIN_HIGH>
 80009f0:	2104      	movs	r1, #4
 80009f2:	480a      	ldr	r0, [pc, #40]	@ (8000a1c <WriteCmdParamN+0x1f4>)
 80009f4:	f7ff fda6 	bl	8000544 <PIN_HIGH>
    while (N-- > 0) {
 80009f8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80009fc:	b2da      	uxtb	r2, r3
 80009fe:	3a01      	subs	r2, #1
 8000a00:	b2d2      	uxtb	r2, r2
 8000a02:	717a      	strb	r2, [r7, #5]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	f73f af70 	bgt.w	80008ea <WriteCmdParamN+0xc2>
        }
    }
    CS_IDLE;
 8000a0a:	2102      	movs	r1, #2
 8000a0c:	4803      	ldr	r0, [pc, #12]	@ (8000a1c <WriteCmdParamN+0x1f4>)
 8000a0e:	f7ff fd99 	bl	8000544 <PIN_HIGH>
}
 8000a12:	bf00      	nop
 8000a14:	3710      	adds	r7, #16
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40010800 	.word	0x40010800
 8000a20:	80200000 	.word	0x80200000
 8000a24:	40010c00 	.word	0x40010c00
 8000a28:	20000073 	.word	0x20000073

08000a2c <reset>:
}



void reset(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
    done_reset = 1;
 8000a30:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab0 <reset+0x84>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	701a      	strb	r2, [r3, #0]
    setWriteDir();
 8000a36:	f7ff fe13 	bl	8000660 <setWriteDir>
    CTL_INIT();
 8000a3a:	2110      	movs	r1, #16
 8000a3c:	481d      	ldr	r0, [pc, #116]	@ (8000ab4 <reset+0x88>)
 8000a3e:	f7ff fda7 	bl	8000590 <PIN_OUTPUT>
 8000a42:	2108      	movs	r1, #8
 8000a44:	481b      	ldr	r0, [pc, #108]	@ (8000ab4 <reset+0x88>)
 8000a46:	f7ff fda3 	bl	8000590 <PIN_OUTPUT>
 8000a4a:	2104      	movs	r1, #4
 8000a4c:	4819      	ldr	r0, [pc, #100]	@ (8000ab4 <reset+0x88>)
 8000a4e:	f7ff fd9f 	bl	8000590 <PIN_OUTPUT>
 8000a52:	2102      	movs	r1, #2
 8000a54:	4817      	ldr	r0, [pc, #92]	@ (8000ab4 <reset+0x88>)
 8000a56:	f7ff fd9b 	bl	8000590 <PIN_OUTPUT>
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	4815      	ldr	r0, [pc, #84]	@ (8000ab4 <reset+0x88>)
 8000a5e:	f7ff fd97 	bl	8000590 <PIN_OUTPUT>
    CS_IDLE;
 8000a62:	2102      	movs	r1, #2
 8000a64:	4813      	ldr	r0, [pc, #76]	@ (8000ab4 <reset+0x88>)
 8000a66:	f7ff fd6d 	bl	8000544 <PIN_HIGH>
    RD_IDLE;
 8000a6a:	2110      	movs	r1, #16
 8000a6c:	4811      	ldr	r0, [pc, #68]	@ (8000ab4 <reset+0x88>)
 8000a6e:	f7ff fd69 	bl	8000544 <PIN_HIGH>
    WR_IDLE;
 8000a72:	2108      	movs	r1, #8
 8000a74:	480f      	ldr	r0, [pc, #60]	@ (8000ab4 <reset+0x88>)
 8000a76:	f7ff fd65 	bl	8000544 <PIN_HIGH>
    RESET_IDLE;
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	480d      	ldr	r0, [pc, #52]	@ (8000ab4 <reset+0x88>)
 8000a7e:	f7ff fd61 	bl	8000544 <PIN_HIGH>
    delay(50);
 8000a82:	2032      	movs	r0, #50	@ 0x32
 8000a84:	f7ff fd36 	bl	80004f4 <delay>
    RESET_ACTIVE;
 8000a88:	2101      	movs	r1, #1
 8000a8a:	480a      	ldr	r0, [pc, #40]	@ (8000ab4 <reset+0x88>)
 8000a8c:	f7ff fd4a 	bl	8000524 <PIN_LOW>
    delay(100);
 8000a90:	2064      	movs	r0, #100	@ 0x64
 8000a92:	f7ff fd2f 	bl	80004f4 <delay>
    RESET_IDLE;
 8000a96:	2101      	movs	r1, #1
 8000a98:	4806      	ldr	r0, [pc, #24]	@ (8000ab4 <reset+0x88>)
 8000a9a:	f7ff fd53 	bl	8000544 <PIN_HIGH>
    delay(100);
 8000a9e:	2064      	movs	r0, #100	@ 0x64
 8000aa0:	f7ff fd28 	bl	80004f4 <delay>
	WriteCmdData(0xB0, 0x0000);   //R61520 needs this to read ID
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	20b0      	movs	r0, #176	@ 0xb0
 8000aa8:	f7ff fd8a 	bl	80005c0 <WriteCmdData>
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000072 	.word	0x20000072
 8000ab4:	40010800 	.word	0x40010800

08000ab8 <read16bits>:

static uint16_t read16bits(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
    uint16_t ret;
    uint8_t lo;
    READ_8(ret);
 8000abe:	2110      	movs	r1, #16
 8000ac0:	4862      	ldr	r0, [pc, #392]	@ (8000c4c <read16bits+0x194>)
 8000ac2:	f7ff fd3f 	bl	8000544 <PIN_HIGH>
 8000ac6:	2110      	movs	r1, #16
 8000ac8:	4860      	ldr	r0, [pc, #384]	@ (8000c4c <read16bits+0x194>)
 8000aca:	f7ff fd2b 	bl	8000524 <PIN_LOW>
 8000ace:	2110      	movs	r1, #16
 8000ad0:	485e      	ldr	r0, [pc, #376]	@ (8000c4c <read16bits+0x194>)
 8000ad2:	f7ff fd27 	bl	8000524 <PIN_LOW>
 8000ad6:	2110      	movs	r1, #16
 8000ad8:	485c      	ldr	r0, [pc, #368]	@ (8000c4c <read16bits+0x194>)
 8000ada:	f7ff fd23 	bl	8000524 <PIN_LOW>
 8000ade:	2110      	movs	r1, #16
 8000ae0:	485a      	ldr	r0, [pc, #360]	@ (8000c4c <read16bits+0x194>)
 8000ae2:	f7ff fd1f 	bl	8000524 <PIN_LOW>
 8000ae6:	4b5a      	ldr	r3, [pc, #360]	@ (8000c50 <read16bits+0x198>)
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	f003 0301 	and.w	r3, r3, #1
 8000af0:	b29a      	uxth	r2, r3
 8000af2:	4b57      	ldr	r3, [pc, #348]	@ (8000c50 <read16bits+0x198>)
 8000af4:	689b      	ldr	r3, [r3, #8]
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	f003 0302 	and.w	r3, r3, #2
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	4313      	orrs	r3, r2
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	4b52      	ldr	r3, [pc, #328]	@ (8000c4c <read16bits+0x194>)
 8000b04:	689b      	ldr	r3, [r3, #8]
 8000b06:	0b5b      	lsrs	r3, r3, #13
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	f003 0304 	and.w	r3, r3, #4
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	4313      	orrs	r3, r2
 8000b12:	b29a      	uxth	r2, r3
 8000b14:	4b4e      	ldr	r3, [pc, #312]	@ (8000c50 <read16bits+0x198>)
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	f003 0308 	and.w	r3, r3, #8
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	4313      	orrs	r3, r2
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	4b4a      	ldr	r3, [pc, #296]	@ (8000c50 <read16bits+0x198>)
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	f003 0310 	and.w	r3, r3, #16
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	4313      	orrs	r3, r2
 8000b32:	b29a      	uxth	r2, r3
 8000b34:	4b46      	ldr	r3, [pc, #280]	@ (8000c50 <read16bits+0x198>)
 8000b36:	689b      	ldr	r3, [r3, #8]
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	f003 0320 	and.w	r3, r3, #32
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	4313      	orrs	r3, r2
 8000b42:	b29a      	uxth	r2, r3
 8000b44:	4b42      	ldr	r3, [pc, #264]	@ (8000c50 <read16bits+0x198>)
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	4313      	orrs	r3, r2
 8000b52:	b29a      	uxth	r2, r3
 8000b54:	4b3d      	ldr	r3, [pc, #244]	@ (8000c4c <read16bits+0x194>)
 8000b56:	689b      	ldr	r3, [r3, #8]
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	4313      	orrs	r3, r2
 8000b66:	80fb      	strh	r3, [r7, #6]
 8000b68:	2110      	movs	r1, #16
 8000b6a:	4838      	ldr	r0, [pc, #224]	@ (8000c4c <read16bits+0x194>)
 8000b6c:	f7ff fcea 	bl	8000544 <PIN_HIGH>
 8000b70:	2110      	movs	r1, #16
 8000b72:	4836      	ldr	r0, [pc, #216]	@ (8000c4c <read16bits+0x194>)
 8000b74:	f7ff fce6 	bl	8000544 <PIN_HIGH>
    READ_8(lo);
 8000b78:	2110      	movs	r1, #16
 8000b7a:	4834      	ldr	r0, [pc, #208]	@ (8000c4c <read16bits+0x194>)
 8000b7c:	f7ff fce2 	bl	8000544 <PIN_HIGH>
 8000b80:	2110      	movs	r1, #16
 8000b82:	4832      	ldr	r0, [pc, #200]	@ (8000c4c <read16bits+0x194>)
 8000b84:	f7ff fcce 	bl	8000524 <PIN_LOW>
 8000b88:	2110      	movs	r1, #16
 8000b8a:	4830      	ldr	r0, [pc, #192]	@ (8000c4c <read16bits+0x194>)
 8000b8c:	f7ff fcca 	bl	8000524 <PIN_LOW>
 8000b90:	2110      	movs	r1, #16
 8000b92:	482e      	ldr	r0, [pc, #184]	@ (8000c4c <read16bits+0x194>)
 8000b94:	f7ff fcc6 	bl	8000524 <PIN_LOW>
 8000b98:	2110      	movs	r1, #16
 8000b9a:	482c      	ldr	r0, [pc, #176]	@ (8000c4c <read16bits+0x194>)
 8000b9c:	f7ff fcc2 	bl	8000524 <PIN_LOW>
 8000ba0:	4b2b      	ldr	r3, [pc, #172]	@ (8000c50 <read16bits+0x198>)
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	4b28      	ldr	r3, [pc, #160]	@ (8000c50 <read16bits+0x198>)
 8000bae:	689b      	ldr	r3, [r3, #8]
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	f003 0302 	and.w	r3, r3, #2
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	4b23      	ldr	r3, [pc, #140]	@ (8000c4c <read16bits+0x194>)
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	0b5b      	lsrs	r3, r3, #13
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	f003 0304 	and.w	r3, r3, #4
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	4b20      	ldr	r3, [pc, #128]	@ (8000c50 <read16bits+0x198>)
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	f003 0308 	and.w	r3, r3, #8
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	4b1c      	ldr	r3, [pc, #112]	@ (8000c50 <read16bits+0x198>)
 8000be0:	689b      	ldr	r3, [r3, #8]
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	f003 0310 	and.w	r3, r3, #16
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	4313      	orrs	r3, r2
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	4b18      	ldr	r3, [pc, #96]	@ (8000c50 <read16bits+0x198>)
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	f003 0320 	and.w	r3, r3, #32
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4b14      	ldr	r3, [pc, #80]	@ (8000c50 <read16bits+0x198>)
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c4c <read16bits+0x194>)
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	717b      	strb	r3, [r7, #5]
 8000c22:	2110      	movs	r1, #16
 8000c24:	4809      	ldr	r0, [pc, #36]	@ (8000c4c <read16bits+0x194>)
 8000c26:	f7ff fc8d 	bl	8000544 <PIN_HIGH>
 8000c2a:	2110      	movs	r1, #16
 8000c2c:	4807      	ldr	r0, [pc, #28]	@ (8000c4c <read16bits+0x194>)
 8000c2e:	f7ff fc89 	bl	8000544 <PIN_HIGH>
    return (ret << 8) | lo;
 8000c32:	88fb      	ldrh	r3, [r7, #6]
 8000c34:	021b      	lsls	r3, r3, #8
 8000c36:	b21a      	sxth	r2, r3
 8000c38:	797b      	ldrb	r3, [r7, #5]
 8000c3a:	b21b      	sxth	r3, r3
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	b21b      	sxth	r3, r3
 8000c40:	b29b      	uxth	r3, r3
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40010800 	.word	0x40010800
 8000c50:	40010c00 	.word	0x40010c00

08000c54 <readReg>:

uint16_t readReg(uint16_t reg, int8_t index)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	460a      	mov	r2, r1
 8000c5e:	80fb      	strh	r3, [r7, #6]
 8000c60:	4613      	mov	r3, r2
 8000c62:	717b      	strb	r3, [r7, #5]
    uint16_t ret;
    uint8_t lo;
    if (!done_reset)
 8000c64:	4b3e      	ldr	r3, [pc, #248]	@ (8000d60 <readReg+0x10c>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d101      	bne.n	8000c70 <readReg+0x1c>
        reset();
 8000c6c:	f7ff fede 	bl	8000a2c <reset>
    CS_ACTIVE;
 8000c70:	2102      	movs	r1, #2
 8000c72:	483c      	ldr	r0, [pc, #240]	@ (8000d64 <readReg+0x110>)
 8000c74:	f7ff fc56 	bl	8000524 <PIN_LOW>
    WriteCmd(reg);
 8000c78:	2104      	movs	r1, #4
 8000c7a:	483a      	ldr	r0, [pc, #232]	@ (8000d64 <readReg+0x110>)
 8000c7c:	f7ff fc52 	bl	8000524 <PIN_LOW>
 8000c80:	88fb      	ldrh	r3, [r7, #6]
 8000c82:	0a1b      	lsrs	r3, r3, #8
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	73fb      	strb	r3, [r7, #15]
 8000c88:	88fb      	ldrh	r3, [r7, #6]
 8000c8a:	73bb      	strb	r3, [r7, #14]
 8000c8c:	4b35      	ldr	r3, [pc, #212]	@ (8000d64 <readReg+0x110>)
 8000c8e:	4a36      	ldr	r2, [pc, #216]	@ (8000d68 <readReg+0x114>)
 8000c90:	611a      	str	r2, [r3, #16]
 8000c92:	4b36      	ldr	r3, [pc, #216]	@ (8000d6c <readReg+0x118>)
 8000c94:	f44f 02f6 	mov.w	r2, #8060928	@ 0x7b0000
 8000c98:	611a      	str	r2, [r3, #16]
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
 8000c9c:	035b      	lsls	r3, r3, #13
 8000c9e:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
 8000ca4:	109b      	asrs	r3, r3, #2
 8000ca6:	f003 0320 	and.w	r3, r3, #32
 8000caa:	431a      	orrs	r2, r3
 8000cac:	4b2d      	ldr	r3, [pc, #180]	@ (8000d64 <readReg+0x110>)
 8000cae:	611a      	str	r2, [r3, #16]
 8000cb0:	7bfb      	ldrb	r3, [r7, #15]
 8000cb2:	4a2e      	ldr	r2, [pc, #184]	@ (8000d6c <readReg+0x118>)
 8000cb4:	f003 037b 	and.w	r3, r3, #123	@ 0x7b
 8000cb8:	6113      	str	r3, [r2, #16]
 8000cba:	2108      	movs	r1, #8
 8000cbc:	4829      	ldr	r0, [pc, #164]	@ (8000d64 <readReg+0x110>)
 8000cbe:	f7ff fc31 	bl	8000524 <PIN_LOW>
 8000cc2:	2108      	movs	r1, #8
 8000cc4:	4827      	ldr	r0, [pc, #156]	@ (8000d64 <readReg+0x110>)
 8000cc6:	f7ff fc3d 	bl	8000544 <PIN_HIGH>
 8000cca:	2108      	movs	r1, #8
 8000ccc:	4825      	ldr	r0, [pc, #148]	@ (8000d64 <readReg+0x110>)
 8000cce:	f7ff fc39 	bl	8000544 <PIN_HIGH>
 8000cd2:	4b24      	ldr	r3, [pc, #144]	@ (8000d64 <readReg+0x110>)
 8000cd4:	4a24      	ldr	r2, [pc, #144]	@ (8000d68 <readReg+0x114>)
 8000cd6:	611a      	str	r2, [r3, #16]
 8000cd8:	4b24      	ldr	r3, [pc, #144]	@ (8000d6c <readReg+0x118>)
 8000cda:	f44f 02f6 	mov.w	r2, #8060928	@ 0x7b0000
 8000cde:	611a      	str	r2, [r3, #16]
 8000ce0:	7bbb      	ldrb	r3, [r7, #14]
 8000ce2:	035b      	lsls	r3, r3, #13
 8000ce4:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 8000ce8:	7bbb      	ldrb	r3, [r7, #14]
 8000cea:	109b      	asrs	r3, r3, #2
 8000cec:	f003 0320 	and.w	r3, r3, #32
 8000cf0:	431a      	orrs	r2, r3
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d64 <readReg+0x110>)
 8000cf4:	611a      	str	r2, [r3, #16]
 8000cf6:	7bbb      	ldrb	r3, [r7, #14]
 8000cf8:	4a1c      	ldr	r2, [pc, #112]	@ (8000d6c <readReg+0x118>)
 8000cfa:	f003 037b 	and.w	r3, r3, #123	@ 0x7b
 8000cfe:	6113      	str	r3, [r2, #16]
 8000d00:	2108      	movs	r1, #8
 8000d02:	4818      	ldr	r0, [pc, #96]	@ (8000d64 <readReg+0x110>)
 8000d04:	f7ff fc0e 	bl	8000524 <PIN_LOW>
 8000d08:	2108      	movs	r1, #8
 8000d0a:	4816      	ldr	r0, [pc, #88]	@ (8000d64 <readReg+0x110>)
 8000d0c:	f7ff fc1a 	bl	8000544 <PIN_HIGH>
 8000d10:	2108      	movs	r1, #8
 8000d12:	4814      	ldr	r0, [pc, #80]	@ (8000d64 <readReg+0x110>)
 8000d14:	f7ff fc16 	bl	8000544 <PIN_HIGH>
 8000d18:	2104      	movs	r1, #4
 8000d1a:	4812      	ldr	r0, [pc, #72]	@ (8000d64 <readReg+0x110>)
 8000d1c:	f7ff fc12 	bl	8000544 <PIN_HIGH>
    setReadDir();
 8000d20:	f7ff fc74 	bl	800060c <setReadDir>
    delay(1);    //1us should be adequate
 8000d24:	2001      	movs	r0, #1
 8000d26:	f7ff fbe5 	bl	80004f4 <delay>
    //    READ_16(ret);
    do { ret = read16bits(); }while (--index >= 0);  //need to test with SSD1963
 8000d2a:	f7ff fec5 	bl	8000ab8 <read16bits>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	81bb      	strh	r3, [r7, #12]
 8000d32:	797b      	ldrb	r3, [r7, #5]
 8000d34:	3b01      	subs	r3, #1
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	717b      	strb	r3, [r7, #5]
 8000d3a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	daf3      	bge.n	8000d2a <readReg+0xd6>
    RD_IDLE;
 8000d42:	2110      	movs	r1, #16
 8000d44:	4807      	ldr	r0, [pc, #28]	@ (8000d64 <readReg+0x110>)
 8000d46:	f7ff fbfd 	bl	8000544 <PIN_HIGH>
    CS_IDLE;
 8000d4a:	2102      	movs	r1, #2
 8000d4c:	4805      	ldr	r0, [pc, #20]	@ (8000d64 <readReg+0x110>)
 8000d4e:	f7ff fbf9 	bl	8000544 <PIN_HIGH>
    setWriteDir();
 8000d52:	f7ff fc85 	bl	8000660 <setWriteDir>
    return ret;
 8000d56:	89bb      	ldrh	r3, [r7, #12]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3710      	adds	r7, #16
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000072 	.word	0x20000072
 8000d64:	40010800 	.word	0x40010800
 8000d68:	80200000 	.word	0x80200000
 8000d6c:	40010c00 	.word	0x40010c00

08000d70 <readReg32>:

uint32_t readReg32(uint16_t reg)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 8000d7a:	88fb      	ldrh	r3, [r7, #6]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff ff68 	bl	8000c54 <readReg>
 8000d84:	4603      	mov	r3, r0
 8000d86:	81fb      	strh	r3, [r7, #14]
    uint16_t l = readReg(reg, 1);
 8000d88:	88fb      	ldrh	r3, [r7, #6]
 8000d8a:	2101      	movs	r1, #1
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ff61 	bl	8000c54 <readReg>
 8000d92:	4603      	mov	r3, r0
 8000d94:	81bb      	strh	r3, [r7, #12]
    return ((uint32_t) h << 16) | (l);
 8000d96:	89fb      	ldrh	r3, [r7, #14]
 8000d98:	041a      	lsls	r2, r3, #16
 8000d9a:	89bb      	ldrh	r3, [r7, #12]
 8000d9c:	4313      	orrs	r3, r2
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <readReg40>:

uint32_t readReg40(uint16_t reg)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b084      	sub	sp, #16
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	4603      	mov	r3, r0
 8000dae:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 8000db0:	88fb      	ldrh	r3, [r7, #6]
 8000db2:	2100      	movs	r1, #0
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff4d 	bl	8000c54 <readReg>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	81fb      	strh	r3, [r7, #14]
    uint16_t m = readReg(reg, 1);
 8000dbe:	88fb      	ldrh	r3, [r7, #6]
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff ff46 	bl	8000c54 <readReg>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	81bb      	strh	r3, [r7, #12]
    uint16_t l = readReg(reg, 2);
 8000dcc:	88fb      	ldrh	r3, [r7, #6]
 8000dce:	2102      	movs	r1, #2
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff3f 	bl	8000c54 <readReg>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	817b      	strh	r3, [r7, #10]
    return ((uint32_t) h << 24) | (m << 8) | (l >> 8);
 8000dda:	89fb      	ldrh	r3, [r7, #14]
 8000ddc:	061a      	lsls	r2, r3, #24
 8000dde:	89bb      	ldrh	r3, [r7, #12]
 8000de0:	021b      	lsls	r3, r3, #8
 8000de2:	4313      	orrs	r3, r2
 8000de4:	897a      	ldrh	r2, [r7, #10]
 8000de6:	0a12      	lsrs	r2, r2, #8
 8000de8:	b292      	uxth	r2, r2
 8000dea:	4313      	orrs	r3, r2
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <readID>:




uint16_t readID(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
    uint16_t ret, ret2;
    uint8_t msb;
    ret = readReg(0,0);           //forces a reset() if called before begin()
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f7ff ff29 	bl	8000c54 <readReg>
 8000e02:	4603      	mov	r3, r0
 8000e04:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5408)          //the SPFD5408 fails the 0xD3D3 test.
 8000e06:	89fb      	ldrh	r3, [r7, #14]
 8000e08:	f245 4208 	movw	r2, #21512	@ 0x5408
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d102      	bne.n	8000e16 <readID+0x22>
        return 0x5408;
 8000e10:	f245 4308 	movw	r3, #21512	@ 0x5408
 8000e14:	e128      	b.n	8001068 <readID+0x274>
    if (ret == 0x5420)          //the SPFD5420 fails the 0xD3D3 test.
 8000e16:	89fb      	ldrh	r3, [r7, #14]
 8000e18:	f245 4220 	movw	r2, #21536	@ 0x5420
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d102      	bne.n	8000e26 <readID+0x32>
        return 0x5420;
 8000e20:	f245 4320 	movw	r3, #21536	@ 0x5420
 8000e24:	e120      	b.n	8001068 <readID+0x274>
    if (ret == 0x8989)          //SSD1289 is always 8989
 8000e26:	89fb      	ldrh	r3, [r7, #14]
 8000e28:	f648 1289 	movw	r2, #35209	@ 0x8989
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d102      	bne.n	8000e36 <readID+0x42>
        return 0x1289;
 8000e30:	f241 2389 	movw	r3, #4745	@ 0x1289
 8000e34:	e118      	b.n	8001068 <readID+0x274>
    ret = readReg(0x67,0);        //HX8347-A
 8000e36:	2100      	movs	r1, #0
 8000e38:	2067      	movs	r0, #103	@ 0x67
 8000e3a:	f7ff ff0b 	bl	8000c54 <readReg>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x4747)
 8000e42:	89fb      	ldrh	r3, [r7, #14]
 8000e44:	f244 7247 	movw	r2, #18247	@ 0x4747
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d102      	bne.n	8000e52 <readID+0x5e>
        return 0x8347;
 8000e4c:	f248 3347 	movw	r3, #33607	@ 0x8347
 8000e50:	e10a      	b.n	8001068 <readID+0x274>
//#if defined(SUPPORT_1963) && USING_16BIT_BUS
    ret = readReg32(0xA1);      //SSD1963: [01 57 61 01]
 8000e52:	20a1      	movs	r0, #161	@ 0xa1
 8000e54:	f7ff ff8c 	bl	8000d70 <readReg32>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x6101)
 8000e5c:	89fb      	ldrh	r3, [r7, #14]
 8000e5e:	f246 1201 	movw	r2, #24833	@ 0x6101
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d102      	bne.n	8000e6c <readID+0x78>
        return 0x1963;
 8000e66:	f641 1363 	movw	r3, #6499	@ 0x1963
 8000e6a:	e0fd      	b.n	8001068 <readID+0x274>
    if (ret == 0xFFFF)          //R61526: [xx FF FF FF]
 8000e6c:	89fb      	ldrh	r3, [r7, #14]
 8000e6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d102      	bne.n	8000e7c <readID+0x88>
        return 0x1526;          //subsequent begin() enables Command Access
 8000e76:	f241 5326 	movw	r3, #5414	@ 0x1526
 8000e7a:	e0f5      	b.n	8001068 <readID+0x274>
//    if (ret == 0xFF00)          //R61520: [xx FF FF 00]
//        return 0x1520;          //subsequent begin() enables Command Access
//#endif
	ret = readReg40(0xBF);
 8000e7c:	20bf      	movs	r0, #191	@ 0xbf
 8000e7e:	f7ff ff92 	bl	8000da6 <readReg40>
 8000e82:	4603      	mov	r3, r0
 8000e84:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x8357)          //HX8357B: [xx 01 62 83 57 FF]
 8000e86:	89fb      	ldrh	r3, [r7, #14]
 8000e88:	f248 3257 	movw	r2, #33623	@ 0x8357
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d102      	bne.n	8000e96 <readID+0xa2>
        return 0x8357;
 8000e90:	f248 3357 	movw	r3, #33623	@ 0x8357
 8000e94:	e0e8      	b.n	8001068 <readID+0x274>
	if (ret == 0x9481)          //ILI9481: [xx 02 04 94 81 FF]
 8000e96:	89fb      	ldrh	r3, [r7, #14]
 8000e98:	f249 4281 	movw	r2, #38017	@ 0x9481
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d102      	bne.n	8000ea6 <readID+0xb2>
        return 0x9481;
 8000ea0:	f249 4381 	movw	r3, #38017	@ 0x9481
 8000ea4:	e0e0      	b.n	8001068 <readID+0x274>
    if (ret == 0x1511)          //?R61511: [xx 02 04 15 11] not tested yet
 8000ea6:	89fb      	ldrh	r3, [r7, #14]
 8000ea8:	f241 5211 	movw	r2, #5393	@ 0x1511
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d102      	bne.n	8000eb6 <readID+0xc2>
        return 0x1511;
 8000eb0:	f241 5311 	movw	r3, #5393	@ 0x1511
 8000eb4:	e0d8      	b.n	8001068 <readID+0x274>
    if (ret == 0x1520)          //?R61520: [xx 01 22 15 20]
 8000eb6:	89fb      	ldrh	r3, [r7, #14]
 8000eb8:	f5b3 5fa9 	cmp.w	r3, #5408	@ 0x1520
 8000ebc:	d102      	bne.n	8000ec4 <readID+0xd0>
        return 0x1520;
 8000ebe:	f44f 53a9 	mov.w	r3, #5408	@ 0x1520
 8000ec2:	e0d1      	b.n	8001068 <readID+0x274>
    if (ret == 0x1526)          //?R61526: [xx 01 22 15 26]
 8000ec4:	89fb      	ldrh	r3, [r7, #14]
 8000ec6:	f241 5226 	movw	r2, #5414	@ 0x1526
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d102      	bne.n	8000ed4 <readID+0xe0>
        return 0x1526;
 8000ece:	f241 5326 	movw	r3, #5414	@ 0x1526
 8000ed2:	e0c9      	b.n	8001068 <readID+0x274>
    if (ret == 0x1581)          //R61581:  [xx 01 22 15 81]
 8000ed4:	89fb      	ldrh	r3, [r7, #14]
 8000ed6:	f241 5281 	movw	r2, #5505	@ 0x1581
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d102      	bne.n	8000ee4 <readID+0xf0>
        return 0x1581;
 8000ede:	f241 5381 	movw	r3, #5505	@ 0x1581
 8000ee2:	e0c1      	b.n	8001068 <readID+0x274>
    if (ret == 0x1400)          //?RM68140:[xx FF 68 14 00] not tested yet
 8000ee4:	89fb      	ldrh	r3, [r7, #14]
 8000ee6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8000eea:	d102      	bne.n	8000ef2 <readID+0xfe>
        return 0x6814;
 8000eec:	f646 0314 	movw	r3, #26644	@ 0x6814
 8000ef0:	e0ba      	b.n	8001068 <readID+0x274>
    ret = readReg32(0xD4);
 8000ef2:	20d4      	movs	r0, #212	@ 0xd4
 8000ef4:	f7ff ff3c 	bl	8000d70 <readReg32>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5310)          //NT35310: [xx 01 53 10]
 8000efc:	89fb      	ldrh	r3, [r7, #14]
 8000efe:	f245 3210 	movw	r2, #21264	@ 0x5310
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d102      	bne.n	8000f0c <readID+0x118>
        return 0x5310;
 8000f06:	f245 3310 	movw	r3, #21264	@ 0x5310
 8000f0a:	e0ad      	b.n	8001068 <readID+0x274>
    ret = readReg32(0xD7);
 8000f0c:	20d7      	movs	r0, #215	@ 0xd7
 8000f0e:	f7ff ff2f 	bl	8000d70 <readReg32>
 8000f12:	4603      	mov	r3, r0
 8000f14:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x8031)          //weird unknown from BangGood [xx 20 80 31] PrinceCharles
 8000f16:	89fb      	ldrh	r3, [r7, #14]
 8000f18:	f248 0231 	movw	r2, #32817	@ 0x8031
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d102      	bne.n	8000f26 <readID+0x132>
        return 0x8031;
 8000f20:	f248 0331 	movw	r3, #32817	@ 0x8031
 8000f24:	e0a0      	b.n	8001068 <readID+0x274>
    ret = readReg40(0xEF);      //ILI9327: [xx 02 04 93 27 FF]
 8000f26:	20ef      	movs	r0, #239	@ 0xef
 8000f28:	f7ff ff3d 	bl	8000da6 <readReg40>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9327)
 8000f30:	89fb      	ldrh	r3, [r7, #14]
 8000f32:	f249 3227 	movw	r2, #37671	@ 0x9327
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d102      	bne.n	8000f40 <readID+0x14c>
        return 0x9327;
 8000f3a:	f249 3327 	movw	r3, #37671	@ 0x9327
 8000f3e:	e093      	b.n	8001068 <readID+0x274>
    ret = readReg32(0xFE) >> 8; //weird unknown from BangGood [04 20 53]
 8000f40:	20fe      	movs	r0, #254	@ 0xfe
 8000f42:	f7ff ff15 	bl	8000d70 <readReg32>
 8000f46:	4603      	mov	r3, r0
 8000f48:	0a1b      	lsrs	r3, r3, #8
 8000f4a:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x2053)
 8000f4c:	89fb      	ldrh	r3, [r7, #14]
 8000f4e:	f242 0253 	movw	r2, #8275	@ 0x2053
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d102      	bne.n	8000f5c <readID+0x168>
        return 0x2053;
 8000f56:	f242 0353 	movw	r3, #8275	@ 0x2053
 8000f5a:	e085      	b.n	8001068 <readID+0x274>
    uint32_t ret32 = readReg32(0x04);
 8000f5c:	2004      	movs	r0, #4
 8000f5e:	f7ff ff07 	bl	8000d70 <readReg32>
 8000f62:	60b8      	str	r0, [r7, #8]
    msb = ret32 >> 16;
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	0c1b      	lsrs	r3, r3, #16
 8000f68:	71fb      	strb	r3, [r7, #7]
    ret = ret32;
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	81fb      	strh	r3, [r7, #14]
//    if (msb = 0x38 && ret == 0x8000) //unknown [xx 38 80 00] with D3 = 0x1602
    if (msb == 0x00 && ret == 0x8000) { //HX8357-D [xx 00 80 00]
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d122      	bne.n	8000fba <readID+0x1c6>
 8000f74:	89fb      	ldrh	r3, [r7, #14]
 8000f76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000f7a:	d11e      	bne.n	8000fba <readID+0x1c6>
#if 1
        uint8_t cmds[] = {0xFF, 0x83, 0x57};
 8000f7c:	4a3c      	ldr	r2, [pc, #240]	@ (8001070 <readID+0x27c>)
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	6812      	ldr	r2, [r2, #0]
 8000f82:	4611      	mov	r1, r2
 8000f84:	8019      	strh	r1, [r3, #0]
 8000f86:	3302      	adds	r3, #2
 8000f88:	0c12      	lsrs	r2, r2, #16
 8000f8a:	701a      	strb	r2, [r3, #0]
        pushCommand(0xB9, cmds, 3);
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	2203      	movs	r2, #3
 8000f90:	4619      	mov	r1, r3
 8000f92:	20b9      	movs	r0, #185	@ 0xb9
 8000f94:	f7ff fb26 	bl	80005e4 <pushCommand>
        msb = readReg(0xD0,0);
 8000f98:	2100      	movs	r1, #0
 8000f9a:	20d0      	movs	r0, #208	@ 0xd0
 8000f9c:	f7ff fe5a 	bl	8000c54 <readReg>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	71fb      	strb	r3, [r7, #7]
        if (msb == 0x99) return 0x0099; //HX8357-D from datasheet
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	2b99      	cmp	r3, #153	@ 0x99
 8000fa8:	d101      	bne.n	8000fae <readID+0x1ba>
 8000faa:	2399      	movs	r3, #153	@ 0x99
 8000fac:	e05c      	b.n	8001068 <readID+0x274>
        if (msb == 0x90)        //HX8357-C undocumented
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	2b90      	cmp	r3, #144	@ 0x90
 8000fb2:	d102      	bne.n	8000fba <readID+0x1c6>
#endif
            return 0x9090;      //BIG CHANGE: HX8357-D was 0x8357
 8000fb4:	f249 0390 	movw	r3, #37008	@ 0x9090
 8000fb8:	e056      	b.n	8001068 <readID+0x274>
    }
//    if (msb == 0xFF && ret == 0xFFFF) //R61526 [xx FF FF FF]
//        return 0x1526;          //subsequent begin() enables Command Access
    if (ret == 0x1526)          //R61526 [xx 06 15 26] if I have written NVM
 8000fba:	89fb      	ldrh	r3, [r7, #14]
 8000fbc:	f241 5226 	movw	r2, #5414	@ 0x1526
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d102      	bne.n	8000fca <readID+0x1d6>
        return 0x1526;          //subsequent begin() enables Command Access
 8000fc4:	f241 5326 	movw	r3, #5414	@ 0x1526
 8000fc8:	e04e      	b.n	8001068 <readID+0x274>
	if (ret == 0x89F0)          //ST7735S: [xx 7C 89 F0]
 8000fca:	89fb      	ldrh	r3, [r7, #14]
 8000fcc:	f648 12f0 	movw	r2, #35312	@ 0x89f0
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d102      	bne.n	8000fda <readID+0x1e6>
        return 0x7735;
 8000fd4:	f247 7335 	movw	r3, #30517	@ 0x7735
 8000fd8:	e046      	b.n	8001068 <readID+0x274>
	if (ret == 0x8552)          //ST7789V: [xx 85 85 52]
 8000fda:	89fb      	ldrh	r3, [r7, #14]
 8000fdc:	f248 5252 	movw	r2, #34130	@ 0x8552
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d102      	bne.n	8000fea <readID+0x1f6>
        return 0x7789;
 8000fe4:	f247 7389 	movw	r3, #30601	@ 0x7789
 8000fe8:	e03e      	b.n	8001068 <readID+0x274>
    if (ret == 0xAC11)          //?unknown [xx 61 AC 11]
 8000fea:	89fb      	ldrh	r3, [r7, #14]
 8000fec:	f64a 4211 	movw	r2, #44049	@ 0xac11
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d102      	bne.n	8000ffa <readID+0x206>
        return 0xAC11;
 8000ff4:	f64a 4311 	movw	r3, #44049	@ 0xac11
 8000ff8:	e036      	b.n	8001068 <readID+0x274>
    ret32 = readReg32(0xD3);      //[xx 91 63 00]
 8000ffa:	20d3      	movs	r0, #211	@ 0xd3
 8000ffc:	f7ff feb8 	bl	8000d70 <readReg32>
 8001000:	60b8      	str	r0, [r7, #8]
    ret = ret32 >> 8;
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	0a1b      	lsrs	r3, r3, #8
 8001006:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9163) return ret;
 8001008:	89fb      	ldrh	r3, [r7, #14]
 800100a:	f249 1263 	movw	r2, #37219	@ 0x9163
 800100e:	4293      	cmp	r3, r2
 8001010:	d101      	bne.n	8001016 <readID+0x222>
 8001012:	89fb      	ldrh	r3, [r7, #14]
 8001014:	e028      	b.n	8001068 <readID+0x274>
    ret = readReg32(0xD3);      //for ILI9488, 9486, 9340, 9341
 8001016:	20d3      	movs	r0, #211	@ 0xd3
 8001018:	f7ff feaa 	bl	8000d70 <readReg32>
 800101c:	4603      	mov	r3, r0
 800101e:	81fb      	strh	r3, [r7, #14]
    msb = ret >> 8;
 8001020:	89fb      	ldrh	r3, [r7, #14]
 8001022:	0a1b      	lsrs	r3, r3, #8
 8001024:	b29b      	uxth	r3, r3
 8001026:	71fb      	strb	r3, [r7, #7]
    if (msb == 0x93 || msb == 0x94 || msb == 0x98 || msb == 0x77 || msb == 0x16)
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	2b93      	cmp	r3, #147	@ 0x93
 800102c:	d00b      	beq.n	8001046 <readID+0x252>
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	2b94      	cmp	r3, #148	@ 0x94
 8001032:	d008      	beq.n	8001046 <readID+0x252>
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	2b98      	cmp	r3, #152	@ 0x98
 8001038:	d005      	beq.n	8001046 <readID+0x252>
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	2b77      	cmp	r3, #119	@ 0x77
 800103e:	d002      	beq.n	8001046 <readID+0x252>
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	2b16      	cmp	r3, #22
 8001044:	d101      	bne.n	800104a <readID+0x256>
        return ret;             //0x9488, 9486, 9340, 9341, 7796
 8001046:	89fb      	ldrh	r3, [r7, #14]
 8001048:	e00e      	b.n	8001068 <readID+0x274>
    if (ret == 0x00D3 || ret == 0xD3D3)
 800104a:	89fb      	ldrh	r3, [r7, #14]
 800104c:	2bd3      	cmp	r3, #211	@ 0xd3
 800104e:	d004      	beq.n	800105a <readID+0x266>
 8001050:	89fb      	ldrh	r3, [r7, #14]
 8001052:	f24d 32d3 	movw	r2, #54227	@ 0xd3d3
 8001056:	4293      	cmp	r3, r2
 8001058:	d101      	bne.n	800105e <readID+0x26a>
        return ret;             //16-bit write-only bus
 800105a:	89fb      	ldrh	r3, [r7, #14]
 800105c:	e004      	b.n	8001068 <readID+0x274>
	pushCommand(0xD9, &msb, 1);
	ret = (ret2 << 8) | readReg(0xD3);
//	if (ret2 == 0x93)
    	return ret2;
*/
	return readReg(0,0);          //0154, 7783, 9320, 9325, 9335, B505, B509
 800105e:	2100      	movs	r1, #0
 8001060:	2000      	movs	r0, #0
 8001062:	f7ff fdf7 	bl	8000c54 <readReg>
 8001066:	4603      	mov	r3, r0
}
 8001068:	4618      	mov	r0, r3
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	0800249c 	.word	0x0800249c

08001074 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001074:	f7ff fa38 	bl	80004e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001078:	480b      	ldr	r0, [pc, #44]	@ (80010a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800107a:	490c      	ldr	r1, [pc, #48]	@ (80010ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800107c:	4a0c      	ldr	r2, [pc, #48]	@ (80010b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001080:	e002      	b.n	8001088 <LoopCopyDataInit>

08001082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001086:	3304      	adds	r3, #4

08001088 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800108c:	d3f9      	bcc.n	8001082 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108e:	4a09      	ldr	r2, [pc, #36]	@ (80010b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001090:	4c09      	ldr	r4, [pc, #36]	@ (80010b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001092:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001094:	e001      	b.n	800109a <LoopFillZerobss>

08001096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001098:	3204      	adds	r2, #4

0800109a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800109c:	d3fb      	bcc.n	8001096 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800109e:	f001 f9cd 	bl	800243c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010a2:	f7ff f853 	bl	800014c <main>
  bx lr
 80010a6:	4770      	bx	lr
  ldr r0, =_sdata
 80010a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010b0:	080024cc 	.word	0x080024cc
  ldr r2, =_sbss
 80010b4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010b8:	20000078 	.word	0x20000078

080010bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010bc:	e7fe      	b.n	80010bc <ADC1_2_IRQHandler>
	...

080010c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c4:	4b08      	ldr	r3, [pc, #32]	@ (80010e8 <HAL_Init+0x28>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a07      	ldr	r2, [pc, #28]	@ (80010e8 <HAL_Init+0x28>)
 80010ca:	f043 0310 	orr.w	r3, r3, #16
 80010ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d0:	2003      	movs	r0, #3
 80010d2:	f000 f92b 	bl	800132c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010d6:	200f      	movs	r0, #15
 80010d8:	f000 f808 	bl	80010ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010dc:	f7ff f988 	bl	80003f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40022000 	.word	0x40022000

080010ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f4:	4b12      	ldr	r3, [pc, #72]	@ (8001140 <HAL_InitTick+0x54>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b12      	ldr	r3, [pc, #72]	@ (8001144 <HAL_InitTick+0x58>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	4619      	mov	r1, r3
 80010fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001102:	fbb3 f3f1 	udiv	r3, r3, r1
 8001106:	fbb2 f3f3 	udiv	r3, r2, r3
 800110a:	4618      	mov	r0, r3
 800110c:	f000 f935 	bl	800137a <HAL_SYSTICK_Config>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e00e      	b.n	8001138 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b0f      	cmp	r3, #15
 800111e:	d80a      	bhi.n	8001136 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001120:	2200      	movs	r2, #0
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	f04f 30ff 	mov.w	r0, #4294967295
 8001128:	f000 f90b 	bl	8001342 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800112c:	4a06      	ldr	r2, [pc, #24]	@ (8001148 <HAL_InitTick+0x5c>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001132:	2300      	movs	r3, #0
 8001134:	e000      	b.n	8001138 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
}
 8001138:	4618      	mov	r0, r3
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000000 	.word	0x20000000
 8001144:	20000008 	.word	0x20000008
 8001148:	20000004 	.word	0x20000004

0800114c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001150:	4b05      	ldr	r3, [pc, #20]	@ (8001168 <HAL_IncTick+0x1c>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	461a      	mov	r2, r3
 8001156:	4b05      	ldr	r3, [pc, #20]	@ (800116c <HAL_IncTick+0x20>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4413      	add	r3, r2
 800115c:	4a03      	ldr	r2, [pc, #12]	@ (800116c <HAL_IncTick+0x20>)
 800115e:	6013      	str	r3, [r2, #0]
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr
 8001168:	20000008 	.word	0x20000008
 800116c:	20000074 	.word	0x20000074

08001170 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return uwTick;
 8001174:	4b02      	ldr	r3, [pc, #8]	@ (8001180 <HAL_GetTick+0x10>)
 8001176:	681b      	ldr	r3, [r3, #0]
}
 8001178:	4618      	mov	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr
 8001180:	20000074 	.word	0x20000074

08001184 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800118c:	f7ff fff0 	bl	8001170 <HAL_GetTick>
 8001190:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800119c:	d005      	beq.n	80011aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800119e:	4b0a      	ldr	r3, [pc, #40]	@ (80011c8 <HAL_Delay+0x44>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	461a      	mov	r2, r3
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4413      	add	r3, r2
 80011a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011aa:	bf00      	nop
 80011ac:	f7ff ffe0 	bl	8001170 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d8f7      	bhi.n	80011ac <HAL_Delay+0x28>
  {
  }
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000008 	.word	0x20000008

080011cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011e8:	4013      	ands	r3, r2
 80011ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011fe:	4a04      	ldr	r2, [pc, #16]	@ (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	60d3      	str	r3, [r2, #12]
}
 8001204:	bf00      	nop
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	bc80      	pop	{r7}
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001218:	4b04      	ldr	r3, [pc, #16]	@ (800122c <__NVIC_GetPriorityGrouping+0x18>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	0a1b      	lsrs	r3, r3, #8
 800121e:	f003 0307 	and.w	r3, r3, #7
}
 8001222:	4618      	mov	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	6039      	str	r1, [r7, #0]
 800123a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001240:	2b00      	cmp	r3, #0
 8001242:	db0a      	blt.n	800125a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	b2da      	uxtb	r2, r3
 8001248:	490c      	ldr	r1, [pc, #48]	@ (800127c <__NVIC_SetPriority+0x4c>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	0112      	lsls	r2, r2, #4
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	440b      	add	r3, r1
 8001254:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001258:	e00a      	b.n	8001270 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	b2da      	uxtb	r2, r3
 800125e:	4908      	ldr	r1, [pc, #32]	@ (8001280 <__NVIC_SetPriority+0x50>)
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	f003 030f 	and.w	r3, r3, #15
 8001266:	3b04      	subs	r3, #4
 8001268:	0112      	lsls	r2, r2, #4
 800126a:	b2d2      	uxtb	r2, r2
 800126c:	440b      	add	r3, r1
 800126e:	761a      	strb	r2, [r3, #24]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000e100 	.word	0xe000e100
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001284:	b480      	push	{r7}
 8001286:	b089      	sub	sp, #36	@ 0x24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f1c3 0307 	rsb	r3, r3, #7
 800129e:	2b04      	cmp	r3, #4
 80012a0:	bf28      	it	cs
 80012a2:	2304      	movcs	r3, #4
 80012a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3304      	adds	r3, #4
 80012aa:	2b06      	cmp	r3, #6
 80012ac:	d902      	bls.n	80012b4 <NVIC_EncodePriority+0x30>
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3b03      	subs	r3, #3
 80012b2:	e000      	b.n	80012b6 <NVIC_EncodePriority+0x32>
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	f04f 32ff 	mov.w	r2, #4294967295
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43da      	mvns	r2, r3
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	401a      	ands	r2, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012cc:	f04f 31ff 	mov.w	r1, #4294967295
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	fa01 f303 	lsl.w	r3, r1, r3
 80012d6:	43d9      	mvns	r1, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012dc:	4313      	orrs	r3, r2
         );
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3724      	adds	r7, #36	@ 0x24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc80      	pop	{r7}
 80012e6:	4770      	bx	lr

080012e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012f8:	d301      	bcc.n	80012fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012fa:	2301      	movs	r3, #1
 80012fc:	e00f      	b.n	800131e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001328 <SysTick_Config+0x40>)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3b01      	subs	r3, #1
 8001304:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001306:	210f      	movs	r1, #15
 8001308:	f04f 30ff 	mov.w	r0, #4294967295
 800130c:	f7ff ff90 	bl	8001230 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001310:	4b05      	ldr	r3, [pc, #20]	@ (8001328 <SysTick_Config+0x40>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001316:	4b04      	ldr	r3, [pc, #16]	@ (8001328 <SysTick_Config+0x40>)
 8001318:	2207      	movs	r2, #7
 800131a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	e000e010 	.word	0xe000e010

0800132c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff ff49 	bl	80011cc <__NVIC_SetPriorityGrouping>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001342:	b580      	push	{r7, lr}
 8001344:	b086      	sub	sp, #24
 8001346:	af00      	add	r7, sp, #0
 8001348:	4603      	mov	r3, r0
 800134a:	60b9      	str	r1, [r7, #8]
 800134c:	607a      	str	r2, [r7, #4]
 800134e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001354:	f7ff ff5e 	bl	8001214 <__NVIC_GetPriorityGrouping>
 8001358:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	68b9      	ldr	r1, [r7, #8]
 800135e:	6978      	ldr	r0, [r7, #20]
 8001360:	f7ff ff90 	bl	8001284 <NVIC_EncodePriority>
 8001364:	4602      	mov	r2, r0
 8001366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136a:	4611      	mov	r1, r2
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff5f 	bl	8001230 <__NVIC_SetPriority>
}
 8001372:	bf00      	nop
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff ffb0 	bl	80012e8 <SysTick_Config>
 8001388:	4603      	mov	r3, r0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001394:	b480      	push	{r7}
 8001396:	b08b      	sub	sp, #44	@ 0x2c
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800139e:	2300      	movs	r3, #0
 80013a0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013a2:	2300      	movs	r3, #0
 80013a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013a6:	e169      	b.n	800167c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013a8:	2201      	movs	r2, #1
 80013aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	69fa      	ldr	r2, [r7, #28]
 80013b8:	4013      	ands	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	f040 8158 	bne.w	8001676 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	4a9a      	ldr	r2, [pc, #616]	@ (8001634 <HAL_GPIO_Init+0x2a0>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d05e      	beq.n	800148e <HAL_GPIO_Init+0xfa>
 80013d0:	4a98      	ldr	r2, [pc, #608]	@ (8001634 <HAL_GPIO_Init+0x2a0>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d875      	bhi.n	80014c2 <HAL_GPIO_Init+0x12e>
 80013d6:	4a98      	ldr	r2, [pc, #608]	@ (8001638 <HAL_GPIO_Init+0x2a4>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d058      	beq.n	800148e <HAL_GPIO_Init+0xfa>
 80013dc:	4a96      	ldr	r2, [pc, #600]	@ (8001638 <HAL_GPIO_Init+0x2a4>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d86f      	bhi.n	80014c2 <HAL_GPIO_Init+0x12e>
 80013e2:	4a96      	ldr	r2, [pc, #600]	@ (800163c <HAL_GPIO_Init+0x2a8>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d052      	beq.n	800148e <HAL_GPIO_Init+0xfa>
 80013e8:	4a94      	ldr	r2, [pc, #592]	@ (800163c <HAL_GPIO_Init+0x2a8>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d869      	bhi.n	80014c2 <HAL_GPIO_Init+0x12e>
 80013ee:	4a94      	ldr	r2, [pc, #592]	@ (8001640 <HAL_GPIO_Init+0x2ac>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d04c      	beq.n	800148e <HAL_GPIO_Init+0xfa>
 80013f4:	4a92      	ldr	r2, [pc, #584]	@ (8001640 <HAL_GPIO_Init+0x2ac>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d863      	bhi.n	80014c2 <HAL_GPIO_Init+0x12e>
 80013fa:	4a92      	ldr	r2, [pc, #584]	@ (8001644 <HAL_GPIO_Init+0x2b0>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d046      	beq.n	800148e <HAL_GPIO_Init+0xfa>
 8001400:	4a90      	ldr	r2, [pc, #576]	@ (8001644 <HAL_GPIO_Init+0x2b0>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d85d      	bhi.n	80014c2 <HAL_GPIO_Init+0x12e>
 8001406:	2b12      	cmp	r3, #18
 8001408:	d82a      	bhi.n	8001460 <HAL_GPIO_Init+0xcc>
 800140a:	2b12      	cmp	r3, #18
 800140c:	d859      	bhi.n	80014c2 <HAL_GPIO_Init+0x12e>
 800140e:	a201      	add	r2, pc, #4	@ (adr r2, 8001414 <HAL_GPIO_Init+0x80>)
 8001410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001414:	0800148f 	.word	0x0800148f
 8001418:	08001469 	.word	0x08001469
 800141c:	0800147b 	.word	0x0800147b
 8001420:	080014bd 	.word	0x080014bd
 8001424:	080014c3 	.word	0x080014c3
 8001428:	080014c3 	.word	0x080014c3
 800142c:	080014c3 	.word	0x080014c3
 8001430:	080014c3 	.word	0x080014c3
 8001434:	080014c3 	.word	0x080014c3
 8001438:	080014c3 	.word	0x080014c3
 800143c:	080014c3 	.word	0x080014c3
 8001440:	080014c3 	.word	0x080014c3
 8001444:	080014c3 	.word	0x080014c3
 8001448:	080014c3 	.word	0x080014c3
 800144c:	080014c3 	.word	0x080014c3
 8001450:	080014c3 	.word	0x080014c3
 8001454:	080014c3 	.word	0x080014c3
 8001458:	08001471 	.word	0x08001471
 800145c:	08001485 	.word	0x08001485
 8001460:	4a79      	ldr	r2, [pc, #484]	@ (8001648 <HAL_GPIO_Init+0x2b4>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d013      	beq.n	800148e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001466:	e02c      	b.n	80014c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	623b      	str	r3, [r7, #32]
          break;
 800146e:	e029      	b.n	80014c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	3304      	adds	r3, #4
 8001476:	623b      	str	r3, [r7, #32]
          break;
 8001478:	e024      	b.n	80014c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	3308      	adds	r3, #8
 8001480:	623b      	str	r3, [r7, #32]
          break;
 8001482:	e01f      	b.n	80014c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	330c      	adds	r3, #12
 800148a:	623b      	str	r3, [r7, #32]
          break;
 800148c:	e01a      	b.n	80014c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d102      	bne.n	800149c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001496:	2304      	movs	r3, #4
 8001498:	623b      	str	r3, [r7, #32]
          break;
 800149a:	e013      	b.n	80014c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d105      	bne.n	80014b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014a4:	2308      	movs	r3, #8
 80014a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	69fa      	ldr	r2, [r7, #28]
 80014ac:	611a      	str	r2, [r3, #16]
          break;
 80014ae:	e009      	b.n	80014c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014b0:	2308      	movs	r3, #8
 80014b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	69fa      	ldr	r2, [r7, #28]
 80014b8:	615a      	str	r2, [r3, #20]
          break;
 80014ba:	e003      	b.n	80014c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014bc:	2300      	movs	r3, #0
 80014be:	623b      	str	r3, [r7, #32]
          break;
 80014c0:	e000      	b.n	80014c4 <HAL_GPIO_Init+0x130>
          break;
 80014c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	2bff      	cmp	r3, #255	@ 0xff
 80014c8:	d801      	bhi.n	80014ce <HAL_GPIO_Init+0x13a>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	e001      	b.n	80014d2 <HAL_GPIO_Init+0x13e>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	3304      	adds	r3, #4
 80014d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	2bff      	cmp	r3, #255	@ 0xff
 80014d8:	d802      	bhi.n	80014e0 <HAL_GPIO_Init+0x14c>
 80014da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	e002      	b.n	80014e6 <HAL_GPIO_Init+0x152>
 80014e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e2:	3b08      	subs	r3, #8
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	210f      	movs	r1, #15
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	fa01 f303 	lsl.w	r3, r1, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	401a      	ands	r2, r3
 80014f8:	6a39      	ldr	r1, [r7, #32]
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001500:	431a      	orrs	r2, r3
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800150e:	2b00      	cmp	r3, #0
 8001510:	f000 80b1 	beq.w	8001676 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001514:	4b4d      	ldr	r3, [pc, #308]	@ (800164c <HAL_GPIO_Init+0x2b8>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	4a4c      	ldr	r2, [pc, #304]	@ (800164c <HAL_GPIO_Init+0x2b8>)
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	6193      	str	r3, [r2, #24]
 8001520:	4b4a      	ldr	r3, [pc, #296]	@ (800164c <HAL_GPIO_Init+0x2b8>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	60bb      	str	r3, [r7, #8]
 800152a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800152c:	4a48      	ldr	r2, [pc, #288]	@ (8001650 <HAL_GPIO_Init+0x2bc>)
 800152e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001530:	089b      	lsrs	r3, r3, #2
 8001532:	3302      	adds	r3, #2
 8001534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001538:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800153a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800153c:	f003 0303 	and.w	r3, r3, #3
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	220f      	movs	r2, #15
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	4013      	ands	r3, r2
 800154e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a40      	ldr	r2, [pc, #256]	@ (8001654 <HAL_GPIO_Init+0x2c0>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d013      	beq.n	8001580 <HAL_GPIO_Init+0x1ec>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a3f      	ldr	r2, [pc, #252]	@ (8001658 <HAL_GPIO_Init+0x2c4>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d00d      	beq.n	800157c <HAL_GPIO_Init+0x1e8>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a3e      	ldr	r2, [pc, #248]	@ (800165c <HAL_GPIO_Init+0x2c8>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d007      	beq.n	8001578 <HAL_GPIO_Init+0x1e4>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a3d      	ldr	r2, [pc, #244]	@ (8001660 <HAL_GPIO_Init+0x2cc>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d101      	bne.n	8001574 <HAL_GPIO_Init+0x1e0>
 8001570:	2303      	movs	r3, #3
 8001572:	e006      	b.n	8001582 <HAL_GPIO_Init+0x1ee>
 8001574:	2304      	movs	r3, #4
 8001576:	e004      	b.n	8001582 <HAL_GPIO_Init+0x1ee>
 8001578:	2302      	movs	r3, #2
 800157a:	e002      	b.n	8001582 <HAL_GPIO_Init+0x1ee>
 800157c:	2301      	movs	r3, #1
 800157e:	e000      	b.n	8001582 <HAL_GPIO_Init+0x1ee>
 8001580:	2300      	movs	r3, #0
 8001582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001584:	f002 0203 	and.w	r2, r2, #3
 8001588:	0092      	lsls	r2, r2, #2
 800158a:	4093      	lsls	r3, r2
 800158c:	68fa      	ldr	r2, [r7, #12]
 800158e:	4313      	orrs	r3, r2
 8001590:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001592:	492f      	ldr	r1, [pc, #188]	@ (8001650 <HAL_GPIO_Init+0x2bc>)
 8001594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001596:	089b      	lsrs	r3, r3, #2
 8001598:	3302      	adds	r3, #2
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d006      	beq.n	80015ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001664 <HAL_GPIO_Init+0x2d0>)
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	492c      	ldr	r1, [pc, #176]	@ (8001664 <HAL_GPIO_Init+0x2d0>)
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	608b      	str	r3, [r1, #8]
 80015b8:	e006      	b.n	80015c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001664 <HAL_GPIO_Init+0x2d0>)
 80015bc:	689a      	ldr	r2, [r3, #8]
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	43db      	mvns	r3, r3
 80015c2:	4928      	ldr	r1, [pc, #160]	@ (8001664 <HAL_GPIO_Init+0x2d0>)
 80015c4:	4013      	ands	r3, r2
 80015c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d006      	beq.n	80015e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015d4:	4b23      	ldr	r3, [pc, #140]	@ (8001664 <HAL_GPIO_Init+0x2d0>)
 80015d6:	68da      	ldr	r2, [r3, #12]
 80015d8:	4922      	ldr	r1, [pc, #136]	@ (8001664 <HAL_GPIO_Init+0x2d0>)
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	4313      	orrs	r3, r2
 80015de:	60cb      	str	r3, [r1, #12]
 80015e0:	e006      	b.n	80015f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015e2:	4b20      	ldr	r3, [pc, #128]	@ (8001664 <HAL_GPIO_Init+0x2d0>)
 80015e4:	68da      	ldr	r2, [r3, #12]
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	43db      	mvns	r3, r3
 80015ea:	491e      	ldr	r1, [pc, #120]	@ (8001664 <HAL_GPIO_Init+0x2d0>)
 80015ec:	4013      	ands	r3, r2
 80015ee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d006      	beq.n	800160a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015fc:	4b19      	ldr	r3, [pc, #100]	@ (8001664 <HAL_GPIO_Init+0x2d0>)
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	4918      	ldr	r1, [pc, #96]	@ (8001664 <HAL_GPIO_Init+0x2d0>)
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	4313      	orrs	r3, r2
 8001606:	604b      	str	r3, [r1, #4]
 8001608:	e006      	b.n	8001618 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800160a:	4b16      	ldr	r3, [pc, #88]	@ (8001664 <HAL_GPIO_Init+0x2d0>)
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	43db      	mvns	r3, r3
 8001612:	4914      	ldr	r1, [pc, #80]	@ (8001664 <HAL_GPIO_Init+0x2d0>)
 8001614:	4013      	ands	r3, r2
 8001616:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d021      	beq.n	8001668 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001624:	4b0f      	ldr	r3, [pc, #60]	@ (8001664 <HAL_GPIO_Init+0x2d0>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	490e      	ldr	r1, [pc, #56]	@ (8001664 <HAL_GPIO_Init+0x2d0>)
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	4313      	orrs	r3, r2
 800162e:	600b      	str	r3, [r1, #0]
 8001630:	e021      	b.n	8001676 <HAL_GPIO_Init+0x2e2>
 8001632:	bf00      	nop
 8001634:	10320000 	.word	0x10320000
 8001638:	10310000 	.word	0x10310000
 800163c:	10220000 	.word	0x10220000
 8001640:	10210000 	.word	0x10210000
 8001644:	10120000 	.word	0x10120000
 8001648:	10110000 	.word	0x10110000
 800164c:	40021000 	.word	0x40021000
 8001650:	40010000 	.word	0x40010000
 8001654:	40010800 	.word	0x40010800
 8001658:	40010c00 	.word	0x40010c00
 800165c:	40011000 	.word	0x40011000
 8001660:	40011400 	.word	0x40011400
 8001664:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001668:	4b0b      	ldr	r3, [pc, #44]	@ (8001698 <HAL_GPIO_Init+0x304>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	43db      	mvns	r3, r3
 8001670:	4909      	ldr	r1, [pc, #36]	@ (8001698 <HAL_GPIO_Init+0x304>)
 8001672:	4013      	ands	r3, r2
 8001674:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001678:	3301      	adds	r3, #1
 800167a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001682:	fa22 f303 	lsr.w	r3, r2, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	f47f ae8e 	bne.w	80013a8 <HAL_GPIO_Init+0x14>
  }
}
 800168c:	bf00      	nop
 800168e:	bf00      	nop
 8001690:	372c      	adds	r7, #44	@ 0x2c
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr
 8001698:	40010400 	.word	0x40010400

0800169c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	807b      	strh	r3, [r7, #2]
 80016a8:	4613      	mov	r3, r2
 80016aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016ac:	787b      	ldrb	r3, [r7, #1]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016b2:	887a      	ldrh	r2, [r7, #2]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016b8:	e003      	b.n	80016c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016ba:	887b      	ldrh	r3, [r7, #2]
 80016bc:	041a      	lsls	r2, r3, #16
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	611a      	str	r2, [r3, #16]
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr

080016cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	460b      	mov	r3, r1
 80016d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016de:	887a      	ldrh	r2, [r7, #2]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4013      	ands	r3, r2
 80016e4:	041a      	lsls	r2, r3, #16
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	43d9      	mvns	r1, r3
 80016ea:	887b      	ldrh	r3, [r7, #2]
 80016ec:	400b      	ands	r3, r1
 80016ee:	431a      	orrs	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	611a      	str	r2, [r3, #16]
}
 80016f4:	bf00      	nop
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr
	...

08001700 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e272      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b00      	cmp	r3, #0
 800171c:	f000 8087 	beq.w	800182e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001720:	4b92      	ldr	r3, [pc, #584]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 030c 	and.w	r3, r3, #12
 8001728:	2b04      	cmp	r3, #4
 800172a:	d00c      	beq.n	8001746 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800172c:	4b8f      	ldr	r3, [pc, #572]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 030c 	and.w	r3, r3, #12
 8001734:	2b08      	cmp	r3, #8
 8001736:	d112      	bne.n	800175e <HAL_RCC_OscConfig+0x5e>
 8001738:	4b8c      	ldr	r3, [pc, #560]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001740:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001744:	d10b      	bne.n	800175e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001746:	4b89      	ldr	r3, [pc, #548]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d06c      	beq.n	800182c <HAL_RCC_OscConfig+0x12c>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d168      	bne.n	800182c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e24c      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001766:	d106      	bne.n	8001776 <HAL_RCC_OscConfig+0x76>
 8001768:	4b80      	ldr	r3, [pc, #512]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a7f      	ldr	r2, [pc, #508]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 800176e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001772:	6013      	str	r3, [r2, #0]
 8001774:	e02e      	b.n	80017d4 <HAL_RCC_OscConfig+0xd4>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d10c      	bne.n	8001798 <HAL_RCC_OscConfig+0x98>
 800177e:	4b7b      	ldr	r3, [pc, #492]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a7a      	ldr	r2, [pc, #488]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 8001784:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	4b78      	ldr	r3, [pc, #480]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a77      	ldr	r2, [pc, #476]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 8001790:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	e01d      	b.n	80017d4 <HAL_RCC_OscConfig+0xd4>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017a0:	d10c      	bne.n	80017bc <HAL_RCC_OscConfig+0xbc>
 80017a2:	4b72      	ldr	r3, [pc, #456]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a71      	ldr	r2, [pc, #452]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 80017a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	4b6f      	ldr	r3, [pc, #444]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a6e      	ldr	r2, [pc, #440]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 80017b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	e00b      	b.n	80017d4 <HAL_RCC_OscConfig+0xd4>
 80017bc:	4b6b      	ldr	r3, [pc, #428]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a6a      	ldr	r2, [pc, #424]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 80017c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017c6:	6013      	str	r3, [r2, #0]
 80017c8:	4b68      	ldr	r3, [pc, #416]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a67      	ldr	r2, [pc, #412]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 80017ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d013      	beq.n	8001804 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017dc:	f7ff fcc8 	bl	8001170 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017e4:	f7ff fcc4 	bl	8001170 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b64      	cmp	r3, #100	@ 0x64
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e200      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f6:	4b5d      	ldr	r3, [pc, #372]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d0f0      	beq.n	80017e4 <HAL_RCC_OscConfig+0xe4>
 8001802:	e014      	b.n	800182e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001804:	f7ff fcb4 	bl	8001170 <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800180c:	f7ff fcb0 	bl	8001170 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b64      	cmp	r3, #100	@ 0x64
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e1ec      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800181e:	4b53      	ldr	r3, [pc, #332]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1f0      	bne.n	800180c <HAL_RCC_OscConfig+0x10c>
 800182a:	e000      	b.n	800182e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800182c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d063      	beq.n	8001902 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800183a:	4b4c      	ldr	r3, [pc, #304]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 030c 	and.w	r3, r3, #12
 8001842:	2b00      	cmp	r3, #0
 8001844:	d00b      	beq.n	800185e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001846:	4b49      	ldr	r3, [pc, #292]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f003 030c 	and.w	r3, r3, #12
 800184e:	2b08      	cmp	r3, #8
 8001850:	d11c      	bne.n	800188c <HAL_RCC_OscConfig+0x18c>
 8001852:	4b46      	ldr	r3, [pc, #280]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d116      	bne.n	800188c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800185e:	4b43      	ldr	r3, [pc, #268]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d005      	beq.n	8001876 <HAL_RCC_OscConfig+0x176>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d001      	beq.n	8001876 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e1c0      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001876:	4b3d      	ldr	r3, [pc, #244]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	4939      	ldr	r1, [pc, #228]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 8001886:	4313      	orrs	r3, r2
 8001888:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800188a:	e03a      	b.n	8001902 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d020      	beq.n	80018d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001894:	4b36      	ldr	r3, [pc, #216]	@ (8001970 <HAL_RCC_OscConfig+0x270>)
 8001896:	2201      	movs	r2, #1
 8001898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189a:	f7ff fc69 	bl	8001170 <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018a2:	f7ff fc65 	bl	8001170 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e1a1      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b4:	4b2d      	ldr	r3, [pc, #180]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0f0      	beq.n	80018a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c0:	4b2a      	ldr	r3, [pc, #168]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	695b      	ldr	r3, [r3, #20]
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	4927      	ldr	r1, [pc, #156]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	600b      	str	r3, [r1, #0]
 80018d4:	e015      	b.n	8001902 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018d6:	4b26      	ldr	r3, [pc, #152]	@ (8001970 <HAL_RCC_OscConfig+0x270>)
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018dc:	f7ff fc48 	bl	8001170 <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018e4:	f7ff fc44 	bl	8001170 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e180      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f6:	4b1d      	ldr	r3, [pc, #116]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1f0      	bne.n	80018e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0308 	and.w	r3, r3, #8
 800190a:	2b00      	cmp	r3, #0
 800190c:	d03a      	beq.n	8001984 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d019      	beq.n	800194a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001916:	4b17      	ldr	r3, [pc, #92]	@ (8001974 <HAL_RCC_OscConfig+0x274>)
 8001918:	2201      	movs	r2, #1
 800191a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800191c:	f7ff fc28 	bl	8001170 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001924:	f7ff fc24 	bl	8001170 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e160      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001936:	4b0d      	ldr	r3, [pc, #52]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 8001938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0f0      	beq.n	8001924 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001942:	2001      	movs	r0, #1
 8001944:	f000 fa9c 	bl	8001e80 <RCC_Delay>
 8001948:	e01c      	b.n	8001984 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800194a:	4b0a      	ldr	r3, [pc, #40]	@ (8001974 <HAL_RCC_OscConfig+0x274>)
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001950:	f7ff fc0e 	bl	8001170 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001956:	e00f      	b.n	8001978 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001958:	f7ff fc0a 	bl	8001170 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d908      	bls.n	8001978 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e146      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
 800196a:	bf00      	nop
 800196c:	40021000 	.word	0x40021000
 8001970:	42420000 	.word	0x42420000
 8001974:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001978:	4b92      	ldr	r3, [pc, #584]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 800197a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1e9      	bne.n	8001958 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 80a6 	beq.w	8001ade <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001992:	2300      	movs	r3, #0
 8001994:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001996:	4b8b      	ldr	r3, [pc, #556]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d10d      	bne.n	80019be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019a2:	4b88      	ldr	r3, [pc, #544]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	4a87      	ldr	r2, [pc, #540]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 80019a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019ac:	61d3      	str	r3, [r2, #28]
 80019ae:	4b85      	ldr	r3, [pc, #532]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019b6:	60bb      	str	r3, [r7, #8]
 80019b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ba:	2301      	movs	r3, #1
 80019bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019be:	4b82      	ldr	r3, [pc, #520]	@ (8001bc8 <HAL_RCC_OscConfig+0x4c8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d118      	bne.n	80019fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ca:	4b7f      	ldr	r3, [pc, #508]	@ (8001bc8 <HAL_RCC_OscConfig+0x4c8>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a7e      	ldr	r2, [pc, #504]	@ (8001bc8 <HAL_RCC_OscConfig+0x4c8>)
 80019d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019d6:	f7ff fbcb 	bl	8001170 <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019de:	f7ff fbc7 	bl	8001170 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b64      	cmp	r3, #100	@ 0x64
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e103      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f0:	4b75      	ldr	r3, [pc, #468]	@ (8001bc8 <HAL_RCC_OscConfig+0x4c8>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d0f0      	beq.n	80019de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d106      	bne.n	8001a12 <HAL_RCC_OscConfig+0x312>
 8001a04:	4b6f      	ldr	r3, [pc, #444]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	4a6e      	ldr	r2, [pc, #440]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	6213      	str	r3, [r2, #32]
 8001a10:	e02d      	b.n	8001a6e <HAL_RCC_OscConfig+0x36e>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d10c      	bne.n	8001a34 <HAL_RCC_OscConfig+0x334>
 8001a1a:	4b6a      	ldr	r3, [pc, #424]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
 8001a1e:	4a69      	ldr	r2, [pc, #420]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a20:	f023 0301 	bic.w	r3, r3, #1
 8001a24:	6213      	str	r3, [r2, #32]
 8001a26:	4b67      	ldr	r3, [pc, #412]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a28:	6a1b      	ldr	r3, [r3, #32]
 8001a2a:	4a66      	ldr	r2, [pc, #408]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a2c:	f023 0304 	bic.w	r3, r3, #4
 8001a30:	6213      	str	r3, [r2, #32]
 8001a32:	e01c      	b.n	8001a6e <HAL_RCC_OscConfig+0x36e>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	2b05      	cmp	r3, #5
 8001a3a:	d10c      	bne.n	8001a56 <HAL_RCC_OscConfig+0x356>
 8001a3c:	4b61      	ldr	r3, [pc, #388]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a3e:	6a1b      	ldr	r3, [r3, #32]
 8001a40:	4a60      	ldr	r2, [pc, #384]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a42:	f043 0304 	orr.w	r3, r3, #4
 8001a46:	6213      	str	r3, [r2, #32]
 8001a48:	4b5e      	ldr	r3, [pc, #376]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	4a5d      	ldr	r2, [pc, #372]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	6213      	str	r3, [r2, #32]
 8001a54:	e00b      	b.n	8001a6e <HAL_RCC_OscConfig+0x36e>
 8001a56:	4b5b      	ldr	r3, [pc, #364]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a58:	6a1b      	ldr	r3, [r3, #32]
 8001a5a:	4a5a      	ldr	r2, [pc, #360]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a5c:	f023 0301 	bic.w	r3, r3, #1
 8001a60:	6213      	str	r3, [r2, #32]
 8001a62:	4b58      	ldr	r3, [pc, #352]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a64:	6a1b      	ldr	r3, [r3, #32]
 8001a66:	4a57      	ldr	r2, [pc, #348]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a68:	f023 0304 	bic.w	r3, r3, #4
 8001a6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d015      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a76:	f7ff fb7b 	bl	8001170 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a7c:	e00a      	b.n	8001a94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a7e:	f7ff fb77 	bl	8001170 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e0b1      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a94:	4b4b      	ldr	r3, [pc, #300]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a96:	6a1b      	ldr	r3, [r3, #32]
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0ee      	beq.n	8001a7e <HAL_RCC_OscConfig+0x37e>
 8001aa0:	e014      	b.n	8001acc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa2:	f7ff fb65 	bl	8001170 <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa8:	e00a      	b.n	8001ac0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aaa:	f7ff fb61 	bl	8001170 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e09b      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac0:	4b40      	ldr	r3, [pc, #256]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1ee      	bne.n	8001aaa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001acc:	7dfb      	ldrb	r3, [r7, #23]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d105      	bne.n	8001ade <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ad2:	4b3c      	ldr	r3, [pc, #240]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	4a3b      	ldr	r2, [pc, #236]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001ad8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001adc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f000 8087 	beq.w	8001bf6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ae8:	4b36      	ldr	r3, [pc, #216]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 030c 	and.w	r3, r3, #12
 8001af0:	2b08      	cmp	r3, #8
 8001af2:	d061      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69db      	ldr	r3, [r3, #28]
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d146      	bne.n	8001b8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afc:	4b33      	ldr	r3, [pc, #204]	@ (8001bcc <HAL_RCC_OscConfig+0x4cc>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b02:	f7ff fb35 	bl	8001170 <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b0a:	f7ff fb31 	bl	8001170 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e06d      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b1c:	4b29      	ldr	r3, [pc, #164]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1f0      	bne.n	8001b0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b30:	d108      	bne.n	8001b44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b32:	4b24      	ldr	r3, [pc, #144]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	4921      	ldr	r1, [pc, #132]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b40:	4313      	orrs	r3, r2
 8001b42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b44:	4b1f      	ldr	r3, [pc, #124]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a19      	ldr	r1, [r3, #32]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b54:	430b      	orrs	r3, r1
 8001b56:	491b      	ldr	r1, [pc, #108]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bcc <HAL_RCC_OscConfig+0x4cc>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b62:	f7ff fb05 	bl	8001170 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6a:	f7ff fb01 	bl	8001170 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e03d      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b7c:	4b11      	ldr	r3, [pc, #68]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0f0      	beq.n	8001b6a <HAL_RCC_OscConfig+0x46a>
 8001b88:	e035      	b.n	8001bf6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b8a:	4b10      	ldr	r3, [pc, #64]	@ (8001bcc <HAL_RCC_OscConfig+0x4cc>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b90:	f7ff faee 	bl	8001170 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b98:	f7ff faea 	bl	8001170 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e026      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001baa:	4b06      	ldr	r3, [pc, #24]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f0      	bne.n	8001b98 <HAL_RCC_OscConfig+0x498>
 8001bb6:	e01e      	b.n	8001bf6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69db      	ldr	r3, [r3, #28]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d107      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e019      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	40007000 	.word	0x40007000
 8001bcc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001c00 <HAL_RCC_OscConfig+0x500>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d106      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d001      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e000      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3718      	adds	r7, #24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40021000 	.word	0x40021000

08001c04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d101      	bne.n	8001c18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e0d0      	b.n	8001dba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c18:	4b6a      	ldr	r3, [pc, #424]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0307 	and.w	r3, r3, #7
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d910      	bls.n	8001c48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c26:	4b67      	ldr	r3, [pc, #412]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f023 0207 	bic.w	r2, r3, #7
 8001c2e:	4965      	ldr	r1, [pc, #404]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c36:	4b63      	ldr	r3, [pc, #396]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d001      	beq.n	8001c48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e0b8      	b.n	8001dba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d020      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d005      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c60:	4b59      	ldr	r3, [pc, #356]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	4a58      	ldr	r2, [pc, #352]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c66:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0308 	and.w	r3, r3, #8
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d005      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c78:	4b53      	ldr	r3, [pc, #332]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	4a52      	ldr	r2, [pc, #328]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001c82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c84:	4b50      	ldr	r3, [pc, #320]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	494d      	ldr	r1, [pc, #308]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d040      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d107      	bne.n	8001cba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001caa:	4b47      	ldr	r3, [pc, #284]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d115      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e07f      	b.n	8001dba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d107      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc2:	4b41      	ldr	r3, [pc, #260]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d109      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e073      	b.n	8001dba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd2:	4b3d      	ldr	r3, [pc, #244]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e06b      	b.n	8001dba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ce2:	4b39      	ldr	r3, [pc, #228]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f023 0203 	bic.w	r2, r3, #3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	4936      	ldr	r1, [pc, #216]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cf4:	f7ff fa3c 	bl	8001170 <HAL_GetTick>
 8001cf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cfa:	e00a      	b.n	8001d12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cfc:	f7ff fa38 	bl	8001170 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e053      	b.n	8001dba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d12:	4b2d      	ldr	r3, [pc, #180]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 020c 	and.w	r2, r3, #12
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d1eb      	bne.n	8001cfc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d24:	4b27      	ldr	r3, [pc, #156]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d210      	bcs.n	8001d54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d32:	4b24      	ldr	r3, [pc, #144]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f023 0207 	bic.w	r2, r3, #7
 8001d3a:	4922      	ldr	r1, [pc, #136]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d42:	4b20      	ldr	r3, [pc, #128]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d001      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e032      	b.n	8001dba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d008      	beq.n	8001d72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d60:	4b19      	ldr	r3, [pc, #100]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	4916      	ldr	r1, [pc, #88]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d009      	beq.n	8001d92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d7e:	4b12      	ldr	r3, [pc, #72]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	490e      	ldr	r1, [pc, #56]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d92:	f000 f821 	bl	8001dd8 <HAL_RCC_GetSysClockFreq>
 8001d96:	4602      	mov	r2, r0
 8001d98:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	091b      	lsrs	r3, r3, #4
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	490a      	ldr	r1, [pc, #40]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c8>)
 8001da4:	5ccb      	ldrb	r3, [r1, r3]
 8001da6:	fa22 f303 	lsr.w	r3, r2, r3
 8001daa:	4a09      	ldr	r2, [pc, #36]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1cc>)
 8001dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001dae:	4b09      	ldr	r3, [pc, #36]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1d0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff f99a 	bl	80010ec <HAL_InitTick>

  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40022000 	.word	0x40022000
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	080024a0 	.word	0x080024a0
 8001dd0:	20000000 	.word	0x20000000
 8001dd4:	20000004 	.word	0x20000004

08001dd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b087      	sub	sp, #28
 8001ddc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	2300      	movs	r3, #0
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
 8001dea:	2300      	movs	r3, #0
 8001dec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001dee:	2300      	movs	r3, #0
 8001df0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001df2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x94>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f003 030c 	and.w	r3, r3, #12
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	d002      	beq.n	8001e08 <HAL_RCC_GetSysClockFreq+0x30>
 8001e02:	2b08      	cmp	r3, #8
 8001e04:	d003      	beq.n	8001e0e <HAL_RCC_GetSysClockFreq+0x36>
 8001e06:	e027      	b.n	8001e58 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e08:	4b19      	ldr	r3, [pc, #100]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e0a:	613b      	str	r3, [r7, #16]
      break;
 8001e0c:	e027      	b.n	8001e5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	0c9b      	lsrs	r3, r3, #18
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	4a17      	ldr	r2, [pc, #92]	@ (8001e74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e18:	5cd3      	ldrb	r3, [r2, r3]
 8001e1a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d010      	beq.n	8001e48 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e26:	4b11      	ldr	r3, [pc, #68]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x94>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	0c5b      	lsrs	r3, r3, #17
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	4a11      	ldr	r2, [pc, #68]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e32:	5cd3      	ldrb	r3, [r2, r3]
 8001e34:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a0d      	ldr	r2, [pc, #52]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e3a:	fb03 f202 	mul.w	r2, r3, r2
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e44:	617b      	str	r3, [r7, #20]
 8001e46:	e004      	b.n	8001e52 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a0c      	ldr	r2, [pc, #48]	@ (8001e7c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e4c:	fb02 f303 	mul.w	r3, r2, r3
 8001e50:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	613b      	str	r3, [r7, #16]
      break;
 8001e56:	e002      	b.n	8001e5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e58:	4b05      	ldr	r3, [pc, #20]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e5a:	613b      	str	r3, [r7, #16]
      break;
 8001e5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e5e:	693b      	ldr	r3, [r7, #16]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	371c      	adds	r7, #28
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bc80      	pop	{r7}
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	007a1200 	.word	0x007a1200
 8001e74:	080024b0 	.word	0x080024b0
 8001e78:	080024c0 	.word	0x080024c0
 8001e7c:	003d0900 	.word	0x003d0900

08001e80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e88:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb4 <RCC_Delay+0x34>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a0a      	ldr	r2, [pc, #40]	@ (8001eb8 <RCC_Delay+0x38>)
 8001e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e92:	0a5b      	lsrs	r3, r3, #9
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	fb02 f303 	mul.w	r3, r2, r3
 8001e9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e9c:	bf00      	nop
  }
  while (Delay --);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	1e5a      	subs	r2, r3, #1
 8001ea2:	60fa      	str	r2, [r7, #12]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1f9      	bne.n	8001e9c <RCC_Delay+0x1c>
}
 8001ea8:	bf00      	nop
 8001eaa:	bf00      	nop
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr
 8001eb4:	20000000 	.word	0x20000000
 8001eb8:	10624dd3 	.word	0x10624dd3

08001ebc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e041      	b.n	8001f52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d106      	bne.n	8001ee8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7fe fab6 	bl	8000454 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2202      	movs	r2, #2
 8001eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3304      	adds	r3, #4
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4610      	mov	r0, r2
 8001efc:	f000 f940 	bl	8002180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
	...

08001f5c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d001      	beq.n	8001f74 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e032      	b.n	8001fda <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2202      	movs	r2, #2
 8001f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a18      	ldr	r2, [pc, #96]	@ (8001fe4 <HAL_TIM_Base_Start+0x88>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d00e      	beq.n	8001fa4 <HAL_TIM_Base_Start+0x48>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f8e:	d009      	beq.n	8001fa4 <HAL_TIM_Base_Start+0x48>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a14      	ldr	r2, [pc, #80]	@ (8001fe8 <HAL_TIM_Base_Start+0x8c>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d004      	beq.n	8001fa4 <HAL_TIM_Base_Start+0x48>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a13      	ldr	r2, [pc, #76]	@ (8001fec <HAL_TIM_Base_Start+0x90>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d111      	bne.n	8001fc8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2b06      	cmp	r3, #6
 8001fb4:	d010      	beq.n	8001fd8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f042 0201 	orr.w	r2, r2, #1
 8001fc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fc6:	e007      	b.n	8001fd8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f042 0201 	orr.w	r2, r2, #1
 8001fd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3714      	adds	r7, #20
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr
 8001fe4:	40012c00 	.word	0x40012c00
 8001fe8:	40000400 	.word	0x40000400
 8001fec:	40000800 	.word	0x40000800

08001ff0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002004:	2b01      	cmp	r3, #1
 8002006:	d101      	bne.n	800200c <HAL_TIM_ConfigClockSource+0x1c>
 8002008:	2302      	movs	r3, #2
 800200a:	e0b4      	b.n	8002176 <HAL_TIM_ConfigClockSource+0x186>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2202      	movs	r2, #2
 8002018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800202a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002032:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68ba      	ldr	r2, [r7, #8]
 800203a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002044:	d03e      	beq.n	80020c4 <HAL_TIM_ConfigClockSource+0xd4>
 8002046:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800204a:	f200 8087 	bhi.w	800215c <HAL_TIM_ConfigClockSource+0x16c>
 800204e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002052:	f000 8086 	beq.w	8002162 <HAL_TIM_ConfigClockSource+0x172>
 8002056:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800205a:	d87f      	bhi.n	800215c <HAL_TIM_ConfigClockSource+0x16c>
 800205c:	2b70      	cmp	r3, #112	@ 0x70
 800205e:	d01a      	beq.n	8002096 <HAL_TIM_ConfigClockSource+0xa6>
 8002060:	2b70      	cmp	r3, #112	@ 0x70
 8002062:	d87b      	bhi.n	800215c <HAL_TIM_ConfigClockSource+0x16c>
 8002064:	2b60      	cmp	r3, #96	@ 0x60
 8002066:	d050      	beq.n	800210a <HAL_TIM_ConfigClockSource+0x11a>
 8002068:	2b60      	cmp	r3, #96	@ 0x60
 800206a:	d877      	bhi.n	800215c <HAL_TIM_ConfigClockSource+0x16c>
 800206c:	2b50      	cmp	r3, #80	@ 0x50
 800206e:	d03c      	beq.n	80020ea <HAL_TIM_ConfigClockSource+0xfa>
 8002070:	2b50      	cmp	r3, #80	@ 0x50
 8002072:	d873      	bhi.n	800215c <HAL_TIM_ConfigClockSource+0x16c>
 8002074:	2b40      	cmp	r3, #64	@ 0x40
 8002076:	d058      	beq.n	800212a <HAL_TIM_ConfigClockSource+0x13a>
 8002078:	2b40      	cmp	r3, #64	@ 0x40
 800207a:	d86f      	bhi.n	800215c <HAL_TIM_ConfigClockSource+0x16c>
 800207c:	2b30      	cmp	r3, #48	@ 0x30
 800207e:	d064      	beq.n	800214a <HAL_TIM_ConfigClockSource+0x15a>
 8002080:	2b30      	cmp	r3, #48	@ 0x30
 8002082:	d86b      	bhi.n	800215c <HAL_TIM_ConfigClockSource+0x16c>
 8002084:	2b20      	cmp	r3, #32
 8002086:	d060      	beq.n	800214a <HAL_TIM_ConfigClockSource+0x15a>
 8002088:	2b20      	cmp	r3, #32
 800208a:	d867      	bhi.n	800215c <HAL_TIM_ConfigClockSource+0x16c>
 800208c:	2b00      	cmp	r3, #0
 800208e:	d05c      	beq.n	800214a <HAL_TIM_ConfigClockSource+0x15a>
 8002090:	2b10      	cmp	r3, #16
 8002092:	d05a      	beq.n	800214a <HAL_TIM_ConfigClockSource+0x15a>
 8002094:	e062      	b.n	800215c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80020a6:	f000 f944 	bl	8002332 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80020b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	609a      	str	r2, [r3, #8]
      break;
 80020c2:	e04f      	b.n	8002164 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80020d4:	f000 f92d 	bl	8002332 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80020e6:	609a      	str	r2, [r3, #8]
      break;
 80020e8:	e03c      	b.n	8002164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020f6:	461a      	mov	r2, r3
 80020f8:	f000 f8a4 	bl	8002244 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2150      	movs	r1, #80	@ 0x50
 8002102:	4618      	mov	r0, r3
 8002104:	f000 f8fb 	bl	80022fe <TIM_ITRx_SetConfig>
      break;
 8002108:	e02c      	b.n	8002164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002116:	461a      	mov	r2, r3
 8002118:	f000 f8c2 	bl	80022a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2160      	movs	r1, #96	@ 0x60
 8002122:	4618      	mov	r0, r3
 8002124:	f000 f8eb 	bl	80022fe <TIM_ITRx_SetConfig>
      break;
 8002128:	e01c      	b.n	8002164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002136:	461a      	mov	r2, r3
 8002138:	f000 f884 	bl	8002244 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2140      	movs	r1, #64	@ 0x40
 8002142:	4618      	mov	r0, r3
 8002144:	f000 f8db 	bl	80022fe <TIM_ITRx_SetConfig>
      break;
 8002148:	e00c      	b.n	8002164 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4619      	mov	r1, r3
 8002154:	4610      	mov	r0, r2
 8002156:	f000 f8d2 	bl	80022fe <TIM_ITRx_SetConfig>
      break;
 800215a:	e003      	b.n	8002164 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	73fb      	strb	r3, [r7, #15]
      break;
 8002160:	e000      	b.n	8002164 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002162:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002174:	7bfb      	ldrb	r3, [r7, #15]
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
	...

08002180 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a29      	ldr	r2, [pc, #164]	@ (8002238 <TIM_Base_SetConfig+0xb8>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d00b      	beq.n	80021b0 <TIM_Base_SetConfig+0x30>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800219e:	d007      	beq.n	80021b0 <TIM_Base_SetConfig+0x30>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a26      	ldr	r2, [pc, #152]	@ (800223c <TIM_Base_SetConfig+0xbc>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d003      	beq.n	80021b0 <TIM_Base_SetConfig+0x30>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a25      	ldr	r2, [pc, #148]	@ (8002240 <TIM_Base_SetConfig+0xc0>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d108      	bne.n	80021c2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	4313      	orrs	r3, r2
 80021c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a1c      	ldr	r2, [pc, #112]	@ (8002238 <TIM_Base_SetConfig+0xb8>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d00b      	beq.n	80021e2 <TIM_Base_SetConfig+0x62>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021d0:	d007      	beq.n	80021e2 <TIM_Base_SetConfig+0x62>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a19      	ldr	r2, [pc, #100]	@ (800223c <TIM_Base_SetConfig+0xbc>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d003      	beq.n	80021e2 <TIM_Base_SetConfig+0x62>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a18      	ldr	r2, [pc, #96]	@ (8002240 <TIM_Base_SetConfig+0xc0>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d108      	bne.n	80021f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	4313      	orrs	r3, r2
 8002200:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a07      	ldr	r2, [pc, #28]	@ (8002238 <TIM_Base_SetConfig+0xb8>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d103      	bne.n	8002228 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	691a      	ldr	r2, [r3, #16]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	615a      	str	r2, [r3, #20]
}
 800222e:	bf00      	nop
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr
 8002238:	40012c00 	.word	0x40012c00
 800223c:	40000400 	.word	0x40000400
 8002240:	40000800 	.word	0x40000800

08002244 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002244:	b480      	push	{r7}
 8002246:	b087      	sub	sp, #28
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	f023 0201 	bic.w	r2, r3, #1
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800226e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	4313      	orrs	r3, r2
 8002278:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	f023 030a 	bic.w	r3, r3, #10
 8002280:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	4313      	orrs	r3, r2
 8002288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	621a      	str	r2, [r3, #32]
}
 8002296:	bf00      	nop
 8002298:	371c      	adds	r7, #28
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr

080022a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b087      	sub	sp, #28
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	f023 0210 	bic.w	r2, r3, #16
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80022ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	031b      	lsls	r3, r3, #12
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80022dc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	011b      	lsls	r3, r3, #4
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	621a      	str	r2, [r3, #32]
}
 80022f4:	bf00      	nop
 80022f6:	371c      	adds	r7, #28
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr

080022fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80022fe:	b480      	push	{r7}
 8002300:	b085      	sub	sp, #20
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
 8002306:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002314:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4313      	orrs	r3, r2
 800231c:	f043 0307 	orr.w	r3, r3, #7
 8002320:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	609a      	str	r2, [r3, #8]
}
 8002328:	bf00      	nop
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	bc80      	pop	{r7}
 8002330:	4770      	bx	lr

08002332 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002332:	b480      	push	{r7}
 8002334:	b087      	sub	sp, #28
 8002336:	af00      	add	r7, sp, #0
 8002338:	60f8      	str	r0, [r7, #12]
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	607a      	str	r2, [r7, #4]
 800233e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800234c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	021a      	lsls	r2, r3, #8
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	431a      	orrs	r2, r3
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	4313      	orrs	r3, r2
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	4313      	orrs	r3, r2
 800235e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	609a      	str	r2, [r3, #8]
}
 8002366:	bf00      	nop
 8002368:	371c      	adds	r7, #28
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr

08002370 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002380:	2b01      	cmp	r3, #1
 8002382:	d101      	bne.n	8002388 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002384:	2302      	movs	r3, #2
 8002386:	e046      	b.n	8002416 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2202      	movs	r2, #2
 8002394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a16      	ldr	r2, [pc, #88]	@ (8002420 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d00e      	beq.n	80023ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023d4:	d009      	beq.n	80023ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a12      	ldr	r2, [pc, #72]	@ (8002424 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d004      	beq.n	80023ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a10      	ldr	r2, [pc, #64]	@ (8002428 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d10c      	bne.n	8002404 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80023f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3714      	adds	r7, #20
 800241a:	46bd      	mov	sp, r7
 800241c:	bc80      	pop	{r7}
 800241e:	4770      	bx	lr
 8002420:	40012c00 	.word	0x40012c00
 8002424:	40000400 	.word	0x40000400
 8002428:	40000800 	.word	0x40000800

0800242c <memset>:
 800242c:	4603      	mov	r3, r0
 800242e:	4402      	add	r2, r0
 8002430:	4293      	cmp	r3, r2
 8002432:	d100      	bne.n	8002436 <memset+0xa>
 8002434:	4770      	bx	lr
 8002436:	f803 1b01 	strb.w	r1, [r3], #1
 800243a:	e7f9      	b.n	8002430 <memset+0x4>

0800243c <__libc_init_array>:
 800243c:	b570      	push	{r4, r5, r6, lr}
 800243e:	2600      	movs	r6, #0
 8002440:	4d0c      	ldr	r5, [pc, #48]	@ (8002474 <__libc_init_array+0x38>)
 8002442:	4c0d      	ldr	r4, [pc, #52]	@ (8002478 <__libc_init_array+0x3c>)
 8002444:	1b64      	subs	r4, r4, r5
 8002446:	10a4      	asrs	r4, r4, #2
 8002448:	42a6      	cmp	r6, r4
 800244a:	d109      	bne.n	8002460 <__libc_init_array+0x24>
 800244c:	f000 f81a 	bl	8002484 <_init>
 8002450:	2600      	movs	r6, #0
 8002452:	4d0a      	ldr	r5, [pc, #40]	@ (800247c <__libc_init_array+0x40>)
 8002454:	4c0a      	ldr	r4, [pc, #40]	@ (8002480 <__libc_init_array+0x44>)
 8002456:	1b64      	subs	r4, r4, r5
 8002458:	10a4      	asrs	r4, r4, #2
 800245a:	42a6      	cmp	r6, r4
 800245c:	d105      	bne.n	800246a <__libc_init_array+0x2e>
 800245e:	bd70      	pop	{r4, r5, r6, pc}
 8002460:	f855 3b04 	ldr.w	r3, [r5], #4
 8002464:	4798      	blx	r3
 8002466:	3601      	adds	r6, #1
 8002468:	e7ee      	b.n	8002448 <__libc_init_array+0xc>
 800246a:	f855 3b04 	ldr.w	r3, [r5], #4
 800246e:	4798      	blx	r3
 8002470:	3601      	adds	r6, #1
 8002472:	e7f2      	b.n	800245a <__libc_init_array+0x1e>
 8002474:	080024c4 	.word	0x080024c4
 8002478:	080024c4 	.word	0x080024c4
 800247c:	080024c4 	.word	0x080024c4
 8002480:	080024c8 	.word	0x080024c8

08002484 <_init>:
 8002484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002486:	bf00      	nop
 8002488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800248a:	bc08      	pop	{r3}
 800248c:	469e      	mov	lr, r3
 800248e:	4770      	bx	lr

08002490 <_fini>:
 8002490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002492:	bf00      	nop
 8002494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002496:	bc08      	pop	{r3}
 8002498:	469e      	mov	lr, r3
 800249a:	4770      	bx	lr
