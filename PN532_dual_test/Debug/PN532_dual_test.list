
PN532_dual_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003718  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  080038b8  080038b8  000138b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a90  08003a90  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003a90  08003a90  00013a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a98  08003a98  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a98  08003a98  00013a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a9c  08003a9c  00013a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003aa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000068  08003b08  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08003b08  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000074e3  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018f2  00000000  00000000  000275be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007b8  00000000  00000000  00028eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005b3  00000000  00000000  00029668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016ac9  00000000  00000000  00029c1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000090ef  00000000  00000000  000406e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087ef5  00000000  00000000  000497d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002558  00000000  00000000  000d16c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000d3c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080038a0 	.word	0x080038a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080038a0 	.word	0x080038a0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <Startup_RFID>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Startup_RFID(){
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0

	PN532_SPI_Init(&pn532);
 8000580:	480b      	ldr	r0, [pc, #44]	; (80005b0 <Startup_RFID+0x34>)
 8000582:	f000 fe43 	bl	800120c <PN532_SPI_Init>
	//HAL_GPIO_WritePin(RFID_SSF_GPIO_Port, RFID_SSF_Pin, 0);

	if(PN532_GetFirmwareVersion(&pn532, uid_version) != PN532_STATUS_OK)
 8000586:	490b      	ldr	r1, [pc, #44]	; (80005b4 <Startup_RFID+0x38>)
 8000588:	4809      	ldr	r0, [pc, #36]	; (80005b0 <Startup_RFID+0x34>)
 800058a:	f000 fc4d 	bl	8000e28 <PN532_GetFirmwareVersion>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d008      	beq.n	80005a6 <Startup_RFID+0x2a>
	{
		while(1){
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000594:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000598:	4807      	ldr	r0, [pc, #28]	; (80005b8 <Startup_RFID+0x3c>)
 800059a:	f001 faf4 	bl	8001b86 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 800059e:	2064      	movs	r0, #100	; 0x64
 80005a0:	f001 f84a 	bl	8001638 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80005a4:	e7f6      	b.n	8000594 <Startup_RFID+0x18>
		}
	}

	PN532_SamConfiguration(&pn532);
 80005a6:	4802      	ldr	r0, [pc, #8]	; (80005b0 <Startup_RFID+0x34>)
 80005a8:	f000 fc62 	bl	8000e70 <PN532_SamConfiguration>

}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	200000a0 	.word	0x200000a0
 80005b4:	20000094 	.word	0x20000094
 80005b8:	40020800 	.word	0x40020800

080005bc <AGV_RFID_Detection>:
void AGV_RFID_Detection(){
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	uid_len = PN532_ReadPassiveTarget(&pn532, uid, PN532_MIFARE_ISO14443A, 100);
 80005c0:	2364      	movs	r3, #100	; 0x64
 80005c2:	2200      	movs	r2, #0
 80005c4:	4904      	ldr	r1, [pc, #16]	; (80005d8 <AGV_RFID_Detection+0x1c>)
 80005c6:	4805      	ldr	r0, [pc, #20]	; (80005dc <AGV_RFID_Detection+0x20>)
 80005c8:	f000 fc74 	bl	8000eb4 <PN532_ReadPassiveTarget>
 80005cc:	4603      	mov	r3, r0
 80005ce:	4a04      	ldr	r2, [pc, #16]	; (80005e0 <AGV_RFID_Detection+0x24>)
 80005d0:	6013      	str	r3, [r2, #0]

}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000084 	.word	0x20000084
 80005dc:	200000a0 	.word	0x200000a0
 80005e0:	20000090 	.word	0x20000090

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e8:	f000 ffb4 	bl	8001554 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ec:	f000 f80a 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f0:	f000 f8a6 	bl	8000740 <MX_GPIO_Init>
  MX_SPI1_Init();
 80005f4:	f000 f86e 	bl	80006d4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  Startup_RFID();
 80005f8:	f7ff ffc0 	bl	800057c <Startup_RFID>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  AGV_RFID_Detection();
 80005fc:	f7ff ffde 	bl	80005bc <AGV_RFID_Detection>
 8000600:	e7fc      	b.n	80005fc <main+0x18>
	...

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b094      	sub	sp, #80	; 0x50
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0320 	add.w	r3, r7, #32
 800060e:	2230      	movs	r2, #48	; 0x30
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f002 fb23 	bl	8002c5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000628:	2300      	movs	r3, #0
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	4b27      	ldr	r3, [pc, #156]	; (80006cc <SystemClock_Config+0xc8>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	4a26      	ldr	r2, [pc, #152]	; (80006cc <SystemClock_Config+0xc8>)
 8000632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000636:	6413      	str	r3, [r2, #64]	; 0x40
 8000638:	4b24      	ldr	r3, [pc, #144]	; (80006cc <SystemClock_Config+0xc8>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	4b21      	ldr	r3, [pc, #132]	; (80006d0 <SystemClock_Config+0xcc>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a20      	ldr	r2, [pc, #128]	; (80006d0 <SystemClock_Config+0xcc>)
 800064e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b1e      	ldr	r3, [pc, #120]	; (80006d0 <SystemClock_Config+0xcc>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000660:	2301      	movs	r3, #1
 8000662:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000664:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000668:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066a:	2302      	movs	r3, #2
 800066c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000672:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000674:	230c      	movs	r3, #12
 8000676:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000678:	2360      	movs	r3, #96	; 0x60
 800067a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800067c:	2302      	movs	r3, #2
 800067e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000680:	2304      	movs	r3, #4
 8000682:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f107 0320 	add.w	r3, r7, #32
 8000688:	4618      	mov	r0, r3
 800068a:	f001 fa97 	bl	8001bbc <HAL_RCC_OscConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000694:	f000 f8cc 	bl	8000830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000698:	230f      	movs	r3, #15
 800069a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069c:	2302      	movs	r3, #2
 800069e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006ae:	f107 030c 	add.w	r3, r7, #12
 80006b2:	2103      	movs	r1, #3
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 fcf9 	bl	80020ac <HAL_RCC_ClockConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006c0:	f000 f8b6 	bl	8000830 <Error_Handler>
  }
}
 80006c4:	bf00      	nop
 80006c6:	3750      	adds	r7, #80	; 0x50
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40007000 	.word	0x40007000

080006d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006d8:	4b17      	ldr	r3, [pc, #92]	; (8000738 <MX_SPI1_Init+0x64>)
 80006da:	4a18      	ldr	r2, [pc, #96]	; (800073c <MX_SPI1_Init+0x68>)
 80006dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006de:	4b16      	ldr	r3, [pc, #88]	; (8000738 <MX_SPI1_Init+0x64>)
 80006e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006e6:	4b14      	ldr	r3, [pc, #80]	; (8000738 <MX_SPI1_Init+0x64>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006ec:	4b12      	ldr	r3, [pc, #72]	; (8000738 <MX_SPI1_Init+0x64>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_SPI1_Init+0x64>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_SPI1_Init+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_SPI1_Init+0x64>)
 8000700:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000704:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000706:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_SPI1_Init+0x64>)
 8000708:	2230      	movs	r2, #48	; 0x30
 800070a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 800070c:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <MX_SPI1_Init+0x64>)
 800070e:	2280      	movs	r2, #128	; 0x80
 8000710:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_SPI1_Init+0x64>)
 8000714:	2200      	movs	r2, #0
 8000716:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000718:	4b07      	ldr	r3, [pc, #28]	; (8000738 <MX_SPI1_Init+0x64>)
 800071a:	2200      	movs	r2, #0
 800071c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_SPI1_Init+0x64>)
 8000720:	220a      	movs	r2, #10
 8000722:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000724:	4804      	ldr	r0, [pc, #16]	; (8000738 <MX_SPI1_Init+0x64>)
 8000726:	f001 fe6d 	bl	8002404 <HAL_SPI_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000730:	f000 f87e 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}
 8000738:	200000b8 	.word	0x200000b8
 800073c:	40013000 	.word	0x40013000

08000740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	; 0x28
 8000744:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000746:	f107 0314 	add.w	r3, r7, #20
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	613b      	str	r3, [r7, #16]
 800075a:	4b32      	ldr	r3, [pc, #200]	; (8000824 <MX_GPIO_Init+0xe4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a31      	ldr	r2, [pc, #196]	; (8000824 <MX_GPIO_Init+0xe4>)
 8000760:	f043 0304 	orr.w	r3, r3, #4
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b2f      	ldr	r3, [pc, #188]	; (8000824 <MX_GPIO_Init+0xe4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0304 	and.w	r3, r3, #4
 800076e:	613b      	str	r3, [r7, #16]
 8000770:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	4b2b      	ldr	r3, [pc, #172]	; (8000824 <MX_GPIO_Init+0xe4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a2a      	ldr	r2, [pc, #168]	; (8000824 <MX_GPIO_Init+0xe4>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b28      	ldr	r3, [pc, #160]	; (8000824 <MX_GPIO_Init+0xe4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	4b24      	ldr	r3, [pc, #144]	; (8000824 <MX_GPIO_Init+0xe4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a23      	ldr	r2, [pc, #140]	; (8000824 <MX_GPIO_Init+0xe4>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b21      	ldr	r3, [pc, #132]	; (8000824 <MX_GPIO_Init+0xe4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <MX_GPIO_Init+0xe4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a1c      	ldr	r2, [pc, #112]	; (8000824 <MX_GPIO_Init+0xe4>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <MX_GPIO_Init+0xe4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007cc:	4816      	ldr	r0, [pc, #88]	; (8000828 <MX_GPIO_Init+0xe8>)
 80007ce:	f001 f9c1 	bl	8001b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RFID_SS_Pin|RFID_IRQ_Pin|RFID_Reset_Pin, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	f240 4103 	movw	r1, #1027	; 0x403
 80007d8:	4814      	ldr	r0, [pc, #80]	; (800082c <MX_GPIO_Init+0xec>)
 80007da:	f001 f9bb 	bl	8001b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e4:	2301      	movs	r3, #1
 80007e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ec:	2300      	movs	r3, #0
 80007ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	4619      	mov	r1, r3
 80007f6:	480c      	ldr	r0, [pc, #48]	; (8000828 <MX_GPIO_Init+0xe8>)
 80007f8:	f001 f828 	bl	800184c <HAL_GPIO_Init>

  /*Configure GPIO pins : RFID_SS_Pin RFID_IRQ_Pin RFID_Reset_Pin */
  GPIO_InitStruct.Pin = RFID_SS_Pin|RFID_IRQ_Pin|RFID_Reset_Pin;
 80007fc:	f240 4303 	movw	r3, #1027	; 0x403
 8000800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	2301      	movs	r3, #1
 8000804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	4619      	mov	r1, r3
 8000814:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_GPIO_Init+0xec>)
 8000816:	f001 f819 	bl	800184c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800081a:	bf00      	nop
 800081c:	3728      	adds	r7, #40	; 0x28
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40023800 	.word	0x40023800
 8000828:	40020800 	.word	0x40020800
 800082c:	40020400 	.word	0x40020400

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000838:	e7fe      	b.n	8000838 <Error_Handler+0x8>

0800083a <PN532_WriteFrame>:
/**
  * @brief: Write a frame to the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns -1 if there is an error parsing the frame.  
  */
int PN532_WriteFrame(PN532* pn532, uint8_t* data, uint16_t length) {
 800083a:	b580      	push	{r7, lr}
 800083c:	b0c8      	sub	sp, #288	; 0x120
 800083e:	af00      	add	r7, sp, #0
 8000840:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000844:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000848:	6018      	str	r0, [r3, #0]
 800084a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800084e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000852:	6019      	str	r1, [r3, #0]
 8000854:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000858:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 800085c:	801a      	strh	r2, [r3, #0]
    if (length > PN532_FRAME_MAX_LENGTH || length < 1) {
 800085e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000862:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000866:	881b      	ldrh	r3, [r3, #0]
 8000868:	2bff      	cmp	r3, #255	; 0xff
 800086a:	d806      	bhi.n	800087a <PN532_WriteFrame+0x40>
 800086c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000870:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000874:	881b      	ldrh	r3, [r3, #0]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d102      	bne.n	8000880 <PN532_WriteFrame+0x46>
        return PN532_STATUS_ERROR; // Data must be array of 1 to 255 bytes.
 800087a:	f04f 33ff 	mov.w	r3, #4294967295
 800087e:	e0aa      	b.n	80009d6 <PN532_WriteFrame+0x19c>
    // - Command bytes
    // - Checksum
    // - Postamble (0x00)

    uint8_t frame[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    frame[0] = PN532_PREAMBLE;
 8000886:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800088a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]
    frame[1] = PN532_STARTCODE1;
 8000892:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000896:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800089a:	2200      	movs	r2, #0
 800089c:	705a      	strb	r2, [r3, #1]
    frame[2] = PN532_STARTCODE2;
 800089e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80008a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80008a6:	22ff      	movs	r2, #255	; 0xff
 80008a8:	709a      	strb	r2, [r3, #2]
    for (uint8_t i = 0; i < 3; i++) {
 80008aa:	2300      	movs	r3, #0
 80008ac:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80008b0:	e010      	b.n	80008d4 <PN532_WriteFrame+0x9a>
        checksum += frame[i];
 80008b2:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80008b6:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80008ba:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80008be:	5cd2      	ldrb	r2, [r2, r3]
 80008c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80008c4:	4413      	add	r3, r2
 80008c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    for (uint8_t i = 0; i < 3; i++) {
 80008ca:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80008ce:	3301      	adds	r3, #1
 80008d0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80008d4:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80008d8:	2b02      	cmp	r3, #2
 80008da:	d9ea      	bls.n	80008b2 <PN532_WriteFrame+0x78>
    }
    frame[3] = length & 0xFF;
 80008dc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80008e0:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80008e4:	881b      	ldrh	r3, [r3, #0]
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80008ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80008f0:	70da      	strb	r2, [r3, #3]
    frame[4] = (~length + 1) & 0xFF;
 80008f2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80008f6:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	425b      	negs	r3, r3
 8000900:	b2da      	uxtb	r2, r3
 8000902:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000906:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800090a:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 0; i < length; i++) {
 800090c:	2300      	movs	r3, #0
 800090e:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8000912:	e023      	b.n	800095c <PN532_WriteFrame+0x122>
        frame[5 + i] = data[i];
 8000914:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000918:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800091c:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8000920:	6812      	ldr	r2, [r2, #0]
 8000922:	441a      	add	r2, r3
 8000924:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000928:	3305      	adds	r3, #5
 800092a:	7811      	ldrb	r1, [r2, #0]
 800092c:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000930:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000934:	54d1      	strb	r1, [r2, r3]
        checksum += data[i];
 8000936:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 800093a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800093e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8000942:	6812      	ldr	r2, [r2, #0]
 8000944:	4413      	add	r3, r2
 8000946:	781a      	ldrb	r2, [r3, #0]
 8000948:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800094c:	4413      	add	r3, r2
 800094e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    for (uint8_t i = 0; i < length; i++) {
 8000952:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000956:	3301      	adds	r3, #1
 8000958:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 800095c:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000960:	b29b      	uxth	r3, r3
 8000962:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000966:	f5a2 728d 	sub.w	r2, r2, #282	; 0x11a
 800096a:	8812      	ldrh	r2, [r2, #0]
 800096c:	429a      	cmp	r2, r3
 800096e:	d8d1      	bhi.n	8000914 <PN532_WriteFrame+0xda>
    }
    frame[length + 5] = ~checksum & 0xFF;
 8000970:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000974:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000978:	881b      	ldrh	r3, [r3, #0]
 800097a:	3305      	adds	r3, #5
 800097c:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 8000980:	43d2      	mvns	r2, r2
 8000982:	b2d1      	uxtb	r1, r2
 8000984:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000988:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800098c:	54d1      	strb	r1, [r2, r3]
    frame[length + 6] = PN532_POSTAMBLE;
 800098e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000992:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000996:	881b      	ldrh	r3, [r3, #0]
 8000998:	3306      	adds	r3, #6
 800099a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800099e:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80009a2:	2100      	movs	r1, #0
 80009a4:	54d1      	strb	r1, [r2, r3]
    if (pn532->write_data(frame, length + 7) != PN532_STATUS_OK) {
 80009a6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80009aa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	689b      	ldr	r3, [r3, #8]
 80009b2:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80009b6:	f5a2 728d 	sub.w	r2, r2, #282	; 0x11a
 80009ba:	8812      	ldrh	r2, [r2, #0]
 80009bc:	3207      	adds	r2, #7
 80009be:	b291      	uxth	r1, r2
 80009c0:	f107 0214 	add.w	r2, r7, #20
 80009c4:	4610      	mov	r0, r2
 80009c6:	4798      	blx	r3
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d002      	beq.n	80009d4 <PN532_WriteFrame+0x19a>
        return PN532_STATUS_ERROR;
 80009ce:	f04f 33ff 	mov.w	r3, #4294967295
 80009d2:	e000      	b.n	80009d6 <PN532_WriteFrame+0x19c>
    }
    return PN532_STATUS_OK;
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <PN532_ReadFrame>:
/**
  * @brief: Read a response frame from the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns frame length or -1 if there is an error parsing the frame.  
  */
int PN532_ReadFrame(PN532* pn532, uint8_t* response, uint16_t length) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b0c8      	sub	sp, #288	; 0x120
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80009ea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80009ee:	6018      	str	r0, [r3, #0]
 80009f0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80009f4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80009f8:	6019      	str	r1, [r3, #0]
 80009fa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80009fe:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000a02:	801a      	strh	r2, [r3, #0]
    uint8_t buff[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    // Read frame with expected length of data.
    pn532->read_data(buff, length + 7);
 8000a0a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000a0e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000a1a:	f5a2 728d 	sub.w	r2, r2, #282	; 0x11a
 8000a1e:	8812      	ldrh	r2, [r2, #0]
 8000a20:	3207      	adds	r2, #7
 8000a22:	b291      	uxth	r1, r2
 8000a24:	f107 0214 	add.w	r2, r7, #20
 8000a28:	4610      	mov	r0, r2
 8000a2a:	4798      	blx	r3
    // Swallow all the 0x00 values that preceed 0xFF.
    uint8_t offset = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    while (buff[offset] == 0x00) {
 8000a32:	e019      	b.n	8000a68 <PN532_ReadFrame+0x88>
        offset += 1;
 8000a34:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000a38:	3301      	adds	r3, #1
 8000a3a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
        if (offset >= length + 8){
 8000a3e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000a42:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000a46:	881b      	ldrh	r3, [r3, #0]
 8000a48:	1dda      	adds	r2, r3, #7
 8000a4a:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000a4e:	429a      	cmp	r2, r3
 8000a50:	da0a      	bge.n	8000a68 <PN532_ReadFrame+0x88>
            pn532->log("Response frame preamble does not contain 0x00FF!");
 8000a52:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000a56:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	695b      	ldr	r3, [r3, #20]
 8000a5e:	485b      	ldr	r0, [pc, #364]	; (8000bcc <PN532_ReadFrame+0x1ec>)
 8000a60:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 8000a62:	f04f 33ff 	mov.w	r3, #4294967295
 8000a66:	e0ab      	b.n	8000bc0 <PN532_ReadFrame+0x1e0>
    while (buff[offset] == 0x00) {
 8000a68:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000a6c:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000a70:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000a74:	5cd3      	ldrb	r3, [r2, r3]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d0dc      	beq.n	8000a34 <PN532_ReadFrame+0x54>
        }
    }
    if (buff[offset] != 0xFF) {
 8000a7a:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000a7e:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000a82:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000a86:	5cd3      	ldrb	r3, [r2, r3]
 8000a88:	2bff      	cmp	r3, #255	; 0xff
 8000a8a:	d00a      	beq.n	8000aa2 <PN532_ReadFrame+0xc2>
        pn532->log("Response frame preamble does not contain 0x00FF!");
 8000a8c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000a90:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	695b      	ldr	r3, [r3, #20]
 8000a98:	484c      	ldr	r0, [pc, #304]	; (8000bcc <PN532_ReadFrame+0x1ec>)
 8000a9a:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa0:	e08e      	b.n	8000bc0 <PN532_ReadFrame+0x1e0>
    }
    offset += 1;
 8000aa2:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    if (offset >= length + 8) {
 8000aac:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000ab0:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000ab4:	881b      	ldrh	r3, [r3, #0]
 8000ab6:	1dda      	adds	r2, r3, #7
 8000ab8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000abc:	429a      	cmp	r2, r3
 8000abe:	da0a      	bge.n	8000ad6 <PN532_ReadFrame+0xf6>
        pn532->log("Response contains no data!");
 8000ac0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000ac4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	695b      	ldr	r3, [r3, #20]
 8000acc:	4840      	ldr	r0, [pc, #256]	; (8000bd0 <PN532_ReadFrame+0x1f0>)
 8000ace:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad4:	e074      	b.n	8000bc0 <PN532_ReadFrame+0x1e0>
    }
    // Check length & length checksum match.
    uint8_t frame_len = buff[offset];
 8000ad6:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000ada:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000ade:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000ae2:	5cd3      	ldrb	r3, [r2, r3]
 8000ae4:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    if (((frame_len + buff[offset+1]) & 0xFF) != 0) {
 8000ae8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000aec:	3301      	adds	r3, #1
 8000aee:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000af2:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000af6:	5cd2      	ldrb	r2, [r2, r3]
 8000af8:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8000afc:	4413      	add	r3, r2
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d00a      	beq.n	8000b1a <PN532_ReadFrame+0x13a>
        pn532->log("Response length checksum did not match length!");
 8000b04:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000b08:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	695b      	ldr	r3, [r3, #20]
 8000b10:	4830      	ldr	r0, [pc, #192]	; (8000bd4 <PN532_ReadFrame+0x1f4>)
 8000b12:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000b14:	f04f 33ff 	mov.w	r3, #4294967295
 8000b18:	e052      	b.n	8000bc0 <PN532_ReadFrame+0x1e0>
    }
    // Check frame checksum value matches bytes.
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8000b20:	e014      	b.n	8000b4c <PN532_ReadFrame+0x16c>
        checksum += buff[offset + 2 + i];
 8000b22:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000b26:	1c9a      	adds	r2, r3, #2
 8000b28:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000b2c:	4413      	add	r3, r2
 8000b2e:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000b32:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000b36:	5cd2      	ldrb	r2, [r2, r3]
 8000b38:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000b3c:	4413      	add	r3, r2
 8000b3e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 8000b42:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000b46:	3301      	adds	r3, #1
 8000b48:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8000b4c:	f897 211b 	ldrb.w	r2, [r7, #283]	; 0x11b
 8000b50:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d2e4      	bcs.n	8000b22 <PN532_ReadFrame+0x142>
    }
    checksum &= 0xFF;
    if (checksum != 0) {
 8000b58:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d00a      	beq.n	8000b76 <PN532_ReadFrame+0x196>
        pn532->log("Response checksum did not match expected checksum");
 8000b60:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000b64:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	695b      	ldr	r3, [r3, #20]
 8000b6c:	481a      	ldr	r0, [pc, #104]	; (8000bd8 <PN532_ReadFrame+0x1f8>)
 8000b6e:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000b70:	f04f 33ff 	mov.w	r3, #4294967295
 8000b74:	e024      	b.n	8000bc0 <PN532_ReadFrame+0x1e0>
    }
    // Return frame data.
    for (uint8_t i = 0; i < frame_len; i++) {
 8000b76:	2300      	movs	r3, #0
 8000b78:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
 8000b7c:	e018      	b.n	8000bb0 <PN532_ReadFrame+0x1d0>
        response[i] = buff[offset + 2 + i];
 8000b7e:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000b82:	1c9a      	adds	r2, r3, #2
 8000b84:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8000b88:	441a      	add	r2, r3
 8000b8a:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8000b8e:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8000b92:	f5a1 718c 	sub.w	r1, r1, #280	; 0x118
 8000b96:	6809      	ldr	r1, [r1, #0]
 8000b98:	440b      	add	r3, r1
 8000b9a:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8000b9e:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8000ba2:	5c8a      	ldrb	r2, [r1, r2]
 8000ba4:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < frame_len; i++) {
 8000ba6:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8000baa:	3301      	adds	r3, #1
 8000bac:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
 8000bb0:	f897 211c 	ldrb.w	r2, [r7, #284]	; 0x11c
 8000bb4:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d3e0      	bcc.n	8000b7e <PN532_ReadFrame+0x19e>
    }
    return frame_len;
 8000bbc:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	080038b8 	.word	0x080038b8
 8000bd0:	080038ec 	.word	0x080038ec
 8000bd4:	08003908 	.word	0x08003908
 8000bd8:	08003938 	.word	0x08003938

08000bdc <PN532_CallFunction>:
    uint8_t* response,
    uint16_t response_length,
    uint8_t* params,
    uint16_t params_length,
    uint32_t timeout
) {
 8000bdc:	b590      	push	{r4, r7, lr}
 8000bde:	b0c7      	sub	sp, #284	; 0x11c
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	f507 748c 	add.w	r4, r7, #280	; 0x118
 8000be6:	f5a4 7486 	sub.w	r4, r4, #268	; 0x10c
 8000bea:	6020      	str	r0, [r4, #0]
 8000bec:	4608      	mov	r0, r1
 8000bee:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8000bf2:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 8000bf6:	600a      	str	r2, [r1, #0]
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000bfe:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 8000c02:	4602      	mov	r2, r0
 8000c04:	701a      	strb	r2, [r3, #0]
 8000c06:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000c0a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000c0e:	460a      	mov	r2, r1
 8000c10:	801a      	strh	r2, [r3, #0]
    // Build frame data with command and parameters.
    uint8_t buff[PN532_FRAME_MAX_LENGTH];
    buff[0] = PN532_HOSTTOPN532;
 8000c12:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000c16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000c1a:	22d4      	movs	r2, #212	; 0xd4
 8000c1c:	701a      	strb	r2, [r3, #0]
    buff[1] = command & 0xFF;
 8000c1e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000c22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000c26:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000c2a:	f2a2 120d 	subw	r2, r2, #269	; 0x10d
 8000c2e:	7812      	ldrb	r2, [r2, #0]
 8000c30:	705a      	strb	r2, [r3, #1]
    for (uint8_t i = 0; i < params_length; i++) {
 8000c32:	2300      	movs	r3, #0
 8000c34:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000c38:	e012      	b.n	8000c60 <PN532_CallFunction+0x84>
        buff[2 + i] = params[i];
 8000c3a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000c3e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8000c42:	441a      	add	r2, r3
 8000c44:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000c48:	3302      	adds	r3, #2
 8000c4a:	7811      	ldrb	r1, [r2, #0]
 8000c4c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000c50:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8000c54:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < params_length; i++) {
 8000c56:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000c60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	f8b7 212c 	ldrh.w	r2, [r7, #300]	; 0x12c
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d8e5      	bhi.n	8000c3a <PN532_CallFunction+0x5e>
    }
    // Send frame and wait for response.
    if (PN532_WriteFrame(pn532, buff, params_length + 2) != PN532_STATUS_OK) {
 8000c6e:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 8000c72:	3302      	adds	r3, #2
 8000c74:	b29a      	uxth	r2, r3
 8000c76:	f107 0110 	add.w	r1, r7, #16
 8000c7a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000c7e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000c82:	6818      	ldr	r0, [r3, #0]
 8000c84:	f7ff fdd9 	bl	800083a <PN532_WriteFrame>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d011      	beq.n	8000cb2 <PN532_CallFunction+0xd6>
        pn532->wakeup();
 8000c8e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000c92:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	691b      	ldr	r3, [r3, #16]
 8000c9a:	4798      	blx	r3
        pn532->log("Trying to wakeup");
 8000c9c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000ca0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	695b      	ldr	r3, [r3, #20]
 8000ca8:	485b      	ldr	r0, [pc, #364]	; (8000e18 <PN532_CallFunction+0x23c>)
 8000caa:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000cac:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb0:	e0ac      	b.n	8000e0c <PN532_CallFunction+0x230>
    }
    if (!pn532->wait_ready(timeout)) {
 8000cb2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000cb6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	68db      	ldr	r3, [r3, #12]
 8000cbe:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8000cc2:	4798      	blx	r3
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	f083 0301 	eor.w	r3, r3, #1
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d002      	beq.n	8000cd6 <PN532_CallFunction+0xfa>
        return PN532_STATUS_ERROR;
 8000cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd4:	e09a      	b.n	8000e0c <PN532_CallFunction+0x230>
    }
    // Verify ACK response and wait to be ready for function response.
    pn532->read_data(buff, sizeof(PN532_ACK));
 8000cd6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000cda:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f107 0210 	add.w	r2, r7, #16
 8000ce6:	2106      	movs	r1, #6
 8000ce8:	4610      	mov	r0, r2
 8000cea:	4798      	blx	r3
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 8000cec:	2300      	movs	r3, #0
 8000cee:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8000cf2:	e01c      	b.n	8000d2e <PN532_CallFunction+0x152>
        if (PN532_ACK[i] != buff[i]) {
 8000cf4:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000cf8:	4a48      	ldr	r2, [pc, #288]	; (8000e1c <PN532_CallFunction+0x240>)
 8000cfa:	5cd2      	ldrb	r2, [r2, r3]
 8000cfc:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000d00:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8000d04:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 8000d08:	5ccb      	ldrb	r3, [r1, r3]
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	d00a      	beq.n	8000d24 <PN532_CallFunction+0x148>
            pn532->log("Did not receive expected ACK from PN532!");
 8000d0e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000d12:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	695b      	ldr	r3, [r3, #20]
 8000d1a:	4841      	ldr	r0, [pc, #260]	; (8000e20 <PN532_CallFunction+0x244>)
 8000d1c:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 8000d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d22:	e073      	b.n	8000e0c <PN532_CallFunction+0x230>
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 8000d24:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000d28:	3301      	adds	r3, #1
 8000d2a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8000d2e:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000d32:	2b05      	cmp	r3, #5
 8000d34:	d9de      	bls.n	8000cf4 <PN532_CallFunction+0x118>
        }
    }
    if (!pn532->wait_ready(timeout)) {
 8000d36:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000d3a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	68db      	ldr	r3, [r3, #12]
 8000d42:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8000d46:	4798      	blx	r3
 8000d48:	4603      	mov	r3, r0
 8000d4a:	f083 0301 	eor.w	r3, r3, #1
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d002      	beq.n	8000d5a <PN532_CallFunction+0x17e>
        return PN532_STATUS_ERROR;
 8000d54:	f04f 33ff 	mov.w	r3, #4294967295
 8000d58:	e058      	b.n	8000e0c <PN532_CallFunction+0x230>
    }
    // Read response bytes.
    int frame_len = PN532_ReadFrame(pn532, buff, response_length + 2);
 8000d5a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000d5e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000d62:	881b      	ldrh	r3, [r3, #0]
 8000d64:	3302      	adds	r3, #2
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	f107 0110 	add.w	r1, r7, #16
 8000d6c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000d70:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000d74:	6818      	ldr	r0, [r3, #0]
 8000d76:	f7ff fe33 	bl	80009e0 <PN532_ReadFrame>
 8000d7a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    // Check that response is for the called function.
    if (! ((buff[0] == PN532_PN532TOHOST) && (buff[1] == (command+1)))) {
 8000d7e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000d82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2bd5      	cmp	r3, #213	; 0xd5
 8000d8a:	d10d      	bne.n	8000da8 <PN532_CallFunction+0x1cc>
 8000d8c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000d90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000d94:	785b      	ldrb	r3, [r3, #1]
 8000d96:	461a      	mov	r2, r3
 8000d98:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000d9c:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	3301      	adds	r3, #1
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d00a      	beq.n	8000dbe <PN532_CallFunction+0x1e2>
        pn532->log("Received unexpected command response!");
 8000da8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000dac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	695b      	ldr	r3, [r3, #20]
 8000db4:	481b      	ldr	r0, [pc, #108]	; (8000e24 <PN532_CallFunction+0x248>)
 8000db6:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000db8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dbc:	e026      	b.n	8000e0c <PN532_CallFunction+0x230>
    }
    // Return response data.
    for (uint8_t i = 0; i < response_length; i++) {
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 8000dc4:	e015      	b.n	8000df2 <PN532_CallFunction+0x216>
        response[i] = buff[i + 2];
 8000dc6:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8000dca:	1c9a      	adds	r2, r3, #2
 8000dcc:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8000dd0:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8000dd4:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 8000dd8:	6809      	ldr	r1, [r1, #0]
 8000dda:	440b      	add	r3, r1
 8000ddc:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8000de0:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 8000de4:	5c8a      	ldrb	r2, [r1, r2]
 8000de6:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < response_length; i++) {
 8000de8:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8000dec:	3301      	adds	r3, #1
 8000dee:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 8000df2:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000dfc:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000e00:	8812      	ldrh	r2, [r2, #0]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d8df      	bhi.n	8000dc6 <PN532_CallFunction+0x1ea>
    }
    // The the number of bytes read
    return frame_len - 2;
 8000e06:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000e0a:	3b02      	subs	r3, #2
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd90      	pop	{r4, r7, pc}
 8000e16:	bf00      	nop
 8000e18:	0800396c 	.word	0x0800396c
 8000e1c:	08003a44 	.word	0x08003a44
 8000e20:	08003980 	.word	0x08003980
 8000e24:	080039ac 	.word	0x080039ac

08000e28 <PN532_GetFirmwareVersion>:

/**
  * @brief: Call PN532 GetFirmwareVersion function and return a buff with the IC,
  *  Ver, Rev, and Support values.
  */
int PN532_GetFirmwareVersion(PN532* pn532, uint8_t* version) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af04      	add	r7, sp, #16
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
    // length of version: 4
    if (PN532_CallFunction(pn532, PN532_COMMAND_GETFIRMWAREVERSION,
 8000e32:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000e36:	9302      	str	r3, [sp, #8]
 8000e38:	2300      	movs	r3, #0
 8000e3a:	9301      	str	r3, [sp, #4]
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	9300      	str	r3, [sp, #0]
 8000e40:	2304      	movs	r3, #4
 8000e42:	683a      	ldr	r2, [r7, #0]
 8000e44:	2102      	movs	r1, #2
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f7ff fec8 	bl	8000bdc <PN532_CallFunction>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e52:	d106      	bne.n	8000e62 <PN532_GetFirmwareVersion+0x3a>
                           version, 4, NULL, 0, 500) == PN532_STATUS_ERROR) {
        pn532->log("Failed to detect the PN532");
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	695b      	ldr	r3, [r3, #20]
 8000e58:	4804      	ldr	r0, [pc, #16]	; (8000e6c <PN532_GetFirmwareVersion+0x44>)
 8000e5a:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e60:	e000      	b.n	8000e64 <PN532_GetFirmwareVersion+0x3c>
    }
    return PN532_STATUS_OK;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	080039d4 	.word	0x080039d4

08000e70 <PN532_SamConfiguration>:

/**
  * @brief: Configure the PN532 to read MiFare cards.
  */
int PN532_SamConfiguration(PN532* pn532) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b088      	sub	sp, #32
 8000e74:	af04      	add	r7, sp, #16
 8000e76:	6078      	str	r0, [r7, #4]
    // - 0x01, normal mode
    // - 0x14, timeout 50ms * 20 = 1 second
    // - 0x01, use IRQ pin
    // Note that no other verification is necessary as call_function will
    // check the command was executed as expected.
    uint8_t params[] = {0x01, 0x14, 0x01};
 8000e78:	4a0d      	ldr	r2, [pc, #52]	; (8000eb0 <PN532_SamConfiguration+0x40>)
 8000e7a:	f107 030c 	add.w	r3, r7, #12
 8000e7e:	6812      	ldr	r2, [r2, #0]
 8000e80:	4611      	mov	r1, r2
 8000e82:	8019      	strh	r1, [r3, #0]
 8000e84:	3302      	adds	r3, #2
 8000e86:	0c12      	lsrs	r2, r2, #16
 8000e88:	701a      	strb	r2, [r3, #0]
    PN532_CallFunction(pn532, PN532_COMMAND_SAMCONFIGURATION,
 8000e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8e:	9302      	str	r3, [sp, #8]
 8000e90:	2303      	movs	r3, #3
 8000e92:	9301      	str	r3, [sp, #4]
 8000e94:	f107 030c 	add.w	r3, r7, #12
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2114      	movs	r1, #20
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff fe9b 	bl	8000bdc <PN532_CallFunction>
                       NULL, 0, params, sizeof(params), PN532_DEFAULT_TIMEOUT);
    return PN532_STATUS_OK;
 8000ea6:	2300      	movs	r3, #0
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	080039f0 	.word	0x080039f0

08000eb4 <PN532_ReadPassiveTarget>:
int PN532_ReadPassiveTarget(
    PN532* pn532,
    uint8_t* response,
    uint8_t card_baud,
    uint32_t timeout
) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b090      	sub	sp, #64	; 0x40
 8000eb8:	af04      	add	r7, sp, #16
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	603b      	str	r3, [r7, #0]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	71fb      	strb	r3, [r7, #7]
    // Send passive read command for 1 card.  Expect at most a 7 byte UUID.
    uint8_t params[] = {0x01, card_baud};
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    uint8_t buff[19];
    int length = PN532_CallFunction(pn532, PN532_COMMAND_INLISTPASSIVETARGET,
 8000ed0:	f107 0210 	add.w	r2, r7, #16
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	9302      	str	r3, [sp, #8]
 8000ed8:	2302      	movs	r3, #2
 8000eda:	9301      	str	r3, [sp, #4]
 8000edc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee0:	9300      	str	r3, [sp, #0]
 8000ee2:	2313      	movs	r3, #19
 8000ee4:	214a      	movs	r1, #74	; 0x4a
 8000ee6:	68f8      	ldr	r0, [r7, #12]
 8000ee8:	f7ff fe78 	bl	8000bdc <PN532_CallFunction>
 8000eec:	62b8      	str	r0, [r7, #40]	; 0x28
                        buff, sizeof(buff), params, sizeof(params), timeout);
    if (length < 0) {
 8000eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	da02      	bge.n	8000efa <PN532_ReadPassiveTarget+0x46>
        return PN532_STATUS_ERROR; // No card found
 8000ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef8:	e02e      	b.n	8000f58 <PN532_ReadPassiveTarget+0xa4>
    }
    // Check only 1 card with up to a 7 byte UID is present.
    if (buff[0] != 0x01) {
 8000efa:	7c3b      	ldrb	r3, [r7, #16]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d006      	beq.n	8000f0e <PN532_ReadPassiveTarget+0x5a>
        pn532->log("More than one card detected!");
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	695b      	ldr	r3, [r3, #20]
 8000f04:	4816      	ldr	r0, [pc, #88]	; (8000f60 <PN532_ReadPassiveTarget+0xac>)
 8000f06:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000f08:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0c:	e024      	b.n	8000f58 <PN532_ReadPassiveTarget+0xa4>
    }
    if (buff[5] > 7) {
 8000f0e:	7d7b      	ldrb	r3, [r7, #21]
 8000f10:	2b07      	cmp	r3, #7
 8000f12:	d906      	bls.n	8000f22 <PN532_ReadPassiveTarget+0x6e>
        pn532->log("Found card with unexpectedly long UID!");
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	695b      	ldr	r3, [r3, #20]
 8000f18:	4812      	ldr	r0, [pc, #72]	; (8000f64 <PN532_ReadPassiveTarget+0xb0>)
 8000f1a:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f20:	e01a      	b.n	8000f58 <PN532_ReadPassiveTarget+0xa4>
    }
    for (uint8_t i = 0; i < buff[5]; i++) {
 8000f22:	2300      	movs	r3, #0
 8000f24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000f28:	e010      	b.n	8000f4c <PN532_ReadPassiveTarget+0x98>
        response[i] = buff[6 + i];
 8000f2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f2e:	1d9a      	adds	r2, r3, #6
 8000f30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f34:	68b9      	ldr	r1, [r7, #8]
 8000f36:	440b      	add	r3, r1
 8000f38:	3230      	adds	r2, #48	; 0x30
 8000f3a:	443a      	add	r2, r7
 8000f3c:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8000f40:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < buff[5]; i++) {
 8000f42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f46:	3301      	adds	r3, #1
 8000f48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000f4c:	7d7b      	ldrb	r3, [r7, #21]
 8000f4e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d3e9      	bcc.n	8000f2a <PN532_ReadPassiveTarget+0x76>
    }
    return buff[5];
 8000f56:	7d7b      	ldrb	r3, [r7, #21]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3730      	adds	r7, #48	; 0x30
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	080039f4 	.word	0x080039f4
 8000f64:	08003a14 	.word	0x08003a14

08000f68 <PN532_Reset>:
//extern I2C_HandleTypeDef hi2c1;

/**************************************************************************
 * Reset and Log implements
 **************************************************************************/
int PN532_Reset(void) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RFID_Reset_GPIO_Port, RFID_Reset_Pin, GPIO_PIN_SET);
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f72:	480e      	ldr	r0, [pc, #56]	; (8000fac <PN532_Reset+0x44>)
 8000f74:	f000 fdee 	bl	8001b54 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000f78:	2064      	movs	r0, #100	; 0x64
 8000f7a:	f000 fb5d 	bl	8001638 <HAL_Delay>
    HAL_GPIO_WritePin(RFID_Reset_GPIO_Port, RFID_Reset_Pin, GPIO_PIN_RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f84:	4809      	ldr	r0, [pc, #36]	; (8000fac <PN532_Reset+0x44>)
 8000f86:	f000 fde5 	bl	8001b54 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000f8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f8e:	f000 fb53 	bl	8001638 <HAL_Delay>
    HAL_GPIO_WritePin(RFID_Reset_GPIO_Port, RFID_Reset_Pin, GPIO_PIN_SET);
 8000f92:	2201      	movs	r2, #1
 8000f94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f98:	4804      	ldr	r0, [pc, #16]	; (8000fac <PN532_Reset+0x44>)
 8000f9a:	f000 fddb 	bl	8001b54 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000f9e:	2064      	movs	r0, #100	; 0x64
 8000fa0:	f000 fb4a 	bl	8001638 <HAL_Delay>
    return PN532_STATUS_OK;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40020400 	.word	0x40020400

08000fb0 <PN532_Log>:

void PN532_Log(const char* log) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
    printf("%s\r\n", log);
 8000fb8:	6879      	ldr	r1, [r7, #4]
 8000fba:	4803      	ldr	r0, [pc, #12]	; (8000fc8 <PN532_Log+0x18>)
 8000fbc:	f001 fdfa 	bl	8002bb4 <iprintf>
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	08003a3c 	.word	0x08003a3c

08000fcc <spi_rw>:
        num >>= 1;
    }
    return result;
}

void spi_rw(uint8_t* data, uint8_t count) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af02      	add	r7, sp, #8
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(RFID_SS_GPIO_Port, RFID_SS_Pin, GPIO_PIN_RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2101      	movs	r1, #1
 8000fdc:	480d      	ldr	r0, [pc, #52]	; (8001014 <spi_rw+0x48>)
 8000fde:	f000 fdb9 	bl	8001b54 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	f000 fb28 	bl	8001638 <HAL_Delay>
    HAL_SPI_TransmitReceive(&hspi1, data, data, count, _SPI_TIMEOUT);
    for (uint8_t i = 0; i < count; i++) {
        data[i] = reverse_bit(data[i]);
    }
#else
    HAL_SPI_TransmitReceive(&hspi1, data, data, count, _SPI_TIMEOUT);
 8000fe8:	78fb      	ldrb	r3, [r7, #3]
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	220a      	movs	r2, #10
 8000fee:	9200      	str	r2, [sp, #0]
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	4808      	ldr	r0, [pc, #32]	; (8001018 <spi_rw+0x4c>)
 8000ff6:	f001 fa8e 	bl	8002516 <HAL_SPI_TransmitReceive>
#endif
    HAL_Delay(1);
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	f000 fb1c 	bl	8001638 <HAL_Delay>
    HAL_GPIO_WritePin(RFID_SS_GPIO_Port, RFID_SS_Pin, GPIO_PIN_SET);
 8001000:	2201      	movs	r2, #1
 8001002:	2101      	movs	r1, #1
 8001004:	4803      	ldr	r0, [pc, #12]	; (8001014 <spi_rw+0x48>)
 8001006:	f000 fda5 	bl	8001b54 <HAL_GPIO_WritePin>
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40020400 	.word	0x40020400
 8001018:	200000b8 	.word	0x200000b8

0800101c <PN532_SPI_ReadData>:

int PN532_SPI_ReadData(uint8_t* data, uint16_t count) {
 800101c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001020:	b087      	sub	sp, #28
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
 8001026:	460b      	mov	r3, r1
 8001028:	807b      	strh	r3, [r7, #2]
 800102a:	466b      	mov	r3, sp
 800102c:	461e      	mov	r6, r3
    uint8_t frame[count + 1];
 800102e:	887b      	ldrh	r3, [r7, #2]
 8001030:	1c59      	adds	r1, r3, #1
 8001032:	1e4b      	subs	r3, r1, #1
 8001034:	613b      	str	r3, [r7, #16]
 8001036:	460a      	mov	r2, r1
 8001038:	2300      	movs	r3, #0
 800103a:	4690      	mov	r8, r2
 800103c:	4699      	mov	r9, r3
 800103e:	f04f 0200 	mov.w	r2, #0
 8001042:	f04f 0300 	mov.w	r3, #0
 8001046:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800104a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800104e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001052:	460a      	mov	r2, r1
 8001054:	2300      	movs	r3, #0
 8001056:	4614      	mov	r4, r2
 8001058:	461d      	mov	r5, r3
 800105a:	f04f 0200 	mov.w	r2, #0
 800105e:	f04f 0300 	mov.w	r3, #0
 8001062:	00eb      	lsls	r3, r5, #3
 8001064:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001068:	00e2      	lsls	r2, r4, #3
 800106a:	460b      	mov	r3, r1
 800106c:	3307      	adds	r3, #7
 800106e:	08db      	lsrs	r3, r3, #3
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	ebad 0d03 	sub.w	sp, sp, r3
 8001076:	466b      	mov	r3, sp
 8001078:	3300      	adds	r3, #0
 800107a:	60fb      	str	r3, [r7, #12]
    frame[0] = _SPI_DATAREAD;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	2203      	movs	r2, #3
 8001080:	701a      	strb	r2, [r3, #0]
    HAL_Delay(5);
 8001082:	2005      	movs	r0, #5
 8001084:	f000 fad8 	bl	8001638 <HAL_Delay>
    spi_rw(frame, count + 1);
 8001088:	887b      	ldrh	r3, [r7, #2]
 800108a:	b2db      	uxtb	r3, r3
 800108c:	3301      	adds	r3, #1
 800108e:	b2db      	uxtb	r3, r3
 8001090:	4619      	mov	r1, r3
 8001092:	68f8      	ldr	r0, [r7, #12]
 8001094:	f7ff ff9a 	bl	8000fcc <spi_rw>
    for (uint8_t i = 0; i < count; i++) {
 8001098:	2300      	movs	r3, #0
 800109a:	75fb      	strb	r3, [r7, #23]
 800109c:	e00a      	b.n	80010b4 <PN532_SPI_ReadData+0x98>
        data[i] = frame[i + 1];
 800109e:	7dfb      	ldrb	r3, [r7, #23]
 80010a0:	1c5a      	adds	r2, r3, #1
 80010a2:	7dfb      	ldrb	r3, [r7, #23]
 80010a4:	6879      	ldr	r1, [r7, #4]
 80010a6:	440b      	add	r3, r1
 80010a8:	68f9      	ldr	r1, [r7, #12]
 80010aa:	5c8a      	ldrb	r2, [r1, r2]
 80010ac:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 80010ae:	7dfb      	ldrb	r3, [r7, #23]
 80010b0:	3301      	adds	r3, #1
 80010b2:	75fb      	strb	r3, [r7, #23]
 80010b4:	7dfb      	ldrb	r3, [r7, #23]
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	887a      	ldrh	r2, [r7, #2]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d8ef      	bhi.n	800109e <PN532_SPI_ReadData+0x82>
    }
    return PN532_STATUS_OK;
 80010be:	2300      	movs	r3, #0
 80010c0:	46b5      	mov	sp, r6
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	371c      	adds	r7, #28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080010cc <PN532_SPI_WriteData>:

int PN532_SPI_WriteData(uint8_t *data, uint16_t count) {
 80010cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010d0:	b087      	sub	sp, #28
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
 80010d6:	460b      	mov	r3, r1
 80010d8:	807b      	strh	r3, [r7, #2]
 80010da:	466b      	mov	r3, sp
 80010dc:	461e      	mov	r6, r3
    uint8_t frame[count + 1];
 80010de:	887b      	ldrh	r3, [r7, #2]
 80010e0:	1c59      	adds	r1, r3, #1
 80010e2:	1e4b      	subs	r3, r1, #1
 80010e4:	613b      	str	r3, [r7, #16]
 80010e6:	460a      	mov	r2, r1
 80010e8:	2300      	movs	r3, #0
 80010ea:	4690      	mov	r8, r2
 80010ec:	4699      	mov	r9, r3
 80010ee:	f04f 0200 	mov.w	r2, #0
 80010f2:	f04f 0300 	mov.w	r3, #0
 80010f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80010fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80010fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001102:	460a      	mov	r2, r1
 8001104:	2300      	movs	r3, #0
 8001106:	4614      	mov	r4, r2
 8001108:	461d      	mov	r5, r3
 800110a:	f04f 0200 	mov.w	r2, #0
 800110e:	f04f 0300 	mov.w	r3, #0
 8001112:	00eb      	lsls	r3, r5, #3
 8001114:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001118:	00e2      	lsls	r2, r4, #3
 800111a:	460b      	mov	r3, r1
 800111c:	3307      	adds	r3, #7
 800111e:	08db      	lsrs	r3, r3, #3
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	ebad 0d03 	sub.w	sp, sp, r3
 8001126:	466b      	mov	r3, sp
 8001128:	3300      	adds	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]
    frame[0] = _SPI_DATAWRITE;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2201      	movs	r2, #1
 8001130:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 8001132:	2300      	movs	r3, #0
 8001134:	75fb      	strb	r3, [r7, #23]
 8001136:	e00a      	b.n	800114e <PN532_SPI_WriteData+0x82>
        frame[i + 1] = data[i];
 8001138:	7dfb      	ldrb	r3, [r7, #23]
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	441a      	add	r2, r3
 800113e:	7dfb      	ldrb	r3, [r7, #23]
 8001140:	3301      	adds	r3, #1
 8001142:	7811      	ldrb	r1, [r2, #0]
 8001144:	68fa      	ldr	r2, [r7, #12]
 8001146:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < count; i++) {
 8001148:	7dfb      	ldrb	r3, [r7, #23]
 800114a:	3301      	adds	r3, #1
 800114c:	75fb      	strb	r3, [r7, #23]
 800114e:	7dfb      	ldrb	r3, [r7, #23]
 8001150:	b29b      	uxth	r3, r3
 8001152:	887a      	ldrh	r2, [r7, #2]
 8001154:	429a      	cmp	r2, r3
 8001156:	d8ef      	bhi.n	8001138 <PN532_SPI_WriteData+0x6c>
    }
    spi_rw(frame, count + 1);
 8001158:	887b      	ldrh	r3, [r7, #2]
 800115a:	b2db      	uxtb	r3, r3
 800115c:	3301      	adds	r3, #1
 800115e:	b2db      	uxtb	r3, r3
 8001160:	4619      	mov	r1, r3
 8001162:	68f8      	ldr	r0, [r7, #12]
 8001164:	f7ff ff32 	bl	8000fcc <spi_rw>
    return PN532_STATUS_OK;
 8001168:	2300      	movs	r3, #0
 800116a:	46b5      	mov	sp, r6
}
 800116c:	4618      	mov	r0, r3
 800116e:	371c      	adds	r7, #28
 8001170:	46bd      	mov	sp, r7
 8001172:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001176 <PN532_SPI_WaitReady>:

bool PN532_SPI_WaitReady(uint32_t timeout) {
 8001176:	b580      	push	{r7, lr}
 8001178:	b084      	sub	sp, #16
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
    uint8_t status[] = {_SPI_STATREAD, 0x00};
 800117e:	2302      	movs	r3, #2
 8001180:	813b      	strh	r3, [r7, #8]
    uint32_t tickstart = HAL_GetTick();
 8001182:	f000 fa4d 	bl	8001620 <HAL_GetTick>
 8001186:	60f8      	str	r0, [r7, #12]
    while (HAL_GetTick() - tickstart < timeout) {
 8001188:	e010      	b.n	80011ac <PN532_SPI_WaitReady+0x36>
        HAL_Delay(10);
 800118a:	200a      	movs	r0, #10
 800118c:	f000 fa54 	bl	8001638 <HAL_Delay>
        spi_rw(status, sizeof(status));
 8001190:	f107 0308 	add.w	r3, r7, #8
 8001194:	2102      	movs	r1, #2
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff ff18 	bl	8000fcc <spi_rw>
        if (status[1] == _SPI_READY) {
 800119c:	7a7b      	ldrb	r3, [r7, #9]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d101      	bne.n	80011a6 <PN532_SPI_WaitReady+0x30>
            return true;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e00b      	b.n	80011be <PN532_SPI_WaitReady+0x48>
        } else {
            HAL_Delay(5);
 80011a6:	2005      	movs	r0, #5
 80011a8:	f000 fa46 	bl	8001638 <HAL_Delay>
    while (HAL_GetTick() - tickstart < timeout) {
 80011ac:	f000 fa38 	bl	8001620 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d8e6      	bhi.n	800118a <PN532_SPI_WaitReady+0x14>
        }
    }
    return false;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
	...

080011c8 <PN532_SPI_Wakeup>:

int PN532_SPI_Wakeup(void) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
    // Send any special commands/data to wake up PN532
    uint8_t data[] = {0x00};
 80011ce:	2300      	movs	r3, #0
 80011d0:	713b      	strb	r3, [r7, #4]
    HAL_Delay(1000);
 80011d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011d6:	f000 fa2f 	bl	8001638 <HAL_Delay>
    HAL_GPIO_WritePin(RFID_SS_GPIO_Port, RFID_SS_Pin, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	2101      	movs	r1, #1
 80011de:	480a      	ldr	r0, [pc, #40]	; (8001208 <PN532_SPI_Wakeup+0x40>)
 80011e0:	f000 fcb8 	bl	8001b54 <HAL_GPIO_WritePin>
    HAL_Delay(2); // T_osc_start
 80011e4:	2002      	movs	r0, #2
 80011e6:	f000 fa27 	bl	8001638 <HAL_Delay>
    spi_rw(data, 1);
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	2101      	movs	r1, #1
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff feec 	bl	8000fcc <spi_rw>
    HAL_Delay(1000);
 80011f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011f8:	f000 fa1e 	bl	8001638 <HAL_Delay>
    return PN532_STATUS_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40020400 	.word	0x40020400

0800120c <PN532_SPI_Init>:

void PN532_SPI_Init(PN532* pn532) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
    // init the pn532 functions
    pn532->reset =  PN532_Reset;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a0c      	ldr	r2, [pc, #48]	; (8001248 <PN532_SPI_Init+0x3c>)
 8001218:	601a      	str	r2, [r3, #0]
    pn532->read_data = PN532_SPI_ReadData;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a0b      	ldr	r2, [pc, #44]	; (800124c <PN532_SPI_Init+0x40>)
 800121e:	605a      	str	r2, [r3, #4]
    pn532->write_data = PN532_SPI_WriteData;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4a0b      	ldr	r2, [pc, #44]	; (8001250 <PN532_SPI_Init+0x44>)
 8001224:	609a      	str	r2, [r3, #8]
    pn532->wait_ready = PN532_SPI_WaitReady;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a0a      	ldr	r2, [pc, #40]	; (8001254 <PN532_SPI_Init+0x48>)
 800122a:	60da      	str	r2, [r3, #12]
    pn532->wakeup = PN532_SPI_Wakeup;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <PN532_SPI_Init+0x4c>)
 8001230:	611a      	str	r2, [r3, #16]
    pn532->log = PN532_Log;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a09      	ldr	r2, [pc, #36]	; (800125c <PN532_SPI_Init+0x50>)
 8001236:	615a      	str	r2, [r3, #20]

    // hardware wakeup
    pn532->wakeup();
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	691b      	ldr	r3, [r3, #16]
 800123c:	4798      	blx	r3
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	08000f69 	.word	0x08000f69
 800124c:	0800101d 	.word	0x0800101d
 8001250:	080010cd 	.word	0x080010cd
 8001254:	08001177 	.word	0x08001177
 8001258:	080011c9 	.word	0x080011c9
 800125c:	08000fb1 	.word	0x08000fb1

08001260 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	4b10      	ldr	r3, [pc, #64]	; (80012ac <HAL_MspInit+0x4c>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	4a0f      	ldr	r2, [pc, #60]	; (80012ac <HAL_MspInit+0x4c>)
 8001270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001274:	6453      	str	r3, [r2, #68]	; 0x44
 8001276:	4b0d      	ldr	r3, [pc, #52]	; (80012ac <HAL_MspInit+0x4c>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	603b      	str	r3, [r7, #0]
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <HAL_MspInit+0x4c>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	4a08      	ldr	r2, [pc, #32]	; (80012ac <HAL_MspInit+0x4c>)
 800128c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001290:	6413      	str	r3, [r2, #64]	; 0x40
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <HAL_MspInit+0x4c>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129a:	603b      	str	r3, [r7, #0]
 800129c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	40023800 	.word	0x40023800

080012b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	; 0x28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a19      	ldr	r2, [pc, #100]	; (8001334 <HAL_SPI_MspInit+0x84>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d12b      	bne.n	800132a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	4b18      	ldr	r3, [pc, #96]	; (8001338 <HAL_SPI_MspInit+0x88>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	4a17      	ldr	r2, [pc, #92]	; (8001338 <HAL_SPI_MspInit+0x88>)
 80012dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012e0:	6453      	str	r3, [r2, #68]	; 0x44
 80012e2:	4b15      	ldr	r3, [pc, #84]	; (8001338 <HAL_SPI_MspInit+0x88>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	4b11      	ldr	r3, [pc, #68]	; (8001338 <HAL_SPI_MspInit+0x88>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a10      	ldr	r2, [pc, #64]	; (8001338 <HAL_SPI_MspInit+0x88>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <HAL_SPI_MspInit+0x88>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800130a:	23e0      	movs	r3, #224	; 0xe0
 800130c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130e:	2302      	movs	r3, #2
 8001310:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001316:	2303      	movs	r3, #3
 8001318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800131a:	2305      	movs	r3, #5
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	4619      	mov	r1, r3
 8001324:	4805      	ldr	r0, [pc, #20]	; (800133c <HAL_SPI_MspInit+0x8c>)
 8001326:	f000 fa91 	bl	800184c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800132a:	bf00      	nop
 800132c:	3728      	adds	r7, #40	; 0x28
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40013000 	.word	0x40013000
 8001338:	40023800 	.word	0x40023800
 800133c:	40020000 	.word	0x40020000

08001340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001344:	e7fe      	b.n	8001344 <NMI_Handler+0x4>

08001346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134a:	e7fe      	b.n	800134a <HardFault_Handler+0x4>

0800134c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <MemManage_Handler+0x4>

08001352 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001356:	e7fe      	b.n	8001356 <BusFault_Handler+0x4>

08001358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800135c:	e7fe      	b.n	800135c <UsageFault_Handler+0x4>

0800135e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800138c:	f000 f934 	bl	80015f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}

08001394 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	e00a      	b.n	80013bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013a6:	f3af 8000 	nop.w
 80013aa:	4601      	mov	r1, r0
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	1c5a      	adds	r2, r3, #1
 80013b0:	60ba      	str	r2, [r7, #8]
 80013b2:	b2ca      	uxtb	r2, r1
 80013b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	3301      	adds	r3, #1
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	697a      	ldr	r2, [r7, #20]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	dbf0      	blt.n	80013a6 <_read+0x12>
  }

  return len;
 80013c4:	687b      	ldr	r3, [r7, #4]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b086      	sub	sp, #24
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	60f8      	str	r0, [r7, #12]
 80013d6:	60b9      	str	r1, [r7, #8]
 80013d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
 80013de:	e009      	b.n	80013f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	1c5a      	adds	r2, r3, #1
 80013e4:	60ba      	str	r2, [r7, #8]
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	3301      	adds	r3, #1
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	697a      	ldr	r2, [r7, #20]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	dbf1      	blt.n	80013e0 <_write+0x12>
  }
  return len;
 80013fc:	687b      	ldr	r3, [r7, #4]
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3718      	adds	r7, #24
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <_close>:

int _close(int file)
{
 8001406:	b480      	push	{r7}
 8001408:	b083      	sub	sp, #12
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800140e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001412:	4618      	mov	r0, r3
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800141e:	b480      	push	{r7}
 8001420:	b083      	sub	sp, #12
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
 8001426:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800142e:	605a      	str	r2, [r3, #4]
  return 0;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <_isatty>:

int _isatty(int file)
{
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001446:	2301      	movs	r3, #1
}
 8001448:	4618      	mov	r0, r3
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3714      	adds	r7, #20
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
	...

08001470 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001478:	4a14      	ldr	r2, [pc, #80]	; (80014cc <_sbrk+0x5c>)
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <_sbrk+0x60>)
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001484:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <_sbrk+0x64>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d102      	bne.n	8001492 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <_sbrk+0x64>)
 800148e:	4a12      	ldr	r2, [pc, #72]	; (80014d8 <_sbrk+0x68>)
 8001490:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001492:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <_sbrk+0x64>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	429a      	cmp	r2, r3
 800149e:	d207      	bcs.n	80014b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014a0:	f001 fc2c 	bl	8002cfc <__errno>
 80014a4:	4603      	mov	r3, r0
 80014a6:	220c      	movs	r2, #12
 80014a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014aa:	f04f 33ff 	mov.w	r3, #4294967295
 80014ae:	e009      	b.n	80014c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014b0:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <_sbrk+0x64>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014b6:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <_sbrk+0x64>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	4a05      	ldr	r2, [pc, #20]	; (80014d4 <_sbrk+0x64>)
 80014c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014c2:	68fb      	ldr	r3, [r7, #12]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20020000 	.word	0x20020000
 80014d0:	00000400 	.word	0x00000400
 80014d4:	20000110 	.word	0x20000110
 80014d8:	20000268 	.word	0x20000268

080014dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <SystemInit+0x20>)
 80014e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014e6:	4a05      	ldr	r2, [pc, #20]	; (80014fc <SystemInit+0x20>)
 80014e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001500:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001538 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001504:	f7ff ffea 	bl	80014dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001508:	480c      	ldr	r0, [pc, #48]	; (800153c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800150a:	490d      	ldr	r1, [pc, #52]	; (8001540 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800150c:	4a0d      	ldr	r2, [pc, #52]	; (8001544 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800150e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001510:	e002      	b.n	8001518 <LoopCopyDataInit>

08001512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001516:	3304      	adds	r3, #4

08001518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800151a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800151c:	d3f9      	bcc.n	8001512 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800151e:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001520:	4c0a      	ldr	r4, [pc, #40]	; (800154c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001524:	e001      	b.n	800152a <LoopFillZerobss>

08001526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001528:	3204      	adds	r2, #4

0800152a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800152a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800152c:	d3fb      	bcc.n	8001526 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800152e:	f001 fbeb 	bl	8002d08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001532:	f7ff f857 	bl	80005e4 <main>
  bx  lr    
 8001536:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001538:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800153c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001540:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001544:	08003aa0 	.word	0x08003aa0
  ldr r2, =_sbss
 8001548:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800154c:	20000264 	.word	0x20000264

08001550 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001550:	e7fe      	b.n	8001550 <ADC_IRQHandler>
	...

08001554 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001558:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <HAL_Init+0x40>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a0d      	ldr	r2, [pc, #52]	; (8001594 <HAL_Init+0x40>)
 800155e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001562:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001564:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <HAL_Init+0x40>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <HAL_Init+0x40>)
 800156a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800156e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001570:	4b08      	ldr	r3, [pc, #32]	; (8001594 <HAL_Init+0x40>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a07      	ldr	r2, [pc, #28]	; (8001594 <HAL_Init+0x40>)
 8001576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800157a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800157c:	2003      	movs	r0, #3
 800157e:	f000 f931 	bl	80017e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001582:	200f      	movs	r0, #15
 8001584:	f000 f808 	bl	8001598 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001588:	f7ff fe6a 	bl	8001260 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40023c00 	.word	0x40023c00

08001598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <HAL_InitTick+0x54>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_InitTick+0x58>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	4619      	mov	r1, r3
 80015aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80015b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 f93b 	bl	8001832 <HAL_SYSTICK_Config>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e00e      	b.n	80015e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b0f      	cmp	r3, #15
 80015ca:	d80a      	bhi.n	80015e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015cc:	2200      	movs	r2, #0
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	f04f 30ff 	mov.w	r0, #4294967295
 80015d4:	f000 f911 	bl	80017fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d8:	4a06      	ldr	r2, [pc, #24]	; (80015f4 <HAL_InitTick+0x5c>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015de:	2300      	movs	r3, #0
 80015e0:	e000      	b.n	80015e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000000 	.word	0x20000000
 80015f0:	20000008 	.word	0x20000008
 80015f4:	20000004 	.word	0x20000004

080015f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <HAL_IncTick+0x20>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	461a      	mov	r2, r3
 8001602:	4b06      	ldr	r3, [pc, #24]	; (800161c <HAL_IncTick+0x24>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4413      	add	r3, r2
 8001608:	4a04      	ldr	r2, [pc, #16]	; (800161c <HAL_IncTick+0x24>)
 800160a:	6013      	str	r3, [r2, #0]
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	20000008 	.word	0x20000008
 800161c:	20000114 	.word	0x20000114

08001620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  return uwTick;
 8001624:	4b03      	ldr	r3, [pc, #12]	; (8001634 <HAL_GetTick+0x14>)
 8001626:	681b      	ldr	r3, [r3, #0]
}
 8001628:	4618      	mov	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	20000114 	.word	0x20000114

08001638 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001640:	f7ff ffee 	bl	8001620 <HAL_GetTick>
 8001644:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001650:	d005      	beq.n	800165e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001652:	4b0a      	ldr	r3, [pc, #40]	; (800167c <HAL_Delay+0x44>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	461a      	mov	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	4413      	add	r3, r2
 800165c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800165e:	bf00      	nop
 8001660:	f7ff ffde 	bl	8001620 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	68fa      	ldr	r2, [r7, #12]
 800166c:	429a      	cmp	r2, r3
 800166e:	d8f7      	bhi.n	8001660 <HAL_Delay+0x28>
  {
  }
}
 8001670:	bf00      	nop
 8001672:	bf00      	nop
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000008 	.word	0x20000008

08001680 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001690:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001696:	68ba      	ldr	r2, [r7, #8]
 8001698:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800169c:	4013      	ands	r3, r2
 800169e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016b2:	4a04      	ldr	r2, [pc, #16]	; (80016c4 <__NVIC_SetPriorityGrouping+0x44>)
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	60d3      	str	r3, [r2, #12]
}
 80016b8:	bf00      	nop
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016cc:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <__NVIC_GetPriorityGrouping+0x18>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	0a1b      	lsrs	r3, r3, #8
 80016d2:	f003 0307 	and.w	r3, r3, #7
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	6039      	str	r1, [r7, #0]
 80016ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	db0a      	blt.n	800170e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	490c      	ldr	r1, [pc, #48]	; (8001730 <__NVIC_SetPriority+0x4c>)
 80016fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001702:	0112      	lsls	r2, r2, #4
 8001704:	b2d2      	uxtb	r2, r2
 8001706:	440b      	add	r3, r1
 8001708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800170c:	e00a      	b.n	8001724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	b2da      	uxtb	r2, r3
 8001712:	4908      	ldr	r1, [pc, #32]	; (8001734 <__NVIC_SetPriority+0x50>)
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	3b04      	subs	r3, #4
 800171c:	0112      	lsls	r2, r2, #4
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	440b      	add	r3, r1
 8001722:	761a      	strb	r2, [r3, #24]
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	e000e100 	.word	0xe000e100
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001738:	b480      	push	{r7}
 800173a:	b089      	sub	sp, #36	; 0x24
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	f1c3 0307 	rsb	r3, r3, #7
 8001752:	2b04      	cmp	r3, #4
 8001754:	bf28      	it	cs
 8001756:	2304      	movcs	r3, #4
 8001758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	3304      	adds	r3, #4
 800175e:	2b06      	cmp	r3, #6
 8001760:	d902      	bls.n	8001768 <NVIC_EncodePriority+0x30>
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	3b03      	subs	r3, #3
 8001766:	e000      	b.n	800176a <NVIC_EncodePriority+0x32>
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800176c:	f04f 32ff 	mov.w	r2, #4294967295
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43da      	mvns	r2, r3
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	401a      	ands	r2, r3
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001780:	f04f 31ff 	mov.w	r1, #4294967295
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	fa01 f303 	lsl.w	r3, r1, r3
 800178a:	43d9      	mvns	r1, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001790:	4313      	orrs	r3, r2
         );
}
 8001792:	4618      	mov	r0, r3
 8001794:	3724      	adds	r7, #36	; 0x24
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
	...

080017a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017b0:	d301      	bcc.n	80017b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017b2:	2301      	movs	r3, #1
 80017b4:	e00f      	b.n	80017d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017b6:	4a0a      	ldr	r2, [pc, #40]	; (80017e0 <SysTick_Config+0x40>)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017be:	210f      	movs	r1, #15
 80017c0:	f04f 30ff 	mov.w	r0, #4294967295
 80017c4:	f7ff ff8e 	bl	80016e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017c8:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <SysTick_Config+0x40>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ce:	4b04      	ldr	r3, [pc, #16]	; (80017e0 <SysTick_Config+0x40>)
 80017d0:	2207      	movs	r2, #7
 80017d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	e000e010 	.word	0xe000e010

080017e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff ff47 	bl	8001680 <__NVIC_SetPriorityGrouping>
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b086      	sub	sp, #24
 80017fe:	af00      	add	r7, sp, #0
 8001800:	4603      	mov	r3, r0
 8001802:	60b9      	str	r1, [r7, #8]
 8001804:	607a      	str	r2, [r7, #4]
 8001806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800180c:	f7ff ff5c 	bl	80016c8 <__NVIC_GetPriorityGrouping>
 8001810:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	68b9      	ldr	r1, [r7, #8]
 8001816:	6978      	ldr	r0, [r7, #20]
 8001818:	f7ff ff8e 	bl	8001738 <NVIC_EncodePriority>
 800181c:	4602      	mov	r2, r0
 800181e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001822:	4611      	mov	r1, r2
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff ff5d 	bl	80016e4 <__NVIC_SetPriority>
}
 800182a:	bf00      	nop
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f7ff ffb0 	bl	80017a0 <SysTick_Config>
 8001840:	4603      	mov	r3, r0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
	...

0800184c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800184c:	b480      	push	{r7}
 800184e:	b089      	sub	sp, #36	; 0x24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800185e:	2300      	movs	r3, #0
 8001860:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
 8001866:	e159      	b.n	8001b1c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001868:	2201      	movs	r2, #1
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	697a      	ldr	r2, [r7, #20]
 8001878:	4013      	ands	r3, r2
 800187a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	429a      	cmp	r2, r3
 8001882:	f040 8148 	bne.w	8001b16 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f003 0303 	and.w	r3, r3, #3
 800188e:	2b01      	cmp	r3, #1
 8001890:	d005      	beq.n	800189e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800189a:	2b02      	cmp	r3, #2
 800189c:	d130      	bne.n	8001900 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	2203      	movs	r2, #3
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43db      	mvns	r3, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4013      	ands	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	68da      	ldr	r2, [r3, #12]
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018d4:	2201      	movs	r2, #1
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4013      	ands	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	091b      	lsrs	r3, r3, #4
 80018ea:	f003 0201 	and.w	r2, r3, #1
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 0303 	and.w	r3, r3, #3
 8001908:	2b03      	cmp	r3, #3
 800190a:	d017      	beq.n	800193c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	2203      	movs	r2, #3
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4013      	ands	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4313      	orrs	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 0303 	and.w	r3, r3, #3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d123      	bne.n	8001990 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	08da      	lsrs	r2, r3, #3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3208      	adds	r2, #8
 8001950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001954:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	220f      	movs	r2, #15
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4013      	ands	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	691a      	ldr	r2, [r3, #16]
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4313      	orrs	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	08da      	lsrs	r2, r3, #3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	3208      	adds	r2, #8
 800198a:	69b9      	ldr	r1, [r7, #24]
 800198c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	2203      	movs	r2, #3
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 0203 	and.w	r2, r3, #3
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f000 80a2 	beq.w	8001b16 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	4b57      	ldr	r3, [pc, #348]	; (8001b34 <HAL_GPIO_Init+0x2e8>)
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	4a56      	ldr	r2, [pc, #344]	; (8001b34 <HAL_GPIO_Init+0x2e8>)
 80019dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019e0:	6453      	str	r3, [r2, #68]	; 0x44
 80019e2:	4b54      	ldr	r3, [pc, #336]	; (8001b34 <HAL_GPIO_Init+0x2e8>)
 80019e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019ee:	4a52      	ldr	r2, [pc, #328]	; (8001b38 <HAL_GPIO_Init+0x2ec>)
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	089b      	lsrs	r3, r3, #2
 80019f4:	3302      	adds	r3, #2
 80019f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	220f      	movs	r2, #15
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a49      	ldr	r2, [pc, #292]	; (8001b3c <HAL_GPIO_Init+0x2f0>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d019      	beq.n	8001a4e <HAL_GPIO_Init+0x202>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a48      	ldr	r2, [pc, #288]	; (8001b40 <HAL_GPIO_Init+0x2f4>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d013      	beq.n	8001a4a <HAL_GPIO_Init+0x1fe>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a47      	ldr	r2, [pc, #284]	; (8001b44 <HAL_GPIO_Init+0x2f8>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d00d      	beq.n	8001a46 <HAL_GPIO_Init+0x1fa>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a46      	ldr	r2, [pc, #280]	; (8001b48 <HAL_GPIO_Init+0x2fc>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d007      	beq.n	8001a42 <HAL_GPIO_Init+0x1f6>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a45      	ldr	r2, [pc, #276]	; (8001b4c <HAL_GPIO_Init+0x300>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d101      	bne.n	8001a3e <HAL_GPIO_Init+0x1f2>
 8001a3a:	2304      	movs	r3, #4
 8001a3c:	e008      	b.n	8001a50 <HAL_GPIO_Init+0x204>
 8001a3e:	2307      	movs	r3, #7
 8001a40:	e006      	b.n	8001a50 <HAL_GPIO_Init+0x204>
 8001a42:	2303      	movs	r3, #3
 8001a44:	e004      	b.n	8001a50 <HAL_GPIO_Init+0x204>
 8001a46:	2302      	movs	r3, #2
 8001a48:	e002      	b.n	8001a50 <HAL_GPIO_Init+0x204>
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e000      	b.n	8001a50 <HAL_GPIO_Init+0x204>
 8001a4e:	2300      	movs	r3, #0
 8001a50:	69fa      	ldr	r2, [r7, #28]
 8001a52:	f002 0203 	and.w	r2, r2, #3
 8001a56:	0092      	lsls	r2, r2, #2
 8001a58:	4093      	lsls	r3, r2
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a60:	4935      	ldr	r1, [pc, #212]	; (8001b38 <HAL_GPIO_Init+0x2ec>)
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	089b      	lsrs	r3, r3, #2
 8001a66:	3302      	adds	r3, #2
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a6e:	4b38      	ldr	r3, [pc, #224]	; (8001b50 <HAL_GPIO_Init+0x304>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	43db      	mvns	r3, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a92:	4a2f      	ldr	r2, [pc, #188]	; (8001b50 <HAL_GPIO_Init+0x304>)
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a98:	4b2d      	ldr	r3, [pc, #180]	; (8001b50 <HAL_GPIO_Init+0x304>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d003      	beq.n	8001abc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001abc:	4a24      	ldr	r2, [pc, #144]	; (8001b50 <HAL_GPIO_Init+0x304>)
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ac2:	4b23      	ldr	r3, [pc, #140]	; (8001b50 <HAL_GPIO_Init+0x304>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	43db      	mvns	r3, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ae6:	4a1a      	ldr	r2, [pc, #104]	; (8001b50 <HAL_GPIO_Init+0x304>)
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aec:	4b18      	ldr	r3, [pc, #96]	; (8001b50 <HAL_GPIO_Init+0x304>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	43db      	mvns	r3, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4013      	ands	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d003      	beq.n	8001b10 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b10:	4a0f      	ldr	r2, [pc, #60]	; (8001b50 <HAL_GPIO_Init+0x304>)
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	61fb      	str	r3, [r7, #28]
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	2b0f      	cmp	r3, #15
 8001b20:	f67f aea2 	bls.w	8001868 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b24:	bf00      	nop
 8001b26:	bf00      	nop
 8001b28:	3724      	adds	r7, #36	; 0x24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40023800 	.word	0x40023800
 8001b38:	40013800 	.word	0x40013800
 8001b3c:	40020000 	.word	0x40020000
 8001b40:	40020400 	.word	0x40020400
 8001b44:	40020800 	.word	0x40020800
 8001b48:	40020c00 	.word	0x40020c00
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40013c00 	.word	0x40013c00

08001b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	807b      	strh	r3, [r7, #2]
 8001b60:	4613      	mov	r3, r2
 8001b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b64:	787b      	ldrb	r3, [r7, #1]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b6a:	887a      	ldrh	r2, [r7, #2]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b70:	e003      	b.n	8001b7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b72:	887b      	ldrh	r3, [r7, #2]
 8001b74:	041a      	lsls	r2, r3, #16
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	619a      	str	r2, [r3, #24]
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b085      	sub	sp, #20
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
 8001b8e:	460b      	mov	r3, r1
 8001b90:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b98:	887a      	ldrh	r2, [r7, #2]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	041a      	lsls	r2, r3, #16
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	43d9      	mvns	r1, r3
 8001ba4:	887b      	ldrh	r3, [r7, #2]
 8001ba6:	400b      	ands	r3, r1
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	619a      	str	r2, [r3, #24]
}
 8001bae:	bf00      	nop
 8001bb0:	3714      	adds	r7, #20
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
	...

08001bbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e267      	b.n	800209e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d075      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bda:	4b88      	ldr	r3, [pc, #544]	; (8001dfc <HAL_RCC_OscConfig+0x240>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 030c 	and.w	r3, r3, #12
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	d00c      	beq.n	8001c00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001be6:	4b85      	ldr	r3, [pc, #532]	; (8001dfc <HAL_RCC_OscConfig+0x240>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bee:	2b08      	cmp	r3, #8
 8001bf0:	d112      	bne.n	8001c18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bf2:	4b82      	ldr	r3, [pc, #520]	; (8001dfc <HAL_RCC_OscConfig+0x240>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bfe:	d10b      	bne.n	8001c18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c00:	4b7e      	ldr	r3, [pc, #504]	; (8001dfc <HAL_RCC_OscConfig+0x240>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d05b      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x108>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d157      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e242      	b.n	800209e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c20:	d106      	bne.n	8001c30 <HAL_RCC_OscConfig+0x74>
 8001c22:	4b76      	ldr	r3, [pc, #472]	; (8001dfc <HAL_RCC_OscConfig+0x240>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a75      	ldr	r2, [pc, #468]	; (8001dfc <HAL_RCC_OscConfig+0x240>)
 8001c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c2c:	6013      	str	r3, [r2, #0]
 8001c2e:	e01d      	b.n	8001c6c <HAL_RCC_OscConfig+0xb0>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c38:	d10c      	bne.n	8001c54 <HAL_RCC_OscConfig+0x98>
 8001c3a:	4b70      	ldr	r3, [pc, #448]	; (8001dfc <HAL_RCC_OscConfig+0x240>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a6f      	ldr	r2, [pc, #444]	; (8001dfc <HAL_RCC_OscConfig+0x240>)
 8001c40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	4b6d      	ldr	r3, [pc, #436]	; (8001dfc <HAL_RCC_OscConfig+0x240>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a6c      	ldr	r2, [pc, #432]	; (8001dfc <HAL_RCC_OscConfig+0x240>)
 8001c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	e00b      	b.n	8001c6c <HAL_RCC_OscConfig+0xb0>
 8001c54:	4b69      	ldr	r3, [pc, #420]	; (8001dfc <HAL_RCC_OscConfig+0x240>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a68      	ldr	r2, [pc, #416]	; (8001dfc <HAL_RCC_OscConfig+0x240>)
 8001c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c5e:	6013      	str	r3, [r2, #0]
 8001c60:	4b66      	ldr	r3, [pc, #408]	; (8001dfc <HAL_RCC_OscConfig+0x240>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a65      	ldr	r2, [pc, #404]	; (8001dfc <HAL_RCC_OscConfig+0x240>)
 8001c66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d013      	beq.n	8001c9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c74:	f7ff fcd4 	bl	8001620 <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c7c:	f7ff fcd0 	bl	8001620 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b64      	cmp	r3, #100	; 0x64
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e207      	b.n	800209e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8e:	4b5b      	ldr	r3, [pc, #364]	; (8001dfc <HAL_RCC_OscConfig+0x240>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0f0      	beq.n	8001c7c <HAL_RCC_OscConfig+0xc0>
 8001c9a:	e014      	b.n	8001cc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9c:	f7ff fcc0 	bl	8001620 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ca4:	f7ff fcbc 	bl	8001620 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b64      	cmp	r3, #100	; 0x64
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e1f3      	b.n	800209e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cb6:	4b51      	ldr	r3, [pc, #324]	; (8001dfc <HAL_RCC_OscConfig+0x240>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f0      	bne.n	8001ca4 <HAL_RCC_OscConfig+0xe8>
 8001cc2:	e000      	b.n	8001cc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d063      	beq.n	8001d9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cd2:	4b4a      	ldr	r3, [pc, #296]	; (8001dfc <HAL_RCC_OscConfig+0x240>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f003 030c 	and.w	r3, r3, #12
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00b      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cde:	4b47      	ldr	r3, [pc, #284]	; (8001dfc <HAL_RCC_OscConfig+0x240>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ce6:	2b08      	cmp	r3, #8
 8001ce8:	d11c      	bne.n	8001d24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cea:	4b44      	ldr	r3, [pc, #272]	; (8001dfc <HAL_RCC_OscConfig+0x240>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d116      	bne.n	8001d24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cf6:	4b41      	ldr	r3, [pc, #260]	; (8001dfc <HAL_RCC_OscConfig+0x240>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d005      	beq.n	8001d0e <HAL_RCC_OscConfig+0x152>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d001      	beq.n	8001d0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e1c7      	b.n	800209e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d0e:	4b3b      	ldr	r3, [pc, #236]	; (8001dfc <HAL_RCC_OscConfig+0x240>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	4937      	ldr	r1, [pc, #220]	; (8001dfc <HAL_RCC_OscConfig+0x240>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d22:	e03a      	b.n	8001d9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d020      	beq.n	8001d6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d2c:	4b34      	ldr	r3, [pc, #208]	; (8001e00 <HAL_RCC_OscConfig+0x244>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d32:	f7ff fc75 	bl	8001620 <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d3a:	f7ff fc71 	bl	8001620 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e1a8      	b.n	800209e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d4c:	4b2b      	ldr	r3, [pc, #172]	; (8001dfc <HAL_RCC_OscConfig+0x240>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0f0      	beq.n	8001d3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d58:	4b28      	ldr	r3, [pc, #160]	; (8001dfc <HAL_RCC_OscConfig+0x240>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	4925      	ldr	r1, [pc, #148]	; (8001dfc <HAL_RCC_OscConfig+0x240>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	600b      	str	r3, [r1, #0]
 8001d6c:	e015      	b.n	8001d9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d6e:	4b24      	ldr	r3, [pc, #144]	; (8001e00 <HAL_RCC_OscConfig+0x244>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d74:	f7ff fc54 	bl	8001620 <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d7c:	f7ff fc50 	bl	8001620 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e187      	b.n	800209e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d8e:	4b1b      	ldr	r3, [pc, #108]	; (8001dfc <HAL_RCC_OscConfig+0x240>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1f0      	bne.n	8001d7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d036      	beq.n	8001e14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d016      	beq.n	8001ddc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dae:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <HAL_RCC_OscConfig+0x248>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db4:	f7ff fc34 	bl	8001620 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dbc:	f7ff fc30 	bl	8001620 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e167      	b.n	800209e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dce:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <HAL_RCC_OscConfig+0x240>)
 8001dd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d0f0      	beq.n	8001dbc <HAL_RCC_OscConfig+0x200>
 8001dda:	e01b      	b.n	8001e14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ddc:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <HAL_RCC_OscConfig+0x248>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de2:	f7ff fc1d 	bl	8001620 <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001de8:	e00e      	b.n	8001e08 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dea:	f7ff fc19 	bl	8001620 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d907      	bls.n	8001e08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e150      	b.n	800209e <HAL_RCC_OscConfig+0x4e2>
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	42470000 	.word	0x42470000
 8001e04:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e08:	4b88      	ldr	r3, [pc, #544]	; (800202c <HAL_RCC_OscConfig+0x470>)
 8001e0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d1ea      	bne.n	8001dea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 8097 	beq.w	8001f50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e22:	2300      	movs	r3, #0
 8001e24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e26:	4b81      	ldr	r3, [pc, #516]	; (800202c <HAL_RCC_OscConfig+0x470>)
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10f      	bne.n	8001e52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	4b7d      	ldr	r3, [pc, #500]	; (800202c <HAL_RCC_OscConfig+0x470>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	4a7c      	ldr	r2, [pc, #496]	; (800202c <HAL_RCC_OscConfig+0x470>)
 8001e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e40:	6413      	str	r3, [r2, #64]	; 0x40
 8001e42:	4b7a      	ldr	r3, [pc, #488]	; (800202c <HAL_RCC_OscConfig+0x470>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4a:	60bb      	str	r3, [r7, #8]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e52:	4b77      	ldr	r3, [pc, #476]	; (8002030 <HAL_RCC_OscConfig+0x474>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d118      	bne.n	8001e90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e5e:	4b74      	ldr	r3, [pc, #464]	; (8002030 <HAL_RCC_OscConfig+0x474>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a73      	ldr	r2, [pc, #460]	; (8002030 <HAL_RCC_OscConfig+0x474>)
 8001e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e6a:	f7ff fbd9 	bl	8001620 <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e72:	f7ff fbd5 	bl	8001620 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e10c      	b.n	800209e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e84:	4b6a      	ldr	r3, [pc, #424]	; (8002030 <HAL_RCC_OscConfig+0x474>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0f0      	beq.n	8001e72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d106      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x2ea>
 8001e98:	4b64      	ldr	r3, [pc, #400]	; (800202c <HAL_RCC_OscConfig+0x470>)
 8001e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e9c:	4a63      	ldr	r2, [pc, #396]	; (800202c <HAL_RCC_OscConfig+0x470>)
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ea4:	e01c      	b.n	8001ee0 <HAL_RCC_OscConfig+0x324>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	2b05      	cmp	r3, #5
 8001eac:	d10c      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x30c>
 8001eae:	4b5f      	ldr	r3, [pc, #380]	; (800202c <HAL_RCC_OscConfig+0x470>)
 8001eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb2:	4a5e      	ldr	r2, [pc, #376]	; (800202c <HAL_RCC_OscConfig+0x470>)
 8001eb4:	f043 0304 	orr.w	r3, r3, #4
 8001eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8001eba:	4b5c      	ldr	r3, [pc, #368]	; (800202c <HAL_RCC_OscConfig+0x470>)
 8001ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ebe:	4a5b      	ldr	r2, [pc, #364]	; (800202c <HAL_RCC_OscConfig+0x470>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ec6:	e00b      	b.n	8001ee0 <HAL_RCC_OscConfig+0x324>
 8001ec8:	4b58      	ldr	r3, [pc, #352]	; (800202c <HAL_RCC_OscConfig+0x470>)
 8001eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ecc:	4a57      	ldr	r2, [pc, #348]	; (800202c <HAL_RCC_OscConfig+0x470>)
 8001ece:	f023 0301 	bic.w	r3, r3, #1
 8001ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ed4:	4b55      	ldr	r3, [pc, #340]	; (800202c <HAL_RCC_OscConfig+0x470>)
 8001ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed8:	4a54      	ldr	r2, [pc, #336]	; (800202c <HAL_RCC_OscConfig+0x470>)
 8001eda:	f023 0304 	bic.w	r3, r3, #4
 8001ede:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d015      	beq.n	8001f14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee8:	f7ff fb9a 	bl	8001620 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eee:	e00a      	b.n	8001f06 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ef0:	f7ff fb96 	bl	8001620 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e0cb      	b.n	800209e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f06:	4b49      	ldr	r3, [pc, #292]	; (800202c <HAL_RCC_OscConfig+0x470>)
 8001f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d0ee      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x334>
 8001f12:	e014      	b.n	8001f3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f14:	f7ff fb84 	bl	8001620 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f1a:	e00a      	b.n	8001f32 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f1c:	f7ff fb80 	bl	8001620 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e0b5      	b.n	800209e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f32:	4b3e      	ldr	r3, [pc, #248]	; (800202c <HAL_RCC_OscConfig+0x470>)
 8001f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1ee      	bne.n	8001f1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f3e:	7dfb      	ldrb	r3, [r7, #23]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d105      	bne.n	8001f50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f44:	4b39      	ldr	r3, [pc, #228]	; (800202c <HAL_RCC_OscConfig+0x470>)
 8001f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f48:	4a38      	ldr	r2, [pc, #224]	; (800202c <HAL_RCC_OscConfig+0x470>)
 8001f4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f4e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 80a1 	beq.w	800209c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f5a:	4b34      	ldr	r3, [pc, #208]	; (800202c <HAL_RCC_OscConfig+0x470>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 030c 	and.w	r3, r3, #12
 8001f62:	2b08      	cmp	r3, #8
 8001f64:	d05c      	beq.n	8002020 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d141      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f6e:	4b31      	ldr	r3, [pc, #196]	; (8002034 <HAL_RCC_OscConfig+0x478>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f74:	f7ff fb54 	bl	8001620 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f7c:	f7ff fb50 	bl	8001620 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e087      	b.n	800209e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f8e:	4b27      	ldr	r3, [pc, #156]	; (800202c <HAL_RCC_OscConfig+0x470>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f0      	bne.n	8001f7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69da      	ldr	r2, [r3, #28]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	431a      	orrs	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa8:	019b      	lsls	r3, r3, #6
 8001faa:	431a      	orrs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb0:	085b      	lsrs	r3, r3, #1
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	041b      	lsls	r3, r3, #16
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fbc:	061b      	lsls	r3, r3, #24
 8001fbe:	491b      	ldr	r1, [pc, #108]	; (800202c <HAL_RCC_OscConfig+0x470>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fc4:	4b1b      	ldr	r3, [pc, #108]	; (8002034 <HAL_RCC_OscConfig+0x478>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fca:	f7ff fb29 	bl	8001620 <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fd2:	f7ff fb25 	bl	8001620 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e05c      	b.n	800209e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fe4:	4b11      	ldr	r3, [pc, #68]	; (800202c <HAL_RCC_OscConfig+0x470>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0f0      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x416>
 8001ff0:	e054      	b.n	800209c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff2:	4b10      	ldr	r3, [pc, #64]	; (8002034 <HAL_RCC_OscConfig+0x478>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff8:	f7ff fb12 	bl	8001620 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002000:	f7ff fb0e 	bl	8001620 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e045      	b.n	800209e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002012:	4b06      	ldr	r3, [pc, #24]	; (800202c <HAL_RCC_OscConfig+0x470>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f0      	bne.n	8002000 <HAL_RCC_OscConfig+0x444>
 800201e:	e03d      	b.n	800209c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d107      	bne.n	8002038 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e038      	b.n	800209e <HAL_RCC_OscConfig+0x4e2>
 800202c:	40023800 	.word	0x40023800
 8002030:	40007000 	.word	0x40007000
 8002034:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002038:	4b1b      	ldr	r3, [pc, #108]	; (80020a8 <HAL_RCC_OscConfig+0x4ec>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d028      	beq.n	8002098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002050:	429a      	cmp	r2, r3
 8002052:	d121      	bne.n	8002098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800205e:	429a      	cmp	r2, r3
 8002060:	d11a      	bne.n	8002098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002068:	4013      	ands	r3, r2
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800206e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002070:	4293      	cmp	r3, r2
 8002072:	d111      	bne.n	8002098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207e:	085b      	lsrs	r3, r3, #1
 8002080:	3b01      	subs	r3, #1
 8002082:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002084:	429a      	cmp	r2, r3
 8002086:	d107      	bne.n	8002098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002092:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002094:	429a      	cmp	r2, r3
 8002096:	d001      	beq.n	800209c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e000      	b.n	800209e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40023800 	.word	0x40023800

080020ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e0cc      	b.n	800225a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020c0:	4b68      	ldr	r3, [pc, #416]	; (8002264 <HAL_RCC_ClockConfig+0x1b8>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d90c      	bls.n	80020e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ce:	4b65      	ldr	r3, [pc, #404]	; (8002264 <HAL_RCC_ClockConfig+0x1b8>)
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d6:	4b63      	ldr	r3, [pc, #396]	; (8002264 <HAL_RCC_ClockConfig+0x1b8>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d001      	beq.n	80020e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e0b8      	b.n	800225a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d020      	beq.n	8002136 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d005      	beq.n	800210c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002100:	4b59      	ldr	r3, [pc, #356]	; (8002268 <HAL_RCC_ClockConfig+0x1bc>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	4a58      	ldr	r2, [pc, #352]	; (8002268 <HAL_RCC_ClockConfig+0x1bc>)
 8002106:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800210a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0308 	and.w	r3, r3, #8
 8002114:	2b00      	cmp	r3, #0
 8002116:	d005      	beq.n	8002124 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002118:	4b53      	ldr	r3, [pc, #332]	; (8002268 <HAL_RCC_ClockConfig+0x1bc>)
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	4a52      	ldr	r2, [pc, #328]	; (8002268 <HAL_RCC_ClockConfig+0x1bc>)
 800211e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002122:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002124:	4b50      	ldr	r3, [pc, #320]	; (8002268 <HAL_RCC_ClockConfig+0x1bc>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	494d      	ldr	r1, [pc, #308]	; (8002268 <HAL_RCC_ClockConfig+0x1bc>)
 8002132:	4313      	orrs	r3, r2
 8002134:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	2b00      	cmp	r3, #0
 8002140:	d044      	beq.n	80021cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d107      	bne.n	800215a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800214a:	4b47      	ldr	r3, [pc, #284]	; (8002268 <HAL_RCC_ClockConfig+0x1bc>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d119      	bne.n	800218a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e07f      	b.n	800225a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b02      	cmp	r3, #2
 8002160:	d003      	beq.n	800216a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002166:	2b03      	cmp	r3, #3
 8002168:	d107      	bne.n	800217a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800216a:	4b3f      	ldr	r3, [pc, #252]	; (8002268 <HAL_RCC_ClockConfig+0x1bc>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d109      	bne.n	800218a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e06f      	b.n	800225a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800217a:	4b3b      	ldr	r3, [pc, #236]	; (8002268 <HAL_RCC_ClockConfig+0x1bc>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e067      	b.n	800225a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800218a:	4b37      	ldr	r3, [pc, #220]	; (8002268 <HAL_RCC_ClockConfig+0x1bc>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f023 0203 	bic.w	r2, r3, #3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	4934      	ldr	r1, [pc, #208]	; (8002268 <HAL_RCC_ClockConfig+0x1bc>)
 8002198:	4313      	orrs	r3, r2
 800219a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800219c:	f7ff fa40 	bl	8001620 <HAL_GetTick>
 80021a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a2:	e00a      	b.n	80021ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a4:	f7ff fa3c 	bl	8001620 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e04f      	b.n	800225a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ba:	4b2b      	ldr	r3, [pc, #172]	; (8002268 <HAL_RCC_ClockConfig+0x1bc>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 020c 	and.w	r2, r3, #12
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d1eb      	bne.n	80021a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021cc:	4b25      	ldr	r3, [pc, #148]	; (8002264 <HAL_RCC_ClockConfig+0x1b8>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d20c      	bcs.n	80021f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021da:	4b22      	ldr	r3, [pc, #136]	; (8002264 <HAL_RCC_ClockConfig+0x1b8>)
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e2:	4b20      	ldr	r3, [pc, #128]	; (8002264 <HAL_RCC_ClockConfig+0x1b8>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d001      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e032      	b.n	800225a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d008      	beq.n	8002212 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002200:	4b19      	ldr	r3, [pc, #100]	; (8002268 <HAL_RCC_ClockConfig+0x1bc>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	4916      	ldr	r1, [pc, #88]	; (8002268 <HAL_RCC_ClockConfig+0x1bc>)
 800220e:	4313      	orrs	r3, r2
 8002210:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0308 	and.w	r3, r3, #8
 800221a:	2b00      	cmp	r3, #0
 800221c:	d009      	beq.n	8002232 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800221e:	4b12      	ldr	r3, [pc, #72]	; (8002268 <HAL_RCC_ClockConfig+0x1bc>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	490e      	ldr	r1, [pc, #56]	; (8002268 <HAL_RCC_ClockConfig+0x1bc>)
 800222e:	4313      	orrs	r3, r2
 8002230:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002232:	f000 f821 	bl	8002278 <HAL_RCC_GetSysClockFreq>
 8002236:	4602      	mov	r2, r0
 8002238:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <HAL_RCC_ClockConfig+0x1bc>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	091b      	lsrs	r3, r3, #4
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	490a      	ldr	r1, [pc, #40]	; (800226c <HAL_RCC_ClockConfig+0x1c0>)
 8002244:	5ccb      	ldrb	r3, [r1, r3]
 8002246:	fa22 f303 	lsr.w	r3, r2, r3
 800224a:	4a09      	ldr	r2, [pc, #36]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 800224c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800224e:	4b09      	ldr	r3, [pc, #36]	; (8002274 <HAL_RCC_ClockConfig+0x1c8>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff f9a0 	bl	8001598 <HAL_InitTick>

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40023c00 	.word	0x40023c00
 8002268:	40023800 	.word	0x40023800
 800226c:	08003a4c 	.word	0x08003a4c
 8002270:	20000000 	.word	0x20000000
 8002274:	20000004 	.word	0x20000004

08002278 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002278:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800227c:	b090      	sub	sp, #64	; 0x40
 800227e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002280:	2300      	movs	r3, #0
 8002282:	637b      	str	r3, [r7, #52]	; 0x34
 8002284:	2300      	movs	r3, #0
 8002286:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002288:	2300      	movs	r3, #0
 800228a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800228c:	2300      	movs	r3, #0
 800228e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002290:	4b59      	ldr	r3, [pc, #356]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f003 030c 	and.w	r3, r3, #12
 8002298:	2b08      	cmp	r3, #8
 800229a:	d00d      	beq.n	80022b8 <HAL_RCC_GetSysClockFreq+0x40>
 800229c:	2b08      	cmp	r3, #8
 800229e:	f200 80a1 	bhi.w	80023e4 <HAL_RCC_GetSysClockFreq+0x16c>
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d002      	beq.n	80022ac <HAL_RCC_GetSysClockFreq+0x34>
 80022a6:	2b04      	cmp	r3, #4
 80022a8:	d003      	beq.n	80022b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80022aa:	e09b      	b.n	80023e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022ac:	4b53      	ldr	r3, [pc, #332]	; (80023fc <HAL_RCC_GetSysClockFreq+0x184>)
 80022ae:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80022b0:	e09b      	b.n	80023ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022b2:	4b53      	ldr	r3, [pc, #332]	; (8002400 <HAL_RCC_GetSysClockFreq+0x188>)
 80022b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80022b6:	e098      	b.n	80023ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022b8:	4b4f      	ldr	r3, [pc, #316]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022c0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022c2:	4b4d      	ldr	r3, [pc, #308]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d028      	beq.n	8002320 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022ce:	4b4a      	ldr	r3, [pc, #296]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	099b      	lsrs	r3, r3, #6
 80022d4:	2200      	movs	r2, #0
 80022d6:	623b      	str	r3, [r7, #32]
 80022d8:	627a      	str	r2, [r7, #36]	; 0x24
 80022da:	6a3b      	ldr	r3, [r7, #32]
 80022dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80022e0:	2100      	movs	r1, #0
 80022e2:	4b47      	ldr	r3, [pc, #284]	; (8002400 <HAL_RCC_GetSysClockFreq+0x188>)
 80022e4:	fb03 f201 	mul.w	r2, r3, r1
 80022e8:	2300      	movs	r3, #0
 80022ea:	fb00 f303 	mul.w	r3, r0, r3
 80022ee:	4413      	add	r3, r2
 80022f0:	4a43      	ldr	r2, [pc, #268]	; (8002400 <HAL_RCC_GetSysClockFreq+0x188>)
 80022f2:	fba0 1202 	umull	r1, r2, r0, r2
 80022f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022f8:	460a      	mov	r2, r1
 80022fa:	62ba      	str	r2, [r7, #40]	; 0x28
 80022fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022fe:	4413      	add	r3, r2
 8002300:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002304:	2200      	movs	r2, #0
 8002306:	61bb      	str	r3, [r7, #24]
 8002308:	61fa      	str	r2, [r7, #28]
 800230a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800230e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002312:	f7fd ffb5 	bl	8000280 <__aeabi_uldivmod>
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	4613      	mov	r3, r2
 800231c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800231e:	e053      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002320:	4b35      	ldr	r3, [pc, #212]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	099b      	lsrs	r3, r3, #6
 8002326:	2200      	movs	r2, #0
 8002328:	613b      	str	r3, [r7, #16]
 800232a:	617a      	str	r2, [r7, #20]
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002332:	f04f 0b00 	mov.w	fp, #0
 8002336:	4652      	mov	r2, sl
 8002338:	465b      	mov	r3, fp
 800233a:	f04f 0000 	mov.w	r0, #0
 800233e:	f04f 0100 	mov.w	r1, #0
 8002342:	0159      	lsls	r1, r3, #5
 8002344:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002348:	0150      	lsls	r0, r2, #5
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	ebb2 080a 	subs.w	r8, r2, sl
 8002352:	eb63 090b 	sbc.w	r9, r3, fp
 8002356:	f04f 0200 	mov.w	r2, #0
 800235a:	f04f 0300 	mov.w	r3, #0
 800235e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002362:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002366:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800236a:	ebb2 0408 	subs.w	r4, r2, r8
 800236e:	eb63 0509 	sbc.w	r5, r3, r9
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	f04f 0300 	mov.w	r3, #0
 800237a:	00eb      	lsls	r3, r5, #3
 800237c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002380:	00e2      	lsls	r2, r4, #3
 8002382:	4614      	mov	r4, r2
 8002384:	461d      	mov	r5, r3
 8002386:	eb14 030a 	adds.w	r3, r4, sl
 800238a:	603b      	str	r3, [r7, #0]
 800238c:	eb45 030b 	adc.w	r3, r5, fp
 8002390:	607b      	str	r3, [r7, #4]
 8002392:	f04f 0200 	mov.w	r2, #0
 8002396:	f04f 0300 	mov.w	r3, #0
 800239a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800239e:	4629      	mov	r1, r5
 80023a0:	028b      	lsls	r3, r1, #10
 80023a2:	4621      	mov	r1, r4
 80023a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023a8:	4621      	mov	r1, r4
 80023aa:	028a      	lsls	r2, r1, #10
 80023ac:	4610      	mov	r0, r2
 80023ae:	4619      	mov	r1, r3
 80023b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023b2:	2200      	movs	r2, #0
 80023b4:	60bb      	str	r3, [r7, #8]
 80023b6:	60fa      	str	r2, [r7, #12]
 80023b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023bc:	f7fd ff60 	bl	8000280 <__aeabi_uldivmod>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4613      	mov	r3, r2
 80023c6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023c8:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	0c1b      	lsrs	r3, r3, #16
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	3301      	adds	r3, #1
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80023d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80023e2:	e002      	b.n	80023ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023e4:	4b05      	ldr	r3, [pc, #20]	; (80023fc <HAL_RCC_GetSysClockFreq+0x184>)
 80023e6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80023e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3740      	adds	r7, #64	; 0x40
 80023f0:	46bd      	mov	sp, r7
 80023f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023f6:	bf00      	nop
 80023f8:	40023800 	.word	0x40023800
 80023fc:	00f42400 	.word	0x00f42400
 8002400:	017d7840 	.word	0x017d7840

08002404 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e07b      	b.n	800250e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241a:	2b00      	cmp	r3, #0
 800241c:	d108      	bne.n	8002430 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002426:	d009      	beq.n	800243c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	61da      	str	r2, [r3, #28]
 800242e:	e005      	b.n	800243c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d106      	bne.n	800245c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7fe ff2a 	bl	80012b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2202      	movs	r2, #2
 8002460:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002472:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002484:	431a      	orrs	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800248e:	431a      	orrs	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	431a      	orrs	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	431a      	orrs	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024ac:	431a      	orrs	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024b6:	431a      	orrs	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c0:	ea42 0103 	orr.w	r1, r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	0c1b      	lsrs	r3, r3, #16
 80024da:	f003 0104 	and.w	r1, r3, #4
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e2:	f003 0210 	and.w	r2, r3, #16
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	69da      	ldr	r2, [r3, #28]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b08c      	sub	sp, #48	; 0x30
 800251a:	af00      	add	r7, sp, #0
 800251c:	60f8      	str	r0, [r7, #12]
 800251e:	60b9      	str	r1, [r7, #8]
 8002520:	607a      	str	r2, [r7, #4]
 8002522:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002524:	2301      	movs	r3, #1
 8002526:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002528:	2300      	movs	r3, #0
 800252a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002534:	2b01      	cmp	r3, #1
 8002536:	d101      	bne.n	800253c <HAL_SPI_TransmitReceive+0x26>
 8002538:	2302      	movs	r3, #2
 800253a:	e198      	b.n	800286e <HAL_SPI_TransmitReceive+0x358>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002544:	f7ff f86c 	bl	8001620 <HAL_GetTick>
 8002548:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002550:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800255a:	887b      	ldrh	r3, [r7, #2]
 800255c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800255e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002562:	2b01      	cmp	r3, #1
 8002564:	d00f      	beq.n	8002586 <HAL_SPI_TransmitReceive+0x70>
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800256c:	d107      	bne.n	800257e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d103      	bne.n	800257e <HAL_SPI_TransmitReceive+0x68>
 8002576:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800257a:	2b04      	cmp	r3, #4
 800257c:	d003      	beq.n	8002586 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800257e:	2302      	movs	r3, #2
 8002580:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002584:	e16d      	b.n	8002862 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d005      	beq.n	8002598 <HAL_SPI_TransmitReceive+0x82>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d002      	beq.n	8002598 <HAL_SPI_TransmitReceive+0x82>
 8002592:	887b      	ldrh	r3, [r7, #2]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d103      	bne.n	80025a0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800259e:	e160      	b.n	8002862 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b04      	cmp	r3, #4
 80025aa:	d003      	beq.n	80025b4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2205      	movs	r2, #5
 80025b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	887a      	ldrh	r2, [r7, #2]
 80025c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	887a      	ldrh	r2, [r7, #2]
 80025ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	887a      	ldrh	r2, [r7, #2]
 80025d6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	887a      	ldrh	r2, [r7, #2]
 80025dc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f4:	2b40      	cmp	r3, #64	; 0x40
 80025f6:	d007      	beq.n	8002608 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002606:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002610:	d17c      	bne.n	800270c <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d002      	beq.n	8002620 <HAL_SPI_TransmitReceive+0x10a>
 800261a:	8b7b      	ldrh	r3, [r7, #26]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d16a      	bne.n	80026f6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002624:	881a      	ldrh	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002630:	1c9a      	adds	r2, r3, #2
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800263a:	b29b      	uxth	r3, r3
 800263c:	3b01      	subs	r3, #1
 800263e:	b29a      	uxth	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002644:	e057      	b.n	80026f6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b02      	cmp	r3, #2
 8002652:	d11b      	bne.n	800268c <HAL_SPI_TransmitReceive+0x176>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002658:	b29b      	uxth	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d016      	beq.n	800268c <HAL_SPI_TransmitReceive+0x176>
 800265e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002660:	2b01      	cmp	r3, #1
 8002662:	d113      	bne.n	800268c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002668:	881a      	ldrh	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002674:	1c9a      	adds	r2, r3, #2
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800267e:	b29b      	uxth	r3, r3
 8002680:	3b01      	subs	r3, #1
 8002682:	b29a      	uxth	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002688:	2300      	movs	r3, #0
 800268a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b01      	cmp	r3, #1
 8002698:	d119      	bne.n	80026ce <HAL_SPI_TransmitReceive+0x1b8>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800269e:	b29b      	uxth	r3, r3
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d014      	beq.n	80026ce <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ae:	b292      	uxth	r2, r2
 80026b0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b6:	1c9a      	adds	r2, r3, #2
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	3b01      	subs	r3, #1
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80026ca:	2301      	movs	r3, #1
 80026cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80026ce:	f7fe ffa7 	bl	8001620 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026da:	429a      	cmp	r2, r3
 80026dc:	d80b      	bhi.n	80026f6 <HAL_SPI_TransmitReceive+0x1e0>
 80026de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e4:	d007      	beq.n	80026f6 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80026f4:	e0b5      	b.n	8002862 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1a2      	bne.n	8002646 <HAL_SPI_TransmitReceive+0x130>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002704:	b29b      	uxth	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d19d      	bne.n	8002646 <HAL_SPI_TransmitReceive+0x130>
 800270a:	e080      	b.n	800280e <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d002      	beq.n	800271a <HAL_SPI_TransmitReceive+0x204>
 8002714:	8b7b      	ldrh	r3, [r7, #26]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d16f      	bne.n	80027fa <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	330c      	adds	r3, #12
 8002724:	7812      	ldrb	r2, [r2, #0]
 8002726:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272c:	1c5a      	adds	r2, r3, #1
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002736:	b29b      	uxth	r3, r3
 8002738:	3b01      	subs	r3, #1
 800273a:	b29a      	uxth	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002740:	e05b      	b.n	80027fa <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b02      	cmp	r3, #2
 800274e:	d11c      	bne.n	800278a <HAL_SPI_TransmitReceive+0x274>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002754:	b29b      	uxth	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d017      	beq.n	800278a <HAL_SPI_TransmitReceive+0x274>
 800275a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275c:	2b01      	cmp	r3, #1
 800275e:	d114      	bne.n	800278a <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	330c      	adds	r3, #12
 800276a:	7812      	ldrb	r2, [r2, #0]
 800276c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	1c5a      	adds	r2, r3, #1
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800277c:	b29b      	uxth	r3, r3
 800277e:	3b01      	subs	r3, #1
 8002780:	b29a      	uxth	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002786:	2300      	movs	r3, #0
 8002788:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b01      	cmp	r3, #1
 8002796:	d119      	bne.n	80027cc <HAL_SPI_TransmitReceive+0x2b6>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800279c:	b29b      	uxth	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d014      	beq.n	80027cc <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b4:	1c5a      	adds	r2, r3, #1
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027be:	b29b      	uxth	r3, r3
 80027c0:	3b01      	subs	r3, #1
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027c8:	2301      	movs	r3, #1
 80027ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80027cc:	f7fe ff28 	bl	8001620 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027d8:	429a      	cmp	r2, r3
 80027da:	d803      	bhi.n	80027e4 <HAL_SPI_TransmitReceive+0x2ce>
 80027dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e2:	d102      	bne.n	80027ea <HAL_SPI_TransmitReceive+0x2d4>
 80027e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d107      	bne.n	80027fa <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80027f8:	e033      	b.n	8002862 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027fe:	b29b      	uxth	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	d19e      	bne.n	8002742 <HAL_SPI_TransmitReceive+0x22c>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002808:	b29b      	uxth	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d199      	bne.n	8002742 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800280e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002810:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f000 f8b8 	bl	8002988 <SPI_EndRxTxTransaction>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d006      	beq.n	800282c <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2220      	movs	r2, #32
 8002828:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800282a:	e01a      	b.n	8002862 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10a      	bne.n	800284a <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002834:	2300      	movs	r3, #0
 8002836:	617b      	str	r3, [r7, #20]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	617b      	str	r3, [r7, #20]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	617b      	str	r3, [r7, #20]
 8002848:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002858:	e003      	b.n	8002862 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800286a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800286e:	4618      	mov	r0, r3
 8002870:	3730      	adds	r7, #48	; 0x30
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b088      	sub	sp, #32
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	603b      	str	r3, [r7, #0]
 8002884:	4613      	mov	r3, r2
 8002886:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002888:	f7fe feca 	bl	8001620 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002890:	1a9b      	subs	r3, r3, r2
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	4413      	add	r3, r2
 8002896:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002898:	f7fe fec2 	bl	8001620 <HAL_GetTick>
 800289c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800289e:	4b39      	ldr	r3, [pc, #228]	; (8002984 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	015b      	lsls	r3, r3, #5
 80028a4:	0d1b      	lsrs	r3, r3, #20
 80028a6:	69fa      	ldr	r2, [r7, #28]
 80028a8:	fb02 f303 	mul.w	r3, r2, r3
 80028ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028ae:	e054      	b.n	800295a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b6:	d050      	beq.n	800295a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028b8:	f7fe feb2 	bl	8001620 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	69fa      	ldr	r2, [r7, #28]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d902      	bls.n	80028ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d13d      	bne.n	800294a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80028dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028e6:	d111      	bne.n	800290c <SPI_WaitFlagStateUntilTimeout+0x94>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028f0:	d004      	beq.n	80028fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028fa:	d107      	bne.n	800290c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800290a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002910:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002914:	d10f      	bne.n	8002936 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002934:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e017      	b.n	800297a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002950:	2300      	movs	r3, #0
 8002952:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	3b01      	subs	r3, #1
 8002958:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	4013      	ands	r3, r2
 8002964:	68ba      	ldr	r2, [r7, #8]
 8002966:	429a      	cmp	r2, r3
 8002968:	bf0c      	ite	eq
 800296a:	2301      	moveq	r3, #1
 800296c:	2300      	movne	r3, #0
 800296e:	b2db      	uxtb	r3, r3
 8002970:	461a      	mov	r2, r3
 8002972:	79fb      	ldrb	r3, [r7, #7]
 8002974:	429a      	cmp	r2, r3
 8002976:	d19b      	bne.n	80028b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3720      	adds	r7, #32
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	20000000 	.word	0x20000000

08002988 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b088      	sub	sp, #32
 800298c:	af02      	add	r7, sp, #8
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	2201      	movs	r2, #1
 800299c:	2102      	movs	r1, #2
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f7ff ff6a 	bl	8002878 <SPI_WaitFlagStateUntilTimeout>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d007      	beq.n	80029ba <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ae:	f043 0220 	orr.w	r2, r3, #32
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e032      	b.n	8002a20 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80029ba:	4b1b      	ldr	r3, [pc, #108]	; (8002a28 <SPI_EndRxTxTransaction+0xa0>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a1b      	ldr	r2, [pc, #108]	; (8002a2c <SPI_EndRxTxTransaction+0xa4>)
 80029c0:	fba2 2303 	umull	r2, r3, r2, r3
 80029c4:	0d5b      	lsrs	r3, r3, #21
 80029c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029ca:	fb02 f303 	mul.w	r3, r2, r3
 80029ce:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029d8:	d112      	bne.n	8002a00 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	2200      	movs	r2, #0
 80029e2:	2180      	movs	r1, #128	; 0x80
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f7ff ff47 	bl	8002878 <SPI_WaitFlagStateUntilTimeout>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d016      	beq.n	8002a1e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f4:	f043 0220 	orr.w	r2, r3, #32
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e00f      	b.n	8002a20 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00a      	beq.n	8002a1c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a16:	2b80      	cmp	r3, #128	; 0x80
 8002a18:	d0f2      	beq.n	8002a00 <SPI_EndRxTxTransaction+0x78>
 8002a1a:	e000      	b.n	8002a1e <SPI_EndRxTxTransaction+0x96>
        break;
 8002a1c:	bf00      	nop
  }

  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3718      	adds	r7, #24
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	20000000 	.word	0x20000000
 8002a2c:	165e9f81 	.word	0x165e9f81

08002a30 <std>:
 8002a30:	2300      	movs	r3, #0
 8002a32:	b510      	push	{r4, lr}
 8002a34:	4604      	mov	r4, r0
 8002a36:	e9c0 3300 	strd	r3, r3, [r0]
 8002a3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002a3e:	6083      	str	r3, [r0, #8]
 8002a40:	8181      	strh	r1, [r0, #12]
 8002a42:	6643      	str	r3, [r0, #100]	; 0x64
 8002a44:	81c2      	strh	r2, [r0, #14]
 8002a46:	6183      	str	r3, [r0, #24]
 8002a48:	4619      	mov	r1, r3
 8002a4a:	2208      	movs	r2, #8
 8002a4c:	305c      	adds	r0, #92	; 0x5c
 8002a4e:	f000 f906 	bl	8002c5e <memset>
 8002a52:	4b0d      	ldr	r3, [pc, #52]	; (8002a88 <std+0x58>)
 8002a54:	6263      	str	r3, [r4, #36]	; 0x24
 8002a56:	4b0d      	ldr	r3, [pc, #52]	; (8002a8c <std+0x5c>)
 8002a58:	62a3      	str	r3, [r4, #40]	; 0x28
 8002a5a:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <std+0x60>)
 8002a5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002a5e:	4b0d      	ldr	r3, [pc, #52]	; (8002a94 <std+0x64>)
 8002a60:	6323      	str	r3, [r4, #48]	; 0x30
 8002a62:	4b0d      	ldr	r3, [pc, #52]	; (8002a98 <std+0x68>)
 8002a64:	6224      	str	r4, [r4, #32]
 8002a66:	429c      	cmp	r4, r3
 8002a68:	d006      	beq.n	8002a78 <std+0x48>
 8002a6a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002a6e:	4294      	cmp	r4, r2
 8002a70:	d002      	beq.n	8002a78 <std+0x48>
 8002a72:	33d0      	adds	r3, #208	; 0xd0
 8002a74:	429c      	cmp	r4, r3
 8002a76:	d105      	bne.n	8002a84 <std+0x54>
 8002a78:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a80:	f000 b966 	b.w	8002d50 <__retarget_lock_init_recursive>
 8002a84:	bd10      	pop	{r4, pc}
 8002a86:	bf00      	nop
 8002a88:	08002bd9 	.word	0x08002bd9
 8002a8c:	08002bfb 	.word	0x08002bfb
 8002a90:	08002c33 	.word	0x08002c33
 8002a94:	08002c57 	.word	0x08002c57
 8002a98:	20000118 	.word	0x20000118

08002a9c <stdio_exit_handler>:
 8002a9c:	4a02      	ldr	r2, [pc, #8]	; (8002aa8 <stdio_exit_handler+0xc>)
 8002a9e:	4903      	ldr	r1, [pc, #12]	; (8002aac <stdio_exit_handler+0x10>)
 8002aa0:	4803      	ldr	r0, [pc, #12]	; (8002ab0 <stdio_exit_handler+0x14>)
 8002aa2:	f000 b869 	b.w	8002b78 <_fwalk_sglue>
 8002aa6:	bf00      	nop
 8002aa8:	2000000c 	.word	0x2000000c
 8002aac:	080035fd 	.word	0x080035fd
 8002ab0:	20000018 	.word	0x20000018

08002ab4 <cleanup_stdio>:
 8002ab4:	6841      	ldr	r1, [r0, #4]
 8002ab6:	4b0c      	ldr	r3, [pc, #48]	; (8002ae8 <cleanup_stdio+0x34>)
 8002ab8:	4299      	cmp	r1, r3
 8002aba:	b510      	push	{r4, lr}
 8002abc:	4604      	mov	r4, r0
 8002abe:	d001      	beq.n	8002ac4 <cleanup_stdio+0x10>
 8002ac0:	f000 fd9c 	bl	80035fc <_fflush_r>
 8002ac4:	68a1      	ldr	r1, [r4, #8]
 8002ac6:	4b09      	ldr	r3, [pc, #36]	; (8002aec <cleanup_stdio+0x38>)
 8002ac8:	4299      	cmp	r1, r3
 8002aca:	d002      	beq.n	8002ad2 <cleanup_stdio+0x1e>
 8002acc:	4620      	mov	r0, r4
 8002ace:	f000 fd95 	bl	80035fc <_fflush_r>
 8002ad2:	68e1      	ldr	r1, [r4, #12]
 8002ad4:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <cleanup_stdio+0x3c>)
 8002ad6:	4299      	cmp	r1, r3
 8002ad8:	d004      	beq.n	8002ae4 <cleanup_stdio+0x30>
 8002ada:	4620      	mov	r0, r4
 8002adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ae0:	f000 bd8c 	b.w	80035fc <_fflush_r>
 8002ae4:	bd10      	pop	{r4, pc}
 8002ae6:	bf00      	nop
 8002ae8:	20000118 	.word	0x20000118
 8002aec:	20000180 	.word	0x20000180
 8002af0:	200001e8 	.word	0x200001e8

08002af4 <global_stdio_init.part.0>:
 8002af4:	b510      	push	{r4, lr}
 8002af6:	4b0b      	ldr	r3, [pc, #44]	; (8002b24 <global_stdio_init.part.0+0x30>)
 8002af8:	4c0b      	ldr	r4, [pc, #44]	; (8002b28 <global_stdio_init.part.0+0x34>)
 8002afa:	4a0c      	ldr	r2, [pc, #48]	; (8002b2c <global_stdio_init.part.0+0x38>)
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	4620      	mov	r0, r4
 8002b00:	2200      	movs	r2, #0
 8002b02:	2104      	movs	r1, #4
 8002b04:	f7ff ff94 	bl	8002a30 <std>
 8002b08:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	2109      	movs	r1, #9
 8002b10:	f7ff ff8e 	bl	8002a30 <std>
 8002b14:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002b18:	2202      	movs	r2, #2
 8002b1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b1e:	2112      	movs	r1, #18
 8002b20:	f7ff bf86 	b.w	8002a30 <std>
 8002b24:	20000250 	.word	0x20000250
 8002b28:	20000118 	.word	0x20000118
 8002b2c:	08002a9d 	.word	0x08002a9d

08002b30 <__sfp_lock_acquire>:
 8002b30:	4801      	ldr	r0, [pc, #4]	; (8002b38 <__sfp_lock_acquire+0x8>)
 8002b32:	f000 b90e 	b.w	8002d52 <__retarget_lock_acquire_recursive>
 8002b36:	bf00      	nop
 8002b38:	20000259 	.word	0x20000259

08002b3c <__sfp_lock_release>:
 8002b3c:	4801      	ldr	r0, [pc, #4]	; (8002b44 <__sfp_lock_release+0x8>)
 8002b3e:	f000 b909 	b.w	8002d54 <__retarget_lock_release_recursive>
 8002b42:	bf00      	nop
 8002b44:	20000259 	.word	0x20000259

08002b48 <__sinit>:
 8002b48:	b510      	push	{r4, lr}
 8002b4a:	4604      	mov	r4, r0
 8002b4c:	f7ff fff0 	bl	8002b30 <__sfp_lock_acquire>
 8002b50:	6a23      	ldr	r3, [r4, #32]
 8002b52:	b11b      	cbz	r3, 8002b5c <__sinit+0x14>
 8002b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b58:	f7ff bff0 	b.w	8002b3c <__sfp_lock_release>
 8002b5c:	4b04      	ldr	r3, [pc, #16]	; (8002b70 <__sinit+0x28>)
 8002b5e:	6223      	str	r3, [r4, #32]
 8002b60:	4b04      	ldr	r3, [pc, #16]	; (8002b74 <__sinit+0x2c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1f5      	bne.n	8002b54 <__sinit+0xc>
 8002b68:	f7ff ffc4 	bl	8002af4 <global_stdio_init.part.0>
 8002b6c:	e7f2      	b.n	8002b54 <__sinit+0xc>
 8002b6e:	bf00      	nop
 8002b70:	08002ab5 	.word	0x08002ab5
 8002b74:	20000250 	.word	0x20000250

08002b78 <_fwalk_sglue>:
 8002b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b7c:	4607      	mov	r7, r0
 8002b7e:	4688      	mov	r8, r1
 8002b80:	4614      	mov	r4, r2
 8002b82:	2600      	movs	r6, #0
 8002b84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002b88:	f1b9 0901 	subs.w	r9, r9, #1
 8002b8c:	d505      	bpl.n	8002b9a <_fwalk_sglue+0x22>
 8002b8e:	6824      	ldr	r4, [r4, #0]
 8002b90:	2c00      	cmp	r4, #0
 8002b92:	d1f7      	bne.n	8002b84 <_fwalk_sglue+0xc>
 8002b94:	4630      	mov	r0, r6
 8002b96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b9a:	89ab      	ldrh	r3, [r5, #12]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d907      	bls.n	8002bb0 <_fwalk_sglue+0x38>
 8002ba0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	d003      	beq.n	8002bb0 <_fwalk_sglue+0x38>
 8002ba8:	4629      	mov	r1, r5
 8002baa:	4638      	mov	r0, r7
 8002bac:	47c0      	blx	r8
 8002bae:	4306      	orrs	r6, r0
 8002bb0:	3568      	adds	r5, #104	; 0x68
 8002bb2:	e7e9      	b.n	8002b88 <_fwalk_sglue+0x10>

08002bb4 <iprintf>:
 8002bb4:	b40f      	push	{r0, r1, r2, r3}
 8002bb6:	b507      	push	{r0, r1, r2, lr}
 8002bb8:	4906      	ldr	r1, [pc, #24]	; (8002bd4 <iprintf+0x20>)
 8002bba:	ab04      	add	r3, sp, #16
 8002bbc:	6808      	ldr	r0, [r1, #0]
 8002bbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8002bc2:	6881      	ldr	r1, [r0, #8]
 8002bc4:	9301      	str	r3, [sp, #4]
 8002bc6:	f000 f9e9 	bl	8002f9c <_vfiprintf_r>
 8002bca:	b003      	add	sp, #12
 8002bcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8002bd0:	b004      	add	sp, #16
 8002bd2:	4770      	bx	lr
 8002bd4:	20000064 	.word	0x20000064

08002bd8 <__sread>:
 8002bd8:	b510      	push	{r4, lr}
 8002bda:	460c      	mov	r4, r1
 8002bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002be0:	f000 f868 	bl	8002cb4 <_read_r>
 8002be4:	2800      	cmp	r0, #0
 8002be6:	bfab      	itete	ge
 8002be8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002bea:	89a3      	ldrhlt	r3, [r4, #12]
 8002bec:	181b      	addge	r3, r3, r0
 8002bee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002bf2:	bfac      	ite	ge
 8002bf4:	6563      	strge	r3, [r4, #84]	; 0x54
 8002bf6:	81a3      	strhlt	r3, [r4, #12]
 8002bf8:	bd10      	pop	{r4, pc}

08002bfa <__swrite>:
 8002bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bfe:	461f      	mov	r7, r3
 8002c00:	898b      	ldrh	r3, [r1, #12]
 8002c02:	05db      	lsls	r3, r3, #23
 8002c04:	4605      	mov	r5, r0
 8002c06:	460c      	mov	r4, r1
 8002c08:	4616      	mov	r6, r2
 8002c0a:	d505      	bpl.n	8002c18 <__swrite+0x1e>
 8002c0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c10:	2302      	movs	r3, #2
 8002c12:	2200      	movs	r2, #0
 8002c14:	f000 f83c 	bl	8002c90 <_lseek_r>
 8002c18:	89a3      	ldrh	r3, [r4, #12]
 8002c1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c22:	81a3      	strh	r3, [r4, #12]
 8002c24:	4632      	mov	r2, r6
 8002c26:	463b      	mov	r3, r7
 8002c28:	4628      	mov	r0, r5
 8002c2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c2e:	f000 b853 	b.w	8002cd8 <_write_r>

08002c32 <__sseek>:
 8002c32:	b510      	push	{r4, lr}
 8002c34:	460c      	mov	r4, r1
 8002c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c3a:	f000 f829 	bl	8002c90 <_lseek_r>
 8002c3e:	1c43      	adds	r3, r0, #1
 8002c40:	89a3      	ldrh	r3, [r4, #12]
 8002c42:	bf15      	itete	ne
 8002c44:	6560      	strne	r0, [r4, #84]	; 0x54
 8002c46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002c4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002c4e:	81a3      	strheq	r3, [r4, #12]
 8002c50:	bf18      	it	ne
 8002c52:	81a3      	strhne	r3, [r4, #12]
 8002c54:	bd10      	pop	{r4, pc}

08002c56 <__sclose>:
 8002c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c5a:	f000 b809 	b.w	8002c70 <_close_r>

08002c5e <memset>:
 8002c5e:	4402      	add	r2, r0
 8002c60:	4603      	mov	r3, r0
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d100      	bne.n	8002c68 <memset+0xa>
 8002c66:	4770      	bx	lr
 8002c68:	f803 1b01 	strb.w	r1, [r3], #1
 8002c6c:	e7f9      	b.n	8002c62 <memset+0x4>
	...

08002c70 <_close_r>:
 8002c70:	b538      	push	{r3, r4, r5, lr}
 8002c72:	4d06      	ldr	r5, [pc, #24]	; (8002c8c <_close_r+0x1c>)
 8002c74:	2300      	movs	r3, #0
 8002c76:	4604      	mov	r4, r0
 8002c78:	4608      	mov	r0, r1
 8002c7a:	602b      	str	r3, [r5, #0]
 8002c7c:	f7fe fbc3 	bl	8001406 <_close>
 8002c80:	1c43      	adds	r3, r0, #1
 8002c82:	d102      	bne.n	8002c8a <_close_r+0x1a>
 8002c84:	682b      	ldr	r3, [r5, #0]
 8002c86:	b103      	cbz	r3, 8002c8a <_close_r+0x1a>
 8002c88:	6023      	str	r3, [r4, #0]
 8002c8a:	bd38      	pop	{r3, r4, r5, pc}
 8002c8c:	20000254 	.word	0x20000254

08002c90 <_lseek_r>:
 8002c90:	b538      	push	{r3, r4, r5, lr}
 8002c92:	4d07      	ldr	r5, [pc, #28]	; (8002cb0 <_lseek_r+0x20>)
 8002c94:	4604      	mov	r4, r0
 8002c96:	4608      	mov	r0, r1
 8002c98:	4611      	mov	r1, r2
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	602a      	str	r2, [r5, #0]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	f7fe fbd8 	bl	8001454 <_lseek>
 8002ca4:	1c43      	adds	r3, r0, #1
 8002ca6:	d102      	bne.n	8002cae <_lseek_r+0x1e>
 8002ca8:	682b      	ldr	r3, [r5, #0]
 8002caa:	b103      	cbz	r3, 8002cae <_lseek_r+0x1e>
 8002cac:	6023      	str	r3, [r4, #0]
 8002cae:	bd38      	pop	{r3, r4, r5, pc}
 8002cb0:	20000254 	.word	0x20000254

08002cb4 <_read_r>:
 8002cb4:	b538      	push	{r3, r4, r5, lr}
 8002cb6:	4d07      	ldr	r5, [pc, #28]	; (8002cd4 <_read_r+0x20>)
 8002cb8:	4604      	mov	r4, r0
 8002cba:	4608      	mov	r0, r1
 8002cbc:	4611      	mov	r1, r2
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	602a      	str	r2, [r5, #0]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	f7fe fb66 	bl	8001394 <_read>
 8002cc8:	1c43      	adds	r3, r0, #1
 8002cca:	d102      	bne.n	8002cd2 <_read_r+0x1e>
 8002ccc:	682b      	ldr	r3, [r5, #0]
 8002cce:	b103      	cbz	r3, 8002cd2 <_read_r+0x1e>
 8002cd0:	6023      	str	r3, [r4, #0]
 8002cd2:	bd38      	pop	{r3, r4, r5, pc}
 8002cd4:	20000254 	.word	0x20000254

08002cd8 <_write_r>:
 8002cd8:	b538      	push	{r3, r4, r5, lr}
 8002cda:	4d07      	ldr	r5, [pc, #28]	; (8002cf8 <_write_r+0x20>)
 8002cdc:	4604      	mov	r4, r0
 8002cde:	4608      	mov	r0, r1
 8002ce0:	4611      	mov	r1, r2
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	602a      	str	r2, [r5, #0]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	f7fe fb71 	bl	80013ce <_write>
 8002cec:	1c43      	adds	r3, r0, #1
 8002cee:	d102      	bne.n	8002cf6 <_write_r+0x1e>
 8002cf0:	682b      	ldr	r3, [r5, #0]
 8002cf2:	b103      	cbz	r3, 8002cf6 <_write_r+0x1e>
 8002cf4:	6023      	str	r3, [r4, #0]
 8002cf6:	bd38      	pop	{r3, r4, r5, pc}
 8002cf8:	20000254 	.word	0x20000254

08002cfc <__errno>:
 8002cfc:	4b01      	ldr	r3, [pc, #4]	; (8002d04 <__errno+0x8>)
 8002cfe:	6818      	ldr	r0, [r3, #0]
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	20000064 	.word	0x20000064

08002d08 <__libc_init_array>:
 8002d08:	b570      	push	{r4, r5, r6, lr}
 8002d0a:	4d0d      	ldr	r5, [pc, #52]	; (8002d40 <__libc_init_array+0x38>)
 8002d0c:	4c0d      	ldr	r4, [pc, #52]	; (8002d44 <__libc_init_array+0x3c>)
 8002d0e:	1b64      	subs	r4, r4, r5
 8002d10:	10a4      	asrs	r4, r4, #2
 8002d12:	2600      	movs	r6, #0
 8002d14:	42a6      	cmp	r6, r4
 8002d16:	d109      	bne.n	8002d2c <__libc_init_array+0x24>
 8002d18:	4d0b      	ldr	r5, [pc, #44]	; (8002d48 <__libc_init_array+0x40>)
 8002d1a:	4c0c      	ldr	r4, [pc, #48]	; (8002d4c <__libc_init_array+0x44>)
 8002d1c:	f000 fdc0 	bl	80038a0 <_init>
 8002d20:	1b64      	subs	r4, r4, r5
 8002d22:	10a4      	asrs	r4, r4, #2
 8002d24:	2600      	movs	r6, #0
 8002d26:	42a6      	cmp	r6, r4
 8002d28:	d105      	bne.n	8002d36 <__libc_init_array+0x2e>
 8002d2a:	bd70      	pop	{r4, r5, r6, pc}
 8002d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d30:	4798      	blx	r3
 8002d32:	3601      	adds	r6, #1
 8002d34:	e7ee      	b.n	8002d14 <__libc_init_array+0xc>
 8002d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d3a:	4798      	blx	r3
 8002d3c:	3601      	adds	r6, #1
 8002d3e:	e7f2      	b.n	8002d26 <__libc_init_array+0x1e>
 8002d40:	08003a98 	.word	0x08003a98
 8002d44:	08003a98 	.word	0x08003a98
 8002d48:	08003a98 	.word	0x08003a98
 8002d4c:	08003a9c 	.word	0x08003a9c

08002d50 <__retarget_lock_init_recursive>:
 8002d50:	4770      	bx	lr

08002d52 <__retarget_lock_acquire_recursive>:
 8002d52:	4770      	bx	lr

08002d54 <__retarget_lock_release_recursive>:
 8002d54:	4770      	bx	lr
	...

08002d58 <_free_r>:
 8002d58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002d5a:	2900      	cmp	r1, #0
 8002d5c:	d044      	beq.n	8002de8 <_free_r+0x90>
 8002d5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d62:	9001      	str	r0, [sp, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f1a1 0404 	sub.w	r4, r1, #4
 8002d6a:	bfb8      	it	lt
 8002d6c:	18e4      	addlt	r4, r4, r3
 8002d6e:	f000 f8df 	bl	8002f30 <__malloc_lock>
 8002d72:	4a1e      	ldr	r2, [pc, #120]	; (8002dec <_free_r+0x94>)
 8002d74:	9801      	ldr	r0, [sp, #4]
 8002d76:	6813      	ldr	r3, [r2, #0]
 8002d78:	b933      	cbnz	r3, 8002d88 <_free_r+0x30>
 8002d7a:	6063      	str	r3, [r4, #4]
 8002d7c:	6014      	str	r4, [r2, #0]
 8002d7e:	b003      	add	sp, #12
 8002d80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d84:	f000 b8da 	b.w	8002f3c <__malloc_unlock>
 8002d88:	42a3      	cmp	r3, r4
 8002d8a:	d908      	bls.n	8002d9e <_free_r+0x46>
 8002d8c:	6825      	ldr	r5, [r4, #0]
 8002d8e:	1961      	adds	r1, r4, r5
 8002d90:	428b      	cmp	r3, r1
 8002d92:	bf01      	itttt	eq
 8002d94:	6819      	ldreq	r1, [r3, #0]
 8002d96:	685b      	ldreq	r3, [r3, #4]
 8002d98:	1949      	addeq	r1, r1, r5
 8002d9a:	6021      	streq	r1, [r4, #0]
 8002d9c:	e7ed      	b.n	8002d7a <_free_r+0x22>
 8002d9e:	461a      	mov	r2, r3
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	b10b      	cbz	r3, 8002da8 <_free_r+0x50>
 8002da4:	42a3      	cmp	r3, r4
 8002da6:	d9fa      	bls.n	8002d9e <_free_r+0x46>
 8002da8:	6811      	ldr	r1, [r2, #0]
 8002daa:	1855      	adds	r5, r2, r1
 8002dac:	42a5      	cmp	r5, r4
 8002dae:	d10b      	bne.n	8002dc8 <_free_r+0x70>
 8002db0:	6824      	ldr	r4, [r4, #0]
 8002db2:	4421      	add	r1, r4
 8002db4:	1854      	adds	r4, r2, r1
 8002db6:	42a3      	cmp	r3, r4
 8002db8:	6011      	str	r1, [r2, #0]
 8002dba:	d1e0      	bne.n	8002d7e <_free_r+0x26>
 8002dbc:	681c      	ldr	r4, [r3, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	6053      	str	r3, [r2, #4]
 8002dc2:	440c      	add	r4, r1
 8002dc4:	6014      	str	r4, [r2, #0]
 8002dc6:	e7da      	b.n	8002d7e <_free_r+0x26>
 8002dc8:	d902      	bls.n	8002dd0 <_free_r+0x78>
 8002dca:	230c      	movs	r3, #12
 8002dcc:	6003      	str	r3, [r0, #0]
 8002dce:	e7d6      	b.n	8002d7e <_free_r+0x26>
 8002dd0:	6825      	ldr	r5, [r4, #0]
 8002dd2:	1961      	adds	r1, r4, r5
 8002dd4:	428b      	cmp	r3, r1
 8002dd6:	bf04      	itt	eq
 8002dd8:	6819      	ldreq	r1, [r3, #0]
 8002dda:	685b      	ldreq	r3, [r3, #4]
 8002ddc:	6063      	str	r3, [r4, #4]
 8002dde:	bf04      	itt	eq
 8002de0:	1949      	addeq	r1, r1, r5
 8002de2:	6021      	streq	r1, [r4, #0]
 8002de4:	6054      	str	r4, [r2, #4]
 8002de6:	e7ca      	b.n	8002d7e <_free_r+0x26>
 8002de8:	b003      	add	sp, #12
 8002dea:	bd30      	pop	{r4, r5, pc}
 8002dec:	2000025c 	.word	0x2000025c

08002df0 <sbrk_aligned>:
 8002df0:	b570      	push	{r4, r5, r6, lr}
 8002df2:	4e0e      	ldr	r6, [pc, #56]	; (8002e2c <sbrk_aligned+0x3c>)
 8002df4:	460c      	mov	r4, r1
 8002df6:	6831      	ldr	r1, [r6, #0]
 8002df8:	4605      	mov	r5, r0
 8002dfa:	b911      	cbnz	r1, 8002e02 <sbrk_aligned+0x12>
 8002dfc:	f000 fcbc 	bl	8003778 <_sbrk_r>
 8002e00:	6030      	str	r0, [r6, #0]
 8002e02:	4621      	mov	r1, r4
 8002e04:	4628      	mov	r0, r5
 8002e06:	f000 fcb7 	bl	8003778 <_sbrk_r>
 8002e0a:	1c43      	adds	r3, r0, #1
 8002e0c:	d00a      	beq.n	8002e24 <sbrk_aligned+0x34>
 8002e0e:	1cc4      	adds	r4, r0, #3
 8002e10:	f024 0403 	bic.w	r4, r4, #3
 8002e14:	42a0      	cmp	r0, r4
 8002e16:	d007      	beq.n	8002e28 <sbrk_aligned+0x38>
 8002e18:	1a21      	subs	r1, r4, r0
 8002e1a:	4628      	mov	r0, r5
 8002e1c:	f000 fcac 	bl	8003778 <_sbrk_r>
 8002e20:	3001      	adds	r0, #1
 8002e22:	d101      	bne.n	8002e28 <sbrk_aligned+0x38>
 8002e24:	f04f 34ff 	mov.w	r4, #4294967295
 8002e28:	4620      	mov	r0, r4
 8002e2a:	bd70      	pop	{r4, r5, r6, pc}
 8002e2c:	20000260 	.word	0x20000260

08002e30 <_malloc_r>:
 8002e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e34:	1ccd      	adds	r5, r1, #3
 8002e36:	f025 0503 	bic.w	r5, r5, #3
 8002e3a:	3508      	adds	r5, #8
 8002e3c:	2d0c      	cmp	r5, #12
 8002e3e:	bf38      	it	cc
 8002e40:	250c      	movcc	r5, #12
 8002e42:	2d00      	cmp	r5, #0
 8002e44:	4607      	mov	r7, r0
 8002e46:	db01      	blt.n	8002e4c <_malloc_r+0x1c>
 8002e48:	42a9      	cmp	r1, r5
 8002e4a:	d905      	bls.n	8002e58 <_malloc_r+0x28>
 8002e4c:	230c      	movs	r3, #12
 8002e4e:	603b      	str	r3, [r7, #0]
 8002e50:	2600      	movs	r6, #0
 8002e52:	4630      	mov	r0, r6
 8002e54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e58:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002f2c <_malloc_r+0xfc>
 8002e5c:	f000 f868 	bl	8002f30 <__malloc_lock>
 8002e60:	f8d8 3000 	ldr.w	r3, [r8]
 8002e64:	461c      	mov	r4, r3
 8002e66:	bb5c      	cbnz	r4, 8002ec0 <_malloc_r+0x90>
 8002e68:	4629      	mov	r1, r5
 8002e6a:	4638      	mov	r0, r7
 8002e6c:	f7ff ffc0 	bl	8002df0 <sbrk_aligned>
 8002e70:	1c43      	adds	r3, r0, #1
 8002e72:	4604      	mov	r4, r0
 8002e74:	d155      	bne.n	8002f22 <_malloc_r+0xf2>
 8002e76:	f8d8 4000 	ldr.w	r4, [r8]
 8002e7a:	4626      	mov	r6, r4
 8002e7c:	2e00      	cmp	r6, #0
 8002e7e:	d145      	bne.n	8002f0c <_malloc_r+0xdc>
 8002e80:	2c00      	cmp	r4, #0
 8002e82:	d048      	beq.n	8002f16 <_malloc_r+0xe6>
 8002e84:	6823      	ldr	r3, [r4, #0]
 8002e86:	4631      	mov	r1, r6
 8002e88:	4638      	mov	r0, r7
 8002e8a:	eb04 0903 	add.w	r9, r4, r3
 8002e8e:	f000 fc73 	bl	8003778 <_sbrk_r>
 8002e92:	4581      	cmp	r9, r0
 8002e94:	d13f      	bne.n	8002f16 <_malloc_r+0xe6>
 8002e96:	6821      	ldr	r1, [r4, #0]
 8002e98:	1a6d      	subs	r5, r5, r1
 8002e9a:	4629      	mov	r1, r5
 8002e9c:	4638      	mov	r0, r7
 8002e9e:	f7ff ffa7 	bl	8002df0 <sbrk_aligned>
 8002ea2:	3001      	adds	r0, #1
 8002ea4:	d037      	beq.n	8002f16 <_malloc_r+0xe6>
 8002ea6:	6823      	ldr	r3, [r4, #0]
 8002ea8:	442b      	add	r3, r5
 8002eaa:	6023      	str	r3, [r4, #0]
 8002eac:	f8d8 3000 	ldr.w	r3, [r8]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d038      	beq.n	8002f26 <_malloc_r+0xf6>
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	42a2      	cmp	r2, r4
 8002eb8:	d12b      	bne.n	8002f12 <_malloc_r+0xe2>
 8002eba:	2200      	movs	r2, #0
 8002ebc:	605a      	str	r2, [r3, #4]
 8002ebe:	e00f      	b.n	8002ee0 <_malloc_r+0xb0>
 8002ec0:	6822      	ldr	r2, [r4, #0]
 8002ec2:	1b52      	subs	r2, r2, r5
 8002ec4:	d41f      	bmi.n	8002f06 <_malloc_r+0xd6>
 8002ec6:	2a0b      	cmp	r2, #11
 8002ec8:	d917      	bls.n	8002efa <_malloc_r+0xca>
 8002eca:	1961      	adds	r1, r4, r5
 8002ecc:	42a3      	cmp	r3, r4
 8002ece:	6025      	str	r5, [r4, #0]
 8002ed0:	bf18      	it	ne
 8002ed2:	6059      	strne	r1, [r3, #4]
 8002ed4:	6863      	ldr	r3, [r4, #4]
 8002ed6:	bf08      	it	eq
 8002ed8:	f8c8 1000 	streq.w	r1, [r8]
 8002edc:	5162      	str	r2, [r4, r5]
 8002ede:	604b      	str	r3, [r1, #4]
 8002ee0:	4638      	mov	r0, r7
 8002ee2:	f104 060b 	add.w	r6, r4, #11
 8002ee6:	f000 f829 	bl	8002f3c <__malloc_unlock>
 8002eea:	f026 0607 	bic.w	r6, r6, #7
 8002eee:	1d23      	adds	r3, r4, #4
 8002ef0:	1af2      	subs	r2, r6, r3
 8002ef2:	d0ae      	beq.n	8002e52 <_malloc_r+0x22>
 8002ef4:	1b9b      	subs	r3, r3, r6
 8002ef6:	50a3      	str	r3, [r4, r2]
 8002ef8:	e7ab      	b.n	8002e52 <_malloc_r+0x22>
 8002efa:	42a3      	cmp	r3, r4
 8002efc:	6862      	ldr	r2, [r4, #4]
 8002efe:	d1dd      	bne.n	8002ebc <_malloc_r+0x8c>
 8002f00:	f8c8 2000 	str.w	r2, [r8]
 8002f04:	e7ec      	b.n	8002ee0 <_malloc_r+0xb0>
 8002f06:	4623      	mov	r3, r4
 8002f08:	6864      	ldr	r4, [r4, #4]
 8002f0a:	e7ac      	b.n	8002e66 <_malloc_r+0x36>
 8002f0c:	4634      	mov	r4, r6
 8002f0e:	6876      	ldr	r6, [r6, #4]
 8002f10:	e7b4      	b.n	8002e7c <_malloc_r+0x4c>
 8002f12:	4613      	mov	r3, r2
 8002f14:	e7cc      	b.n	8002eb0 <_malloc_r+0x80>
 8002f16:	230c      	movs	r3, #12
 8002f18:	603b      	str	r3, [r7, #0]
 8002f1a:	4638      	mov	r0, r7
 8002f1c:	f000 f80e 	bl	8002f3c <__malloc_unlock>
 8002f20:	e797      	b.n	8002e52 <_malloc_r+0x22>
 8002f22:	6025      	str	r5, [r4, #0]
 8002f24:	e7dc      	b.n	8002ee0 <_malloc_r+0xb0>
 8002f26:	605b      	str	r3, [r3, #4]
 8002f28:	deff      	udf	#255	; 0xff
 8002f2a:	bf00      	nop
 8002f2c:	2000025c 	.word	0x2000025c

08002f30 <__malloc_lock>:
 8002f30:	4801      	ldr	r0, [pc, #4]	; (8002f38 <__malloc_lock+0x8>)
 8002f32:	f7ff bf0e 	b.w	8002d52 <__retarget_lock_acquire_recursive>
 8002f36:	bf00      	nop
 8002f38:	20000258 	.word	0x20000258

08002f3c <__malloc_unlock>:
 8002f3c:	4801      	ldr	r0, [pc, #4]	; (8002f44 <__malloc_unlock+0x8>)
 8002f3e:	f7ff bf09 	b.w	8002d54 <__retarget_lock_release_recursive>
 8002f42:	bf00      	nop
 8002f44:	20000258 	.word	0x20000258

08002f48 <__sfputc_r>:
 8002f48:	6893      	ldr	r3, [r2, #8]
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	b410      	push	{r4}
 8002f50:	6093      	str	r3, [r2, #8]
 8002f52:	da08      	bge.n	8002f66 <__sfputc_r+0x1e>
 8002f54:	6994      	ldr	r4, [r2, #24]
 8002f56:	42a3      	cmp	r3, r4
 8002f58:	db01      	blt.n	8002f5e <__sfputc_r+0x16>
 8002f5a:	290a      	cmp	r1, #10
 8002f5c:	d103      	bne.n	8002f66 <__sfputc_r+0x1e>
 8002f5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f62:	f000 bb73 	b.w	800364c <__swbuf_r>
 8002f66:	6813      	ldr	r3, [r2, #0]
 8002f68:	1c58      	adds	r0, r3, #1
 8002f6a:	6010      	str	r0, [r2, #0]
 8002f6c:	7019      	strb	r1, [r3, #0]
 8002f6e:	4608      	mov	r0, r1
 8002f70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <__sfputs_r>:
 8002f76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f78:	4606      	mov	r6, r0
 8002f7a:	460f      	mov	r7, r1
 8002f7c:	4614      	mov	r4, r2
 8002f7e:	18d5      	adds	r5, r2, r3
 8002f80:	42ac      	cmp	r4, r5
 8002f82:	d101      	bne.n	8002f88 <__sfputs_r+0x12>
 8002f84:	2000      	movs	r0, #0
 8002f86:	e007      	b.n	8002f98 <__sfputs_r+0x22>
 8002f88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f8c:	463a      	mov	r2, r7
 8002f8e:	4630      	mov	r0, r6
 8002f90:	f7ff ffda 	bl	8002f48 <__sfputc_r>
 8002f94:	1c43      	adds	r3, r0, #1
 8002f96:	d1f3      	bne.n	8002f80 <__sfputs_r+0xa>
 8002f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002f9c <_vfiprintf_r>:
 8002f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fa0:	460d      	mov	r5, r1
 8002fa2:	b09d      	sub	sp, #116	; 0x74
 8002fa4:	4614      	mov	r4, r2
 8002fa6:	4698      	mov	r8, r3
 8002fa8:	4606      	mov	r6, r0
 8002faa:	b118      	cbz	r0, 8002fb4 <_vfiprintf_r+0x18>
 8002fac:	6a03      	ldr	r3, [r0, #32]
 8002fae:	b90b      	cbnz	r3, 8002fb4 <_vfiprintf_r+0x18>
 8002fb0:	f7ff fdca 	bl	8002b48 <__sinit>
 8002fb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002fb6:	07d9      	lsls	r1, r3, #31
 8002fb8:	d405      	bmi.n	8002fc6 <_vfiprintf_r+0x2a>
 8002fba:	89ab      	ldrh	r3, [r5, #12]
 8002fbc:	059a      	lsls	r2, r3, #22
 8002fbe:	d402      	bmi.n	8002fc6 <_vfiprintf_r+0x2a>
 8002fc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002fc2:	f7ff fec6 	bl	8002d52 <__retarget_lock_acquire_recursive>
 8002fc6:	89ab      	ldrh	r3, [r5, #12]
 8002fc8:	071b      	lsls	r3, r3, #28
 8002fca:	d501      	bpl.n	8002fd0 <_vfiprintf_r+0x34>
 8002fcc:	692b      	ldr	r3, [r5, #16]
 8002fce:	b99b      	cbnz	r3, 8002ff8 <_vfiprintf_r+0x5c>
 8002fd0:	4629      	mov	r1, r5
 8002fd2:	4630      	mov	r0, r6
 8002fd4:	f000 fb78 	bl	80036c8 <__swsetup_r>
 8002fd8:	b170      	cbz	r0, 8002ff8 <_vfiprintf_r+0x5c>
 8002fda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002fdc:	07dc      	lsls	r4, r3, #31
 8002fde:	d504      	bpl.n	8002fea <_vfiprintf_r+0x4e>
 8002fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fe4:	b01d      	add	sp, #116	; 0x74
 8002fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fea:	89ab      	ldrh	r3, [r5, #12]
 8002fec:	0598      	lsls	r0, r3, #22
 8002fee:	d4f7      	bmi.n	8002fe0 <_vfiprintf_r+0x44>
 8002ff0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002ff2:	f7ff feaf 	bl	8002d54 <__retarget_lock_release_recursive>
 8002ff6:	e7f3      	b.n	8002fe0 <_vfiprintf_r+0x44>
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	9309      	str	r3, [sp, #36]	; 0x24
 8002ffc:	2320      	movs	r3, #32
 8002ffe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003002:	f8cd 800c 	str.w	r8, [sp, #12]
 8003006:	2330      	movs	r3, #48	; 0x30
 8003008:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80031bc <_vfiprintf_r+0x220>
 800300c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003010:	f04f 0901 	mov.w	r9, #1
 8003014:	4623      	mov	r3, r4
 8003016:	469a      	mov	sl, r3
 8003018:	f813 2b01 	ldrb.w	r2, [r3], #1
 800301c:	b10a      	cbz	r2, 8003022 <_vfiprintf_r+0x86>
 800301e:	2a25      	cmp	r2, #37	; 0x25
 8003020:	d1f9      	bne.n	8003016 <_vfiprintf_r+0x7a>
 8003022:	ebba 0b04 	subs.w	fp, sl, r4
 8003026:	d00b      	beq.n	8003040 <_vfiprintf_r+0xa4>
 8003028:	465b      	mov	r3, fp
 800302a:	4622      	mov	r2, r4
 800302c:	4629      	mov	r1, r5
 800302e:	4630      	mov	r0, r6
 8003030:	f7ff ffa1 	bl	8002f76 <__sfputs_r>
 8003034:	3001      	adds	r0, #1
 8003036:	f000 80a9 	beq.w	800318c <_vfiprintf_r+0x1f0>
 800303a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800303c:	445a      	add	r2, fp
 800303e:	9209      	str	r2, [sp, #36]	; 0x24
 8003040:	f89a 3000 	ldrb.w	r3, [sl]
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 80a1 	beq.w	800318c <_vfiprintf_r+0x1f0>
 800304a:	2300      	movs	r3, #0
 800304c:	f04f 32ff 	mov.w	r2, #4294967295
 8003050:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003054:	f10a 0a01 	add.w	sl, sl, #1
 8003058:	9304      	str	r3, [sp, #16]
 800305a:	9307      	str	r3, [sp, #28]
 800305c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003060:	931a      	str	r3, [sp, #104]	; 0x68
 8003062:	4654      	mov	r4, sl
 8003064:	2205      	movs	r2, #5
 8003066:	f814 1b01 	ldrb.w	r1, [r4], #1
 800306a:	4854      	ldr	r0, [pc, #336]	; (80031bc <_vfiprintf_r+0x220>)
 800306c:	f7fd f8b8 	bl	80001e0 <memchr>
 8003070:	9a04      	ldr	r2, [sp, #16]
 8003072:	b9d8      	cbnz	r0, 80030ac <_vfiprintf_r+0x110>
 8003074:	06d1      	lsls	r1, r2, #27
 8003076:	bf44      	itt	mi
 8003078:	2320      	movmi	r3, #32
 800307a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800307e:	0713      	lsls	r3, r2, #28
 8003080:	bf44      	itt	mi
 8003082:	232b      	movmi	r3, #43	; 0x2b
 8003084:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003088:	f89a 3000 	ldrb.w	r3, [sl]
 800308c:	2b2a      	cmp	r3, #42	; 0x2a
 800308e:	d015      	beq.n	80030bc <_vfiprintf_r+0x120>
 8003090:	9a07      	ldr	r2, [sp, #28]
 8003092:	4654      	mov	r4, sl
 8003094:	2000      	movs	r0, #0
 8003096:	f04f 0c0a 	mov.w	ip, #10
 800309a:	4621      	mov	r1, r4
 800309c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80030a0:	3b30      	subs	r3, #48	; 0x30
 80030a2:	2b09      	cmp	r3, #9
 80030a4:	d94d      	bls.n	8003142 <_vfiprintf_r+0x1a6>
 80030a6:	b1b0      	cbz	r0, 80030d6 <_vfiprintf_r+0x13a>
 80030a8:	9207      	str	r2, [sp, #28]
 80030aa:	e014      	b.n	80030d6 <_vfiprintf_r+0x13a>
 80030ac:	eba0 0308 	sub.w	r3, r0, r8
 80030b0:	fa09 f303 	lsl.w	r3, r9, r3
 80030b4:	4313      	orrs	r3, r2
 80030b6:	9304      	str	r3, [sp, #16]
 80030b8:	46a2      	mov	sl, r4
 80030ba:	e7d2      	b.n	8003062 <_vfiprintf_r+0xc6>
 80030bc:	9b03      	ldr	r3, [sp, #12]
 80030be:	1d19      	adds	r1, r3, #4
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	9103      	str	r1, [sp, #12]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	bfbb      	ittet	lt
 80030c8:	425b      	neglt	r3, r3
 80030ca:	f042 0202 	orrlt.w	r2, r2, #2
 80030ce:	9307      	strge	r3, [sp, #28]
 80030d0:	9307      	strlt	r3, [sp, #28]
 80030d2:	bfb8      	it	lt
 80030d4:	9204      	strlt	r2, [sp, #16]
 80030d6:	7823      	ldrb	r3, [r4, #0]
 80030d8:	2b2e      	cmp	r3, #46	; 0x2e
 80030da:	d10c      	bne.n	80030f6 <_vfiprintf_r+0x15a>
 80030dc:	7863      	ldrb	r3, [r4, #1]
 80030de:	2b2a      	cmp	r3, #42	; 0x2a
 80030e0:	d134      	bne.n	800314c <_vfiprintf_r+0x1b0>
 80030e2:	9b03      	ldr	r3, [sp, #12]
 80030e4:	1d1a      	adds	r2, r3, #4
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	9203      	str	r2, [sp, #12]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	bfb8      	it	lt
 80030ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80030f2:	3402      	adds	r4, #2
 80030f4:	9305      	str	r3, [sp, #20]
 80030f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80031cc <_vfiprintf_r+0x230>
 80030fa:	7821      	ldrb	r1, [r4, #0]
 80030fc:	2203      	movs	r2, #3
 80030fe:	4650      	mov	r0, sl
 8003100:	f7fd f86e 	bl	80001e0 <memchr>
 8003104:	b138      	cbz	r0, 8003116 <_vfiprintf_r+0x17a>
 8003106:	9b04      	ldr	r3, [sp, #16]
 8003108:	eba0 000a 	sub.w	r0, r0, sl
 800310c:	2240      	movs	r2, #64	; 0x40
 800310e:	4082      	lsls	r2, r0
 8003110:	4313      	orrs	r3, r2
 8003112:	3401      	adds	r4, #1
 8003114:	9304      	str	r3, [sp, #16]
 8003116:	f814 1b01 	ldrb.w	r1, [r4], #1
 800311a:	4829      	ldr	r0, [pc, #164]	; (80031c0 <_vfiprintf_r+0x224>)
 800311c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003120:	2206      	movs	r2, #6
 8003122:	f7fd f85d 	bl	80001e0 <memchr>
 8003126:	2800      	cmp	r0, #0
 8003128:	d03f      	beq.n	80031aa <_vfiprintf_r+0x20e>
 800312a:	4b26      	ldr	r3, [pc, #152]	; (80031c4 <_vfiprintf_r+0x228>)
 800312c:	bb1b      	cbnz	r3, 8003176 <_vfiprintf_r+0x1da>
 800312e:	9b03      	ldr	r3, [sp, #12]
 8003130:	3307      	adds	r3, #7
 8003132:	f023 0307 	bic.w	r3, r3, #7
 8003136:	3308      	adds	r3, #8
 8003138:	9303      	str	r3, [sp, #12]
 800313a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800313c:	443b      	add	r3, r7
 800313e:	9309      	str	r3, [sp, #36]	; 0x24
 8003140:	e768      	b.n	8003014 <_vfiprintf_r+0x78>
 8003142:	fb0c 3202 	mla	r2, ip, r2, r3
 8003146:	460c      	mov	r4, r1
 8003148:	2001      	movs	r0, #1
 800314a:	e7a6      	b.n	800309a <_vfiprintf_r+0xfe>
 800314c:	2300      	movs	r3, #0
 800314e:	3401      	adds	r4, #1
 8003150:	9305      	str	r3, [sp, #20]
 8003152:	4619      	mov	r1, r3
 8003154:	f04f 0c0a 	mov.w	ip, #10
 8003158:	4620      	mov	r0, r4
 800315a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800315e:	3a30      	subs	r2, #48	; 0x30
 8003160:	2a09      	cmp	r2, #9
 8003162:	d903      	bls.n	800316c <_vfiprintf_r+0x1d0>
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0c6      	beq.n	80030f6 <_vfiprintf_r+0x15a>
 8003168:	9105      	str	r1, [sp, #20]
 800316a:	e7c4      	b.n	80030f6 <_vfiprintf_r+0x15a>
 800316c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003170:	4604      	mov	r4, r0
 8003172:	2301      	movs	r3, #1
 8003174:	e7f0      	b.n	8003158 <_vfiprintf_r+0x1bc>
 8003176:	ab03      	add	r3, sp, #12
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	462a      	mov	r2, r5
 800317c:	4b12      	ldr	r3, [pc, #72]	; (80031c8 <_vfiprintf_r+0x22c>)
 800317e:	a904      	add	r1, sp, #16
 8003180:	4630      	mov	r0, r6
 8003182:	f3af 8000 	nop.w
 8003186:	4607      	mov	r7, r0
 8003188:	1c78      	adds	r0, r7, #1
 800318a:	d1d6      	bne.n	800313a <_vfiprintf_r+0x19e>
 800318c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800318e:	07d9      	lsls	r1, r3, #31
 8003190:	d405      	bmi.n	800319e <_vfiprintf_r+0x202>
 8003192:	89ab      	ldrh	r3, [r5, #12]
 8003194:	059a      	lsls	r2, r3, #22
 8003196:	d402      	bmi.n	800319e <_vfiprintf_r+0x202>
 8003198:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800319a:	f7ff fddb 	bl	8002d54 <__retarget_lock_release_recursive>
 800319e:	89ab      	ldrh	r3, [r5, #12]
 80031a0:	065b      	lsls	r3, r3, #25
 80031a2:	f53f af1d 	bmi.w	8002fe0 <_vfiprintf_r+0x44>
 80031a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80031a8:	e71c      	b.n	8002fe4 <_vfiprintf_r+0x48>
 80031aa:	ab03      	add	r3, sp, #12
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	462a      	mov	r2, r5
 80031b0:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <_vfiprintf_r+0x22c>)
 80031b2:	a904      	add	r1, sp, #16
 80031b4:	4630      	mov	r0, r6
 80031b6:	f000 f879 	bl	80032ac <_printf_i>
 80031ba:	e7e4      	b.n	8003186 <_vfiprintf_r+0x1ea>
 80031bc:	08003a5c 	.word	0x08003a5c
 80031c0:	08003a66 	.word	0x08003a66
 80031c4:	00000000 	.word	0x00000000
 80031c8:	08002f77 	.word	0x08002f77
 80031cc:	08003a62 	.word	0x08003a62

080031d0 <_printf_common>:
 80031d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031d4:	4616      	mov	r6, r2
 80031d6:	4699      	mov	r9, r3
 80031d8:	688a      	ldr	r2, [r1, #8]
 80031da:	690b      	ldr	r3, [r1, #16]
 80031dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80031e0:	4293      	cmp	r3, r2
 80031e2:	bfb8      	it	lt
 80031e4:	4613      	movlt	r3, r2
 80031e6:	6033      	str	r3, [r6, #0]
 80031e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80031ec:	4607      	mov	r7, r0
 80031ee:	460c      	mov	r4, r1
 80031f0:	b10a      	cbz	r2, 80031f6 <_printf_common+0x26>
 80031f2:	3301      	adds	r3, #1
 80031f4:	6033      	str	r3, [r6, #0]
 80031f6:	6823      	ldr	r3, [r4, #0]
 80031f8:	0699      	lsls	r1, r3, #26
 80031fa:	bf42      	ittt	mi
 80031fc:	6833      	ldrmi	r3, [r6, #0]
 80031fe:	3302      	addmi	r3, #2
 8003200:	6033      	strmi	r3, [r6, #0]
 8003202:	6825      	ldr	r5, [r4, #0]
 8003204:	f015 0506 	ands.w	r5, r5, #6
 8003208:	d106      	bne.n	8003218 <_printf_common+0x48>
 800320a:	f104 0a19 	add.w	sl, r4, #25
 800320e:	68e3      	ldr	r3, [r4, #12]
 8003210:	6832      	ldr	r2, [r6, #0]
 8003212:	1a9b      	subs	r3, r3, r2
 8003214:	42ab      	cmp	r3, r5
 8003216:	dc26      	bgt.n	8003266 <_printf_common+0x96>
 8003218:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800321c:	1e13      	subs	r3, r2, #0
 800321e:	6822      	ldr	r2, [r4, #0]
 8003220:	bf18      	it	ne
 8003222:	2301      	movne	r3, #1
 8003224:	0692      	lsls	r2, r2, #26
 8003226:	d42b      	bmi.n	8003280 <_printf_common+0xb0>
 8003228:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800322c:	4649      	mov	r1, r9
 800322e:	4638      	mov	r0, r7
 8003230:	47c0      	blx	r8
 8003232:	3001      	adds	r0, #1
 8003234:	d01e      	beq.n	8003274 <_printf_common+0xa4>
 8003236:	6823      	ldr	r3, [r4, #0]
 8003238:	6922      	ldr	r2, [r4, #16]
 800323a:	f003 0306 	and.w	r3, r3, #6
 800323e:	2b04      	cmp	r3, #4
 8003240:	bf02      	ittt	eq
 8003242:	68e5      	ldreq	r5, [r4, #12]
 8003244:	6833      	ldreq	r3, [r6, #0]
 8003246:	1aed      	subeq	r5, r5, r3
 8003248:	68a3      	ldr	r3, [r4, #8]
 800324a:	bf0c      	ite	eq
 800324c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003250:	2500      	movne	r5, #0
 8003252:	4293      	cmp	r3, r2
 8003254:	bfc4      	itt	gt
 8003256:	1a9b      	subgt	r3, r3, r2
 8003258:	18ed      	addgt	r5, r5, r3
 800325a:	2600      	movs	r6, #0
 800325c:	341a      	adds	r4, #26
 800325e:	42b5      	cmp	r5, r6
 8003260:	d11a      	bne.n	8003298 <_printf_common+0xc8>
 8003262:	2000      	movs	r0, #0
 8003264:	e008      	b.n	8003278 <_printf_common+0xa8>
 8003266:	2301      	movs	r3, #1
 8003268:	4652      	mov	r2, sl
 800326a:	4649      	mov	r1, r9
 800326c:	4638      	mov	r0, r7
 800326e:	47c0      	blx	r8
 8003270:	3001      	adds	r0, #1
 8003272:	d103      	bne.n	800327c <_printf_common+0xac>
 8003274:	f04f 30ff 	mov.w	r0, #4294967295
 8003278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800327c:	3501      	adds	r5, #1
 800327e:	e7c6      	b.n	800320e <_printf_common+0x3e>
 8003280:	18e1      	adds	r1, r4, r3
 8003282:	1c5a      	adds	r2, r3, #1
 8003284:	2030      	movs	r0, #48	; 0x30
 8003286:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800328a:	4422      	add	r2, r4
 800328c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003290:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003294:	3302      	adds	r3, #2
 8003296:	e7c7      	b.n	8003228 <_printf_common+0x58>
 8003298:	2301      	movs	r3, #1
 800329a:	4622      	mov	r2, r4
 800329c:	4649      	mov	r1, r9
 800329e:	4638      	mov	r0, r7
 80032a0:	47c0      	blx	r8
 80032a2:	3001      	adds	r0, #1
 80032a4:	d0e6      	beq.n	8003274 <_printf_common+0xa4>
 80032a6:	3601      	adds	r6, #1
 80032a8:	e7d9      	b.n	800325e <_printf_common+0x8e>
	...

080032ac <_printf_i>:
 80032ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80032b0:	7e0f      	ldrb	r7, [r1, #24]
 80032b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80032b4:	2f78      	cmp	r7, #120	; 0x78
 80032b6:	4691      	mov	r9, r2
 80032b8:	4680      	mov	r8, r0
 80032ba:	460c      	mov	r4, r1
 80032bc:	469a      	mov	sl, r3
 80032be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80032c2:	d807      	bhi.n	80032d4 <_printf_i+0x28>
 80032c4:	2f62      	cmp	r7, #98	; 0x62
 80032c6:	d80a      	bhi.n	80032de <_printf_i+0x32>
 80032c8:	2f00      	cmp	r7, #0
 80032ca:	f000 80d4 	beq.w	8003476 <_printf_i+0x1ca>
 80032ce:	2f58      	cmp	r7, #88	; 0x58
 80032d0:	f000 80c0 	beq.w	8003454 <_printf_i+0x1a8>
 80032d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80032dc:	e03a      	b.n	8003354 <_printf_i+0xa8>
 80032de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80032e2:	2b15      	cmp	r3, #21
 80032e4:	d8f6      	bhi.n	80032d4 <_printf_i+0x28>
 80032e6:	a101      	add	r1, pc, #4	; (adr r1, 80032ec <_printf_i+0x40>)
 80032e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80032ec:	08003345 	.word	0x08003345
 80032f0:	08003359 	.word	0x08003359
 80032f4:	080032d5 	.word	0x080032d5
 80032f8:	080032d5 	.word	0x080032d5
 80032fc:	080032d5 	.word	0x080032d5
 8003300:	080032d5 	.word	0x080032d5
 8003304:	08003359 	.word	0x08003359
 8003308:	080032d5 	.word	0x080032d5
 800330c:	080032d5 	.word	0x080032d5
 8003310:	080032d5 	.word	0x080032d5
 8003314:	080032d5 	.word	0x080032d5
 8003318:	0800345d 	.word	0x0800345d
 800331c:	08003385 	.word	0x08003385
 8003320:	08003417 	.word	0x08003417
 8003324:	080032d5 	.word	0x080032d5
 8003328:	080032d5 	.word	0x080032d5
 800332c:	0800347f 	.word	0x0800347f
 8003330:	080032d5 	.word	0x080032d5
 8003334:	08003385 	.word	0x08003385
 8003338:	080032d5 	.word	0x080032d5
 800333c:	080032d5 	.word	0x080032d5
 8003340:	0800341f 	.word	0x0800341f
 8003344:	682b      	ldr	r3, [r5, #0]
 8003346:	1d1a      	adds	r2, r3, #4
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	602a      	str	r2, [r5, #0]
 800334c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003350:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003354:	2301      	movs	r3, #1
 8003356:	e09f      	b.n	8003498 <_printf_i+0x1ec>
 8003358:	6820      	ldr	r0, [r4, #0]
 800335a:	682b      	ldr	r3, [r5, #0]
 800335c:	0607      	lsls	r7, r0, #24
 800335e:	f103 0104 	add.w	r1, r3, #4
 8003362:	6029      	str	r1, [r5, #0]
 8003364:	d501      	bpl.n	800336a <_printf_i+0xbe>
 8003366:	681e      	ldr	r6, [r3, #0]
 8003368:	e003      	b.n	8003372 <_printf_i+0xc6>
 800336a:	0646      	lsls	r6, r0, #25
 800336c:	d5fb      	bpl.n	8003366 <_printf_i+0xba>
 800336e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003372:	2e00      	cmp	r6, #0
 8003374:	da03      	bge.n	800337e <_printf_i+0xd2>
 8003376:	232d      	movs	r3, #45	; 0x2d
 8003378:	4276      	negs	r6, r6
 800337a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800337e:	485a      	ldr	r0, [pc, #360]	; (80034e8 <_printf_i+0x23c>)
 8003380:	230a      	movs	r3, #10
 8003382:	e012      	b.n	80033aa <_printf_i+0xfe>
 8003384:	682b      	ldr	r3, [r5, #0]
 8003386:	6820      	ldr	r0, [r4, #0]
 8003388:	1d19      	adds	r1, r3, #4
 800338a:	6029      	str	r1, [r5, #0]
 800338c:	0605      	lsls	r5, r0, #24
 800338e:	d501      	bpl.n	8003394 <_printf_i+0xe8>
 8003390:	681e      	ldr	r6, [r3, #0]
 8003392:	e002      	b.n	800339a <_printf_i+0xee>
 8003394:	0641      	lsls	r1, r0, #25
 8003396:	d5fb      	bpl.n	8003390 <_printf_i+0xe4>
 8003398:	881e      	ldrh	r6, [r3, #0]
 800339a:	4853      	ldr	r0, [pc, #332]	; (80034e8 <_printf_i+0x23c>)
 800339c:	2f6f      	cmp	r7, #111	; 0x6f
 800339e:	bf0c      	ite	eq
 80033a0:	2308      	moveq	r3, #8
 80033a2:	230a      	movne	r3, #10
 80033a4:	2100      	movs	r1, #0
 80033a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80033aa:	6865      	ldr	r5, [r4, #4]
 80033ac:	60a5      	str	r5, [r4, #8]
 80033ae:	2d00      	cmp	r5, #0
 80033b0:	bfa2      	ittt	ge
 80033b2:	6821      	ldrge	r1, [r4, #0]
 80033b4:	f021 0104 	bicge.w	r1, r1, #4
 80033b8:	6021      	strge	r1, [r4, #0]
 80033ba:	b90e      	cbnz	r6, 80033c0 <_printf_i+0x114>
 80033bc:	2d00      	cmp	r5, #0
 80033be:	d04b      	beq.n	8003458 <_printf_i+0x1ac>
 80033c0:	4615      	mov	r5, r2
 80033c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80033c6:	fb03 6711 	mls	r7, r3, r1, r6
 80033ca:	5dc7      	ldrb	r7, [r0, r7]
 80033cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80033d0:	4637      	mov	r7, r6
 80033d2:	42bb      	cmp	r3, r7
 80033d4:	460e      	mov	r6, r1
 80033d6:	d9f4      	bls.n	80033c2 <_printf_i+0x116>
 80033d8:	2b08      	cmp	r3, #8
 80033da:	d10b      	bne.n	80033f4 <_printf_i+0x148>
 80033dc:	6823      	ldr	r3, [r4, #0]
 80033de:	07de      	lsls	r6, r3, #31
 80033e0:	d508      	bpl.n	80033f4 <_printf_i+0x148>
 80033e2:	6923      	ldr	r3, [r4, #16]
 80033e4:	6861      	ldr	r1, [r4, #4]
 80033e6:	4299      	cmp	r1, r3
 80033e8:	bfde      	ittt	le
 80033ea:	2330      	movle	r3, #48	; 0x30
 80033ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80033f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80033f4:	1b52      	subs	r2, r2, r5
 80033f6:	6122      	str	r2, [r4, #16]
 80033f8:	f8cd a000 	str.w	sl, [sp]
 80033fc:	464b      	mov	r3, r9
 80033fe:	aa03      	add	r2, sp, #12
 8003400:	4621      	mov	r1, r4
 8003402:	4640      	mov	r0, r8
 8003404:	f7ff fee4 	bl	80031d0 <_printf_common>
 8003408:	3001      	adds	r0, #1
 800340a:	d14a      	bne.n	80034a2 <_printf_i+0x1f6>
 800340c:	f04f 30ff 	mov.w	r0, #4294967295
 8003410:	b004      	add	sp, #16
 8003412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003416:	6823      	ldr	r3, [r4, #0]
 8003418:	f043 0320 	orr.w	r3, r3, #32
 800341c:	6023      	str	r3, [r4, #0]
 800341e:	4833      	ldr	r0, [pc, #204]	; (80034ec <_printf_i+0x240>)
 8003420:	2778      	movs	r7, #120	; 0x78
 8003422:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003426:	6823      	ldr	r3, [r4, #0]
 8003428:	6829      	ldr	r1, [r5, #0]
 800342a:	061f      	lsls	r7, r3, #24
 800342c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003430:	d402      	bmi.n	8003438 <_printf_i+0x18c>
 8003432:	065f      	lsls	r7, r3, #25
 8003434:	bf48      	it	mi
 8003436:	b2b6      	uxthmi	r6, r6
 8003438:	07df      	lsls	r7, r3, #31
 800343a:	bf48      	it	mi
 800343c:	f043 0320 	orrmi.w	r3, r3, #32
 8003440:	6029      	str	r1, [r5, #0]
 8003442:	bf48      	it	mi
 8003444:	6023      	strmi	r3, [r4, #0]
 8003446:	b91e      	cbnz	r6, 8003450 <_printf_i+0x1a4>
 8003448:	6823      	ldr	r3, [r4, #0]
 800344a:	f023 0320 	bic.w	r3, r3, #32
 800344e:	6023      	str	r3, [r4, #0]
 8003450:	2310      	movs	r3, #16
 8003452:	e7a7      	b.n	80033a4 <_printf_i+0xf8>
 8003454:	4824      	ldr	r0, [pc, #144]	; (80034e8 <_printf_i+0x23c>)
 8003456:	e7e4      	b.n	8003422 <_printf_i+0x176>
 8003458:	4615      	mov	r5, r2
 800345a:	e7bd      	b.n	80033d8 <_printf_i+0x12c>
 800345c:	682b      	ldr	r3, [r5, #0]
 800345e:	6826      	ldr	r6, [r4, #0]
 8003460:	6961      	ldr	r1, [r4, #20]
 8003462:	1d18      	adds	r0, r3, #4
 8003464:	6028      	str	r0, [r5, #0]
 8003466:	0635      	lsls	r5, r6, #24
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	d501      	bpl.n	8003470 <_printf_i+0x1c4>
 800346c:	6019      	str	r1, [r3, #0]
 800346e:	e002      	b.n	8003476 <_printf_i+0x1ca>
 8003470:	0670      	lsls	r0, r6, #25
 8003472:	d5fb      	bpl.n	800346c <_printf_i+0x1c0>
 8003474:	8019      	strh	r1, [r3, #0]
 8003476:	2300      	movs	r3, #0
 8003478:	6123      	str	r3, [r4, #16]
 800347a:	4615      	mov	r5, r2
 800347c:	e7bc      	b.n	80033f8 <_printf_i+0x14c>
 800347e:	682b      	ldr	r3, [r5, #0]
 8003480:	1d1a      	adds	r2, r3, #4
 8003482:	602a      	str	r2, [r5, #0]
 8003484:	681d      	ldr	r5, [r3, #0]
 8003486:	6862      	ldr	r2, [r4, #4]
 8003488:	2100      	movs	r1, #0
 800348a:	4628      	mov	r0, r5
 800348c:	f7fc fea8 	bl	80001e0 <memchr>
 8003490:	b108      	cbz	r0, 8003496 <_printf_i+0x1ea>
 8003492:	1b40      	subs	r0, r0, r5
 8003494:	6060      	str	r0, [r4, #4]
 8003496:	6863      	ldr	r3, [r4, #4]
 8003498:	6123      	str	r3, [r4, #16]
 800349a:	2300      	movs	r3, #0
 800349c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034a0:	e7aa      	b.n	80033f8 <_printf_i+0x14c>
 80034a2:	6923      	ldr	r3, [r4, #16]
 80034a4:	462a      	mov	r2, r5
 80034a6:	4649      	mov	r1, r9
 80034a8:	4640      	mov	r0, r8
 80034aa:	47d0      	blx	sl
 80034ac:	3001      	adds	r0, #1
 80034ae:	d0ad      	beq.n	800340c <_printf_i+0x160>
 80034b0:	6823      	ldr	r3, [r4, #0]
 80034b2:	079b      	lsls	r3, r3, #30
 80034b4:	d413      	bmi.n	80034de <_printf_i+0x232>
 80034b6:	68e0      	ldr	r0, [r4, #12]
 80034b8:	9b03      	ldr	r3, [sp, #12]
 80034ba:	4298      	cmp	r0, r3
 80034bc:	bfb8      	it	lt
 80034be:	4618      	movlt	r0, r3
 80034c0:	e7a6      	b.n	8003410 <_printf_i+0x164>
 80034c2:	2301      	movs	r3, #1
 80034c4:	4632      	mov	r2, r6
 80034c6:	4649      	mov	r1, r9
 80034c8:	4640      	mov	r0, r8
 80034ca:	47d0      	blx	sl
 80034cc:	3001      	adds	r0, #1
 80034ce:	d09d      	beq.n	800340c <_printf_i+0x160>
 80034d0:	3501      	adds	r5, #1
 80034d2:	68e3      	ldr	r3, [r4, #12]
 80034d4:	9903      	ldr	r1, [sp, #12]
 80034d6:	1a5b      	subs	r3, r3, r1
 80034d8:	42ab      	cmp	r3, r5
 80034da:	dcf2      	bgt.n	80034c2 <_printf_i+0x216>
 80034dc:	e7eb      	b.n	80034b6 <_printf_i+0x20a>
 80034de:	2500      	movs	r5, #0
 80034e0:	f104 0619 	add.w	r6, r4, #25
 80034e4:	e7f5      	b.n	80034d2 <_printf_i+0x226>
 80034e6:	bf00      	nop
 80034e8:	08003a6d 	.word	0x08003a6d
 80034ec:	08003a7e 	.word	0x08003a7e

080034f0 <__sflush_r>:
 80034f0:	898a      	ldrh	r2, [r1, #12]
 80034f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034f6:	4605      	mov	r5, r0
 80034f8:	0710      	lsls	r0, r2, #28
 80034fa:	460c      	mov	r4, r1
 80034fc:	d458      	bmi.n	80035b0 <__sflush_r+0xc0>
 80034fe:	684b      	ldr	r3, [r1, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	dc05      	bgt.n	8003510 <__sflush_r+0x20>
 8003504:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003506:	2b00      	cmp	r3, #0
 8003508:	dc02      	bgt.n	8003510 <__sflush_r+0x20>
 800350a:	2000      	movs	r0, #0
 800350c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003510:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003512:	2e00      	cmp	r6, #0
 8003514:	d0f9      	beq.n	800350a <__sflush_r+0x1a>
 8003516:	2300      	movs	r3, #0
 8003518:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800351c:	682f      	ldr	r7, [r5, #0]
 800351e:	6a21      	ldr	r1, [r4, #32]
 8003520:	602b      	str	r3, [r5, #0]
 8003522:	d032      	beq.n	800358a <__sflush_r+0x9a>
 8003524:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003526:	89a3      	ldrh	r3, [r4, #12]
 8003528:	075a      	lsls	r2, r3, #29
 800352a:	d505      	bpl.n	8003538 <__sflush_r+0x48>
 800352c:	6863      	ldr	r3, [r4, #4]
 800352e:	1ac0      	subs	r0, r0, r3
 8003530:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003532:	b10b      	cbz	r3, 8003538 <__sflush_r+0x48>
 8003534:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003536:	1ac0      	subs	r0, r0, r3
 8003538:	2300      	movs	r3, #0
 800353a:	4602      	mov	r2, r0
 800353c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800353e:	6a21      	ldr	r1, [r4, #32]
 8003540:	4628      	mov	r0, r5
 8003542:	47b0      	blx	r6
 8003544:	1c43      	adds	r3, r0, #1
 8003546:	89a3      	ldrh	r3, [r4, #12]
 8003548:	d106      	bne.n	8003558 <__sflush_r+0x68>
 800354a:	6829      	ldr	r1, [r5, #0]
 800354c:	291d      	cmp	r1, #29
 800354e:	d82b      	bhi.n	80035a8 <__sflush_r+0xb8>
 8003550:	4a29      	ldr	r2, [pc, #164]	; (80035f8 <__sflush_r+0x108>)
 8003552:	410a      	asrs	r2, r1
 8003554:	07d6      	lsls	r6, r2, #31
 8003556:	d427      	bmi.n	80035a8 <__sflush_r+0xb8>
 8003558:	2200      	movs	r2, #0
 800355a:	6062      	str	r2, [r4, #4]
 800355c:	04d9      	lsls	r1, r3, #19
 800355e:	6922      	ldr	r2, [r4, #16]
 8003560:	6022      	str	r2, [r4, #0]
 8003562:	d504      	bpl.n	800356e <__sflush_r+0x7e>
 8003564:	1c42      	adds	r2, r0, #1
 8003566:	d101      	bne.n	800356c <__sflush_r+0x7c>
 8003568:	682b      	ldr	r3, [r5, #0]
 800356a:	b903      	cbnz	r3, 800356e <__sflush_r+0x7e>
 800356c:	6560      	str	r0, [r4, #84]	; 0x54
 800356e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003570:	602f      	str	r7, [r5, #0]
 8003572:	2900      	cmp	r1, #0
 8003574:	d0c9      	beq.n	800350a <__sflush_r+0x1a>
 8003576:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800357a:	4299      	cmp	r1, r3
 800357c:	d002      	beq.n	8003584 <__sflush_r+0x94>
 800357e:	4628      	mov	r0, r5
 8003580:	f7ff fbea 	bl	8002d58 <_free_r>
 8003584:	2000      	movs	r0, #0
 8003586:	6360      	str	r0, [r4, #52]	; 0x34
 8003588:	e7c0      	b.n	800350c <__sflush_r+0x1c>
 800358a:	2301      	movs	r3, #1
 800358c:	4628      	mov	r0, r5
 800358e:	47b0      	blx	r6
 8003590:	1c41      	adds	r1, r0, #1
 8003592:	d1c8      	bne.n	8003526 <__sflush_r+0x36>
 8003594:	682b      	ldr	r3, [r5, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d0c5      	beq.n	8003526 <__sflush_r+0x36>
 800359a:	2b1d      	cmp	r3, #29
 800359c:	d001      	beq.n	80035a2 <__sflush_r+0xb2>
 800359e:	2b16      	cmp	r3, #22
 80035a0:	d101      	bne.n	80035a6 <__sflush_r+0xb6>
 80035a2:	602f      	str	r7, [r5, #0]
 80035a4:	e7b1      	b.n	800350a <__sflush_r+0x1a>
 80035a6:	89a3      	ldrh	r3, [r4, #12]
 80035a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035ac:	81a3      	strh	r3, [r4, #12]
 80035ae:	e7ad      	b.n	800350c <__sflush_r+0x1c>
 80035b0:	690f      	ldr	r7, [r1, #16]
 80035b2:	2f00      	cmp	r7, #0
 80035b4:	d0a9      	beq.n	800350a <__sflush_r+0x1a>
 80035b6:	0793      	lsls	r3, r2, #30
 80035b8:	680e      	ldr	r6, [r1, #0]
 80035ba:	bf08      	it	eq
 80035bc:	694b      	ldreq	r3, [r1, #20]
 80035be:	600f      	str	r7, [r1, #0]
 80035c0:	bf18      	it	ne
 80035c2:	2300      	movne	r3, #0
 80035c4:	eba6 0807 	sub.w	r8, r6, r7
 80035c8:	608b      	str	r3, [r1, #8]
 80035ca:	f1b8 0f00 	cmp.w	r8, #0
 80035ce:	dd9c      	ble.n	800350a <__sflush_r+0x1a>
 80035d0:	6a21      	ldr	r1, [r4, #32]
 80035d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80035d4:	4643      	mov	r3, r8
 80035d6:	463a      	mov	r2, r7
 80035d8:	4628      	mov	r0, r5
 80035da:	47b0      	blx	r6
 80035dc:	2800      	cmp	r0, #0
 80035de:	dc06      	bgt.n	80035ee <__sflush_r+0xfe>
 80035e0:	89a3      	ldrh	r3, [r4, #12]
 80035e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035e6:	81a3      	strh	r3, [r4, #12]
 80035e8:	f04f 30ff 	mov.w	r0, #4294967295
 80035ec:	e78e      	b.n	800350c <__sflush_r+0x1c>
 80035ee:	4407      	add	r7, r0
 80035f0:	eba8 0800 	sub.w	r8, r8, r0
 80035f4:	e7e9      	b.n	80035ca <__sflush_r+0xda>
 80035f6:	bf00      	nop
 80035f8:	dfbffffe 	.word	0xdfbffffe

080035fc <_fflush_r>:
 80035fc:	b538      	push	{r3, r4, r5, lr}
 80035fe:	690b      	ldr	r3, [r1, #16]
 8003600:	4605      	mov	r5, r0
 8003602:	460c      	mov	r4, r1
 8003604:	b913      	cbnz	r3, 800360c <_fflush_r+0x10>
 8003606:	2500      	movs	r5, #0
 8003608:	4628      	mov	r0, r5
 800360a:	bd38      	pop	{r3, r4, r5, pc}
 800360c:	b118      	cbz	r0, 8003616 <_fflush_r+0x1a>
 800360e:	6a03      	ldr	r3, [r0, #32]
 8003610:	b90b      	cbnz	r3, 8003616 <_fflush_r+0x1a>
 8003612:	f7ff fa99 	bl	8002b48 <__sinit>
 8003616:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0f3      	beq.n	8003606 <_fflush_r+0xa>
 800361e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003620:	07d0      	lsls	r0, r2, #31
 8003622:	d404      	bmi.n	800362e <_fflush_r+0x32>
 8003624:	0599      	lsls	r1, r3, #22
 8003626:	d402      	bmi.n	800362e <_fflush_r+0x32>
 8003628:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800362a:	f7ff fb92 	bl	8002d52 <__retarget_lock_acquire_recursive>
 800362e:	4628      	mov	r0, r5
 8003630:	4621      	mov	r1, r4
 8003632:	f7ff ff5d 	bl	80034f0 <__sflush_r>
 8003636:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003638:	07da      	lsls	r2, r3, #31
 800363a:	4605      	mov	r5, r0
 800363c:	d4e4      	bmi.n	8003608 <_fflush_r+0xc>
 800363e:	89a3      	ldrh	r3, [r4, #12]
 8003640:	059b      	lsls	r3, r3, #22
 8003642:	d4e1      	bmi.n	8003608 <_fflush_r+0xc>
 8003644:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003646:	f7ff fb85 	bl	8002d54 <__retarget_lock_release_recursive>
 800364a:	e7dd      	b.n	8003608 <_fflush_r+0xc>

0800364c <__swbuf_r>:
 800364c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800364e:	460e      	mov	r6, r1
 8003650:	4614      	mov	r4, r2
 8003652:	4605      	mov	r5, r0
 8003654:	b118      	cbz	r0, 800365e <__swbuf_r+0x12>
 8003656:	6a03      	ldr	r3, [r0, #32]
 8003658:	b90b      	cbnz	r3, 800365e <__swbuf_r+0x12>
 800365a:	f7ff fa75 	bl	8002b48 <__sinit>
 800365e:	69a3      	ldr	r3, [r4, #24]
 8003660:	60a3      	str	r3, [r4, #8]
 8003662:	89a3      	ldrh	r3, [r4, #12]
 8003664:	071a      	lsls	r2, r3, #28
 8003666:	d525      	bpl.n	80036b4 <__swbuf_r+0x68>
 8003668:	6923      	ldr	r3, [r4, #16]
 800366a:	b31b      	cbz	r3, 80036b4 <__swbuf_r+0x68>
 800366c:	6823      	ldr	r3, [r4, #0]
 800366e:	6922      	ldr	r2, [r4, #16]
 8003670:	1a98      	subs	r0, r3, r2
 8003672:	6963      	ldr	r3, [r4, #20]
 8003674:	b2f6      	uxtb	r6, r6
 8003676:	4283      	cmp	r3, r0
 8003678:	4637      	mov	r7, r6
 800367a:	dc04      	bgt.n	8003686 <__swbuf_r+0x3a>
 800367c:	4621      	mov	r1, r4
 800367e:	4628      	mov	r0, r5
 8003680:	f7ff ffbc 	bl	80035fc <_fflush_r>
 8003684:	b9e0      	cbnz	r0, 80036c0 <__swbuf_r+0x74>
 8003686:	68a3      	ldr	r3, [r4, #8]
 8003688:	3b01      	subs	r3, #1
 800368a:	60a3      	str	r3, [r4, #8]
 800368c:	6823      	ldr	r3, [r4, #0]
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	6022      	str	r2, [r4, #0]
 8003692:	701e      	strb	r6, [r3, #0]
 8003694:	6962      	ldr	r2, [r4, #20]
 8003696:	1c43      	adds	r3, r0, #1
 8003698:	429a      	cmp	r2, r3
 800369a:	d004      	beq.n	80036a6 <__swbuf_r+0x5a>
 800369c:	89a3      	ldrh	r3, [r4, #12]
 800369e:	07db      	lsls	r3, r3, #31
 80036a0:	d506      	bpl.n	80036b0 <__swbuf_r+0x64>
 80036a2:	2e0a      	cmp	r6, #10
 80036a4:	d104      	bne.n	80036b0 <__swbuf_r+0x64>
 80036a6:	4621      	mov	r1, r4
 80036a8:	4628      	mov	r0, r5
 80036aa:	f7ff ffa7 	bl	80035fc <_fflush_r>
 80036ae:	b938      	cbnz	r0, 80036c0 <__swbuf_r+0x74>
 80036b0:	4638      	mov	r0, r7
 80036b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036b4:	4621      	mov	r1, r4
 80036b6:	4628      	mov	r0, r5
 80036b8:	f000 f806 	bl	80036c8 <__swsetup_r>
 80036bc:	2800      	cmp	r0, #0
 80036be:	d0d5      	beq.n	800366c <__swbuf_r+0x20>
 80036c0:	f04f 37ff 	mov.w	r7, #4294967295
 80036c4:	e7f4      	b.n	80036b0 <__swbuf_r+0x64>
	...

080036c8 <__swsetup_r>:
 80036c8:	b538      	push	{r3, r4, r5, lr}
 80036ca:	4b2a      	ldr	r3, [pc, #168]	; (8003774 <__swsetup_r+0xac>)
 80036cc:	4605      	mov	r5, r0
 80036ce:	6818      	ldr	r0, [r3, #0]
 80036d0:	460c      	mov	r4, r1
 80036d2:	b118      	cbz	r0, 80036dc <__swsetup_r+0x14>
 80036d4:	6a03      	ldr	r3, [r0, #32]
 80036d6:	b90b      	cbnz	r3, 80036dc <__swsetup_r+0x14>
 80036d8:	f7ff fa36 	bl	8002b48 <__sinit>
 80036dc:	89a3      	ldrh	r3, [r4, #12]
 80036de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80036e2:	0718      	lsls	r0, r3, #28
 80036e4:	d422      	bmi.n	800372c <__swsetup_r+0x64>
 80036e6:	06d9      	lsls	r1, r3, #27
 80036e8:	d407      	bmi.n	80036fa <__swsetup_r+0x32>
 80036ea:	2309      	movs	r3, #9
 80036ec:	602b      	str	r3, [r5, #0]
 80036ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80036f2:	81a3      	strh	r3, [r4, #12]
 80036f4:	f04f 30ff 	mov.w	r0, #4294967295
 80036f8:	e034      	b.n	8003764 <__swsetup_r+0x9c>
 80036fa:	0758      	lsls	r0, r3, #29
 80036fc:	d512      	bpl.n	8003724 <__swsetup_r+0x5c>
 80036fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003700:	b141      	cbz	r1, 8003714 <__swsetup_r+0x4c>
 8003702:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003706:	4299      	cmp	r1, r3
 8003708:	d002      	beq.n	8003710 <__swsetup_r+0x48>
 800370a:	4628      	mov	r0, r5
 800370c:	f7ff fb24 	bl	8002d58 <_free_r>
 8003710:	2300      	movs	r3, #0
 8003712:	6363      	str	r3, [r4, #52]	; 0x34
 8003714:	89a3      	ldrh	r3, [r4, #12]
 8003716:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800371a:	81a3      	strh	r3, [r4, #12]
 800371c:	2300      	movs	r3, #0
 800371e:	6063      	str	r3, [r4, #4]
 8003720:	6923      	ldr	r3, [r4, #16]
 8003722:	6023      	str	r3, [r4, #0]
 8003724:	89a3      	ldrh	r3, [r4, #12]
 8003726:	f043 0308 	orr.w	r3, r3, #8
 800372a:	81a3      	strh	r3, [r4, #12]
 800372c:	6923      	ldr	r3, [r4, #16]
 800372e:	b94b      	cbnz	r3, 8003744 <__swsetup_r+0x7c>
 8003730:	89a3      	ldrh	r3, [r4, #12]
 8003732:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003736:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800373a:	d003      	beq.n	8003744 <__swsetup_r+0x7c>
 800373c:	4621      	mov	r1, r4
 800373e:	4628      	mov	r0, r5
 8003740:	f000 f850 	bl	80037e4 <__smakebuf_r>
 8003744:	89a0      	ldrh	r0, [r4, #12]
 8003746:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800374a:	f010 0301 	ands.w	r3, r0, #1
 800374e:	d00a      	beq.n	8003766 <__swsetup_r+0x9e>
 8003750:	2300      	movs	r3, #0
 8003752:	60a3      	str	r3, [r4, #8]
 8003754:	6963      	ldr	r3, [r4, #20]
 8003756:	425b      	negs	r3, r3
 8003758:	61a3      	str	r3, [r4, #24]
 800375a:	6923      	ldr	r3, [r4, #16]
 800375c:	b943      	cbnz	r3, 8003770 <__swsetup_r+0xa8>
 800375e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003762:	d1c4      	bne.n	80036ee <__swsetup_r+0x26>
 8003764:	bd38      	pop	{r3, r4, r5, pc}
 8003766:	0781      	lsls	r1, r0, #30
 8003768:	bf58      	it	pl
 800376a:	6963      	ldrpl	r3, [r4, #20]
 800376c:	60a3      	str	r3, [r4, #8]
 800376e:	e7f4      	b.n	800375a <__swsetup_r+0x92>
 8003770:	2000      	movs	r0, #0
 8003772:	e7f7      	b.n	8003764 <__swsetup_r+0x9c>
 8003774:	20000064 	.word	0x20000064

08003778 <_sbrk_r>:
 8003778:	b538      	push	{r3, r4, r5, lr}
 800377a:	4d06      	ldr	r5, [pc, #24]	; (8003794 <_sbrk_r+0x1c>)
 800377c:	2300      	movs	r3, #0
 800377e:	4604      	mov	r4, r0
 8003780:	4608      	mov	r0, r1
 8003782:	602b      	str	r3, [r5, #0]
 8003784:	f7fd fe74 	bl	8001470 <_sbrk>
 8003788:	1c43      	adds	r3, r0, #1
 800378a:	d102      	bne.n	8003792 <_sbrk_r+0x1a>
 800378c:	682b      	ldr	r3, [r5, #0]
 800378e:	b103      	cbz	r3, 8003792 <_sbrk_r+0x1a>
 8003790:	6023      	str	r3, [r4, #0]
 8003792:	bd38      	pop	{r3, r4, r5, pc}
 8003794:	20000254 	.word	0x20000254

08003798 <__swhatbuf_r>:
 8003798:	b570      	push	{r4, r5, r6, lr}
 800379a:	460c      	mov	r4, r1
 800379c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037a0:	2900      	cmp	r1, #0
 80037a2:	b096      	sub	sp, #88	; 0x58
 80037a4:	4615      	mov	r5, r2
 80037a6:	461e      	mov	r6, r3
 80037a8:	da0d      	bge.n	80037c6 <__swhatbuf_r+0x2e>
 80037aa:	89a3      	ldrh	r3, [r4, #12]
 80037ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 80037b0:	f04f 0100 	mov.w	r1, #0
 80037b4:	bf0c      	ite	eq
 80037b6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80037ba:	2340      	movne	r3, #64	; 0x40
 80037bc:	2000      	movs	r0, #0
 80037be:	6031      	str	r1, [r6, #0]
 80037c0:	602b      	str	r3, [r5, #0]
 80037c2:	b016      	add	sp, #88	; 0x58
 80037c4:	bd70      	pop	{r4, r5, r6, pc}
 80037c6:	466a      	mov	r2, sp
 80037c8:	f000 f848 	bl	800385c <_fstat_r>
 80037cc:	2800      	cmp	r0, #0
 80037ce:	dbec      	blt.n	80037aa <__swhatbuf_r+0x12>
 80037d0:	9901      	ldr	r1, [sp, #4]
 80037d2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80037d6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80037da:	4259      	negs	r1, r3
 80037dc:	4159      	adcs	r1, r3
 80037de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037e2:	e7eb      	b.n	80037bc <__swhatbuf_r+0x24>

080037e4 <__smakebuf_r>:
 80037e4:	898b      	ldrh	r3, [r1, #12]
 80037e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80037e8:	079d      	lsls	r5, r3, #30
 80037ea:	4606      	mov	r6, r0
 80037ec:	460c      	mov	r4, r1
 80037ee:	d507      	bpl.n	8003800 <__smakebuf_r+0x1c>
 80037f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80037f4:	6023      	str	r3, [r4, #0]
 80037f6:	6123      	str	r3, [r4, #16]
 80037f8:	2301      	movs	r3, #1
 80037fa:	6163      	str	r3, [r4, #20]
 80037fc:	b002      	add	sp, #8
 80037fe:	bd70      	pop	{r4, r5, r6, pc}
 8003800:	ab01      	add	r3, sp, #4
 8003802:	466a      	mov	r2, sp
 8003804:	f7ff ffc8 	bl	8003798 <__swhatbuf_r>
 8003808:	9900      	ldr	r1, [sp, #0]
 800380a:	4605      	mov	r5, r0
 800380c:	4630      	mov	r0, r6
 800380e:	f7ff fb0f 	bl	8002e30 <_malloc_r>
 8003812:	b948      	cbnz	r0, 8003828 <__smakebuf_r+0x44>
 8003814:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003818:	059a      	lsls	r2, r3, #22
 800381a:	d4ef      	bmi.n	80037fc <__smakebuf_r+0x18>
 800381c:	f023 0303 	bic.w	r3, r3, #3
 8003820:	f043 0302 	orr.w	r3, r3, #2
 8003824:	81a3      	strh	r3, [r4, #12]
 8003826:	e7e3      	b.n	80037f0 <__smakebuf_r+0xc>
 8003828:	89a3      	ldrh	r3, [r4, #12]
 800382a:	6020      	str	r0, [r4, #0]
 800382c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003830:	81a3      	strh	r3, [r4, #12]
 8003832:	9b00      	ldr	r3, [sp, #0]
 8003834:	6163      	str	r3, [r4, #20]
 8003836:	9b01      	ldr	r3, [sp, #4]
 8003838:	6120      	str	r0, [r4, #16]
 800383a:	b15b      	cbz	r3, 8003854 <__smakebuf_r+0x70>
 800383c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003840:	4630      	mov	r0, r6
 8003842:	f000 f81d 	bl	8003880 <_isatty_r>
 8003846:	b128      	cbz	r0, 8003854 <__smakebuf_r+0x70>
 8003848:	89a3      	ldrh	r3, [r4, #12]
 800384a:	f023 0303 	bic.w	r3, r3, #3
 800384e:	f043 0301 	orr.w	r3, r3, #1
 8003852:	81a3      	strh	r3, [r4, #12]
 8003854:	89a3      	ldrh	r3, [r4, #12]
 8003856:	431d      	orrs	r5, r3
 8003858:	81a5      	strh	r5, [r4, #12]
 800385a:	e7cf      	b.n	80037fc <__smakebuf_r+0x18>

0800385c <_fstat_r>:
 800385c:	b538      	push	{r3, r4, r5, lr}
 800385e:	4d07      	ldr	r5, [pc, #28]	; (800387c <_fstat_r+0x20>)
 8003860:	2300      	movs	r3, #0
 8003862:	4604      	mov	r4, r0
 8003864:	4608      	mov	r0, r1
 8003866:	4611      	mov	r1, r2
 8003868:	602b      	str	r3, [r5, #0]
 800386a:	f7fd fdd8 	bl	800141e <_fstat>
 800386e:	1c43      	adds	r3, r0, #1
 8003870:	d102      	bne.n	8003878 <_fstat_r+0x1c>
 8003872:	682b      	ldr	r3, [r5, #0]
 8003874:	b103      	cbz	r3, 8003878 <_fstat_r+0x1c>
 8003876:	6023      	str	r3, [r4, #0]
 8003878:	bd38      	pop	{r3, r4, r5, pc}
 800387a:	bf00      	nop
 800387c:	20000254 	.word	0x20000254

08003880 <_isatty_r>:
 8003880:	b538      	push	{r3, r4, r5, lr}
 8003882:	4d06      	ldr	r5, [pc, #24]	; (800389c <_isatty_r+0x1c>)
 8003884:	2300      	movs	r3, #0
 8003886:	4604      	mov	r4, r0
 8003888:	4608      	mov	r0, r1
 800388a:	602b      	str	r3, [r5, #0]
 800388c:	f7fd fdd7 	bl	800143e <_isatty>
 8003890:	1c43      	adds	r3, r0, #1
 8003892:	d102      	bne.n	800389a <_isatty_r+0x1a>
 8003894:	682b      	ldr	r3, [r5, #0]
 8003896:	b103      	cbz	r3, 800389a <_isatty_r+0x1a>
 8003898:	6023      	str	r3, [r4, #0]
 800389a:	bd38      	pop	{r3, r4, r5, pc}
 800389c:	20000254 	.word	0x20000254

080038a0 <_init>:
 80038a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038a2:	bf00      	nop
 80038a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038a6:	bc08      	pop	{r3}
 80038a8:	469e      	mov	lr, r3
 80038aa:	4770      	bx	lr

080038ac <_fini>:
 80038ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ae:	bf00      	nop
 80038b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038b2:	bc08      	pop	{r3}
 80038b4:	469e      	mov	lr, r3
 80038b6:	4770      	bx	lr
