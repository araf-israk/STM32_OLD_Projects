
08-DCMI2LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf28  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b2c  0800c1f8  0800c1f8  0001c1f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800cd24  0800cd24  0001cd24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800cd28  0800cd28  0001cd28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000f0  24000000  0800cd2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00009ef4  240000f0  0800ce1c  000200f0  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24009fe4  0800ce1c  00029fe4  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002011e  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f520  00000000  00000000  00020161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000450a  00000000  00000000  0003f681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017e0  00000000  00000000  00043b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001255  00000000  00000000  00045370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036ce3  00000000  00000000  000465c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002489e  00000000  00000000  0007d2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00153d48  00000000  00000000  000a1b46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00006754  00000000  00000000  001f5890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000004b  00000000  00000000  001fbfe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240000f0 	.word	0x240000f0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800c1e0 	.word	0x0800c1e0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240000f4 	.word	0x240000f4
 800030c:	0800c1e0 	.word	0x0800c1e0

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <board_button_init>:
---------------------------------------*/

#include "board.h"

void board_button_init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b086      	sub	sp, #24
 80003b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b6:	1d3b      	adds	r3, r7, #4
 80003b8:	2200      	movs	r2, #0
 80003ba:	601a      	str	r2, [r3, #0]
 80003bc:	605a      	str	r2, [r3, #4]
 80003be:	609a      	str	r2, [r3, #8]
 80003c0:	60da      	str	r2, [r3, #12]
 80003c2:	611a      	str	r2, [r3, #16]
  
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003c4:	4b0f      	ldr	r3, [pc, #60]	; (8000404 <board_button_init+0x54>)
 80003c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003ca:	4a0e      	ldr	r2, [pc, #56]	; (8000404 <board_button_init+0x54>)
 80003cc:	f043 0304 	orr.w	r3, r3, #4
 80003d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003d4:	4b0b      	ldr	r3, [pc, #44]	; (8000404 <board_button_init+0x54>)
 80003d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003da:	f003 0304 	and.w	r3, r3, #4
 80003de:	603b      	str	r3, [r7, #0]
 80003e0:	683b      	ldr	r3, [r7, #0]
  
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 80003e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003e8:	2300      	movs	r3, #0
 80003ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80003ec:	2302      	movs	r3, #2
 80003ee:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 80003f0:	1d3b      	adds	r3, r7, #4
 80003f2:	4619      	mov	r1, r3
 80003f4:	4804      	ldr	r0, [pc, #16]	; (8000408 <board_button_init+0x58>)
 80003f6:	f006 fd61 	bl	8006ebc <HAL_GPIO_Init>
}
 80003fa:	bf00      	nop
 80003fc:	3718      	adds	r7, #24
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	58024400 	.word	0x58024400
 8000408:	58020800 	.word	0x58020800

0800040c <board_led_init>:
{
  return HAL_GPIO_ReadPin(KEY_GPIO_Port,KEY_Pin)==GPIO_PIN_SET?1:0;
}

void board_led_init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b086      	sub	sp, #24
 8000410:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000412:	1d3b      	adds	r3, r7, #4
 8000414:	2200      	movs	r2, #0
 8000416:	601a      	str	r2, [r3, #0]
 8000418:	605a      	str	r2, [r3, #4]
 800041a:	609a      	str	r2, [r3, #8]
 800041c:	60da      	str	r2, [r3, #12]
 800041e:	611a      	str	r2, [r3, #16]
  
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000420:	4b12      	ldr	r3, [pc, #72]	; (800046c <board_led_init+0x60>)
 8000422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000426:	4a11      	ldr	r2, [pc, #68]	; (800046c <board_led_init+0x60>)
 8000428:	f043 0310 	orr.w	r3, r3, #16
 800042c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000430:	4b0e      	ldr	r3, [pc, #56]	; (800046c <board_led_init+0x60>)
 8000432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000436:	f003 0310 	and.w	r3, r3, #16
 800043a:	603b      	str	r3, [r7, #0]
 800043c:	683b      	ldr	r3, [r7, #0]
  
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800043e:	2200      	movs	r2, #0
 8000440:	2108      	movs	r1, #8
 8000442:	480b      	ldr	r0, [pc, #44]	; (8000470 <board_led_init+0x64>)
 8000444:	f006 fefa 	bl	800723c <HAL_GPIO_WritePin>
  
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000448:	2308      	movs	r3, #8
 800044a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044c:	2301      	movs	r3, #1
 800044e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000450:	2300      	movs	r3, #0
 8000452:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000454:	2300      	movs	r3, #0
 8000456:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000458:	1d3b      	adds	r3, r7, #4
 800045a:	4619      	mov	r1, r3
 800045c:	4804      	ldr	r0, [pc, #16]	; (8000470 <board_led_init+0x64>)
 800045e:	f006 fd2d 	bl	8006ebc <HAL_GPIO_Init>
}
 8000462:	bf00      	nop
 8000464:	3718      	adds	r7, #24
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	58024400 	.word	0x58024400
 8000470:	58021000 	.word	0x58021000

08000474 <board_led_toggle>:

void board_led_toggle(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);
 8000478:	2108      	movs	r1, #8
 800047a:	4802      	ldr	r0, [pc, #8]	; (8000484 <board_led_toggle+0x10>)
 800047c:	f006 fef7 	bl	800726e <HAL_GPIO_TogglePin>
}
 8000480:	bf00      	nop
 8000482:	bd80      	pop	{r7, pc}
 8000484:	58021000 	.word	0x58021000

08000488 <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 800048c:	4b16      	ldr	r3, [pc, #88]	; (80004e8 <MX_DCMI_Init+0x60>)
 800048e:	4a17      	ldr	r2, [pc, #92]	; (80004ec <MX_DCMI_Init+0x64>)
 8000490:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000492:	4b15      	ldr	r3, [pc, #84]	; (80004e8 <MX_DCMI_Init+0x60>)
 8000494:	2200      	movs	r2, #0
 8000496:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000498:	4b13      	ldr	r3, [pc, #76]	; (80004e8 <MX_DCMI_Init+0x60>)
 800049a:	2220      	movs	r2, #32
 800049c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800049e:	4b12      	ldr	r3, [pc, #72]	; (80004e8 <MX_DCMI_Init+0x60>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80004a4:	4b10      	ldr	r3, [pc, #64]	; (80004e8 <MX_DCMI_Init+0x60>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80004aa:	4b0f      	ldr	r3, [pc, #60]	; (80004e8 <MX_DCMI_Init+0x60>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80004b0:	4b0d      	ldr	r3, [pc, #52]	; (80004e8 <MX_DCMI_Init+0x60>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80004b6:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <MX_DCMI_Init+0x60>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80004bc:	4b0a      	ldr	r3, [pc, #40]	; (80004e8 <MX_DCMI_Init+0x60>)
 80004be:	2200      	movs	r2, #0
 80004c0:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80004c2:	4b09      	ldr	r3, [pc, #36]	; (80004e8 <MX_DCMI_Init+0x60>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80004c8:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <MX_DCMI_Init+0x60>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80004ce:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <MX_DCMI_Init+0x60>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80004d4:	4804      	ldr	r0, [pc, #16]	; (80004e8 <MX_DCMI_Init+0x60>)
 80004d6:	f003 fa9b 	bl	8003a10 <HAL_DCMI_Init>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80004e0:	f001 f99c 	bl	800181c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80004e4:	bf00      	nop
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	24000120 	.word	0x24000120
 80004ec:	48020000 	.word	0x48020000

080004f0 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b08e      	sub	sp, #56	; 0x38
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	605a      	str	r2, [r3, #4]
 8000502:	609a      	str	r2, [r3, #8]
 8000504:	60da      	str	r2, [r3, #12]
 8000506:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a75      	ldr	r2, [pc, #468]	; (80006e4 <HAL_DCMI_MspInit+0x1f4>)
 800050e:	4293      	cmp	r3, r2
 8000510:	f040 80e3 	bne.w	80006da <HAL_DCMI_MspInit+0x1ea>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000514:	4b74      	ldr	r3, [pc, #464]	; (80006e8 <HAL_DCMI_MspInit+0x1f8>)
 8000516:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800051a:	4a73      	ldr	r2, [pc, #460]	; (80006e8 <HAL_DCMI_MspInit+0x1f8>)
 800051c:	f043 0301 	orr.w	r3, r3, #1
 8000520:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000524:	4b70      	ldr	r3, [pc, #448]	; (80006e8 <HAL_DCMI_MspInit+0x1f8>)
 8000526:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	623b      	str	r3, [r7, #32]
 8000530:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000532:	4b6d      	ldr	r3, [pc, #436]	; (80006e8 <HAL_DCMI_MspInit+0x1f8>)
 8000534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000538:	4a6b      	ldr	r2, [pc, #428]	; (80006e8 <HAL_DCMI_MspInit+0x1f8>)
 800053a:	f043 0310 	orr.w	r3, r3, #16
 800053e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000542:	4b69      	ldr	r3, [pc, #420]	; (80006e8 <HAL_DCMI_MspInit+0x1f8>)
 8000544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000548:	f003 0310 	and.w	r3, r3, #16
 800054c:	61fb      	str	r3, [r7, #28]
 800054e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000550:	4b65      	ldr	r3, [pc, #404]	; (80006e8 <HAL_DCMI_MspInit+0x1f8>)
 8000552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000556:	4a64      	ldr	r2, [pc, #400]	; (80006e8 <HAL_DCMI_MspInit+0x1f8>)
 8000558:	f043 0301 	orr.w	r3, r3, #1
 800055c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000560:	4b61      	ldr	r3, [pc, #388]	; (80006e8 <HAL_DCMI_MspInit+0x1f8>)
 8000562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	61bb      	str	r3, [r7, #24]
 800056c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800056e:	4b5e      	ldr	r3, [pc, #376]	; (80006e8 <HAL_DCMI_MspInit+0x1f8>)
 8000570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000574:	4a5c      	ldr	r2, [pc, #368]	; (80006e8 <HAL_DCMI_MspInit+0x1f8>)
 8000576:	f043 0304 	orr.w	r3, r3, #4
 800057a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800057e:	4b5a      	ldr	r3, [pc, #360]	; (80006e8 <HAL_DCMI_MspInit+0x1f8>)
 8000580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000584:	f003 0304 	and.w	r3, r3, #4
 8000588:	617b      	str	r3, [r7, #20]
 800058a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800058c:	4b56      	ldr	r3, [pc, #344]	; (80006e8 <HAL_DCMI_MspInit+0x1f8>)
 800058e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000592:	4a55      	ldr	r2, [pc, #340]	; (80006e8 <HAL_DCMI_MspInit+0x1f8>)
 8000594:	f043 0308 	orr.w	r3, r3, #8
 8000598:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800059c:	4b52      	ldr	r3, [pc, #328]	; (80006e8 <HAL_DCMI_MspInit+0x1f8>)
 800059e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005a2:	f003 0308 	and.w	r3, r3, #8
 80005a6:	613b      	str	r3, [r7, #16]
 80005a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005aa:	4b4f      	ldr	r3, [pc, #316]	; (80006e8 <HAL_DCMI_MspInit+0x1f8>)
 80005ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005b0:	4a4d      	ldr	r2, [pc, #308]	; (80006e8 <HAL_DCMI_MspInit+0x1f8>)
 80005b2:	f043 0302 	orr.w	r3, r3, #2
 80005b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005ba:	4b4b      	ldr	r3, [pc, #300]	; (80006e8 <HAL_DCMI_MspInit+0x1f8>)
 80005bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005c0:	f003 0302 	and.w	r3, r3, #2
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PE0     ------> DCMI_D2
    PE1     ------> DCMI_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0
 80005c8:	2373      	movs	r3, #115	; 0x73
 80005ca:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005cc:	2302      	movs	r3, #2
 80005ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d0:	2300      	movs	r3, #0
 80005d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d4:	2300      	movs	r3, #0
 80005d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80005d8:	230d      	movs	r3, #13
 80005da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005e0:	4619      	mov	r1, r3
 80005e2:	4842      	ldr	r0, [pc, #264]	; (80006ec <HAL_DCMI_MspInit+0x1fc>)
 80005e4:	f006 fc6a 	bl	8006ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80005e8:	2350      	movs	r3, #80	; 0x50
 80005ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ec:	2302      	movs	r3, #2
 80005ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	2300      	movs	r3, #0
 80005f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f4:	2300      	movs	r3, #0
 80005f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80005f8:	230d      	movs	r3, #13
 80005fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000600:	4619      	mov	r1, r3
 8000602:	483b      	ldr	r0, [pc, #236]	; (80006f0 <HAL_DCMI_MspInit+0x200>)
 8000604:	f006 fc5a 	bl	8006ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000608:	23c0      	movs	r3, #192	; 0xc0
 800060a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800060c:	2302      	movs	r3, #2
 800060e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	2300      	movs	r3, #0
 8000612:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000614:	2300      	movs	r3, #0
 8000616:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000618:	230d      	movs	r3, #13
 800061a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800061c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000620:	4619      	mov	r1, r3
 8000622:	4834      	ldr	r0, [pc, #208]	; (80006f4 <HAL_DCMI_MspInit+0x204>)
 8000624:	f006 fc4a 	bl	8006ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000628:	2308      	movs	r3, #8
 800062a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062c:	2302      	movs	r3, #2
 800062e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000634:	2300      	movs	r3, #0
 8000636:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000638:	230d      	movs	r3, #13
 800063a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800063c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000640:	4619      	mov	r1, r3
 8000642:	482d      	ldr	r0, [pc, #180]	; (80006f8 <HAL_DCMI_MspInit+0x208>)
 8000644:	f006 fc3a 	bl	8006ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000648:	2380      	movs	r3, #128	; 0x80
 800064a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800064c:	2302      	movs	r3, #2
 800064e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000654:	2300      	movs	r3, #0
 8000656:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000658:	230d      	movs	r3, #13
 800065a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800065c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000660:	4619      	mov	r1, r3
 8000662:	4826      	ldr	r0, [pc, #152]	; (80006fc <HAL_DCMI_MspInit+0x20c>)
 8000664:	f006 fc2a 	bl	8006ebc <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 8000668:	4b25      	ldr	r3, [pc, #148]	; (8000700 <HAL_DCMI_MspInit+0x210>)
 800066a:	4a26      	ldr	r2, [pc, #152]	; (8000704 <HAL_DCMI_MspInit+0x214>)
 800066c:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI_PSSI;
 800066e:	4b24      	ldr	r3, [pc, #144]	; (8000700 <HAL_DCMI_MspInit+0x210>)
 8000670:	224b      	movs	r2, #75	; 0x4b
 8000672:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000674:	4b22      	ldr	r3, [pc, #136]	; (8000700 <HAL_DCMI_MspInit+0x210>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 800067a:	4b21      	ldr	r3, [pc, #132]	; (8000700 <HAL_DCMI_MspInit+0x210>)
 800067c:	2200      	movs	r2, #0
 800067e:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8000680:	4b1f      	ldr	r3, [pc, #124]	; (8000700 <HAL_DCMI_MspInit+0x210>)
 8000682:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000686:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000688:	4b1d      	ldr	r3, [pc, #116]	; (8000700 <HAL_DCMI_MspInit+0x210>)
 800068a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800068e:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000690:	4b1b      	ldr	r3, [pc, #108]	; (8000700 <HAL_DCMI_MspInit+0x210>)
 8000692:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000696:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8000698:	4b19      	ldr	r3, [pc, #100]	; (8000700 <HAL_DCMI_MspInit+0x210>)
 800069a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800069e:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_MEDIUM;
 80006a0:	4b17      	ldr	r3, [pc, #92]	; (8000700 <HAL_DCMI_MspInit+0x210>)
 80006a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006a6:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006a8:	4b15      	ldr	r3, [pc, #84]	; (8000700 <HAL_DCMI_MspInit+0x210>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80006ae:	4814      	ldr	r0, [pc, #80]	; (8000700 <HAL_DCMI_MspInit+0x210>)
 80006b0:	f003 fc3a 	bl	8003f28 <HAL_DMA_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <HAL_DCMI_MspInit+0x1ce>
    {
      Error_Handler();
 80006ba:	f001 f8af 	bl	800181c <Error_Handler>
    }

    __HAL_LINKDMA(dcmiHandle,DMA_Handle,hdma_dcmi);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4a0f      	ldr	r2, [pc, #60]	; (8000700 <HAL_DCMI_MspInit+0x210>)
 80006c2:	649a      	str	r2, [r3, #72]	; 0x48
 80006c4:	4a0e      	ldr	r2, [pc, #56]	; (8000700 <HAL_DCMI_MspInit+0x210>)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_PSSI_IRQn, 0, 0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2100      	movs	r1, #0
 80006ce:	204e      	movs	r0, #78	; 0x4e
 80006d0:	f003 f8ed 	bl	80038ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_PSSI_IRQn);
 80006d4:	204e      	movs	r0, #78	; 0x4e
 80006d6:	f003 f904 	bl	80038e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 80006da:	bf00      	nop
 80006dc:	3738      	adds	r7, #56	; 0x38
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	48020000 	.word	0x48020000
 80006e8:	58024400 	.word	0x58024400
 80006ec:	58021000 	.word	0x58021000
 80006f0:	58020000 	.word	0x58020000
 80006f4:	58020800 	.word	0x58020800
 80006f8:	58020c00 	.word	0x58020c00
 80006fc:	58020400 	.word	0x58020400
 8000700:	24000170 	.word	0x24000170
 8000704:	40020010 	.word	0x40020010

08000708 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800070e:	4b0d      	ldr	r3, [pc, #52]	; (8000744 <MX_DMA_Init+0x3c>)
 8000710:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000714:	4a0b      	ldr	r2, [pc, #44]	; (8000744 <MX_DMA_Init+0x3c>)
 8000716:	f043 0301 	orr.w	r3, r3, #1
 800071a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_DMA_Init+0x3c>)
 8000720:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000724:	f003 0301 	and.w	r3, r3, #1
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800072c:	2200      	movs	r2, #0
 800072e:	2100      	movs	r1, #0
 8000730:	200b      	movs	r0, #11
 8000732:	f003 f8bc 	bl	80038ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000736:	200b      	movs	r0, #11
 8000738:	f003 f8d3 	bl	80038e2 <HAL_NVIC_EnableIRQ>

}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	58024400 	.word	0x58024400

08000748 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO_1
*/
void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08c      	sub	sp, #48	; 0x30
 800074c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800075e:	4b42      	ldr	r3, [pc, #264]	; (8000868 <MX_GPIO_Init+0x120>)
 8000760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000764:	4a40      	ldr	r2, [pc, #256]	; (8000868 <MX_GPIO_Init+0x120>)
 8000766:	f043 0310 	orr.w	r3, r3, #16
 800076a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800076e:	4b3e      	ldr	r3, [pc, #248]	; (8000868 <MX_GPIO_Init+0x120>)
 8000770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000774:	f003 0310 	and.w	r3, r3, #16
 8000778:	61bb      	str	r3, [r7, #24]
 800077a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077c:	4b3a      	ldr	r3, [pc, #232]	; (8000868 <MX_GPIO_Init+0x120>)
 800077e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000782:	4a39      	ldr	r2, [pc, #228]	; (8000868 <MX_GPIO_Init+0x120>)
 8000784:	f043 0304 	orr.w	r3, r3, #4
 8000788:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800078c:	4b36      	ldr	r3, [pc, #216]	; (8000868 <MX_GPIO_Init+0x120>)
 800078e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000792:	f003 0304 	and.w	r3, r3, #4
 8000796:	617b      	str	r3, [r7, #20]
 8000798:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079a:	4b33      	ldr	r3, [pc, #204]	; (8000868 <MX_GPIO_Init+0x120>)
 800079c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a0:	4a31      	ldr	r2, [pc, #196]	; (8000868 <MX_GPIO_Init+0x120>)
 80007a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007aa:	4b2f      	ldr	r3, [pc, #188]	; (8000868 <MX_GPIO_Init+0x120>)
 80007ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b8:	4b2b      	ldr	r3, [pc, #172]	; (8000868 <MX_GPIO_Init+0x120>)
 80007ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007be:	4a2a      	ldr	r2, [pc, #168]	; (8000868 <MX_GPIO_Init+0x120>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007c8:	4b27      	ldr	r3, [pc, #156]	; (8000868 <MX_GPIO_Init+0x120>)
 80007ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d6:	4b24      	ldr	r3, [pc, #144]	; (8000868 <MX_GPIO_Init+0x120>)
 80007d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007dc:	4a22      	ldr	r2, [pc, #136]	; (8000868 <MX_GPIO_Init+0x120>)
 80007de:	f043 0308 	orr.w	r3, r3, #8
 80007e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007e6:	4b20      	ldr	r3, [pc, #128]	; (8000868 <MX_GPIO_Init+0x120>)
 80007e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ec:	f003 0308 	and.w	r3, r3, #8
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f4:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <MX_GPIO_Init+0x120>)
 80007f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fa:	4a1b      	ldr	r2, [pc, #108]	; (8000868 <MX_GPIO_Init+0x120>)
 80007fc:	f043 0302 	orr.w	r3, r3, #2
 8000800:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000804:	4b18      	ldr	r3, [pc, #96]	; (8000868 <MX_GPIO_Init+0x120>)
 8000806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800080a:	f003 0302 	and.w	r3, r3, #2
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_CS_Pin|LCD_WR_RS_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8000818:	4814      	ldr	r0, [pc, #80]	; (800086c <MX_GPIO_Init+0x124>)
 800081a:	f006 fd0f 	bl	800723c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_WR_RS_Pin;
 800081e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800082c:	2301      	movs	r3, #1
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000830:	f107 031c 	add.w	r3, r7, #28
 8000834:	4619      	mov	r1, r3
 8000836:	480d      	ldr	r0, [pc, #52]	; (800086c <MX_GPIO_Init+0x124>)
 8000838:	f006 fb40 	bl	8006ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800083c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000842:	2302      	movs	r3, #2
 8000844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800084e:	2300      	movs	r3, #0
 8000850:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	4619      	mov	r1, r3
 8000858:	4805      	ldr	r0, [pc, #20]	; (8000870 <MX_GPIO_Init+0x128>)
 800085a:	f006 fb2f 	bl	8006ebc <HAL_GPIO_Init>

}
 800085e:	bf00      	nop
 8000860:	3730      	adds	r7, #48	; 0x30
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	58024400 	.word	0x58024400
 800086c:	58021000 	.word	0x58021000
 8000870:	58020000 	.word	0x58020000

08000874 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000878:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <MX_I2C1_Init+0x74>)
 800087a:	4a1c      	ldr	r2, [pc, #112]	; (80008ec <MX_I2C1_Init+0x78>)
 800087c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60404E72;
 800087e:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <MX_I2C1_Init+0x74>)
 8000880:	4a1b      	ldr	r2, [pc, #108]	; (80008f0 <MX_I2C1_Init+0x7c>)
 8000882:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000884:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <MX_I2C1_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800088a:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <MX_I2C1_Init+0x74>)
 800088c:	2201      	movs	r2, #1
 800088e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000890:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <MX_I2C1_Init+0x74>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_I2C1_Init+0x74>)
 8000898:	2200      	movs	r2, #0
 800089a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <MX_I2C1_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_I2C1_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_I2C1_Init+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008ae:	480e      	ldr	r0, [pc, #56]	; (80008e8 <MX_I2C1_Init+0x74>)
 80008b0:	f006 fcf8 	bl	80072a4 <HAL_I2C_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008ba:	f000 ffaf 	bl	800181c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008be:	2100      	movs	r1, #0
 80008c0:	4809      	ldr	r0, [pc, #36]	; (80008e8 <MX_I2C1_Init+0x74>)
 80008c2:	f006 fd7f 	bl	80073c4 <HAL_I2CEx_ConfigAnalogFilter>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008cc:	f000 ffa6 	bl	800181c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008d0:	2100      	movs	r1, #0
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_I2C1_Init+0x74>)
 80008d4:	f006 fdc1 	bl	800745a <HAL_I2CEx_ConfigDigitalFilter>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008de:	f000 ff9d 	bl	800181c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	240001e8 	.word	0x240001e8
 80008ec:	40005400 	.word	0x40005400
 80008f0:	60404e72 	.word	0x60404e72

080008f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b0b8      	sub	sp, #224	; 0xe0
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800090c:	f107 0310 	add.w	r3, r7, #16
 8000910:	22b8      	movs	r2, #184	; 0xb8
 8000912:	2100      	movs	r1, #0
 8000914:	4618      	mov	r0, r3
 8000916:	f00a ffdf 	bl	800b8d8 <memset>
  if(i2cHandle->Instance==I2C1)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a27      	ldr	r2, [pc, #156]	; (80009bc <HAL_I2C_MspInit+0xc8>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d146      	bne.n	80009b2 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000924:	f04f 0208 	mov.w	r2, #8
 8000928:	f04f 0300 	mov.w	r3, #0
 800092c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8000930:	2300      	movs	r3, #0
 8000932:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000936:	f107 0310 	add.w	r3, r7, #16
 800093a:	4618      	mov	r0, r3
 800093c:	f007 fd98 	bl	8008470 <HAL_RCCEx_PeriphCLKConfig>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000946:	f000 ff69 	bl	800181c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <HAL_I2C_MspInit+0xcc>)
 800094c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000950:	4a1b      	ldr	r2, [pc, #108]	; (80009c0 <HAL_I2C_MspInit+0xcc>)
 8000952:	f043 0302 	orr.w	r3, r3, #2
 8000956:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800095a:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <HAL_I2C_MspInit+0xcc>)
 800095c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000960:	f003 0302 	and.w	r3, r3, #2
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000968:	f44f 7340 	mov.w	r3, #768	; 0x300
 800096c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000970:	2312      	movs	r3, #18
 8000972:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	2300      	movs	r3, #0
 800097e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000982:	2304      	movs	r3, #4
 8000984:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000988:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800098c:	4619      	mov	r1, r3
 800098e:	480d      	ldr	r0, [pc, #52]	; (80009c4 <HAL_I2C_MspInit+0xd0>)
 8000990:	f006 fa94 	bl	8006ebc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000994:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <HAL_I2C_MspInit+0xcc>)
 8000996:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800099a:	4a09      	ldr	r2, [pc, #36]	; (80009c0 <HAL_I2C_MspInit+0xcc>)
 800099c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009a0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <HAL_I2C_MspInit+0xcc>)
 80009a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80009aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80009b2:	bf00      	nop
 80009b4:	37e0      	adds	r7, #224	; 0xe0
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40005400 	.word	0x40005400
 80009c0:	58024400 	.word	0x58024400
 80009c4:	58020400 	.word	0x58020400

080009c8 <LCD_Test>:

ST7735_Object_t st7735_pObj;
uint32_t st7735_id;

void LCD_Test(void)
{
 80009c8:	b5b0      	push	{r4, r5, r7, lr}
 80009ca:	b088      	sub	sp, #32
 80009cc:	af02      	add	r7, sp, #8
//	#else
//	error "Unknown Screen"
//
	#endif
	
	ST7735_RegisterBusIO(&st7735_pObj,&st7735_pIO);
 80009ce:	4975      	ldr	r1, [pc, #468]	; (8000ba4 <LCD_Test+0x1dc>)
 80009d0:	4875      	ldr	r0, [pc, #468]	; (8000ba8 <LCD_Test+0x1e0>)
 80009d2:	f001 f877 	bl	8001ac4 <ST7735_RegisterBusIO>
	ST7735_LCD_Driver.Init(&st7735_pObj,ST7735_FORMAT_RBG565,&ST7735Ctx);
 80009d6:	4b75      	ldr	r3, [pc, #468]	; (8000bac <LCD_Test+0x1e4>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a75      	ldr	r2, [pc, #468]	; (8000bb0 <LCD_Test+0x1e8>)
 80009dc:	2105      	movs	r1, #5
 80009de:	4872      	ldr	r0, [pc, #456]	; (8000ba8 <LCD_Test+0x1e0>)
 80009e0:	4798      	blx	r3
	ST7735_LCD_Driver.ReadID(&st7735_pObj,&st7735_id);
 80009e2:	4b72      	ldr	r3, [pc, #456]	; (8000bac <LCD_Test+0x1e4>)
 80009e4:	689b      	ldr	r3, [r3, #8]
 80009e6:	4973      	ldr	r1, [pc, #460]	; (8000bb4 <LCD_Test+0x1ec>)
 80009e8:	486f      	ldr	r0, [pc, #444]	; (8000ba8 <LCD_Test+0x1e0>)
 80009ea:	4798      	blx	r3
	
	LCD_SetBrightness(0);
 80009ec:	2000      	movs	r0, #0
 80009ee:	f000 f8f1 	bl	8000bd4 <LCD_SetBrightness>
	#elif TFT18
	extern unsigned char WeActStudiologo_128_160[];
	ST7735_LCD_Driver.DrawBitmap(&st7735_pObj,0,0,WeActStudiologo_128_160);
	#endif
	
  uint32_t tick = get_tick();
 80009f2:	f002 fe43 	bl	800367c <HAL_GetTick>
 80009f6:	6178      	str	r0, [r7, #20]
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET)
 80009f8:	e06a      	b.n	8000ad0 <LCD_Test+0x108>
	{
		delay_ms(10);
 80009fa:	200a      	movs	r0, #10
 80009fc:	f002 fe4a 	bl	8003694 <HAL_Delay>

		if (get_tick() - tick <= 1000)
 8000a00:	f002 fe3c 	bl	800367c <HAL_GetTick>
 8000a04:	4602      	mov	r2, r0
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a0e:	d80f      	bhi.n	8000a30 <LCD_Test+0x68>
			LCD_SetBrightness((get_tick() - tick) * 100 / 1000);
 8000a10:	f002 fe34 	bl	800367c <HAL_GetTick>
 8000a14:	4602      	mov	r2, r0
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	2264      	movs	r2, #100	; 0x64
 8000a1c:	fb02 f303 	mul.w	r3, r2, r3
 8000a20:	4a65      	ldr	r2, [pc, #404]	; (8000bb8 <LCD_Test+0x1f0>)
 8000a22:	fba2 2303 	umull	r2, r3, r2, r3
 8000a26:	099b      	lsrs	r3, r3, #6
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f000 f8d3 	bl	8000bd4 <LCD_SetBrightness>
 8000a2e:	e04f      	b.n	8000ad0 <LCD_Test+0x108>
		else if (get_tick() - tick <= 3000)
 8000a30:	f002 fe24 	bl	800367c <HAL_GetTick>
 8000a34:	4602      	mov	r2, r0
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	1ad3      	subs	r3, r2, r3
 8000a3a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d83d      	bhi.n	8000abe <LCD_Test+0xf6>
		{
			sprintf((char *)&text, "%03d", (get_tick() - tick - 1000) / 10);
 8000a42:	f002 fe1b 	bl	800367c <HAL_GetTick>
 8000a46:	4602      	mov	r2, r0
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	1ad3      	subs	r3, r2, r3
 8000a4c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000a50:	4a5a      	ldr	r2, [pc, #360]	; (8000bbc <LCD_Test+0x1f4>)
 8000a52:	fba2 2303 	umull	r2, r3, r2, r3
 8000a56:	08da      	lsrs	r2, r3, #3
 8000a58:	463b      	mov	r3, r7
 8000a5a:	4959      	ldr	r1, [pc, #356]	; (8000bc0 <LCD_Test+0x1f8>)
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f00a ff1b 	bl	800b898 <siprintf>
			LCD_ShowString(ST7735Ctx.Width - 30, 1, ST7735Ctx.Width, 16, 16, text);
 8000a62:	4b53      	ldr	r3, [pc, #332]	; (8000bb0 <LCD_Test+0x1e8>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	3b1e      	subs	r3, #30
 8000a6a:	b298      	uxth	r0, r3
 8000a6c:	4b50      	ldr	r3, [pc, #320]	; (8000bb0 <LCD_Test+0x1e8>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	b29a      	uxth	r2, r3
 8000a72:	463b      	mov	r3, r7
 8000a74:	9301      	str	r3, [sp, #4]
 8000a76:	2310      	movs	r3, #16
 8000a78:	9300      	str	r3, [sp, #0]
 8000a7a:	2310      	movs	r3, #16
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	f000 fb4d 	bl	800111c <LCD_ShowString>
			ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, ST7735Ctx.Height - 3, (get_tick() - tick - 1000) * ST7735Ctx.Width / 2000, 3, 0xFFFF);
 8000a82:	4b4a      	ldr	r3, [pc, #296]	; (8000bac <LCD_Test+0x1e4>)
 8000a84:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8000a86:	4b4a      	ldr	r3, [pc, #296]	; (8000bb0 <LCD_Test+0x1e8>)
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	1edd      	subs	r5, r3, #3
 8000a8c:	f002 fdf6 	bl	800367c <HAL_GetTick>
 8000a90:	4602      	mov	r2, r0
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000a9a:	4a45      	ldr	r2, [pc, #276]	; (8000bb0 <LCD_Test+0x1e8>)
 8000a9c:	6812      	ldr	r2, [r2, #0]
 8000a9e:	fb02 f303 	mul.w	r3, r2, r3
 8000aa2:	4a45      	ldr	r2, [pc, #276]	; (8000bb8 <LCD_Test+0x1f0>)
 8000aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa8:	09db      	lsrs	r3, r3, #7
 8000aaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000aae:	9201      	str	r2, [sp, #4]
 8000ab0:	2203      	movs	r2, #3
 8000ab2:	9200      	str	r2, [sp, #0]
 8000ab4:	462a      	mov	r2, r5
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	483b      	ldr	r0, [pc, #236]	; (8000ba8 <LCD_Test+0x1e0>)
 8000aba:	47a0      	blx	r4
 8000abc:	e008      	b.n	8000ad0 <LCD_Test+0x108>
		}
		else if (get_tick() - tick > 3000)
 8000abe:	f002 fddd 	bl	800367c <HAL_GetTick>
 8000ac2:	4602      	mov	r2, r0
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	1ad3      	subs	r3, r2, r3
 8000ac8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d808      	bhi.n	8000ae2 <LCD_Test+0x11a>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET)
 8000ad0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ad4:	483b      	ldr	r0, [pc, #236]	; (8000bc4 <LCD_Test+0x1fc>)
 8000ad6:	f006 fb99 	bl	800720c <HAL_GPIO_ReadPin>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d18c      	bne.n	80009fa <LCD_Test+0x32>
 8000ae0:	e004      	b.n	8000aec <LCD_Test+0x124>
			break;
 8000ae2:	bf00      	nop
	}
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 8000ae4:	e002      	b.n	8000aec <LCD_Test+0x124>
	{
		delay_ms(10);
 8000ae6:	200a      	movs	r0, #10
 8000ae8:	f002 fdd4 	bl	8003694 <HAL_Delay>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 8000aec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000af0:	4834      	ldr	r0, [pc, #208]	; (8000bc4 <LCD_Test+0x1fc>)
 8000af2:	f006 fb8b 	bl	800720c <HAL_GPIO_ReadPin>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d0f4      	beq.n	8000ae6 <LCD_Test+0x11e>
	}
	LCD_Light(0, 300);
 8000afc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000b00:	2000      	movs	r0, #0
 8000b02:	f000 f883 	bl	8000c0c <LCD_Light>

	ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, 0, ST7735Ctx.Width,ST7735Ctx.Height, BLACK);
 8000b06:	4b29      	ldr	r3, [pc, #164]	; (8000bac <LCD_Test+0x1e4>)
 8000b08:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8000b0a:	4b29      	ldr	r3, [pc, #164]	; (8000bb0 <LCD_Test+0x1e8>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	4b28      	ldr	r3, [pc, #160]	; (8000bb0 <LCD_Test+0x1e8>)
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	2100      	movs	r1, #0
 8000b14:	9101      	str	r1, [sp, #4]
 8000b16:	9300      	str	r3, [sp, #0]
 8000b18:	4613      	mov	r3, r2
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4822      	ldr	r0, [pc, #136]	; (8000ba8 <LCD_Test+0x1e0>)
 8000b20:	47a0      	blx	r4

	sprintf((char *)&text, "WeAct Studio");
 8000b22:	463b      	mov	r3, r7
 8000b24:	4928      	ldr	r1, [pc, #160]	; (8000bc8 <LCD_Test+0x200>)
 8000b26:	4618      	mov	r0, r3
 8000b28:	f00a feb6 	bl	800b898 <siprintf>
	LCD_ShowString(4, 4, ST7735Ctx.Width, 16, 16, text);
 8000b2c:	4b20      	ldr	r3, [pc, #128]	; (8000bb0 <LCD_Test+0x1e8>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	b29a      	uxth	r2, r3
 8000b32:	463b      	mov	r3, r7
 8000b34:	9301      	str	r3, [sp, #4]
 8000b36:	2310      	movs	r3, #16
 8000b38:	9300      	str	r3, [sp, #0]
 8000b3a:	2310      	movs	r3, #16
 8000b3c:	2104      	movs	r1, #4
 8000b3e:	2004      	movs	r0, #4
 8000b40:	f000 faec 	bl	800111c <LCD_ShowString>
	sprintf((char *)&text, "STM32H7xx 0x%X", HAL_GetDEVID());
 8000b44:	f002 fdca 	bl	80036dc <HAL_GetDEVID>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	463b      	mov	r3, r7
 8000b4c:	491f      	ldr	r1, [pc, #124]	; (8000bcc <LCD_Test+0x204>)
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f00a fea2 	bl	800b898 <siprintf>
	LCD_ShowString(4, 22, ST7735Ctx.Width, 16, 16, text);
 8000b54:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <LCD_Test+0x1e8>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	b29a      	uxth	r2, r3
 8000b5a:	463b      	mov	r3, r7
 8000b5c:	9301      	str	r3, [sp, #4]
 8000b5e:	2310      	movs	r3, #16
 8000b60:	9300      	str	r3, [sp, #0]
 8000b62:	2310      	movs	r3, #16
 8000b64:	2116      	movs	r1, #22
 8000b66:	2004      	movs	r0, #4
 8000b68:	f000 fad8 	bl	800111c <LCD_ShowString>
	sprintf((char *)&text, "LCD ID:0x%X", st7735_id);
 8000b6c:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <LCD_Test+0x1ec>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	463b      	mov	r3, r7
 8000b72:	4917      	ldr	r1, [pc, #92]	; (8000bd0 <LCD_Test+0x208>)
 8000b74:	4618      	mov	r0, r3
 8000b76:	f00a fe8f 	bl	800b898 <siprintf>
	LCD_ShowString(4, 40, ST7735Ctx.Width, 16, 16, text);
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <LCD_Test+0x1e8>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	b29a      	uxth	r2, r3
 8000b80:	463b      	mov	r3, r7
 8000b82:	9301      	str	r3, [sp, #4]
 8000b84:	2310      	movs	r3, #16
 8000b86:	9300      	str	r3, [sp, #0]
 8000b88:	2310      	movs	r3, #16
 8000b8a:	2128      	movs	r1, #40	; 0x28
 8000b8c:	2004      	movs	r0, #4
 8000b8e:	f000 fac5 	bl	800111c <LCD_ShowString>

	LCD_Light(100, 200);
 8000b92:	21c8      	movs	r1, #200	; 0xc8
 8000b94:	2064      	movs	r0, #100	; 0x64
 8000b96:	f000 f839 	bl	8000c0c <LCD_Light>
}
 8000b9a:	bf00      	nop
 8000b9c:	3718      	adds	r7, #24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bdb0      	pop	{r4, r5, r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	24000000 	.word	0x24000000
 8000ba8:	2400023c 	.word	0x2400023c
 8000bac:	24000024 	.word	0x24000024
 8000bb0:	24009938 	.word	0x24009938
 8000bb4:	24000274 	.word	0x24000274
 8000bb8:	10624dd3 	.word	0x10624dd3
 8000bbc:	cccccccd 	.word	0xcccccccd
 8000bc0:	0800c1f8 	.word	0x0800c1f8
 8000bc4:	58020800 	.word	0x58020800
 8000bc8:	0800c200 	.word	0x0800c200
 8000bcc:	0800c210 	.word	0x0800c210
 8000bd0:	0800c220 	.word	0x0800c220

08000bd4 <LCD_SetBrightness>:

void LCD_SetBrightness(uint32_t Brightness)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(LCD_Brightness_timer, LCD_Brightness_channel, Brightness);
 8000bdc:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <LCD_SetBrightness+0x1c>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	24009e4c 	.word	0x24009e4c

08000bf4 <LCD_GetBrightness>:

uint32_t LCD_GetBrightness(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
		return __HAL_TIM_GetCompare(LCD_Brightness_timer, LCD_Brightness_channel);
 8000bf8:	4b03      	ldr	r3, [pc, #12]	; (8000c08 <LCD_GetBrightness+0x14>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	24009e4c 	.word	0x24009e4c

08000c0c <LCD_Light>:

// ��Ļ�𽥱������߱䰵
// Brightness_Dis: Ŀ��ֵ
// time: �ﵽĿ��ֵ��ʱ��,��λ: ms
void LCD_Light(uint32_t Brightness_Dis,uint32_t time)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08a      	sub	sp, #40	; 0x28
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
	uint32_t Brightness_Now;
	uint32_t time_now;
	float temp1,temp2;
	float k,set;
	
	Brightness_Now = LCD_GetBrightness();
 8000c16:	f7ff ffed 	bl	8000bf4 <LCD_GetBrightness>
 8000c1a:	6278      	str	r0, [r7, #36]	; 0x24
	time_now = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	623b      	str	r3, [r7, #32]
	if(Brightness_Now == Brightness_Dis)
 8000c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d05e      	beq.n	8000ce6 <LCD_Light+0xda>
		return;
	
	if(time == time_now)
 8000c28:	683a      	ldr	r2, [r7, #0]
 8000c2a:	6a3b      	ldr	r3, [r7, #32]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d05c      	beq.n	8000cea <LCD_Light+0xde>
		return;
	
	temp1 = Brightness_Now;
 8000c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c32:	ee07 3a90 	vmov	s15, r3
 8000c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c3a:	edc7 7a07 	vstr	s15, [r7, #28]
	temp1 = temp1 - Brightness_Dis;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	ee07 3a90 	vmov	s15, r3
 8000c44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c48:	ed97 7a07 	vldr	s14, [r7, #28]
 8000c4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c50:	edc7 7a07 	vstr	s15, [r7, #28]
	temp2 = time_now;
 8000c54:	6a3b      	ldr	r3, [r7, #32]
 8000c56:	ee07 3a90 	vmov	s15, r3
 8000c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c5e:	edc7 7a06 	vstr	s15, [r7, #24]
	temp2 = temp2 - time;
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	ee07 3a90 	vmov	s15, r3
 8000c68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c6c:	ed97 7a06 	vldr	s14, [r7, #24]
 8000c70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c74:	edc7 7a06 	vstr	s15, [r7, #24]
	
	k = temp1 / temp2;
 8000c78:	edd7 6a07 	vldr	s13, [r7, #28]
 8000c7c:	ed97 7a06 	vldr	s14, [r7, #24]
 8000c80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c84:	edc7 7a05 	vstr	s15, [r7, #20]
	
	uint32_t tick=get_tick();
 8000c88:	f002 fcf8 	bl	800367c <HAL_GetTick>
 8000c8c:	6138      	str	r0, [r7, #16]
	while(1)
	{
		delay_ms(1);
 8000c8e:	2001      	movs	r0, #1
 8000c90:	f002 fd00 	bl	8003694 <HAL_Delay>
		
		time_now = get_tick()-tick;
 8000c94:	f002 fcf2 	bl	800367c <HAL_GetTick>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	623b      	str	r3, [r7, #32]
		
		temp2 = time_now - 0;
 8000ca0:	6a3b      	ldr	r3, [r7, #32]
 8000ca2:	ee07 3a90 	vmov	s15, r3
 8000ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000caa:	edc7 7a06 	vstr	s15, [r7, #24]
		
		set = temp2*k + Brightness_Now;
 8000cae:	ed97 7a06 	vldr	s14, [r7, #24]
 8000cb2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbc:	ee07 3a90 	vmov	s15, r3
 8000cc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cc8:	edc7 7a03 	vstr	s15, [r7, #12]
		
		LCD_SetBrightness((uint32_t)set);
 8000ccc:	edd7 7a03 	vldr	s15, [r7, #12]
 8000cd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cd4:	ee17 0a90 	vmov	r0, s15
 8000cd8:	f7ff ff7c 	bl	8000bd4 <LCD_SetBrightness>
		
		if(time_now >= time) break;
 8000cdc:	6a3a      	ldr	r2, [r7, #32]
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d204      	bcs.n	8000cee <LCD_Light+0xe2>
		delay_ms(1);
 8000ce4:	e7d3      	b.n	8000c8e <LCD_Light+0x82>
		return;
 8000ce6:	bf00      	nop
 8000ce8:	e002      	b.n	8000cf0 <LCD_Light+0xe4>
		return;
 8000cea:	bf00      	nop
 8000cec:	e000      	b.n	8000cf0 <LCD_Light+0xe4>
		if(time_now >= time) break;
 8000cee:	bf00      	nop
		
	}
}
 8000cf0:	3728      	adds	r7, #40	; 0x28
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
	...

08000cf8 <LCD_ShowChar>:
//num:Ҫ��ʾ���ַ�:" "--->"~"
//size:�����С 12/16
//mode:���ӷ�ʽ(1)���Ƿǵ��ӷ�ʽ(0)  

void LCD_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint8_t size,uint8_t mode)
{  							  
 8000cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cfc:	b097      	sub	sp, #92	; 0x5c
 8000cfe:	af02      	add	r7, sp, #8
 8000d00:	461e      	mov	r6, r3
 8000d02:	4603      	mov	r3, r0
 8000d04:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000d06:	460b      	mov	r3, r1
 8000d08:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000d10:	4633      	mov	r3, r6
 8000d12:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8000d16:	466b      	mov	r3, sp
 8000d18:	607b      	str	r3, [r7, #4]
  uint8_t temp,t1,t;
	uint16_t y0=y;
 8000d1a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000d1c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	uint16_t x0=x;
 8000d20:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000d22:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	uint16_t colortemp=POINT_COLOR; 
 8000d26:	4baf      	ldr	r3, [pc, #700]	; (8000fe4 <LCD_ShowChar+0x2ec>)
 8000d28:	881b      	ldrh	r3, [r3, #0]
 8000d2a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  uint32_t h,w;
	
	uint16_t write[size][size==12?6:8];
 8000d2e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000d32:	2b0c      	cmp	r3, #12
 8000d34:	d101      	bne.n	8000d3a <LCD_ShowChar+0x42>
 8000d36:	2106      	movs	r1, #6
 8000d38:	e000      	b.n	8000d3c <LCD_ShowChar+0x44>
 8000d3a:	2108      	movs	r1, #8
 8000d3c:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
 8000d40:	1e4b      	subs	r3, r1, #1
 8000d42:	643b      	str	r3, [r7, #64]	; 0x40
 8000d44:	460a      	mov	r2, r1
 8000d46:	2300      	movs	r3, #0
 8000d48:	4692      	mov	sl, r2
 8000d4a:	469b      	mov	fp, r3
 8000d4c:	f04f 0200 	mov.w	r2, #0
 8000d50:	f04f 0300 	mov.w	r3, #0
 8000d54:	ea4f 130b 	mov.w	r3, fp, lsl #4
 8000d58:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8000d5c:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8000d60:	460b      	mov	r3, r1
 8000d62:	005e      	lsls	r6, r3, #1
 8000d64:	4603      	mov	r3, r0
 8000d66:	3b01      	subs	r3, #1
 8000d68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d6a:	460a      	mov	r2, r1
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61ba      	str	r2, [r7, #24]
 8000d70:	61fb      	str	r3, [r7, #28]
 8000d72:	b2c3      	uxtb	r3, r0
 8000d74:	2200      	movs	r2, #0
 8000d76:	623b      	str	r3, [r7, #32]
 8000d78:	627a      	str	r2, [r7, #36]	; 0x24
 8000d7a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8000d7e:	465b      	mov	r3, fp
 8000d80:	6a3a      	ldr	r2, [r7, #32]
 8000d82:	fb02 fc03 	mul.w	ip, r2, r3
 8000d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d88:	4652      	mov	r2, sl
 8000d8a:	fb02 f303 	mul.w	r3, r2, r3
 8000d8e:	449c      	add	ip, r3
 8000d90:	4652      	mov	r2, sl
 8000d92:	6a3b      	ldr	r3, [r7, #32]
 8000d94:	fba2 8903 	umull	r8, r9, r2, r3
 8000d98:	eb0c 0309 	add.w	r3, ip, r9
 8000d9c:	4699      	mov	r9, r3
 8000d9e:	f04f 0200 	mov.w	r2, #0
 8000da2:	f04f 0300 	mov.w	r3, #0
 8000da6:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8000daa:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8000dae:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8000db2:	460a      	mov	r2, r1
 8000db4:	2300      	movs	r3, #0
 8000db6:	613a      	str	r2, [r7, #16]
 8000db8:	617b      	str	r3, [r7, #20]
 8000dba:	b2c3      	uxtb	r3, r0
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	60bb      	str	r3, [r7, #8]
 8000dc0:	60fa      	str	r2, [r7, #12]
 8000dc2:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000dc6:	464b      	mov	r3, r9
 8000dc8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8000dcc:	4652      	mov	r2, sl
 8000dce:	fb02 fc03 	mul.w	ip, r2, r3
 8000dd2:	465b      	mov	r3, fp
 8000dd4:	4642      	mov	r2, r8
 8000dd6:	fb02 f303 	mul.w	r3, r2, r3
 8000dda:	449c      	add	ip, r3
 8000ddc:	4642      	mov	r2, r8
 8000dde:	4653      	mov	r3, sl
 8000de0:	fba2 4503 	umull	r4, r5, r2, r3
 8000de4:	eb0c 0305 	add.w	r3, ip, r5
 8000de8:	461d      	mov	r5, r3
 8000dea:	f04f 0200 	mov.w	r2, #0
 8000dee:	f04f 0300 	mov.w	r3, #0
 8000df2:	012b      	lsls	r3, r5, #4
 8000df4:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000df8:	0122      	lsls	r2, r4, #4
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	fb02 f303 	mul.w	r3, r2, r3
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	3307      	adds	r3, #7
 8000e06:	08db      	lsrs	r3, r3, #3
 8000e08:	00db      	lsls	r3, r3, #3
 8000e0a:	ebad 0d03 	sub.w	sp, sp, r3
 8000e0e:	ab02      	add	r3, sp, #8
 8000e10:	3301      	adds	r3, #1
 8000e12:	085b      	lsrs	r3, r3, #1
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	63bb      	str	r3, [r7, #56]	; 0x38
	uint16_t count;
	
  ST7735_GetXSize(&st7735_pObj,&w);
 8000e18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4872      	ldr	r0, [pc, #456]	; (8000fe8 <LCD_ShowChar+0x2f0>)
 8000e20:	f001 ffac 	bl	8002d7c <ST7735_GetXSize>
	ST7735_GetYSize(&st7735_pObj,&h);
 8000e24:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e28:	4619      	mov	r1, r3
 8000e2a:	486f      	ldr	r0, [pc, #444]	; (8000fe8 <LCD_ShowChar+0x2f0>)
 8000e2c:	f001 ffb8 	bl	8002da0 <ST7735_GetYSize>
	
	//���ô���		   
	num=num-' ';//�õ�ƫ�ƺ��ֵ
 8000e30:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000e34:	3b20      	subs	r3, #32
 8000e36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	count = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	
	if(!mode) //�ǵ��ӷ�ʽ
 8000e40:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	f040 80a7 	bne.w	8000f98 <LCD_ShowChar+0x2a0>
	{
		for(t=0;t<size;t++)
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8000e50:	e09a      	b.n	8000f88 <LCD_ShowChar+0x290>
		{   
			if(size==12)temp=asc2_1206[num][t];  //����1206����
 8000e52:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000e56:	2b0c      	cmp	r3, #12
 8000e58:	d10e      	bne.n	8000e78 <LCD_ShowChar+0x180>
 8000e5a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000e5e:	f897 104d 	ldrb.w	r1, [r7, #77]	; 0x4d
 8000e62:	4862      	ldr	r0, [pc, #392]	; (8000fec <LCD_ShowChar+0x2f4>)
 8000e64:	4613      	mov	r3, r2
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	4413      	add	r3, r2
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	4403      	add	r3, r0
 8000e6e:	440b      	add	r3, r1
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000e76:	e00a      	b.n	8000e8e <LCD_ShowChar+0x196>
			else temp=asc2_1608[num][t];		 //����1608����
 8000e78:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000e7c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000e80:	495b      	ldr	r1, [pc, #364]	; (8000ff0 <LCD_ShowChar+0x2f8>)
 8000e82:	0112      	lsls	r2, r2, #4
 8000e84:	440a      	add	r2, r1
 8000e86:	4413      	add	r3, r2
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			
			for(t1=0;t1<8;t1++)
 8000e8e:	2300      	movs	r3, #0
 8000e90:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8000e94:	e06d      	b.n	8000f72 <LCD_ShowChar+0x27a>
			{			    
				if(temp&0x80)
 8000e96:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	da0e      	bge.n	8000ebc <LCD_ShowChar+0x1c4>
					POINT_COLOR=(colortemp&0xFF)<<8|colortemp>>8;
 8000e9e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000ea2:	021b      	lsls	r3, r3, #8
 8000ea4:	b21a      	sxth	r2, r3
 8000ea6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000eaa:	0a1b      	lsrs	r3, r3, #8
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	b21b      	sxth	r3, r3
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	b21b      	sxth	r3, r3
 8000eb4:	b29a      	uxth	r2, r3
 8000eb6:	4b4b      	ldr	r3, [pc, #300]	; (8000fe4 <LCD_ShowChar+0x2ec>)
 8000eb8:	801a      	strh	r2, [r3, #0]
 8000eba:	e00d      	b.n	8000ed8 <LCD_ShowChar+0x1e0>
				else 
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 8000ebc:	4b4d      	ldr	r3, [pc, #308]	; (8000ff4 <LCD_ShowChar+0x2fc>)
 8000ebe:	881b      	ldrh	r3, [r3, #0]
 8000ec0:	021b      	lsls	r3, r3, #8
 8000ec2:	b21a      	sxth	r2, r3
 8000ec4:	4b4b      	ldr	r3, [pc, #300]	; (8000ff4 <LCD_ShowChar+0x2fc>)
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	0a1b      	lsrs	r3, r3, #8
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	b21b      	sxth	r3, r3
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	b21b      	sxth	r3, r3
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	4b43      	ldr	r3, [pc, #268]	; (8000fe4 <LCD_ShowChar+0x2ec>)
 8000ed6:	801a      	strh	r2, [r3, #0]
				
				write[count][t/2]=POINT_COLOR;
 8000ed8:	0872      	lsrs	r2, r6, #1
 8000eda:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 8000ede:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000ee2:	085b      	lsrs	r3, r3, #1
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	461c      	mov	r4, r3
 8000ee8:	4b3e      	ldr	r3, [pc, #248]	; (8000fe4 <LCD_ShowChar+0x2ec>)
 8000eea:	8818      	ldrh	r0, [r3, #0]
 8000eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000eee:	fb01 f202 	mul.w	r2, r1, r2
 8000ef2:	4422      	add	r2, r4
 8000ef4:	4601      	mov	r1, r0
 8000ef6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				count ++;
 8000efa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8000efe:	3301      	adds	r3, #1
 8000f00:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				if(count >= size) count =0;
 8000f04:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d302      	bcc.n	8000f18 <LCD_ShowChar+0x220>
 8000f12:	2300      	movs	r3, #0
 8000f14:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				
				temp<<=1;
 8000f18:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				y++;
 8000f22:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000f24:	3301      	adds	r3, #1
 8000f26:	85bb      	strh	r3, [r7, #44]	; 0x2c
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8000f28:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d304      	bcc.n	8000f3a <LCD_ShowChar+0x242>
 8000f30:	4a2c      	ldr	r2, [pc, #176]	; (8000fe4 <LCD_ShowChar+0x2ec>)
 8000f32:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000f36:	8013      	strh	r3, [r2, #0]
 8000f38:	e0e6      	b.n	8001108 <LCD_ShowChar+0x410>
				if((y-y0)==size)
 8000f3a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000f3c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8000f40:	1ad2      	subs	r2, r2, r3
 8000f42:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d10e      	bne.n	8000f68 <LCD_ShowChar+0x270>
				{
					y=y0;
 8000f4a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8000f4e:	85bb      	strh	r3, [r7, #44]	; 0x2c
					x++;
 8000f50:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000f52:	3301      	adds	r3, #1
 8000f54:	85fb      	strh	r3, [r7, #46]	; 0x2e
					if(x>=w){POINT_COLOR=colortemp;return;}//��������
 8000f56:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d30e      	bcc.n	8000f7c <LCD_ShowChar+0x284>
 8000f5e:	4a21      	ldr	r2, [pc, #132]	; (8000fe4 <LCD_ShowChar+0x2ec>)
 8000f60:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000f64:	8013      	strh	r3, [r2, #0]
 8000f66:	e0cf      	b.n	8001108 <LCD_ShowChar+0x410>
			for(t1=0;t1<8;t1++)
 8000f68:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8000f72:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000f76:	2b07      	cmp	r3, #7
 8000f78:	d98d      	bls.n	8000e96 <LCD_ShowChar+0x19e>
 8000f7a:	e000      	b.n	8000f7e <LCD_ShowChar+0x286>
					break;
 8000f7c:	bf00      	nop
		for(t=0;t<size;t++)
 8000f7e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000f82:	3301      	adds	r3, #1
 8000f84:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8000f88:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8000f8c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000f90:	429a      	cmp	r2, r3
 8000f92:	f4ff af5e 	bcc.w	8000e52 <LCD_ShowChar+0x15a>
 8000f96:	e09c      	b.n	80010d2 <LCD_ShowChar+0x3da>
			}
		}
	}
	else//���ӷ�ʽ
	{
		for(t=0;t<size;t++)
 8000f98:	2300      	movs	r3, #0
 8000f9a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8000f9e:	e091      	b.n	80010c4 <LCD_ShowChar+0x3cc>
		{   
			if(size==12)temp=asc2_1206[num][t];  //����1206����
 8000fa0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000fa4:	2b0c      	cmp	r3, #12
 8000fa6:	d10e      	bne.n	8000fc6 <LCD_ShowChar+0x2ce>
 8000fa8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000fac:	f897 104d 	ldrb.w	r1, [r7, #77]	; 0x4d
 8000fb0:	480e      	ldr	r0, [pc, #56]	; (8000fec <LCD_ShowChar+0x2f4>)
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	4413      	add	r3, r2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	4403      	add	r3, r0
 8000fbc:	440b      	add	r3, r1
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000fc4:	e00a      	b.n	8000fdc <LCD_ShowChar+0x2e4>
			else temp=asc2_1608[num][t];		 //����1608���� 	                          
 8000fc6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000fca:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000fce:	4908      	ldr	r1, [pc, #32]	; (8000ff0 <LCD_ShowChar+0x2f8>)
 8000fd0:	0112      	lsls	r2, r2, #4
 8000fd2:	440a      	add	r2, r1
 8000fd4:	4413      	add	r3, r2
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			for(t1=0;t1<8;t1++)
 8000fdc:	2300      	movs	r3, #0
 8000fde:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8000fe2:	e064      	b.n	80010ae <LCD_ShowChar+0x3b6>
 8000fe4:	24000020 	.word	0x24000020
 8000fe8:	2400023c 	.word	0x2400023c
 8000fec:	0800c274 	.word	0x0800c274
 8000ff0:	0800c6e8 	.word	0x0800c6e8
 8000ff4:	24000278 	.word	0x24000278
			{			    
				if(temp&0x80)
 8000ff8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	da1a      	bge.n	8001036 <LCD_ShowChar+0x33e>
					write[count][t/2]=(POINT_COLOR&0xFF)<<8|POINT_COLOR>>8;
 8001000:	4b44      	ldr	r3, [pc, #272]	; (8001114 <LCD_ShowChar+0x41c>)
 8001002:	881b      	ldrh	r3, [r3, #0]
 8001004:	021b      	lsls	r3, r3, #8
 8001006:	b21a      	sxth	r2, r3
 8001008:	4b42      	ldr	r3, [pc, #264]	; (8001114 <LCD_ShowChar+0x41c>)
 800100a:	881b      	ldrh	r3, [r3, #0]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	b29b      	uxth	r3, r3
 8001010:	b21b      	sxth	r3, r3
 8001012:	4313      	orrs	r3, r2
 8001014:	b218      	sxth	r0, r3
 8001016:	0872      	lsrs	r2, r6, #1
 8001018:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 800101c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001020:	085b      	lsrs	r3, r3, #1
 8001022:	b2db      	uxtb	r3, r3
 8001024:	461c      	mov	r4, r3
 8001026:	b280      	uxth	r0, r0
 8001028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800102a:	fb01 f202 	mul.w	r2, r1, r2
 800102e:	4422      	add	r2, r4
 8001030:	4601      	mov	r1, r0
 8001032:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				count ++;
 8001036:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800103a:	3301      	adds	r3, #1
 800103c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				if(count >= size) count =0;
 8001040:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001044:	b29b      	uxth	r3, r3
 8001046:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800104a:	429a      	cmp	r2, r3
 800104c:	d302      	bcc.n	8001054 <LCD_ShowChar+0x35c>
 800104e:	2300      	movs	r3, #0
 8001050:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				
				temp<<=1;
 8001054:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				y++;
 800105e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001060:	3301      	adds	r3, #1
 8001062:	85bb      	strh	r3, [r7, #44]	; 0x2c
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8001064:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001068:	429a      	cmp	r2, r3
 800106a:	d304      	bcc.n	8001076 <LCD_ShowChar+0x37e>
 800106c:	4a29      	ldr	r2, [pc, #164]	; (8001114 <LCD_ShowChar+0x41c>)
 800106e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001072:	8013      	strh	r3, [r2, #0]
 8001074:	e048      	b.n	8001108 <LCD_ShowChar+0x410>
				if((y-y0)==size)
 8001076:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001078:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800107c:	1ad2      	subs	r2, r2, r3
 800107e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001082:	429a      	cmp	r2, r3
 8001084:	d10e      	bne.n	80010a4 <LCD_ShowChar+0x3ac>
				{
					y=y0;
 8001086:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800108a:	85bb      	strh	r3, [r7, #44]	; 0x2c
					x++;
 800108c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800108e:	3301      	adds	r3, #1
 8001090:	85fb      	strh	r3, [r7, #46]	; 0x2e
					if(x>=w){POINT_COLOR=colortemp;return;}//��������
 8001092:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001096:	429a      	cmp	r2, r3
 8001098:	d30e      	bcc.n	80010b8 <LCD_ShowChar+0x3c0>
 800109a:	4a1e      	ldr	r2, [pc, #120]	; (8001114 <LCD_ShowChar+0x41c>)
 800109c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80010a0:	8013      	strh	r3, [r2, #0]
 80010a2:	e031      	b.n	8001108 <LCD_ShowChar+0x410>
			for(t1=0;t1<8;t1++)
 80010a4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80010a8:	3301      	adds	r3, #1
 80010aa:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80010ae:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80010b2:	2b07      	cmp	r3, #7
 80010b4:	d9a0      	bls.n	8000ff8 <LCD_ShowChar+0x300>
 80010b6:	e000      	b.n	80010ba <LCD_ShowChar+0x3c2>
					break;
 80010b8:	bf00      	nop
		for(t=0;t<size;t++)
 80010ba:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80010be:	3301      	adds	r3, #1
 80010c0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 80010c4:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80010c8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80010cc:	429a      	cmp	r2, r3
 80010ce:	f4ff af67 	bcc.w	8000fa0 <LCD_ShowChar+0x2a8>
				}
			}  	 
		}     
	}
	ST7735_FillRGBRect(&st7735_pObj,x0,y0,(uint8_t *)&write,size==12?6:8,size); 
 80010d2:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80010d6:	f8b7 0048 	ldrh.w	r0, [r7, #72]	; 0x48
 80010da:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80010de:	2b0c      	cmp	r3, #12
 80010e0:	d101      	bne.n	80010e6 <LCD_ShowChar+0x3ee>
 80010e2:	2306      	movs	r3, #6
 80010e4:	e000      	b.n	80010e8 <LCD_ShowChar+0x3f0>
 80010e6:	2308      	movs	r3, #8
 80010e8:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80010ec:	9201      	str	r2, [sp, #4]
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010f2:	4602      	mov	r2, r0
 80010f4:	4808      	ldr	r0, [pc, #32]	; (8001118 <LCD_ShowChar+0x420>)
 80010f6:	f001 fc93 	bl	8002a20 <ST7735_FillRGBRect>
	POINT_COLOR=colortemp;	    	   	 	  
 80010fa:	4a06      	ldr	r2, [pc, #24]	; (8001114 <LCD_ShowChar+0x41c>)
 80010fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001100:	8013      	strh	r3, [r2, #0]
 8001102:	f8d7 d004 	ldr.w	sp, [r7, #4]
 8001106:	e001      	b.n	800110c <LCD_ShowChar+0x414>
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8001108:	f8d7 d004 	ldr.w	sp, [r7, #4]
}   
 800110c:	3754      	adds	r7, #84	; 0x54
 800110e:	46bd      	mov	sp, r7
 8001110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001114:	24000020 	.word	0x24000020
 8001118:	2400023c 	.word	0x2400023c

0800111c <LCD_ShowString>:
//x,y:�������
//width,height:�����С  
//size:�����С
//*p:�ַ�����ʼ��ַ
void LCD_ShowString(uint16_t x,uint16_t y,uint16_t width,uint16_t height,uint8_t size,uint8_t *p)
{         
 800111c:	b590      	push	{r4, r7, lr}
 800111e:	b087      	sub	sp, #28
 8001120:	af02      	add	r7, sp, #8
 8001122:	4604      	mov	r4, r0
 8001124:	4608      	mov	r0, r1
 8001126:	4611      	mov	r1, r2
 8001128:	461a      	mov	r2, r3
 800112a:	4623      	mov	r3, r4
 800112c:	80fb      	strh	r3, [r7, #6]
 800112e:	4603      	mov	r3, r0
 8001130:	80bb      	strh	r3, [r7, #4]
 8001132:	460b      	mov	r3, r1
 8001134:	807b      	strh	r3, [r7, #2]
 8001136:	4613      	mov	r3, r2
 8001138:	803b      	strh	r3, [r7, #0]
	uint8_t x0=x;
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	73fb      	strb	r3, [r7, #15]
	width+=x;
 800113e:	887a      	ldrh	r2, [r7, #2]
 8001140:	88fb      	ldrh	r3, [r7, #6]
 8001142:	4413      	add	r3, r2
 8001144:	807b      	strh	r3, [r7, #2]
	height+=y;
 8001146:	883a      	ldrh	r2, [r7, #0]
 8001148:	88bb      	ldrh	r3, [r7, #4]
 800114a:	4413      	add	r3, r2
 800114c:	803b      	strh	r3, [r7, #0]
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 800114e:	e024      	b.n	800119a <LCD_ShowString+0x7e>
    {       
        if(x>=width){x=x0;y+=size;}
 8001150:	88fa      	ldrh	r2, [r7, #6]
 8001152:	887b      	ldrh	r3, [r7, #2]
 8001154:	429a      	cmp	r2, r3
 8001156:	d307      	bcc.n	8001168 <LCD_ShowString+0x4c>
 8001158:	7bfb      	ldrb	r3, [r7, #15]
 800115a:	80fb      	strh	r3, [r7, #6]
 800115c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001160:	b29a      	uxth	r2, r3
 8001162:	88bb      	ldrh	r3, [r7, #4]
 8001164:	4413      	add	r3, r2
 8001166:	80bb      	strh	r3, [r7, #4]
        if(y>=height)break;//�˳�
 8001168:	88ba      	ldrh	r2, [r7, #4]
 800116a:	883b      	ldrh	r3, [r7, #0]
 800116c:	429a      	cmp	r2, r3
 800116e:	d21d      	bcs.n	80011ac <LCD_ShowString+0x90>
        LCD_ShowChar(x,y,*p,size,0);
 8001170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001172:	781a      	ldrb	r2, [r3, #0]
 8001174:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001178:	88b9      	ldrh	r1, [r7, #4]
 800117a:	88f8      	ldrh	r0, [r7, #6]
 800117c:	2400      	movs	r4, #0
 800117e:	9400      	str	r4, [sp, #0]
 8001180:	f7ff fdba 	bl	8000cf8 <LCD_ShowChar>
        x+=size/2;
 8001184:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001188:	085b      	lsrs	r3, r3, #1
 800118a:	b2db      	uxtb	r3, r3
 800118c:	b29a      	uxth	r2, r3
 800118e:	88fb      	ldrh	r3, [r7, #6]
 8001190:	4413      	add	r3, r2
 8001192:	80fb      	strh	r3, [r7, #6]
        p++;
 8001194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001196:	3301      	adds	r3, #1
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 800119a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b7e      	cmp	r3, #126	; 0x7e
 80011a0:	d805      	bhi.n	80011ae <LCD_ShowString+0x92>
 80011a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b1f      	cmp	r3, #31
 80011a8:	d8d2      	bhi.n	8001150 <LCD_ShowString+0x34>
    }  
}
 80011aa:	e000      	b.n	80011ae <LCD_ShowString+0x92>
        if(y>=height)break;//�˳�
 80011ac:	bf00      	nop
}
 80011ae:	bf00      	nop
 80011b0:	3714      	adds	r7, #20
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd90      	pop	{r4, r7, pc}
	...

080011b8 <lcd_init>:

static int32_t lcd_init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
	int32_t result = ST7735_OK;
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
	HAL_TIMEx_PWMN_Start(LCD_Brightness_timer,LCD_Brightness_channel);
 80011c2:	2104      	movs	r1, #4
 80011c4:	4803      	ldr	r0, [pc, #12]	; (80011d4 <lcd_init+0x1c>)
 80011c6:	f00a f935 	bl	800b434 <HAL_TIMEx_PWMN_Start>
	return result;
 80011ca:	687b      	ldr	r3, [r7, #4]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	24009e4c 	.word	0x24009e4c

080011d8 <lcd_gettick>:

static int32_t lcd_gettick(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80011dc:	f002 fa4e 	bl	800367c <HAL_GetTick>
 80011e0:	4603      	mov	r3, r0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <lcd_writereg>:

static int32_t lcd_writereg(uint8_t reg,uint8_t* pdata,uint32_t length)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
 80011f4:	73fb      	strb	r3, [r7, #15]
	int32_t result;
	LCD_CS_RESET;
 80011f6:	2200      	movs	r2, #0
 80011f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011fc:	481d      	ldr	r0, [pc, #116]	; (8001274 <lcd_writereg+0x8c>)
 80011fe:	f006 f81d 	bl	800723c <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 8001202:	2200      	movs	r2, #0
 8001204:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001208:	481a      	ldr	r0, [pc, #104]	; (8001274 <lcd_writereg+0x8c>)
 800120a:	f006 f817 	bl	800723c <HAL_GPIO_WritePin>
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 800120e:	f107 010f 	add.w	r1, r7, #15
 8001212:	2364      	movs	r3, #100	; 0x64
 8001214:	2201      	movs	r2, #1
 8001216:	4818      	ldr	r0, [pc, #96]	; (8001278 <lcd_writereg+0x90>)
 8001218:	f008 ffb0 	bl	800a17c <HAL_SPI_Transmit>
 800121c:	4603      	mov	r3, r0
 800121e:	617b      	str	r3, [r7, #20]
	LCD_RS_SET;
 8001220:	2201      	movs	r2, #1
 8001222:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001226:	4813      	ldr	r0, [pc, #76]	; (8001274 <lcd_writereg+0x8c>)
 8001228:	f006 f808 	bl	800723c <HAL_GPIO_WritePin>
	if(length > 0)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d00c      	beq.n	800124c <lcd_writereg+0x64>
		result += HAL_SPI_Transmit(SPI_Drv,pdata,length,500);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	b29a      	uxth	r2, r3
 8001236:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800123a:	68b9      	ldr	r1, [r7, #8]
 800123c:	480e      	ldr	r0, [pc, #56]	; (8001278 <lcd_writereg+0x90>)
 800123e:	f008 ff9d 	bl	800a17c <HAL_SPI_Transmit>
 8001242:	4603      	mov	r3, r0
 8001244:	461a      	mov	r2, r3
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	4413      	add	r3, r2
 800124a:	617b      	str	r3, [r7, #20]
	LCD_CS_SET;
 800124c:	2201      	movs	r2, #1
 800124e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001252:	4808      	ldr	r0, [pc, #32]	; (8001274 <lcd_writereg+0x8c>)
 8001254:	f005 fff2 	bl	800723c <HAL_GPIO_WritePin>
	if(result>0){
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	2b00      	cmp	r3, #0
 800125c:	dd03      	ble.n	8001266 <lcd_writereg+0x7e>
		result = -1;}
 800125e:	f04f 33ff 	mov.w	r3, #4294967295
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	e001      	b.n	800126a <lcd_writereg+0x82>
	else{
		result = 0;}
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
	return result;
 800126a:	697b      	ldr	r3, [r7, #20]
}
 800126c:	4618      	mov	r0, r3
 800126e:	3718      	adds	r7, #24
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	58021000 	.word	0x58021000
 8001278:	240098b0 	.word	0x240098b0

0800127c <lcd_readreg>:

static int32_t lcd_readreg(uint8_t reg,uint8_t* pdata)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	6039      	str	r1, [r7, #0]
 8001286:	71fb      	strb	r3, [r7, #7]
	int32_t result;
	LCD_CS_RESET;
 8001288:	2200      	movs	r2, #0
 800128a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800128e:	481b      	ldr	r0, [pc, #108]	; (80012fc <lcd_readreg+0x80>)
 8001290:	f005 ffd4 	bl	800723c <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 8001294:	2200      	movs	r2, #0
 8001296:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800129a:	4818      	ldr	r0, [pc, #96]	; (80012fc <lcd_readreg+0x80>)
 800129c:	f005 ffce 	bl	800723c <HAL_GPIO_WritePin>
	
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 80012a0:	1df9      	adds	r1, r7, #7
 80012a2:	2364      	movs	r3, #100	; 0x64
 80012a4:	2201      	movs	r2, #1
 80012a6:	4816      	ldr	r0, [pc, #88]	; (8001300 <lcd_readreg+0x84>)
 80012a8:	f008 ff68 	bl	800a17c <HAL_SPI_Transmit>
 80012ac:	4603      	mov	r3, r0
 80012ae:	60fb      	str	r3, [r7, #12]
	LCD_RS_SET;
 80012b0:	2201      	movs	r2, #1
 80012b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012b6:	4811      	ldr	r0, [pc, #68]	; (80012fc <lcd_readreg+0x80>)
 80012b8:	f005 ffc0 	bl	800723c <HAL_GPIO_WritePin>
	result += HAL_SPI_Receive(SPI_Drv,pdata,1,500);
 80012bc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012c0:	2201      	movs	r2, #1
 80012c2:	6839      	ldr	r1, [r7, #0]
 80012c4:	480e      	ldr	r0, [pc, #56]	; (8001300 <lcd_readreg+0x84>)
 80012c6:	f009 f955 	bl	800a574 <HAL_SPI_Receive>
 80012ca:	4603      	mov	r3, r0
 80012cc:	461a      	mov	r2, r3
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	4413      	add	r3, r2
 80012d2:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 80012d4:	2201      	movs	r2, #1
 80012d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012da:	4808      	ldr	r0, [pc, #32]	; (80012fc <lcd_readreg+0x80>)
 80012dc:	f005 ffae 	bl	800723c <HAL_GPIO_WritePin>
	if(result>0){
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	dd03      	ble.n	80012ee <lcd_readreg+0x72>
		result = -1;}
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	e001      	b.n	80012f2 <lcd_readreg+0x76>
	else{
		result = 0;}
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
	return result;
 80012f2:	68fb      	ldr	r3, [r7, #12]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	58021000 	.word	0x58021000
 8001300:	240098b0 	.word	0x240098b0

08001304 <lcd_senddata>:

static int32_t lcd_senddata(uint8_t* pdata,uint32_t length)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
	int32_t result;
	LCD_CS_RESET;
 800130e:	2200      	movs	r2, #0
 8001310:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001314:	480f      	ldr	r0, [pc, #60]	; (8001354 <lcd_senddata+0x50>)
 8001316:	f005 ff91 	bl	800723c <HAL_GPIO_WritePin>
	//LCD_RS_SET;
	result =HAL_SPI_Transmit(SPI_Drv,pdata,length,100);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	b29a      	uxth	r2, r3
 800131e:	2364      	movs	r3, #100	; 0x64
 8001320:	6879      	ldr	r1, [r7, #4]
 8001322:	480d      	ldr	r0, [pc, #52]	; (8001358 <lcd_senddata+0x54>)
 8001324:	f008 ff2a 	bl	800a17c <HAL_SPI_Transmit>
 8001328:	4603      	mov	r3, r0
 800132a:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 800132c:	2201      	movs	r2, #1
 800132e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001332:	4808      	ldr	r0, [pc, #32]	; (8001354 <lcd_senddata+0x50>)
 8001334:	f005 ff82 	bl	800723c <HAL_GPIO_WritePin>
	if(result>0){
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2b00      	cmp	r3, #0
 800133c:	dd03      	ble.n	8001346 <lcd_senddata+0x42>
		result = -1;}
 800133e:	f04f 33ff 	mov.w	r3, #4294967295
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	e001      	b.n	800134a <lcd_senddata+0x46>
	else{
		result = 0;}
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
	return result;
 800134a:	68fb      	ldr	r3, [r7, #12]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	58021000 	.word	0x58021000
 8001358:	240098b0 	.word	0x240098b0

0800135c <lcd_recvdata>:

static int32_t lcd_recvdata(uint8_t* pdata,uint32_t length)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
	int32_t result;
	LCD_CS_RESET;
 8001366:	2200      	movs	r2, #0
 8001368:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800136c:	4810      	ldr	r0, [pc, #64]	; (80013b0 <lcd_recvdata+0x54>)
 800136e:	f005 ff65 	bl	800723c <HAL_GPIO_WritePin>
	//LCD_RS_SET;
	result = HAL_SPI_Receive(SPI_Drv,pdata,length,500);
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	b29a      	uxth	r2, r3
 8001376:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	480d      	ldr	r0, [pc, #52]	; (80013b4 <lcd_recvdata+0x58>)
 800137e:	f009 f8f9 	bl	800a574 <HAL_SPI_Receive>
 8001382:	4603      	mov	r3, r0
 8001384:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 8001386:	2201      	movs	r2, #1
 8001388:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800138c:	4808      	ldr	r0, [pc, #32]	; (80013b0 <lcd_recvdata+0x54>)
 800138e:	f005 ff55 	bl	800723c <HAL_GPIO_WritePin>
	if(result>0){
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	2b00      	cmp	r3, #0
 8001396:	dd03      	ble.n	80013a0 <lcd_recvdata+0x44>
		result = -1;}
 8001398:	f04f 33ff 	mov.w	r3, #4294967295
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	e001      	b.n	80013a4 <lcd_recvdata+0x48>
	else{
		result = 0;}
 80013a0:	2300      	movs	r3, #0
 80013a2:	60fb      	str	r3, [r7, #12]
	return result;
 80013a4:	68fb      	ldr	r3, [r7, #12]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	58021000 	.word	0x58021000
 80013b4:	240098b0 	.word	0x240098b0

080013b8 <CPU_CACHE_Enable>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void CPU_CACHE_Enable(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80013be:	4b34      	ldr	r3, [pc, #208]	; (8001490 <CPU_CACHE_Enable+0xd8>)
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d11b      	bne.n	8001402 <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80013ca:	f3bf 8f4f 	dsb	sy
}
 80013ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013d0:	f3bf 8f6f 	isb	sy
}
 80013d4:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80013d6:	4b2e      	ldr	r3, [pc, #184]	; (8001490 <CPU_CACHE_Enable+0xd8>)
 80013d8:	2200      	movs	r2, #0
 80013da:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80013de:	f3bf 8f4f 	dsb	sy
}
 80013e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013e4:	f3bf 8f6f 	isb	sy
}
 80013e8:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80013ea:	4b29      	ldr	r3, [pc, #164]	; (8001490 <CPU_CACHE_Enable+0xd8>)
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	4a28      	ldr	r2, [pc, #160]	; (8001490 <CPU_CACHE_Enable+0xd8>)
 80013f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80013f6:	f3bf 8f4f 	dsb	sy
}
 80013fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013fc:	f3bf 8f6f 	isb	sy
}
 8001400:	e000      	b.n	8001404 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001402:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001404:	4b22      	ldr	r3, [pc, #136]	; (8001490 <CPU_CACHE_Enable+0xd8>)
 8001406:	695b      	ldr	r3, [r3, #20]
 8001408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d138      	bne.n	8001482 <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001410:	4b1f      	ldr	r3, [pc, #124]	; (8001490 <CPU_CACHE_Enable+0xd8>)
 8001412:	2200      	movs	r2, #0
 8001414:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001418:	f3bf 8f4f 	dsb	sy
}
 800141c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800141e:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <CPU_CACHE_Enable+0xd8>)
 8001420:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001424:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	0b5b      	lsrs	r3, r3, #13
 800142a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800142e:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	08db      	lsrs	r3, r3, #3
 8001434:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001438:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	015a      	lsls	r2, r3, #5
 800143e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001442:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001448:	4911      	ldr	r1, [pc, #68]	; (8001490 <CPU_CACHE_Enable+0xd8>)
 800144a:	4313      	orrs	r3, r2
 800144c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	1e5a      	subs	r2, r3, #1
 8001454:	607a      	str	r2, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1ef      	bne.n	800143a <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	1e5a      	subs	r2, r3, #1
 800145e:	60ba      	str	r2, [r7, #8]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1e5      	bne.n	8001430 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8001464:	f3bf 8f4f 	dsb	sy
}
 8001468:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <CPU_CACHE_Enable+0xd8>)
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	4a08      	ldr	r2, [pc, #32]	; (8001490 <CPU_CACHE_Enable+0xd8>)
 8001470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001474:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001476:	f3bf 8f4f 	dsb	sy
}
 800147a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800147c:	f3bf 8f6f 	isb	sy
}
 8001480:	e000      	b.n	8001484 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001482:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 8001484:	bf00      	nop
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <MPU_Config>:

static void MPU_Config(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800149a:	463b      	mov	r3, r7
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80014a6:	f002 fa37 	bl	8003918 <HAL_MPU_Disable>
	
  /* Configure the MPU attributes for the QSPI 256MB without instruction access */
  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 80014aa:	2301      	movs	r3, #1
 80014ac:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number           = MPU_REGION_NUMBER0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress      = OCTOSPI1_BASE;
 80014b2:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 80014b6:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size             = MPU_REGION_SIZE_256MB;
 80014b8:	231b      	movs	r3, #27
 80014ba:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80014bc:	2300      	movs	r3, #0
 80014be:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable     = MPU_ACCESS_NOT_BUFFERABLE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable      = MPU_ACCESS_NOT_CACHEABLE;
 80014c4:	2300      	movs	r3, #0
 80014c6:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable      = MPU_ACCESS_NOT_SHAREABLE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.DisableExec      = MPU_INSTRUCTION_ACCESS_DISABLE;
 80014cc:	2301      	movs	r3, #1
 80014ce:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.TypeExtField     = MPU_TEX_LEVEL1;
 80014d0:	2301      	movs	r3, #1
 80014d2:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 80014d4:	2300      	movs	r3, #0
 80014d6:	727b      	strb	r3, [r7, #9]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80014d8:	463b      	mov	r3, r7
 80014da:	4618      	mov	r0, r3
 80014dc:	f002 fa54 	bl	8003988 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes for the QSPI 8MB (QSPI Flash Size) to Cacheable WT */
  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 80014e0:	2301      	movs	r3, #1
 80014e2:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number           = MPU_REGION_NUMBER1;
 80014e4:	2301      	movs	r3, #1
 80014e6:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress      = OCTOSPI1_BASE;
 80014e8:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 80014ec:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size             = MPU_REGION_SIZE_8MB;
 80014ee:	2316      	movs	r3, #22
 80014f0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO;
 80014f2:	2305      	movs	r3, #5
 80014f4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable     = MPU_ACCESS_BUFFERABLE;
 80014f6:	2301      	movs	r3, #1
 80014f8:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable      = MPU_ACCESS_CACHEABLE;
 80014fa:	2301      	movs	r3, #1
 80014fc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable      = MPU_ACCESS_NOT_SHAREABLE;
 80014fe:	2300      	movs	r3, #0
 8001500:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.DisableExec      = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001502:	2300      	movs	r3, #0
 8001504:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.TypeExtField     = MPU_TEX_LEVEL1;
 8001506:	2301      	movs	r3, #1
 8001508:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 800150a:	2300      	movs	r3, #0
 800150c:	727b      	strb	r3, [r7, #9]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800150e:	463b      	mov	r3, r7
 8001510:	4618      	mov	r0, r3
 8001512:	f002 fa39 	bl	8003988 <HAL_MPU_ConfigRegion>
	
  /* Setup AXI SRAM in Cacheable WB */
  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 8001516:	2301      	movs	r3, #1
 8001518:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress      = D1_AXISRAM_BASE;
 800151a:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 800151e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size             = MPU_REGION_SIZE_512KB;
 8001520:	2312      	movs	r3, #18
 8001522:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001524:	2303      	movs	r3, #3
 8001526:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable     = MPU_ACCESS_BUFFERABLE;
 8001528:	2301      	movs	r3, #1
 800152a:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable      = MPU_ACCESS_CACHEABLE;
 800152c:	2301      	movs	r3, #1
 800152e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable      = MPU_ACCESS_SHAREABLE;
 8001530:	2301      	movs	r3, #1
 8001532:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number           = MPU_REGION_NUMBER2;
 8001534:	2302      	movs	r3, #2
 8001536:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField     = MPU_TEX_LEVEL1;
 8001538:	2301      	movs	r3, #1
 800153a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 800153c:	2300      	movs	r3, #0
 800153e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec      = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001540:	2300      	movs	r3, #0
 8001542:	733b      	strb	r3, [r7, #12]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001544:	463b      	mov	r3, r7
 8001546:	4618      	mov	r0, r3
 8001548:	f002 fa1e 	bl	8003988 <HAL_MPU_ConfigRegion>
  
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800154c:	2004      	movs	r0, #4
 800154e:	f002 f9fb 	bl	8003948 <HAL_MPU_Enable>
}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800155c:	b590      	push	{r4, r7, lr}
 800155e:	b08b      	sub	sp, #44	; 0x2c
 8001560:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  CPU_CACHE_Enable();
 8001562:	f7ff ff29 	bl	80013b8 <CPU_CACHE_Enable>
  MPU_Config();
 8001566:	f7ff ff95 	bl	8001494 <MPU_Config>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800156a:	f002 f801 	bl	8003570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800156e:	f000 f8a3 	bl	80016b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001572:	f7ff f8e9 	bl	8000748 <MX_GPIO_Init>
  MX_DMA_Init();
 8001576:	f7ff f8c7 	bl	8000708 <MX_DMA_Init>
  MX_DCMI_Init();
 800157a:	f7fe ff85 	bl	8000488 <MX_DCMI_Init>
  MX_I2C1_Init();
 800157e:	f7ff f979 	bl	8000874 <MX_I2C1_Init>
  MX_RTC_Init();
 8001582:	f000 f951 	bl	8001828 <MX_RTC_Init>
  MX_SPI4_Init();
 8001586:	f000 f9dd 	bl	8001944 <MX_SPI4_Init>
  MX_TIM1_Init();
 800158a:	f001 fed9 	bl	8003340 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	board_button_init();
 800158e:	f7fe ff0f 	bl	80003b0 <board_button_init>
	board_led_init();
 8001592:	f7fe ff3b 	bl	800040c <board_led_init>
	
	LCD_Test();
 8001596:	f7ff fa17 	bl	80009c8 <LCD_Test>
	
	uint8_t text[30];

  sprintf((char *)&text, "Camera Not Found");
 800159a:	463b      	mov	r3, r7
 800159c:	4939      	ldr	r1, [pc, #228]	; (8001684 <main+0x128>)
 800159e:	4618      	mov	r0, r3
 80015a0:	f00a f97a 	bl	800b898 <siprintf>
  LCD_ShowString(0, 58, ST7735Ctx.Width, 16, 16, text);
 80015a4:	4b38      	ldr	r3, [pc, #224]	; (8001688 <main+0x12c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	463b      	mov	r3, r7
 80015ac:	9301      	str	r3, [sp, #4]
 80015ae:	2310      	movs	r3, #16
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	2310      	movs	r3, #16
 80015b4:	213a      	movs	r1, #58	; 0x3a
 80015b6:	2000      	movs	r0, #0
 80015b8:	f7ff fdb0 	bl	800111c <LCD_ShowString>
	Camera_Init_Device(&hi2c1, FRAMESIZE_QQVGA);
	#elif TFT18
	Camera_Init_Device(&hi2c1, FRAMESIZE_QQVGA2);
	#endif
	//clean Ypos 58
	ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, 58, ST7735Ctx.Width, 16, BLACK);
 80015bc:	4b33      	ldr	r3, [pc, #204]	; (800168c <main+0x130>)
 80015be:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80015c0:	4b31      	ldr	r3, [pc, #196]	; (8001688 <main+0x12c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2200      	movs	r2, #0
 80015c6:	9201      	str	r2, [sp, #4]
 80015c8:	2210      	movs	r2, #16
 80015ca:	9200      	str	r2, [sp, #0]
 80015cc:	223a      	movs	r2, #58	; 0x3a
 80015ce:	2100      	movs	r1, #0
 80015d0:	482f      	ldr	r0, [pc, #188]	; (8001690 <main+0x134>)
 80015d2:	47a0      	blx	r4
	
  while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_RESET)
 80015d4:	e02c      	b.n	8001630 <main+0xd4>
  {

    sprintf((char *)&text, "Camera id:0x%x        ", hcamera.device_id);
 80015d6:	4b2f      	ldr	r3, [pc, #188]	; (8001694 <main+0x138>)
 80015d8:	89db      	ldrh	r3, [r3, #14]
 80015da:	461a      	mov	r2, r3
 80015dc:	463b      	mov	r3, r7
 80015de:	492e      	ldr	r1, [pc, #184]	; (8001698 <main+0x13c>)
 80015e0:	4618      	mov	r0, r3
 80015e2:	f00a f959 	bl	800b898 <siprintf>
    LCD_ShowString(4, 58, ST7735Ctx.Width, 16, 12, text);
 80015e6:	4b28      	ldr	r3, [pc, #160]	; (8001688 <main+0x12c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	463b      	mov	r3, r7
 80015ee:	9301      	str	r3, [sp, #4]
 80015f0:	230c      	movs	r3, #12
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	2310      	movs	r3, #16
 80015f6:	213a      	movs	r1, #58	; 0x3a
 80015f8:	2004      	movs	r0, #4
 80015fa:	f7ff fd8f 	bl	800111c <LCD_ShowString>
		
		HAL_Delay(500);
 80015fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001602:	f002 f847 	bl	8003694 <HAL_Delay>
		
    sprintf((char *)&text, "LongPress K1 to Run");
 8001606:	463b      	mov	r3, r7
 8001608:	4924      	ldr	r1, [pc, #144]	; (800169c <main+0x140>)
 800160a:	4618      	mov	r0, r3
 800160c:	f00a f944 	bl	800b898 <siprintf>
    LCD_ShowString(4, 58, ST7735Ctx.Width, 16, 12, text);
 8001610:	4b1d      	ldr	r3, [pc, #116]	; (8001688 <main+0x12c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	b29a      	uxth	r2, r3
 8001616:	463b      	mov	r3, r7
 8001618:	9301      	str	r3, [sp, #4]
 800161a:	230c      	movs	r3, #12
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	2310      	movs	r3, #16
 8001620:	213a      	movs	r1, #58	; 0x3a
 8001622:	2004      	movs	r0, #4
 8001624:	f7ff fd7a 	bl	800111c <LCD_ShowString>
		
		HAL_Delay(500);
 8001628:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800162c:	f002 f832 	bl	8003694 <HAL_Delay>
  while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_RESET)
 8001630:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001634:	481a      	ldr	r0, [pc, #104]	; (80016a0 <main+0x144>)
 8001636:	f005 fde9 	bl	800720c <HAL_GPIO_ReadPin>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0ca      	beq.n	80015d6 <main+0x7a>
  }

  HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)&pic, FrameWidth * FrameHeight * 2 / 4);
 8001640:	4a18      	ldr	r2, [pc, #96]	; (80016a4 <main+0x148>)
 8001642:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001646:	2100      	movs	r1, #0
 8001648:	4817      	ldr	r0, [pc, #92]	; (80016a8 <main+0x14c>)
 800164a:	f002 fa5b 	bl	8003b04 <HAL_DCMI_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (DCMI_FrameIsReady)
 800164e:	4b17      	ldr	r3, [pc, #92]	; (80016ac <main+0x150>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0fb      	beq.n	800164e <main+0xf2>
    {
        DCMI_FrameIsReady = 0;
 8001656:	4b15      	ldr	r3, [pc, #84]	; (80016ac <main+0x150>)
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
        ST7735_FillRGBRect(&st7735_pObj,0,0,(uint8_t *)&pic[20][0], ST7735Ctx.Width, 80);
        #elif TFT18
        ST7735_FillRGBRect(&st7735_pObj,0,0,(uint8_t *)&pic[0][0], ST7735Ctx.Width, ST7735Ctx.Height);
        #endif
			
        sprintf((char *)&text,"%dFPS",Camera_FPS);
 800165c:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <main+0x154>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	463b      	mov	r3, r7
 8001662:	4914      	ldr	r1, [pc, #80]	; (80016b4 <main+0x158>)
 8001664:	4618      	mov	r0, r3
 8001666:	f00a f917 	bl	800b898 <siprintf>
        LCD_ShowString(5,5,60,16,12,text);
 800166a:	463b      	mov	r3, r7
 800166c:	9301      	str	r3, [sp, #4]
 800166e:	230c      	movs	r3, #12
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	2310      	movs	r3, #16
 8001674:	223c      	movs	r2, #60	; 0x3c
 8001676:	2105      	movs	r1, #5
 8001678:	2005      	movs	r0, #5
 800167a:	f7ff fd4f 	bl	800111c <LCD_ShowString>
        
        board_led_toggle();
 800167e:	f7fe fef9 	bl	8000474 <board_led_toggle>
		if (DCMI_FrameIsReady)
 8001682:	e7e4      	b.n	800164e <main+0xf2>
 8001684:	0800c22c 	.word	0x0800c22c
 8001688:	24009938 	.word	0x24009938
 800168c:	24000024 	.word	0x24000024
 8001690:	2400023c 	.word	0x2400023c
 8001694:	2400010c 	.word	0x2400010c
 8001698:	0800c240 	.word	0x0800c240
 800169c:	0800c258 	.word	0x0800c258
 80016a0:	58020800 	.word	0x58020800
 80016a4:	2400027c 	.word	0x2400027c
 80016a8:	24000120 	.word	0x24000120
 80016ac:	2400987c 	.word	0x2400987c
 80016b0:	24009880 	.word	0x24009880
 80016b4:	0800c26c 	.word	0x0800c26c

080016b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b09c      	sub	sp, #112	; 0x70
 80016bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c2:	224c      	movs	r2, #76	; 0x4c
 80016c4:	2100      	movs	r1, #0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f00a f906 	bl	800b8d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	2220      	movs	r2, #32
 80016d0:	2100      	movs	r1, #0
 80016d2:	4618      	mov	r0, r3
 80016d4:	f00a f900 	bl	800b8d8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80016d8:	2002      	movs	r0, #2
 80016da:	f005 ff1b 	bl	8007514 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80016de:	2300      	movs	r3, #0
 80016e0:	603b      	str	r3, [r7, #0]
 80016e2:	4b34      	ldr	r3, [pc, #208]	; (80017b4 <SystemClock_Config+0xfc>)
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	4a33      	ldr	r2, [pc, #204]	; (80017b4 <SystemClock_Config+0xfc>)
 80016e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80016ec:	6193      	str	r3, [r2, #24]
 80016ee:	4b31      	ldr	r3, [pc, #196]	; (80017b4 <SystemClock_Config+0xfc>)
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016f6:	603b      	str	r3, [r7, #0]
 80016f8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80016fa:	bf00      	nop
 80016fc:	4b2d      	ldr	r3, [pc, #180]	; (80017b4 <SystemClock_Config+0xfc>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001704:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001708:	d1f8      	bne.n	80016fc <SystemClock_Config+0x44>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800170a:	f005 fef3 	bl	80074f4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800170e:	4b2a      	ldr	r3, [pc, #168]	; (80017b8 <SystemClock_Config+0x100>)
 8001710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001712:	4a29      	ldr	r2, [pc, #164]	; (80017b8 <SystemClock_Config+0x100>)
 8001714:	f023 0318 	bic.w	r3, r3, #24
 8001718:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 800171a:	2325      	movs	r3, #37	; 0x25
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800171e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001722:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001724:	2301      	movs	r3, #1
 8001726:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001728:	2301      	movs	r3, #1
 800172a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800172c:	2302      	movs	r3, #2
 800172e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001730:	2302      	movs	r3, #2
 8001732:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001734:	2302      	movs	r3, #2
 8001736:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8001738:	232c      	movs	r3, #44	; 0x2c
 800173a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800173c:	2301      	movs	r3, #1
 800173e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 46;
 8001740:	232e      	movs	r3, #46	; 0x2e
 8001742:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001744:	2302      	movs	r3, #2
 8001746:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001748:	230c      	movs	r3, #12
 800174a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800174c:	2300      	movs	r3, #0
 800174e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001758:	4618      	mov	r0, r3
 800175a:	f005 ff15 	bl	8007588 <HAL_RCC_OscConfig>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001764:	f000 f85a 	bl	800181c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001768:	233f      	movs	r3, #63	; 0x3f
 800176a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800176c:	2303      	movs	r3, #3
 800176e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001770:	2300      	movs	r3, #0
 8001772:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001774:	2308      	movs	r3, #8
 8001776:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001778:	2340      	movs	r3, #64	; 0x40
 800177a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800177c:	2340      	movs	r3, #64	; 0x40
 800177e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001780:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001784:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001786:	2340      	movs	r3, #64	; 0x40
 8001788:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	2103      	movs	r1, #3
 800178e:	4618      	mov	r0, r3
 8001790:	f006 fad4 	bl	8007d3c <HAL_RCC_ClockConfig>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800179a:	f000 f83f 	bl	800181c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI48, RCC_MCODIV_4);
 800179e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80017a2:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80017a6:	2000      	movs	r0, #0
 80017a8:	f006 fc7e 	bl	80080a8 <HAL_RCC_MCOConfig>
}
 80017ac:	bf00      	nop
 80017ae:	3770      	adds	r7, #112	; 0x70
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	58024800 	.word	0x58024800
 80017b8:	58024400 	.word	0x58024400

080017bc <HAL_DCMI_FrameEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
	static uint32_t count = 0,tick = 0;

	if(HAL_GetTick() - tick >= 1000)
 80017c4:	f001 ff5a 	bl	800367c <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	4b10      	ldr	r3, [pc, #64]	; (800180c <HAL_DCMI_FrameEventCallback+0x50>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017d4:	d30b      	bcc.n	80017ee <HAL_DCMI_FrameEventCallback+0x32>
	{
		tick = HAL_GetTick();
 80017d6:	f001 ff51 	bl	800367c <HAL_GetTick>
 80017da:	4603      	mov	r3, r0
 80017dc:	4a0b      	ldr	r2, [pc, #44]	; (800180c <HAL_DCMI_FrameEventCallback+0x50>)
 80017de:	6013      	str	r3, [r2, #0]
		Camera_FPS = count;
 80017e0:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <HAL_DCMI_FrameEventCallback+0x54>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a0b      	ldr	r2, [pc, #44]	; (8001814 <HAL_DCMI_FrameEventCallback+0x58>)
 80017e6:	6013      	str	r3, [r2, #0]
		count = 0;
 80017e8:	4b09      	ldr	r3, [pc, #36]	; (8001810 <HAL_DCMI_FrameEventCallback+0x54>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
	}
	count ++;
 80017ee:	4b08      	ldr	r3, [pc, #32]	; (8001810 <HAL_DCMI_FrameEventCallback+0x54>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	3301      	adds	r3, #1
 80017f4:	4a06      	ldr	r2, [pc, #24]	; (8001810 <HAL_DCMI_FrameEventCallback+0x54>)
 80017f6:	6013      	str	r3, [r2, #0]
	
  DCMI_FrameIsReady ++;
 80017f8:	4b07      	ldr	r3, [pc, #28]	; (8001818 <HAL_DCMI_FrameEventCallback+0x5c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	3301      	adds	r3, #1
 80017fe:	4a06      	ldr	r2, [pc, #24]	; (8001818 <HAL_DCMI_FrameEventCallback+0x5c>)
 8001800:	6013      	str	r3, [r2, #0]
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	24009884 	.word	0x24009884
 8001810:	24009888 	.word	0x24009888
 8001814:	24009880 	.word	0x24009880
 8001818:	2400987c 	.word	0x2400987c

0800181c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001820:	b672      	cpsid	i
}
 8001822:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001824:	e7fe      	b.n	8001824 <Error_Handler+0x8>
	...

08001828 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800183c:	2300      	movs	r3, #0
 800183e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001840:	4b25      	ldr	r3, [pc, #148]	; (80018d8 <MX_RTC_Init+0xb0>)
 8001842:	4a26      	ldr	r2, [pc, #152]	; (80018dc <MX_RTC_Init+0xb4>)
 8001844:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001846:	4b24      	ldr	r3, [pc, #144]	; (80018d8 <MX_RTC_Init+0xb0>)
 8001848:	2200      	movs	r2, #0
 800184a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800184c:	4b22      	ldr	r3, [pc, #136]	; (80018d8 <MX_RTC_Init+0xb0>)
 800184e:	227f      	movs	r2, #127	; 0x7f
 8001850:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001852:	4b21      	ldr	r3, [pc, #132]	; (80018d8 <MX_RTC_Init+0xb0>)
 8001854:	22ff      	movs	r2, #255	; 0xff
 8001856:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001858:	4b1f      	ldr	r3, [pc, #124]	; (80018d8 <MX_RTC_Init+0xb0>)
 800185a:	2200      	movs	r2, #0
 800185c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800185e:	4b1e      	ldr	r3, [pc, #120]	; (80018d8 <MX_RTC_Init+0xb0>)
 8001860:	2200      	movs	r2, #0
 8001862:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001864:	4b1c      	ldr	r3, [pc, #112]	; (80018d8 <MX_RTC_Init+0xb0>)
 8001866:	2200      	movs	r2, #0
 8001868:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800186a:	4b1b      	ldr	r3, [pc, #108]	; (80018d8 <MX_RTC_Init+0xb0>)
 800186c:	2200      	movs	r2, #0
 800186e:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001870:	4819      	ldr	r0, [pc, #100]	; (80018d8 <MX_RTC_Init+0xb0>)
 8001872:	f008 f901 	bl	8009a78 <HAL_RTC_Init>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 800187c:	f7ff ffce 	bl	800181c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001880:	2300      	movs	r3, #0
 8001882:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001884:	2300      	movs	r3, #0
 8001886:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001888:	2300      	movs	r3, #0
 800188a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800188c:	2300      	movs	r3, #0
 800188e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001894:	1d3b      	adds	r3, r7, #4
 8001896:	2201      	movs	r2, #1
 8001898:	4619      	mov	r1, r3
 800189a:	480f      	ldr	r0, [pc, #60]	; (80018d8 <MX_RTC_Init+0xb0>)
 800189c:	f008 f96e 	bl	8009b7c <HAL_RTC_SetTime>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80018a6:	f7ff ffb9 	bl	800181c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80018aa:	2301      	movs	r3, #1
 80018ac:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80018ae:	2301      	movs	r3, #1
 80018b0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80018b2:	2301      	movs	r3, #1
 80018b4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80018ba:	463b      	mov	r3, r7
 80018bc:	2201      	movs	r2, #1
 80018be:	4619      	mov	r1, r3
 80018c0:	4805      	ldr	r0, [pc, #20]	; (80018d8 <MX_RTC_Init+0xb0>)
 80018c2:	f008 f9f9 	bl	8009cb8 <HAL_RTC_SetDate>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80018cc:	f7ff ffa6 	bl	800181c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80018d0:	bf00      	nop
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	2400988c 	.word	0x2400988c
 80018dc:	58004000 	.word	0x58004000

080018e0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b0b0      	sub	sp, #192	; 0xc0
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018e8:	f107 0308 	add.w	r3, r7, #8
 80018ec:	22b8      	movs	r2, #184	; 0xb8
 80018ee:	2100      	movs	r1, #0
 80018f0:	4618      	mov	r0, r3
 80018f2:	f009 fff1 	bl	800b8d8 <memset>
  if(rtcHandle->Instance==RTC)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a10      	ldr	r2, [pc, #64]	; (800193c <HAL_RTC_MspInit+0x5c>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d119      	bne.n	8001934 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001900:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001904:	f04f 0300 	mov.w	r3, #0
 8001908:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800190c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001910:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001914:	f107 0308 	add.w	r3, r7, #8
 8001918:	4618      	mov	r0, r3
 800191a:	f006 fda9 	bl	8008470 <HAL_RCCEx_PeriphCLKConfig>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8001924:	f7ff ff7a 	bl	800181c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <HAL_RTC_MspInit+0x60>)
 800192a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192c:	4a04      	ldr	r2, [pc, #16]	; (8001940 <HAL_RTC_MspInit+0x60>)
 800192e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001932:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001934:	bf00      	nop
 8001936:	37c0      	adds	r7, #192	; 0xc0
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	58004000 	.word	0x58004000
 8001940:	58024400 	.word	0x58024400

08001944 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001948:	4b28      	ldr	r3, [pc, #160]	; (80019ec <MX_SPI4_Init+0xa8>)
 800194a:	4a29      	ldr	r2, [pc, #164]	; (80019f0 <MX_SPI4_Init+0xac>)
 800194c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800194e:	4b27      	ldr	r3, [pc, #156]	; (80019ec <MX_SPI4_Init+0xa8>)
 8001950:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001954:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 8001956:	4b25      	ldr	r3, [pc, #148]	; (80019ec <MX_SPI4_Init+0xa8>)
 8001958:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800195c:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800195e:	4b23      	ldr	r3, [pc, #140]	; (80019ec <MX_SPI4_Init+0xa8>)
 8001960:	2207      	movs	r2, #7
 8001962:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001964:	4b21      	ldr	r3, [pc, #132]	; (80019ec <MX_SPI4_Init+0xa8>)
 8001966:	2200      	movs	r2, #0
 8001968:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800196a:	4b20      	ldr	r3, [pc, #128]	; (80019ec <MX_SPI4_Init+0xa8>)
 800196c:	2200      	movs	r2, #0
 800196e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001970:	4b1e      	ldr	r3, [pc, #120]	; (80019ec <MX_SPI4_Init+0xa8>)
 8001972:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001976:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001978:	4b1c      	ldr	r3, [pc, #112]	; (80019ec <MX_SPI4_Init+0xa8>)
 800197a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800197e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001980:	4b1a      	ldr	r3, [pc, #104]	; (80019ec <MX_SPI4_Init+0xa8>)
 8001982:	2200      	movs	r2, #0
 8001984:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001986:	4b19      	ldr	r3, [pc, #100]	; (80019ec <MX_SPI4_Init+0xa8>)
 8001988:	2200      	movs	r2, #0
 800198a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800198c:	4b17      	ldr	r3, [pc, #92]	; (80019ec <MX_SPI4_Init+0xa8>)
 800198e:	2200      	movs	r2, #0
 8001990:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001992:	4b16      	ldr	r3, [pc, #88]	; (80019ec <MX_SPI4_Init+0xa8>)
 8001994:	2200      	movs	r2, #0
 8001996:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001998:	4b14      	ldr	r3, [pc, #80]	; (80019ec <MX_SPI4_Init+0xa8>)
 800199a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800199e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80019a0:	4b12      	ldr	r3, [pc, #72]	; (80019ec <MX_SPI4_Init+0xa8>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80019a6:	4b11      	ldr	r3, [pc, #68]	; (80019ec <MX_SPI4_Init+0xa8>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80019ac:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <MX_SPI4_Init+0xa8>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80019b2:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <MX_SPI4_Init+0xa8>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80019b8:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <MX_SPI4_Init+0xa8>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80019be:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <MX_SPI4_Init+0xa8>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80019c4:	4b09      	ldr	r3, [pc, #36]	; (80019ec <MX_SPI4_Init+0xa8>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80019ca:	4b08      	ldr	r3, [pc, #32]	; (80019ec <MX_SPI4_Init+0xa8>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80019d0:	4b06      	ldr	r3, [pc, #24]	; (80019ec <MX_SPI4_Init+0xa8>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80019d6:	4805      	ldr	r0, [pc, #20]	; (80019ec <MX_SPI4_Init+0xa8>)
 80019d8:	f008 faac 	bl	8009f34 <HAL_SPI_Init>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 80019e2:	f7ff ff1b 	bl	800181c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	240098b0 	.word	0x240098b0
 80019f0:	40013400 	.word	0x40013400

080019f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b0b8      	sub	sp, #224	; 0xe0
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a0c:	f107 0310 	add.w	r3, r7, #16
 8001a10:	22b8      	movs	r2, #184	; 0xb8
 8001a12:	2100      	movs	r1, #0
 8001a14:	4618      	mov	r0, r3
 8001a16:	f009 ff5f 	bl	800b8d8 <memset>
  if(spiHandle->Instance==SPI4)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a26      	ldr	r2, [pc, #152]	; (8001ab8 <HAL_SPI_MspInit+0xc4>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d145      	bne.n	8001ab0 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001a24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a28:	f04f 0300 	mov.w	r3, #0
 8001a2c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001a30:	2300      	movs	r3, #0
 8001a32:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a34:	f107 0310 	add.w	r3, r7, #16
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f006 fd19 	bl	8008470 <HAL_RCCEx_PeriphCLKConfig>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001a44:	f7ff feea 	bl	800181c <Error_Handler>
    }

    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001a48:	4b1c      	ldr	r3, [pc, #112]	; (8001abc <HAL_SPI_MspInit+0xc8>)
 8001a4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a4e:	4a1b      	ldr	r2, [pc, #108]	; (8001abc <HAL_SPI_MspInit+0xc8>)
 8001a50:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a54:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a58:	4b18      	ldr	r3, [pc, #96]	; (8001abc <HAL_SPI_MspInit+0xc8>)
 8001a5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a66:	4b15      	ldr	r3, [pc, #84]	; (8001abc <HAL_SPI_MspInit+0xc8>)
 8001a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a6c:	4a13      	ldr	r2, [pc, #76]	; (8001abc <HAL_SPI_MspInit+0xc8>)
 8001a6e:	f043 0310 	orr.w	r3, r3, #16
 8001a72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a76:	4b11      	ldr	r3, [pc, #68]	; (8001abc <HAL_SPI_MspInit+0xc8>)
 8001a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a7c:	f003 0310 	and.w	r3, r3, #16
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8001a84:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001a88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001a9e:	2305      	movs	r3, #5
 8001aa0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aa4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4805      	ldr	r0, [pc, #20]	; (8001ac0 <HAL_SPI_MspInit+0xcc>)
 8001aac:	f005 fa06 	bl	8006ebc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	37e0      	adds	r7, #224	; 0xe0
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40013400 	.word	0x40013400
 8001abc:	58024400 	.word	0x58024400
 8001ac0:	58021000 	.word	0x58021000

08001ac4 <ST7735_RegisterBusIO>:
  * @param  pObj Component object pointer
  * @param  pIO  Component IO structure pointer
  * @retval Component status
  */
int32_t ST7735_RegisterBusIO (ST7735_Object_t *pObj, ST7735_IO_t *pIO)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if(pObj == NULL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d103      	bne.n	8001adc <ST7735_RegisterBusIO+0x18>
  {
    ret = ST7735_ERROR;
 8001ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	e03a      	b.n	8001b52 <ST7735_RegisterBusIO+0x8e>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	891a      	ldrh	r2, [r3, #8]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	68da      	ldr	r2, [r3, #12]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	691a      	ldr	r2, [r3, #16]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	611a      	str	r2, [r3, #16]
    pObj->IO.SendData  = pIO->SendData;
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	695a      	ldr	r2, [r3, #20]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	615a      	str	r2, [r3, #20]
    pObj->IO.RecvData  = pIO->RecvData;
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	699a      	ldr	r2, [r3, #24]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	619a      	str	r2, [r3, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	69da      	ldr	r2, [r3, #28]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	61da      	str	r2, [r3, #28]

    pObj->Ctx.ReadReg   = ST7735_ReadRegWrap;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a0f      	ldr	r2, [pc, #60]	; (8001b5c <ST7735_RegisterBusIO+0x98>)
 8001b20:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.WriteReg  = ST7735_WriteRegWrap;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a0e      	ldr	r2, [pc, #56]	; (8001b60 <ST7735_RegisterBusIO+0x9c>)
 8001b26:	621a      	str	r2, [r3, #32]
    pObj->Ctx.SendData  = ST7735_SendDataWrap;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a0e      	ldr	r2, [pc, #56]	; (8001b64 <ST7735_RegisterBusIO+0xa0>)
 8001b2c:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.RecvData  = ST7735_RecvDataWrap;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a0d      	ldr	r2, [pc, #52]	; (8001b68 <ST7735_RegisterBusIO+0xa4>)
 8001b32:	62da      	str	r2, [r3, #44]	; 0x2c
    pObj->Ctx.handle    = pObj;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	631a      	str	r2, [r3, #48]	; 0x30

    if(pObj->IO.Init != NULL)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d004      	beq.n	8001b4c <ST7735_RegisterBusIO+0x88>
    {
      ret = pObj->IO.Init();
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4798      	blx	r3
 8001b48:	60f8      	str	r0, [r7, #12]
 8001b4a:	e002      	b.n	8001b52 <ST7735_RegisterBusIO+0x8e>
    }
    else
    {
      ret = ST7735_ERROR;
 8001b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b50:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001b52:	68fb      	ldr	r3, [r7, #12]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	08002fcd 	.word	0x08002fcd
 8001b60:	08002ff5 	.word	0x08002ff5
 8001b64:	0800301f 	.word	0x0800301f
 8001b68:	08003043 	.word	0x08003043

08001b6c <ST7735_Init>:
  * @param  ColorCoding RGB mode
  * @param  Orientation Display orientation
  * @retval Component status
  */
int32_t ST7735_Init(ST7735_Object_t *pObj, uint32_t ColorCoding, ST7735_Ctx_t *pDriver)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
  uint8_t tmp;
  int32_t ret;

  if(pObj == NULL)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d103      	bne.n	8001b86 <ST7735_Init+0x1a>
  {
    ret = ST7735_ERROR;
 8001b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b82:	617b      	str	r3, [r7, #20]
 8001b84:	e3a6      	b.n	80022d4 <ST7735_Init+0x768>
  }
  else
  {
		/* Out of sleep mode, 0 args, delay 120ms */
    tmp = 0x00U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	74fb      	strb	r3, [r7, #19]
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f103 0020 	add.w	r0, r3, #32
 8001b90:	f107 0213 	add.w	r2, r7, #19
 8001b94:	2300      	movs	r3, #0
 8001b96:	2101      	movs	r1, #1
 8001b98:	f001 fa92 	bl	80030c0 <st7735_write_reg>
 8001b9c:	6178      	str	r0, [r7, #20]
		(void)ST7735_IO_Delay(pObj, 120);
 8001b9e:	2178      	movs	r1, #120	; 0x78
 8001ba0:	68f8      	ldr	r0, [r7, #12]
 8001ba2:	f001 fa60 	bl	8003066 <ST7735_IO_Delay>
		
		tmp = 0x00U;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	74fb      	strb	r3, [r7, #19]
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f103 0020 	add.w	r0, r3, #32
 8001bb0:	f107 0213 	add.w	r2, r7, #19
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	2101      	movs	r1, #1
 8001bb8:	f001 fa82 	bl	80030c0 <st7735_write_reg>
 8001bbc:	6178      	str	r0, [r7, #20]
		(void)ST7735_IO_Delay(pObj, 120);
 8001bbe:	2178      	movs	r1, #120	; 0x78
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f001 fa50 	bl	8003066 <ST7735_IO_Delay>
		
    /* Out of sleep mode, 0 args, no delay */
    tmp = 0x00U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_SLEEP_OUT, &tmp, 1);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f103 0020 	add.w	r0, r3, #32
 8001bd0:	f107 0213 	add.w	r2, r7, #19
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	2111      	movs	r1, #17
 8001bd8:	f001 fa72 	bl	80030c0 <st7735_write_reg>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	4413      	add	r3, r2
 8001be2:	617b      	str	r3, [r7, #20]
    
		/* Frame rate ctrl - normal mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D)*/
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL1, &tmp, 0);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f103 0020 	add.w	r0, r3, #32
 8001bea:	f107 0213 	add.w	r2, r7, #19
 8001bee:	2300      	movs	r3, #0
 8001bf0:	21b1      	movs	r1, #177	; 0xb1
 8001bf2:	f001 fa65 	bl	80030c0 <st7735_write_reg>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	3320      	adds	r3, #32
 8001c06:	f107 0113 	add.w	r1, r7, #19
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f001 fa6c 	bl	80030ea <st7735_send_data>
 8001c12:	4602      	mov	r2, r0
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	4413      	add	r3, r2
 8001c18:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8001c1a:	232c      	movs	r3, #44	; 0x2c
 8001c1c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	3320      	adds	r3, #32
 8001c22:	f107 0113 	add.w	r1, r7, #19
 8001c26:	2201      	movs	r2, #1
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f001 fa5e 	bl	80030ea <st7735_send_data>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	4413      	add	r3, r2
 8001c34:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8001c36:	232d      	movs	r3, #45	; 0x2d
 8001c38:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	3320      	adds	r3, #32
 8001c3e:	f107 0113 	add.w	r1, r7, #19
 8001c42:	2201      	movs	r2, #1
 8001c44:	4618      	mov	r0, r3
 8001c46:	f001 fa50 	bl	80030ea <st7735_send_data>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	4413      	add	r3, r2
 8001c50:	617b      	str	r3, [r7, #20]

    /* Frame rate control - idle mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D) */
    tmp = 0x01U;
 8001c52:	2301      	movs	r3, #1
 8001c54:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL2, &tmp, 1);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f103 0020 	add.w	r0, r3, #32
 8001c5c:	f107 0213 	add.w	r2, r7, #19
 8001c60:	2301      	movs	r3, #1
 8001c62:	21b2      	movs	r1, #178	; 0xb2
 8001c64:	f001 fa2c 	bl	80030c0 <st7735_write_reg>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8001c70:	232c      	movs	r3, #44	; 0x2c
 8001c72:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	3320      	adds	r3, #32
 8001c78:	f107 0113 	add.w	r1, r7, #19
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f001 fa33 	bl	80030ea <st7735_send_data>
 8001c84:	4602      	mov	r2, r0
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	4413      	add	r3, r2
 8001c8a:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8001c8c:	232d      	movs	r3, #45	; 0x2d
 8001c8e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	3320      	adds	r3, #32
 8001c94:	f107 0113 	add.w	r1, r7, #19
 8001c98:	2201      	movs	r2, #1
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f001 fa25 	bl	80030ea <st7735_send_data>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	617b      	str	r3, [r7, #20]

    /* Frame rate ctrl - partial mode, 6 args: Dot inversion mode, Line inversion mode */
    tmp = 0x01U;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL3, &tmp, 1);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f103 0020 	add.w	r0, r3, #32
 8001cb2:	f107 0213 	add.w	r2, r7, #19
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	21b3      	movs	r1, #179	; 0xb3
 8001cba:	f001 fa01 	bl	80030c0 <st7735_write_reg>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8001cc6:	232c      	movs	r3, #44	; 0x2c
 8001cc8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	3320      	adds	r3, #32
 8001cce:	f107 0113 	add.w	r1, r7, #19
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f001 fa08 	bl	80030ea <st7735_send_data>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	4413      	add	r3, r2
 8001ce0:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8001ce2:	232d      	movs	r3, #45	; 0x2d
 8001ce4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	3320      	adds	r3, #32
 8001cea:	f107 0113 	add.w	r1, r7, #19
 8001cee:	2201      	movs	r2, #1
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f001 f9fa 	bl	80030ea <st7735_send_data>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	3320      	adds	r3, #32
 8001d06:	f107 0113 	add.w	r1, r7, #19
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f001 f9ec 	bl	80030ea <st7735_send_data>
 8001d12:	4602      	mov	r2, r0
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	4413      	add	r3, r2
 8001d18:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8001d1a:	232c      	movs	r3, #44	; 0x2c
 8001d1c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	3320      	adds	r3, #32
 8001d22:	f107 0113 	add.w	r1, r7, #19
 8001d26:	2201      	movs	r2, #1
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f001 f9de 	bl	80030ea <st7735_send_data>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	4413      	add	r3, r2
 8001d34:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8001d36:	232d      	movs	r3, #45	; 0x2d
 8001d38:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	3320      	adds	r3, #32
 8001d3e:	f107 0113 	add.w	r1, r7, #19
 8001d42:	2201      	movs	r2, #1
 8001d44:	4618      	mov	r0, r3
 8001d46:	f001 f9d0 	bl	80030ea <st7735_send_data>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	4413      	add	r3, r2
 8001d50:	617b      	str	r3, [r7, #20]

    /* Display inversion ctrl, 1 arg, no delay: No inversion */
    tmp = 0x07U;
 8001d52:	2307      	movs	r3, #7
 8001d54:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_INVERSION_CTRL, &tmp, 1);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f103 0020 	add.w	r0, r3, #32
 8001d5c:	f107 0213 	add.w	r2, r7, #19
 8001d60:	2301      	movs	r3, #1
 8001d62:	21b4      	movs	r1, #180	; 0xb4
 8001d64:	f001 f9ac 	bl	80030c0 <st7735_write_reg>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	617b      	str	r3, [r7, #20]

    /* Power control, 3 args, no delay: -4.6V , AUTO mode */
    tmp = 0xA2U;
 8001d70:	23a2      	movs	r3, #162	; 0xa2
 8001d72:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL1, &tmp, 1);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f103 0020 	add.w	r0, r3, #32
 8001d7a:	f107 0213 	add.w	r2, r7, #19
 8001d7e:	2301      	movs	r3, #1
 8001d80:	21c0      	movs	r1, #192	; 0xc0
 8001d82:	f001 f99d 	bl	80030c0 <st7735_write_reg>
 8001d86:	4602      	mov	r2, r0
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	617b      	str	r3, [r7, #20]
    tmp = 0x02U;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	3320      	adds	r3, #32
 8001d96:	f107 0113 	add.w	r1, r7, #19
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f001 f9a4 	bl	80030ea <st7735_send_data>
 8001da2:	4602      	mov	r2, r0
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	4413      	add	r3, r2
 8001da8:	617b      	str	r3, [r7, #20]
    tmp = 0x84U;
 8001daa:	2384      	movs	r3, #132	; 0x84
 8001dac:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	3320      	adds	r3, #32
 8001db2:	f107 0113 	add.w	r1, r7, #19
 8001db6:	2201      	movs	r2, #1
 8001db8:	4618      	mov	r0, r3
 8001dba:	f001 f996 	bl	80030ea <st7735_send_data>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	617b      	str	r3, [r7, #20]

    /* Power control, 1 arg, no delay: VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD */
    tmp = 0xC5U;
 8001dc6:	23c5      	movs	r3, #197	; 0xc5
 8001dc8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL2, &tmp, 1);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f103 0020 	add.w	r0, r3, #32
 8001dd0:	f107 0213 	add.w	r2, r7, #19
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	21c1      	movs	r1, #193	; 0xc1
 8001dd8:	f001 f972 	bl	80030c0 <st7735_write_reg>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	4413      	add	r3, r2
 8001de2:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay: Opamp current small, Boost frequency */
    tmp = 0x0AU;
 8001de4:	230a      	movs	r3, #10
 8001de6:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL3, &tmp, 1);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f103 0020 	add.w	r0, r3, #32
 8001dee:	f107 0213 	add.w	r2, r7, #19
 8001df2:	2301      	movs	r3, #1
 8001df4:	21c2      	movs	r1, #194	; 0xc2
 8001df6:	f001 f963 	bl	80030c0 <st7735_write_reg>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	4413      	add	r3, r2
 8001e00:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8001e02:	2300      	movs	r3, #0
 8001e04:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	3320      	adds	r3, #32
 8001e0a:	f107 0113 	add.w	r1, r7, #19
 8001e0e:	2201      	movs	r2, #1
 8001e10:	4618      	mov	r0, r3
 8001e12:	f001 f96a 	bl	80030ea <st7735_send_data>
 8001e16:	4602      	mov	r2, r0
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay: BCLK/2, Opamp current small & Medium low */
    tmp = 0x8AU;
 8001e1e:	238a      	movs	r3, #138	; 0x8a
 8001e20:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL4, &tmp, 1);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f103 0020 	add.w	r0, r3, #32
 8001e28:	f107 0213 	add.w	r2, r7, #19
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	21c3      	movs	r1, #195	; 0xc3
 8001e30:	f001 f946 	bl	80030c0 <st7735_write_reg>
 8001e34:	4602      	mov	r2, r0
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	4413      	add	r3, r2
 8001e3a:	617b      	str	r3, [r7, #20]
    tmp = 0x2AU;
 8001e3c:	232a      	movs	r3, #42	; 0x2a
 8001e3e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	3320      	adds	r3, #32
 8001e44:	f107 0113 	add.w	r1, r7, #19
 8001e48:	2201      	movs	r2, #1
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f001 f94d 	bl	80030ea <st7735_send_data>
 8001e50:	4602      	mov	r2, r0
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	4413      	add	r3, r2
 8001e56:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay */
    tmp = 0x8AU;
 8001e58:	238a      	movs	r3, #138	; 0x8a
 8001e5a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL5, &tmp, 1);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f103 0020 	add.w	r0, r3, #32
 8001e62:	f107 0213 	add.w	r2, r7, #19
 8001e66:	2301      	movs	r3, #1
 8001e68:	21c4      	movs	r1, #196	; 0xc4
 8001e6a:	f001 f929 	bl	80030c0 <st7735_write_reg>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	4413      	add	r3, r2
 8001e74:	617b      	str	r3, [r7, #20]
    tmp = 0xEEU;
 8001e76:	23ee      	movs	r3, #238	; 0xee
 8001e78:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	3320      	adds	r3, #32
 8001e7e:	f107 0113 	add.w	r1, r7, #19
 8001e82:	2201      	movs	r2, #1
 8001e84:	4618      	mov	r0, r3
 8001e86:	f001 f930 	bl	80030ea <st7735_send_data>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	4413      	add	r3, r2
 8001e90:	617b      	str	r3, [r7, #20]

    /* Power control, 1 arg, no delay */
    tmp = 0x0EU;
 8001e92:	230e      	movs	r3, #14
 8001e94:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_VCOMH_VCOML_CTRL1, &tmp, 1);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f103 0020 	add.w	r0, r3, #32
 8001e9c:	f107 0213 	add.w	r2, r7, #19
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	21c5      	movs	r1, #197	; 0xc5
 8001ea4:	f001 f90c 	bl	80030c0 <st7735_write_reg>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	4413      	add	r3, r2
 8001eae:	617b      	str	r3, [r7, #20]

		/* choose panel*/
		if (pDriver->Panel == HannStar_Panel) {
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	7b1b      	ldrb	r3, [r3, #12]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d10d      	bne.n	8001ed4 <ST7735_Init+0x368>
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_ON, &tmp, 0);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f103 0020 	add.w	r0, r3, #32
 8001ebe:	f107 0213 	add.w	r2, r7, #19
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	2121      	movs	r1, #33	; 0x21
 8001ec6:	f001 f8fb 	bl	80030c0 <st7735_write_reg>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	4413      	add	r3, r2
 8001ed0:	617b      	str	r3, [r7, #20]
 8001ed2:	e00c      	b.n	8001eee <ST7735_Init+0x382>
		} else {
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_OFF, &tmp, 0);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f103 0020 	add.w	r0, r3, #32
 8001eda:	f107 0213 	add.w	r2, r7, #19
 8001ede:	2300      	movs	r3, #0
 8001ee0:	2120      	movs	r1, #32
 8001ee2:	f001 f8ed 	bl	80030c0 <st7735_write_reg>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	4413      	add	r3, r2
 8001eec:	617b      	str	r3, [r7, #20]
		}
    /* Set color mode, 1 arg, no delay */
    ret += st7735_write_reg(&pObj->Ctx, ST7735_COLOR_MODE, (uint8_t*)&ColorCoding, 1);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f103 0020 	add.w	r0, r3, #32
 8001ef4:	f107 0208 	add.w	r2, r7, #8
 8001ef8:	2301      	movs	r3, #1
 8001efa:	213a      	movs	r1, #58	; 0x3a
 8001efc:	f001 f8e0 	bl	80030c0 <st7735_write_reg>
 8001f00:	4602      	mov	r2, r0
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	4413      	add	r3, r2
 8001f06:	617b      	str	r3, [r7, #20]

    /* Magical unicorn dust, 16 args, no delay */
    tmp = 0x02U;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PV_GAMMA_CTRL, &tmp, 1);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f103 0020 	add.w	r0, r3, #32
 8001f12:	f107 0213 	add.w	r2, r7, #19
 8001f16:	2301      	movs	r3, #1
 8001f18:	21e0      	movs	r1, #224	; 0xe0
 8001f1a:	f001 f8d1 	bl	80030c0 <st7735_write_reg>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	4413      	add	r3, r2
 8001f24:	617b      	str	r3, [r7, #20]
    tmp = 0x1CU;
 8001f26:	231c      	movs	r3, #28
 8001f28:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	3320      	adds	r3, #32
 8001f2e:	f107 0113 	add.w	r1, r7, #19
 8001f32:	2201      	movs	r2, #1
 8001f34:	4618      	mov	r0, r3
 8001f36:	f001 f8d8 	bl	80030ea <st7735_send_data>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	4413      	add	r3, r2
 8001f40:	617b      	str	r3, [r7, #20]
    tmp = 0x07U;
 8001f42:	2307      	movs	r3, #7
 8001f44:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	3320      	adds	r3, #32
 8001f4a:	f107 0113 	add.w	r1, r7, #19
 8001f4e:	2201      	movs	r2, #1
 8001f50:	4618      	mov	r0, r3
 8001f52:	f001 f8ca 	bl	80030ea <st7735_send_data>
 8001f56:	4602      	mov	r2, r0
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	617b      	str	r3, [r7, #20]
    tmp = 0x12U;
 8001f5e:	2312      	movs	r3, #18
 8001f60:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	3320      	adds	r3, #32
 8001f66:	f107 0113 	add.w	r1, r7, #19
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f001 f8bc 	bl	80030ea <st7735_send_data>
 8001f72:	4602      	mov	r2, r0
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	4413      	add	r3, r2
 8001f78:	617b      	str	r3, [r7, #20]
    tmp = 0x37U;
 8001f7a:	2337      	movs	r3, #55	; 0x37
 8001f7c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	3320      	adds	r3, #32
 8001f82:	f107 0113 	add.w	r1, r7, #19
 8001f86:	2201      	movs	r2, #1
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f001 f8ae 	bl	80030ea <st7735_send_data>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	4413      	add	r3, r2
 8001f94:	617b      	str	r3, [r7, #20]
    tmp = 0x32U;
 8001f96:	2332      	movs	r3, #50	; 0x32
 8001f98:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	3320      	adds	r3, #32
 8001f9e:	f107 0113 	add.w	r1, r7, #19
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f001 f8a0 	bl	80030ea <st7735_send_data>
 8001faa:	4602      	mov	r2, r0
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	4413      	add	r3, r2
 8001fb0:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8001fb2:	2329      	movs	r3, #41	; 0x29
 8001fb4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	3320      	adds	r3, #32
 8001fba:	f107 0113 	add.w	r1, r7, #19
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f001 f892 	bl	80030ea <st7735_send_data>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	4413      	add	r3, r2
 8001fcc:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8001fce:	232d      	movs	r3, #45	; 0x2d
 8001fd0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	3320      	adds	r3, #32
 8001fd6:	f107 0113 	add.w	r1, r7, #19
 8001fda:	2201      	movs	r2, #1
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f001 f884 	bl	80030ea <st7735_send_data>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8001fea:	2329      	movs	r3, #41	; 0x29
 8001fec:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	3320      	adds	r3, #32
 8001ff2:	f107 0113 	add.w	r1, r7, #19
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f001 f876 	bl	80030ea <st7735_send_data>
 8001ffe:	4602      	mov	r2, r0
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	4413      	add	r3, r2
 8002004:	617b      	str	r3, [r7, #20]
    tmp = 0x25U;
 8002006:	2325      	movs	r3, #37	; 0x25
 8002008:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	3320      	adds	r3, #32
 800200e:	f107 0113 	add.w	r1, r7, #19
 8002012:	2201      	movs	r2, #1
 8002014:	4618      	mov	r0, r3
 8002016:	f001 f868 	bl	80030ea <st7735_send_data>
 800201a:	4602      	mov	r2, r0
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	4413      	add	r3, r2
 8002020:	617b      	str	r3, [r7, #20]
    tmp = 0x2BU;
 8002022:	232b      	movs	r3, #43	; 0x2b
 8002024:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	3320      	adds	r3, #32
 800202a:	f107 0113 	add.w	r1, r7, #19
 800202e:	2201      	movs	r2, #1
 8002030:	4618      	mov	r0, r3
 8002032:	f001 f85a 	bl	80030ea <st7735_send_data>
 8002036:	4602      	mov	r2, r0
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	4413      	add	r3, r2
 800203c:	617b      	str	r3, [r7, #20]
    tmp = 0x39U;
 800203e:	2339      	movs	r3, #57	; 0x39
 8002040:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	3320      	adds	r3, #32
 8002046:	f107 0113 	add.w	r1, r7, #19
 800204a:	2201      	movs	r2, #1
 800204c:	4618      	mov	r0, r3
 800204e:	f001 f84c 	bl	80030ea <st7735_send_data>
 8002052:	4602      	mov	r2, r0
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	4413      	add	r3, r2
 8002058:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 800205a:	2300      	movs	r3, #0
 800205c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	3320      	adds	r3, #32
 8002062:	f107 0113 	add.w	r1, r7, #19
 8002066:	2201      	movs	r2, #1
 8002068:	4618      	mov	r0, r3
 800206a:	f001 f83e 	bl	80030ea <st7735_send_data>
 800206e:	4602      	mov	r2, r0
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	4413      	add	r3, r2
 8002074:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 8002076:	2301      	movs	r3, #1
 8002078:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	3320      	adds	r3, #32
 800207e:	f107 0113 	add.w	r1, r7, #19
 8002082:	2201      	movs	r2, #1
 8002084:	4618      	mov	r0, r3
 8002086:	f001 f830 	bl	80030ea <st7735_send_data>
 800208a:	4602      	mov	r2, r0
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	4413      	add	r3, r2
 8002090:	617b      	str	r3, [r7, #20]
    tmp = 0x03U;
 8002092:	2303      	movs	r3, #3
 8002094:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	3320      	adds	r3, #32
 800209a:	f107 0113 	add.w	r1, r7, #19
 800209e:	2201      	movs	r2, #1
 80020a0:	4618      	mov	r0, r3
 80020a2:	f001 f822 	bl	80030ea <st7735_send_data>
 80020a6:	4602      	mov	r2, r0
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	4413      	add	r3, r2
 80020ac:	617b      	str	r3, [r7, #20]
    tmp = 0x10U;
 80020ae:	2310      	movs	r3, #16
 80020b0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	3320      	adds	r3, #32
 80020b6:	f107 0113 	add.w	r1, r7, #19
 80020ba:	2201      	movs	r2, #1
 80020bc:	4618      	mov	r0, r3
 80020be:	f001 f814 	bl	80030ea <st7735_send_data>
 80020c2:	4602      	mov	r2, r0
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	4413      	add	r3, r2
 80020c8:	617b      	str	r3, [r7, #20]

    /* Sparkles and rainbows, 16 args, no delay */
    tmp = 0x03U;
 80020ca:	2303      	movs	r3, #3
 80020cc:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NV_GAMMA_CTRL, &tmp, 1);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f103 0020 	add.w	r0, r3, #32
 80020d4:	f107 0213 	add.w	r2, r7, #19
 80020d8:	2301      	movs	r3, #1
 80020da:	21e1      	movs	r1, #225	; 0xe1
 80020dc:	f000 fff0 	bl	80030c0 <st7735_write_reg>
 80020e0:	4602      	mov	r2, r0
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	4413      	add	r3, r2
 80020e6:	617b      	str	r3, [r7, #20]
    tmp = 0x1DU;
 80020e8:	231d      	movs	r3, #29
 80020ea:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	3320      	adds	r3, #32
 80020f0:	f107 0113 	add.w	r1, r7, #19
 80020f4:	2201      	movs	r2, #1
 80020f6:	4618      	mov	r0, r3
 80020f8:	f000 fff7 	bl	80030ea <st7735_send_data>
 80020fc:	4602      	mov	r2, r0
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	4413      	add	r3, r2
 8002102:	617b      	str	r3, [r7, #20]
    tmp = 0x07U;
 8002104:	2307      	movs	r3, #7
 8002106:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	3320      	adds	r3, #32
 800210c:	f107 0113 	add.w	r1, r7, #19
 8002110:	2201      	movs	r2, #1
 8002112:	4618      	mov	r0, r3
 8002114:	f000 ffe9 	bl	80030ea <st7735_send_data>
 8002118:	4602      	mov	r2, r0
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	4413      	add	r3, r2
 800211e:	617b      	str	r3, [r7, #20]
    tmp = 0x06U;
 8002120:	2306      	movs	r3, #6
 8002122:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	3320      	adds	r3, #32
 8002128:	f107 0113 	add.w	r1, r7, #19
 800212c:	2201      	movs	r2, #1
 800212e:	4618      	mov	r0, r3
 8002130:	f000 ffdb 	bl	80030ea <st7735_send_data>
 8002134:	4602      	mov	r2, r0
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	4413      	add	r3, r2
 800213a:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 800213c:	232e      	movs	r3, #46	; 0x2e
 800213e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	3320      	adds	r3, #32
 8002144:	f107 0113 	add.w	r1, r7, #19
 8002148:	2201      	movs	r2, #1
 800214a:	4618      	mov	r0, r3
 800214c:	f000 ffcd 	bl	80030ea <st7735_send_data>
 8002150:	4602      	mov	r2, r0
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	4413      	add	r3, r2
 8002156:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8002158:	232c      	movs	r3, #44	; 0x2c
 800215a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	3320      	adds	r3, #32
 8002160:	f107 0113 	add.w	r1, r7, #19
 8002164:	2201      	movs	r2, #1
 8002166:	4618      	mov	r0, r3
 8002168:	f000 ffbf 	bl	80030ea <st7735_send_data>
 800216c:	4602      	mov	r2, r0
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	4413      	add	r3, r2
 8002172:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8002174:	2329      	movs	r3, #41	; 0x29
 8002176:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	3320      	adds	r3, #32
 800217c:	f107 0113 	add.w	r1, r7, #19
 8002180:	2201      	movs	r2, #1
 8002182:	4618      	mov	r0, r3
 8002184:	f000 ffb1 	bl	80030ea <st7735_send_data>
 8002188:	4602      	mov	r2, r0
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	4413      	add	r3, r2
 800218e:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8002190:	232d      	movs	r3, #45	; 0x2d
 8002192:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	3320      	adds	r3, #32
 8002198:	f107 0113 	add.w	r1, r7, #19
 800219c:	2201      	movs	r2, #1
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 ffa3 	bl	80030ea <st7735_send_data>
 80021a4:	4602      	mov	r2, r0
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	4413      	add	r3, r2
 80021aa:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 80021ac:	232e      	movs	r3, #46	; 0x2e
 80021ae:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	3320      	adds	r3, #32
 80021b4:	f107 0113 	add.w	r1, r7, #19
 80021b8:	2201      	movs	r2, #1
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 ff95 	bl	80030ea <st7735_send_data>
 80021c0:	4602      	mov	r2, r0
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	4413      	add	r3, r2
 80021c6:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 80021c8:	232e      	movs	r3, #46	; 0x2e
 80021ca:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	3320      	adds	r3, #32
 80021d0:	f107 0113 	add.w	r1, r7, #19
 80021d4:	2201      	movs	r2, #1
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 ff87 	bl	80030ea <st7735_send_data>
 80021dc:	4602      	mov	r2, r0
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	4413      	add	r3, r2
 80021e2:	617b      	str	r3, [r7, #20]
    tmp = 0x37U;
 80021e4:	2337      	movs	r3, #55	; 0x37
 80021e6:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	3320      	adds	r3, #32
 80021ec:	f107 0113 	add.w	r1, r7, #19
 80021f0:	2201      	movs	r2, #1
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 ff79 	bl	80030ea <st7735_send_data>
 80021f8:	4602      	mov	r2, r0
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	4413      	add	r3, r2
 80021fe:	617b      	str	r3, [r7, #20]
    tmp = 0x3FU;
 8002200:	233f      	movs	r3, #63	; 0x3f
 8002202:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	3320      	adds	r3, #32
 8002208:	f107 0113 	add.w	r1, r7, #19
 800220c:	2201      	movs	r2, #1
 800220e:	4618      	mov	r0, r3
 8002210:	f000 ff6b 	bl	80030ea <st7735_send_data>
 8002214:	4602      	mov	r2, r0
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	4413      	add	r3, r2
 800221a:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 800221c:	2300      	movs	r3, #0
 800221e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	3320      	adds	r3, #32
 8002224:	f107 0113 	add.w	r1, r7, #19
 8002228:	2201      	movs	r2, #1
 800222a:	4618      	mov	r0, r3
 800222c:	f000 ff5d 	bl	80030ea <st7735_send_data>
 8002230:	4602      	mov	r2, r0
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	4413      	add	r3, r2
 8002236:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8002238:	2300      	movs	r3, #0
 800223a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	3320      	adds	r3, #32
 8002240:	f107 0113 	add.w	r1, r7, #19
 8002244:	2201      	movs	r2, #1
 8002246:	4618      	mov	r0, r3
 8002248:	f000 ff4f 	bl	80030ea <st7735_send_data>
 800224c:	4602      	mov	r2, r0
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	4413      	add	r3, r2
 8002252:	617b      	str	r3, [r7, #20]
    tmp = 0x02U;
 8002254:	2302      	movs	r3, #2
 8002256:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	3320      	adds	r3, #32
 800225c:	f107 0113 	add.w	r1, r7, #19
 8002260:	2201      	movs	r2, #1
 8002262:	4618      	mov	r0, r3
 8002264:	f000 ff41 	bl	80030ea <st7735_send_data>
 8002268:	4602      	mov	r2, r0
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	4413      	add	r3, r2
 800226e:	617b      	str	r3, [r7, #20]
    tmp = 0x10U;
 8002270:	2310      	movs	r3, #16
 8002272:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	3320      	adds	r3, #32
 8002278:	f107 0113 	add.w	r1, r7, #19
 800227c:	2201      	movs	r2, #1
 800227e:	4618      	mov	r0, r3
 8002280:	f000 ff33 	bl	80030ea <st7735_send_data>
 8002284:	4602      	mov	r2, r0
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	4413      	add	r3, r2
 800228a:	617b      	str	r3, [r7, #20]

    /* Normal display on, no args, no delay */
    tmp  = 0x00U;
 800228c:	2300      	movs	r3, #0
 800228e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 1);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f103 0020 	add.w	r0, r3, #32
 8002296:	f107 0213 	add.w	r2, r7, #19
 800229a:	2301      	movs	r3, #1
 800229c:	2113      	movs	r1, #19
 800229e:	f000 ff0f 	bl	80030c0 <st7735_write_reg>
 80022a2:	4602      	mov	r2, r0
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	4413      	add	r3, r2
 80022a8:	617b      	str	r3, [r7, #20]

    /* Main screen turn on, no delay */
    ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 1);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f103 0020 	add.w	r0, r3, #32
 80022b0:	f107 0213 	add.w	r2, r7, #19
 80022b4:	2301      	movs	r3, #1
 80022b6:	2129      	movs	r1, #41	; 0x29
 80022b8:	f000 ff02 	bl	80030c0 <st7735_write_reg>
 80022bc:	4602      	mov	r2, r0
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	4413      	add	r3, r2
 80022c2:	617b      	str	r3, [r7, #20]

    /* Set the display Orientation and the default display window */
    ret += ST7735_SetOrientation(pObj, pDriver);
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f000 f944 	bl	8002554 <ST7735_SetOrientation>
 80022cc:	4602      	mov	r2, r0
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	4413      	add	r3, r2
 80022d2:	617b      	str	r3, [r7, #20]
  }

  if(ret != ST7735_OK)
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d002      	beq.n	80022e0 <ST7735_Init+0x774>
  {
    ret = ST7735_ERROR;
 80022da:	f04f 33ff 	mov.w	r3, #4294967295
 80022de:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80022e0:	697b      	ldr	r3, [r7, #20]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3718      	adds	r7, #24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <ST7735_DeInit>:
  * @brief  De-Initialize the st7735 LCD Component.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t ST7735_DeInit(ST7735_Object_t *pObj)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
  (void)(pObj);

  return ST7735_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <ST7735_ReadID>:
  * @param  pObj Component object
  * @param  Id Component ID
  * @retval The component status
  */
int32_t ST7735_ReadID(ST7735_Object_t *pObj, uint32_t *Id)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp[3];

  if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID1, &tmp[0]) != ST7735_OK)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3320      	adds	r3, #32
 800230e:	f107 0208 	add.w	r2, r7, #8
 8002312:	21da      	movs	r1, #218	; 0xda
 8002314:	4618      	mov	r0, r3
 8002316:	f000 fec0 	bl	800309a <st7735_read_reg>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d003      	beq.n	8002328 <ST7735_ReadID+0x28>
  {
    ret = ST7735_ERROR;
 8002320:	f04f 33ff 	mov.w	r3, #4294967295
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	e02d      	b.n	8002384 <ST7735_ReadID+0x84>
  }
  else if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID2, &tmp[1]) != ST7735_OK)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f103 0020 	add.w	r0, r3, #32
 800232e:	f107 0308 	add.w	r3, r7, #8
 8002332:	3301      	adds	r3, #1
 8002334:	461a      	mov	r2, r3
 8002336:	21db      	movs	r1, #219	; 0xdb
 8002338:	f000 feaf 	bl	800309a <st7735_read_reg>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <ST7735_ReadID+0x4a>
  {
    ret = ST7735_ERROR;
 8002342:	f04f 33ff 	mov.w	r3, #4294967295
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	e01c      	b.n	8002384 <ST7735_ReadID+0x84>
  }	
	else if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID3, &tmp[2]) != ST7735_OK)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f103 0020 	add.w	r0, r3, #32
 8002350:	f107 0308 	add.w	r3, r7, #8
 8002354:	3302      	adds	r3, #2
 8002356:	461a      	mov	r2, r3
 8002358:	21dc      	movs	r1, #220	; 0xdc
 800235a:	f000 fe9e 	bl	800309a <st7735_read_reg>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <ST7735_ReadID+0x6c>
  {
    ret = ST7735_ERROR;
 8002364:	f04f 33ff 	mov.w	r3, #4294967295
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	e00b      	b.n	8002384 <ST7735_ReadID+0x84>
  }	
  else
  {
		
    *Id = ((uint32_t)tmp[2])<<0| ((uint32_t)tmp[1])<<8 | ((uint32_t)tmp[0])<<16;
 800236c:	7abb      	ldrb	r3, [r7, #10]
 800236e:	461a      	mov	r2, r3
 8002370:	7a7b      	ldrb	r3, [r7, #9]
 8002372:	021b      	lsls	r3, r3, #8
 8002374:	431a      	orrs	r2, r3
 8002376:	7a3b      	ldrb	r3, [r7, #8]
 8002378:	041b      	lsls	r3, r3, #16
 800237a:	431a      	orrs	r2, r3
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	601a      	str	r2, [r3, #0]
		//*Id = __rbit(*Id);
    ret = ST7735_OK;
 8002380:	2300      	movs	r3, #0
 8002382:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002384:	68fb      	ldr	r3, [r7, #12]
}
 8002386:	4618      	mov	r0, r3
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
	...

08002390 <ST7735_DisplayOn>:
  * @brief  Enables the Display.
  * @param  pObj Component object
  * @retval The component status
  */
int32_t ST7735_DisplayOn(ST7735_Object_t *pObj)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t tmp = 0;
 8002398:	2300      	movs	r3, #0
 800239a:	72fb      	strb	r3, [r7, #11]

  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f103 0020 	add.w	r0, r3, #32
 80023a2:	f107 020b 	add.w	r2, r7, #11
 80023a6:	2300      	movs	r3, #0
 80023a8:	2113      	movs	r1, #19
 80023aa:	f000 fe89 	bl	80030c0 <st7735_write_reg>
 80023ae:	60f8      	str	r0, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 80023b0:	210a      	movs	r1, #10
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 fe57 	bl	8003066 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 0);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f103 0020 	add.w	r0, r3, #32
 80023be:	f107 020b 	add.w	r2, r7, #11
 80023c2:	2300      	movs	r3, #0
 80023c4:	2129      	movs	r1, #41	; 0x29
 80023c6:	f000 fe7b 	bl	80030c0 <st7735_write_reg>
 80023ca:	4602      	mov	r2, r0
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4413      	add	r3, r2
 80023d0:	60fb      	str	r3, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 80023d2:	210a      	movs	r1, #10
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 fe46 	bl	8003066 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f103 0020 	add.w	r0, r3, #32
 80023e0:	f107 020b 	add.w	r2, r7, #11
 80023e4:	2300      	movs	r3, #0
 80023e6:	2136      	movs	r1, #54	; 0x36
 80023e8:	f000 fe6a 	bl	80030c0 <st7735_write_reg>
 80023ec:	4602      	mov	r2, r0
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	4413      	add	r3, r2
 80023f2:	60fb      	str	r3, [r7, #12]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80023f4:	4b16      	ldr	r3, [pc, #88]	; (8002450 <ST7735_DisplayOn+0xc0>)
 80023f6:	7b1b      	ldrb	r3, [r3, #12]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10a      	bne.n	8002412 <ST7735_DisplayOn+0x82>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 80023fc:	4b14      	ldr	r3, [pc, #80]	; (8002450 <ST7735_DisplayOn+0xc0>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	4a14      	ldr	r2, [pc, #80]	; (8002454 <ST7735_DisplayOn+0xc4>)
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	4413      	add	r3, r2
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800240a:	f043 0308 	orr.w	r3, r3, #8
 800240e:	b2db      	uxtb	r3, r3
 8002410:	e006      	b.n	8002420 <ST7735_DisplayOn+0x90>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 8002412:	4b0f      	ldr	r3, [pc, #60]	; (8002450 <ST7735_DisplayOn+0xc0>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	4a0f      	ldr	r2, [pc, #60]	; (8002454 <ST7735_DisplayOn+0xc4>)
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	4413      	add	r3, r2
 800241c:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800241e:	b2db      	uxtb	r3, r3
 8002420:	72fb      	strb	r3, [r7, #11]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	3320      	adds	r3, #32
 8002426:	f107 010b 	add.w	r1, r7, #11
 800242a:	2201      	movs	r2, #1
 800242c:	4618      	mov	r0, r3
 800242e:	f000 fe5c 	bl	80030ea <st7735_send_data>
 8002432:	4602      	mov	r2, r0
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4413      	add	r3, r2
 8002438:	60fb      	str	r3, [r7, #12]
  if(ret != ST7735_OK)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d002      	beq.n	8002446 <ST7735_DisplayOn+0xb6>
  {
    ret = ST7735_ERROR;
 8002440:	f04f 33ff 	mov.w	r3, #4294967295
 8002444:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002446:	68fb      	ldr	r3, [r7, #12]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	24009938 	.word	0x24009938
 8002454:	24000070 	.word	0x24000070

08002458 <ST7735_DisplayOff>:
  * @brief  Disables the Display.
  * @param  pObj Component object
  * @retval The component status
  */
int32_t ST7735_DisplayOff(ST7735_Object_t *pObj)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t tmp = 0;
 8002460:	2300      	movs	r3, #0
 8002462:	72fb      	strb	r3, [r7, #11]

  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f103 0020 	add.w	r0, r3, #32
 800246a:	f107 020b 	add.w	r2, r7, #11
 800246e:	2300      	movs	r3, #0
 8002470:	2113      	movs	r1, #19
 8002472:	f000 fe25 	bl	80030c0 <st7735_write_reg>
 8002476:	60f8      	str	r0, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 8002478:	210a      	movs	r1, #10
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 fdf3 	bl	8003066 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_OFF, &tmp, 0);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f103 0020 	add.w	r0, r3, #32
 8002486:	f107 020b 	add.w	r2, r7, #11
 800248a:	2300      	movs	r3, #0
 800248c:	2128      	movs	r1, #40	; 0x28
 800248e:	f000 fe17 	bl	80030c0 <st7735_write_reg>
 8002492:	4602      	mov	r2, r0
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	4413      	add	r3, r2
 8002498:	60fb      	str	r3, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 800249a:	210a      	movs	r1, #10
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 fde2 	bl	8003066 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f103 0020 	add.w	r0, r3, #32
 80024a8:	f107 020b 	add.w	r2, r7, #11
 80024ac:	2300      	movs	r3, #0
 80024ae:	2136      	movs	r1, #54	; 0x36
 80024b0:	f000 fe06 	bl	80030c0 <st7735_write_reg>
 80024b4:	4602      	mov	r2, r0
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	4413      	add	r3, r2
 80024ba:	60fb      	str	r3, [r7, #12]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80024bc:	4b16      	ldr	r3, [pc, #88]	; (8002518 <ST7735_DisplayOff+0xc0>)
 80024be:	7b1b      	ldrb	r3, [r3, #12]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d10a      	bne.n	80024da <ST7735_DisplayOff+0x82>
		(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 80024c4:	4b14      	ldr	r3, [pc, #80]	; (8002518 <ST7735_DisplayOff+0xc0>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	4a14      	ldr	r2, [pc, #80]	; (800251c <ST7735_DisplayOff+0xc4>)
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	4413      	add	r3, r2
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80024d2:	f043 0308 	orr.w	r3, r3, #8
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	e006      	b.n	80024e8 <ST7735_DisplayOff+0x90>
		(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 80024da:	4b0f      	ldr	r3, [pc, #60]	; (8002518 <ST7735_DisplayOff+0xc0>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	4a0f      	ldr	r2, [pc, #60]	; (800251c <ST7735_DisplayOff+0xc4>)
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	4413      	add	r3, r2
 80024e4:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	72fb      	strb	r3, [r7, #11]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	3320      	adds	r3, #32
 80024ee:	f107 010b 	add.w	r1, r7, #11
 80024f2:	2201      	movs	r2, #1
 80024f4:	4618      	mov	r0, r3
 80024f6:	f000 fdf8 	bl	80030ea <st7735_send_data>
 80024fa:	4602      	mov	r2, r0
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4413      	add	r3, r2
 8002500:	60fb      	str	r3, [r7, #12]
  if(ret != ST7735_OK)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d002      	beq.n	800250e <ST7735_DisplayOff+0xb6>
  {
    ret = ST7735_ERROR;
 8002508:	f04f 33ff 	mov.w	r3, #4294967295
 800250c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800250e:	68fb      	ldr	r3, [r7, #12]
}
 8002510:	4618      	mov	r0, r3
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	24009938 	.word	0x24009938
 800251c:	24000070 	.word	0x24000070

08002520 <ST7735_SetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be set
  * @retval Component status
  */
int32_t ST7735_SetBrightness(ST7735_Object_t *pObj, uint32_t Brightness)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(Brightness);
	
  /* Feature not supported */
  return ST7735_ERROR;
 800252a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800252e:	4618      	mov	r0, r3
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <ST7735_GetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t ST7735_GetBrightness(ST7735_Object_t *pObj, uint32_t *Brightness)
{
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
 8002542:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(Brightness);

  /* Feature not supported */
  return ST7735_ERROR;
 8002544:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002548:	4618      	mov	r0, r3
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <ST7735_SetOrientation>:
  * @param  Orientation ST7735_ORIENTATION_PORTRAIT, ST7735_ORIENTATION_PORTRAIT_ROT180
  *                     ST7735_ORIENTATION_LANDSCAPE or ST7735_ORIENTATION_LANDSCAPE_ROT180
  * @retval The component status
  */
int32_t ST7735_SetOrientation(ST7735_Object_t *pObj, ST7735_Ctx_t *pDriver)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af02      	add	r7, sp, #8
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  if((pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT) || (pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT_ROT180))
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <ST7735_SetOrientation+0x1a>
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d119      	bne.n	80025a2 <ST7735_SetOrientation+0x4e>
  {
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	7b5b      	ldrb	r3, [r3, #13]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d106      	bne.n	8002584 <ST7735_SetOrientation+0x30>
			ST7735Ctx.Width  = ST7735_0_9_WIDTH;
 8002576:	4b3c      	ldr	r3, [pc, #240]	; (8002668 <ST7735_SetOrientation+0x114>)
 8002578:	2250      	movs	r2, #80	; 0x50
 800257a:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_0_9_HEIGHT;
 800257c:	4b3a      	ldr	r3, [pc, #232]	; (8002668 <ST7735_SetOrientation+0x114>)
 800257e:	22a0      	movs	r2, #160	; 0xa0
 8002580:	605a      	str	r2, [r3, #4]
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8002582:	e028      	b.n	80025d6 <ST7735_SetOrientation+0x82>
		} else if (pDriver->Type == ST7735_1_8_inch_screen || pDriver->Type == ST7735_1_8a_inch_screen){
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	7b5b      	ldrb	r3, [r3, #13]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <ST7735_SetOrientation+0x40>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	7b5b      	ldrb	r3, [r3, #13]
 8002590:	2b02      	cmp	r3, #2
 8002592:	d120      	bne.n	80025d6 <ST7735_SetOrientation+0x82>
			ST7735Ctx.Width  = ST7735_1_8_WIDTH;
 8002594:	4b34      	ldr	r3, [pc, #208]	; (8002668 <ST7735_SetOrientation+0x114>)
 8002596:	2280      	movs	r2, #128	; 0x80
 8002598:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_1_8_HEIGHT;
 800259a:	4b33      	ldr	r3, [pc, #204]	; (8002668 <ST7735_SetOrientation+0x114>)
 800259c:	22a0      	movs	r2, #160	; 0xa0
 800259e:	605a      	str	r2, [r3, #4]
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 80025a0:	e019      	b.n	80025d6 <ST7735_SetOrientation+0x82>
		}
  }
  else
  {
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	7b5b      	ldrb	r3, [r3, #13]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d106      	bne.n	80025b8 <ST7735_SetOrientation+0x64>
			ST7735Ctx.Width  = ST7735_0_9_HEIGHT;
 80025aa:	4b2f      	ldr	r3, [pc, #188]	; (8002668 <ST7735_SetOrientation+0x114>)
 80025ac:	22a0      	movs	r2, #160	; 0xa0
 80025ae:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_0_9_WIDTH;
 80025b0:	4b2d      	ldr	r3, [pc, #180]	; (8002668 <ST7735_SetOrientation+0x114>)
 80025b2:	2250      	movs	r2, #80	; 0x50
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	e00f      	b.n	80025d8 <ST7735_SetOrientation+0x84>
		} else if (pDriver->Type == ST7735_1_8_inch_screen || pDriver->Type == ST7735_1_8a_inch_screen){
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	7b5b      	ldrb	r3, [r3, #13]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d003      	beq.n	80025c8 <ST7735_SetOrientation+0x74>
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	7b5b      	ldrb	r3, [r3, #13]
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d107      	bne.n	80025d8 <ST7735_SetOrientation+0x84>
			ST7735Ctx.Width  = ST7735_1_8_HEIGHT;
 80025c8:	4b27      	ldr	r3, [pc, #156]	; (8002668 <ST7735_SetOrientation+0x114>)
 80025ca:	22a0      	movs	r2, #160	; 0xa0
 80025cc:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_1_8_WIDTH;
 80025ce:	4b26      	ldr	r3, [pc, #152]	; (8002668 <ST7735_SetOrientation+0x114>)
 80025d0:	2280      	movs	r2, #128	; 0x80
 80025d2:	605a      	str	r2, [r3, #4]
 80025d4:	e000      	b.n	80025d8 <ST7735_SetOrientation+0x84>
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 80025d6:	bf00      	nop
		}
  }
	
	ST7735Ctx.Orientation = pDriver->Orientation;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	4a22      	ldr	r2, [pc, #136]	; (8002668 <ST7735_SetOrientation+0x114>)
 80025de:	6093      	str	r3, [r2, #8]
	ST7735Ctx.Panel = pDriver->Panel;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	7b1a      	ldrb	r2, [r3, #12]
 80025e4:	4b20      	ldr	r3, [pc, #128]	; (8002668 <ST7735_SetOrientation+0x114>)
 80025e6:	731a      	strb	r2, [r3, #12]
	ST7735Ctx.Type = pDriver->Type;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	7b5a      	ldrb	r2, [r3, #13]
 80025ec:	4b1e      	ldr	r3, [pc, #120]	; (8002668 <ST7735_SetOrientation+0x114>)
 80025ee:	735a      	strb	r2, [r3, #13]
	
  ret = ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height);
 80025f0:	4b1d      	ldr	r3, [pc, #116]	; (8002668 <ST7735_SetOrientation+0x114>)
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	4b1c      	ldr	r3, [pc, #112]	; (8002668 <ST7735_SetOrientation+0x114>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	4613      	mov	r3, r2
 80025fc:	2200      	movs	r2, #0
 80025fe:	2100      	movs	r1, #0
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 fbdf 	bl	8002dc4 <ST7735_SetDisplayWindow>
 8002606:	60f8      	str	r0, [r7, #12]

	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002608:	4b17      	ldr	r3, [pc, #92]	; (8002668 <ST7735_SetOrientation+0x114>)
 800260a:	7b1b      	ldrb	r3, [r3, #12]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10a      	bne.n	8002626 <ST7735_SetOrientation+0xd2>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8002610:	4b15      	ldr	r3, [pc, #84]	; (8002668 <ST7735_SetOrientation+0x114>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	4a15      	ldr	r2, [pc, #84]	; (800266c <ST7735_SetOrientation+0x118>)
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	4413      	add	r3, r2
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800261e:	f043 0308 	orr.w	r3, r3, #8
 8002622:	b2db      	uxtb	r3, r3
 8002624:	e006      	b.n	8002634 <ST7735_SetOrientation+0xe0>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 8002626:	4b10      	ldr	r3, [pc, #64]	; (8002668 <ST7735_SetOrientation+0x114>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	4a10      	ldr	r2, [pc, #64]	; (800266c <ST7735_SetOrientation+0x118>)
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	4413      	add	r3, r2
 8002630:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002632:	b2db      	uxtb	r3, r3
 8002634:	72fb      	strb	r3, [r7, #11]
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f103 0020 	add.w	r0, r3, #32
 800263c:	f107 020b 	add.w	r2, r7, #11
 8002640:	2301      	movs	r3, #1
 8002642:	2136      	movs	r1, #54	; 0x36
 8002644:	f000 fd3c 	bl	80030c0 <st7735_write_reg>
 8002648:	4602      	mov	r2, r0
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	4413      	add	r3, r2
 800264e:	60fb      	str	r3, [r7, #12]

  

  if(ret != ST7735_OK)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d002      	beq.n	800265c <ST7735_SetOrientation+0x108>
  {
    ret = ST7735_ERROR;
 8002656:	f04f 33ff 	mov.w	r3, #4294967295
 800265a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800265c:	68fb      	ldr	r3, [r7, #12]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	24009938 	.word	0x24009938
 800266c:	24000070 	.word	0x24000070

08002670 <ST7735_GetOrientation>:
  * @param  Orientation ST7735_ORIENTATION_PORTRAIT, ST7735_ORIENTATION_LANDSCAPE
  *                      or ST7735_ORIENTATION_LANDSCAPE_ROT180
  * @retval The component status
  */
int32_t ST7735_GetOrientation(ST7735_Object_t *pObj, uint32_t *Orientation)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]

  *Orientation = ST7735Ctx.Orientation;
 800267a:	4b05      	ldr	r3, [pc, #20]	; (8002690 <ST7735_GetOrientation+0x20>)
 800267c:	689a      	ldr	r2, [r3, #8]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	24009938 	.word	0x24009938

08002694 <ST7735_SetCursor>:
  * @param  Xpos specifies the X position.
  * @param  Ypos specifies the Y position.
  * @retval The component status
  */
int32_t ST7735_SetCursor(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
  int32_t ret;
  uint8_t tmp;
	
	/* Cursor calibration */
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 80026a0:	4b59      	ldr	r3, [pc, #356]	; (8002808 <ST7735_SetCursor+0x174>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d821      	bhi.n	80026ec <ST7735_SetCursor+0x58>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 80026a8:	4b57      	ldr	r3, [pc, #348]	; (8002808 <ST7735_SetCursor+0x174>)
 80026aa:	7b5b      	ldrb	r3, [r3, #13]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d10e      	bne.n	80026ce <ST7735_SetCursor+0x3a>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 80026b0:	4b55      	ldr	r3, [pc, #340]	; (8002808 <ST7735_SetCursor+0x174>)
 80026b2:	7b1b      	ldrb	r3, [r3, #12]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d106      	bne.n	80026c6 <ST7735_SetCursor+0x32>
				Xpos += 26;
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	331a      	adds	r3, #26
 80026bc:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3301      	adds	r3, #1
 80026c2:	607b      	str	r3, [r7, #4]
 80026c4:	e033      	b.n	800272e <ST7735_SetCursor+0x9a>
			} else {		//BOE Panel
				Xpos += 24;
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	3318      	adds	r3, #24
 80026ca:	60bb      	str	r3, [r7, #8]
 80026cc:	e02f      	b.n	800272e <ST7735_SetCursor+0x9a>
				Ypos += 0;
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 80026ce:	4b4e      	ldr	r3, [pc, #312]	; (8002808 <ST7735_SetCursor+0x174>)
 80026d0:	7b5b      	ldrb	r3, [r3, #13]
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d12b      	bne.n	800272e <ST7735_SetCursor+0x9a>
      if (ST7735Ctx.Panel == BOE_Panel) {
 80026d6:	4b4c      	ldr	r3, [pc, #304]	; (8002808 <ST7735_SetCursor+0x174>)
 80026d8:	7b1b      	ldrb	r3, [r3, #12]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d127      	bne.n	800272e <ST7735_SetCursor+0x9a>
				Xpos += 2;
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	3302      	adds	r3, #2
 80026e2:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3301      	adds	r3, #1
 80026e8:	607b      	str	r3, [r7, #4]
 80026ea:	e020      	b.n	800272e <ST7735_SetCursor+0x9a>
			}
    }
	} else {
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 80026ec:	4b46      	ldr	r3, [pc, #280]	; (8002808 <ST7735_SetCursor+0x174>)
 80026ee:	7b5b      	ldrb	r3, [r3, #13]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d10e      	bne.n	8002712 <ST7735_SetCursor+0x7e>
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 80026f4:	4b44      	ldr	r3, [pc, #272]	; (8002808 <ST7735_SetCursor+0x174>)
 80026f6:	7b1b      	ldrb	r3, [r3, #12]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d106      	bne.n	800270a <ST7735_SetCursor+0x76>
				Xpos += 1;
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	3301      	adds	r3, #1
 8002700:	60bb      	str	r3, [r7, #8]
				Ypos += 26;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	331a      	adds	r3, #26
 8002706:	607b      	str	r3, [r7, #4]
 8002708:	e011      	b.n	800272e <ST7735_SetCursor+0x9a>
			} else {		//BOE Panel
				Xpos += 0;
				Ypos += 24;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	3318      	adds	r3, #24
 800270e:	607b      	str	r3, [r7, #4]
 8002710:	e00d      	b.n	800272e <ST7735_SetCursor+0x9a>
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8002712:	4b3d      	ldr	r3, [pc, #244]	; (8002808 <ST7735_SetCursor+0x174>)
 8002714:	7b5b      	ldrb	r3, [r3, #13]
 8002716:	2b02      	cmp	r3, #2
 8002718:	d109      	bne.n	800272e <ST7735_SetCursor+0x9a>
      if (ST7735Ctx.Panel == BOE_Panel) {
 800271a:	4b3b      	ldr	r3, [pc, #236]	; (8002808 <ST7735_SetCursor+0x174>)
 800271c:	7b1b      	ldrb	r3, [r3, #12]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d105      	bne.n	800272e <ST7735_SetCursor+0x9a>
				Xpos += 1;
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	3301      	adds	r3, #1
 8002726:	60bb      	str	r3, [r7, #8]
				Ypos += 2;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3302      	adds	r3, #2
 800272c:	607b      	str	r3, [r7, #4]
			}
    }
	}
	
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f103 0020 	add.w	r0, r3, #32
 8002734:	f107 0213 	add.w	r2, r7, #19
 8002738:	2300      	movs	r3, #0
 800273a:	212a      	movs	r1, #42	; 0x2a
 800273c:	f000 fcc0 	bl	80030c0 <st7735_write_reg>
 8002740:	6178      	str	r0, [r7, #20]
  tmp = (uint8_t)(Xpos >> 8U);
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	0a1b      	lsrs	r3, r3, #8
 8002746:	b2db      	uxtb	r3, r3
 8002748:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	3320      	adds	r3, #32
 800274e:	f107 0113 	add.w	r1, r7, #19
 8002752:	2201      	movs	r2, #1
 8002754:	4618      	mov	r0, r3
 8002756:	f000 fcc8 	bl	80030ea <st7735_send_data>
 800275a:	4602      	mov	r2, r0
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	4413      	add	r3, r2
 8002760:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Xpos & 0xFFU);
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	b2db      	uxtb	r3, r3
 8002766:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	3320      	adds	r3, #32
 800276c:	f107 0113 	add.w	r1, r7, #19
 8002770:	2201      	movs	r2, #1
 8002772:	4618      	mov	r0, r3
 8002774:	f000 fcb9 	bl	80030ea <st7735_send_data>
 8002778:	4602      	mov	r2, r0
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	4413      	add	r3, r2
 800277e:	617b      	str	r3, [r7, #20]

  ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f103 0020 	add.w	r0, r3, #32
 8002786:	f107 0213 	add.w	r2, r7, #19
 800278a:	2300      	movs	r3, #0
 800278c:	212b      	movs	r1, #43	; 0x2b
 800278e:	f000 fc97 	bl	80030c0 <st7735_write_reg>
 8002792:	4602      	mov	r2, r0
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	4413      	add	r3, r2
 8002798:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos >> 8U);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	0a1b      	lsrs	r3, r3, #8
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	3320      	adds	r3, #32
 80027a6:	f107 0113 	add.w	r1, r7, #19
 80027aa:	2201      	movs	r2, #1
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 fc9c 	bl	80030ea <st7735_send_data>
 80027b2:	4602      	mov	r2, r0
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	4413      	add	r3, r2
 80027b8:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos & 0xFFU);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	3320      	adds	r3, #32
 80027c4:	f107 0113 	add.w	r1, r7, #19
 80027c8:	2201      	movs	r2, #1
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 fc8d 	bl	80030ea <st7735_send_data>
 80027d0:	4602      	mov	r2, r0
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	4413      	add	r3, r2
 80027d6:	617b      	str	r3, [r7, #20]
  ret += st7735_write_reg(&pObj->Ctx, ST7735_WRITE_RAM, &tmp, 0);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f103 0020 	add.w	r0, r3, #32
 80027de:	f107 0213 	add.w	r2, r7, #19
 80027e2:	2300      	movs	r3, #0
 80027e4:	212c      	movs	r1, #44	; 0x2c
 80027e6:	f000 fc6b 	bl	80030c0 <st7735_write_reg>
 80027ea:	4602      	mov	r2, r0
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	4413      	add	r3, r2
 80027f0:	617b      	str	r3, [r7, #20]

  if(ret != ST7735_OK)
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d002      	beq.n	80027fe <ST7735_SetCursor+0x16a>
  {
    ret = ST7735_ERROR;
 80027f8:	f04f 33ff 	mov.w	r3, #4294967295
 80027fc:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80027fe:	697b      	ldr	r3, [r7, #20]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	24009938 	.word	0x24009938

0800280c <ST7735_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Bmp picture address.
  * @retval The component status
  */
int32_t ST7735_DrawBitmap(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b090      	sub	sp, #64	; 0x40
 8002810:	af02      	add	r7, sp, #8
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
 8002818:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 800281a:	2300      	movs	r3, #0
 800281c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t index, size, width, height, y_pos;
  uint8_t pixel_val[2], tmp;
  uint8_t *pbmp;
  uint32_t counter = 0;
 800281e:	2300      	movs	r3, #0
 8002820:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	330a      	adds	r3, #10
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	461a      	mov	r2, r3
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	330b      	adds	r3, #11
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	021b      	lsls	r3, r3, #8
 8002832:	441a      	add	r2, r3
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	330c      	adds	r3, #12
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	041b      	lsls	r3, r3, #16
 800283c:	441a      	add	r2, r3
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	330d      	adds	r3, #13
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	061b      	lsls	r3, r3, #24
 8002846:	4413      	add	r3, r2
 8002848:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	3312      	adds	r3, #18
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	461a      	mov	r2, r3
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	3313      	adds	r3, #19
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	021b      	lsls	r3, r3, #8
 800285a:	441a      	add	r2, r3
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	3314      	adds	r3, #20
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	041b      	lsls	r3, r3, #16
 8002864:	441a      	add	r2, r3
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	3315      	adds	r3, #21
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	061b      	lsls	r3, r3, #24
 800286e:	4413      	add	r3, r2
 8002870:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	3316      	adds	r3, #22
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	461a      	mov	r2, r3
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	3317      	adds	r3, #23
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	021b      	lsls	r3, r3, #8
 8002882:	441a      	add	r2, r3
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	3318      	adds	r3, #24
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	041b      	lsls	r3, r3, #16
 800288c:	441a      	add	r2, r3
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	3319      	adds	r3, #25
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	061b      	lsls	r3, r3, #24
 8002896:	4413      	add	r3, r2
 8002898:	623b      	str	r3, [r7, #32]

  /* Read bitmap size */
  size = (uint32_t)pBmp[2] + ((uint32_t)pBmp[3] << 8) + ((uint32_t)pBmp[4] << 16)  + ((uint32_t)pBmp[5] << 24);
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	3302      	adds	r3, #2
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	461a      	mov	r2, r3
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	3303      	adds	r3, #3
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	021b      	lsls	r3, r3, #8
 80028aa:	441a      	add	r2, r3
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	3304      	adds	r3, #4
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	041b      	lsls	r3, r3, #16
 80028b4:	441a      	add	r2, r3
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	3305      	adds	r3, #5
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	061b      	lsls	r3, r3, #24
 80028be:	4413      	add	r3, r2
 80028c0:	61fb      	str	r3, [r7, #28]
  size = size - index;
 80028c2:	69fa      	ldr	r2, [r7, #28]
 80028c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	61fb      	str	r3, [r7, #28]

  pbmp = pBmp + index;
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ce:	4413      	add	r3, r2
 80028d0:	633b      	str	r3, [r7, #48]	; 0x30

  /* Remap Ypos, st7735 works with inverted X in case of bitmap */
  /* X = 0, cursor is on Top corner */
  y_pos = ST7735Ctx.Height - Ypos - height;
 80028d2:	4b51      	ldr	r3, [pc, #324]	; (8002a18 <ST7735_DrawBitmap+0x20c>)
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	1ad2      	subs	r2, r2, r3
 80028da:	6a3b      	ldr	r3, [r7, #32]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	61bb      	str	r3, [r7, #24]

  if(ST7735_SetDisplayWindow(pObj, Xpos, y_pos, width, height) != ST7735_OK)
 80028e0:	6a3b      	ldr	r3, [r7, #32]
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	68b9      	ldr	r1, [r7, #8]
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 fa6a 	bl	8002dc4 <ST7735_SetDisplayWindow>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <ST7735_DrawBitmap+0xf2>
  {
    ret = ST7735_ERROR;
 80028f6:	f04f 33ff 	mov.w	r3, #4294967295
 80028fa:	637b      	str	r3, [r7, #52]	; 0x34
 80028fc:	e087      	b.n	8002a0e <ST7735_DrawBitmap+0x202>
  }
  else
  {
    /* Set GRAM write direction and BGR = 0 */
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80028fe:	4b46      	ldr	r3, [pc, #280]	; (8002a18 <ST7735_DrawBitmap+0x20c>)
 8002900:	7b1b      	ldrb	r3, [r3, #12]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d109      	bne.n	800291a <ST7735_DrawBitmap+0x10e>
					(uint8_t)OrientationTab[ST7735Ctx.Orientation][0] | LCD_BGR :
 8002906:	4b44      	ldr	r3, [pc, #272]	; (8002a18 <ST7735_DrawBitmap+0x20c>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	4a44      	ldr	r2, [pc, #272]	; (8002a1c <ST7735_DrawBitmap+0x210>)
 800290c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002910:	b2db      	uxtb	r3, r3
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002912:	f043 0308 	orr.w	r3, r3, #8
 8002916:	b2db      	uxtb	r3, r3
 8002918:	e005      	b.n	8002926 <ST7735_DrawBitmap+0x11a>
					(uint8_t)OrientationTab[ST7735Ctx.Orientation][0] | LCD_RGB;
 800291a:	4b3f      	ldr	r3, [pc, #252]	; (8002a18 <ST7735_DrawBitmap+0x20c>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	4a3f      	ldr	r2, [pc, #252]	; (8002a1c <ST7735_DrawBitmap+0x210>)
 8002920:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002924:	b2db      	uxtb	r3, r3
 8002926:	74fb      	strb	r3, [r7, #19]

    if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f103 0020 	add.w	r0, r3, #32
 800292e:	f107 0213 	add.w	r2, r7, #19
 8002932:	2301      	movs	r3, #1
 8002934:	2136      	movs	r1, #54	; 0x36
 8002936:	f000 fbc3 	bl	80030c0 <st7735_write_reg>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d003      	beq.n	8002948 <ST7735_DrawBitmap+0x13c>
    {
      ret = ST7735_ERROR;
 8002940:	f04f 33ff 	mov.w	r3, #4294967295
 8002944:	637b      	str	r3, [r7, #52]	; 0x34
 8002946:	e062      	b.n	8002a0e <ST7735_DrawBitmap+0x202>
    }/* Set Cursor */
    else if(ST7735_SetCursor(pObj, Xpos, y_pos) != ST7735_OK)
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	68b9      	ldr	r1, [r7, #8]
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f7ff fea1 	bl	8002694 <ST7735_SetCursor>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d003      	beq.n	8002960 <ST7735_DrawBitmap+0x154>
    {
      ret = ST7735_ERROR;
 8002958:	f04f 33ff 	mov.w	r3, #4294967295
 800295c:	637b      	str	r3, [r7, #52]	; 0x34
 800295e:	e056      	b.n	8002a0e <ST7735_DrawBitmap+0x202>
    }
    else
    {
      do
      {
        pixel_val[0] = *(pbmp + 1);
 8002960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002962:	785b      	ldrb	r3, [r3, #1]
 8002964:	753b      	strb	r3, [r7, #20]
        pixel_val[1] = *(pbmp);
 8002966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	757b      	strb	r3, [r7, #21]
        if(st7735_send_data(&pObj->Ctx, pixel_val, 2U) != ST7735_OK)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	3320      	adds	r3, #32
 8002970:	f107 0114 	add.w	r1, r7, #20
 8002974:	2202      	movs	r2, #2
 8002976:	4618      	mov	r0, r3
 8002978:	f000 fbb7 	bl	80030ea <st7735_send_data>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <ST7735_DrawBitmap+0x17e>
        {
          ret = ST7735_ERROR;
 8002982:	f04f 33ff 	mov.w	r3, #4294967295
 8002986:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8002988:	e009      	b.n	800299e <ST7735_DrawBitmap+0x192>
        }
        counter +=2U;
 800298a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800298c:	3302      	adds	r3, #2
 800298e:	62fb      	str	r3, [r7, #44]	; 0x2c
        pbmp += 2;
 8002990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002992:	3302      	adds	r3, #2
 8002994:	633b      	str	r3, [r7, #48]	; 0x30
      }while(counter < size);
 8002996:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	429a      	cmp	r2, r3
 800299c:	d3e0      	bcc.n	8002960 <ST7735_DrawBitmap+0x154>

			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800299e:	4b1e      	ldr	r3, [pc, #120]	; (8002a18 <ST7735_DrawBitmap+0x20c>)
 80029a0:	7b1b      	ldrb	r3, [r3, #12]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10a      	bne.n	80029bc <ST7735_DrawBitmap+0x1b0>
						(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 80029a6:	4b1c      	ldr	r3, [pc, #112]	; (8002a18 <ST7735_DrawBitmap+0x20c>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	4a1c      	ldr	r2, [pc, #112]	; (8002a1c <ST7735_DrawBitmap+0x210>)
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	4413      	add	r3, r2
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	b2db      	uxtb	r3, r3
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80029b4:	f043 0308 	orr.w	r3, r3, #8
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	e006      	b.n	80029ca <ST7735_DrawBitmap+0x1be>
						(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 80029bc:	4b16      	ldr	r3, [pc, #88]	; (8002a18 <ST7735_DrawBitmap+0x20c>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	4a16      	ldr	r2, [pc, #88]	; (8002a1c <ST7735_DrawBitmap+0x210>)
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	4413      	add	r3, r2
 80029c6:	685b      	ldr	r3, [r3, #4]
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	74fb      	strb	r3, [r7, #19]
      if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f103 0020 	add.w	r0, r3, #32
 80029d2:	f107 0213 	add.w	r2, r7, #19
 80029d6:	2301      	movs	r3, #1
 80029d8:	2136      	movs	r1, #54	; 0x36
 80029da:	f000 fb71 	bl	80030c0 <st7735_write_reg>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <ST7735_DrawBitmap+0x1e0>
      {
        ret = ST7735_ERROR;
 80029e4:	f04f 33ff 	mov.w	r3, #4294967295
 80029e8:	637b      	str	r3, [r7, #52]	; 0x34
 80029ea:	e010      	b.n	8002a0e <ST7735_DrawBitmap+0x202>
      }
      else
      {
        if(ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height) != ST7735_OK)
 80029ec:	4b0a      	ldr	r3, [pc, #40]	; (8002a18 <ST7735_DrawBitmap+0x20c>)
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	4b09      	ldr	r3, [pc, #36]	; (8002a18 <ST7735_DrawBitmap+0x20c>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	4613      	mov	r3, r2
 80029f8:	2200      	movs	r2, #0
 80029fa:	2100      	movs	r1, #0
 80029fc:	68f8      	ldr	r0, [r7, #12]
 80029fe:	f000 f9e1 	bl	8002dc4 <ST7735_SetDisplayWindow>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d002      	beq.n	8002a0e <ST7735_DrawBitmap+0x202>
        {
          ret = ST7735_ERROR;
 8002a08:	f04f 33ff 	mov.w	r3, #4294967295
 8002a0c:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
  }

  return ret;
 8002a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3738      	adds	r7, #56	; 0x38
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	24009938 	.word	0x24009938
 8002a1c:	24000070 	.word	0x24000070

08002a20 <ST7735_FillRGBRect>:
  * @param  Width  specifies the rectangle width.
  * @param  Height Specifies the rectangle height
  * @retval The component status
  */
int32_t ST7735_FillRGBRect(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b088      	sub	sp, #32
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
 8002a2c:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61fb      	str	r3, [r7, #28]
  static uint8_t pdata[640];
  uint8_t *rgb_data = pData;
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	61bb      	str	r3, [r7, #24]
  uint32_t i, j;

  if(((Xpos + Width) > ST7735Ctx.Width) || ((Ypos + Height) > ST7735Ctx.Height))
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3a:	441a      	add	r2, r3
 8002a3c:	4b2b      	ldr	r3, [pc, #172]	; (8002aec <ST7735_FillRGBRect+0xcc>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d806      	bhi.n	8002a52 <ST7735_FillRGBRect+0x32>
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a48:	441a      	add	r2, r3
 8002a4a:	4b28      	ldr	r3, [pc, #160]	; (8002aec <ST7735_FillRGBRect+0xcc>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d903      	bls.n	8002a5a <ST7735_FillRGBRect+0x3a>
  {
    ret = ST7735_ERROR;
 8002a52:	f04f 33ff 	mov.w	r3, #4294967295
 8002a56:	61fb      	str	r3, [r7, #28]
 8002a58:	e042      	b.n	8002ae0 <ST7735_FillRGBRect+0xc0>
  }/* Set Cursor */
  else
  {
    for(j = 0; j < Height; j++)
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	613b      	str	r3, [r7, #16]
 8002a5e:	e03b      	b.n	8002ad8 <ST7735_FillRGBRect+0xb8>
    {
      if(ST7735_SetCursor(pObj, Xpos, Ypos+j) != ST7735_OK)
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	4413      	add	r3, r2
 8002a66:	461a      	mov	r2, r3
 8002a68:	68b9      	ldr	r1, [r7, #8]
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f7ff fe12 	bl	8002694 <ST7735_SetCursor>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <ST7735_FillRGBRect+0x5e>
      {
        ret = ST7735_ERROR;
 8002a76:	f04f 33ff 	mov.w	r3, #4294967295
 8002a7a:	61fb      	str	r3, [r7, #28]
 8002a7c:	e029      	b.n	8002ad2 <ST7735_FillRGBRect+0xb2>
      }
      else
      {
        for(i = 0; i < Width; i++)
 8002a7e:	2300      	movs	r3, #0
 8002a80:	617b      	str	r3, [r7, #20]
 8002a82:	e013      	b.n	8002aac <ST7735_FillRGBRect+0x8c>
        {
          pdata[2U*i] = (uint8_t)(*(rgb_data));
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	7811      	ldrb	r1, [r2, #0]
 8002a8c:	4a18      	ldr	r2, [pc, #96]	; (8002af0 <ST7735_FillRGBRect+0xd0>)
 8002a8e:	54d1      	strb	r1, [r2, r3]
          pdata[(2U*i) + 1U] = (uint8_t)(*(rgb_data + 1));
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	1c5a      	adds	r2, r3, #1
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	3301      	adds	r3, #1
 8002a9a:	7811      	ldrb	r1, [r2, #0]
 8002a9c:	4a14      	ldr	r2, [pc, #80]	; (8002af0 <ST7735_FillRGBRect+0xd0>)
 8002a9e:	54d1      	strb	r1, [r2, r3]
          rgb_data +=2;
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	3302      	adds	r3, #2
 8002aa4:	61bb      	str	r3, [r7, #24]
        for(i = 0; i < Width; i++)
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d3e7      	bcc.n	8002a84 <ST7735_FillRGBRect+0x64>
        }
        if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Width) != ST7735_OK)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f103 0020 	add.w	r0, r3, #32
 8002aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	461a      	mov	r2, r3
 8002ac0:	490b      	ldr	r1, [pc, #44]	; (8002af0 <ST7735_FillRGBRect+0xd0>)
 8002ac2:	f000 fb12 	bl	80030ea <st7735_send_data>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d002      	beq.n	8002ad2 <ST7735_FillRGBRect+0xb2>
        {
          ret = ST7735_ERROR;
 8002acc:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad0:	61fb      	str	r3, [r7, #28]
    for(j = 0; j < Height; j++)
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	613b      	str	r3, [r7, #16]
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d3bf      	bcc.n	8002a60 <ST7735_FillRGBRect+0x40>
        }
      }
    }
  }

  return ret;
 8002ae0:	69fb      	ldr	r3, [r7, #28]
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3720      	adds	r7, #32
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	24009938 	.word	0x24009938
 8002af0:	24009948 	.word	0x24009948

08002af4 <ST7735_DrawHLine>:
  * @param  Length specifies the Line length.
  * @param  Color  Specifies the RGB color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_DrawHLine(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
 8002b00:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	617b      	str	r3, [r7, #20]
  uint32_t i;
  static uint8_t pdata[640];
	
  if((Xpos + Length) > ST7735Ctx.Width)
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	441a      	add	r2, r3
 8002b0c:	4b1f      	ldr	r3, [pc, #124]	; (8002b8c <ST7735_DrawHLine+0x98>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d903      	bls.n	8002b1c <ST7735_DrawHLine+0x28>
  {
    ret = ST7735_ERROR;
 8002b14:	f04f 33ff 	mov.w	r3, #4294967295
 8002b18:	617b      	str	r3, [r7, #20]
 8002b1a:	e032      	b.n	8002b82 <ST7735_DrawHLine+0x8e>
  }/* Set Cursor */
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	68b9      	ldr	r1, [r7, #8]
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f7ff fdb7 	bl	8002694 <ST7735_SetCursor>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <ST7735_DrawHLine+0x40>
  {
    ret = ST7735_ERROR;
 8002b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b30:	617b      	str	r3, [r7, #20]
 8002b32:	e026      	b.n	8002b82 <ST7735_DrawHLine+0x8e>
  }
  else
  {
    for(i = 0; i < Length; i++)
 8002b34:	2300      	movs	r3, #0
 8002b36:	613b      	str	r3, [r7, #16]
 8002b38:	e010      	b.n	8002b5c <ST7735_DrawHLine+0x68>
    {
      /* Exchange LSB and MSB to fit LCD specification */
      pdata[2U*i] = (uint8_t)(Color >> 8);
 8002b3a:	6a3b      	ldr	r3, [r7, #32]
 8002b3c:	0a1a      	lsrs	r2, r3, #8
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	b2d1      	uxtb	r1, r2
 8002b44:	4a12      	ldr	r2, [pc, #72]	; (8002b90 <ST7735_DrawHLine+0x9c>)
 8002b46:	54d1      	strb	r1, [r2, r3]
      pdata[(2U*i) + 1U] = (uint8_t)(Color);
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	6a3a      	ldr	r2, [r7, #32]
 8002b50:	b2d1      	uxtb	r1, r2
 8002b52:	4a0f      	ldr	r2, [pc, #60]	; (8002b90 <ST7735_DrawHLine+0x9c>)
 8002b54:	54d1      	strb	r1, [r2, r3]
    for(i = 0; i < Length; i++)
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	613b      	str	r3, [r7, #16]
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d3ea      	bcc.n	8002b3a <ST7735_DrawHLine+0x46>
			
//      pdata[(2U*i) + 1U] = (uint8_t)(Color >> 8);
//      pdata[2U*i] = (uint8_t)(Color);			
    }
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Length) != ST7735_OK)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f103 0020 	add.w	r0, r3, #32
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	461a      	mov	r2, r3
 8002b70:	4907      	ldr	r1, [pc, #28]	; (8002b90 <ST7735_DrawHLine+0x9c>)
 8002b72:	f000 faba 	bl	80030ea <st7735_send_data>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d002      	beq.n	8002b82 <ST7735_DrawHLine+0x8e>
    {
      ret = ST7735_ERROR;
 8002b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b80:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8002b82:	697b      	ldr	r3, [r7, #20]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3718      	adds	r7, #24
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	24009938 	.word	0x24009938
 8002b90:	24009bc8 	.word	0x24009bc8

08002b94 <ST7735_DrawVLine>:
  * @param  Ypos     specifies the Y position.
  * @param  Length   specifies the Line length.
  * @retval The component status
  */
int32_t ST7735_DrawVLine(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
 8002ba0:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	617b      	str	r3, [r7, #20]
  uint32_t counter;

  if((Ypos + Length) > ST7735Ctx.Height)
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	441a      	add	r2, r3
 8002bac:	4b12      	ldr	r3, [pc, #72]	; (8002bf8 <ST7735_DrawVLine+0x64>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d903      	bls.n	8002bbc <ST7735_DrawVLine+0x28>
  {
    ret = ST7735_ERROR;
 8002bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8002bb8:	617b      	str	r3, [r7, #20]
 8002bba:	e018      	b.n	8002bee <ST7735_DrawVLine+0x5a>
  }
  else
  {
    for(counter = 0; counter < Length; counter++)
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	613b      	str	r3, [r7, #16]
 8002bc0:	e011      	b.n	8002be6 <ST7735_DrawVLine+0x52>
    {
      if(ST7735_SetPixel(pObj, Xpos, Ypos + counter, Color) != ST7735_OK)
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	441a      	add	r2, r3
 8002bc8:	6a3b      	ldr	r3, [r7, #32]
 8002bca:	68b9      	ldr	r1, [r7, #8]
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f000 f841 	bl	8002c54 <ST7735_SetPixel>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d003      	beq.n	8002be0 <ST7735_DrawVLine+0x4c>
      {
        ret = ST7735_ERROR;
 8002bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bdc:	617b      	str	r3, [r7, #20]
        break;
 8002bde:	e006      	b.n	8002bee <ST7735_DrawVLine+0x5a>
    for(counter = 0; counter < Length; counter++)
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	3301      	adds	r3, #1
 8002be4:	613b      	str	r3, [r7, #16]
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d3e9      	bcc.n	8002bc2 <ST7735_DrawVLine+0x2e>
      }
    }
  }

  return ret;
 8002bee:	697b      	ldr	r3, [r7, #20]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3718      	adds	r7, #24
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	24009938 	.word	0x24009938

08002bfc <ST7735_FillRect>:
  * @param  Height Rectangle height
  * @param  Color Draw color
  * @retval Component status
  */
int32_t ST7735_FillRect(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b08a      	sub	sp, #40	; 0x28
 8002c00:	af02      	add	r7, sp, #8
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
 8002c08:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61fb      	str	r3, [r7, #28]
  uint32_t i, y_pos = Ypos;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	617b      	str	r3, [r7, #20]

  for(i = 0; i < Height; i++)
 8002c12:	2300      	movs	r3, #0
 8002c14:	61bb      	str	r3, [r7, #24]
 8002c16:	e014      	b.n	8002c42 <ST7735_FillRect+0x46>
  {
    if(ST7735_DrawHLine(pObj, Xpos, y_pos, Width, Color) != ST7735_OK)
 8002c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	68b9      	ldr	r1, [r7, #8]
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f7ff ff66 	bl	8002af4 <ST7735_DrawHLine>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <ST7735_FillRect+0x3a>
    {
      ret = ST7735_ERROR;
 8002c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c32:	61fb      	str	r3, [r7, #28]
      break;
 8002c34:	e009      	b.n	8002c4a <ST7735_FillRect+0x4e>
    }
    y_pos++;
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	617b      	str	r3, [r7, #20]
  for(i = 0; i < Height; i++)
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	3301      	adds	r3, #1
 8002c40:	61bb      	str	r3, [r7, #24]
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d3e6      	bcc.n	8002c18 <ST7735_FillRect+0x1c>
  }

  return ret;
 8002c4a:	69fb      	ldr	r3, [r7, #28]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3720      	adds	r7, #32
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <ST7735_SetPixel>:
  * @param  Ypos specifies the Y position.
  * @param  Color the RGB pixel color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_SetPixel(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
 8002c60:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8002c62:	2300      	movs	r3, #0
 8002c64:	617b      	str	r3, [r7, #20]
  uint16_t color;

  /* Exchange LSB and MSB to fit LCD specification */
  color = (uint16_t)((uint16_t)Color << 8);
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	021b      	lsls	r3, r3, #8
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	827b      	strh	r3, [r7, #18]
  color |= (uint16_t)((uint16_t)(Color >> 8));
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	0a1b      	lsrs	r3, r3, #8
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	8a7b      	ldrh	r3, [r7, #18]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	827b      	strh	r3, [r7, #18]

  if((Xpos >= ST7735Ctx.Width) || (Ypos >= ST7735Ctx.Height))
 8002c7e:	4b16      	ldr	r3, [pc, #88]	; (8002cd8 <ST7735_SetPixel+0x84>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d204      	bcs.n	8002c92 <ST7735_SetPixel+0x3e>
 8002c88:	4b13      	ldr	r3, [pc, #76]	; (8002cd8 <ST7735_SetPixel+0x84>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d303      	bcc.n	8002c9a <ST7735_SetPixel+0x46>
  {
    ret = ST7735_ERROR;
 8002c92:	f04f 33ff 	mov.w	r3, #4294967295
 8002c96:	617b      	str	r3, [r7, #20]
 8002c98:	e019      	b.n	8002cce <ST7735_SetPixel+0x7a>
  }/* Set Cursor */
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	68b9      	ldr	r1, [r7, #8]
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f7ff fcf8 	bl	8002694 <ST7735_SetCursor>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <ST7735_SetPixel+0x5e>
  {
    ret = ST7735_ERROR;
 8002caa:	f04f 33ff 	mov.w	r3, #4294967295
 8002cae:	617b      	str	r3, [r7, #20]
 8002cb0:	e00d      	b.n	8002cce <ST7735_SetPixel+0x7a>
  }
  else
  {
    /* Write RAM data */
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&color, 2) != ST7735_OK)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	3320      	adds	r3, #32
 8002cb6:	f107 0112 	add.w	r1, r7, #18
 8002cba:	2202      	movs	r2, #2
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f000 fa14 	bl	80030ea <st7735_send_data>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d002      	beq.n	8002cce <ST7735_SetPixel+0x7a>
    {
      ret = ST7735_ERROR;
 8002cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ccc:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8002cce:	697b      	ldr	r3, [r7, #20]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	24009938 	.word	0x24009938

08002cdc <ST7735_GetPixel>:
  * @param  Ypos specifies the Y position.
  * @param  Color the RGB pixel color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_GetPixel(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
 8002ce8:	603b      	str	r3, [r7, #0]
  uint8_t pixel_lsb, pixel_msb;
  uint8_t tmp;


  /* Set Cursor */
  ret = ST7735_SetCursor(pObj, Xpos, Ypos);
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	68b9      	ldr	r1, [r7, #8]
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f7ff fcd0 	bl	8002694 <ST7735_SetCursor>
 8002cf4:	6178      	str	r0, [r7, #20]

  /* Prepare to read LCD RAM */
  ret += st7735_read_reg(&pObj->Ctx, ST7735_READ_RAM, &tmp);   /* RAM read data command */
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	3320      	adds	r3, #32
 8002cfa:	f107 0211 	add.w	r2, r7, #17
 8002cfe:	212e      	movs	r1, #46	; 0x2e
 8002d00:	4618      	mov	r0, r3
 8002d02:	f000 f9ca 	bl	800309a <st7735_read_reg>
 8002d06:	4602      	mov	r2, r0
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	617b      	str	r3, [r7, #20]

  /* Dummy read */
  ret += st7735_recv_data(&pObj->Ctx, &tmp, 1);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	3320      	adds	r3, #32
 8002d12:	f107 0111 	add.w	r1, r7, #17
 8002d16:	2201      	movs	r2, #1
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f000 f9f8 	bl	800310e <st7735_recv_data>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	4413      	add	r3, r2
 8002d24:	617b      	str	r3, [r7, #20]

  /* Read first part of the RGB888 data */
  ret += st7735_recv_data(&pObj->Ctx, &pixel_lsb, 1);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	3320      	adds	r3, #32
 8002d2a:	f107 0113 	add.w	r1, r7, #19
 8002d2e:	2201      	movs	r2, #1
 8002d30:	4618      	mov	r0, r3
 8002d32:	f000 f9ec 	bl	800310e <st7735_recv_data>
 8002d36:	4602      	mov	r2, r0
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	617b      	str	r3, [r7, #20]
  /* Read first part of the RGB888 data */
  ret += st7735_recv_data(&pObj->Ctx, &pixel_msb, 1);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	3320      	adds	r3, #32
 8002d42:	f107 0112 	add.w	r1, r7, #18
 8002d46:	2201      	movs	r2, #1
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f000 f9e0 	bl	800310e <st7735_recv_data>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	4413      	add	r3, r2
 8002d54:	617b      	str	r3, [r7, #20]

  *Color = ((uint32_t)(pixel_lsb)) + ((uint32_t)(pixel_msb) << 8);
 8002d56:	7cfb      	ldrb	r3, [r7, #19]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	7cbb      	ldrb	r3, [r7, #18]
 8002d5c:	021b      	lsls	r3, r3, #8
 8002d5e:	441a      	add	r2, r3
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	601a      	str	r2, [r3, #0]

  if(ret != ST7735_OK)
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d002      	beq.n	8002d70 <ST7735_GetPixel+0x94>
  {
    ret = ST7735_ERROR;
 8002d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d6e:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8002d70:	697b      	ldr	r3, [r7, #20]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
	...

08002d7c <ST7735_GetXSize>:
  * @brief  Get the LCD pixel Width.
  * @param  pObj Component object
  * @retval The Lcd Pixel Width
  */
int32_t ST7735_GetXSize(ST7735_Object_t *pObj, uint32_t *XSize)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *XSize = ST7735Ctx.Width;
 8002d86:	4b05      	ldr	r3, [pc, #20]	; (8002d9c <ST7735_GetXSize+0x20>)
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	24009938 	.word	0x24009938

08002da0 <ST7735_GetYSize>:
  * @brief  Get the LCD pixel Height.
  * @param  pObj Component object
  * @retval The Lcd Pixel Height
  */
int32_t ST7735_GetYSize(ST7735_Object_t *pObj, uint32_t *YSize)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *YSize = ST7735Ctx.Height;
 8002daa:	4b05      	ldr	r3, [pc, #20]	; (8002dc0 <ST7735_GetYSize+0x20>)
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	24009938 	.word	0x24009938

08002dc4 <ST7735_SetDisplayWindow>:
  * @param  Height display window height.
  * @param  Width  display window width.
  * @retval Component status
  */
static int32_t ST7735_SetDisplayWindow(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
 8002dd0:	603b      	str	r3, [r7, #0]
  int32_t ret;
  uint8_t tmp;

	/* Cursor calibration */
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 8002dd2:	4b7d      	ldr	r3, [pc, #500]	; (8002fc8 <ST7735_SetDisplayWindow+0x204>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d821      	bhi.n	8002e1e <ST7735_SetDisplayWindow+0x5a>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 8002dda:	4b7b      	ldr	r3, [pc, #492]	; (8002fc8 <ST7735_SetDisplayWindow+0x204>)
 8002ddc:	7b5b      	ldrb	r3, [r3, #13]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d10e      	bne.n	8002e00 <ST7735_SetDisplayWindow+0x3c>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 8002de2:	4b79      	ldr	r3, [pc, #484]	; (8002fc8 <ST7735_SetDisplayWindow+0x204>)
 8002de4:	7b1b      	ldrb	r3, [r3, #12]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d106      	bne.n	8002df8 <ST7735_SetDisplayWindow+0x34>
				Xpos += 26;
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	331a      	adds	r3, #26
 8002dee:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	3301      	adds	r3, #1
 8002df4:	607b      	str	r3, [r7, #4]
 8002df6:	e036      	b.n	8002e66 <ST7735_SetDisplayWindow+0xa2>
			} else {		//BOE Panel
				Xpos += 24;
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	3318      	adds	r3, #24
 8002dfc:	60bb      	str	r3, [r7, #8]
 8002dfe:	e032      	b.n	8002e66 <ST7735_SetDisplayWindow+0xa2>
				Ypos += 0;
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8002e00:	4b71      	ldr	r3, [pc, #452]	; (8002fc8 <ST7735_SetDisplayWindow+0x204>)
 8002e02:	7b5b      	ldrb	r3, [r3, #13]
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d12e      	bne.n	8002e66 <ST7735_SetDisplayWindow+0xa2>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8002e08:	4b6f      	ldr	r3, [pc, #444]	; (8002fc8 <ST7735_SetDisplayWindow+0x204>)
 8002e0a:	7b1b      	ldrb	r3, [r3, #12]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d12a      	bne.n	8002e66 <ST7735_SetDisplayWindow+0xa2>
				Xpos += 2;
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	3302      	adds	r3, #2
 8002e14:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	607b      	str	r3, [r7, #4]
 8002e1c:	e023      	b.n	8002e66 <ST7735_SetDisplayWindow+0xa2>
			}
    }
	} else {
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 8002e1e:	4b6a      	ldr	r3, [pc, #424]	; (8002fc8 <ST7735_SetDisplayWindow+0x204>)
 8002e20:	7b5b      	ldrb	r3, [r3, #13]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d111      	bne.n	8002e4a <ST7735_SetDisplayWindow+0x86>
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 8002e26:	4b68      	ldr	r3, [pc, #416]	; (8002fc8 <ST7735_SetDisplayWindow+0x204>)
 8002e28:	7b1b      	ldrb	r3, [r3, #12]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d106      	bne.n	8002e3c <ST7735_SetDisplayWindow+0x78>
				Xpos += 1;
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	3301      	adds	r3, #1
 8002e32:	60bb      	str	r3, [r7, #8]
				Ypos += 26;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	331a      	adds	r3, #26
 8002e38:	607b      	str	r3, [r7, #4]
 8002e3a:	e014      	b.n	8002e66 <ST7735_SetDisplayWindow+0xa2>
			} else {		//BOE Panel
				Xpos += 1;
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	60bb      	str	r3, [r7, #8]
				Ypos += 24;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	3318      	adds	r3, #24
 8002e46:	607b      	str	r3, [r7, #4]
 8002e48:	e00d      	b.n	8002e66 <ST7735_SetDisplayWindow+0xa2>
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8002e4a:	4b5f      	ldr	r3, [pc, #380]	; (8002fc8 <ST7735_SetDisplayWindow+0x204>)
 8002e4c:	7b5b      	ldrb	r3, [r3, #13]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d109      	bne.n	8002e66 <ST7735_SetDisplayWindow+0xa2>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8002e52:	4b5d      	ldr	r3, [pc, #372]	; (8002fc8 <ST7735_SetDisplayWindow+0x204>)
 8002e54:	7b1b      	ldrb	r3, [r3, #12]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d105      	bne.n	8002e66 <ST7735_SetDisplayWindow+0xa2>
				Xpos += 1;
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	60bb      	str	r3, [r7, #8]
				Ypos += 2;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3302      	adds	r3, #2
 8002e64:	607b      	str	r3, [r7, #4]
			}
    }
	}
	
  /* Column addr set, 4 args, no delay: XSTART = Xpos, XEND = (Xpos + Width - 1) */
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f103 0020 	add.w	r0, r3, #32
 8002e6c:	f107 0213 	add.w	r2, r7, #19
 8002e70:	2300      	movs	r3, #0
 8002e72:	212a      	movs	r1, #42	; 0x2a
 8002e74:	f000 f924 	bl	80030c0 <st7735_write_reg>
 8002e78:	6178      	str	r0, [r7, #20]
  tmp = (uint8_t)(Xpos >> 8U);
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	0a1b      	lsrs	r3, r3, #8
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	3320      	adds	r3, #32
 8002e86:	f107 0113 	add.w	r1, r7, #19
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 f92c 	bl	80030ea <st7735_send_data>
 8002e92:	4602      	mov	r2, r0
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	4413      	add	r3, r2
 8002e98:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Xpos & 0xFFU);
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	3320      	adds	r3, #32
 8002ea4:	f107 0113 	add.w	r1, r7, #19
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 f91d 	bl	80030ea <st7735_send_data>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Xpos + Width - 1U) >> 8U);
 8002eb8:	68ba      	ldr	r2, [r7, #8]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	0a1b      	lsrs	r3, r3, #8
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	3320      	adds	r3, #32
 8002eca:	f107 0113 	add.w	r1, r7, #19
 8002ece:	2201      	movs	r2, #1
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f000 f90a 	bl	80030ea <st7735_send_data>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	4413      	add	r3, r2
 8002edc:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Xpos + Width - 1U) & 0xFFU);
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	b2da      	uxtb	r2, r3
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	3b01      	subs	r3, #1
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	3320      	adds	r3, #32
 8002ef4:	f107 0113 	add.w	r1, r7, #19
 8002ef8:	2201      	movs	r2, #1
 8002efa:	4618      	mov	r0, r3
 8002efc:	f000 f8f5 	bl	80030ea <st7735_send_data>
 8002f00:	4602      	mov	r2, r0
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	4413      	add	r3, r2
 8002f06:	617b      	str	r3, [r7, #20]

  /* Row addr set, 4 args, no delay: YSTART = Ypos, YEND = (Ypos + Height - 1) */
  ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f103 0020 	add.w	r0, r3, #32
 8002f0e:	f107 0213 	add.w	r2, r7, #19
 8002f12:	2300      	movs	r3, #0
 8002f14:	212b      	movs	r1, #43	; 0x2b
 8002f16:	f000 f8d3 	bl	80030c0 <st7735_write_reg>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	4413      	add	r3, r2
 8002f20:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos >> 8U);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	0a1b      	lsrs	r3, r3, #8
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	3320      	adds	r3, #32
 8002f2e:	f107 0113 	add.w	r1, r7, #19
 8002f32:	2201      	movs	r2, #1
 8002f34:	4618      	mov	r0, r3
 8002f36:	f000 f8d8 	bl	80030ea <st7735_send_data>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	4413      	add	r3, r2
 8002f40:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos & 0xFFU);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	3320      	adds	r3, #32
 8002f4c:	f107 0113 	add.w	r1, r7, #19
 8002f50:	2201      	movs	r2, #1
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 f8c9 	bl	80030ea <st7735_send_data>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Ypos + Height - 1U) >> 8U);
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6a3b      	ldr	r3, [r7, #32]
 8002f64:	4413      	add	r3, r2
 8002f66:	3b01      	subs	r3, #1
 8002f68:	0a1b      	lsrs	r3, r3, #8
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	3320      	adds	r3, #32
 8002f72:	f107 0113 	add.w	r1, r7, #19
 8002f76:	2201      	movs	r2, #1
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 f8b6 	bl	80030ea <st7735_send_data>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	4413      	add	r3, r2
 8002f84:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Ypos + Height - 1U) & 0xFFU);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	6a3b      	ldr	r3, [r7, #32]
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	4413      	add	r3, r2
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	3b01      	subs	r3, #1
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	3320      	adds	r3, #32
 8002f9c:	f107 0113 	add.w	r1, r7, #19
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 f8a1 	bl	80030ea <st7735_send_data>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	4413      	add	r3, r2
 8002fae:	617b      	str	r3, [r7, #20]

  if(ret != ST7735_OK)
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d002      	beq.n	8002fbc <ST7735_SetDisplayWindow+0x1f8>
  {
    ret = ST7735_ERROR;
 8002fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fba:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8002fbc:	697b      	ldr	r3, [r7, #20]
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3718      	adds	r7, #24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	24009938 	.word	0x24009938

08002fcc <ST7735_ReadRegWrap>:
  * @param  Reg  The target register address to write
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_ReadRegWrap(void *Handle, uint8_t Reg, uint8_t* pData)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	607a      	str	r2, [r7, #4]
 8002fd8:	72fb      	strb	r3, [r7, #11]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(Reg, pData);
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	7afa      	ldrb	r2, [r7, #11]
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	4610      	mov	r0, r2
 8002fe8:	4798      	blx	r3
 8002fea:	4603      	mov	r3, r0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <ST7735_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval Component error status
  */
static int32_t ST7735_WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint32_t Length)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	607a      	str	r2, [r7, #4]
 8002ffe:	603b      	str	r3, [r7, #0]
 8003000:	460b      	mov	r3, r1
 8003002:	72fb      	strb	r3, [r7, #11]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(Reg, pData, Length);
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	7af8      	ldrb	r0, [r7, #11]
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	6879      	ldr	r1, [r7, #4]
 8003012:	4798      	blx	r3
 8003014:	4603      	mov	r3, r0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3718      	adds	r7, #24
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <ST7735_SendDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_SendDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b086      	sub	sp, #24
 8003022:	af00      	add	r7, sp, #0
 8003024:	60f8      	str	r0, [r7, #12]
 8003026:	60b9      	str	r1, [r7, #8]
 8003028:	607a      	str	r2, [r7, #4]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	617b      	str	r3, [r7, #20]

  return pObj->IO.SendData(pData, Length);
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	6879      	ldr	r1, [r7, #4]
 8003034:	68b8      	ldr	r0, [r7, #8]
 8003036:	4798      	blx	r3
 8003038:	4603      	mov	r3, r0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3718      	adds	r7, #24
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <ST7735_RecvDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_RecvDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b086      	sub	sp, #24
 8003046:	af00      	add	r7, sp, #0
 8003048:	60f8      	str	r0, [r7, #12]
 800304a:	60b9      	str	r1, [r7, #8]
 800304c:	607a      	str	r2, [r7, #4]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	617b      	str	r3, [r7, #20]

  return pObj->IO.RecvData(pData, Length);
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	68b8      	ldr	r0, [r7, #8]
 800305a:	4798      	blx	r3
 800305c:	4603      	mov	r3, r0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3718      	adds	r7, #24
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <ST7735_IO_Delay>:
  * @brief  ST7735 delay
  * @param  Delay  Delay in ms
  * @retval Component error status
  */
static int32_t ST7735_IO_Delay(ST7735_Object_t *pObj, uint32_t Delay)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b084      	sub	sp, #16
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
 800306e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69db      	ldr	r3, [r3, #28]
 8003074:	4798      	blx	r3
 8003076:	4603      	mov	r3, r0
 8003078:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800307a:	bf00      	nop
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	69db      	ldr	r3, [r3, #28]
 8003080:	4798      	blx	r3
 8003082:	4603      	mov	r3, r0
 8003084:	461a      	mov	r2, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	429a      	cmp	r2, r3
 800308e:	d8f5      	bhi.n	800307c <ST7735_IO_Delay+0x16>
  {
  }
  return ST7735_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <st7735_read_reg>:
  * @param  reg   Register to read
  * @param  pdata data to read from the register
  * @retval Component status
  */
int32_t st7735_read_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b084      	sub	sp, #16
 800309e:	af00      	add	r7, sp, #0
 80030a0:	60f8      	str	r0, [r7, #12]
 80030a2:	460b      	mov	r3, r1
 80030a4:	607a      	str	r2, [r7, #4]
 80030a6:	72fb      	strb	r3, [r7, #11]
  return ctx->ReadReg(ctx->handle, reg, pdata);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	6910      	ldr	r0, [r2, #16]
 80030b0:	7af9      	ldrb	r1, [r7, #11]
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	4798      	blx	r3
 80030b6:	4603      	mov	r3, r0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <st7735_write_reg>:
  * @param  pdata  data to write to the register
  * @param  length length of data to write to the register
  * @retval Component status
  */
int32_t st7735_write_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint32_t length)
{
 80030c0:	b590      	push	{r4, r7, lr}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	607a      	str	r2, [r7, #4]
 80030ca:	603b      	str	r3, [r7, #0]
 80030cc:	460b      	mov	r3, r1
 80030ce:	72fb      	strb	r3, [r7, #11]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681c      	ldr	r4, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6918      	ldr	r0, [r3, #16]
 80030d8:	7af9      	ldrb	r1, [r7, #11]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	47a0      	blx	r4
 80030e0:	4603      	mov	r3, r0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3714      	adds	r7, #20
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd90      	pop	{r4, r7, pc}

080030ea <st7735_send_data>:
  * @param  pdata  data to write
  * @param  length length of data to write
  * @retval Component status
  */
int32_t st7735_send_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b084      	sub	sp, #16
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	60f8      	str	r0, [r7, #12]
 80030f2:	60b9      	str	r1, [r7, #8]
 80030f4:	607a      	str	r2, [r7, #4]
  return ctx->SendData(ctx->handle, pdata, length);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	6910      	ldr	r0, [r2, #16]
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	68b9      	ldr	r1, [r7, #8]
 8003102:	4798      	blx	r3
 8003104:	4603      	mov	r3, r0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <st7735_recv_data>:
  * @param  pdata  data to read
  * @param  length length of data to read
  * @retval Component status
  */
int32_t st7735_recv_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b084      	sub	sp, #16
 8003112:	af00      	add	r7, sp, #0
 8003114:	60f8      	str	r0, [r7, #12]
 8003116:	60b9      	str	r1, [r7, #8]
 8003118:	607a      	str	r2, [r7, #4]
  return ctx->RecvData(ctx->handle, pdata, length);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	6910      	ldr	r0, [r2, #16]
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	68b9      	ldr	r1, [r7, #8]
 8003126:	4798      	blx	r3
 8003128:	4603      	mov	r3, r0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
	...

08003134 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800313a:	4b0a      	ldr	r3, [pc, #40]	; (8003164 <HAL_MspInit+0x30>)
 800313c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003140:	4a08      	ldr	r2, [pc, #32]	; (8003164 <HAL_MspInit+0x30>)
 8003142:	f043 0302 	orr.w	r3, r3, #2
 8003146:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800314a:	4b06      	ldr	r3, [pc, #24]	; (8003164 <HAL_MspInit+0x30>)
 800314c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	607b      	str	r3, [r7, #4]
 8003156:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr
 8003164:	58024400 	.word	0x58024400

08003168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800316c:	e7fe      	b.n	800316c <NMI_Handler+0x4>

0800316e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800316e:	b480      	push	{r7}
 8003170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003172:	e7fe      	b.n	8003172 <HardFault_Handler+0x4>

08003174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003178:	e7fe      	b.n	8003178 <MemManage_Handler+0x4>

0800317a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800317a:	b480      	push	{r7}
 800317c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800317e:	e7fe      	b.n	800317e <BusFault_Handler+0x4>

08003180 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003184:	e7fe      	b.n	8003184 <UsageFault_Handler+0x4>

08003186 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003186:	b480      	push	{r7}
 8003188:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800318a:	bf00      	nop
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003198:	bf00      	nop
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031a2:	b480      	push	{r7}
 80031a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031a6:	bf00      	nop
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031b4:	f000 fa4e 	bl	8003654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031b8:	bf00      	nop
 80031ba:	bd80      	pop	{r7, pc}

080031bc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80031c0:	4802      	ldr	r0, [pc, #8]	; (80031cc <DMA1_Stream0_IRQHandler+0x10>)
 80031c2:	f001 feb9 	bl	8004f38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80031c6:	bf00      	nop
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	24000170 	.word	0x24000170

080031d0 <DCMI_PSSI_IRQHandler>:

/**
  * @brief This function handles DCMI and PSSI global interrupt.
  */
void DCMI_PSSI_IRQHandler(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_PSSI_IRQn 0 */

  /* USER CODE END DCMI_PSSI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80031d4:	4802      	ldr	r0, [pc, #8]	; (80031e0 <DCMI_PSSI_IRQHandler+0x10>)
 80031d6:	f000 fd57 	bl	8003c88 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_PSSI_IRQn 1 */

  /* USER CODE END DCMI_PSSI_IRQn 1 */
}
 80031da:	bf00      	nop
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	24000120 	.word	0x24000120

080031e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031ec:	4a14      	ldr	r2, [pc, #80]	; (8003240 <_sbrk+0x5c>)
 80031ee:	4b15      	ldr	r3, [pc, #84]	; (8003244 <_sbrk+0x60>)
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031f8:	4b13      	ldr	r3, [pc, #76]	; (8003248 <_sbrk+0x64>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d102      	bne.n	8003206 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003200:	4b11      	ldr	r3, [pc, #68]	; (8003248 <_sbrk+0x64>)
 8003202:	4a12      	ldr	r2, [pc, #72]	; (800324c <_sbrk+0x68>)
 8003204:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003206:	4b10      	ldr	r3, [pc, #64]	; (8003248 <_sbrk+0x64>)
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4413      	add	r3, r2
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	429a      	cmp	r2, r3
 8003212:	d207      	bcs.n	8003224 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003214:	f008 fb68 	bl	800b8e8 <__errno>
 8003218:	4603      	mov	r3, r0
 800321a:	220c      	movs	r2, #12
 800321c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800321e:	f04f 33ff 	mov.w	r3, #4294967295
 8003222:	e009      	b.n	8003238 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003224:	4b08      	ldr	r3, [pc, #32]	; (8003248 <_sbrk+0x64>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800322a:	4b07      	ldr	r3, [pc, #28]	; (8003248 <_sbrk+0x64>)
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4413      	add	r3, r2
 8003232:	4a05      	ldr	r2, [pc, #20]	; (8003248 <_sbrk+0x64>)
 8003234:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003236:	68fb      	ldr	r3, [r7, #12]
}
 8003238:	4618      	mov	r0, r3
 800323a:	3718      	adds	r7, #24
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	24050000 	.word	0x24050000
 8003244:	00000400 	.word	0x00000400
 8003248:	24009e48 	.word	0x24009e48
 800324c:	24009fe8 	.word	0x24009fe8

08003250 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003254:	4b32      	ldr	r3, [pc, #200]	; (8003320 <SystemInit+0xd0>)
 8003256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325a:	4a31      	ldr	r2, [pc, #196]	; (8003320 <SystemInit+0xd0>)
 800325c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003260:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003264:	4b2f      	ldr	r3, [pc, #188]	; (8003324 <SystemInit+0xd4>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 030f 	and.w	r3, r3, #15
 800326c:	2b06      	cmp	r3, #6
 800326e:	d807      	bhi.n	8003280 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003270:	4b2c      	ldr	r3, [pc, #176]	; (8003324 <SystemInit+0xd4>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f023 030f 	bic.w	r3, r3, #15
 8003278:	4a2a      	ldr	r2, [pc, #168]	; (8003324 <SystemInit+0xd4>)
 800327a:	f043 0307 	orr.w	r3, r3, #7
 800327e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003280:	4b29      	ldr	r3, [pc, #164]	; (8003328 <SystemInit+0xd8>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a28      	ldr	r2, [pc, #160]	; (8003328 <SystemInit+0xd8>)
 8003286:	f043 0301 	orr.w	r3, r3, #1
 800328a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800328c:	4b26      	ldr	r3, [pc, #152]	; (8003328 <SystemInit+0xd8>)
 800328e:	2200      	movs	r2, #0
 8003290:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003292:	4b25      	ldr	r3, [pc, #148]	; (8003328 <SystemInit+0xd8>)
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	4924      	ldr	r1, [pc, #144]	; (8003328 <SystemInit+0xd8>)
 8003298:	4b24      	ldr	r3, [pc, #144]	; (800332c <SystemInit+0xdc>)
 800329a:	4013      	ands	r3, r2
 800329c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800329e:	4b21      	ldr	r3, [pc, #132]	; (8003324 <SystemInit+0xd4>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0308 	and.w	r3, r3, #8
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d007      	beq.n	80032ba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80032aa:	4b1e      	ldr	r3, [pc, #120]	; (8003324 <SystemInit+0xd4>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f023 030f 	bic.w	r3, r3, #15
 80032b2:	4a1c      	ldr	r2, [pc, #112]	; (8003324 <SystemInit+0xd4>)
 80032b4:	f043 0307 	orr.w	r3, r3, #7
 80032b8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80032ba:	4b1b      	ldr	r3, [pc, #108]	; (8003328 <SystemInit+0xd8>)
 80032bc:	2200      	movs	r2, #0
 80032be:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80032c0:	4b19      	ldr	r3, [pc, #100]	; (8003328 <SystemInit+0xd8>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80032c6:	4b18      	ldr	r3, [pc, #96]	; (8003328 <SystemInit+0xd8>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80032cc:	4b16      	ldr	r3, [pc, #88]	; (8003328 <SystemInit+0xd8>)
 80032ce:	4a18      	ldr	r2, [pc, #96]	; (8003330 <SystemInit+0xe0>)
 80032d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80032d2:	4b15      	ldr	r3, [pc, #84]	; (8003328 <SystemInit+0xd8>)
 80032d4:	4a17      	ldr	r2, [pc, #92]	; (8003334 <SystemInit+0xe4>)
 80032d6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80032d8:	4b13      	ldr	r3, [pc, #76]	; (8003328 <SystemInit+0xd8>)
 80032da:	4a17      	ldr	r2, [pc, #92]	; (8003338 <SystemInit+0xe8>)
 80032dc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80032de:	4b12      	ldr	r3, [pc, #72]	; (8003328 <SystemInit+0xd8>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80032e4:	4b10      	ldr	r3, [pc, #64]	; (8003328 <SystemInit+0xd8>)
 80032e6:	4a14      	ldr	r2, [pc, #80]	; (8003338 <SystemInit+0xe8>)
 80032e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80032ea:	4b0f      	ldr	r3, [pc, #60]	; (8003328 <SystemInit+0xd8>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80032f0:	4b0d      	ldr	r3, [pc, #52]	; (8003328 <SystemInit+0xd8>)
 80032f2:	4a11      	ldr	r2, [pc, #68]	; (8003338 <SystemInit+0xe8>)
 80032f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80032f6:	4b0c      	ldr	r3, [pc, #48]	; (8003328 <SystemInit+0xd8>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80032fc:	4b0a      	ldr	r3, [pc, #40]	; (8003328 <SystemInit+0xd8>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a09      	ldr	r2, [pc, #36]	; (8003328 <SystemInit+0xd8>)
 8003302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003306:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003308:	4b07      	ldr	r3, [pc, #28]	; (8003328 <SystemInit+0xd8>)
 800330a:	2200      	movs	r2, #0
 800330c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800330e:	4b0b      	ldr	r3, [pc, #44]	; (800333c <SystemInit+0xec>)
 8003310:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003314:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003316:	bf00      	nop
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	e000ed00 	.word	0xe000ed00
 8003324:	52002000 	.word	0x52002000
 8003328:	58024400 	.word	0x58024400
 800332c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003330:	02020200 	.word	0x02020200
 8003334:	01ff0000 	.word	0x01ff0000
 8003338:	01010280 	.word	0x01010280
 800333c:	52004000 	.word	0x52004000

08003340 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b098      	sub	sp, #96	; 0x60
 8003344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003346:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800334a:	2200      	movs	r2, #0
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	605a      	str	r2, [r3, #4]
 8003350:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003352:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	605a      	str	r2, [r3, #4]
 800335c:	609a      	str	r2, [r3, #8]
 800335e:	60da      	str	r2, [r3, #12]
 8003360:	611a      	str	r2, [r3, #16]
 8003362:	615a      	str	r2, [r3, #20]
 8003364:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003366:	1d3b      	adds	r3, r7, #4
 8003368:	2234      	movs	r2, #52	; 0x34
 800336a:	2100      	movs	r1, #0
 800336c:	4618      	mov	r0, r3
 800336e:	f008 fab3 	bl	800b8d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003372:	4b39      	ldr	r3, [pc, #228]	; (8003458 <MX_TIM1_Init+0x118>)
 8003374:	4a39      	ldr	r2, [pc, #228]	; (800345c <MX_TIM1_Init+0x11c>)
 8003376:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 14-1;
 8003378:	4b37      	ldr	r3, [pc, #220]	; (8003458 <MX_TIM1_Init+0x118>)
 800337a:	220d      	movs	r2, #13
 800337c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800337e:	4b36      	ldr	r3, [pc, #216]	; (8003458 <MX_TIM1_Init+0x118>)
 8003380:	2200      	movs	r2, #0
 8003382:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8003384:	4b34      	ldr	r3, [pc, #208]	; (8003458 <MX_TIM1_Init+0x118>)
 8003386:	f240 32e7 	movw	r2, #999	; 0x3e7
 800338a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800338c:	4b32      	ldr	r3, [pc, #200]	; (8003458 <MX_TIM1_Init+0x118>)
 800338e:	2200      	movs	r2, #0
 8003390:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003392:	4b31      	ldr	r3, [pc, #196]	; (8003458 <MX_TIM1_Init+0x118>)
 8003394:	2200      	movs	r2, #0
 8003396:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003398:	4b2f      	ldr	r3, [pc, #188]	; (8003458 <MX_TIM1_Init+0x118>)
 800339a:	2200      	movs	r2, #0
 800339c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800339e:	482e      	ldr	r0, [pc, #184]	; (8003458 <MX_TIM1_Init+0x118>)
 80033a0:	f007 fb61 	bl	800aa66 <HAL_TIM_PWM_Init>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80033aa:	f7fe fa37 	bl	800181c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033ae:	2300      	movs	r3, #0
 80033b0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80033b2:	2300      	movs	r3, #0
 80033b4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033b6:	2300      	movs	r3, #0
 80033b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80033ba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80033be:	4619      	mov	r1, r3
 80033c0:	4825      	ldr	r0, [pc, #148]	; (8003458 <MX_TIM1_Init+0x118>)
 80033c2:	f008 f907 	bl	800b5d4 <HAL_TIMEx_MasterConfigSynchronization>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80033cc:	f7fe fa26 	bl	800181c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033d0:	2360      	movs	r3, #96	; 0x60
 80033d2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80033d4:	2300      	movs	r3, #0
 80033d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033d8:	2300      	movs	r3, #0
 80033da:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80033dc:	2308      	movs	r3, #8
 80033de:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033e0:	2300      	movs	r3, #0
 80033e2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80033e4:	2300      	movs	r3, #0
 80033e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80033e8:	2300      	movs	r3, #0
 80033ea:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80033ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80033f0:	2204      	movs	r2, #4
 80033f2:	4619      	mov	r1, r3
 80033f4:	4818      	ldr	r0, [pc, #96]	; (8003458 <MX_TIM1_Init+0x118>)
 80033f6:	f007 fb8d 	bl	800ab14 <HAL_TIM_PWM_ConfigChannel>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003400:	f7fe fa0c 	bl	800181c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003404:	2300      	movs	r3, #0
 8003406:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003408:	2300      	movs	r3, #0
 800340a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800340c:	2300      	movs	r3, #0
 800340e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003410:	2300      	movs	r3, #0
 8003412:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003414:	2300      	movs	r3, #0
 8003416:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003418:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800341c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800341e:	2300      	movs	r3, #0
 8003420:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003422:	2300      	movs	r3, #0
 8003424:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003426:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800342a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800342c:	2300      	movs	r3, #0
 800342e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003430:	2300      	movs	r3, #0
 8003432:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003434:	1d3b      	adds	r3, r7, #4
 8003436:	4619      	mov	r1, r3
 8003438:	4807      	ldr	r0, [pc, #28]	; (8003458 <MX_TIM1_Init+0x118>)
 800343a:	f008 f967 	bl	800b70c <HAL_TIMEx_ConfigBreakDeadTime>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8003444:	f7fe f9ea 	bl	800181c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003448:	4803      	ldr	r0, [pc, #12]	; (8003458 <MX_TIM1_Init+0x118>)
 800344a:	f000 f82b 	bl	80034a4 <HAL_TIM_MspPostInit>

}
 800344e:	bf00      	nop
 8003450:	3760      	adds	r7, #96	; 0x60
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	24009e4c 	.word	0x24009e4c
 800345c:	40010000 	.word	0x40010000

08003460 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a0b      	ldr	r2, [pc, #44]	; (800349c <HAL_TIM_PWM_MspInit+0x3c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d10e      	bne.n	8003490 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003472:	4b0b      	ldr	r3, [pc, #44]	; (80034a0 <HAL_TIM_PWM_MspInit+0x40>)
 8003474:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003478:	4a09      	ldr	r2, [pc, #36]	; (80034a0 <HAL_TIM_PWM_MspInit+0x40>)
 800347a:	f043 0301 	orr.w	r3, r3, #1
 800347e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003482:	4b07      	ldr	r3, [pc, #28]	; (80034a0 <HAL_TIM_PWM_MspInit+0x40>)
 8003484:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	60fb      	str	r3, [r7, #12]
 800348e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003490:	bf00      	nop
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr
 800349c:	40010000 	.word	0x40010000
 80034a0:	58024400 	.word	0x58024400

080034a4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b088      	sub	sp, #32
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034ac:	f107 030c 	add.w	r3, r7, #12
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	605a      	str	r2, [r3, #4]
 80034b6:	609a      	str	r2, [r3, #8]
 80034b8:	60da      	str	r2, [r3, #12]
 80034ba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a13      	ldr	r2, [pc, #76]	; (8003510 <HAL_TIM_MspPostInit+0x6c>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d11f      	bne.n	8003506 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80034c6:	4b13      	ldr	r3, [pc, #76]	; (8003514 <HAL_TIM_MspPostInit+0x70>)
 80034c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034cc:	4a11      	ldr	r2, [pc, #68]	; (8003514 <HAL_TIM_MspPostInit+0x70>)
 80034ce:	f043 0310 	orr.w	r3, r3, #16
 80034d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034d6:	4b0f      	ldr	r3, [pc, #60]	; (8003514 <HAL_TIM_MspPostInit+0x70>)
 80034d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034dc:	f003 0310 	and.w	r3, r3, #16
 80034e0:	60bb      	str	r3, [r7, #8]
 80034e2:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE10     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80034e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034e8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ea:	2302      	movs	r3, #2
 80034ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ee:	2300      	movs	r3, #0
 80034f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f2:	2300      	movs	r3, #0
 80034f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80034f6:	2301      	movs	r3, #1
 80034f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034fa:	f107 030c 	add.w	r3, r7, #12
 80034fe:	4619      	mov	r1, r3
 8003500:	4805      	ldr	r0, [pc, #20]	; (8003518 <HAL_TIM_MspPostInit+0x74>)
 8003502:	f003 fcdb 	bl	8006ebc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003506:	bf00      	nop
 8003508:	3720      	adds	r7, #32
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	40010000 	.word	0x40010000
 8003514:	58024400 	.word	0x58024400
 8003518:	58021000 	.word	0x58021000

0800351c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800351c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003554 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003520:	f7ff fe96 	bl	8003250 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003524:	480c      	ldr	r0, [pc, #48]	; (8003558 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003526:	490d      	ldr	r1, [pc, #52]	; (800355c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003528:	4a0d      	ldr	r2, [pc, #52]	; (8003560 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800352a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800352c:	e002      	b.n	8003534 <LoopCopyDataInit>

0800352e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800352e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003532:	3304      	adds	r3, #4

08003534 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003538:	d3f9      	bcc.n	800352e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800353a:	4a0a      	ldr	r2, [pc, #40]	; (8003564 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800353c:	4c0a      	ldr	r4, [pc, #40]	; (8003568 <LoopFillZerobss+0x22>)
  movs r3, #0
 800353e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003540:	e001      	b.n	8003546 <LoopFillZerobss>

08003542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003544:	3204      	adds	r2, #4

08003546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003548:	d3fb      	bcc.n	8003542 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800354a:	f008 f9d3 	bl	800b8f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800354e:	f7fe f805 	bl	800155c <main>
  bx  lr
 8003552:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003554:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003558:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800355c:	240000f0 	.word	0x240000f0
  ldr r2, =_sidata
 8003560:	0800cd2c 	.word	0x0800cd2c
  ldr r2, =_sbss
 8003564:	240000f0 	.word	0x240000f0
  ldr r4, =_ebss
 8003568:	24009fe4 	.word	0x24009fe4

0800356c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800356c:	e7fe      	b.n	800356c <ADC3_IRQHandler>
	...

08003570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003576:	2003      	movs	r0, #3
 8003578:	f000 f98e 	bl	8003898 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800357c:	f004 fdfe 	bl	800817c <HAL_RCC_GetSysClockFreq>
 8003580:	4602      	mov	r2, r0
 8003582:	4b15      	ldr	r3, [pc, #84]	; (80035d8 <HAL_Init+0x68>)
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	0a1b      	lsrs	r3, r3, #8
 8003588:	f003 030f 	and.w	r3, r3, #15
 800358c:	4913      	ldr	r1, [pc, #76]	; (80035dc <HAL_Init+0x6c>)
 800358e:	5ccb      	ldrb	r3, [r1, r3]
 8003590:	f003 031f 	and.w	r3, r3, #31
 8003594:	fa22 f303 	lsr.w	r3, r2, r3
 8003598:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800359a:	4b0f      	ldr	r3, [pc, #60]	; (80035d8 <HAL_Init+0x68>)
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	4a0e      	ldr	r2, [pc, #56]	; (80035dc <HAL_Init+0x6c>)
 80035a4:	5cd3      	ldrb	r3, [r2, r3]
 80035a6:	f003 031f 	and.w	r3, r3, #31
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	fa22 f303 	lsr.w	r3, r2, r3
 80035b0:	4a0b      	ldr	r2, [pc, #44]	; (80035e0 <HAL_Init+0x70>)
 80035b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80035b4:	4a0b      	ldr	r2, [pc, #44]	; (80035e4 <HAL_Init+0x74>)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80035ba:	200f      	movs	r0, #15
 80035bc:	f000 f814 	bl	80035e8 <HAL_InitTick>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e002      	b.n	80035d0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80035ca:	f7ff fdb3 	bl	8003134 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	58024400 	.word	0x58024400
 80035dc:	0800ccd8 	.word	0x0800ccd8
 80035e0:	24000094 	.word	0x24000094
 80035e4:	24000090 	.word	0x24000090

080035e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80035f0:	4b15      	ldr	r3, [pc, #84]	; (8003648 <HAL_InitTick+0x60>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e021      	b.n	8003640 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80035fc:	4b13      	ldr	r3, [pc, #76]	; (800364c <HAL_InitTick+0x64>)
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	4b11      	ldr	r3, [pc, #68]	; (8003648 <HAL_InitTick+0x60>)
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	4619      	mov	r1, r3
 8003606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800360a:	fbb3 f3f1 	udiv	r3, r3, r1
 800360e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003612:	4618      	mov	r0, r3
 8003614:	f000 f973 	bl	80038fe <HAL_SYSTICK_Config>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e00e      	b.n	8003640 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b0f      	cmp	r3, #15
 8003626:	d80a      	bhi.n	800363e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003628:	2200      	movs	r2, #0
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	f04f 30ff 	mov.w	r0, #4294967295
 8003630:	f000 f93d 	bl	80038ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003634:	4a06      	ldr	r2, [pc, #24]	; (8003650 <HAL_InitTick+0x68>)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800363a:	2300      	movs	r3, #0
 800363c:	e000      	b.n	8003640 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
}
 8003640:	4618      	mov	r0, r3
 8003642:	3708      	adds	r7, #8
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	2400009c 	.word	0x2400009c
 800364c:	24000090 	.word	0x24000090
 8003650:	24000098 	.word	0x24000098

08003654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003658:	4b06      	ldr	r3, [pc, #24]	; (8003674 <HAL_IncTick+0x20>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	461a      	mov	r2, r3
 800365e:	4b06      	ldr	r3, [pc, #24]	; (8003678 <HAL_IncTick+0x24>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4413      	add	r3, r2
 8003664:	4a04      	ldr	r2, [pc, #16]	; (8003678 <HAL_IncTick+0x24>)
 8003666:	6013      	str	r3, [r2, #0]
}
 8003668:	bf00      	nop
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	2400009c 	.word	0x2400009c
 8003678:	24009e98 	.word	0x24009e98

0800367c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  return uwTick;
 8003680:	4b03      	ldr	r3, [pc, #12]	; (8003690 <HAL_GetTick+0x14>)
 8003682:	681b      	ldr	r3, [r3, #0]
}
 8003684:	4618      	mov	r0, r3
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	24009e98 	.word	0x24009e98

08003694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800369c:	f7ff ffee 	bl	800367c <HAL_GetTick>
 80036a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ac:	d005      	beq.n	80036ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036ae:	4b0a      	ldr	r3, [pc, #40]	; (80036d8 <HAL_Delay+0x44>)
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	461a      	mov	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4413      	add	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80036ba:	bf00      	nop
 80036bc:	f7ff ffde 	bl	800367c <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d8f7      	bhi.n	80036bc <HAL_Delay+0x28>
  {
  }
}
 80036cc:	bf00      	nop
 80036ce:	bf00      	nop
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	2400009c 	.word	0x2400009c

080036dc <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 80036e0:	4b04      	ldr	r3, [pc, #16]	; (80036f4 <HAL_GetDEVID+0x18>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	5c001000 	.word	0x5c001000

080036f8 <__NVIC_SetPriorityGrouping>:
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f003 0307 	and.w	r3, r3, #7
 8003706:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003708:	4b0b      	ldr	r3, [pc, #44]	; (8003738 <__NVIC_SetPriorityGrouping+0x40>)
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003714:	4013      	ands	r3, r2
 8003716:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003720:	4b06      	ldr	r3, [pc, #24]	; (800373c <__NVIC_SetPriorityGrouping+0x44>)
 8003722:	4313      	orrs	r3, r2
 8003724:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003726:	4a04      	ldr	r2, [pc, #16]	; (8003738 <__NVIC_SetPriorityGrouping+0x40>)
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	60d3      	str	r3, [r2, #12]
}
 800372c:	bf00      	nop
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	e000ed00 	.word	0xe000ed00
 800373c:	05fa0000 	.word	0x05fa0000

08003740 <__NVIC_GetPriorityGrouping>:
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003744:	4b04      	ldr	r3, [pc, #16]	; (8003758 <__NVIC_GetPriorityGrouping+0x18>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	0a1b      	lsrs	r3, r3, #8
 800374a:	f003 0307 	and.w	r3, r3, #7
}
 800374e:	4618      	mov	r0, r3
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	e000ed00 	.word	0xe000ed00

0800375c <__NVIC_EnableIRQ>:
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	4603      	mov	r3, r0
 8003764:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003766:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800376a:	2b00      	cmp	r3, #0
 800376c:	db0b      	blt.n	8003786 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800376e:	88fb      	ldrh	r3, [r7, #6]
 8003770:	f003 021f 	and.w	r2, r3, #31
 8003774:	4907      	ldr	r1, [pc, #28]	; (8003794 <__NVIC_EnableIRQ+0x38>)
 8003776:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800377a:	095b      	lsrs	r3, r3, #5
 800377c:	2001      	movs	r0, #1
 800377e:	fa00 f202 	lsl.w	r2, r0, r2
 8003782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	e000e100 	.word	0xe000e100

08003798 <__NVIC_SetPriority>:
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	4603      	mov	r3, r0
 80037a0:	6039      	str	r1, [r7, #0]
 80037a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80037a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	db0a      	blt.n	80037c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	b2da      	uxtb	r2, r3
 80037b0:	490c      	ldr	r1, [pc, #48]	; (80037e4 <__NVIC_SetPriority+0x4c>)
 80037b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037b6:	0112      	lsls	r2, r2, #4
 80037b8:	b2d2      	uxtb	r2, r2
 80037ba:	440b      	add	r3, r1
 80037bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80037c0:	e00a      	b.n	80037d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	4908      	ldr	r1, [pc, #32]	; (80037e8 <__NVIC_SetPriority+0x50>)
 80037c8:	88fb      	ldrh	r3, [r7, #6]
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	3b04      	subs	r3, #4
 80037d0:	0112      	lsls	r2, r2, #4
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	440b      	add	r3, r1
 80037d6:	761a      	strb	r2, [r3, #24]
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr
 80037e4:	e000e100 	.word	0xe000e100
 80037e8:	e000ed00 	.word	0xe000ed00

080037ec <NVIC_EncodePriority>:
{
 80037ec:	b480      	push	{r7}
 80037ee:	b089      	sub	sp, #36	; 0x24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f003 0307 	and.w	r3, r3, #7
 80037fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	f1c3 0307 	rsb	r3, r3, #7
 8003806:	2b04      	cmp	r3, #4
 8003808:	bf28      	it	cs
 800380a:	2304      	movcs	r3, #4
 800380c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	3304      	adds	r3, #4
 8003812:	2b06      	cmp	r3, #6
 8003814:	d902      	bls.n	800381c <NVIC_EncodePriority+0x30>
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	3b03      	subs	r3, #3
 800381a:	e000      	b.n	800381e <NVIC_EncodePriority+0x32>
 800381c:	2300      	movs	r3, #0
 800381e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003820:	f04f 32ff 	mov.w	r2, #4294967295
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	fa02 f303 	lsl.w	r3, r2, r3
 800382a:	43da      	mvns	r2, r3
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	401a      	ands	r2, r3
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003834:	f04f 31ff 	mov.w	r1, #4294967295
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	fa01 f303 	lsl.w	r3, r1, r3
 800383e:	43d9      	mvns	r1, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003844:	4313      	orrs	r3, r2
}
 8003846:	4618      	mov	r0, r3
 8003848:	3724      	adds	r7, #36	; 0x24
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
	...

08003854 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3b01      	subs	r3, #1
 8003860:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003864:	d301      	bcc.n	800386a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003866:	2301      	movs	r3, #1
 8003868:	e00f      	b.n	800388a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800386a:	4a0a      	ldr	r2, [pc, #40]	; (8003894 <SysTick_Config+0x40>)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	3b01      	subs	r3, #1
 8003870:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003872:	210f      	movs	r1, #15
 8003874:	f04f 30ff 	mov.w	r0, #4294967295
 8003878:	f7ff ff8e 	bl	8003798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800387c:	4b05      	ldr	r3, [pc, #20]	; (8003894 <SysTick_Config+0x40>)
 800387e:	2200      	movs	r2, #0
 8003880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003882:	4b04      	ldr	r3, [pc, #16]	; (8003894 <SysTick_Config+0x40>)
 8003884:	2207      	movs	r2, #7
 8003886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	e000e010 	.word	0xe000e010

08003898 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f7ff ff29 	bl	80036f8 <__NVIC_SetPriorityGrouping>
}
 80038a6:	bf00      	nop
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b086      	sub	sp, #24
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	4603      	mov	r3, r0
 80038b6:	60b9      	str	r1, [r7, #8]
 80038b8:	607a      	str	r2, [r7, #4]
 80038ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038bc:	f7ff ff40 	bl	8003740 <__NVIC_GetPriorityGrouping>
 80038c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	68b9      	ldr	r1, [r7, #8]
 80038c6:	6978      	ldr	r0, [r7, #20]
 80038c8:	f7ff ff90 	bl	80037ec <NVIC_EncodePriority>
 80038cc:	4602      	mov	r2, r0
 80038ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80038d2:	4611      	mov	r1, r2
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7ff ff5f 	bl	8003798 <__NVIC_SetPriority>
}
 80038da:	bf00      	nop
 80038dc:	3718      	adds	r7, #24
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b082      	sub	sp, #8
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	4603      	mov	r3, r0
 80038ea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7ff ff33 	bl	800375c <__NVIC_EnableIRQ>
}
 80038f6:	bf00      	nop
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b082      	sub	sp, #8
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7ff ffa4 	bl	8003854 <SysTick_Config>
 800390c:	4603      	mov	r3, r0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
	...

08003918 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800391c:	f3bf 8f5f 	dmb	sy
}
 8003920:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003922:	4b07      	ldr	r3, [pc, #28]	; (8003940 <HAL_MPU_Disable+0x28>)
 8003924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003926:	4a06      	ldr	r2, [pc, #24]	; (8003940 <HAL_MPU_Disable+0x28>)
 8003928:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800392c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800392e:	4b05      	ldr	r3, [pc, #20]	; (8003944 <HAL_MPU_Disable+0x2c>)
 8003930:	2200      	movs	r2, #0
 8003932:	605a      	str	r2, [r3, #4]
}
 8003934:	bf00      	nop
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	e000ed00 	.word	0xe000ed00
 8003944:	e000ed90 	.word	0xe000ed90

08003948 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003950:	4a0b      	ldr	r2, [pc, #44]	; (8003980 <HAL_MPU_Enable+0x38>)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f043 0301 	orr.w	r3, r3, #1
 8003958:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800395a:	4b0a      	ldr	r3, [pc, #40]	; (8003984 <HAL_MPU_Enable+0x3c>)
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	4a09      	ldr	r2, [pc, #36]	; (8003984 <HAL_MPU_Enable+0x3c>)
 8003960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003964:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003966:	f3bf 8f4f 	dsb	sy
}
 800396a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800396c:	f3bf 8f6f 	isb	sy
}
 8003970:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003972:	bf00      	nop
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	e000ed90 	.word	0xe000ed90
 8003984:	e000ed00 	.word	0xe000ed00

08003988 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	785a      	ldrb	r2, [r3, #1]
 8003994:	4b1d      	ldr	r3, [pc, #116]	; (8003a0c <HAL_MPU_ConfigRegion+0x84>)
 8003996:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d029      	beq.n	80039f4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80039a0:	4a1a      	ldr	r2, [pc, #104]	; (8003a0c <HAL_MPU_ConfigRegion+0x84>)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	7b1b      	ldrb	r3, [r3, #12]
 80039ac:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	7adb      	ldrb	r3, [r3, #11]
 80039b2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80039b4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	7a9b      	ldrb	r3, [r3, #10]
 80039ba:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80039bc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	7b5b      	ldrb	r3, [r3, #13]
 80039c2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80039c4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	7b9b      	ldrb	r3, [r3, #14]
 80039ca:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80039cc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	7bdb      	ldrb	r3, [r3, #15]
 80039d2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80039d4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	7a5b      	ldrb	r3, [r3, #9]
 80039da:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80039dc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	7a1b      	ldrb	r3, [r3, #8]
 80039e2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80039e4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	7812      	ldrb	r2, [r2, #0]
 80039ea:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80039ec:	4a07      	ldr	r2, [pc, #28]	; (8003a0c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80039ee:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80039f0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80039f2:	e005      	b.n	8003a00 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80039f4:	4b05      	ldr	r3, [pc, #20]	; (8003a0c <HAL_MPU_ConfigRegion+0x84>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80039fa:	4b04      	ldr	r3, [pc, #16]	; (8003a0c <HAL_MPU_ConfigRegion+0x84>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	611a      	str	r2, [r3, #16]
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr
 8003a0c:	e000ed90 	.word	0xe000ed90

08003a10 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e069      	b.n	8003af6 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d102      	bne.n	8003a34 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7fc fd5e 	bl	80004f0 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2202      	movs	r2, #2
 8003a38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d002      	beq.n	8003a4a <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6819      	ldr	r1, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	4b2a      	ldr	r3, [pc, #168]	; (8003b00 <HAL_DCMI_Init+0xf0>)
 8003a56:	400b      	ands	r3, r1
 8003a58:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6819      	ldr	r1, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003a6e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003a7a:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003a86:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003a92:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a98:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003a9e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	2b10      	cmp	r3, #16
 8003aae:	d112      	bne.n	8003ad6 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	7f1b      	ldrb	r3, [r3, #28]
 8003ab4:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	7f5b      	ldrb	r3, [r3, #29]
 8003aba:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003abc:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	7f9b      	ldrb	r3, [r3, #30]
 8003ac2:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003ac4:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	7fdb      	ldrb	r3, [r3, #31]
 8003acc:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003ad2:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003ad4:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68da      	ldr	r2, [r3, #12]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f042 021e 	orr.w	r2, r2, #30
 8003ae4:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	ffe0f007 	.word	0xffe0f007

08003b04 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b088      	sub	sp, #32
 8003b08:	af02      	add	r7, sp, #8
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
 8003b10:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d101      	bne.n	8003b20 <HAL_DCMI_Start_DMA+0x1c>
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	e0ab      	b.n	8003c78 <HAL_DCMI_Start_DMA+0x174>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b3e:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0202 	bic.w	r2, r2, #2
 8003b4e:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6819      	ldr	r1, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b64:	4a46      	ldr	r2, [pc, #280]	; (8003c80 <HAL_DCMI_Start_DMA+0x17c>)
 8003b66:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b6c:	4a45      	ldr	r2, [pc, #276]	; (8003c84 <HAL_DCMI_Start_DMA+0x180>)
 8003b6e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b74:	2200      	movs	r2, #0
 8003b76:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b96:	d219      	bcs.n	8003bcc <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	3328      	adds	r3, #40	; 0x28
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	f000 fd16 	bl	80045d8 <HAL_DMA_Start_IT>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d055      	beq.n	8003c5e <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2240      	movs	r2, #64	; 0x40
 8003bb6:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e055      	b.n	8003c78 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bd0:	4a2b      	ldr	r2, [pc, #172]	; (8003c80 <HAL_DCMI_Start_DMA+0x17c>)
 8003bd2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	683a      	ldr	r2, [r7, #0]
 8003bde:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8003be6:	e009      	b.n	8003bfc <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bec:	085a      	lsrs	r2, r3, #1
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf6:	005a      	lsls	r2, r3, #1
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c04:	d2f0      	bcs.n	8003be8 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0a:	1e9a      	subs	r2, r3, #2
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	4413      	add	r3, r2
 8003c22:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	3328      	adds	r3, #40	; 0x28
 8003c2e:	4619      	mov	r1, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	f002 fc8f 	bl	800655c <HAL_DMAEx_MultiBufferStart_IT>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00c      	beq.n	8003c5e <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2240      	movs	r2, #64	; 0x40
 8003c48:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e00c      	b.n	8003c78 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f042 0201 	orr.w	r2, r2, #1
 8003c6c:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3718      	adds	r7, #24
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	08003dc9 	.word	0x08003dc9
 8003c84:	08003eef 	.word	0x08003eef

08003c88 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f003 0304 	and.w	r3, r3, #4
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d016      	beq.n	8003cd0 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2204      	movs	r2, #4
 8003ca8:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cae:	f043 0202 	orr.w	r2, r3, #2
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2204      	movs	r2, #4
 8003cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cc2:	4a31      	ldr	r2, [pc, #196]	; (8003d88 <HAL_DCMI_IRQHandler+0x100>)
 8003cc4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 feee 	bl	8004aac <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d016      	beq.n	8003d08 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2202      	movs	r2, #2
 8003ce0:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce6:	f043 0201 	orr.w	r2, r3, #1
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2204      	movs	r2, #4
 8003cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cfa:	4a23      	ldr	r2, [pc, #140]	; (8003d88 <HAL_DCMI_IRQHandler+0x100>)
 8003cfc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 fed2 	bl	8004aac <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f003 0310 	and.w	r3, r3, #16
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d006      	beq.n	8003d20 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2210      	movs	r2, #16
 8003d18:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f840 	bl	8003da0 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f003 0308 	and.w	r3, r3, #8
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d006      	beq.n	8003d38 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2208      	movs	r2, #8
 8003d30:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f83e 	bl	8003db4 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d01d      	beq.n	8003d7e <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d107      	bne.n	8003d60 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 021e 	bic.w	r2, r2, #30
 8003d5e:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68da      	ldr	r2, [r3, #12]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 0201 	bic.w	r2, r2, #1
 8003d6e:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2201      	movs	r2, #1
 8003d76:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f7fd fd1f 	bl	80017bc <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8003d7e:	bf00      	nop
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	08003eef 	.word	0x08003eef

08003d8c <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd4:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d043      	beq.n	8003e66 <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dea:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df0:	f003 0301 	and.w	r3, r3, #1
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d118      	bne.n	8003e2a <DCMI_DMAXferCplt+0x62>
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d015      	beq.n	8003e2a <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e10:	00da      	lsls	r2, r3, #3
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	4413      	add	r3, r2
 8003e16:	2200      	movs	r2, #0
 8003e18:	4619      	mov	r1, r3
 8003e1a:	f002 fefd 	bl	8006c18 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e22:	1e5a      	subs	r2, r3, #1
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	639a      	str	r2, [r3, #56]	; 0x38
 8003e28:	e044      	b.n	8003eb4 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d13c      	bne.n	8003eb4 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4c:	00da      	lsls	r2, r3, #3
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	4413      	add	r3, r2
 8003e52:	2201      	movs	r2, #1
 8003e54:	4619      	mov	r1, r3
 8003e56:	f002 fedf 	bl	8006c18 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5e:	1e5a      	subs	r2, r3, #1
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	639a      	str	r2, [r3, #56]	; 0x38
 8003e64:	e026      	b.n	8003eb4 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d006      	beq.n	8003e84 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003e80:	60da      	str	r2, [r3, #12]
 8003e82:	e017      	b.n	8003eb4 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10f      	bne.n	8003eb4 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e98:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e9e:	0099      	lsls	r1, r3, #2
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	440a      	add	r2, r1
 8003eaa:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	639a      	str	r2, [r3, #56]	; 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d112      	bne.n	8003ee6 <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68da      	ldr	r2, [r3, #12]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f042 0201 	orr.w	r2, r2, #1
 8003ece:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d103      	bne.n	8003ee6 <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 8003ee6:	bf00      	nop
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b084      	sub	sp, #16
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efa:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d009      	beq.n	8003f1a <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f7ff ff36 	bl	8003d8c <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8003f20:	bf00      	nop
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003f30:	f7ff fba4 	bl	800367c <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d101      	bne.n	8003f40 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e312      	b.n	8004566 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a66      	ldr	r2, [pc, #408]	; (80040e0 <HAL_DMA_Init+0x1b8>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d04a      	beq.n	8003fe0 <HAL_DMA_Init+0xb8>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a65      	ldr	r2, [pc, #404]	; (80040e4 <HAL_DMA_Init+0x1bc>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d045      	beq.n	8003fe0 <HAL_DMA_Init+0xb8>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a63      	ldr	r2, [pc, #396]	; (80040e8 <HAL_DMA_Init+0x1c0>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d040      	beq.n	8003fe0 <HAL_DMA_Init+0xb8>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a62      	ldr	r2, [pc, #392]	; (80040ec <HAL_DMA_Init+0x1c4>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d03b      	beq.n	8003fe0 <HAL_DMA_Init+0xb8>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a60      	ldr	r2, [pc, #384]	; (80040f0 <HAL_DMA_Init+0x1c8>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d036      	beq.n	8003fe0 <HAL_DMA_Init+0xb8>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a5f      	ldr	r2, [pc, #380]	; (80040f4 <HAL_DMA_Init+0x1cc>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d031      	beq.n	8003fe0 <HAL_DMA_Init+0xb8>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a5d      	ldr	r2, [pc, #372]	; (80040f8 <HAL_DMA_Init+0x1d0>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d02c      	beq.n	8003fe0 <HAL_DMA_Init+0xb8>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a5c      	ldr	r2, [pc, #368]	; (80040fc <HAL_DMA_Init+0x1d4>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d027      	beq.n	8003fe0 <HAL_DMA_Init+0xb8>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a5a      	ldr	r2, [pc, #360]	; (8004100 <HAL_DMA_Init+0x1d8>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d022      	beq.n	8003fe0 <HAL_DMA_Init+0xb8>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a59      	ldr	r2, [pc, #356]	; (8004104 <HAL_DMA_Init+0x1dc>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d01d      	beq.n	8003fe0 <HAL_DMA_Init+0xb8>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a57      	ldr	r2, [pc, #348]	; (8004108 <HAL_DMA_Init+0x1e0>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d018      	beq.n	8003fe0 <HAL_DMA_Init+0xb8>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a56      	ldr	r2, [pc, #344]	; (800410c <HAL_DMA_Init+0x1e4>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d013      	beq.n	8003fe0 <HAL_DMA_Init+0xb8>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a54      	ldr	r2, [pc, #336]	; (8004110 <HAL_DMA_Init+0x1e8>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d00e      	beq.n	8003fe0 <HAL_DMA_Init+0xb8>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a53      	ldr	r2, [pc, #332]	; (8004114 <HAL_DMA_Init+0x1ec>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d009      	beq.n	8003fe0 <HAL_DMA_Init+0xb8>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a51      	ldr	r2, [pc, #324]	; (8004118 <HAL_DMA_Init+0x1f0>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d004      	beq.n	8003fe0 <HAL_DMA_Init+0xb8>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a50      	ldr	r2, [pc, #320]	; (800411c <HAL_DMA_Init+0x1f4>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d101      	bne.n	8003fe4 <HAL_DMA_Init+0xbc>
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e000      	b.n	8003fe6 <HAL_DMA_Init+0xbe>
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f000 813c 	beq.w	8004264 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2202      	movs	r2, #2
 8003ff0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a37      	ldr	r2, [pc, #220]	; (80040e0 <HAL_DMA_Init+0x1b8>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d04a      	beq.n	800409c <HAL_DMA_Init+0x174>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a36      	ldr	r2, [pc, #216]	; (80040e4 <HAL_DMA_Init+0x1bc>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d045      	beq.n	800409c <HAL_DMA_Init+0x174>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a34      	ldr	r2, [pc, #208]	; (80040e8 <HAL_DMA_Init+0x1c0>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d040      	beq.n	800409c <HAL_DMA_Init+0x174>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a33      	ldr	r2, [pc, #204]	; (80040ec <HAL_DMA_Init+0x1c4>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d03b      	beq.n	800409c <HAL_DMA_Init+0x174>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a31      	ldr	r2, [pc, #196]	; (80040f0 <HAL_DMA_Init+0x1c8>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d036      	beq.n	800409c <HAL_DMA_Init+0x174>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a30      	ldr	r2, [pc, #192]	; (80040f4 <HAL_DMA_Init+0x1cc>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d031      	beq.n	800409c <HAL_DMA_Init+0x174>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a2e      	ldr	r2, [pc, #184]	; (80040f8 <HAL_DMA_Init+0x1d0>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d02c      	beq.n	800409c <HAL_DMA_Init+0x174>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a2d      	ldr	r2, [pc, #180]	; (80040fc <HAL_DMA_Init+0x1d4>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d027      	beq.n	800409c <HAL_DMA_Init+0x174>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a2b      	ldr	r2, [pc, #172]	; (8004100 <HAL_DMA_Init+0x1d8>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d022      	beq.n	800409c <HAL_DMA_Init+0x174>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a2a      	ldr	r2, [pc, #168]	; (8004104 <HAL_DMA_Init+0x1dc>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d01d      	beq.n	800409c <HAL_DMA_Init+0x174>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a28      	ldr	r2, [pc, #160]	; (8004108 <HAL_DMA_Init+0x1e0>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d018      	beq.n	800409c <HAL_DMA_Init+0x174>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a27      	ldr	r2, [pc, #156]	; (800410c <HAL_DMA_Init+0x1e4>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d013      	beq.n	800409c <HAL_DMA_Init+0x174>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a25      	ldr	r2, [pc, #148]	; (8004110 <HAL_DMA_Init+0x1e8>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d00e      	beq.n	800409c <HAL_DMA_Init+0x174>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a24      	ldr	r2, [pc, #144]	; (8004114 <HAL_DMA_Init+0x1ec>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d009      	beq.n	800409c <HAL_DMA_Init+0x174>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a22      	ldr	r2, [pc, #136]	; (8004118 <HAL_DMA_Init+0x1f0>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d004      	beq.n	800409c <HAL_DMA_Init+0x174>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a21      	ldr	r2, [pc, #132]	; (800411c <HAL_DMA_Init+0x1f4>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d108      	bne.n	80040ae <HAL_DMA_Init+0x186>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 0201 	bic.w	r2, r2, #1
 80040aa:	601a      	str	r2, [r3, #0]
 80040ac:	e007      	b.n	80040be <HAL_DMA_Init+0x196>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 0201 	bic.w	r2, r2, #1
 80040bc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80040be:	e02f      	b.n	8004120 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040c0:	f7ff fadc 	bl	800367c <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b05      	cmp	r3, #5
 80040cc:	d928      	bls.n	8004120 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2220      	movs	r2, #32
 80040d2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2203      	movs	r2, #3
 80040d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e242      	b.n	8004566 <HAL_DMA_Init+0x63e>
 80040e0:	40020010 	.word	0x40020010
 80040e4:	40020028 	.word	0x40020028
 80040e8:	40020040 	.word	0x40020040
 80040ec:	40020058 	.word	0x40020058
 80040f0:	40020070 	.word	0x40020070
 80040f4:	40020088 	.word	0x40020088
 80040f8:	400200a0 	.word	0x400200a0
 80040fc:	400200b8 	.word	0x400200b8
 8004100:	40020410 	.word	0x40020410
 8004104:	40020428 	.word	0x40020428
 8004108:	40020440 	.word	0x40020440
 800410c:	40020458 	.word	0x40020458
 8004110:	40020470 	.word	0x40020470
 8004114:	40020488 	.word	0x40020488
 8004118:	400204a0 	.word	0x400204a0
 800411c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1c8      	bne.n	80040c0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	4b83      	ldr	r3, [pc, #524]	; (8004348 <HAL_DMA_Init+0x420>)
 800413a:	4013      	ands	r3, r2
 800413c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004146:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004152:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800415e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	4313      	orrs	r3, r2
 800416a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	2b04      	cmp	r3, #4
 8004172:	d107      	bne.n	8004184 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417c:	4313      	orrs	r3, r2
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	4313      	orrs	r3, r2
 8004182:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	2b28      	cmp	r3, #40	; 0x28
 800418a:	d903      	bls.n	8004194 <HAL_DMA_Init+0x26c>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	2b2e      	cmp	r3, #46	; 0x2e
 8004192:	d91f      	bls.n	80041d4 <HAL_DMA_Init+0x2ac>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	2b3e      	cmp	r3, #62	; 0x3e
 800419a:	d903      	bls.n	80041a4 <HAL_DMA_Init+0x27c>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	2b42      	cmp	r3, #66	; 0x42
 80041a2:	d917      	bls.n	80041d4 <HAL_DMA_Init+0x2ac>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2b46      	cmp	r3, #70	; 0x46
 80041aa:	d903      	bls.n	80041b4 <HAL_DMA_Init+0x28c>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	2b48      	cmp	r3, #72	; 0x48
 80041b2:	d90f      	bls.n	80041d4 <HAL_DMA_Init+0x2ac>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2b4e      	cmp	r3, #78	; 0x4e
 80041ba:	d903      	bls.n	80041c4 <HAL_DMA_Init+0x29c>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	2b52      	cmp	r3, #82	; 0x52
 80041c2:	d907      	bls.n	80041d4 <HAL_DMA_Init+0x2ac>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	2b73      	cmp	r3, #115	; 0x73
 80041ca:	d905      	bls.n	80041d8 <HAL_DMA_Init+0x2b0>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	2b77      	cmp	r3, #119	; 0x77
 80041d2:	d801      	bhi.n	80041d8 <HAL_DMA_Init+0x2b0>
 80041d4:	2301      	movs	r3, #1
 80041d6:	e000      	b.n	80041da <HAL_DMA_Init+0x2b2>
 80041d8:	2300      	movs	r3, #0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041e4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	f023 0307 	bic.w	r3, r3, #7
 80041fc:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	4313      	orrs	r3, r2
 8004206:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	2b04      	cmp	r3, #4
 800420e:	d117      	bne.n	8004240 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	4313      	orrs	r3, r2
 8004218:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00e      	beq.n	8004240 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f002 f810 	bl	8006248 <DMA_CheckFifoParam>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d008      	beq.n	8004240 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2240      	movs	r2, #64	; 0x40
 8004232:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e192      	b.n	8004566 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f001 ff4b 	bl	80060e4 <DMA_CalcBaseAndBitshift>
 800424e:	4603      	mov	r3, r0
 8004250:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004256:	f003 031f 	and.w	r3, r3, #31
 800425a:	223f      	movs	r2, #63	; 0x3f
 800425c:	409a      	lsls	r2, r3
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	609a      	str	r2, [r3, #8]
 8004262:	e0c8      	b.n	80043f6 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a38      	ldr	r2, [pc, #224]	; (800434c <HAL_DMA_Init+0x424>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d022      	beq.n	80042b4 <HAL_DMA_Init+0x38c>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a37      	ldr	r2, [pc, #220]	; (8004350 <HAL_DMA_Init+0x428>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d01d      	beq.n	80042b4 <HAL_DMA_Init+0x38c>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a35      	ldr	r2, [pc, #212]	; (8004354 <HAL_DMA_Init+0x42c>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d018      	beq.n	80042b4 <HAL_DMA_Init+0x38c>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a34      	ldr	r2, [pc, #208]	; (8004358 <HAL_DMA_Init+0x430>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d013      	beq.n	80042b4 <HAL_DMA_Init+0x38c>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a32      	ldr	r2, [pc, #200]	; (800435c <HAL_DMA_Init+0x434>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d00e      	beq.n	80042b4 <HAL_DMA_Init+0x38c>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a31      	ldr	r2, [pc, #196]	; (8004360 <HAL_DMA_Init+0x438>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d009      	beq.n	80042b4 <HAL_DMA_Init+0x38c>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a2f      	ldr	r2, [pc, #188]	; (8004364 <HAL_DMA_Init+0x43c>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d004      	beq.n	80042b4 <HAL_DMA_Init+0x38c>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a2e      	ldr	r2, [pc, #184]	; (8004368 <HAL_DMA_Init+0x440>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d101      	bne.n	80042b8 <HAL_DMA_Init+0x390>
 80042b4:	2301      	movs	r3, #1
 80042b6:	e000      	b.n	80042ba <HAL_DMA_Init+0x392>
 80042b8:	2300      	movs	r3, #0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f000 8092 	beq.w	80043e4 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a21      	ldr	r2, [pc, #132]	; (800434c <HAL_DMA_Init+0x424>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d021      	beq.n	800430e <HAL_DMA_Init+0x3e6>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a20      	ldr	r2, [pc, #128]	; (8004350 <HAL_DMA_Init+0x428>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d01c      	beq.n	800430e <HAL_DMA_Init+0x3e6>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a1e      	ldr	r2, [pc, #120]	; (8004354 <HAL_DMA_Init+0x42c>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d017      	beq.n	800430e <HAL_DMA_Init+0x3e6>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a1d      	ldr	r2, [pc, #116]	; (8004358 <HAL_DMA_Init+0x430>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d012      	beq.n	800430e <HAL_DMA_Init+0x3e6>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a1b      	ldr	r2, [pc, #108]	; (800435c <HAL_DMA_Init+0x434>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d00d      	beq.n	800430e <HAL_DMA_Init+0x3e6>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a1a      	ldr	r2, [pc, #104]	; (8004360 <HAL_DMA_Init+0x438>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d008      	beq.n	800430e <HAL_DMA_Init+0x3e6>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a18      	ldr	r2, [pc, #96]	; (8004364 <HAL_DMA_Init+0x43c>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d003      	beq.n	800430e <HAL_DMA_Init+0x3e6>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a17      	ldr	r2, [pc, #92]	; (8004368 <HAL_DMA_Init+0x440>)
 800430c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2202      	movs	r2, #2
 8004312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	4b10      	ldr	r3, [pc, #64]	; (800436c <HAL_DMA_Init+0x444>)
 800432a:	4013      	ands	r3, r2
 800432c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	2b40      	cmp	r3, #64	; 0x40
 8004334:	d01c      	beq.n	8004370 <HAL_DMA_Init+0x448>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	2b80      	cmp	r3, #128	; 0x80
 800433c:	d102      	bne.n	8004344 <HAL_DMA_Init+0x41c>
 800433e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004342:	e016      	b.n	8004372 <HAL_DMA_Init+0x44a>
 8004344:	2300      	movs	r3, #0
 8004346:	e014      	b.n	8004372 <HAL_DMA_Init+0x44a>
 8004348:	fe10803f 	.word	0xfe10803f
 800434c:	58025408 	.word	0x58025408
 8004350:	5802541c 	.word	0x5802541c
 8004354:	58025430 	.word	0x58025430
 8004358:	58025444 	.word	0x58025444
 800435c:	58025458 	.word	0x58025458
 8004360:	5802546c 	.word	0x5802546c
 8004364:	58025480 	.word	0x58025480
 8004368:	58025494 	.word	0x58025494
 800436c:	fffe000f 	.word	0xfffe000f
 8004370:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	68d2      	ldr	r2, [r2, #12]
 8004376:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004378:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004380:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004388:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004390:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	69db      	ldr	r3, [r3, #28]
 8004396:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004398:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80043a0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	461a      	mov	r2, r3
 80043b6:	4b6e      	ldr	r3, [pc, #440]	; (8004570 <HAL_DMA_Init+0x648>)
 80043b8:	4413      	add	r3, r2
 80043ba:	4a6e      	ldr	r2, [pc, #440]	; (8004574 <HAL_DMA_Init+0x64c>)
 80043bc:	fba2 2303 	umull	r2, r3, r2, r3
 80043c0:	091b      	lsrs	r3, r3, #4
 80043c2:	009a      	lsls	r2, r3, #2
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f001 fe8b 	bl	80060e4 <DMA_CalcBaseAndBitshift>
 80043ce:	4603      	mov	r3, r0
 80043d0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d6:	f003 031f 	and.w	r3, r3, #31
 80043da:	2201      	movs	r2, #1
 80043dc:	409a      	lsls	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	605a      	str	r2, [r3, #4]
 80043e2:	e008      	b.n	80043f6 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2240      	movs	r2, #64	; 0x40
 80043e8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2203      	movs	r2, #3
 80043ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e0b7      	b.n	8004566 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a5f      	ldr	r2, [pc, #380]	; (8004578 <HAL_DMA_Init+0x650>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d072      	beq.n	80044e6 <HAL_DMA_Init+0x5be>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a5d      	ldr	r2, [pc, #372]	; (800457c <HAL_DMA_Init+0x654>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d06d      	beq.n	80044e6 <HAL_DMA_Init+0x5be>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a5c      	ldr	r2, [pc, #368]	; (8004580 <HAL_DMA_Init+0x658>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d068      	beq.n	80044e6 <HAL_DMA_Init+0x5be>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a5a      	ldr	r2, [pc, #360]	; (8004584 <HAL_DMA_Init+0x65c>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d063      	beq.n	80044e6 <HAL_DMA_Init+0x5be>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a59      	ldr	r2, [pc, #356]	; (8004588 <HAL_DMA_Init+0x660>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d05e      	beq.n	80044e6 <HAL_DMA_Init+0x5be>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a57      	ldr	r2, [pc, #348]	; (800458c <HAL_DMA_Init+0x664>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d059      	beq.n	80044e6 <HAL_DMA_Init+0x5be>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a56      	ldr	r2, [pc, #344]	; (8004590 <HAL_DMA_Init+0x668>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d054      	beq.n	80044e6 <HAL_DMA_Init+0x5be>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a54      	ldr	r2, [pc, #336]	; (8004594 <HAL_DMA_Init+0x66c>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d04f      	beq.n	80044e6 <HAL_DMA_Init+0x5be>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a53      	ldr	r2, [pc, #332]	; (8004598 <HAL_DMA_Init+0x670>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d04a      	beq.n	80044e6 <HAL_DMA_Init+0x5be>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a51      	ldr	r2, [pc, #324]	; (800459c <HAL_DMA_Init+0x674>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d045      	beq.n	80044e6 <HAL_DMA_Init+0x5be>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a50      	ldr	r2, [pc, #320]	; (80045a0 <HAL_DMA_Init+0x678>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d040      	beq.n	80044e6 <HAL_DMA_Init+0x5be>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a4e      	ldr	r2, [pc, #312]	; (80045a4 <HAL_DMA_Init+0x67c>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d03b      	beq.n	80044e6 <HAL_DMA_Init+0x5be>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a4d      	ldr	r2, [pc, #308]	; (80045a8 <HAL_DMA_Init+0x680>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d036      	beq.n	80044e6 <HAL_DMA_Init+0x5be>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a4b      	ldr	r2, [pc, #300]	; (80045ac <HAL_DMA_Init+0x684>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d031      	beq.n	80044e6 <HAL_DMA_Init+0x5be>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a4a      	ldr	r2, [pc, #296]	; (80045b0 <HAL_DMA_Init+0x688>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d02c      	beq.n	80044e6 <HAL_DMA_Init+0x5be>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a48      	ldr	r2, [pc, #288]	; (80045b4 <HAL_DMA_Init+0x68c>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d027      	beq.n	80044e6 <HAL_DMA_Init+0x5be>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a47      	ldr	r2, [pc, #284]	; (80045b8 <HAL_DMA_Init+0x690>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d022      	beq.n	80044e6 <HAL_DMA_Init+0x5be>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a45      	ldr	r2, [pc, #276]	; (80045bc <HAL_DMA_Init+0x694>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d01d      	beq.n	80044e6 <HAL_DMA_Init+0x5be>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a44      	ldr	r2, [pc, #272]	; (80045c0 <HAL_DMA_Init+0x698>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d018      	beq.n	80044e6 <HAL_DMA_Init+0x5be>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a42      	ldr	r2, [pc, #264]	; (80045c4 <HAL_DMA_Init+0x69c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d013      	beq.n	80044e6 <HAL_DMA_Init+0x5be>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a41      	ldr	r2, [pc, #260]	; (80045c8 <HAL_DMA_Init+0x6a0>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d00e      	beq.n	80044e6 <HAL_DMA_Init+0x5be>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a3f      	ldr	r2, [pc, #252]	; (80045cc <HAL_DMA_Init+0x6a4>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d009      	beq.n	80044e6 <HAL_DMA_Init+0x5be>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a3e      	ldr	r2, [pc, #248]	; (80045d0 <HAL_DMA_Init+0x6a8>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d004      	beq.n	80044e6 <HAL_DMA_Init+0x5be>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a3c      	ldr	r2, [pc, #240]	; (80045d4 <HAL_DMA_Init+0x6ac>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d101      	bne.n	80044ea <HAL_DMA_Init+0x5c2>
 80044e6:	2301      	movs	r3, #1
 80044e8:	e000      	b.n	80044ec <HAL_DMA_Init+0x5c4>
 80044ea:	2300      	movs	r3, #0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d032      	beq.n	8004556 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f001 ff25 	bl	8006340 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	2b80      	cmp	r3, #128	; 0x80
 80044fc:	d102      	bne.n	8004504 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800450c:	b2d2      	uxtb	r2, r2
 800450e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004518:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d010      	beq.n	8004544 <HAL_DMA_Init+0x61c>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2b08      	cmp	r3, #8
 8004528:	d80c      	bhi.n	8004544 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f001 ffa2 	bl	8006474 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004534:	2200      	movs	r2, #0
 8004536:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004540:	605a      	str	r2, [r3, #4]
 8004542:	e008      	b.n	8004556 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3718      	adds	r7, #24
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	a7fdabf8 	.word	0xa7fdabf8
 8004574:	cccccccd 	.word	0xcccccccd
 8004578:	40020010 	.word	0x40020010
 800457c:	40020028 	.word	0x40020028
 8004580:	40020040 	.word	0x40020040
 8004584:	40020058 	.word	0x40020058
 8004588:	40020070 	.word	0x40020070
 800458c:	40020088 	.word	0x40020088
 8004590:	400200a0 	.word	0x400200a0
 8004594:	400200b8 	.word	0x400200b8
 8004598:	40020410 	.word	0x40020410
 800459c:	40020428 	.word	0x40020428
 80045a0:	40020440 	.word	0x40020440
 80045a4:	40020458 	.word	0x40020458
 80045a8:	40020470 	.word	0x40020470
 80045ac:	40020488 	.word	0x40020488
 80045b0:	400204a0 	.word	0x400204a0
 80045b4:	400204b8 	.word	0x400204b8
 80045b8:	58025408 	.word	0x58025408
 80045bc:	5802541c 	.word	0x5802541c
 80045c0:	58025430 	.word	0x58025430
 80045c4:	58025444 	.word	0x58025444
 80045c8:	58025458 	.word	0x58025458
 80045cc:	5802546c 	.word	0x5802546c
 80045d0:	58025480 	.word	0x58025480
 80045d4:	58025494 	.word	0x58025494

080045d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
 80045e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045e6:	2300      	movs	r3, #0
 80045e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d101      	bne.n	80045f4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e226      	b.n	8004a42 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d101      	bne.n	8004602 <HAL_DMA_Start_IT+0x2a>
 80045fe:	2302      	movs	r3, #2
 8004600:	e21f      	b.n	8004a42 <HAL_DMA_Start_IT+0x46a>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b01      	cmp	r3, #1
 8004614:	f040 820a 	bne.w	8004a2c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2202      	movs	r2, #2
 800461c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a68      	ldr	r2, [pc, #416]	; (80047cc <HAL_DMA_Start_IT+0x1f4>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d04a      	beq.n	80046c6 <HAL_DMA_Start_IT+0xee>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a66      	ldr	r2, [pc, #408]	; (80047d0 <HAL_DMA_Start_IT+0x1f8>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d045      	beq.n	80046c6 <HAL_DMA_Start_IT+0xee>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a65      	ldr	r2, [pc, #404]	; (80047d4 <HAL_DMA_Start_IT+0x1fc>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d040      	beq.n	80046c6 <HAL_DMA_Start_IT+0xee>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a63      	ldr	r2, [pc, #396]	; (80047d8 <HAL_DMA_Start_IT+0x200>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d03b      	beq.n	80046c6 <HAL_DMA_Start_IT+0xee>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a62      	ldr	r2, [pc, #392]	; (80047dc <HAL_DMA_Start_IT+0x204>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d036      	beq.n	80046c6 <HAL_DMA_Start_IT+0xee>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a60      	ldr	r2, [pc, #384]	; (80047e0 <HAL_DMA_Start_IT+0x208>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d031      	beq.n	80046c6 <HAL_DMA_Start_IT+0xee>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a5f      	ldr	r2, [pc, #380]	; (80047e4 <HAL_DMA_Start_IT+0x20c>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d02c      	beq.n	80046c6 <HAL_DMA_Start_IT+0xee>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a5d      	ldr	r2, [pc, #372]	; (80047e8 <HAL_DMA_Start_IT+0x210>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d027      	beq.n	80046c6 <HAL_DMA_Start_IT+0xee>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a5c      	ldr	r2, [pc, #368]	; (80047ec <HAL_DMA_Start_IT+0x214>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d022      	beq.n	80046c6 <HAL_DMA_Start_IT+0xee>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a5a      	ldr	r2, [pc, #360]	; (80047f0 <HAL_DMA_Start_IT+0x218>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d01d      	beq.n	80046c6 <HAL_DMA_Start_IT+0xee>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a59      	ldr	r2, [pc, #356]	; (80047f4 <HAL_DMA_Start_IT+0x21c>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d018      	beq.n	80046c6 <HAL_DMA_Start_IT+0xee>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a57      	ldr	r2, [pc, #348]	; (80047f8 <HAL_DMA_Start_IT+0x220>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d013      	beq.n	80046c6 <HAL_DMA_Start_IT+0xee>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a56      	ldr	r2, [pc, #344]	; (80047fc <HAL_DMA_Start_IT+0x224>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d00e      	beq.n	80046c6 <HAL_DMA_Start_IT+0xee>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a54      	ldr	r2, [pc, #336]	; (8004800 <HAL_DMA_Start_IT+0x228>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d009      	beq.n	80046c6 <HAL_DMA_Start_IT+0xee>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a53      	ldr	r2, [pc, #332]	; (8004804 <HAL_DMA_Start_IT+0x22c>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d004      	beq.n	80046c6 <HAL_DMA_Start_IT+0xee>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a51      	ldr	r2, [pc, #324]	; (8004808 <HAL_DMA_Start_IT+0x230>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d108      	bne.n	80046d8 <HAL_DMA_Start_IT+0x100>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 0201 	bic.w	r2, r2, #1
 80046d4:	601a      	str	r2, [r3, #0]
 80046d6:	e007      	b.n	80046e8 <HAL_DMA_Start_IT+0x110>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f022 0201 	bic.w	r2, r2, #1
 80046e6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	68b9      	ldr	r1, [r7, #8]
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f001 fb4c 	bl	8005d8c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a34      	ldr	r2, [pc, #208]	; (80047cc <HAL_DMA_Start_IT+0x1f4>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d04a      	beq.n	8004794 <HAL_DMA_Start_IT+0x1bc>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a33      	ldr	r2, [pc, #204]	; (80047d0 <HAL_DMA_Start_IT+0x1f8>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d045      	beq.n	8004794 <HAL_DMA_Start_IT+0x1bc>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a31      	ldr	r2, [pc, #196]	; (80047d4 <HAL_DMA_Start_IT+0x1fc>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d040      	beq.n	8004794 <HAL_DMA_Start_IT+0x1bc>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a30      	ldr	r2, [pc, #192]	; (80047d8 <HAL_DMA_Start_IT+0x200>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d03b      	beq.n	8004794 <HAL_DMA_Start_IT+0x1bc>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a2e      	ldr	r2, [pc, #184]	; (80047dc <HAL_DMA_Start_IT+0x204>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d036      	beq.n	8004794 <HAL_DMA_Start_IT+0x1bc>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a2d      	ldr	r2, [pc, #180]	; (80047e0 <HAL_DMA_Start_IT+0x208>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d031      	beq.n	8004794 <HAL_DMA_Start_IT+0x1bc>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a2b      	ldr	r2, [pc, #172]	; (80047e4 <HAL_DMA_Start_IT+0x20c>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d02c      	beq.n	8004794 <HAL_DMA_Start_IT+0x1bc>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a2a      	ldr	r2, [pc, #168]	; (80047e8 <HAL_DMA_Start_IT+0x210>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d027      	beq.n	8004794 <HAL_DMA_Start_IT+0x1bc>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a28      	ldr	r2, [pc, #160]	; (80047ec <HAL_DMA_Start_IT+0x214>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d022      	beq.n	8004794 <HAL_DMA_Start_IT+0x1bc>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a27      	ldr	r2, [pc, #156]	; (80047f0 <HAL_DMA_Start_IT+0x218>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d01d      	beq.n	8004794 <HAL_DMA_Start_IT+0x1bc>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a25      	ldr	r2, [pc, #148]	; (80047f4 <HAL_DMA_Start_IT+0x21c>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d018      	beq.n	8004794 <HAL_DMA_Start_IT+0x1bc>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a24      	ldr	r2, [pc, #144]	; (80047f8 <HAL_DMA_Start_IT+0x220>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d013      	beq.n	8004794 <HAL_DMA_Start_IT+0x1bc>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a22      	ldr	r2, [pc, #136]	; (80047fc <HAL_DMA_Start_IT+0x224>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d00e      	beq.n	8004794 <HAL_DMA_Start_IT+0x1bc>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a21      	ldr	r2, [pc, #132]	; (8004800 <HAL_DMA_Start_IT+0x228>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d009      	beq.n	8004794 <HAL_DMA_Start_IT+0x1bc>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a1f      	ldr	r2, [pc, #124]	; (8004804 <HAL_DMA_Start_IT+0x22c>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d004      	beq.n	8004794 <HAL_DMA_Start_IT+0x1bc>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a1e      	ldr	r2, [pc, #120]	; (8004808 <HAL_DMA_Start_IT+0x230>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d101      	bne.n	8004798 <HAL_DMA_Start_IT+0x1c0>
 8004794:	2301      	movs	r3, #1
 8004796:	e000      	b.n	800479a <HAL_DMA_Start_IT+0x1c2>
 8004798:	2300      	movs	r3, #0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d036      	beq.n	800480c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f023 021e 	bic.w	r2, r3, #30
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f042 0216 	orr.w	r2, r2, #22
 80047b0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d03e      	beq.n	8004838 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f042 0208 	orr.w	r2, r2, #8
 80047c8:	601a      	str	r2, [r3, #0]
 80047ca:	e035      	b.n	8004838 <HAL_DMA_Start_IT+0x260>
 80047cc:	40020010 	.word	0x40020010
 80047d0:	40020028 	.word	0x40020028
 80047d4:	40020040 	.word	0x40020040
 80047d8:	40020058 	.word	0x40020058
 80047dc:	40020070 	.word	0x40020070
 80047e0:	40020088 	.word	0x40020088
 80047e4:	400200a0 	.word	0x400200a0
 80047e8:	400200b8 	.word	0x400200b8
 80047ec:	40020410 	.word	0x40020410
 80047f0:	40020428 	.word	0x40020428
 80047f4:	40020440 	.word	0x40020440
 80047f8:	40020458 	.word	0x40020458
 80047fc:	40020470 	.word	0x40020470
 8004800:	40020488 	.word	0x40020488
 8004804:	400204a0 	.word	0x400204a0
 8004808:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f023 020e 	bic.w	r2, r3, #14
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f042 020a 	orr.w	r2, r2, #10
 800481e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004824:	2b00      	cmp	r3, #0
 8004826:	d007      	beq.n	8004838 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f042 0204 	orr.w	r2, r2, #4
 8004836:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a83      	ldr	r2, [pc, #524]	; (8004a4c <HAL_DMA_Start_IT+0x474>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d072      	beq.n	8004928 <HAL_DMA_Start_IT+0x350>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a82      	ldr	r2, [pc, #520]	; (8004a50 <HAL_DMA_Start_IT+0x478>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d06d      	beq.n	8004928 <HAL_DMA_Start_IT+0x350>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a80      	ldr	r2, [pc, #512]	; (8004a54 <HAL_DMA_Start_IT+0x47c>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d068      	beq.n	8004928 <HAL_DMA_Start_IT+0x350>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a7f      	ldr	r2, [pc, #508]	; (8004a58 <HAL_DMA_Start_IT+0x480>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d063      	beq.n	8004928 <HAL_DMA_Start_IT+0x350>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a7d      	ldr	r2, [pc, #500]	; (8004a5c <HAL_DMA_Start_IT+0x484>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d05e      	beq.n	8004928 <HAL_DMA_Start_IT+0x350>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a7c      	ldr	r2, [pc, #496]	; (8004a60 <HAL_DMA_Start_IT+0x488>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d059      	beq.n	8004928 <HAL_DMA_Start_IT+0x350>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a7a      	ldr	r2, [pc, #488]	; (8004a64 <HAL_DMA_Start_IT+0x48c>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d054      	beq.n	8004928 <HAL_DMA_Start_IT+0x350>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a79      	ldr	r2, [pc, #484]	; (8004a68 <HAL_DMA_Start_IT+0x490>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d04f      	beq.n	8004928 <HAL_DMA_Start_IT+0x350>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a77      	ldr	r2, [pc, #476]	; (8004a6c <HAL_DMA_Start_IT+0x494>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d04a      	beq.n	8004928 <HAL_DMA_Start_IT+0x350>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a76      	ldr	r2, [pc, #472]	; (8004a70 <HAL_DMA_Start_IT+0x498>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d045      	beq.n	8004928 <HAL_DMA_Start_IT+0x350>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a74      	ldr	r2, [pc, #464]	; (8004a74 <HAL_DMA_Start_IT+0x49c>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d040      	beq.n	8004928 <HAL_DMA_Start_IT+0x350>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a73      	ldr	r2, [pc, #460]	; (8004a78 <HAL_DMA_Start_IT+0x4a0>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d03b      	beq.n	8004928 <HAL_DMA_Start_IT+0x350>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a71      	ldr	r2, [pc, #452]	; (8004a7c <HAL_DMA_Start_IT+0x4a4>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d036      	beq.n	8004928 <HAL_DMA_Start_IT+0x350>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a70      	ldr	r2, [pc, #448]	; (8004a80 <HAL_DMA_Start_IT+0x4a8>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d031      	beq.n	8004928 <HAL_DMA_Start_IT+0x350>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a6e      	ldr	r2, [pc, #440]	; (8004a84 <HAL_DMA_Start_IT+0x4ac>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d02c      	beq.n	8004928 <HAL_DMA_Start_IT+0x350>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a6d      	ldr	r2, [pc, #436]	; (8004a88 <HAL_DMA_Start_IT+0x4b0>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d027      	beq.n	8004928 <HAL_DMA_Start_IT+0x350>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a6b      	ldr	r2, [pc, #428]	; (8004a8c <HAL_DMA_Start_IT+0x4b4>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d022      	beq.n	8004928 <HAL_DMA_Start_IT+0x350>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a6a      	ldr	r2, [pc, #424]	; (8004a90 <HAL_DMA_Start_IT+0x4b8>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d01d      	beq.n	8004928 <HAL_DMA_Start_IT+0x350>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a68      	ldr	r2, [pc, #416]	; (8004a94 <HAL_DMA_Start_IT+0x4bc>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d018      	beq.n	8004928 <HAL_DMA_Start_IT+0x350>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a67      	ldr	r2, [pc, #412]	; (8004a98 <HAL_DMA_Start_IT+0x4c0>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d013      	beq.n	8004928 <HAL_DMA_Start_IT+0x350>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a65      	ldr	r2, [pc, #404]	; (8004a9c <HAL_DMA_Start_IT+0x4c4>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d00e      	beq.n	8004928 <HAL_DMA_Start_IT+0x350>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a64      	ldr	r2, [pc, #400]	; (8004aa0 <HAL_DMA_Start_IT+0x4c8>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d009      	beq.n	8004928 <HAL_DMA_Start_IT+0x350>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a62      	ldr	r2, [pc, #392]	; (8004aa4 <HAL_DMA_Start_IT+0x4cc>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d004      	beq.n	8004928 <HAL_DMA_Start_IT+0x350>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a61      	ldr	r2, [pc, #388]	; (8004aa8 <HAL_DMA_Start_IT+0x4d0>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d101      	bne.n	800492c <HAL_DMA_Start_IT+0x354>
 8004928:	2301      	movs	r3, #1
 800492a:	e000      	b.n	800492e <HAL_DMA_Start_IT+0x356>
 800492c:	2300      	movs	r3, #0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d01a      	beq.n	8004968 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d007      	beq.n	8004950 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800494a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800494e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004954:	2b00      	cmp	r3, #0
 8004956:	d007      	beq.n	8004968 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004962:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004966:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a37      	ldr	r2, [pc, #220]	; (8004a4c <HAL_DMA_Start_IT+0x474>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d04a      	beq.n	8004a08 <HAL_DMA_Start_IT+0x430>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a36      	ldr	r2, [pc, #216]	; (8004a50 <HAL_DMA_Start_IT+0x478>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d045      	beq.n	8004a08 <HAL_DMA_Start_IT+0x430>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a34      	ldr	r2, [pc, #208]	; (8004a54 <HAL_DMA_Start_IT+0x47c>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d040      	beq.n	8004a08 <HAL_DMA_Start_IT+0x430>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a33      	ldr	r2, [pc, #204]	; (8004a58 <HAL_DMA_Start_IT+0x480>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d03b      	beq.n	8004a08 <HAL_DMA_Start_IT+0x430>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a31      	ldr	r2, [pc, #196]	; (8004a5c <HAL_DMA_Start_IT+0x484>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d036      	beq.n	8004a08 <HAL_DMA_Start_IT+0x430>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a30      	ldr	r2, [pc, #192]	; (8004a60 <HAL_DMA_Start_IT+0x488>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d031      	beq.n	8004a08 <HAL_DMA_Start_IT+0x430>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a2e      	ldr	r2, [pc, #184]	; (8004a64 <HAL_DMA_Start_IT+0x48c>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d02c      	beq.n	8004a08 <HAL_DMA_Start_IT+0x430>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a2d      	ldr	r2, [pc, #180]	; (8004a68 <HAL_DMA_Start_IT+0x490>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d027      	beq.n	8004a08 <HAL_DMA_Start_IT+0x430>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a2b      	ldr	r2, [pc, #172]	; (8004a6c <HAL_DMA_Start_IT+0x494>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d022      	beq.n	8004a08 <HAL_DMA_Start_IT+0x430>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a2a      	ldr	r2, [pc, #168]	; (8004a70 <HAL_DMA_Start_IT+0x498>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d01d      	beq.n	8004a08 <HAL_DMA_Start_IT+0x430>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a28      	ldr	r2, [pc, #160]	; (8004a74 <HAL_DMA_Start_IT+0x49c>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d018      	beq.n	8004a08 <HAL_DMA_Start_IT+0x430>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a27      	ldr	r2, [pc, #156]	; (8004a78 <HAL_DMA_Start_IT+0x4a0>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d013      	beq.n	8004a08 <HAL_DMA_Start_IT+0x430>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a25      	ldr	r2, [pc, #148]	; (8004a7c <HAL_DMA_Start_IT+0x4a4>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d00e      	beq.n	8004a08 <HAL_DMA_Start_IT+0x430>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a24      	ldr	r2, [pc, #144]	; (8004a80 <HAL_DMA_Start_IT+0x4a8>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d009      	beq.n	8004a08 <HAL_DMA_Start_IT+0x430>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a22      	ldr	r2, [pc, #136]	; (8004a84 <HAL_DMA_Start_IT+0x4ac>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d004      	beq.n	8004a08 <HAL_DMA_Start_IT+0x430>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a21      	ldr	r2, [pc, #132]	; (8004a88 <HAL_DMA_Start_IT+0x4b0>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d108      	bne.n	8004a1a <HAL_DMA_Start_IT+0x442>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f042 0201 	orr.w	r2, r2, #1
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	e012      	b.n	8004a40 <HAL_DMA_Start_IT+0x468>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f042 0201 	orr.w	r2, r2, #1
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	e009      	b.n	8004a40 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a32:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004a40:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3718      	adds	r7, #24
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	40020010 	.word	0x40020010
 8004a50:	40020028 	.word	0x40020028
 8004a54:	40020040 	.word	0x40020040
 8004a58:	40020058 	.word	0x40020058
 8004a5c:	40020070 	.word	0x40020070
 8004a60:	40020088 	.word	0x40020088
 8004a64:	400200a0 	.word	0x400200a0
 8004a68:	400200b8 	.word	0x400200b8
 8004a6c:	40020410 	.word	0x40020410
 8004a70:	40020428 	.word	0x40020428
 8004a74:	40020440 	.word	0x40020440
 8004a78:	40020458 	.word	0x40020458
 8004a7c:	40020470 	.word	0x40020470
 8004a80:	40020488 	.word	0x40020488
 8004a84:	400204a0 	.word	0x400204a0
 8004a88:	400204b8 	.word	0x400204b8
 8004a8c:	58025408 	.word	0x58025408
 8004a90:	5802541c 	.word	0x5802541c
 8004a94:	58025430 	.word	0x58025430
 8004a98:	58025444 	.word	0x58025444
 8004a9c:	58025458 	.word	0x58025458
 8004aa0:	5802546c 	.word	0x5802546c
 8004aa4:	58025480 	.word	0x58025480
 8004aa8:	58025494 	.word	0x58025494

08004aac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e237      	b.n	8004f2e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d004      	beq.n	8004ad4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2280      	movs	r2, #128	; 0x80
 8004ace:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e22c      	b.n	8004f2e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a5c      	ldr	r2, [pc, #368]	; (8004c4c <HAL_DMA_Abort_IT+0x1a0>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d04a      	beq.n	8004b74 <HAL_DMA_Abort_IT+0xc8>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a5b      	ldr	r2, [pc, #364]	; (8004c50 <HAL_DMA_Abort_IT+0x1a4>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d045      	beq.n	8004b74 <HAL_DMA_Abort_IT+0xc8>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a59      	ldr	r2, [pc, #356]	; (8004c54 <HAL_DMA_Abort_IT+0x1a8>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d040      	beq.n	8004b74 <HAL_DMA_Abort_IT+0xc8>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a58      	ldr	r2, [pc, #352]	; (8004c58 <HAL_DMA_Abort_IT+0x1ac>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d03b      	beq.n	8004b74 <HAL_DMA_Abort_IT+0xc8>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a56      	ldr	r2, [pc, #344]	; (8004c5c <HAL_DMA_Abort_IT+0x1b0>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d036      	beq.n	8004b74 <HAL_DMA_Abort_IT+0xc8>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a55      	ldr	r2, [pc, #340]	; (8004c60 <HAL_DMA_Abort_IT+0x1b4>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d031      	beq.n	8004b74 <HAL_DMA_Abort_IT+0xc8>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a53      	ldr	r2, [pc, #332]	; (8004c64 <HAL_DMA_Abort_IT+0x1b8>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d02c      	beq.n	8004b74 <HAL_DMA_Abort_IT+0xc8>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a52      	ldr	r2, [pc, #328]	; (8004c68 <HAL_DMA_Abort_IT+0x1bc>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d027      	beq.n	8004b74 <HAL_DMA_Abort_IT+0xc8>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a50      	ldr	r2, [pc, #320]	; (8004c6c <HAL_DMA_Abort_IT+0x1c0>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d022      	beq.n	8004b74 <HAL_DMA_Abort_IT+0xc8>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a4f      	ldr	r2, [pc, #316]	; (8004c70 <HAL_DMA_Abort_IT+0x1c4>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d01d      	beq.n	8004b74 <HAL_DMA_Abort_IT+0xc8>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a4d      	ldr	r2, [pc, #308]	; (8004c74 <HAL_DMA_Abort_IT+0x1c8>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d018      	beq.n	8004b74 <HAL_DMA_Abort_IT+0xc8>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a4c      	ldr	r2, [pc, #304]	; (8004c78 <HAL_DMA_Abort_IT+0x1cc>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d013      	beq.n	8004b74 <HAL_DMA_Abort_IT+0xc8>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a4a      	ldr	r2, [pc, #296]	; (8004c7c <HAL_DMA_Abort_IT+0x1d0>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d00e      	beq.n	8004b74 <HAL_DMA_Abort_IT+0xc8>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a49      	ldr	r2, [pc, #292]	; (8004c80 <HAL_DMA_Abort_IT+0x1d4>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d009      	beq.n	8004b74 <HAL_DMA_Abort_IT+0xc8>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a47      	ldr	r2, [pc, #284]	; (8004c84 <HAL_DMA_Abort_IT+0x1d8>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d004      	beq.n	8004b74 <HAL_DMA_Abort_IT+0xc8>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a46      	ldr	r2, [pc, #280]	; (8004c88 <HAL_DMA_Abort_IT+0x1dc>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d101      	bne.n	8004b78 <HAL_DMA_Abort_IT+0xcc>
 8004b74:	2301      	movs	r3, #1
 8004b76:	e000      	b.n	8004b7a <HAL_DMA_Abort_IT+0xce>
 8004b78:	2300      	movs	r3, #0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f000 8086 	beq.w	8004c8c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2204      	movs	r2, #4
 8004b84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a2f      	ldr	r2, [pc, #188]	; (8004c4c <HAL_DMA_Abort_IT+0x1a0>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d04a      	beq.n	8004c28 <HAL_DMA_Abort_IT+0x17c>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a2e      	ldr	r2, [pc, #184]	; (8004c50 <HAL_DMA_Abort_IT+0x1a4>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d045      	beq.n	8004c28 <HAL_DMA_Abort_IT+0x17c>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a2c      	ldr	r2, [pc, #176]	; (8004c54 <HAL_DMA_Abort_IT+0x1a8>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d040      	beq.n	8004c28 <HAL_DMA_Abort_IT+0x17c>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a2b      	ldr	r2, [pc, #172]	; (8004c58 <HAL_DMA_Abort_IT+0x1ac>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d03b      	beq.n	8004c28 <HAL_DMA_Abort_IT+0x17c>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a29      	ldr	r2, [pc, #164]	; (8004c5c <HAL_DMA_Abort_IT+0x1b0>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d036      	beq.n	8004c28 <HAL_DMA_Abort_IT+0x17c>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a28      	ldr	r2, [pc, #160]	; (8004c60 <HAL_DMA_Abort_IT+0x1b4>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d031      	beq.n	8004c28 <HAL_DMA_Abort_IT+0x17c>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a26      	ldr	r2, [pc, #152]	; (8004c64 <HAL_DMA_Abort_IT+0x1b8>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d02c      	beq.n	8004c28 <HAL_DMA_Abort_IT+0x17c>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a25      	ldr	r2, [pc, #148]	; (8004c68 <HAL_DMA_Abort_IT+0x1bc>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d027      	beq.n	8004c28 <HAL_DMA_Abort_IT+0x17c>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a23      	ldr	r2, [pc, #140]	; (8004c6c <HAL_DMA_Abort_IT+0x1c0>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d022      	beq.n	8004c28 <HAL_DMA_Abort_IT+0x17c>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a22      	ldr	r2, [pc, #136]	; (8004c70 <HAL_DMA_Abort_IT+0x1c4>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d01d      	beq.n	8004c28 <HAL_DMA_Abort_IT+0x17c>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a20      	ldr	r2, [pc, #128]	; (8004c74 <HAL_DMA_Abort_IT+0x1c8>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d018      	beq.n	8004c28 <HAL_DMA_Abort_IT+0x17c>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a1f      	ldr	r2, [pc, #124]	; (8004c78 <HAL_DMA_Abort_IT+0x1cc>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d013      	beq.n	8004c28 <HAL_DMA_Abort_IT+0x17c>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a1d      	ldr	r2, [pc, #116]	; (8004c7c <HAL_DMA_Abort_IT+0x1d0>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d00e      	beq.n	8004c28 <HAL_DMA_Abort_IT+0x17c>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a1c      	ldr	r2, [pc, #112]	; (8004c80 <HAL_DMA_Abort_IT+0x1d4>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d009      	beq.n	8004c28 <HAL_DMA_Abort_IT+0x17c>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a1a      	ldr	r2, [pc, #104]	; (8004c84 <HAL_DMA_Abort_IT+0x1d8>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d004      	beq.n	8004c28 <HAL_DMA_Abort_IT+0x17c>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a19      	ldr	r2, [pc, #100]	; (8004c88 <HAL_DMA_Abort_IT+0x1dc>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d108      	bne.n	8004c3a <HAL_DMA_Abort_IT+0x18e>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 0201 	bic.w	r2, r2, #1
 8004c36:	601a      	str	r2, [r3, #0]
 8004c38:	e178      	b.n	8004f2c <HAL_DMA_Abort_IT+0x480>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 0201 	bic.w	r2, r2, #1
 8004c48:	601a      	str	r2, [r3, #0]
 8004c4a:	e16f      	b.n	8004f2c <HAL_DMA_Abort_IT+0x480>
 8004c4c:	40020010 	.word	0x40020010
 8004c50:	40020028 	.word	0x40020028
 8004c54:	40020040 	.word	0x40020040
 8004c58:	40020058 	.word	0x40020058
 8004c5c:	40020070 	.word	0x40020070
 8004c60:	40020088 	.word	0x40020088
 8004c64:	400200a0 	.word	0x400200a0
 8004c68:	400200b8 	.word	0x400200b8
 8004c6c:	40020410 	.word	0x40020410
 8004c70:	40020428 	.word	0x40020428
 8004c74:	40020440 	.word	0x40020440
 8004c78:	40020458 	.word	0x40020458
 8004c7c:	40020470 	.word	0x40020470
 8004c80:	40020488 	.word	0x40020488
 8004c84:	400204a0 	.word	0x400204a0
 8004c88:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f022 020e 	bic.w	r2, r2, #14
 8004c9a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a6c      	ldr	r2, [pc, #432]	; (8004e54 <HAL_DMA_Abort_IT+0x3a8>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d04a      	beq.n	8004d3c <HAL_DMA_Abort_IT+0x290>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a6b      	ldr	r2, [pc, #428]	; (8004e58 <HAL_DMA_Abort_IT+0x3ac>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d045      	beq.n	8004d3c <HAL_DMA_Abort_IT+0x290>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a69      	ldr	r2, [pc, #420]	; (8004e5c <HAL_DMA_Abort_IT+0x3b0>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d040      	beq.n	8004d3c <HAL_DMA_Abort_IT+0x290>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a68      	ldr	r2, [pc, #416]	; (8004e60 <HAL_DMA_Abort_IT+0x3b4>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d03b      	beq.n	8004d3c <HAL_DMA_Abort_IT+0x290>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a66      	ldr	r2, [pc, #408]	; (8004e64 <HAL_DMA_Abort_IT+0x3b8>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d036      	beq.n	8004d3c <HAL_DMA_Abort_IT+0x290>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a65      	ldr	r2, [pc, #404]	; (8004e68 <HAL_DMA_Abort_IT+0x3bc>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d031      	beq.n	8004d3c <HAL_DMA_Abort_IT+0x290>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a63      	ldr	r2, [pc, #396]	; (8004e6c <HAL_DMA_Abort_IT+0x3c0>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d02c      	beq.n	8004d3c <HAL_DMA_Abort_IT+0x290>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a62      	ldr	r2, [pc, #392]	; (8004e70 <HAL_DMA_Abort_IT+0x3c4>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d027      	beq.n	8004d3c <HAL_DMA_Abort_IT+0x290>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a60      	ldr	r2, [pc, #384]	; (8004e74 <HAL_DMA_Abort_IT+0x3c8>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d022      	beq.n	8004d3c <HAL_DMA_Abort_IT+0x290>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a5f      	ldr	r2, [pc, #380]	; (8004e78 <HAL_DMA_Abort_IT+0x3cc>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d01d      	beq.n	8004d3c <HAL_DMA_Abort_IT+0x290>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a5d      	ldr	r2, [pc, #372]	; (8004e7c <HAL_DMA_Abort_IT+0x3d0>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d018      	beq.n	8004d3c <HAL_DMA_Abort_IT+0x290>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a5c      	ldr	r2, [pc, #368]	; (8004e80 <HAL_DMA_Abort_IT+0x3d4>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d013      	beq.n	8004d3c <HAL_DMA_Abort_IT+0x290>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a5a      	ldr	r2, [pc, #360]	; (8004e84 <HAL_DMA_Abort_IT+0x3d8>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d00e      	beq.n	8004d3c <HAL_DMA_Abort_IT+0x290>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a59      	ldr	r2, [pc, #356]	; (8004e88 <HAL_DMA_Abort_IT+0x3dc>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d009      	beq.n	8004d3c <HAL_DMA_Abort_IT+0x290>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a57      	ldr	r2, [pc, #348]	; (8004e8c <HAL_DMA_Abort_IT+0x3e0>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d004      	beq.n	8004d3c <HAL_DMA_Abort_IT+0x290>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a56      	ldr	r2, [pc, #344]	; (8004e90 <HAL_DMA_Abort_IT+0x3e4>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d108      	bne.n	8004d4e <HAL_DMA_Abort_IT+0x2a2>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f022 0201 	bic.w	r2, r2, #1
 8004d4a:	601a      	str	r2, [r3, #0]
 8004d4c:	e007      	b.n	8004d5e <HAL_DMA_Abort_IT+0x2b2>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f022 0201 	bic.w	r2, r2, #1
 8004d5c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a3c      	ldr	r2, [pc, #240]	; (8004e54 <HAL_DMA_Abort_IT+0x3a8>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d072      	beq.n	8004e4e <HAL_DMA_Abort_IT+0x3a2>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a3a      	ldr	r2, [pc, #232]	; (8004e58 <HAL_DMA_Abort_IT+0x3ac>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d06d      	beq.n	8004e4e <HAL_DMA_Abort_IT+0x3a2>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a39      	ldr	r2, [pc, #228]	; (8004e5c <HAL_DMA_Abort_IT+0x3b0>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d068      	beq.n	8004e4e <HAL_DMA_Abort_IT+0x3a2>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a37      	ldr	r2, [pc, #220]	; (8004e60 <HAL_DMA_Abort_IT+0x3b4>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d063      	beq.n	8004e4e <HAL_DMA_Abort_IT+0x3a2>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a36      	ldr	r2, [pc, #216]	; (8004e64 <HAL_DMA_Abort_IT+0x3b8>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d05e      	beq.n	8004e4e <HAL_DMA_Abort_IT+0x3a2>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a34      	ldr	r2, [pc, #208]	; (8004e68 <HAL_DMA_Abort_IT+0x3bc>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d059      	beq.n	8004e4e <HAL_DMA_Abort_IT+0x3a2>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a33      	ldr	r2, [pc, #204]	; (8004e6c <HAL_DMA_Abort_IT+0x3c0>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d054      	beq.n	8004e4e <HAL_DMA_Abort_IT+0x3a2>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a31      	ldr	r2, [pc, #196]	; (8004e70 <HAL_DMA_Abort_IT+0x3c4>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d04f      	beq.n	8004e4e <HAL_DMA_Abort_IT+0x3a2>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a30      	ldr	r2, [pc, #192]	; (8004e74 <HAL_DMA_Abort_IT+0x3c8>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d04a      	beq.n	8004e4e <HAL_DMA_Abort_IT+0x3a2>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a2e      	ldr	r2, [pc, #184]	; (8004e78 <HAL_DMA_Abort_IT+0x3cc>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d045      	beq.n	8004e4e <HAL_DMA_Abort_IT+0x3a2>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a2d      	ldr	r2, [pc, #180]	; (8004e7c <HAL_DMA_Abort_IT+0x3d0>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d040      	beq.n	8004e4e <HAL_DMA_Abort_IT+0x3a2>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a2b      	ldr	r2, [pc, #172]	; (8004e80 <HAL_DMA_Abort_IT+0x3d4>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d03b      	beq.n	8004e4e <HAL_DMA_Abort_IT+0x3a2>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a2a      	ldr	r2, [pc, #168]	; (8004e84 <HAL_DMA_Abort_IT+0x3d8>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d036      	beq.n	8004e4e <HAL_DMA_Abort_IT+0x3a2>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a28      	ldr	r2, [pc, #160]	; (8004e88 <HAL_DMA_Abort_IT+0x3dc>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d031      	beq.n	8004e4e <HAL_DMA_Abort_IT+0x3a2>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a27      	ldr	r2, [pc, #156]	; (8004e8c <HAL_DMA_Abort_IT+0x3e0>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d02c      	beq.n	8004e4e <HAL_DMA_Abort_IT+0x3a2>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a25      	ldr	r2, [pc, #148]	; (8004e90 <HAL_DMA_Abort_IT+0x3e4>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d027      	beq.n	8004e4e <HAL_DMA_Abort_IT+0x3a2>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a24      	ldr	r2, [pc, #144]	; (8004e94 <HAL_DMA_Abort_IT+0x3e8>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d022      	beq.n	8004e4e <HAL_DMA_Abort_IT+0x3a2>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a22      	ldr	r2, [pc, #136]	; (8004e98 <HAL_DMA_Abort_IT+0x3ec>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d01d      	beq.n	8004e4e <HAL_DMA_Abort_IT+0x3a2>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a21      	ldr	r2, [pc, #132]	; (8004e9c <HAL_DMA_Abort_IT+0x3f0>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d018      	beq.n	8004e4e <HAL_DMA_Abort_IT+0x3a2>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a1f      	ldr	r2, [pc, #124]	; (8004ea0 <HAL_DMA_Abort_IT+0x3f4>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d013      	beq.n	8004e4e <HAL_DMA_Abort_IT+0x3a2>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a1e      	ldr	r2, [pc, #120]	; (8004ea4 <HAL_DMA_Abort_IT+0x3f8>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d00e      	beq.n	8004e4e <HAL_DMA_Abort_IT+0x3a2>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a1c      	ldr	r2, [pc, #112]	; (8004ea8 <HAL_DMA_Abort_IT+0x3fc>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d009      	beq.n	8004e4e <HAL_DMA_Abort_IT+0x3a2>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a1b      	ldr	r2, [pc, #108]	; (8004eac <HAL_DMA_Abort_IT+0x400>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d004      	beq.n	8004e4e <HAL_DMA_Abort_IT+0x3a2>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a19      	ldr	r2, [pc, #100]	; (8004eb0 <HAL_DMA_Abort_IT+0x404>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d132      	bne.n	8004eb4 <HAL_DMA_Abort_IT+0x408>
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e031      	b.n	8004eb6 <HAL_DMA_Abort_IT+0x40a>
 8004e52:	bf00      	nop
 8004e54:	40020010 	.word	0x40020010
 8004e58:	40020028 	.word	0x40020028
 8004e5c:	40020040 	.word	0x40020040
 8004e60:	40020058 	.word	0x40020058
 8004e64:	40020070 	.word	0x40020070
 8004e68:	40020088 	.word	0x40020088
 8004e6c:	400200a0 	.word	0x400200a0
 8004e70:	400200b8 	.word	0x400200b8
 8004e74:	40020410 	.word	0x40020410
 8004e78:	40020428 	.word	0x40020428
 8004e7c:	40020440 	.word	0x40020440
 8004e80:	40020458 	.word	0x40020458
 8004e84:	40020470 	.word	0x40020470
 8004e88:	40020488 	.word	0x40020488
 8004e8c:	400204a0 	.word	0x400204a0
 8004e90:	400204b8 	.word	0x400204b8
 8004e94:	58025408 	.word	0x58025408
 8004e98:	5802541c 	.word	0x5802541c
 8004e9c:	58025430 	.word	0x58025430
 8004ea0:	58025444 	.word	0x58025444
 8004ea4:	58025458 	.word	0x58025458
 8004ea8:	5802546c 	.word	0x5802546c
 8004eac:	58025480 	.word	0x58025480
 8004eb0:	58025494 	.word	0x58025494
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d028      	beq.n	8004f0c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ec4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ec8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ece:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ed4:	f003 031f 	and.w	r3, r3, #31
 8004ed8:	2201      	movs	r2, #1
 8004eda:	409a      	lsls	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004ee8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00c      	beq.n	8004f0c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004efc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f00:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004f0a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d003      	beq.n	8004f2c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop

08004f38 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b08a      	sub	sp, #40	; 0x28
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004f40:	2300      	movs	r3, #0
 8004f42:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004f44:	4b67      	ldr	r3, [pc, #412]	; (80050e4 <HAL_DMA_IRQHandler+0x1ac>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a67      	ldr	r2, [pc, #412]	; (80050e8 <HAL_DMA_IRQHandler+0x1b0>)
 8004f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f4e:	0a9b      	lsrs	r3, r3, #10
 8004f50:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f56:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f5c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004f5e:	6a3b      	ldr	r3, [r7, #32]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a5f      	ldr	r2, [pc, #380]	; (80050ec <HAL_DMA_IRQHandler+0x1b4>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d04a      	beq.n	800500a <HAL_DMA_IRQHandler+0xd2>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a5d      	ldr	r2, [pc, #372]	; (80050f0 <HAL_DMA_IRQHandler+0x1b8>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d045      	beq.n	800500a <HAL_DMA_IRQHandler+0xd2>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a5c      	ldr	r2, [pc, #368]	; (80050f4 <HAL_DMA_IRQHandler+0x1bc>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d040      	beq.n	800500a <HAL_DMA_IRQHandler+0xd2>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a5a      	ldr	r2, [pc, #360]	; (80050f8 <HAL_DMA_IRQHandler+0x1c0>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d03b      	beq.n	800500a <HAL_DMA_IRQHandler+0xd2>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a59      	ldr	r2, [pc, #356]	; (80050fc <HAL_DMA_IRQHandler+0x1c4>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d036      	beq.n	800500a <HAL_DMA_IRQHandler+0xd2>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a57      	ldr	r2, [pc, #348]	; (8005100 <HAL_DMA_IRQHandler+0x1c8>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d031      	beq.n	800500a <HAL_DMA_IRQHandler+0xd2>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a56      	ldr	r2, [pc, #344]	; (8005104 <HAL_DMA_IRQHandler+0x1cc>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d02c      	beq.n	800500a <HAL_DMA_IRQHandler+0xd2>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a54      	ldr	r2, [pc, #336]	; (8005108 <HAL_DMA_IRQHandler+0x1d0>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d027      	beq.n	800500a <HAL_DMA_IRQHandler+0xd2>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a53      	ldr	r2, [pc, #332]	; (800510c <HAL_DMA_IRQHandler+0x1d4>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d022      	beq.n	800500a <HAL_DMA_IRQHandler+0xd2>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a51      	ldr	r2, [pc, #324]	; (8005110 <HAL_DMA_IRQHandler+0x1d8>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d01d      	beq.n	800500a <HAL_DMA_IRQHandler+0xd2>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a50      	ldr	r2, [pc, #320]	; (8005114 <HAL_DMA_IRQHandler+0x1dc>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d018      	beq.n	800500a <HAL_DMA_IRQHandler+0xd2>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a4e      	ldr	r2, [pc, #312]	; (8005118 <HAL_DMA_IRQHandler+0x1e0>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d013      	beq.n	800500a <HAL_DMA_IRQHandler+0xd2>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a4d      	ldr	r2, [pc, #308]	; (800511c <HAL_DMA_IRQHandler+0x1e4>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d00e      	beq.n	800500a <HAL_DMA_IRQHandler+0xd2>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a4b      	ldr	r2, [pc, #300]	; (8005120 <HAL_DMA_IRQHandler+0x1e8>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d009      	beq.n	800500a <HAL_DMA_IRQHandler+0xd2>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a4a      	ldr	r2, [pc, #296]	; (8005124 <HAL_DMA_IRQHandler+0x1ec>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d004      	beq.n	800500a <HAL_DMA_IRQHandler+0xd2>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a48      	ldr	r2, [pc, #288]	; (8005128 <HAL_DMA_IRQHandler+0x1f0>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d101      	bne.n	800500e <HAL_DMA_IRQHandler+0xd6>
 800500a:	2301      	movs	r3, #1
 800500c:	e000      	b.n	8005010 <HAL_DMA_IRQHandler+0xd8>
 800500e:	2300      	movs	r3, #0
 8005010:	2b00      	cmp	r3, #0
 8005012:	f000 842b 	beq.w	800586c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800501a:	f003 031f 	and.w	r3, r3, #31
 800501e:	2208      	movs	r2, #8
 8005020:	409a      	lsls	r2, r3
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	4013      	ands	r3, r2
 8005026:	2b00      	cmp	r3, #0
 8005028:	f000 80a2 	beq.w	8005170 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a2e      	ldr	r2, [pc, #184]	; (80050ec <HAL_DMA_IRQHandler+0x1b4>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d04a      	beq.n	80050cc <HAL_DMA_IRQHandler+0x194>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a2d      	ldr	r2, [pc, #180]	; (80050f0 <HAL_DMA_IRQHandler+0x1b8>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d045      	beq.n	80050cc <HAL_DMA_IRQHandler+0x194>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a2b      	ldr	r2, [pc, #172]	; (80050f4 <HAL_DMA_IRQHandler+0x1bc>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d040      	beq.n	80050cc <HAL_DMA_IRQHandler+0x194>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a2a      	ldr	r2, [pc, #168]	; (80050f8 <HAL_DMA_IRQHandler+0x1c0>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d03b      	beq.n	80050cc <HAL_DMA_IRQHandler+0x194>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a28      	ldr	r2, [pc, #160]	; (80050fc <HAL_DMA_IRQHandler+0x1c4>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d036      	beq.n	80050cc <HAL_DMA_IRQHandler+0x194>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a27      	ldr	r2, [pc, #156]	; (8005100 <HAL_DMA_IRQHandler+0x1c8>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d031      	beq.n	80050cc <HAL_DMA_IRQHandler+0x194>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a25      	ldr	r2, [pc, #148]	; (8005104 <HAL_DMA_IRQHandler+0x1cc>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d02c      	beq.n	80050cc <HAL_DMA_IRQHandler+0x194>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a24      	ldr	r2, [pc, #144]	; (8005108 <HAL_DMA_IRQHandler+0x1d0>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d027      	beq.n	80050cc <HAL_DMA_IRQHandler+0x194>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a22      	ldr	r2, [pc, #136]	; (800510c <HAL_DMA_IRQHandler+0x1d4>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d022      	beq.n	80050cc <HAL_DMA_IRQHandler+0x194>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a21      	ldr	r2, [pc, #132]	; (8005110 <HAL_DMA_IRQHandler+0x1d8>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d01d      	beq.n	80050cc <HAL_DMA_IRQHandler+0x194>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a1f      	ldr	r2, [pc, #124]	; (8005114 <HAL_DMA_IRQHandler+0x1dc>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d018      	beq.n	80050cc <HAL_DMA_IRQHandler+0x194>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a1e      	ldr	r2, [pc, #120]	; (8005118 <HAL_DMA_IRQHandler+0x1e0>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d013      	beq.n	80050cc <HAL_DMA_IRQHandler+0x194>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a1c      	ldr	r2, [pc, #112]	; (800511c <HAL_DMA_IRQHandler+0x1e4>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d00e      	beq.n	80050cc <HAL_DMA_IRQHandler+0x194>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a1b      	ldr	r2, [pc, #108]	; (8005120 <HAL_DMA_IRQHandler+0x1e8>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d009      	beq.n	80050cc <HAL_DMA_IRQHandler+0x194>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a19      	ldr	r2, [pc, #100]	; (8005124 <HAL_DMA_IRQHandler+0x1ec>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d004      	beq.n	80050cc <HAL_DMA_IRQHandler+0x194>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a18      	ldr	r2, [pc, #96]	; (8005128 <HAL_DMA_IRQHandler+0x1f0>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d12f      	bne.n	800512c <HAL_DMA_IRQHandler+0x1f4>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0304 	and.w	r3, r3, #4
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	bf14      	ite	ne
 80050da:	2301      	movne	r3, #1
 80050dc:	2300      	moveq	r3, #0
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	e02e      	b.n	8005140 <HAL_DMA_IRQHandler+0x208>
 80050e2:	bf00      	nop
 80050e4:	24000090 	.word	0x24000090
 80050e8:	1b4e81b5 	.word	0x1b4e81b5
 80050ec:	40020010 	.word	0x40020010
 80050f0:	40020028 	.word	0x40020028
 80050f4:	40020040 	.word	0x40020040
 80050f8:	40020058 	.word	0x40020058
 80050fc:	40020070 	.word	0x40020070
 8005100:	40020088 	.word	0x40020088
 8005104:	400200a0 	.word	0x400200a0
 8005108:	400200b8 	.word	0x400200b8
 800510c:	40020410 	.word	0x40020410
 8005110:	40020428 	.word	0x40020428
 8005114:	40020440 	.word	0x40020440
 8005118:	40020458 	.word	0x40020458
 800511c:	40020470 	.word	0x40020470
 8005120:	40020488 	.word	0x40020488
 8005124:	400204a0 	.word	0x400204a0
 8005128:	400204b8 	.word	0x400204b8
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0308 	and.w	r3, r3, #8
 8005136:	2b00      	cmp	r3, #0
 8005138:	bf14      	ite	ne
 800513a:	2301      	movne	r3, #1
 800513c:	2300      	moveq	r3, #0
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b00      	cmp	r3, #0
 8005142:	d015      	beq.n	8005170 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f022 0204 	bic.w	r2, r2, #4
 8005152:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005158:	f003 031f 	and.w	r3, r3, #31
 800515c:	2208      	movs	r2, #8
 800515e:	409a      	lsls	r2, r3
 8005160:	6a3b      	ldr	r3, [r7, #32]
 8005162:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005168:	f043 0201 	orr.w	r2, r3, #1
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005174:	f003 031f 	and.w	r3, r3, #31
 8005178:	69ba      	ldr	r2, [r7, #24]
 800517a:	fa22 f303 	lsr.w	r3, r2, r3
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	2b00      	cmp	r3, #0
 8005184:	d06e      	beq.n	8005264 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a69      	ldr	r2, [pc, #420]	; (8005330 <HAL_DMA_IRQHandler+0x3f8>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d04a      	beq.n	8005226 <HAL_DMA_IRQHandler+0x2ee>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a67      	ldr	r2, [pc, #412]	; (8005334 <HAL_DMA_IRQHandler+0x3fc>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d045      	beq.n	8005226 <HAL_DMA_IRQHandler+0x2ee>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a66      	ldr	r2, [pc, #408]	; (8005338 <HAL_DMA_IRQHandler+0x400>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d040      	beq.n	8005226 <HAL_DMA_IRQHandler+0x2ee>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a64      	ldr	r2, [pc, #400]	; (800533c <HAL_DMA_IRQHandler+0x404>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d03b      	beq.n	8005226 <HAL_DMA_IRQHandler+0x2ee>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a63      	ldr	r2, [pc, #396]	; (8005340 <HAL_DMA_IRQHandler+0x408>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d036      	beq.n	8005226 <HAL_DMA_IRQHandler+0x2ee>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a61      	ldr	r2, [pc, #388]	; (8005344 <HAL_DMA_IRQHandler+0x40c>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d031      	beq.n	8005226 <HAL_DMA_IRQHandler+0x2ee>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a60      	ldr	r2, [pc, #384]	; (8005348 <HAL_DMA_IRQHandler+0x410>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d02c      	beq.n	8005226 <HAL_DMA_IRQHandler+0x2ee>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a5e      	ldr	r2, [pc, #376]	; (800534c <HAL_DMA_IRQHandler+0x414>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d027      	beq.n	8005226 <HAL_DMA_IRQHandler+0x2ee>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a5d      	ldr	r2, [pc, #372]	; (8005350 <HAL_DMA_IRQHandler+0x418>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d022      	beq.n	8005226 <HAL_DMA_IRQHandler+0x2ee>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a5b      	ldr	r2, [pc, #364]	; (8005354 <HAL_DMA_IRQHandler+0x41c>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d01d      	beq.n	8005226 <HAL_DMA_IRQHandler+0x2ee>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a5a      	ldr	r2, [pc, #360]	; (8005358 <HAL_DMA_IRQHandler+0x420>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d018      	beq.n	8005226 <HAL_DMA_IRQHandler+0x2ee>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a58      	ldr	r2, [pc, #352]	; (800535c <HAL_DMA_IRQHandler+0x424>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d013      	beq.n	8005226 <HAL_DMA_IRQHandler+0x2ee>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a57      	ldr	r2, [pc, #348]	; (8005360 <HAL_DMA_IRQHandler+0x428>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d00e      	beq.n	8005226 <HAL_DMA_IRQHandler+0x2ee>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a55      	ldr	r2, [pc, #340]	; (8005364 <HAL_DMA_IRQHandler+0x42c>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d009      	beq.n	8005226 <HAL_DMA_IRQHandler+0x2ee>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a54      	ldr	r2, [pc, #336]	; (8005368 <HAL_DMA_IRQHandler+0x430>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d004      	beq.n	8005226 <HAL_DMA_IRQHandler+0x2ee>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a52      	ldr	r2, [pc, #328]	; (800536c <HAL_DMA_IRQHandler+0x434>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d10a      	bne.n	800523c <HAL_DMA_IRQHandler+0x304>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005230:	2b00      	cmp	r3, #0
 8005232:	bf14      	ite	ne
 8005234:	2301      	movne	r3, #1
 8005236:	2300      	moveq	r3, #0
 8005238:	b2db      	uxtb	r3, r3
 800523a:	e003      	b.n	8005244 <HAL_DMA_IRQHandler+0x30c>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2300      	movs	r3, #0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00d      	beq.n	8005264 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800524c:	f003 031f 	and.w	r3, r3, #31
 8005250:	2201      	movs	r2, #1
 8005252:	409a      	lsls	r2, r3
 8005254:	6a3b      	ldr	r3, [r7, #32]
 8005256:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800525c:	f043 0202 	orr.w	r2, r3, #2
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005268:	f003 031f 	and.w	r3, r3, #31
 800526c:	2204      	movs	r2, #4
 800526e:	409a      	lsls	r2, r3
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	4013      	ands	r3, r2
 8005274:	2b00      	cmp	r3, #0
 8005276:	f000 808f 	beq.w	8005398 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a2c      	ldr	r2, [pc, #176]	; (8005330 <HAL_DMA_IRQHandler+0x3f8>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d04a      	beq.n	800531a <HAL_DMA_IRQHandler+0x3e2>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a2a      	ldr	r2, [pc, #168]	; (8005334 <HAL_DMA_IRQHandler+0x3fc>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d045      	beq.n	800531a <HAL_DMA_IRQHandler+0x3e2>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a29      	ldr	r2, [pc, #164]	; (8005338 <HAL_DMA_IRQHandler+0x400>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d040      	beq.n	800531a <HAL_DMA_IRQHandler+0x3e2>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a27      	ldr	r2, [pc, #156]	; (800533c <HAL_DMA_IRQHandler+0x404>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d03b      	beq.n	800531a <HAL_DMA_IRQHandler+0x3e2>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a26      	ldr	r2, [pc, #152]	; (8005340 <HAL_DMA_IRQHandler+0x408>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d036      	beq.n	800531a <HAL_DMA_IRQHandler+0x3e2>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a24      	ldr	r2, [pc, #144]	; (8005344 <HAL_DMA_IRQHandler+0x40c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d031      	beq.n	800531a <HAL_DMA_IRQHandler+0x3e2>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a23      	ldr	r2, [pc, #140]	; (8005348 <HAL_DMA_IRQHandler+0x410>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d02c      	beq.n	800531a <HAL_DMA_IRQHandler+0x3e2>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a21      	ldr	r2, [pc, #132]	; (800534c <HAL_DMA_IRQHandler+0x414>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d027      	beq.n	800531a <HAL_DMA_IRQHandler+0x3e2>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a20      	ldr	r2, [pc, #128]	; (8005350 <HAL_DMA_IRQHandler+0x418>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d022      	beq.n	800531a <HAL_DMA_IRQHandler+0x3e2>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a1e      	ldr	r2, [pc, #120]	; (8005354 <HAL_DMA_IRQHandler+0x41c>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d01d      	beq.n	800531a <HAL_DMA_IRQHandler+0x3e2>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a1d      	ldr	r2, [pc, #116]	; (8005358 <HAL_DMA_IRQHandler+0x420>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d018      	beq.n	800531a <HAL_DMA_IRQHandler+0x3e2>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a1b      	ldr	r2, [pc, #108]	; (800535c <HAL_DMA_IRQHandler+0x424>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d013      	beq.n	800531a <HAL_DMA_IRQHandler+0x3e2>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a1a      	ldr	r2, [pc, #104]	; (8005360 <HAL_DMA_IRQHandler+0x428>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d00e      	beq.n	800531a <HAL_DMA_IRQHandler+0x3e2>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a18      	ldr	r2, [pc, #96]	; (8005364 <HAL_DMA_IRQHandler+0x42c>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d009      	beq.n	800531a <HAL_DMA_IRQHandler+0x3e2>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a17      	ldr	r2, [pc, #92]	; (8005368 <HAL_DMA_IRQHandler+0x430>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d004      	beq.n	800531a <HAL_DMA_IRQHandler+0x3e2>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a15      	ldr	r2, [pc, #84]	; (800536c <HAL_DMA_IRQHandler+0x434>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d12a      	bne.n	8005370 <HAL_DMA_IRQHandler+0x438>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0302 	and.w	r3, r3, #2
 8005324:	2b00      	cmp	r3, #0
 8005326:	bf14      	ite	ne
 8005328:	2301      	movne	r3, #1
 800532a:	2300      	moveq	r3, #0
 800532c:	b2db      	uxtb	r3, r3
 800532e:	e023      	b.n	8005378 <HAL_DMA_IRQHandler+0x440>
 8005330:	40020010 	.word	0x40020010
 8005334:	40020028 	.word	0x40020028
 8005338:	40020040 	.word	0x40020040
 800533c:	40020058 	.word	0x40020058
 8005340:	40020070 	.word	0x40020070
 8005344:	40020088 	.word	0x40020088
 8005348:	400200a0 	.word	0x400200a0
 800534c:	400200b8 	.word	0x400200b8
 8005350:	40020410 	.word	0x40020410
 8005354:	40020428 	.word	0x40020428
 8005358:	40020440 	.word	0x40020440
 800535c:	40020458 	.word	0x40020458
 8005360:	40020470 	.word	0x40020470
 8005364:	40020488 	.word	0x40020488
 8005368:	400204a0 	.word	0x400204a0
 800536c:	400204b8 	.word	0x400204b8
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2300      	movs	r3, #0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00d      	beq.n	8005398 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005380:	f003 031f 	and.w	r3, r3, #31
 8005384:	2204      	movs	r2, #4
 8005386:	409a      	lsls	r2, r3
 8005388:	6a3b      	ldr	r3, [r7, #32]
 800538a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005390:	f043 0204 	orr.w	r2, r3, #4
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800539c:	f003 031f 	and.w	r3, r3, #31
 80053a0:	2210      	movs	r2, #16
 80053a2:	409a      	lsls	r2, r3
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	4013      	ands	r3, r2
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 80a6 	beq.w	80054fa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a85      	ldr	r2, [pc, #532]	; (80055c8 <HAL_DMA_IRQHandler+0x690>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d04a      	beq.n	800544e <HAL_DMA_IRQHandler+0x516>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a83      	ldr	r2, [pc, #524]	; (80055cc <HAL_DMA_IRQHandler+0x694>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d045      	beq.n	800544e <HAL_DMA_IRQHandler+0x516>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a82      	ldr	r2, [pc, #520]	; (80055d0 <HAL_DMA_IRQHandler+0x698>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d040      	beq.n	800544e <HAL_DMA_IRQHandler+0x516>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a80      	ldr	r2, [pc, #512]	; (80055d4 <HAL_DMA_IRQHandler+0x69c>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d03b      	beq.n	800544e <HAL_DMA_IRQHandler+0x516>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a7f      	ldr	r2, [pc, #508]	; (80055d8 <HAL_DMA_IRQHandler+0x6a0>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d036      	beq.n	800544e <HAL_DMA_IRQHandler+0x516>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a7d      	ldr	r2, [pc, #500]	; (80055dc <HAL_DMA_IRQHandler+0x6a4>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d031      	beq.n	800544e <HAL_DMA_IRQHandler+0x516>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a7c      	ldr	r2, [pc, #496]	; (80055e0 <HAL_DMA_IRQHandler+0x6a8>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d02c      	beq.n	800544e <HAL_DMA_IRQHandler+0x516>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a7a      	ldr	r2, [pc, #488]	; (80055e4 <HAL_DMA_IRQHandler+0x6ac>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d027      	beq.n	800544e <HAL_DMA_IRQHandler+0x516>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a79      	ldr	r2, [pc, #484]	; (80055e8 <HAL_DMA_IRQHandler+0x6b0>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d022      	beq.n	800544e <HAL_DMA_IRQHandler+0x516>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a77      	ldr	r2, [pc, #476]	; (80055ec <HAL_DMA_IRQHandler+0x6b4>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d01d      	beq.n	800544e <HAL_DMA_IRQHandler+0x516>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a76      	ldr	r2, [pc, #472]	; (80055f0 <HAL_DMA_IRQHandler+0x6b8>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d018      	beq.n	800544e <HAL_DMA_IRQHandler+0x516>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a74      	ldr	r2, [pc, #464]	; (80055f4 <HAL_DMA_IRQHandler+0x6bc>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d013      	beq.n	800544e <HAL_DMA_IRQHandler+0x516>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a73      	ldr	r2, [pc, #460]	; (80055f8 <HAL_DMA_IRQHandler+0x6c0>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d00e      	beq.n	800544e <HAL_DMA_IRQHandler+0x516>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a71      	ldr	r2, [pc, #452]	; (80055fc <HAL_DMA_IRQHandler+0x6c4>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d009      	beq.n	800544e <HAL_DMA_IRQHandler+0x516>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a70      	ldr	r2, [pc, #448]	; (8005600 <HAL_DMA_IRQHandler+0x6c8>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d004      	beq.n	800544e <HAL_DMA_IRQHandler+0x516>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a6e      	ldr	r2, [pc, #440]	; (8005604 <HAL_DMA_IRQHandler+0x6cc>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d10a      	bne.n	8005464 <HAL_DMA_IRQHandler+0x52c>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0308 	and.w	r3, r3, #8
 8005458:	2b00      	cmp	r3, #0
 800545a:	bf14      	ite	ne
 800545c:	2301      	movne	r3, #1
 800545e:	2300      	moveq	r3, #0
 8005460:	b2db      	uxtb	r3, r3
 8005462:	e009      	b.n	8005478 <HAL_DMA_IRQHandler+0x540>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0304 	and.w	r3, r3, #4
 800546e:	2b00      	cmp	r3, #0
 8005470:	bf14      	ite	ne
 8005472:	2301      	movne	r3, #1
 8005474:	2300      	moveq	r3, #0
 8005476:	b2db      	uxtb	r3, r3
 8005478:	2b00      	cmp	r3, #0
 800547a:	d03e      	beq.n	80054fa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005480:	f003 031f 	and.w	r3, r3, #31
 8005484:	2210      	movs	r2, #16
 8005486:	409a      	lsls	r2, r3
 8005488:	6a3b      	ldr	r3, [r7, #32]
 800548a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d018      	beq.n	80054cc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d108      	bne.n	80054ba <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d024      	beq.n	80054fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	4798      	blx	r3
 80054b8:	e01f      	b.n	80054fa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d01b      	beq.n	80054fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	4798      	blx	r3
 80054ca:	e016      	b.n	80054fa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d107      	bne.n	80054ea <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f022 0208 	bic.w	r2, r2, #8
 80054e8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d003      	beq.n	80054fa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054fe:	f003 031f 	and.w	r3, r3, #31
 8005502:	2220      	movs	r2, #32
 8005504:	409a      	lsls	r2, r3
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	4013      	ands	r3, r2
 800550a:	2b00      	cmp	r3, #0
 800550c:	f000 8110 	beq.w	8005730 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a2c      	ldr	r2, [pc, #176]	; (80055c8 <HAL_DMA_IRQHandler+0x690>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d04a      	beq.n	80055b0 <HAL_DMA_IRQHandler+0x678>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a2b      	ldr	r2, [pc, #172]	; (80055cc <HAL_DMA_IRQHandler+0x694>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d045      	beq.n	80055b0 <HAL_DMA_IRQHandler+0x678>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a29      	ldr	r2, [pc, #164]	; (80055d0 <HAL_DMA_IRQHandler+0x698>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d040      	beq.n	80055b0 <HAL_DMA_IRQHandler+0x678>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a28      	ldr	r2, [pc, #160]	; (80055d4 <HAL_DMA_IRQHandler+0x69c>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d03b      	beq.n	80055b0 <HAL_DMA_IRQHandler+0x678>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a26      	ldr	r2, [pc, #152]	; (80055d8 <HAL_DMA_IRQHandler+0x6a0>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d036      	beq.n	80055b0 <HAL_DMA_IRQHandler+0x678>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a25      	ldr	r2, [pc, #148]	; (80055dc <HAL_DMA_IRQHandler+0x6a4>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d031      	beq.n	80055b0 <HAL_DMA_IRQHandler+0x678>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a23      	ldr	r2, [pc, #140]	; (80055e0 <HAL_DMA_IRQHandler+0x6a8>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d02c      	beq.n	80055b0 <HAL_DMA_IRQHandler+0x678>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a22      	ldr	r2, [pc, #136]	; (80055e4 <HAL_DMA_IRQHandler+0x6ac>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d027      	beq.n	80055b0 <HAL_DMA_IRQHandler+0x678>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a20      	ldr	r2, [pc, #128]	; (80055e8 <HAL_DMA_IRQHandler+0x6b0>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d022      	beq.n	80055b0 <HAL_DMA_IRQHandler+0x678>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a1f      	ldr	r2, [pc, #124]	; (80055ec <HAL_DMA_IRQHandler+0x6b4>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d01d      	beq.n	80055b0 <HAL_DMA_IRQHandler+0x678>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a1d      	ldr	r2, [pc, #116]	; (80055f0 <HAL_DMA_IRQHandler+0x6b8>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d018      	beq.n	80055b0 <HAL_DMA_IRQHandler+0x678>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a1c      	ldr	r2, [pc, #112]	; (80055f4 <HAL_DMA_IRQHandler+0x6bc>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d013      	beq.n	80055b0 <HAL_DMA_IRQHandler+0x678>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a1a      	ldr	r2, [pc, #104]	; (80055f8 <HAL_DMA_IRQHandler+0x6c0>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d00e      	beq.n	80055b0 <HAL_DMA_IRQHandler+0x678>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a19      	ldr	r2, [pc, #100]	; (80055fc <HAL_DMA_IRQHandler+0x6c4>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d009      	beq.n	80055b0 <HAL_DMA_IRQHandler+0x678>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a17      	ldr	r2, [pc, #92]	; (8005600 <HAL_DMA_IRQHandler+0x6c8>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d004      	beq.n	80055b0 <HAL_DMA_IRQHandler+0x678>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a16      	ldr	r2, [pc, #88]	; (8005604 <HAL_DMA_IRQHandler+0x6cc>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d12b      	bne.n	8005608 <HAL_DMA_IRQHandler+0x6d0>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0310 	and.w	r3, r3, #16
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	bf14      	ite	ne
 80055be:	2301      	movne	r3, #1
 80055c0:	2300      	moveq	r3, #0
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	e02a      	b.n	800561c <HAL_DMA_IRQHandler+0x6e4>
 80055c6:	bf00      	nop
 80055c8:	40020010 	.word	0x40020010
 80055cc:	40020028 	.word	0x40020028
 80055d0:	40020040 	.word	0x40020040
 80055d4:	40020058 	.word	0x40020058
 80055d8:	40020070 	.word	0x40020070
 80055dc:	40020088 	.word	0x40020088
 80055e0:	400200a0 	.word	0x400200a0
 80055e4:	400200b8 	.word	0x400200b8
 80055e8:	40020410 	.word	0x40020410
 80055ec:	40020428 	.word	0x40020428
 80055f0:	40020440 	.word	0x40020440
 80055f4:	40020458 	.word	0x40020458
 80055f8:	40020470 	.word	0x40020470
 80055fc:	40020488 	.word	0x40020488
 8005600:	400204a0 	.word	0x400204a0
 8005604:	400204b8 	.word	0x400204b8
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0302 	and.w	r3, r3, #2
 8005612:	2b00      	cmp	r3, #0
 8005614:	bf14      	ite	ne
 8005616:	2301      	movne	r3, #1
 8005618:	2300      	moveq	r3, #0
 800561a:	b2db      	uxtb	r3, r3
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 8087 	beq.w	8005730 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005626:	f003 031f 	and.w	r3, r3, #31
 800562a:	2220      	movs	r2, #32
 800562c:	409a      	lsls	r2, r3
 800562e:	6a3b      	ldr	r3, [r7, #32]
 8005630:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b04      	cmp	r3, #4
 800563c:	d139      	bne.n	80056b2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f022 0216 	bic.w	r2, r2, #22
 800564c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	695a      	ldr	r2, [r3, #20]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800565c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005662:	2b00      	cmp	r3, #0
 8005664:	d103      	bne.n	800566e <HAL_DMA_IRQHandler+0x736>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800566a:	2b00      	cmp	r3, #0
 800566c:	d007      	beq.n	800567e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f022 0208 	bic.w	r2, r2, #8
 800567c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005682:	f003 031f 	and.w	r3, r3, #31
 8005686:	223f      	movs	r2, #63	; 0x3f
 8005688:	409a      	lsls	r2, r3
 800568a:	6a3b      	ldr	r3, [r7, #32]
 800568c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	f000 834a 	beq.w	8005d3c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	4798      	blx	r3
          }
          return;
 80056b0:	e344      	b.n	8005d3c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d018      	beq.n	80056f2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d108      	bne.n	80056e0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d02c      	beq.n	8005730 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	4798      	blx	r3
 80056de:	e027      	b.n	8005730 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d023      	beq.n	8005730 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	4798      	blx	r3
 80056f0:	e01e      	b.n	8005730 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d10f      	bne.n	8005720 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f022 0210 	bic.w	r2, r2, #16
 800570e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005724:	2b00      	cmp	r3, #0
 8005726:	d003      	beq.n	8005730 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005734:	2b00      	cmp	r3, #0
 8005736:	f000 8306 	beq.w	8005d46 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b00      	cmp	r3, #0
 8005744:	f000 8088 	beq.w	8005858 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2204      	movs	r2, #4
 800574c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a7a      	ldr	r2, [pc, #488]	; (8005940 <HAL_DMA_IRQHandler+0xa08>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d04a      	beq.n	80057f0 <HAL_DMA_IRQHandler+0x8b8>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a79      	ldr	r2, [pc, #484]	; (8005944 <HAL_DMA_IRQHandler+0xa0c>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d045      	beq.n	80057f0 <HAL_DMA_IRQHandler+0x8b8>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a77      	ldr	r2, [pc, #476]	; (8005948 <HAL_DMA_IRQHandler+0xa10>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d040      	beq.n	80057f0 <HAL_DMA_IRQHandler+0x8b8>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a76      	ldr	r2, [pc, #472]	; (800594c <HAL_DMA_IRQHandler+0xa14>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d03b      	beq.n	80057f0 <HAL_DMA_IRQHandler+0x8b8>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a74      	ldr	r2, [pc, #464]	; (8005950 <HAL_DMA_IRQHandler+0xa18>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d036      	beq.n	80057f0 <HAL_DMA_IRQHandler+0x8b8>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a73      	ldr	r2, [pc, #460]	; (8005954 <HAL_DMA_IRQHandler+0xa1c>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d031      	beq.n	80057f0 <HAL_DMA_IRQHandler+0x8b8>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a71      	ldr	r2, [pc, #452]	; (8005958 <HAL_DMA_IRQHandler+0xa20>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d02c      	beq.n	80057f0 <HAL_DMA_IRQHandler+0x8b8>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a70      	ldr	r2, [pc, #448]	; (800595c <HAL_DMA_IRQHandler+0xa24>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d027      	beq.n	80057f0 <HAL_DMA_IRQHandler+0x8b8>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a6e      	ldr	r2, [pc, #440]	; (8005960 <HAL_DMA_IRQHandler+0xa28>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d022      	beq.n	80057f0 <HAL_DMA_IRQHandler+0x8b8>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a6d      	ldr	r2, [pc, #436]	; (8005964 <HAL_DMA_IRQHandler+0xa2c>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d01d      	beq.n	80057f0 <HAL_DMA_IRQHandler+0x8b8>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a6b      	ldr	r2, [pc, #428]	; (8005968 <HAL_DMA_IRQHandler+0xa30>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d018      	beq.n	80057f0 <HAL_DMA_IRQHandler+0x8b8>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a6a      	ldr	r2, [pc, #424]	; (800596c <HAL_DMA_IRQHandler+0xa34>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d013      	beq.n	80057f0 <HAL_DMA_IRQHandler+0x8b8>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a68      	ldr	r2, [pc, #416]	; (8005970 <HAL_DMA_IRQHandler+0xa38>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d00e      	beq.n	80057f0 <HAL_DMA_IRQHandler+0x8b8>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a67      	ldr	r2, [pc, #412]	; (8005974 <HAL_DMA_IRQHandler+0xa3c>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d009      	beq.n	80057f0 <HAL_DMA_IRQHandler+0x8b8>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a65      	ldr	r2, [pc, #404]	; (8005978 <HAL_DMA_IRQHandler+0xa40>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d004      	beq.n	80057f0 <HAL_DMA_IRQHandler+0x8b8>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a64      	ldr	r2, [pc, #400]	; (800597c <HAL_DMA_IRQHandler+0xa44>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d108      	bne.n	8005802 <HAL_DMA_IRQHandler+0x8ca>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f022 0201 	bic.w	r2, r2, #1
 80057fe:	601a      	str	r2, [r3, #0]
 8005800:	e007      	b.n	8005812 <HAL_DMA_IRQHandler+0x8da>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f022 0201 	bic.w	r2, r2, #1
 8005810:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	3301      	adds	r3, #1
 8005816:	60fb      	str	r3, [r7, #12]
 8005818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800581a:	429a      	cmp	r2, r3
 800581c:	d307      	bcc.n	800582e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0301 	and.w	r3, r3, #1
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1f2      	bne.n	8005812 <HAL_DMA_IRQHandler+0x8da>
 800582c:	e000      	b.n	8005830 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800582e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	2b00      	cmp	r3, #0
 800583c:	d004      	beq.n	8005848 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2203      	movs	r2, #3
 8005842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005846:	e003      	b.n	8005850 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 8272 	beq.w	8005d46 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	4798      	blx	r3
 800586a:	e26c      	b.n	8005d46 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a43      	ldr	r2, [pc, #268]	; (8005980 <HAL_DMA_IRQHandler+0xa48>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d022      	beq.n	80058bc <HAL_DMA_IRQHandler+0x984>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a42      	ldr	r2, [pc, #264]	; (8005984 <HAL_DMA_IRQHandler+0xa4c>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d01d      	beq.n	80058bc <HAL_DMA_IRQHandler+0x984>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a40      	ldr	r2, [pc, #256]	; (8005988 <HAL_DMA_IRQHandler+0xa50>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d018      	beq.n	80058bc <HAL_DMA_IRQHandler+0x984>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a3f      	ldr	r2, [pc, #252]	; (800598c <HAL_DMA_IRQHandler+0xa54>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d013      	beq.n	80058bc <HAL_DMA_IRQHandler+0x984>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a3d      	ldr	r2, [pc, #244]	; (8005990 <HAL_DMA_IRQHandler+0xa58>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d00e      	beq.n	80058bc <HAL_DMA_IRQHandler+0x984>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a3c      	ldr	r2, [pc, #240]	; (8005994 <HAL_DMA_IRQHandler+0xa5c>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d009      	beq.n	80058bc <HAL_DMA_IRQHandler+0x984>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a3a      	ldr	r2, [pc, #232]	; (8005998 <HAL_DMA_IRQHandler+0xa60>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d004      	beq.n	80058bc <HAL_DMA_IRQHandler+0x984>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a39      	ldr	r2, [pc, #228]	; (800599c <HAL_DMA_IRQHandler+0xa64>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d101      	bne.n	80058c0 <HAL_DMA_IRQHandler+0x988>
 80058bc:	2301      	movs	r3, #1
 80058be:	e000      	b.n	80058c2 <HAL_DMA_IRQHandler+0x98a>
 80058c0:	2300      	movs	r3, #0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f000 823f 	beq.w	8005d46 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058d4:	f003 031f 	and.w	r3, r3, #31
 80058d8:	2204      	movs	r2, #4
 80058da:	409a      	lsls	r2, r3
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	4013      	ands	r3, r2
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f000 80cd 	beq.w	8005a80 <HAL_DMA_IRQHandler+0xb48>
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	f003 0304 	and.w	r3, r3, #4
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f000 80c7 	beq.w	8005a80 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058f6:	f003 031f 	and.w	r3, r3, #31
 80058fa:	2204      	movs	r2, #4
 80058fc:	409a      	lsls	r2, r3
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d049      	beq.n	80059a0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d109      	bne.n	800592a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800591a:	2b00      	cmp	r3, #0
 800591c:	f000 8210 	beq.w	8005d40 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005928:	e20a      	b.n	8005d40 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592e:	2b00      	cmp	r3, #0
 8005930:	f000 8206 	beq.w	8005d40 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800593c:	e200      	b.n	8005d40 <HAL_DMA_IRQHandler+0xe08>
 800593e:	bf00      	nop
 8005940:	40020010 	.word	0x40020010
 8005944:	40020028 	.word	0x40020028
 8005948:	40020040 	.word	0x40020040
 800594c:	40020058 	.word	0x40020058
 8005950:	40020070 	.word	0x40020070
 8005954:	40020088 	.word	0x40020088
 8005958:	400200a0 	.word	0x400200a0
 800595c:	400200b8 	.word	0x400200b8
 8005960:	40020410 	.word	0x40020410
 8005964:	40020428 	.word	0x40020428
 8005968:	40020440 	.word	0x40020440
 800596c:	40020458 	.word	0x40020458
 8005970:	40020470 	.word	0x40020470
 8005974:	40020488 	.word	0x40020488
 8005978:	400204a0 	.word	0x400204a0
 800597c:	400204b8 	.word	0x400204b8
 8005980:	58025408 	.word	0x58025408
 8005984:	5802541c 	.word	0x5802541c
 8005988:	58025430 	.word	0x58025430
 800598c:	58025444 	.word	0x58025444
 8005990:	58025458 	.word	0x58025458
 8005994:	5802546c 	.word	0x5802546c
 8005998:	58025480 	.word	0x58025480
 800599c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	f003 0320 	and.w	r3, r3, #32
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d160      	bne.n	8005a6c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a7f      	ldr	r2, [pc, #508]	; (8005bac <HAL_DMA_IRQHandler+0xc74>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d04a      	beq.n	8005a4a <HAL_DMA_IRQHandler+0xb12>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a7d      	ldr	r2, [pc, #500]	; (8005bb0 <HAL_DMA_IRQHandler+0xc78>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d045      	beq.n	8005a4a <HAL_DMA_IRQHandler+0xb12>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a7c      	ldr	r2, [pc, #496]	; (8005bb4 <HAL_DMA_IRQHandler+0xc7c>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d040      	beq.n	8005a4a <HAL_DMA_IRQHandler+0xb12>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a7a      	ldr	r2, [pc, #488]	; (8005bb8 <HAL_DMA_IRQHandler+0xc80>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d03b      	beq.n	8005a4a <HAL_DMA_IRQHandler+0xb12>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a79      	ldr	r2, [pc, #484]	; (8005bbc <HAL_DMA_IRQHandler+0xc84>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d036      	beq.n	8005a4a <HAL_DMA_IRQHandler+0xb12>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a77      	ldr	r2, [pc, #476]	; (8005bc0 <HAL_DMA_IRQHandler+0xc88>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d031      	beq.n	8005a4a <HAL_DMA_IRQHandler+0xb12>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a76      	ldr	r2, [pc, #472]	; (8005bc4 <HAL_DMA_IRQHandler+0xc8c>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d02c      	beq.n	8005a4a <HAL_DMA_IRQHandler+0xb12>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a74      	ldr	r2, [pc, #464]	; (8005bc8 <HAL_DMA_IRQHandler+0xc90>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d027      	beq.n	8005a4a <HAL_DMA_IRQHandler+0xb12>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a73      	ldr	r2, [pc, #460]	; (8005bcc <HAL_DMA_IRQHandler+0xc94>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d022      	beq.n	8005a4a <HAL_DMA_IRQHandler+0xb12>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a71      	ldr	r2, [pc, #452]	; (8005bd0 <HAL_DMA_IRQHandler+0xc98>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d01d      	beq.n	8005a4a <HAL_DMA_IRQHandler+0xb12>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a70      	ldr	r2, [pc, #448]	; (8005bd4 <HAL_DMA_IRQHandler+0xc9c>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d018      	beq.n	8005a4a <HAL_DMA_IRQHandler+0xb12>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a6e      	ldr	r2, [pc, #440]	; (8005bd8 <HAL_DMA_IRQHandler+0xca0>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d013      	beq.n	8005a4a <HAL_DMA_IRQHandler+0xb12>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a6d      	ldr	r2, [pc, #436]	; (8005bdc <HAL_DMA_IRQHandler+0xca4>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d00e      	beq.n	8005a4a <HAL_DMA_IRQHandler+0xb12>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a6b      	ldr	r2, [pc, #428]	; (8005be0 <HAL_DMA_IRQHandler+0xca8>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d009      	beq.n	8005a4a <HAL_DMA_IRQHandler+0xb12>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a6a      	ldr	r2, [pc, #424]	; (8005be4 <HAL_DMA_IRQHandler+0xcac>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d004      	beq.n	8005a4a <HAL_DMA_IRQHandler+0xb12>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a68      	ldr	r2, [pc, #416]	; (8005be8 <HAL_DMA_IRQHandler+0xcb0>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d108      	bne.n	8005a5c <HAL_DMA_IRQHandler+0xb24>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f022 0208 	bic.w	r2, r2, #8
 8005a58:	601a      	str	r2, [r3, #0]
 8005a5a:	e007      	b.n	8005a6c <HAL_DMA_IRQHandler+0xb34>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f022 0204 	bic.w	r2, r2, #4
 8005a6a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f000 8165 	beq.w	8005d40 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a7e:	e15f      	b.n	8005d40 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a84:	f003 031f 	and.w	r3, r3, #31
 8005a88:	2202      	movs	r2, #2
 8005a8a:	409a      	lsls	r2, r3
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	4013      	ands	r3, r2
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	f000 80c5 	beq.w	8005c20 <HAL_DMA_IRQHandler+0xce8>
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	f003 0302 	and.w	r3, r3, #2
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f000 80bf 	beq.w	8005c20 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aa6:	f003 031f 	and.w	r3, r3, #31
 8005aaa:	2202      	movs	r2, #2
 8005aac:	409a      	lsls	r2, r3
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d018      	beq.n	8005aee <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d109      	bne.n	8005ada <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f000 813a 	beq.w	8005d44 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ad8:	e134      	b.n	8005d44 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f000 8130 	beq.w	8005d44 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005aec:	e12a      	b.n	8005d44 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	f003 0320 	and.w	r3, r3, #32
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	f040 8089 	bne.w	8005c0c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a2b      	ldr	r2, [pc, #172]	; (8005bac <HAL_DMA_IRQHandler+0xc74>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d04a      	beq.n	8005b9a <HAL_DMA_IRQHandler+0xc62>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a29      	ldr	r2, [pc, #164]	; (8005bb0 <HAL_DMA_IRQHandler+0xc78>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d045      	beq.n	8005b9a <HAL_DMA_IRQHandler+0xc62>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a28      	ldr	r2, [pc, #160]	; (8005bb4 <HAL_DMA_IRQHandler+0xc7c>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d040      	beq.n	8005b9a <HAL_DMA_IRQHandler+0xc62>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a26      	ldr	r2, [pc, #152]	; (8005bb8 <HAL_DMA_IRQHandler+0xc80>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d03b      	beq.n	8005b9a <HAL_DMA_IRQHandler+0xc62>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a25      	ldr	r2, [pc, #148]	; (8005bbc <HAL_DMA_IRQHandler+0xc84>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d036      	beq.n	8005b9a <HAL_DMA_IRQHandler+0xc62>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a23      	ldr	r2, [pc, #140]	; (8005bc0 <HAL_DMA_IRQHandler+0xc88>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d031      	beq.n	8005b9a <HAL_DMA_IRQHandler+0xc62>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a22      	ldr	r2, [pc, #136]	; (8005bc4 <HAL_DMA_IRQHandler+0xc8c>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d02c      	beq.n	8005b9a <HAL_DMA_IRQHandler+0xc62>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a20      	ldr	r2, [pc, #128]	; (8005bc8 <HAL_DMA_IRQHandler+0xc90>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d027      	beq.n	8005b9a <HAL_DMA_IRQHandler+0xc62>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a1f      	ldr	r2, [pc, #124]	; (8005bcc <HAL_DMA_IRQHandler+0xc94>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d022      	beq.n	8005b9a <HAL_DMA_IRQHandler+0xc62>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a1d      	ldr	r2, [pc, #116]	; (8005bd0 <HAL_DMA_IRQHandler+0xc98>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d01d      	beq.n	8005b9a <HAL_DMA_IRQHandler+0xc62>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a1c      	ldr	r2, [pc, #112]	; (8005bd4 <HAL_DMA_IRQHandler+0xc9c>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d018      	beq.n	8005b9a <HAL_DMA_IRQHandler+0xc62>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a1a      	ldr	r2, [pc, #104]	; (8005bd8 <HAL_DMA_IRQHandler+0xca0>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d013      	beq.n	8005b9a <HAL_DMA_IRQHandler+0xc62>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a19      	ldr	r2, [pc, #100]	; (8005bdc <HAL_DMA_IRQHandler+0xca4>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d00e      	beq.n	8005b9a <HAL_DMA_IRQHandler+0xc62>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a17      	ldr	r2, [pc, #92]	; (8005be0 <HAL_DMA_IRQHandler+0xca8>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d009      	beq.n	8005b9a <HAL_DMA_IRQHandler+0xc62>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a16      	ldr	r2, [pc, #88]	; (8005be4 <HAL_DMA_IRQHandler+0xcac>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d004      	beq.n	8005b9a <HAL_DMA_IRQHandler+0xc62>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a14      	ldr	r2, [pc, #80]	; (8005be8 <HAL_DMA_IRQHandler+0xcb0>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d128      	bne.n	8005bec <HAL_DMA_IRQHandler+0xcb4>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f022 0214 	bic.w	r2, r2, #20
 8005ba8:	601a      	str	r2, [r3, #0]
 8005baa:	e027      	b.n	8005bfc <HAL_DMA_IRQHandler+0xcc4>
 8005bac:	40020010 	.word	0x40020010
 8005bb0:	40020028 	.word	0x40020028
 8005bb4:	40020040 	.word	0x40020040
 8005bb8:	40020058 	.word	0x40020058
 8005bbc:	40020070 	.word	0x40020070
 8005bc0:	40020088 	.word	0x40020088
 8005bc4:	400200a0 	.word	0x400200a0
 8005bc8:	400200b8 	.word	0x400200b8
 8005bcc:	40020410 	.word	0x40020410
 8005bd0:	40020428 	.word	0x40020428
 8005bd4:	40020440 	.word	0x40020440
 8005bd8:	40020458 	.word	0x40020458
 8005bdc:	40020470 	.word	0x40020470
 8005be0:	40020488 	.word	0x40020488
 8005be4:	400204a0 	.word	0x400204a0
 8005be8:	400204b8 	.word	0x400204b8
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f022 020a 	bic.w	r2, r2, #10
 8005bfa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f000 8097 	beq.w	8005d44 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c1e:	e091      	b.n	8005d44 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c24:	f003 031f 	and.w	r3, r3, #31
 8005c28:	2208      	movs	r2, #8
 8005c2a:	409a      	lsls	r2, r3
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	4013      	ands	r3, r2
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f000 8088 	beq.w	8005d46 <HAL_DMA_IRQHandler+0xe0e>
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	f003 0308 	and.w	r3, r3, #8
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	f000 8082 	beq.w	8005d46 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a41      	ldr	r2, [pc, #260]	; (8005d4c <HAL_DMA_IRQHandler+0xe14>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d04a      	beq.n	8005ce2 <HAL_DMA_IRQHandler+0xdaa>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a3f      	ldr	r2, [pc, #252]	; (8005d50 <HAL_DMA_IRQHandler+0xe18>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d045      	beq.n	8005ce2 <HAL_DMA_IRQHandler+0xdaa>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a3e      	ldr	r2, [pc, #248]	; (8005d54 <HAL_DMA_IRQHandler+0xe1c>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d040      	beq.n	8005ce2 <HAL_DMA_IRQHandler+0xdaa>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a3c      	ldr	r2, [pc, #240]	; (8005d58 <HAL_DMA_IRQHandler+0xe20>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d03b      	beq.n	8005ce2 <HAL_DMA_IRQHandler+0xdaa>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a3b      	ldr	r2, [pc, #236]	; (8005d5c <HAL_DMA_IRQHandler+0xe24>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d036      	beq.n	8005ce2 <HAL_DMA_IRQHandler+0xdaa>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a39      	ldr	r2, [pc, #228]	; (8005d60 <HAL_DMA_IRQHandler+0xe28>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d031      	beq.n	8005ce2 <HAL_DMA_IRQHandler+0xdaa>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a38      	ldr	r2, [pc, #224]	; (8005d64 <HAL_DMA_IRQHandler+0xe2c>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d02c      	beq.n	8005ce2 <HAL_DMA_IRQHandler+0xdaa>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a36      	ldr	r2, [pc, #216]	; (8005d68 <HAL_DMA_IRQHandler+0xe30>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d027      	beq.n	8005ce2 <HAL_DMA_IRQHandler+0xdaa>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a35      	ldr	r2, [pc, #212]	; (8005d6c <HAL_DMA_IRQHandler+0xe34>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d022      	beq.n	8005ce2 <HAL_DMA_IRQHandler+0xdaa>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a33      	ldr	r2, [pc, #204]	; (8005d70 <HAL_DMA_IRQHandler+0xe38>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d01d      	beq.n	8005ce2 <HAL_DMA_IRQHandler+0xdaa>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a32      	ldr	r2, [pc, #200]	; (8005d74 <HAL_DMA_IRQHandler+0xe3c>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d018      	beq.n	8005ce2 <HAL_DMA_IRQHandler+0xdaa>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a30      	ldr	r2, [pc, #192]	; (8005d78 <HAL_DMA_IRQHandler+0xe40>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d013      	beq.n	8005ce2 <HAL_DMA_IRQHandler+0xdaa>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a2f      	ldr	r2, [pc, #188]	; (8005d7c <HAL_DMA_IRQHandler+0xe44>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d00e      	beq.n	8005ce2 <HAL_DMA_IRQHandler+0xdaa>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a2d      	ldr	r2, [pc, #180]	; (8005d80 <HAL_DMA_IRQHandler+0xe48>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d009      	beq.n	8005ce2 <HAL_DMA_IRQHandler+0xdaa>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a2c      	ldr	r2, [pc, #176]	; (8005d84 <HAL_DMA_IRQHandler+0xe4c>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d004      	beq.n	8005ce2 <HAL_DMA_IRQHandler+0xdaa>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a2a      	ldr	r2, [pc, #168]	; (8005d88 <HAL_DMA_IRQHandler+0xe50>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d108      	bne.n	8005cf4 <HAL_DMA_IRQHandler+0xdbc>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f022 021c 	bic.w	r2, r2, #28
 8005cf0:	601a      	str	r2, [r3, #0]
 8005cf2:	e007      	b.n	8005d04 <HAL_DMA_IRQHandler+0xdcc>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f022 020e 	bic.w	r2, r2, #14
 8005d02:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d08:	f003 031f 	and.w	r3, r3, #31
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	409a      	lsls	r2, r3
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d009      	beq.n	8005d46 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	4798      	blx	r3
 8005d3a:	e004      	b.n	8005d46 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005d3c:	bf00      	nop
 8005d3e:	e002      	b.n	8005d46 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d40:	bf00      	nop
 8005d42:	e000      	b.n	8005d46 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d44:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005d46:	3728      	adds	r7, #40	; 0x28
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	40020010 	.word	0x40020010
 8005d50:	40020028 	.word	0x40020028
 8005d54:	40020040 	.word	0x40020040
 8005d58:	40020058 	.word	0x40020058
 8005d5c:	40020070 	.word	0x40020070
 8005d60:	40020088 	.word	0x40020088
 8005d64:	400200a0 	.word	0x400200a0
 8005d68:	400200b8 	.word	0x400200b8
 8005d6c:	40020410 	.word	0x40020410
 8005d70:	40020428 	.word	0x40020428
 8005d74:	40020440 	.word	0x40020440
 8005d78:	40020458 	.word	0x40020458
 8005d7c:	40020470 	.word	0x40020470
 8005d80:	40020488 	.word	0x40020488
 8005d84:	400204a0 	.word	0x400204a0
 8005d88:	400204b8 	.word	0x400204b8

08005d8c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b087      	sub	sp, #28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]
 8005d98:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d9e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005da4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a7f      	ldr	r2, [pc, #508]	; (8005fa8 <DMA_SetConfig+0x21c>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d072      	beq.n	8005e96 <DMA_SetConfig+0x10a>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a7d      	ldr	r2, [pc, #500]	; (8005fac <DMA_SetConfig+0x220>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d06d      	beq.n	8005e96 <DMA_SetConfig+0x10a>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a7c      	ldr	r2, [pc, #496]	; (8005fb0 <DMA_SetConfig+0x224>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d068      	beq.n	8005e96 <DMA_SetConfig+0x10a>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a7a      	ldr	r2, [pc, #488]	; (8005fb4 <DMA_SetConfig+0x228>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d063      	beq.n	8005e96 <DMA_SetConfig+0x10a>
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a79      	ldr	r2, [pc, #484]	; (8005fb8 <DMA_SetConfig+0x22c>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d05e      	beq.n	8005e96 <DMA_SetConfig+0x10a>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a77      	ldr	r2, [pc, #476]	; (8005fbc <DMA_SetConfig+0x230>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d059      	beq.n	8005e96 <DMA_SetConfig+0x10a>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a76      	ldr	r2, [pc, #472]	; (8005fc0 <DMA_SetConfig+0x234>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d054      	beq.n	8005e96 <DMA_SetConfig+0x10a>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a74      	ldr	r2, [pc, #464]	; (8005fc4 <DMA_SetConfig+0x238>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d04f      	beq.n	8005e96 <DMA_SetConfig+0x10a>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a73      	ldr	r2, [pc, #460]	; (8005fc8 <DMA_SetConfig+0x23c>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d04a      	beq.n	8005e96 <DMA_SetConfig+0x10a>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a71      	ldr	r2, [pc, #452]	; (8005fcc <DMA_SetConfig+0x240>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d045      	beq.n	8005e96 <DMA_SetConfig+0x10a>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a70      	ldr	r2, [pc, #448]	; (8005fd0 <DMA_SetConfig+0x244>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d040      	beq.n	8005e96 <DMA_SetConfig+0x10a>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a6e      	ldr	r2, [pc, #440]	; (8005fd4 <DMA_SetConfig+0x248>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d03b      	beq.n	8005e96 <DMA_SetConfig+0x10a>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a6d      	ldr	r2, [pc, #436]	; (8005fd8 <DMA_SetConfig+0x24c>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d036      	beq.n	8005e96 <DMA_SetConfig+0x10a>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a6b      	ldr	r2, [pc, #428]	; (8005fdc <DMA_SetConfig+0x250>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d031      	beq.n	8005e96 <DMA_SetConfig+0x10a>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a6a      	ldr	r2, [pc, #424]	; (8005fe0 <DMA_SetConfig+0x254>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d02c      	beq.n	8005e96 <DMA_SetConfig+0x10a>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a68      	ldr	r2, [pc, #416]	; (8005fe4 <DMA_SetConfig+0x258>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d027      	beq.n	8005e96 <DMA_SetConfig+0x10a>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a67      	ldr	r2, [pc, #412]	; (8005fe8 <DMA_SetConfig+0x25c>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d022      	beq.n	8005e96 <DMA_SetConfig+0x10a>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a65      	ldr	r2, [pc, #404]	; (8005fec <DMA_SetConfig+0x260>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d01d      	beq.n	8005e96 <DMA_SetConfig+0x10a>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a64      	ldr	r2, [pc, #400]	; (8005ff0 <DMA_SetConfig+0x264>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d018      	beq.n	8005e96 <DMA_SetConfig+0x10a>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a62      	ldr	r2, [pc, #392]	; (8005ff4 <DMA_SetConfig+0x268>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d013      	beq.n	8005e96 <DMA_SetConfig+0x10a>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a61      	ldr	r2, [pc, #388]	; (8005ff8 <DMA_SetConfig+0x26c>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d00e      	beq.n	8005e96 <DMA_SetConfig+0x10a>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a5f      	ldr	r2, [pc, #380]	; (8005ffc <DMA_SetConfig+0x270>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d009      	beq.n	8005e96 <DMA_SetConfig+0x10a>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a5e      	ldr	r2, [pc, #376]	; (8006000 <DMA_SetConfig+0x274>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d004      	beq.n	8005e96 <DMA_SetConfig+0x10a>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a5c      	ldr	r2, [pc, #368]	; (8006004 <DMA_SetConfig+0x278>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d101      	bne.n	8005e9a <DMA_SetConfig+0x10e>
 8005e96:	2301      	movs	r3, #1
 8005e98:	e000      	b.n	8005e9c <DMA_SetConfig+0x110>
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00d      	beq.n	8005ebc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005ea8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d004      	beq.n	8005ebc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005eba:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a39      	ldr	r2, [pc, #228]	; (8005fa8 <DMA_SetConfig+0x21c>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d04a      	beq.n	8005f5c <DMA_SetConfig+0x1d0>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a38      	ldr	r2, [pc, #224]	; (8005fac <DMA_SetConfig+0x220>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d045      	beq.n	8005f5c <DMA_SetConfig+0x1d0>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a36      	ldr	r2, [pc, #216]	; (8005fb0 <DMA_SetConfig+0x224>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d040      	beq.n	8005f5c <DMA_SetConfig+0x1d0>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a35      	ldr	r2, [pc, #212]	; (8005fb4 <DMA_SetConfig+0x228>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d03b      	beq.n	8005f5c <DMA_SetConfig+0x1d0>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a33      	ldr	r2, [pc, #204]	; (8005fb8 <DMA_SetConfig+0x22c>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d036      	beq.n	8005f5c <DMA_SetConfig+0x1d0>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a32      	ldr	r2, [pc, #200]	; (8005fbc <DMA_SetConfig+0x230>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d031      	beq.n	8005f5c <DMA_SetConfig+0x1d0>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a30      	ldr	r2, [pc, #192]	; (8005fc0 <DMA_SetConfig+0x234>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d02c      	beq.n	8005f5c <DMA_SetConfig+0x1d0>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a2f      	ldr	r2, [pc, #188]	; (8005fc4 <DMA_SetConfig+0x238>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d027      	beq.n	8005f5c <DMA_SetConfig+0x1d0>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a2d      	ldr	r2, [pc, #180]	; (8005fc8 <DMA_SetConfig+0x23c>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d022      	beq.n	8005f5c <DMA_SetConfig+0x1d0>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a2c      	ldr	r2, [pc, #176]	; (8005fcc <DMA_SetConfig+0x240>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d01d      	beq.n	8005f5c <DMA_SetConfig+0x1d0>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a2a      	ldr	r2, [pc, #168]	; (8005fd0 <DMA_SetConfig+0x244>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d018      	beq.n	8005f5c <DMA_SetConfig+0x1d0>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a29      	ldr	r2, [pc, #164]	; (8005fd4 <DMA_SetConfig+0x248>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d013      	beq.n	8005f5c <DMA_SetConfig+0x1d0>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a27      	ldr	r2, [pc, #156]	; (8005fd8 <DMA_SetConfig+0x24c>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d00e      	beq.n	8005f5c <DMA_SetConfig+0x1d0>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a26      	ldr	r2, [pc, #152]	; (8005fdc <DMA_SetConfig+0x250>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d009      	beq.n	8005f5c <DMA_SetConfig+0x1d0>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a24      	ldr	r2, [pc, #144]	; (8005fe0 <DMA_SetConfig+0x254>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d004      	beq.n	8005f5c <DMA_SetConfig+0x1d0>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a23      	ldr	r2, [pc, #140]	; (8005fe4 <DMA_SetConfig+0x258>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d101      	bne.n	8005f60 <DMA_SetConfig+0x1d4>
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e000      	b.n	8005f62 <DMA_SetConfig+0x1d6>
 8005f60:	2300      	movs	r3, #0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d059      	beq.n	800601a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f6a:	f003 031f 	and.w	r3, r3, #31
 8005f6e:	223f      	movs	r2, #63	; 0x3f
 8005f70:	409a      	lsls	r2, r3
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005f84:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	683a      	ldr	r2, [r7, #0]
 8005f8c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	2b40      	cmp	r3, #64	; 0x40
 8005f94:	d138      	bne.n	8006008 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005fa6:	e086      	b.n	80060b6 <DMA_SetConfig+0x32a>
 8005fa8:	40020010 	.word	0x40020010
 8005fac:	40020028 	.word	0x40020028
 8005fb0:	40020040 	.word	0x40020040
 8005fb4:	40020058 	.word	0x40020058
 8005fb8:	40020070 	.word	0x40020070
 8005fbc:	40020088 	.word	0x40020088
 8005fc0:	400200a0 	.word	0x400200a0
 8005fc4:	400200b8 	.word	0x400200b8
 8005fc8:	40020410 	.word	0x40020410
 8005fcc:	40020428 	.word	0x40020428
 8005fd0:	40020440 	.word	0x40020440
 8005fd4:	40020458 	.word	0x40020458
 8005fd8:	40020470 	.word	0x40020470
 8005fdc:	40020488 	.word	0x40020488
 8005fe0:	400204a0 	.word	0x400204a0
 8005fe4:	400204b8 	.word	0x400204b8
 8005fe8:	58025408 	.word	0x58025408
 8005fec:	5802541c 	.word	0x5802541c
 8005ff0:	58025430 	.word	0x58025430
 8005ff4:	58025444 	.word	0x58025444
 8005ff8:	58025458 	.word	0x58025458
 8005ffc:	5802546c 	.word	0x5802546c
 8006000:	58025480 	.word	0x58025480
 8006004:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68ba      	ldr	r2, [r7, #8]
 800600e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	60da      	str	r2, [r3, #12]
}
 8006018:	e04d      	b.n	80060b6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a29      	ldr	r2, [pc, #164]	; (80060c4 <DMA_SetConfig+0x338>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d022      	beq.n	800606a <DMA_SetConfig+0x2de>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a27      	ldr	r2, [pc, #156]	; (80060c8 <DMA_SetConfig+0x33c>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d01d      	beq.n	800606a <DMA_SetConfig+0x2de>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a26      	ldr	r2, [pc, #152]	; (80060cc <DMA_SetConfig+0x340>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d018      	beq.n	800606a <DMA_SetConfig+0x2de>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a24      	ldr	r2, [pc, #144]	; (80060d0 <DMA_SetConfig+0x344>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d013      	beq.n	800606a <DMA_SetConfig+0x2de>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a23      	ldr	r2, [pc, #140]	; (80060d4 <DMA_SetConfig+0x348>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d00e      	beq.n	800606a <DMA_SetConfig+0x2de>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a21      	ldr	r2, [pc, #132]	; (80060d8 <DMA_SetConfig+0x34c>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d009      	beq.n	800606a <DMA_SetConfig+0x2de>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a20      	ldr	r2, [pc, #128]	; (80060dc <DMA_SetConfig+0x350>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d004      	beq.n	800606a <DMA_SetConfig+0x2de>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a1e      	ldr	r2, [pc, #120]	; (80060e0 <DMA_SetConfig+0x354>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d101      	bne.n	800606e <DMA_SetConfig+0x2e2>
 800606a:	2301      	movs	r3, #1
 800606c:	e000      	b.n	8006070 <DMA_SetConfig+0x2e4>
 800606e:	2300      	movs	r3, #0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d020      	beq.n	80060b6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006078:	f003 031f 	and.w	r3, r3, #31
 800607c:	2201      	movs	r2, #1
 800607e:	409a      	lsls	r2, r3
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	683a      	ldr	r2, [r7, #0]
 800608a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	2b40      	cmp	r3, #64	; 0x40
 8006092:	d108      	bne.n	80060a6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	60da      	str	r2, [r3, #12]
}
 80060a4:	e007      	b.n	80060b6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	60da      	str	r2, [r3, #12]
}
 80060b6:	bf00      	nop
 80060b8:	371c      	adds	r7, #28
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	58025408 	.word	0x58025408
 80060c8:	5802541c 	.word	0x5802541c
 80060cc:	58025430 	.word	0x58025430
 80060d0:	58025444 	.word	0x58025444
 80060d4:	58025458 	.word	0x58025458
 80060d8:	5802546c 	.word	0x5802546c
 80060dc:	58025480 	.word	0x58025480
 80060e0:	58025494 	.word	0x58025494

080060e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a42      	ldr	r2, [pc, #264]	; (80061fc <DMA_CalcBaseAndBitshift+0x118>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d04a      	beq.n	800618c <DMA_CalcBaseAndBitshift+0xa8>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a41      	ldr	r2, [pc, #260]	; (8006200 <DMA_CalcBaseAndBitshift+0x11c>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d045      	beq.n	800618c <DMA_CalcBaseAndBitshift+0xa8>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a3f      	ldr	r2, [pc, #252]	; (8006204 <DMA_CalcBaseAndBitshift+0x120>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d040      	beq.n	800618c <DMA_CalcBaseAndBitshift+0xa8>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a3e      	ldr	r2, [pc, #248]	; (8006208 <DMA_CalcBaseAndBitshift+0x124>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d03b      	beq.n	800618c <DMA_CalcBaseAndBitshift+0xa8>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a3c      	ldr	r2, [pc, #240]	; (800620c <DMA_CalcBaseAndBitshift+0x128>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d036      	beq.n	800618c <DMA_CalcBaseAndBitshift+0xa8>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a3b      	ldr	r2, [pc, #236]	; (8006210 <DMA_CalcBaseAndBitshift+0x12c>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d031      	beq.n	800618c <DMA_CalcBaseAndBitshift+0xa8>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a39      	ldr	r2, [pc, #228]	; (8006214 <DMA_CalcBaseAndBitshift+0x130>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d02c      	beq.n	800618c <DMA_CalcBaseAndBitshift+0xa8>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a38      	ldr	r2, [pc, #224]	; (8006218 <DMA_CalcBaseAndBitshift+0x134>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d027      	beq.n	800618c <DMA_CalcBaseAndBitshift+0xa8>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a36      	ldr	r2, [pc, #216]	; (800621c <DMA_CalcBaseAndBitshift+0x138>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d022      	beq.n	800618c <DMA_CalcBaseAndBitshift+0xa8>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a35      	ldr	r2, [pc, #212]	; (8006220 <DMA_CalcBaseAndBitshift+0x13c>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d01d      	beq.n	800618c <DMA_CalcBaseAndBitshift+0xa8>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a33      	ldr	r2, [pc, #204]	; (8006224 <DMA_CalcBaseAndBitshift+0x140>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d018      	beq.n	800618c <DMA_CalcBaseAndBitshift+0xa8>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a32      	ldr	r2, [pc, #200]	; (8006228 <DMA_CalcBaseAndBitshift+0x144>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d013      	beq.n	800618c <DMA_CalcBaseAndBitshift+0xa8>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a30      	ldr	r2, [pc, #192]	; (800622c <DMA_CalcBaseAndBitshift+0x148>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d00e      	beq.n	800618c <DMA_CalcBaseAndBitshift+0xa8>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a2f      	ldr	r2, [pc, #188]	; (8006230 <DMA_CalcBaseAndBitshift+0x14c>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d009      	beq.n	800618c <DMA_CalcBaseAndBitshift+0xa8>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a2d      	ldr	r2, [pc, #180]	; (8006234 <DMA_CalcBaseAndBitshift+0x150>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d004      	beq.n	800618c <DMA_CalcBaseAndBitshift+0xa8>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a2c      	ldr	r2, [pc, #176]	; (8006238 <DMA_CalcBaseAndBitshift+0x154>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d101      	bne.n	8006190 <DMA_CalcBaseAndBitshift+0xac>
 800618c:	2301      	movs	r3, #1
 800618e:	e000      	b.n	8006192 <DMA_CalcBaseAndBitshift+0xae>
 8006190:	2300      	movs	r3, #0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d024      	beq.n	80061e0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	b2db      	uxtb	r3, r3
 800619c:	3b10      	subs	r3, #16
 800619e:	4a27      	ldr	r2, [pc, #156]	; (800623c <DMA_CalcBaseAndBitshift+0x158>)
 80061a0:	fba2 2303 	umull	r2, r3, r2, r3
 80061a4:	091b      	lsrs	r3, r3, #4
 80061a6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f003 0307 	and.w	r3, r3, #7
 80061ae:	4a24      	ldr	r2, [pc, #144]	; (8006240 <DMA_CalcBaseAndBitshift+0x15c>)
 80061b0:	5cd3      	ldrb	r3, [r2, r3]
 80061b2:	461a      	mov	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2b03      	cmp	r3, #3
 80061bc:	d908      	bls.n	80061d0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	461a      	mov	r2, r3
 80061c4:	4b1f      	ldr	r3, [pc, #124]	; (8006244 <DMA_CalcBaseAndBitshift+0x160>)
 80061c6:	4013      	ands	r3, r2
 80061c8:	1d1a      	adds	r2, r3, #4
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	659a      	str	r2, [r3, #88]	; 0x58
 80061ce:	e00d      	b.n	80061ec <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	461a      	mov	r2, r3
 80061d6:	4b1b      	ldr	r3, [pc, #108]	; (8006244 <DMA_CalcBaseAndBitshift+0x160>)
 80061d8:	4013      	ands	r3, r2
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	6593      	str	r3, [r2, #88]	; 0x58
 80061de:	e005      	b.n	80061ec <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	40020010 	.word	0x40020010
 8006200:	40020028 	.word	0x40020028
 8006204:	40020040 	.word	0x40020040
 8006208:	40020058 	.word	0x40020058
 800620c:	40020070 	.word	0x40020070
 8006210:	40020088 	.word	0x40020088
 8006214:	400200a0 	.word	0x400200a0
 8006218:	400200b8 	.word	0x400200b8
 800621c:	40020410 	.word	0x40020410
 8006220:	40020428 	.word	0x40020428
 8006224:	40020440 	.word	0x40020440
 8006228:	40020458 	.word	0x40020458
 800622c:	40020470 	.word	0x40020470
 8006230:	40020488 	.word	0x40020488
 8006234:	400204a0 	.word	0x400204a0
 8006238:	400204b8 	.word	0x400204b8
 800623c:	aaaaaaab 	.word	0xaaaaaaab
 8006240:	0800cce8 	.word	0x0800cce8
 8006244:	fffffc00 	.word	0xfffffc00

08006248 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006250:	2300      	movs	r3, #0
 8006252:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	699b      	ldr	r3, [r3, #24]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d120      	bne.n	800629e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006260:	2b03      	cmp	r3, #3
 8006262:	d858      	bhi.n	8006316 <DMA_CheckFifoParam+0xce>
 8006264:	a201      	add	r2, pc, #4	; (adr r2, 800626c <DMA_CheckFifoParam+0x24>)
 8006266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800626a:	bf00      	nop
 800626c:	0800627d 	.word	0x0800627d
 8006270:	0800628f 	.word	0x0800628f
 8006274:	0800627d 	.word	0x0800627d
 8006278:	08006317 	.word	0x08006317
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006280:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006284:	2b00      	cmp	r3, #0
 8006286:	d048      	beq.n	800631a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800628c:	e045      	b.n	800631a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006292:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006296:	d142      	bne.n	800631e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800629c:	e03f      	b.n	800631e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	699b      	ldr	r3, [r3, #24]
 80062a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062a6:	d123      	bne.n	80062f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ac:	2b03      	cmp	r3, #3
 80062ae:	d838      	bhi.n	8006322 <DMA_CheckFifoParam+0xda>
 80062b0:	a201      	add	r2, pc, #4	; (adr r2, 80062b8 <DMA_CheckFifoParam+0x70>)
 80062b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b6:	bf00      	nop
 80062b8:	080062c9 	.word	0x080062c9
 80062bc:	080062cf 	.word	0x080062cf
 80062c0:	080062c9 	.word	0x080062c9
 80062c4:	080062e1 	.word	0x080062e1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	73fb      	strb	r3, [r7, #15]
        break;
 80062cc:	e030      	b.n	8006330 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d025      	beq.n	8006326 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80062de:	e022      	b.n	8006326 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80062e8:	d11f      	bne.n	800632a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80062ee:	e01c      	b.n	800632a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	d902      	bls.n	80062fe <DMA_CheckFifoParam+0xb6>
 80062f8:	2b03      	cmp	r3, #3
 80062fa:	d003      	beq.n	8006304 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80062fc:	e018      	b.n	8006330 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	73fb      	strb	r3, [r7, #15]
        break;
 8006302:	e015      	b.n	8006330 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006308:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00e      	beq.n	800632e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	73fb      	strb	r3, [r7, #15]
    break;
 8006314:	e00b      	b.n	800632e <DMA_CheckFifoParam+0xe6>
        break;
 8006316:	bf00      	nop
 8006318:	e00a      	b.n	8006330 <DMA_CheckFifoParam+0xe8>
        break;
 800631a:	bf00      	nop
 800631c:	e008      	b.n	8006330 <DMA_CheckFifoParam+0xe8>
        break;
 800631e:	bf00      	nop
 8006320:	e006      	b.n	8006330 <DMA_CheckFifoParam+0xe8>
        break;
 8006322:	bf00      	nop
 8006324:	e004      	b.n	8006330 <DMA_CheckFifoParam+0xe8>
        break;
 8006326:	bf00      	nop
 8006328:	e002      	b.n	8006330 <DMA_CheckFifoParam+0xe8>
        break;
 800632a:	bf00      	nop
 800632c:	e000      	b.n	8006330 <DMA_CheckFifoParam+0xe8>
    break;
 800632e:	bf00      	nop
    }
  }

  return status;
 8006330:	7bfb      	ldrb	r3, [r7, #15]
}
 8006332:	4618      	mov	r0, r3
 8006334:	3714      	adds	r7, #20
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop

08006340 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006340:	b480      	push	{r7}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a38      	ldr	r2, [pc, #224]	; (8006434 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d022      	beq.n	800639e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a36      	ldr	r2, [pc, #216]	; (8006438 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d01d      	beq.n	800639e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a35      	ldr	r2, [pc, #212]	; (800643c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d018      	beq.n	800639e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a33      	ldr	r2, [pc, #204]	; (8006440 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d013      	beq.n	800639e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a32      	ldr	r2, [pc, #200]	; (8006444 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d00e      	beq.n	800639e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a30      	ldr	r2, [pc, #192]	; (8006448 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d009      	beq.n	800639e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a2f      	ldr	r2, [pc, #188]	; (800644c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d004      	beq.n	800639e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a2d      	ldr	r2, [pc, #180]	; (8006450 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d101      	bne.n	80063a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800639e:	2301      	movs	r3, #1
 80063a0:	e000      	b.n	80063a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80063a2:	2300      	movs	r3, #0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d01a      	beq.n	80063de <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	3b08      	subs	r3, #8
 80063b0:	4a28      	ldr	r2, [pc, #160]	; (8006454 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80063b2:	fba2 2303 	umull	r2, r3, r2, r3
 80063b6:	091b      	lsrs	r3, r3, #4
 80063b8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	4b26      	ldr	r3, [pc, #152]	; (8006458 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80063be:	4413      	add	r3, r2
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	461a      	mov	r2, r3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4a24      	ldr	r2, [pc, #144]	; (800645c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80063cc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f003 031f 	and.w	r3, r3, #31
 80063d4:	2201      	movs	r2, #1
 80063d6:	409a      	lsls	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80063dc:	e024      	b.n	8006428 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	3b10      	subs	r3, #16
 80063e6:	4a1e      	ldr	r2, [pc, #120]	; (8006460 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80063e8:	fba2 2303 	umull	r2, r3, r2, r3
 80063ec:	091b      	lsrs	r3, r3, #4
 80063ee:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	4a1c      	ldr	r2, [pc, #112]	; (8006464 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d806      	bhi.n	8006406 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	4a1b      	ldr	r2, [pc, #108]	; (8006468 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d902      	bls.n	8006406 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	3308      	adds	r3, #8
 8006404:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	4b18      	ldr	r3, [pc, #96]	; (800646c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800640a:	4413      	add	r3, r2
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	461a      	mov	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a16      	ldr	r2, [pc, #88]	; (8006470 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006418:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f003 031f 	and.w	r3, r3, #31
 8006420:	2201      	movs	r2, #1
 8006422:	409a      	lsls	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006428:	bf00      	nop
 800642a:	3714      	adds	r7, #20
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr
 8006434:	58025408 	.word	0x58025408
 8006438:	5802541c 	.word	0x5802541c
 800643c:	58025430 	.word	0x58025430
 8006440:	58025444 	.word	0x58025444
 8006444:	58025458 	.word	0x58025458
 8006448:	5802546c 	.word	0x5802546c
 800644c:	58025480 	.word	0x58025480
 8006450:	58025494 	.word	0x58025494
 8006454:	cccccccd 	.word	0xcccccccd
 8006458:	16009600 	.word	0x16009600
 800645c:	58025880 	.word	0x58025880
 8006460:	aaaaaaab 	.word	0xaaaaaaab
 8006464:	400204b8 	.word	0x400204b8
 8006468:	4002040f 	.word	0x4002040f
 800646c:	10008200 	.word	0x10008200
 8006470:	40020880 	.word	0x40020880

08006474 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	b2db      	uxtb	r3, r3
 8006482:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d04a      	beq.n	8006520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2b08      	cmp	r3, #8
 800648e:	d847      	bhi.n	8006520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a25      	ldr	r2, [pc, #148]	; (800652c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d022      	beq.n	80064e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a24      	ldr	r2, [pc, #144]	; (8006530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d01d      	beq.n	80064e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a22      	ldr	r2, [pc, #136]	; (8006534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d018      	beq.n	80064e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a21      	ldr	r2, [pc, #132]	; (8006538 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d013      	beq.n	80064e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a1f      	ldr	r2, [pc, #124]	; (800653c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d00e      	beq.n	80064e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a1e      	ldr	r2, [pc, #120]	; (8006540 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d009      	beq.n	80064e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a1c      	ldr	r2, [pc, #112]	; (8006544 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d004      	beq.n	80064e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a1b      	ldr	r2, [pc, #108]	; (8006548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d101      	bne.n	80064e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80064e0:	2301      	movs	r3, #1
 80064e2:	e000      	b.n	80064e6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80064e4:	2300      	movs	r3, #0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00a      	beq.n	8006500 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	4b17      	ldr	r3, [pc, #92]	; (800654c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80064ee:	4413      	add	r3, r2
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	461a      	mov	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a15      	ldr	r2, [pc, #84]	; (8006550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80064fc:	671a      	str	r2, [r3, #112]	; 0x70
 80064fe:	e009      	b.n	8006514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	4b14      	ldr	r3, [pc, #80]	; (8006554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006504:	4413      	add	r3, r2
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	461a      	mov	r2, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a11      	ldr	r2, [pc, #68]	; (8006558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006512:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	3b01      	subs	r3, #1
 8006518:	2201      	movs	r2, #1
 800651a:	409a      	lsls	r2, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006520:	bf00      	nop
 8006522:	3714      	adds	r7, #20
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr
 800652c:	58025408 	.word	0x58025408
 8006530:	5802541c 	.word	0x5802541c
 8006534:	58025430 	.word	0x58025430
 8006538:	58025444 	.word	0x58025444
 800653c:	58025458 	.word	0x58025458
 8006540:	5802546c 	.word	0x5802546c
 8006544:	58025480 	.word	0x58025480
 8006548:	58025494 	.word	0x58025494
 800654c:	1600963f 	.word	0x1600963f
 8006550:	58025940 	.word	0x58025940
 8006554:	1000823f 	.word	0x1000823f
 8006558:	40020940 	.word	0x40020940

0800655c <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b086      	sub	sp, #24
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
 8006568:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800656a:	2300      	movs	r3, #0
 800656c:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	2b80      	cmp	r3, #128	; 0x80
 8006574:	d105      	bne.n	8006582 <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f44f 7280 	mov.w	r2, #256	; 0x100
 800657c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e315      	b.n	8006bae <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006588:	2b01      	cmp	r3, #1
 800658a:	d101      	bne.n	8006590 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 800658c:	2302      	movs	r3, #2
 800658e:	e30e      	b.n	8006bae <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	f040 82fd 	bne.w	8006ba0 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2202      	movs	r2, #2
 80065aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a82      	ldr	r2, [pc, #520]	; (80067c4 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d04a      	beq.n	8006654 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a81      	ldr	r2, [pc, #516]	; (80067c8 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d045      	beq.n	8006654 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a7f      	ldr	r2, [pc, #508]	; (80067cc <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d040      	beq.n	8006654 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a7e      	ldr	r2, [pc, #504]	; (80067d0 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d03b      	beq.n	8006654 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a7c      	ldr	r2, [pc, #496]	; (80067d4 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d036      	beq.n	8006654 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a7b      	ldr	r2, [pc, #492]	; (80067d8 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d031      	beq.n	8006654 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a79      	ldr	r2, [pc, #484]	; (80067dc <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d02c      	beq.n	8006654 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a78      	ldr	r2, [pc, #480]	; (80067e0 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d027      	beq.n	8006654 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a76      	ldr	r2, [pc, #472]	; (80067e4 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d022      	beq.n	8006654 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a75      	ldr	r2, [pc, #468]	; (80067e8 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d01d      	beq.n	8006654 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a73      	ldr	r2, [pc, #460]	; (80067ec <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d018      	beq.n	8006654 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a72      	ldr	r2, [pc, #456]	; (80067f0 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d013      	beq.n	8006654 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a70      	ldr	r2, [pc, #448]	; (80067f4 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d00e      	beq.n	8006654 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a6f      	ldr	r2, [pc, #444]	; (80067f8 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d009      	beq.n	8006654 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a6d      	ldr	r2, [pc, #436]	; (80067fc <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d004      	beq.n	8006654 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a6c      	ldr	r2, [pc, #432]	; (8006800 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d101      	bne.n	8006658 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8006654:	2301      	movs	r3, #1
 8006656:	e000      	b.n	800665a <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8006658:	2300      	movs	r3, #0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d018      	beq.n	8006690 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800666c:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	683a      	ldr	r2, [r7, #0]
 8006674:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800667a:	3308      	adds	r3, #8
 800667c:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006682:	f003 031f 	and.w	r3, r3, #31
 8006686:	223f      	movs	r2, #63	; 0x3f
 8006688:	409a      	lsls	r2, r3
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	601a      	str	r2, [r3, #0]
 800668e:	e018      	b.n	80066c2 <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	6819      	ldr	r1, [r3, #0]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	f248 0320 	movw	r3, #32800	; 0x8020
 800669e:	430b      	orrs	r3, r1
 80066a0:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	683a      	ldr	r2, [r7, #0]
 80066a8:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ae:	3304      	adds	r3, #4
 80066b0:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066b6:	f003 031f 	and.w	r3, r3, #31
 80066ba:	2201      	movs	r2, #1
 80066bc:	409a      	lsls	r2, r3
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80066c2:	6a3b      	ldr	r3, [r7, #32]
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	68b9      	ldr	r1, [r7, #8]
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f000 fb41 	bl	8006d50 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a3c      	ldr	r2, [pc, #240]	; (80067c4 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d072      	beq.n	80067be <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a3a      	ldr	r2, [pc, #232]	; (80067c8 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d06d      	beq.n	80067be <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a39      	ldr	r2, [pc, #228]	; (80067cc <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d068      	beq.n	80067be <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a37      	ldr	r2, [pc, #220]	; (80067d0 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d063      	beq.n	80067be <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a36      	ldr	r2, [pc, #216]	; (80067d4 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d05e      	beq.n	80067be <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a34      	ldr	r2, [pc, #208]	; (80067d8 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d059      	beq.n	80067be <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a33      	ldr	r2, [pc, #204]	; (80067dc <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d054      	beq.n	80067be <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a31      	ldr	r2, [pc, #196]	; (80067e0 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d04f      	beq.n	80067be <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a30      	ldr	r2, [pc, #192]	; (80067e4 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d04a      	beq.n	80067be <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a2e      	ldr	r2, [pc, #184]	; (80067e8 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d045      	beq.n	80067be <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a2d      	ldr	r2, [pc, #180]	; (80067ec <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d040      	beq.n	80067be <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a2b      	ldr	r2, [pc, #172]	; (80067f0 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d03b      	beq.n	80067be <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a2a      	ldr	r2, [pc, #168]	; (80067f4 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d036      	beq.n	80067be <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a28      	ldr	r2, [pc, #160]	; (80067f8 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d031      	beq.n	80067be <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a27      	ldr	r2, [pc, #156]	; (80067fc <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d02c      	beq.n	80067be <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a25      	ldr	r2, [pc, #148]	; (8006800 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d027      	beq.n	80067be <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a24      	ldr	r2, [pc, #144]	; (8006804 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d022      	beq.n	80067be <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a22      	ldr	r2, [pc, #136]	; (8006808 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d01d      	beq.n	80067be <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a21      	ldr	r2, [pc, #132]	; (800680c <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d018      	beq.n	80067be <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a1f      	ldr	r2, [pc, #124]	; (8006810 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d013      	beq.n	80067be <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a1e      	ldr	r2, [pc, #120]	; (8006814 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d00e      	beq.n	80067be <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a1c      	ldr	r2, [pc, #112]	; (8006818 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d009      	beq.n	80067be <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a1b      	ldr	r2, [pc, #108]	; (800681c <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d004      	beq.n	80067be <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a19      	ldr	r2, [pc, #100]	; (8006820 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d132      	bne.n	8006824 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 80067be:	2301      	movs	r3, #1
 80067c0:	e031      	b.n	8006826 <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 80067c2:	bf00      	nop
 80067c4:	40020010 	.word	0x40020010
 80067c8:	40020028 	.word	0x40020028
 80067cc:	40020040 	.word	0x40020040
 80067d0:	40020058 	.word	0x40020058
 80067d4:	40020070 	.word	0x40020070
 80067d8:	40020088 	.word	0x40020088
 80067dc:	400200a0 	.word	0x400200a0
 80067e0:	400200b8 	.word	0x400200b8
 80067e4:	40020410 	.word	0x40020410
 80067e8:	40020428 	.word	0x40020428
 80067ec:	40020440 	.word	0x40020440
 80067f0:	40020458 	.word	0x40020458
 80067f4:	40020470 	.word	0x40020470
 80067f8:	40020488 	.word	0x40020488
 80067fc:	400204a0 	.word	0x400204a0
 8006800:	400204b8 	.word	0x400204b8
 8006804:	58025408 	.word	0x58025408
 8006808:	5802541c 	.word	0x5802541c
 800680c:	58025430 	.word	0x58025430
 8006810:	58025444 	.word	0x58025444
 8006814:	58025458 	.word	0x58025458
 8006818:	5802546c 	.word	0x5802546c
 800681c:	58025480 	.word	0x58025480
 8006820:	58025494 	.word	0x58025494
 8006824:	2300      	movs	r3, #0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00d      	beq.n	8006846 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006832:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006838:	2b00      	cmp	r3, #0
 800683a:	d004      	beq.n	8006846 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006844:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a3b      	ldr	r2, [pc, #236]	; (8006938 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d04a      	beq.n	80068e6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a39      	ldr	r2, [pc, #228]	; (800693c <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d045      	beq.n	80068e6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a38      	ldr	r2, [pc, #224]	; (8006940 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d040      	beq.n	80068e6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a36      	ldr	r2, [pc, #216]	; (8006944 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d03b      	beq.n	80068e6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a35      	ldr	r2, [pc, #212]	; (8006948 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d036      	beq.n	80068e6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a33      	ldr	r2, [pc, #204]	; (800694c <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d031      	beq.n	80068e6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a32      	ldr	r2, [pc, #200]	; (8006950 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d02c      	beq.n	80068e6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a30      	ldr	r2, [pc, #192]	; (8006954 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d027      	beq.n	80068e6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a2f      	ldr	r2, [pc, #188]	; (8006958 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d022      	beq.n	80068e6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a2d      	ldr	r2, [pc, #180]	; (800695c <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d01d      	beq.n	80068e6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a2c      	ldr	r2, [pc, #176]	; (8006960 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d018      	beq.n	80068e6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a2a      	ldr	r2, [pc, #168]	; (8006964 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d013      	beq.n	80068e6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a29      	ldr	r2, [pc, #164]	; (8006968 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d00e      	beq.n	80068e6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a27      	ldr	r2, [pc, #156]	; (800696c <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d009      	beq.n	80068e6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a26      	ldr	r2, [pc, #152]	; (8006970 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d004      	beq.n	80068e6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a24      	ldr	r2, [pc, #144]	; (8006974 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d101      	bne.n	80068ea <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 80068e6:	2301      	movs	r3, #1
 80068e8:	e000      	b.n	80068ec <HAL_DMAEx_MultiBufferStart_IT+0x390>
 80068ea:	2300      	movs	r3, #0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d043      	beq.n	8006978 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f023 021e 	bic.w	r2, r3, #30
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f042 0216 	orr.w	r2, r2, #22
 8006902:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	695a      	ldr	r2, [r3, #20]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006912:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006918:	2b00      	cmp	r3, #0
 800691a:	d103      	bne.n	8006924 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006920:	2b00      	cmp	r3, #0
 8006922:	d043      	beq.n	80069ac <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f042 0208 	orr.w	r2, r2, #8
 8006932:	601a      	str	r2, [r3, #0]
 8006934:	e03a      	b.n	80069ac <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8006936:	bf00      	nop
 8006938:	40020010 	.word	0x40020010
 800693c:	40020028 	.word	0x40020028
 8006940:	40020040 	.word	0x40020040
 8006944:	40020058 	.word	0x40020058
 8006948:	40020070 	.word	0x40020070
 800694c:	40020088 	.word	0x40020088
 8006950:	400200a0 	.word	0x400200a0
 8006954:	400200b8 	.word	0x400200b8
 8006958:	40020410 	.word	0x40020410
 800695c:	40020428 	.word	0x40020428
 8006960:	40020440 	.word	0x40020440
 8006964:	40020458 	.word	0x40020458
 8006968:	40020470 	.word	0x40020470
 800696c:	40020488 	.word	0x40020488
 8006970:	400204a0 	.word	0x400204a0
 8006974:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f023 020e 	bic.w	r2, r3, #14
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f042 020a 	orr.w	r2, r2, #10
 800698a:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006990:	2b00      	cmp	r3, #0
 8006992:	d103      	bne.n	800699c <HAL_DMAEx_MultiBufferStart_IT+0x440>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006998:	2b00      	cmp	r3, #0
 800699a:	d007      	beq.n	80069ac <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f042 0204 	orr.w	r2, r2, #4
 80069aa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a81      	ldr	r2, [pc, #516]	; (8006bb8 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d072      	beq.n	8006a9c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a80      	ldr	r2, [pc, #512]	; (8006bbc <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d06d      	beq.n	8006a9c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a7e      	ldr	r2, [pc, #504]	; (8006bc0 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d068      	beq.n	8006a9c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a7d      	ldr	r2, [pc, #500]	; (8006bc4 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d063      	beq.n	8006a9c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a7b      	ldr	r2, [pc, #492]	; (8006bc8 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d05e      	beq.n	8006a9c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a7a      	ldr	r2, [pc, #488]	; (8006bcc <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d059      	beq.n	8006a9c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a78      	ldr	r2, [pc, #480]	; (8006bd0 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d054      	beq.n	8006a9c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a77      	ldr	r2, [pc, #476]	; (8006bd4 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d04f      	beq.n	8006a9c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a75      	ldr	r2, [pc, #468]	; (8006bd8 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d04a      	beq.n	8006a9c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a74      	ldr	r2, [pc, #464]	; (8006bdc <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d045      	beq.n	8006a9c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a72      	ldr	r2, [pc, #456]	; (8006be0 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d040      	beq.n	8006a9c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a71      	ldr	r2, [pc, #452]	; (8006be4 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d03b      	beq.n	8006a9c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a6f      	ldr	r2, [pc, #444]	; (8006be8 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d036      	beq.n	8006a9c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a6e      	ldr	r2, [pc, #440]	; (8006bec <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d031      	beq.n	8006a9c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a6c      	ldr	r2, [pc, #432]	; (8006bf0 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d02c      	beq.n	8006a9c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a6b      	ldr	r2, [pc, #428]	; (8006bf4 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d027      	beq.n	8006a9c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a69      	ldr	r2, [pc, #420]	; (8006bf8 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d022      	beq.n	8006a9c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a68      	ldr	r2, [pc, #416]	; (8006bfc <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d01d      	beq.n	8006a9c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a66      	ldr	r2, [pc, #408]	; (8006c00 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d018      	beq.n	8006a9c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a65      	ldr	r2, [pc, #404]	; (8006c04 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d013      	beq.n	8006a9c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a63      	ldr	r2, [pc, #396]	; (8006c08 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d00e      	beq.n	8006a9c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a62      	ldr	r2, [pc, #392]	; (8006c0c <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d009      	beq.n	8006a9c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a60      	ldr	r2, [pc, #384]	; (8006c10 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d004      	beq.n	8006a9c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a5f      	ldr	r2, [pc, #380]	; (8006c14 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d101      	bne.n	8006aa0 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e000      	b.n	8006aa2 <HAL_DMAEx_MultiBufferStart_IT+0x546>
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d01a      	beq.n	8006adc <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d007      	beq.n	8006ac4 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006abe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ac2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d007      	beq.n	8006adc <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ad6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ada:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a35      	ldr	r2, [pc, #212]	; (8006bb8 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d04a      	beq.n	8006b7c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a34      	ldr	r2, [pc, #208]	; (8006bbc <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d045      	beq.n	8006b7c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a32      	ldr	r2, [pc, #200]	; (8006bc0 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d040      	beq.n	8006b7c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a31      	ldr	r2, [pc, #196]	; (8006bc4 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d03b      	beq.n	8006b7c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a2f      	ldr	r2, [pc, #188]	; (8006bc8 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d036      	beq.n	8006b7c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a2e      	ldr	r2, [pc, #184]	; (8006bcc <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d031      	beq.n	8006b7c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a2c      	ldr	r2, [pc, #176]	; (8006bd0 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d02c      	beq.n	8006b7c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a2b      	ldr	r2, [pc, #172]	; (8006bd4 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d027      	beq.n	8006b7c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a29      	ldr	r2, [pc, #164]	; (8006bd8 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d022      	beq.n	8006b7c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a28      	ldr	r2, [pc, #160]	; (8006bdc <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d01d      	beq.n	8006b7c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a26      	ldr	r2, [pc, #152]	; (8006be0 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d018      	beq.n	8006b7c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a25      	ldr	r2, [pc, #148]	; (8006be4 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d013      	beq.n	8006b7c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a23      	ldr	r2, [pc, #140]	; (8006be8 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d00e      	beq.n	8006b7c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a22      	ldr	r2, [pc, #136]	; (8006bec <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d009      	beq.n	8006b7c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a20      	ldr	r2, [pc, #128]	; (8006bf0 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d004      	beq.n	8006b7c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a1f      	ldr	r2, [pc, #124]	; (8006bf4 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d108      	bne.n	8006b8e <HAL_DMAEx_MultiBufferStart_IT+0x632>
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f042 0201 	orr.w	r2, r2, #1
 8006b8a:	601a      	str	r2, [r3, #0]
 8006b8c:	e00e      	b.n	8006bac <HAL_DMAEx_MultiBufferStart_IT+0x650>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f042 0201 	orr.w	r2, r2, #1
 8006b9c:	601a      	str	r2, [r3, #0]
 8006b9e:	e005      	b.n	8006bac <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ba6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006bac:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3718      	adds	r7, #24
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	40020010 	.word	0x40020010
 8006bbc:	40020028 	.word	0x40020028
 8006bc0:	40020040 	.word	0x40020040
 8006bc4:	40020058 	.word	0x40020058
 8006bc8:	40020070 	.word	0x40020070
 8006bcc:	40020088 	.word	0x40020088
 8006bd0:	400200a0 	.word	0x400200a0
 8006bd4:	400200b8 	.word	0x400200b8
 8006bd8:	40020410 	.word	0x40020410
 8006bdc:	40020428 	.word	0x40020428
 8006be0:	40020440 	.word	0x40020440
 8006be4:	40020458 	.word	0x40020458
 8006be8:	40020470 	.word	0x40020470
 8006bec:	40020488 	.word	0x40020488
 8006bf0:	400204a0 	.word	0x400204a0
 8006bf4:	400204b8 	.word	0x400204b8
 8006bf8:	58025408 	.word	0x58025408
 8006bfc:	5802541c 	.word	0x5802541c
 8006c00:	58025430 	.word	0x58025430
 8006c04:	58025444 	.word	0x58025444
 8006c08:	58025458 	.word	0x58025458
 8006c0c:	5802546c 	.word	0x5802546c
 8006c10:	58025480 	.word	0x58025480
 8006c14:	58025494 	.word	0x58025494

08006c18 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	4613      	mov	r3, r2
 8006c24:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a39      	ldr	r2, [pc, #228]	; (8006d10 <HAL_DMAEx_ChangeMemory+0xf8>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d04a      	beq.n	8006cc6 <HAL_DMAEx_ChangeMemory+0xae>
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a37      	ldr	r2, [pc, #220]	; (8006d14 <HAL_DMAEx_ChangeMemory+0xfc>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d045      	beq.n	8006cc6 <HAL_DMAEx_ChangeMemory+0xae>
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a36      	ldr	r2, [pc, #216]	; (8006d18 <HAL_DMAEx_ChangeMemory+0x100>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d040      	beq.n	8006cc6 <HAL_DMAEx_ChangeMemory+0xae>
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a34      	ldr	r2, [pc, #208]	; (8006d1c <HAL_DMAEx_ChangeMemory+0x104>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d03b      	beq.n	8006cc6 <HAL_DMAEx_ChangeMemory+0xae>
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a33      	ldr	r2, [pc, #204]	; (8006d20 <HAL_DMAEx_ChangeMemory+0x108>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d036      	beq.n	8006cc6 <HAL_DMAEx_ChangeMemory+0xae>
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a31      	ldr	r2, [pc, #196]	; (8006d24 <HAL_DMAEx_ChangeMemory+0x10c>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d031      	beq.n	8006cc6 <HAL_DMAEx_ChangeMemory+0xae>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a30      	ldr	r2, [pc, #192]	; (8006d28 <HAL_DMAEx_ChangeMemory+0x110>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d02c      	beq.n	8006cc6 <HAL_DMAEx_ChangeMemory+0xae>
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a2e      	ldr	r2, [pc, #184]	; (8006d2c <HAL_DMAEx_ChangeMemory+0x114>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d027      	beq.n	8006cc6 <HAL_DMAEx_ChangeMemory+0xae>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a2d      	ldr	r2, [pc, #180]	; (8006d30 <HAL_DMAEx_ChangeMemory+0x118>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d022      	beq.n	8006cc6 <HAL_DMAEx_ChangeMemory+0xae>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a2b      	ldr	r2, [pc, #172]	; (8006d34 <HAL_DMAEx_ChangeMemory+0x11c>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d01d      	beq.n	8006cc6 <HAL_DMAEx_ChangeMemory+0xae>
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a2a      	ldr	r2, [pc, #168]	; (8006d38 <HAL_DMAEx_ChangeMemory+0x120>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d018      	beq.n	8006cc6 <HAL_DMAEx_ChangeMemory+0xae>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a28      	ldr	r2, [pc, #160]	; (8006d3c <HAL_DMAEx_ChangeMemory+0x124>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d013      	beq.n	8006cc6 <HAL_DMAEx_ChangeMemory+0xae>
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a27      	ldr	r2, [pc, #156]	; (8006d40 <HAL_DMAEx_ChangeMemory+0x128>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d00e      	beq.n	8006cc6 <HAL_DMAEx_ChangeMemory+0xae>
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a25      	ldr	r2, [pc, #148]	; (8006d44 <HAL_DMAEx_ChangeMemory+0x12c>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d009      	beq.n	8006cc6 <HAL_DMAEx_ChangeMemory+0xae>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a24      	ldr	r2, [pc, #144]	; (8006d48 <HAL_DMAEx_ChangeMemory+0x130>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d004      	beq.n	8006cc6 <HAL_DMAEx_ChangeMemory+0xae>
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a22      	ldr	r2, [pc, #136]	; (8006d4c <HAL_DMAEx_ChangeMemory+0x134>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d101      	bne.n	8006cca <HAL_DMAEx_ChangeMemory+0xb2>
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e000      	b.n	8006ccc <HAL_DMAEx_ChangeMemory+0xb4>
 8006cca:	2300      	movs	r3, #0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00c      	beq.n	8006cea <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 8006cd0:	79fb      	ldrb	r3, [r7, #7]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d104      	bne.n	8006ce0 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	68ba      	ldr	r2, [r7, #8]
 8006cdc:	60da      	str	r2, [r3, #12]
 8006cde:	e010      	b.n	8006d02 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68ba      	ldr	r2, [r7, #8]
 8006ce6:	611a      	str	r2, [r3, #16]
 8006ce8:	e00b      	b.n	8006d02 <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 8006cea:	79fb      	ldrb	r3, [r7, #7]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d104      	bne.n	8006cfa <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68ba      	ldr	r2, [r7, #8]
 8006cf6:	60da      	str	r2, [r3, #12]
 8006cf8:	e003      	b.n	8006d02 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68ba      	ldr	r2, [r7, #8]
 8006d00:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3714      	adds	r7, #20
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr
 8006d10:	40020010 	.word	0x40020010
 8006d14:	40020028 	.word	0x40020028
 8006d18:	40020040 	.word	0x40020040
 8006d1c:	40020058 	.word	0x40020058
 8006d20:	40020070 	.word	0x40020070
 8006d24:	40020088 	.word	0x40020088
 8006d28:	400200a0 	.word	0x400200a0
 8006d2c:	400200b8 	.word	0x400200b8
 8006d30:	40020410 	.word	0x40020410
 8006d34:	40020428 	.word	0x40020428
 8006d38:	40020440 	.word	0x40020440
 8006d3c:	40020458 	.word	0x40020458
 8006d40:	40020470 	.word	0x40020470
 8006d44:	40020488 	.word	0x40020488
 8006d48:	400204a0 	.word	0x400204a0
 8006d4c:	400204b8 	.word	0x400204b8

08006d50 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b085      	sub	sp, #20
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	607a      	str	r2, [r7, #4]
 8006d5c:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a46      	ldr	r2, [pc, #280]	; (8006e7c <DMA_MultiBufferSetConfig+0x12c>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d04a      	beq.n	8006dfe <DMA_MultiBufferSetConfig+0xae>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a44      	ldr	r2, [pc, #272]	; (8006e80 <DMA_MultiBufferSetConfig+0x130>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d045      	beq.n	8006dfe <DMA_MultiBufferSetConfig+0xae>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a43      	ldr	r2, [pc, #268]	; (8006e84 <DMA_MultiBufferSetConfig+0x134>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d040      	beq.n	8006dfe <DMA_MultiBufferSetConfig+0xae>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a41      	ldr	r2, [pc, #260]	; (8006e88 <DMA_MultiBufferSetConfig+0x138>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d03b      	beq.n	8006dfe <DMA_MultiBufferSetConfig+0xae>
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a40      	ldr	r2, [pc, #256]	; (8006e8c <DMA_MultiBufferSetConfig+0x13c>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d036      	beq.n	8006dfe <DMA_MultiBufferSetConfig+0xae>
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a3e      	ldr	r2, [pc, #248]	; (8006e90 <DMA_MultiBufferSetConfig+0x140>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d031      	beq.n	8006dfe <DMA_MultiBufferSetConfig+0xae>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a3d      	ldr	r2, [pc, #244]	; (8006e94 <DMA_MultiBufferSetConfig+0x144>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d02c      	beq.n	8006dfe <DMA_MultiBufferSetConfig+0xae>
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a3b      	ldr	r2, [pc, #236]	; (8006e98 <DMA_MultiBufferSetConfig+0x148>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d027      	beq.n	8006dfe <DMA_MultiBufferSetConfig+0xae>
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a3a      	ldr	r2, [pc, #232]	; (8006e9c <DMA_MultiBufferSetConfig+0x14c>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d022      	beq.n	8006dfe <DMA_MultiBufferSetConfig+0xae>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a38      	ldr	r2, [pc, #224]	; (8006ea0 <DMA_MultiBufferSetConfig+0x150>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d01d      	beq.n	8006dfe <DMA_MultiBufferSetConfig+0xae>
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a37      	ldr	r2, [pc, #220]	; (8006ea4 <DMA_MultiBufferSetConfig+0x154>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d018      	beq.n	8006dfe <DMA_MultiBufferSetConfig+0xae>
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a35      	ldr	r2, [pc, #212]	; (8006ea8 <DMA_MultiBufferSetConfig+0x158>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d013      	beq.n	8006dfe <DMA_MultiBufferSetConfig+0xae>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a34      	ldr	r2, [pc, #208]	; (8006eac <DMA_MultiBufferSetConfig+0x15c>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d00e      	beq.n	8006dfe <DMA_MultiBufferSetConfig+0xae>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a32      	ldr	r2, [pc, #200]	; (8006eb0 <DMA_MultiBufferSetConfig+0x160>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d009      	beq.n	8006dfe <DMA_MultiBufferSetConfig+0xae>
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a31      	ldr	r2, [pc, #196]	; (8006eb4 <DMA_MultiBufferSetConfig+0x164>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d004      	beq.n	8006dfe <DMA_MultiBufferSetConfig+0xae>
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a2f      	ldr	r2, [pc, #188]	; (8006eb8 <DMA_MultiBufferSetConfig+0x168>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d101      	bne.n	8006e02 <DMA_MultiBufferSetConfig+0xb2>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e000      	b.n	8006e04 <DMA_MultiBufferSetConfig+0xb4>
 8006e02:	2300      	movs	r3, #0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d019      	beq.n	8006e3c <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	683a      	ldr	r2, [r7, #0]
 8006e0e:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	2b40      	cmp	r3, #64	; 0x40
 8006e16:	d108      	bne.n	8006e2a <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68ba      	ldr	r2, [r7, #8]
 8006e26:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8006e28:	e021      	b.n	8006e6e <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68ba      	ldr	r2, [r7, #8]
 8006e30:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	60da      	str	r2, [r3, #12]
}
 8006e3a:	e018      	b.n	8006e6e <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	683a      	ldr	r2, [r7, #0]
 8006e42:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	2b40      	cmp	r3, #64	; 0x40
 8006e4a:	d108      	bne.n	8006e5e <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	68ba      	ldr	r2, [r7, #8]
 8006e5a:	60da      	str	r2, [r3, #12]
}
 8006e5c:	e007      	b.n	8006e6e <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68ba      	ldr	r2, [r7, #8]
 8006e64:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	60da      	str	r2, [r3, #12]
}
 8006e6e:	bf00      	nop
 8006e70:	3714      	adds	r7, #20
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	40020010 	.word	0x40020010
 8006e80:	40020028 	.word	0x40020028
 8006e84:	40020040 	.word	0x40020040
 8006e88:	40020058 	.word	0x40020058
 8006e8c:	40020070 	.word	0x40020070
 8006e90:	40020088 	.word	0x40020088
 8006e94:	400200a0 	.word	0x400200a0
 8006e98:	400200b8 	.word	0x400200b8
 8006e9c:	40020410 	.word	0x40020410
 8006ea0:	40020428 	.word	0x40020428
 8006ea4:	40020440 	.word	0x40020440
 8006ea8:	40020458 	.word	0x40020458
 8006eac:	40020470 	.word	0x40020470
 8006eb0:	40020488 	.word	0x40020488
 8006eb4:	400204a0 	.word	0x400204a0
 8006eb8:	400204b8 	.word	0x400204b8

08006ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b089      	sub	sp, #36	; 0x24
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006eca:	4b86      	ldr	r3, [pc, #536]	; (80070e4 <HAL_GPIO_Init+0x228>)
 8006ecc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006ece:	e18c      	b.n	80071ea <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	2101      	movs	r1, #1
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8006edc:	4013      	ands	r3, r2
 8006ede:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	f000 817e 	beq.w	80071e4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	f003 0303 	and.w	r3, r3, #3
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d005      	beq.n	8006f00 <HAL_GPIO_Init+0x44>
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	f003 0303 	and.w	r3, r3, #3
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d130      	bne.n	8006f62 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	005b      	lsls	r3, r3, #1
 8006f0a:	2203      	movs	r2, #3
 8006f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f10:	43db      	mvns	r3, r3
 8006f12:	69ba      	ldr	r2, [r7, #24]
 8006f14:	4013      	ands	r3, r2
 8006f16:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	68da      	ldr	r2, [r3, #12]
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	005b      	lsls	r3, r3, #1
 8006f20:	fa02 f303 	lsl.w	r3, r2, r3
 8006f24:	69ba      	ldr	r2, [r7, #24]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	69ba      	ldr	r2, [r7, #24]
 8006f2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006f36:	2201      	movs	r2, #1
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f3e:	43db      	mvns	r3, r3
 8006f40:	69ba      	ldr	r2, [r7, #24]
 8006f42:	4013      	ands	r3, r2
 8006f44:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	091b      	lsrs	r3, r3, #4
 8006f4c:	f003 0201 	and.w	r2, r3, #1
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	fa02 f303 	lsl.w	r3, r2, r3
 8006f56:	69ba      	ldr	r2, [r7, #24]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	69ba      	ldr	r2, [r7, #24]
 8006f60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	f003 0303 	and.w	r3, r3, #3
 8006f6a:	2b03      	cmp	r3, #3
 8006f6c:	d017      	beq.n	8006f9e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	005b      	lsls	r3, r3, #1
 8006f78:	2203      	movs	r2, #3
 8006f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f7e:	43db      	mvns	r3, r3
 8006f80:	69ba      	ldr	r2, [r7, #24]
 8006f82:	4013      	ands	r3, r2
 8006f84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	689a      	ldr	r2, [r3, #8]
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	005b      	lsls	r3, r3, #1
 8006f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f92:	69ba      	ldr	r2, [r7, #24]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	69ba      	ldr	r2, [r7, #24]
 8006f9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	f003 0303 	and.w	r3, r3, #3
 8006fa6:	2b02      	cmp	r3, #2
 8006fa8:	d123      	bne.n	8006ff2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	08da      	lsrs	r2, r3, #3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	3208      	adds	r2, #8
 8006fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	f003 0307 	and.w	r3, r3, #7
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	220f      	movs	r2, #15
 8006fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fc6:	43db      	mvns	r3, r3
 8006fc8:	69ba      	ldr	r2, [r7, #24]
 8006fca:	4013      	ands	r3, r2
 8006fcc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	691a      	ldr	r2, [r3, #16]
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	f003 0307 	and.w	r3, r3, #7
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	fa02 f303 	lsl.w	r3, r2, r3
 8006fde:	69ba      	ldr	r2, [r7, #24]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	08da      	lsrs	r2, r3, #3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	3208      	adds	r2, #8
 8006fec:	69b9      	ldr	r1, [r7, #24]
 8006fee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	005b      	lsls	r3, r3, #1
 8006ffc:	2203      	movs	r2, #3
 8006ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8007002:	43db      	mvns	r3, r3
 8007004:	69ba      	ldr	r2, [r7, #24]
 8007006:	4013      	ands	r3, r2
 8007008:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	f003 0203 	and.w	r2, r3, #3
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	005b      	lsls	r3, r3, #1
 8007016:	fa02 f303 	lsl.w	r3, r2, r3
 800701a:	69ba      	ldr	r2, [r7, #24]
 800701c:	4313      	orrs	r3, r2
 800701e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	69ba      	ldr	r2, [r7, #24]
 8007024:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800702e:	2b00      	cmp	r3, #0
 8007030:	f000 80d8 	beq.w	80071e4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007034:	4b2c      	ldr	r3, [pc, #176]	; (80070e8 <HAL_GPIO_Init+0x22c>)
 8007036:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800703a:	4a2b      	ldr	r2, [pc, #172]	; (80070e8 <HAL_GPIO_Init+0x22c>)
 800703c:	f043 0302 	orr.w	r3, r3, #2
 8007040:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007044:	4b28      	ldr	r3, [pc, #160]	; (80070e8 <HAL_GPIO_Init+0x22c>)
 8007046:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800704a:	f003 0302 	and.w	r3, r3, #2
 800704e:	60fb      	str	r3, [r7, #12]
 8007050:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007052:	4a26      	ldr	r2, [pc, #152]	; (80070ec <HAL_GPIO_Init+0x230>)
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	089b      	lsrs	r3, r3, #2
 8007058:	3302      	adds	r3, #2
 800705a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800705e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	f003 0303 	and.w	r3, r3, #3
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	220f      	movs	r2, #15
 800706a:	fa02 f303 	lsl.w	r3, r2, r3
 800706e:	43db      	mvns	r3, r3
 8007070:	69ba      	ldr	r2, [r7, #24]
 8007072:	4013      	ands	r3, r2
 8007074:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a1d      	ldr	r2, [pc, #116]	; (80070f0 <HAL_GPIO_Init+0x234>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d04a      	beq.n	8007114 <HAL_GPIO_Init+0x258>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a1c      	ldr	r2, [pc, #112]	; (80070f4 <HAL_GPIO_Init+0x238>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d02b      	beq.n	80070de <HAL_GPIO_Init+0x222>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a1b      	ldr	r2, [pc, #108]	; (80070f8 <HAL_GPIO_Init+0x23c>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d025      	beq.n	80070da <HAL_GPIO_Init+0x21e>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a1a      	ldr	r2, [pc, #104]	; (80070fc <HAL_GPIO_Init+0x240>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d01f      	beq.n	80070d6 <HAL_GPIO_Init+0x21a>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a19      	ldr	r2, [pc, #100]	; (8007100 <HAL_GPIO_Init+0x244>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d019      	beq.n	80070d2 <HAL_GPIO_Init+0x216>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a18      	ldr	r2, [pc, #96]	; (8007104 <HAL_GPIO_Init+0x248>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d013      	beq.n	80070ce <HAL_GPIO_Init+0x212>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a17      	ldr	r2, [pc, #92]	; (8007108 <HAL_GPIO_Init+0x24c>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d00d      	beq.n	80070ca <HAL_GPIO_Init+0x20e>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a16      	ldr	r2, [pc, #88]	; (800710c <HAL_GPIO_Init+0x250>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d007      	beq.n	80070c6 <HAL_GPIO_Init+0x20a>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a15      	ldr	r2, [pc, #84]	; (8007110 <HAL_GPIO_Init+0x254>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d101      	bne.n	80070c2 <HAL_GPIO_Init+0x206>
 80070be:	2309      	movs	r3, #9
 80070c0:	e029      	b.n	8007116 <HAL_GPIO_Init+0x25a>
 80070c2:	230a      	movs	r3, #10
 80070c4:	e027      	b.n	8007116 <HAL_GPIO_Init+0x25a>
 80070c6:	2307      	movs	r3, #7
 80070c8:	e025      	b.n	8007116 <HAL_GPIO_Init+0x25a>
 80070ca:	2306      	movs	r3, #6
 80070cc:	e023      	b.n	8007116 <HAL_GPIO_Init+0x25a>
 80070ce:	2305      	movs	r3, #5
 80070d0:	e021      	b.n	8007116 <HAL_GPIO_Init+0x25a>
 80070d2:	2304      	movs	r3, #4
 80070d4:	e01f      	b.n	8007116 <HAL_GPIO_Init+0x25a>
 80070d6:	2303      	movs	r3, #3
 80070d8:	e01d      	b.n	8007116 <HAL_GPIO_Init+0x25a>
 80070da:	2302      	movs	r3, #2
 80070dc:	e01b      	b.n	8007116 <HAL_GPIO_Init+0x25a>
 80070de:	2301      	movs	r3, #1
 80070e0:	e019      	b.n	8007116 <HAL_GPIO_Init+0x25a>
 80070e2:	bf00      	nop
 80070e4:	58000080 	.word	0x58000080
 80070e8:	58024400 	.word	0x58024400
 80070ec:	58000400 	.word	0x58000400
 80070f0:	58020000 	.word	0x58020000
 80070f4:	58020400 	.word	0x58020400
 80070f8:	58020800 	.word	0x58020800
 80070fc:	58020c00 	.word	0x58020c00
 8007100:	58021000 	.word	0x58021000
 8007104:	58021400 	.word	0x58021400
 8007108:	58021800 	.word	0x58021800
 800710c:	58021c00 	.word	0x58021c00
 8007110:	58022400 	.word	0x58022400
 8007114:	2300      	movs	r3, #0
 8007116:	69fa      	ldr	r2, [r7, #28]
 8007118:	f002 0203 	and.w	r2, r2, #3
 800711c:	0092      	lsls	r2, r2, #2
 800711e:	4093      	lsls	r3, r2
 8007120:	69ba      	ldr	r2, [r7, #24]
 8007122:	4313      	orrs	r3, r2
 8007124:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007126:	4938      	ldr	r1, [pc, #224]	; (8007208 <HAL_GPIO_Init+0x34c>)
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	089b      	lsrs	r3, r3, #2
 800712c:	3302      	adds	r3, #2
 800712e:	69ba      	ldr	r2, [r7, #24]
 8007130:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	43db      	mvns	r3, r3
 8007140:	69ba      	ldr	r2, [r7, #24]
 8007142:	4013      	ands	r3, r2
 8007144:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800714e:	2b00      	cmp	r3, #0
 8007150:	d003      	beq.n	800715a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007152:	69ba      	ldr	r2, [r7, #24]
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	4313      	orrs	r3, r2
 8007158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800715a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800715e:	69bb      	ldr	r3, [r7, #24]
 8007160:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	43db      	mvns	r3, r3
 800716e:	69ba      	ldr	r2, [r7, #24]
 8007170:	4013      	ands	r3, r2
 8007172:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800717c:	2b00      	cmp	r3, #0
 800717e:	d003      	beq.n	8007188 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007180:	69ba      	ldr	r2, [r7, #24]
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	4313      	orrs	r3, r2
 8007186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007188:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	43db      	mvns	r3, r3
 800719a:	69ba      	ldr	r2, [r7, #24]
 800719c:	4013      	ands	r3, r2
 800719e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d003      	beq.n	80071b4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80071ac:	69ba      	ldr	r2, [r7, #24]
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	69ba      	ldr	r2, [r7, #24]
 80071b8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	43db      	mvns	r3, r3
 80071c4:	69ba      	ldr	r2, [r7, #24]
 80071c6:	4013      	ands	r3, r2
 80071c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d003      	beq.n	80071de <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80071d6:	69ba      	ldr	r2, [r7, #24]
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	4313      	orrs	r3, r2
 80071dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	69ba      	ldr	r2, [r7, #24]
 80071e2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	3301      	adds	r3, #1
 80071e8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	fa22 f303 	lsr.w	r3, r2, r3
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f47f ae6b 	bne.w	8006ed0 <HAL_GPIO_Init+0x14>
  }
}
 80071fa:	bf00      	nop
 80071fc:	bf00      	nop
 80071fe:	3724      	adds	r7, #36	; 0x24
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr
 8007208:	58000400 	.word	0x58000400

0800720c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800720c:	b480      	push	{r7}
 800720e:	b085      	sub	sp, #20
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	460b      	mov	r3, r1
 8007216:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	691a      	ldr	r2, [r3, #16]
 800721c:	887b      	ldrh	r3, [r7, #2]
 800721e:	4013      	ands	r3, r2
 8007220:	2b00      	cmp	r3, #0
 8007222:	d002      	beq.n	800722a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007224:	2301      	movs	r3, #1
 8007226:	73fb      	strb	r3, [r7, #15]
 8007228:	e001      	b.n	800722e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800722a:	2300      	movs	r3, #0
 800722c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800722e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007230:	4618      	mov	r0, r3
 8007232:	3714      	adds	r7, #20
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	460b      	mov	r3, r1
 8007246:	807b      	strh	r3, [r7, #2]
 8007248:	4613      	mov	r3, r2
 800724a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800724c:	787b      	ldrb	r3, [r7, #1]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d003      	beq.n	800725a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007252:	887a      	ldrh	r2, [r7, #2]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007258:	e003      	b.n	8007262 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800725a:	887b      	ldrh	r3, [r7, #2]
 800725c:	041a      	lsls	r2, r3, #16
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	619a      	str	r2, [r3, #24]
}
 8007262:	bf00      	nop
 8007264:	370c      	adds	r7, #12
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr

0800726e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800726e:	b480      	push	{r7}
 8007270:	b085      	sub	sp, #20
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
 8007276:	460b      	mov	r3, r1
 8007278:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	695b      	ldr	r3, [r3, #20]
 800727e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007280:	887a      	ldrh	r2, [r7, #2]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	4013      	ands	r3, r2
 8007286:	041a      	lsls	r2, r3, #16
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	43d9      	mvns	r1, r3
 800728c:	887b      	ldrh	r3, [r7, #2]
 800728e:	400b      	ands	r3, r1
 8007290:	431a      	orrs	r2, r3
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	619a      	str	r2, [r3, #24]
}
 8007296:	bf00      	nop
 8007298:	3714      	adds	r7, #20
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
	...

080072a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d101      	bne.n	80072b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e07f      	b.n	80073b6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d106      	bne.n	80072d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f7f9 fb12 	bl	80008f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2224      	movs	r2, #36	; 0x24
 80072d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f022 0201 	bic.w	r2, r2, #1
 80072e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	685a      	ldr	r2, [r3, #4]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80072f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	689a      	ldr	r2, [r3, #8]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007304:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	2b01      	cmp	r3, #1
 800730c:	d107      	bne.n	800731e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	689a      	ldr	r2, [r3, #8]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800731a:	609a      	str	r2, [r3, #8]
 800731c:	e006      	b.n	800732c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	689a      	ldr	r2, [r3, #8]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800732a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	2b02      	cmp	r3, #2
 8007332:	d104      	bne.n	800733e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800733c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	6859      	ldr	r1, [r3, #4]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	4b1d      	ldr	r3, [pc, #116]	; (80073c0 <HAL_I2C_Init+0x11c>)
 800734a:	430b      	orrs	r3, r1
 800734c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	68da      	ldr	r2, [r3, #12]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800735c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	691a      	ldr	r2, [r3, #16]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	695b      	ldr	r3, [r3, #20]
 8007366:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	699b      	ldr	r3, [r3, #24]
 800736e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	430a      	orrs	r2, r1
 8007376:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	69d9      	ldr	r1, [r3, #28]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6a1a      	ldr	r2, [r3, #32]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	430a      	orrs	r2, r1
 8007386:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f042 0201 	orr.w	r2, r2, #1
 8007396:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2220      	movs	r2, #32
 80073a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3708      	adds	r7, #8
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	02008000 	.word	0x02008000

080073c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	2b20      	cmp	r3, #32
 80073d8:	d138      	bne.n	800744c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d101      	bne.n	80073e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80073e4:	2302      	movs	r3, #2
 80073e6:	e032      	b.n	800744e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2224      	movs	r2, #36	; 0x24
 80073f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f022 0201 	bic.w	r2, r2, #1
 8007406:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007416:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	6819      	ldr	r1, [r3, #0]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	683a      	ldr	r2, [r7, #0]
 8007424:	430a      	orrs	r2, r1
 8007426:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f042 0201 	orr.w	r2, r2, #1
 8007436:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2220      	movs	r2, #32
 800743c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007448:	2300      	movs	r3, #0
 800744a:	e000      	b.n	800744e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800744c:	2302      	movs	r3, #2
  }
}
 800744e:	4618      	mov	r0, r3
 8007450:	370c      	adds	r7, #12
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr

0800745a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800745a:	b480      	push	{r7}
 800745c:	b085      	sub	sp, #20
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
 8007462:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800746a:	b2db      	uxtb	r3, r3
 800746c:	2b20      	cmp	r3, #32
 800746e:	d139      	bne.n	80074e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007476:	2b01      	cmp	r3, #1
 8007478:	d101      	bne.n	800747e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800747a:	2302      	movs	r3, #2
 800747c:	e033      	b.n	80074e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2201      	movs	r2, #1
 8007482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2224      	movs	r2, #36	; 0x24
 800748a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f022 0201 	bic.w	r2, r2, #1
 800749c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80074ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	021b      	lsls	r3, r3, #8
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f042 0201 	orr.w	r2, r2, #1
 80074ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2220      	movs	r2, #32
 80074d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80074e0:	2300      	movs	r3, #0
 80074e2:	e000      	b.n	80074e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80074e4:	2302      	movs	r3, #2
  }
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3714      	adds	r7, #20
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr
	...

080074f4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 80074f4:	b480      	push	{r7}
 80074f6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 80074f8:	4b05      	ldr	r3, [pc, #20]	; (8007510 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a04      	ldr	r2, [pc, #16]	; (8007510 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80074fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007502:	6013      	str	r3, [r2, #0]
}
 8007504:	bf00      	nop
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr
 800750e:	bf00      	nop
 8007510:	58024800 	.word	0x58024800

08007514 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800751c:	4b19      	ldr	r3, [pc, #100]	; (8007584 <HAL_PWREx_ConfigSupply+0x70>)
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	f003 0304 	and.w	r3, r3, #4
 8007524:	2b04      	cmp	r3, #4
 8007526:	d00a      	beq.n	800753e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007528:	4b16      	ldr	r3, [pc, #88]	; (8007584 <HAL_PWREx_ConfigSupply+0x70>)
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	f003 0307 	and.w	r3, r3, #7
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	429a      	cmp	r2, r3
 8007534:	d001      	beq.n	800753a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	e01f      	b.n	800757a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800753a:	2300      	movs	r3, #0
 800753c:	e01d      	b.n	800757a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800753e:	4b11      	ldr	r3, [pc, #68]	; (8007584 <HAL_PWREx_ConfigSupply+0x70>)
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	f023 0207 	bic.w	r2, r3, #7
 8007546:	490f      	ldr	r1, [pc, #60]	; (8007584 <HAL_PWREx_ConfigSupply+0x70>)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4313      	orrs	r3, r2
 800754c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800754e:	f7fc f895 	bl	800367c <HAL_GetTick>
 8007552:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007554:	e009      	b.n	800756a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007556:	f7fc f891 	bl	800367c <HAL_GetTick>
 800755a:	4602      	mov	r2, r0
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	1ad3      	subs	r3, r2, r3
 8007560:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007564:	d901      	bls.n	800756a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e007      	b.n	800757a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800756a:	4b06      	ldr	r3, [pc, #24]	; (8007584 <HAL_PWREx_ConfigSupply+0x70>)
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007572:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007576:	d1ee      	bne.n	8007556 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3710      	adds	r7, #16
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	58024800 	.word	0x58024800

08007588 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b08c      	sub	sp, #48	; 0x30
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d101      	bne.n	800759a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e3c8      	b.n	8007d2c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f003 0301 	and.w	r3, r3, #1
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	f000 8087 	beq.w	80076b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80075a8:	4b88      	ldr	r3, [pc, #544]	; (80077cc <HAL_RCC_OscConfig+0x244>)
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80075b2:	4b86      	ldr	r3, [pc, #536]	; (80077cc <HAL_RCC_OscConfig+0x244>)
 80075b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80075b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ba:	2b10      	cmp	r3, #16
 80075bc:	d007      	beq.n	80075ce <HAL_RCC_OscConfig+0x46>
 80075be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c0:	2b18      	cmp	r3, #24
 80075c2:	d110      	bne.n	80075e6 <HAL_RCC_OscConfig+0x5e>
 80075c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c6:	f003 0303 	and.w	r3, r3, #3
 80075ca:	2b02      	cmp	r3, #2
 80075cc:	d10b      	bne.n	80075e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075ce:	4b7f      	ldr	r3, [pc, #508]	; (80077cc <HAL_RCC_OscConfig+0x244>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d06c      	beq.n	80076b4 <HAL_RCC_OscConfig+0x12c>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d168      	bne.n	80076b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e3a2      	b.n	8007d2c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075ee:	d106      	bne.n	80075fe <HAL_RCC_OscConfig+0x76>
 80075f0:	4b76      	ldr	r3, [pc, #472]	; (80077cc <HAL_RCC_OscConfig+0x244>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a75      	ldr	r2, [pc, #468]	; (80077cc <HAL_RCC_OscConfig+0x244>)
 80075f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075fa:	6013      	str	r3, [r2, #0]
 80075fc:	e02e      	b.n	800765c <HAL_RCC_OscConfig+0xd4>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d10c      	bne.n	8007620 <HAL_RCC_OscConfig+0x98>
 8007606:	4b71      	ldr	r3, [pc, #452]	; (80077cc <HAL_RCC_OscConfig+0x244>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a70      	ldr	r2, [pc, #448]	; (80077cc <HAL_RCC_OscConfig+0x244>)
 800760c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007610:	6013      	str	r3, [r2, #0]
 8007612:	4b6e      	ldr	r3, [pc, #440]	; (80077cc <HAL_RCC_OscConfig+0x244>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a6d      	ldr	r2, [pc, #436]	; (80077cc <HAL_RCC_OscConfig+0x244>)
 8007618:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800761c:	6013      	str	r3, [r2, #0]
 800761e:	e01d      	b.n	800765c <HAL_RCC_OscConfig+0xd4>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007628:	d10c      	bne.n	8007644 <HAL_RCC_OscConfig+0xbc>
 800762a:	4b68      	ldr	r3, [pc, #416]	; (80077cc <HAL_RCC_OscConfig+0x244>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a67      	ldr	r2, [pc, #412]	; (80077cc <HAL_RCC_OscConfig+0x244>)
 8007630:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007634:	6013      	str	r3, [r2, #0]
 8007636:	4b65      	ldr	r3, [pc, #404]	; (80077cc <HAL_RCC_OscConfig+0x244>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a64      	ldr	r2, [pc, #400]	; (80077cc <HAL_RCC_OscConfig+0x244>)
 800763c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007640:	6013      	str	r3, [r2, #0]
 8007642:	e00b      	b.n	800765c <HAL_RCC_OscConfig+0xd4>
 8007644:	4b61      	ldr	r3, [pc, #388]	; (80077cc <HAL_RCC_OscConfig+0x244>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a60      	ldr	r2, [pc, #384]	; (80077cc <HAL_RCC_OscConfig+0x244>)
 800764a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800764e:	6013      	str	r3, [r2, #0]
 8007650:	4b5e      	ldr	r3, [pc, #376]	; (80077cc <HAL_RCC_OscConfig+0x244>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a5d      	ldr	r2, [pc, #372]	; (80077cc <HAL_RCC_OscConfig+0x244>)
 8007656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800765a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d013      	beq.n	800768c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007664:	f7fc f80a 	bl	800367c <HAL_GetTick>
 8007668:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800766a:	e008      	b.n	800767e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800766c:	f7fc f806 	bl	800367c <HAL_GetTick>
 8007670:	4602      	mov	r2, r0
 8007672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	2b64      	cmp	r3, #100	; 0x64
 8007678:	d901      	bls.n	800767e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800767a:	2303      	movs	r3, #3
 800767c:	e356      	b.n	8007d2c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800767e:	4b53      	ldr	r3, [pc, #332]	; (80077cc <HAL_RCC_OscConfig+0x244>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007686:	2b00      	cmp	r3, #0
 8007688:	d0f0      	beq.n	800766c <HAL_RCC_OscConfig+0xe4>
 800768a:	e014      	b.n	80076b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800768c:	f7fb fff6 	bl	800367c <HAL_GetTick>
 8007690:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007692:	e008      	b.n	80076a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007694:	f7fb fff2 	bl	800367c <HAL_GetTick>
 8007698:	4602      	mov	r2, r0
 800769a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769c:	1ad3      	subs	r3, r2, r3
 800769e:	2b64      	cmp	r3, #100	; 0x64
 80076a0:	d901      	bls.n	80076a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80076a2:	2303      	movs	r3, #3
 80076a4:	e342      	b.n	8007d2c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80076a6:	4b49      	ldr	r3, [pc, #292]	; (80077cc <HAL_RCC_OscConfig+0x244>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d1f0      	bne.n	8007694 <HAL_RCC_OscConfig+0x10c>
 80076b2:	e000      	b.n	80076b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 0302 	and.w	r3, r3, #2
 80076be:	2b00      	cmp	r3, #0
 80076c0:	f000 808c 	beq.w	80077dc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076c4:	4b41      	ldr	r3, [pc, #260]	; (80077cc <HAL_RCC_OscConfig+0x244>)
 80076c6:	691b      	ldr	r3, [r3, #16]
 80076c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076cc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80076ce:	4b3f      	ldr	r3, [pc, #252]	; (80077cc <HAL_RCC_OscConfig+0x244>)
 80076d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80076d4:	6a3b      	ldr	r3, [r7, #32]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d007      	beq.n	80076ea <HAL_RCC_OscConfig+0x162>
 80076da:	6a3b      	ldr	r3, [r7, #32]
 80076dc:	2b18      	cmp	r3, #24
 80076de:	d137      	bne.n	8007750 <HAL_RCC_OscConfig+0x1c8>
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	f003 0303 	and.w	r3, r3, #3
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d132      	bne.n	8007750 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80076ea:	4b38      	ldr	r3, [pc, #224]	; (80077cc <HAL_RCC_OscConfig+0x244>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 0304 	and.w	r3, r3, #4
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d005      	beq.n	8007702 <HAL_RCC_OscConfig+0x17a>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d101      	bne.n	8007702 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	e314      	b.n	8007d2c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007702:	4b32      	ldr	r3, [pc, #200]	; (80077cc <HAL_RCC_OscConfig+0x244>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f023 0219 	bic.w	r2, r3, #25
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	492f      	ldr	r1, [pc, #188]	; (80077cc <HAL_RCC_OscConfig+0x244>)
 8007710:	4313      	orrs	r3, r2
 8007712:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007714:	f7fb ffb2 	bl	800367c <HAL_GetTick>
 8007718:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800771a:	e008      	b.n	800772e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800771c:	f7fb ffae 	bl	800367c <HAL_GetTick>
 8007720:	4602      	mov	r2, r0
 8007722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007724:	1ad3      	subs	r3, r2, r3
 8007726:	2b02      	cmp	r3, #2
 8007728:	d901      	bls.n	800772e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	e2fe      	b.n	8007d2c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800772e:	4b27      	ldr	r3, [pc, #156]	; (80077cc <HAL_RCC_OscConfig+0x244>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 0304 	and.w	r3, r3, #4
 8007736:	2b00      	cmp	r3, #0
 8007738:	d0f0      	beq.n	800771c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800773a:	4b24      	ldr	r3, [pc, #144]	; (80077cc <HAL_RCC_OscConfig+0x244>)
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	061b      	lsls	r3, r3, #24
 8007748:	4920      	ldr	r1, [pc, #128]	; (80077cc <HAL_RCC_OscConfig+0x244>)
 800774a:	4313      	orrs	r3, r2
 800774c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800774e:	e045      	b.n	80077dc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d026      	beq.n	80077a6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007758:	4b1c      	ldr	r3, [pc, #112]	; (80077cc <HAL_RCC_OscConfig+0x244>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f023 0219 	bic.w	r2, r3, #25
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	4919      	ldr	r1, [pc, #100]	; (80077cc <HAL_RCC_OscConfig+0x244>)
 8007766:	4313      	orrs	r3, r2
 8007768:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800776a:	f7fb ff87 	bl	800367c <HAL_GetTick>
 800776e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007770:	e008      	b.n	8007784 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007772:	f7fb ff83 	bl	800367c <HAL_GetTick>
 8007776:	4602      	mov	r2, r0
 8007778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777a:	1ad3      	subs	r3, r2, r3
 800777c:	2b02      	cmp	r3, #2
 800777e:	d901      	bls.n	8007784 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007780:	2303      	movs	r3, #3
 8007782:	e2d3      	b.n	8007d2c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007784:	4b11      	ldr	r3, [pc, #68]	; (80077cc <HAL_RCC_OscConfig+0x244>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 0304 	and.w	r3, r3, #4
 800778c:	2b00      	cmp	r3, #0
 800778e:	d0f0      	beq.n	8007772 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007790:	4b0e      	ldr	r3, [pc, #56]	; (80077cc <HAL_RCC_OscConfig+0x244>)
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	061b      	lsls	r3, r3, #24
 800779e:	490b      	ldr	r1, [pc, #44]	; (80077cc <HAL_RCC_OscConfig+0x244>)
 80077a0:	4313      	orrs	r3, r2
 80077a2:	604b      	str	r3, [r1, #4]
 80077a4:	e01a      	b.n	80077dc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80077a6:	4b09      	ldr	r3, [pc, #36]	; (80077cc <HAL_RCC_OscConfig+0x244>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a08      	ldr	r2, [pc, #32]	; (80077cc <HAL_RCC_OscConfig+0x244>)
 80077ac:	f023 0301 	bic.w	r3, r3, #1
 80077b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077b2:	f7fb ff63 	bl	800367c <HAL_GetTick>
 80077b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80077b8:	e00a      	b.n	80077d0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077ba:	f7fb ff5f 	bl	800367c <HAL_GetTick>
 80077be:	4602      	mov	r2, r0
 80077c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c2:	1ad3      	subs	r3, r2, r3
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	d903      	bls.n	80077d0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80077c8:	2303      	movs	r3, #3
 80077ca:	e2af      	b.n	8007d2c <HAL_RCC_OscConfig+0x7a4>
 80077cc:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80077d0:	4b96      	ldr	r3, [pc, #600]	; (8007a2c <HAL_RCC_OscConfig+0x4a4>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f003 0304 	and.w	r3, r3, #4
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1ee      	bne.n	80077ba <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 0310 	and.w	r3, r3, #16
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d06a      	beq.n	80078be <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077e8:	4b90      	ldr	r3, [pc, #576]	; (8007a2c <HAL_RCC_OscConfig+0x4a4>)
 80077ea:	691b      	ldr	r3, [r3, #16]
 80077ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077f0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80077f2:	4b8e      	ldr	r3, [pc, #568]	; (8007a2c <HAL_RCC_OscConfig+0x4a4>)
 80077f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	2b08      	cmp	r3, #8
 80077fc:	d007      	beq.n	800780e <HAL_RCC_OscConfig+0x286>
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	2b18      	cmp	r3, #24
 8007802:	d11b      	bne.n	800783c <HAL_RCC_OscConfig+0x2b4>
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	f003 0303 	and.w	r3, r3, #3
 800780a:	2b01      	cmp	r3, #1
 800780c:	d116      	bne.n	800783c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800780e:	4b87      	ldr	r3, [pc, #540]	; (8007a2c <HAL_RCC_OscConfig+0x4a4>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007816:	2b00      	cmp	r3, #0
 8007818:	d005      	beq.n	8007826 <HAL_RCC_OscConfig+0x29e>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	69db      	ldr	r3, [r3, #28]
 800781e:	2b80      	cmp	r3, #128	; 0x80
 8007820:	d001      	beq.n	8007826 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8007822:	2301      	movs	r3, #1
 8007824:	e282      	b.n	8007d2c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007826:	4b81      	ldr	r3, [pc, #516]	; (8007a2c <HAL_RCC_OscConfig+0x4a4>)
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a1b      	ldr	r3, [r3, #32]
 8007832:	061b      	lsls	r3, r3, #24
 8007834:	497d      	ldr	r1, [pc, #500]	; (8007a2c <HAL_RCC_OscConfig+0x4a4>)
 8007836:	4313      	orrs	r3, r2
 8007838:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800783a:	e040      	b.n	80078be <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	69db      	ldr	r3, [r3, #28]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d023      	beq.n	800788c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007844:	4b79      	ldr	r3, [pc, #484]	; (8007a2c <HAL_RCC_OscConfig+0x4a4>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a78      	ldr	r2, [pc, #480]	; (8007a2c <HAL_RCC_OscConfig+0x4a4>)
 800784a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800784e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007850:	f7fb ff14 	bl	800367c <HAL_GetTick>
 8007854:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007856:	e008      	b.n	800786a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007858:	f7fb ff10 	bl	800367c <HAL_GetTick>
 800785c:	4602      	mov	r2, r0
 800785e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007860:	1ad3      	subs	r3, r2, r3
 8007862:	2b02      	cmp	r3, #2
 8007864:	d901      	bls.n	800786a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007866:	2303      	movs	r3, #3
 8007868:	e260      	b.n	8007d2c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800786a:	4b70      	ldr	r3, [pc, #448]	; (8007a2c <HAL_RCC_OscConfig+0x4a4>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007872:	2b00      	cmp	r3, #0
 8007874:	d0f0      	beq.n	8007858 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007876:	4b6d      	ldr	r3, [pc, #436]	; (8007a2c <HAL_RCC_OscConfig+0x4a4>)
 8007878:	68db      	ldr	r3, [r3, #12]
 800787a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a1b      	ldr	r3, [r3, #32]
 8007882:	061b      	lsls	r3, r3, #24
 8007884:	4969      	ldr	r1, [pc, #420]	; (8007a2c <HAL_RCC_OscConfig+0x4a4>)
 8007886:	4313      	orrs	r3, r2
 8007888:	60cb      	str	r3, [r1, #12]
 800788a:	e018      	b.n	80078be <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800788c:	4b67      	ldr	r3, [pc, #412]	; (8007a2c <HAL_RCC_OscConfig+0x4a4>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a66      	ldr	r2, [pc, #408]	; (8007a2c <HAL_RCC_OscConfig+0x4a4>)
 8007892:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007898:	f7fb fef0 	bl	800367c <HAL_GetTick>
 800789c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800789e:	e008      	b.n	80078b2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80078a0:	f7fb feec 	bl	800367c <HAL_GetTick>
 80078a4:	4602      	mov	r2, r0
 80078a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a8:	1ad3      	subs	r3, r2, r3
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d901      	bls.n	80078b2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80078ae:	2303      	movs	r3, #3
 80078b0:	e23c      	b.n	8007d2c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80078b2:	4b5e      	ldr	r3, [pc, #376]	; (8007a2c <HAL_RCC_OscConfig+0x4a4>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d1f0      	bne.n	80078a0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 0308 	and.w	r3, r3, #8
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d036      	beq.n	8007938 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	695b      	ldr	r3, [r3, #20]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d019      	beq.n	8007906 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80078d2:	4b56      	ldr	r3, [pc, #344]	; (8007a2c <HAL_RCC_OscConfig+0x4a4>)
 80078d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078d6:	4a55      	ldr	r2, [pc, #340]	; (8007a2c <HAL_RCC_OscConfig+0x4a4>)
 80078d8:	f043 0301 	orr.w	r3, r3, #1
 80078dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078de:	f7fb fecd 	bl	800367c <HAL_GetTick>
 80078e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80078e4:	e008      	b.n	80078f8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80078e6:	f7fb fec9 	bl	800367c <HAL_GetTick>
 80078ea:	4602      	mov	r2, r0
 80078ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ee:	1ad3      	subs	r3, r2, r3
 80078f0:	2b02      	cmp	r3, #2
 80078f2:	d901      	bls.n	80078f8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80078f4:	2303      	movs	r3, #3
 80078f6:	e219      	b.n	8007d2c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80078f8:	4b4c      	ldr	r3, [pc, #304]	; (8007a2c <HAL_RCC_OscConfig+0x4a4>)
 80078fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078fc:	f003 0302 	and.w	r3, r3, #2
 8007900:	2b00      	cmp	r3, #0
 8007902:	d0f0      	beq.n	80078e6 <HAL_RCC_OscConfig+0x35e>
 8007904:	e018      	b.n	8007938 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007906:	4b49      	ldr	r3, [pc, #292]	; (8007a2c <HAL_RCC_OscConfig+0x4a4>)
 8007908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800790a:	4a48      	ldr	r2, [pc, #288]	; (8007a2c <HAL_RCC_OscConfig+0x4a4>)
 800790c:	f023 0301 	bic.w	r3, r3, #1
 8007910:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007912:	f7fb feb3 	bl	800367c <HAL_GetTick>
 8007916:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007918:	e008      	b.n	800792c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800791a:	f7fb feaf 	bl	800367c <HAL_GetTick>
 800791e:	4602      	mov	r2, r0
 8007920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007922:	1ad3      	subs	r3, r2, r3
 8007924:	2b02      	cmp	r3, #2
 8007926:	d901      	bls.n	800792c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8007928:	2303      	movs	r3, #3
 800792a:	e1ff      	b.n	8007d2c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800792c:	4b3f      	ldr	r3, [pc, #252]	; (8007a2c <HAL_RCC_OscConfig+0x4a4>)
 800792e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007930:	f003 0302 	and.w	r3, r3, #2
 8007934:	2b00      	cmp	r3, #0
 8007936:	d1f0      	bne.n	800791a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f003 0320 	and.w	r3, r3, #32
 8007940:	2b00      	cmp	r3, #0
 8007942:	d036      	beq.n	80079b2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	699b      	ldr	r3, [r3, #24]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d019      	beq.n	8007980 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800794c:	4b37      	ldr	r3, [pc, #220]	; (8007a2c <HAL_RCC_OscConfig+0x4a4>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a36      	ldr	r2, [pc, #216]	; (8007a2c <HAL_RCC_OscConfig+0x4a4>)
 8007952:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007956:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007958:	f7fb fe90 	bl	800367c <HAL_GetTick>
 800795c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800795e:	e008      	b.n	8007972 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007960:	f7fb fe8c 	bl	800367c <HAL_GetTick>
 8007964:	4602      	mov	r2, r0
 8007966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007968:	1ad3      	subs	r3, r2, r3
 800796a:	2b02      	cmp	r3, #2
 800796c:	d901      	bls.n	8007972 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800796e:	2303      	movs	r3, #3
 8007970:	e1dc      	b.n	8007d2c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007972:	4b2e      	ldr	r3, [pc, #184]	; (8007a2c <HAL_RCC_OscConfig+0x4a4>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800797a:	2b00      	cmp	r3, #0
 800797c:	d0f0      	beq.n	8007960 <HAL_RCC_OscConfig+0x3d8>
 800797e:	e018      	b.n	80079b2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007980:	4b2a      	ldr	r3, [pc, #168]	; (8007a2c <HAL_RCC_OscConfig+0x4a4>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a29      	ldr	r2, [pc, #164]	; (8007a2c <HAL_RCC_OscConfig+0x4a4>)
 8007986:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800798a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800798c:	f7fb fe76 	bl	800367c <HAL_GetTick>
 8007990:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007992:	e008      	b.n	80079a6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007994:	f7fb fe72 	bl	800367c <HAL_GetTick>
 8007998:	4602      	mov	r2, r0
 800799a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799c:	1ad3      	subs	r3, r2, r3
 800799e:	2b02      	cmp	r3, #2
 80079a0:	d901      	bls.n	80079a6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80079a2:	2303      	movs	r3, #3
 80079a4:	e1c2      	b.n	8007d2c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80079a6:	4b21      	ldr	r3, [pc, #132]	; (8007a2c <HAL_RCC_OscConfig+0x4a4>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d1f0      	bne.n	8007994 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f003 0304 	and.w	r3, r3, #4
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	f000 8086 	beq.w	8007acc <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80079c0:	4b1b      	ldr	r3, [pc, #108]	; (8007a30 <HAL_RCC_OscConfig+0x4a8>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a1a      	ldr	r2, [pc, #104]	; (8007a30 <HAL_RCC_OscConfig+0x4a8>)
 80079c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80079cc:	f7fb fe56 	bl	800367c <HAL_GetTick>
 80079d0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80079d2:	e008      	b.n	80079e6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079d4:	f7fb fe52 	bl	800367c <HAL_GetTick>
 80079d8:	4602      	mov	r2, r0
 80079da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079dc:	1ad3      	subs	r3, r2, r3
 80079de:	2b64      	cmp	r3, #100	; 0x64
 80079e0:	d901      	bls.n	80079e6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80079e2:	2303      	movs	r3, #3
 80079e4:	e1a2      	b.n	8007d2c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80079e6:	4b12      	ldr	r3, [pc, #72]	; (8007a30 <HAL_RCC_OscConfig+0x4a8>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d0f0      	beq.n	80079d4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d106      	bne.n	8007a08 <HAL_RCC_OscConfig+0x480>
 80079fa:	4b0c      	ldr	r3, [pc, #48]	; (8007a2c <HAL_RCC_OscConfig+0x4a4>)
 80079fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079fe:	4a0b      	ldr	r2, [pc, #44]	; (8007a2c <HAL_RCC_OscConfig+0x4a4>)
 8007a00:	f043 0301 	orr.w	r3, r3, #1
 8007a04:	6713      	str	r3, [r2, #112]	; 0x70
 8007a06:	e032      	b.n	8007a6e <HAL_RCC_OscConfig+0x4e6>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d111      	bne.n	8007a34 <HAL_RCC_OscConfig+0x4ac>
 8007a10:	4b06      	ldr	r3, [pc, #24]	; (8007a2c <HAL_RCC_OscConfig+0x4a4>)
 8007a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a14:	4a05      	ldr	r2, [pc, #20]	; (8007a2c <HAL_RCC_OscConfig+0x4a4>)
 8007a16:	f023 0301 	bic.w	r3, r3, #1
 8007a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8007a1c:	4b03      	ldr	r3, [pc, #12]	; (8007a2c <HAL_RCC_OscConfig+0x4a4>)
 8007a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a20:	4a02      	ldr	r2, [pc, #8]	; (8007a2c <HAL_RCC_OscConfig+0x4a4>)
 8007a22:	f023 0304 	bic.w	r3, r3, #4
 8007a26:	6713      	str	r3, [r2, #112]	; 0x70
 8007a28:	e021      	b.n	8007a6e <HAL_RCC_OscConfig+0x4e6>
 8007a2a:	bf00      	nop
 8007a2c:	58024400 	.word	0x58024400
 8007a30:	58024800 	.word	0x58024800
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	2b05      	cmp	r3, #5
 8007a3a:	d10c      	bne.n	8007a56 <HAL_RCC_OscConfig+0x4ce>
 8007a3c:	4b83      	ldr	r3, [pc, #524]	; (8007c4c <HAL_RCC_OscConfig+0x6c4>)
 8007a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a40:	4a82      	ldr	r2, [pc, #520]	; (8007c4c <HAL_RCC_OscConfig+0x6c4>)
 8007a42:	f043 0304 	orr.w	r3, r3, #4
 8007a46:	6713      	str	r3, [r2, #112]	; 0x70
 8007a48:	4b80      	ldr	r3, [pc, #512]	; (8007c4c <HAL_RCC_OscConfig+0x6c4>)
 8007a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a4c:	4a7f      	ldr	r2, [pc, #508]	; (8007c4c <HAL_RCC_OscConfig+0x6c4>)
 8007a4e:	f043 0301 	orr.w	r3, r3, #1
 8007a52:	6713      	str	r3, [r2, #112]	; 0x70
 8007a54:	e00b      	b.n	8007a6e <HAL_RCC_OscConfig+0x4e6>
 8007a56:	4b7d      	ldr	r3, [pc, #500]	; (8007c4c <HAL_RCC_OscConfig+0x6c4>)
 8007a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a5a:	4a7c      	ldr	r2, [pc, #496]	; (8007c4c <HAL_RCC_OscConfig+0x6c4>)
 8007a5c:	f023 0301 	bic.w	r3, r3, #1
 8007a60:	6713      	str	r3, [r2, #112]	; 0x70
 8007a62:	4b7a      	ldr	r3, [pc, #488]	; (8007c4c <HAL_RCC_OscConfig+0x6c4>)
 8007a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a66:	4a79      	ldr	r2, [pc, #484]	; (8007c4c <HAL_RCC_OscConfig+0x6c4>)
 8007a68:	f023 0304 	bic.w	r3, r3, #4
 8007a6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d015      	beq.n	8007aa2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a76:	f7fb fe01 	bl	800367c <HAL_GetTick>
 8007a7a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a7c:	e00a      	b.n	8007a94 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a7e:	f7fb fdfd 	bl	800367c <HAL_GetTick>
 8007a82:	4602      	mov	r2, r0
 8007a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a86:	1ad3      	subs	r3, r2, r3
 8007a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d901      	bls.n	8007a94 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8007a90:	2303      	movs	r3, #3
 8007a92:	e14b      	b.n	8007d2c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a94:	4b6d      	ldr	r3, [pc, #436]	; (8007c4c <HAL_RCC_OscConfig+0x6c4>)
 8007a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a98:	f003 0302 	and.w	r3, r3, #2
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d0ee      	beq.n	8007a7e <HAL_RCC_OscConfig+0x4f6>
 8007aa0:	e014      	b.n	8007acc <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007aa2:	f7fb fdeb 	bl	800367c <HAL_GetTick>
 8007aa6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007aa8:	e00a      	b.n	8007ac0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007aaa:	f7fb fde7 	bl	800367c <HAL_GetTick>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab2:	1ad3      	subs	r3, r2, r3
 8007ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d901      	bls.n	8007ac0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8007abc:	2303      	movs	r3, #3
 8007abe:	e135      	b.n	8007d2c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007ac0:	4b62      	ldr	r3, [pc, #392]	; (8007c4c <HAL_RCC_OscConfig+0x6c4>)
 8007ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ac4:	f003 0302 	and.w	r3, r3, #2
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1ee      	bne.n	8007aaa <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f000 812a 	beq.w	8007d2a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007ad6:	4b5d      	ldr	r3, [pc, #372]	; (8007c4c <HAL_RCC_OscConfig+0x6c4>)
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ade:	2b18      	cmp	r3, #24
 8007ae0:	f000 80ba 	beq.w	8007c58 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	f040 8095 	bne.w	8007c18 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007aee:	4b57      	ldr	r3, [pc, #348]	; (8007c4c <HAL_RCC_OscConfig+0x6c4>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a56      	ldr	r2, [pc, #344]	; (8007c4c <HAL_RCC_OscConfig+0x6c4>)
 8007af4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007af8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007afa:	f7fb fdbf 	bl	800367c <HAL_GetTick>
 8007afe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007b00:	e008      	b.n	8007b14 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b02:	f7fb fdbb 	bl	800367c <HAL_GetTick>
 8007b06:	4602      	mov	r2, r0
 8007b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0a:	1ad3      	subs	r3, r2, r3
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	d901      	bls.n	8007b14 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8007b10:	2303      	movs	r3, #3
 8007b12:	e10b      	b.n	8007d2c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007b14:	4b4d      	ldr	r3, [pc, #308]	; (8007c4c <HAL_RCC_OscConfig+0x6c4>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d1f0      	bne.n	8007b02 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007b20:	4b4a      	ldr	r3, [pc, #296]	; (8007c4c <HAL_RCC_OscConfig+0x6c4>)
 8007b22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b24:	4b4a      	ldr	r3, [pc, #296]	; (8007c50 <HAL_RCC_OscConfig+0x6c8>)
 8007b26:	4013      	ands	r3, r2
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007b30:	0112      	lsls	r2, r2, #4
 8007b32:	430a      	orrs	r2, r1
 8007b34:	4945      	ldr	r1, [pc, #276]	; (8007c4c <HAL_RCC_OscConfig+0x6c4>)
 8007b36:	4313      	orrs	r3, r2
 8007b38:	628b      	str	r3, [r1, #40]	; 0x28
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	025b      	lsls	r3, r3, #9
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	431a      	orrs	r2, r3
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b54:	3b01      	subs	r3, #1
 8007b56:	041b      	lsls	r3, r3, #16
 8007b58:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007b5c:	431a      	orrs	r2, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b62:	3b01      	subs	r3, #1
 8007b64:	061b      	lsls	r3, r3, #24
 8007b66:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007b6a:	4938      	ldr	r1, [pc, #224]	; (8007c4c <HAL_RCC_OscConfig+0x6c4>)
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007b70:	4b36      	ldr	r3, [pc, #216]	; (8007c4c <HAL_RCC_OscConfig+0x6c4>)
 8007b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b74:	4a35      	ldr	r2, [pc, #212]	; (8007c4c <HAL_RCC_OscConfig+0x6c4>)
 8007b76:	f023 0301 	bic.w	r3, r3, #1
 8007b7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007b7c:	4b33      	ldr	r3, [pc, #204]	; (8007c4c <HAL_RCC_OscConfig+0x6c4>)
 8007b7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b80:	4b34      	ldr	r3, [pc, #208]	; (8007c54 <HAL_RCC_OscConfig+0x6cc>)
 8007b82:	4013      	ands	r3, r2
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007b88:	00d2      	lsls	r2, r2, #3
 8007b8a:	4930      	ldr	r1, [pc, #192]	; (8007c4c <HAL_RCC_OscConfig+0x6c4>)
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007b90:	4b2e      	ldr	r3, [pc, #184]	; (8007c4c <HAL_RCC_OscConfig+0x6c4>)
 8007b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b94:	f023 020c 	bic.w	r2, r3, #12
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9c:	492b      	ldr	r1, [pc, #172]	; (8007c4c <HAL_RCC_OscConfig+0x6c4>)
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007ba2:	4b2a      	ldr	r3, [pc, #168]	; (8007c4c <HAL_RCC_OscConfig+0x6c4>)
 8007ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba6:	f023 0202 	bic.w	r2, r3, #2
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bae:	4927      	ldr	r1, [pc, #156]	; (8007c4c <HAL_RCC_OscConfig+0x6c4>)
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007bb4:	4b25      	ldr	r3, [pc, #148]	; (8007c4c <HAL_RCC_OscConfig+0x6c4>)
 8007bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb8:	4a24      	ldr	r2, [pc, #144]	; (8007c4c <HAL_RCC_OscConfig+0x6c4>)
 8007bba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bc0:	4b22      	ldr	r3, [pc, #136]	; (8007c4c <HAL_RCC_OscConfig+0x6c4>)
 8007bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc4:	4a21      	ldr	r2, [pc, #132]	; (8007c4c <HAL_RCC_OscConfig+0x6c4>)
 8007bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007bcc:	4b1f      	ldr	r3, [pc, #124]	; (8007c4c <HAL_RCC_OscConfig+0x6c4>)
 8007bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd0:	4a1e      	ldr	r2, [pc, #120]	; (8007c4c <HAL_RCC_OscConfig+0x6c4>)
 8007bd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007bd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007bd8:	4b1c      	ldr	r3, [pc, #112]	; (8007c4c <HAL_RCC_OscConfig+0x6c4>)
 8007bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bdc:	4a1b      	ldr	r2, [pc, #108]	; (8007c4c <HAL_RCC_OscConfig+0x6c4>)
 8007bde:	f043 0301 	orr.w	r3, r3, #1
 8007be2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007be4:	4b19      	ldr	r3, [pc, #100]	; (8007c4c <HAL_RCC_OscConfig+0x6c4>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a18      	ldr	r2, [pc, #96]	; (8007c4c <HAL_RCC_OscConfig+0x6c4>)
 8007bea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007bee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bf0:	f7fb fd44 	bl	800367c <HAL_GetTick>
 8007bf4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007bf6:	e008      	b.n	8007c0a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bf8:	f7fb fd40 	bl	800367c <HAL_GetTick>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c00:	1ad3      	subs	r3, r2, r3
 8007c02:	2b02      	cmp	r3, #2
 8007c04:	d901      	bls.n	8007c0a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8007c06:	2303      	movs	r3, #3
 8007c08:	e090      	b.n	8007d2c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007c0a:	4b10      	ldr	r3, [pc, #64]	; (8007c4c <HAL_RCC_OscConfig+0x6c4>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d0f0      	beq.n	8007bf8 <HAL_RCC_OscConfig+0x670>
 8007c16:	e088      	b.n	8007d2a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c18:	4b0c      	ldr	r3, [pc, #48]	; (8007c4c <HAL_RCC_OscConfig+0x6c4>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a0b      	ldr	r2, [pc, #44]	; (8007c4c <HAL_RCC_OscConfig+0x6c4>)
 8007c1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c24:	f7fb fd2a 	bl	800367c <HAL_GetTick>
 8007c28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007c2a:	e008      	b.n	8007c3e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c2c:	f7fb fd26 	bl	800367c <HAL_GetTick>
 8007c30:	4602      	mov	r2, r0
 8007c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c34:	1ad3      	subs	r3, r2, r3
 8007c36:	2b02      	cmp	r3, #2
 8007c38:	d901      	bls.n	8007c3e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8007c3a:	2303      	movs	r3, #3
 8007c3c:	e076      	b.n	8007d2c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007c3e:	4b03      	ldr	r3, [pc, #12]	; (8007c4c <HAL_RCC_OscConfig+0x6c4>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d1f0      	bne.n	8007c2c <HAL_RCC_OscConfig+0x6a4>
 8007c4a:	e06e      	b.n	8007d2a <HAL_RCC_OscConfig+0x7a2>
 8007c4c:	58024400 	.word	0x58024400
 8007c50:	fffffc0c 	.word	0xfffffc0c
 8007c54:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007c58:	4b36      	ldr	r3, [pc, #216]	; (8007d34 <HAL_RCC_OscConfig+0x7ac>)
 8007c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c5c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007c5e:	4b35      	ldr	r3, [pc, #212]	; (8007d34 <HAL_RCC_OscConfig+0x7ac>)
 8007c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c62:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d031      	beq.n	8007cd0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	f003 0203 	and.w	r2, r3, #3
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d12a      	bne.n	8007cd0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	091b      	lsrs	r3, r3, #4
 8007c7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d122      	bne.n	8007cd0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c94:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d11a      	bne.n	8007cd0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	0a5b      	lsrs	r3, r3, #9
 8007c9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ca6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d111      	bne.n	8007cd0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	0c1b      	lsrs	r3, r3, #16
 8007cb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d108      	bne.n	8007cd0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	0e1b      	lsrs	r3, r3, #24
 8007cc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cca:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d001      	beq.n	8007cd4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	e02b      	b.n	8007d2c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007cd4:	4b17      	ldr	r3, [pc, #92]	; (8007d34 <HAL_RCC_OscConfig+0x7ac>)
 8007cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cd8:	08db      	lsrs	r3, r3, #3
 8007cda:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007cde:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ce4:	693a      	ldr	r2, [r7, #16]
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d01f      	beq.n	8007d2a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007cea:	4b12      	ldr	r3, [pc, #72]	; (8007d34 <HAL_RCC_OscConfig+0x7ac>)
 8007cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cee:	4a11      	ldr	r2, [pc, #68]	; (8007d34 <HAL_RCC_OscConfig+0x7ac>)
 8007cf0:	f023 0301 	bic.w	r3, r3, #1
 8007cf4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007cf6:	f7fb fcc1 	bl	800367c <HAL_GetTick>
 8007cfa:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007cfc:	bf00      	nop
 8007cfe:	f7fb fcbd 	bl	800367c <HAL_GetTick>
 8007d02:	4602      	mov	r2, r0
 8007d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d0f9      	beq.n	8007cfe <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007d0a:	4b0a      	ldr	r3, [pc, #40]	; (8007d34 <HAL_RCC_OscConfig+0x7ac>)
 8007d0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d0e:	4b0a      	ldr	r3, [pc, #40]	; (8007d38 <HAL_RCC_OscConfig+0x7b0>)
 8007d10:	4013      	ands	r3, r2
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007d16:	00d2      	lsls	r2, r2, #3
 8007d18:	4906      	ldr	r1, [pc, #24]	; (8007d34 <HAL_RCC_OscConfig+0x7ac>)
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007d1e:	4b05      	ldr	r3, [pc, #20]	; (8007d34 <HAL_RCC_OscConfig+0x7ac>)
 8007d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d22:	4a04      	ldr	r2, [pc, #16]	; (8007d34 <HAL_RCC_OscConfig+0x7ac>)
 8007d24:	f043 0301 	orr.w	r3, r3, #1
 8007d28:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007d2a:	2300      	movs	r3, #0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3730      	adds	r7, #48	; 0x30
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	58024400 	.word	0x58024400
 8007d38:	ffff0007 	.word	0xffff0007

08007d3c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b086      	sub	sp, #24
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d101      	bne.n	8007d50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e19c      	b.n	800808a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007d50:	4b8a      	ldr	r3, [pc, #552]	; (8007f7c <HAL_RCC_ClockConfig+0x240>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f003 030f 	and.w	r3, r3, #15
 8007d58:	683a      	ldr	r2, [r7, #0]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d910      	bls.n	8007d80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d5e:	4b87      	ldr	r3, [pc, #540]	; (8007f7c <HAL_RCC_ClockConfig+0x240>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f023 020f 	bic.w	r2, r3, #15
 8007d66:	4985      	ldr	r1, [pc, #532]	; (8007f7c <HAL_RCC_ClockConfig+0x240>)
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d6e:	4b83      	ldr	r3, [pc, #524]	; (8007f7c <HAL_RCC_ClockConfig+0x240>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f003 030f 	and.w	r3, r3, #15
 8007d76:	683a      	ldr	r2, [r7, #0]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d001      	beq.n	8007d80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e184      	b.n	800808a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f003 0304 	and.w	r3, r3, #4
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d010      	beq.n	8007dae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	691a      	ldr	r2, [r3, #16]
 8007d90:	4b7b      	ldr	r3, [pc, #492]	; (8007f80 <HAL_RCC_ClockConfig+0x244>)
 8007d92:	699b      	ldr	r3, [r3, #24]
 8007d94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d908      	bls.n	8007dae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007d9c:	4b78      	ldr	r3, [pc, #480]	; (8007f80 <HAL_RCC_ClockConfig+0x244>)
 8007d9e:	699b      	ldr	r3, [r3, #24]
 8007da0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	4975      	ldr	r1, [pc, #468]	; (8007f80 <HAL_RCC_ClockConfig+0x244>)
 8007daa:	4313      	orrs	r3, r2
 8007dac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f003 0308 	and.w	r3, r3, #8
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d010      	beq.n	8007ddc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	695a      	ldr	r2, [r3, #20]
 8007dbe:	4b70      	ldr	r3, [pc, #448]	; (8007f80 <HAL_RCC_ClockConfig+0x244>)
 8007dc0:	69db      	ldr	r3, [r3, #28]
 8007dc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d908      	bls.n	8007ddc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007dca:	4b6d      	ldr	r3, [pc, #436]	; (8007f80 <HAL_RCC_ClockConfig+0x244>)
 8007dcc:	69db      	ldr	r3, [r3, #28]
 8007dce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	695b      	ldr	r3, [r3, #20]
 8007dd6:	496a      	ldr	r1, [pc, #424]	; (8007f80 <HAL_RCC_ClockConfig+0x244>)
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f003 0310 	and.w	r3, r3, #16
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d010      	beq.n	8007e0a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	699a      	ldr	r2, [r3, #24]
 8007dec:	4b64      	ldr	r3, [pc, #400]	; (8007f80 <HAL_RCC_ClockConfig+0x244>)
 8007dee:	69db      	ldr	r3, [r3, #28]
 8007df0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d908      	bls.n	8007e0a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007df8:	4b61      	ldr	r3, [pc, #388]	; (8007f80 <HAL_RCC_ClockConfig+0x244>)
 8007dfa:	69db      	ldr	r3, [r3, #28]
 8007dfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	699b      	ldr	r3, [r3, #24]
 8007e04:	495e      	ldr	r1, [pc, #376]	; (8007f80 <HAL_RCC_ClockConfig+0x244>)
 8007e06:	4313      	orrs	r3, r2
 8007e08:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f003 0320 	and.w	r3, r3, #32
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d010      	beq.n	8007e38 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	69da      	ldr	r2, [r3, #28]
 8007e1a:	4b59      	ldr	r3, [pc, #356]	; (8007f80 <HAL_RCC_ClockConfig+0x244>)
 8007e1c:	6a1b      	ldr	r3, [r3, #32]
 8007e1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d908      	bls.n	8007e38 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007e26:	4b56      	ldr	r3, [pc, #344]	; (8007f80 <HAL_RCC_ClockConfig+0x244>)
 8007e28:	6a1b      	ldr	r3, [r3, #32]
 8007e2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	69db      	ldr	r3, [r3, #28]
 8007e32:	4953      	ldr	r1, [pc, #332]	; (8007f80 <HAL_RCC_ClockConfig+0x244>)
 8007e34:	4313      	orrs	r3, r2
 8007e36:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f003 0302 	and.w	r3, r3, #2
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d010      	beq.n	8007e66 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	68da      	ldr	r2, [r3, #12]
 8007e48:	4b4d      	ldr	r3, [pc, #308]	; (8007f80 <HAL_RCC_ClockConfig+0x244>)
 8007e4a:	699b      	ldr	r3, [r3, #24]
 8007e4c:	f003 030f 	and.w	r3, r3, #15
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d908      	bls.n	8007e66 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e54:	4b4a      	ldr	r3, [pc, #296]	; (8007f80 <HAL_RCC_ClockConfig+0x244>)
 8007e56:	699b      	ldr	r3, [r3, #24]
 8007e58:	f023 020f 	bic.w	r2, r3, #15
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	4947      	ldr	r1, [pc, #284]	; (8007f80 <HAL_RCC_ClockConfig+0x244>)
 8007e62:	4313      	orrs	r3, r2
 8007e64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 0301 	and.w	r3, r3, #1
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d055      	beq.n	8007f1e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007e72:	4b43      	ldr	r3, [pc, #268]	; (8007f80 <HAL_RCC_ClockConfig+0x244>)
 8007e74:	699b      	ldr	r3, [r3, #24]
 8007e76:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	4940      	ldr	r1, [pc, #256]	; (8007f80 <HAL_RCC_ClockConfig+0x244>)
 8007e80:	4313      	orrs	r3, r2
 8007e82:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	2b02      	cmp	r3, #2
 8007e8a:	d107      	bne.n	8007e9c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007e8c:	4b3c      	ldr	r3, [pc, #240]	; (8007f80 <HAL_RCC_ClockConfig+0x244>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d121      	bne.n	8007edc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	e0f6      	b.n	800808a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	2b03      	cmp	r3, #3
 8007ea2:	d107      	bne.n	8007eb4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007ea4:	4b36      	ldr	r3, [pc, #216]	; (8007f80 <HAL_RCC_ClockConfig+0x244>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d115      	bne.n	8007edc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e0ea      	b.n	800808a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d107      	bne.n	8007ecc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007ebc:	4b30      	ldr	r3, [pc, #192]	; (8007f80 <HAL_RCC_ClockConfig+0x244>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d109      	bne.n	8007edc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e0de      	b.n	800808a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ecc:	4b2c      	ldr	r3, [pc, #176]	; (8007f80 <HAL_RCC_ClockConfig+0x244>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f003 0304 	and.w	r3, r3, #4
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d101      	bne.n	8007edc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e0d6      	b.n	800808a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007edc:	4b28      	ldr	r3, [pc, #160]	; (8007f80 <HAL_RCC_ClockConfig+0x244>)
 8007ede:	691b      	ldr	r3, [r3, #16]
 8007ee0:	f023 0207 	bic.w	r2, r3, #7
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	4925      	ldr	r1, [pc, #148]	; (8007f80 <HAL_RCC_ClockConfig+0x244>)
 8007eea:	4313      	orrs	r3, r2
 8007eec:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007eee:	f7fb fbc5 	bl	800367c <HAL_GetTick>
 8007ef2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ef4:	e00a      	b.n	8007f0c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ef6:	f7fb fbc1 	bl	800367c <HAL_GetTick>
 8007efa:	4602      	mov	r2, r0
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	1ad3      	subs	r3, r2, r3
 8007f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d901      	bls.n	8007f0c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007f08:	2303      	movs	r3, #3
 8007f0a:	e0be      	b.n	800808a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f0c:	4b1c      	ldr	r3, [pc, #112]	; (8007f80 <HAL_RCC_ClockConfig+0x244>)
 8007f0e:	691b      	ldr	r3, [r3, #16]
 8007f10:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	00db      	lsls	r3, r3, #3
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d1eb      	bne.n	8007ef6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f003 0302 	and.w	r3, r3, #2
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d010      	beq.n	8007f4c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	68da      	ldr	r2, [r3, #12]
 8007f2e:	4b14      	ldr	r3, [pc, #80]	; (8007f80 <HAL_RCC_ClockConfig+0x244>)
 8007f30:	699b      	ldr	r3, [r3, #24]
 8007f32:	f003 030f 	and.w	r3, r3, #15
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d208      	bcs.n	8007f4c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f3a:	4b11      	ldr	r3, [pc, #68]	; (8007f80 <HAL_RCC_ClockConfig+0x244>)
 8007f3c:	699b      	ldr	r3, [r3, #24]
 8007f3e:	f023 020f 	bic.w	r2, r3, #15
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	490e      	ldr	r1, [pc, #56]	; (8007f80 <HAL_RCC_ClockConfig+0x244>)
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007f4c:	4b0b      	ldr	r3, [pc, #44]	; (8007f7c <HAL_RCC_ClockConfig+0x240>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f003 030f 	and.w	r3, r3, #15
 8007f54:	683a      	ldr	r2, [r7, #0]
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d214      	bcs.n	8007f84 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f5a:	4b08      	ldr	r3, [pc, #32]	; (8007f7c <HAL_RCC_ClockConfig+0x240>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f023 020f 	bic.w	r2, r3, #15
 8007f62:	4906      	ldr	r1, [pc, #24]	; (8007f7c <HAL_RCC_ClockConfig+0x240>)
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f6a:	4b04      	ldr	r3, [pc, #16]	; (8007f7c <HAL_RCC_ClockConfig+0x240>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 030f 	and.w	r3, r3, #15
 8007f72:	683a      	ldr	r2, [r7, #0]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d005      	beq.n	8007f84 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e086      	b.n	800808a <HAL_RCC_ClockConfig+0x34e>
 8007f7c:	52002000 	.word	0x52002000
 8007f80:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f003 0304 	and.w	r3, r3, #4
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d010      	beq.n	8007fb2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	691a      	ldr	r2, [r3, #16]
 8007f94:	4b3f      	ldr	r3, [pc, #252]	; (8008094 <HAL_RCC_ClockConfig+0x358>)
 8007f96:	699b      	ldr	r3, [r3, #24]
 8007f98:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d208      	bcs.n	8007fb2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007fa0:	4b3c      	ldr	r3, [pc, #240]	; (8008094 <HAL_RCC_ClockConfig+0x358>)
 8007fa2:	699b      	ldr	r3, [r3, #24]
 8007fa4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	691b      	ldr	r3, [r3, #16]
 8007fac:	4939      	ldr	r1, [pc, #228]	; (8008094 <HAL_RCC_ClockConfig+0x358>)
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f003 0308 	and.w	r3, r3, #8
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d010      	beq.n	8007fe0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	695a      	ldr	r2, [r3, #20]
 8007fc2:	4b34      	ldr	r3, [pc, #208]	; (8008094 <HAL_RCC_ClockConfig+0x358>)
 8007fc4:	69db      	ldr	r3, [r3, #28]
 8007fc6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d208      	bcs.n	8007fe0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007fce:	4b31      	ldr	r3, [pc, #196]	; (8008094 <HAL_RCC_ClockConfig+0x358>)
 8007fd0:	69db      	ldr	r3, [r3, #28]
 8007fd2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	695b      	ldr	r3, [r3, #20]
 8007fda:	492e      	ldr	r1, [pc, #184]	; (8008094 <HAL_RCC_ClockConfig+0x358>)
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f003 0310 	and.w	r3, r3, #16
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d010      	beq.n	800800e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	699a      	ldr	r2, [r3, #24]
 8007ff0:	4b28      	ldr	r3, [pc, #160]	; (8008094 <HAL_RCC_ClockConfig+0x358>)
 8007ff2:	69db      	ldr	r3, [r3, #28]
 8007ff4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d208      	bcs.n	800800e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007ffc:	4b25      	ldr	r3, [pc, #148]	; (8008094 <HAL_RCC_ClockConfig+0x358>)
 8007ffe:	69db      	ldr	r3, [r3, #28]
 8008000:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	699b      	ldr	r3, [r3, #24]
 8008008:	4922      	ldr	r1, [pc, #136]	; (8008094 <HAL_RCC_ClockConfig+0x358>)
 800800a:	4313      	orrs	r3, r2
 800800c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f003 0320 	and.w	r3, r3, #32
 8008016:	2b00      	cmp	r3, #0
 8008018:	d010      	beq.n	800803c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	69da      	ldr	r2, [r3, #28]
 800801e:	4b1d      	ldr	r3, [pc, #116]	; (8008094 <HAL_RCC_ClockConfig+0x358>)
 8008020:	6a1b      	ldr	r3, [r3, #32]
 8008022:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008026:	429a      	cmp	r2, r3
 8008028:	d208      	bcs.n	800803c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800802a:	4b1a      	ldr	r3, [pc, #104]	; (8008094 <HAL_RCC_ClockConfig+0x358>)
 800802c:	6a1b      	ldr	r3, [r3, #32]
 800802e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	69db      	ldr	r3, [r3, #28]
 8008036:	4917      	ldr	r1, [pc, #92]	; (8008094 <HAL_RCC_ClockConfig+0x358>)
 8008038:	4313      	orrs	r3, r2
 800803a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800803c:	f000 f89e 	bl	800817c <HAL_RCC_GetSysClockFreq>
 8008040:	4602      	mov	r2, r0
 8008042:	4b14      	ldr	r3, [pc, #80]	; (8008094 <HAL_RCC_ClockConfig+0x358>)
 8008044:	699b      	ldr	r3, [r3, #24]
 8008046:	0a1b      	lsrs	r3, r3, #8
 8008048:	f003 030f 	and.w	r3, r3, #15
 800804c:	4912      	ldr	r1, [pc, #72]	; (8008098 <HAL_RCC_ClockConfig+0x35c>)
 800804e:	5ccb      	ldrb	r3, [r1, r3]
 8008050:	f003 031f 	and.w	r3, r3, #31
 8008054:	fa22 f303 	lsr.w	r3, r2, r3
 8008058:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800805a:	4b0e      	ldr	r3, [pc, #56]	; (8008094 <HAL_RCC_ClockConfig+0x358>)
 800805c:	699b      	ldr	r3, [r3, #24]
 800805e:	f003 030f 	and.w	r3, r3, #15
 8008062:	4a0d      	ldr	r2, [pc, #52]	; (8008098 <HAL_RCC_ClockConfig+0x35c>)
 8008064:	5cd3      	ldrb	r3, [r2, r3]
 8008066:	f003 031f 	and.w	r3, r3, #31
 800806a:	693a      	ldr	r2, [r7, #16]
 800806c:	fa22 f303 	lsr.w	r3, r2, r3
 8008070:	4a0a      	ldr	r2, [pc, #40]	; (800809c <HAL_RCC_ClockConfig+0x360>)
 8008072:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008074:	4a0a      	ldr	r2, [pc, #40]	; (80080a0 <HAL_RCC_ClockConfig+0x364>)
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800807a:	4b0a      	ldr	r3, [pc, #40]	; (80080a4 <HAL_RCC_ClockConfig+0x368>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4618      	mov	r0, r3
 8008080:	f7fb fab2 	bl	80035e8 <HAL_InitTick>
 8008084:	4603      	mov	r3, r0
 8008086:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008088:	7bfb      	ldrb	r3, [r7, #15]
}
 800808a:	4618      	mov	r0, r3
 800808c:	3718      	adds	r7, #24
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	58024400 	.word	0x58024400
 8008098:	0800ccd8 	.word	0x0800ccd8
 800809c:	24000094 	.word	0x24000094
 80080a0:	24000090 	.word	0x24000090
 80080a4:	24000098 	.word	0x24000098

080080a8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b08c      	sub	sp, #48	; 0x30
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d12a      	bne.n	8008110 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80080ba:	4b2d      	ldr	r3, [pc, #180]	; (8008170 <HAL_RCC_MCOConfig+0xc8>)
 80080bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80080c0:	4a2b      	ldr	r2, [pc, #172]	; (8008170 <HAL_RCC_MCOConfig+0xc8>)
 80080c2:	f043 0301 	orr.w	r3, r3, #1
 80080c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80080ca:	4b29      	ldr	r3, [pc, #164]	; (8008170 <HAL_RCC_MCOConfig+0xc8>)
 80080cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80080d0:	f003 0301 	and.w	r3, r3, #1
 80080d4:	61bb      	str	r3, [r7, #24]
 80080d6:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80080d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080de:	2302      	movs	r3, #2
 80080e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080e2:	2303      	movs	r3, #3
 80080e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080e6:	2300      	movs	r3, #0
 80080e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80080ea:	2300      	movs	r3, #0
 80080ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80080ee:	f107 031c 	add.w	r3, r7, #28
 80080f2:	4619      	mov	r1, r3
 80080f4:	481f      	ldr	r0, [pc, #124]	; (8008174 <HAL_RCC_MCOConfig+0xcc>)
 80080f6:	f7fe fee1 	bl	8006ebc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80080fa:	4b1d      	ldr	r3, [pc, #116]	; (8008170 <HAL_RCC_MCOConfig+0xc8>)
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8008102:	68b9      	ldr	r1, [r7, #8]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	430b      	orrs	r3, r1
 8008108:	4919      	ldr	r1, [pc, #100]	; (8008170 <HAL_RCC_MCOConfig+0xc8>)
 800810a:	4313      	orrs	r3, r2
 800810c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800810e:	e02a      	b.n	8008166 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8008110:	4b17      	ldr	r3, [pc, #92]	; (8008170 <HAL_RCC_MCOConfig+0xc8>)
 8008112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008116:	4a16      	ldr	r2, [pc, #88]	; (8008170 <HAL_RCC_MCOConfig+0xc8>)
 8008118:	f043 0304 	orr.w	r3, r3, #4
 800811c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008120:	4b13      	ldr	r3, [pc, #76]	; (8008170 <HAL_RCC_MCOConfig+0xc8>)
 8008122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008126:	f003 0304 	and.w	r3, r3, #4
 800812a:	617b      	str	r3, [r7, #20]
 800812c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800812e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008132:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008134:	2302      	movs	r3, #2
 8008136:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008138:	2303      	movs	r3, #3
 800813a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800813c:	2300      	movs	r3, #0
 800813e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008140:	2300      	movs	r3, #0
 8008142:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8008144:	f107 031c 	add.w	r3, r7, #28
 8008148:	4619      	mov	r1, r3
 800814a:	480b      	ldr	r0, [pc, #44]	; (8008178 <HAL_RCC_MCOConfig+0xd0>)
 800814c:	f7fe feb6 	bl	8006ebc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8008150:	4b07      	ldr	r3, [pc, #28]	; (8008170 <HAL_RCC_MCOConfig+0xc8>)
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	01d9      	lsls	r1, r3, #7
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	430b      	orrs	r3, r1
 8008160:	4903      	ldr	r1, [pc, #12]	; (8008170 <HAL_RCC_MCOConfig+0xc8>)
 8008162:	4313      	orrs	r3, r2
 8008164:	610b      	str	r3, [r1, #16]
}
 8008166:	bf00      	nop
 8008168:	3730      	adds	r7, #48	; 0x30
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	58024400 	.word	0x58024400
 8008174:	58020000 	.word	0x58020000
 8008178:	58020800 	.word	0x58020800

0800817c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800817c:	b480      	push	{r7}
 800817e:	b089      	sub	sp, #36	; 0x24
 8008180:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008182:	4bb3      	ldr	r3, [pc, #716]	; (8008450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008184:	691b      	ldr	r3, [r3, #16]
 8008186:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800818a:	2b18      	cmp	r3, #24
 800818c:	f200 8155 	bhi.w	800843a <HAL_RCC_GetSysClockFreq+0x2be>
 8008190:	a201      	add	r2, pc, #4	; (adr r2, 8008198 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008196:	bf00      	nop
 8008198:	080081fd 	.word	0x080081fd
 800819c:	0800843b 	.word	0x0800843b
 80081a0:	0800843b 	.word	0x0800843b
 80081a4:	0800843b 	.word	0x0800843b
 80081a8:	0800843b 	.word	0x0800843b
 80081ac:	0800843b 	.word	0x0800843b
 80081b0:	0800843b 	.word	0x0800843b
 80081b4:	0800843b 	.word	0x0800843b
 80081b8:	08008223 	.word	0x08008223
 80081bc:	0800843b 	.word	0x0800843b
 80081c0:	0800843b 	.word	0x0800843b
 80081c4:	0800843b 	.word	0x0800843b
 80081c8:	0800843b 	.word	0x0800843b
 80081cc:	0800843b 	.word	0x0800843b
 80081d0:	0800843b 	.word	0x0800843b
 80081d4:	0800843b 	.word	0x0800843b
 80081d8:	08008229 	.word	0x08008229
 80081dc:	0800843b 	.word	0x0800843b
 80081e0:	0800843b 	.word	0x0800843b
 80081e4:	0800843b 	.word	0x0800843b
 80081e8:	0800843b 	.word	0x0800843b
 80081ec:	0800843b 	.word	0x0800843b
 80081f0:	0800843b 	.word	0x0800843b
 80081f4:	0800843b 	.word	0x0800843b
 80081f8:	0800822f 	.word	0x0800822f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081fc:	4b94      	ldr	r3, [pc, #592]	; (8008450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f003 0320 	and.w	r3, r3, #32
 8008204:	2b00      	cmp	r3, #0
 8008206:	d009      	beq.n	800821c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008208:	4b91      	ldr	r3, [pc, #580]	; (8008450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	08db      	lsrs	r3, r3, #3
 800820e:	f003 0303 	and.w	r3, r3, #3
 8008212:	4a90      	ldr	r2, [pc, #576]	; (8008454 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008214:	fa22 f303 	lsr.w	r3, r2, r3
 8008218:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800821a:	e111      	b.n	8008440 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800821c:	4b8d      	ldr	r3, [pc, #564]	; (8008454 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800821e:	61bb      	str	r3, [r7, #24]
      break;
 8008220:	e10e      	b.n	8008440 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008222:	4b8d      	ldr	r3, [pc, #564]	; (8008458 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008224:	61bb      	str	r3, [r7, #24]
      break;
 8008226:	e10b      	b.n	8008440 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008228:	4b8c      	ldr	r3, [pc, #560]	; (800845c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800822a:	61bb      	str	r3, [r7, #24]
      break;
 800822c:	e108      	b.n	8008440 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800822e:	4b88      	ldr	r3, [pc, #544]	; (8008450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008232:	f003 0303 	and.w	r3, r3, #3
 8008236:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008238:	4b85      	ldr	r3, [pc, #532]	; (8008450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800823a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800823c:	091b      	lsrs	r3, r3, #4
 800823e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008242:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008244:	4b82      	ldr	r3, [pc, #520]	; (8008450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008248:	f003 0301 	and.w	r3, r3, #1
 800824c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800824e:	4b80      	ldr	r3, [pc, #512]	; (8008450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008252:	08db      	lsrs	r3, r3, #3
 8008254:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008258:	68fa      	ldr	r2, [r7, #12]
 800825a:	fb02 f303 	mul.w	r3, r2, r3
 800825e:	ee07 3a90 	vmov	s15, r3
 8008262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008266:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	2b00      	cmp	r3, #0
 800826e:	f000 80e1 	beq.w	8008434 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	2b02      	cmp	r3, #2
 8008276:	f000 8083 	beq.w	8008380 <HAL_RCC_GetSysClockFreq+0x204>
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	2b02      	cmp	r3, #2
 800827e:	f200 80a1 	bhi.w	80083c4 <HAL_RCC_GetSysClockFreq+0x248>
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d003      	beq.n	8008290 <HAL_RCC_GetSysClockFreq+0x114>
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	2b01      	cmp	r3, #1
 800828c:	d056      	beq.n	800833c <HAL_RCC_GetSysClockFreq+0x1c0>
 800828e:	e099      	b.n	80083c4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008290:	4b6f      	ldr	r3, [pc, #444]	; (8008450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f003 0320 	and.w	r3, r3, #32
 8008298:	2b00      	cmp	r3, #0
 800829a:	d02d      	beq.n	80082f8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800829c:	4b6c      	ldr	r3, [pc, #432]	; (8008450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	08db      	lsrs	r3, r3, #3
 80082a2:	f003 0303 	and.w	r3, r3, #3
 80082a6:	4a6b      	ldr	r2, [pc, #428]	; (8008454 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80082a8:	fa22 f303 	lsr.w	r3, r2, r3
 80082ac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	ee07 3a90 	vmov	s15, r3
 80082b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	ee07 3a90 	vmov	s15, r3
 80082be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082c6:	4b62      	ldr	r3, [pc, #392]	; (8008450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082ce:	ee07 3a90 	vmov	s15, r3
 80082d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80082da:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008460 <HAL_RCC_GetSysClockFreq+0x2e4>
 80082de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082f2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80082f6:	e087      	b.n	8008408 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	ee07 3a90 	vmov	s15, r3
 80082fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008302:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008464 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800830a:	4b51      	ldr	r3, [pc, #324]	; (8008450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800830c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800830e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008312:	ee07 3a90 	vmov	s15, r3
 8008316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800831a:	ed97 6a02 	vldr	s12, [r7, #8]
 800831e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008460 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800832a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800832e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008336:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800833a:	e065      	b.n	8008408 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	ee07 3a90 	vmov	s15, r3
 8008342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008346:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008468 <HAL_RCC_GetSysClockFreq+0x2ec>
 800834a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800834e:	4b40      	ldr	r3, [pc, #256]	; (8008450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008356:	ee07 3a90 	vmov	s15, r3
 800835a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800835e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008362:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008460 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800836a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800836e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800837a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800837e:	e043      	b.n	8008408 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	ee07 3a90 	vmov	s15, r3
 8008386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800838a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800846c <HAL_RCC_GetSysClockFreq+0x2f0>
 800838e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008392:	4b2f      	ldr	r3, [pc, #188]	; (8008450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800839a:	ee07 3a90 	vmov	s15, r3
 800839e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80083a6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008460 <HAL_RCC_GetSysClockFreq+0x2e4>
 80083aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80083c2:	e021      	b.n	8008408 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	ee07 3a90 	vmov	s15, r3
 80083ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ce:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008468 <HAL_RCC_GetSysClockFreq+0x2ec>
 80083d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083d6:	4b1e      	ldr	r3, [pc, #120]	; (8008450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083de:	ee07 3a90 	vmov	s15, r3
 80083e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80083ea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008460 <HAL_RCC_GetSysClockFreq+0x2e4>
 80083ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008402:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008406:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008408:	4b11      	ldr	r3, [pc, #68]	; (8008450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800840a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800840c:	0a5b      	lsrs	r3, r3, #9
 800840e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008412:	3301      	adds	r3, #1
 8008414:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	ee07 3a90 	vmov	s15, r3
 800841c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008420:	edd7 6a07 	vldr	s13, [r7, #28]
 8008424:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008428:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800842c:	ee17 3a90 	vmov	r3, s15
 8008430:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008432:	e005      	b.n	8008440 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008434:	2300      	movs	r3, #0
 8008436:	61bb      	str	r3, [r7, #24]
      break;
 8008438:	e002      	b.n	8008440 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800843a:	4b07      	ldr	r3, [pc, #28]	; (8008458 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800843c:	61bb      	str	r3, [r7, #24]
      break;
 800843e:	bf00      	nop
  }

  return sysclockfreq;
 8008440:	69bb      	ldr	r3, [r7, #24]
}
 8008442:	4618      	mov	r0, r3
 8008444:	3724      	adds	r7, #36	; 0x24
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop
 8008450:	58024400 	.word	0x58024400
 8008454:	03d09000 	.word	0x03d09000
 8008458:	003d0900 	.word	0x003d0900
 800845c:	017d7840 	.word	0x017d7840
 8008460:	46000000 	.word	0x46000000
 8008464:	4c742400 	.word	0x4c742400
 8008468:	4a742400 	.word	0x4a742400
 800846c:	4bbebc20 	.word	0x4bbebc20

08008470 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008470:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008474:	b0c6      	sub	sp, #280	; 0x118
 8008476:	af00      	add	r7, sp, #0
 8008478:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800847c:	2300      	movs	r3, #0
 800847e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008482:	2300      	movs	r3, #0
 8008484:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008488:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800848c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008490:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8008494:	2500      	movs	r5, #0
 8008496:	ea54 0305 	orrs.w	r3, r4, r5
 800849a:	d049      	beq.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800849c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80084a6:	d02f      	beq.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80084a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80084ac:	d828      	bhi.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80084ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80084b2:	d01a      	beq.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80084b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80084b8:	d822      	bhi.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d003      	beq.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80084be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084c2:	d007      	beq.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80084c4:	e01c      	b.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084c6:	4bab      	ldr	r3, [pc, #684]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80084c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ca:	4aaa      	ldr	r2, [pc, #680]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80084cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80084d2:	e01a      	b.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80084d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084d8:	3308      	adds	r3, #8
 80084da:	2102      	movs	r1, #2
 80084dc:	4618      	mov	r0, r3
 80084de:	f001 f967 	bl	80097b0 <RCCEx_PLL2_Config>
 80084e2:	4603      	mov	r3, r0
 80084e4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80084e8:	e00f      	b.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80084ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084ee:	3328      	adds	r3, #40	; 0x28
 80084f0:	2102      	movs	r1, #2
 80084f2:	4618      	mov	r0, r3
 80084f4:	f001 fa0e 	bl	8009914 <RCCEx_PLL3_Config>
 80084f8:	4603      	mov	r3, r0
 80084fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80084fe:	e004      	b.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008500:	2301      	movs	r3, #1
 8008502:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008506:	e000      	b.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008508:	bf00      	nop
    }

    if (ret == HAL_OK)
 800850a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800850e:	2b00      	cmp	r3, #0
 8008510:	d10a      	bne.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008512:	4b98      	ldr	r3, [pc, #608]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008516:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800851a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800851e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008520:	4a94      	ldr	r2, [pc, #592]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008522:	430b      	orrs	r3, r1
 8008524:	6513      	str	r3, [r2, #80]	; 0x50
 8008526:	e003      	b.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008528:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800852c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008530:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008538:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800853c:	f04f 0900 	mov.w	r9, #0
 8008540:	ea58 0309 	orrs.w	r3, r8, r9
 8008544:	d047      	beq.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008546:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800854a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800854c:	2b04      	cmp	r3, #4
 800854e:	d82a      	bhi.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008550:	a201      	add	r2, pc, #4	; (adr r2, 8008558 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008556:	bf00      	nop
 8008558:	0800856d 	.word	0x0800856d
 800855c:	0800857b 	.word	0x0800857b
 8008560:	08008591 	.word	0x08008591
 8008564:	080085af 	.word	0x080085af
 8008568:	080085af 	.word	0x080085af
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800856c:	4b81      	ldr	r3, [pc, #516]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800856e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008570:	4a80      	ldr	r2, [pc, #512]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008576:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008578:	e01a      	b.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800857a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800857e:	3308      	adds	r3, #8
 8008580:	2100      	movs	r1, #0
 8008582:	4618      	mov	r0, r3
 8008584:	f001 f914 	bl	80097b0 <RCCEx_PLL2_Config>
 8008588:	4603      	mov	r3, r0
 800858a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800858e:	e00f      	b.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008590:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008594:	3328      	adds	r3, #40	; 0x28
 8008596:	2100      	movs	r1, #0
 8008598:	4618      	mov	r0, r3
 800859a:	f001 f9bb 	bl	8009914 <RCCEx_PLL3_Config>
 800859e:	4603      	mov	r3, r0
 80085a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80085a4:	e004      	b.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80085ac:	e000      	b.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80085ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d10a      	bne.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80085b8:	4b6e      	ldr	r3, [pc, #440]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80085ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085bc:	f023 0107 	bic.w	r1, r3, #7
 80085c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085c6:	4a6b      	ldr	r2, [pc, #428]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80085c8:	430b      	orrs	r3, r1
 80085ca:	6513      	str	r3, [r2, #80]	; 0x50
 80085cc:	e003      	b.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085ce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80085d2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80085d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085de:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 80085e2:	f04f 0b00 	mov.w	fp, #0
 80085e6:	ea5a 030b 	orrs.w	r3, sl, fp
 80085ea:	d05b      	beq.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80085ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80085f4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80085f8:	d03b      	beq.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80085fa:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80085fe:	d834      	bhi.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008600:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008604:	d037      	beq.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008606:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800860a:	d82e      	bhi.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800860c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008610:	d033      	beq.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8008612:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008616:	d828      	bhi.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008618:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800861c:	d01a      	beq.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800861e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008622:	d822      	bhi.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008624:	2b00      	cmp	r3, #0
 8008626:	d003      	beq.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8008628:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800862c:	d007      	beq.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800862e:	e01c      	b.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008630:	4b50      	ldr	r3, [pc, #320]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008634:	4a4f      	ldr	r2, [pc, #316]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008636:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800863a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800863c:	e01e      	b.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800863e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008642:	3308      	adds	r3, #8
 8008644:	2100      	movs	r1, #0
 8008646:	4618      	mov	r0, r3
 8008648:	f001 f8b2 	bl	80097b0 <RCCEx_PLL2_Config>
 800864c:	4603      	mov	r3, r0
 800864e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008652:	e013      	b.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008654:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008658:	3328      	adds	r3, #40	; 0x28
 800865a:	2100      	movs	r1, #0
 800865c:	4618      	mov	r0, r3
 800865e:	f001 f959 	bl	8009914 <RCCEx_PLL3_Config>
 8008662:	4603      	mov	r3, r0
 8008664:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008668:	e008      	b.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008670:	e004      	b.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008672:	bf00      	nop
 8008674:	e002      	b.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008676:	bf00      	nop
 8008678:	e000      	b.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800867a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800867c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008680:	2b00      	cmp	r3, #0
 8008682:	d10b      	bne.n	800869c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008684:	4b3b      	ldr	r3, [pc, #236]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008688:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800868c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008690:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008694:	4a37      	ldr	r2, [pc, #220]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008696:	430b      	orrs	r3, r1
 8008698:	6593      	str	r3, [r2, #88]	; 0x58
 800869a:	e003      	b.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800869c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80086a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80086a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ac:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80086b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80086b4:	2300      	movs	r3, #0
 80086b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80086ba:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80086be:	460b      	mov	r3, r1
 80086c0:	4313      	orrs	r3, r2
 80086c2:	d05d      	beq.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80086c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80086cc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80086d0:	d03b      	beq.n	800874a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80086d2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80086d6:	d834      	bhi.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80086d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80086dc:	d037      	beq.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80086de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80086e2:	d82e      	bhi.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80086e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80086e8:	d033      	beq.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80086ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80086ee:	d828      	bhi.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80086f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086f4:	d01a      	beq.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80086f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086fa:	d822      	bhi.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d003      	beq.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008700:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008704:	d007      	beq.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008706:	e01c      	b.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008708:	4b1a      	ldr	r3, [pc, #104]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800870a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800870c:	4a19      	ldr	r2, [pc, #100]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800870e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008712:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008714:	e01e      	b.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008716:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800871a:	3308      	adds	r3, #8
 800871c:	2100      	movs	r1, #0
 800871e:	4618      	mov	r0, r3
 8008720:	f001 f846 	bl	80097b0 <RCCEx_PLL2_Config>
 8008724:	4603      	mov	r3, r0
 8008726:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800872a:	e013      	b.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800872c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008730:	3328      	adds	r3, #40	; 0x28
 8008732:	2100      	movs	r1, #0
 8008734:	4618      	mov	r0, r3
 8008736:	f001 f8ed 	bl	8009914 <RCCEx_PLL3_Config>
 800873a:	4603      	mov	r3, r0
 800873c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008740:	e008      	b.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008742:	2301      	movs	r3, #1
 8008744:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008748:	e004      	b.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800874a:	bf00      	nop
 800874c:	e002      	b.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800874e:	bf00      	nop
 8008750:	e000      	b.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008752:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008754:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008758:	2b00      	cmp	r3, #0
 800875a:	d10d      	bne.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800875c:	4b05      	ldr	r3, [pc, #20]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800875e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008760:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008764:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008768:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800876c:	4a01      	ldr	r2, [pc, #4]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800876e:	430b      	orrs	r3, r1
 8008770:	6593      	str	r3, [r2, #88]	; 0x58
 8008772:	e005      	b.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008774:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008778:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800877c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008780:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008788:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800878c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008790:	2300      	movs	r3, #0
 8008792:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008796:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800879a:	460b      	mov	r3, r1
 800879c:	4313      	orrs	r3, r2
 800879e:	d03a      	beq.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80087a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087a6:	2b30      	cmp	r3, #48	; 0x30
 80087a8:	d01f      	beq.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80087aa:	2b30      	cmp	r3, #48	; 0x30
 80087ac:	d819      	bhi.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80087ae:	2b20      	cmp	r3, #32
 80087b0:	d00c      	beq.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80087b2:	2b20      	cmp	r3, #32
 80087b4:	d815      	bhi.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d019      	beq.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80087ba:	2b10      	cmp	r3, #16
 80087bc:	d111      	bne.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087be:	4baa      	ldr	r3, [pc, #680]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80087c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c2:	4aa9      	ldr	r2, [pc, #676]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80087c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80087ca:	e011      	b.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80087cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087d0:	3308      	adds	r3, #8
 80087d2:	2102      	movs	r1, #2
 80087d4:	4618      	mov	r0, r3
 80087d6:	f000 ffeb 	bl	80097b0 <RCCEx_PLL2_Config>
 80087da:	4603      	mov	r3, r0
 80087dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80087e0:	e006      	b.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80087e2:	2301      	movs	r3, #1
 80087e4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80087e8:	e002      	b.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80087ea:	bf00      	nop
 80087ec:	e000      	b.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80087ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d10a      	bne.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80087f8:	4b9b      	ldr	r3, [pc, #620]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80087fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087fc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8008800:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008806:	4a98      	ldr	r2, [pc, #608]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008808:	430b      	orrs	r3, r1
 800880a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800880c:	e003      	b.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800880e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008812:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008816:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800881a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800881e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8008822:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008826:	2300      	movs	r3, #0
 8008828:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800882c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8008830:	460b      	mov	r3, r1
 8008832:	4313      	orrs	r3, r2
 8008834:	d051      	beq.n	80088da <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008836:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800883a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800883c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008840:	d035      	beq.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8008842:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008846:	d82e      	bhi.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008848:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800884c:	d031      	beq.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800884e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008852:	d828      	bhi.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008854:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008858:	d01a      	beq.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800885a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800885e:	d822      	bhi.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008860:	2b00      	cmp	r3, #0
 8008862:	d003      	beq.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8008864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008868:	d007      	beq.n	800887a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800886a:	e01c      	b.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800886c:	4b7e      	ldr	r3, [pc, #504]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800886e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008870:	4a7d      	ldr	r2, [pc, #500]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008876:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008878:	e01c      	b.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800887a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800887e:	3308      	adds	r3, #8
 8008880:	2100      	movs	r1, #0
 8008882:	4618      	mov	r0, r3
 8008884:	f000 ff94 	bl	80097b0 <RCCEx_PLL2_Config>
 8008888:	4603      	mov	r3, r0
 800888a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800888e:	e011      	b.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008890:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008894:	3328      	adds	r3, #40	; 0x28
 8008896:	2100      	movs	r1, #0
 8008898:	4618      	mov	r0, r3
 800889a:	f001 f83b 	bl	8009914 <RCCEx_PLL3_Config>
 800889e:	4603      	mov	r3, r0
 80088a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80088a4:	e006      	b.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80088ac:	e002      	b.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80088ae:	bf00      	nop
 80088b0:	e000      	b.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80088b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d10a      	bne.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80088bc:	4b6a      	ldr	r3, [pc, #424]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80088be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088c0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80088c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088ca:	4a67      	ldr	r2, [pc, #412]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80088cc:	430b      	orrs	r3, r1
 80088ce:	6513      	str	r3, [r2, #80]	; 0x50
 80088d0:	e003      	b.n	80088da <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088d2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80088d6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80088da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80088e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80088ea:	2300      	movs	r3, #0
 80088ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80088f0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80088f4:	460b      	mov	r3, r1
 80088f6:	4313      	orrs	r3, r2
 80088f8:	d053      	beq.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80088fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008900:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008904:	d033      	beq.n	800896e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8008906:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800890a:	d82c      	bhi.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800890c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008910:	d02f      	beq.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8008912:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008916:	d826      	bhi.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008918:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800891c:	d02b      	beq.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800891e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008922:	d820      	bhi.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008924:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008928:	d012      	beq.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800892a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800892e:	d81a      	bhi.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008930:	2b00      	cmp	r3, #0
 8008932:	d022      	beq.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8008934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008938:	d115      	bne.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800893a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800893e:	3308      	adds	r3, #8
 8008940:	2101      	movs	r1, #1
 8008942:	4618      	mov	r0, r3
 8008944:	f000 ff34 	bl	80097b0 <RCCEx_PLL2_Config>
 8008948:	4603      	mov	r3, r0
 800894a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800894e:	e015      	b.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008950:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008954:	3328      	adds	r3, #40	; 0x28
 8008956:	2101      	movs	r1, #1
 8008958:	4618      	mov	r0, r3
 800895a:	f000 ffdb 	bl	8009914 <RCCEx_PLL3_Config>
 800895e:	4603      	mov	r3, r0
 8008960:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008964:	e00a      	b.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008966:	2301      	movs	r3, #1
 8008968:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800896c:	e006      	b.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800896e:	bf00      	nop
 8008970:	e004      	b.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008972:	bf00      	nop
 8008974:	e002      	b.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008976:	bf00      	nop
 8008978:	e000      	b.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800897a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800897c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008980:	2b00      	cmp	r3, #0
 8008982:	d10a      	bne.n	800899a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008984:	4b38      	ldr	r3, [pc, #224]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008988:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800898c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008992:	4a35      	ldr	r2, [pc, #212]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008994:	430b      	orrs	r3, r1
 8008996:	6513      	str	r3, [r2, #80]	; 0x50
 8008998:	e003      	b.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800899a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800899e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80089a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089aa:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80089ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80089b2:	2300      	movs	r3, #0
 80089b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80089b8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80089bc:	460b      	mov	r3, r1
 80089be:	4313      	orrs	r3, r2
 80089c0:	d058      	beq.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80089c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80089ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80089ce:	d033      	beq.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80089d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80089d4:	d82c      	bhi.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80089d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089da:	d02f      	beq.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80089dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089e0:	d826      	bhi.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80089e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80089e6:	d02b      	beq.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80089e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80089ec:	d820      	bhi.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80089ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089f2:	d012      	beq.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80089f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089f8:	d81a      	bhi.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d022      	beq.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80089fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a02:	d115      	bne.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a08:	3308      	adds	r3, #8
 8008a0a:	2101      	movs	r1, #1
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f000 fecf 	bl	80097b0 <RCCEx_PLL2_Config>
 8008a12:	4603      	mov	r3, r0
 8008a14:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008a18:	e015      	b.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a1e:	3328      	adds	r3, #40	; 0x28
 8008a20:	2101      	movs	r1, #1
 8008a22:	4618      	mov	r0, r3
 8008a24:	f000 ff76 	bl	8009914 <RCCEx_PLL3_Config>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008a2e:	e00a      	b.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008a30:	2301      	movs	r3, #1
 8008a32:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008a36:	e006      	b.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008a38:	bf00      	nop
 8008a3a:	e004      	b.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008a3c:	bf00      	nop
 8008a3e:	e002      	b.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008a40:	bf00      	nop
 8008a42:	e000      	b.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008a44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a46:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d10e      	bne.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008a4e:	4b06      	ldr	r3, [pc, #24]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a52:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a5a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008a5e:	4a02      	ldr	r2, [pc, #8]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008a60:	430b      	orrs	r3, r1
 8008a62:	6593      	str	r3, [r2, #88]	; 0x58
 8008a64:	e006      	b.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8008a66:	bf00      	nop
 8008a68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a6c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008a70:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008a80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008a84:	2300      	movs	r3, #0
 8008a86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008a8a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8008a8e:	460b      	mov	r3, r1
 8008a90:	4313      	orrs	r3, r2
 8008a92:	d037      	beq.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a9e:	d00e      	beq.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8008aa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008aa4:	d816      	bhi.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d018      	beq.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8008aaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008aae:	d111      	bne.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ab0:	4bc4      	ldr	r3, [pc, #784]	; (8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab4:	4ac3      	ldr	r2, [pc, #780]	; (8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008ab6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008aba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008abc:	e00f      	b.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ac2:	3308      	adds	r3, #8
 8008ac4:	2101      	movs	r1, #1
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f000 fe72 	bl	80097b0 <RCCEx_PLL2_Config>
 8008acc:	4603      	mov	r3, r0
 8008ace:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008ad2:	e004      	b.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008ada:	e000      	b.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8008adc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ade:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d10a      	bne.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008ae6:	4bb7      	ldr	r3, [pc, #732]	; (8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aea:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008af2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008af4:	4ab3      	ldr	r2, [pc, #716]	; (8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008af6:	430b      	orrs	r3, r1
 8008af8:	6513      	str	r3, [r2, #80]	; 0x50
 8008afa:	e003      	b.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008afc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008b00:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8008b10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b14:	2300      	movs	r3, #0
 8008b16:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008b1a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008b1e:	460b      	mov	r3, r1
 8008b20:	4313      	orrs	r3, r2
 8008b22:	d039      	beq.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008b24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b2a:	2b03      	cmp	r3, #3
 8008b2c:	d81c      	bhi.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8008b2e:	a201      	add	r2, pc, #4	; (adr r2, 8008b34 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8008b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b34:	08008b71 	.word	0x08008b71
 8008b38:	08008b45 	.word	0x08008b45
 8008b3c:	08008b53 	.word	0x08008b53
 8008b40:	08008b71 	.word	0x08008b71
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b44:	4b9f      	ldr	r3, [pc, #636]	; (8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b48:	4a9e      	ldr	r2, [pc, #632]	; (8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008b4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008b50:	e00f      	b.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b56:	3308      	adds	r3, #8
 8008b58:	2102      	movs	r1, #2
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f000 fe28 	bl	80097b0 <RCCEx_PLL2_Config>
 8008b60:	4603      	mov	r3, r0
 8008b62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008b66:	e004      	b.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008b6e:	e000      	b.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8008b70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b72:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d10a      	bne.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008b7a:	4b92      	ldr	r3, [pc, #584]	; (8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b7e:	f023 0103 	bic.w	r1, r3, #3
 8008b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b88:	4a8e      	ldr	r2, [pc, #568]	; (8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008b8a:	430b      	orrs	r3, r1
 8008b8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008b8e:	e003      	b.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008b94:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008ba4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ba8:	2300      	movs	r3, #0
 8008baa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008bae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	f000 8099 	beq.w	8008cec <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008bba:	4b83      	ldr	r3, [pc, #524]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a82      	ldr	r2, [pc, #520]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bc4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008bc6:	f7fa fd59 	bl	800367c <HAL_GetTick>
 8008bca:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008bce:	e00b      	b.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008bd0:	f7fa fd54 	bl	800367c <HAL_GetTick>
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008bda:	1ad3      	subs	r3, r2, r3
 8008bdc:	2b64      	cmp	r3, #100	; 0x64
 8008bde:	d903      	bls.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8008be0:	2303      	movs	r3, #3
 8008be2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008be6:	e005      	b.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008be8:	4b77      	ldr	r3, [pc, #476]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d0ed      	beq.n	8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8008bf4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d173      	bne.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008bfc:	4b71      	ldr	r3, [pc, #452]	; (8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008bfe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008c08:	4053      	eors	r3, r2
 8008c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d015      	beq.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008c12:	4b6c      	ldr	r3, [pc, #432]	; (8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c1a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008c1e:	4b69      	ldr	r3, [pc, #420]	; (8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c22:	4a68      	ldr	r2, [pc, #416]	; (8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c28:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008c2a:	4b66      	ldr	r3, [pc, #408]	; (8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c2e:	4a65      	ldr	r2, [pc, #404]	; (8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008c30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c34:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008c36:	4a63      	ldr	r2, [pc, #396]	; (8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008c38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c3c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c4a:	d118      	bne.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c4c:	f7fa fd16 	bl	800367c <HAL_GetTick>
 8008c50:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c54:	e00d      	b.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c56:	f7fa fd11 	bl	800367c <HAL_GetTick>
 8008c5a:	4602      	mov	r2, r0
 8008c5c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008c60:	1ad2      	subs	r2, r2, r3
 8008c62:	f241 3388 	movw	r3, #5000	; 0x1388
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d903      	bls.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8008c6a:	2303      	movs	r3, #3
 8008c6c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8008c70:	e005      	b.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c72:	4b54      	ldr	r3, [pc, #336]	; (8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c76:	f003 0302 	and.w	r3, r3, #2
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d0eb      	beq.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8008c7e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d129      	bne.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c96:	d10e      	bne.n	8008cb6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8008c98:	4b4a      	ldr	r3, [pc, #296]	; (8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008c9a:	691b      	ldr	r3, [r3, #16]
 8008c9c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8008ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ca4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008ca8:	091a      	lsrs	r2, r3, #4
 8008caa:	4b48      	ldr	r3, [pc, #288]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8008cac:	4013      	ands	r3, r2
 8008cae:	4a45      	ldr	r2, [pc, #276]	; (8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008cb0:	430b      	orrs	r3, r1
 8008cb2:	6113      	str	r3, [r2, #16]
 8008cb4:	e005      	b.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8008cb6:	4b43      	ldr	r3, [pc, #268]	; (8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008cb8:	691b      	ldr	r3, [r3, #16]
 8008cba:	4a42      	ldr	r2, [pc, #264]	; (8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008cbc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008cc0:	6113      	str	r3, [r2, #16]
 8008cc2:	4b40      	ldr	r3, [pc, #256]	; (8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008cc4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008cce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008cd2:	4a3c      	ldr	r2, [pc, #240]	; (8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008cd4:	430b      	orrs	r3, r1
 8008cd6:	6713      	str	r3, [r2, #112]	; 0x70
 8008cd8:	e008      	b.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008cda:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008cde:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8008ce2:	e003      	b.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ce4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008ce8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf4:	f002 0301 	and.w	r3, r2, #1
 8008cf8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008d02:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8008d06:	460b      	mov	r3, r1
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	f000 808f 	beq.w	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d14:	2b28      	cmp	r3, #40	; 0x28
 8008d16:	d871      	bhi.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8008d18:	a201      	add	r2, pc, #4	; (adr r2, 8008d20 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8008d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d1e:	bf00      	nop
 8008d20:	08008e05 	.word	0x08008e05
 8008d24:	08008dfd 	.word	0x08008dfd
 8008d28:	08008dfd 	.word	0x08008dfd
 8008d2c:	08008dfd 	.word	0x08008dfd
 8008d30:	08008dfd 	.word	0x08008dfd
 8008d34:	08008dfd 	.word	0x08008dfd
 8008d38:	08008dfd 	.word	0x08008dfd
 8008d3c:	08008dfd 	.word	0x08008dfd
 8008d40:	08008dd1 	.word	0x08008dd1
 8008d44:	08008dfd 	.word	0x08008dfd
 8008d48:	08008dfd 	.word	0x08008dfd
 8008d4c:	08008dfd 	.word	0x08008dfd
 8008d50:	08008dfd 	.word	0x08008dfd
 8008d54:	08008dfd 	.word	0x08008dfd
 8008d58:	08008dfd 	.word	0x08008dfd
 8008d5c:	08008dfd 	.word	0x08008dfd
 8008d60:	08008de7 	.word	0x08008de7
 8008d64:	08008dfd 	.word	0x08008dfd
 8008d68:	08008dfd 	.word	0x08008dfd
 8008d6c:	08008dfd 	.word	0x08008dfd
 8008d70:	08008dfd 	.word	0x08008dfd
 8008d74:	08008dfd 	.word	0x08008dfd
 8008d78:	08008dfd 	.word	0x08008dfd
 8008d7c:	08008dfd 	.word	0x08008dfd
 8008d80:	08008e05 	.word	0x08008e05
 8008d84:	08008dfd 	.word	0x08008dfd
 8008d88:	08008dfd 	.word	0x08008dfd
 8008d8c:	08008dfd 	.word	0x08008dfd
 8008d90:	08008dfd 	.word	0x08008dfd
 8008d94:	08008dfd 	.word	0x08008dfd
 8008d98:	08008dfd 	.word	0x08008dfd
 8008d9c:	08008dfd 	.word	0x08008dfd
 8008da0:	08008e05 	.word	0x08008e05
 8008da4:	08008dfd 	.word	0x08008dfd
 8008da8:	08008dfd 	.word	0x08008dfd
 8008dac:	08008dfd 	.word	0x08008dfd
 8008db0:	08008dfd 	.word	0x08008dfd
 8008db4:	08008dfd 	.word	0x08008dfd
 8008db8:	08008dfd 	.word	0x08008dfd
 8008dbc:	08008dfd 	.word	0x08008dfd
 8008dc0:	08008e05 	.word	0x08008e05
 8008dc4:	58024400 	.word	0x58024400
 8008dc8:	58024800 	.word	0x58024800
 8008dcc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dd4:	3308      	adds	r3, #8
 8008dd6:	2101      	movs	r1, #1
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f000 fce9 	bl	80097b0 <RCCEx_PLL2_Config>
 8008dde:	4603      	mov	r3, r0
 8008de0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008de4:	e00f      	b.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dea:	3328      	adds	r3, #40	; 0x28
 8008dec:	2101      	movs	r1, #1
 8008dee:	4618      	mov	r0, r3
 8008df0:	f000 fd90 	bl	8009914 <RCCEx_PLL3_Config>
 8008df4:	4603      	mov	r3, r0
 8008df6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008dfa:	e004      	b.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008e02:	e000      	b.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8008e04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e06:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d10a      	bne.n	8008e24 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008e0e:	4bbf      	ldr	r3, [pc, #764]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e12:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8008e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e1c:	4abb      	ldr	r2, [pc, #748]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008e1e:	430b      	orrs	r3, r1
 8008e20:	6553      	str	r3, [r2, #84]	; 0x54
 8008e22:	e003      	b.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e24:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008e28:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e34:	f002 0302 	and.w	r3, r2, #2
 8008e38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008e42:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8008e46:	460b      	mov	r3, r1
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	d041      	beq.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e52:	2b05      	cmp	r3, #5
 8008e54:	d824      	bhi.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8008e56:	a201      	add	r2, pc, #4	; (adr r2, 8008e5c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8008e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e5c:	08008ea9 	.word	0x08008ea9
 8008e60:	08008e75 	.word	0x08008e75
 8008e64:	08008e8b 	.word	0x08008e8b
 8008e68:	08008ea9 	.word	0x08008ea9
 8008e6c:	08008ea9 	.word	0x08008ea9
 8008e70:	08008ea9 	.word	0x08008ea9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e78:	3308      	adds	r3, #8
 8008e7a:	2101      	movs	r1, #1
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f000 fc97 	bl	80097b0 <RCCEx_PLL2_Config>
 8008e82:	4603      	mov	r3, r0
 8008e84:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008e88:	e00f      	b.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e8e:	3328      	adds	r3, #40	; 0x28
 8008e90:	2101      	movs	r1, #1
 8008e92:	4618      	mov	r0, r3
 8008e94:	f000 fd3e 	bl	8009914 <RCCEx_PLL3_Config>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008e9e:	e004      	b.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008ea6:	e000      	b.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8008ea8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008eaa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d10a      	bne.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008eb2:	4b96      	ldr	r3, [pc, #600]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eb6:	f023 0107 	bic.w	r1, r3, #7
 8008eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ebe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ec0:	4a92      	ldr	r2, [pc, #584]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008ec2:	430b      	orrs	r3, r1
 8008ec4:	6553      	str	r3, [r2, #84]	; 0x54
 8008ec6:	e003      	b.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ec8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008ecc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed8:	f002 0304 	and.w	r3, r2, #4
 8008edc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008ee6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008eea:	460b      	mov	r3, r1
 8008eec:	4313      	orrs	r3, r2
 8008eee:	d044      	beq.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ef8:	2b05      	cmp	r3, #5
 8008efa:	d825      	bhi.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8008efc:	a201      	add	r2, pc, #4	; (adr r2, 8008f04 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8008efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f02:	bf00      	nop
 8008f04:	08008f51 	.word	0x08008f51
 8008f08:	08008f1d 	.word	0x08008f1d
 8008f0c:	08008f33 	.word	0x08008f33
 8008f10:	08008f51 	.word	0x08008f51
 8008f14:	08008f51 	.word	0x08008f51
 8008f18:	08008f51 	.word	0x08008f51
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f20:	3308      	adds	r3, #8
 8008f22:	2101      	movs	r1, #1
 8008f24:	4618      	mov	r0, r3
 8008f26:	f000 fc43 	bl	80097b0 <RCCEx_PLL2_Config>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008f30:	e00f      	b.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f36:	3328      	adds	r3, #40	; 0x28
 8008f38:	2101      	movs	r1, #1
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f000 fcea 	bl	8009914 <RCCEx_PLL3_Config>
 8008f40:	4603      	mov	r3, r0
 8008f42:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008f46:	e004      	b.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008f4e:	e000      	b.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8008f50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f52:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d10b      	bne.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008f5a:	4b6c      	ldr	r3, [pc, #432]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f5e:	f023 0107 	bic.w	r1, r3, #7
 8008f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f6a:	4a68      	ldr	r2, [pc, #416]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008f6c:	430b      	orrs	r3, r1
 8008f6e:	6593      	str	r3, [r2, #88]	; 0x58
 8008f70:	e003      	b.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f72:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008f76:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f82:	f002 0320 	and.w	r3, r2, #32
 8008f86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008f90:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8008f94:	460b      	mov	r3, r1
 8008f96:	4313      	orrs	r3, r2
 8008f98:	d055      	beq.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008fa6:	d033      	beq.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8008fa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008fac:	d82c      	bhi.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fb2:	d02f      	beq.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8008fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fb8:	d826      	bhi.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008fba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008fbe:	d02b      	beq.n	8009018 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8008fc0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008fc4:	d820      	bhi.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008fc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fca:	d012      	beq.n	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8008fcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fd0:	d81a      	bhi.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d022      	beq.n	800901c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8008fd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fda:	d115      	bne.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fe0:	3308      	adds	r3, #8
 8008fe2:	2100      	movs	r1, #0
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f000 fbe3 	bl	80097b0 <RCCEx_PLL2_Config>
 8008fea:	4603      	mov	r3, r0
 8008fec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008ff0:	e015      	b.n	800901e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ff6:	3328      	adds	r3, #40	; 0x28
 8008ff8:	2102      	movs	r1, #2
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f000 fc8a 	bl	8009914 <RCCEx_PLL3_Config>
 8009000:	4603      	mov	r3, r0
 8009002:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009006:	e00a      	b.n	800901e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009008:	2301      	movs	r3, #1
 800900a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800900e:	e006      	b.n	800901e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009010:	bf00      	nop
 8009012:	e004      	b.n	800901e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009014:	bf00      	nop
 8009016:	e002      	b.n	800901e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009018:	bf00      	nop
 800901a:	e000      	b.n	800901e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800901c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800901e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009022:	2b00      	cmp	r3, #0
 8009024:	d10b      	bne.n	800903e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009026:	4b39      	ldr	r3, [pc, #228]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800902a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800902e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009032:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009036:	4a35      	ldr	r2, [pc, #212]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009038:	430b      	orrs	r3, r1
 800903a:	6553      	str	r3, [r2, #84]	; 0x54
 800903c:	e003      	b.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800903e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009042:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009046:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800904a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8009052:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009056:	2300      	movs	r3, #0
 8009058:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800905c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8009060:	460b      	mov	r3, r1
 8009062:	4313      	orrs	r3, r2
 8009064:	d058      	beq.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009066:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800906a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800906e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009072:	d033      	beq.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8009074:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009078:	d82c      	bhi.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800907a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800907e:	d02f      	beq.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009084:	d826      	bhi.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009086:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800908a:	d02b      	beq.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800908c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009090:	d820      	bhi.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009092:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009096:	d012      	beq.n	80090be <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8009098:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800909c:	d81a      	bhi.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d022      	beq.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80090a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090a6:	d115      	bne.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80090a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090ac:	3308      	adds	r3, #8
 80090ae:	2100      	movs	r1, #0
 80090b0:	4618      	mov	r0, r3
 80090b2:	f000 fb7d 	bl	80097b0 <RCCEx_PLL2_Config>
 80090b6:	4603      	mov	r3, r0
 80090b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80090bc:	e015      	b.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80090be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090c2:	3328      	adds	r3, #40	; 0x28
 80090c4:	2102      	movs	r1, #2
 80090c6:	4618      	mov	r0, r3
 80090c8:	f000 fc24 	bl	8009914 <RCCEx_PLL3_Config>
 80090cc:	4603      	mov	r3, r0
 80090ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80090d2:	e00a      	b.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090d4:	2301      	movs	r3, #1
 80090d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80090da:	e006      	b.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80090dc:	bf00      	nop
 80090de:	e004      	b.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80090e0:	bf00      	nop
 80090e2:	e002      	b.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80090e4:	bf00      	nop
 80090e6:	e000      	b.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80090e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090ea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d10e      	bne.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80090f2:	4b06      	ldr	r3, [pc, #24]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80090f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090f6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80090fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009102:	4a02      	ldr	r2, [pc, #8]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009104:	430b      	orrs	r3, r1
 8009106:	6593      	str	r3, [r2, #88]	; 0x58
 8009108:	e006      	b.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800910a:	bf00      	nop
 800910c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009110:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009114:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009118:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800911c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009120:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8009124:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009128:	2300      	movs	r3, #0
 800912a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800912e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8009132:	460b      	mov	r3, r1
 8009134:	4313      	orrs	r3, r2
 8009136:	d055      	beq.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009138:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800913c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009140:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009144:	d033      	beq.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8009146:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800914a:	d82c      	bhi.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800914c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009150:	d02f      	beq.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8009152:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009156:	d826      	bhi.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009158:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800915c:	d02b      	beq.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800915e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009162:	d820      	bhi.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009164:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009168:	d012      	beq.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800916a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800916e:	d81a      	bhi.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009170:	2b00      	cmp	r3, #0
 8009172:	d022      	beq.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8009174:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009178:	d115      	bne.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800917a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800917e:	3308      	adds	r3, #8
 8009180:	2100      	movs	r1, #0
 8009182:	4618      	mov	r0, r3
 8009184:	f000 fb14 	bl	80097b0 <RCCEx_PLL2_Config>
 8009188:	4603      	mov	r3, r0
 800918a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800918e:	e015      	b.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009190:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009194:	3328      	adds	r3, #40	; 0x28
 8009196:	2102      	movs	r1, #2
 8009198:	4618      	mov	r0, r3
 800919a:	f000 fbbb 	bl	8009914 <RCCEx_PLL3_Config>
 800919e:	4603      	mov	r3, r0
 80091a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80091a4:	e00a      	b.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091a6:	2301      	movs	r3, #1
 80091a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80091ac:	e006      	b.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80091ae:	bf00      	nop
 80091b0:	e004      	b.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80091b2:	bf00      	nop
 80091b4:	e002      	b.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80091b6:	bf00      	nop
 80091b8:	e000      	b.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80091ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d10b      	bne.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80091c4:	4ba0      	ldr	r3, [pc, #640]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80091c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091c8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80091cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80091d4:	4a9c      	ldr	r2, [pc, #624]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80091d6:	430b      	orrs	r3, r1
 80091d8:	6593      	str	r3, [r2, #88]	; 0x58
 80091da:	e003      	b.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80091e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80091e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ec:	f002 0308 	and.w	r3, r2, #8
 80091f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80091f4:	2300      	movs	r3, #0
 80091f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80091fa:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80091fe:	460b      	mov	r3, r1
 8009200:	4313      	orrs	r3, r2
 8009202:	d01e      	beq.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8009204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009208:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800920c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009210:	d10c      	bne.n	800922c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009212:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009216:	3328      	adds	r3, #40	; 0x28
 8009218:	2102      	movs	r1, #2
 800921a:	4618      	mov	r0, r3
 800921c:	f000 fb7a 	bl	8009914 <RCCEx_PLL3_Config>
 8009220:	4603      	mov	r3, r0
 8009222:	2b00      	cmp	r3, #0
 8009224:	d002      	beq.n	800922c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8009226:	2301      	movs	r3, #1
 8009228:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800922c:	4b86      	ldr	r3, [pc, #536]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800922e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009230:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009234:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009238:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800923c:	4a82      	ldr	r2, [pc, #520]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800923e:	430b      	orrs	r3, r1
 8009240:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009242:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924a:	f002 0310 	and.w	r3, r2, #16
 800924e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009252:	2300      	movs	r3, #0
 8009254:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009258:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800925c:	460b      	mov	r3, r1
 800925e:	4313      	orrs	r3, r2
 8009260:	d01e      	beq.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009262:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009266:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800926a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800926e:	d10c      	bne.n	800928a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009270:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009274:	3328      	adds	r3, #40	; 0x28
 8009276:	2102      	movs	r1, #2
 8009278:	4618      	mov	r0, r3
 800927a:	f000 fb4b 	bl	8009914 <RCCEx_PLL3_Config>
 800927e:	4603      	mov	r3, r0
 8009280:	2b00      	cmp	r3, #0
 8009282:	d002      	beq.n	800928a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8009284:	2301      	movs	r3, #1
 8009286:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800928a:	4b6f      	ldr	r3, [pc, #444]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800928c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800928e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009292:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009296:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800929a:	4a6b      	ldr	r2, [pc, #428]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800929c:	430b      	orrs	r3, r1
 800929e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80092a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80092ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80092ae:	2300      	movs	r3, #0
 80092b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80092b2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80092b6:	460b      	mov	r3, r1
 80092b8:	4313      	orrs	r3, r2
 80092ba:	d03e      	beq.n	800933a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80092bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80092c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092c8:	d022      	beq.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80092ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092ce:	d81b      	bhi.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d003      	beq.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80092d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092d8:	d00b      	beq.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80092da:	e015      	b.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80092dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092e0:	3308      	adds	r3, #8
 80092e2:	2100      	movs	r1, #0
 80092e4:	4618      	mov	r0, r3
 80092e6:	f000 fa63 	bl	80097b0 <RCCEx_PLL2_Config>
 80092ea:	4603      	mov	r3, r0
 80092ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80092f0:	e00f      	b.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80092f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092f6:	3328      	adds	r3, #40	; 0x28
 80092f8:	2102      	movs	r1, #2
 80092fa:	4618      	mov	r0, r3
 80092fc:	f000 fb0a 	bl	8009914 <RCCEx_PLL3_Config>
 8009300:	4603      	mov	r3, r0
 8009302:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009306:	e004      	b.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009308:	2301      	movs	r3, #1
 800930a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800930e:	e000      	b.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8009310:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009312:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009316:	2b00      	cmp	r3, #0
 8009318:	d10b      	bne.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800931a:	4b4b      	ldr	r3, [pc, #300]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800931c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800931e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8009322:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009326:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800932a:	4a47      	ldr	r2, [pc, #284]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800932c:	430b      	orrs	r3, r1
 800932e:	6593      	str	r3, [r2, #88]	; 0x58
 8009330:	e003      	b.n	800933a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009332:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009336:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800933a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800933e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009342:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8009346:	673b      	str	r3, [r7, #112]	; 0x70
 8009348:	2300      	movs	r3, #0
 800934a:	677b      	str	r3, [r7, #116]	; 0x74
 800934c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8009350:	460b      	mov	r3, r1
 8009352:	4313      	orrs	r3, r2
 8009354:	d03b      	beq.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009356:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800935a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800935e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009362:	d01f      	beq.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8009364:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009368:	d818      	bhi.n	800939c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800936a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800936e:	d003      	beq.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8009370:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009374:	d007      	beq.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8009376:	e011      	b.n	800939c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009378:	4b33      	ldr	r3, [pc, #204]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800937a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800937c:	4a32      	ldr	r2, [pc, #200]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800937e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009382:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009384:	e00f      	b.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009386:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800938a:	3328      	adds	r3, #40	; 0x28
 800938c:	2101      	movs	r1, #1
 800938e:	4618      	mov	r0, r3
 8009390:	f000 fac0 	bl	8009914 <RCCEx_PLL3_Config>
 8009394:	4603      	mov	r3, r0
 8009396:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800939a:	e004      	b.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800939c:	2301      	movs	r3, #1
 800939e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80093a2:	e000      	b.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80093a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093a6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d10b      	bne.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80093ae:	4b26      	ldr	r3, [pc, #152]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80093b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093b2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80093b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093be:	4a22      	ldr	r2, [pc, #136]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80093c0:	430b      	orrs	r3, r1
 80093c2:	6553      	str	r3, [r2, #84]	; 0x54
 80093c4:	e003      	b.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80093ca:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80093ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80093da:	66bb      	str	r3, [r7, #104]	; 0x68
 80093dc:	2300      	movs	r3, #0
 80093de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80093e0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80093e4:	460b      	mov	r3, r1
 80093e6:	4313      	orrs	r3, r2
 80093e8:	d034      	beq.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80093ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d003      	beq.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80093f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093f8:	d007      	beq.n	800940a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80093fa:	e011      	b.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093fc:	4b12      	ldr	r3, [pc, #72]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80093fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009400:	4a11      	ldr	r2, [pc, #68]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009402:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009406:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009408:	e00e      	b.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800940a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800940e:	3308      	adds	r3, #8
 8009410:	2102      	movs	r1, #2
 8009412:	4618      	mov	r0, r3
 8009414:	f000 f9cc 	bl	80097b0 <RCCEx_PLL2_Config>
 8009418:	4603      	mov	r3, r0
 800941a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800941e:	e003      	b.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8009420:	2301      	movs	r3, #1
 8009422:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009426:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009428:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800942c:	2b00      	cmp	r3, #0
 800942e:	d10d      	bne.n	800944c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009430:	4b05      	ldr	r3, [pc, #20]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009434:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009438:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800943c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800943e:	4a02      	ldr	r2, [pc, #8]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009440:	430b      	orrs	r3, r1
 8009442:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009444:	e006      	b.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8009446:	bf00      	nop
 8009448:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800944c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009450:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009454:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800945c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8009460:	663b      	str	r3, [r7, #96]	; 0x60
 8009462:	2300      	movs	r3, #0
 8009464:	667b      	str	r3, [r7, #100]	; 0x64
 8009466:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800946a:	460b      	mov	r3, r1
 800946c:	4313      	orrs	r3, r2
 800946e:	d00c      	beq.n	800948a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009470:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009474:	3328      	adds	r3, #40	; 0x28
 8009476:	2102      	movs	r1, #2
 8009478:	4618      	mov	r0, r3
 800947a:	f000 fa4b 	bl	8009914 <RCCEx_PLL3_Config>
 800947e:	4603      	mov	r3, r0
 8009480:	2b00      	cmp	r3, #0
 8009482:	d002      	beq.n	800948a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8009484:	2301      	movs	r3, #1
 8009486:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800948a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800948e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009492:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8009496:	65bb      	str	r3, [r7, #88]	; 0x58
 8009498:	2300      	movs	r3, #0
 800949a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800949c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80094a0:	460b      	mov	r3, r1
 80094a2:	4313      	orrs	r3, r2
 80094a4:	d036      	beq.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80094a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094b0:	d018      	beq.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80094b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094b6:	d811      	bhi.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80094b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094bc:	d014      	beq.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80094be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094c2:	d80b      	bhi.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d011      	beq.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80094c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094cc:	d106      	bne.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094ce:	4bb7      	ldr	r3, [pc, #732]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80094d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094d2:	4ab6      	ldr	r2, [pc, #728]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80094d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80094da:	e008      	b.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094dc:	2301      	movs	r3, #1
 80094de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80094e2:	e004      	b.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80094e4:	bf00      	nop
 80094e6:	e002      	b.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80094e8:	bf00      	nop
 80094ea:	e000      	b.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80094ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094ee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d10a      	bne.n	800950c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80094f6:	4bad      	ldr	r3, [pc, #692]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80094f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80094fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009502:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009504:	4aa9      	ldr	r2, [pc, #676]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009506:	430b      	orrs	r3, r1
 8009508:	6553      	str	r3, [r2, #84]	; 0x54
 800950a:	e003      	b.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800950c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009510:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009514:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8009520:	653b      	str	r3, [r7, #80]	; 0x50
 8009522:	2300      	movs	r3, #0
 8009524:	657b      	str	r3, [r7, #84]	; 0x54
 8009526:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800952a:	460b      	mov	r3, r1
 800952c:	4313      	orrs	r3, r2
 800952e:	d009      	beq.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009530:	4b9e      	ldr	r3, [pc, #632]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009534:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009538:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800953c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800953e:	4a9b      	ldr	r2, [pc, #620]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009540:	430b      	orrs	r3, r1
 8009542:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009544:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8009550:	64bb      	str	r3, [r7, #72]	; 0x48
 8009552:	2300      	movs	r3, #0
 8009554:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009556:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800955a:	460b      	mov	r3, r1
 800955c:	4313      	orrs	r3, r2
 800955e:	d009      	beq.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009560:	4b92      	ldr	r3, [pc, #584]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009564:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8009568:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800956c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800956e:	4a8f      	ldr	r2, [pc, #572]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009570:	430b      	orrs	r3, r1
 8009572:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009574:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8009580:	643b      	str	r3, [r7, #64]	; 0x40
 8009582:	2300      	movs	r3, #0
 8009584:	647b      	str	r3, [r7, #68]	; 0x44
 8009586:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800958a:	460b      	mov	r3, r1
 800958c:	4313      	orrs	r3, r2
 800958e:	d00e      	beq.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009590:	4b86      	ldr	r3, [pc, #536]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009592:	691b      	ldr	r3, [r3, #16]
 8009594:	4a85      	ldr	r2, [pc, #532]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009596:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800959a:	6113      	str	r3, [r2, #16]
 800959c:	4b83      	ldr	r3, [pc, #524]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800959e:	6919      	ldr	r1, [r3, #16]
 80095a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80095a8:	4a80      	ldr	r2, [pc, #512]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80095aa:	430b      	orrs	r3, r1
 80095ac:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80095ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b6:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80095ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80095bc:	2300      	movs	r3, #0
 80095be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095c0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80095c4:	460b      	mov	r3, r1
 80095c6:	4313      	orrs	r3, r2
 80095c8:	d009      	beq.n	80095de <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80095ca:	4b78      	ldr	r3, [pc, #480]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80095cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095ce:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80095d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095d8:	4a74      	ldr	r2, [pc, #464]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80095da:	430b      	orrs	r3, r1
 80095dc:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80095de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80095ea:	633b      	str	r3, [r7, #48]	; 0x30
 80095ec:	2300      	movs	r3, #0
 80095ee:	637b      	str	r3, [r7, #52]	; 0x34
 80095f0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80095f4:	460b      	mov	r3, r1
 80095f6:	4313      	orrs	r3, r2
 80095f8:	d00a      	beq.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80095fa:	4b6c      	ldr	r3, [pc, #432]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80095fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095fe:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8009602:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800960a:	4a68      	ldr	r2, [pc, #416]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800960c:	430b      	orrs	r3, r1
 800960e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009610:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009618:	2100      	movs	r1, #0
 800961a:	62b9      	str	r1, [r7, #40]	; 0x28
 800961c:	f003 0301 	and.w	r3, r3, #1
 8009620:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009622:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009626:	460b      	mov	r3, r1
 8009628:	4313      	orrs	r3, r2
 800962a:	d011      	beq.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800962c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009630:	3308      	adds	r3, #8
 8009632:	2100      	movs	r1, #0
 8009634:	4618      	mov	r0, r3
 8009636:	f000 f8bb 	bl	80097b0 <RCCEx_PLL2_Config>
 800963a:	4603      	mov	r3, r0
 800963c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009640:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009644:	2b00      	cmp	r3, #0
 8009646:	d003      	beq.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009648:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800964c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009650:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009658:	2100      	movs	r1, #0
 800965a:	6239      	str	r1, [r7, #32]
 800965c:	f003 0302 	and.w	r3, r3, #2
 8009660:	627b      	str	r3, [r7, #36]	; 0x24
 8009662:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009666:	460b      	mov	r3, r1
 8009668:	4313      	orrs	r3, r2
 800966a:	d011      	beq.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800966c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009670:	3308      	adds	r3, #8
 8009672:	2101      	movs	r1, #1
 8009674:	4618      	mov	r0, r3
 8009676:	f000 f89b 	bl	80097b0 <RCCEx_PLL2_Config>
 800967a:	4603      	mov	r3, r0
 800967c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009680:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009684:	2b00      	cmp	r3, #0
 8009686:	d003      	beq.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009688:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800968c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009698:	2100      	movs	r1, #0
 800969a:	61b9      	str	r1, [r7, #24]
 800969c:	f003 0304 	and.w	r3, r3, #4
 80096a0:	61fb      	str	r3, [r7, #28]
 80096a2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80096a6:	460b      	mov	r3, r1
 80096a8:	4313      	orrs	r3, r2
 80096aa:	d011      	beq.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80096ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096b0:	3308      	adds	r3, #8
 80096b2:	2102      	movs	r1, #2
 80096b4:	4618      	mov	r0, r3
 80096b6:	f000 f87b 	bl	80097b0 <RCCEx_PLL2_Config>
 80096ba:	4603      	mov	r3, r0
 80096bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80096c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d003      	beq.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80096cc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80096d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d8:	2100      	movs	r1, #0
 80096da:	6139      	str	r1, [r7, #16]
 80096dc:	f003 0308 	and.w	r3, r3, #8
 80096e0:	617b      	str	r3, [r7, #20]
 80096e2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80096e6:	460b      	mov	r3, r1
 80096e8:	4313      	orrs	r3, r2
 80096ea:	d011      	beq.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80096ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096f0:	3328      	adds	r3, #40	; 0x28
 80096f2:	2100      	movs	r1, #0
 80096f4:	4618      	mov	r0, r3
 80096f6:	f000 f90d 	bl	8009914 <RCCEx_PLL3_Config>
 80096fa:	4603      	mov	r3, r0
 80096fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8009700:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009704:	2b00      	cmp	r3, #0
 8009706:	d003      	beq.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009708:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800970c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009710:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009718:	2100      	movs	r1, #0
 800971a:	60b9      	str	r1, [r7, #8]
 800971c:	f003 0310 	and.w	r3, r3, #16
 8009720:	60fb      	str	r3, [r7, #12]
 8009722:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009726:	460b      	mov	r3, r1
 8009728:	4313      	orrs	r3, r2
 800972a:	d011      	beq.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800972c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009730:	3328      	adds	r3, #40	; 0x28
 8009732:	2101      	movs	r1, #1
 8009734:	4618      	mov	r0, r3
 8009736:	f000 f8ed 	bl	8009914 <RCCEx_PLL3_Config>
 800973a:	4603      	mov	r3, r0
 800973c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009740:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009744:	2b00      	cmp	r3, #0
 8009746:	d003      	beq.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009748:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800974c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009750:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009758:	2100      	movs	r1, #0
 800975a:	6039      	str	r1, [r7, #0]
 800975c:	f003 0320 	and.w	r3, r3, #32
 8009760:	607b      	str	r3, [r7, #4]
 8009762:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009766:	460b      	mov	r3, r1
 8009768:	4313      	orrs	r3, r2
 800976a:	d011      	beq.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800976c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009770:	3328      	adds	r3, #40	; 0x28
 8009772:	2102      	movs	r1, #2
 8009774:	4618      	mov	r0, r3
 8009776:	f000 f8cd 	bl	8009914 <RCCEx_PLL3_Config>
 800977a:	4603      	mov	r3, r0
 800977c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009780:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009784:	2b00      	cmp	r3, #0
 8009786:	d003      	beq.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009788:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800978c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8009790:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8009794:	2b00      	cmp	r3, #0
 8009796:	d101      	bne.n	800979c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8009798:	2300      	movs	r3, #0
 800979a:	e000      	b.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800979c:	2301      	movs	r3, #1
}
 800979e:	4618      	mov	r0, r3
 80097a0:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80097a4:	46bd      	mov	sp, r7
 80097a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80097aa:	bf00      	nop
 80097ac:	58024400 	.word	0x58024400

080097b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80097ba:	2300      	movs	r3, #0
 80097bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80097be:	4b53      	ldr	r3, [pc, #332]	; (800990c <RCCEx_PLL2_Config+0x15c>)
 80097c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097c2:	f003 0303 	and.w	r3, r3, #3
 80097c6:	2b03      	cmp	r3, #3
 80097c8:	d101      	bne.n	80097ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80097ca:	2301      	movs	r3, #1
 80097cc:	e099      	b.n	8009902 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80097ce:	4b4f      	ldr	r3, [pc, #316]	; (800990c <RCCEx_PLL2_Config+0x15c>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4a4e      	ldr	r2, [pc, #312]	; (800990c <RCCEx_PLL2_Config+0x15c>)
 80097d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80097d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097da:	f7f9 ff4f 	bl	800367c <HAL_GetTick>
 80097de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80097e0:	e008      	b.n	80097f4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80097e2:	f7f9 ff4b 	bl	800367c <HAL_GetTick>
 80097e6:	4602      	mov	r2, r0
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	1ad3      	subs	r3, r2, r3
 80097ec:	2b02      	cmp	r3, #2
 80097ee:	d901      	bls.n	80097f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80097f0:	2303      	movs	r3, #3
 80097f2:	e086      	b.n	8009902 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80097f4:	4b45      	ldr	r3, [pc, #276]	; (800990c <RCCEx_PLL2_Config+0x15c>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d1f0      	bne.n	80097e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009800:	4b42      	ldr	r3, [pc, #264]	; (800990c <RCCEx_PLL2_Config+0x15c>)
 8009802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009804:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	031b      	lsls	r3, r3, #12
 800980e:	493f      	ldr	r1, [pc, #252]	; (800990c <RCCEx_PLL2_Config+0x15c>)
 8009810:	4313      	orrs	r3, r2
 8009812:	628b      	str	r3, [r1, #40]	; 0x28
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	3b01      	subs	r3, #1
 800981a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	689b      	ldr	r3, [r3, #8]
 8009822:	3b01      	subs	r3, #1
 8009824:	025b      	lsls	r3, r3, #9
 8009826:	b29b      	uxth	r3, r3
 8009828:	431a      	orrs	r2, r3
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	68db      	ldr	r3, [r3, #12]
 800982e:	3b01      	subs	r3, #1
 8009830:	041b      	lsls	r3, r3, #16
 8009832:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009836:	431a      	orrs	r2, r3
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	691b      	ldr	r3, [r3, #16]
 800983c:	3b01      	subs	r3, #1
 800983e:	061b      	lsls	r3, r3, #24
 8009840:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009844:	4931      	ldr	r1, [pc, #196]	; (800990c <RCCEx_PLL2_Config+0x15c>)
 8009846:	4313      	orrs	r3, r2
 8009848:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800984a:	4b30      	ldr	r3, [pc, #192]	; (800990c <RCCEx_PLL2_Config+0x15c>)
 800984c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800984e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	695b      	ldr	r3, [r3, #20]
 8009856:	492d      	ldr	r1, [pc, #180]	; (800990c <RCCEx_PLL2_Config+0x15c>)
 8009858:	4313      	orrs	r3, r2
 800985a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800985c:	4b2b      	ldr	r3, [pc, #172]	; (800990c <RCCEx_PLL2_Config+0x15c>)
 800985e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009860:	f023 0220 	bic.w	r2, r3, #32
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	699b      	ldr	r3, [r3, #24]
 8009868:	4928      	ldr	r1, [pc, #160]	; (800990c <RCCEx_PLL2_Config+0x15c>)
 800986a:	4313      	orrs	r3, r2
 800986c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800986e:	4b27      	ldr	r3, [pc, #156]	; (800990c <RCCEx_PLL2_Config+0x15c>)
 8009870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009872:	4a26      	ldr	r2, [pc, #152]	; (800990c <RCCEx_PLL2_Config+0x15c>)
 8009874:	f023 0310 	bic.w	r3, r3, #16
 8009878:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800987a:	4b24      	ldr	r3, [pc, #144]	; (800990c <RCCEx_PLL2_Config+0x15c>)
 800987c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800987e:	4b24      	ldr	r3, [pc, #144]	; (8009910 <RCCEx_PLL2_Config+0x160>)
 8009880:	4013      	ands	r3, r2
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	69d2      	ldr	r2, [r2, #28]
 8009886:	00d2      	lsls	r2, r2, #3
 8009888:	4920      	ldr	r1, [pc, #128]	; (800990c <RCCEx_PLL2_Config+0x15c>)
 800988a:	4313      	orrs	r3, r2
 800988c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800988e:	4b1f      	ldr	r3, [pc, #124]	; (800990c <RCCEx_PLL2_Config+0x15c>)
 8009890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009892:	4a1e      	ldr	r2, [pc, #120]	; (800990c <RCCEx_PLL2_Config+0x15c>)
 8009894:	f043 0310 	orr.w	r3, r3, #16
 8009898:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d106      	bne.n	80098ae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80098a0:	4b1a      	ldr	r3, [pc, #104]	; (800990c <RCCEx_PLL2_Config+0x15c>)
 80098a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a4:	4a19      	ldr	r2, [pc, #100]	; (800990c <RCCEx_PLL2_Config+0x15c>)
 80098a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80098aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80098ac:	e00f      	b.n	80098ce <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d106      	bne.n	80098c2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80098b4:	4b15      	ldr	r3, [pc, #84]	; (800990c <RCCEx_PLL2_Config+0x15c>)
 80098b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b8:	4a14      	ldr	r2, [pc, #80]	; (800990c <RCCEx_PLL2_Config+0x15c>)
 80098ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80098be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80098c0:	e005      	b.n	80098ce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80098c2:	4b12      	ldr	r3, [pc, #72]	; (800990c <RCCEx_PLL2_Config+0x15c>)
 80098c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c6:	4a11      	ldr	r2, [pc, #68]	; (800990c <RCCEx_PLL2_Config+0x15c>)
 80098c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80098cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80098ce:	4b0f      	ldr	r3, [pc, #60]	; (800990c <RCCEx_PLL2_Config+0x15c>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4a0e      	ldr	r2, [pc, #56]	; (800990c <RCCEx_PLL2_Config+0x15c>)
 80098d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80098d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098da:	f7f9 fecf 	bl	800367c <HAL_GetTick>
 80098de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80098e0:	e008      	b.n	80098f4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80098e2:	f7f9 fecb 	bl	800367c <HAL_GetTick>
 80098e6:	4602      	mov	r2, r0
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	1ad3      	subs	r3, r2, r3
 80098ec:	2b02      	cmp	r3, #2
 80098ee:	d901      	bls.n	80098f4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80098f0:	2303      	movs	r3, #3
 80098f2:	e006      	b.n	8009902 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80098f4:	4b05      	ldr	r3, [pc, #20]	; (800990c <RCCEx_PLL2_Config+0x15c>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d0f0      	beq.n	80098e2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009900:	7bfb      	ldrb	r3, [r7, #15]
}
 8009902:	4618      	mov	r0, r3
 8009904:	3710      	adds	r7, #16
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}
 800990a:	bf00      	nop
 800990c:	58024400 	.word	0x58024400
 8009910:	ffff0007 	.word	0xffff0007

08009914 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800991e:	2300      	movs	r3, #0
 8009920:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009922:	4b53      	ldr	r3, [pc, #332]	; (8009a70 <RCCEx_PLL3_Config+0x15c>)
 8009924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009926:	f003 0303 	and.w	r3, r3, #3
 800992a:	2b03      	cmp	r3, #3
 800992c:	d101      	bne.n	8009932 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800992e:	2301      	movs	r3, #1
 8009930:	e099      	b.n	8009a66 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009932:	4b4f      	ldr	r3, [pc, #316]	; (8009a70 <RCCEx_PLL3_Config+0x15c>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	4a4e      	ldr	r2, [pc, #312]	; (8009a70 <RCCEx_PLL3_Config+0x15c>)
 8009938:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800993c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800993e:	f7f9 fe9d 	bl	800367c <HAL_GetTick>
 8009942:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009944:	e008      	b.n	8009958 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009946:	f7f9 fe99 	bl	800367c <HAL_GetTick>
 800994a:	4602      	mov	r2, r0
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	1ad3      	subs	r3, r2, r3
 8009950:	2b02      	cmp	r3, #2
 8009952:	d901      	bls.n	8009958 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009954:	2303      	movs	r3, #3
 8009956:	e086      	b.n	8009a66 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009958:	4b45      	ldr	r3, [pc, #276]	; (8009a70 <RCCEx_PLL3_Config+0x15c>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009960:	2b00      	cmp	r3, #0
 8009962:	d1f0      	bne.n	8009946 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009964:	4b42      	ldr	r3, [pc, #264]	; (8009a70 <RCCEx_PLL3_Config+0x15c>)
 8009966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009968:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	051b      	lsls	r3, r3, #20
 8009972:	493f      	ldr	r1, [pc, #252]	; (8009a70 <RCCEx_PLL3_Config+0x15c>)
 8009974:	4313      	orrs	r3, r2
 8009976:	628b      	str	r3, [r1, #40]	; 0x28
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	3b01      	subs	r3, #1
 800997e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	689b      	ldr	r3, [r3, #8]
 8009986:	3b01      	subs	r3, #1
 8009988:	025b      	lsls	r3, r3, #9
 800998a:	b29b      	uxth	r3, r3
 800998c:	431a      	orrs	r2, r3
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	68db      	ldr	r3, [r3, #12]
 8009992:	3b01      	subs	r3, #1
 8009994:	041b      	lsls	r3, r3, #16
 8009996:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800999a:	431a      	orrs	r2, r3
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	691b      	ldr	r3, [r3, #16]
 80099a0:	3b01      	subs	r3, #1
 80099a2:	061b      	lsls	r3, r3, #24
 80099a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80099a8:	4931      	ldr	r1, [pc, #196]	; (8009a70 <RCCEx_PLL3_Config+0x15c>)
 80099aa:	4313      	orrs	r3, r2
 80099ac:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80099ae:	4b30      	ldr	r3, [pc, #192]	; (8009a70 <RCCEx_PLL3_Config+0x15c>)
 80099b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	695b      	ldr	r3, [r3, #20]
 80099ba:	492d      	ldr	r1, [pc, #180]	; (8009a70 <RCCEx_PLL3_Config+0x15c>)
 80099bc:	4313      	orrs	r3, r2
 80099be:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80099c0:	4b2b      	ldr	r3, [pc, #172]	; (8009a70 <RCCEx_PLL3_Config+0x15c>)
 80099c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	699b      	ldr	r3, [r3, #24]
 80099cc:	4928      	ldr	r1, [pc, #160]	; (8009a70 <RCCEx_PLL3_Config+0x15c>)
 80099ce:	4313      	orrs	r3, r2
 80099d0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80099d2:	4b27      	ldr	r3, [pc, #156]	; (8009a70 <RCCEx_PLL3_Config+0x15c>)
 80099d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d6:	4a26      	ldr	r2, [pc, #152]	; (8009a70 <RCCEx_PLL3_Config+0x15c>)
 80099d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80099de:	4b24      	ldr	r3, [pc, #144]	; (8009a70 <RCCEx_PLL3_Config+0x15c>)
 80099e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099e2:	4b24      	ldr	r3, [pc, #144]	; (8009a74 <RCCEx_PLL3_Config+0x160>)
 80099e4:	4013      	ands	r3, r2
 80099e6:	687a      	ldr	r2, [r7, #4]
 80099e8:	69d2      	ldr	r2, [r2, #28]
 80099ea:	00d2      	lsls	r2, r2, #3
 80099ec:	4920      	ldr	r1, [pc, #128]	; (8009a70 <RCCEx_PLL3_Config+0x15c>)
 80099ee:	4313      	orrs	r3, r2
 80099f0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80099f2:	4b1f      	ldr	r3, [pc, #124]	; (8009a70 <RCCEx_PLL3_Config+0x15c>)
 80099f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099f6:	4a1e      	ldr	r2, [pc, #120]	; (8009a70 <RCCEx_PLL3_Config+0x15c>)
 80099f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d106      	bne.n	8009a12 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009a04:	4b1a      	ldr	r3, [pc, #104]	; (8009a70 <RCCEx_PLL3_Config+0x15c>)
 8009a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a08:	4a19      	ldr	r2, [pc, #100]	; (8009a70 <RCCEx_PLL3_Config+0x15c>)
 8009a0a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009a0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009a10:	e00f      	b.n	8009a32 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d106      	bne.n	8009a26 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009a18:	4b15      	ldr	r3, [pc, #84]	; (8009a70 <RCCEx_PLL3_Config+0x15c>)
 8009a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a1c:	4a14      	ldr	r2, [pc, #80]	; (8009a70 <RCCEx_PLL3_Config+0x15c>)
 8009a1e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009a22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009a24:	e005      	b.n	8009a32 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009a26:	4b12      	ldr	r3, [pc, #72]	; (8009a70 <RCCEx_PLL3_Config+0x15c>)
 8009a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a2a:	4a11      	ldr	r2, [pc, #68]	; (8009a70 <RCCEx_PLL3_Config+0x15c>)
 8009a2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009a30:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009a32:	4b0f      	ldr	r3, [pc, #60]	; (8009a70 <RCCEx_PLL3_Config+0x15c>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a0e      	ldr	r2, [pc, #56]	; (8009a70 <RCCEx_PLL3_Config+0x15c>)
 8009a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a3e:	f7f9 fe1d 	bl	800367c <HAL_GetTick>
 8009a42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009a44:	e008      	b.n	8009a58 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009a46:	f7f9 fe19 	bl	800367c <HAL_GetTick>
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	1ad3      	subs	r3, r2, r3
 8009a50:	2b02      	cmp	r3, #2
 8009a52:	d901      	bls.n	8009a58 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009a54:	2303      	movs	r3, #3
 8009a56:	e006      	b.n	8009a66 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009a58:	4b05      	ldr	r3, [pc, #20]	; (8009a70 <RCCEx_PLL3_Config+0x15c>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d0f0      	beq.n	8009a46 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3710      	adds	r7, #16
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
 8009a6e:	bf00      	nop
 8009a70:	58024400 	.word	0x58024400
 8009a74:	ffff0007 	.word	0xffff0007

08009a78 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b084      	sub	sp, #16
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009a80:	2301      	movs	r3, #1
 8009a82:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d071      	beq.n	8009b6e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d106      	bne.n	8009aa4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f7f7 ff1e 	bl	80018e0 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2202      	movs	r2, #2
 8009aa8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	f003 0310 	and.w	r3, r3, #16
 8009ab6:	2b10      	cmp	r3, #16
 8009ab8:	d050      	beq.n	8009b5c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	22ca      	movs	r2, #202	; 0xca
 8009ac0:	625a      	str	r2, [r3, #36]	; 0x24
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	2253      	movs	r2, #83	; 0x53
 8009ac8:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 f9a0 	bl	8009e10 <RTC_EnterInitMode>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8009ad4:	7bfb      	ldrb	r3, [r7, #15]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d124      	bne.n	8009b24 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	6899      	ldr	r1, [r3, #8]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	4b24      	ldr	r3, [pc, #144]	; (8009b78 <HAL_RTC_Init+0x100>)
 8009ae6:	400b      	ands	r3, r1
 8009ae8:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	6899      	ldr	r1, [r3, #8]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	685a      	ldr	r2, [r3, #4]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	691b      	ldr	r3, [r3, #16]
 8009af8:	431a      	orrs	r2, r3
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	699b      	ldr	r3, [r3, #24]
 8009afe:	431a      	orrs	r2, r3
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	430a      	orrs	r2, r1
 8009b06:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	689b      	ldr	r3, [r3, #8]
 8009b0c:	0419      	lsls	r1, r3, #16
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	68da      	ldr	r2, [r3, #12]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	430a      	orrs	r2, r1
 8009b18:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f000 f9ac 	bl	8009e78 <RTC_ExitInitMode>
 8009b20:	4603      	mov	r3, r0
 8009b22:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8009b24:	7bfb      	ldrb	r3, [r7, #15]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d113      	bne.n	8009b52 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f022 0203 	bic.w	r2, r2, #3
 8009b38:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	69da      	ldr	r2, [r3, #28]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	695b      	ldr	r3, [r3, #20]
 8009b48:	431a      	orrs	r2, r3
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	430a      	orrs	r2, r1
 8009b50:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	22ff      	movs	r2, #255	; 0xff
 8009b58:	625a      	str	r2, [r3, #36]	; 0x24
 8009b5a:	e001      	b.n	8009b60 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009b60:	7bfb      	ldrb	r3, [r7, #15]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d103      	bne.n	8009b6e <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2201      	movs	r2, #1
 8009b6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8009b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3710      	adds	r7, #16
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}
 8009b78:	ff8fffbf 	.word	0xff8fffbf

08009b7c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009b7c:	b590      	push	{r4, r7, lr}
 8009b7e:	b087      	sub	sp, #28
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	60f8      	str	r0, [r7, #12]
 8009b84:	60b9      	str	r1, [r7, #8]
 8009b86:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009b8e:	2b01      	cmp	r3, #1
 8009b90:	d101      	bne.n	8009b96 <HAL_RTC_SetTime+0x1a>
 8009b92:	2302      	movs	r3, #2
 8009b94:	e089      	b.n	8009caa <HAL_RTC_SetTime+0x12e>
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2201      	movs	r2, #1
 8009b9a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2202      	movs	r2, #2
 8009ba2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	22ca      	movs	r2, #202	; 0xca
 8009bac:	625a      	str	r2, [r3, #36]	; 0x24
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	2253      	movs	r2, #83	; 0x53
 8009bb4:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009bb6:	68f8      	ldr	r0, [r7, #12]
 8009bb8:	f000 f92a 	bl	8009e10 <RTC_EnterInitMode>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009bc0:	7cfb      	ldrb	r3, [r7, #19]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d161      	bne.n	8009c8a <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d126      	bne.n	8009c1a <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	689b      	ldr	r3, [r3, #8]
 8009bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d102      	bne.n	8009be0 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	4618      	mov	r0, r3
 8009be6:	f000 f985 	bl	8009ef4 <RTC_ByteToBcd2>
 8009bea:	4603      	mov	r3, r0
 8009bec:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	785b      	ldrb	r3, [r3, #1]
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f000 f97e 	bl	8009ef4 <RTC_ByteToBcd2>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009bfc:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	789b      	ldrb	r3, [r3, #2]
 8009c02:	4618      	mov	r0, r3
 8009c04:	f000 f976 	bl	8009ef4 <RTC_ByteToBcd2>
 8009c08:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009c0a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	78db      	ldrb	r3, [r3, #3]
 8009c12:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009c14:	4313      	orrs	r3, r2
 8009c16:	617b      	str	r3, [r7, #20]
 8009c18:	e018      	b.n	8009c4c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	689b      	ldr	r3, [r3, #8]
 8009c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d102      	bne.n	8009c2e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	785b      	ldrb	r3, [r3, #1]
 8009c38:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009c3a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8009c3c:	68ba      	ldr	r2, [r7, #8]
 8009c3e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009c40:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	78db      	ldrb	r3, [r3, #3]
 8009c46:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681a      	ldr	r2, [r3, #0]
 8009c50:	6979      	ldr	r1, [r7, #20]
 8009c52:	4b18      	ldr	r3, [pc, #96]	; (8009cb4 <HAL_RTC_SetTime+0x138>)
 8009c54:	400b      	ands	r3, r1
 8009c56:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	689a      	ldr	r2, [r3, #8]
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009c66:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	6899      	ldr	r1, [r3, #8]
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	68da      	ldr	r2, [r3, #12]
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	691b      	ldr	r3, [r3, #16]
 8009c76:	431a      	orrs	r2, r3
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	430a      	orrs	r2, r1
 8009c7e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009c80:	68f8      	ldr	r0, [r7, #12]
 8009c82:	f000 f8f9 	bl	8009e78 <RTC_ExitInitMode>
 8009c86:	4603      	mov	r3, r0
 8009c88:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	22ff      	movs	r2, #255	; 0xff
 8009c90:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8009c92:	7cfb      	ldrb	r3, [r7, #19]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d103      	bne.n	8009ca0 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009ca8:	7cfb      	ldrb	r3, [r7, #19]
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	371c      	adds	r7, #28
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd90      	pop	{r4, r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	007f7f7f 	.word	0x007f7f7f

08009cb8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009cb8:	b590      	push	{r4, r7, lr}
 8009cba:	b087      	sub	sp, #28
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	60f8      	str	r0, [r7, #12]
 8009cc0:	60b9      	str	r1, [r7, #8]
 8009cc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d101      	bne.n	8009cd2 <HAL_RTC_SetDate+0x1a>
 8009cce:	2302      	movs	r3, #2
 8009cd0:	e073      	b.n	8009dba <HAL_RTC_SetDate+0x102>
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2202      	movs	r2, #2
 8009cde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d10e      	bne.n	8009d06 <HAL_RTC_SetDate+0x4e>
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	785b      	ldrb	r3, [r3, #1]
 8009cec:	f003 0310 	and.w	r3, r3, #16
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d008      	beq.n	8009d06 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	785b      	ldrb	r3, [r3, #1]
 8009cf8:	f023 0310 	bic.w	r3, r3, #16
 8009cfc:	b2db      	uxtb	r3, r3
 8009cfe:	330a      	adds	r3, #10
 8009d00:	b2da      	uxtb	r2, r3
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d11c      	bne.n	8009d46 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	78db      	ldrb	r3, [r3, #3]
 8009d10:	4618      	mov	r0, r3
 8009d12:	f000 f8ef 	bl	8009ef4 <RTC_ByteToBcd2>
 8009d16:	4603      	mov	r3, r0
 8009d18:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	785b      	ldrb	r3, [r3, #1]
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f000 f8e8 	bl	8009ef4 <RTC_ByteToBcd2>
 8009d24:	4603      	mov	r3, r0
 8009d26:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009d28:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	789b      	ldrb	r3, [r3, #2]
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f000 f8e0 	bl	8009ef4 <RTC_ByteToBcd2>
 8009d34:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009d36:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009d40:	4313      	orrs	r3, r2
 8009d42:	617b      	str	r3, [r7, #20]
 8009d44:	e00e      	b.n	8009d64 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	78db      	ldrb	r3, [r3, #3]
 8009d4a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	785b      	ldrb	r3, [r3, #1]
 8009d50:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009d52:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8009d54:	68ba      	ldr	r2, [r7, #8]
 8009d56:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009d58:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	781b      	ldrb	r3, [r3, #0]
 8009d5e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009d60:	4313      	orrs	r3, r2
 8009d62:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	22ca      	movs	r2, #202	; 0xca
 8009d6a:	625a      	str	r2, [r3, #36]	; 0x24
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	2253      	movs	r2, #83	; 0x53
 8009d72:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009d74:	68f8      	ldr	r0, [r7, #12]
 8009d76:	f000 f84b 	bl	8009e10 <RTC_EnterInitMode>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009d7e:	7cfb      	ldrb	r3, [r7, #19]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d10a      	bne.n	8009d9a <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681a      	ldr	r2, [r3, #0]
 8009d88:	6979      	ldr	r1, [r7, #20]
 8009d8a:	4b0e      	ldr	r3, [pc, #56]	; (8009dc4 <HAL_RTC_SetDate+0x10c>)
 8009d8c:	400b      	ands	r3, r1
 8009d8e:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009d90:	68f8      	ldr	r0, [r7, #12]
 8009d92:	f000 f871 	bl	8009e78 <RTC_ExitInitMode>
 8009d96:	4603      	mov	r3, r0
 8009d98:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	22ff      	movs	r2, #255	; 0xff
 8009da0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8009da2:	7cfb      	ldrb	r3, [r7, #19]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d103      	bne.n	8009db0 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2201      	movs	r2, #1
 8009dac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2200      	movs	r2, #0
 8009db4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009db8:	7cfb      	ldrb	r3, [r7, #19]


}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	371c      	adds	r7, #28
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd90      	pop	{r4, r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	00ffff3f 	.word	0x00ffff3f

08009dc8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b084      	sub	sp, #16
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a0d      	ldr	r2, [pc, #52]	; (8009e0c <HAL_RTC_WaitForSynchro+0x44>)
 8009dd6:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8009dd8:	f7f9 fc50 	bl	800367c <HAL_GetTick>
 8009ddc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009dde:	e009      	b.n	8009df4 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009de0:	f7f9 fc4c 	bl	800367c <HAL_GetTick>
 8009de4:	4602      	mov	r2, r0
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	1ad3      	subs	r3, r2, r3
 8009dea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009dee:	d901      	bls.n	8009df4 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8009df0:	2303      	movs	r3, #3
 8009df2:	e007      	b.n	8009e04 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	68db      	ldr	r3, [r3, #12]
 8009dfa:	f003 0320 	and.w	r3, r3, #32
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d0ee      	beq.n	8009de0 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8009e02:	2300      	movs	r3, #0
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3710      	adds	r7, #16
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}
 8009e0c:	0003ff5f 	.word	0x0003ff5f

08009e10 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b084      	sub	sp, #16
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	68db      	ldr	r3, [r3, #12]
 8009e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d120      	bne.n	8009e6c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8009e32:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009e34:	f7f9 fc22 	bl	800367c <HAL_GetTick>
 8009e38:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009e3a:	e00d      	b.n	8009e58 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009e3c:	f7f9 fc1e 	bl	800367c <HAL_GetTick>
 8009e40:	4602      	mov	r2, r0
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	1ad3      	subs	r3, r2, r3
 8009e46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e4a:	d905      	bls.n	8009e58 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009e4c:	2303      	movs	r3, #3
 8009e4e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2203      	movs	r2, #3
 8009e54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	68db      	ldr	r3, [r3, #12]
 8009e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d102      	bne.n	8009e6c <RTC_EnterInitMode+0x5c>
 8009e66:	7bfb      	ldrb	r3, [r7, #15]
 8009e68:	2b03      	cmp	r3, #3
 8009e6a:	d1e7      	bne.n	8009e3c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8009e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3710      	adds	r7, #16
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
	...

08009e78 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e80:	2300      	movs	r3, #0
 8009e82:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8009e84:	4b1a      	ldr	r3, [pc, #104]	; (8009ef0 <RTC_ExitInitMode+0x78>)
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	4a19      	ldr	r2, [pc, #100]	; (8009ef0 <RTC_ExitInitMode+0x78>)
 8009e8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e8e:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009e90:	4b17      	ldr	r3, [pc, #92]	; (8009ef0 <RTC_ExitInitMode+0x78>)
 8009e92:	689b      	ldr	r3, [r3, #8]
 8009e94:	f003 0320 	and.w	r3, r3, #32
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d10c      	bne.n	8009eb6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f7ff ff93 	bl	8009dc8 <HAL_RTC_WaitForSynchro>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d01e      	beq.n	8009ee6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2203      	movs	r2, #3
 8009eac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009eb0:	2303      	movs	r3, #3
 8009eb2:	73fb      	strb	r3, [r7, #15]
 8009eb4:	e017      	b.n	8009ee6 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009eb6:	4b0e      	ldr	r3, [pc, #56]	; (8009ef0 <RTC_ExitInitMode+0x78>)
 8009eb8:	689b      	ldr	r3, [r3, #8]
 8009eba:	4a0d      	ldr	r2, [pc, #52]	; (8009ef0 <RTC_ExitInitMode+0x78>)
 8009ebc:	f023 0320 	bic.w	r3, r3, #32
 8009ec0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f7ff ff80 	bl	8009dc8 <HAL_RTC_WaitForSynchro>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d005      	beq.n	8009eda <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2203      	movs	r2, #3
 8009ed2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009ed6:	2303      	movs	r3, #3
 8009ed8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009eda:	4b05      	ldr	r3, [pc, #20]	; (8009ef0 <RTC_ExitInitMode+0x78>)
 8009edc:	689b      	ldr	r3, [r3, #8]
 8009ede:	4a04      	ldr	r2, [pc, #16]	; (8009ef0 <RTC_ExitInitMode+0x78>)
 8009ee0:	f043 0320 	orr.w	r3, r3, #32
 8009ee4:	6093      	str	r3, [r2, #8]
  }

  return status;
 8009ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3710      	adds	r7, #16
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}
 8009ef0:	58004000 	.word	0x58004000

08009ef4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b085      	sub	sp, #20
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	4603      	mov	r3, r0
 8009efc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009efe:	2300      	movs	r3, #0
 8009f00:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8009f02:	79fb      	ldrb	r3, [r7, #7]
 8009f04:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8009f06:	e005      	b.n	8009f14 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8009f0e:	7afb      	ldrb	r3, [r7, #11]
 8009f10:	3b0a      	subs	r3, #10
 8009f12:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8009f14:	7afb      	ldrb	r3, [r7, #11]
 8009f16:	2b09      	cmp	r3, #9
 8009f18:	d8f6      	bhi.n	8009f08 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	011b      	lsls	r3, r3, #4
 8009f20:	b2da      	uxtb	r2, r3
 8009f22:	7afb      	ldrb	r3, [r7, #11]
 8009f24:	4313      	orrs	r3, r2
 8009f26:	b2db      	uxtb	r3, r3
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3714      	adds	r7, #20
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr

08009f34 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b084      	sub	sp, #16
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d101      	bne.n	8009f46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009f42:	2301      	movs	r3, #1
 8009f44:	e10f      	b.n	800a166 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4a87      	ldr	r2, [pc, #540]	; (800a170 <HAL_SPI_Init+0x23c>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d00f      	beq.n	8009f76 <HAL_SPI_Init+0x42>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4a86      	ldr	r2, [pc, #536]	; (800a174 <HAL_SPI_Init+0x240>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d00a      	beq.n	8009f76 <HAL_SPI_Init+0x42>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4a84      	ldr	r2, [pc, #528]	; (800a178 <HAL_SPI_Init+0x244>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d005      	beq.n	8009f76 <HAL_SPI_Init+0x42>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	68db      	ldr	r3, [r3, #12]
 8009f6e:	2b0f      	cmp	r3, #15
 8009f70:	d901      	bls.n	8009f76 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009f72:	2301      	movs	r3, #1
 8009f74:	e0f7      	b.n	800a166 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f000 fd5a 	bl	800aa30 <SPI_GetPacketSize>
 8009f7c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	4a7b      	ldr	r2, [pc, #492]	; (800a170 <HAL_SPI_Init+0x23c>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d00c      	beq.n	8009fa2 <HAL_SPI_Init+0x6e>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4a79      	ldr	r2, [pc, #484]	; (800a174 <HAL_SPI_Init+0x240>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d007      	beq.n	8009fa2 <HAL_SPI_Init+0x6e>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4a78      	ldr	r2, [pc, #480]	; (800a178 <HAL_SPI_Init+0x244>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d002      	beq.n	8009fa2 <HAL_SPI_Init+0x6e>
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2b08      	cmp	r3, #8
 8009fa0:	d811      	bhi.n	8009fc6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009fa6:	4a72      	ldr	r2, [pc, #456]	; (800a170 <HAL_SPI_Init+0x23c>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d009      	beq.n	8009fc0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4a70      	ldr	r2, [pc, #448]	; (800a174 <HAL_SPI_Init+0x240>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d004      	beq.n	8009fc0 <HAL_SPI_Init+0x8c>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4a6f      	ldr	r2, [pc, #444]	; (800a178 <HAL_SPI_Init+0x244>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d104      	bne.n	8009fca <HAL_SPI_Init+0x96>
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2b10      	cmp	r3, #16
 8009fc4:	d901      	bls.n	8009fca <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	e0cd      	b.n	800a166 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009fd0:	b2db      	uxtb	r3, r3
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d106      	bne.n	8009fe4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f7f7 fd08 	bl	80019f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2202      	movs	r2, #2
 8009fe8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	681a      	ldr	r2, [r3, #0]
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f022 0201 	bic.w	r2, r2, #1
 8009ffa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	689b      	ldr	r3, [r3, #8]
 800a002:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800a006:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	699b      	ldr	r3, [r3, #24]
 800a00c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a010:	d119      	bne.n	800a046 <HAL_SPI_Init+0x112>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a01a:	d103      	bne.n	800a024 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a020:	2b00      	cmp	r3, #0
 800a022:	d008      	beq.n	800a036 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d10c      	bne.n	800a046 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a030:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a034:	d107      	bne.n	800a046 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	681a      	ldr	r2, [r3, #0]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a044:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d00f      	beq.n	800a072 <HAL_SPI_Init+0x13e>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	68db      	ldr	r3, [r3, #12]
 800a056:	2b06      	cmp	r3, #6
 800a058:	d90b      	bls.n	800a072 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	430a      	orrs	r2, r1
 800a06e:	601a      	str	r2, [r3, #0]
 800a070:	e007      	b.n	800a082 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a080:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	69da      	ldr	r2, [r3, #28]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a08a:	431a      	orrs	r2, r3
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	431a      	orrs	r2, r3
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a094:	ea42 0103 	orr.w	r1, r2, r3
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	68da      	ldr	r2, [r3, #12]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	430a      	orrs	r2, r1
 800a0a2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ac:	431a      	orrs	r2, r3
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0b2:	431a      	orrs	r2, r3
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	699b      	ldr	r3, [r3, #24]
 800a0b8:	431a      	orrs	r2, r3
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	691b      	ldr	r3, [r3, #16]
 800a0be:	431a      	orrs	r2, r3
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	695b      	ldr	r3, [r3, #20]
 800a0c4:	431a      	orrs	r2, r3
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6a1b      	ldr	r3, [r3, #32]
 800a0ca:	431a      	orrs	r2, r3
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	431a      	orrs	r2, r3
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0d6:	431a      	orrs	r2, r3
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	689b      	ldr	r3, [r3, #8]
 800a0dc:	431a      	orrs	r2, r3
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0e2:	ea42 0103 	orr.w	r1, r2, r3
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	430a      	orrs	r2, r1
 800a0f0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	685b      	ldr	r3, [r3, #4]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d113      	bne.n	800a122 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	689b      	ldr	r3, [r3, #8]
 800a100:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a10c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	689b      	ldr	r3, [r3, #8]
 800a114:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a120:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f022 0201 	bic.w	r2, r2, #1
 800a130:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d00a      	beq.n	800a154 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	68db      	ldr	r3, [r3, #12]
 800a144:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	430a      	orrs	r2, r1
 800a152:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2200      	movs	r2, #0
 800a158:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2201      	movs	r2, #1
 800a160:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a164:	2300      	movs	r3, #0
}
 800a166:	4618      	mov	r0, r3
 800a168:	3710      	adds	r7, #16
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
 800a16e:	bf00      	nop
 800a170:	40013000 	.word	0x40013000
 800a174:	40003800 	.word	0x40003800
 800a178:	40003c00 	.word	0x40003c00

0800a17c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b08a      	sub	sp, #40	; 0x28
 800a180:	af02      	add	r7, sp, #8
 800a182:	60f8      	str	r0, [r7, #12]
 800a184:	60b9      	str	r1, [r7, #8]
 800a186:	603b      	str	r3, [r7, #0]
 800a188:	4613      	mov	r3, r2
 800a18a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	3320      	adds	r3, #32
 800a192:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a194:	2300      	movs	r3, #0
 800a196:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	d101      	bne.n	800a1a6 <HAL_SPI_Transmit+0x2a>
 800a1a2:	2302      	movs	r3, #2
 800a1a4:	e1e1      	b.n	800a56a <HAL_SPI_Transmit+0x3ee>
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a1ae:	f7f9 fa65 	bl	800367c <HAL_GetTick>
 800a1b2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a1ba:	b2db      	uxtb	r3, r3
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	d007      	beq.n	800a1d0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800a1c0:	2302      	movs	r3, #2
 800a1c2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a1cc:	7efb      	ldrb	r3, [r7, #27]
 800a1ce:	e1cc      	b.n	800a56a <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d002      	beq.n	800a1dc <HAL_SPI_Transmit+0x60>
 800a1d6:	88fb      	ldrh	r3, [r7, #6]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d107      	bne.n	800a1ec <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800a1dc:	2301      	movs	r3, #1
 800a1de:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a1e8:	7efb      	ldrb	r3, [r7, #27]
 800a1ea:	e1be      	b.n	800a56a <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	2203      	movs	r2, #3
 800a1f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	68ba      	ldr	r2, [r7, #8]
 800a200:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	88fa      	ldrh	r2, [r7, #6]
 800a206:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	88fa      	ldrh	r2, [r7, #6]
 800a20e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	2200      	movs	r2, #0
 800a216:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	2200      	movs	r2, #0
 800a21c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2200      	movs	r2, #0
 800a224:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2200      	movs	r2, #0
 800a22c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2200      	movs	r2, #0
 800a232:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	689b      	ldr	r3, [r3, #8]
 800a238:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800a23c:	d108      	bne.n	800a250 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	681a      	ldr	r2, [r3, #0]
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a24c:	601a      	str	r2, [r3, #0]
 800a24e:	e009      	b.n	800a264 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	68db      	ldr	r3, [r3, #12]
 800a256:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a262:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	685a      	ldr	r2, [r3, #4]
 800a26a:	4b96      	ldr	r3, [pc, #600]	; (800a4c4 <HAL_SPI_Transmit+0x348>)
 800a26c:	4013      	ands	r3, r2
 800a26e:	88f9      	ldrh	r1, [r7, #6]
 800a270:	68fa      	ldr	r2, [r7, #12]
 800a272:	6812      	ldr	r2, [r2, #0]
 800a274:	430b      	orrs	r3, r1
 800a276:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	681a      	ldr	r2, [r3, #0]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f042 0201 	orr.w	r2, r2, #1
 800a286:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	685b      	ldr	r3, [r3, #4]
 800a28c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a290:	d107      	bne.n	800a2a2 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	681a      	ldr	r2, [r3, #0]
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	68db      	ldr	r3, [r3, #12]
 800a2a6:	2b0f      	cmp	r3, #15
 800a2a8:	d947      	bls.n	800a33a <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a2aa:	e03f      	b.n	800a32c <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	695b      	ldr	r3, [r3, #20]
 800a2b2:	f003 0302 	and.w	r3, r3, #2
 800a2b6:	2b02      	cmp	r3, #2
 800a2b8:	d114      	bne.n	800a2e4 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	6812      	ldr	r2, [r2, #0]
 800a2c4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2ca:	1d1a      	adds	r2, r3, #4
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a2d6:	b29b      	uxth	r3, r3
 800a2d8:	3b01      	subs	r3, #1
 800a2da:	b29a      	uxth	r2, r3
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a2e2:	e023      	b.n	800a32c <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a2e4:	f7f9 f9ca 	bl	800367c <HAL_GetTick>
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	1ad3      	subs	r3, r2, r3
 800a2ee:	683a      	ldr	r2, [r7, #0]
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d803      	bhi.n	800a2fc <HAL_SPI_Transmit+0x180>
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2fa:	d102      	bne.n	800a302 <HAL_SPI_Transmit+0x186>
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d114      	bne.n	800a32c <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a302:	68f8      	ldr	r0, [r7, #12]
 800a304:	f000 fac6 	bl	800a894 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2200      	movs	r2, #0
 800a30c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a316:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2201      	movs	r2, #1
 800a324:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a328:	2303      	movs	r3, #3
 800a32a:	e11e      	b.n	800a56a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a332:	b29b      	uxth	r3, r3
 800a334:	2b00      	cmp	r3, #0
 800a336:	d1b9      	bne.n	800a2ac <HAL_SPI_Transmit+0x130>
 800a338:	e0f1      	b.n	800a51e <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	68db      	ldr	r3, [r3, #12]
 800a33e:	2b07      	cmp	r3, #7
 800a340:	f240 80e6 	bls.w	800a510 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a344:	e05d      	b.n	800a402 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	695b      	ldr	r3, [r3, #20]
 800a34c:	f003 0302 	and.w	r3, r3, #2
 800a350:	2b02      	cmp	r3, #2
 800a352:	d132      	bne.n	800a3ba <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a35a:	b29b      	uxth	r3, r3
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	d918      	bls.n	800a392 <HAL_SPI_Transmit+0x216>
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a364:	2b00      	cmp	r3, #0
 800a366:	d014      	beq.n	800a392 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	6812      	ldr	r2, [r2, #0]
 800a372:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a378:	1d1a      	adds	r2, r3, #4
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a384:	b29b      	uxth	r3, r3
 800a386:	3b02      	subs	r3, #2
 800a388:	b29a      	uxth	r2, r3
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a390:	e037      	b.n	800a402 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a396:	881a      	ldrh	r2, [r3, #0]
 800a398:	69fb      	ldr	r3, [r7, #28]
 800a39a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3a0:	1c9a      	adds	r2, r3, #2
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a3ac:	b29b      	uxth	r3, r3
 800a3ae:	3b01      	subs	r3, #1
 800a3b0:	b29a      	uxth	r2, r3
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a3b8:	e023      	b.n	800a402 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a3ba:	f7f9 f95f 	bl	800367c <HAL_GetTick>
 800a3be:	4602      	mov	r2, r0
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	1ad3      	subs	r3, r2, r3
 800a3c4:	683a      	ldr	r2, [r7, #0]
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	d803      	bhi.n	800a3d2 <HAL_SPI_Transmit+0x256>
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3d0:	d102      	bne.n	800a3d8 <HAL_SPI_Transmit+0x25c>
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d114      	bne.n	800a402 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a3d8:	68f8      	ldr	r0, [r7, #12]
 800a3da:	f000 fa5b 	bl	800a894 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a3fe:	2303      	movs	r3, #3
 800a400:	e0b3      	b.n	800a56a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a408:	b29b      	uxth	r3, r3
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d19b      	bne.n	800a346 <HAL_SPI_Transmit+0x1ca>
 800a40e:	e086      	b.n	800a51e <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	695b      	ldr	r3, [r3, #20]
 800a416:	f003 0302 	and.w	r3, r3, #2
 800a41a:	2b02      	cmp	r3, #2
 800a41c:	d154      	bne.n	800a4c8 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a424:	b29b      	uxth	r3, r3
 800a426:	2b03      	cmp	r3, #3
 800a428:	d918      	bls.n	800a45c <HAL_SPI_Transmit+0x2e0>
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a42e:	2b40      	cmp	r3, #64	; 0x40
 800a430:	d914      	bls.n	800a45c <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	6812      	ldr	r2, [r2, #0]
 800a43c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a442:	1d1a      	adds	r2, r3, #4
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a44e:	b29b      	uxth	r3, r3
 800a450:	3b04      	subs	r3, #4
 800a452:	b29a      	uxth	r2, r3
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a45a:	e059      	b.n	800a510 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a462:	b29b      	uxth	r3, r3
 800a464:	2b01      	cmp	r3, #1
 800a466:	d917      	bls.n	800a498 <HAL_SPI_Transmit+0x31c>
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d013      	beq.n	800a498 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a474:	881a      	ldrh	r2, [r3, #0]
 800a476:	69fb      	ldr	r3, [r7, #28]
 800a478:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a47e:	1c9a      	adds	r2, r3, #2
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a48a:	b29b      	uxth	r3, r3
 800a48c:	3b02      	subs	r3, #2
 800a48e:	b29a      	uxth	r2, r3
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a496:	e03b      	b.n	800a510 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	3320      	adds	r3, #32
 800a4a2:	7812      	ldrb	r2, [r2, #0]
 800a4a4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4aa:	1c5a      	adds	r2, r3, #1
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a4b6:	b29b      	uxth	r3, r3
 800a4b8:	3b01      	subs	r3, #1
 800a4ba:	b29a      	uxth	r2, r3
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a4c2:	e025      	b.n	800a510 <HAL_SPI_Transmit+0x394>
 800a4c4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a4c8:	f7f9 f8d8 	bl	800367c <HAL_GetTick>
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	1ad3      	subs	r3, r2, r3
 800a4d2:	683a      	ldr	r2, [r7, #0]
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d803      	bhi.n	800a4e0 <HAL_SPI_Transmit+0x364>
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4de:	d102      	bne.n	800a4e6 <HAL_SPI_Transmit+0x36a>
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d114      	bne.n	800a510 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a4e6:	68f8      	ldr	r0, [r7, #12]
 800a4e8:	f000 f9d4 	bl	800a894 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2201      	movs	r2, #1
 800a508:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a50c:	2303      	movs	r3, #3
 800a50e:	e02c      	b.n	800a56a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a516:	b29b      	uxth	r3, r3
 800a518:	2b00      	cmp	r3, #0
 800a51a:	f47f af79 	bne.w	800a410 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	9300      	str	r3, [sp, #0]
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	2200      	movs	r2, #0
 800a526:	2108      	movs	r1, #8
 800a528:	68f8      	ldr	r0, [r7, #12]
 800a52a:	f000 fa53 	bl	800a9d4 <SPI_WaitOnFlagUntilTimeout>
 800a52e:	4603      	mov	r3, r0
 800a530:	2b00      	cmp	r3, #0
 800a532:	d007      	beq.n	800a544 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a53a:	f043 0220 	orr.w	r2, r3, #32
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a544:	68f8      	ldr	r0, [r7, #12]
 800a546:	f000 f9a5 	bl	800a894 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	2200      	movs	r2, #0
 800a54e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	2201      	movs	r2, #1
 800a556:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a560:	2b00      	cmp	r3, #0
 800a562:	d001      	beq.n	800a568 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800a564:	2301      	movs	r3, #1
 800a566:	e000      	b.n	800a56a <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800a568:	7efb      	ldrb	r3, [r7, #27]
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3720      	adds	r7, #32
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}
 800a572:	bf00      	nop

0800a574 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b088      	sub	sp, #32
 800a578:	af00      	add	r7, sp, #0
 800a57a:	60f8      	str	r0, [r7, #12]
 800a57c:	60b9      	str	r1, [r7, #8]
 800a57e:	603b      	str	r3, [r7, #0]
 800a580:	4613      	mov	r3, r2
 800a582:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a584:	2300      	movs	r3, #0
 800a586:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	3330      	adds	r3, #48	; 0x30
 800a58e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a596:	2b01      	cmp	r3, #1
 800a598:	d101      	bne.n	800a59e <HAL_SPI_Receive+0x2a>
 800a59a:	2302      	movs	r3, #2
 800a59c:	e173      	b.n	800a886 <HAL_SPI_Receive+0x312>
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	2201      	movs	r2, #1
 800a5a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a5a6:	f7f9 f869 	bl	800367c <HAL_GetTick>
 800a5aa:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a5b2:	b2db      	uxtb	r3, r3
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	d007      	beq.n	800a5c8 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800a5b8:	2302      	movs	r3, #2
 800a5ba:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a5c4:	7ffb      	ldrb	r3, [r7, #31]
 800a5c6:	e15e      	b.n	800a886 <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d002      	beq.n	800a5d4 <HAL_SPI_Receive+0x60>
 800a5ce:	88fb      	ldrh	r3, [r7, #6]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d107      	bne.n	800a5e4 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a5e0:	7ffb      	ldrb	r3, [r7, #31]
 800a5e2:	e150      	b.n	800a886 <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2204      	movs	r2, #4
 800a5e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	68ba      	ldr	r2, [r7, #8]
 800a5f8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	88fa      	ldrh	r2, [r7, #6]
 800a5fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	88fa      	ldrh	r2, [r7, #6]
 800a606:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2200      	movs	r2, #0
 800a60e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2200      	movs	r2, #0
 800a614:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2200      	movs	r2, #0
 800a61c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2200      	movs	r2, #0
 800a624:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2200      	movs	r2, #0
 800a62a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	689b      	ldr	r3, [r3, #8]
 800a630:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800a634:	d108      	bne.n	800a648 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	681a      	ldr	r2, [r3, #0]
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a644:	601a      	str	r2, [r3, #0]
 800a646:	e009      	b.n	800a65c <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	68db      	ldr	r3, [r3, #12]
 800a64e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800a65a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	685a      	ldr	r2, [r3, #4]
 800a662:	4b8b      	ldr	r3, [pc, #556]	; (800a890 <HAL_SPI_Receive+0x31c>)
 800a664:	4013      	ands	r3, r2
 800a666:	88f9      	ldrh	r1, [r7, #6]
 800a668:	68fa      	ldr	r2, [r7, #12]
 800a66a:	6812      	ldr	r2, [r2, #0]
 800a66c:	430b      	orrs	r3, r1
 800a66e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	681a      	ldr	r2, [r3, #0]
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f042 0201 	orr.w	r2, r2, #1
 800a67e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	685b      	ldr	r3, [r3, #4]
 800a684:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a688:	d107      	bne.n	800a69a <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	681a      	ldr	r2, [r3, #0]
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a698:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	68db      	ldr	r3, [r3, #12]
 800a69e:	2b0f      	cmp	r3, #15
 800a6a0:	d948      	bls.n	800a734 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a6a2:	e040      	b.n	800a726 <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	695a      	ldr	r2, [r3, #20]
 800a6aa:	f248 0308 	movw	r3, #32776	; 0x8008
 800a6ae:	4013      	ands	r3, r2
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d014      	beq.n	800a6de <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681a      	ldr	r2, [r3, #0]
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a6be:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6c4:	1d1a      	adds	r2, r3, #4
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a6d0:	b29b      	uxth	r3, r3
 800a6d2:	3b01      	subs	r3, #1
 800a6d4:	b29a      	uxth	r2, r3
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a6dc:	e023      	b.n	800a726 <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a6de:	f7f8 ffcd 	bl	800367c <HAL_GetTick>
 800a6e2:	4602      	mov	r2, r0
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	1ad3      	subs	r3, r2, r3
 800a6e8:	683a      	ldr	r2, [r7, #0]
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	d803      	bhi.n	800a6f6 <HAL_SPI_Receive+0x182>
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6f4:	d102      	bne.n	800a6fc <HAL_SPI_Receive+0x188>
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d114      	bne.n	800a726 <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a6fc:	68f8      	ldr	r0, [r7, #12]
 800a6fe:	f000 f8c9 	bl	800a894 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2200      	movs	r2, #0
 800a706:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a710:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2201      	movs	r2, #1
 800a71e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a722:	2303      	movs	r3, #3
 800a724:	e0af      	b.n	800a886 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a72c:	b29b      	uxth	r3, r3
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d1b8      	bne.n	800a6a4 <HAL_SPI_Receive+0x130>
 800a732:	e095      	b.n	800a860 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	68db      	ldr	r3, [r3, #12]
 800a738:	2b07      	cmp	r3, #7
 800a73a:	f240 808b 	bls.w	800a854 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a73e:	e03f      	b.n	800a7c0 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	695b      	ldr	r3, [r3, #20]
 800a746:	f003 0301 	and.w	r3, r3, #1
 800a74a:	2b01      	cmp	r3, #1
 800a74c:	d114      	bne.n	800a778 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a752:	69ba      	ldr	r2, [r7, #24]
 800a754:	8812      	ldrh	r2, [r2, #0]
 800a756:	b292      	uxth	r2, r2
 800a758:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a75e:	1c9a      	adds	r2, r3, #2
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a76a:	b29b      	uxth	r3, r3
 800a76c:	3b01      	subs	r3, #1
 800a76e:	b29a      	uxth	r2, r3
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a776:	e023      	b.n	800a7c0 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a778:	f7f8 ff80 	bl	800367c <HAL_GetTick>
 800a77c:	4602      	mov	r2, r0
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	1ad3      	subs	r3, r2, r3
 800a782:	683a      	ldr	r2, [r7, #0]
 800a784:	429a      	cmp	r2, r3
 800a786:	d803      	bhi.n	800a790 <HAL_SPI_Receive+0x21c>
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a78e:	d102      	bne.n	800a796 <HAL_SPI_Receive+0x222>
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d114      	bne.n	800a7c0 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a796:	68f8      	ldr	r0, [r7, #12]
 800a798:	f000 f87c 	bl	800a894 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a7bc:	2303      	movs	r3, #3
 800a7be:	e062      	b.n	800a886 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a7c6:	b29b      	uxth	r3, r3
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d1b9      	bne.n	800a740 <HAL_SPI_Receive+0x1cc>
 800a7cc:	e048      	b.n	800a860 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	695b      	ldr	r3, [r3, #20]
 800a7d4:	f003 0301 	and.w	r3, r3, #1
 800a7d8:	2b01      	cmp	r3, #1
 800a7da:	d117      	bne.n	800a80c <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7e8:	7812      	ldrb	r2, [r2, #0]
 800a7ea:	b2d2      	uxtb	r2, r2
 800a7ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7f2:	1c5a      	adds	r2, r3, #1
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a7fe:	b29b      	uxth	r3, r3
 800a800:	3b01      	subs	r3, #1
 800a802:	b29a      	uxth	r2, r3
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a80a:	e023      	b.n	800a854 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a80c:	f7f8 ff36 	bl	800367c <HAL_GetTick>
 800a810:	4602      	mov	r2, r0
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	1ad3      	subs	r3, r2, r3
 800a816:	683a      	ldr	r2, [r7, #0]
 800a818:	429a      	cmp	r2, r3
 800a81a:	d803      	bhi.n	800a824 <HAL_SPI_Receive+0x2b0>
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a822:	d102      	bne.n	800a82a <HAL_SPI_Receive+0x2b6>
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d114      	bne.n	800a854 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a82a:	68f8      	ldr	r0, [r7, #12]
 800a82c:	f000 f832 	bl	800a894 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2200      	movs	r2, #0
 800a834:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a83e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2201      	movs	r2, #1
 800a84c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a850:	2303      	movs	r3, #3
 800a852:	e018      	b.n	800a886 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a85a:	b29b      	uxth	r3, r3
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d1b6      	bne.n	800a7ce <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a860:	68f8      	ldr	r0, [r7, #12]
 800a862:	f000 f817 	bl	800a894 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	2200      	movs	r2, #0
 800a86a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	2201      	movs	r2, #1
 800a872:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d001      	beq.n	800a884 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800a880:	2301      	movs	r3, #1
 800a882:	e000      	b.n	800a886 <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800a884:	7ffb      	ldrb	r3, [r7, #31]
}
 800a886:	4618      	mov	r0, r3
 800a888:	3720      	adds	r7, #32
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
 800a88e:	bf00      	nop
 800a890:	ffff0000 	.word	0xffff0000

0800a894 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a894:	b480      	push	{r7}
 800a896:	b085      	sub	sp, #20
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	695b      	ldr	r3, [r3, #20]
 800a8a2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	699a      	ldr	r2, [r3, #24]
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f042 0208 	orr.w	r2, r2, #8
 800a8b2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	699a      	ldr	r2, [r3, #24]
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f042 0210 	orr.w	r2, r2, #16
 800a8c2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	681a      	ldr	r2, [r3, #0]
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f022 0201 	bic.w	r2, r2, #1
 800a8d2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	6919      	ldr	r1, [r3, #16]
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681a      	ldr	r2, [r3, #0]
 800a8de:	4b3c      	ldr	r3, [pc, #240]	; (800a9d0 <SPI_CloseTransfer+0x13c>)
 800a8e0:	400b      	ands	r3, r1
 800a8e2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	689a      	ldr	r2, [r3, #8]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a8f2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a8fa:	b2db      	uxtb	r3, r3
 800a8fc:	2b04      	cmp	r3, #4
 800a8fe:	d014      	beq.n	800a92a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f003 0320 	and.w	r3, r3, #32
 800a906:	2b00      	cmp	r3, #0
 800a908:	d00f      	beq.n	800a92a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a910:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	699a      	ldr	r2, [r3, #24]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f042 0220 	orr.w	r2, r2, #32
 800a928:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a930:	b2db      	uxtb	r3, r3
 800a932:	2b03      	cmp	r3, #3
 800a934:	d014      	beq.n	800a960 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d00f      	beq.n	800a960 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a946:	f043 0204 	orr.w	r2, r3, #4
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	699a      	ldr	r2, [r3, #24]
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a95e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a966:	2b00      	cmp	r3, #0
 800a968:	d00f      	beq.n	800a98a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a970:	f043 0201 	orr.w	r2, r3, #1
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	699a      	ldr	r2, [r3, #24]
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a988:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a990:	2b00      	cmp	r3, #0
 800a992:	d00f      	beq.n	800a9b4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a99a:	f043 0208 	orr.w	r2, r3, #8
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	699a      	ldr	r2, [r3, #24]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a9b2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800a9c4:	bf00      	nop
 800a9c6:	3714      	adds	r7, #20
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr
 800a9d0:	fffffc90 	.word	0xfffffc90

0800a9d4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b084      	sub	sp, #16
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	60b9      	str	r1, [r7, #8]
 800a9de:	603b      	str	r3, [r7, #0]
 800a9e0:	4613      	mov	r3, r2
 800a9e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a9e4:	e010      	b.n	800aa08 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a9e6:	f7f8 fe49 	bl	800367c <HAL_GetTick>
 800a9ea:	4602      	mov	r2, r0
 800a9ec:	69bb      	ldr	r3, [r7, #24]
 800a9ee:	1ad3      	subs	r3, r2, r3
 800a9f0:	683a      	ldr	r2, [r7, #0]
 800a9f2:	429a      	cmp	r2, r3
 800a9f4:	d803      	bhi.n	800a9fe <SPI_WaitOnFlagUntilTimeout+0x2a>
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9fc:	d102      	bne.n	800aa04 <SPI_WaitOnFlagUntilTimeout+0x30>
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d101      	bne.n	800aa08 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800aa04:	2303      	movs	r3, #3
 800aa06:	e00f      	b.n	800aa28 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	695a      	ldr	r2, [r3, #20]
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	4013      	ands	r3, r2
 800aa12:	68ba      	ldr	r2, [r7, #8]
 800aa14:	429a      	cmp	r2, r3
 800aa16:	bf0c      	ite	eq
 800aa18:	2301      	moveq	r3, #1
 800aa1a:	2300      	movne	r3, #0
 800aa1c:	b2db      	uxtb	r3, r3
 800aa1e:	461a      	mov	r2, r3
 800aa20:	79fb      	ldrb	r3, [r7, #7]
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d0df      	beq.n	800a9e6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800aa26:	2300      	movs	r3, #0
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3710      	adds	r7, #16
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}

0800aa30 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b085      	sub	sp, #20
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa3c:	095b      	lsrs	r3, r3, #5
 800aa3e:	3301      	adds	r3, #1
 800aa40:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	68db      	ldr	r3, [r3, #12]
 800aa46:	3301      	adds	r3, #1
 800aa48:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	3307      	adds	r3, #7
 800aa4e:	08db      	lsrs	r3, r3, #3
 800aa50:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	68fa      	ldr	r2, [r7, #12]
 800aa56:	fb02 f303 	mul.w	r3, r2, r3
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3714      	adds	r7, #20
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa64:	4770      	bx	lr

0800aa66 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800aa66:	b580      	push	{r7, lr}
 800aa68:	b082      	sub	sp, #8
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d101      	bne.n	800aa78 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800aa74:	2301      	movs	r3, #1
 800aa76:	e049      	b.n	800ab0c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa7e:	b2db      	uxtb	r3, r3
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d106      	bne.n	800aa92 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2200      	movs	r2, #0
 800aa88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f7f8 fce7 	bl	8003460 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2202      	movs	r2, #2
 800aa96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681a      	ldr	r2, [r3, #0]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	3304      	adds	r3, #4
 800aaa2:	4619      	mov	r1, r3
 800aaa4:	4610      	mov	r0, r2
 800aaa6:	f000 f949 	bl	800ad3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2201      	movs	r2, #1
 800aaae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2201      	movs	r2, #1
 800aab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2201      	movs	r2, #1
 800aabe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2201      	movs	r2, #1
 800aac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2201      	movs	r2, #1
 800aace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2201      	movs	r2, #1
 800aad6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2201      	movs	r2, #1
 800aade:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2201      	movs	r2, #1
 800aae6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2201      	movs	r2, #1
 800aaee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2201      	movs	r2, #1
 800aaf6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2201      	movs	r2, #1
 800aafe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2201      	movs	r2, #1
 800ab06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab0a:	2300      	movs	r3, #0
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3708      	adds	r7, #8
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b086      	sub	sp, #24
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	60f8      	str	r0, [r7, #12]
 800ab1c:	60b9      	str	r1, [r7, #8]
 800ab1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab20:	2300      	movs	r3, #0
 800ab22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab2a:	2b01      	cmp	r3, #1
 800ab2c:	d101      	bne.n	800ab32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ab2e:	2302      	movs	r3, #2
 800ab30:	e0ff      	b.n	800ad32 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2201      	movs	r2, #1
 800ab36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2b14      	cmp	r3, #20
 800ab3e:	f200 80f0 	bhi.w	800ad22 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ab42:	a201      	add	r2, pc, #4	; (adr r2, 800ab48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ab44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab48:	0800ab9d 	.word	0x0800ab9d
 800ab4c:	0800ad23 	.word	0x0800ad23
 800ab50:	0800ad23 	.word	0x0800ad23
 800ab54:	0800ad23 	.word	0x0800ad23
 800ab58:	0800abdd 	.word	0x0800abdd
 800ab5c:	0800ad23 	.word	0x0800ad23
 800ab60:	0800ad23 	.word	0x0800ad23
 800ab64:	0800ad23 	.word	0x0800ad23
 800ab68:	0800ac1f 	.word	0x0800ac1f
 800ab6c:	0800ad23 	.word	0x0800ad23
 800ab70:	0800ad23 	.word	0x0800ad23
 800ab74:	0800ad23 	.word	0x0800ad23
 800ab78:	0800ac5f 	.word	0x0800ac5f
 800ab7c:	0800ad23 	.word	0x0800ad23
 800ab80:	0800ad23 	.word	0x0800ad23
 800ab84:	0800ad23 	.word	0x0800ad23
 800ab88:	0800aca1 	.word	0x0800aca1
 800ab8c:	0800ad23 	.word	0x0800ad23
 800ab90:	0800ad23 	.word	0x0800ad23
 800ab94:	0800ad23 	.word	0x0800ad23
 800ab98:	0800ace1 	.word	0x0800ace1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	68b9      	ldr	r1, [r7, #8]
 800aba2:	4618      	mov	r0, r3
 800aba4:	f000 f970 	bl	800ae88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	699a      	ldr	r2, [r3, #24]
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f042 0208 	orr.w	r2, r2, #8
 800abb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	699a      	ldr	r2, [r3, #24]
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f022 0204 	bic.w	r2, r2, #4
 800abc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	6999      	ldr	r1, [r3, #24]
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	691a      	ldr	r2, [r3, #16]
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	430a      	orrs	r2, r1
 800abd8:	619a      	str	r2, [r3, #24]
      break;
 800abda:	e0a5      	b.n	800ad28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	68b9      	ldr	r1, [r7, #8]
 800abe2:	4618      	mov	r0, r3
 800abe4:	f000 f9e0 	bl	800afa8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	699a      	ldr	r2, [r3, #24]
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800abf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	699a      	ldr	r2, [r3, #24]
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	6999      	ldr	r1, [r3, #24]
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	691b      	ldr	r3, [r3, #16]
 800ac12:	021a      	lsls	r2, r3, #8
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	430a      	orrs	r2, r1
 800ac1a:	619a      	str	r2, [r3, #24]
      break;
 800ac1c:	e084      	b.n	800ad28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	68b9      	ldr	r1, [r7, #8]
 800ac24:	4618      	mov	r0, r3
 800ac26:	f000 fa49 	bl	800b0bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	69da      	ldr	r2, [r3, #28]
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f042 0208 	orr.w	r2, r2, #8
 800ac38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	69da      	ldr	r2, [r3, #28]
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f022 0204 	bic.w	r2, r2, #4
 800ac48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	69d9      	ldr	r1, [r3, #28]
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	691a      	ldr	r2, [r3, #16]
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	430a      	orrs	r2, r1
 800ac5a:	61da      	str	r2, [r3, #28]
      break;
 800ac5c:	e064      	b.n	800ad28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	68b9      	ldr	r1, [r7, #8]
 800ac64:	4618      	mov	r0, r3
 800ac66:	f000 fab1 	bl	800b1cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	69da      	ldr	r2, [r3, #28]
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ac78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	69da      	ldr	r2, [r3, #28]
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	69d9      	ldr	r1, [r3, #28]
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	691b      	ldr	r3, [r3, #16]
 800ac94:	021a      	lsls	r2, r3, #8
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	430a      	orrs	r2, r1
 800ac9c:	61da      	str	r2, [r3, #28]
      break;
 800ac9e:	e043      	b.n	800ad28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	68b9      	ldr	r1, [r7, #8]
 800aca6:	4618      	mov	r0, r3
 800aca8:	f000 fafa 	bl	800b2a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f042 0208 	orr.w	r2, r2, #8
 800acba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f022 0204 	bic.w	r2, r2, #4
 800acca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	691a      	ldr	r2, [r3, #16]
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	430a      	orrs	r2, r1
 800acdc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800acde:	e023      	b.n	800ad28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	68b9      	ldr	r1, [r7, #8]
 800ace6:	4618      	mov	r0, r3
 800ace8:	f000 fb3e 	bl	800b368 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800acfa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ad0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	691b      	ldr	r3, [r3, #16]
 800ad16:	021a      	lsls	r2, r3, #8
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	430a      	orrs	r2, r1
 800ad1e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ad20:	e002      	b.n	800ad28 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ad22:	2301      	movs	r3, #1
 800ad24:	75fb      	strb	r3, [r7, #23]
      break;
 800ad26:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ad30:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	3718      	adds	r7, #24
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}
 800ad3a:	bf00      	nop

0800ad3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b085      	sub	sp, #20
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	4a44      	ldr	r2, [pc, #272]	; (800ae60 <TIM_Base_SetConfig+0x124>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d013      	beq.n	800ad7c <TIM_Base_SetConfig+0x40>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad5a:	d00f      	beq.n	800ad7c <TIM_Base_SetConfig+0x40>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	4a41      	ldr	r2, [pc, #260]	; (800ae64 <TIM_Base_SetConfig+0x128>)
 800ad60:	4293      	cmp	r3, r2
 800ad62:	d00b      	beq.n	800ad7c <TIM_Base_SetConfig+0x40>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	4a40      	ldr	r2, [pc, #256]	; (800ae68 <TIM_Base_SetConfig+0x12c>)
 800ad68:	4293      	cmp	r3, r2
 800ad6a:	d007      	beq.n	800ad7c <TIM_Base_SetConfig+0x40>
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	4a3f      	ldr	r2, [pc, #252]	; (800ae6c <TIM_Base_SetConfig+0x130>)
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d003      	beq.n	800ad7c <TIM_Base_SetConfig+0x40>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	4a3e      	ldr	r2, [pc, #248]	; (800ae70 <TIM_Base_SetConfig+0x134>)
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d108      	bne.n	800ad8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	685b      	ldr	r3, [r3, #4]
 800ad88:	68fa      	ldr	r2, [r7, #12]
 800ad8a:	4313      	orrs	r3, r2
 800ad8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	4a33      	ldr	r2, [pc, #204]	; (800ae60 <TIM_Base_SetConfig+0x124>)
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d027      	beq.n	800ade6 <TIM_Base_SetConfig+0xaa>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad9c:	d023      	beq.n	800ade6 <TIM_Base_SetConfig+0xaa>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	4a30      	ldr	r2, [pc, #192]	; (800ae64 <TIM_Base_SetConfig+0x128>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d01f      	beq.n	800ade6 <TIM_Base_SetConfig+0xaa>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	4a2f      	ldr	r2, [pc, #188]	; (800ae68 <TIM_Base_SetConfig+0x12c>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d01b      	beq.n	800ade6 <TIM_Base_SetConfig+0xaa>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	4a2e      	ldr	r2, [pc, #184]	; (800ae6c <TIM_Base_SetConfig+0x130>)
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d017      	beq.n	800ade6 <TIM_Base_SetConfig+0xaa>
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	4a2d      	ldr	r2, [pc, #180]	; (800ae70 <TIM_Base_SetConfig+0x134>)
 800adba:	4293      	cmp	r3, r2
 800adbc:	d013      	beq.n	800ade6 <TIM_Base_SetConfig+0xaa>
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	4a2c      	ldr	r2, [pc, #176]	; (800ae74 <TIM_Base_SetConfig+0x138>)
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d00f      	beq.n	800ade6 <TIM_Base_SetConfig+0xaa>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	4a2b      	ldr	r2, [pc, #172]	; (800ae78 <TIM_Base_SetConfig+0x13c>)
 800adca:	4293      	cmp	r3, r2
 800adcc:	d00b      	beq.n	800ade6 <TIM_Base_SetConfig+0xaa>
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	4a2a      	ldr	r2, [pc, #168]	; (800ae7c <TIM_Base_SetConfig+0x140>)
 800add2:	4293      	cmp	r3, r2
 800add4:	d007      	beq.n	800ade6 <TIM_Base_SetConfig+0xaa>
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	4a29      	ldr	r2, [pc, #164]	; (800ae80 <TIM_Base_SetConfig+0x144>)
 800adda:	4293      	cmp	r3, r2
 800addc:	d003      	beq.n	800ade6 <TIM_Base_SetConfig+0xaa>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	4a28      	ldr	r2, [pc, #160]	; (800ae84 <TIM_Base_SetConfig+0x148>)
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d108      	bne.n	800adf8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800adec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	68db      	ldr	r3, [r3, #12]
 800adf2:	68fa      	ldr	r2, [r7, #12]
 800adf4:	4313      	orrs	r3, r2
 800adf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	695b      	ldr	r3, [r3, #20]
 800ae02:	4313      	orrs	r3, r2
 800ae04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	68fa      	ldr	r2, [r7, #12]
 800ae0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	689a      	ldr	r2, [r3, #8]
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	681a      	ldr	r2, [r3, #0]
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	4a10      	ldr	r2, [pc, #64]	; (800ae60 <TIM_Base_SetConfig+0x124>)
 800ae20:	4293      	cmp	r3, r2
 800ae22:	d00f      	beq.n	800ae44 <TIM_Base_SetConfig+0x108>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	4a12      	ldr	r2, [pc, #72]	; (800ae70 <TIM_Base_SetConfig+0x134>)
 800ae28:	4293      	cmp	r3, r2
 800ae2a:	d00b      	beq.n	800ae44 <TIM_Base_SetConfig+0x108>
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	4a11      	ldr	r2, [pc, #68]	; (800ae74 <TIM_Base_SetConfig+0x138>)
 800ae30:	4293      	cmp	r3, r2
 800ae32:	d007      	beq.n	800ae44 <TIM_Base_SetConfig+0x108>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	4a10      	ldr	r2, [pc, #64]	; (800ae78 <TIM_Base_SetConfig+0x13c>)
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	d003      	beq.n	800ae44 <TIM_Base_SetConfig+0x108>
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	4a0f      	ldr	r2, [pc, #60]	; (800ae7c <TIM_Base_SetConfig+0x140>)
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d103      	bne.n	800ae4c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	691a      	ldr	r2, [r3, #16]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2201      	movs	r2, #1
 800ae50:	615a      	str	r2, [r3, #20]
}
 800ae52:	bf00      	nop
 800ae54:	3714      	adds	r7, #20
 800ae56:	46bd      	mov	sp, r7
 800ae58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5c:	4770      	bx	lr
 800ae5e:	bf00      	nop
 800ae60:	40010000 	.word	0x40010000
 800ae64:	40000400 	.word	0x40000400
 800ae68:	40000800 	.word	0x40000800
 800ae6c:	40000c00 	.word	0x40000c00
 800ae70:	40010400 	.word	0x40010400
 800ae74:	40014000 	.word	0x40014000
 800ae78:	40014400 	.word	0x40014400
 800ae7c:	40014800 	.word	0x40014800
 800ae80:	4000e000 	.word	0x4000e000
 800ae84:	4000e400 	.word	0x4000e400

0800ae88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b087      	sub	sp, #28
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6a1b      	ldr	r3, [r3, #32]
 800ae96:	f023 0201 	bic.w	r2, r3, #1
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6a1b      	ldr	r3, [r3, #32]
 800aea2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	685b      	ldr	r3, [r3, #4]
 800aea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	699b      	ldr	r3, [r3, #24]
 800aeae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aeb0:	68fa      	ldr	r2, [r7, #12]
 800aeb2:	4b37      	ldr	r3, [pc, #220]	; (800af90 <TIM_OC1_SetConfig+0x108>)
 800aeb4:	4013      	ands	r3, r2
 800aeb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	f023 0303 	bic.w	r3, r3, #3
 800aebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	68fa      	ldr	r2, [r7, #12]
 800aec6:	4313      	orrs	r3, r2
 800aec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	f023 0302 	bic.w	r3, r3, #2
 800aed0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	689b      	ldr	r3, [r3, #8]
 800aed6:	697a      	ldr	r2, [r7, #20]
 800aed8:	4313      	orrs	r3, r2
 800aeda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	4a2d      	ldr	r2, [pc, #180]	; (800af94 <TIM_OC1_SetConfig+0x10c>)
 800aee0:	4293      	cmp	r3, r2
 800aee2:	d00f      	beq.n	800af04 <TIM_OC1_SetConfig+0x7c>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	4a2c      	ldr	r2, [pc, #176]	; (800af98 <TIM_OC1_SetConfig+0x110>)
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d00b      	beq.n	800af04 <TIM_OC1_SetConfig+0x7c>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	4a2b      	ldr	r2, [pc, #172]	; (800af9c <TIM_OC1_SetConfig+0x114>)
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d007      	beq.n	800af04 <TIM_OC1_SetConfig+0x7c>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	4a2a      	ldr	r2, [pc, #168]	; (800afa0 <TIM_OC1_SetConfig+0x118>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d003      	beq.n	800af04 <TIM_OC1_SetConfig+0x7c>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	4a29      	ldr	r2, [pc, #164]	; (800afa4 <TIM_OC1_SetConfig+0x11c>)
 800af00:	4293      	cmp	r3, r2
 800af02:	d10c      	bne.n	800af1e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	f023 0308 	bic.w	r3, r3, #8
 800af0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	68db      	ldr	r3, [r3, #12]
 800af10:	697a      	ldr	r2, [r7, #20]
 800af12:	4313      	orrs	r3, r2
 800af14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	f023 0304 	bic.w	r3, r3, #4
 800af1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	4a1c      	ldr	r2, [pc, #112]	; (800af94 <TIM_OC1_SetConfig+0x10c>)
 800af22:	4293      	cmp	r3, r2
 800af24:	d00f      	beq.n	800af46 <TIM_OC1_SetConfig+0xbe>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	4a1b      	ldr	r2, [pc, #108]	; (800af98 <TIM_OC1_SetConfig+0x110>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d00b      	beq.n	800af46 <TIM_OC1_SetConfig+0xbe>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	4a1a      	ldr	r2, [pc, #104]	; (800af9c <TIM_OC1_SetConfig+0x114>)
 800af32:	4293      	cmp	r3, r2
 800af34:	d007      	beq.n	800af46 <TIM_OC1_SetConfig+0xbe>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	4a19      	ldr	r2, [pc, #100]	; (800afa0 <TIM_OC1_SetConfig+0x118>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d003      	beq.n	800af46 <TIM_OC1_SetConfig+0xbe>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	4a18      	ldr	r2, [pc, #96]	; (800afa4 <TIM_OC1_SetConfig+0x11c>)
 800af42:	4293      	cmp	r3, r2
 800af44:	d111      	bne.n	800af6a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800af54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	695b      	ldr	r3, [r3, #20]
 800af5a:	693a      	ldr	r2, [r7, #16]
 800af5c:	4313      	orrs	r3, r2
 800af5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	699b      	ldr	r3, [r3, #24]
 800af64:	693a      	ldr	r2, [r7, #16]
 800af66:	4313      	orrs	r3, r2
 800af68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	693a      	ldr	r2, [r7, #16]
 800af6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	68fa      	ldr	r2, [r7, #12]
 800af74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	685a      	ldr	r2, [r3, #4]
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	697a      	ldr	r2, [r7, #20]
 800af82:	621a      	str	r2, [r3, #32]
}
 800af84:	bf00      	nop
 800af86:	371c      	adds	r7, #28
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr
 800af90:	fffeff8f 	.word	0xfffeff8f
 800af94:	40010000 	.word	0x40010000
 800af98:	40010400 	.word	0x40010400
 800af9c:	40014000 	.word	0x40014000
 800afa0:	40014400 	.word	0x40014400
 800afa4:	40014800 	.word	0x40014800

0800afa8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b087      	sub	sp, #28
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6a1b      	ldr	r3, [r3, #32]
 800afb6:	f023 0210 	bic.w	r2, r3, #16
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6a1b      	ldr	r3, [r3, #32]
 800afc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	685b      	ldr	r3, [r3, #4]
 800afc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	699b      	ldr	r3, [r3, #24]
 800afce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800afd0:	68fa      	ldr	r2, [r7, #12]
 800afd2:	4b34      	ldr	r3, [pc, #208]	; (800b0a4 <TIM_OC2_SetConfig+0xfc>)
 800afd4:	4013      	ands	r3, r2
 800afd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800afde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	021b      	lsls	r3, r3, #8
 800afe6:	68fa      	ldr	r2, [r7, #12]
 800afe8:	4313      	orrs	r3, r2
 800afea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	f023 0320 	bic.w	r3, r3, #32
 800aff2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	689b      	ldr	r3, [r3, #8]
 800aff8:	011b      	lsls	r3, r3, #4
 800affa:	697a      	ldr	r2, [r7, #20]
 800affc:	4313      	orrs	r3, r2
 800affe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	4a29      	ldr	r2, [pc, #164]	; (800b0a8 <TIM_OC2_SetConfig+0x100>)
 800b004:	4293      	cmp	r3, r2
 800b006:	d003      	beq.n	800b010 <TIM_OC2_SetConfig+0x68>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	4a28      	ldr	r2, [pc, #160]	; (800b0ac <TIM_OC2_SetConfig+0x104>)
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d10d      	bne.n	800b02c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b016:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	68db      	ldr	r3, [r3, #12]
 800b01c:	011b      	lsls	r3, r3, #4
 800b01e:	697a      	ldr	r2, [r7, #20]
 800b020:	4313      	orrs	r3, r2
 800b022:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b02a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	4a1e      	ldr	r2, [pc, #120]	; (800b0a8 <TIM_OC2_SetConfig+0x100>)
 800b030:	4293      	cmp	r3, r2
 800b032:	d00f      	beq.n	800b054 <TIM_OC2_SetConfig+0xac>
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	4a1d      	ldr	r2, [pc, #116]	; (800b0ac <TIM_OC2_SetConfig+0x104>)
 800b038:	4293      	cmp	r3, r2
 800b03a:	d00b      	beq.n	800b054 <TIM_OC2_SetConfig+0xac>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	4a1c      	ldr	r2, [pc, #112]	; (800b0b0 <TIM_OC2_SetConfig+0x108>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d007      	beq.n	800b054 <TIM_OC2_SetConfig+0xac>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	4a1b      	ldr	r2, [pc, #108]	; (800b0b4 <TIM_OC2_SetConfig+0x10c>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	d003      	beq.n	800b054 <TIM_OC2_SetConfig+0xac>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	4a1a      	ldr	r2, [pc, #104]	; (800b0b8 <TIM_OC2_SetConfig+0x110>)
 800b050:	4293      	cmp	r3, r2
 800b052:	d113      	bne.n	800b07c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b05a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b05c:	693b      	ldr	r3, [r7, #16]
 800b05e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b062:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	695b      	ldr	r3, [r3, #20]
 800b068:	009b      	lsls	r3, r3, #2
 800b06a:	693a      	ldr	r2, [r7, #16]
 800b06c:	4313      	orrs	r3, r2
 800b06e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	699b      	ldr	r3, [r3, #24]
 800b074:	009b      	lsls	r3, r3, #2
 800b076:	693a      	ldr	r2, [r7, #16]
 800b078:	4313      	orrs	r3, r2
 800b07a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	693a      	ldr	r2, [r7, #16]
 800b080:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	68fa      	ldr	r2, [r7, #12]
 800b086:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	685a      	ldr	r2, [r3, #4]
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	697a      	ldr	r2, [r7, #20]
 800b094:	621a      	str	r2, [r3, #32]
}
 800b096:	bf00      	nop
 800b098:	371c      	adds	r7, #28
 800b09a:	46bd      	mov	sp, r7
 800b09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a0:	4770      	bx	lr
 800b0a2:	bf00      	nop
 800b0a4:	feff8fff 	.word	0xfeff8fff
 800b0a8:	40010000 	.word	0x40010000
 800b0ac:	40010400 	.word	0x40010400
 800b0b0:	40014000 	.word	0x40014000
 800b0b4:	40014400 	.word	0x40014400
 800b0b8:	40014800 	.word	0x40014800

0800b0bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b087      	sub	sp, #28
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
 800b0c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6a1b      	ldr	r3, [r3, #32]
 800b0ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6a1b      	ldr	r3, [r3, #32]
 800b0d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	685b      	ldr	r3, [r3, #4]
 800b0dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	69db      	ldr	r3, [r3, #28]
 800b0e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b0e4:	68fa      	ldr	r2, [r7, #12]
 800b0e6:	4b33      	ldr	r3, [pc, #204]	; (800b1b4 <TIM_OC3_SetConfig+0xf8>)
 800b0e8:	4013      	ands	r3, r2
 800b0ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f023 0303 	bic.w	r3, r3, #3
 800b0f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	68fa      	ldr	r2, [r7, #12]
 800b0fa:	4313      	orrs	r3, r2
 800b0fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b104:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	689b      	ldr	r3, [r3, #8]
 800b10a:	021b      	lsls	r3, r3, #8
 800b10c:	697a      	ldr	r2, [r7, #20]
 800b10e:	4313      	orrs	r3, r2
 800b110:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	4a28      	ldr	r2, [pc, #160]	; (800b1b8 <TIM_OC3_SetConfig+0xfc>)
 800b116:	4293      	cmp	r3, r2
 800b118:	d003      	beq.n	800b122 <TIM_OC3_SetConfig+0x66>
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	4a27      	ldr	r2, [pc, #156]	; (800b1bc <TIM_OC3_SetConfig+0x100>)
 800b11e:	4293      	cmp	r3, r2
 800b120:	d10d      	bne.n	800b13e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b128:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	68db      	ldr	r3, [r3, #12]
 800b12e:	021b      	lsls	r3, r3, #8
 800b130:	697a      	ldr	r2, [r7, #20]
 800b132:	4313      	orrs	r3, r2
 800b134:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b13c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	4a1d      	ldr	r2, [pc, #116]	; (800b1b8 <TIM_OC3_SetConfig+0xfc>)
 800b142:	4293      	cmp	r3, r2
 800b144:	d00f      	beq.n	800b166 <TIM_OC3_SetConfig+0xaa>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	4a1c      	ldr	r2, [pc, #112]	; (800b1bc <TIM_OC3_SetConfig+0x100>)
 800b14a:	4293      	cmp	r3, r2
 800b14c:	d00b      	beq.n	800b166 <TIM_OC3_SetConfig+0xaa>
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	4a1b      	ldr	r2, [pc, #108]	; (800b1c0 <TIM_OC3_SetConfig+0x104>)
 800b152:	4293      	cmp	r3, r2
 800b154:	d007      	beq.n	800b166 <TIM_OC3_SetConfig+0xaa>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	4a1a      	ldr	r2, [pc, #104]	; (800b1c4 <TIM_OC3_SetConfig+0x108>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d003      	beq.n	800b166 <TIM_OC3_SetConfig+0xaa>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	4a19      	ldr	r2, [pc, #100]	; (800b1c8 <TIM_OC3_SetConfig+0x10c>)
 800b162:	4293      	cmp	r3, r2
 800b164:	d113      	bne.n	800b18e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b166:	693b      	ldr	r3, [r7, #16]
 800b168:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b16c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b174:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	695b      	ldr	r3, [r3, #20]
 800b17a:	011b      	lsls	r3, r3, #4
 800b17c:	693a      	ldr	r2, [r7, #16]
 800b17e:	4313      	orrs	r3, r2
 800b180:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	699b      	ldr	r3, [r3, #24]
 800b186:	011b      	lsls	r3, r3, #4
 800b188:	693a      	ldr	r2, [r7, #16]
 800b18a:	4313      	orrs	r3, r2
 800b18c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	693a      	ldr	r2, [r7, #16]
 800b192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	68fa      	ldr	r2, [r7, #12]
 800b198:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	685a      	ldr	r2, [r3, #4]
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	697a      	ldr	r2, [r7, #20]
 800b1a6:	621a      	str	r2, [r3, #32]
}
 800b1a8:	bf00      	nop
 800b1aa:	371c      	adds	r7, #28
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr
 800b1b4:	fffeff8f 	.word	0xfffeff8f
 800b1b8:	40010000 	.word	0x40010000
 800b1bc:	40010400 	.word	0x40010400
 800b1c0:	40014000 	.word	0x40014000
 800b1c4:	40014400 	.word	0x40014400
 800b1c8:	40014800 	.word	0x40014800

0800b1cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b087      	sub	sp, #28
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6a1b      	ldr	r3, [r3, #32]
 800b1da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6a1b      	ldr	r3, [r3, #32]
 800b1e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	69db      	ldr	r3, [r3, #28]
 800b1f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b1f4:	68fa      	ldr	r2, [r7, #12]
 800b1f6:	4b24      	ldr	r3, [pc, #144]	; (800b288 <TIM_OC4_SetConfig+0xbc>)
 800b1f8:	4013      	ands	r3, r2
 800b1fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b202:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	021b      	lsls	r3, r3, #8
 800b20a:	68fa      	ldr	r2, [r7, #12]
 800b20c:	4313      	orrs	r3, r2
 800b20e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b210:	693b      	ldr	r3, [r7, #16]
 800b212:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b216:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	689b      	ldr	r3, [r3, #8]
 800b21c:	031b      	lsls	r3, r3, #12
 800b21e:	693a      	ldr	r2, [r7, #16]
 800b220:	4313      	orrs	r3, r2
 800b222:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	4a19      	ldr	r2, [pc, #100]	; (800b28c <TIM_OC4_SetConfig+0xc0>)
 800b228:	4293      	cmp	r3, r2
 800b22a:	d00f      	beq.n	800b24c <TIM_OC4_SetConfig+0x80>
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	4a18      	ldr	r2, [pc, #96]	; (800b290 <TIM_OC4_SetConfig+0xc4>)
 800b230:	4293      	cmp	r3, r2
 800b232:	d00b      	beq.n	800b24c <TIM_OC4_SetConfig+0x80>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	4a17      	ldr	r2, [pc, #92]	; (800b294 <TIM_OC4_SetConfig+0xc8>)
 800b238:	4293      	cmp	r3, r2
 800b23a:	d007      	beq.n	800b24c <TIM_OC4_SetConfig+0x80>
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	4a16      	ldr	r2, [pc, #88]	; (800b298 <TIM_OC4_SetConfig+0xcc>)
 800b240:	4293      	cmp	r3, r2
 800b242:	d003      	beq.n	800b24c <TIM_OC4_SetConfig+0x80>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	4a15      	ldr	r2, [pc, #84]	; (800b29c <TIM_OC4_SetConfig+0xd0>)
 800b248:	4293      	cmp	r3, r2
 800b24a:	d109      	bne.n	800b260 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b252:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	695b      	ldr	r3, [r3, #20]
 800b258:	019b      	lsls	r3, r3, #6
 800b25a:	697a      	ldr	r2, [r7, #20]
 800b25c:	4313      	orrs	r3, r2
 800b25e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	697a      	ldr	r2, [r7, #20]
 800b264:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	68fa      	ldr	r2, [r7, #12]
 800b26a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	685a      	ldr	r2, [r3, #4]
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	693a      	ldr	r2, [r7, #16]
 800b278:	621a      	str	r2, [r3, #32]
}
 800b27a:	bf00      	nop
 800b27c:	371c      	adds	r7, #28
 800b27e:	46bd      	mov	sp, r7
 800b280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b284:	4770      	bx	lr
 800b286:	bf00      	nop
 800b288:	feff8fff 	.word	0xfeff8fff
 800b28c:	40010000 	.word	0x40010000
 800b290:	40010400 	.word	0x40010400
 800b294:	40014000 	.word	0x40014000
 800b298:	40014400 	.word	0x40014400
 800b29c:	40014800 	.word	0x40014800

0800b2a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b087      	sub	sp, #28
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
 800b2a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6a1b      	ldr	r3, [r3, #32]
 800b2ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6a1b      	ldr	r3, [r3, #32]
 800b2ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	685b      	ldr	r3, [r3, #4]
 800b2c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b2c8:	68fa      	ldr	r2, [r7, #12]
 800b2ca:	4b21      	ldr	r3, [pc, #132]	; (800b350 <TIM_OC5_SetConfig+0xb0>)
 800b2cc:	4013      	ands	r3, r2
 800b2ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	68fa      	ldr	r2, [r7, #12]
 800b2d6:	4313      	orrs	r3, r2
 800b2d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b2e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	689b      	ldr	r3, [r3, #8]
 800b2e6:	041b      	lsls	r3, r3, #16
 800b2e8:	693a      	ldr	r2, [r7, #16]
 800b2ea:	4313      	orrs	r3, r2
 800b2ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	4a18      	ldr	r2, [pc, #96]	; (800b354 <TIM_OC5_SetConfig+0xb4>)
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	d00f      	beq.n	800b316 <TIM_OC5_SetConfig+0x76>
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	4a17      	ldr	r2, [pc, #92]	; (800b358 <TIM_OC5_SetConfig+0xb8>)
 800b2fa:	4293      	cmp	r3, r2
 800b2fc:	d00b      	beq.n	800b316 <TIM_OC5_SetConfig+0x76>
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	4a16      	ldr	r2, [pc, #88]	; (800b35c <TIM_OC5_SetConfig+0xbc>)
 800b302:	4293      	cmp	r3, r2
 800b304:	d007      	beq.n	800b316 <TIM_OC5_SetConfig+0x76>
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	4a15      	ldr	r2, [pc, #84]	; (800b360 <TIM_OC5_SetConfig+0xc0>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d003      	beq.n	800b316 <TIM_OC5_SetConfig+0x76>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	4a14      	ldr	r2, [pc, #80]	; (800b364 <TIM_OC5_SetConfig+0xc4>)
 800b312:	4293      	cmp	r3, r2
 800b314:	d109      	bne.n	800b32a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b31c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	695b      	ldr	r3, [r3, #20]
 800b322:	021b      	lsls	r3, r3, #8
 800b324:	697a      	ldr	r2, [r7, #20]
 800b326:	4313      	orrs	r3, r2
 800b328:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	697a      	ldr	r2, [r7, #20]
 800b32e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	68fa      	ldr	r2, [r7, #12]
 800b334:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	685a      	ldr	r2, [r3, #4]
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	693a      	ldr	r2, [r7, #16]
 800b342:	621a      	str	r2, [r3, #32]
}
 800b344:	bf00      	nop
 800b346:	371c      	adds	r7, #28
 800b348:	46bd      	mov	sp, r7
 800b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34e:	4770      	bx	lr
 800b350:	fffeff8f 	.word	0xfffeff8f
 800b354:	40010000 	.word	0x40010000
 800b358:	40010400 	.word	0x40010400
 800b35c:	40014000 	.word	0x40014000
 800b360:	40014400 	.word	0x40014400
 800b364:	40014800 	.word	0x40014800

0800b368 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b368:	b480      	push	{r7}
 800b36a:	b087      	sub	sp, #28
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
 800b370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6a1b      	ldr	r3, [r3, #32]
 800b376:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6a1b      	ldr	r3, [r3, #32]
 800b382:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	685b      	ldr	r3, [r3, #4]
 800b388:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b38e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b390:	68fa      	ldr	r2, [r7, #12]
 800b392:	4b22      	ldr	r3, [pc, #136]	; (800b41c <TIM_OC6_SetConfig+0xb4>)
 800b394:	4013      	ands	r3, r2
 800b396:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	021b      	lsls	r3, r3, #8
 800b39e:	68fa      	ldr	r2, [r7, #12]
 800b3a0:	4313      	orrs	r3, r2
 800b3a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b3aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	689b      	ldr	r3, [r3, #8]
 800b3b0:	051b      	lsls	r3, r3, #20
 800b3b2:	693a      	ldr	r2, [r7, #16]
 800b3b4:	4313      	orrs	r3, r2
 800b3b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	4a19      	ldr	r2, [pc, #100]	; (800b420 <TIM_OC6_SetConfig+0xb8>)
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d00f      	beq.n	800b3e0 <TIM_OC6_SetConfig+0x78>
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	4a18      	ldr	r2, [pc, #96]	; (800b424 <TIM_OC6_SetConfig+0xbc>)
 800b3c4:	4293      	cmp	r3, r2
 800b3c6:	d00b      	beq.n	800b3e0 <TIM_OC6_SetConfig+0x78>
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	4a17      	ldr	r2, [pc, #92]	; (800b428 <TIM_OC6_SetConfig+0xc0>)
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d007      	beq.n	800b3e0 <TIM_OC6_SetConfig+0x78>
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	4a16      	ldr	r2, [pc, #88]	; (800b42c <TIM_OC6_SetConfig+0xc4>)
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	d003      	beq.n	800b3e0 <TIM_OC6_SetConfig+0x78>
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	4a15      	ldr	r2, [pc, #84]	; (800b430 <TIM_OC6_SetConfig+0xc8>)
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d109      	bne.n	800b3f4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b3e0:	697b      	ldr	r3, [r7, #20]
 800b3e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b3e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	695b      	ldr	r3, [r3, #20]
 800b3ec:	029b      	lsls	r3, r3, #10
 800b3ee:	697a      	ldr	r2, [r7, #20]
 800b3f0:	4313      	orrs	r3, r2
 800b3f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	697a      	ldr	r2, [r7, #20]
 800b3f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	68fa      	ldr	r2, [r7, #12]
 800b3fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	685a      	ldr	r2, [r3, #4]
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	693a      	ldr	r2, [r7, #16]
 800b40c:	621a      	str	r2, [r3, #32]
}
 800b40e:	bf00      	nop
 800b410:	371c      	adds	r7, #28
 800b412:	46bd      	mov	sp, r7
 800b414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b418:	4770      	bx	lr
 800b41a:	bf00      	nop
 800b41c:	feff8fff 	.word	0xfeff8fff
 800b420:	40010000 	.word	0x40010000
 800b424:	40010400 	.word	0x40010400
 800b428:	40014000 	.word	0x40014000
 800b42c:	40014400 	.word	0x40014400
 800b430:	40014800 	.word	0x40014800

0800b434 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b084      	sub	sp, #16
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
 800b43c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d109      	bne.n	800b458 <HAL_TIMEx_PWMN_Start+0x24>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b44a:	b2db      	uxtb	r3, r3
 800b44c:	2b01      	cmp	r3, #1
 800b44e:	bf14      	ite	ne
 800b450:	2301      	movne	r3, #1
 800b452:	2300      	moveq	r3, #0
 800b454:	b2db      	uxtb	r3, r3
 800b456:	e022      	b.n	800b49e <HAL_TIMEx_PWMN_Start+0x6a>
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	2b04      	cmp	r3, #4
 800b45c:	d109      	bne.n	800b472 <HAL_TIMEx_PWMN_Start+0x3e>
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b464:	b2db      	uxtb	r3, r3
 800b466:	2b01      	cmp	r3, #1
 800b468:	bf14      	ite	ne
 800b46a:	2301      	movne	r3, #1
 800b46c:	2300      	moveq	r3, #0
 800b46e:	b2db      	uxtb	r3, r3
 800b470:	e015      	b.n	800b49e <HAL_TIMEx_PWMN_Start+0x6a>
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	2b08      	cmp	r3, #8
 800b476:	d109      	bne.n	800b48c <HAL_TIMEx_PWMN_Start+0x58>
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b47e:	b2db      	uxtb	r3, r3
 800b480:	2b01      	cmp	r3, #1
 800b482:	bf14      	ite	ne
 800b484:	2301      	movne	r3, #1
 800b486:	2300      	moveq	r3, #0
 800b488:	b2db      	uxtb	r3, r3
 800b48a:	e008      	b.n	800b49e <HAL_TIMEx_PWMN_Start+0x6a>
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800b492:	b2db      	uxtb	r3, r3
 800b494:	2b01      	cmp	r3, #1
 800b496:	bf14      	ite	ne
 800b498:	2301      	movne	r3, #1
 800b49a:	2300      	moveq	r3, #0
 800b49c:	b2db      	uxtb	r3, r3
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d001      	beq.n	800b4a6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	e07d      	b.n	800b5a2 <HAL_TIMEx_PWMN_Start+0x16e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d104      	bne.n	800b4b6 <HAL_TIMEx_PWMN_Start+0x82>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2202      	movs	r2, #2
 800b4b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b4b4:	e013      	b.n	800b4de <HAL_TIMEx_PWMN_Start+0xaa>
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	2b04      	cmp	r3, #4
 800b4ba:	d104      	bne.n	800b4c6 <HAL_TIMEx_PWMN_Start+0x92>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2202      	movs	r2, #2
 800b4c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b4c4:	e00b      	b.n	800b4de <HAL_TIMEx_PWMN_Start+0xaa>
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	2b08      	cmp	r3, #8
 800b4ca:	d104      	bne.n	800b4d6 <HAL_TIMEx_PWMN_Start+0xa2>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2202      	movs	r2, #2
 800b4d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b4d4:	e003      	b.n	800b4de <HAL_TIMEx_PWMN_Start+0xaa>
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2202      	movs	r2, #2
 800b4da:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	2204      	movs	r2, #4
 800b4e4:	6839      	ldr	r1, [r7, #0]
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f000 f9b0 	bl	800b84c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b4fa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	4a2a      	ldr	r2, [pc, #168]	; (800b5ac <HAL_TIMEx_PWMN_Start+0x178>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d02c      	beq.n	800b560 <HAL_TIMEx_PWMN_Start+0x12c>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b50e:	d027      	beq.n	800b560 <HAL_TIMEx_PWMN_Start+0x12c>
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	4a26      	ldr	r2, [pc, #152]	; (800b5b0 <HAL_TIMEx_PWMN_Start+0x17c>)
 800b516:	4293      	cmp	r3, r2
 800b518:	d022      	beq.n	800b560 <HAL_TIMEx_PWMN_Start+0x12c>
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	4a25      	ldr	r2, [pc, #148]	; (800b5b4 <HAL_TIMEx_PWMN_Start+0x180>)
 800b520:	4293      	cmp	r3, r2
 800b522:	d01d      	beq.n	800b560 <HAL_TIMEx_PWMN_Start+0x12c>
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	4a23      	ldr	r2, [pc, #140]	; (800b5b8 <HAL_TIMEx_PWMN_Start+0x184>)
 800b52a:	4293      	cmp	r3, r2
 800b52c:	d018      	beq.n	800b560 <HAL_TIMEx_PWMN_Start+0x12c>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	4a22      	ldr	r2, [pc, #136]	; (800b5bc <HAL_TIMEx_PWMN_Start+0x188>)
 800b534:	4293      	cmp	r3, r2
 800b536:	d013      	beq.n	800b560 <HAL_TIMEx_PWMN_Start+0x12c>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	4a20      	ldr	r2, [pc, #128]	; (800b5c0 <HAL_TIMEx_PWMN_Start+0x18c>)
 800b53e:	4293      	cmp	r3, r2
 800b540:	d00e      	beq.n	800b560 <HAL_TIMEx_PWMN_Start+0x12c>
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	4a1f      	ldr	r2, [pc, #124]	; (800b5c4 <HAL_TIMEx_PWMN_Start+0x190>)
 800b548:	4293      	cmp	r3, r2
 800b54a:	d009      	beq.n	800b560 <HAL_TIMEx_PWMN_Start+0x12c>
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	4a1d      	ldr	r2, [pc, #116]	; (800b5c8 <HAL_TIMEx_PWMN_Start+0x194>)
 800b552:	4293      	cmp	r3, r2
 800b554:	d004      	beq.n	800b560 <HAL_TIMEx_PWMN_Start+0x12c>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	4a1c      	ldr	r2, [pc, #112]	; (800b5cc <HAL_TIMEx_PWMN_Start+0x198>)
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d115      	bne.n	800b58c <HAL_TIMEx_PWMN_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	689a      	ldr	r2, [r3, #8]
 800b566:	4b1a      	ldr	r3, [pc, #104]	; (800b5d0 <HAL_TIMEx_PWMN_Start+0x19c>)
 800b568:	4013      	ands	r3, r2
 800b56a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	2b06      	cmp	r3, #6
 800b570:	d015      	beq.n	800b59e <HAL_TIMEx_PWMN_Start+0x16a>
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b578:	d011      	beq.n	800b59e <HAL_TIMEx_PWMN_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	681a      	ldr	r2, [r3, #0]
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f042 0201 	orr.w	r2, r2, #1
 800b588:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b58a:	e008      	b.n	800b59e <HAL_TIMEx_PWMN_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	681a      	ldr	r2, [r3, #0]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f042 0201 	orr.w	r2, r2, #1
 800b59a:	601a      	str	r2, [r3, #0]
 800b59c:	e000      	b.n	800b5a0 <HAL_TIMEx_PWMN_Start+0x16c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b59e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b5a0:	2300      	movs	r3, #0
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3710      	adds	r7, #16
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}
 800b5aa:	bf00      	nop
 800b5ac:	40010000 	.word	0x40010000
 800b5b0:	40000400 	.word	0x40000400
 800b5b4:	40000800 	.word	0x40000800
 800b5b8:	40000c00 	.word	0x40000c00
 800b5bc:	40010400 	.word	0x40010400
 800b5c0:	40001800 	.word	0x40001800
 800b5c4:	40014000 	.word	0x40014000
 800b5c8:	4000e000 	.word	0x4000e000
 800b5cc:	4000e400 	.word	0x4000e400
 800b5d0:	00010007 	.word	0x00010007

0800b5d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b085      	sub	sp, #20
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b5e4:	2b01      	cmp	r3, #1
 800b5e6:	d101      	bne.n	800b5ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b5e8:	2302      	movs	r3, #2
 800b5ea:	e077      	b.n	800b6dc <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2201      	movs	r2, #1
 800b5f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2202      	movs	r2, #2
 800b5f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	685b      	ldr	r3, [r3, #4]
 800b602:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	689b      	ldr	r3, [r3, #8]
 800b60a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	4a35      	ldr	r2, [pc, #212]	; (800b6e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b612:	4293      	cmp	r3, r2
 800b614:	d004      	beq.n	800b620 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	4a34      	ldr	r2, [pc, #208]	; (800b6ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d108      	bne.n	800b632 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b626:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	685b      	ldr	r3, [r3, #4]
 800b62c:	68fa      	ldr	r2, [r7, #12]
 800b62e:	4313      	orrs	r3, r2
 800b630:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b638:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	68fa      	ldr	r2, [r7, #12]
 800b640:	4313      	orrs	r3, r2
 800b642:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	68fa      	ldr	r2, [r7, #12]
 800b64a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	4a25      	ldr	r2, [pc, #148]	; (800b6e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b652:	4293      	cmp	r3, r2
 800b654:	d02c      	beq.n	800b6b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b65e:	d027      	beq.n	800b6b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	4a22      	ldr	r2, [pc, #136]	; (800b6f0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b666:	4293      	cmp	r3, r2
 800b668:	d022      	beq.n	800b6b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	4a21      	ldr	r2, [pc, #132]	; (800b6f4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b670:	4293      	cmp	r3, r2
 800b672:	d01d      	beq.n	800b6b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	4a1f      	ldr	r2, [pc, #124]	; (800b6f8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d018      	beq.n	800b6b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	4a1a      	ldr	r2, [pc, #104]	; (800b6ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b684:	4293      	cmp	r3, r2
 800b686:	d013      	beq.n	800b6b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	4a1b      	ldr	r2, [pc, #108]	; (800b6fc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b68e:	4293      	cmp	r3, r2
 800b690:	d00e      	beq.n	800b6b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	4a1a      	ldr	r2, [pc, #104]	; (800b700 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800b698:	4293      	cmp	r3, r2
 800b69a:	d009      	beq.n	800b6b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	4a18      	ldr	r2, [pc, #96]	; (800b704 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800b6a2:	4293      	cmp	r3, r2
 800b6a4:	d004      	beq.n	800b6b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	4a17      	ldr	r2, [pc, #92]	; (800b708 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	d10c      	bne.n	800b6ca <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b6b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	689b      	ldr	r3, [r3, #8]
 800b6bc:	68ba      	ldr	r2, [r7, #8]
 800b6be:	4313      	orrs	r3, r2
 800b6c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	68ba      	ldr	r2, [r7, #8]
 800b6c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2201      	movs	r2, #1
 800b6ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b6da:	2300      	movs	r3, #0
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3714      	adds	r7, #20
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e6:	4770      	bx	lr
 800b6e8:	40010000 	.word	0x40010000
 800b6ec:	40010400 	.word	0x40010400
 800b6f0:	40000400 	.word	0x40000400
 800b6f4:	40000800 	.word	0x40000800
 800b6f8:	40000c00 	.word	0x40000c00
 800b6fc:	40001800 	.word	0x40001800
 800b700:	40014000 	.word	0x40014000
 800b704:	4000e000 	.word	0x4000e000
 800b708:	4000e400 	.word	0x4000e400

0800b70c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b085      	sub	sp, #20
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
 800b714:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b716:	2300      	movs	r3, #0
 800b718:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b720:	2b01      	cmp	r3, #1
 800b722:	d101      	bne.n	800b728 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b724:	2302      	movs	r3, #2
 800b726:	e087      	b.n	800b838 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2201      	movs	r2, #1
 800b72c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	68db      	ldr	r3, [r3, #12]
 800b73a:	4313      	orrs	r3, r2
 800b73c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	689b      	ldr	r3, [r3, #8]
 800b748:	4313      	orrs	r3, r2
 800b74a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	685b      	ldr	r3, [r3, #4]
 800b756:	4313      	orrs	r3, r2
 800b758:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	4313      	orrs	r3, r2
 800b766:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	691b      	ldr	r3, [r3, #16]
 800b772:	4313      	orrs	r3, r2
 800b774:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	695b      	ldr	r3, [r3, #20]
 800b780:	4313      	orrs	r3, r2
 800b782:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b78e:	4313      	orrs	r3, r2
 800b790:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	699b      	ldr	r3, [r3, #24]
 800b79c:	041b      	lsls	r3, r3, #16
 800b79e:	4313      	orrs	r3, r2
 800b7a0:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	4a27      	ldr	r2, [pc, #156]	; (800b844 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	d004      	beq.n	800b7b6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	4a25      	ldr	r2, [pc, #148]	; (800b848 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	d106      	bne.n	800b7c4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	69db      	ldr	r3, [r3, #28]
 800b7c0:	4313      	orrs	r3, r2
 800b7c2:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	4a1e      	ldr	r2, [pc, #120]	; (800b844 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d004      	beq.n	800b7d8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	4a1d      	ldr	r2, [pc, #116]	; (800b848 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b7d4:	4293      	cmp	r3, r2
 800b7d6:	d126      	bne.n	800b826 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7e2:	051b      	lsls	r3, r3, #20
 800b7e4:	4313      	orrs	r3, r2
 800b7e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	6a1b      	ldr	r3, [r3, #32]
 800b7f2:	4313      	orrs	r3, r2
 800b7f4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b800:	4313      	orrs	r3, r2
 800b802:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	4a0e      	ldr	r2, [pc, #56]	; (800b844 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b80a:	4293      	cmp	r3, r2
 800b80c:	d004      	beq.n	800b818 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	4a0d      	ldr	r2, [pc, #52]	; (800b848 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b814:	4293      	cmp	r3, r2
 800b816:	d106      	bne.n	800b826 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b822:	4313      	orrs	r3, r2
 800b824:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	68fa      	ldr	r2, [r7, #12]
 800b82c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2200      	movs	r2, #0
 800b832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b836:	2300      	movs	r3, #0
}
 800b838:	4618      	mov	r0, r3
 800b83a:	3714      	adds	r7, #20
 800b83c:	46bd      	mov	sp, r7
 800b83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b842:	4770      	bx	lr
 800b844:	40010000 	.word	0x40010000
 800b848:	40010400 	.word	0x40010400

0800b84c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800b84c:	b480      	push	{r7}
 800b84e:	b087      	sub	sp, #28
 800b850:	af00      	add	r7, sp, #0
 800b852:	60f8      	str	r0, [r7, #12]
 800b854:	60b9      	str	r1, [r7, #8]
 800b856:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	f003 031f 	and.w	r3, r3, #31
 800b85e:	2204      	movs	r2, #4
 800b860:	fa02 f303 	lsl.w	r3, r2, r3
 800b864:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	6a1a      	ldr	r2, [r3, #32]
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	43db      	mvns	r3, r3
 800b86e:	401a      	ands	r2, r3
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	6a1a      	ldr	r2, [r3, #32]
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	f003 031f 	and.w	r3, r3, #31
 800b87e:	6879      	ldr	r1, [r7, #4]
 800b880:	fa01 f303 	lsl.w	r3, r1, r3
 800b884:	431a      	orrs	r2, r3
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	621a      	str	r2, [r3, #32]
}
 800b88a:	bf00      	nop
 800b88c:	371c      	adds	r7, #28
 800b88e:	46bd      	mov	sp, r7
 800b890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b894:	4770      	bx	lr
	...

0800b898 <siprintf>:
 800b898:	b40e      	push	{r1, r2, r3}
 800b89a:	b500      	push	{lr}
 800b89c:	b09c      	sub	sp, #112	; 0x70
 800b89e:	ab1d      	add	r3, sp, #116	; 0x74
 800b8a0:	9002      	str	r0, [sp, #8]
 800b8a2:	9006      	str	r0, [sp, #24]
 800b8a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b8a8:	4809      	ldr	r0, [pc, #36]	; (800b8d0 <siprintf+0x38>)
 800b8aa:	9107      	str	r1, [sp, #28]
 800b8ac:	9104      	str	r1, [sp, #16]
 800b8ae:	4909      	ldr	r1, [pc, #36]	; (800b8d4 <siprintf+0x3c>)
 800b8b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8b4:	9105      	str	r1, [sp, #20]
 800b8b6:	6800      	ldr	r0, [r0, #0]
 800b8b8:	9301      	str	r3, [sp, #4]
 800b8ba:	a902      	add	r1, sp, #8
 800b8bc:	f000 f992 	bl	800bbe4 <_svfiprintf_r>
 800b8c0:	9b02      	ldr	r3, [sp, #8]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	701a      	strb	r2, [r3, #0]
 800b8c6:	b01c      	add	sp, #112	; 0x70
 800b8c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b8cc:	b003      	add	sp, #12
 800b8ce:	4770      	bx	lr
 800b8d0:	240000ec 	.word	0x240000ec
 800b8d4:	ffff0208 	.word	0xffff0208

0800b8d8 <memset>:
 800b8d8:	4402      	add	r2, r0
 800b8da:	4603      	mov	r3, r0
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	d100      	bne.n	800b8e2 <memset+0xa>
 800b8e0:	4770      	bx	lr
 800b8e2:	f803 1b01 	strb.w	r1, [r3], #1
 800b8e6:	e7f9      	b.n	800b8dc <memset+0x4>

0800b8e8 <__errno>:
 800b8e8:	4b01      	ldr	r3, [pc, #4]	; (800b8f0 <__errno+0x8>)
 800b8ea:	6818      	ldr	r0, [r3, #0]
 800b8ec:	4770      	bx	lr
 800b8ee:	bf00      	nop
 800b8f0:	240000ec 	.word	0x240000ec

0800b8f4 <__libc_init_array>:
 800b8f4:	b570      	push	{r4, r5, r6, lr}
 800b8f6:	4d0d      	ldr	r5, [pc, #52]	; (800b92c <__libc_init_array+0x38>)
 800b8f8:	4c0d      	ldr	r4, [pc, #52]	; (800b930 <__libc_init_array+0x3c>)
 800b8fa:	1b64      	subs	r4, r4, r5
 800b8fc:	10a4      	asrs	r4, r4, #2
 800b8fe:	2600      	movs	r6, #0
 800b900:	42a6      	cmp	r6, r4
 800b902:	d109      	bne.n	800b918 <__libc_init_array+0x24>
 800b904:	4d0b      	ldr	r5, [pc, #44]	; (800b934 <__libc_init_array+0x40>)
 800b906:	4c0c      	ldr	r4, [pc, #48]	; (800b938 <__libc_init_array+0x44>)
 800b908:	f000 fc6a 	bl	800c1e0 <_init>
 800b90c:	1b64      	subs	r4, r4, r5
 800b90e:	10a4      	asrs	r4, r4, #2
 800b910:	2600      	movs	r6, #0
 800b912:	42a6      	cmp	r6, r4
 800b914:	d105      	bne.n	800b922 <__libc_init_array+0x2e>
 800b916:	bd70      	pop	{r4, r5, r6, pc}
 800b918:	f855 3b04 	ldr.w	r3, [r5], #4
 800b91c:	4798      	blx	r3
 800b91e:	3601      	adds	r6, #1
 800b920:	e7ee      	b.n	800b900 <__libc_init_array+0xc>
 800b922:	f855 3b04 	ldr.w	r3, [r5], #4
 800b926:	4798      	blx	r3
 800b928:	3601      	adds	r6, #1
 800b92a:	e7f2      	b.n	800b912 <__libc_init_array+0x1e>
 800b92c:	0800cd24 	.word	0x0800cd24
 800b930:	0800cd24 	.word	0x0800cd24
 800b934:	0800cd24 	.word	0x0800cd24
 800b938:	0800cd28 	.word	0x0800cd28

0800b93c <__retarget_lock_acquire_recursive>:
 800b93c:	4770      	bx	lr

0800b93e <__retarget_lock_release_recursive>:
 800b93e:	4770      	bx	lr

0800b940 <_free_r>:
 800b940:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b942:	2900      	cmp	r1, #0
 800b944:	d044      	beq.n	800b9d0 <_free_r+0x90>
 800b946:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b94a:	9001      	str	r0, [sp, #4]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	f1a1 0404 	sub.w	r4, r1, #4
 800b952:	bfb8      	it	lt
 800b954:	18e4      	addlt	r4, r4, r3
 800b956:	f000 f8df 	bl	800bb18 <__malloc_lock>
 800b95a:	4a1e      	ldr	r2, [pc, #120]	; (800b9d4 <_free_r+0x94>)
 800b95c:	9801      	ldr	r0, [sp, #4]
 800b95e:	6813      	ldr	r3, [r2, #0]
 800b960:	b933      	cbnz	r3, 800b970 <_free_r+0x30>
 800b962:	6063      	str	r3, [r4, #4]
 800b964:	6014      	str	r4, [r2, #0]
 800b966:	b003      	add	sp, #12
 800b968:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b96c:	f000 b8da 	b.w	800bb24 <__malloc_unlock>
 800b970:	42a3      	cmp	r3, r4
 800b972:	d908      	bls.n	800b986 <_free_r+0x46>
 800b974:	6825      	ldr	r5, [r4, #0]
 800b976:	1961      	adds	r1, r4, r5
 800b978:	428b      	cmp	r3, r1
 800b97a:	bf01      	itttt	eq
 800b97c:	6819      	ldreq	r1, [r3, #0]
 800b97e:	685b      	ldreq	r3, [r3, #4]
 800b980:	1949      	addeq	r1, r1, r5
 800b982:	6021      	streq	r1, [r4, #0]
 800b984:	e7ed      	b.n	800b962 <_free_r+0x22>
 800b986:	461a      	mov	r2, r3
 800b988:	685b      	ldr	r3, [r3, #4]
 800b98a:	b10b      	cbz	r3, 800b990 <_free_r+0x50>
 800b98c:	42a3      	cmp	r3, r4
 800b98e:	d9fa      	bls.n	800b986 <_free_r+0x46>
 800b990:	6811      	ldr	r1, [r2, #0]
 800b992:	1855      	adds	r5, r2, r1
 800b994:	42a5      	cmp	r5, r4
 800b996:	d10b      	bne.n	800b9b0 <_free_r+0x70>
 800b998:	6824      	ldr	r4, [r4, #0]
 800b99a:	4421      	add	r1, r4
 800b99c:	1854      	adds	r4, r2, r1
 800b99e:	42a3      	cmp	r3, r4
 800b9a0:	6011      	str	r1, [r2, #0]
 800b9a2:	d1e0      	bne.n	800b966 <_free_r+0x26>
 800b9a4:	681c      	ldr	r4, [r3, #0]
 800b9a6:	685b      	ldr	r3, [r3, #4]
 800b9a8:	6053      	str	r3, [r2, #4]
 800b9aa:	440c      	add	r4, r1
 800b9ac:	6014      	str	r4, [r2, #0]
 800b9ae:	e7da      	b.n	800b966 <_free_r+0x26>
 800b9b0:	d902      	bls.n	800b9b8 <_free_r+0x78>
 800b9b2:	230c      	movs	r3, #12
 800b9b4:	6003      	str	r3, [r0, #0]
 800b9b6:	e7d6      	b.n	800b966 <_free_r+0x26>
 800b9b8:	6825      	ldr	r5, [r4, #0]
 800b9ba:	1961      	adds	r1, r4, r5
 800b9bc:	428b      	cmp	r3, r1
 800b9be:	bf04      	itt	eq
 800b9c0:	6819      	ldreq	r1, [r3, #0]
 800b9c2:	685b      	ldreq	r3, [r3, #4]
 800b9c4:	6063      	str	r3, [r4, #4]
 800b9c6:	bf04      	itt	eq
 800b9c8:	1949      	addeq	r1, r1, r5
 800b9ca:	6021      	streq	r1, [r4, #0]
 800b9cc:	6054      	str	r4, [r2, #4]
 800b9ce:	e7ca      	b.n	800b966 <_free_r+0x26>
 800b9d0:	b003      	add	sp, #12
 800b9d2:	bd30      	pop	{r4, r5, pc}
 800b9d4:	24009fdc 	.word	0x24009fdc

0800b9d8 <sbrk_aligned>:
 800b9d8:	b570      	push	{r4, r5, r6, lr}
 800b9da:	4e0e      	ldr	r6, [pc, #56]	; (800ba14 <sbrk_aligned+0x3c>)
 800b9dc:	460c      	mov	r4, r1
 800b9de:	6831      	ldr	r1, [r6, #0]
 800b9e0:	4605      	mov	r5, r0
 800b9e2:	b911      	cbnz	r1, 800b9ea <sbrk_aligned+0x12>
 800b9e4:	f000 fba6 	bl	800c134 <_sbrk_r>
 800b9e8:	6030      	str	r0, [r6, #0]
 800b9ea:	4621      	mov	r1, r4
 800b9ec:	4628      	mov	r0, r5
 800b9ee:	f000 fba1 	bl	800c134 <_sbrk_r>
 800b9f2:	1c43      	adds	r3, r0, #1
 800b9f4:	d00a      	beq.n	800ba0c <sbrk_aligned+0x34>
 800b9f6:	1cc4      	adds	r4, r0, #3
 800b9f8:	f024 0403 	bic.w	r4, r4, #3
 800b9fc:	42a0      	cmp	r0, r4
 800b9fe:	d007      	beq.n	800ba10 <sbrk_aligned+0x38>
 800ba00:	1a21      	subs	r1, r4, r0
 800ba02:	4628      	mov	r0, r5
 800ba04:	f000 fb96 	bl	800c134 <_sbrk_r>
 800ba08:	3001      	adds	r0, #1
 800ba0a:	d101      	bne.n	800ba10 <sbrk_aligned+0x38>
 800ba0c:	f04f 34ff 	mov.w	r4, #4294967295
 800ba10:	4620      	mov	r0, r4
 800ba12:	bd70      	pop	{r4, r5, r6, pc}
 800ba14:	24009fe0 	.word	0x24009fe0

0800ba18 <_malloc_r>:
 800ba18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba1c:	1ccd      	adds	r5, r1, #3
 800ba1e:	f025 0503 	bic.w	r5, r5, #3
 800ba22:	3508      	adds	r5, #8
 800ba24:	2d0c      	cmp	r5, #12
 800ba26:	bf38      	it	cc
 800ba28:	250c      	movcc	r5, #12
 800ba2a:	2d00      	cmp	r5, #0
 800ba2c:	4607      	mov	r7, r0
 800ba2e:	db01      	blt.n	800ba34 <_malloc_r+0x1c>
 800ba30:	42a9      	cmp	r1, r5
 800ba32:	d905      	bls.n	800ba40 <_malloc_r+0x28>
 800ba34:	230c      	movs	r3, #12
 800ba36:	603b      	str	r3, [r7, #0]
 800ba38:	2600      	movs	r6, #0
 800ba3a:	4630      	mov	r0, r6
 800ba3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba40:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bb14 <_malloc_r+0xfc>
 800ba44:	f000 f868 	bl	800bb18 <__malloc_lock>
 800ba48:	f8d8 3000 	ldr.w	r3, [r8]
 800ba4c:	461c      	mov	r4, r3
 800ba4e:	bb5c      	cbnz	r4, 800baa8 <_malloc_r+0x90>
 800ba50:	4629      	mov	r1, r5
 800ba52:	4638      	mov	r0, r7
 800ba54:	f7ff ffc0 	bl	800b9d8 <sbrk_aligned>
 800ba58:	1c43      	adds	r3, r0, #1
 800ba5a:	4604      	mov	r4, r0
 800ba5c:	d155      	bne.n	800bb0a <_malloc_r+0xf2>
 800ba5e:	f8d8 4000 	ldr.w	r4, [r8]
 800ba62:	4626      	mov	r6, r4
 800ba64:	2e00      	cmp	r6, #0
 800ba66:	d145      	bne.n	800baf4 <_malloc_r+0xdc>
 800ba68:	2c00      	cmp	r4, #0
 800ba6a:	d048      	beq.n	800bafe <_malloc_r+0xe6>
 800ba6c:	6823      	ldr	r3, [r4, #0]
 800ba6e:	4631      	mov	r1, r6
 800ba70:	4638      	mov	r0, r7
 800ba72:	eb04 0903 	add.w	r9, r4, r3
 800ba76:	f000 fb5d 	bl	800c134 <_sbrk_r>
 800ba7a:	4581      	cmp	r9, r0
 800ba7c:	d13f      	bne.n	800bafe <_malloc_r+0xe6>
 800ba7e:	6821      	ldr	r1, [r4, #0]
 800ba80:	1a6d      	subs	r5, r5, r1
 800ba82:	4629      	mov	r1, r5
 800ba84:	4638      	mov	r0, r7
 800ba86:	f7ff ffa7 	bl	800b9d8 <sbrk_aligned>
 800ba8a:	3001      	adds	r0, #1
 800ba8c:	d037      	beq.n	800bafe <_malloc_r+0xe6>
 800ba8e:	6823      	ldr	r3, [r4, #0]
 800ba90:	442b      	add	r3, r5
 800ba92:	6023      	str	r3, [r4, #0]
 800ba94:	f8d8 3000 	ldr.w	r3, [r8]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d038      	beq.n	800bb0e <_malloc_r+0xf6>
 800ba9c:	685a      	ldr	r2, [r3, #4]
 800ba9e:	42a2      	cmp	r2, r4
 800baa0:	d12b      	bne.n	800bafa <_malloc_r+0xe2>
 800baa2:	2200      	movs	r2, #0
 800baa4:	605a      	str	r2, [r3, #4]
 800baa6:	e00f      	b.n	800bac8 <_malloc_r+0xb0>
 800baa8:	6822      	ldr	r2, [r4, #0]
 800baaa:	1b52      	subs	r2, r2, r5
 800baac:	d41f      	bmi.n	800baee <_malloc_r+0xd6>
 800baae:	2a0b      	cmp	r2, #11
 800bab0:	d917      	bls.n	800bae2 <_malloc_r+0xca>
 800bab2:	1961      	adds	r1, r4, r5
 800bab4:	42a3      	cmp	r3, r4
 800bab6:	6025      	str	r5, [r4, #0]
 800bab8:	bf18      	it	ne
 800baba:	6059      	strne	r1, [r3, #4]
 800babc:	6863      	ldr	r3, [r4, #4]
 800babe:	bf08      	it	eq
 800bac0:	f8c8 1000 	streq.w	r1, [r8]
 800bac4:	5162      	str	r2, [r4, r5]
 800bac6:	604b      	str	r3, [r1, #4]
 800bac8:	4638      	mov	r0, r7
 800baca:	f104 060b 	add.w	r6, r4, #11
 800bace:	f000 f829 	bl	800bb24 <__malloc_unlock>
 800bad2:	f026 0607 	bic.w	r6, r6, #7
 800bad6:	1d23      	adds	r3, r4, #4
 800bad8:	1af2      	subs	r2, r6, r3
 800bada:	d0ae      	beq.n	800ba3a <_malloc_r+0x22>
 800badc:	1b9b      	subs	r3, r3, r6
 800bade:	50a3      	str	r3, [r4, r2]
 800bae0:	e7ab      	b.n	800ba3a <_malloc_r+0x22>
 800bae2:	42a3      	cmp	r3, r4
 800bae4:	6862      	ldr	r2, [r4, #4]
 800bae6:	d1dd      	bne.n	800baa4 <_malloc_r+0x8c>
 800bae8:	f8c8 2000 	str.w	r2, [r8]
 800baec:	e7ec      	b.n	800bac8 <_malloc_r+0xb0>
 800baee:	4623      	mov	r3, r4
 800baf0:	6864      	ldr	r4, [r4, #4]
 800baf2:	e7ac      	b.n	800ba4e <_malloc_r+0x36>
 800baf4:	4634      	mov	r4, r6
 800baf6:	6876      	ldr	r6, [r6, #4]
 800baf8:	e7b4      	b.n	800ba64 <_malloc_r+0x4c>
 800bafa:	4613      	mov	r3, r2
 800bafc:	e7cc      	b.n	800ba98 <_malloc_r+0x80>
 800bafe:	230c      	movs	r3, #12
 800bb00:	603b      	str	r3, [r7, #0]
 800bb02:	4638      	mov	r0, r7
 800bb04:	f000 f80e 	bl	800bb24 <__malloc_unlock>
 800bb08:	e797      	b.n	800ba3a <_malloc_r+0x22>
 800bb0a:	6025      	str	r5, [r4, #0]
 800bb0c:	e7dc      	b.n	800bac8 <_malloc_r+0xb0>
 800bb0e:	605b      	str	r3, [r3, #4]
 800bb10:	deff      	udf	#255	; 0xff
 800bb12:	bf00      	nop
 800bb14:	24009fdc 	.word	0x24009fdc

0800bb18 <__malloc_lock>:
 800bb18:	4801      	ldr	r0, [pc, #4]	; (800bb20 <__malloc_lock+0x8>)
 800bb1a:	f7ff bf0f 	b.w	800b93c <__retarget_lock_acquire_recursive>
 800bb1e:	bf00      	nop
 800bb20:	24009fd8 	.word	0x24009fd8

0800bb24 <__malloc_unlock>:
 800bb24:	4801      	ldr	r0, [pc, #4]	; (800bb2c <__malloc_unlock+0x8>)
 800bb26:	f7ff bf0a 	b.w	800b93e <__retarget_lock_release_recursive>
 800bb2a:	bf00      	nop
 800bb2c:	24009fd8 	.word	0x24009fd8

0800bb30 <__ssputs_r>:
 800bb30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb34:	688e      	ldr	r6, [r1, #8]
 800bb36:	461f      	mov	r7, r3
 800bb38:	42be      	cmp	r6, r7
 800bb3a:	680b      	ldr	r3, [r1, #0]
 800bb3c:	4682      	mov	sl, r0
 800bb3e:	460c      	mov	r4, r1
 800bb40:	4690      	mov	r8, r2
 800bb42:	d82c      	bhi.n	800bb9e <__ssputs_r+0x6e>
 800bb44:	898a      	ldrh	r2, [r1, #12]
 800bb46:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bb4a:	d026      	beq.n	800bb9a <__ssputs_r+0x6a>
 800bb4c:	6965      	ldr	r5, [r4, #20]
 800bb4e:	6909      	ldr	r1, [r1, #16]
 800bb50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb54:	eba3 0901 	sub.w	r9, r3, r1
 800bb58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb5c:	1c7b      	adds	r3, r7, #1
 800bb5e:	444b      	add	r3, r9
 800bb60:	106d      	asrs	r5, r5, #1
 800bb62:	429d      	cmp	r5, r3
 800bb64:	bf38      	it	cc
 800bb66:	461d      	movcc	r5, r3
 800bb68:	0553      	lsls	r3, r2, #21
 800bb6a:	d527      	bpl.n	800bbbc <__ssputs_r+0x8c>
 800bb6c:	4629      	mov	r1, r5
 800bb6e:	f7ff ff53 	bl	800ba18 <_malloc_r>
 800bb72:	4606      	mov	r6, r0
 800bb74:	b360      	cbz	r0, 800bbd0 <__ssputs_r+0xa0>
 800bb76:	6921      	ldr	r1, [r4, #16]
 800bb78:	464a      	mov	r2, r9
 800bb7a:	f000 faeb 	bl	800c154 <memcpy>
 800bb7e:	89a3      	ldrh	r3, [r4, #12]
 800bb80:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bb84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb88:	81a3      	strh	r3, [r4, #12]
 800bb8a:	6126      	str	r6, [r4, #16]
 800bb8c:	6165      	str	r5, [r4, #20]
 800bb8e:	444e      	add	r6, r9
 800bb90:	eba5 0509 	sub.w	r5, r5, r9
 800bb94:	6026      	str	r6, [r4, #0]
 800bb96:	60a5      	str	r5, [r4, #8]
 800bb98:	463e      	mov	r6, r7
 800bb9a:	42be      	cmp	r6, r7
 800bb9c:	d900      	bls.n	800bba0 <__ssputs_r+0x70>
 800bb9e:	463e      	mov	r6, r7
 800bba0:	6820      	ldr	r0, [r4, #0]
 800bba2:	4632      	mov	r2, r6
 800bba4:	4641      	mov	r1, r8
 800bba6:	f000 faab 	bl	800c100 <memmove>
 800bbaa:	68a3      	ldr	r3, [r4, #8]
 800bbac:	1b9b      	subs	r3, r3, r6
 800bbae:	60a3      	str	r3, [r4, #8]
 800bbb0:	6823      	ldr	r3, [r4, #0]
 800bbb2:	4433      	add	r3, r6
 800bbb4:	6023      	str	r3, [r4, #0]
 800bbb6:	2000      	movs	r0, #0
 800bbb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbbc:	462a      	mov	r2, r5
 800bbbe:	f000 fad7 	bl	800c170 <_realloc_r>
 800bbc2:	4606      	mov	r6, r0
 800bbc4:	2800      	cmp	r0, #0
 800bbc6:	d1e0      	bne.n	800bb8a <__ssputs_r+0x5a>
 800bbc8:	6921      	ldr	r1, [r4, #16]
 800bbca:	4650      	mov	r0, sl
 800bbcc:	f7ff feb8 	bl	800b940 <_free_r>
 800bbd0:	230c      	movs	r3, #12
 800bbd2:	f8ca 3000 	str.w	r3, [sl]
 800bbd6:	89a3      	ldrh	r3, [r4, #12]
 800bbd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbdc:	81a3      	strh	r3, [r4, #12]
 800bbde:	f04f 30ff 	mov.w	r0, #4294967295
 800bbe2:	e7e9      	b.n	800bbb8 <__ssputs_r+0x88>

0800bbe4 <_svfiprintf_r>:
 800bbe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbe8:	4698      	mov	r8, r3
 800bbea:	898b      	ldrh	r3, [r1, #12]
 800bbec:	061b      	lsls	r3, r3, #24
 800bbee:	b09d      	sub	sp, #116	; 0x74
 800bbf0:	4607      	mov	r7, r0
 800bbf2:	460d      	mov	r5, r1
 800bbf4:	4614      	mov	r4, r2
 800bbf6:	d50e      	bpl.n	800bc16 <_svfiprintf_r+0x32>
 800bbf8:	690b      	ldr	r3, [r1, #16]
 800bbfa:	b963      	cbnz	r3, 800bc16 <_svfiprintf_r+0x32>
 800bbfc:	2140      	movs	r1, #64	; 0x40
 800bbfe:	f7ff ff0b 	bl	800ba18 <_malloc_r>
 800bc02:	6028      	str	r0, [r5, #0]
 800bc04:	6128      	str	r0, [r5, #16]
 800bc06:	b920      	cbnz	r0, 800bc12 <_svfiprintf_r+0x2e>
 800bc08:	230c      	movs	r3, #12
 800bc0a:	603b      	str	r3, [r7, #0]
 800bc0c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc10:	e0d0      	b.n	800bdb4 <_svfiprintf_r+0x1d0>
 800bc12:	2340      	movs	r3, #64	; 0x40
 800bc14:	616b      	str	r3, [r5, #20]
 800bc16:	2300      	movs	r3, #0
 800bc18:	9309      	str	r3, [sp, #36]	; 0x24
 800bc1a:	2320      	movs	r3, #32
 800bc1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc20:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc24:	2330      	movs	r3, #48	; 0x30
 800bc26:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bdcc <_svfiprintf_r+0x1e8>
 800bc2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc2e:	f04f 0901 	mov.w	r9, #1
 800bc32:	4623      	mov	r3, r4
 800bc34:	469a      	mov	sl, r3
 800bc36:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc3a:	b10a      	cbz	r2, 800bc40 <_svfiprintf_r+0x5c>
 800bc3c:	2a25      	cmp	r2, #37	; 0x25
 800bc3e:	d1f9      	bne.n	800bc34 <_svfiprintf_r+0x50>
 800bc40:	ebba 0b04 	subs.w	fp, sl, r4
 800bc44:	d00b      	beq.n	800bc5e <_svfiprintf_r+0x7a>
 800bc46:	465b      	mov	r3, fp
 800bc48:	4622      	mov	r2, r4
 800bc4a:	4629      	mov	r1, r5
 800bc4c:	4638      	mov	r0, r7
 800bc4e:	f7ff ff6f 	bl	800bb30 <__ssputs_r>
 800bc52:	3001      	adds	r0, #1
 800bc54:	f000 80a9 	beq.w	800bdaa <_svfiprintf_r+0x1c6>
 800bc58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc5a:	445a      	add	r2, fp
 800bc5c:	9209      	str	r2, [sp, #36]	; 0x24
 800bc5e:	f89a 3000 	ldrb.w	r3, [sl]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	f000 80a1 	beq.w	800bdaa <_svfiprintf_r+0x1c6>
 800bc68:	2300      	movs	r3, #0
 800bc6a:	f04f 32ff 	mov.w	r2, #4294967295
 800bc6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc72:	f10a 0a01 	add.w	sl, sl, #1
 800bc76:	9304      	str	r3, [sp, #16]
 800bc78:	9307      	str	r3, [sp, #28]
 800bc7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc7e:	931a      	str	r3, [sp, #104]	; 0x68
 800bc80:	4654      	mov	r4, sl
 800bc82:	2205      	movs	r2, #5
 800bc84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc88:	4850      	ldr	r0, [pc, #320]	; (800bdcc <_svfiprintf_r+0x1e8>)
 800bc8a:	f7f4 fb41 	bl	8000310 <memchr>
 800bc8e:	9a04      	ldr	r2, [sp, #16]
 800bc90:	b9d8      	cbnz	r0, 800bcca <_svfiprintf_r+0xe6>
 800bc92:	06d0      	lsls	r0, r2, #27
 800bc94:	bf44      	itt	mi
 800bc96:	2320      	movmi	r3, #32
 800bc98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc9c:	0711      	lsls	r1, r2, #28
 800bc9e:	bf44      	itt	mi
 800bca0:	232b      	movmi	r3, #43	; 0x2b
 800bca2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bca6:	f89a 3000 	ldrb.w	r3, [sl]
 800bcaa:	2b2a      	cmp	r3, #42	; 0x2a
 800bcac:	d015      	beq.n	800bcda <_svfiprintf_r+0xf6>
 800bcae:	9a07      	ldr	r2, [sp, #28]
 800bcb0:	4654      	mov	r4, sl
 800bcb2:	2000      	movs	r0, #0
 800bcb4:	f04f 0c0a 	mov.w	ip, #10
 800bcb8:	4621      	mov	r1, r4
 800bcba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bcbe:	3b30      	subs	r3, #48	; 0x30
 800bcc0:	2b09      	cmp	r3, #9
 800bcc2:	d94d      	bls.n	800bd60 <_svfiprintf_r+0x17c>
 800bcc4:	b1b0      	cbz	r0, 800bcf4 <_svfiprintf_r+0x110>
 800bcc6:	9207      	str	r2, [sp, #28]
 800bcc8:	e014      	b.n	800bcf4 <_svfiprintf_r+0x110>
 800bcca:	eba0 0308 	sub.w	r3, r0, r8
 800bcce:	fa09 f303 	lsl.w	r3, r9, r3
 800bcd2:	4313      	orrs	r3, r2
 800bcd4:	9304      	str	r3, [sp, #16]
 800bcd6:	46a2      	mov	sl, r4
 800bcd8:	e7d2      	b.n	800bc80 <_svfiprintf_r+0x9c>
 800bcda:	9b03      	ldr	r3, [sp, #12]
 800bcdc:	1d19      	adds	r1, r3, #4
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	9103      	str	r1, [sp, #12]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	bfbb      	ittet	lt
 800bce6:	425b      	neglt	r3, r3
 800bce8:	f042 0202 	orrlt.w	r2, r2, #2
 800bcec:	9307      	strge	r3, [sp, #28]
 800bcee:	9307      	strlt	r3, [sp, #28]
 800bcf0:	bfb8      	it	lt
 800bcf2:	9204      	strlt	r2, [sp, #16]
 800bcf4:	7823      	ldrb	r3, [r4, #0]
 800bcf6:	2b2e      	cmp	r3, #46	; 0x2e
 800bcf8:	d10c      	bne.n	800bd14 <_svfiprintf_r+0x130>
 800bcfa:	7863      	ldrb	r3, [r4, #1]
 800bcfc:	2b2a      	cmp	r3, #42	; 0x2a
 800bcfe:	d134      	bne.n	800bd6a <_svfiprintf_r+0x186>
 800bd00:	9b03      	ldr	r3, [sp, #12]
 800bd02:	1d1a      	adds	r2, r3, #4
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	9203      	str	r2, [sp, #12]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	bfb8      	it	lt
 800bd0c:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd10:	3402      	adds	r4, #2
 800bd12:	9305      	str	r3, [sp, #20]
 800bd14:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bddc <_svfiprintf_r+0x1f8>
 800bd18:	7821      	ldrb	r1, [r4, #0]
 800bd1a:	2203      	movs	r2, #3
 800bd1c:	4650      	mov	r0, sl
 800bd1e:	f7f4 faf7 	bl	8000310 <memchr>
 800bd22:	b138      	cbz	r0, 800bd34 <_svfiprintf_r+0x150>
 800bd24:	9b04      	ldr	r3, [sp, #16]
 800bd26:	eba0 000a 	sub.w	r0, r0, sl
 800bd2a:	2240      	movs	r2, #64	; 0x40
 800bd2c:	4082      	lsls	r2, r0
 800bd2e:	4313      	orrs	r3, r2
 800bd30:	3401      	adds	r4, #1
 800bd32:	9304      	str	r3, [sp, #16]
 800bd34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd38:	4825      	ldr	r0, [pc, #148]	; (800bdd0 <_svfiprintf_r+0x1ec>)
 800bd3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd3e:	2206      	movs	r2, #6
 800bd40:	f7f4 fae6 	bl	8000310 <memchr>
 800bd44:	2800      	cmp	r0, #0
 800bd46:	d038      	beq.n	800bdba <_svfiprintf_r+0x1d6>
 800bd48:	4b22      	ldr	r3, [pc, #136]	; (800bdd4 <_svfiprintf_r+0x1f0>)
 800bd4a:	bb1b      	cbnz	r3, 800bd94 <_svfiprintf_r+0x1b0>
 800bd4c:	9b03      	ldr	r3, [sp, #12]
 800bd4e:	3307      	adds	r3, #7
 800bd50:	f023 0307 	bic.w	r3, r3, #7
 800bd54:	3308      	adds	r3, #8
 800bd56:	9303      	str	r3, [sp, #12]
 800bd58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd5a:	4433      	add	r3, r6
 800bd5c:	9309      	str	r3, [sp, #36]	; 0x24
 800bd5e:	e768      	b.n	800bc32 <_svfiprintf_r+0x4e>
 800bd60:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd64:	460c      	mov	r4, r1
 800bd66:	2001      	movs	r0, #1
 800bd68:	e7a6      	b.n	800bcb8 <_svfiprintf_r+0xd4>
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	3401      	adds	r4, #1
 800bd6e:	9305      	str	r3, [sp, #20]
 800bd70:	4619      	mov	r1, r3
 800bd72:	f04f 0c0a 	mov.w	ip, #10
 800bd76:	4620      	mov	r0, r4
 800bd78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd7c:	3a30      	subs	r2, #48	; 0x30
 800bd7e:	2a09      	cmp	r2, #9
 800bd80:	d903      	bls.n	800bd8a <_svfiprintf_r+0x1a6>
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d0c6      	beq.n	800bd14 <_svfiprintf_r+0x130>
 800bd86:	9105      	str	r1, [sp, #20]
 800bd88:	e7c4      	b.n	800bd14 <_svfiprintf_r+0x130>
 800bd8a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd8e:	4604      	mov	r4, r0
 800bd90:	2301      	movs	r3, #1
 800bd92:	e7f0      	b.n	800bd76 <_svfiprintf_r+0x192>
 800bd94:	ab03      	add	r3, sp, #12
 800bd96:	9300      	str	r3, [sp, #0]
 800bd98:	462a      	mov	r2, r5
 800bd9a:	4b0f      	ldr	r3, [pc, #60]	; (800bdd8 <_svfiprintf_r+0x1f4>)
 800bd9c:	a904      	add	r1, sp, #16
 800bd9e:	4638      	mov	r0, r7
 800bda0:	f3af 8000 	nop.w
 800bda4:	1c42      	adds	r2, r0, #1
 800bda6:	4606      	mov	r6, r0
 800bda8:	d1d6      	bne.n	800bd58 <_svfiprintf_r+0x174>
 800bdaa:	89ab      	ldrh	r3, [r5, #12]
 800bdac:	065b      	lsls	r3, r3, #25
 800bdae:	f53f af2d 	bmi.w	800bc0c <_svfiprintf_r+0x28>
 800bdb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bdb4:	b01d      	add	sp, #116	; 0x74
 800bdb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdba:	ab03      	add	r3, sp, #12
 800bdbc:	9300      	str	r3, [sp, #0]
 800bdbe:	462a      	mov	r2, r5
 800bdc0:	4b05      	ldr	r3, [pc, #20]	; (800bdd8 <_svfiprintf_r+0x1f4>)
 800bdc2:	a904      	add	r1, sp, #16
 800bdc4:	4638      	mov	r0, r7
 800bdc6:	f000 f879 	bl	800bebc <_printf_i>
 800bdca:	e7eb      	b.n	800bda4 <_svfiprintf_r+0x1c0>
 800bdcc:	0800ccf0 	.word	0x0800ccf0
 800bdd0:	0800ccfa 	.word	0x0800ccfa
 800bdd4:	00000000 	.word	0x00000000
 800bdd8:	0800bb31 	.word	0x0800bb31
 800bddc:	0800ccf6 	.word	0x0800ccf6

0800bde0 <_printf_common>:
 800bde0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bde4:	4616      	mov	r6, r2
 800bde6:	4699      	mov	r9, r3
 800bde8:	688a      	ldr	r2, [r1, #8]
 800bdea:	690b      	ldr	r3, [r1, #16]
 800bdec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bdf0:	4293      	cmp	r3, r2
 800bdf2:	bfb8      	it	lt
 800bdf4:	4613      	movlt	r3, r2
 800bdf6:	6033      	str	r3, [r6, #0]
 800bdf8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bdfc:	4607      	mov	r7, r0
 800bdfe:	460c      	mov	r4, r1
 800be00:	b10a      	cbz	r2, 800be06 <_printf_common+0x26>
 800be02:	3301      	adds	r3, #1
 800be04:	6033      	str	r3, [r6, #0]
 800be06:	6823      	ldr	r3, [r4, #0]
 800be08:	0699      	lsls	r1, r3, #26
 800be0a:	bf42      	ittt	mi
 800be0c:	6833      	ldrmi	r3, [r6, #0]
 800be0e:	3302      	addmi	r3, #2
 800be10:	6033      	strmi	r3, [r6, #0]
 800be12:	6825      	ldr	r5, [r4, #0]
 800be14:	f015 0506 	ands.w	r5, r5, #6
 800be18:	d106      	bne.n	800be28 <_printf_common+0x48>
 800be1a:	f104 0a19 	add.w	sl, r4, #25
 800be1e:	68e3      	ldr	r3, [r4, #12]
 800be20:	6832      	ldr	r2, [r6, #0]
 800be22:	1a9b      	subs	r3, r3, r2
 800be24:	42ab      	cmp	r3, r5
 800be26:	dc26      	bgt.n	800be76 <_printf_common+0x96>
 800be28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800be2c:	1e13      	subs	r3, r2, #0
 800be2e:	6822      	ldr	r2, [r4, #0]
 800be30:	bf18      	it	ne
 800be32:	2301      	movne	r3, #1
 800be34:	0692      	lsls	r2, r2, #26
 800be36:	d42b      	bmi.n	800be90 <_printf_common+0xb0>
 800be38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800be3c:	4649      	mov	r1, r9
 800be3e:	4638      	mov	r0, r7
 800be40:	47c0      	blx	r8
 800be42:	3001      	adds	r0, #1
 800be44:	d01e      	beq.n	800be84 <_printf_common+0xa4>
 800be46:	6823      	ldr	r3, [r4, #0]
 800be48:	6922      	ldr	r2, [r4, #16]
 800be4a:	f003 0306 	and.w	r3, r3, #6
 800be4e:	2b04      	cmp	r3, #4
 800be50:	bf02      	ittt	eq
 800be52:	68e5      	ldreq	r5, [r4, #12]
 800be54:	6833      	ldreq	r3, [r6, #0]
 800be56:	1aed      	subeq	r5, r5, r3
 800be58:	68a3      	ldr	r3, [r4, #8]
 800be5a:	bf0c      	ite	eq
 800be5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be60:	2500      	movne	r5, #0
 800be62:	4293      	cmp	r3, r2
 800be64:	bfc4      	itt	gt
 800be66:	1a9b      	subgt	r3, r3, r2
 800be68:	18ed      	addgt	r5, r5, r3
 800be6a:	2600      	movs	r6, #0
 800be6c:	341a      	adds	r4, #26
 800be6e:	42b5      	cmp	r5, r6
 800be70:	d11a      	bne.n	800bea8 <_printf_common+0xc8>
 800be72:	2000      	movs	r0, #0
 800be74:	e008      	b.n	800be88 <_printf_common+0xa8>
 800be76:	2301      	movs	r3, #1
 800be78:	4652      	mov	r2, sl
 800be7a:	4649      	mov	r1, r9
 800be7c:	4638      	mov	r0, r7
 800be7e:	47c0      	blx	r8
 800be80:	3001      	adds	r0, #1
 800be82:	d103      	bne.n	800be8c <_printf_common+0xac>
 800be84:	f04f 30ff 	mov.w	r0, #4294967295
 800be88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be8c:	3501      	adds	r5, #1
 800be8e:	e7c6      	b.n	800be1e <_printf_common+0x3e>
 800be90:	18e1      	adds	r1, r4, r3
 800be92:	1c5a      	adds	r2, r3, #1
 800be94:	2030      	movs	r0, #48	; 0x30
 800be96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800be9a:	4422      	add	r2, r4
 800be9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bea0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bea4:	3302      	adds	r3, #2
 800bea6:	e7c7      	b.n	800be38 <_printf_common+0x58>
 800bea8:	2301      	movs	r3, #1
 800beaa:	4622      	mov	r2, r4
 800beac:	4649      	mov	r1, r9
 800beae:	4638      	mov	r0, r7
 800beb0:	47c0      	blx	r8
 800beb2:	3001      	adds	r0, #1
 800beb4:	d0e6      	beq.n	800be84 <_printf_common+0xa4>
 800beb6:	3601      	adds	r6, #1
 800beb8:	e7d9      	b.n	800be6e <_printf_common+0x8e>
	...

0800bebc <_printf_i>:
 800bebc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bec0:	7e0f      	ldrb	r7, [r1, #24]
 800bec2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bec4:	2f78      	cmp	r7, #120	; 0x78
 800bec6:	4691      	mov	r9, r2
 800bec8:	4680      	mov	r8, r0
 800beca:	460c      	mov	r4, r1
 800becc:	469a      	mov	sl, r3
 800bece:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bed2:	d807      	bhi.n	800bee4 <_printf_i+0x28>
 800bed4:	2f62      	cmp	r7, #98	; 0x62
 800bed6:	d80a      	bhi.n	800beee <_printf_i+0x32>
 800bed8:	2f00      	cmp	r7, #0
 800beda:	f000 80d4 	beq.w	800c086 <_printf_i+0x1ca>
 800bede:	2f58      	cmp	r7, #88	; 0x58
 800bee0:	f000 80c0 	beq.w	800c064 <_printf_i+0x1a8>
 800bee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bee8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800beec:	e03a      	b.n	800bf64 <_printf_i+0xa8>
 800beee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bef2:	2b15      	cmp	r3, #21
 800bef4:	d8f6      	bhi.n	800bee4 <_printf_i+0x28>
 800bef6:	a101      	add	r1, pc, #4	; (adr r1, 800befc <_printf_i+0x40>)
 800bef8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800befc:	0800bf55 	.word	0x0800bf55
 800bf00:	0800bf69 	.word	0x0800bf69
 800bf04:	0800bee5 	.word	0x0800bee5
 800bf08:	0800bee5 	.word	0x0800bee5
 800bf0c:	0800bee5 	.word	0x0800bee5
 800bf10:	0800bee5 	.word	0x0800bee5
 800bf14:	0800bf69 	.word	0x0800bf69
 800bf18:	0800bee5 	.word	0x0800bee5
 800bf1c:	0800bee5 	.word	0x0800bee5
 800bf20:	0800bee5 	.word	0x0800bee5
 800bf24:	0800bee5 	.word	0x0800bee5
 800bf28:	0800c06d 	.word	0x0800c06d
 800bf2c:	0800bf95 	.word	0x0800bf95
 800bf30:	0800c027 	.word	0x0800c027
 800bf34:	0800bee5 	.word	0x0800bee5
 800bf38:	0800bee5 	.word	0x0800bee5
 800bf3c:	0800c08f 	.word	0x0800c08f
 800bf40:	0800bee5 	.word	0x0800bee5
 800bf44:	0800bf95 	.word	0x0800bf95
 800bf48:	0800bee5 	.word	0x0800bee5
 800bf4c:	0800bee5 	.word	0x0800bee5
 800bf50:	0800c02f 	.word	0x0800c02f
 800bf54:	682b      	ldr	r3, [r5, #0]
 800bf56:	1d1a      	adds	r2, r3, #4
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	602a      	str	r2, [r5, #0]
 800bf5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bf64:	2301      	movs	r3, #1
 800bf66:	e09f      	b.n	800c0a8 <_printf_i+0x1ec>
 800bf68:	6820      	ldr	r0, [r4, #0]
 800bf6a:	682b      	ldr	r3, [r5, #0]
 800bf6c:	0607      	lsls	r7, r0, #24
 800bf6e:	f103 0104 	add.w	r1, r3, #4
 800bf72:	6029      	str	r1, [r5, #0]
 800bf74:	d501      	bpl.n	800bf7a <_printf_i+0xbe>
 800bf76:	681e      	ldr	r6, [r3, #0]
 800bf78:	e003      	b.n	800bf82 <_printf_i+0xc6>
 800bf7a:	0646      	lsls	r6, r0, #25
 800bf7c:	d5fb      	bpl.n	800bf76 <_printf_i+0xba>
 800bf7e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bf82:	2e00      	cmp	r6, #0
 800bf84:	da03      	bge.n	800bf8e <_printf_i+0xd2>
 800bf86:	232d      	movs	r3, #45	; 0x2d
 800bf88:	4276      	negs	r6, r6
 800bf8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf8e:	485a      	ldr	r0, [pc, #360]	; (800c0f8 <_printf_i+0x23c>)
 800bf90:	230a      	movs	r3, #10
 800bf92:	e012      	b.n	800bfba <_printf_i+0xfe>
 800bf94:	682b      	ldr	r3, [r5, #0]
 800bf96:	6820      	ldr	r0, [r4, #0]
 800bf98:	1d19      	adds	r1, r3, #4
 800bf9a:	6029      	str	r1, [r5, #0]
 800bf9c:	0605      	lsls	r5, r0, #24
 800bf9e:	d501      	bpl.n	800bfa4 <_printf_i+0xe8>
 800bfa0:	681e      	ldr	r6, [r3, #0]
 800bfa2:	e002      	b.n	800bfaa <_printf_i+0xee>
 800bfa4:	0641      	lsls	r1, r0, #25
 800bfa6:	d5fb      	bpl.n	800bfa0 <_printf_i+0xe4>
 800bfa8:	881e      	ldrh	r6, [r3, #0]
 800bfaa:	4853      	ldr	r0, [pc, #332]	; (800c0f8 <_printf_i+0x23c>)
 800bfac:	2f6f      	cmp	r7, #111	; 0x6f
 800bfae:	bf0c      	ite	eq
 800bfb0:	2308      	moveq	r3, #8
 800bfb2:	230a      	movne	r3, #10
 800bfb4:	2100      	movs	r1, #0
 800bfb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bfba:	6865      	ldr	r5, [r4, #4]
 800bfbc:	60a5      	str	r5, [r4, #8]
 800bfbe:	2d00      	cmp	r5, #0
 800bfc0:	bfa2      	ittt	ge
 800bfc2:	6821      	ldrge	r1, [r4, #0]
 800bfc4:	f021 0104 	bicge.w	r1, r1, #4
 800bfc8:	6021      	strge	r1, [r4, #0]
 800bfca:	b90e      	cbnz	r6, 800bfd0 <_printf_i+0x114>
 800bfcc:	2d00      	cmp	r5, #0
 800bfce:	d04b      	beq.n	800c068 <_printf_i+0x1ac>
 800bfd0:	4615      	mov	r5, r2
 800bfd2:	fbb6 f1f3 	udiv	r1, r6, r3
 800bfd6:	fb03 6711 	mls	r7, r3, r1, r6
 800bfda:	5dc7      	ldrb	r7, [r0, r7]
 800bfdc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bfe0:	4637      	mov	r7, r6
 800bfe2:	42bb      	cmp	r3, r7
 800bfe4:	460e      	mov	r6, r1
 800bfe6:	d9f4      	bls.n	800bfd2 <_printf_i+0x116>
 800bfe8:	2b08      	cmp	r3, #8
 800bfea:	d10b      	bne.n	800c004 <_printf_i+0x148>
 800bfec:	6823      	ldr	r3, [r4, #0]
 800bfee:	07de      	lsls	r6, r3, #31
 800bff0:	d508      	bpl.n	800c004 <_printf_i+0x148>
 800bff2:	6923      	ldr	r3, [r4, #16]
 800bff4:	6861      	ldr	r1, [r4, #4]
 800bff6:	4299      	cmp	r1, r3
 800bff8:	bfde      	ittt	le
 800bffa:	2330      	movle	r3, #48	; 0x30
 800bffc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c000:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c004:	1b52      	subs	r2, r2, r5
 800c006:	6122      	str	r2, [r4, #16]
 800c008:	f8cd a000 	str.w	sl, [sp]
 800c00c:	464b      	mov	r3, r9
 800c00e:	aa03      	add	r2, sp, #12
 800c010:	4621      	mov	r1, r4
 800c012:	4640      	mov	r0, r8
 800c014:	f7ff fee4 	bl	800bde0 <_printf_common>
 800c018:	3001      	adds	r0, #1
 800c01a:	d14a      	bne.n	800c0b2 <_printf_i+0x1f6>
 800c01c:	f04f 30ff 	mov.w	r0, #4294967295
 800c020:	b004      	add	sp, #16
 800c022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c026:	6823      	ldr	r3, [r4, #0]
 800c028:	f043 0320 	orr.w	r3, r3, #32
 800c02c:	6023      	str	r3, [r4, #0]
 800c02e:	4833      	ldr	r0, [pc, #204]	; (800c0fc <_printf_i+0x240>)
 800c030:	2778      	movs	r7, #120	; 0x78
 800c032:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c036:	6823      	ldr	r3, [r4, #0]
 800c038:	6829      	ldr	r1, [r5, #0]
 800c03a:	061f      	lsls	r7, r3, #24
 800c03c:	f851 6b04 	ldr.w	r6, [r1], #4
 800c040:	d402      	bmi.n	800c048 <_printf_i+0x18c>
 800c042:	065f      	lsls	r7, r3, #25
 800c044:	bf48      	it	mi
 800c046:	b2b6      	uxthmi	r6, r6
 800c048:	07df      	lsls	r7, r3, #31
 800c04a:	bf48      	it	mi
 800c04c:	f043 0320 	orrmi.w	r3, r3, #32
 800c050:	6029      	str	r1, [r5, #0]
 800c052:	bf48      	it	mi
 800c054:	6023      	strmi	r3, [r4, #0]
 800c056:	b91e      	cbnz	r6, 800c060 <_printf_i+0x1a4>
 800c058:	6823      	ldr	r3, [r4, #0]
 800c05a:	f023 0320 	bic.w	r3, r3, #32
 800c05e:	6023      	str	r3, [r4, #0]
 800c060:	2310      	movs	r3, #16
 800c062:	e7a7      	b.n	800bfb4 <_printf_i+0xf8>
 800c064:	4824      	ldr	r0, [pc, #144]	; (800c0f8 <_printf_i+0x23c>)
 800c066:	e7e4      	b.n	800c032 <_printf_i+0x176>
 800c068:	4615      	mov	r5, r2
 800c06a:	e7bd      	b.n	800bfe8 <_printf_i+0x12c>
 800c06c:	682b      	ldr	r3, [r5, #0]
 800c06e:	6826      	ldr	r6, [r4, #0]
 800c070:	6961      	ldr	r1, [r4, #20]
 800c072:	1d18      	adds	r0, r3, #4
 800c074:	6028      	str	r0, [r5, #0]
 800c076:	0635      	lsls	r5, r6, #24
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	d501      	bpl.n	800c080 <_printf_i+0x1c4>
 800c07c:	6019      	str	r1, [r3, #0]
 800c07e:	e002      	b.n	800c086 <_printf_i+0x1ca>
 800c080:	0670      	lsls	r0, r6, #25
 800c082:	d5fb      	bpl.n	800c07c <_printf_i+0x1c0>
 800c084:	8019      	strh	r1, [r3, #0]
 800c086:	2300      	movs	r3, #0
 800c088:	6123      	str	r3, [r4, #16]
 800c08a:	4615      	mov	r5, r2
 800c08c:	e7bc      	b.n	800c008 <_printf_i+0x14c>
 800c08e:	682b      	ldr	r3, [r5, #0]
 800c090:	1d1a      	adds	r2, r3, #4
 800c092:	602a      	str	r2, [r5, #0]
 800c094:	681d      	ldr	r5, [r3, #0]
 800c096:	6862      	ldr	r2, [r4, #4]
 800c098:	2100      	movs	r1, #0
 800c09a:	4628      	mov	r0, r5
 800c09c:	f7f4 f938 	bl	8000310 <memchr>
 800c0a0:	b108      	cbz	r0, 800c0a6 <_printf_i+0x1ea>
 800c0a2:	1b40      	subs	r0, r0, r5
 800c0a4:	6060      	str	r0, [r4, #4]
 800c0a6:	6863      	ldr	r3, [r4, #4]
 800c0a8:	6123      	str	r3, [r4, #16]
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c0b0:	e7aa      	b.n	800c008 <_printf_i+0x14c>
 800c0b2:	6923      	ldr	r3, [r4, #16]
 800c0b4:	462a      	mov	r2, r5
 800c0b6:	4649      	mov	r1, r9
 800c0b8:	4640      	mov	r0, r8
 800c0ba:	47d0      	blx	sl
 800c0bc:	3001      	adds	r0, #1
 800c0be:	d0ad      	beq.n	800c01c <_printf_i+0x160>
 800c0c0:	6823      	ldr	r3, [r4, #0]
 800c0c2:	079b      	lsls	r3, r3, #30
 800c0c4:	d413      	bmi.n	800c0ee <_printf_i+0x232>
 800c0c6:	68e0      	ldr	r0, [r4, #12]
 800c0c8:	9b03      	ldr	r3, [sp, #12]
 800c0ca:	4298      	cmp	r0, r3
 800c0cc:	bfb8      	it	lt
 800c0ce:	4618      	movlt	r0, r3
 800c0d0:	e7a6      	b.n	800c020 <_printf_i+0x164>
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	4632      	mov	r2, r6
 800c0d6:	4649      	mov	r1, r9
 800c0d8:	4640      	mov	r0, r8
 800c0da:	47d0      	blx	sl
 800c0dc:	3001      	adds	r0, #1
 800c0de:	d09d      	beq.n	800c01c <_printf_i+0x160>
 800c0e0:	3501      	adds	r5, #1
 800c0e2:	68e3      	ldr	r3, [r4, #12]
 800c0e4:	9903      	ldr	r1, [sp, #12]
 800c0e6:	1a5b      	subs	r3, r3, r1
 800c0e8:	42ab      	cmp	r3, r5
 800c0ea:	dcf2      	bgt.n	800c0d2 <_printf_i+0x216>
 800c0ec:	e7eb      	b.n	800c0c6 <_printf_i+0x20a>
 800c0ee:	2500      	movs	r5, #0
 800c0f0:	f104 0619 	add.w	r6, r4, #25
 800c0f4:	e7f5      	b.n	800c0e2 <_printf_i+0x226>
 800c0f6:	bf00      	nop
 800c0f8:	0800cd01 	.word	0x0800cd01
 800c0fc:	0800cd12 	.word	0x0800cd12

0800c100 <memmove>:
 800c100:	4288      	cmp	r0, r1
 800c102:	b510      	push	{r4, lr}
 800c104:	eb01 0402 	add.w	r4, r1, r2
 800c108:	d902      	bls.n	800c110 <memmove+0x10>
 800c10a:	4284      	cmp	r4, r0
 800c10c:	4623      	mov	r3, r4
 800c10e:	d807      	bhi.n	800c120 <memmove+0x20>
 800c110:	1e43      	subs	r3, r0, #1
 800c112:	42a1      	cmp	r1, r4
 800c114:	d008      	beq.n	800c128 <memmove+0x28>
 800c116:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c11a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c11e:	e7f8      	b.n	800c112 <memmove+0x12>
 800c120:	4402      	add	r2, r0
 800c122:	4601      	mov	r1, r0
 800c124:	428a      	cmp	r2, r1
 800c126:	d100      	bne.n	800c12a <memmove+0x2a>
 800c128:	bd10      	pop	{r4, pc}
 800c12a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c12e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c132:	e7f7      	b.n	800c124 <memmove+0x24>

0800c134 <_sbrk_r>:
 800c134:	b538      	push	{r3, r4, r5, lr}
 800c136:	4d06      	ldr	r5, [pc, #24]	; (800c150 <_sbrk_r+0x1c>)
 800c138:	2300      	movs	r3, #0
 800c13a:	4604      	mov	r4, r0
 800c13c:	4608      	mov	r0, r1
 800c13e:	602b      	str	r3, [r5, #0]
 800c140:	f7f7 f850 	bl	80031e4 <_sbrk>
 800c144:	1c43      	adds	r3, r0, #1
 800c146:	d102      	bne.n	800c14e <_sbrk_r+0x1a>
 800c148:	682b      	ldr	r3, [r5, #0]
 800c14a:	b103      	cbz	r3, 800c14e <_sbrk_r+0x1a>
 800c14c:	6023      	str	r3, [r4, #0]
 800c14e:	bd38      	pop	{r3, r4, r5, pc}
 800c150:	24009fd4 	.word	0x24009fd4

0800c154 <memcpy>:
 800c154:	440a      	add	r2, r1
 800c156:	4291      	cmp	r1, r2
 800c158:	f100 33ff 	add.w	r3, r0, #4294967295
 800c15c:	d100      	bne.n	800c160 <memcpy+0xc>
 800c15e:	4770      	bx	lr
 800c160:	b510      	push	{r4, lr}
 800c162:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c166:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c16a:	4291      	cmp	r1, r2
 800c16c:	d1f9      	bne.n	800c162 <memcpy+0xe>
 800c16e:	bd10      	pop	{r4, pc}

0800c170 <_realloc_r>:
 800c170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c174:	4680      	mov	r8, r0
 800c176:	4614      	mov	r4, r2
 800c178:	460e      	mov	r6, r1
 800c17a:	b921      	cbnz	r1, 800c186 <_realloc_r+0x16>
 800c17c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c180:	4611      	mov	r1, r2
 800c182:	f7ff bc49 	b.w	800ba18 <_malloc_r>
 800c186:	b92a      	cbnz	r2, 800c194 <_realloc_r+0x24>
 800c188:	f7ff fbda 	bl	800b940 <_free_r>
 800c18c:	4625      	mov	r5, r4
 800c18e:	4628      	mov	r0, r5
 800c190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c194:	f000 f81b 	bl	800c1ce <_malloc_usable_size_r>
 800c198:	4284      	cmp	r4, r0
 800c19a:	4607      	mov	r7, r0
 800c19c:	d802      	bhi.n	800c1a4 <_realloc_r+0x34>
 800c19e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c1a2:	d812      	bhi.n	800c1ca <_realloc_r+0x5a>
 800c1a4:	4621      	mov	r1, r4
 800c1a6:	4640      	mov	r0, r8
 800c1a8:	f7ff fc36 	bl	800ba18 <_malloc_r>
 800c1ac:	4605      	mov	r5, r0
 800c1ae:	2800      	cmp	r0, #0
 800c1b0:	d0ed      	beq.n	800c18e <_realloc_r+0x1e>
 800c1b2:	42bc      	cmp	r4, r7
 800c1b4:	4622      	mov	r2, r4
 800c1b6:	4631      	mov	r1, r6
 800c1b8:	bf28      	it	cs
 800c1ba:	463a      	movcs	r2, r7
 800c1bc:	f7ff ffca 	bl	800c154 <memcpy>
 800c1c0:	4631      	mov	r1, r6
 800c1c2:	4640      	mov	r0, r8
 800c1c4:	f7ff fbbc 	bl	800b940 <_free_r>
 800c1c8:	e7e1      	b.n	800c18e <_realloc_r+0x1e>
 800c1ca:	4635      	mov	r5, r6
 800c1cc:	e7df      	b.n	800c18e <_realloc_r+0x1e>

0800c1ce <_malloc_usable_size_r>:
 800c1ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1d2:	1f18      	subs	r0, r3, #4
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	bfbc      	itt	lt
 800c1d8:	580b      	ldrlt	r3, [r1, r0]
 800c1da:	18c0      	addlt	r0, r0, r3
 800c1dc:	4770      	bx	lr
	...

0800c1e0 <_init>:
 800c1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1e2:	bf00      	nop
 800c1e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1e6:	bc08      	pop	{r3}
 800c1e8:	469e      	mov	lr, r3
 800c1ea:	4770      	bx	lr

0800c1ec <_fini>:
 800c1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ee:	bf00      	nop
 800c1f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1f2:	bc08      	pop	{r3}
 800c1f4:	469e      	mov	lr, r3
 800c1f6:	4770      	bx	lr
