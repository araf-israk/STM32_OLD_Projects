
Lora_Remote_BOARD_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ea0  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f70  08005038  08005038  00006038  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fa8  08005fa8  00007064  2**0
                  CONTENTS
  4 .ARM          00000008  08005fa8  08005fa8  00006fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fb0  08005fb0  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fb0  08005fb0  00006fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005fb4  08005fb4  00006fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08005fb8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  20000064  0800601c  00007064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  0800601c  00007278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dff2  00000000  00000000  00007094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002346  00000000  00000000  00015086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee0  00000000  00000000  000173d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00002478  00000000  00000000  000182b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000f981  00000000  00000000  0001a728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008f703  00000000  00000000  0002a0a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000b97ac  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000b62  00000000  00000000  000b97ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003edc  00000000  00000000  000ba354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000be230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000064 	.word	0x20000064
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005020 	.word	0x08005020

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000068 	.word	0x20000068
 80001d4:	08005020 	.word	0x08005020

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2iz>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800097c:	d215      	bcs.n	80009aa <__aeabi_d2iz+0x36>
 800097e:	d511      	bpl.n	80009a4 <__aeabi_d2iz+0x30>
 8000980:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d912      	bls.n	80009b0 <__aeabi_d2iz+0x3c>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800099a:	fa23 f002 	lsr.w	r0, r3, r2
 800099e:	bf18      	it	ne
 80009a0:	4240      	negne	r0, r0
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d105      	bne.n	80009bc <__aeabi_d2iz+0x48>
 80009b0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009b4:	bf08      	it	eq
 80009b6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <__aeabi_uldivmod>:
 80009c4:	b953      	cbnz	r3, 80009dc <__aeabi_uldivmod+0x18>
 80009c6:	b94a      	cbnz	r2, 80009dc <__aeabi_uldivmod+0x18>
 80009c8:	2900      	cmp	r1, #0
 80009ca:	bf08      	it	eq
 80009cc:	2800      	cmpeq	r0, #0
 80009ce:	bf1c      	itt	ne
 80009d0:	f04f 31ff 	movne.w	r1, #4294967295
 80009d4:	f04f 30ff 	movne.w	r0, #4294967295
 80009d8:	f000 b96a 	b.w	8000cb0 <__aeabi_idiv0>
 80009dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009e4:	f000 f806 	bl	80009f4 <__udivmoddi4>
 80009e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f0:	b004      	add	sp, #16
 80009f2:	4770      	bx	lr

080009f4 <__udivmoddi4>:
 80009f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f8:	9d08      	ldr	r5, [sp, #32]
 80009fa:	460c      	mov	r4, r1
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d14e      	bne.n	8000a9e <__udivmoddi4+0xaa>
 8000a00:	4694      	mov	ip, r2
 8000a02:	458c      	cmp	ip, r1
 8000a04:	4686      	mov	lr, r0
 8000a06:	fab2 f282 	clz	r2, r2
 8000a0a:	d962      	bls.n	8000ad2 <__udivmoddi4+0xde>
 8000a0c:	b14a      	cbz	r2, 8000a22 <__udivmoddi4+0x2e>
 8000a0e:	f1c2 0320 	rsb	r3, r2, #32
 8000a12:	4091      	lsls	r1, r2
 8000a14:	fa20 f303 	lsr.w	r3, r0, r3
 8000a18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a1c:	4319      	orrs	r1, r3
 8000a1e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a26:	fa1f f68c 	uxth.w	r6, ip
 8000a2a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a32:	fb07 1114 	mls	r1, r7, r4, r1
 8000a36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a3a:	fb04 f106 	mul.w	r1, r4, r6
 8000a3e:	4299      	cmp	r1, r3
 8000a40:	d90a      	bls.n	8000a58 <__udivmoddi4+0x64>
 8000a42:	eb1c 0303 	adds.w	r3, ip, r3
 8000a46:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a4a:	f080 8112 	bcs.w	8000c72 <__udivmoddi4+0x27e>
 8000a4e:	4299      	cmp	r1, r3
 8000a50:	f240 810f 	bls.w	8000c72 <__udivmoddi4+0x27e>
 8000a54:	3c02      	subs	r4, #2
 8000a56:	4463      	add	r3, ip
 8000a58:	1a59      	subs	r1, r3, r1
 8000a5a:	fa1f f38e 	uxth.w	r3, lr
 8000a5e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a62:	fb07 1110 	mls	r1, r7, r0, r1
 8000a66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a6a:	fb00 f606 	mul.w	r6, r0, r6
 8000a6e:	429e      	cmp	r6, r3
 8000a70:	d90a      	bls.n	8000a88 <__udivmoddi4+0x94>
 8000a72:	eb1c 0303 	adds.w	r3, ip, r3
 8000a76:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a7a:	f080 80fc 	bcs.w	8000c76 <__udivmoddi4+0x282>
 8000a7e:	429e      	cmp	r6, r3
 8000a80:	f240 80f9 	bls.w	8000c76 <__udivmoddi4+0x282>
 8000a84:	4463      	add	r3, ip
 8000a86:	3802      	subs	r0, #2
 8000a88:	1b9b      	subs	r3, r3, r6
 8000a8a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a8e:	2100      	movs	r1, #0
 8000a90:	b11d      	cbz	r5, 8000a9a <__udivmoddi4+0xa6>
 8000a92:	40d3      	lsrs	r3, r2
 8000a94:	2200      	movs	r2, #0
 8000a96:	e9c5 3200 	strd	r3, r2, [r5]
 8000a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9e:	428b      	cmp	r3, r1
 8000aa0:	d905      	bls.n	8000aae <__udivmoddi4+0xba>
 8000aa2:	b10d      	cbz	r5, 8000aa8 <__udivmoddi4+0xb4>
 8000aa4:	e9c5 0100 	strd	r0, r1, [r5]
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4608      	mov	r0, r1
 8000aac:	e7f5      	b.n	8000a9a <__udivmoddi4+0xa6>
 8000aae:	fab3 f183 	clz	r1, r3
 8000ab2:	2900      	cmp	r1, #0
 8000ab4:	d146      	bne.n	8000b44 <__udivmoddi4+0x150>
 8000ab6:	42a3      	cmp	r3, r4
 8000ab8:	d302      	bcc.n	8000ac0 <__udivmoddi4+0xcc>
 8000aba:	4290      	cmp	r0, r2
 8000abc:	f0c0 80f0 	bcc.w	8000ca0 <__udivmoddi4+0x2ac>
 8000ac0:	1a86      	subs	r6, r0, r2
 8000ac2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	2d00      	cmp	r5, #0
 8000aca:	d0e6      	beq.n	8000a9a <__udivmoddi4+0xa6>
 8000acc:	e9c5 6300 	strd	r6, r3, [r5]
 8000ad0:	e7e3      	b.n	8000a9a <__udivmoddi4+0xa6>
 8000ad2:	2a00      	cmp	r2, #0
 8000ad4:	f040 8090 	bne.w	8000bf8 <__udivmoddi4+0x204>
 8000ad8:	eba1 040c 	sub.w	r4, r1, ip
 8000adc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae0:	fa1f f78c 	uxth.w	r7, ip
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000aea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aee:	fb08 4416 	mls	r4, r8, r6, r4
 8000af2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000af6:	fb07 f006 	mul.w	r0, r7, r6
 8000afa:	4298      	cmp	r0, r3
 8000afc:	d908      	bls.n	8000b10 <__udivmoddi4+0x11c>
 8000afe:	eb1c 0303 	adds.w	r3, ip, r3
 8000b02:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b06:	d202      	bcs.n	8000b0e <__udivmoddi4+0x11a>
 8000b08:	4298      	cmp	r0, r3
 8000b0a:	f200 80cd 	bhi.w	8000ca8 <__udivmoddi4+0x2b4>
 8000b0e:	4626      	mov	r6, r4
 8000b10:	1a1c      	subs	r4, r3, r0
 8000b12:	fa1f f38e 	uxth.w	r3, lr
 8000b16:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b1a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b1e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b22:	fb00 f707 	mul.w	r7, r0, r7
 8000b26:	429f      	cmp	r7, r3
 8000b28:	d908      	bls.n	8000b3c <__udivmoddi4+0x148>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b32:	d202      	bcs.n	8000b3a <__udivmoddi4+0x146>
 8000b34:	429f      	cmp	r7, r3
 8000b36:	f200 80b0 	bhi.w	8000c9a <__udivmoddi4+0x2a6>
 8000b3a:	4620      	mov	r0, r4
 8000b3c:	1bdb      	subs	r3, r3, r7
 8000b3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b42:	e7a5      	b.n	8000a90 <__udivmoddi4+0x9c>
 8000b44:	f1c1 0620 	rsb	r6, r1, #32
 8000b48:	408b      	lsls	r3, r1
 8000b4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b4e:	431f      	orrs	r7, r3
 8000b50:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b54:	fa04 f301 	lsl.w	r3, r4, r1
 8000b58:	ea43 030c 	orr.w	r3, r3, ip
 8000b5c:	40f4      	lsrs	r4, r6
 8000b5e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b62:	0c38      	lsrs	r0, r7, #16
 8000b64:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b68:	fbb4 fef0 	udiv	lr, r4, r0
 8000b6c:	fa1f fc87 	uxth.w	ip, r7
 8000b70:	fb00 441e 	mls	r4, r0, lr, r4
 8000b74:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b78:	fb0e f90c 	mul.w	r9, lr, ip
 8000b7c:	45a1      	cmp	r9, r4
 8000b7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000b82:	d90a      	bls.n	8000b9a <__udivmoddi4+0x1a6>
 8000b84:	193c      	adds	r4, r7, r4
 8000b86:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b8a:	f080 8084 	bcs.w	8000c96 <__udivmoddi4+0x2a2>
 8000b8e:	45a1      	cmp	r9, r4
 8000b90:	f240 8081 	bls.w	8000c96 <__udivmoddi4+0x2a2>
 8000b94:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b98:	443c      	add	r4, r7
 8000b9a:	eba4 0409 	sub.w	r4, r4, r9
 8000b9e:	fa1f f983 	uxth.w	r9, r3
 8000ba2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ba6:	fb00 4413 	mls	r4, r0, r3, r4
 8000baa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bae:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bb2:	45a4      	cmp	ip, r4
 8000bb4:	d907      	bls.n	8000bc6 <__udivmoddi4+0x1d2>
 8000bb6:	193c      	adds	r4, r7, r4
 8000bb8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bbc:	d267      	bcs.n	8000c8e <__udivmoddi4+0x29a>
 8000bbe:	45a4      	cmp	ip, r4
 8000bc0:	d965      	bls.n	8000c8e <__udivmoddi4+0x29a>
 8000bc2:	3b02      	subs	r3, #2
 8000bc4:	443c      	add	r4, r7
 8000bc6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000bca:	fba0 9302 	umull	r9, r3, r0, r2
 8000bce:	eba4 040c 	sub.w	r4, r4, ip
 8000bd2:	429c      	cmp	r4, r3
 8000bd4:	46ce      	mov	lr, r9
 8000bd6:	469c      	mov	ip, r3
 8000bd8:	d351      	bcc.n	8000c7e <__udivmoddi4+0x28a>
 8000bda:	d04e      	beq.n	8000c7a <__udivmoddi4+0x286>
 8000bdc:	b155      	cbz	r5, 8000bf4 <__udivmoddi4+0x200>
 8000bde:	ebb8 030e 	subs.w	r3, r8, lr
 8000be2:	eb64 040c 	sbc.w	r4, r4, ip
 8000be6:	fa04 f606 	lsl.w	r6, r4, r6
 8000bea:	40cb      	lsrs	r3, r1
 8000bec:	431e      	orrs	r6, r3
 8000bee:	40cc      	lsrs	r4, r1
 8000bf0:	e9c5 6400 	strd	r6, r4, [r5]
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	e750      	b.n	8000a9a <__udivmoddi4+0xa6>
 8000bf8:	f1c2 0320 	rsb	r3, r2, #32
 8000bfc:	fa20 f103 	lsr.w	r1, r0, r3
 8000c00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c04:	fa24 f303 	lsr.w	r3, r4, r3
 8000c08:	4094      	lsls	r4, r2
 8000c0a:	430c      	orrs	r4, r1
 8000c0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c10:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c14:	fa1f f78c 	uxth.w	r7, ip
 8000c18:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c1c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c20:	0c23      	lsrs	r3, r4, #16
 8000c22:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c26:	fb00 f107 	mul.w	r1, r0, r7
 8000c2a:	4299      	cmp	r1, r3
 8000c2c:	d908      	bls.n	8000c40 <__udivmoddi4+0x24c>
 8000c2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c32:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c36:	d22c      	bcs.n	8000c92 <__udivmoddi4+0x29e>
 8000c38:	4299      	cmp	r1, r3
 8000c3a:	d92a      	bls.n	8000c92 <__udivmoddi4+0x29e>
 8000c3c:	3802      	subs	r0, #2
 8000c3e:	4463      	add	r3, ip
 8000c40:	1a5b      	subs	r3, r3, r1
 8000c42:	b2a4      	uxth	r4, r4
 8000c44:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c48:	fb08 3311 	mls	r3, r8, r1, r3
 8000c4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c50:	fb01 f307 	mul.w	r3, r1, r7
 8000c54:	42a3      	cmp	r3, r4
 8000c56:	d908      	bls.n	8000c6a <__udivmoddi4+0x276>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c60:	d213      	bcs.n	8000c8a <__udivmoddi4+0x296>
 8000c62:	42a3      	cmp	r3, r4
 8000c64:	d911      	bls.n	8000c8a <__udivmoddi4+0x296>
 8000c66:	3902      	subs	r1, #2
 8000c68:	4464      	add	r4, ip
 8000c6a:	1ae4      	subs	r4, r4, r3
 8000c6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c70:	e739      	b.n	8000ae6 <__udivmoddi4+0xf2>
 8000c72:	4604      	mov	r4, r0
 8000c74:	e6f0      	b.n	8000a58 <__udivmoddi4+0x64>
 8000c76:	4608      	mov	r0, r1
 8000c78:	e706      	b.n	8000a88 <__udivmoddi4+0x94>
 8000c7a:	45c8      	cmp	r8, r9
 8000c7c:	d2ae      	bcs.n	8000bdc <__udivmoddi4+0x1e8>
 8000c7e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c82:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c86:	3801      	subs	r0, #1
 8000c88:	e7a8      	b.n	8000bdc <__udivmoddi4+0x1e8>
 8000c8a:	4631      	mov	r1, r6
 8000c8c:	e7ed      	b.n	8000c6a <__udivmoddi4+0x276>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	e799      	b.n	8000bc6 <__udivmoddi4+0x1d2>
 8000c92:	4630      	mov	r0, r6
 8000c94:	e7d4      	b.n	8000c40 <__udivmoddi4+0x24c>
 8000c96:	46d6      	mov	lr, sl
 8000c98:	e77f      	b.n	8000b9a <__udivmoddi4+0x1a6>
 8000c9a:	4463      	add	r3, ip
 8000c9c:	3802      	subs	r0, #2
 8000c9e:	e74d      	b.n	8000b3c <__udivmoddi4+0x148>
 8000ca0:	4606      	mov	r6, r0
 8000ca2:	4623      	mov	r3, r4
 8000ca4:	4608      	mov	r0, r1
 8000ca6:	e70f      	b.n	8000ac8 <__udivmoddi4+0xd4>
 8000ca8:	3e02      	subs	r6, #2
 8000caa:	4463      	add	r3, ip
 8000cac:	e730      	b.n	8000b10 <__udivmoddi4+0x11c>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_idiv0>:
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop

08000cb4 <ili9486_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9486_DisplayOn(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_SLPOUT);    // Exit Sleep
 8000cb8:	2011      	movs	r0, #17
 8000cba:	f000 fcfb 	bl	80016b4 <LCD_IO_WriteCmd8>
  ILI9486_LCDMUTEX_POP();
  LCD_IO_Bl_OnOff(1);
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	f000 fc3a 	bl	8001538 <LCD_IO_Bl_OnOff>
}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <ili9486_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9486_DisplayOff(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  LCD_IO_Bl_OnOff(0);
 8000ccc:	2000      	movs	r0, #0
 8000cce:	f000 fc33 	bl	8001538 <LCD_IO_Bl_OnOff>
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_SLPIN);    // Sleep
 8000cd2:	2010      	movs	r0, #16
 8000cd4:	f000 fcee 	bl	80016b4 <LCD_IO_WriteCmd8>
  ILI9486_LCDMUTEX_POP();
}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <ili9486_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9486_GetLcdPixelWidth(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  return ILI9486_SIZE_X;
 8000ce0:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <ili9486_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9486_GetLcdPixelHeight(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  return ILI9486_SIZE_Y;
 8000cf2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <ili9486_ReadID>:
  * @brief  Get the ILI9486 ID.
  * @param  None
  * @retval The ILI9486 ID
  */
uint16_t ili9486_ReadID(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
  uint32_t id = 0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	607b      	str	r3, [r7, #4]
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_ReadCmd8MultipleData8(0xD3, (uint8_t *)&id, 3, 1);
 8000d0a:	1d39      	adds	r1, r7, #4
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	2203      	movs	r2, #3
 8000d10:	20d3      	movs	r0, #211	@ 0xd3
 8000d12:	f000 fe83 	bl	8001a1c <LCD_IO_ReadCmd8MultipleData8>
  ILI9486_LCDMUTEX_POP();
  if(id == 0x869400)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a05      	ldr	r2, [pc, #20]	@ (8000d30 <ili9486_ReadID+0x30>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d102      	bne.n	8000d24 <ili9486_ReadID+0x24>
    return 0x9486;
 8000d1e:	f249 4386 	movw	r3, #38022	@ 0x9486
 8000d22:	e000      	b.n	8000d26 <ili9486_ReadID+0x26>
  else
    return 0;
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	00869400 	.word	0x00869400

08000d34 <ili9486_Init>:
  * @brief  ILI9486 initialization
  * @param  None
  * @retval None
  */
void ili9486_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  if((Is_ili9486_Initialized & ILI9486_LCD_INITIALIZED) == 0)
 8000d38:	4b33      	ldr	r3, [pc, #204]	@ (8000e08 <ili9486_Init+0xd4>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d115      	bne.n	8000d70 <ili9486_Init+0x3c>
  {
    Is_ili9486_Initialized |= ILI9486_LCD_INITIALIZED;
 8000d44:	4b30      	ldr	r3, [pc, #192]	@ (8000e08 <ili9486_Init+0xd4>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	4b2e      	ldr	r3, [pc, #184]	@ (8000e08 <ili9486_Init+0xd4>)
 8000d50:	701a      	strb	r2, [r3, #0]
    if((Is_ili9486_Initialized & ILI9486_IO_INITIALIZED) == 0)
 8000d52:	4b2d      	ldr	r3, [pc, #180]	@ (8000e08 <ili9486_Init+0xd4>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d101      	bne.n	8000d62 <ili9486_Init+0x2e>
      LCD_IO_Init();
 8000d5e:	f000 fbf7 	bl	8001550 <LCD_IO_Init>
    Is_ili9486_Initialized |= ILI9486_IO_INITIALIZED;
 8000d62:	4b29      	ldr	r3, [pc, #164]	@ (8000e08 <ili9486_Init+0xd4>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	f043 0302 	orr.w	r3, r3, #2
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	4b26      	ldr	r3, [pc, #152]	@ (8000e08 <ili9486_Init+0xd4>)
 8000d6e:	701a      	strb	r2, [r3, #0]
  }
  LCD_Delay(10);
 8000d70:	200a      	movs	r0, #10
 8000d72:	f000 fbd6 	bl	8001522 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9486_SWRESET);
 8000d76:	2001      	movs	r0, #1
 8000d78:	f000 fc9c 	bl	80016b4 <LCD_IO_WriteCmd8>
  LCD_Delay(100);
 8000d7c:	2064      	movs	r0, #100	@ 0x64
 8000d7e:	f000 fbd0 	bl	8001522 <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(ILI9486_RGB_INTERFACE, (uint8_t *)"\x00", 1); // RGB mode off (0xB0)
 8000d82:	2201      	movs	r2, #1
 8000d84:	4921      	ldr	r1, [pc, #132]	@ (8000e0c <ili9486_Init+0xd8>)
 8000d86:	20b0      	movs	r0, #176	@ 0xb0
 8000d88:	f000 fd92 	bl	80018b0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8(ILI9486_SLPOUT);    // Exit Sleep (0x11)
 8000d8c:	2011      	movs	r0, #17
 8000d8e:	f000 fc91 	bl	80016b4 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8000d92:	200a      	movs	r0, #10
 8000d94:	f000 fbc5 	bl	8001522 <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(ILI9486_PIXFMT, (uint8_t *)"\x55", 1); // interface format (0x3A)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	491d      	ldr	r1, [pc, #116]	@ (8000e10 <ili9486_Init+0xdc>)
 8000d9c:	203a      	movs	r0, #58	@ 0x3a
 8000d9e:	f000 fd87 	bl	80018b0 <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9486_MADCTL); LCD_IO_WriteData8(ILI9486_MAD_DATA_RIGHT_THEN_DOWN);
 8000da2:	2036      	movs	r0, #54	@ 0x36
 8000da4:	f000 fc86 	bl	80016b4 <LCD_IO_WriteCmd8>
 8000da8:	2028      	movs	r0, #40	@ 0x28
 8000daa:	f000 fcb5 	bl	8001718 <LCD_IO_WriteData8>

  LCD_IO_WriteCmd8MultipleData8(ILI9486_PWCTR3, (uint8_t *)"\x44", 1); // 0xC2
 8000dae:	2201      	movs	r2, #1
 8000db0:	4918      	ldr	r1, [pc, #96]	@ (8000e14 <ili9486_Init+0xe0>)
 8000db2:	20c2      	movs	r0, #194	@ 0xc2
 8000db4:	f000 fd7c 	bl	80018b0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9486_VMCTR1, (uint8_t *)"\x00\x00\x00\x00", 4); // 0xC5
 8000db8:	2204      	movs	r2, #4
 8000dba:	4917      	ldr	r1, [pc, #92]	@ (8000e18 <ili9486_Init+0xe4>)
 8000dbc:	20c5      	movs	r0, #197	@ 0xc5
 8000dbe:	f000 fd77 	bl	80018b0 <LCD_IO_WriteCmd8MultipleData8>

  // positive gamma control (0xE0)
  LCD_IO_WriteCmd8MultipleData8(ILI9486_GMCTRP1, (uint8_t *)"\x0F\x1F\x1C\x0C\x0F\x08\x48\x98\x37\x0A\x13\x04\x11\x0D\x00", 15);
 8000dc2:	220f      	movs	r2, #15
 8000dc4:	4915      	ldr	r1, [pc, #84]	@ (8000e1c <ili9486_Init+0xe8>)
 8000dc6:	20e0      	movs	r0, #224	@ 0xe0
 8000dc8:	f000 fd72 	bl	80018b0 <LCD_IO_WriteCmd8MultipleData8>

  // negative gamma control (0xE1)
  LCD_IO_WriteCmd8MultipleData8(ILI9486_GMCTRN1, (uint8_t *)"\x0F\x32\x2E\x0B\x0D\x05\x47\x75\x37\x06\x10\x03\x24\x20\x00", 15);
 8000dcc:	220f      	movs	r2, #15
 8000dce:	4914      	ldr	r1, [pc, #80]	@ (8000e20 <ili9486_Init+0xec>)
 8000dd0:	20e1      	movs	r0, #225	@ 0xe1
 8000dd2:	f000 fd6d 	bl	80018b0 <LCD_IO_WriteCmd8MultipleData8>

  // Digital gamma control1 (0xE2)
  LCD_IO_WriteCmd8MultipleData8(ILI9486_DGCTR1, (uint8_t *)"\x0F\x32\x2E\x0B\x0D\x05\x47\x75\x37\x06\x10\x03\x24\x20\x00", 15);
 8000dd6:	220f      	movs	r2, #15
 8000dd8:	4911      	ldr	r1, [pc, #68]	@ (8000e20 <ili9486_Init+0xec>)
 8000dda:	20e2      	movs	r0, #226	@ 0xe2
 8000ddc:	f000 fd68 	bl	80018b0 <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9486_NORON);     // Normal display on (0x13)
 8000de0:	2013      	movs	r0, #19
 8000de2:	f000 fc67 	bl	80016b4 <LCD_IO_WriteCmd8>
  LCD_IO_WriteCmd8(ILI9486_INVOFF);    // Display inversion off (0x20)
 8000de6:	2020      	movs	r0, #32
 8000de8:	f000 fc64 	bl	80016b4 <LCD_IO_WriteCmd8>
  LCD_IO_WriteCmd8(ILI9486_SLPOUT);    // Exit Sleep (0x11)
 8000dec:	2011      	movs	r0, #17
 8000dee:	f000 fc61 	bl	80016b4 <LCD_IO_WriteCmd8>
  LCD_Delay(200);
 8000df2:	20c8      	movs	r0, #200	@ 0xc8
 8000df4:	f000 fb95 	bl	8001522 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9486_DISPON);    // Display on (0x29)
 8000df8:	2029      	movs	r0, #41	@ 0x29
 8000dfa:	f000 fc5b 	bl	80016b4 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8000dfe:	200a      	movs	r0, #10
 8000e00:	f000 fb8f 	bl	8001522 <LCD_Delay>
}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000080 	.word	0x20000080
 8000e0c:	08005038 	.word	0x08005038
 8000e10:	0800503c 	.word	0x0800503c
 8000e14:	08005040 	.word	0x08005040
 8000e18:	08005044 	.word	0x08005044
 8000e1c:	0800504c 	.word	0x0800504c
 8000e20:	0800505c 	.word	0x0800505c

08000e24 <ili9486_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9486_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	460a      	mov	r2, r1
 8000e2e:	80fb      	strh	r3, [r7, #6]
 8000e30:	4613      	mov	r3, r2
 8000e32:	80bb      	strh	r3, [r7, #4]
  ILI9486_LCDMUTEX_PUSH();
  ILI9486_SETCURSOR(Xpos, Ypos);
 8000e34:	202a      	movs	r0, #42	@ 0x2a
 8000e36:	f000 fc3d 	bl	80016b4 <LCD_IO_WriteCmd8>
 8000e3a:	88fb      	ldrh	r3, [r7, #6]
 8000e3c:	0a1b      	lsrs	r3, r3, #8
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 fc68 	bl	8001718 <LCD_IO_WriteData8>
 8000e48:	88fb      	ldrh	r3, [r7, #6]
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f000 fc63 	bl	8001718 <LCD_IO_WriteData8>
 8000e52:	88fb      	ldrh	r3, [r7, #6]
 8000e54:	0a1b      	lsrs	r3, r3, #8
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 fc5c 	bl	8001718 <LCD_IO_WriteData8>
 8000e60:	88fb      	ldrh	r3, [r7, #6]
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	4618      	mov	r0, r3
 8000e66:	f000 fc57 	bl	8001718 <LCD_IO_WriteData8>
 8000e6a:	202b      	movs	r0, #43	@ 0x2b
 8000e6c:	f000 fc22 	bl	80016b4 <LCD_IO_WriteCmd8>
 8000e70:	88bb      	ldrh	r3, [r7, #4]
 8000e72:	0a1b      	lsrs	r3, r3, #8
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f000 fc4d 	bl	8001718 <LCD_IO_WriteData8>
 8000e7e:	88bb      	ldrh	r3, [r7, #4]
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 fc48 	bl	8001718 <LCD_IO_WriteData8>
 8000e88:	88bb      	ldrh	r3, [r7, #4]
 8000e8a:	0a1b      	lsrs	r3, r3, #8
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	4618      	mov	r0, r3
 8000e92:	f000 fc41 	bl	8001718 <LCD_IO_WriteData8>
 8000e96:	88bb      	ldrh	r3, [r7, #4]
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 fc3c 	bl	8001718 <LCD_IO_WriteData8>
  ILI9486_LCDMUTEX_POP();
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <ili9486_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9486_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	80fb      	strh	r3, [r7, #6]
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	80bb      	strh	r3, [r7, #4]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	807b      	strh	r3, [r7, #2]
  ILI9486_LCDMUTEX_PUSH();
  ILI9486_SETCURSOR(Xpos, Ypos);
 8000eba:	202a      	movs	r0, #42	@ 0x2a
 8000ebc:	f000 fbfa 	bl	80016b4 <LCD_IO_WriteCmd8>
 8000ec0:	88fb      	ldrh	r3, [r7, #6]
 8000ec2:	0a1b      	lsrs	r3, r3, #8
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f000 fc25 	bl	8001718 <LCD_IO_WriteData8>
 8000ece:	88fb      	ldrh	r3, [r7, #6]
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 fc20 	bl	8001718 <LCD_IO_WriteData8>
 8000ed8:	88fb      	ldrh	r3, [r7, #6]
 8000eda:	0a1b      	lsrs	r3, r3, #8
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f000 fc19 	bl	8001718 <LCD_IO_WriteData8>
 8000ee6:	88fb      	ldrh	r3, [r7, #6]
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 fc14 	bl	8001718 <LCD_IO_WriteData8>
 8000ef0:	202b      	movs	r0, #43	@ 0x2b
 8000ef2:	f000 fbdf 	bl	80016b4 <LCD_IO_WriteCmd8>
 8000ef6:	88bb      	ldrh	r3, [r7, #4]
 8000ef8:	0a1b      	lsrs	r3, r3, #8
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 fc0a 	bl	8001718 <LCD_IO_WriteData8>
 8000f04:	88bb      	ldrh	r3, [r7, #4]
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f000 fc05 	bl	8001718 <LCD_IO_WriteData8>
 8000f0e:	88bb      	ldrh	r3, [r7, #4]
 8000f10:	0a1b      	lsrs	r3, r3, #8
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 fbfe 	bl	8001718 <LCD_IO_WriteData8>
 8000f1c:	88bb      	ldrh	r3, [r7, #4]
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	4618      	mov	r0, r3
 8000f22:	f000 fbf9 	bl	8001718 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_RAMWR); LCD_IO_WriteData16(RGBCode);
 8000f26:	202c      	movs	r0, #44	@ 0x2c
 8000f28:	f000 fbc4 	bl	80016b4 <LCD_IO_WriteCmd8>
 8000f2c:	887b      	ldrh	r3, [r7, #2]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 fc1c 	bl	800176c <LCD_IO_WriteData16>
  ILI9486_LCDMUTEX_POP();
}
 8000f34:	bf00      	nop
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <ili9486_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval the RGB pixel color
  */
uint16_t ili9486_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	460a      	mov	r2, r1
 8000f46:	80fb      	strh	r3, [r7, #6]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	80bb      	strh	r3, [r7, #4]
  uint16_t ret;
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData8(ILI9486_PIXFMT, (uint8_t *)"\x66", 1); // Read: only 24bit pixel mode
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4925      	ldr	r1, [pc, #148]	@ (8000fe4 <ili9486_ReadPixel+0xa8>)
 8000f50:	203a      	movs	r0, #58	@ 0x3a
 8000f52:	f000 fcad 	bl	80018b0 <LCD_IO_WriteCmd8MultipleData8>
  ILI9486_SETCURSOR(Xpos, Ypos);
 8000f56:	202a      	movs	r0, #42	@ 0x2a
 8000f58:	f000 fbac 	bl	80016b4 <LCD_IO_WriteCmd8>
 8000f5c:	88fb      	ldrh	r3, [r7, #6]
 8000f5e:	0a1b      	lsrs	r3, r3, #8
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	4618      	mov	r0, r3
 8000f66:	f000 fbd7 	bl	8001718 <LCD_IO_WriteData8>
 8000f6a:	88fb      	ldrh	r3, [r7, #6]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 fbd2 	bl	8001718 <LCD_IO_WriteData8>
 8000f74:	88fb      	ldrh	r3, [r7, #6]
 8000f76:	0a1b      	lsrs	r3, r3, #8
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 fbcb 	bl	8001718 <LCD_IO_WriteData8>
 8000f82:	88fb      	ldrh	r3, [r7, #6]
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 fbc6 	bl	8001718 <LCD_IO_WriteData8>
 8000f8c:	202b      	movs	r0, #43	@ 0x2b
 8000f8e:	f000 fb91 	bl	80016b4 <LCD_IO_WriteCmd8>
 8000f92:	88bb      	ldrh	r3, [r7, #4]
 8000f94:	0a1b      	lsrs	r3, r3, #8
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 fbbc 	bl	8001718 <LCD_IO_WriteData8>
 8000fa0:	88bb      	ldrh	r3, [r7, #4]
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f000 fbb7 	bl	8001718 <LCD_IO_WriteData8>
 8000faa:	88bb      	ldrh	r3, [r7, #4]
 8000fac:	0a1b      	lsrs	r3, r3, #8
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 fbb0 	bl	8001718 <LCD_IO_WriteData8>
 8000fb8:	88bb      	ldrh	r3, [r7, #4]
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 fbab 	bl	8001718 <LCD_IO_WriteData8>
  LCD_IO_ReadCmd8MultipleData24to16(ILI9486_RAMRD, (uint16_t *)&ret, 1, 1);
 8000fc2:	f107 010e 	add.w	r1, r7, #14
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	2201      	movs	r2, #1
 8000fca:	202e      	movs	r0, #46	@ 0x2e
 8000fcc:	f000 fd94 	bl	8001af8 <LCD_IO_ReadCmd8MultipleData24to16>
  LCD_IO_WriteCmd8MultipleData8(ILI9486_PIXFMT, (uint8_t *)"\x55", 1); // Return to 16bit pixel mode
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	4905      	ldr	r1, [pc, #20]	@ (8000fe8 <ili9486_ReadPixel+0xac>)
 8000fd4:	203a      	movs	r0, #58	@ 0x3a
 8000fd6:	f000 fc6b 	bl	80018b0 <LCD_IO_WriteCmd8MultipleData8>
  ILI9486_LCDMUTEX_POP();
  return(ret);
 8000fda:	89fb      	ldrh	r3, [r7, #14]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	0800506c 	.word	0x0800506c
 8000fe8:	0800503c 	.word	0x0800503c

08000fec <ili9486_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9486_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8000fec:	b590      	push	{r4, r7, lr}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4623      	mov	r3, r4
 8000ffc:	80fb      	strh	r3, [r7, #6]
 8000ffe:	4603      	mov	r3, r0
 8001000:	80bb      	strh	r3, [r7, #4]
 8001002:	460b      	mov	r3, r1
 8001004:	807b      	strh	r3, [r7, #2]
 8001006:	4613      	mov	r3, r2
 8001008:	803b      	strh	r3, [r7, #0]
  yStart = Ypos; yEnd = Ypos + Height - 1;
 800100a:	4a2a      	ldr	r2, [pc, #168]	@ (80010b4 <ili9486_SetDisplayWindow+0xc8>)
 800100c:	88bb      	ldrh	r3, [r7, #4]
 800100e:	8013      	strh	r3, [r2, #0]
 8001010:	88ba      	ldrh	r2, [r7, #4]
 8001012:	883b      	ldrh	r3, [r7, #0]
 8001014:	4413      	add	r3, r2
 8001016:	b29b      	uxth	r3, r3
 8001018:	3b01      	subs	r3, #1
 800101a:	b29a      	uxth	r2, r3
 800101c:	4b26      	ldr	r3, [pc, #152]	@ (80010b8 <ili9486_SetDisplayWindow+0xcc>)
 800101e:	801a      	strh	r2, [r3, #0]
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Width - 1);
 8001020:	202a      	movs	r0, #42	@ 0x2a
 8001022:	f000 fb47 	bl	80016b4 <LCD_IO_WriteCmd8>
 8001026:	88fb      	ldrh	r3, [r7, #6]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	b29b      	uxth	r3, r3
 800102c:	b2db      	uxtb	r3, r3
 800102e:	4618      	mov	r0, r3
 8001030:	f000 fb72 	bl	8001718 <LCD_IO_WriteData8>
 8001034:	88fb      	ldrh	r3, [r7, #6]
 8001036:	b2db      	uxtb	r3, r3
 8001038:	4618      	mov	r0, r3
 800103a:	f000 fb6d 	bl	8001718 <LCD_IO_WriteData8>
 800103e:	88fa      	ldrh	r2, [r7, #6]
 8001040:	887b      	ldrh	r3, [r7, #2]
 8001042:	4413      	add	r3, r2
 8001044:	3b01      	subs	r3, #1
 8001046:	121b      	asrs	r3, r3, #8
 8001048:	b2db      	uxtb	r3, r3
 800104a:	4618      	mov	r0, r3
 800104c:	f000 fb64 	bl	8001718 <LCD_IO_WriteData8>
 8001050:	88fb      	ldrh	r3, [r7, #6]
 8001052:	b2da      	uxtb	r2, r3
 8001054:	887b      	ldrh	r3, [r7, #2]
 8001056:	b2db      	uxtb	r3, r3
 8001058:	4413      	add	r3, r2
 800105a:	b2db      	uxtb	r3, r3
 800105c:	3b01      	subs	r3, #1
 800105e:	b2db      	uxtb	r3, r3
 8001060:	4618      	mov	r0, r3
 8001062:	f000 fb59 	bl	8001718 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
 8001066:	202b      	movs	r0, #43	@ 0x2b
 8001068:	f000 fb24 	bl	80016b4 <LCD_IO_WriteCmd8>
 800106c:	88bb      	ldrh	r3, [r7, #4]
 800106e:	0a1b      	lsrs	r3, r3, #8
 8001070:	b29b      	uxth	r3, r3
 8001072:	b2db      	uxtb	r3, r3
 8001074:	4618      	mov	r0, r3
 8001076:	f000 fb4f 	bl	8001718 <LCD_IO_WriteData8>
 800107a:	88bb      	ldrh	r3, [r7, #4]
 800107c:	b2db      	uxtb	r3, r3
 800107e:	4618      	mov	r0, r3
 8001080:	f000 fb4a 	bl	8001718 <LCD_IO_WriteData8>
 8001084:	88ba      	ldrh	r2, [r7, #4]
 8001086:	883b      	ldrh	r3, [r7, #0]
 8001088:	4413      	add	r3, r2
 800108a:	3b01      	subs	r3, #1
 800108c:	121b      	asrs	r3, r3, #8
 800108e:	b2db      	uxtb	r3, r3
 8001090:	4618      	mov	r0, r3
 8001092:	f000 fb41 	bl	8001718 <LCD_IO_WriteData8>
 8001096:	88bb      	ldrh	r3, [r7, #4]
 8001098:	b2da      	uxtb	r2, r3
 800109a:	883b      	ldrh	r3, [r7, #0]
 800109c:	b2db      	uxtb	r3, r3
 800109e:	4413      	add	r3, r2
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	3b01      	subs	r3, #1
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 fb36 	bl	8001718 <LCD_IO_WriteData8>
  ILI9486_LCDMUTEX_POP();
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd90      	pop	{r4, r7, pc}
 80010b4:	20000082 	.word	0x20000082
 80010b8:	20000084 	.word	0x20000084

080010bc <ili9486_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9486_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80010bc:	b590      	push	{r4, r7, lr}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4604      	mov	r4, r0
 80010c4:	4608      	mov	r0, r1
 80010c6:	4611      	mov	r1, r2
 80010c8:	461a      	mov	r2, r3
 80010ca:	4623      	mov	r3, r4
 80010cc:	80fb      	strh	r3, [r7, #6]
 80010ce:	4603      	mov	r3, r0
 80010d0:	80bb      	strh	r3, [r7, #4]
 80010d2:	460b      	mov	r3, r1
 80010d4:	807b      	strh	r3, [r7, #2]
 80010d6:	4613      	mov	r3, r2
 80010d8:	803b      	strh	r3, [r7, #0]
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Length - 1);
 80010da:	202a      	movs	r0, #42	@ 0x2a
 80010dc:	f000 faea 	bl	80016b4 <LCD_IO_WriteCmd8>
 80010e0:	88bb      	ldrh	r3, [r7, #4]
 80010e2:	0a1b      	lsrs	r3, r3, #8
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	4618      	mov	r0, r3
 80010ea:	f000 fb15 	bl	8001718 <LCD_IO_WriteData8>
 80010ee:	88bb      	ldrh	r3, [r7, #4]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 fb10 	bl	8001718 <LCD_IO_WriteData8>
 80010f8:	88ba      	ldrh	r2, [r7, #4]
 80010fa:	883b      	ldrh	r3, [r7, #0]
 80010fc:	4413      	add	r3, r2
 80010fe:	3b01      	subs	r3, #1
 8001100:	121b      	asrs	r3, r3, #8
 8001102:	b2db      	uxtb	r3, r3
 8001104:	4618      	mov	r0, r3
 8001106:	f000 fb07 	bl	8001718 <LCD_IO_WriteData8>
 800110a:	88bb      	ldrh	r3, [r7, #4]
 800110c:	b2da      	uxtb	r2, r3
 800110e:	883b      	ldrh	r3, [r7, #0]
 8001110:	b2db      	uxtb	r3, r3
 8001112:	4413      	add	r3, r2
 8001114:	b2db      	uxtb	r3, r3
 8001116:	3b01      	subs	r3, #1
 8001118:	b2db      	uxtb	r3, r3
 800111a:	4618      	mov	r0, r3
 800111c:	f000 fafc 	bl	8001718 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos);
 8001120:	202b      	movs	r0, #43	@ 0x2b
 8001122:	f000 fac7 	bl	80016b4 <LCD_IO_WriteCmd8>
 8001126:	887b      	ldrh	r3, [r7, #2]
 8001128:	0a1b      	lsrs	r3, r3, #8
 800112a:	b29b      	uxth	r3, r3
 800112c:	b2db      	uxtb	r3, r3
 800112e:	4618      	mov	r0, r3
 8001130:	f000 faf2 	bl	8001718 <LCD_IO_WriteData8>
 8001134:	887b      	ldrh	r3, [r7, #2]
 8001136:	b2db      	uxtb	r3, r3
 8001138:	4618      	mov	r0, r3
 800113a:	f000 faed 	bl	8001718 <LCD_IO_WriteData8>
 800113e:	887b      	ldrh	r3, [r7, #2]
 8001140:	0a1b      	lsrs	r3, r3, #8
 8001142:	b29b      	uxth	r3, r3
 8001144:	b2db      	uxtb	r3, r3
 8001146:	4618      	mov	r0, r3
 8001148:	f000 fae6 	bl	8001718 <LCD_IO_WriteData8>
 800114c:	887b      	ldrh	r3, [r7, #2]
 800114e:	b2db      	uxtb	r3, r3
 8001150:	4618      	mov	r0, r3
 8001152:	f000 fae1 	bl	8001718 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9486_RAMWR, RGBCode, Length);
 8001156:	883a      	ldrh	r2, [r7, #0]
 8001158:	88fb      	ldrh	r3, [r7, #6]
 800115a:	4619      	mov	r1, r3
 800115c:	202c      	movs	r0, #44	@ 0x2c
 800115e:	f000 fb45 	bl	80017ec <LCD_IO_WriteCmd8DataFill16>
  ILI9486_LCDMUTEX_POP();
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	bd90      	pop	{r4, r7, pc}

0800116a <ili9486_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9486_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800116a:	b590      	push	{r4, r7, lr}
 800116c:	b083      	sub	sp, #12
 800116e:	af00      	add	r7, sp, #0
 8001170:	4604      	mov	r4, r0
 8001172:	4608      	mov	r0, r1
 8001174:	4611      	mov	r1, r2
 8001176:	461a      	mov	r2, r3
 8001178:	4623      	mov	r3, r4
 800117a:	80fb      	strh	r3, [r7, #6]
 800117c:	4603      	mov	r3, r0
 800117e:	80bb      	strh	r3, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	807b      	strh	r3, [r7, #2]
 8001184:	4613      	mov	r3, r2
 8001186:	803b      	strh	r3, [r7, #0]
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos);
 8001188:	202a      	movs	r0, #42	@ 0x2a
 800118a:	f000 fa93 	bl	80016b4 <LCD_IO_WriteCmd8>
 800118e:	88bb      	ldrh	r3, [r7, #4]
 8001190:	0a1b      	lsrs	r3, r3, #8
 8001192:	b29b      	uxth	r3, r3
 8001194:	b2db      	uxtb	r3, r3
 8001196:	4618      	mov	r0, r3
 8001198:	f000 fabe 	bl	8001718 <LCD_IO_WriteData8>
 800119c:	88bb      	ldrh	r3, [r7, #4]
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	4618      	mov	r0, r3
 80011a2:	f000 fab9 	bl	8001718 <LCD_IO_WriteData8>
 80011a6:	88bb      	ldrh	r3, [r7, #4]
 80011a8:	0a1b      	lsrs	r3, r3, #8
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	4618      	mov	r0, r3
 80011b0:	f000 fab2 	bl	8001718 <LCD_IO_WriteData8>
 80011b4:	88bb      	ldrh	r3, [r7, #4]
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 faad 	bl	8001718 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Length - 1);
 80011be:	202b      	movs	r0, #43	@ 0x2b
 80011c0:	f000 fa78 	bl	80016b4 <LCD_IO_WriteCmd8>
 80011c4:	887b      	ldrh	r3, [r7, #2]
 80011c6:	0a1b      	lsrs	r3, r3, #8
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 faa3 	bl	8001718 <LCD_IO_WriteData8>
 80011d2:	887b      	ldrh	r3, [r7, #2]
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 fa9e 	bl	8001718 <LCD_IO_WriteData8>
 80011dc:	887a      	ldrh	r2, [r7, #2]
 80011de:	883b      	ldrh	r3, [r7, #0]
 80011e0:	4413      	add	r3, r2
 80011e2:	3b01      	subs	r3, #1
 80011e4:	121b      	asrs	r3, r3, #8
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 fa95 	bl	8001718 <LCD_IO_WriteData8>
 80011ee:	887b      	ldrh	r3, [r7, #2]
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	883b      	ldrh	r3, [r7, #0]
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	4413      	add	r3, r2
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	3b01      	subs	r3, #1
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 fa8a 	bl	8001718 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9486_RAMWR, RGBCode, Length);
 8001204:	883a      	ldrh	r2, [r7, #0]
 8001206:	88fb      	ldrh	r3, [r7, #6]
 8001208:	4619      	mov	r1, r3
 800120a:	202c      	movs	r0, #44	@ 0x2c
 800120c:	f000 faee 	bl	80017ec <LCD_IO_WriteCmd8DataFill16>
  ILI9486_LCDMUTEX_POP();
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	bd90      	pop	{r4, r7, pc}

08001218 <ili9486_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9486_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4604      	mov	r4, r0
 8001220:	4608      	mov	r0, r1
 8001222:	4611      	mov	r1, r2
 8001224:	461a      	mov	r2, r3
 8001226:	4623      	mov	r3, r4
 8001228:	80fb      	strh	r3, [r7, #6]
 800122a:	4603      	mov	r3, r0
 800122c:	80bb      	strh	r3, [r7, #4]
 800122e:	460b      	mov	r3, r1
 8001230:	807b      	strh	r3, [r7, #2]
 8001232:	4613      	mov	r3, r2
 8001234:	803b      	strh	r3, [r7, #0]
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Xsize - 1);
 8001236:	202a      	movs	r0, #42	@ 0x2a
 8001238:	f000 fa3c 	bl	80016b4 <LCD_IO_WriteCmd8>
 800123c:	88fb      	ldrh	r3, [r7, #6]
 800123e:	0a1b      	lsrs	r3, r3, #8
 8001240:	b29b      	uxth	r3, r3
 8001242:	b2db      	uxtb	r3, r3
 8001244:	4618      	mov	r0, r3
 8001246:	f000 fa67 	bl	8001718 <LCD_IO_WriteData8>
 800124a:	88fb      	ldrh	r3, [r7, #6]
 800124c:	b2db      	uxtb	r3, r3
 800124e:	4618      	mov	r0, r3
 8001250:	f000 fa62 	bl	8001718 <LCD_IO_WriteData8>
 8001254:	88fa      	ldrh	r2, [r7, #6]
 8001256:	887b      	ldrh	r3, [r7, #2]
 8001258:	4413      	add	r3, r2
 800125a:	3b01      	subs	r3, #1
 800125c:	121b      	asrs	r3, r3, #8
 800125e:	b2db      	uxtb	r3, r3
 8001260:	4618      	mov	r0, r3
 8001262:	f000 fa59 	bl	8001718 <LCD_IO_WriteData8>
 8001266:	88fb      	ldrh	r3, [r7, #6]
 8001268:	b2da      	uxtb	r2, r3
 800126a:	887b      	ldrh	r3, [r7, #2]
 800126c:	b2db      	uxtb	r3, r3
 800126e:	4413      	add	r3, r2
 8001270:	b2db      	uxtb	r3, r3
 8001272:	3b01      	subs	r3, #1
 8001274:	b2db      	uxtb	r3, r3
 8001276:	4618      	mov	r0, r3
 8001278:	f000 fa4e 	bl	8001718 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Ysize - 1);
 800127c:	202b      	movs	r0, #43	@ 0x2b
 800127e:	f000 fa19 	bl	80016b4 <LCD_IO_WriteCmd8>
 8001282:	88bb      	ldrh	r3, [r7, #4]
 8001284:	0a1b      	lsrs	r3, r3, #8
 8001286:	b29b      	uxth	r3, r3
 8001288:	b2db      	uxtb	r3, r3
 800128a:	4618      	mov	r0, r3
 800128c:	f000 fa44 	bl	8001718 <LCD_IO_WriteData8>
 8001290:	88bb      	ldrh	r3, [r7, #4]
 8001292:	b2db      	uxtb	r3, r3
 8001294:	4618      	mov	r0, r3
 8001296:	f000 fa3f 	bl	8001718 <LCD_IO_WriteData8>
 800129a:	88ba      	ldrh	r2, [r7, #4]
 800129c:	883b      	ldrh	r3, [r7, #0]
 800129e:	4413      	add	r3, r2
 80012a0:	3b01      	subs	r3, #1
 80012a2:	121b      	asrs	r3, r3, #8
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 fa36 	bl	8001718 <LCD_IO_WriteData8>
 80012ac:	88bb      	ldrh	r3, [r7, #4]
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	883b      	ldrh	r3, [r7, #0]
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	4413      	add	r3, r2
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	3b01      	subs	r3, #1
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	4618      	mov	r0, r3
 80012be:	f000 fa2b 	bl	8001718 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9486_RAMWR, RGBCode, Xsize * Ysize);
 80012c2:	887b      	ldrh	r3, [r7, #2]
 80012c4:	883a      	ldrh	r2, [r7, #0]
 80012c6:	fb02 f303 	mul.w	r3, r2, r3
 80012ca:	461a      	mov	r2, r3
 80012cc:	8b3b      	ldrh	r3, [r7, #24]
 80012ce:	4619      	mov	r1, r3
 80012d0:	202c      	movs	r0, #44	@ 0x2c
 80012d2:	f000 fa8b 	bl	80017ec <LCD_IO_WriteCmd8DataFill16>
  ILI9486_LCDMUTEX_POP();
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd90      	pop	{r4, r7, pc}
	...

080012e0 <ili9486_DrawBitmap>:
  * @param  Ypos:  Bmp Y position in the LCD
  * @retval None
  * @brief  Draw direction: right then up
  */
void ili9486_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	603a      	str	r2, [r7, #0]
 80012ea:	80fb      	strh	r3, [r7, #6]
 80012ec:	460b      	mov	r3, r1
 80012ee:	80bb      	strh	r3, [r7, #4]
  uint32_t index, size;
  /* Read bitmap size */
  size = ((BITMAPSTRUCT *)pbmp)->fileHeader.bfSize;
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80012f6:	60fb      	str	r3, [r7, #12]
  /* Get bitmap data address offset */
  index = ((BITMAPSTRUCT *)pbmp)->fileHeader.bfOffBits;
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	f8d3 300a 	ldr.w	r3, [r3, #10]
 80012fe:	60bb      	str	r3, [r7, #8]
  size = (size - index) / 2;
 8001300:	68fa      	ldr	r2, [r7, #12]
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	085b      	lsrs	r3, r3, #1
 8001308:	60fb      	str	r3, [r7, #12]
  pbmp += index;
 800130a:	683a      	ldr	r2, [r7, #0]
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	4413      	add	r3, r2
 8001310:	603b      	str	r3, [r7, #0]

  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_MADCTL); LCD_IO_WriteData8(ILI9486_MAD_DATA_RIGHT_THEN_UP);
 8001312:	2036      	movs	r0, #54	@ 0x36
 8001314:	f000 f9ce 	bl	80016b4 <LCD_IO_WriteCmd8>
 8001318:	2068      	movs	r0, #104	@ 0x68
 800131a:	f000 f9fd 	bl	8001718 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_PASET); LCD_IO_WriteData16_to_2x8(ILI9486_SIZE_Y - 1 - yEnd); LCD_IO_WriteData16_to_2x8(ILI9486_SIZE_Y - 1 - yStart);
 800131e:	202b      	movs	r0, #43	@ 0x2b
 8001320:	f000 f9c8 	bl	80016b4 <LCD_IO_WriteCmd8>
 8001324:	4b1a      	ldr	r3, [pc, #104]	@ (8001390 <ili9486_DrawBitmap+0xb0>)
 8001326:	881b      	ldrh	r3, [r3, #0]
 8001328:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 800132c:	3301      	adds	r3, #1
 800132e:	121b      	asrs	r3, r3, #8
 8001330:	b2db      	uxtb	r3, r3
 8001332:	4618      	mov	r0, r3
 8001334:	f000 f9f0 	bl	8001718 <LCD_IO_WriteData8>
 8001338:	4b15      	ldr	r3, [pc, #84]	@ (8001390 <ili9486_DrawBitmap+0xb0>)
 800133a:	881b      	ldrh	r3, [r3, #0]
 800133c:	b2db      	uxtb	r3, r3
 800133e:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8001342:	b2db      	uxtb	r3, r3
 8001344:	4618      	mov	r0, r3
 8001346:	f000 f9e7 	bl	8001718 <LCD_IO_WriteData8>
 800134a:	4b12      	ldr	r3, [pc, #72]	@ (8001394 <ili9486_DrawBitmap+0xb4>)
 800134c:	881b      	ldrh	r3, [r3, #0]
 800134e:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8001352:	3301      	adds	r3, #1
 8001354:	121b      	asrs	r3, r3, #8
 8001356:	b2db      	uxtb	r3, r3
 8001358:	4618      	mov	r0, r3
 800135a:	f000 f9dd 	bl	8001718 <LCD_IO_WriteData8>
 800135e:	4b0d      	ldr	r3, [pc, #52]	@ (8001394 <ili9486_DrawBitmap+0xb4>)
 8001360:	881b      	ldrh	r3, [r3, #0]
 8001362:	b2db      	uxtb	r3, r3
 8001364:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8001368:	b2db      	uxtb	r3, r3
 800136a:	4618      	mov	r0, r3
 800136c:	f000 f9d4 	bl	8001718 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData16(ILI9486_RAMWR, (uint16_t *)pbmp, size);
 8001370:	68fa      	ldr	r2, [r7, #12]
 8001372:	6839      	ldr	r1, [r7, #0]
 8001374:	202c      	movs	r0, #44	@ 0x2c
 8001376:	f000 faeb 	bl	8001950 <LCD_IO_WriteCmd8MultipleData16>
  LCD_IO_WriteCmd8(ILI9486_MADCTL); LCD_IO_WriteData8(ILI9486_MAD_DATA_RIGHT_THEN_DOWN);
 800137a:	2036      	movs	r0, #54	@ 0x36
 800137c:	f000 f99a 	bl	80016b4 <LCD_IO_WriteCmd8>
 8001380:	2028      	movs	r0, #40	@ 0x28
 8001382:	f000 f9c9 	bl	8001718 <LCD_IO_WriteData8>
  ILI9486_LCDMUTEX_POP();
}
 8001386:	bf00      	nop
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000084 	.word	0x20000084
 8001394:	20000082 	.word	0x20000082

08001398 <ili9486_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9486_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 8001398:	b590      	push	{r4, r7, lr}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4604      	mov	r4, r0
 80013a0:	4608      	mov	r0, r1
 80013a2:	4611      	mov	r1, r2
 80013a4:	461a      	mov	r2, r3
 80013a6:	4623      	mov	r3, r4
 80013a8:	80fb      	strh	r3, [r7, #6]
 80013aa:	4603      	mov	r3, r0
 80013ac:	80bb      	strh	r3, [r7, #4]
 80013ae:	460b      	mov	r3, r1
 80013b0:	807b      	strh	r3, [r7, #2]
 80013b2:	4613      	mov	r3, r2
 80013b4:	803b      	strh	r3, [r7, #0]
  ili9486_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 80013b6:	883b      	ldrh	r3, [r7, #0]
 80013b8:	887a      	ldrh	r2, [r7, #2]
 80013ba:	88b9      	ldrh	r1, [r7, #4]
 80013bc:	88f8      	ldrh	r0, [r7, #6]
 80013be:	f7ff fe15 	bl	8000fec <ili9486_SetDisplayWindow>
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData16(ILI9486_RAMWR, pData, Xsize * Ysize);
 80013c2:	887b      	ldrh	r3, [r7, #2]
 80013c4:	883a      	ldrh	r2, [r7, #0]
 80013c6:	fb02 f303 	mul.w	r3, r2, r3
 80013ca:	461a      	mov	r2, r3
 80013cc:	69b9      	ldr	r1, [r7, #24]
 80013ce:	202c      	movs	r0, #44	@ 0x2c
 80013d0:	f000 fabe 	bl	8001950 <LCD_IO_WriteCmd8MultipleData16>
  ILI9486_LCDMUTEX_POP();
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd90      	pop	{r4, r7, pc}

080013dc <ili9486_ReadRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9486_ReadRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 80013dc:	b590      	push	{r4, r7, lr}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4604      	mov	r4, r0
 80013e4:	4608      	mov	r0, r1
 80013e6:	4611      	mov	r1, r2
 80013e8:	461a      	mov	r2, r3
 80013ea:	4623      	mov	r3, r4
 80013ec:	80fb      	strh	r3, [r7, #6]
 80013ee:	4603      	mov	r3, r0
 80013f0:	80bb      	strh	r3, [r7, #4]
 80013f2:	460b      	mov	r3, r1
 80013f4:	807b      	strh	r3, [r7, #2]
 80013f6:	4613      	mov	r3, r2
 80013f8:	803b      	strh	r3, [r7, #0]
  ili9486_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 80013fa:	883b      	ldrh	r3, [r7, #0]
 80013fc:	887a      	ldrh	r2, [r7, #2]
 80013fe:	88b9      	ldrh	r1, [r7, #4]
 8001400:	88f8      	ldrh	r0, [r7, #6]
 8001402:	f7ff fdf3 	bl	8000fec <ili9486_SetDisplayWindow>
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData8(ILI9486_PIXFMT, (uint8_t *)"\x66", 1); // Read: only 24bit pixel mode
 8001406:	2201      	movs	r2, #1
 8001408:	490b      	ldr	r1, [pc, #44]	@ (8001438 <ili9486_ReadRGBImage+0x5c>)
 800140a:	203a      	movs	r0, #58	@ 0x3a
 800140c:	f000 fa50 	bl	80018b0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_ReadCmd8MultipleData24to16(ILI9486_RAMRD, pData, Xsize * Ysize, 1);
 8001410:	887b      	ldrh	r3, [r7, #2]
 8001412:	883a      	ldrh	r2, [r7, #0]
 8001414:	fb02 f303 	mul.w	r3, r2, r3
 8001418:	461a      	mov	r2, r3
 800141a:	2301      	movs	r3, #1
 800141c:	69b9      	ldr	r1, [r7, #24]
 800141e:	202e      	movs	r0, #46	@ 0x2e
 8001420:	f000 fb6a 	bl	8001af8 <LCD_IO_ReadCmd8MultipleData24to16>
  LCD_IO_WriteCmd8MultipleData8(ILI9486_PIXFMT, (uint8_t *)"\x55", 1); // Return to 16bit pixel mode
 8001424:	2201      	movs	r2, #1
 8001426:	4905      	ldr	r1, [pc, #20]	@ (800143c <ili9486_ReadRGBImage+0x60>)
 8001428:	203a      	movs	r0, #58	@ 0x3a
 800142a:	f000 fa41 	bl	80018b0 <LCD_IO_WriteCmd8MultipleData8>
  ILI9486_LCDMUTEX_POP();
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	bd90      	pop	{r4, r7, pc}
 8001436:	bf00      	nop
 8001438:	0800506c 	.word	0x0800506c
 800143c:	0800503c 	.word	0x0800503c

08001440 <ili9486_Scroll>:
  * @param  TopFix    : Top fix size [pixel]
  * @param  BottonFix : Botton fix size [pixel]
  * @retval None
  */
void ili9486_Scroll(int16_t Scroll, uint16_t TopFix, uint16_t BottonFix)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	80fb      	strh	r3, [r7, #6]
 800144a:	460b      	mov	r3, r1
 800144c:	80bb      	strh	r3, [r7, #4]
 800144e:	4613      	mov	r3, r2
 8001450:	807b      	strh	r3, [r7, #2]
  if(Scroll < 0)
    Scroll = scrparam[2] + Scroll + scrparam[1];
  else
    Scroll = Scroll + scrparam[1];
  #elif (ILI9486_ORIENTATION == 1)
  if((TopFix != scrparam[1]) || (BottonFix != scrparam[3]))
 8001452:	4b29      	ldr	r3, [pc, #164]	@ (80014f8 <ili9486_Scroll+0xb8>)
 8001454:	885b      	ldrh	r3, [r3, #2]
 8001456:	88ba      	ldrh	r2, [r7, #4]
 8001458:	429a      	cmp	r2, r3
 800145a:	d104      	bne.n	8001466 <ili9486_Scroll+0x26>
 800145c:	4b26      	ldr	r3, [pc, #152]	@ (80014f8 <ili9486_Scroll+0xb8>)
 800145e:	88db      	ldrh	r3, [r3, #6]
 8001460:	887a      	ldrh	r2, [r7, #2]
 8001462:	429a      	cmp	r2, r3
 8001464:	d013      	beq.n	800148e <ili9486_Scroll+0x4e>
  {
    scrparam[1] = TopFix;
 8001466:	4a24      	ldr	r2, [pc, #144]	@ (80014f8 <ili9486_Scroll+0xb8>)
 8001468:	88bb      	ldrh	r3, [r7, #4]
 800146a:	8053      	strh	r3, [r2, #2]
    scrparam[3] = BottonFix;
 800146c:	4a22      	ldr	r2, [pc, #136]	@ (80014f8 <ili9486_Scroll+0xb8>)
 800146e:	887b      	ldrh	r3, [r7, #2]
 8001470:	80d3      	strh	r3, [r2, #6]
    scrparam[2] = ILI9486_LCD_PIXEL_HEIGHT - TopFix - BottonFix;
 8001472:	88ba      	ldrh	r2, [r7, #4]
 8001474:	887b      	ldrh	r3, [r7, #2]
 8001476:	4413      	add	r3, r2
 8001478:	b29b      	uxth	r3, r3
 800147a:	f5c3 73f0 	rsb	r3, r3, #480	@ 0x1e0
 800147e:	b29a      	uxth	r2, r3
 8001480:	4b1d      	ldr	r3, [pc, #116]	@ (80014f8 <ili9486_Scroll+0xb8>)
 8001482:	809a      	strh	r2, [r3, #4]
    LCD_IO_WriteCmd8MultipleData16(ILI9486_VSCRDEF, &scrparam[1], 3);
 8001484:	2203      	movs	r2, #3
 8001486:	491d      	ldr	r1, [pc, #116]	@ (80014fc <ili9486_Scroll+0xbc>)
 8001488:	2033      	movs	r0, #51	@ 0x33
 800148a:	f000 fa61 	bl	8001950 <LCD_IO_WriteCmd8MultipleData16>
  }
  Scroll = (0 - Scroll) % scrparam[2];
 800148e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001492:	425b      	negs	r3, r3
 8001494:	4a18      	ldr	r2, [pc, #96]	@ (80014f8 <ili9486_Scroll+0xb8>)
 8001496:	8892      	ldrh	r2, [r2, #4]
 8001498:	fb93 f1f2 	sdiv	r1, r3, r2
 800149c:	fb01 f202 	mul.w	r2, r1, r2
 80014a0:	1a9b      	subs	r3, r3, r2
 80014a2:	80fb      	strh	r3, [r7, #6]
  if(Scroll < 0)
 80014a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	da0a      	bge.n	80014c2 <ili9486_Scroll+0x82>
    Scroll = scrparam[2] + Scroll + scrparam[1];
 80014ac:	4b12      	ldr	r3, [pc, #72]	@ (80014f8 <ili9486_Scroll+0xb8>)
 80014ae:	889a      	ldrh	r2, [r3, #4]
 80014b0:	88fb      	ldrh	r3, [r7, #6]
 80014b2:	4413      	add	r3, r2
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	4b10      	ldr	r3, [pc, #64]	@ (80014f8 <ili9486_Scroll+0xb8>)
 80014b8:	885b      	ldrh	r3, [r3, #2]
 80014ba:	4413      	add	r3, r2
 80014bc:	b29b      	uxth	r3, r3
 80014be:	80fb      	strh	r3, [r7, #6]
 80014c0:	e005      	b.n	80014ce <ili9486_Scroll+0x8e>
  else
    Scroll = Scroll + scrparam[1];
 80014c2:	4b0d      	ldr	r3, [pc, #52]	@ (80014f8 <ili9486_Scroll+0xb8>)
 80014c4:	885a      	ldrh	r2, [r3, #2]
 80014c6:	88fb      	ldrh	r3, [r7, #6]
 80014c8:	4413      	add	r3, r2
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	80fb      	strh	r3, [r7, #6]
  if(Scroll < 0)
    Scroll = scrparam[2] + Scroll + scrparam[1];
  else
    Scroll = Scroll + scrparam[1];
  #endif
  if(Scroll != scrparam[0])
 80014ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014d2:	4a09      	ldr	r2, [pc, #36]	@ (80014f8 <ili9486_Scroll+0xb8>)
 80014d4:	8812      	ldrh	r2, [r2, #0]
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d009      	beq.n	80014ee <ili9486_Scroll+0xae>
  {
    scrparam[0] = Scroll;
 80014da:	88fa      	ldrh	r2, [r7, #6]
 80014dc:	4b06      	ldr	r3, [pc, #24]	@ (80014f8 <ili9486_Scroll+0xb8>)
 80014de:	801a      	strh	r2, [r3, #0]
    LCD_IO_WriteCmd8DataFill16(ILI9486_VSCRSADD, scrparam[0], 1);
 80014e0:	4b05      	ldr	r3, [pc, #20]	@ (80014f8 <ili9486_Scroll+0xb8>)
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	2201      	movs	r2, #1
 80014e6:	4619      	mov	r1, r3
 80014e8:	2037      	movs	r0, #55	@ 0x37
 80014ea:	f000 f97f 	bl	80017ec <LCD_IO_WriteCmd8DataFill16>
  }
  ILI9486_LCDMUTEX_POP();
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000088 	.word	0x20000088
 80014fc:	2000008a 	.word	0x2000008a

08001500 <LCD_IO_Delay>:
#elif   defined(__CC_ARM)
#pragma push
#pragma O0
#endif
void LCD_IO_Delay(uint32_t c)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  while(c--);
 8001508:	bf00      	nop
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	1e5a      	subs	r2, r3, #1
 800150e:	607a      	str	r2, [r7, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1fa      	bne.n	800150a <LCD_IO_Delay+0xa>
}
 8001514:	bf00      	nop
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <LCD_Delay>:
#pragma pop
#endif

//-----------------------------------------------------------------------------
void LCD_Delay(uint32_t Delay)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f001 fbf6 	bl	8002d1c <HAL_Delay>
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
  if(Bl)
    GPIOX_ODR(LCD_BL) = LCD_BLON;
  else
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
  #endif
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
	...

08001550 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  #define GPIOX_CLOCK_LCD_RD    GPIOX_CLOCK(LCD_RD)
  #else
  #define GPIOX_CLOCK_LCD_RD    0
  #endif

  RCC->AHB1ENR |= (GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_WR) |
 8001554:	4b4f      	ldr	r3, [pc, #316]	@ (8001694 <LCD_IO_Init+0x144>)
 8001556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001558:	4a4e      	ldr	r2, [pc, #312]	@ (8001694 <LCD_IO_Init+0x144>)
 800155a:	f043 0306 	orr.w	r3, r3, #6
 800155e:	6313      	str	r3, [r2, #48]	@ 0x30
                   GPIOX_CLOCK(LCD_D0) | GPIOX_CLOCK(LCD_D1) | GPIOX_CLOCK(LCD_D2) | GPIOX_CLOCK(LCD_D3) |
                   GPIOX_CLOCK(LCD_D4) | GPIOX_CLOCK(LCD_D5) | GPIOX_CLOCK(LCD_D6) | GPIOX_CLOCK(LCD_D7) |
                   GPIOX_CLOCK_LCD_RST | GPIOX_CLOCK_LCD_BL  | GPIOX_CLOCK_LCD_RD);

  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  LCD_RST_OFF;                          // RST = 1
 8001560:	4b4d      	ldr	r3, [pc, #308]	@ (8001698 <LCD_IO_Init+0x148>)
 8001562:	2201      	movs	r2, #1
 8001564:	601a      	str	r2, [r3, #0]
  GPIOX_MODER(MODE_OUT, LCD_RST);
 8001566:	4b4d      	ldr	r3, [pc, #308]	@ (800169c <LCD_IO_Init+0x14c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 800156e:	4a4b      	ldr	r2, [pc, #300]	@ (800169c <LCD_IO_Init+0x14c>)
 8001570:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001574:	6013      	str	r3, [r2, #0]
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  GPIOX_ODR(LCD_BL) = LCD_BLON;
  GPIOX_MODER(MODE_OUT, LCD_BL);
  #endif

  GPIOX_ODR(LCD_CS) = 1;                /* CS = 1 */
 8001576:	4b4a      	ldr	r3, [pc, #296]	@ (80016a0 <LCD_IO_Init+0x150>)
 8001578:	2201      	movs	r2, #1
 800157a:	601a      	str	r2, [r3, #0]
  LCD_RS_DATA;                          /* RS = 1 */
 800157c:	4b49      	ldr	r3, [pc, #292]	@ (80016a4 <LCD_IO_Init+0x154>)
 800157e:	2201      	movs	r2, #1
 8001580:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_WR) = 1;                /* WR = 1 */
 8001582:	4b49      	ldr	r3, [pc, #292]	@ (80016a8 <LCD_IO_Init+0x158>)
 8001584:	2201      	movs	r2, #1
 8001586:	601a      	str	r2, [r3, #0]
  #if GPIOX_PORTNUM(LCD_RD) >= GPIOX_PORTNUM_A
  GPIOX_ODR(LCD_RD) = 1;                /* RD = 1 */
 8001588:	4b48      	ldr	r3, [pc, #288]	@ (80016ac <LCD_IO_Init+0x15c>)
 800158a:	2201      	movs	r2, #1
 800158c:	601a      	str	r2, [r3, #0]
  #endif

  GPIOX_MODER(MODE_OUT, LCD_CS);
 800158e:	4b48      	ldr	r3, [pc, #288]	@ (80016b0 <LCD_IO_Init+0x160>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8001596:	4a46      	ldr	r2, [pc, #280]	@ (80016b0 <LCD_IO_Init+0x160>)
 8001598:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800159c:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_RS);
 800159e:	4b44      	ldr	r3, [pc, #272]	@ (80016b0 <LCD_IO_Init+0x160>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80015a6:	4a42      	ldr	r2, [pc, #264]	@ (80016b0 <LCD_IO_Init+0x160>)
 80015a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015ac:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_WR);
 80015ae:	4b40      	ldr	r3, [pc, #256]	@ (80016b0 <LCD_IO_Init+0x160>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80015b6:	4a3e      	ldr	r2, [pc, #248]	@ (80016b0 <LCD_IO_Init+0x160>)
 80015b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80015bc:	6013      	str	r3, [r2, #0]
  #if GPIOX_PORTNUM(LCD_RD) >= GPIOX_PORTNUM_A
  GPIOX_MODER(MODE_OUT, LCD_RD);
 80015be:	4b37      	ldr	r3, [pc, #220]	@ (800169c <LCD_IO_Init+0x14c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80015c6:	4a35      	ldr	r2, [pc, #212]	@ (800169c <LCD_IO_Init+0x14c>)
 80015c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80015cc:	6013      	str	r3, [r2, #0]
  #endif

  LCD_DIRWRITE;                         /* data pins set the output direction */
 80015ce:	4b33      	ldr	r3, [pc, #204]	@ (800169c <LCD_IO_Init+0x14c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	0c1b      	lsrs	r3, r3, #16
 80015d4:	041b      	lsls	r3, r3, #16
 80015d6:	4a31      	ldr	r2, [pc, #196]	@ (800169c <LCD_IO_Init+0x14c>)
 80015d8:	f443 43aa 	orr.w	r3, r3, #21760	@ 0x5500
 80015dc:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 80015e0:	6013      	str	r3, [r2, #0]

  /* GPIO speed */
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_CS);
 80015e2:	4b33      	ldr	r3, [pc, #204]	@ (80016b0 <LCD_IO_Init+0x160>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	4a32      	ldr	r2, [pc, #200]	@ (80016b0 <LCD_IO_Init+0x160>)
 80015e8:	f043 6340 	orr.w	r3, r3, #201326592	@ 0xc000000
 80015ec:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RS);
 80015ee:	4b30      	ldr	r3, [pc, #192]	@ (80016b0 <LCD_IO_Init+0x160>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	4a2f      	ldr	r2, [pc, #188]	@ (80016b0 <LCD_IO_Init+0x160>)
 80015f4:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 80015f8:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_WR);
 80015fa:	4b2d      	ldr	r3, [pc, #180]	@ (80016b0 <LCD_IO_Init+0x160>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	4a2c      	ldr	r2, [pc, #176]	@ (80016b0 <LCD_IO_Init+0x160>)
 8001600:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8001604:	6093      	str	r3, [r2, #8]
  #if GPIOX_PORTNUM(LCD_RD) >= GPIOX_PORTNUM_A
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RD);
 8001606:	4b25      	ldr	r3, [pc, #148]	@ (800169c <LCD_IO_Init+0x14c>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	4a24      	ldr	r2, [pc, #144]	@ (800169c <LCD_IO_Init+0x14c>)
 800160c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8001610:	6093      	str	r3, [r2, #8]
  #endif
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D0);
 8001612:	4b22      	ldr	r3, [pc, #136]	@ (800169c <LCD_IO_Init+0x14c>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	4a21      	ldr	r2, [pc, #132]	@ (800169c <LCD_IO_Init+0x14c>)
 8001618:	f043 0303 	orr.w	r3, r3, #3
 800161c:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D1);
 800161e:	4b1f      	ldr	r3, [pc, #124]	@ (800169c <LCD_IO_Init+0x14c>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	4a1e      	ldr	r2, [pc, #120]	@ (800169c <LCD_IO_Init+0x14c>)
 8001624:	f043 030c 	orr.w	r3, r3, #12
 8001628:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D2);
 800162a:	4b1c      	ldr	r3, [pc, #112]	@ (800169c <LCD_IO_Init+0x14c>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	4a1b      	ldr	r2, [pc, #108]	@ (800169c <LCD_IO_Init+0x14c>)
 8001630:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001634:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D3);
 8001636:	4b19      	ldr	r3, [pc, #100]	@ (800169c <LCD_IO_Init+0x14c>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	4a18      	ldr	r2, [pc, #96]	@ (800169c <LCD_IO_Init+0x14c>)
 800163c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001640:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D4);
 8001642:	4b16      	ldr	r3, [pc, #88]	@ (800169c <LCD_IO_Init+0x14c>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	4a15      	ldr	r2, [pc, #84]	@ (800169c <LCD_IO_Init+0x14c>)
 8001648:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800164c:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D5);
 800164e:	4b13      	ldr	r3, [pc, #76]	@ (800169c <LCD_IO_Init+0x14c>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	4a12      	ldr	r2, [pc, #72]	@ (800169c <LCD_IO_Init+0x14c>)
 8001654:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8001658:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D6);
 800165a:	4b10      	ldr	r3, [pc, #64]	@ (800169c <LCD_IO_Init+0x14c>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	4a0f      	ldr	r2, [pc, #60]	@ (800169c <LCD_IO_Init+0x14c>)
 8001660:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8001664:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D7);
 8001666:	4b0d      	ldr	r3, [pc, #52]	@ (800169c <LCD_IO_Init+0x14c>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	4a0c      	ldr	r2, [pc, #48]	@ (800169c <LCD_IO_Init+0x14c>)
 800166c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001670:	6093      	str	r3, [r2, #8]

  /* Reset the LCD */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  LCD_Delay(1);
 8001672:	2001      	movs	r0, #1
 8001674:	f7ff ff55 	bl	8001522 <LCD_Delay>
  LCD_RST_ON;                           /* RST = 0 */
 8001678:	4b07      	ldr	r3, [pc, #28]	@ (8001698 <LCD_IO_Init+0x148>)
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
  LCD_Delay(1);
 800167e:	2001      	movs	r0, #1
 8001680:	f7ff ff4f 	bl	8001522 <LCD_Delay>
  LCD_RST_OFF;                          /* RST = 1 */
 8001684:	4b04      	ldr	r3, [pc, #16]	@ (8001698 <LCD_IO_Init+0x148>)
 8001686:	2201      	movs	r2, #1
 8001688:	601a      	str	r2, [r3, #0]
  #endif
  LCD_Delay(1);
 800168a:	2001      	movs	r0, #1
 800168c:	f7ff ff49 	bl	8001522 <LCD_Delay>
}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40023800 	.word	0x40023800
 8001698:	424082b0 	.word	0x424082b0
 800169c:	40020400 	.word	0x40020400
 80016a0:	424102b4 	.word	0x424102b4
 80016a4:	424102b8 	.word	0x424102b8
 80016a8:	424102bc 	.word	0x424102bc
 80016ac:	424082a8 	.word	0x424082a8
 80016b0:	40020800 	.word	0x40020800

080016b4 <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	71fb      	strb	r3, [r7, #7]
  LCD_CS_ON;
 80016be:	4b11      	ldr	r3, [pc, #68]	@ (8001704 <LCD_IO_WriteCmd8+0x50>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
  LCD_CMD8_WRITE(Cmd);
 80016c4:	4b10      	ldr	r3, [pc, #64]	@ (8001708 <LCD_IO_WriteCmd8+0x54>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	4a10      	ldr	r2, [pc, #64]	@ (800170c <LCD_IO_WriteCmd8+0x58>)
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	7013      	strb	r3, [r2, #0]
 80016d0:	4b0e      	ldr	r3, [pc, #56]	@ (800170c <LCD_IO_WriteCmd8+0x58>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 80016d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001710 <LCD_IO_WriteCmd8+0x5c>)
 80016da:	619a      	str	r2, [r3, #24]
 80016dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001714 <LCD_IO_WriteCmd8+0x60>)
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	2008      	movs	r0, #8
 80016e4:	f7ff ff0c 	bl	8001500 <LCD_IO_Delay>
 80016e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001714 <LCD_IO_WriteCmd8+0x60>)
 80016ea:	2201      	movs	r2, #1
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	4b06      	ldr	r3, [pc, #24]	@ (8001708 <LCD_IO_WriteCmd8+0x54>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 80016f4:	4b03      	ldr	r3, [pc, #12]	@ (8001704 <LCD_IO_WriteCmd8+0x50>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	601a      	str	r2, [r3, #0]
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	424102b4 	.word	0x424102b4
 8001708:	424102b8 	.word	0x424102b8
 800170c:	20000090 	.word	0x20000090
 8001710:	40020400 	.word	0x40020400
 8001714:	424102bc 	.word	0x424102bc

08001718 <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	71fb      	strb	r3, [r7, #7]
  LCD_CS_ON;
 8001722:	4b0e      	ldr	r3, [pc, #56]	@ (800175c <LCD_IO_WriteData8+0x44>)
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
  LCD_DATA8_WRITE(Data);
 8001728:	4a0d      	ldr	r2, [pc, #52]	@ (8001760 <LCD_IO_WriteData8+0x48>)
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	7013      	strb	r3, [r2, #0]
 800172e:	4b0c      	ldr	r3, [pc, #48]	@ (8001760 <LCD_IO_WriteData8+0x48>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8001736:	4b0b      	ldr	r3, [pc, #44]	@ (8001764 <LCD_IO_WriteData8+0x4c>)
 8001738:	619a      	str	r2, [r3, #24]
 800173a:	4b0b      	ldr	r3, [pc, #44]	@ (8001768 <LCD_IO_WriteData8+0x50>)
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	2008      	movs	r0, #8
 8001742:	f7ff fedd 	bl	8001500 <LCD_IO_Delay>
 8001746:	4b08      	ldr	r3, [pc, #32]	@ (8001768 <LCD_IO_WriteData8+0x50>)
 8001748:	2201      	movs	r2, #1
 800174a:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 800174c:	4b03      	ldr	r3, [pc, #12]	@ (800175c <LCD_IO_WriteData8+0x44>)
 800174e:	2201      	movs	r2, #1
 8001750:	601a      	str	r2, [r3, #0]
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	424102b4 	.word	0x424102b4
 8001760:	20000090 	.word	0x20000090
 8001764:	40020400 	.word	0x40020400
 8001768:	424102bc 	.word	0x424102bc

0800176c <LCD_IO_WriteData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	80fb      	strh	r3, [r7, #6]
  LCD_CS_ON;
 8001776:	4b19      	ldr	r3, [pc, #100]	@ (80017dc <LCD_IO_WriteData16+0x70>)
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
  LCD_DATA16_WRITE(Data);
 800177c:	88fb      	ldrh	r3, [r7, #6]
 800177e:	0a1b      	lsrs	r3, r3, #8
 8001780:	b29b      	uxth	r3, r3
 8001782:	b2da      	uxtb	r2, r3
 8001784:	4b16      	ldr	r3, [pc, #88]	@ (80017e0 <LCD_IO_WriteData16+0x74>)
 8001786:	701a      	strb	r2, [r3, #0]
 8001788:	4b15      	ldr	r3, [pc, #84]	@ (80017e0 <LCD_IO_WriteData16+0x74>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8001790:	4b14      	ldr	r3, [pc, #80]	@ (80017e4 <LCD_IO_WriteData16+0x78>)
 8001792:	619a      	str	r2, [r3, #24]
 8001794:	4b14      	ldr	r3, [pc, #80]	@ (80017e8 <LCD_IO_WriteData16+0x7c>)
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	2008      	movs	r0, #8
 800179c:	f7ff feb0 	bl	8001500 <LCD_IO_Delay>
 80017a0:	4b11      	ldr	r3, [pc, #68]	@ (80017e8 <LCD_IO_WriteData16+0x7c>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	88fb      	ldrh	r3, [r7, #6]
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4b0d      	ldr	r3, [pc, #52]	@ (80017e0 <LCD_IO_WriteData16+0x74>)
 80017ac:	701a      	strb	r2, [r3, #0]
 80017ae:	4b0c      	ldr	r3, [pc, #48]	@ (80017e0 <LCD_IO_WriteData16+0x74>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 80017b6:	4b0b      	ldr	r3, [pc, #44]	@ (80017e4 <LCD_IO_WriteData16+0x78>)
 80017b8:	619a      	str	r2, [r3, #24]
 80017ba:	4b0b      	ldr	r3, [pc, #44]	@ (80017e8 <LCD_IO_WriteData16+0x7c>)
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	2008      	movs	r0, #8
 80017c2:	f7ff fe9d 	bl	8001500 <LCD_IO_Delay>
 80017c6:	4b08      	ldr	r3, [pc, #32]	@ (80017e8 <LCD_IO_WriteData16+0x7c>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 80017cc:	4b03      	ldr	r3, [pc, #12]	@ (80017dc <LCD_IO_WriteData16+0x70>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	601a      	str	r2, [r3, #0]
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	424102b4 	.word	0x424102b4
 80017e0:	20000090 	.word	0x20000090
 80017e4:	40020400 	.word	0x40020400
 80017e8:	424102bc 	.word	0x424102bc

080017ec <LCD_IO_WriteCmd8DataFill16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	603a      	str	r2, [r7, #0]
 80017f6:	71fb      	strb	r3, [r7, #7]
 80017f8:	460b      	mov	r3, r1
 80017fa:	80bb      	strh	r3, [r7, #4]
  LCD_CS_ON;
 80017fc:	4b27      	ldr	r3, [pc, #156]	@ (800189c <LCD_IO_WriteCmd8DataFill16+0xb0>)
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
  LCD_CMD8_WRITE(Cmd);
 8001802:	4b27      	ldr	r3, [pc, #156]	@ (80018a0 <LCD_IO_WriteCmd8DataFill16+0xb4>)
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	4a26      	ldr	r2, [pc, #152]	@ (80018a4 <LCD_IO_WriteCmd8DataFill16+0xb8>)
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	7013      	strb	r3, [r2, #0]
 800180e:	4b25      	ldr	r3, [pc, #148]	@ (80018a4 <LCD_IO_WriteCmd8DataFill16+0xb8>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8001816:	4b24      	ldr	r3, [pc, #144]	@ (80018a8 <LCD_IO_WriteCmd8DataFill16+0xbc>)
 8001818:	619a      	str	r2, [r3, #24]
 800181a:	4b24      	ldr	r3, [pc, #144]	@ (80018ac <LCD_IO_WriteCmd8DataFill16+0xc0>)
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	2008      	movs	r0, #8
 8001822:	f7ff fe6d 	bl	8001500 <LCD_IO_Delay>
 8001826:	4b21      	ldr	r3, [pc, #132]	@ (80018ac <LCD_IO_WriteCmd8DataFill16+0xc0>)
 8001828:	2201      	movs	r2, #1
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	4b1c      	ldr	r3, [pc, #112]	@ (80018a0 <LCD_IO_WriteCmd8DataFill16+0xb4>)
 800182e:	2201      	movs	r2, #1
 8001830:	601a      	str	r2, [r3, #0]
  while(Size--)
 8001832:	e027      	b.n	8001884 <LCD_IO_WriteCmd8DataFill16+0x98>
  {
    LCD_DATA16_WRITE(Data);
 8001834:	88bb      	ldrh	r3, [r7, #4]
 8001836:	0a1b      	lsrs	r3, r3, #8
 8001838:	b29b      	uxth	r3, r3
 800183a:	b2da      	uxtb	r2, r3
 800183c:	4b19      	ldr	r3, [pc, #100]	@ (80018a4 <LCD_IO_WriteCmd8DataFill16+0xb8>)
 800183e:	701a      	strb	r2, [r3, #0]
 8001840:	4b18      	ldr	r3, [pc, #96]	@ (80018a4 <LCD_IO_WriteCmd8DataFill16+0xb8>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8001848:	4b17      	ldr	r3, [pc, #92]	@ (80018a8 <LCD_IO_WriteCmd8DataFill16+0xbc>)
 800184a:	619a      	str	r2, [r3, #24]
 800184c:	4b17      	ldr	r3, [pc, #92]	@ (80018ac <LCD_IO_WriteCmd8DataFill16+0xc0>)
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	2008      	movs	r0, #8
 8001854:	f7ff fe54 	bl	8001500 <LCD_IO_Delay>
 8001858:	4b14      	ldr	r3, [pc, #80]	@ (80018ac <LCD_IO_WriteCmd8DataFill16+0xc0>)
 800185a:	2201      	movs	r2, #1
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	88bb      	ldrh	r3, [r7, #4]
 8001860:	b2da      	uxtb	r2, r3
 8001862:	4b10      	ldr	r3, [pc, #64]	@ (80018a4 <LCD_IO_WriteCmd8DataFill16+0xb8>)
 8001864:	701a      	strb	r2, [r3, #0]
 8001866:	4b0f      	ldr	r3, [pc, #60]	@ (80018a4 <LCD_IO_WriteCmd8DataFill16+0xb8>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 800186e:	4b0e      	ldr	r3, [pc, #56]	@ (80018a8 <LCD_IO_WriteCmd8DataFill16+0xbc>)
 8001870:	619a      	str	r2, [r3, #24]
 8001872:	4b0e      	ldr	r3, [pc, #56]	@ (80018ac <LCD_IO_WriteCmd8DataFill16+0xc0>)
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	2008      	movs	r0, #8
 800187a:	f7ff fe41 	bl	8001500 <LCD_IO_Delay>
 800187e:	4b0b      	ldr	r3, [pc, #44]	@ (80018ac <LCD_IO_WriteCmd8DataFill16+0xc0>)
 8001880:	2201      	movs	r2, #1
 8001882:	601a      	str	r2, [r3, #0]
  while(Size--)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	1e5a      	subs	r2, r3, #1
 8001888:	603a      	str	r2, [r7, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1d2      	bne.n	8001834 <LCD_IO_WriteCmd8DataFill16+0x48>
  }
  LCD_CS_OFF;
 800188e:	4b03      	ldr	r3, [pc, #12]	@ (800189c <LCD_IO_WriteCmd8DataFill16+0xb0>)
 8001890:	2201      	movs	r2, #1
 8001892:	601a      	str	r2, [r3, #0]
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	424102b4 	.word	0x424102b4
 80018a0:	424102b8 	.word	0x424102b8
 80018a4:	20000090 	.word	0x20000090
 80018a8:	40020400 	.word	0x40020400
 80018ac:	424102bc 	.word	0x424102bc

080018b0 <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
 80018bc:	73fb      	strb	r3, [r7, #15]
  LCD_CS_ON;
 80018be:	4b1f      	ldr	r3, [pc, #124]	@ (800193c <LCD_IO_WriteCmd8MultipleData8+0x8c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
  LCD_CMD8_WRITE(Cmd);
 80018c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001940 <LCD_IO_WriteCmd8MultipleData8+0x90>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	4a1e      	ldr	r2, [pc, #120]	@ (8001944 <LCD_IO_WriteCmd8MultipleData8+0x94>)
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
 80018ce:	7013      	strb	r3, [r2, #0]
 80018d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001944 <LCD_IO_WriteCmd8MultipleData8+0x94>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 80018d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001948 <LCD_IO_WriteCmd8MultipleData8+0x98>)
 80018da:	619a      	str	r2, [r3, #24]
 80018dc:	4b1b      	ldr	r3, [pc, #108]	@ (800194c <LCD_IO_WriteCmd8MultipleData8+0x9c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	2008      	movs	r0, #8
 80018e4:	f7ff fe0c 	bl	8001500 <LCD_IO_Delay>
 80018e8:	4b18      	ldr	r3, [pc, #96]	@ (800194c <LCD_IO_WriteCmd8MultipleData8+0x9c>)
 80018ea:	2201      	movs	r2, #1
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	4b14      	ldr	r3, [pc, #80]	@ (8001940 <LCD_IO_WriteCmd8MultipleData8+0x90>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	601a      	str	r2, [r3, #0]

  while(Size--)
 80018f4:	e015      	b.n	8001922 <LCD_IO_WriteCmd8MultipleData8+0x72>
  {
    LCD_DATA8_WRITE(*pData);
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	781a      	ldrb	r2, [r3, #0]
 80018fa:	4b12      	ldr	r3, [pc, #72]	@ (8001944 <LCD_IO_WriteCmd8MultipleData8+0x94>)
 80018fc:	701a      	strb	r2, [r3, #0]
 80018fe:	4b11      	ldr	r3, [pc, #68]	@ (8001944 <LCD_IO_WriteCmd8MultipleData8+0x94>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8001906:	4b10      	ldr	r3, [pc, #64]	@ (8001948 <LCD_IO_WriteCmd8MultipleData8+0x98>)
 8001908:	619a      	str	r2, [r3, #24]
 800190a:	4b10      	ldr	r3, [pc, #64]	@ (800194c <LCD_IO_WriteCmd8MultipleData8+0x9c>)
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	2008      	movs	r0, #8
 8001912:	f7ff fdf5 	bl	8001500 <LCD_IO_Delay>
 8001916:	4b0d      	ldr	r3, [pc, #52]	@ (800194c <LCD_IO_WriteCmd8MultipleData8+0x9c>)
 8001918:	2201      	movs	r2, #1
 800191a:	601a      	str	r2, [r3, #0]
    pData ++;
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	3301      	adds	r3, #1
 8001920:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	1e5a      	subs	r2, r3, #1
 8001926:	607a      	str	r2, [r7, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1e4      	bne.n	80018f6 <LCD_IO_WriteCmd8MultipleData8+0x46>
  }
  LCD_CS_OFF;
 800192c:	4b03      	ldr	r3, [pc, #12]	@ (800193c <LCD_IO_WriteCmd8MultipleData8+0x8c>)
 800192e:	2201      	movs	r2, #1
 8001930:	601a      	str	r2, [r3, #0]
}
 8001932:	bf00      	nop
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	424102b4 	.word	0x424102b4
 8001940:	424102b8 	.word	0x424102b8
 8001944:	20000090 	.word	0x20000090
 8001948:	40020400 	.word	0x40020400
 800194c:	424102bc 	.word	0x424102bc

08001950 <LCD_IO_WriteCmd8MultipleData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
 800195c:	73fb      	strb	r3, [r7, #15]
  LCD_CS_ON;
 800195e:	4b2a      	ldr	r3, [pc, #168]	@ (8001a08 <LCD_IO_WriteCmd8MultipleData16+0xb8>)
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
  LCD_CMD8_WRITE(Cmd);
 8001964:	4b29      	ldr	r3, [pc, #164]	@ (8001a0c <LCD_IO_WriteCmd8MultipleData16+0xbc>)
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	4a29      	ldr	r2, [pc, #164]	@ (8001a10 <LCD_IO_WriteCmd8MultipleData16+0xc0>)
 800196c:	7bfb      	ldrb	r3, [r7, #15]
 800196e:	7013      	strb	r3, [r2, #0]
 8001970:	4b27      	ldr	r3, [pc, #156]	@ (8001a10 <LCD_IO_WriteCmd8MultipleData16+0xc0>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8001978:	4b26      	ldr	r3, [pc, #152]	@ (8001a14 <LCD_IO_WriteCmd8MultipleData16+0xc4>)
 800197a:	619a      	str	r2, [r3, #24]
 800197c:	4b26      	ldr	r3, [pc, #152]	@ (8001a18 <LCD_IO_WriteCmd8MultipleData16+0xc8>)
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	2008      	movs	r0, #8
 8001984:	f7ff fdbc 	bl	8001500 <LCD_IO_Delay>
 8001988:	4b23      	ldr	r3, [pc, #140]	@ (8001a18 <LCD_IO_WriteCmd8MultipleData16+0xc8>)
 800198a:	2201      	movs	r2, #1
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	4b1f      	ldr	r3, [pc, #124]	@ (8001a0c <LCD_IO_WriteCmd8MultipleData16+0xbc>)
 8001990:	2201      	movs	r2, #1
 8001992:	601a      	str	r2, [r3, #0]
  while(Size--)
 8001994:	e02c      	b.n	80019f0 <LCD_IO_WriteCmd8MultipleData16+0xa0>
  {
    LCD_DATA16_WRITE(*pData);
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	881b      	ldrh	r3, [r3, #0]
 800199a:	0a1b      	lsrs	r3, r3, #8
 800199c:	b29b      	uxth	r3, r3
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a10 <LCD_IO_WriteCmd8MultipleData16+0xc0>)
 80019a2:	701a      	strb	r2, [r3, #0]
 80019a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a10 <LCD_IO_WriteCmd8MultipleData16+0xc0>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 80019ac:	4b19      	ldr	r3, [pc, #100]	@ (8001a14 <LCD_IO_WriteCmd8MultipleData16+0xc4>)
 80019ae:	619a      	str	r2, [r3, #24]
 80019b0:	4b19      	ldr	r3, [pc, #100]	@ (8001a18 <LCD_IO_WriteCmd8MultipleData16+0xc8>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	2008      	movs	r0, #8
 80019b8:	f7ff fda2 	bl	8001500 <LCD_IO_Delay>
 80019bc:	4b16      	ldr	r3, [pc, #88]	@ (8001a18 <LCD_IO_WriteCmd8MultipleData16+0xc8>)
 80019be:	2201      	movs	r2, #1
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	881b      	ldrh	r3, [r3, #0]
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	4b11      	ldr	r3, [pc, #68]	@ (8001a10 <LCD_IO_WriteCmd8MultipleData16+0xc0>)
 80019ca:	701a      	strb	r2, [r3, #0]
 80019cc:	4b10      	ldr	r3, [pc, #64]	@ (8001a10 <LCD_IO_WriteCmd8MultipleData16+0xc0>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 80019d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001a14 <LCD_IO_WriteCmd8MultipleData16+0xc4>)
 80019d6:	619a      	str	r2, [r3, #24]
 80019d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a18 <LCD_IO_WriteCmd8MultipleData16+0xc8>)
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	2008      	movs	r0, #8
 80019e0:	f7ff fd8e 	bl	8001500 <LCD_IO_Delay>
 80019e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a18 <LCD_IO_WriteCmd8MultipleData16+0xc8>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	601a      	str	r2, [r3, #0]
    pData ++;
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	3302      	adds	r3, #2
 80019ee:	60bb      	str	r3, [r7, #8]
  while(Size--)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	1e5a      	subs	r2, r3, #1
 80019f4:	607a      	str	r2, [r7, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1cd      	bne.n	8001996 <LCD_IO_WriteCmd8MultipleData16+0x46>
  }
  LCD_CS_OFF;
 80019fa:	4b03      	ldr	r3, [pc, #12]	@ (8001a08 <LCD_IO_WriteCmd8MultipleData16+0xb8>)
 80019fc:	2201      	movs	r2, #1
 80019fe:	601a      	str	r2, [r3, #0]
}
 8001a00:	bf00      	nop
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	424102b4 	.word	0x424102b4
 8001a0c:	424102b8 	.word	0x424102b8
 8001a10:	20000090 	.word	0x20000090
 8001a14:	40020400 	.word	0x40020400
 8001a18:	424102bc 	.word	0x424102bc

08001a1c <LCD_IO_ReadCmd8MultipleData8>:
}

//-----------------------------------------------------------------------------
#if GPIOX_PORTNUM(LCD_RD) >= GPIOX_PORTNUM_A
void LCD_IO_ReadCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size, uint32_t DummySize)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60b9      	str	r1, [r7, #8]
 8001a24:	607a      	str	r2, [r7, #4]
 8001a26:	603b      	str	r3, [r7, #0]
 8001a28:	4603      	mov	r3, r0
 8001a2a:	73fb      	strb	r3, [r7, #15]
  uint8_t  d;
  LCD_CS_ON;
 8001a2c:	4b2c      	ldr	r3, [pc, #176]	@ (8001ae0 <LCD_IO_ReadCmd8MultipleData8+0xc4>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
  LCD_CMD8_WRITE(Cmd);
 8001a32:	4b2c      	ldr	r3, [pc, #176]	@ (8001ae4 <LCD_IO_ReadCmd8MultipleData8+0xc8>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	4a2b      	ldr	r2, [pc, #172]	@ (8001ae8 <LCD_IO_ReadCmd8MultipleData8+0xcc>)
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
 8001a3c:	7013      	strb	r3, [r2, #0]
 8001a3e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ae8 <LCD_IO_ReadCmd8MultipleData8+0xcc>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8001a46:	4b29      	ldr	r3, [pc, #164]	@ (8001aec <LCD_IO_ReadCmd8MultipleData8+0xd0>)
 8001a48:	619a      	str	r2, [r3, #24]
 8001a4a:	4b29      	ldr	r3, [pc, #164]	@ (8001af0 <LCD_IO_ReadCmd8MultipleData8+0xd4>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	2008      	movs	r0, #8
 8001a52:	f7ff fd55 	bl	8001500 <LCD_IO_Delay>
 8001a56:	4b26      	ldr	r3, [pc, #152]	@ (8001af0 <LCD_IO_ReadCmd8MultipleData8+0xd4>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	4b21      	ldr	r3, [pc, #132]	@ (8001ae4 <LCD_IO_ReadCmd8MultipleData8+0xc8>)
 8001a5e:	2201      	movs	r2, #1
 8001a60:	601a      	str	r2, [r3, #0]
  LCD_DIRREAD;
 8001a62:	4b22      	ldr	r3, [pc, #136]	@ (8001aec <LCD_IO_ReadCmd8MultipleData8+0xd0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a21      	ldr	r2, [pc, #132]	@ (8001aec <LCD_IO_ReadCmd8MultipleData8+0xd0>)
 8001a68:	0c1b      	lsrs	r3, r3, #16
 8001a6a:	041b      	lsls	r3, r3, #16
 8001a6c:	6013      	str	r3, [r2, #0]
  while(DummySize--)
 8001a6e:	e008      	b.n	8001a82 <LCD_IO_ReadCmd8MultipleData8+0x66>
    LCD_DUMMY_READ;
 8001a70:	4b20      	ldr	r3, [pc, #128]	@ (8001af4 <LCD_IO_ReadCmd8MultipleData8+0xd8>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	2012      	movs	r0, #18
 8001a78:	f7ff fd42 	bl	8001500 <LCD_IO_Delay>
 8001a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001af4 <LCD_IO_ReadCmd8MultipleData8+0xd8>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	601a      	str	r2, [r3, #0]
  while(DummySize--)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	1e5a      	subs	r2, r3, #1
 8001a86:	603a      	str	r2, [r7, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1f1      	bne.n	8001a70 <LCD_IO_ReadCmd8MultipleData8+0x54>
  while(Size--)
 8001a8c:	e011      	b.n	8001ab2 <LCD_IO_ReadCmd8MultipleData8+0x96>
  {
    LCD_DATA8_READ(d);
 8001a8e:	4b19      	ldr	r3, [pc, #100]	@ (8001af4 <LCD_IO_ReadCmd8MultipleData8+0xd8>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	2012      	movs	r0, #18
 8001a96:	f7ff fd33 	bl	8001500 <LCD_IO_Delay>
 8001a9a:	4b14      	ldr	r3, [pc, #80]	@ (8001aec <LCD_IO_ReadCmd8MultipleData8+0xd0>)
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	75fb      	strb	r3, [r7, #23]
 8001aa0:	4b14      	ldr	r3, [pc, #80]	@ (8001af4 <LCD_IO_ReadCmd8MultipleData8+0xd8>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]
    *pData = d;
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	7dfa      	ldrb	r2, [r7, #23]
 8001aaa:	701a      	strb	r2, [r3, #0]
    pData++;
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	1e5a      	subs	r2, r3, #1
 8001ab6:	607a      	str	r2, [r7, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1e8      	bne.n	8001a8e <LCD_IO_ReadCmd8MultipleData8+0x72>
  }
  LCD_CS_OFF;
 8001abc:	4b08      	ldr	r3, [pc, #32]	@ (8001ae0 <LCD_IO_ReadCmd8MultipleData8+0xc4>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	601a      	str	r2, [r3, #0]
  LCD_DIRWRITE;
 8001ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8001aec <LCD_IO_ReadCmd8MultipleData8+0xd0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	0c1b      	lsrs	r3, r3, #16
 8001ac8:	041b      	lsls	r3, r3, #16
 8001aca:	4a08      	ldr	r2, [pc, #32]	@ (8001aec <LCD_IO_ReadCmd8MultipleData8+0xd0>)
 8001acc:	f443 43aa 	orr.w	r3, r3, #21760	@ 0x5500
 8001ad0:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 8001ad4:	6013      	str	r3, [r2, #0]
}
 8001ad6:	bf00      	nop
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	424102b4 	.word	0x424102b4
 8001ae4:	424102b8 	.word	0x424102b8
 8001ae8:	20000090 	.word	0x20000090
 8001aec:	40020400 	.word	0x40020400
 8001af0:	424102bc 	.word	0x424102bc
 8001af4:	424082a8 	.word	0x424082a8

08001af8 <LCD_IO_ReadCmd8MultipleData24to16>:
  LCD_DIRWRITE;
}

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd8MultipleData24to16(uint8_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60b9      	str	r1, [r7, #8]
 8001b00:	607a      	str	r2, [r7, #4]
 8001b02:	603b      	str	r3, [r7, #0]
 8001b04:	4603      	mov	r3, r0
 8001b06:	73fb      	strb	r3, [r7, #15]
  uint8_t  rgb888[3];
  LCD_CS_ON;
 8001b08:	4b44      	ldr	r3, [pc, #272]	@ (8001c1c <LCD_IO_ReadCmd8MultipleData24to16+0x124>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
  LCD_CMD8_WRITE(Cmd);
 8001b0e:	4b44      	ldr	r3, [pc, #272]	@ (8001c20 <LCD_IO_ReadCmd8MultipleData24to16+0x128>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	4a43      	ldr	r2, [pc, #268]	@ (8001c24 <LCD_IO_ReadCmd8MultipleData24to16+0x12c>)
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
 8001b18:	7013      	strb	r3, [r2, #0]
 8001b1a:	4b42      	ldr	r3, [pc, #264]	@ (8001c24 <LCD_IO_ReadCmd8MultipleData24to16+0x12c>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8001b22:	4b41      	ldr	r3, [pc, #260]	@ (8001c28 <LCD_IO_ReadCmd8MultipleData24to16+0x130>)
 8001b24:	619a      	str	r2, [r3, #24]
 8001b26:	4b41      	ldr	r3, [pc, #260]	@ (8001c2c <LCD_IO_ReadCmd8MultipleData24to16+0x134>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	2008      	movs	r0, #8
 8001b2e:	f7ff fce7 	bl	8001500 <LCD_IO_Delay>
 8001b32:	4b3e      	ldr	r3, [pc, #248]	@ (8001c2c <LCD_IO_ReadCmd8MultipleData24to16+0x134>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	4b39      	ldr	r3, [pc, #228]	@ (8001c20 <LCD_IO_ReadCmd8MultipleData24to16+0x128>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	601a      	str	r2, [r3, #0]
  LCD_DIRREAD;
 8001b3e:	4b3a      	ldr	r3, [pc, #232]	@ (8001c28 <LCD_IO_ReadCmd8MultipleData24to16+0x130>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a39      	ldr	r2, [pc, #228]	@ (8001c28 <LCD_IO_ReadCmd8MultipleData24to16+0x130>)
 8001b44:	0c1b      	lsrs	r3, r3, #16
 8001b46:	041b      	lsls	r3, r3, #16
 8001b48:	6013      	str	r3, [r2, #0]
  while(DummySize--)
 8001b4a:	e008      	b.n	8001b5e <LCD_IO_ReadCmd8MultipleData24to16+0x66>
    LCD_DUMMY_READ;
 8001b4c:	4b38      	ldr	r3, [pc, #224]	@ (8001c30 <LCD_IO_ReadCmd8MultipleData24to16+0x138>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	2012      	movs	r0, #18
 8001b54:	f7ff fcd4 	bl	8001500 <LCD_IO_Delay>
 8001b58:	4b35      	ldr	r3, [pc, #212]	@ (8001c30 <LCD_IO_ReadCmd8MultipleData24to16+0x138>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]
  while(DummySize--)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	1e5a      	subs	r2, r3, #1
 8001b62:	603a      	str	r2, [r7, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d1f1      	bne.n	8001b4c <LCD_IO_ReadCmd8MultipleData24to16+0x54>
  while(Size--)
 8001b68:	e042      	b.n	8001bf0 <LCD_IO_ReadCmd8MultipleData24to16+0xf8>
  {
    LCD_DATA8_READ(rgb888[0]);
 8001b6a:	4b31      	ldr	r3, [pc, #196]	@ (8001c30 <LCD_IO_ReadCmd8MultipleData24to16+0x138>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	2012      	movs	r0, #18
 8001b72:	f7ff fcc5 	bl	8001500 <LCD_IO_Delay>
 8001b76:	4b2c      	ldr	r3, [pc, #176]	@ (8001c28 <LCD_IO_ReadCmd8MultipleData24to16+0x130>)
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	753b      	strb	r3, [r7, #20]
 8001b7e:	4b2c      	ldr	r3, [pc, #176]	@ (8001c30 <LCD_IO_ReadCmd8MultipleData24to16+0x138>)
 8001b80:	2201      	movs	r2, #1
 8001b82:	601a      	str	r2, [r3, #0]
    LCD_DATA8_READ(rgb888[1]);
 8001b84:	4b2a      	ldr	r3, [pc, #168]	@ (8001c30 <LCD_IO_ReadCmd8MultipleData24to16+0x138>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	2012      	movs	r0, #18
 8001b8c:	f7ff fcb8 	bl	8001500 <LCD_IO_Delay>
 8001b90:	4b25      	ldr	r3, [pc, #148]	@ (8001c28 <LCD_IO_ReadCmd8MultipleData24to16+0x130>)
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	757b      	strb	r3, [r7, #21]
 8001b98:	4b25      	ldr	r3, [pc, #148]	@ (8001c30 <LCD_IO_ReadCmd8MultipleData24to16+0x138>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	601a      	str	r2, [r3, #0]
    LCD_DATA8_READ(rgb888[2]);
 8001b9e:	4b24      	ldr	r3, [pc, #144]	@ (8001c30 <LCD_IO_ReadCmd8MultipleData24to16+0x138>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	2012      	movs	r0, #18
 8001ba6:	f7ff fcab 	bl	8001500 <LCD_IO_Delay>
 8001baa:	4b1f      	ldr	r3, [pc, #124]	@ (8001c28 <LCD_IO_ReadCmd8MultipleData24to16+0x130>)
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	75bb      	strb	r3, [r7, #22]
 8001bb2:	4b1f      	ldr	r3, [pc, #124]	@ (8001c30 <LCD_IO_ReadCmd8MultipleData24to16+0x138>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]
    #if LCD_REVERSE16 == 0
    *pData = ((rgb888[0] & 0xF8) << 8 | (rgb888[1] & 0xFC) << 3 | rgb888[2] >> 3);
 8001bb8:	7d3b      	ldrb	r3, [r7, #20]
 8001bba:	021b      	lsls	r3, r3, #8
 8001bbc:	b21b      	sxth	r3, r3
 8001bbe:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001bc2:	f023 0307 	bic.w	r3, r3, #7
 8001bc6:	b21a      	sxth	r2, r3
 8001bc8:	7d7b      	ldrb	r3, [r7, #21]
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	b21b      	sxth	r3, r3
 8001bce:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8001bd2:	b21b      	sxth	r3, r3
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	b21a      	sxth	r2, r3
 8001bd8:	7dbb      	ldrb	r3, [r7, #22]
 8001bda:	08db      	lsrs	r3, r3, #3
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	b21b      	sxth	r3, r3
 8001be0:	4313      	orrs	r3, r2
 8001be2:	b21b      	sxth	r3, r3
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	801a      	strh	r2, [r3, #0]
    #else
    *pData = __REVSH((rgb888[0] & 0xF8) << 8 | (rgb888[1] & 0xFC) << 3 | rgb888[2] >> 3);
    #endif
    pData++;
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	3302      	adds	r3, #2
 8001bee:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	1e5a      	subs	r2, r3, #1
 8001bf4:	607a      	str	r2, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1b7      	bne.n	8001b6a <LCD_IO_ReadCmd8MultipleData24to16+0x72>
  }
  LCD_CS_OFF;
 8001bfa:	4b08      	ldr	r3, [pc, #32]	@ (8001c1c <LCD_IO_ReadCmd8MultipleData24to16+0x124>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]
  LCD_DIRWRITE;
 8001c00:	4b09      	ldr	r3, [pc, #36]	@ (8001c28 <LCD_IO_ReadCmd8MultipleData24to16+0x130>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	0c1b      	lsrs	r3, r3, #16
 8001c06:	041b      	lsls	r3, r3, #16
 8001c08:	4a07      	ldr	r2, [pc, #28]	@ (8001c28 <LCD_IO_ReadCmd8MultipleData24to16+0x130>)
 8001c0a:	f443 43aa 	orr.w	r3, r3, #21760	@ 0x5500
 8001c0e:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 8001c12:	6013      	str	r3, [r2, #0]
}
 8001c14:	bf00      	nop
 8001c16:	3718      	adds	r7, #24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	424102b4 	.word	0x424102b4
 8001c20:	424102b8 	.word	0x424102b8
 8001c24:	20000090 	.word	0x20000090
 8001c28:	40020400 	.word	0x40020400
 8001c2c:	424102bc 	.word	0x424102bc
 8001c30:	424082a8 	.word	0x424082a8

08001c34 <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	71fb      	strb	r3, [r7, #7]

  /* LCD Init */   
  lcd_drv->Init();
 8001c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c70 <BSP_LCD_Init+0x3c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4798      	blx	r3
  
  /* Default value for draw propriety */
  DrawProp.BackColor = LCD_DEFAULT_BACKCOLOR;
 8001c46:	4b0b      	ldr	r3, [pc, #44]	@ (8001c74 <BSP_LCD_Init+0x40>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	605a      	str	r2, [r3, #4]
  DrawProp.TextColor = LCD_DEFAULT_TEXTCOLOR;
 8001c4c:	4b09      	ldr	r3, [pc, #36]	@ (8001c74 <BSP_LCD_Init+0x40>)
 8001c4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c52:	601a      	str	r2, [r3, #0]
  DrawProp.pFont     = &LCD_DEFAULT_FONT;
 8001c54:	4b07      	ldr	r3, [pc, #28]	@ (8001c74 <BSP_LCD_Init+0x40>)
 8001c56:	4a08      	ldr	r2, [pc, #32]	@ (8001c78 <BSP_LCD_Init+0x44>)
 8001c58:	609a      	str	r2, [r3, #8]
  
  /* Clear the LCD screen */
  #if LCD_INIT_CLEAR == 1
  BSP_LCD_Clear(LCD_DEFAULT_BACKCOLOR);
 8001c5a:	2000      	movs	r0, #0
 8001c5c:	f000 f846 	bl	8001cec <BSP_LCD_Clear>
  #endif
  
  ret = LCD_OK;
 8001c60:	2300      	movs	r3, #0
 8001c62:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8001c64:	79fb      	ldrb	r3, [r7, #7]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000054 	.word	0x20000054
 8001c74:	20000094 	.word	0x20000094
 8001c78:	20000008 	.word	0x20000008

08001c7c <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None    
  * @retval Used LCD X size
  */
uint16_t BSP_LCD_GetXSize(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 8001c80:	4b03      	ldr	r3, [pc, #12]	@ (8001c90 <BSP_LCD_GetXSize+0x14>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c86:	4798      	blx	r3
 8001c88:	4603      	mov	r3, r0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000054 	.word	0x20000054

08001c94 <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None   
  * @retval Used LCD Y size
  */
uint16_t BSP_LCD_GetYSize(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 8001c98:	4b03      	ldr	r3, [pc, #12]	@ (8001ca8 <BSP_LCD_GetYSize+0x14>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c9e:	4798      	blx	r3
 8001ca0:	4603      	mov	r3, r0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000054 	.word	0x20000054

08001cac <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8001cb6:	88fb      	ldrh	r3, [r7, #6]
 8001cb8:	4a03      	ldr	r2, [pc, #12]	@ (8001cc8 <BSP_LCD_SetTextColor+0x1c>)
 8001cba:	6013      	str	r3, [r2, #0]
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	20000094 	.word	0x20000094

08001ccc <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = pFonts;
 8001cd4:	4a04      	ldr	r2, [pc, #16]	@ (8001ce8 <BSP_LCD_SetFont+0x1c>)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6093      	str	r3, [r2, #8]
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	20000094 	.word	0x20000094

08001cec <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{
 8001cec:	b5b0      	push	{r4, r5, r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af02      	add	r7, sp, #8
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	80fb      	strh	r3, [r7, #6]
  lcd_drv->FillRect(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), Color);
 8001cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8001d24 <BSP_LCD_Clear+0x38>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8001cfc:	f7ff ffbe 	bl	8001c7c <BSP_LCD_GetXSize>
 8001d00:	4603      	mov	r3, r0
 8001d02:	461d      	mov	r5, r3
 8001d04:	f7ff ffc6 	bl	8001c94 <BSP_LCD_GetYSize>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	88fb      	ldrh	r3, [r7, #6]
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	4613      	mov	r3, r2
 8001d12:	462a      	mov	r2, r5
 8001d14:	2100      	movs	r1, #0
 8001d16:	2000      	movs	r0, #0
 8001d18:	47a0      	blx	r4
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bdb0      	pop	{r4, r5, r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20000054 	.word	0x20000054

08001d28 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8001d28:	b4b0      	push	{r4, r5, r7}
 8001d2a:	b08f      	sub	sp, #60	@ 0x3c
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8001d30:	f240 13b1 	movw	r3, #433	@ 0x1b1
 8001d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8001d36:	2307      	movs	r3, #7
 8001d38:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8001d3c:	2307      	movs	r3, #7
 8001d3e:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8001d42:	2301      	movs	r3, #1
 8001d44:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 8001d48:	23ff      	movs	r3, #255	@ 0xff
 8001d4a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8001d4e:	2364      	movs	r3, #100	@ 0x64
 8001d50:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 8001d54:	2308      	movs	r3, #8
 8001d56:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	461d      	mov	r5, r3
 8001d5c:	f107 040c 	add.w	r4, r7, #12
 8001d60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d68:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001d6c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	373c      	adds	r7, #60	@ 0x3c
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bcb0      	pop	{r4, r5, r7}
 8001d78:	4770      	bx	lr

08001d7a <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b084      	sub	sp, #16
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
 8001d82:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8001d84:	2101      	movs	r1, #1
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 f9ff 	bl	800218a <LoRa_read>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	73bb      	strb	r3, [r7, #14]
	data = read;
 8001d90:	7bbb      	ldrb	r3, [r7, #14]
 8001d92:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d107      	bne.n	8001daa <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8001d9a:	7bbb      	ldrb	r3, [r7, #14]
 8001d9c:	f023 0307 	bic.w	r3, r3, #7
 8001da0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	61da      	str	r2, [r3, #28]
 8001da8:	e03e      	b.n	8001e28 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d10c      	bne.n	8001dca <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8001db0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001db4:	f023 0307 	bic.w	r3, r3, #7
 8001db8:	b25b      	sxtb	r3, r3
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	b25b      	sxtb	r3, r3
 8001dc0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	61da      	str	r2, [r3, #28]
 8001dc8:	e02e      	b.n	8001e28 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	2b03      	cmp	r3, #3
 8001dce:	d10c      	bne.n	8001dea <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8001dd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001dd4:	f023 0307 	bic.w	r3, r3, #7
 8001dd8:	b25b      	sxtb	r3, r3
 8001dda:	f043 0303 	orr.w	r3, r3, #3
 8001dde:	b25b      	sxtb	r3, r3
 8001de0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2203      	movs	r2, #3
 8001de6:	61da      	str	r2, [r3, #28]
 8001de8:	e01e      	b.n	8001e28 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	2b05      	cmp	r3, #5
 8001dee:	d10c      	bne.n	8001e0a <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8001df0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001df4:	f023 0307 	bic.w	r3, r3, #7
 8001df8:	b25b      	sxtb	r3, r3
 8001dfa:	f043 0305 	orr.w	r3, r3, #5
 8001dfe:	b25b      	sxtb	r3, r3
 8001e00:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2205      	movs	r2, #5
 8001e06:	61da      	str	r2, [r3, #28]
 8001e08:	e00e      	b.n	8001e28 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	2b06      	cmp	r3, #6
 8001e0e:	d10b      	bne.n	8001e28 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8001e10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001e14:	f023 0307 	bic.w	r3, r3, #7
 8001e18:	b25b      	sxtb	r3, r3
 8001e1a:	f043 0306 	orr.w	r3, r3, #6
 8001e1e:	b25b      	sxtb	r3, r3
 8001e20:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2206      	movs	r2, #6
 8001e26:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f9c5 	bl	80021be <LoRa_write>
	//HAL_Delay(10);
}
 8001e34:	bf00      	nop
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	603b      	str	r3, [r7, #0]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6818      	ldr	r0, [r3, #0]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	889b      	ldrh	r3, [r3, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	4619      	mov	r1, r3
 8001e58:	f001 fa1a 	bl	8003290 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6998      	ldr	r0, [r3, #24]
 8001e60:	88fa      	ldrh	r2, [r7, #6]
 8001e62:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001e66:	68b9      	ldr	r1, [r7, #8]
 8001e68:	f001 ff0b 	bl	8003c82 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001e6c:	bf00      	nop
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f002 fb10 	bl	8004498 <HAL_SPI_GetState>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d1f7      	bne.n	8001e6e <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6998      	ldr	r0, [r3, #24]
 8001e82:	8b3a      	ldrh	r2, [r7, #24]
 8001e84:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001e88:	6839      	ldr	r1, [r7, #0]
 8001e8a:	f002 f83d 	bl	8003f08 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001e8e:	bf00      	nop
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f002 faff 	bl	8004498 <HAL_SPI_GetState>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d1f7      	bne.n	8001e90 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6818      	ldr	r0, [r3, #0]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	889b      	ldrh	r3, [r3, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	4619      	mov	r1, r3
 8001eac:	f001 f9f0 	bl	8003290 <HAL_GPIO_WritePin>
}
 8001eb0:	bf00      	nop
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	603b      	str	r3, [r7, #0]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6818      	ldr	r0, [r3, #0]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	889b      	ldrh	r3, [r3, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	f001 f9dc 	bl	8003290 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6998      	ldr	r0, [r3, #24]
 8001edc:	88fa      	ldrh	r2, [r7, #6]
 8001ede:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001ee2:	68b9      	ldr	r1, [r7, #8]
 8001ee4:	f001 fecd 	bl	8003c82 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001ee8:	bf00      	nop
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f002 fad2 	bl	8004498 <HAL_SPI_GetState>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d1f7      	bne.n	8001eea <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6998      	ldr	r0, [r3, #24]
 8001efe:	8b3a      	ldrh	r2, [r7, #24]
 8001f00:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001f04:	6839      	ldr	r1, [r7, #0]
 8001f06:	f001 febc 	bl	8003c82 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001f0a:	bf00      	nop
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f002 fac1 	bl	8004498 <HAL_SPI_GetState>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d1f7      	bne.n	8001f0c <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6818      	ldr	r0, [r3, #0]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	889b      	ldrh	r3, [r3, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	4619      	mov	r1, r3
 8001f28:	f001 f9b2 	bl	8003290 <HAL_GPIO_WritePin>
}
 8001f2c:	bf00      	nop
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8001f40:	2126      	movs	r1, #38	@ 0x26
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f921 	bl	800218a <LoRa_read>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 8001f4c:	78fb      	ldrb	r3, [r7, #3]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d004      	beq.n	8001f5c <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 8001f52:	7bbb      	ldrb	r3, [r7, #14]
 8001f54:	f043 0308 	orr.w	r3, r3, #8
 8001f58:	73fb      	strb	r3, [r7, #15]
 8001f5a:	e003      	b.n	8001f64 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8001f5c:	7bbb      	ldrb	r3, [r7, #14]
 8001f5e:	f023 0308 	bic.w	r3, r3, #8
 8001f62:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8001f64:	7bfb      	ldrb	r3, [r7, #15]
 8001f66:	461a      	mov	r2, r3
 8001f68:	2126      	movs	r1, #38	@ 0x26
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f927 	bl	80021be <LoRa_write>
	HAL_Delay(10);
 8001f70:	200a      	movs	r0, #10
 8001f72:	f000 fed3 	bl	8002d1c <HAL_Delay>
}
 8001f76:	bf00      	nop
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
	...

08001f80 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b096      	sub	sp, #88	@ 0x58
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8001f88:	4a17      	ldr	r2, [pc, #92]	@ (8001fe8 <LoRa_setAutoLDO+0x68>)
 8001f8a:	f107 0308 	add.w	r3, r7, #8
 8001f8e:	4611      	mov	r1, r2
 8001f90:	2250      	movs	r2, #80	@ 0x50
 8001f92:	4618      	mov	r0, r3
 8001f94:	f003 f836 	bl	8005004 <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	4093      	lsls	r3, r2
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7fe fa69 	bl	800047c <__aeabi_i2d>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	3358      	adds	r3, #88	@ 0x58
 8001fb4:	443b      	add	r3, r7
 8001fb6:	3b50      	subs	r3, #80	@ 0x50
 8001fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbc:	f7fe fbf2 	bl	80007a4 <__aeabi_ddiv>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	4610      	mov	r0, r2
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	f7fe fcd4 	bl	8000974 <__aeabi_d2iz>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b10      	cmp	r3, #16
 8001fd0:	bfcc      	ite	gt
 8001fd2:	2301      	movgt	r3, #1
 8001fd4:	2300      	movle	r3, #0
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	4619      	mov	r1, r3
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7ff ffaa 	bl	8001f34 <LoRa_setLowDaraRateOptimization>
}
 8001fe0:	bf00      	nop
 8001fe2:	3758      	adds	r7, #88	@ 0x58
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	08005070 	.word	0x08005070

08001fec <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	04db      	lsls	r3, r3, #19
 8001ffa:	115b      	asrs	r3, r3, #5
 8001ffc:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	0c1b      	lsrs	r3, r3, #16
 8002002:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8002004:	7afb      	ldrb	r3, [r7, #11]
 8002006:	461a      	mov	r2, r3
 8002008:	2106      	movs	r1, #6
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f8d7 	bl	80021be <LoRa_write>
	HAL_Delay(5);
 8002010:	2005      	movs	r0, #5
 8002012:	f000 fe83 	bl	8002d1c <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	0a1b      	lsrs	r3, r3, #8
 800201a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 800201c:	7afb      	ldrb	r3, [r7, #11]
 800201e:	461a      	mov	r2, r3
 8002020:	2107      	movs	r1, #7
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f8cb 	bl	80021be <LoRa_write>
	HAL_Delay(5);
 8002028:	2005      	movs	r0, #5
 800202a:	f000 fe77 	bl	8002d1c <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8002032:	7afb      	ldrb	r3, [r7, #11]
 8002034:	461a      	mov	r2, r3
 8002036:	2108      	movs	r1, #8
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 f8c0 	bl	80021be <LoRa_write>
	HAL_Delay(5);
 800203e:	2005      	movs	r0, #5
 8002040:	f000 fe6c 	bl	8002d1c <HAL_Delay>
}
 8002044:	bf00      	nop
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	2b0c      	cmp	r3, #12
 800205a:	dd01      	ble.n	8002060 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 800205c:	230c      	movs	r3, #12
 800205e:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	2b06      	cmp	r3, #6
 8002064:	dc01      	bgt.n	800206a <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8002066:	2307      	movs	r3, #7
 8002068:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 800206a:	211e      	movs	r1, #30
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 f88c 	bl	800218a <LoRa_read>
 8002072:	4603      	mov	r3, r0
 8002074:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8002076:	200a      	movs	r0, #10
 8002078:	f000 fe50 	bl	8002d1c <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	b2db      	uxtb	r3, r3
 8002080:	011b      	lsls	r3, r3, #4
 8002082:	b2da      	uxtb	r2, r3
 8002084:	7bfb      	ldrb	r3, [r7, #15]
 8002086:	f003 030f 	and.w	r3, r3, #15
 800208a:	b2db      	uxtb	r3, r3
 800208c:	4413      	add	r3, r2
 800208e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8002090:	7bbb      	ldrb	r3, [r7, #14]
 8002092:	461a      	mov	r2, r3
 8002094:	211e      	movs	r1, #30
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f891 	bl	80021be <LoRa_write>
	HAL_Delay(10);
 800209c:	200a      	movs	r0, #10
 800209e:	f000 fe3d 	bl	8002d1c <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7ff ff6c 	bl	8001f80 <LoRa_setAutoLDO>
}
 80020a8:	bf00      	nop
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	460b      	mov	r3, r1
 80020ba:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 80020bc:	78fb      	ldrb	r3, [r7, #3]
 80020be:	461a      	mov	r2, r3
 80020c0:	2109      	movs	r1, #9
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f87b 	bl	80021be <LoRa_write>
	HAL_Delay(10);
 80020c8:	200a      	movs	r0, #10
 80020ca:	f000 fe27 	bl	8002d1c <HAL_Delay>
}
 80020ce:	bf00      	nop
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
	...

080020d8 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	460b      	mov	r3, r1
 80020e2:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 80020e4:	2300      	movs	r3, #0
 80020e6:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 80020e8:	78fb      	ldrb	r3, [r7, #3]
 80020ea:	2b2c      	cmp	r3, #44	@ 0x2c
 80020ec:	d801      	bhi.n	80020f2 <LoRa_setOCP+0x1a>
		current = 45;
 80020ee:	232d      	movs	r3, #45	@ 0x2d
 80020f0:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 80020f2:	78fb      	ldrb	r3, [r7, #3]
 80020f4:	2bf0      	cmp	r3, #240	@ 0xf0
 80020f6:	d901      	bls.n	80020fc <LoRa_setOCP+0x24>
		current = 240;
 80020f8:	23f0      	movs	r3, #240	@ 0xf0
 80020fa:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 80020fc:	78fb      	ldrb	r3, [r7, #3]
 80020fe:	2b78      	cmp	r3, #120	@ 0x78
 8002100:	d809      	bhi.n	8002116 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8002102:	78fb      	ldrb	r3, [r7, #3]
 8002104:	3b2d      	subs	r3, #45	@ 0x2d
 8002106:	4a12      	ldr	r2, [pc, #72]	@ (8002150 <LoRa_setOCP+0x78>)
 8002108:	fb82 1203 	smull	r1, r2, r2, r3
 800210c:	1052      	asrs	r2, r2, #1
 800210e:	17db      	asrs	r3, r3, #31
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	73fb      	strb	r3, [r7, #15]
 8002114:	e00b      	b.n	800212e <LoRa_setOCP+0x56>
	else if(current <= 240)
 8002116:	78fb      	ldrb	r3, [r7, #3]
 8002118:	2bf0      	cmp	r3, #240	@ 0xf0
 800211a:	d808      	bhi.n	800212e <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 800211c:	78fb      	ldrb	r3, [r7, #3]
 800211e:	331e      	adds	r3, #30
 8002120:	4a0b      	ldr	r2, [pc, #44]	@ (8002150 <LoRa_setOCP+0x78>)
 8002122:	fb82 1203 	smull	r1, r2, r2, r3
 8002126:	1092      	asrs	r2, r2, #2
 8002128:	17db      	asrs	r3, r3, #31
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 800212e:	7bfb      	ldrb	r3, [r7, #15]
 8002130:	3320      	adds	r3, #32
 8002132:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8002134:	7bfb      	ldrb	r3, [r7, #15]
 8002136:	461a      	mov	r2, r3
 8002138:	210b      	movs	r1, #11
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f83f 	bl	80021be <LoRa_write>
	HAL_Delay(10);
 8002140:	200a      	movs	r0, #10
 8002142:	f000 fdeb 	bl	8002d1c <HAL_Delay>
}
 8002146:	bf00      	nop
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	66666667 	.word	0x66666667

08002154 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 800215c:	211e      	movs	r1, #30
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f813 	bl	800218a <LoRa_read>
 8002164:	4603      	mov	r3, r0
 8002166:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8002168:	7bfb      	ldrb	r3, [r7, #15]
 800216a:	f043 0307 	orr.w	r3, r3, #7
 800216e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8002170:	7bbb      	ldrb	r3, [r7, #14]
 8002172:	461a      	mov	r2, r3
 8002174:	211e      	movs	r1, #30
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f821 	bl	80021be <LoRa_write>
	HAL_Delay(10);
 800217c:	200a      	movs	r0, #10
 800217e:	f000 fdcd 	bl	8002d1c <HAL_Delay>
}
 8002182:	bf00      	nop
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 800218a:	b580      	push	{r7, lr}
 800218c:	b086      	sub	sp, #24
 800218e:	af02      	add	r7, sp, #8
 8002190:	6078      	str	r0, [r7, #4]
 8002192:	460b      	mov	r3, r1
 8002194:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8002196:	78fb      	ldrb	r3, [r7, #3]
 8002198:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800219c:	b2db      	uxtb	r3, r3
 800219e:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80021a0:	f107 030f 	add.w	r3, r7, #15
 80021a4:	f107 010e 	add.w	r1, r7, #14
 80021a8:	2201      	movs	r2, #1
 80021aa:	9200      	str	r2, [sp, #0]
 80021ac:	2201      	movs	r2, #1
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff fe44 	bl	8001e3c <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 80021be:	b580      	push	{r7, lr}
 80021c0:	b086      	sub	sp, #24
 80021c2:	af02      	add	r7, sp, #8
 80021c4:	6078      	str	r0, [r7, #4]
 80021c6:	460b      	mov	r3, r1
 80021c8:	70fb      	strb	r3, [r7, #3]
 80021ca:	4613      	mov	r3, r2
 80021cc:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 80021ce:	78fb      	ldrb	r3, [r7, #3]
 80021d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	73bb      	strb	r3, [r7, #14]
	data = value;
 80021d8:	78bb      	ldrb	r3, [r7, #2]
 80021da:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 80021dc:	f107 030f 	add.w	r3, r7, #15
 80021e0:	f107 010e 	add.w	r1, r7, #14
 80021e4:	2201      	movs	r2, #1
 80021e6:	9200      	str	r2, [sp, #0]
 80021e8:	2201      	movs	r2, #1
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7ff fe64 	bl	8001eb8 <LoRa_writeReg>
	//HAL_Delay(5);
}
 80021f0:	bf00      	nop
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	607a      	str	r2, [r7, #4]
 8002202:	461a      	mov	r2, r3
 8002204:	460b      	mov	r3, r1
 8002206:	72fb      	strb	r3, [r7, #11]
 8002208:	4613      	mov	r3, r2
 800220a:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 800220c:	7afb      	ldrb	r3, [r7, #11]
 800220e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002212:	b2db      	uxtb	r3, r3
 8002214:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6818      	ldr	r0, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	889b      	ldrh	r3, [r3, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	4619      	mov	r1, r3
 8002222:	f001 f835 	bl	8003290 <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6998      	ldr	r0, [r3, #24]
 800222a:	f107 0117 	add.w	r1, r7, #23
 800222e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002232:	2201      	movs	r2, #1
 8002234:	f001 fd25 	bl	8003c82 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8002238:	bf00      	nop
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	4618      	mov	r0, r3
 8002240:	f002 f92a 	bl	8004498 <HAL_SPI_GetState>
 8002244:	4603      	mov	r3, r0
 8002246:	2b01      	cmp	r3, #1
 8002248:	d1f7      	bne.n	800223a <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6998      	ldr	r0, [r3, #24]
 800224e:	7abb      	ldrb	r3, [r7, #10]
 8002250:	b29a      	uxth	r2, r3
 8002252:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	f001 fd13 	bl	8003c82 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800225c:	bf00      	nop
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	4618      	mov	r0, r3
 8002264:	f002 f918 	bl	8004498 <HAL_SPI_GetState>
 8002268:	4603      	mov	r3, r0
 800226a:	2b01      	cmp	r3, #1
 800226c:	d1f7      	bne.n	800225e <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6818      	ldr	r0, [r3, #0]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	889b      	ldrh	r3, [r3, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	4619      	mov	r1, r3
 800227a:	f001 f809 	bl	8003290 <HAL_GPIO_WritePin>
}
 800227e:	bf00      	nop
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]

	return 1;
 800228e:	2301      	movs	r3, #1
}
 8002290:	4618      	mov	r0, r3
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	4611      	mov	r1, r2
 80022a8:	461a      	mov	r2, r3
 80022aa:	460b      	mov	r3, r1
 80022ac:	71fb      	strb	r3, [r7, #7]
 80022ae:	4613      	mov	r3, r2
 80022b0:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80022b8:	2101      	movs	r1, #1
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f7ff fd5d 	bl	8001d7a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 80022c0:	210e      	movs	r1, #14
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f7ff ff61 	bl	800218a <LoRa_read>
 80022c8:	4603      	mov	r3, r0
 80022ca:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80022cc:	7cfb      	ldrb	r3, [r7, #19]
 80022ce:	461a      	mov	r2, r3
 80022d0:	210d      	movs	r1, #13
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f7ff ff73 	bl	80021be <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 80022d8:	79fb      	ldrb	r3, [r7, #7]
 80022da:	461a      	mov	r2, r3
 80022dc:	2122      	movs	r1, #34	@ 0x22
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f7ff ff6d 	bl	80021be <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 80022e4:	79fb      	ldrb	r3, [r7, #7]
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	2100      	movs	r1, #0
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f7ff ff84 	bl	80021f8 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 80022f0:	2103      	movs	r1, #3
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f7ff fd41 	bl	8001d7a <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 80022f8:	2112      	movs	r1, #18
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f7ff ff45 	bl	800218a <LoRa_read>
 8002300:	4603      	mov	r3, r0
 8002302:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8002304:	7cfb      	ldrb	r3, [r7, #19]
 8002306:	f003 0308 	and.w	r3, r3, #8
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00a      	beq.n	8002324 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 800230e:	22ff      	movs	r2, #255	@ 0xff
 8002310:	2112      	movs	r1, #18
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f7ff ff53 	bl	80021be <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8002318:	6979      	ldr	r1, [r7, #20]
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f7ff fd2d 	bl	8001d7a <LoRa_gotoMode>
			return 1;
 8002320:	2301      	movs	r3, #1
 8002322:	e00f      	b.n	8002344 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8002324:	88bb      	ldrh	r3, [r7, #4]
 8002326:	3b01      	subs	r3, #1
 8002328:	80bb      	strh	r3, [r7, #4]
 800232a:	88bb      	ldrh	r3, [r7, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d105      	bne.n	800233c <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8002330:	6979      	ldr	r1, [r7, #20]
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f7ff fd21 	bl	8001d7a <LoRa_gotoMode>
				return 0;
 8002338:	2300      	movs	r3, #0
 800233a:	e003      	b.n	8002344 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 800233c:	2001      	movs	r0, #1
 800233e:	f000 fced 	bl	8002d1c <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8002342:	e7d9      	b.n	80022f8 <LoRa_transmit+0x5c>
	}
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8002354:	2105      	movs	r1, #5
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7ff fd0f 	bl	8001d7a <LoRa_gotoMode>
}
 800235c:	bf00      	nop
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8002364:	b590      	push	{r4, r7, lr}
 8002366:	b089      	sub	sp, #36	@ 0x24
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	4613      	mov	r3, r2
 8002370:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8002372:	2300      	movs	r3, #0
 8002374:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8002376:	2300      	movs	r3, #0
 8002378:	61bb      	str	r3, [r7, #24]
 800237a:	e007      	b.n	800238c <LoRa_receive+0x28>
		data[i]=0;
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	4413      	add	r3, r2
 8002382:	2200      	movs	r2, #0
 8002384:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	3301      	adds	r3, #1
 800238a:	61bb      	str	r3, [r7, #24]
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	429a      	cmp	r2, r3
 8002392:	dbf3      	blt.n	800237c <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8002394:	2101      	movs	r1, #1
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f7ff fcef 	bl	8001d7a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 800239c:	2112      	movs	r1, #18
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f7ff fef3 	bl	800218a <LoRa_read>
 80023a4:	4603      	mov	r3, r0
 80023a6:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 80023a8:	7cfb      	ldrb	r3, [r7, #19]
 80023aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d02f      	beq.n	8002412 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 80023b2:	22ff      	movs	r2, #255	@ 0xff
 80023b4:	2112      	movs	r1, #18
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f7ff ff01 	bl	80021be <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 80023bc:	2113      	movs	r1, #19
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f7ff fee3 	bl	800218a <LoRa_read>
 80023c4:	4603      	mov	r3, r0
 80023c6:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 80023c8:	2110      	movs	r1, #16
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f7ff fedd 	bl	800218a <LoRa_read>
 80023d0:	4603      	mov	r3, r0
 80023d2:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80023d4:	7cfb      	ldrb	r3, [r7, #19]
 80023d6:	461a      	mov	r2, r3
 80023d8:	210d      	movs	r1, #13
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f7ff feef 	bl	80021be <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 80023e0:	7cba      	ldrb	r2, [r7, #18]
 80023e2:	79fb      	ldrb	r3, [r7, #7]
 80023e4:	4293      	cmp	r3, r2
 80023e6:	bf28      	it	cs
 80023e8:	4613      	movcs	r3, r2
 80023ea:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 80023ec:	2300      	movs	r3, #0
 80023ee:	617b      	str	r3, [r7, #20]
 80023f0:	e00b      	b.n	800240a <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	68ba      	ldr	r2, [r7, #8]
 80023f6:	18d4      	adds	r4, r2, r3
 80023f8:	2100      	movs	r1, #0
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f7ff fec5 	bl	800218a <LoRa_read>
 8002400:	4603      	mov	r3, r0
 8002402:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	3301      	adds	r3, #1
 8002408:	617b      	str	r3, [r7, #20]
 800240a:	7ffb      	ldrb	r3, [r7, #31]
 800240c:	697a      	ldr	r2, [r7, #20]
 800240e:	429a      	cmp	r2, r3
 8002410:	dbef      	blt.n	80023f2 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8002412:	2105      	movs	r1, #5
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f7ff fcb0 	bl	8001d7a <LoRa_gotoMode>
    return min;
 800241a:	7ffb      	ldrb	r3, [r7, #31]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3724      	adds	r7, #36	@ 0x24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd90      	pop	{r4, r7, pc}

08002424 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7ff ff2a 	bl	8002286 <LoRa_isvalid>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 8096 	beq.w	8002566 <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 800243a:	2100      	movs	r1, #0
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f7ff fc9c 	bl	8001d7a <LoRa_gotoMode>
			HAL_Delay(10);
 8002442:	200a      	movs	r0, #10
 8002444:	f000 fc6a 	bl	8002d1c <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8002448:	2101      	movs	r1, #1
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7ff fe9d 	bl	800218a <LoRa_read>
 8002450:	4603      	mov	r3, r0
 8002452:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8002454:	200a      	movs	r0, #10
 8002456:	f000 fc61 	bl	8002d1c <HAL_Delay>
			data = read | 0x80;
 800245a:	7bfb      	ldrb	r3, [r7, #15]
 800245c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002460:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8002462:	7bbb      	ldrb	r3, [r7, #14]
 8002464:	461a      	mov	r2, r3
 8002466:	2101      	movs	r1, #1
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f7ff fea8 	bl	80021be <LoRa_write>
			HAL_Delay(100);
 800246e:	2064      	movs	r0, #100	@ 0x64
 8002470:	f000 fc54 	bl	8002d1c <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	4619      	mov	r1, r3
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7ff fdb6 	bl	8001fec <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8002486:	4619      	mov	r1, r3
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f7ff fe11 	bl	80020b0 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8002494:	4619      	mov	r1, r3
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff fe1e 	bl	80020d8 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 800249c:	2223      	movs	r2, #35	@ 0x23
 800249e:	210c      	movs	r1, #12
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f7ff fe8c 	bl	80021be <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7ff fe54 	bl	8002154 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024b2:	4619      	mov	r1, r3
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7ff fdc9 	bl	800204c <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 80024ba:	22ff      	movs	r2, #255	@ 0xff
 80024bc:	211f      	movs	r1, #31
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7ff fe7d 	bl	80021be <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80024ce:	011b      	lsls	r3, r3, #4
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	4413      	add	r3, r2
 80024de:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 80024e0:	7bbb      	ldrb	r3, [r7, #14]
 80024e2:	461a      	mov	r2, r3
 80024e4:	211d      	movs	r1, #29
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7ff fe69 	bl	80021be <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7ff fd47 	bl	8001f80 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024f6:	0a1b      	lsrs	r3, r3, #8
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	461a      	mov	r2, r3
 80024fe:	2120      	movs	r1, #32
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f7ff fe5c 	bl	80021be <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800250a:	b2db      	uxtb	r3, r3
 800250c:	461a      	mov	r2, r3
 800250e:	2121      	movs	r1, #33	@ 0x21
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f7ff fe54 	bl	80021be <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8002516:	2140      	movs	r1, #64	@ 0x40
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f7ff fe36 	bl	800218a <LoRa_read>
 800251e:	4603      	mov	r3, r0
 8002520:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8002522:	7bfb      	ldrb	r3, [r7, #15]
 8002524:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8002528:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 800252a:	7bbb      	ldrb	r3, [r7, #14]
 800252c:	461a      	mov	r2, r3
 800252e:	2140      	movs	r1, #64	@ 0x40
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff fe44 	bl	80021be <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8002536:	2101      	movs	r1, #1
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f7ff fc1e 	bl	8001d7a <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8002544:	200a      	movs	r0, #10
 8002546:	f000 fbe9 	bl	8002d1c <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 800254a:	2142      	movs	r1, #66	@ 0x42
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f7ff fe1c 	bl	800218a <LoRa_read>
 8002552:	4603      	mov	r3, r0
 8002554:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8002556:	7bfb      	ldrb	r3, [r7, #15]
 8002558:	2b12      	cmp	r3, #18
 800255a:	d101      	bne.n	8002560 <LoRa_init+0x13c>
				return LORA_OK;
 800255c:	23c8      	movs	r3, #200	@ 0xc8
 800255e:	e004      	b.n	800256a <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 8002560:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 8002564:	e001      	b.n	800256a <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 8002566:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
	...

08002574 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 if(htim->Instance == TIM4)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a05      	ldr	r2, [pc, #20]	@ (8002598 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d102      	bne.n	800258c <HAL_TIM_PeriodElapsedCallback+0x18>
	{
	 	 check_connectivity_tick = 255;
 8002586:	4b05      	ldr	r3, [pc, #20]	@ (800259c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002588:	22ff      	movs	r2, #255	@ 0xff
 800258a:	701a      	strb	r2, [r3, #0]
	}
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	40000800 	.word	0x40000800
 800259c:	20000270 	.word	0x20000270

080025a0 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == myLoRa.DIO0_pin){
 80025aa:	4b09      	ldr	r3, [pc, #36]	@ (80025d0 <HAL_GPIO_EXTI_Callback+0x30>)
 80025ac:	8a9b      	ldrh	r3, [r3, #20]
 80025ae:	88fa      	ldrh	r2, [r7, #6]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d108      	bne.n	80025c6 <HAL_GPIO_EXTI_Callback+0x26>
		LoRa_receive(&myLoRa, RxBuffer, 128);
 80025b4:	2280      	movs	r2, #128	@ 0x80
 80025b6:	4907      	ldr	r1, [pc, #28]	@ (80025d4 <HAL_GPIO_EXTI_Callback+0x34>)
 80025b8:	4805      	ldr	r0, [pc, #20]	@ (80025d0 <HAL_GPIO_EXTI_Callback+0x30>)
 80025ba:	f7ff fed3 	bl	8002364 <LoRa_receive>
		HAL_GPIO_TogglePin(GREENLED_GPIO_Port, GREENLED_Pin);
 80025be:	2101      	movs	r1, #1
 80025c0:	4805      	ldr	r0, [pc, #20]	@ (80025d8 <HAL_GPIO_EXTI_Callback+0x38>)
 80025c2:	f000 fe7e 	bl	80032c2 <HAL_GPIO_TogglePin>

	}
}
 80025c6:	bf00      	nop
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	20000140 	.word	0x20000140
 80025d4:	200001f0 	.word	0x200001f0
 80025d8:	40020000 	.word	0x40020000

080025dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025dc:	b5b0      	push	{r4, r5, r7, lr}
 80025de:	b08c      	sub	sp, #48	@ 0x30
 80025e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025e2:	f000 fb29 	bl	8002c38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025e6:	f000 f89f 	bl	8002728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025ea:	f000 f989 	bl	8002900 <MX_GPIO_Init>
  MX_SPI1_Init();
 80025ee:	f000 f903 	bl	80027f8 <MX_SPI1_Init>
  MX_TIM4_Init();
 80025f2:	f000 f937 	bl	8002864 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim4);
 80025f6:	4844      	ldr	r0, [pc, #272]	@ (8002708 <main+0x12c>)
 80025f8:	f002 f8ee 	bl	80047d8 <HAL_TIM_Base_Start_IT>

  BSP_LCD_Init();
 80025fc:	f7ff fb1a 	bl	8001c34 <BSP_LCD_Init>

  myLoRa = newLoRa();
 8002600:	4c42      	ldr	r4, [pc, #264]	@ (800270c <main+0x130>)
 8002602:	463b      	mov	r3, r7
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff fb8f 	bl	8001d28 <newLoRa>
 800260a:	4625      	mov	r5, r4
 800260c:	463c      	mov	r4, r7
 800260e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002610:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002612:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002614:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002616:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800261a:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  myLoRa.CS_port         = NSS_GPIO_Port;
 800261e:	4b3b      	ldr	r3, [pc, #236]	@ (800270c <main+0x130>)
 8002620:	4a3b      	ldr	r2, [pc, #236]	@ (8002710 <main+0x134>)
 8002622:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin          = NSS_Pin;
 8002624:	4b39      	ldr	r3, [pc, #228]	@ (800270c <main+0x130>)
 8002626:	2210      	movs	r2, #16
 8002628:	809a      	strh	r2, [r3, #4]
  myLoRa.reset_port      = RST_GPIO_Port;
 800262a:	4b38      	ldr	r3, [pc, #224]	@ (800270c <main+0x130>)
 800262c:	4a38      	ldr	r2, [pc, #224]	@ (8002710 <main+0x134>)
 800262e:	609a      	str	r2, [r3, #8]
  myLoRa.reset_pin       = RST_Pin;
 8002630:	4b36      	ldr	r3, [pc, #216]	@ (800270c <main+0x130>)
 8002632:	2208      	movs	r2, #8
 8002634:	819a      	strh	r2, [r3, #12]
  myLoRa.DIO0_port       = DIO0_GPIO_Port;
 8002636:	4b35      	ldr	r3, [pc, #212]	@ (800270c <main+0x130>)
 8002638:	4a35      	ldr	r2, [pc, #212]	@ (8002710 <main+0x134>)
 800263a:	611a      	str	r2, [r3, #16]
  myLoRa.DIO0_pin        = DIO0_Pin;
 800263c:	4b33      	ldr	r3, [pc, #204]	@ (800270c <main+0x130>)
 800263e:	2204      	movs	r2, #4
 8002640:	829a      	strh	r2, [r3, #20]
  myLoRa.hSPIx           = &hspi1;
 8002642:	4b32      	ldr	r3, [pc, #200]	@ (800270c <main+0x130>)
 8002644:	4a33      	ldr	r2, [pc, #204]	@ (8002714 <main+0x138>)
 8002646:	619a      	str	r2, [r3, #24]

  myLoRa.frequency             = 433;             // default = 433 MHz
 8002648:	4b30      	ldr	r3, [pc, #192]	@ (800270c <main+0x130>)
 800264a:	f240 12b1 	movw	r2, #433	@ 0x1b1
 800264e:	621a      	str	r2, [r3, #32]
  myLoRa.spredingFactor        = SF_7;            // default = SF_7
 8002650:	4b2e      	ldr	r3, [pc, #184]	@ (800270c <main+0x130>)
 8002652:	2207      	movs	r2, #7
 8002654:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  myLoRa.bandWidth             = BW_125KHz;       // default = BW_125KHz
 8002658:	4b2c      	ldr	r3, [pc, #176]	@ (800270c <main+0x130>)
 800265a:	2207      	movs	r2, #7
 800265c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  myLoRa.crcRate               = CR_4_5;          // default = CR_4_5
 8002660:	4b2a      	ldr	r3, [pc, #168]	@ (800270c <main+0x130>)
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  myLoRa.power                 = POWER_20db;      // default = 20db
 8002668:	4b28      	ldr	r3, [pc, #160]	@ (800270c <main+0x130>)
 800266a:	22ff      	movs	r2, #255	@ 0xff
 800266c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  myLoRa.overCurrentProtection = 100;             // default = 100 mA
 8002670:	4b26      	ldr	r3, [pc, #152]	@ (800270c <main+0x130>)
 8002672:	2264      	movs	r2, #100	@ 0x64
 8002674:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  myLoRa.preamble              = 8;              // default = 8;
 8002678:	4b24      	ldr	r3, [pc, #144]	@ (800270c <main+0x130>)
 800267a:	2208      	movs	r2, #8
 800267c:	851a      	strh	r2, [r3, #40]	@ 0x28

  if(LoRa_init(&myLoRa) == LORA_OK){
 800267e:	4823      	ldr	r0, [pc, #140]	@ (800270c <main+0x130>)
 8002680:	f7ff fed0 	bl	8002424 <LoRa_init>
 8002684:	4603      	mov	r3, r0
 8002686:	2bc8      	cmp	r3, #200	@ 0xc8
 8002688:	d102      	bne.n	8002690 <main+0xb4>
	  LoRa_stat = 1;
 800268a:	4b23      	ldr	r3, [pc, #140]	@ (8002718 <main+0x13c>)
 800268c:	2201      	movs	r2, #1
 800268e:	801a      	strh	r2, [r3, #0]
  }

  LoRa_startReceiving(&myLoRa);
 8002690:	481e      	ldr	r0, [pc, #120]	@ (800270c <main+0x130>)
 8002692:	f7ff fe5b 	bl	800234c <LoRa_startReceiving>

  TxBuffer[0] = 45;
 8002696:	4b21      	ldr	r3, [pc, #132]	@ (800271c <main+0x140>)
 8002698:	222d      	movs	r2, #45	@ 0x2d
 800269a:	701a      	strb	r2, [r3, #0]
  TxBuffer[1] = 0xF2;
 800269c:	4b1f      	ldr	r3, [pc, #124]	@ (800271c <main+0x140>)
 800269e:	22f2      	movs	r2, #242	@ 0xf2
 80026a0:	705a      	strb	r2, [r3, #1]
  TxBuffer[2] = 'G';
 80026a2:	4b1e      	ldr	r3, [pc, #120]	@ (800271c <main+0x140>)
 80026a4:	2247      	movs	r2, #71	@ 0x47
 80026a6:	709a      	strb	r2, [r3, #2]

  LoRa_transmit(&myLoRa, TxBuffer, 3, 500);
 80026a8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80026ac:	2203      	movs	r2, #3
 80026ae:	491b      	ldr	r1, [pc, #108]	@ (800271c <main+0x140>)
 80026b0:	4816      	ldr	r0, [pc, #88]	@ (800270c <main+0x130>)
 80026b2:	f7ff fdf3 	bl	800229c <LoRa_transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  BSP_LCD_Clear(0x0);
 80026b6:	2000      	movs	r0, #0
 80026b8:	f7ff fb18 	bl	8001cec <BSP_LCD_Clear>
  //HAL_GPIO_TogglePin(REDLED_GPIO_Port, REDLED_Pin);

  while (1)
  {

	  if(check_connectivity_tick == 255){
 80026bc:	4b18      	ldr	r3, [pc, #96]	@ (8002720 <main+0x144>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2bff      	cmp	r3, #255	@ 0xff
 80026c2:	d119      	bne.n	80026f8 <main+0x11c>
		  TxBuffer[0] = 0xAA;
 80026c4:	4b15      	ldr	r3, [pc, #84]	@ (800271c <main+0x140>)
 80026c6:	22aa      	movs	r2, #170	@ 0xaa
 80026c8:	701a      	strb	r2, [r3, #0]
		  TxBuffer[1] = 0xBB;
 80026ca:	4b14      	ldr	r3, [pc, #80]	@ (800271c <main+0x140>)
 80026cc:	22bb      	movs	r2, #187	@ 0xbb
 80026ce:	705a      	strb	r2, [r3, #1]
		  TxBuffer[2] = 0xCC;
 80026d0:	4b12      	ldr	r3, [pc, #72]	@ (800271c <main+0x140>)
 80026d2:	22cc      	movs	r2, #204	@ 0xcc
 80026d4:	709a      	strb	r2, [r3, #2]
		  if(LoRa_transmit(&myLoRa, TxBuffer, 3, 500) == 1){
 80026d6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80026da:	2203      	movs	r2, #3
 80026dc:	490f      	ldr	r1, [pc, #60]	@ (800271c <main+0x140>)
 80026de:	480b      	ldr	r0, [pc, #44]	@ (800270c <main+0x130>)
 80026e0:	f7ff fddc 	bl	800229c <LoRa_transmit>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d103      	bne.n	80026f2 <main+0x116>
			  HAL_GPIO_TogglePin(REDLED_GPIO_Port, REDLED_Pin);
 80026ea:	2102      	movs	r1, #2
 80026ec:	4808      	ldr	r0, [pc, #32]	@ (8002710 <main+0x134>)
 80026ee:	f000 fde8 	bl	80032c2 <HAL_GPIO_TogglePin>
		  }
		  check_connectivity_tick = 0;
 80026f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002720 <main+0x144>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	701a      	strb	r2, [r3, #0]
	  }


	  BSP_LCD_SetFont(&Font16);
 80026f8:	480a      	ldr	r0, [pc, #40]	@ (8002724 <main+0x148>)
 80026fa:	f7ff fae7 	bl	8001ccc <BSP_LCD_SetFont>

	  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 80026fe:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8002702:	f7ff fad3 	bl	8001cac <BSP_LCD_SetTextColor>
	  if(check_connectivity_tick == 255){
 8002706:	e7d9      	b.n	80026bc <main+0xe0>
 8002708:	200000f8 	.word	0x200000f8
 800270c:	20000140 	.word	0x20000140
 8002710:	40020000 	.word	0x40020000
 8002714:	200000a0 	.word	0x200000a0
 8002718:	2000016c 	.word	0x2000016c
 800271c:	20000170 	.word	0x20000170
 8002720:	20000270 	.word	0x20000270
 8002724:	20000000 	.word	0x20000000

08002728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b094      	sub	sp, #80	@ 0x50
 800272c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800272e:	f107 0320 	add.w	r3, r7, #32
 8002732:	2230      	movs	r2, #48	@ 0x30
 8002734:	2100      	movs	r1, #0
 8002736:	4618      	mov	r0, r3
 8002738:	f002 fc38 	bl	8004fac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800273c:	f107 030c 	add.w	r3, r7, #12
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	60da      	str	r2, [r3, #12]
 800274a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800274c:	2300      	movs	r3, #0
 800274e:	60bb      	str	r3, [r7, #8]
 8002750:	4b27      	ldr	r3, [pc, #156]	@ (80027f0 <SystemClock_Config+0xc8>)
 8002752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002754:	4a26      	ldr	r2, [pc, #152]	@ (80027f0 <SystemClock_Config+0xc8>)
 8002756:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800275a:	6413      	str	r3, [r2, #64]	@ 0x40
 800275c:	4b24      	ldr	r3, [pc, #144]	@ (80027f0 <SystemClock_Config+0xc8>)
 800275e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002760:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002764:	60bb      	str	r3, [r7, #8]
 8002766:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002768:	2300      	movs	r3, #0
 800276a:	607b      	str	r3, [r7, #4]
 800276c:	4b21      	ldr	r3, [pc, #132]	@ (80027f4 <SystemClock_Config+0xcc>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a20      	ldr	r2, [pc, #128]	@ (80027f4 <SystemClock_Config+0xcc>)
 8002772:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002776:	6013      	str	r3, [r2, #0]
 8002778:	4b1e      	ldr	r3, [pc, #120]	@ (80027f4 <SystemClock_Config+0xcc>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002780:	607b      	str	r3, [r7, #4]
 8002782:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002784:	2301      	movs	r3, #1
 8002786:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002788:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800278c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800278e:	2302      	movs	r3, #2
 8002790:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002792:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002796:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8002798:	230c      	movs	r3, #12
 800279a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800279c:	2360      	movs	r3, #96	@ 0x60
 800279e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80027a0:	2302      	movs	r3, #2
 80027a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80027a4:	2304      	movs	r3, #4
 80027a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027a8:	f107 0320 	add.w	r3, r7, #32
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 fdbb 	bl	8003328 <HAL_RCC_OscConfig>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80027b8:	f000 f924 	bl	8002a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027bc:	230f      	movs	r3, #15
 80027be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027c0:	2302      	movs	r3, #2
 80027c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027ce:	2300      	movs	r3, #0
 80027d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80027d2:	f107 030c 	add.w	r3, r7, #12
 80027d6:	2103      	movs	r1, #3
 80027d8:	4618      	mov	r0, r3
 80027da:	f001 f81d 	bl	8003818 <HAL_RCC_ClockConfig>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80027e4:	f000 f90e 	bl	8002a04 <Error_Handler>
  }
}
 80027e8:	bf00      	nop
 80027ea:	3750      	adds	r7, #80	@ 0x50
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40023800 	.word	0x40023800
 80027f4:	40007000 	.word	0x40007000

080027f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80027fc:	4b17      	ldr	r3, [pc, #92]	@ (800285c <MX_SPI1_Init+0x64>)
 80027fe:	4a18      	ldr	r2, [pc, #96]	@ (8002860 <MX_SPI1_Init+0x68>)
 8002800:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002802:	4b16      	ldr	r3, [pc, #88]	@ (800285c <MX_SPI1_Init+0x64>)
 8002804:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002808:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800280a:	4b14      	ldr	r3, [pc, #80]	@ (800285c <MX_SPI1_Init+0x64>)
 800280c:	2200      	movs	r2, #0
 800280e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002810:	4b12      	ldr	r3, [pc, #72]	@ (800285c <MX_SPI1_Init+0x64>)
 8002812:	2200      	movs	r2, #0
 8002814:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002816:	4b11      	ldr	r3, [pc, #68]	@ (800285c <MX_SPI1_Init+0x64>)
 8002818:	2200      	movs	r2, #0
 800281a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800281c:	4b0f      	ldr	r3, [pc, #60]	@ (800285c <MX_SPI1_Init+0x64>)
 800281e:	2200      	movs	r2, #0
 8002820:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002822:	4b0e      	ldr	r3, [pc, #56]	@ (800285c <MX_SPI1_Init+0x64>)
 8002824:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002828:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800282a:	4b0c      	ldr	r3, [pc, #48]	@ (800285c <MX_SPI1_Init+0x64>)
 800282c:	2220      	movs	r2, #32
 800282e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002830:	4b0a      	ldr	r3, [pc, #40]	@ (800285c <MX_SPI1_Init+0x64>)
 8002832:	2200      	movs	r2, #0
 8002834:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002836:	4b09      	ldr	r3, [pc, #36]	@ (800285c <MX_SPI1_Init+0x64>)
 8002838:	2200      	movs	r2, #0
 800283a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800283c:	4b07      	ldr	r3, [pc, #28]	@ (800285c <MX_SPI1_Init+0x64>)
 800283e:	2200      	movs	r2, #0
 8002840:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002842:	4b06      	ldr	r3, [pc, #24]	@ (800285c <MX_SPI1_Init+0x64>)
 8002844:	220a      	movs	r2, #10
 8002846:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002848:	4804      	ldr	r0, [pc, #16]	@ (800285c <MX_SPI1_Init+0x64>)
 800284a:	f001 f991 	bl	8003b70 <HAL_SPI_Init>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002854:	f000 f8d6 	bl	8002a04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002858:	bf00      	nop
 800285a:	bd80      	pop	{r7, pc}
 800285c:	200000a0 	.word	0x200000a0
 8002860:	40013000 	.word	0x40013000

08002864 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800286a:	f107 0308 	add.w	r3, r7, #8
 800286e:	2200      	movs	r2, #0
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	605a      	str	r2, [r3, #4]
 8002874:	609a      	str	r2, [r3, #8]
 8002876:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002878:	463b      	mov	r3, r7
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002880:	4b1d      	ldr	r3, [pc, #116]	@ (80028f8 <MX_TIM4_Init+0x94>)
 8002882:	4a1e      	ldr	r2, [pc, #120]	@ (80028fc <MX_TIM4_Init+0x98>)
 8002884:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1600-1;
 8002886:	4b1c      	ldr	r3, [pc, #112]	@ (80028f8 <MX_TIM4_Init+0x94>)
 8002888:	f240 623f 	movw	r2, #1599	@ 0x63f
 800288c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800288e:	4b1a      	ldr	r3, [pc, #104]	@ (80028f8 <MX_TIM4_Init+0x94>)
 8002890:	2200      	movs	r2, #0
 8002892:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 8002894:	4b18      	ldr	r3, [pc, #96]	@ (80028f8 <MX_TIM4_Init+0x94>)
 8002896:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800289a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800289c:	4b16      	ldr	r3, [pc, #88]	@ (80028f8 <MX_TIM4_Init+0x94>)
 800289e:	2200      	movs	r2, #0
 80028a0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80028a2:	4b15      	ldr	r3, [pc, #84]	@ (80028f8 <MX_TIM4_Init+0x94>)
 80028a4:	2280      	movs	r2, #128	@ 0x80
 80028a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80028a8:	4813      	ldr	r0, [pc, #76]	@ (80028f8 <MX_TIM4_Init+0x94>)
 80028aa:	f001 ff45 	bl	8004738 <HAL_TIM_Base_Init>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80028b4:	f000 f8a6 	bl	8002a04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80028be:	f107 0308 	add.w	r3, r7, #8
 80028c2:	4619      	mov	r1, r3
 80028c4:	480c      	ldr	r0, [pc, #48]	@ (80028f8 <MX_TIM4_Init+0x94>)
 80028c6:	f002 f8d9 	bl	8004a7c <HAL_TIM_ConfigClockSource>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80028d0:	f000 f898 	bl	8002a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028d4:	2300      	movs	r3, #0
 80028d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028d8:	2300      	movs	r3, #0
 80028da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80028dc:	463b      	mov	r3, r7
 80028de:	4619      	mov	r1, r3
 80028e0:	4805      	ldr	r0, [pc, #20]	@ (80028f8 <MX_TIM4_Init+0x94>)
 80028e2:	f002 fae1 	bl	8004ea8 <HAL_TIMEx_MasterConfigSynchronization>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80028ec:	f000 f88a 	bl	8002a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80028f0:	bf00      	nop
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	200000f8 	.word	0x200000f8
 80028fc:	40000800 	.word	0x40000800

08002900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b088      	sub	sp, #32
 8002904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002906:	f107 030c 	add.w	r3, r7, #12
 800290a:	2200      	movs	r2, #0
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	605a      	str	r2, [r3, #4]
 8002910:	609a      	str	r2, [r3, #8]
 8002912:	60da      	str	r2, [r3, #12]
 8002914:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002916:	2300      	movs	r3, #0
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	4b37      	ldr	r3, [pc, #220]	@ (80029f8 <MX_GPIO_Init+0xf8>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291e:	4a36      	ldr	r2, [pc, #216]	@ (80029f8 <MX_GPIO_Init+0xf8>)
 8002920:	f043 0304 	orr.w	r3, r3, #4
 8002924:	6313      	str	r3, [r2, #48]	@ 0x30
 8002926:	4b34      	ldr	r3, [pc, #208]	@ (80029f8 <MX_GPIO_Init+0xf8>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292a:	f003 0304 	and.w	r3, r3, #4
 800292e:	60bb      	str	r3, [r7, #8]
 8002930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002932:	2300      	movs	r3, #0
 8002934:	607b      	str	r3, [r7, #4]
 8002936:	4b30      	ldr	r3, [pc, #192]	@ (80029f8 <MX_GPIO_Init+0xf8>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293a:	4a2f      	ldr	r2, [pc, #188]	@ (80029f8 <MX_GPIO_Init+0xf8>)
 800293c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002940:	6313      	str	r3, [r2, #48]	@ 0x30
 8002942:	4b2d      	ldr	r3, [pc, #180]	@ (80029f8 <MX_GPIO_Init+0xf8>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800294a:	607b      	str	r3, [r7, #4]
 800294c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	603b      	str	r3, [r7, #0]
 8002952:	4b29      	ldr	r3, [pc, #164]	@ (80029f8 <MX_GPIO_Init+0xf8>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002956:	4a28      	ldr	r2, [pc, #160]	@ (80029f8 <MX_GPIO_Init+0xf8>)
 8002958:	f043 0301 	orr.w	r3, r3, #1
 800295c:	6313      	str	r3, [r2, #48]	@ 0x30
 800295e:	4b26      	ldr	r3, [pc, #152]	@ (80029f8 <MX_GPIO_Init+0xf8>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	603b      	str	r3, [r7, #0]
 8002968:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800296a:	2200      	movs	r2, #0
 800296c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002970:	4822      	ldr	r0, [pc, #136]	@ (80029fc <MX_GPIO_Init+0xfc>)
 8002972:	f000 fc8d 	bl	8003290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GREENLED_Pin|REDLED_Pin, GPIO_PIN_RESET);
 8002976:	2200      	movs	r2, #0
 8002978:	2103      	movs	r1, #3
 800297a:	4821      	ldr	r0, [pc, #132]	@ (8002a00 <MX_GPIO_Init+0x100>)
 800297c:	f000 fc88 	bl	8003290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|NSS_Pin, GPIO_PIN_SET);
 8002980:	2201      	movs	r2, #1
 8002982:	2118      	movs	r1, #24
 8002984:	481e      	ldr	r0, [pc, #120]	@ (8002a00 <MX_GPIO_Init+0x100>)
 8002986:	f000 fc83 	bl	8003290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800298a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800298e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002990:	2301      	movs	r3, #1
 8002992:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002994:	2300      	movs	r3, #0
 8002996:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002998:	2300      	movs	r3, #0
 800299a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800299c:	f107 030c 	add.w	r3, r7, #12
 80029a0:	4619      	mov	r1, r3
 80029a2:	4816      	ldr	r0, [pc, #88]	@ (80029fc <MX_GPIO_Init+0xfc>)
 80029a4:	f000 faf0 	bl	8002f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : GREENLED_Pin REDLED_Pin RST_Pin NSS_Pin */
  GPIO_InitStruct.Pin = GREENLED_Pin|REDLED_Pin|RST_Pin|NSS_Pin;
 80029a8:	231b      	movs	r3, #27
 80029aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ac:	2301      	movs	r3, #1
 80029ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b4:	2300      	movs	r3, #0
 80029b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b8:	f107 030c 	add.w	r3, r7, #12
 80029bc:	4619      	mov	r1, r3
 80029be:	4810      	ldr	r0, [pc, #64]	@ (8002a00 <MX_GPIO_Init+0x100>)
 80029c0:	f000 fae2 	bl	8002f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 80029c4:	2304      	movs	r3, #4
 80029c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029c8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80029cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ce:	2300      	movs	r3, #0
 80029d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 80029d2:	f107 030c 	add.w	r3, r7, #12
 80029d6:	4619      	mov	r1, r3
 80029d8:	4809      	ldr	r0, [pc, #36]	@ (8002a00 <MX_GPIO_Init+0x100>)
 80029da:	f000 fad5 	bl	8002f88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80029de:	2200      	movs	r2, #0
 80029e0:	2100      	movs	r1, #0
 80029e2:	2008      	movs	r0, #8
 80029e4:	f000 fa99 	bl	8002f1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80029e8:	2008      	movs	r0, #8
 80029ea:	f000 fab2 	bl	8002f52 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80029ee:	bf00      	nop
 80029f0:	3720      	adds	r7, #32
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40023800 	.word	0x40023800
 80029fc:	40020800 	.word	0x40020800
 8002a00:	40020000 	.word	0x40020000

08002a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a08:	b672      	cpsid	i
}
 8002a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a0c:	bf00      	nop
 8002a0e:	e7fd      	b.n	8002a0c <Error_Handler+0x8>

08002a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a16:	2300      	movs	r3, #0
 8002a18:	607b      	str	r3, [r7, #4]
 8002a1a:	4b10      	ldr	r3, [pc, #64]	@ (8002a5c <HAL_MspInit+0x4c>)
 8002a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a1e:	4a0f      	ldr	r2, [pc, #60]	@ (8002a5c <HAL_MspInit+0x4c>)
 8002a20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a24:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a26:	4b0d      	ldr	r3, [pc, #52]	@ (8002a5c <HAL_MspInit+0x4c>)
 8002a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a2e:	607b      	str	r3, [r7, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	603b      	str	r3, [r7, #0]
 8002a36:	4b09      	ldr	r3, [pc, #36]	@ (8002a5c <HAL_MspInit+0x4c>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3a:	4a08      	ldr	r2, [pc, #32]	@ (8002a5c <HAL_MspInit+0x4c>)
 8002a3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a40:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a42:	4b06      	ldr	r3, [pc, #24]	@ (8002a5c <HAL_MspInit+0x4c>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a4a:	603b      	str	r3, [r7, #0]
 8002a4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	40023800 	.word	0x40023800

08002a60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b08a      	sub	sp, #40	@ 0x28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a68:	f107 0314 	add.w	r3, r7, #20
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	605a      	str	r2, [r3, #4]
 8002a72:	609a      	str	r2, [r3, #8]
 8002a74:	60da      	str	r2, [r3, #12]
 8002a76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a19      	ldr	r2, [pc, #100]	@ (8002ae4 <HAL_SPI_MspInit+0x84>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d12b      	bne.n	8002ada <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a82:	2300      	movs	r3, #0
 8002a84:	613b      	str	r3, [r7, #16]
 8002a86:	4b18      	ldr	r3, [pc, #96]	@ (8002ae8 <HAL_SPI_MspInit+0x88>)
 8002a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a8a:	4a17      	ldr	r2, [pc, #92]	@ (8002ae8 <HAL_SPI_MspInit+0x88>)
 8002a8c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a90:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a92:	4b15      	ldr	r3, [pc, #84]	@ (8002ae8 <HAL_SPI_MspInit+0x88>)
 8002a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a9a:	613b      	str	r3, [r7, #16]
 8002a9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	4b11      	ldr	r3, [pc, #68]	@ (8002ae8 <HAL_SPI_MspInit+0x88>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa6:	4a10      	ldr	r2, [pc, #64]	@ (8002ae8 <HAL_SPI_MspInit+0x88>)
 8002aa8:	f043 0301 	orr.w	r3, r3, #1
 8002aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aae:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae8 <HAL_SPI_MspInit+0x88>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002aba:	23e0      	movs	r3, #224	@ 0xe0
 8002abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002aca:	2305      	movs	r3, #5
 8002acc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ace:	f107 0314 	add.w	r3, r7, #20
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4805      	ldr	r0, [pc, #20]	@ (8002aec <HAL_SPI_MspInit+0x8c>)
 8002ad6:	f000 fa57 	bl	8002f88 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002ada:	bf00      	nop
 8002adc:	3728      	adds	r7, #40	@ 0x28
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40013000 	.word	0x40013000
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	40020000 	.word	0x40020000

08002af0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a0e      	ldr	r2, [pc, #56]	@ (8002b38 <HAL_TIM_Base_MspInit+0x48>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d115      	bne.n	8002b2e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	4b0d      	ldr	r3, [pc, #52]	@ (8002b3c <HAL_TIM_Base_MspInit+0x4c>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0a:	4a0c      	ldr	r2, [pc, #48]	@ (8002b3c <HAL_TIM_Base_MspInit+0x4c>)
 8002b0c:	f043 0304 	orr.w	r3, r3, #4
 8002b10:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b12:	4b0a      	ldr	r3, [pc, #40]	@ (8002b3c <HAL_TIM_Base_MspInit+0x4c>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b16:	f003 0304 	and.w	r3, r3, #4
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002b1e:	2200      	movs	r2, #0
 8002b20:	2100      	movs	r1, #0
 8002b22:	201e      	movs	r0, #30
 8002b24:	f000 f9f9 	bl	8002f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002b28:	201e      	movs	r0, #30
 8002b2a:	f000 fa12 	bl	8002f52 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8002b2e:	bf00      	nop
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	40000800 	.word	0x40000800
 8002b3c:	40023800 	.word	0x40023800

08002b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b44:	bf00      	nop
 8002b46:	e7fd      	b.n	8002b44 <NMI_Handler+0x4>

08002b48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b4c:	bf00      	nop
 8002b4e:	e7fd      	b.n	8002b4c <HardFault_Handler+0x4>

08002b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b54:	bf00      	nop
 8002b56:	e7fd      	b.n	8002b54 <MemManage_Handler+0x4>

08002b58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b5c:	bf00      	nop
 8002b5e:	e7fd      	b.n	8002b5c <BusFault_Handler+0x4>

08002b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b64:	bf00      	nop
 8002b66:	e7fd      	b.n	8002b64 <UsageFault_Handler+0x4>

08002b68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b6c:	bf00      	nop
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b76:	b480      	push	{r7}
 8002b78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b7a:	bf00      	nop
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b88:	bf00      	nop
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr

08002b92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b96:	f000 f8a1 	bl	8002cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8002ba2:	2004      	movs	r0, #4
 8002ba4:	f000 fba8 	bl	80032f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002ba8:	bf00      	nop
 8002baa:	bd80      	pop	{r7, pc}

08002bac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002bb0:	4802      	ldr	r0, [pc, #8]	@ (8002bbc <TIM4_IRQHandler+0x10>)
 8002bb2:	f001 fe73 	bl	800489c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002bb6:	bf00      	nop
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	200000f8 	.word	0x200000f8

08002bc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bc4:	4b06      	ldr	r3, [pc, #24]	@ (8002be0 <SystemInit+0x20>)
 8002bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bca:	4a05      	ldr	r2, [pc, #20]	@ (8002be0 <SystemInit+0x20>)
 8002bcc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002bd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bd4:	bf00      	nop
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	e000ed00 	.word	0xe000ed00

08002be4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002be4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c1c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002be8:	f7ff ffea 	bl	8002bc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bec:	480c      	ldr	r0, [pc, #48]	@ (8002c20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002bee:	490d      	ldr	r1, [pc, #52]	@ (8002c24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002bf0:	4a0d      	ldr	r2, [pc, #52]	@ (8002c28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002bf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bf4:	e002      	b.n	8002bfc <LoopCopyDataInit>

08002bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bfa:	3304      	adds	r3, #4

08002bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c00:	d3f9      	bcc.n	8002bf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c02:	4a0a      	ldr	r2, [pc, #40]	@ (8002c2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c04:	4c0a      	ldr	r4, [pc, #40]	@ (8002c30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c08:	e001      	b.n	8002c0e <LoopFillZerobss>

08002c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c0c:	3204      	adds	r2, #4

08002c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c10:	d3fb      	bcc.n	8002c0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c12:	f002 f9d3 	bl	8004fbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c16:	f7ff fce1 	bl	80025dc <main>
  bx  lr    
 8002c1a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c24:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8002c28:	08005fb8 	.word	0x08005fb8
  ldr r2, =_sbss
 8002c2c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8002c30:	20000278 	.word	0x20000278

08002c34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c34:	e7fe      	b.n	8002c34 <ADC_IRQHandler>
	...

08002c38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8002c78 <HAL_Init+0x40>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a0d      	ldr	r2, [pc, #52]	@ (8002c78 <HAL_Init+0x40>)
 8002c42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c48:	4b0b      	ldr	r3, [pc, #44]	@ (8002c78 <HAL_Init+0x40>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a0a      	ldr	r2, [pc, #40]	@ (8002c78 <HAL_Init+0x40>)
 8002c4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c54:	4b08      	ldr	r3, [pc, #32]	@ (8002c78 <HAL_Init+0x40>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a07      	ldr	r2, [pc, #28]	@ (8002c78 <HAL_Init+0x40>)
 8002c5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c60:	2003      	movs	r0, #3
 8002c62:	f000 f94f 	bl	8002f04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c66:	200f      	movs	r0, #15
 8002c68:	f000 f808 	bl	8002c7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c6c:	f7ff fed0 	bl	8002a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40023c00 	.word	0x40023c00

08002c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c84:	4b12      	ldr	r3, [pc, #72]	@ (8002cd0 <HAL_InitTick+0x54>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	4b12      	ldr	r3, [pc, #72]	@ (8002cd4 <HAL_InitTick+0x58>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 f967 	bl	8002f6e <HAL_SYSTICK_Config>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e00e      	b.n	8002cc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b0f      	cmp	r3, #15
 8002cae:	d80a      	bhi.n	8002cc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb8:	f000 f92f 	bl	8002f1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cbc:	4a06      	ldr	r2, [pc, #24]	@ (8002cd8 <HAL_InitTick+0x5c>)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	e000      	b.n	8002cc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	20000058 	.word	0x20000058
 8002cd4:	20000060 	.word	0x20000060
 8002cd8:	2000005c 	.word	0x2000005c

08002cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ce0:	4b06      	ldr	r3, [pc, #24]	@ (8002cfc <HAL_IncTick+0x20>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	4b06      	ldr	r3, [pc, #24]	@ (8002d00 <HAL_IncTick+0x24>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4413      	add	r3, r2
 8002cec:	4a04      	ldr	r2, [pc, #16]	@ (8002d00 <HAL_IncTick+0x24>)
 8002cee:	6013      	str	r3, [r2, #0]
}
 8002cf0:	bf00      	nop
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	20000060 	.word	0x20000060
 8002d00:	20000274 	.word	0x20000274

08002d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return uwTick;
 8002d08:	4b03      	ldr	r3, [pc, #12]	@ (8002d18 <HAL_GetTick+0x14>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	20000274 	.word	0x20000274

08002d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d24:	f7ff ffee 	bl	8002d04 <HAL_GetTick>
 8002d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d34:	d005      	beq.n	8002d42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d36:	4b0a      	ldr	r3, [pc, #40]	@ (8002d60 <HAL_Delay+0x44>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4413      	add	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d42:	bf00      	nop
 8002d44:	f7ff ffde 	bl	8002d04 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d8f7      	bhi.n	8002d44 <HAL_Delay+0x28>
  {
  }
}
 8002d54:	bf00      	nop
 8002d56:	bf00      	nop
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	20000060 	.word	0x20000060

08002d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d74:	4b0c      	ldr	r3, [pc, #48]	@ (8002da8 <__NVIC_SetPriorityGrouping+0x44>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d7a:	68ba      	ldr	r2, [r7, #8]
 8002d7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d80:	4013      	ands	r3, r2
 8002d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d96:	4a04      	ldr	r2, [pc, #16]	@ (8002da8 <__NVIC_SetPriorityGrouping+0x44>)
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	60d3      	str	r3, [r2, #12]
}
 8002d9c:	bf00      	nop
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	e000ed00 	.word	0xe000ed00

08002dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002db0:	4b04      	ldr	r3, [pc, #16]	@ (8002dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	0a1b      	lsrs	r3, r3, #8
 8002db6:	f003 0307 	and.w	r3, r3, #7
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	e000ed00 	.word	0xe000ed00

08002dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	4603      	mov	r3, r0
 8002dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	db0b      	blt.n	8002df2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dda:	79fb      	ldrb	r3, [r7, #7]
 8002ddc:	f003 021f 	and.w	r2, r3, #31
 8002de0:	4907      	ldr	r1, [pc, #28]	@ (8002e00 <__NVIC_EnableIRQ+0x38>)
 8002de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de6:	095b      	lsrs	r3, r3, #5
 8002de8:	2001      	movs	r0, #1
 8002dea:	fa00 f202 	lsl.w	r2, r0, r2
 8002dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002df2:	bf00      	nop
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	e000e100 	.word	0xe000e100

08002e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	6039      	str	r1, [r7, #0]
 8002e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	db0a      	blt.n	8002e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	490c      	ldr	r1, [pc, #48]	@ (8002e50 <__NVIC_SetPriority+0x4c>)
 8002e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e22:	0112      	lsls	r2, r2, #4
 8002e24:	b2d2      	uxtb	r2, r2
 8002e26:	440b      	add	r3, r1
 8002e28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e2c:	e00a      	b.n	8002e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	4908      	ldr	r1, [pc, #32]	@ (8002e54 <__NVIC_SetPriority+0x50>)
 8002e34:	79fb      	ldrb	r3, [r7, #7]
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	3b04      	subs	r3, #4
 8002e3c:	0112      	lsls	r2, r2, #4
 8002e3e:	b2d2      	uxtb	r2, r2
 8002e40:	440b      	add	r3, r1
 8002e42:	761a      	strb	r2, [r3, #24]
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	e000e100 	.word	0xe000e100
 8002e54:	e000ed00 	.word	0xe000ed00

08002e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b089      	sub	sp, #36	@ 0x24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	f1c3 0307 	rsb	r3, r3, #7
 8002e72:	2b04      	cmp	r3, #4
 8002e74:	bf28      	it	cs
 8002e76:	2304      	movcs	r3, #4
 8002e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	3304      	adds	r3, #4
 8002e7e:	2b06      	cmp	r3, #6
 8002e80:	d902      	bls.n	8002e88 <NVIC_EncodePriority+0x30>
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	3b03      	subs	r3, #3
 8002e86:	e000      	b.n	8002e8a <NVIC_EncodePriority+0x32>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	43da      	mvns	r2, r3
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	401a      	ands	r2, r3
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eaa:	43d9      	mvns	r1, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb0:	4313      	orrs	r3, r2
         );
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3724      	adds	r7, #36	@ 0x24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
	...

08002ec0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ed0:	d301      	bcc.n	8002ed6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e00f      	b.n	8002ef6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ed6:	4a0a      	ldr	r2, [pc, #40]	@ (8002f00 <SysTick_Config+0x40>)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3b01      	subs	r3, #1
 8002edc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ede:	210f      	movs	r1, #15
 8002ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee4:	f7ff ff8e 	bl	8002e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ee8:	4b05      	ldr	r3, [pc, #20]	@ (8002f00 <SysTick_Config+0x40>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eee:	4b04      	ldr	r3, [pc, #16]	@ (8002f00 <SysTick_Config+0x40>)
 8002ef0:	2207      	movs	r2, #7
 8002ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	e000e010 	.word	0xe000e010

08002f04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f7ff ff29 	bl	8002d64 <__NVIC_SetPriorityGrouping>
}
 8002f12:	bf00      	nop
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b086      	sub	sp, #24
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	4603      	mov	r3, r0
 8002f22:	60b9      	str	r1, [r7, #8]
 8002f24:	607a      	str	r2, [r7, #4]
 8002f26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f2c:	f7ff ff3e 	bl	8002dac <__NVIC_GetPriorityGrouping>
 8002f30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	68b9      	ldr	r1, [r7, #8]
 8002f36:	6978      	ldr	r0, [r7, #20]
 8002f38:	f7ff ff8e 	bl	8002e58 <NVIC_EncodePriority>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f42:	4611      	mov	r1, r2
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff ff5d 	bl	8002e04 <__NVIC_SetPriority>
}
 8002f4a:	bf00      	nop
 8002f4c:	3718      	adds	r7, #24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	4603      	mov	r3, r0
 8002f5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff ff31 	bl	8002dc8 <__NVIC_EnableIRQ>
}
 8002f66:	bf00      	nop
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b082      	sub	sp, #8
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7ff ffa2 	bl	8002ec0 <SysTick_Config>
 8002f7c:	4603      	mov	r3, r0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
	...

08002f88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b089      	sub	sp, #36	@ 0x24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f92:	2300      	movs	r3, #0
 8002f94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f96:	2300      	movs	r3, #0
 8002f98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	61fb      	str	r3, [r7, #28]
 8002fa2:	e159      	b.n	8003258 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	f040 8148 	bne.w	8003252 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d005      	beq.n	8002fda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d130      	bne.n	800303c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	2203      	movs	r2, #3
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	43db      	mvns	r3, r3
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	68da      	ldr	r2, [r3, #12]
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	4313      	orrs	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003010:	2201      	movs	r2, #1
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	43db      	mvns	r3, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4013      	ands	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	091b      	lsrs	r3, r3, #4
 8003026:	f003 0201 	and.w	r2, r3, #1
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	4313      	orrs	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f003 0303 	and.w	r3, r3, #3
 8003044:	2b03      	cmp	r3, #3
 8003046:	d017      	beq.n	8003078 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	2203      	movs	r2, #3
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	43db      	mvns	r3, r3
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	4013      	ands	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	4313      	orrs	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f003 0303 	and.w	r3, r3, #3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d123      	bne.n	80030cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	08da      	lsrs	r2, r3, #3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3208      	adds	r2, #8
 800308c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003090:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	220f      	movs	r2, #15
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	43db      	mvns	r3, r3
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4013      	ands	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	691a      	ldr	r2, [r3, #16]
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f003 0307 	and.w	r3, r3, #7
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	08da      	lsrs	r2, r3, #3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	3208      	adds	r2, #8
 80030c6:	69b9      	ldr	r1, [r7, #24]
 80030c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	2203      	movs	r2, #3
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	43db      	mvns	r3, r3
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4013      	ands	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f003 0203 	and.w	r2, r3, #3
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 80a2 	beq.w	8003252 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800310e:	2300      	movs	r3, #0
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	4b57      	ldr	r3, [pc, #348]	@ (8003270 <HAL_GPIO_Init+0x2e8>)
 8003114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003116:	4a56      	ldr	r2, [pc, #344]	@ (8003270 <HAL_GPIO_Init+0x2e8>)
 8003118:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800311c:	6453      	str	r3, [r2, #68]	@ 0x44
 800311e:	4b54      	ldr	r3, [pc, #336]	@ (8003270 <HAL_GPIO_Init+0x2e8>)
 8003120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003122:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800312a:	4a52      	ldr	r2, [pc, #328]	@ (8003274 <HAL_GPIO_Init+0x2ec>)
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	089b      	lsrs	r3, r3, #2
 8003130:	3302      	adds	r3, #2
 8003132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003136:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	f003 0303 	and.w	r3, r3, #3
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	220f      	movs	r2, #15
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43db      	mvns	r3, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4013      	ands	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a49      	ldr	r2, [pc, #292]	@ (8003278 <HAL_GPIO_Init+0x2f0>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d019      	beq.n	800318a <HAL_GPIO_Init+0x202>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a48      	ldr	r2, [pc, #288]	@ (800327c <HAL_GPIO_Init+0x2f4>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d013      	beq.n	8003186 <HAL_GPIO_Init+0x1fe>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a47      	ldr	r2, [pc, #284]	@ (8003280 <HAL_GPIO_Init+0x2f8>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d00d      	beq.n	8003182 <HAL_GPIO_Init+0x1fa>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a46      	ldr	r2, [pc, #280]	@ (8003284 <HAL_GPIO_Init+0x2fc>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d007      	beq.n	800317e <HAL_GPIO_Init+0x1f6>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a45      	ldr	r2, [pc, #276]	@ (8003288 <HAL_GPIO_Init+0x300>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d101      	bne.n	800317a <HAL_GPIO_Init+0x1f2>
 8003176:	2304      	movs	r3, #4
 8003178:	e008      	b.n	800318c <HAL_GPIO_Init+0x204>
 800317a:	2307      	movs	r3, #7
 800317c:	e006      	b.n	800318c <HAL_GPIO_Init+0x204>
 800317e:	2303      	movs	r3, #3
 8003180:	e004      	b.n	800318c <HAL_GPIO_Init+0x204>
 8003182:	2302      	movs	r3, #2
 8003184:	e002      	b.n	800318c <HAL_GPIO_Init+0x204>
 8003186:	2301      	movs	r3, #1
 8003188:	e000      	b.n	800318c <HAL_GPIO_Init+0x204>
 800318a:	2300      	movs	r3, #0
 800318c:	69fa      	ldr	r2, [r7, #28]
 800318e:	f002 0203 	and.w	r2, r2, #3
 8003192:	0092      	lsls	r2, r2, #2
 8003194:	4093      	lsls	r3, r2
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	4313      	orrs	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800319c:	4935      	ldr	r1, [pc, #212]	@ (8003274 <HAL_GPIO_Init+0x2ec>)
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	089b      	lsrs	r3, r3, #2
 80031a2:	3302      	adds	r3, #2
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031aa:	4b38      	ldr	r3, [pc, #224]	@ (800328c <HAL_GPIO_Init+0x304>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	43db      	mvns	r3, r3
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	4013      	ands	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031ce:	4a2f      	ldr	r2, [pc, #188]	@ (800328c <HAL_GPIO_Init+0x304>)
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031d4:	4b2d      	ldr	r3, [pc, #180]	@ (800328c <HAL_GPIO_Init+0x304>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	43db      	mvns	r3, r3
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	4013      	ands	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d003      	beq.n	80031f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031f8:	4a24      	ldr	r2, [pc, #144]	@ (800328c <HAL_GPIO_Init+0x304>)
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031fe:	4b23      	ldr	r3, [pc, #140]	@ (800328c <HAL_GPIO_Init+0x304>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	43db      	mvns	r3, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4013      	ands	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	4313      	orrs	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003222:	4a1a      	ldr	r2, [pc, #104]	@ (800328c <HAL_GPIO_Init+0x304>)
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003228:	4b18      	ldr	r3, [pc, #96]	@ (800328c <HAL_GPIO_Init+0x304>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	43db      	mvns	r3, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4013      	ands	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	4313      	orrs	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800324c:	4a0f      	ldr	r2, [pc, #60]	@ (800328c <HAL_GPIO_Init+0x304>)
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	3301      	adds	r3, #1
 8003256:	61fb      	str	r3, [r7, #28]
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	2b0f      	cmp	r3, #15
 800325c:	f67f aea2 	bls.w	8002fa4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003260:	bf00      	nop
 8003262:	bf00      	nop
 8003264:	3724      	adds	r7, #36	@ 0x24
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	40023800 	.word	0x40023800
 8003274:	40013800 	.word	0x40013800
 8003278:	40020000 	.word	0x40020000
 800327c:	40020400 	.word	0x40020400
 8003280:	40020800 	.word	0x40020800
 8003284:	40020c00 	.word	0x40020c00
 8003288:	40021000 	.word	0x40021000
 800328c:	40013c00 	.word	0x40013c00

08003290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	460b      	mov	r3, r1
 800329a:	807b      	strh	r3, [r7, #2]
 800329c:	4613      	mov	r3, r2
 800329e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032a0:	787b      	ldrb	r3, [r7, #1]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032a6:	887a      	ldrh	r2, [r7, #2]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032ac:	e003      	b.n	80032b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032ae:	887b      	ldrh	r3, [r7, #2]
 80032b0:	041a      	lsls	r2, r3, #16
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	619a      	str	r2, [r3, #24]
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b085      	sub	sp, #20
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
 80032ca:	460b      	mov	r3, r1
 80032cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032d4:	887a      	ldrh	r2, [r7, #2]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	4013      	ands	r3, r2
 80032da:	041a      	lsls	r2, r3, #16
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	43d9      	mvns	r1, r3
 80032e0:	887b      	ldrh	r3, [r7, #2]
 80032e2:	400b      	ands	r3, r1
 80032e4:	431a      	orrs	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	619a      	str	r2, [r3, #24]
}
 80032ea:	bf00      	nop
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
	...

080032f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003302:	4b08      	ldr	r3, [pc, #32]	@ (8003324 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003304:	695a      	ldr	r2, [r3, #20]
 8003306:	88fb      	ldrh	r3, [r7, #6]
 8003308:	4013      	ands	r3, r2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d006      	beq.n	800331c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800330e:	4a05      	ldr	r2, [pc, #20]	@ (8003324 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003310:	88fb      	ldrh	r3, [r7, #6]
 8003312:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003314:	88fb      	ldrh	r3, [r7, #6]
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff f942 	bl	80025a0 <HAL_GPIO_EXTI_Callback>
  }
}
 800331c:	bf00      	nop
 800331e:	3708      	adds	r7, #8
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40013c00 	.word	0x40013c00

08003328 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e267      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d075      	beq.n	8003432 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003346:	4b88      	ldr	r3, [pc, #544]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f003 030c 	and.w	r3, r3, #12
 800334e:	2b04      	cmp	r3, #4
 8003350:	d00c      	beq.n	800336c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003352:	4b85      	ldr	r3, [pc, #532]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800335a:	2b08      	cmp	r3, #8
 800335c:	d112      	bne.n	8003384 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800335e:	4b82      	ldr	r3, [pc, #520]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003366:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800336a:	d10b      	bne.n	8003384 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800336c:	4b7e      	ldr	r3, [pc, #504]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d05b      	beq.n	8003430 <HAL_RCC_OscConfig+0x108>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d157      	bne.n	8003430 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e242      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800338c:	d106      	bne.n	800339c <HAL_RCC_OscConfig+0x74>
 800338e:	4b76      	ldr	r3, [pc, #472]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a75      	ldr	r2, [pc, #468]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 8003394:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	e01d      	b.n	80033d8 <HAL_RCC_OscConfig+0xb0>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033a4:	d10c      	bne.n	80033c0 <HAL_RCC_OscConfig+0x98>
 80033a6:	4b70      	ldr	r3, [pc, #448]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a6f      	ldr	r2, [pc, #444]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 80033ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	4b6d      	ldr	r3, [pc, #436]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a6c      	ldr	r2, [pc, #432]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 80033b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	e00b      	b.n	80033d8 <HAL_RCC_OscConfig+0xb0>
 80033c0:	4b69      	ldr	r3, [pc, #420]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a68      	ldr	r2, [pc, #416]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 80033c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033ca:	6013      	str	r3, [r2, #0]
 80033cc:	4b66      	ldr	r3, [pc, #408]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a65      	ldr	r2, [pc, #404]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 80033d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d013      	beq.n	8003408 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e0:	f7ff fc90 	bl	8002d04 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033e8:	f7ff fc8c 	bl	8002d04 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b64      	cmp	r3, #100	@ 0x64
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e207      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fa:	4b5b      	ldr	r3, [pc, #364]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d0f0      	beq.n	80033e8 <HAL_RCC_OscConfig+0xc0>
 8003406:	e014      	b.n	8003432 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003408:	f7ff fc7c 	bl	8002d04 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003410:	f7ff fc78 	bl	8002d04 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b64      	cmp	r3, #100	@ 0x64
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e1f3      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003422:	4b51      	ldr	r3, [pc, #324]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1f0      	bne.n	8003410 <HAL_RCC_OscConfig+0xe8>
 800342e:	e000      	b.n	8003432 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d063      	beq.n	8003506 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800343e:	4b4a      	ldr	r3, [pc, #296]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f003 030c 	and.w	r3, r3, #12
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00b      	beq.n	8003462 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800344a:	4b47      	ldr	r3, [pc, #284]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003452:	2b08      	cmp	r3, #8
 8003454:	d11c      	bne.n	8003490 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003456:	4b44      	ldr	r3, [pc, #272]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d116      	bne.n	8003490 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003462:	4b41      	ldr	r3, [pc, #260]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d005      	beq.n	800347a <HAL_RCC_OscConfig+0x152>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d001      	beq.n	800347a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e1c7      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800347a:	4b3b      	ldr	r3, [pc, #236]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	4937      	ldr	r1, [pc, #220]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 800348a:	4313      	orrs	r3, r2
 800348c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800348e:	e03a      	b.n	8003506 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d020      	beq.n	80034da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003498:	4b34      	ldr	r3, [pc, #208]	@ (800356c <HAL_RCC_OscConfig+0x244>)
 800349a:	2201      	movs	r2, #1
 800349c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349e:	f7ff fc31 	bl	8002d04 <HAL_GetTick>
 80034a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a4:	e008      	b.n	80034b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034a6:	f7ff fc2d 	bl	8002d04 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e1a8      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b8:	4b2b      	ldr	r3, [pc, #172]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d0f0      	beq.n	80034a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c4:	4b28      	ldr	r3, [pc, #160]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	4925      	ldr	r1, [pc, #148]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	600b      	str	r3, [r1, #0]
 80034d8:	e015      	b.n	8003506 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034da:	4b24      	ldr	r3, [pc, #144]	@ (800356c <HAL_RCC_OscConfig+0x244>)
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e0:	f7ff fc10 	bl	8002d04 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034e8:	f7ff fc0c 	bl	8002d04 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e187      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034fa:	4b1b      	ldr	r3, [pc, #108]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1f0      	bne.n	80034e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0308 	and.w	r3, r3, #8
 800350e:	2b00      	cmp	r3, #0
 8003510:	d036      	beq.n	8003580 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d016      	beq.n	8003548 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800351a:	4b15      	ldr	r3, [pc, #84]	@ (8003570 <HAL_RCC_OscConfig+0x248>)
 800351c:	2201      	movs	r2, #1
 800351e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003520:	f7ff fbf0 	bl	8002d04 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003528:	f7ff fbec 	bl	8002d04 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e167      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800353a:	4b0b      	ldr	r3, [pc, #44]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 800353c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d0f0      	beq.n	8003528 <HAL_RCC_OscConfig+0x200>
 8003546:	e01b      	b.n	8003580 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003548:	4b09      	ldr	r3, [pc, #36]	@ (8003570 <HAL_RCC_OscConfig+0x248>)
 800354a:	2200      	movs	r2, #0
 800354c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800354e:	f7ff fbd9 	bl	8002d04 <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003554:	e00e      	b.n	8003574 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003556:	f7ff fbd5 	bl	8002d04 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d907      	bls.n	8003574 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e150      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
 8003568:	40023800 	.word	0x40023800
 800356c:	42470000 	.word	0x42470000
 8003570:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003574:	4b88      	ldr	r3, [pc, #544]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 8003576:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1ea      	bne.n	8003556 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 8097 	beq.w	80036bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800358e:	2300      	movs	r3, #0
 8003590:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003592:	4b81      	ldr	r3, [pc, #516]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 8003594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10f      	bne.n	80035be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800359e:	2300      	movs	r3, #0
 80035a0:	60bb      	str	r3, [r7, #8]
 80035a2:	4b7d      	ldr	r3, [pc, #500]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 80035a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a6:	4a7c      	ldr	r2, [pc, #496]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 80035a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80035ae:	4b7a      	ldr	r3, [pc, #488]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 80035b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035b6:	60bb      	str	r3, [r7, #8]
 80035b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ba:	2301      	movs	r3, #1
 80035bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035be:	4b77      	ldr	r3, [pc, #476]	@ (800379c <HAL_RCC_OscConfig+0x474>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d118      	bne.n	80035fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ca:	4b74      	ldr	r3, [pc, #464]	@ (800379c <HAL_RCC_OscConfig+0x474>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a73      	ldr	r2, [pc, #460]	@ (800379c <HAL_RCC_OscConfig+0x474>)
 80035d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035d6:	f7ff fb95 	bl	8002d04 <HAL_GetTick>
 80035da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035dc:	e008      	b.n	80035f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035de:	f7ff fb91 	bl	8002d04 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d901      	bls.n	80035f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e10c      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f0:	4b6a      	ldr	r3, [pc, #424]	@ (800379c <HAL_RCC_OscConfig+0x474>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d0f0      	beq.n	80035de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d106      	bne.n	8003612 <HAL_RCC_OscConfig+0x2ea>
 8003604:	4b64      	ldr	r3, [pc, #400]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 8003606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003608:	4a63      	ldr	r2, [pc, #396]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 800360a:	f043 0301 	orr.w	r3, r3, #1
 800360e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003610:	e01c      	b.n	800364c <HAL_RCC_OscConfig+0x324>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	2b05      	cmp	r3, #5
 8003618:	d10c      	bne.n	8003634 <HAL_RCC_OscConfig+0x30c>
 800361a:	4b5f      	ldr	r3, [pc, #380]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 800361c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800361e:	4a5e      	ldr	r2, [pc, #376]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 8003620:	f043 0304 	orr.w	r3, r3, #4
 8003624:	6713      	str	r3, [r2, #112]	@ 0x70
 8003626:	4b5c      	ldr	r3, [pc, #368]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 8003628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800362a:	4a5b      	ldr	r2, [pc, #364]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 800362c:	f043 0301 	orr.w	r3, r3, #1
 8003630:	6713      	str	r3, [r2, #112]	@ 0x70
 8003632:	e00b      	b.n	800364c <HAL_RCC_OscConfig+0x324>
 8003634:	4b58      	ldr	r3, [pc, #352]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 8003636:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003638:	4a57      	ldr	r2, [pc, #348]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 800363a:	f023 0301 	bic.w	r3, r3, #1
 800363e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003640:	4b55      	ldr	r3, [pc, #340]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 8003642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003644:	4a54      	ldr	r2, [pc, #336]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 8003646:	f023 0304 	bic.w	r3, r3, #4
 800364a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d015      	beq.n	8003680 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003654:	f7ff fb56 	bl	8002d04 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800365a:	e00a      	b.n	8003672 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800365c:	f7ff fb52 	bl	8002d04 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	f241 3288 	movw	r2, #5000	@ 0x1388
 800366a:	4293      	cmp	r3, r2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e0cb      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003672:	4b49      	ldr	r3, [pc, #292]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 8003674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0ee      	beq.n	800365c <HAL_RCC_OscConfig+0x334>
 800367e:	e014      	b.n	80036aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003680:	f7ff fb40 	bl	8002d04 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003686:	e00a      	b.n	800369e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003688:	f7ff fb3c 	bl	8002d04 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003696:	4293      	cmp	r3, r2
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e0b5      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800369e:	4b3e      	ldr	r3, [pc, #248]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 80036a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1ee      	bne.n	8003688 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036aa:	7dfb      	ldrb	r3, [r7, #23]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d105      	bne.n	80036bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036b0:	4b39      	ldr	r3, [pc, #228]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 80036b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b4:	4a38      	ldr	r2, [pc, #224]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 80036b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 80a1 	beq.w	8003808 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036c6:	4b34      	ldr	r3, [pc, #208]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f003 030c 	and.w	r3, r3, #12
 80036ce:	2b08      	cmp	r3, #8
 80036d0:	d05c      	beq.n	800378c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d141      	bne.n	800375e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036da:	4b31      	ldr	r3, [pc, #196]	@ (80037a0 <HAL_RCC_OscConfig+0x478>)
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e0:	f7ff fb10 	bl	8002d04 <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036e8:	f7ff fb0c 	bl	8002d04 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e087      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036fa:	4b27      	ldr	r3, [pc, #156]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1f0      	bne.n	80036e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69da      	ldr	r2, [r3, #28]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	431a      	orrs	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003714:	019b      	lsls	r3, r3, #6
 8003716:	431a      	orrs	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800371c:	085b      	lsrs	r3, r3, #1
 800371e:	3b01      	subs	r3, #1
 8003720:	041b      	lsls	r3, r3, #16
 8003722:	431a      	orrs	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003728:	061b      	lsls	r3, r3, #24
 800372a:	491b      	ldr	r1, [pc, #108]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 800372c:	4313      	orrs	r3, r2
 800372e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003730:	4b1b      	ldr	r3, [pc, #108]	@ (80037a0 <HAL_RCC_OscConfig+0x478>)
 8003732:	2201      	movs	r2, #1
 8003734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003736:	f7ff fae5 	bl	8002d04 <HAL_GetTick>
 800373a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800373c:	e008      	b.n	8003750 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800373e:	f7ff fae1 	bl	8002d04 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d901      	bls.n	8003750 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e05c      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003750:	4b11      	ldr	r3, [pc, #68]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0f0      	beq.n	800373e <HAL_RCC_OscConfig+0x416>
 800375c:	e054      	b.n	8003808 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800375e:	4b10      	ldr	r3, [pc, #64]	@ (80037a0 <HAL_RCC_OscConfig+0x478>)
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003764:	f7ff face 	bl	8002d04 <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800376c:	f7ff faca 	bl	8002d04 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e045      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800377e:	4b06      	ldr	r3, [pc, #24]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1f0      	bne.n	800376c <HAL_RCC_OscConfig+0x444>
 800378a:	e03d      	b.n	8003808 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d107      	bne.n	80037a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e038      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
 8003798:	40023800 	.word	0x40023800
 800379c:	40007000 	.word	0x40007000
 80037a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003814 <HAL_RCC_OscConfig+0x4ec>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d028      	beq.n	8003804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037bc:	429a      	cmp	r2, r3
 80037be:	d121      	bne.n	8003804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d11a      	bne.n	8003804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80037d4:	4013      	ands	r3, r2
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80037da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037dc:	4293      	cmp	r3, r2
 80037de:	d111      	bne.n	8003804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ea:	085b      	lsrs	r3, r3, #1
 80037ec:	3b01      	subs	r3, #1
 80037ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d107      	bne.n	8003804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003800:	429a      	cmp	r2, r3
 8003802:	d001      	beq.n	8003808 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e000      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3718      	adds	r7, #24
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40023800 	.word	0x40023800

08003818 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e0cc      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800382c:	4b68      	ldr	r3, [pc, #416]	@ (80039d0 <HAL_RCC_ClockConfig+0x1b8>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0307 	and.w	r3, r3, #7
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	429a      	cmp	r2, r3
 8003838:	d90c      	bls.n	8003854 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800383a:	4b65      	ldr	r3, [pc, #404]	@ (80039d0 <HAL_RCC_ClockConfig+0x1b8>)
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	b2d2      	uxtb	r2, r2
 8003840:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003842:	4b63      	ldr	r3, [pc, #396]	@ (80039d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0307 	and.w	r3, r3, #7
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	429a      	cmp	r2, r3
 800384e:	d001      	beq.n	8003854 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e0b8      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d020      	beq.n	80038a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b00      	cmp	r3, #0
 800386a:	d005      	beq.n	8003878 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800386c:	4b59      	ldr	r3, [pc, #356]	@ (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	4a58      	ldr	r2, [pc, #352]	@ (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003872:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003876:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0308 	and.w	r3, r3, #8
 8003880:	2b00      	cmp	r3, #0
 8003882:	d005      	beq.n	8003890 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003884:	4b53      	ldr	r3, [pc, #332]	@ (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	4a52      	ldr	r2, [pc, #328]	@ (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 800388a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800388e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003890:	4b50      	ldr	r3, [pc, #320]	@ (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	494d      	ldr	r1, [pc, #308]	@ (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d044      	beq.n	8003938 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d107      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038b6:	4b47      	ldr	r3, [pc, #284]	@ (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d119      	bne.n	80038f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e07f      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d003      	beq.n	80038d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038d2:	2b03      	cmp	r3, #3
 80038d4:	d107      	bne.n	80038e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038d6:	4b3f      	ldr	r3, [pc, #252]	@ (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d109      	bne.n	80038f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e06f      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e6:	4b3b      	ldr	r3, [pc, #236]	@ (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e067      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038f6:	4b37      	ldr	r3, [pc, #220]	@ (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f023 0203 	bic.w	r2, r3, #3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	4934      	ldr	r1, [pc, #208]	@ (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003904:	4313      	orrs	r3, r2
 8003906:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003908:	f7ff f9fc 	bl	8002d04 <HAL_GetTick>
 800390c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800390e:	e00a      	b.n	8003926 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003910:	f7ff f9f8 	bl	8002d04 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800391e:	4293      	cmp	r3, r2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e04f      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003926:	4b2b      	ldr	r3, [pc, #172]	@ (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 020c 	and.w	r2, r3, #12
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	429a      	cmp	r2, r3
 8003936:	d1eb      	bne.n	8003910 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003938:	4b25      	ldr	r3, [pc, #148]	@ (80039d0 <HAL_RCC_ClockConfig+0x1b8>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	429a      	cmp	r2, r3
 8003944:	d20c      	bcs.n	8003960 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003946:	4b22      	ldr	r3, [pc, #136]	@ (80039d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800394e:	4b20      	ldr	r3, [pc, #128]	@ (80039d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	429a      	cmp	r2, r3
 800395a:	d001      	beq.n	8003960 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e032      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b00      	cmp	r3, #0
 800396a:	d008      	beq.n	800397e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800396c:	4b19      	ldr	r3, [pc, #100]	@ (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	4916      	ldr	r1, [pc, #88]	@ (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 800397a:	4313      	orrs	r3, r2
 800397c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0308 	and.w	r3, r3, #8
 8003986:	2b00      	cmp	r3, #0
 8003988:	d009      	beq.n	800399e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800398a:	4b12      	ldr	r3, [pc, #72]	@ (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	490e      	ldr	r1, [pc, #56]	@ (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 800399a:	4313      	orrs	r3, r2
 800399c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800399e:	f000 f821 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 80039a2:	4602      	mov	r2, r0
 80039a4:	4b0b      	ldr	r3, [pc, #44]	@ (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	091b      	lsrs	r3, r3, #4
 80039aa:	f003 030f 	and.w	r3, r3, #15
 80039ae:	490a      	ldr	r1, [pc, #40]	@ (80039d8 <HAL_RCC_ClockConfig+0x1c0>)
 80039b0:	5ccb      	ldrb	r3, [r1, r3]
 80039b2:	fa22 f303 	lsr.w	r3, r2, r3
 80039b6:	4a09      	ldr	r2, [pc, #36]	@ (80039dc <HAL_RCC_ClockConfig+0x1c4>)
 80039b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039ba:	4b09      	ldr	r3, [pc, #36]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c8>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4618      	mov	r0, r3
 80039c0:	f7ff f95c 	bl	8002c7c <HAL_InitTick>

  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	40023c00 	.word	0x40023c00
 80039d4:	40023800 	.word	0x40023800
 80039d8:	08005f98 	.word	0x08005f98
 80039dc:	20000058 	.word	0x20000058
 80039e0:	2000005c 	.word	0x2000005c

080039e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039e8:	b090      	sub	sp, #64	@ 0x40
 80039ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039ec:	2300      	movs	r3, #0
 80039ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80039f0:	2300      	movs	r3, #0
 80039f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039f4:	2300      	movs	r3, #0
 80039f6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80039f8:	2300      	movs	r3, #0
 80039fa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039fc:	4b59      	ldr	r3, [pc, #356]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x180>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f003 030c 	and.w	r3, r3, #12
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	d00d      	beq.n	8003a24 <HAL_RCC_GetSysClockFreq+0x40>
 8003a08:	2b08      	cmp	r3, #8
 8003a0a:	f200 80a1 	bhi.w	8003b50 <HAL_RCC_GetSysClockFreq+0x16c>
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d002      	beq.n	8003a18 <HAL_RCC_GetSysClockFreq+0x34>
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	d003      	beq.n	8003a1e <HAL_RCC_GetSysClockFreq+0x3a>
 8003a16:	e09b      	b.n	8003b50 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a18:	4b53      	ldr	r3, [pc, #332]	@ (8003b68 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a1a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003a1c:	e09b      	b.n	8003b56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a1e:	4b53      	ldr	r3, [pc, #332]	@ (8003b6c <HAL_RCC_GetSysClockFreq+0x188>)
 8003a20:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a22:	e098      	b.n	8003b56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a24:	4b4f      	ldr	r3, [pc, #316]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a2c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a2e:	4b4d      	ldr	r3, [pc, #308]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d028      	beq.n	8003a8c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a3a:	4b4a      	ldr	r3, [pc, #296]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	099b      	lsrs	r3, r3, #6
 8003a40:	2200      	movs	r2, #0
 8003a42:	623b      	str	r3, [r7, #32]
 8003a44:	627a      	str	r2, [r7, #36]	@ 0x24
 8003a46:	6a3b      	ldr	r3, [r7, #32]
 8003a48:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	4b47      	ldr	r3, [pc, #284]	@ (8003b6c <HAL_RCC_GetSysClockFreq+0x188>)
 8003a50:	fb03 f201 	mul.w	r2, r3, r1
 8003a54:	2300      	movs	r3, #0
 8003a56:	fb00 f303 	mul.w	r3, r0, r3
 8003a5a:	4413      	add	r3, r2
 8003a5c:	4a43      	ldr	r2, [pc, #268]	@ (8003b6c <HAL_RCC_GetSysClockFreq+0x188>)
 8003a5e:	fba0 1202 	umull	r1, r2, r0, r2
 8003a62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a64:	460a      	mov	r2, r1
 8003a66:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003a68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a6a:	4413      	add	r3, r2
 8003a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a70:	2200      	movs	r2, #0
 8003a72:	61bb      	str	r3, [r7, #24]
 8003a74:	61fa      	str	r2, [r7, #28]
 8003a76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003a7e:	f7fc ffa1 	bl	80009c4 <__aeabi_uldivmod>
 8003a82:	4602      	mov	r2, r0
 8003a84:	460b      	mov	r3, r1
 8003a86:	4613      	mov	r3, r2
 8003a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a8a:	e053      	b.n	8003b34 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a8c:	4b35      	ldr	r3, [pc, #212]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	099b      	lsrs	r3, r3, #6
 8003a92:	2200      	movs	r2, #0
 8003a94:	613b      	str	r3, [r7, #16]
 8003a96:	617a      	str	r2, [r7, #20]
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003a9e:	f04f 0b00 	mov.w	fp, #0
 8003aa2:	4652      	mov	r2, sl
 8003aa4:	465b      	mov	r3, fp
 8003aa6:	f04f 0000 	mov.w	r0, #0
 8003aaa:	f04f 0100 	mov.w	r1, #0
 8003aae:	0159      	lsls	r1, r3, #5
 8003ab0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ab4:	0150      	lsls	r0, r2, #5
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	460b      	mov	r3, r1
 8003aba:	ebb2 080a 	subs.w	r8, r2, sl
 8003abe:	eb63 090b 	sbc.w	r9, r3, fp
 8003ac2:	f04f 0200 	mov.w	r2, #0
 8003ac6:	f04f 0300 	mov.w	r3, #0
 8003aca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003ace:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003ad2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003ad6:	ebb2 0408 	subs.w	r4, r2, r8
 8003ada:	eb63 0509 	sbc.w	r5, r3, r9
 8003ade:	f04f 0200 	mov.w	r2, #0
 8003ae2:	f04f 0300 	mov.w	r3, #0
 8003ae6:	00eb      	lsls	r3, r5, #3
 8003ae8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003aec:	00e2      	lsls	r2, r4, #3
 8003aee:	4614      	mov	r4, r2
 8003af0:	461d      	mov	r5, r3
 8003af2:	eb14 030a 	adds.w	r3, r4, sl
 8003af6:	603b      	str	r3, [r7, #0]
 8003af8:	eb45 030b 	adc.w	r3, r5, fp
 8003afc:	607b      	str	r3, [r7, #4]
 8003afe:	f04f 0200 	mov.w	r2, #0
 8003b02:	f04f 0300 	mov.w	r3, #0
 8003b06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b0a:	4629      	mov	r1, r5
 8003b0c:	028b      	lsls	r3, r1, #10
 8003b0e:	4621      	mov	r1, r4
 8003b10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b14:	4621      	mov	r1, r4
 8003b16:	028a      	lsls	r2, r1, #10
 8003b18:	4610      	mov	r0, r2
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b1e:	2200      	movs	r2, #0
 8003b20:	60bb      	str	r3, [r7, #8]
 8003b22:	60fa      	str	r2, [r7, #12]
 8003b24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b28:	f7fc ff4c 	bl	80009c4 <__aeabi_uldivmod>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	460b      	mov	r3, r1
 8003b30:	4613      	mov	r3, r2
 8003b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b34:	4b0b      	ldr	r3, [pc, #44]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	0c1b      	lsrs	r3, r3, #16
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	3301      	adds	r3, #1
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003b44:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b4c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b4e:	e002      	b.n	8003b56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b50:	4b05      	ldr	r3, [pc, #20]	@ (8003b68 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b52:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3740      	adds	r7, #64	@ 0x40
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b62:	bf00      	nop
 8003b64:	40023800 	.word	0x40023800
 8003b68:	00f42400 	.word	0x00f42400
 8003b6c:	017d7840 	.word	0x017d7840

08003b70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e07b      	b.n	8003c7a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d108      	bne.n	8003b9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b92:	d009      	beq.n	8003ba8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	61da      	str	r2, [r3, #28]
 8003b9a:	e005      	b.n	8003ba8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d106      	bne.n	8003bc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7fe ff4c 	bl	8002a60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2202      	movs	r2, #2
 8003bcc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bde:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	431a      	orrs	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c22:	431a      	orrs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c2c:	ea42 0103 	orr.w	r1, r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c34:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	0c1b      	lsrs	r3, r3, #16
 8003c46:	f003 0104 	and.w	r1, r3, #4
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c4e:	f003 0210 	and.w	r2, r3, #16
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	69da      	ldr	r2, [r3, #28]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b088      	sub	sp, #32
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	60f8      	str	r0, [r7, #12]
 8003c8a:	60b9      	str	r1, [r7, #8]
 8003c8c:	603b      	str	r3, [r7, #0]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c92:	2300      	movs	r3, #0
 8003c94:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d101      	bne.n	8003ca4 <HAL_SPI_Transmit+0x22>
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	e12d      	b.n	8003f00 <HAL_SPI_Transmit+0x27e>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cac:	f7ff f82a 	bl	8002d04 <HAL_GetTick>
 8003cb0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003cb2:	88fb      	ldrh	r3, [r7, #6]
 8003cb4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d002      	beq.n	8003cc8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003cc6:	e116      	b.n	8003ef6 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d002      	beq.n	8003cd4 <HAL_SPI_Transmit+0x52>
 8003cce:	88fb      	ldrh	r3, [r7, #6]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d102      	bne.n	8003cda <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003cd8:	e10d      	b.n	8003ef6 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2203      	movs	r2, #3
 8003cde:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	88fa      	ldrh	r2, [r7, #6]
 8003cf2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	88fa      	ldrh	r2, [r7, #6]
 8003cf8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d20:	d10f      	bne.n	8003d42 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d40:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d4c:	2b40      	cmp	r3, #64	@ 0x40
 8003d4e:	d007      	beq.n	8003d60 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d68:	d14f      	bne.n	8003e0a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d002      	beq.n	8003d78 <HAL_SPI_Transmit+0xf6>
 8003d72:	8afb      	ldrh	r3, [r7, #22]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d142      	bne.n	8003dfe <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d7c:	881a      	ldrh	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d88:	1c9a      	adds	r2, r3, #2
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	3b01      	subs	r3, #1
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d9c:	e02f      	b.n	8003dfe <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d112      	bne.n	8003dd2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db0:	881a      	ldrh	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dbc:	1c9a      	adds	r2, r3, #2
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003dd0:	e015      	b.n	8003dfe <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dd2:	f7fe ff97 	bl	8002d04 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d803      	bhi.n	8003dea <HAL_SPI_Transmit+0x168>
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de8:	d102      	bne.n	8003df0 <HAL_SPI_Transmit+0x16e>
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d106      	bne.n	8003dfe <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003dfc:	e07b      	b.n	8003ef6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1ca      	bne.n	8003d9e <HAL_SPI_Transmit+0x11c>
 8003e08:	e050      	b.n	8003eac <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d002      	beq.n	8003e18 <HAL_SPI_Transmit+0x196>
 8003e12:	8afb      	ldrh	r3, [r7, #22]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d144      	bne.n	8003ea2 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	330c      	adds	r3, #12
 8003e22:	7812      	ldrb	r2, [r2, #0]
 8003e24:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e2a:	1c5a      	adds	r2, r3, #1
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	3b01      	subs	r3, #1
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003e3e:	e030      	b.n	8003ea2 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d113      	bne.n	8003e76 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	330c      	adds	r3, #12
 8003e58:	7812      	ldrb	r2, [r2, #0]
 8003e5a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e60:	1c5a      	adds	r2, r3, #1
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003e74:	e015      	b.n	8003ea2 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e76:	f7fe ff45 	bl	8002d04 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d803      	bhi.n	8003e8e <HAL_SPI_Transmit+0x20c>
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e8c:	d102      	bne.n	8003e94 <HAL_SPI_Transmit+0x212>
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d106      	bne.n	8003ea2 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003ea0:	e029      	b.n	8003ef6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1c9      	bne.n	8003e40 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	6839      	ldr	r1, [r7, #0]
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f000 fbed 	bl	8004690 <SPI_EndRxTxTransaction>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d002      	beq.n	8003ec2 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10a      	bne.n	8003ee0 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003eca:	2300      	movs	r3, #0
 8003ecc:	613b      	str	r3, [r7, #16]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	613b      	str	r3, [r7, #16]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	613b      	str	r3, [r7, #16]
 8003ede:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d002      	beq.n	8003eee <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	77fb      	strb	r3, [r7, #31]
 8003eec:	e003      	b.n	8003ef6 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003efe:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3720      	adds	r7, #32
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b088      	sub	sp, #32
 8003f0c:	af02      	add	r7, sp, #8
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	603b      	str	r3, [r7, #0]
 8003f14:	4613      	mov	r3, r2
 8003f16:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d002      	beq.n	8003f2e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003f28:	2302      	movs	r3, #2
 8003f2a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f2c:	e0fb      	b.n	8004126 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f36:	d112      	bne.n	8003f5e <HAL_SPI_Receive+0x56>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10e      	bne.n	8003f5e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2204      	movs	r2, #4
 8003f44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003f48:	88fa      	ldrh	r2, [r7, #6]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	9300      	str	r3, [sp, #0]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	68b9      	ldr	r1, [r7, #8]
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f000 f8ef 	bl	8004138 <HAL_SPI_TransmitReceive>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	e0e8      	b.n	8004130 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d101      	bne.n	8003f6c <HAL_SPI_Receive+0x64>
 8003f68:	2302      	movs	r3, #2
 8003f6a:	e0e1      	b.n	8004130 <HAL_SPI_Receive+0x228>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f74:	f7fe fec6 	bl	8002d04 <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d002      	beq.n	8003f86 <HAL_SPI_Receive+0x7e>
 8003f80:	88fb      	ldrh	r3, [r7, #6]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d102      	bne.n	8003f8c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f8a:	e0cc      	b.n	8004126 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2204      	movs	r2, #4
 8003f90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	88fa      	ldrh	r2, [r7, #6]
 8003fa4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	88fa      	ldrh	r2, [r7, #6]
 8003faa:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fd2:	d10f      	bne.n	8003ff4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fe2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003ff2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ffe:	2b40      	cmp	r3, #64	@ 0x40
 8004000:	d007      	beq.n	8004012 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004010:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d16a      	bne.n	80040f0 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800401a:	e032      	b.n	8004082 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b01      	cmp	r3, #1
 8004028:	d115      	bne.n	8004056 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f103 020c 	add.w	r2, r3, #12
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004036:	7812      	ldrb	r2, [r2, #0]
 8004038:	b2d2      	uxtb	r2, r2
 800403a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004040:	1c5a      	adds	r2, r3, #1
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800404a:	b29b      	uxth	r3, r3
 800404c:	3b01      	subs	r3, #1
 800404e:	b29a      	uxth	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004054:	e015      	b.n	8004082 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004056:	f7fe fe55 	bl	8002d04 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	683a      	ldr	r2, [r7, #0]
 8004062:	429a      	cmp	r2, r3
 8004064:	d803      	bhi.n	800406e <HAL_SPI_Receive+0x166>
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800406c:	d102      	bne.n	8004074 <HAL_SPI_Receive+0x16c>
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d106      	bne.n	8004082 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004080:	e051      	b.n	8004126 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004086:	b29b      	uxth	r3, r3
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1c7      	bne.n	800401c <HAL_SPI_Receive+0x114>
 800408c:	e035      	b.n	80040fa <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b01      	cmp	r3, #1
 800409a:	d113      	bne.n	80040c4 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68da      	ldr	r2, [r3, #12]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a6:	b292      	uxth	r2, r2
 80040a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ae:	1c9a      	adds	r2, r3, #2
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	3b01      	subs	r3, #1
 80040bc:	b29a      	uxth	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80040c2:	e015      	b.n	80040f0 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040c4:	f7fe fe1e 	bl	8002d04 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d803      	bhi.n	80040dc <HAL_SPI_Receive+0x1d4>
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040da:	d102      	bne.n	80040e2 <HAL_SPI_Receive+0x1da>
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d106      	bne.n	80040f0 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80040ee:	e01a      	b.n	8004126 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1c9      	bne.n	800408e <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	6839      	ldr	r1, [r7, #0]
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f000 fa60 	bl	80045c4 <SPI_EndRxTransaction>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d002      	beq.n	8004110 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2220      	movs	r2, #32
 800410e:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004114:	2b00      	cmp	r3, #0
 8004116:	d002      	beq.n	800411e <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	75fb      	strb	r3, [r7, #23]
 800411c:	e003      	b.n	8004126 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800412e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3718      	adds	r7, #24
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b08c      	sub	sp, #48	@ 0x30
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
 8004144:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004146:	2301      	movs	r3, #1
 8004148:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800414a:	2300      	movs	r3, #0
 800414c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004156:	2b01      	cmp	r3, #1
 8004158:	d101      	bne.n	800415e <HAL_SPI_TransmitReceive+0x26>
 800415a:	2302      	movs	r3, #2
 800415c:	e198      	b.n	8004490 <HAL_SPI_TransmitReceive+0x358>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004166:	f7fe fdcd 	bl	8002d04 <HAL_GetTick>
 800416a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004172:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800417c:	887b      	ldrh	r3, [r7, #2]
 800417e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004180:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004184:	2b01      	cmp	r3, #1
 8004186:	d00f      	beq.n	80041a8 <HAL_SPI_TransmitReceive+0x70>
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800418e:	d107      	bne.n	80041a0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d103      	bne.n	80041a0 <HAL_SPI_TransmitReceive+0x68>
 8004198:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800419c:	2b04      	cmp	r3, #4
 800419e:	d003      	beq.n	80041a8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80041a0:	2302      	movs	r3, #2
 80041a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80041a6:	e16d      	b.n	8004484 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d005      	beq.n	80041ba <HAL_SPI_TransmitReceive+0x82>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d002      	beq.n	80041ba <HAL_SPI_TransmitReceive+0x82>
 80041b4:	887b      	ldrh	r3, [r7, #2]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d103      	bne.n	80041c2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80041c0:	e160      	b.n	8004484 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b04      	cmp	r3, #4
 80041cc:	d003      	beq.n	80041d6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2205      	movs	r2, #5
 80041d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	887a      	ldrh	r2, [r7, #2]
 80041e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	887a      	ldrh	r2, [r7, #2]
 80041ec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	887a      	ldrh	r2, [r7, #2]
 80041f8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	887a      	ldrh	r2, [r7, #2]
 80041fe:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004216:	2b40      	cmp	r3, #64	@ 0x40
 8004218:	d007      	beq.n	800422a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004228:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004232:	d17c      	bne.n	800432e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d002      	beq.n	8004242 <HAL_SPI_TransmitReceive+0x10a>
 800423c:	8b7b      	ldrh	r3, [r7, #26]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d16a      	bne.n	8004318 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004246:	881a      	ldrh	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004252:	1c9a      	adds	r2, r3, #2
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800425c:	b29b      	uxth	r3, r3
 800425e:	3b01      	subs	r3, #1
 8004260:	b29a      	uxth	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004266:	e057      	b.n	8004318 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b02      	cmp	r3, #2
 8004274:	d11b      	bne.n	80042ae <HAL_SPI_TransmitReceive+0x176>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800427a:	b29b      	uxth	r3, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	d016      	beq.n	80042ae <HAL_SPI_TransmitReceive+0x176>
 8004280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004282:	2b01      	cmp	r3, #1
 8004284:	d113      	bne.n	80042ae <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800428a:	881a      	ldrh	r2, [r3, #0]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004296:	1c9a      	adds	r2, r3, #2
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	3b01      	subs	r3, #1
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042aa:	2300      	movs	r3, #0
 80042ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d119      	bne.n	80042f0 <HAL_SPI_TransmitReceive+0x1b8>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d014      	beq.n	80042f0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68da      	ldr	r2, [r3, #12]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042d0:	b292      	uxth	r2, r2
 80042d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042d8:	1c9a      	adds	r2, r3, #2
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	3b01      	subs	r3, #1
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042ec:	2301      	movs	r3, #1
 80042ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80042f0:	f7fe fd08 	bl	8002d04 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d80b      	bhi.n	8004318 <HAL_SPI_TransmitReceive+0x1e0>
 8004300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004306:	d007      	beq.n	8004318 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004316:	e0b5      	b.n	8004484 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800431c:	b29b      	uxth	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1a2      	bne.n	8004268 <HAL_SPI_TransmitReceive+0x130>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004326:	b29b      	uxth	r3, r3
 8004328:	2b00      	cmp	r3, #0
 800432a:	d19d      	bne.n	8004268 <HAL_SPI_TransmitReceive+0x130>
 800432c:	e080      	b.n	8004430 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <HAL_SPI_TransmitReceive+0x204>
 8004336:	8b7b      	ldrh	r3, [r7, #26]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d16f      	bne.n	800441c <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	330c      	adds	r3, #12
 8004346:	7812      	ldrb	r2, [r2, #0]
 8004348:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800434e:	1c5a      	adds	r2, r3, #1
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004358:	b29b      	uxth	r3, r3
 800435a:	3b01      	subs	r3, #1
 800435c:	b29a      	uxth	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004362:	e05b      	b.n	800441c <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b02      	cmp	r3, #2
 8004370:	d11c      	bne.n	80043ac <HAL_SPI_TransmitReceive+0x274>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004376:	b29b      	uxth	r3, r3
 8004378:	2b00      	cmp	r3, #0
 800437a:	d017      	beq.n	80043ac <HAL_SPI_TransmitReceive+0x274>
 800437c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800437e:	2b01      	cmp	r3, #1
 8004380:	d114      	bne.n	80043ac <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	330c      	adds	r3, #12
 800438c:	7812      	ldrb	r2, [r2, #0]
 800438e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004394:	1c5a      	adds	r2, r3, #1
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800439e:	b29b      	uxth	r3, r3
 80043a0:	3b01      	subs	r3, #1
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043a8:	2300      	movs	r3, #0
 80043aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d119      	bne.n	80043ee <HAL_SPI_TransmitReceive+0x2b6>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043be:	b29b      	uxth	r3, r3
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d014      	beq.n	80043ee <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68da      	ldr	r2, [r3, #12]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ce:	b2d2      	uxtb	r2, r2
 80043d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043d6:	1c5a      	adds	r2, r3, #1
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	3b01      	subs	r3, #1
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043ea:	2301      	movs	r3, #1
 80043ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80043ee:	f7fe fc89 	bl	8002d04 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d803      	bhi.n	8004406 <HAL_SPI_TransmitReceive+0x2ce>
 80043fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004404:	d102      	bne.n	800440c <HAL_SPI_TransmitReceive+0x2d4>
 8004406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004408:	2b00      	cmp	r3, #0
 800440a:	d107      	bne.n	800441c <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800441a:	e033      	b.n	8004484 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004420:	b29b      	uxth	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d19e      	bne.n	8004364 <HAL_SPI_TransmitReceive+0x22c>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800442a:	b29b      	uxth	r3, r3
 800442c:	2b00      	cmp	r3, #0
 800442e:	d199      	bne.n	8004364 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004430:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004432:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 f92b 	bl	8004690 <SPI_EndRxTxTransaction>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d006      	beq.n	800444e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2220      	movs	r2, #32
 800444a:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800444c:	e01a      	b.n	8004484 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10a      	bne.n	800446c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004456:	2300      	movs	r3, #0
 8004458:	617b      	str	r3, [r7, #20]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	617b      	str	r3, [r7, #20]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	617b      	str	r3, [r7, #20]
 800446a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004470:	2b00      	cmp	r3, #0
 8004472:	d003      	beq.n	800447c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800447a:	e003      	b.n	8004484 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800448c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8004490:	4618      	mov	r0, r3
 8004492:	3730      	adds	r7, #48	@ 0x30
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80044a6:	b2db      	uxtb	r3, r3
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b088      	sub	sp, #32
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	603b      	str	r3, [r7, #0]
 80044c0:	4613      	mov	r3, r2
 80044c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80044c4:	f7fe fc1e 	bl	8002d04 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044cc:	1a9b      	subs	r3, r3, r2
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	4413      	add	r3, r2
 80044d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80044d4:	f7fe fc16 	bl	8002d04 <HAL_GetTick>
 80044d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80044da:	4b39      	ldr	r3, [pc, #228]	@ (80045c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	015b      	lsls	r3, r3, #5
 80044e0:	0d1b      	lsrs	r3, r3, #20
 80044e2:	69fa      	ldr	r2, [r7, #28]
 80044e4:	fb02 f303 	mul.w	r3, r2, r3
 80044e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044ea:	e054      	b.n	8004596 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f2:	d050      	beq.n	8004596 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80044f4:	f7fe fc06 	bl	8002d04 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	69fa      	ldr	r2, [r7, #28]
 8004500:	429a      	cmp	r2, r3
 8004502:	d902      	bls.n	800450a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d13d      	bne.n	8004586 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	685a      	ldr	r2, [r3, #4]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004518:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004522:	d111      	bne.n	8004548 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800452c:	d004      	beq.n	8004538 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004536:	d107      	bne.n	8004548 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004546:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800454c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004550:	d10f      	bne.n	8004572 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004560:	601a      	str	r2, [r3, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004570:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e017      	b.n	80045b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d101      	bne.n	8004590 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800458c:	2300      	movs	r3, #0
 800458e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	3b01      	subs	r3, #1
 8004594:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	689a      	ldr	r2, [r3, #8]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	4013      	ands	r3, r2
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	bf0c      	ite	eq
 80045a6:	2301      	moveq	r3, #1
 80045a8:	2300      	movne	r3, #0
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	461a      	mov	r2, r3
 80045ae:	79fb      	ldrb	r3, [r7, #7]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d19b      	bne.n	80044ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3720      	adds	r7, #32
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	20000058 	.word	0x20000058

080045c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af02      	add	r7, sp, #8
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045d8:	d111      	bne.n	80045fe <SPI_EndRxTransaction+0x3a>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045e2:	d004      	beq.n	80045ee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045ec:	d107      	bne.n	80045fe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045fc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004606:	d12a      	bne.n	800465e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004610:	d012      	beq.n	8004638 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	9300      	str	r3, [sp, #0]
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2200      	movs	r2, #0
 800461a:	2180      	movs	r1, #128	@ 0x80
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f7ff ff49 	bl	80044b4 <SPI_WaitFlagStateUntilTimeout>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d02d      	beq.n	8004684 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800462c:	f043 0220 	orr.w	r2, r3, #32
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e026      	b.n	8004686 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	9300      	str	r3, [sp, #0]
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	2200      	movs	r2, #0
 8004640:	2101      	movs	r1, #1
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f7ff ff36 	bl	80044b4 <SPI_WaitFlagStateUntilTimeout>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d01a      	beq.n	8004684 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004652:	f043 0220 	orr.w	r2, r3, #32
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e013      	b.n	8004686 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	9300      	str	r3, [sp, #0]
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	2200      	movs	r2, #0
 8004666:	2101      	movs	r1, #1
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f7ff ff23 	bl	80044b4 <SPI_WaitFlagStateUntilTimeout>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d007      	beq.n	8004684 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004678:	f043 0220 	orr.w	r2, r3, #32
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e000      	b.n	8004686 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b088      	sub	sp, #32
 8004694:	af02      	add	r7, sp, #8
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	2201      	movs	r2, #1
 80046a4:	2102      	movs	r1, #2
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f7ff ff04 	bl	80044b4 <SPI_WaitFlagStateUntilTimeout>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d007      	beq.n	80046c2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046b6:	f043 0220 	orr.w	r2, r3, #32
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e032      	b.n	8004728 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80046c2:	4b1b      	ldr	r3, [pc, #108]	@ (8004730 <SPI_EndRxTxTransaction+0xa0>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a1b      	ldr	r2, [pc, #108]	@ (8004734 <SPI_EndRxTxTransaction+0xa4>)
 80046c8:	fba2 2303 	umull	r2, r3, r2, r3
 80046cc:	0d5b      	lsrs	r3, r3, #21
 80046ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80046d2:	fb02 f303 	mul.w	r3, r2, r3
 80046d6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046e0:	d112      	bne.n	8004708 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	9300      	str	r3, [sp, #0]
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	2200      	movs	r2, #0
 80046ea:	2180      	movs	r1, #128	@ 0x80
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f7ff fee1 	bl	80044b4 <SPI_WaitFlagStateUntilTimeout>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d016      	beq.n	8004726 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046fc:	f043 0220 	orr.w	r2, r3, #32
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e00f      	b.n	8004728 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00a      	beq.n	8004724 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	3b01      	subs	r3, #1
 8004712:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800471e:	2b80      	cmp	r3, #128	@ 0x80
 8004720:	d0f2      	beq.n	8004708 <SPI_EndRxTxTransaction+0x78>
 8004722:	e000      	b.n	8004726 <SPI_EndRxTxTransaction+0x96>
        break;
 8004724:	bf00      	nop
  }

  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3718      	adds	r7, #24
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	20000058 	.word	0x20000058
 8004734:	165e9f81 	.word	0x165e9f81

08004738 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e041      	b.n	80047ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d106      	bne.n	8004764 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7fe f9c6 	bl	8002af0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2202      	movs	r2, #2
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	3304      	adds	r3, #4
 8004774:	4619      	mov	r1, r3
 8004776:	4610      	mov	r0, r2
 8004778:	f000 fa70 	bl	8004c5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3708      	adds	r7, #8
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
	...

080047d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d001      	beq.n	80047f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e044      	b.n	800487a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2202      	movs	r2, #2
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68da      	ldr	r2, [r3, #12]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f042 0201 	orr.w	r2, r2, #1
 8004806:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a1e      	ldr	r2, [pc, #120]	@ (8004888 <HAL_TIM_Base_Start_IT+0xb0>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d018      	beq.n	8004844 <HAL_TIM_Base_Start_IT+0x6c>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800481a:	d013      	beq.n	8004844 <HAL_TIM_Base_Start_IT+0x6c>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a1a      	ldr	r2, [pc, #104]	@ (800488c <HAL_TIM_Base_Start_IT+0xb4>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d00e      	beq.n	8004844 <HAL_TIM_Base_Start_IT+0x6c>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a19      	ldr	r2, [pc, #100]	@ (8004890 <HAL_TIM_Base_Start_IT+0xb8>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d009      	beq.n	8004844 <HAL_TIM_Base_Start_IT+0x6c>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a17      	ldr	r2, [pc, #92]	@ (8004894 <HAL_TIM_Base_Start_IT+0xbc>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d004      	beq.n	8004844 <HAL_TIM_Base_Start_IT+0x6c>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a16      	ldr	r2, [pc, #88]	@ (8004898 <HAL_TIM_Base_Start_IT+0xc0>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d111      	bne.n	8004868 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f003 0307 	and.w	r3, r3, #7
 800484e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2b06      	cmp	r3, #6
 8004854:	d010      	beq.n	8004878 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f042 0201 	orr.w	r2, r2, #1
 8004864:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004866:	e007      	b.n	8004878 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f042 0201 	orr.w	r2, r2, #1
 8004876:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	40010000 	.word	0x40010000
 800488c:	40000400 	.word	0x40000400
 8004890:	40000800 	.word	0x40000800
 8004894:	40000c00 	.word	0x40000c00
 8004898:	40014000 	.word	0x40014000

0800489c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d020      	beq.n	8004900 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d01b      	beq.n	8004900 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f06f 0202 	mvn.w	r2, #2
 80048d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	f003 0303 	and.w	r3, r3, #3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d003      	beq.n	80048ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f999 	bl	8004c1e <HAL_TIM_IC_CaptureCallback>
 80048ec:	e005      	b.n	80048fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f98b 	bl	8004c0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f99c 	bl	8004c32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	f003 0304 	and.w	r3, r3, #4
 8004906:	2b00      	cmp	r3, #0
 8004908:	d020      	beq.n	800494c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f003 0304 	and.w	r3, r3, #4
 8004910:	2b00      	cmp	r3, #0
 8004912:	d01b      	beq.n	800494c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f06f 0204 	mvn.w	r2, #4
 800491c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2202      	movs	r2, #2
 8004922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f973 	bl	8004c1e <HAL_TIM_IC_CaptureCallback>
 8004938:	e005      	b.n	8004946 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f965 	bl	8004c0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f976 	bl	8004c32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	f003 0308 	and.w	r3, r3, #8
 8004952:	2b00      	cmp	r3, #0
 8004954:	d020      	beq.n	8004998 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f003 0308 	and.w	r3, r3, #8
 800495c:	2b00      	cmp	r3, #0
 800495e:	d01b      	beq.n	8004998 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f06f 0208 	mvn.w	r2, #8
 8004968:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2204      	movs	r2, #4
 800496e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	f003 0303 	and.w	r3, r3, #3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d003      	beq.n	8004986 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f94d 	bl	8004c1e <HAL_TIM_IC_CaptureCallback>
 8004984:	e005      	b.n	8004992 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f93f 	bl	8004c0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 f950 	bl	8004c32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	f003 0310 	and.w	r3, r3, #16
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d020      	beq.n	80049e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f003 0310 	and.w	r3, r3, #16
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d01b      	beq.n	80049e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f06f 0210 	mvn.w	r2, #16
 80049b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2208      	movs	r2, #8
 80049ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f927 	bl	8004c1e <HAL_TIM_IC_CaptureCallback>
 80049d0:	e005      	b.n	80049de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f919 	bl	8004c0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f92a 	bl	8004c32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00c      	beq.n	8004a08 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f003 0301 	and.w	r3, r3, #1
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d007      	beq.n	8004a08 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f06f 0201 	mvn.w	r2, #1
 8004a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7fd fdb6 	bl	8002574 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00c      	beq.n	8004a2c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d007      	beq.n	8004a2c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 fab6 	bl	8004f98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00c      	beq.n	8004a50 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d007      	beq.n	8004a50 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 f8fb 	bl	8004c46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	f003 0320 	and.w	r3, r3, #32
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00c      	beq.n	8004a74 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f003 0320 	and.w	r3, r3, #32
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d007      	beq.n	8004a74 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f06f 0220 	mvn.w	r2, #32
 8004a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 fa88 	bl	8004f84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a74:	bf00      	nop
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a86:	2300      	movs	r3, #0
 8004a88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d101      	bne.n	8004a98 <HAL_TIM_ConfigClockSource+0x1c>
 8004a94:	2302      	movs	r3, #2
 8004a96:	e0b4      	b.n	8004c02 <HAL_TIM_ConfigClockSource+0x186>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004ab6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004abe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ad0:	d03e      	beq.n	8004b50 <HAL_TIM_ConfigClockSource+0xd4>
 8004ad2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ad6:	f200 8087 	bhi.w	8004be8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ada:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ade:	f000 8086 	beq.w	8004bee <HAL_TIM_ConfigClockSource+0x172>
 8004ae2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ae6:	d87f      	bhi.n	8004be8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ae8:	2b70      	cmp	r3, #112	@ 0x70
 8004aea:	d01a      	beq.n	8004b22 <HAL_TIM_ConfigClockSource+0xa6>
 8004aec:	2b70      	cmp	r3, #112	@ 0x70
 8004aee:	d87b      	bhi.n	8004be8 <HAL_TIM_ConfigClockSource+0x16c>
 8004af0:	2b60      	cmp	r3, #96	@ 0x60
 8004af2:	d050      	beq.n	8004b96 <HAL_TIM_ConfigClockSource+0x11a>
 8004af4:	2b60      	cmp	r3, #96	@ 0x60
 8004af6:	d877      	bhi.n	8004be8 <HAL_TIM_ConfigClockSource+0x16c>
 8004af8:	2b50      	cmp	r3, #80	@ 0x50
 8004afa:	d03c      	beq.n	8004b76 <HAL_TIM_ConfigClockSource+0xfa>
 8004afc:	2b50      	cmp	r3, #80	@ 0x50
 8004afe:	d873      	bhi.n	8004be8 <HAL_TIM_ConfigClockSource+0x16c>
 8004b00:	2b40      	cmp	r3, #64	@ 0x40
 8004b02:	d058      	beq.n	8004bb6 <HAL_TIM_ConfigClockSource+0x13a>
 8004b04:	2b40      	cmp	r3, #64	@ 0x40
 8004b06:	d86f      	bhi.n	8004be8 <HAL_TIM_ConfigClockSource+0x16c>
 8004b08:	2b30      	cmp	r3, #48	@ 0x30
 8004b0a:	d064      	beq.n	8004bd6 <HAL_TIM_ConfigClockSource+0x15a>
 8004b0c:	2b30      	cmp	r3, #48	@ 0x30
 8004b0e:	d86b      	bhi.n	8004be8 <HAL_TIM_ConfigClockSource+0x16c>
 8004b10:	2b20      	cmp	r3, #32
 8004b12:	d060      	beq.n	8004bd6 <HAL_TIM_ConfigClockSource+0x15a>
 8004b14:	2b20      	cmp	r3, #32
 8004b16:	d867      	bhi.n	8004be8 <HAL_TIM_ConfigClockSource+0x16c>
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d05c      	beq.n	8004bd6 <HAL_TIM_ConfigClockSource+0x15a>
 8004b1c:	2b10      	cmp	r3, #16
 8004b1e:	d05a      	beq.n	8004bd6 <HAL_TIM_ConfigClockSource+0x15a>
 8004b20:	e062      	b.n	8004be8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b32:	f000 f999 	bl	8004e68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004b44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	609a      	str	r2, [r3, #8]
      break;
 8004b4e:	e04f      	b.n	8004bf0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b60:	f000 f982 	bl	8004e68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	689a      	ldr	r2, [r3, #8]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b72:	609a      	str	r2, [r3, #8]
      break;
 8004b74:	e03c      	b.n	8004bf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b82:	461a      	mov	r2, r3
 8004b84:	f000 f8f6 	bl	8004d74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2150      	movs	r1, #80	@ 0x50
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 f94f 	bl	8004e32 <TIM_ITRx_SetConfig>
      break;
 8004b94:	e02c      	b.n	8004bf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	f000 f915 	bl	8004dd2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2160      	movs	r1, #96	@ 0x60
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 f93f 	bl	8004e32 <TIM_ITRx_SetConfig>
      break;
 8004bb4:	e01c      	b.n	8004bf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	f000 f8d6 	bl	8004d74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2140      	movs	r1, #64	@ 0x40
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 f92f 	bl	8004e32 <TIM_ITRx_SetConfig>
      break;
 8004bd4:	e00c      	b.n	8004bf0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4619      	mov	r1, r3
 8004be0:	4610      	mov	r0, r2
 8004be2:	f000 f926 	bl	8004e32 <TIM_ITRx_SetConfig>
      break;
 8004be6:	e003      	b.n	8004bf0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	73fb      	strb	r3, [r7, #15]
      break;
 8004bec:	e000      	b.n	8004bf0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004bee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	b083      	sub	sp, #12
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c12:	bf00      	nop
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b083      	sub	sp, #12
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c26:	bf00      	nop
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c32:	b480      	push	{r7}
 8004c34:	b083      	sub	sp, #12
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c3a:	bf00      	nop
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b083      	sub	sp, #12
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c4e:	bf00      	nop
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
	...

08004c5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a3a      	ldr	r2, [pc, #232]	@ (8004d58 <TIM_Base_SetConfig+0xfc>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d00f      	beq.n	8004c94 <TIM_Base_SetConfig+0x38>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c7a:	d00b      	beq.n	8004c94 <TIM_Base_SetConfig+0x38>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a37      	ldr	r2, [pc, #220]	@ (8004d5c <TIM_Base_SetConfig+0x100>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d007      	beq.n	8004c94 <TIM_Base_SetConfig+0x38>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a36      	ldr	r2, [pc, #216]	@ (8004d60 <TIM_Base_SetConfig+0x104>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d003      	beq.n	8004c94 <TIM_Base_SetConfig+0x38>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a35      	ldr	r2, [pc, #212]	@ (8004d64 <TIM_Base_SetConfig+0x108>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d108      	bne.n	8004ca6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a2b      	ldr	r2, [pc, #172]	@ (8004d58 <TIM_Base_SetConfig+0xfc>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d01b      	beq.n	8004ce6 <TIM_Base_SetConfig+0x8a>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cb4:	d017      	beq.n	8004ce6 <TIM_Base_SetConfig+0x8a>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a28      	ldr	r2, [pc, #160]	@ (8004d5c <TIM_Base_SetConfig+0x100>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d013      	beq.n	8004ce6 <TIM_Base_SetConfig+0x8a>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a27      	ldr	r2, [pc, #156]	@ (8004d60 <TIM_Base_SetConfig+0x104>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d00f      	beq.n	8004ce6 <TIM_Base_SetConfig+0x8a>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a26      	ldr	r2, [pc, #152]	@ (8004d64 <TIM_Base_SetConfig+0x108>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d00b      	beq.n	8004ce6 <TIM_Base_SetConfig+0x8a>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a25      	ldr	r2, [pc, #148]	@ (8004d68 <TIM_Base_SetConfig+0x10c>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d007      	beq.n	8004ce6 <TIM_Base_SetConfig+0x8a>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a24      	ldr	r2, [pc, #144]	@ (8004d6c <TIM_Base_SetConfig+0x110>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d003      	beq.n	8004ce6 <TIM_Base_SetConfig+0x8a>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a23      	ldr	r2, [pc, #140]	@ (8004d70 <TIM_Base_SetConfig+0x114>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d108      	bne.n	8004cf8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	689a      	ldr	r2, [r3, #8]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a0e      	ldr	r2, [pc, #56]	@ (8004d58 <TIM_Base_SetConfig+0xfc>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d103      	bne.n	8004d2c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	691a      	ldr	r2, [r3, #16]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d105      	bne.n	8004d4a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	f023 0201 	bic.w	r2, r3, #1
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	611a      	str	r2, [r3, #16]
  }
}
 8004d4a:	bf00      	nop
 8004d4c:	3714      	adds	r7, #20
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	40010000 	.word	0x40010000
 8004d5c:	40000400 	.word	0x40000400
 8004d60:	40000800 	.word	0x40000800
 8004d64:	40000c00 	.word	0x40000c00
 8004d68:	40014000 	.word	0x40014000
 8004d6c:	40014400 	.word	0x40014400
 8004d70:	40014800 	.word	0x40014800

08004d74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b087      	sub	sp, #28
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6a1b      	ldr	r3, [r3, #32]
 8004d84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	f023 0201 	bic.w	r2, r3, #1
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	011b      	lsls	r3, r3, #4
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	f023 030a 	bic.w	r3, r3, #10
 8004db0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	621a      	str	r2, [r3, #32]
}
 8004dc6:	bf00      	nop
 8004dc8:	371c      	adds	r7, #28
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b087      	sub	sp, #28
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	60f8      	str	r0, [r7, #12]
 8004dda:	60b9      	str	r1, [r7, #8]
 8004ddc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	f023 0210 	bic.w	r2, r3, #16
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004dfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	031b      	lsls	r3, r3, #12
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e0e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	011b      	lsls	r3, r3, #4
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	621a      	str	r2, [r3, #32]
}
 8004e26:	bf00      	nop
 8004e28:	371c      	adds	r7, #28
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr

08004e32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e32:	b480      	push	{r7}
 8004e34:	b085      	sub	sp, #20
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
 8004e3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	f043 0307 	orr.w	r3, r3, #7
 8004e54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	609a      	str	r2, [r3, #8]
}
 8004e5c:	bf00      	nop
 8004e5e:	3714      	adds	r7, #20
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b087      	sub	sp, #28
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
 8004e74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	021a      	lsls	r2, r3, #8
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	609a      	str	r2, [r3, #8]
}
 8004e9c:	bf00      	nop
 8004e9e:	371c      	adds	r7, #28
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d101      	bne.n	8004ec0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	e050      	b.n	8004f62 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2202      	movs	r2, #2
 8004ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ee6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a1c      	ldr	r2, [pc, #112]	@ (8004f70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d018      	beq.n	8004f36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f0c:	d013      	beq.n	8004f36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a18      	ldr	r2, [pc, #96]	@ (8004f74 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d00e      	beq.n	8004f36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a16      	ldr	r2, [pc, #88]	@ (8004f78 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d009      	beq.n	8004f36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a15      	ldr	r2, [pc, #84]	@ (8004f7c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d004      	beq.n	8004f36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a13      	ldr	r2, [pc, #76]	@ (8004f80 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d10c      	bne.n	8004f50 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68ba      	ldr	r2, [r7, #8]
 8004f4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3714      	adds	r7, #20
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	40010000 	.word	0x40010000
 8004f74:	40000400 	.word	0x40000400
 8004f78:	40000800 	.word	0x40000800
 8004f7c:	40000c00 	.word	0x40000c00
 8004f80:	40014000 	.word	0x40014000

08004f84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <memset>:
 8004fac:	4402      	add	r2, r0
 8004fae:	4603      	mov	r3, r0
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d100      	bne.n	8004fb6 <memset+0xa>
 8004fb4:	4770      	bx	lr
 8004fb6:	f803 1b01 	strb.w	r1, [r3], #1
 8004fba:	e7f9      	b.n	8004fb0 <memset+0x4>

08004fbc <__libc_init_array>:
 8004fbc:	b570      	push	{r4, r5, r6, lr}
 8004fbe:	4d0d      	ldr	r5, [pc, #52]	@ (8004ff4 <__libc_init_array+0x38>)
 8004fc0:	4c0d      	ldr	r4, [pc, #52]	@ (8004ff8 <__libc_init_array+0x3c>)
 8004fc2:	1b64      	subs	r4, r4, r5
 8004fc4:	10a4      	asrs	r4, r4, #2
 8004fc6:	2600      	movs	r6, #0
 8004fc8:	42a6      	cmp	r6, r4
 8004fca:	d109      	bne.n	8004fe0 <__libc_init_array+0x24>
 8004fcc:	4d0b      	ldr	r5, [pc, #44]	@ (8004ffc <__libc_init_array+0x40>)
 8004fce:	4c0c      	ldr	r4, [pc, #48]	@ (8005000 <__libc_init_array+0x44>)
 8004fd0:	f000 f826 	bl	8005020 <_init>
 8004fd4:	1b64      	subs	r4, r4, r5
 8004fd6:	10a4      	asrs	r4, r4, #2
 8004fd8:	2600      	movs	r6, #0
 8004fda:	42a6      	cmp	r6, r4
 8004fdc:	d105      	bne.n	8004fea <__libc_init_array+0x2e>
 8004fde:	bd70      	pop	{r4, r5, r6, pc}
 8004fe0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fe4:	4798      	blx	r3
 8004fe6:	3601      	adds	r6, #1
 8004fe8:	e7ee      	b.n	8004fc8 <__libc_init_array+0xc>
 8004fea:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fee:	4798      	blx	r3
 8004ff0:	3601      	adds	r6, #1
 8004ff2:	e7f2      	b.n	8004fda <__libc_init_array+0x1e>
 8004ff4:	08005fb0 	.word	0x08005fb0
 8004ff8:	08005fb0 	.word	0x08005fb0
 8004ffc:	08005fb0 	.word	0x08005fb0
 8005000:	08005fb4 	.word	0x08005fb4

08005004 <memcpy>:
 8005004:	440a      	add	r2, r1
 8005006:	4291      	cmp	r1, r2
 8005008:	f100 33ff 	add.w	r3, r0, #4294967295
 800500c:	d100      	bne.n	8005010 <memcpy+0xc>
 800500e:	4770      	bx	lr
 8005010:	b510      	push	{r4, lr}
 8005012:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005016:	f803 4f01 	strb.w	r4, [r3, #1]!
 800501a:	4291      	cmp	r1, r2
 800501c:	d1f9      	bne.n	8005012 <memcpy+0xe>
 800501e:	bd10      	pop	{r4, pc}

08005020 <_init>:
 8005020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005022:	bf00      	nop
 8005024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005026:	bc08      	pop	{r3}
 8005028:	469e      	mov	lr, r3
 800502a:	4770      	bx	lr

0800502c <_fini>:
 800502c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800502e:	bf00      	nop
 8005030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005032:	bc08      	pop	{r3}
 8005034:	469e      	mov	lr, r3
 8005036:	4770      	bx	lr
